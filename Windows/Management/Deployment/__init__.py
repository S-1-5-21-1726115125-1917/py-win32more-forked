from __future__ import annotations
from ctypes import c_void_p, POINTER, CFUNCTYPE, WINFUNCTYPE, cdll, windll
from typing import Generic, TypeVar
K = TypeVar('T')
T = TypeVar('T')
V = TypeVar('V')
TProgress = TypeVar('TProgress')
TResult = TypeVar('TResult')
TSender = TypeVar('TSender')
from Windows import ARCH, MissingType, c_char_p_no, c_wchar_p_no, Byte, SByte, Char, Int16, UInt16, Int32, UInt32, Int64, UInt64, IntPtr, UIntPtr, Single, Double, String, Boolean, Void, Guid, SUCCEEDED, FAILED, cfunctype, winfunctype, commethod, cfunctype_pointer, winfunctype_pointer, press, make_head, EasyCastStructure, EasyCastUnion, ComPtr
from Windows._winrt import WinRT_String, winrt_commethod, winrt_mixinmethod, winrt_classmethod, winrt_factorymethod, winrt_activatemethod
import Windows.Win32.System.WinRT
import Windows.ApplicationModel
import Windows.Foundation
import Windows.Foundation.Collections
import Windows.Management.Deployment
import sys
_module = sys.modules[__name__]
def __getattr__(name):
    try:
        prototype = globals()[f'{name}_head']
    except KeyError:
        raise AttributeError(f"module '{__name__}' has no attribute '{name}'") from None
    setattr(_module, name, press(prototype))
    return getattr(_module, name)
AddPackageByAppInstallerOptions = UInt32
AddPackageByAppInstallerOptions_None: AddPackageByAppInstallerOptions = 0
AddPackageByAppInstallerOptions_InstallAllResources: AddPackageByAppInstallerOptions = 32
AddPackageByAppInstallerOptions_ForceTargetAppShutdown: AddPackageByAppInstallerOptions = 64
AddPackageByAppInstallerOptions_RequiredContentGroupOnly: AddPackageByAppInstallerOptions = 256
AddPackageByAppInstallerOptions_LimitToExistingPackages: AddPackageByAppInstallerOptions = 512
class AddPackageOptions(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _classid_ = 'Windows.Management.Deployment.AddPackageOptions'
    @winrt_activatemethod
    def New(cls) -> Windows.Management.Deployment.AddPackageOptions: ...
    @winrt_mixinmethod
    def get_DependencyPackageUris(self: Windows.Management.Deployment.IAddPackageOptions) -> Windows.Foundation.Collections.IVector[Windows.Foundation.Uri]: ...
    @winrt_mixinmethod
    def get_TargetVolume(self: Windows.Management.Deployment.IAddPackageOptions) -> Windows.Management.Deployment.PackageVolume: ...
    @winrt_mixinmethod
    def put_TargetVolume(self: Windows.Management.Deployment.IAddPackageOptions, value: Windows.Management.Deployment.PackageVolume) -> Void: ...
    @winrt_mixinmethod
    def get_OptionalPackageFamilyNames(self: Windows.Management.Deployment.IAddPackageOptions) -> Windows.Foundation.Collections.IVector[WinRT_String]: ...
    @winrt_mixinmethod
    def get_OptionalPackageUris(self: Windows.Management.Deployment.IAddPackageOptions) -> Windows.Foundation.Collections.IVector[Windows.Foundation.Uri]: ...
    @winrt_mixinmethod
    def get_RelatedPackageUris(self: Windows.Management.Deployment.IAddPackageOptions) -> Windows.Foundation.Collections.IVector[Windows.Foundation.Uri]: ...
    @winrt_mixinmethod
    def get_ExternalLocationUri(self: Windows.Management.Deployment.IAddPackageOptions) -> Windows.Foundation.Uri: ...
    @winrt_mixinmethod
    def put_ExternalLocationUri(self: Windows.Management.Deployment.IAddPackageOptions, value: Windows.Foundation.Uri) -> Void: ...
    @winrt_mixinmethod
    def get_StubPackageOption(self: Windows.Management.Deployment.IAddPackageOptions) -> Windows.Management.Deployment.StubPackageOption: ...
    @winrt_mixinmethod
    def put_StubPackageOption(self: Windows.Management.Deployment.IAddPackageOptions, value: Windows.Management.Deployment.StubPackageOption) -> Void: ...
    @winrt_mixinmethod
    def get_DeveloperMode(self: Windows.Management.Deployment.IAddPackageOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_DeveloperMode(self: Windows.Management.Deployment.IAddPackageOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_ForceAppShutdown(self: Windows.Management.Deployment.IAddPackageOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_ForceAppShutdown(self: Windows.Management.Deployment.IAddPackageOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_ForceTargetAppShutdown(self: Windows.Management.Deployment.IAddPackageOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_ForceTargetAppShutdown(self: Windows.Management.Deployment.IAddPackageOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_ForceUpdateFromAnyVersion(self: Windows.Management.Deployment.IAddPackageOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_ForceUpdateFromAnyVersion(self: Windows.Management.Deployment.IAddPackageOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_InstallAllResources(self: Windows.Management.Deployment.IAddPackageOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_InstallAllResources(self: Windows.Management.Deployment.IAddPackageOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_RequiredContentGroupOnly(self: Windows.Management.Deployment.IAddPackageOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_RequiredContentGroupOnly(self: Windows.Management.Deployment.IAddPackageOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_RetainFilesOnFailure(self: Windows.Management.Deployment.IAddPackageOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_RetainFilesOnFailure(self: Windows.Management.Deployment.IAddPackageOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_StageInPlace(self: Windows.Management.Deployment.IAddPackageOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_StageInPlace(self: Windows.Management.Deployment.IAddPackageOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_AllowUnsigned(self: Windows.Management.Deployment.IAddPackageOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_AllowUnsigned(self: Windows.Management.Deployment.IAddPackageOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_DeferRegistrationWhenPackagesAreInUse(self: Windows.Management.Deployment.IAddPackageOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_DeferRegistrationWhenPackagesAreInUse(self: Windows.Management.Deployment.IAddPackageOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_ExpectedDigests(self: Windows.Management.Deployment.IAddPackageOptions2) -> Windows.Foundation.Collections.IMap[Windows.Foundation.Uri, WinRT_String]: ...
    @winrt_mixinmethod
    def get_LimitToExistingPackages(self: Windows.Management.Deployment.IAddPackageOptions2) -> Boolean: ...
    @winrt_mixinmethod
    def put_LimitToExistingPackages(self: Windows.Management.Deployment.IAddPackageOptions2, value: Boolean) -> Void: ...
    DependencyPackageUris = property(get_DependencyPackageUris, None)
    TargetVolume = property(get_TargetVolume, put_TargetVolume)
    OptionalPackageFamilyNames = property(get_OptionalPackageFamilyNames, None)
    OptionalPackageUris = property(get_OptionalPackageUris, None)
    RelatedPackageUris = property(get_RelatedPackageUris, None)
    ExternalLocationUri = property(get_ExternalLocationUri, put_ExternalLocationUri)
    StubPackageOption = property(get_StubPackageOption, put_StubPackageOption)
    DeveloperMode = property(get_DeveloperMode, put_DeveloperMode)
    ForceAppShutdown = property(get_ForceAppShutdown, put_ForceAppShutdown)
    ForceTargetAppShutdown = property(get_ForceTargetAppShutdown, put_ForceTargetAppShutdown)
    ForceUpdateFromAnyVersion = property(get_ForceUpdateFromAnyVersion, put_ForceUpdateFromAnyVersion)
    InstallAllResources = property(get_InstallAllResources, put_InstallAllResources)
    RequiredContentGroupOnly = property(get_RequiredContentGroupOnly, put_RequiredContentGroupOnly)
    RetainFilesOnFailure = property(get_RetainFilesOnFailure, put_RetainFilesOnFailure)
    StageInPlace = property(get_StageInPlace, put_StageInPlace)
    AllowUnsigned = property(get_AllowUnsigned, put_AllowUnsigned)
    DeferRegistrationWhenPackagesAreInUse = property(get_DeferRegistrationWhenPackagesAreInUse, put_DeferRegistrationWhenPackagesAreInUse)
    ExpectedDigests = property(get_ExpectedDigests, None)
    LimitToExistingPackages = property(get_LimitToExistingPackages, put_LimitToExistingPackages)
class AppInstallerManager(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _classid_ = 'Windows.Management.Deployment.AppInstallerManager'
    @winrt_mixinmethod
    def SetAutoUpdateSettings(self: Windows.Management.Deployment.IAppInstallerManager, packageFamilyName: WinRT_String, appInstallerInfo: Windows.Management.Deployment.AutoUpdateSettingsOptions) -> Void: ...
    @winrt_mixinmethod
    def ClearAutoUpdateSettings(self: Windows.Management.Deployment.IAppInstallerManager, packageFamilyName: WinRT_String) -> Void: ...
    @winrt_mixinmethod
    def PauseAutoUpdatesUntil(self: Windows.Management.Deployment.IAppInstallerManager, packageFamilyName: WinRT_String, dateTime: Windows.Foundation.DateTime) -> Void: ...
    @winrt_classmethod
    def GetDefault(cls: Windows.Management.Deployment.IAppInstallerManagerStatics) -> Windows.Management.Deployment.AppInstallerManager: ...
    @winrt_classmethod
    def GetForSystem(cls: Windows.Management.Deployment.IAppInstallerManagerStatics) -> Windows.Management.Deployment.AppInstallerManager: ...
class AutoUpdateSettingsOptions(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _classid_ = 'Windows.Management.Deployment.AutoUpdateSettingsOptions'
    @winrt_activatemethod
    def New(cls) -> Windows.Management.Deployment.AutoUpdateSettingsOptions: ...
    @winrt_mixinmethod
    def get_Version(self: Windows.Management.Deployment.IAutoUpdateSettingsOptions) -> Windows.ApplicationModel.PackageVersion: ...
    @winrt_mixinmethod
    def put_Version(self: Windows.Management.Deployment.IAutoUpdateSettingsOptions, value: Windows.ApplicationModel.PackageVersion) -> Void: ...
    @winrt_mixinmethod
    def get_AppInstallerUri(self: Windows.Management.Deployment.IAutoUpdateSettingsOptions) -> Windows.Foundation.Uri: ...
    @winrt_mixinmethod
    def put_AppInstallerUri(self: Windows.Management.Deployment.IAutoUpdateSettingsOptions, value: Windows.Foundation.Uri) -> Void: ...
    @winrt_mixinmethod
    def get_OnLaunch(self: Windows.Management.Deployment.IAutoUpdateSettingsOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_OnLaunch(self: Windows.Management.Deployment.IAutoUpdateSettingsOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_HoursBetweenUpdateChecks(self: Windows.Management.Deployment.IAutoUpdateSettingsOptions) -> UInt32: ...
    @winrt_mixinmethod
    def put_HoursBetweenUpdateChecks(self: Windows.Management.Deployment.IAutoUpdateSettingsOptions, value: UInt32) -> Void: ...
    @winrt_mixinmethod
    def get_ShowPrompt(self: Windows.Management.Deployment.IAutoUpdateSettingsOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_ShowPrompt(self: Windows.Management.Deployment.IAutoUpdateSettingsOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_UpdateBlocksActivation(self: Windows.Management.Deployment.IAutoUpdateSettingsOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_UpdateBlocksActivation(self: Windows.Management.Deployment.IAutoUpdateSettingsOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_AutomaticBackgroundTask(self: Windows.Management.Deployment.IAutoUpdateSettingsOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_AutomaticBackgroundTask(self: Windows.Management.Deployment.IAutoUpdateSettingsOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_ForceUpdateFromAnyVersion(self: Windows.Management.Deployment.IAutoUpdateSettingsOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_ForceUpdateFromAnyVersion(self: Windows.Management.Deployment.IAutoUpdateSettingsOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_IsAutoRepairEnabled(self: Windows.Management.Deployment.IAutoUpdateSettingsOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_IsAutoRepairEnabled(self: Windows.Management.Deployment.IAutoUpdateSettingsOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_UpdateUris(self: Windows.Management.Deployment.IAutoUpdateSettingsOptions) -> Windows.Foundation.Collections.IVector[Windows.Foundation.Uri]: ...
    @winrt_mixinmethod
    def get_RepairUris(self: Windows.Management.Deployment.IAutoUpdateSettingsOptions) -> Windows.Foundation.Collections.IVector[Windows.Foundation.Uri]: ...
    @winrt_mixinmethod
    def get_DependencyPackageUris(self: Windows.Management.Deployment.IAutoUpdateSettingsOptions) -> Windows.Foundation.Collections.IVector[Windows.Foundation.Uri]: ...
    @winrt_mixinmethod
    def get_OptionalPackageUris(self: Windows.Management.Deployment.IAutoUpdateSettingsOptions) -> Windows.Foundation.Collections.IVector[Windows.Foundation.Uri]: ...
    @winrt_classmethod
    def CreateFromAppInstallerInfo(cls: Windows.Management.Deployment.IAutoUpdateSettingsOptionsStatics, appInstallerInfo: Windows.ApplicationModel.AppInstallerInfo) -> Windows.Management.Deployment.AutoUpdateSettingsOptions: ...
    Version = property(get_Version, put_Version)
    AppInstallerUri = property(get_AppInstallerUri, put_AppInstallerUri)
    OnLaunch = property(get_OnLaunch, put_OnLaunch)
    HoursBetweenUpdateChecks = property(get_HoursBetweenUpdateChecks, put_HoursBetweenUpdateChecks)
    ShowPrompt = property(get_ShowPrompt, put_ShowPrompt)
    UpdateBlocksActivation = property(get_UpdateBlocksActivation, put_UpdateBlocksActivation)
    AutomaticBackgroundTask = property(get_AutomaticBackgroundTask, put_AutomaticBackgroundTask)
    ForceUpdateFromAnyVersion = property(get_ForceUpdateFromAnyVersion, put_ForceUpdateFromAnyVersion)
    IsAutoRepairEnabled = property(get_IsAutoRepairEnabled, put_IsAutoRepairEnabled)
    UpdateUris = property(get_UpdateUris, None)
    RepairUris = property(get_RepairUris, None)
    DependencyPackageUris = property(get_DependencyPackageUris, None)
    OptionalPackageUris = property(get_OptionalPackageUris, None)
class CreateSharedPackageContainerOptions(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _classid_ = 'Windows.Management.Deployment.CreateSharedPackageContainerOptions'
    @winrt_activatemethod
    def New(cls) -> Windows.Management.Deployment.CreateSharedPackageContainerOptions: ...
    @winrt_mixinmethod
    def get_Members(self: Windows.Management.Deployment.ICreateSharedPackageContainerOptions) -> Windows.Foundation.Collections.IVector[Windows.Management.Deployment.SharedPackageContainerMember]: ...
    @winrt_mixinmethod
    def get_ForceAppShutdown(self: Windows.Management.Deployment.ICreateSharedPackageContainerOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_ForceAppShutdown(self: Windows.Management.Deployment.ICreateSharedPackageContainerOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_CreateCollisionOption(self: Windows.Management.Deployment.ICreateSharedPackageContainerOptions) -> Windows.Management.Deployment.SharedPackageContainerCreationCollisionOptions: ...
    @winrt_mixinmethod
    def put_CreateCollisionOption(self: Windows.Management.Deployment.ICreateSharedPackageContainerOptions, value: Windows.Management.Deployment.SharedPackageContainerCreationCollisionOptions) -> Void: ...
    Members = property(get_Members, None)
    ForceAppShutdown = property(get_ForceAppShutdown, put_ForceAppShutdown)
    CreateCollisionOption = property(get_CreateCollisionOption, put_CreateCollisionOption)
class CreateSharedPackageContainerResult(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _classid_ = 'Windows.Management.Deployment.CreateSharedPackageContainerResult'
    @winrt_mixinmethod
    def get_Container(self: Windows.Management.Deployment.ICreateSharedPackageContainerResult) -> Windows.Management.Deployment.SharedPackageContainer: ...
    @winrt_mixinmethod
    def get_Status(self: Windows.Management.Deployment.ICreateSharedPackageContainerResult) -> Windows.Management.Deployment.SharedPackageContainerOperationStatus: ...
    @winrt_mixinmethod
    def get_ExtendedError(self: Windows.Management.Deployment.ICreateSharedPackageContainerResult) -> Windows.Foundation.HResult: ...
    Container = property(get_Container, None)
    Status = property(get_Status, None)
    ExtendedError = property(get_ExtendedError, None)
class DeleteSharedPackageContainerOptions(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _classid_ = 'Windows.Management.Deployment.DeleteSharedPackageContainerOptions'
    @winrt_activatemethod
    def New(cls) -> Windows.Management.Deployment.DeleteSharedPackageContainerOptions: ...
    @winrt_mixinmethod
    def get_ForceAppShutdown(self: Windows.Management.Deployment.IDeleteSharedPackageContainerOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_ForceAppShutdown(self: Windows.Management.Deployment.IDeleteSharedPackageContainerOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_AllUsers(self: Windows.Management.Deployment.IDeleteSharedPackageContainerOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_AllUsers(self: Windows.Management.Deployment.IDeleteSharedPackageContainerOptions, value: Boolean) -> Void: ...
    ForceAppShutdown = property(get_ForceAppShutdown, put_ForceAppShutdown)
    AllUsers = property(get_AllUsers, put_AllUsers)
class DeleteSharedPackageContainerResult(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _classid_ = 'Windows.Management.Deployment.DeleteSharedPackageContainerResult'
    @winrt_mixinmethod
    def get_Status(self: Windows.Management.Deployment.IDeleteSharedPackageContainerResult) -> Windows.Management.Deployment.SharedPackageContainerOperationStatus: ...
    @winrt_mixinmethod
    def get_ExtendedError(self: Windows.Management.Deployment.IDeleteSharedPackageContainerResult) -> Windows.Foundation.HResult: ...
    Status = property(get_Status, None)
    ExtendedError = property(get_ExtendedError, None)
DeploymentOptions = UInt32
DeploymentOptions_None: DeploymentOptions = 0
DeploymentOptions_ForceApplicationShutdown: DeploymentOptions = 1
DeploymentOptions_DevelopmentMode: DeploymentOptions = 2
DeploymentOptions_InstallAllResources: DeploymentOptions = 32
DeploymentOptions_ForceTargetApplicationShutdown: DeploymentOptions = 64
DeploymentOptions_RequiredContentGroupOnly: DeploymentOptions = 256
DeploymentOptions_ForceUpdateFromAnyVersion: DeploymentOptions = 262144
DeploymentOptions_RetainFilesOnFailure: DeploymentOptions = 2097152
DeploymentOptions_StageInPlace: DeploymentOptions = 4194304
class DeploymentProgress(EasyCastStructure):
    state: Windows.Management.Deployment.DeploymentProgressState
    percentage: UInt32
DeploymentProgressState = Int32
DeploymentProgressState_Queued: DeploymentProgressState = 0
DeploymentProgressState_Processing: DeploymentProgressState = 1
class DeploymentResult(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _classid_ = 'Windows.Management.Deployment.DeploymentResult'
    @winrt_mixinmethod
    def get_ErrorText(self: Windows.Management.Deployment.IDeploymentResult) -> WinRT_String: ...
    @winrt_mixinmethod
    def get_ActivityId(self: Windows.Management.Deployment.IDeploymentResult) -> Guid: ...
    @winrt_mixinmethod
    def get_ExtendedErrorCode(self: Windows.Management.Deployment.IDeploymentResult) -> Windows.Foundation.HResult: ...
    @winrt_mixinmethod
    def get_IsRegistered(self: Windows.Management.Deployment.IDeploymentResult2) -> Boolean: ...
    ErrorText = property(get_ErrorText, None)
    ActivityId = property(get_ActivityId, None)
    ExtendedErrorCode = property(get_ExtendedErrorCode, None)
    IsRegistered = property(get_IsRegistered, None)
class FindSharedPackageContainerOptions(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _classid_ = 'Windows.Management.Deployment.FindSharedPackageContainerOptions'
    @winrt_activatemethod
    def New(cls) -> Windows.Management.Deployment.FindSharedPackageContainerOptions: ...
    @winrt_mixinmethod
    def get_Name(self: Windows.Management.Deployment.IFindSharedPackageContainerOptions) -> WinRT_String: ...
    @winrt_mixinmethod
    def put_Name(self: Windows.Management.Deployment.IFindSharedPackageContainerOptions, value: WinRT_String) -> Void: ...
    @winrt_mixinmethod
    def get_PackageFamilyName(self: Windows.Management.Deployment.IFindSharedPackageContainerOptions) -> WinRT_String: ...
    @winrt_mixinmethod
    def put_PackageFamilyName(self: Windows.Management.Deployment.IFindSharedPackageContainerOptions, value: WinRT_String) -> Void: ...
    Name = property(get_Name, put_Name)
    PackageFamilyName = property(get_PackageFamilyName, put_PackageFamilyName)
class IAddPackageOptions(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('05cee018-f68f-422b-95-a4-66-67-9e-c7-7f-c0')
    @winrt_commethod(6)
    def get_DependencyPackageUris(self) -> Windows.Foundation.Collections.IVector[Windows.Foundation.Uri]: ...
    @winrt_commethod(7)
    def get_TargetVolume(self) -> Windows.Management.Deployment.PackageVolume: ...
    @winrt_commethod(8)
    def put_TargetVolume(self, value: Windows.Management.Deployment.PackageVolume) -> Void: ...
    @winrt_commethod(9)
    def get_OptionalPackageFamilyNames(self) -> Windows.Foundation.Collections.IVector[WinRT_String]: ...
    @winrt_commethod(10)
    def get_OptionalPackageUris(self) -> Windows.Foundation.Collections.IVector[Windows.Foundation.Uri]: ...
    @winrt_commethod(11)
    def get_RelatedPackageUris(self) -> Windows.Foundation.Collections.IVector[Windows.Foundation.Uri]: ...
    @winrt_commethod(12)
    def get_ExternalLocationUri(self) -> Windows.Foundation.Uri: ...
    @winrt_commethod(13)
    def put_ExternalLocationUri(self, value: Windows.Foundation.Uri) -> Void: ...
    @winrt_commethod(14)
    def get_StubPackageOption(self) -> Windows.Management.Deployment.StubPackageOption: ...
    @winrt_commethod(15)
    def put_StubPackageOption(self, value: Windows.Management.Deployment.StubPackageOption) -> Void: ...
    @winrt_commethod(16)
    def get_DeveloperMode(self) -> Boolean: ...
    @winrt_commethod(17)
    def put_DeveloperMode(self, value: Boolean) -> Void: ...
    @winrt_commethod(18)
    def get_ForceAppShutdown(self) -> Boolean: ...
    @winrt_commethod(19)
    def put_ForceAppShutdown(self, value: Boolean) -> Void: ...
    @winrt_commethod(20)
    def get_ForceTargetAppShutdown(self) -> Boolean: ...
    @winrt_commethod(21)
    def put_ForceTargetAppShutdown(self, value: Boolean) -> Void: ...
    @winrt_commethod(22)
    def get_ForceUpdateFromAnyVersion(self) -> Boolean: ...
    @winrt_commethod(23)
    def put_ForceUpdateFromAnyVersion(self, value: Boolean) -> Void: ...
    @winrt_commethod(24)
    def get_InstallAllResources(self) -> Boolean: ...
    @winrt_commethod(25)
    def put_InstallAllResources(self, value: Boolean) -> Void: ...
    @winrt_commethod(26)
    def get_RequiredContentGroupOnly(self) -> Boolean: ...
    @winrt_commethod(27)
    def put_RequiredContentGroupOnly(self, value: Boolean) -> Void: ...
    @winrt_commethod(28)
    def get_RetainFilesOnFailure(self) -> Boolean: ...
    @winrt_commethod(29)
    def put_RetainFilesOnFailure(self, value: Boolean) -> Void: ...
    @winrt_commethod(30)
    def get_StageInPlace(self) -> Boolean: ...
    @winrt_commethod(31)
    def put_StageInPlace(self, value: Boolean) -> Void: ...
    @winrt_commethod(32)
    def get_AllowUnsigned(self) -> Boolean: ...
    @winrt_commethod(33)
    def put_AllowUnsigned(self, value: Boolean) -> Void: ...
    @winrt_commethod(34)
    def get_DeferRegistrationWhenPackagesAreInUse(self) -> Boolean: ...
    @winrt_commethod(35)
    def put_DeferRegistrationWhenPackagesAreInUse(self, value: Boolean) -> Void: ...
    DependencyPackageUris = property(get_DependencyPackageUris, None)
    TargetVolume = property(get_TargetVolume, put_TargetVolume)
    OptionalPackageFamilyNames = property(get_OptionalPackageFamilyNames, None)
    OptionalPackageUris = property(get_OptionalPackageUris, None)
    RelatedPackageUris = property(get_RelatedPackageUris, None)
    ExternalLocationUri = property(get_ExternalLocationUri, put_ExternalLocationUri)
    StubPackageOption = property(get_StubPackageOption, put_StubPackageOption)
    DeveloperMode = property(get_DeveloperMode, put_DeveloperMode)
    ForceAppShutdown = property(get_ForceAppShutdown, put_ForceAppShutdown)
    ForceTargetAppShutdown = property(get_ForceTargetAppShutdown, put_ForceTargetAppShutdown)
    ForceUpdateFromAnyVersion = property(get_ForceUpdateFromAnyVersion, put_ForceUpdateFromAnyVersion)
    InstallAllResources = property(get_InstallAllResources, put_InstallAllResources)
    RequiredContentGroupOnly = property(get_RequiredContentGroupOnly, put_RequiredContentGroupOnly)
    RetainFilesOnFailure = property(get_RetainFilesOnFailure, put_RetainFilesOnFailure)
    StageInPlace = property(get_StageInPlace, put_StageInPlace)
    AllowUnsigned = property(get_AllowUnsigned, put_AllowUnsigned)
    DeferRegistrationWhenPackagesAreInUse = property(get_DeferRegistrationWhenPackagesAreInUse, put_DeferRegistrationWhenPackagesAreInUse)
class IAddPackageOptions2(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('ee515828-bf33-40f7-84-af-1b-6f-ad-29-19-d7')
    @winrt_commethod(6)
    def get_ExpectedDigests(self) -> Windows.Foundation.Collections.IMap[Windows.Foundation.Uri, WinRT_String]: ...
    @winrt_commethod(7)
    def get_LimitToExistingPackages(self) -> Boolean: ...
    @winrt_commethod(8)
    def put_LimitToExistingPackages(self, value: Boolean) -> Void: ...
    ExpectedDigests = property(get_ExpectedDigests, None)
    LimitToExistingPackages = property(get_LimitToExistingPackages, put_LimitToExistingPackages)
class IAppInstallerManager(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('e7ee21c3-2103-53ee-9b-18-68-af-ea-b0-03-3d')
    @winrt_commethod(6)
    def SetAutoUpdateSettings(self, packageFamilyName: WinRT_String, appInstallerInfo: Windows.Management.Deployment.AutoUpdateSettingsOptions) -> Void: ...
    @winrt_commethod(7)
    def ClearAutoUpdateSettings(self, packageFamilyName: WinRT_String) -> Void: ...
    @winrt_commethod(8)
    def PauseAutoUpdatesUntil(self, packageFamilyName: WinRT_String, dateTime: Windows.Foundation.DateTime) -> Void: ...
class IAppInstallerManagerStatics(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('c95a6ed5-fc59-5336-9b-2e-2b-07-c5-e6-14-34')
    @winrt_commethod(6)
    def GetDefault(self) -> Windows.Management.Deployment.AppInstallerManager: ...
    @winrt_commethod(7)
    def GetForSystem(self) -> Windows.Management.Deployment.AppInstallerManager: ...
class IAutoUpdateSettingsOptions(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('67491d87-35e1-512a-89-68-1a-e8-8d-1b-e6-d3')
    @winrt_commethod(6)
    def get_Version(self) -> Windows.ApplicationModel.PackageVersion: ...
    @winrt_commethod(7)
    def put_Version(self, value: Windows.ApplicationModel.PackageVersion) -> Void: ...
    @winrt_commethod(8)
    def get_AppInstallerUri(self) -> Windows.Foundation.Uri: ...
    @winrt_commethod(9)
    def put_AppInstallerUri(self, value: Windows.Foundation.Uri) -> Void: ...
    @winrt_commethod(10)
    def get_OnLaunch(self) -> Boolean: ...
    @winrt_commethod(11)
    def put_OnLaunch(self, value: Boolean) -> Void: ...
    @winrt_commethod(12)
    def get_HoursBetweenUpdateChecks(self) -> UInt32: ...
    @winrt_commethod(13)
    def put_HoursBetweenUpdateChecks(self, value: UInt32) -> Void: ...
    @winrt_commethod(14)
    def get_ShowPrompt(self) -> Boolean: ...
    @winrt_commethod(15)
    def put_ShowPrompt(self, value: Boolean) -> Void: ...
    @winrt_commethod(16)
    def get_UpdateBlocksActivation(self) -> Boolean: ...
    @winrt_commethod(17)
    def put_UpdateBlocksActivation(self, value: Boolean) -> Void: ...
    @winrt_commethod(18)
    def get_AutomaticBackgroundTask(self) -> Boolean: ...
    @winrt_commethod(19)
    def put_AutomaticBackgroundTask(self, value: Boolean) -> Void: ...
    @winrt_commethod(20)
    def get_ForceUpdateFromAnyVersion(self) -> Boolean: ...
    @winrt_commethod(21)
    def put_ForceUpdateFromAnyVersion(self, value: Boolean) -> Void: ...
    @winrt_commethod(22)
    def get_IsAutoRepairEnabled(self) -> Boolean: ...
    @winrt_commethod(23)
    def put_IsAutoRepairEnabled(self, value: Boolean) -> Void: ...
    @winrt_commethod(24)
    def get_UpdateUris(self) -> Windows.Foundation.Collections.IVector[Windows.Foundation.Uri]: ...
    @winrt_commethod(25)
    def get_RepairUris(self) -> Windows.Foundation.Collections.IVector[Windows.Foundation.Uri]: ...
    @winrt_commethod(26)
    def get_DependencyPackageUris(self) -> Windows.Foundation.Collections.IVector[Windows.Foundation.Uri]: ...
    @winrt_commethod(27)
    def get_OptionalPackageUris(self) -> Windows.Foundation.Collections.IVector[Windows.Foundation.Uri]: ...
    Version = property(get_Version, put_Version)
    AppInstallerUri = property(get_AppInstallerUri, put_AppInstallerUri)
    OnLaunch = property(get_OnLaunch, put_OnLaunch)
    HoursBetweenUpdateChecks = property(get_HoursBetweenUpdateChecks, put_HoursBetweenUpdateChecks)
    ShowPrompt = property(get_ShowPrompt, put_ShowPrompt)
    UpdateBlocksActivation = property(get_UpdateBlocksActivation, put_UpdateBlocksActivation)
    AutomaticBackgroundTask = property(get_AutomaticBackgroundTask, put_AutomaticBackgroundTask)
    ForceUpdateFromAnyVersion = property(get_ForceUpdateFromAnyVersion, put_ForceUpdateFromAnyVersion)
    IsAutoRepairEnabled = property(get_IsAutoRepairEnabled, put_IsAutoRepairEnabled)
    UpdateUris = property(get_UpdateUris, None)
    RepairUris = property(get_RepairUris, None)
    DependencyPackageUris = property(get_DependencyPackageUris, None)
    OptionalPackageUris = property(get_OptionalPackageUris, None)
class IAutoUpdateSettingsOptionsStatics(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('887b337d-0c05-54d0-bd-49-3b-b7-a2-c0-84-cb')
    @winrt_commethod(6)
    def CreateFromAppInstallerInfo(self, appInstallerInfo: Windows.ApplicationModel.AppInstallerInfo) -> Windows.Management.Deployment.AutoUpdateSettingsOptions: ...
class ICreateSharedPackageContainerOptions(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('c2ab6ece-f664-5c8e-a4-b3-2a-33-27-6d-3d-de')
    @winrt_commethod(6)
    def get_Members(self) -> Windows.Foundation.Collections.IVector[Windows.Management.Deployment.SharedPackageContainerMember]: ...
    @winrt_commethod(7)
    def get_ForceAppShutdown(self) -> Boolean: ...
    @winrt_commethod(8)
    def put_ForceAppShutdown(self, value: Boolean) -> Void: ...
    @winrt_commethod(9)
    def get_CreateCollisionOption(self) -> Windows.Management.Deployment.SharedPackageContainerCreationCollisionOptions: ...
    @winrt_commethod(10)
    def put_CreateCollisionOption(self, value: Windows.Management.Deployment.SharedPackageContainerCreationCollisionOptions) -> Void: ...
    Members = property(get_Members, None)
    ForceAppShutdown = property(get_ForceAppShutdown, put_ForceAppShutdown)
    CreateCollisionOption = property(get_CreateCollisionOption, put_CreateCollisionOption)
class ICreateSharedPackageContainerResult(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('ce8810bf-151c-5707-b9-36-49-7e-56-4a-fc-7a')
    @winrt_commethod(6)
    def get_Container(self) -> Windows.Management.Deployment.SharedPackageContainer: ...
    @winrt_commethod(7)
    def get_Status(self) -> Windows.Management.Deployment.SharedPackageContainerOperationStatus: ...
    @winrt_commethod(8)
    def get_ExtendedError(self) -> Windows.Foundation.HResult: ...
    Container = property(get_Container, None)
    Status = property(get_Status, None)
    ExtendedError = property(get_ExtendedError, None)
class IDeleteSharedPackageContainerOptions(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('9d81865f-986e-5138-8b-5d-38-4d-8e-66-ed-6c')
    @winrt_commethod(6)
    def get_ForceAppShutdown(self) -> Boolean: ...
    @winrt_commethod(7)
    def put_ForceAppShutdown(self, value: Boolean) -> Void: ...
    @winrt_commethod(8)
    def get_AllUsers(self) -> Boolean: ...
    @winrt_commethod(9)
    def put_AllUsers(self, value: Boolean) -> Void: ...
    ForceAppShutdown = property(get_ForceAppShutdown, put_ForceAppShutdown)
    AllUsers = property(get_AllUsers, put_AllUsers)
class IDeleteSharedPackageContainerResult(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('35398884-5736-517b-85-bc-e5-98-c8-1a-b2-84')
    @winrt_commethod(6)
    def get_Status(self) -> Windows.Management.Deployment.SharedPackageContainerOperationStatus: ...
    @winrt_commethod(7)
    def get_ExtendedError(self) -> Windows.Foundation.HResult: ...
    Status = property(get_Status, None)
    ExtendedError = property(get_ExtendedError, None)
class IDeploymentResult(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('2563b9ae-b77d-4c1f-8a-7b-20-e6-ad-51-5e-f3')
    @winrt_commethod(6)
    def get_ErrorText(self) -> WinRT_String: ...
    @winrt_commethod(7)
    def get_ActivityId(self) -> Guid: ...
    @winrt_commethod(8)
    def get_ExtendedErrorCode(self) -> Windows.Foundation.HResult: ...
    ErrorText = property(get_ErrorText, None)
    ActivityId = property(get_ActivityId, None)
    ExtendedErrorCode = property(get_ExtendedErrorCode, None)
class IDeploymentResult2(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('fc0e715c-5a01-4bd7-bc-f1-38-1c-8c-82-e0-4a')
    @winrt_commethod(6)
    def get_IsRegistered(self) -> Boolean: ...
    IsRegistered = property(get_IsRegistered, None)
class IFindSharedPackageContainerOptions(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('b40fc8fe-8384-54cc-81-7d-ae-09-d3-b6-a6-06')
    @winrt_commethod(6)
    def get_Name(self) -> WinRT_String: ...
    @winrt_commethod(7)
    def put_Name(self, value: WinRT_String) -> Void: ...
    @winrt_commethod(8)
    def get_PackageFamilyName(self) -> WinRT_String: ...
    @winrt_commethod(9)
    def put_PackageFamilyName(self, value: WinRT_String) -> Void: ...
    Name = property(get_Name, put_Name)
    PackageFamilyName = property(get_PackageFamilyName, put_PackageFamilyName)
class IPackageAllUserProvisioningOptions(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('da35aa22-1de0-5d3e-99-ff-d2-4f-31-18-bf-5e')
    @winrt_commethod(6)
    def get_OptionalPackageFamilyNames(self) -> Windows.Foundation.Collections.IVector[WinRT_String]: ...
    @winrt_commethod(7)
    def get_ProjectionOrderPackageFamilyNames(self) -> Windows.Foundation.Collections.IVector[WinRT_String]: ...
    OptionalPackageFamilyNames = property(get_OptionalPackageFamilyNames, None)
    ProjectionOrderPackageFamilyNames = property(get_ProjectionOrderPackageFamilyNames, None)
class IPackageManager(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('9a7d4b65-5e8f-4fc7-a2-e5-7f-69-25-cb-8b-53')
    @winrt_commethod(6)
    def AddPackageAsync(self, packageUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], deploymentOptions: Windows.Management.Deployment.DeploymentOptions) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(7)
    def UpdatePackageAsync(self, packageUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], deploymentOptions: Windows.Management.Deployment.DeploymentOptions) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(8)
    def RemovePackageAsync(self, packageFullName: WinRT_String) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(9)
    def StagePackageAsync(self, packageUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri]) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(10)
    def RegisterPackageAsync(self, manifestUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], deploymentOptions: Windows.Management.Deployment.DeploymentOptions) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(11)
    def FindPackages(self) -> Windows.Foundation.Collections.IIterable[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(12)
    def FindPackagesByUserSecurityId(self, userSecurityId: WinRT_String) -> Windows.Foundation.Collections.IIterable[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(13)
    def FindPackagesByNamePublisher(self, packageName: WinRT_String, packagePublisher: WinRT_String) -> Windows.Foundation.Collections.IIterable[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(14)
    def FindPackagesByUserSecurityIdNamePublisher(self, userSecurityId: WinRT_String, packageName: WinRT_String, packagePublisher: WinRT_String) -> Windows.Foundation.Collections.IIterable[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(15)
    def FindUsers(self, packageFullName: WinRT_String) -> Windows.Foundation.Collections.IIterable[Windows.Management.Deployment.PackageUserInformation]: ...
    @winrt_commethod(16)
    def SetPackageState(self, packageFullName: WinRT_String, packageState: Windows.Management.Deployment.PackageState) -> Void: ...
    @winrt_commethod(17)
    def FindPackageByPackageFullName(self, packageFullName: WinRT_String) -> Windows.ApplicationModel.Package: ...
    @winrt_commethod(18)
    def CleanupPackageForUserAsync(self, packageName: WinRT_String, userSecurityId: WinRT_String) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(19)
    def FindPackagesByPackageFamilyName(self, packageFamilyName: WinRT_String) -> Windows.Foundation.Collections.IIterable[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(20)
    def FindPackagesByUserSecurityIdPackageFamilyName(self, userSecurityId: WinRT_String, packageFamilyName: WinRT_String) -> Windows.Foundation.Collections.IIterable[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(21)
    def FindPackageByUserSecurityIdPackageFullName(self, userSecurityId: WinRT_String, packageFullName: WinRT_String) -> Windows.ApplicationModel.Package: ...
class IPackageManager10(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('a7d7d07e-2e66-4093-ae-d5-e0-93-ed-87-b3-bb')
    @winrt_commethod(6)
    def ProvisionPackageForAllUsersWithOptionsAsync(self, mainPackageFamilyName: WinRT_String, options: Windows.Management.Deployment.PackageAllUserProvisioningOptions) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
class IPackageManager2(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('f7aad08d-0840-46f2-b5-d8-ca-d4-76-93-a0-95')
    @winrt_commethod(6)
    def RemovePackageWithOptionsAsync(self, packageFullName: WinRT_String, removalOptions: Windows.Management.Deployment.RemovalOptions) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(7)
    def StagePackageWithOptionsAsync(self, packageUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], deploymentOptions: Windows.Management.Deployment.DeploymentOptions) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(8)
    def RegisterPackageByFullNameAsync(self, mainPackageFullName: WinRT_String, dependencyPackageFullNames: Windows.Foundation.Collections.IIterable[WinRT_String], deploymentOptions: Windows.Management.Deployment.DeploymentOptions) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(9)
    def FindPackagesWithPackageTypes(self, packageTypes: Windows.Management.Deployment.PackageTypes) -> Windows.Foundation.Collections.IIterable[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(10)
    def FindPackagesByUserSecurityIdWithPackageTypes(self, userSecurityId: WinRT_String, packageTypes: Windows.Management.Deployment.PackageTypes) -> Windows.Foundation.Collections.IIterable[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(11)
    def FindPackagesByNamePublisherWithPackageTypes(self, packageName: WinRT_String, packagePublisher: WinRT_String, packageTypes: Windows.Management.Deployment.PackageTypes) -> Windows.Foundation.Collections.IIterable[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(12)
    def FindPackagesByUserSecurityIdNamePublisherWithPackageTypes(self, userSecurityId: WinRT_String, packageName: WinRT_String, packagePublisher: WinRT_String, packageTypes: Windows.Management.Deployment.PackageTypes) -> Windows.Foundation.Collections.IIterable[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(13)
    def FindPackagesByPackageFamilyNameWithPackageTypes(self, packageFamilyName: WinRT_String, packageTypes: Windows.Management.Deployment.PackageTypes) -> Windows.Foundation.Collections.IIterable[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(14)
    def FindPackagesByUserSecurityIdPackageFamilyNameWithPackageTypes(self, userSecurityId: WinRT_String, packageFamilyName: WinRT_String, packageTypes: Windows.Management.Deployment.PackageTypes) -> Windows.Foundation.Collections.IIterable[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(15)
    def StageUserDataAsync(self, packageFullName: WinRT_String) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
class IPackageManager3(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('daad9948-36f1-41a7-91-88-bc-26-3e-0d-cb-72')
    @winrt_commethod(6)
    def AddPackageVolumeAsync(self, packageStorePath: WinRT_String) -> Windows.Foundation.IAsyncOperation[Windows.Management.Deployment.PackageVolume]: ...
    @winrt_commethod(7)
    def AddPackageToVolumeAsync(self, packageUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], deploymentOptions: Windows.Management.Deployment.DeploymentOptions, targetVolume: Windows.Management.Deployment.PackageVolume) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(8)
    def ClearPackageStatus(self, packageFullName: WinRT_String, status: Windows.Management.Deployment.PackageStatus) -> Void: ...
    @winrt_commethod(9)
    def RegisterPackageWithAppDataVolumeAsync(self, manifestUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], deploymentOptions: Windows.Management.Deployment.DeploymentOptions, appDataVolume: Windows.Management.Deployment.PackageVolume) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(10)
    def FindPackageVolumeByName(self, volumeName: WinRT_String) -> Windows.Management.Deployment.PackageVolume: ...
    @winrt_commethod(11)
    def FindPackageVolumes(self) -> Windows.Foundation.Collections.IIterable[Windows.Management.Deployment.PackageVolume]: ...
    @winrt_commethod(12)
    def GetDefaultPackageVolume(self) -> Windows.Management.Deployment.PackageVolume: ...
    @winrt_commethod(13)
    def MovePackageToVolumeAsync(self, packageFullName: WinRT_String, deploymentOptions: Windows.Management.Deployment.DeploymentOptions, targetVolume: Windows.Management.Deployment.PackageVolume) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(14)
    def RemovePackageVolumeAsync(self, volume: Windows.Management.Deployment.PackageVolume) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(15)
    def SetDefaultPackageVolume(self, volume: Windows.Management.Deployment.PackageVolume) -> Void: ...
    @winrt_commethod(16)
    def SetPackageStatus(self, packageFullName: WinRT_String, status: Windows.Management.Deployment.PackageStatus) -> Void: ...
    @winrt_commethod(17)
    def SetPackageVolumeOfflineAsync(self, packageVolume: Windows.Management.Deployment.PackageVolume) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(18)
    def SetPackageVolumeOnlineAsync(self, packageVolume: Windows.Management.Deployment.PackageVolume) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(19)
    def StagePackageToVolumeAsync(self, packageUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], deploymentOptions: Windows.Management.Deployment.DeploymentOptions, targetVolume: Windows.Management.Deployment.PackageVolume) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(20)
    def StageUserDataWithOptionsAsync(self, packageFullName: WinRT_String, deploymentOptions: Windows.Management.Deployment.DeploymentOptions) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
class IPackageManager4(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('3c719963-bab6-46bf-8f-f7-da-47-19-23-0a-e6')
    @winrt_commethod(6)
    def GetPackageVolumesAsync(self) -> Windows.Foundation.IAsyncOperation[Windows.Foundation.Collections.IVectorView[Windows.Management.Deployment.PackageVolume]]: ...
class IPackageManager5(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('711f3117-1afd-4313-97-8c-9b-b6-e1-b8-64-a7')
    @winrt_commethod(6)
    def AddPackageToVolumeAndOptionalPackagesAsync(self, packageUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], deploymentOptions: Windows.Management.Deployment.DeploymentOptions, targetVolume: Windows.Management.Deployment.PackageVolume, optionalPackageFamilyNames: Windows.Foundation.Collections.IIterable[WinRT_String], externalPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri]) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(7)
    def StagePackageToVolumeAndOptionalPackagesAsync(self, packageUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], deploymentOptions: Windows.Management.Deployment.DeploymentOptions, targetVolume: Windows.Management.Deployment.PackageVolume, optionalPackageFamilyNames: Windows.Foundation.Collections.IIterable[WinRT_String], externalPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri]) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(8)
    def RegisterPackageByFamilyNameAndOptionalPackagesAsync(self, mainPackageFamilyName: WinRT_String, dependencyPackageFamilyNames: Windows.Foundation.Collections.IIterable[WinRT_String], deploymentOptions: Windows.Management.Deployment.DeploymentOptions, appDataVolume: Windows.Management.Deployment.PackageVolume, optionalPackageFamilyNames: Windows.Foundation.Collections.IIterable[WinRT_String]) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(9)
    def get_DebugSettings(self) -> Windows.Management.Deployment.PackageManagerDebugSettings: ...
    DebugSettings = property(get_DebugSettings, None)
class IPackageManager6(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('0847e909-53cd-4e4f-83-2e-57-d1-80-f6-e4-47')
    @winrt_commethod(6)
    def ProvisionPackageForAllUsersAsync(self, packageFamilyName: WinRT_String) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(7)
    def AddPackageByAppInstallerFileAsync(self, appInstallerFileUri: Windows.Foundation.Uri, options: Windows.Management.Deployment.AddPackageByAppInstallerOptions, targetVolume: Windows.Management.Deployment.PackageVolume) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(8)
    def RequestAddPackageByAppInstallerFileAsync(self, appInstallerFileUri: Windows.Foundation.Uri, options: Windows.Management.Deployment.AddPackageByAppInstallerOptions, targetVolume: Windows.Management.Deployment.PackageVolume) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(9)
    def AddPackageToVolumeAndRelatedSetAsync(self, packageUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], options: Windows.Management.Deployment.DeploymentOptions, targetVolume: Windows.Management.Deployment.PackageVolume, optionalPackageFamilyNames: Windows.Foundation.Collections.IIterable[WinRT_String], packageUrisToInstall: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], relatedPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri]) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(10)
    def StagePackageToVolumeAndRelatedSetAsync(self, packageUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], options: Windows.Management.Deployment.DeploymentOptions, targetVolume: Windows.Management.Deployment.PackageVolume, optionalPackageFamilyNames: Windows.Foundation.Collections.IIterable[WinRT_String], packageUrisToInstall: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], relatedPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri]) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(11)
    def RequestAddPackageAsync(self, packageUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], deploymentOptions: Windows.Management.Deployment.DeploymentOptions, targetVolume: Windows.Management.Deployment.PackageVolume, optionalPackageFamilyNames: Windows.Foundation.Collections.IIterable[WinRT_String], relatedPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri]) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
class IPackageManager7(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('f28654f4-2ba7-4b80-88-d6-be-15-f9-a2-3f-ba')
    @winrt_commethod(6)
    def RequestAddPackageAndRelatedSetAsync(self, packageUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], deploymentOptions: Windows.Management.Deployment.DeploymentOptions, targetVolume: Windows.Management.Deployment.PackageVolume, optionalPackageFamilyNames: Windows.Foundation.Collections.IIterable[WinRT_String], relatedPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], packageUrisToInstall: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri]) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
class IPackageManager8(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('b8575330-1298-4ee2-80-ee-7f-65-9c-5d-27-82')
    @winrt_commethod(6)
    def DeprovisionPackageForAllUsersAsync(self, packageFamilyName: WinRT_String) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
class IPackageManager9(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('1aa79035-cc71-4b2e-80-a6-c7-04-1d-85-79-a7')
    @winrt_commethod(6)
    def FindProvisionedPackages(self) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(7)
    def AddPackageByUriAsync(self, packageUri: Windows.Foundation.Uri, options: Windows.Management.Deployment.AddPackageOptions) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(8)
    def StagePackageByUriAsync(self, packageUri: Windows.Foundation.Uri, options: Windows.Management.Deployment.StagePackageOptions) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(9)
    def RegisterPackageByUriAsync(self, manifestUri: Windows.Foundation.Uri, options: Windows.Management.Deployment.RegisterPackageOptions) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(10)
    def RegisterPackagesByFullNameAsync(self, packageFullNames: Windows.Foundation.Collections.IIterable[WinRT_String], options: Windows.Management.Deployment.RegisterPackageOptions) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_commethod(11)
    def SetPackageStubPreference(self, packageFamilyName: WinRT_String, useStub: Windows.Management.Deployment.PackageStubPreference) -> Void: ...
    @winrt_commethod(12)
    def GetPackageStubPreference(self, packageFamilyName: WinRT_String) -> Windows.Management.Deployment.PackageStubPreference: ...
class IPackageManagerDebugSettings(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('1a611683-a988-4fcf-8f-0f-ce-17-58-98-e8-eb')
    @winrt_commethod(6)
    def SetContentGroupStateAsync(self, package: Windows.ApplicationModel.Package, contentGroupName: WinRT_String, state: Windows.ApplicationModel.PackageContentGroupState) -> Windows.Foundation.IAsyncAction: ...
    @winrt_commethod(7)
    def SetContentGroupStateWithPercentageAsync(self, package: Windows.ApplicationModel.Package, contentGroupName: WinRT_String, state: Windows.ApplicationModel.PackageContentGroupState, completionPercentage: Double) -> Windows.Foundation.IAsyncAction: ...
class IPackageUserInformation(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('f6383423-fa09-4cbc-90-55-15-ca-27-5e-2e-7e')
    @winrt_commethod(6)
    def get_UserSecurityId(self) -> WinRT_String: ...
    @winrt_commethod(7)
    def get_InstallState(self) -> Windows.Management.Deployment.PackageInstallState: ...
    UserSecurityId = property(get_UserSecurityId, None)
    InstallState = property(get_InstallState, None)
class IPackageVolume(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('cf2672c3-1a40-4450-97-39-2a-ce-2e-89-88-53')
    @winrt_commethod(6)
    def get_IsOffline(self) -> Boolean: ...
    @winrt_commethod(7)
    def get_IsSystemVolume(self) -> Boolean: ...
    @winrt_commethod(8)
    def get_MountPoint(self) -> WinRT_String: ...
    @winrt_commethod(9)
    def get_Name(self) -> WinRT_String: ...
    @winrt_commethod(10)
    def get_PackageStorePath(self) -> WinRT_String: ...
    @winrt_commethod(11)
    def get_SupportsHardLinks(self) -> Boolean: ...
    @winrt_commethod(12)
    def FindPackages(self) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(13)
    def FindPackagesByNamePublisher(self, packageName: WinRT_String, packagePublisher: WinRT_String) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(14)
    def FindPackagesByPackageFamilyName(self, packageFamilyName: WinRT_String) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(15)
    def FindPackagesWithPackageTypes(self, packageTypes: Windows.Management.Deployment.PackageTypes) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(16)
    def FindPackagesByNamePublisherWithPackagesTypes(self, packageTypes: Windows.Management.Deployment.PackageTypes, packageName: WinRT_String, packagePublisher: WinRT_String) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(17)
    def FindPackagesByPackageFamilyNameWithPackageTypes(self, packageTypes: Windows.Management.Deployment.PackageTypes, packageFamilyName: WinRT_String) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(18)
    def FindPackageByPackageFullName(self, packageFullName: WinRT_String) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(19)
    def FindPackagesByUserSecurityId(self, userSecurityId: WinRT_String) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(20)
    def FindPackagesByUserSecurityIdNamePublisher(self, userSecurityId: WinRT_String, packageName: WinRT_String, packagePublisher: WinRT_String) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(21)
    def FindPackagesByUserSecurityIdPackageFamilyName(self, userSecurityId: WinRT_String, packageFamilyName: WinRT_String) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(22)
    def FindPackagesByUserSecurityIdWithPackageTypes(self, userSecurityId: WinRT_String, packageTypes: Windows.Management.Deployment.PackageTypes) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(23)
    def FindPackagesByUserSecurityIdNamePublisherWithPackageTypes(self, userSecurityId: WinRT_String, packageTypes: Windows.Management.Deployment.PackageTypes, packageName: WinRT_String, packagePublisher: WinRT_String) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(24)
    def FindPackagesByUserSecurityIdPackageFamilyNameWithPackagesTypes(self, userSecurityId: WinRT_String, packageTypes: Windows.Management.Deployment.PackageTypes, packageFamilyName: WinRT_String) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_commethod(25)
    def FindPackageByUserSecurityIdPackageFullName(self, userSecurityId: WinRT_String, packageFullName: WinRT_String) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    IsOffline = property(get_IsOffline, None)
    IsSystemVolume = property(get_IsSystemVolume, None)
    MountPoint = property(get_MountPoint, None)
    Name = property(get_Name, None)
    PackageStorePath = property(get_PackageStorePath, None)
    SupportsHardLinks = property(get_SupportsHardLinks, None)
class IPackageVolume2(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('46abcf2e-9dd4-47a2-ab-8c-c6-40-83-49-bc-d8')
    @winrt_commethod(6)
    def get_IsFullTrustPackageSupported(self) -> Boolean: ...
    @winrt_commethod(7)
    def get_IsAppxInstallSupported(self) -> Boolean: ...
    @winrt_commethod(8)
    def GetAvailableSpaceAsync(self) -> Windows.Foundation.IAsyncOperation[UInt64]: ...
    IsFullTrustPackageSupported = property(get_IsFullTrustPackageSupported, None)
    IsAppxInstallSupported = property(get_IsAppxInstallSupported, None)
class IRegisterPackageOptions(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('677112a7-50d4-496c-84-15-06-02-b4-c6-d3-bf')
    @winrt_commethod(6)
    def get_DependencyPackageUris(self) -> Windows.Foundation.Collections.IVector[Windows.Foundation.Uri]: ...
    @winrt_commethod(7)
    def get_AppDataVolume(self) -> Windows.Management.Deployment.PackageVolume: ...
    @winrt_commethod(8)
    def put_AppDataVolume(self, value: Windows.Management.Deployment.PackageVolume) -> Void: ...
    @winrt_commethod(9)
    def get_OptionalPackageFamilyNames(self) -> Windows.Foundation.Collections.IVector[WinRT_String]: ...
    @winrt_commethod(10)
    def get_ExternalLocationUri(self) -> Windows.Foundation.Uri: ...
    @winrt_commethod(11)
    def put_ExternalLocationUri(self, value: Windows.Foundation.Uri) -> Void: ...
    @winrt_commethod(12)
    def get_DeveloperMode(self) -> Boolean: ...
    @winrt_commethod(13)
    def put_DeveloperMode(self, value: Boolean) -> Void: ...
    @winrt_commethod(14)
    def get_ForceAppShutdown(self) -> Boolean: ...
    @winrt_commethod(15)
    def put_ForceAppShutdown(self, value: Boolean) -> Void: ...
    @winrt_commethod(16)
    def get_ForceTargetAppShutdown(self) -> Boolean: ...
    @winrt_commethod(17)
    def put_ForceTargetAppShutdown(self, value: Boolean) -> Void: ...
    @winrt_commethod(18)
    def get_ForceUpdateFromAnyVersion(self) -> Boolean: ...
    @winrt_commethod(19)
    def put_ForceUpdateFromAnyVersion(self, value: Boolean) -> Void: ...
    @winrt_commethod(20)
    def get_InstallAllResources(self) -> Boolean: ...
    @winrt_commethod(21)
    def put_InstallAllResources(self, value: Boolean) -> Void: ...
    @winrt_commethod(22)
    def get_StageInPlace(self) -> Boolean: ...
    @winrt_commethod(23)
    def put_StageInPlace(self, value: Boolean) -> Void: ...
    @winrt_commethod(24)
    def get_AllowUnsigned(self) -> Boolean: ...
    @winrt_commethod(25)
    def put_AllowUnsigned(self, value: Boolean) -> Void: ...
    @winrt_commethod(26)
    def get_DeferRegistrationWhenPackagesAreInUse(self) -> Boolean: ...
    @winrt_commethod(27)
    def put_DeferRegistrationWhenPackagesAreInUse(self, value: Boolean) -> Void: ...
    DependencyPackageUris = property(get_DependencyPackageUris, None)
    AppDataVolume = property(get_AppDataVolume, put_AppDataVolume)
    OptionalPackageFamilyNames = property(get_OptionalPackageFamilyNames, None)
    ExternalLocationUri = property(get_ExternalLocationUri, put_ExternalLocationUri)
    DeveloperMode = property(get_DeveloperMode, put_DeveloperMode)
    ForceAppShutdown = property(get_ForceAppShutdown, put_ForceAppShutdown)
    ForceTargetAppShutdown = property(get_ForceTargetAppShutdown, put_ForceTargetAppShutdown)
    ForceUpdateFromAnyVersion = property(get_ForceUpdateFromAnyVersion, put_ForceUpdateFromAnyVersion)
    InstallAllResources = property(get_InstallAllResources, put_InstallAllResources)
    StageInPlace = property(get_StageInPlace, put_StageInPlace)
    AllowUnsigned = property(get_AllowUnsigned, put_AllowUnsigned)
    DeferRegistrationWhenPackagesAreInUse = property(get_DeferRegistrationWhenPackagesAreInUse, put_DeferRegistrationWhenPackagesAreInUse)
class IRegisterPackageOptions2(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('3dfa9743-86ff-4a11-bc-93-43-4e-b6-be-3a-0b')
    @winrt_commethod(6)
    def get_ExpectedDigests(self) -> Windows.Foundation.Collections.IMap[Windows.Foundation.Uri, WinRT_String]: ...
    ExpectedDigests = property(get_ExpectedDigests, None)
class ISharedPackageContainer(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('177f1aa9-151e-5ef7-b1-d9-2f-ba-0b-4b-0d-17')
    @winrt_commethod(6)
    def get_Name(self) -> WinRT_String: ...
    @winrt_commethod(7)
    def get_Id(self) -> WinRT_String: ...
    @winrt_commethod(8)
    def GetMembers(self) -> Windows.Foundation.Collections.IVector[Windows.Management.Deployment.SharedPackageContainerMember]: ...
    @winrt_commethod(9)
    def RemovePackageFamily(self, packageFamilyName: WinRT_String, options: Windows.Management.Deployment.UpdateSharedPackageContainerOptions) -> Windows.Management.Deployment.UpdateSharedPackageContainerResult: ...
    @winrt_commethod(10)
    def ResetData(self) -> Windows.Management.Deployment.UpdateSharedPackageContainerResult: ...
    Name = property(get_Name, None)
    Id = property(get_Id, None)
class ISharedPackageContainerManager(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('be353068-1ef7-5ac8-ab-3f-0b-9f-61-2f-02-74')
    @winrt_commethod(6)
    def CreateContainer(self, name: WinRT_String, options: Windows.Management.Deployment.CreateSharedPackageContainerOptions) -> Windows.Management.Deployment.CreateSharedPackageContainerResult: ...
    @winrt_commethod(7)
    def DeleteContainer(self, id: WinRT_String, options: Windows.Management.Deployment.DeleteSharedPackageContainerOptions) -> Windows.Management.Deployment.DeleteSharedPackageContainerResult: ...
    @winrt_commethod(8)
    def GetContainer(self, id: WinRT_String) -> Windows.Management.Deployment.SharedPackageContainer: ...
    @winrt_commethod(9)
    def FindContainers(self) -> Windows.Foundation.Collections.IVector[Windows.Management.Deployment.SharedPackageContainer]: ...
    @winrt_commethod(10)
    def FindContainersWithOptions(self, options: Windows.Management.Deployment.FindSharedPackageContainerOptions) -> Windows.Foundation.Collections.IVector[Windows.Management.Deployment.SharedPackageContainer]: ...
class ISharedPackageContainerManagerStatics(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('2ef56348-838a-5f55-a8-9e-11-98-a2-c6-27-e6')
    @winrt_commethod(6)
    def GetDefault(self) -> Windows.Management.Deployment.SharedPackageContainerManager: ...
    @winrt_commethod(7)
    def GetForUser(self, userSid: WinRT_String) -> Windows.Management.Deployment.SharedPackageContainerManager: ...
    @winrt_commethod(8)
    def GetForProvisioning(self) -> Windows.Management.Deployment.SharedPackageContainerManager: ...
class ISharedPackageContainerMember(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('fe0d0438-43c9-5426-b8-9c-f7-9b-f8-5d-df-f4')
    @winrt_commethod(6)
    def get_PackageFamilyName(self) -> WinRT_String: ...
    PackageFamilyName = property(get_PackageFamilyName, None)
class ISharedPackageContainerMemberFactory(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('49b0ceeb-498f-5a62-b7-38-b3-ca-0d-43-67-04')
    @winrt_commethod(6)
    def CreateInstance(self, packageFamilyName: WinRT_String) -> Windows.Management.Deployment.SharedPackageContainerMember: ...
class IStagePackageOptions(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('0b110c9c-b95d-4c56-bd-36-6d-65-68-00-d0-6b')
    @winrt_commethod(6)
    def get_DependencyPackageUris(self) -> Windows.Foundation.Collections.IVector[Windows.Foundation.Uri]: ...
    @winrt_commethod(7)
    def get_TargetVolume(self) -> Windows.Management.Deployment.PackageVolume: ...
    @winrt_commethod(8)
    def put_TargetVolume(self, value: Windows.Management.Deployment.PackageVolume) -> Void: ...
    @winrt_commethod(9)
    def get_OptionalPackageFamilyNames(self) -> Windows.Foundation.Collections.IVector[WinRT_String]: ...
    @winrt_commethod(10)
    def get_OptionalPackageUris(self) -> Windows.Foundation.Collections.IVector[Windows.Foundation.Uri]: ...
    @winrt_commethod(11)
    def get_RelatedPackageUris(self) -> Windows.Foundation.Collections.IVector[Windows.Foundation.Uri]: ...
    @winrt_commethod(12)
    def get_ExternalLocationUri(self) -> Windows.Foundation.Uri: ...
    @winrt_commethod(13)
    def put_ExternalLocationUri(self, value: Windows.Foundation.Uri) -> Void: ...
    @winrt_commethod(14)
    def get_StubPackageOption(self) -> Windows.Management.Deployment.StubPackageOption: ...
    @winrt_commethod(15)
    def put_StubPackageOption(self, value: Windows.Management.Deployment.StubPackageOption) -> Void: ...
    @winrt_commethod(16)
    def get_DeveloperMode(self) -> Boolean: ...
    @winrt_commethod(17)
    def put_DeveloperMode(self, value: Boolean) -> Void: ...
    @winrt_commethod(18)
    def get_ForceUpdateFromAnyVersion(self) -> Boolean: ...
    @winrt_commethod(19)
    def put_ForceUpdateFromAnyVersion(self, value: Boolean) -> Void: ...
    @winrt_commethod(20)
    def get_InstallAllResources(self) -> Boolean: ...
    @winrt_commethod(21)
    def put_InstallAllResources(self, value: Boolean) -> Void: ...
    @winrt_commethod(22)
    def get_RequiredContentGroupOnly(self) -> Boolean: ...
    @winrt_commethod(23)
    def put_RequiredContentGroupOnly(self, value: Boolean) -> Void: ...
    @winrt_commethod(24)
    def get_StageInPlace(self) -> Boolean: ...
    @winrt_commethod(25)
    def put_StageInPlace(self, value: Boolean) -> Void: ...
    @winrt_commethod(26)
    def get_AllowUnsigned(self) -> Boolean: ...
    @winrt_commethod(27)
    def put_AllowUnsigned(self, value: Boolean) -> Void: ...
    DependencyPackageUris = property(get_DependencyPackageUris, None)
    TargetVolume = property(get_TargetVolume, put_TargetVolume)
    OptionalPackageFamilyNames = property(get_OptionalPackageFamilyNames, None)
    OptionalPackageUris = property(get_OptionalPackageUris, None)
    RelatedPackageUris = property(get_RelatedPackageUris, None)
    ExternalLocationUri = property(get_ExternalLocationUri, put_ExternalLocationUri)
    StubPackageOption = property(get_StubPackageOption, put_StubPackageOption)
    DeveloperMode = property(get_DeveloperMode, put_DeveloperMode)
    ForceUpdateFromAnyVersion = property(get_ForceUpdateFromAnyVersion, put_ForceUpdateFromAnyVersion)
    InstallAllResources = property(get_InstallAllResources, put_InstallAllResources)
    RequiredContentGroupOnly = property(get_RequiredContentGroupOnly, put_RequiredContentGroupOnly)
    StageInPlace = property(get_StageInPlace, put_StageInPlace)
    AllowUnsigned = property(get_AllowUnsigned, put_AllowUnsigned)
class IStagePackageOptions2(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('990c4ccc-6226-4192-ba-92-79-87-5f-ce-0d-9c')
    @winrt_commethod(6)
    def get_ExpectedDigests(self) -> Windows.Foundation.Collections.IMap[Windows.Foundation.Uri, WinRT_String]: ...
    ExpectedDigests = property(get_ExpectedDigests, None)
class IUpdateSharedPackageContainerOptions(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('80672e83-7194-59f9-b5-b9-da-a5-37-5f-13-0a')
    @winrt_commethod(6)
    def get_ForceAppShutdown(self) -> Boolean: ...
    @winrt_commethod(7)
    def put_ForceAppShutdown(self, value: Boolean) -> Void: ...
    @winrt_commethod(8)
    def get_RequirePackagesPresent(self) -> Boolean: ...
    @winrt_commethod(9)
    def put_RequirePackagesPresent(self, value: Boolean) -> Void: ...
    ForceAppShutdown = property(get_ForceAppShutdown, put_ForceAppShutdown)
    RequirePackagesPresent = property(get_RequirePackagesPresent, put_RequirePackagesPresent)
class IUpdateSharedPackageContainerResult(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _iid_ = Guid('aa407df7-c72d-5458-ae-a3-46-45-b6-a8-ee-99')
    @winrt_commethod(6)
    def get_Status(self) -> Windows.Management.Deployment.SharedPackageContainerOperationStatus: ...
    @winrt_commethod(7)
    def get_ExtendedError(self) -> Windows.Foundation.HResult: ...
    Status = property(get_Status, None)
    ExtendedError = property(get_ExtendedError, None)
class PackageAllUserProvisioningOptions(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _classid_ = 'Windows.Management.Deployment.PackageAllUserProvisioningOptions'
    @winrt_activatemethod
    def New(cls) -> Windows.Management.Deployment.PackageAllUserProvisioningOptions: ...
    @winrt_mixinmethod
    def get_OptionalPackageFamilyNames(self: Windows.Management.Deployment.IPackageAllUserProvisioningOptions) -> Windows.Foundation.Collections.IVector[WinRT_String]: ...
    @winrt_mixinmethod
    def get_ProjectionOrderPackageFamilyNames(self: Windows.Management.Deployment.IPackageAllUserProvisioningOptions) -> Windows.Foundation.Collections.IVector[WinRT_String]: ...
    OptionalPackageFamilyNames = property(get_OptionalPackageFamilyNames, None)
    ProjectionOrderPackageFamilyNames = property(get_ProjectionOrderPackageFamilyNames, None)
PackageInstallState = Int32
PackageInstallState_NotInstalled: PackageInstallState = 0
PackageInstallState_Staged: PackageInstallState = 1
PackageInstallState_Installed: PackageInstallState = 2
PackageInstallState_Paused: PackageInstallState = 6
class PackageManager(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _classid_ = 'Windows.Management.Deployment.PackageManager'
    @winrt_activatemethod
    def New(cls) -> Windows.Management.Deployment.PackageManager: ...
    @winrt_mixinmethod
    def AddPackageAsync(self: Windows.Management.Deployment.IPackageManager, packageUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], deploymentOptions: Windows.Management.Deployment.DeploymentOptions) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def UpdatePackageAsync(self: Windows.Management.Deployment.IPackageManager, packageUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], deploymentOptions: Windows.Management.Deployment.DeploymentOptions) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def RemovePackageAsync(self: Windows.Management.Deployment.IPackageManager, packageFullName: WinRT_String) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def StagePackageAsync(self: Windows.Management.Deployment.IPackageManager, packageUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri]) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def RegisterPackageAsync(self: Windows.Management.Deployment.IPackageManager, manifestUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], deploymentOptions: Windows.Management.Deployment.DeploymentOptions) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def FindPackages(self: Windows.Management.Deployment.IPackageManager) -> Windows.Foundation.Collections.IIterable[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def FindPackagesByUserSecurityId(self: Windows.Management.Deployment.IPackageManager, userSecurityId: WinRT_String) -> Windows.Foundation.Collections.IIterable[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def FindPackagesByNamePublisher(self: Windows.Management.Deployment.IPackageManager, packageName: WinRT_String, packagePublisher: WinRT_String) -> Windows.Foundation.Collections.IIterable[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def FindPackagesByUserSecurityIdNamePublisher(self: Windows.Management.Deployment.IPackageManager, userSecurityId: WinRT_String, packageName: WinRT_String, packagePublisher: WinRT_String) -> Windows.Foundation.Collections.IIterable[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def FindUsers(self: Windows.Management.Deployment.IPackageManager, packageFullName: WinRT_String) -> Windows.Foundation.Collections.IIterable[Windows.Management.Deployment.PackageUserInformation]: ...
    @winrt_mixinmethod
    def SetPackageState(self: Windows.Management.Deployment.IPackageManager, packageFullName: WinRT_String, packageState: Windows.Management.Deployment.PackageState) -> Void: ...
    @winrt_mixinmethod
    def FindPackageByPackageFullName(self: Windows.Management.Deployment.IPackageManager, packageFullName: WinRT_String) -> Windows.ApplicationModel.Package: ...
    @winrt_mixinmethod
    def CleanupPackageForUserAsync(self: Windows.Management.Deployment.IPackageManager, packageName: WinRT_String, userSecurityId: WinRT_String) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def FindPackagesByPackageFamilyName(self: Windows.Management.Deployment.IPackageManager, packageFamilyName: WinRT_String) -> Windows.Foundation.Collections.IIterable[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def FindPackagesByUserSecurityIdPackageFamilyName(self: Windows.Management.Deployment.IPackageManager, userSecurityId: WinRT_String, packageFamilyName: WinRT_String) -> Windows.Foundation.Collections.IIterable[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def FindPackageByUserSecurityIdPackageFullName(self: Windows.Management.Deployment.IPackageManager, userSecurityId: WinRT_String, packageFullName: WinRT_String) -> Windows.ApplicationModel.Package: ...
    @winrt_mixinmethod
    def RemovePackageWithOptionsAsync(self: Windows.Management.Deployment.IPackageManager2, packageFullName: WinRT_String, removalOptions: Windows.Management.Deployment.RemovalOptions) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def StagePackageWithOptionsAsync(self: Windows.Management.Deployment.IPackageManager2, packageUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], deploymentOptions: Windows.Management.Deployment.DeploymentOptions) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def RegisterPackageByFullNameAsync(self: Windows.Management.Deployment.IPackageManager2, mainPackageFullName: WinRT_String, dependencyPackageFullNames: Windows.Foundation.Collections.IIterable[WinRT_String], deploymentOptions: Windows.Management.Deployment.DeploymentOptions) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def FindPackagesWithPackageTypes(self: Windows.Management.Deployment.IPackageManager2, packageTypes: Windows.Management.Deployment.PackageTypes) -> Windows.Foundation.Collections.IIterable[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def FindPackagesByUserSecurityIdWithPackageTypes(self: Windows.Management.Deployment.IPackageManager2, userSecurityId: WinRT_String, packageTypes: Windows.Management.Deployment.PackageTypes) -> Windows.Foundation.Collections.IIterable[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def FindPackagesByNamePublisherWithPackageTypes(self: Windows.Management.Deployment.IPackageManager2, packageName: WinRT_String, packagePublisher: WinRT_String, packageTypes: Windows.Management.Deployment.PackageTypes) -> Windows.Foundation.Collections.IIterable[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def FindPackagesByUserSecurityIdNamePublisherWithPackageTypes(self: Windows.Management.Deployment.IPackageManager2, userSecurityId: WinRT_String, packageName: WinRT_String, packagePublisher: WinRT_String, packageTypes: Windows.Management.Deployment.PackageTypes) -> Windows.Foundation.Collections.IIterable[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def FindPackagesByPackageFamilyNameWithPackageTypes(self: Windows.Management.Deployment.IPackageManager2, packageFamilyName: WinRT_String, packageTypes: Windows.Management.Deployment.PackageTypes) -> Windows.Foundation.Collections.IIterable[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def FindPackagesByUserSecurityIdPackageFamilyNameWithPackageTypes(self: Windows.Management.Deployment.IPackageManager2, userSecurityId: WinRT_String, packageFamilyName: WinRT_String, packageTypes: Windows.Management.Deployment.PackageTypes) -> Windows.Foundation.Collections.IIterable[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def StageUserDataAsync(self: Windows.Management.Deployment.IPackageManager2, packageFullName: WinRT_String) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def AddPackageVolumeAsync(self: Windows.Management.Deployment.IPackageManager3, packageStorePath: WinRT_String) -> Windows.Foundation.IAsyncOperation[Windows.Management.Deployment.PackageVolume]: ...
    @winrt_mixinmethod
    def AddPackageToVolumeAsync(self: Windows.Management.Deployment.IPackageManager3, packageUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], deploymentOptions: Windows.Management.Deployment.DeploymentOptions, targetVolume: Windows.Management.Deployment.PackageVolume) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def ClearPackageStatus(self: Windows.Management.Deployment.IPackageManager3, packageFullName: WinRT_String, status: Windows.Management.Deployment.PackageStatus) -> Void: ...
    @winrt_mixinmethod
    def RegisterPackageWithAppDataVolumeAsync(self: Windows.Management.Deployment.IPackageManager3, manifestUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], deploymentOptions: Windows.Management.Deployment.DeploymentOptions, appDataVolume: Windows.Management.Deployment.PackageVolume) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def FindPackageVolumeByName(self: Windows.Management.Deployment.IPackageManager3, volumeName: WinRT_String) -> Windows.Management.Deployment.PackageVolume: ...
    @winrt_mixinmethod
    def FindPackageVolumes(self: Windows.Management.Deployment.IPackageManager3) -> Windows.Foundation.Collections.IIterable[Windows.Management.Deployment.PackageVolume]: ...
    @winrt_mixinmethod
    def GetDefaultPackageVolume(self: Windows.Management.Deployment.IPackageManager3) -> Windows.Management.Deployment.PackageVolume: ...
    @winrt_mixinmethod
    def MovePackageToVolumeAsync(self: Windows.Management.Deployment.IPackageManager3, packageFullName: WinRT_String, deploymentOptions: Windows.Management.Deployment.DeploymentOptions, targetVolume: Windows.Management.Deployment.PackageVolume) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def RemovePackageVolumeAsync(self: Windows.Management.Deployment.IPackageManager3, volume: Windows.Management.Deployment.PackageVolume) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def SetDefaultPackageVolume(self: Windows.Management.Deployment.IPackageManager3, volume: Windows.Management.Deployment.PackageVolume) -> Void: ...
    @winrt_mixinmethod
    def SetPackageStatus(self: Windows.Management.Deployment.IPackageManager3, packageFullName: WinRT_String, status: Windows.Management.Deployment.PackageStatus) -> Void: ...
    @winrt_mixinmethod
    def SetPackageVolumeOfflineAsync(self: Windows.Management.Deployment.IPackageManager3, packageVolume: Windows.Management.Deployment.PackageVolume) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def SetPackageVolumeOnlineAsync(self: Windows.Management.Deployment.IPackageManager3, packageVolume: Windows.Management.Deployment.PackageVolume) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def StagePackageToVolumeAsync(self: Windows.Management.Deployment.IPackageManager3, packageUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], deploymentOptions: Windows.Management.Deployment.DeploymentOptions, targetVolume: Windows.Management.Deployment.PackageVolume) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def StageUserDataWithOptionsAsync(self: Windows.Management.Deployment.IPackageManager3, packageFullName: WinRT_String, deploymentOptions: Windows.Management.Deployment.DeploymentOptions) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def GetPackageVolumesAsync(self: Windows.Management.Deployment.IPackageManager4) -> Windows.Foundation.IAsyncOperation[Windows.Foundation.Collections.IVectorView[Windows.Management.Deployment.PackageVolume]]: ...
    @winrt_mixinmethod
    def AddPackageToVolumeAndOptionalPackagesAsync(self: Windows.Management.Deployment.IPackageManager5, packageUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], deploymentOptions: Windows.Management.Deployment.DeploymentOptions, targetVolume: Windows.Management.Deployment.PackageVolume, optionalPackageFamilyNames: Windows.Foundation.Collections.IIterable[WinRT_String], externalPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri]) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def StagePackageToVolumeAndOptionalPackagesAsync(self: Windows.Management.Deployment.IPackageManager5, packageUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], deploymentOptions: Windows.Management.Deployment.DeploymentOptions, targetVolume: Windows.Management.Deployment.PackageVolume, optionalPackageFamilyNames: Windows.Foundation.Collections.IIterable[WinRT_String], externalPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri]) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def RegisterPackageByFamilyNameAndOptionalPackagesAsync(self: Windows.Management.Deployment.IPackageManager5, mainPackageFamilyName: WinRT_String, dependencyPackageFamilyNames: Windows.Foundation.Collections.IIterable[WinRT_String], deploymentOptions: Windows.Management.Deployment.DeploymentOptions, appDataVolume: Windows.Management.Deployment.PackageVolume, optionalPackageFamilyNames: Windows.Foundation.Collections.IIterable[WinRT_String]) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def get_DebugSettings(self: Windows.Management.Deployment.IPackageManager5) -> Windows.Management.Deployment.PackageManagerDebugSettings: ...
    @winrt_mixinmethod
    def ProvisionPackageForAllUsersAsync(self: Windows.Management.Deployment.IPackageManager6, packageFamilyName: WinRT_String) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def AddPackageByAppInstallerFileAsync(self: Windows.Management.Deployment.IPackageManager6, appInstallerFileUri: Windows.Foundation.Uri, options: Windows.Management.Deployment.AddPackageByAppInstallerOptions, targetVolume: Windows.Management.Deployment.PackageVolume) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def RequestAddPackageByAppInstallerFileAsync(self: Windows.Management.Deployment.IPackageManager6, appInstallerFileUri: Windows.Foundation.Uri, options: Windows.Management.Deployment.AddPackageByAppInstallerOptions, targetVolume: Windows.Management.Deployment.PackageVolume) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def AddPackageToVolumeAndRelatedSetAsync(self: Windows.Management.Deployment.IPackageManager6, packageUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], options: Windows.Management.Deployment.DeploymentOptions, targetVolume: Windows.Management.Deployment.PackageVolume, optionalPackageFamilyNames: Windows.Foundation.Collections.IIterable[WinRT_String], packageUrisToInstall: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], relatedPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri]) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def StagePackageToVolumeAndRelatedSetAsync(self: Windows.Management.Deployment.IPackageManager6, packageUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], options: Windows.Management.Deployment.DeploymentOptions, targetVolume: Windows.Management.Deployment.PackageVolume, optionalPackageFamilyNames: Windows.Foundation.Collections.IIterable[WinRT_String], packageUrisToInstall: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], relatedPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri]) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def RequestAddPackageAsync(self: Windows.Management.Deployment.IPackageManager6, packageUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], deploymentOptions: Windows.Management.Deployment.DeploymentOptions, targetVolume: Windows.Management.Deployment.PackageVolume, optionalPackageFamilyNames: Windows.Foundation.Collections.IIterable[WinRT_String], relatedPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri]) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def RequestAddPackageAndRelatedSetAsync(self: Windows.Management.Deployment.IPackageManager7, packageUri: Windows.Foundation.Uri, dependencyPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], deploymentOptions: Windows.Management.Deployment.DeploymentOptions, targetVolume: Windows.Management.Deployment.PackageVolume, optionalPackageFamilyNames: Windows.Foundation.Collections.IIterable[WinRT_String], relatedPackageUris: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri], packageUrisToInstall: Windows.Foundation.Collections.IIterable[Windows.Foundation.Uri]) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def DeprovisionPackageForAllUsersAsync(self: Windows.Management.Deployment.IPackageManager8, packageFamilyName: WinRT_String) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def FindProvisionedPackages(self: Windows.Management.Deployment.IPackageManager9) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def AddPackageByUriAsync(self: Windows.Management.Deployment.IPackageManager9, packageUri: Windows.Foundation.Uri, options: Windows.Management.Deployment.AddPackageOptions) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def StagePackageByUriAsync(self: Windows.Management.Deployment.IPackageManager9, packageUri: Windows.Foundation.Uri, options: Windows.Management.Deployment.StagePackageOptions) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def RegisterPackageByUriAsync(self: Windows.Management.Deployment.IPackageManager9, manifestUri: Windows.Foundation.Uri, options: Windows.Management.Deployment.RegisterPackageOptions) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def RegisterPackagesByFullNameAsync(self: Windows.Management.Deployment.IPackageManager9, packageFullNames: Windows.Foundation.Collections.IIterable[WinRT_String], options: Windows.Management.Deployment.RegisterPackageOptions) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    @winrt_mixinmethod
    def SetPackageStubPreference(self: Windows.Management.Deployment.IPackageManager9, packageFamilyName: WinRT_String, useStub: Windows.Management.Deployment.PackageStubPreference) -> Void: ...
    @winrt_mixinmethod
    def GetPackageStubPreference(self: Windows.Management.Deployment.IPackageManager9, packageFamilyName: WinRT_String) -> Windows.Management.Deployment.PackageStubPreference: ...
    @winrt_mixinmethod
    def ProvisionPackageForAllUsersWithOptionsAsync(self: Windows.Management.Deployment.IPackageManager10, mainPackageFamilyName: WinRT_String, options: Windows.Management.Deployment.PackageAllUserProvisioningOptions) -> Windows.Foundation.IAsyncOperationWithProgress[Windows.Management.Deployment.DeploymentResult, Windows.Management.Deployment.DeploymentProgress]: ...
    DebugSettings = property(get_DebugSettings, None)
class PackageManagerDebugSettings(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _classid_ = 'Windows.Management.Deployment.PackageManagerDebugSettings'
    @winrt_mixinmethod
    def SetContentGroupStateAsync(self: Windows.Management.Deployment.IPackageManagerDebugSettings, package: Windows.ApplicationModel.Package, contentGroupName: WinRT_String, state: Windows.ApplicationModel.PackageContentGroupState) -> Windows.Foundation.IAsyncAction: ...
    @winrt_mixinmethod
    def SetContentGroupStateWithPercentageAsync(self: Windows.Management.Deployment.IPackageManagerDebugSettings, package: Windows.ApplicationModel.Package, contentGroupName: WinRT_String, state: Windows.ApplicationModel.PackageContentGroupState, completionPercentage: Double) -> Windows.Foundation.IAsyncAction: ...
PackageState = Int32
PackageState_Normal: PackageState = 0
PackageState_LicenseInvalid: PackageState = 1
PackageState_Modified: PackageState = 2
PackageState_Tampered: PackageState = 3
PackageStatus = UInt32
PackageStatus_OK: PackageStatus = 0
PackageStatus_LicenseIssue: PackageStatus = 1
PackageStatus_Modified: PackageStatus = 2
PackageStatus_Tampered: PackageStatus = 4
PackageStatus_Disabled: PackageStatus = 8
PackageStubPreference = Int32
PackageStubPreference_Full: PackageStubPreference = 0
PackageStubPreference_Stub: PackageStubPreference = 1
PackageTypes = UInt32
PackageTypes_None: PackageTypes = 0
PackageTypes_Main: PackageTypes = 1
PackageTypes_Framework: PackageTypes = 2
PackageTypes_Resource: PackageTypes = 4
PackageTypes_Bundle: PackageTypes = 8
PackageTypes_Xap: PackageTypes = 16
PackageTypes_Optional: PackageTypes = 32
PackageTypes_All: PackageTypes = 4294967295
class PackageUserInformation(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _classid_ = 'Windows.Management.Deployment.PackageUserInformation'
    @winrt_mixinmethod
    def get_UserSecurityId(self: Windows.Management.Deployment.IPackageUserInformation) -> WinRT_String: ...
    @winrt_mixinmethod
    def get_InstallState(self: Windows.Management.Deployment.IPackageUserInformation) -> Windows.Management.Deployment.PackageInstallState: ...
    UserSecurityId = property(get_UserSecurityId, None)
    InstallState = property(get_InstallState, None)
class PackageVolume(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _classid_ = 'Windows.Management.Deployment.PackageVolume'
    @winrt_mixinmethod
    def get_IsOffline(self: Windows.Management.Deployment.IPackageVolume) -> Boolean: ...
    @winrt_mixinmethod
    def get_IsSystemVolume(self: Windows.Management.Deployment.IPackageVolume) -> Boolean: ...
    @winrt_mixinmethod
    def get_MountPoint(self: Windows.Management.Deployment.IPackageVolume) -> WinRT_String: ...
    @winrt_mixinmethod
    def get_Name(self: Windows.Management.Deployment.IPackageVolume) -> WinRT_String: ...
    @winrt_mixinmethod
    def get_PackageStorePath(self: Windows.Management.Deployment.IPackageVolume) -> WinRT_String: ...
    @winrt_mixinmethod
    def get_SupportsHardLinks(self: Windows.Management.Deployment.IPackageVolume) -> Boolean: ...
    @winrt_mixinmethod
    def FindPackages(self: Windows.Management.Deployment.IPackageVolume) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def FindPackagesByNamePublisher(self: Windows.Management.Deployment.IPackageVolume, packageName: WinRT_String, packagePublisher: WinRT_String) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def FindPackagesByPackageFamilyName(self: Windows.Management.Deployment.IPackageVolume, packageFamilyName: WinRT_String) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def FindPackagesWithPackageTypes(self: Windows.Management.Deployment.IPackageVolume, packageTypes: Windows.Management.Deployment.PackageTypes) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def FindPackagesByNamePublisherWithPackagesTypes(self: Windows.Management.Deployment.IPackageVolume, packageTypes: Windows.Management.Deployment.PackageTypes, packageName: WinRT_String, packagePublisher: WinRT_String) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def FindPackagesByPackageFamilyNameWithPackageTypes(self: Windows.Management.Deployment.IPackageVolume, packageTypes: Windows.Management.Deployment.PackageTypes, packageFamilyName: WinRT_String) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def FindPackageByPackageFullName(self: Windows.Management.Deployment.IPackageVolume, packageFullName: WinRT_String) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def FindPackagesByUserSecurityId(self: Windows.Management.Deployment.IPackageVolume, userSecurityId: WinRT_String) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def FindPackagesByUserSecurityIdNamePublisher(self: Windows.Management.Deployment.IPackageVolume, userSecurityId: WinRT_String, packageName: WinRT_String, packagePublisher: WinRT_String) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def FindPackagesByUserSecurityIdPackageFamilyName(self: Windows.Management.Deployment.IPackageVolume, userSecurityId: WinRT_String, packageFamilyName: WinRT_String) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def FindPackagesByUserSecurityIdWithPackageTypes(self: Windows.Management.Deployment.IPackageVolume, userSecurityId: WinRT_String, packageTypes: Windows.Management.Deployment.PackageTypes) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def FindPackagesByUserSecurityIdNamePublisherWithPackageTypes(self: Windows.Management.Deployment.IPackageVolume, userSecurityId: WinRT_String, packageTypes: Windows.Management.Deployment.PackageTypes, packageName: WinRT_String, packagePublisher: WinRT_String) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def FindPackagesByUserSecurityIdPackageFamilyNameWithPackagesTypes(self: Windows.Management.Deployment.IPackageVolume, userSecurityId: WinRT_String, packageTypes: Windows.Management.Deployment.PackageTypes, packageFamilyName: WinRT_String) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def FindPackageByUserSecurityIdPackageFullName(self: Windows.Management.Deployment.IPackageVolume, userSecurityId: WinRT_String, packageFullName: WinRT_String) -> Windows.Foundation.Collections.IVector[Windows.ApplicationModel.Package]: ...
    @winrt_mixinmethod
    def get_IsFullTrustPackageSupported(self: Windows.Management.Deployment.IPackageVolume2) -> Boolean: ...
    @winrt_mixinmethod
    def get_IsAppxInstallSupported(self: Windows.Management.Deployment.IPackageVolume2) -> Boolean: ...
    @winrt_mixinmethod
    def GetAvailableSpaceAsync(self: Windows.Management.Deployment.IPackageVolume2) -> Windows.Foundation.IAsyncOperation[UInt64]: ...
    IsOffline = property(get_IsOffline, None)
    IsSystemVolume = property(get_IsSystemVolume, None)
    MountPoint = property(get_MountPoint, None)
    Name = property(get_Name, None)
    PackageStorePath = property(get_PackageStorePath, None)
    SupportsHardLinks = property(get_SupportsHardLinks, None)
    IsFullTrustPackageSupported = property(get_IsFullTrustPackageSupported, None)
    IsAppxInstallSupported = property(get_IsAppxInstallSupported, None)
class RegisterPackageOptions(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _classid_ = 'Windows.Management.Deployment.RegisterPackageOptions'
    @winrt_activatemethod
    def New(cls) -> Windows.Management.Deployment.RegisterPackageOptions: ...
    @winrt_mixinmethod
    def get_DependencyPackageUris(self: Windows.Management.Deployment.IRegisterPackageOptions) -> Windows.Foundation.Collections.IVector[Windows.Foundation.Uri]: ...
    @winrt_mixinmethod
    def get_AppDataVolume(self: Windows.Management.Deployment.IRegisterPackageOptions) -> Windows.Management.Deployment.PackageVolume: ...
    @winrt_mixinmethod
    def put_AppDataVolume(self: Windows.Management.Deployment.IRegisterPackageOptions, value: Windows.Management.Deployment.PackageVolume) -> Void: ...
    @winrt_mixinmethod
    def get_OptionalPackageFamilyNames(self: Windows.Management.Deployment.IRegisterPackageOptions) -> Windows.Foundation.Collections.IVector[WinRT_String]: ...
    @winrt_mixinmethod
    def get_ExternalLocationUri(self: Windows.Management.Deployment.IRegisterPackageOptions) -> Windows.Foundation.Uri: ...
    @winrt_mixinmethod
    def put_ExternalLocationUri(self: Windows.Management.Deployment.IRegisterPackageOptions, value: Windows.Foundation.Uri) -> Void: ...
    @winrt_mixinmethod
    def get_DeveloperMode(self: Windows.Management.Deployment.IRegisterPackageOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_DeveloperMode(self: Windows.Management.Deployment.IRegisterPackageOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_ForceAppShutdown(self: Windows.Management.Deployment.IRegisterPackageOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_ForceAppShutdown(self: Windows.Management.Deployment.IRegisterPackageOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_ForceTargetAppShutdown(self: Windows.Management.Deployment.IRegisterPackageOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_ForceTargetAppShutdown(self: Windows.Management.Deployment.IRegisterPackageOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_ForceUpdateFromAnyVersion(self: Windows.Management.Deployment.IRegisterPackageOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_ForceUpdateFromAnyVersion(self: Windows.Management.Deployment.IRegisterPackageOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_InstallAllResources(self: Windows.Management.Deployment.IRegisterPackageOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_InstallAllResources(self: Windows.Management.Deployment.IRegisterPackageOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_StageInPlace(self: Windows.Management.Deployment.IRegisterPackageOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_StageInPlace(self: Windows.Management.Deployment.IRegisterPackageOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_AllowUnsigned(self: Windows.Management.Deployment.IRegisterPackageOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_AllowUnsigned(self: Windows.Management.Deployment.IRegisterPackageOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_DeferRegistrationWhenPackagesAreInUse(self: Windows.Management.Deployment.IRegisterPackageOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_DeferRegistrationWhenPackagesAreInUse(self: Windows.Management.Deployment.IRegisterPackageOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_ExpectedDigests(self: Windows.Management.Deployment.IRegisterPackageOptions2) -> Windows.Foundation.Collections.IMap[Windows.Foundation.Uri, WinRT_String]: ...
    DependencyPackageUris = property(get_DependencyPackageUris, None)
    AppDataVolume = property(get_AppDataVolume, put_AppDataVolume)
    OptionalPackageFamilyNames = property(get_OptionalPackageFamilyNames, None)
    ExternalLocationUri = property(get_ExternalLocationUri, put_ExternalLocationUri)
    DeveloperMode = property(get_DeveloperMode, put_DeveloperMode)
    ForceAppShutdown = property(get_ForceAppShutdown, put_ForceAppShutdown)
    ForceTargetAppShutdown = property(get_ForceTargetAppShutdown, put_ForceTargetAppShutdown)
    ForceUpdateFromAnyVersion = property(get_ForceUpdateFromAnyVersion, put_ForceUpdateFromAnyVersion)
    InstallAllResources = property(get_InstallAllResources, put_InstallAllResources)
    StageInPlace = property(get_StageInPlace, put_StageInPlace)
    AllowUnsigned = property(get_AllowUnsigned, put_AllowUnsigned)
    DeferRegistrationWhenPackagesAreInUse = property(get_DeferRegistrationWhenPackagesAreInUse, put_DeferRegistrationWhenPackagesAreInUse)
    ExpectedDigests = property(get_ExpectedDigests, None)
RemovalOptions = UInt32
RemovalOptions_None: RemovalOptions = 0
RemovalOptions_PreserveApplicationData: RemovalOptions = 4096
RemovalOptions_PreserveRoamableApplicationData: RemovalOptions = 128
RemovalOptions_RemoveForAllUsers: RemovalOptions = 524288
class SharedPackageContainer(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _classid_ = 'Windows.Management.Deployment.SharedPackageContainer'
    @winrt_mixinmethod
    def get_Name(self: Windows.Management.Deployment.ISharedPackageContainer) -> WinRT_String: ...
    @winrt_mixinmethod
    def get_Id(self: Windows.Management.Deployment.ISharedPackageContainer) -> WinRT_String: ...
    @winrt_mixinmethod
    def GetMembers(self: Windows.Management.Deployment.ISharedPackageContainer) -> Windows.Foundation.Collections.IVector[Windows.Management.Deployment.SharedPackageContainerMember]: ...
    @winrt_mixinmethod
    def RemovePackageFamily(self: Windows.Management.Deployment.ISharedPackageContainer, packageFamilyName: WinRT_String, options: Windows.Management.Deployment.UpdateSharedPackageContainerOptions) -> Windows.Management.Deployment.UpdateSharedPackageContainerResult: ...
    @winrt_mixinmethod
    def ResetData(self: Windows.Management.Deployment.ISharedPackageContainer) -> Windows.Management.Deployment.UpdateSharedPackageContainerResult: ...
    Name = property(get_Name, None)
    Id = property(get_Id, None)
SharedPackageContainerContract: UInt32 = 65536
SharedPackageContainerCreationCollisionOptions = Int32
SharedPackageContainerCreationCollisionOptions_FailIfExists: SharedPackageContainerCreationCollisionOptions = 0
SharedPackageContainerCreationCollisionOptions_MergeWithExisting: SharedPackageContainerCreationCollisionOptions = 1
SharedPackageContainerCreationCollisionOptions_ReplaceExisting: SharedPackageContainerCreationCollisionOptions = 2
class SharedPackageContainerManager(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _classid_ = 'Windows.Management.Deployment.SharedPackageContainerManager'
    @winrt_mixinmethod
    def CreateContainer(self: Windows.Management.Deployment.ISharedPackageContainerManager, name: WinRT_String, options: Windows.Management.Deployment.CreateSharedPackageContainerOptions) -> Windows.Management.Deployment.CreateSharedPackageContainerResult: ...
    @winrt_mixinmethod
    def DeleteContainer(self: Windows.Management.Deployment.ISharedPackageContainerManager, id: WinRT_String, options: Windows.Management.Deployment.DeleteSharedPackageContainerOptions) -> Windows.Management.Deployment.DeleteSharedPackageContainerResult: ...
    @winrt_mixinmethod
    def GetContainer(self: Windows.Management.Deployment.ISharedPackageContainerManager, id: WinRT_String) -> Windows.Management.Deployment.SharedPackageContainer: ...
    @winrt_mixinmethod
    def FindContainers(self: Windows.Management.Deployment.ISharedPackageContainerManager) -> Windows.Foundation.Collections.IVector[Windows.Management.Deployment.SharedPackageContainer]: ...
    @winrt_mixinmethod
    def FindContainersWithOptions(self: Windows.Management.Deployment.ISharedPackageContainerManager, options: Windows.Management.Deployment.FindSharedPackageContainerOptions) -> Windows.Foundation.Collections.IVector[Windows.Management.Deployment.SharedPackageContainer]: ...
    @winrt_classmethod
    def GetDefault(cls: Windows.Management.Deployment.ISharedPackageContainerManagerStatics) -> Windows.Management.Deployment.SharedPackageContainerManager: ...
    @winrt_classmethod
    def GetForUser(cls: Windows.Management.Deployment.ISharedPackageContainerManagerStatics, userSid: WinRT_String) -> Windows.Management.Deployment.SharedPackageContainerManager: ...
    @winrt_classmethod
    def GetForProvisioning(cls: Windows.Management.Deployment.ISharedPackageContainerManagerStatics) -> Windows.Management.Deployment.SharedPackageContainerManager: ...
class SharedPackageContainerMember(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _classid_ = 'Windows.Management.Deployment.SharedPackageContainerMember'
    @winrt_factorymethod
    def CreateInstance(cls: Windows.Management.Deployment.ISharedPackageContainerMemberFactory, packageFamilyName: WinRT_String) -> Windows.Management.Deployment.SharedPackageContainerMember: ...
    @winrt_mixinmethod
    def get_PackageFamilyName(self: Windows.Management.Deployment.ISharedPackageContainerMember) -> WinRT_String: ...
    PackageFamilyName = property(get_PackageFamilyName, None)
SharedPackageContainerOperationStatus = Int32
SharedPackageContainerOperationStatus_Success: SharedPackageContainerOperationStatus = 0
SharedPackageContainerOperationStatus_BlockedByPolicy: SharedPackageContainerOperationStatus = 1
SharedPackageContainerOperationStatus_AlreadyExists: SharedPackageContainerOperationStatus = 2
SharedPackageContainerOperationStatus_PackageFamilyExistsInAnotherContainer: SharedPackageContainerOperationStatus = 3
SharedPackageContainerOperationStatus_NotFound: SharedPackageContainerOperationStatus = 4
SharedPackageContainerOperationStatus_UnknownFailure: SharedPackageContainerOperationStatus = 5
class StagePackageOptions(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _classid_ = 'Windows.Management.Deployment.StagePackageOptions'
    @winrt_activatemethod
    def New(cls) -> Windows.Management.Deployment.StagePackageOptions: ...
    @winrt_mixinmethod
    def get_DependencyPackageUris(self: Windows.Management.Deployment.IStagePackageOptions) -> Windows.Foundation.Collections.IVector[Windows.Foundation.Uri]: ...
    @winrt_mixinmethod
    def get_TargetVolume(self: Windows.Management.Deployment.IStagePackageOptions) -> Windows.Management.Deployment.PackageVolume: ...
    @winrt_mixinmethod
    def put_TargetVolume(self: Windows.Management.Deployment.IStagePackageOptions, value: Windows.Management.Deployment.PackageVolume) -> Void: ...
    @winrt_mixinmethod
    def get_OptionalPackageFamilyNames(self: Windows.Management.Deployment.IStagePackageOptions) -> Windows.Foundation.Collections.IVector[WinRT_String]: ...
    @winrt_mixinmethod
    def get_OptionalPackageUris(self: Windows.Management.Deployment.IStagePackageOptions) -> Windows.Foundation.Collections.IVector[Windows.Foundation.Uri]: ...
    @winrt_mixinmethod
    def get_RelatedPackageUris(self: Windows.Management.Deployment.IStagePackageOptions) -> Windows.Foundation.Collections.IVector[Windows.Foundation.Uri]: ...
    @winrt_mixinmethod
    def get_ExternalLocationUri(self: Windows.Management.Deployment.IStagePackageOptions) -> Windows.Foundation.Uri: ...
    @winrt_mixinmethod
    def put_ExternalLocationUri(self: Windows.Management.Deployment.IStagePackageOptions, value: Windows.Foundation.Uri) -> Void: ...
    @winrt_mixinmethod
    def get_StubPackageOption(self: Windows.Management.Deployment.IStagePackageOptions) -> Windows.Management.Deployment.StubPackageOption: ...
    @winrt_mixinmethod
    def put_StubPackageOption(self: Windows.Management.Deployment.IStagePackageOptions, value: Windows.Management.Deployment.StubPackageOption) -> Void: ...
    @winrt_mixinmethod
    def get_DeveloperMode(self: Windows.Management.Deployment.IStagePackageOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_DeveloperMode(self: Windows.Management.Deployment.IStagePackageOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_ForceUpdateFromAnyVersion(self: Windows.Management.Deployment.IStagePackageOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_ForceUpdateFromAnyVersion(self: Windows.Management.Deployment.IStagePackageOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_InstallAllResources(self: Windows.Management.Deployment.IStagePackageOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_InstallAllResources(self: Windows.Management.Deployment.IStagePackageOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_RequiredContentGroupOnly(self: Windows.Management.Deployment.IStagePackageOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_RequiredContentGroupOnly(self: Windows.Management.Deployment.IStagePackageOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_StageInPlace(self: Windows.Management.Deployment.IStagePackageOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_StageInPlace(self: Windows.Management.Deployment.IStagePackageOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_AllowUnsigned(self: Windows.Management.Deployment.IStagePackageOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_AllowUnsigned(self: Windows.Management.Deployment.IStagePackageOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_ExpectedDigests(self: Windows.Management.Deployment.IStagePackageOptions2) -> Windows.Foundation.Collections.IMap[Windows.Foundation.Uri, WinRT_String]: ...
    DependencyPackageUris = property(get_DependencyPackageUris, None)
    TargetVolume = property(get_TargetVolume, put_TargetVolume)
    OptionalPackageFamilyNames = property(get_OptionalPackageFamilyNames, None)
    OptionalPackageUris = property(get_OptionalPackageUris, None)
    RelatedPackageUris = property(get_RelatedPackageUris, None)
    ExternalLocationUri = property(get_ExternalLocationUri, put_ExternalLocationUri)
    StubPackageOption = property(get_StubPackageOption, put_StubPackageOption)
    DeveloperMode = property(get_DeveloperMode, put_DeveloperMode)
    ForceUpdateFromAnyVersion = property(get_ForceUpdateFromAnyVersion, put_ForceUpdateFromAnyVersion)
    InstallAllResources = property(get_InstallAllResources, put_InstallAllResources)
    RequiredContentGroupOnly = property(get_RequiredContentGroupOnly, put_RequiredContentGroupOnly)
    StageInPlace = property(get_StageInPlace, put_StageInPlace)
    AllowUnsigned = property(get_AllowUnsigned, put_AllowUnsigned)
    ExpectedDigests = property(get_ExpectedDigests, None)
StubPackageOption = Int32
StubPackageOption_Default: StubPackageOption = 0
StubPackageOption_InstallFull: StubPackageOption = 1
StubPackageOption_InstallStub: StubPackageOption = 2
StubPackageOption_UsePreference: StubPackageOption = 3
class UpdateSharedPackageContainerOptions(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _classid_ = 'Windows.Management.Deployment.UpdateSharedPackageContainerOptions'
    @winrt_activatemethod
    def New(cls) -> Windows.Management.Deployment.UpdateSharedPackageContainerOptions: ...
    @winrt_mixinmethod
    def get_ForceAppShutdown(self: Windows.Management.Deployment.IUpdateSharedPackageContainerOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_ForceAppShutdown(self: Windows.Management.Deployment.IUpdateSharedPackageContainerOptions, value: Boolean) -> Void: ...
    @winrt_mixinmethod
    def get_RequirePackagesPresent(self: Windows.Management.Deployment.IUpdateSharedPackageContainerOptions) -> Boolean: ...
    @winrt_mixinmethod
    def put_RequirePackagesPresent(self: Windows.Management.Deployment.IUpdateSharedPackageContainerOptions, value: Boolean) -> Void: ...
    ForceAppShutdown = property(get_ForceAppShutdown, put_ForceAppShutdown)
    RequirePackagesPresent = property(get_RequirePackagesPresent, put_RequirePackagesPresent)
class UpdateSharedPackageContainerResult(ComPtr):
    extends: Windows.Win32.System.WinRT.IInspectable
    _classid_ = 'Windows.Management.Deployment.UpdateSharedPackageContainerResult'
    @winrt_mixinmethod
    def get_Status(self: Windows.Management.Deployment.IUpdateSharedPackageContainerResult) -> Windows.Management.Deployment.SharedPackageContainerOperationStatus: ...
    @winrt_mixinmethod
    def get_ExtendedError(self: Windows.Management.Deployment.IUpdateSharedPackageContainerResult) -> Windows.Foundation.HResult: ...
    Status = property(get_Status, None)
    ExtendedError = property(get_ExtendedError, None)
make_head(_module, 'AddPackageOptions')
make_head(_module, 'AppInstallerManager')
make_head(_module, 'AutoUpdateSettingsOptions')
make_head(_module, 'CreateSharedPackageContainerOptions')
make_head(_module, 'CreateSharedPackageContainerResult')
make_head(_module, 'DeleteSharedPackageContainerOptions')
make_head(_module, 'DeleteSharedPackageContainerResult')
make_head(_module, 'DeploymentProgress')
make_head(_module, 'DeploymentResult')
make_head(_module, 'FindSharedPackageContainerOptions')
make_head(_module, 'IAddPackageOptions')
make_head(_module, 'IAddPackageOptions2')
make_head(_module, 'IAppInstallerManager')
make_head(_module, 'IAppInstallerManagerStatics')
make_head(_module, 'IAutoUpdateSettingsOptions')
make_head(_module, 'IAutoUpdateSettingsOptionsStatics')
make_head(_module, 'ICreateSharedPackageContainerOptions')
make_head(_module, 'ICreateSharedPackageContainerResult')
make_head(_module, 'IDeleteSharedPackageContainerOptions')
make_head(_module, 'IDeleteSharedPackageContainerResult')
make_head(_module, 'IDeploymentResult')
make_head(_module, 'IDeploymentResult2')
make_head(_module, 'IFindSharedPackageContainerOptions')
make_head(_module, 'IPackageAllUserProvisioningOptions')
make_head(_module, 'IPackageManager')
make_head(_module, 'IPackageManager10')
make_head(_module, 'IPackageManager2')
make_head(_module, 'IPackageManager3')
make_head(_module, 'IPackageManager4')
make_head(_module, 'IPackageManager5')
make_head(_module, 'IPackageManager6')
make_head(_module, 'IPackageManager7')
make_head(_module, 'IPackageManager8')
make_head(_module, 'IPackageManager9')
make_head(_module, 'IPackageManagerDebugSettings')
make_head(_module, 'IPackageUserInformation')
make_head(_module, 'IPackageVolume')
make_head(_module, 'IPackageVolume2')
make_head(_module, 'IRegisterPackageOptions')
make_head(_module, 'IRegisterPackageOptions2')
make_head(_module, 'ISharedPackageContainer')
make_head(_module, 'ISharedPackageContainerManager')
make_head(_module, 'ISharedPackageContainerManagerStatics')
make_head(_module, 'ISharedPackageContainerMember')
make_head(_module, 'ISharedPackageContainerMemberFactory')
make_head(_module, 'IStagePackageOptions')
make_head(_module, 'IStagePackageOptions2')
make_head(_module, 'IUpdateSharedPackageContainerOptions')
make_head(_module, 'IUpdateSharedPackageContainerResult')
make_head(_module, 'PackageAllUserProvisioningOptions')
make_head(_module, 'PackageManager')
make_head(_module, 'PackageManagerDebugSettings')
make_head(_module, 'PackageUserInformation')
make_head(_module, 'PackageVolume')
make_head(_module, 'RegisterPackageOptions')
make_head(_module, 'SharedPackageContainer')
make_head(_module, 'SharedPackageContainerManager')
make_head(_module, 'SharedPackageContainerMember')
make_head(_module, 'StagePackageOptions')
make_head(_module, 'UpdateSharedPackageContainerOptions')
make_head(_module, 'UpdateSharedPackageContainerResult')
