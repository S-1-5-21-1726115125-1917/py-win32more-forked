from __future__ import annotations
from ctypes import POINTER
from Windows import ARCH, Boolean, Byte, Bytes, Char, ComPtr, Double, EasyCastStructure, EasyCastUnion, FAILED, Guid, Int16, Int32, Int64, IntPtr, MissingType, SByte, SUCCEEDED, Single, String, String, UInt16, UInt32, UInt64, UIntPtr, Void, VoidPtr, cfunctype, cfunctype_pointer, commethod, make_head, press, winfunctype, winfunctype_pointer
import Windows.Win32.Foundation
import Windows.Win32.System.HostComputeNetwork
import sys
_module = sys.modules[__name__]
def __getattr__(name):
    try:
        prototype = globals()[f'{name}_head']
    except KeyError:
        raise AttributeError(f"module '{__name__}' has no attribute '{name}'") from None
    setattr(_module, name, press(prototype))
    return getattr(_module, name)
@winfunctype('computenetwork.dll')
def HcnEnumerateNetworks(Query: Windows.Win32.Foundation.PWSTR, Networks: POINTER(Windows.Win32.Foundation.PWSTR), ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnCreateNetwork(Id: POINTER(Guid), Settings: Windows.Win32.Foundation.PWSTR, Network: POINTER(VoidPtr), ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnOpenNetwork(Id: POINTER(Guid), Network: POINTER(VoidPtr), ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnModifyNetwork(Network: VoidPtr, Settings: Windows.Win32.Foundation.PWSTR, ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnQueryNetworkProperties(Network: VoidPtr, Query: Windows.Win32.Foundation.PWSTR, Properties: POINTER(Windows.Win32.Foundation.PWSTR), ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnDeleteNetwork(Id: POINTER(Guid), ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnCloseNetwork(Network: VoidPtr) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnEnumerateNamespaces(Query: Windows.Win32.Foundation.PWSTR, Namespaces: POINTER(Windows.Win32.Foundation.PWSTR), ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnCreateNamespace(Id: POINTER(Guid), Settings: Windows.Win32.Foundation.PWSTR, Namespace: POINTER(VoidPtr), ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnOpenNamespace(Id: POINTER(Guid), Namespace: POINTER(VoidPtr), ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnModifyNamespace(Namespace: VoidPtr, Settings: Windows.Win32.Foundation.PWSTR, ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnQueryNamespaceProperties(Namespace: VoidPtr, Query: Windows.Win32.Foundation.PWSTR, Properties: POINTER(Windows.Win32.Foundation.PWSTR), ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnDeleteNamespace(Id: POINTER(Guid), ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnCloseNamespace(Namespace: VoidPtr) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnEnumerateEndpoints(Query: Windows.Win32.Foundation.PWSTR, Endpoints: POINTER(Windows.Win32.Foundation.PWSTR), ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnCreateEndpoint(Network: VoidPtr, Id: POINTER(Guid), Settings: Windows.Win32.Foundation.PWSTR, Endpoint: POINTER(VoidPtr), ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnOpenEndpoint(Id: POINTER(Guid), Endpoint: POINTER(VoidPtr), ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnModifyEndpoint(Endpoint: VoidPtr, Settings: Windows.Win32.Foundation.PWSTR, ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnQueryEndpointProperties(Endpoint: VoidPtr, Query: Windows.Win32.Foundation.PWSTR, Properties: POINTER(Windows.Win32.Foundation.PWSTR), ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnDeleteEndpoint(Id: POINTER(Guid), ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnCloseEndpoint(Endpoint: VoidPtr) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnEnumerateLoadBalancers(Query: Windows.Win32.Foundation.PWSTR, LoadBalancer: POINTER(Windows.Win32.Foundation.PWSTR), ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnCreateLoadBalancer(Id: POINTER(Guid), Settings: Windows.Win32.Foundation.PWSTR, LoadBalancer: POINTER(VoidPtr), ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnOpenLoadBalancer(Id: POINTER(Guid), LoadBalancer: POINTER(VoidPtr), ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnModifyLoadBalancer(LoadBalancer: VoidPtr, Settings: Windows.Win32.Foundation.PWSTR, ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnQueryLoadBalancerProperties(LoadBalancer: VoidPtr, Query: Windows.Win32.Foundation.PWSTR, Properties: POINTER(Windows.Win32.Foundation.PWSTR), ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnDeleteLoadBalancer(Id: POINTER(Guid), ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnCloseLoadBalancer(LoadBalancer: VoidPtr) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnRegisterServiceCallback(Callback: Windows.Win32.System.HostComputeNetwork.HCN_NOTIFICATION_CALLBACK, Context: VoidPtr, CallbackHandle: POINTER(VoidPtr)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnUnregisterServiceCallback(CallbackHandle: VoidPtr) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnRegisterGuestNetworkServiceCallback(GuestNetworkService: VoidPtr, Callback: Windows.Win32.System.HostComputeNetwork.HCN_NOTIFICATION_CALLBACK, Context: VoidPtr, CallbackHandle: POINTER(VoidPtr)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnUnregisterGuestNetworkServiceCallback(CallbackHandle: VoidPtr) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnCreateGuestNetworkService(Id: POINTER(Guid), Settings: Windows.Win32.Foundation.PWSTR, GuestNetworkService: POINTER(VoidPtr), ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnCloseGuestNetworkService(GuestNetworkService: VoidPtr) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnModifyGuestNetworkService(GuestNetworkService: VoidPtr, Settings: Windows.Win32.Foundation.PWSTR, ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnDeleteGuestNetworkService(Id: POINTER(Guid), ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnReserveGuestNetworkServicePort(GuestNetworkService: VoidPtr, Protocol: Windows.Win32.System.HostComputeNetwork.HCN_PORT_PROTOCOL, Access: Windows.Win32.System.HostComputeNetwork.HCN_PORT_ACCESS, Port: UInt16, PortReservationHandle: POINTER(Windows.Win32.Foundation.HANDLE)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnReserveGuestNetworkServicePortRange(GuestNetworkService: VoidPtr, PortCount: UInt16, PortRangeReservation: POINTER(Windows.Win32.System.HostComputeNetwork.HCN_PORT_RANGE_RESERVATION_head), PortReservationHandle: POINTER(Windows.Win32.Foundation.HANDLE)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnReleaseGuestNetworkServicePortReservationHandle(PortReservationHandle: Windows.Win32.Foundation.HANDLE) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnEnumerateGuestNetworkPortReservations(ReturnCount: POINTER(UInt32), PortEntries: POINTER(POINTER(Windows.Win32.System.HostComputeNetwork.HCN_PORT_RANGE_ENTRY_head))) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnFreeGuestNetworkPortReservations(PortEntries: POINTER(Windows.Win32.System.HostComputeNetwork.HCN_PORT_RANGE_ENTRY_head)) -> Void: ...
@winfunctype('computenetwork.dll')
def HcnQueryEndpointStats(Endpoint: VoidPtr, Query: Windows.Win32.Foundation.PWSTR, Stats: POINTER(Windows.Win32.Foundation.PWSTR), ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
@winfunctype('computenetwork.dll')
def HcnQueryEndpointAddresses(Endpoint: VoidPtr, Query: Windows.Win32.Foundation.PWSTR, Addresses: POINTER(Windows.Win32.Foundation.PWSTR), ErrorRecord: POINTER(Windows.Win32.Foundation.PWSTR)) -> Windows.Win32.Foundation.HRESULT: ...
HCN_NOTIFICATIONS = Int32
HCN_NOTIFICATIONS_HcnNotificationInvalid: HCN_NOTIFICATIONS = 0
HCN_NOTIFICATIONS_HcnNotificationNetworkPreCreate: HCN_NOTIFICATIONS = 1
HCN_NOTIFICATIONS_HcnNotificationNetworkCreate: HCN_NOTIFICATIONS = 2
HCN_NOTIFICATIONS_HcnNotificationNetworkPreDelete: HCN_NOTIFICATIONS = 3
HCN_NOTIFICATIONS_HcnNotificationNetworkDelete: HCN_NOTIFICATIONS = 4
HCN_NOTIFICATIONS_HcnNotificationNamespaceCreate: HCN_NOTIFICATIONS = 5
HCN_NOTIFICATIONS_HcnNotificationNamespaceDelete: HCN_NOTIFICATIONS = 6
HCN_NOTIFICATIONS_HcnNotificationGuestNetworkServiceCreate: HCN_NOTIFICATIONS = 7
HCN_NOTIFICATIONS_HcnNotificationGuestNetworkServiceDelete: HCN_NOTIFICATIONS = 8
HCN_NOTIFICATIONS_HcnNotificationNetworkEndpointAttached: HCN_NOTIFICATIONS = 9
HCN_NOTIFICATIONS_HcnNotificationNetworkEndpointDetached: HCN_NOTIFICATIONS = 16
HCN_NOTIFICATIONS_HcnNotificationGuestNetworkServiceStateChanged: HCN_NOTIFICATIONS = 17
HCN_NOTIFICATIONS_HcnNotificationGuestNetworkServiceInterfaceStateChanged: HCN_NOTIFICATIONS = 18
HCN_NOTIFICATIONS_HcnNotificationServiceDisconnect: HCN_NOTIFICATIONS = 16777216
HCN_NOTIFICATIONS_HcnNotificationFlagsReserved: HCN_NOTIFICATIONS = -268435456
@winfunctype_pointer
def HCN_NOTIFICATION_CALLBACK(NotificationType: UInt32, Context: VoidPtr, NotificationStatus: Windows.Win32.Foundation.HRESULT, NotificationData: Windows.Win32.Foundation.PWSTR) -> Void: ...
HCN_PORT_ACCESS = Int32
HCN_PORT_ACCESS_EXCLUSIVE: HCN_PORT_ACCESS = 1
HCN_PORT_ACCESS_SHARED: HCN_PORT_ACCESS = 2
HCN_PORT_PROTOCOL = Int32
HCN_PORT_PROTOCOL_TCP: HCN_PORT_PROTOCOL = 1
HCN_PORT_PROTOCOL_UDP: HCN_PORT_PROTOCOL = 2
HCN_PORT_PROTOCOL_BOTH: HCN_PORT_PROTOCOL = 3
class HCN_PORT_RANGE_ENTRY(EasyCastStructure):
    OwningPartitionId: Guid
    TargetPartitionId: Guid
    Protocol: Windows.Win32.System.HostComputeNetwork.HCN_PORT_PROTOCOL
    Priority: UInt64
    ReservationType: UInt32
    SharingFlags: UInt32
    DeliveryMode: UInt32
    StartingPort: UInt16
    EndingPort: UInt16
class HCN_PORT_RANGE_RESERVATION(EasyCastStructure):
    startingPort: UInt16
    endingPort: UInt16
make_head(_module, 'HCN_NOTIFICATION_CALLBACK')
make_head(_module, 'HCN_PORT_RANGE_ENTRY')
make_head(_module, 'HCN_PORT_RANGE_RESERVATION')
