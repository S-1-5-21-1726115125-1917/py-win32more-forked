from win32more.base import *
import win32more.Foundation
import win32more.Graphics.Gdi
import win32more.System.Power
import win32more.UI.Shell
import win32more.UI.WindowsAndMessaging

import sys
_module = sys.modules[__name__]
def __getattr__(name):
    try:
        f = globals()[f"_define_{name}"]
    except KeyError:
        raise AttributeError(f"module '{__name__}' has no attribute '{name}'") from None
    setattr(_module, name, f())
    return getattr(_module, name)
def __dir__():
    return __all__
WM_DEVICECHANGE = 537
BSM_VXDS = 1
BSM_NETDRIVER = 2
BSM_INSTALLABLEDRIVERS = 4
RT_CURSOR = 1
RT_BITMAP = 2
RT_ICON = 3
RT_MENU = 4
RT_DIALOG = 5
RT_FONTDIR = 7
RT_FONT = 8
RT_ACCELERATOR = 9
RT_MESSAGETABLE = 11
DIFFERENCE = 11
RT_VERSION = 16
RT_DLGINCLUDE = 17
RT_PLUGPLAY = 19
RT_VXD = 20
RT_ANICURSOR = 21
RT_ANIICON = 22
RT_HTML = 23
RT_MANIFEST = 24
CREATEPROCESS_MANIFEST_RESOURCE_ID = 1
ISOLATIONAWARE_MANIFEST_RESOURCE_ID = 2
ISOLATIONAWARE_NOSTATICIMPORT_MANIFEST_RESOURCE_ID = 3
ISOLATIONPOLICY_MANIFEST_RESOURCE_ID = 4
ISOLATIONPOLICY_BROWSER_MANIFEST_RESOURCE_ID = 5
MINIMUM_RESERVED_MANIFEST_RESOURCE_ID = 1
MAXIMUM_RESERVED_MANIFEST_RESOURCE_ID = 16
SB_LINEUP = 0
SB_LINELEFT = 0
SB_LINEDOWN = 1
SB_LINERIGHT = 1
SB_PAGEUP = 2
SB_PAGELEFT = 2
SB_PAGEDOWN = 3
SB_PAGERIGHT = 3
SB_THUMBPOSITION = 4
SB_THUMBTRACK = 5
SB_TOP = 6
SB_LEFT = 6
SB_BOTTOM = 7
SB_RIGHT = 7
SB_ENDSCROLL = 8
HIDE_WINDOW = 0
SHOW_OPENWINDOW = 1
SHOW_ICONWINDOW = 2
SHOW_FULLSCREEN = 3
SHOW_OPENNOACTIVATE = 4
KF_EXTENDED = 256
KF_DLGMODE = 2048
KF_MENUMODE = 4096
KF_ALTDOWN = 8192
KF_REPEAT = 16384
KF_UP = 32768
WH_MIN = -1
WH_HARDWARE = 8
WH_MAX = 14
WH_MINHOOK = -1
WH_MAXHOOK = 14
HC_ACTION = 0
HC_GETNEXT = 1
HC_SKIP = 2
HC_NOREMOVE = 3
HC_NOREM = 3
HC_SYSMODALON = 4
HC_SYSMODALOFF = 5
HCBT_MOVESIZE = 0
HCBT_MINMAX = 1
HCBT_QS = 2
HCBT_CREATEWND = 3
HCBT_DESTROYWND = 4
HCBT_ACTIVATE = 5
HCBT_CLICKSKIPPED = 6
HCBT_KEYSKIPPED = 7
HCBT_SYSCOMMAND = 8
HCBT_SETFOCUS = 9
WTS_CONSOLE_CONNECT = 1
WTS_CONSOLE_DISCONNECT = 2
WTS_REMOTE_CONNECT = 3
WTS_REMOTE_DISCONNECT = 4
WTS_SESSION_LOGON = 5
WTS_SESSION_LOGOFF = 6
WTS_SESSION_LOCK = 7
WTS_SESSION_UNLOCK = 8
WTS_SESSION_REMOTE_CONTROL = 9
WTS_SESSION_CREATE = 10
WTS_SESSION_TERMINATE = 11
MSGF_DIALOGBOX = 0
MSGF_MESSAGEBOX = 1
MSGF_MENU = 2
MSGF_SCROLLBAR = 5
MSGF_NEXTWINDOW = 6
MSGF_MAX = 8
MSGF_USER = 4096
HSHELL_WINDOWCREATED = 1
HSHELL_WINDOWDESTROYED = 2
HSHELL_ACTIVATESHELLWINDOW = 3
HSHELL_WINDOWACTIVATED = 4
HSHELL_GETMINRECT = 5
HSHELL_REDRAW = 6
HSHELL_TASKMAN = 7
HSHELL_LANGUAGE = 8
HSHELL_SYSMENU = 9
HSHELL_ENDTASK = 10
HSHELL_ACCESSIBILITYSTATE = 11
HSHELL_APPCOMMAND = 12
HSHELL_WINDOWREPLACED = 13
HSHELL_WINDOWREPLACING = 14
HSHELL_MONITORCHANGED = 16
HSHELL_HIGHBIT = 32768
FAPPCOMMAND_MOUSE = 32768
FAPPCOMMAND_KEY = 0
FAPPCOMMAND_OEM = 4096
FAPPCOMMAND_MASK = 61440
LLMHF_INJECTED = 1
LLMHF_LOWER_IL_INJECTED = 2
HKL_PREV = 0
HKL_NEXT = 1
INPUTLANGCHANGE_SYSCHARSET = 1
INPUTLANGCHANGE_FORWARD = 2
INPUTLANGCHANGE_BACKWARD = 4
KL_NAMELENGTH = 9
DESKTOP_READOBJECTS = 1
DESKTOP_CREATEWINDOW = 2
DESKTOP_CREATEMENU = 4
DESKTOP_HOOKCONTROL = 8
DESKTOP_JOURNALRECORD = 16
DESKTOP_JOURNALPLAYBACK = 32
DESKTOP_ENUMERATE = 64
DESKTOP_WRITEOBJECTS = 128
DESKTOP_SWITCHDESKTOP = 256
DF_ALLOWOTHERACCOUNTHOOK = 1
WINSTA_ENUMDESKTOPS = 1
WINSTA_READATTRIBUTES = 2
WINSTA_ACCESSCLIPBOARD = 4
WINSTA_CREATEDESKTOP = 8
WINSTA_WRITEATTRIBUTES = 16
WINSTA_ACCESSGLOBALATOMS = 32
WINSTA_EXITWINDOWS = 64
WINSTA_ENUMERATE = 256
WINSTA_READSCREEN = 512
CWF_CREATE_ONLY = 1
WSF_VISIBLE = 1
UOI_TIMERPROC_EXCEPTION_SUPPRESSION = 7
WM_NULL = 0
WM_CREATE = 1
WM_DESTROY = 2
WM_MOVE = 3
WM_SIZE = 5
WM_ACTIVATE = 6
WA_INACTIVE = 0
WA_ACTIVE = 1
WA_CLICKACTIVE = 2
WM_SETFOCUS = 7
WM_KILLFOCUS = 8
WM_ENABLE = 10
WM_SETREDRAW = 11
WM_SETTEXT = 12
WM_GETTEXT = 13
WM_GETTEXTLENGTH = 14
WM_PAINT = 15
WM_CLOSE = 16
WM_QUERYENDSESSION = 17
WM_QUERYOPEN = 19
WM_ENDSESSION = 22
WM_QUIT = 18
WM_ERASEBKGND = 20
WM_SYSCOLORCHANGE = 21
WM_SHOWWINDOW = 24
WM_WININICHANGE = 26
WM_SETTINGCHANGE = 26
WM_DEVMODECHANGE = 27
WM_ACTIVATEAPP = 28
WM_FONTCHANGE = 29
WM_TIMECHANGE = 30
WM_CANCELMODE = 31
WM_SETCURSOR = 32
WM_MOUSEACTIVATE = 33
WM_CHILDACTIVATE = 34
WM_QUEUESYNC = 35
WM_GETMINMAXINFO = 36
WM_PAINTICON = 38
WM_ICONERASEBKGND = 39
WM_NEXTDLGCTL = 40
WM_SPOOLERSTATUS = 42
WM_DRAWITEM = 43
WM_MEASUREITEM = 44
WM_DELETEITEM = 45
WM_VKEYTOITEM = 46
WM_CHARTOITEM = 47
WM_SETFONT = 48
WM_GETFONT = 49
WM_SETHOTKEY = 50
WM_GETHOTKEY = 51
WM_QUERYDRAGICON = 55
WM_COMPAREITEM = 57
WM_GETOBJECT = 61
WM_COMPACTING = 65
WM_COMMNOTIFY = 68
WM_WINDOWPOSCHANGING = 70
WM_WINDOWPOSCHANGED = 71
WM_POWER = 72
PWR_OK = 1
PWR_FAIL = -1
PWR_SUSPENDREQUEST = 1
PWR_SUSPENDRESUME = 2
PWR_CRITICALRESUME = 3
WM_COPYDATA = 74
WM_CANCELJOURNAL = 75
WM_INPUTLANGCHANGEREQUEST = 80
WM_INPUTLANGCHANGE = 81
WM_TCARD = 82
WM_HELP = 83
WM_USERCHANGED = 84
WM_NOTIFYFORMAT = 85
NFR_ANSI = 1
NFR_UNICODE = 2
NF_QUERY = 3
NF_REQUERY = 4
WM_STYLECHANGING = 124
WM_STYLECHANGED = 125
WM_DISPLAYCHANGE = 126
WM_GETICON = 127
WM_SETICON = 128
WM_NCCREATE = 129
WM_NCDESTROY = 130
WM_NCCALCSIZE = 131
WM_NCHITTEST = 132
WM_NCPAINT = 133
WM_NCACTIVATE = 134
WM_GETDLGCODE = 135
WM_SYNCPAINT = 136
WM_NCMOUSEMOVE = 160
WM_NCLBUTTONDOWN = 161
WM_NCLBUTTONUP = 162
WM_NCLBUTTONDBLCLK = 163
WM_NCRBUTTONDOWN = 164
WM_NCRBUTTONUP = 165
WM_NCRBUTTONDBLCLK = 166
WM_NCMBUTTONDOWN = 167
WM_NCMBUTTONUP = 168
WM_NCMBUTTONDBLCLK = 169
WM_NCXBUTTONDOWN = 171
WM_NCXBUTTONUP = 172
WM_NCXBUTTONDBLCLK = 173
WM_INPUT_DEVICE_CHANGE = 254
WM_INPUT = 255
WM_KEYFIRST = 256
WM_KEYDOWN = 256
WM_KEYUP = 257
WM_CHAR = 258
WM_DEADCHAR = 259
WM_SYSKEYDOWN = 260
WM_SYSKEYUP = 261
WM_SYSCHAR = 262
WM_SYSDEADCHAR = 263
WM_KEYLAST = 265
UNICODE_NOCHAR = 65535
WM_IME_STARTCOMPOSITION = 269
WM_IME_ENDCOMPOSITION = 270
WM_IME_COMPOSITION = 271
WM_IME_KEYLAST = 271
WM_INITDIALOG = 272
WM_COMMAND = 273
WM_SYSCOMMAND = 274
WM_TIMER = 275
WM_HSCROLL = 276
WM_VSCROLL = 277
WM_INITMENU = 278
WM_INITMENUPOPUP = 279
WM_GESTURE = 281
WM_GESTURENOTIFY = 282
WM_MENUSELECT = 287
WM_MENUCHAR = 288
WM_ENTERIDLE = 289
WM_MENURBUTTONUP = 290
WM_MENUDRAG = 291
WM_MENUGETOBJECT = 292
WM_UNINITMENUPOPUP = 293
WM_MENUCOMMAND = 294
WM_CHANGEUISTATE = 295
WM_UPDATEUISTATE = 296
WM_QUERYUISTATE = 297
UIS_SET = 1
UIS_CLEAR = 2
UIS_INITIALIZE = 3
UISF_HIDEFOCUS = 1
UISF_HIDEACCEL = 2
UISF_ACTIVE = 4
WM_CTLCOLORMSGBOX = 306
WM_CTLCOLOREDIT = 307
WM_CTLCOLORLISTBOX = 308
WM_CTLCOLORBTN = 309
WM_CTLCOLORDLG = 310
WM_CTLCOLORSCROLLBAR = 311
WM_CTLCOLORSTATIC = 312
MN_GETHMENU = 481
WM_MOUSEFIRST = 512
WM_MOUSEMOVE = 512
WM_LBUTTONDOWN = 513
WM_LBUTTONUP = 514
WM_LBUTTONDBLCLK = 515
WM_RBUTTONDOWN = 516
WM_RBUTTONUP = 517
WM_RBUTTONDBLCLK = 518
WM_MBUTTONDOWN = 519
WM_MBUTTONUP = 520
WM_MBUTTONDBLCLK = 521
WM_MOUSEWHEEL = 522
WM_XBUTTONDOWN = 523
WM_XBUTTONUP = 524
WM_XBUTTONDBLCLK = 525
WM_MOUSEHWHEEL = 526
WM_MOUSELAST = 526
WHEEL_DELTA = 120
WM_PARENTNOTIFY = 528
WM_ENTERMENULOOP = 529
WM_EXITMENULOOP = 530
WM_NEXTMENU = 531
WM_SIZING = 532
WM_CAPTURECHANGED = 533
WM_MOVING = 534
WM_POWERBROADCAST = 536
PBT_APMQUERYSUSPEND = 0
PBT_APMQUERYSTANDBY = 1
PBT_APMQUERYSUSPENDFAILED = 2
PBT_APMQUERYSTANDBYFAILED = 3
PBT_APMSUSPEND = 4
PBT_APMSTANDBY = 5
PBT_APMRESUMECRITICAL = 6
PBT_APMRESUMESUSPEND = 7
PBT_APMRESUMESTANDBY = 8
PBTF_APMRESUMEFROMFAILURE = 1
PBT_APMBATTERYLOW = 9
PBT_APMPOWERSTATUSCHANGE = 10
PBT_APMOEMEVENT = 11
PBT_APMRESUMEAUTOMATIC = 18
PBT_POWERSETTINGCHANGE = 32787
WM_MDICREATE = 544
WM_MDIDESTROY = 545
WM_MDIACTIVATE = 546
WM_MDIRESTORE = 547
WM_MDINEXT = 548
WM_MDIMAXIMIZE = 549
WM_MDITILE = 550
WM_MDICASCADE = 551
WM_MDIICONARRANGE = 552
WM_MDIGETACTIVE = 553
WM_MDISETMENU = 560
WM_ENTERSIZEMOVE = 561
WM_EXITSIZEMOVE = 562
WM_DROPFILES = 563
WM_MDIREFRESHMENU = 564
WM_POINTERDEVICECHANGE = 568
WM_POINTERDEVICEINRANGE = 569
WM_POINTERDEVICEOUTOFRANGE = 570
WM_TOUCH = 576
WM_NCPOINTERUPDATE = 577
WM_NCPOINTERDOWN = 578
WM_NCPOINTERUP = 579
WM_POINTERUPDATE = 581
WM_POINTERDOWN = 582
WM_POINTERUP = 583
WM_POINTERENTER = 585
WM_POINTERLEAVE = 586
WM_POINTERACTIVATE = 587
WM_POINTERCAPTURECHANGED = 588
WM_TOUCHHITTESTING = 589
WM_POINTERWHEEL = 590
WM_POINTERHWHEEL = 591
DM_POINTERHITTEST = 592
WM_POINTERROUTEDTO = 593
WM_POINTERROUTEDAWAY = 594
WM_POINTERROUTEDRELEASED = 595
WM_IME_SETCONTEXT = 641
WM_IME_NOTIFY = 642
WM_IME_CONTROL = 643
WM_IME_COMPOSITIONFULL = 644
WM_IME_SELECT = 645
WM_IME_CHAR = 646
WM_IME_REQUEST = 648
WM_IME_KEYDOWN = 656
WM_IME_KEYUP = 657
WM_NCMOUSEHOVER = 672
WM_NCMOUSELEAVE = 674
WM_WTSSESSION_CHANGE = 689
WM_TABLET_FIRST = 704
WM_TABLET_LAST = 735
WM_DPICHANGED = 736
WM_DPICHANGED_BEFOREPARENT = 738
WM_DPICHANGED_AFTERPARENT = 739
WM_GETDPISCALEDSIZE = 740
WM_CUT = 768
WM_COPY = 769
WM_PASTE = 770
WM_CLEAR = 771
WM_UNDO = 772
WM_RENDERFORMAT = 773
WM_RENDERALLFORMATS = 774
WM_DESTROYCLIPBOARD = 775
WM_DRAWCLIPBOARD = 776
WM_PAINTCLIPBOARD = 777
WM_VSCROLLCLIPBOARD = 778
WM_SIZECLIPBOARD = 779
WM_ASKCBFORMATNAME = 780
WM_CHANGECBCHAIN = 781
WM_HSCROLLCLIPBOARD = 782
WM_QUERYNEWPALETTE = 783
WM_PALETTEISCHANGING = 784
WM_PALETTECHANGED = 785
WM_HOTKEY = 786
WM_PRINT = 791
WM_APPCOMMAND = 793
WM_THEMECHANGED = 794
WM_CLIPBOARDUPDATE = 797
WM_DWMCOMPOSITIONCHANGED = 798
WM_DWMNCRENDERINGCHANGED = 799
WM_DWMCOLORIZATIONCOLORCHANGED = 800
WM_DWMWINDOWMAXIMIZEDCHANGE = 801
WM_DWMSENDICONICTHUMBNAIL = 803
WM_DWMSENDICONICLIVEPREVIEWBITMAP = 806
WM_GETTITLEBARINFOEX = 831
WM_HANDHELDFIRST = 856
WM_HANDHELDLAST = 863
WM_AFXFIRST = 864
WM_AFXLAST = 895
WM_PENWINFIRST = 896
WM_PENWINLAST = 911
WM_APP = 32768
WM_USER = 1024
WMSZ_LEFT = 1
WMSZ_RIGHT = 2
WMSZ_TOP = 3
WMSZ_TOPLEFT = 4
WMSZ_TOPRIGHT = 5
WMSZ_BOTTOM = 6
WMSZ_BOTTOMLEFT = 7
WMSZ_BOTTOMRIGHT = 8
HTERROR = -2
HTTRANSPARENT = -1
HTNOWHERE = 0
HTCLIENT = 1
HTCAPTION = 2
HTSYSMENU = 3
HTGROWBOX = 4
HTSIZE = 4
HTMENU = 5
HTHSCROLL = 6
HTVSCROLL = 7
HTMINBUTTON = 8
HTMAXBUTTON = 9
HTLEFT = 10
HTRIGHT = 11
HTTOP = 12
HTTOPLEFT = 13
HTTOPRIGHT = 14
HTBOTTOM = 15
HTBOTTOMLEFT = 16
HTBOTTOMRIGHT = 17
HTBORDER = 18
HTREDUCE = 8
HTZOOM = 9
HTSIZEFIRST = 10
HTSIZELAST = 17
HTOBJECT = 19
HTCLOSE = 20
HTHELP = 21
MA_ACTIVATE = 1
MA_ACTIVATEANDEAT = 2
MA_NOACTIVATE = 3
MA_NOACTIVATEANDEAT = 4
ICON_SMALL = 0
ICON_BIG = 1
ICON_SMALL2 = 2
SIZE_RESTORED = 0
SIZE_MINIMIZED = 1
SIZE_MAXIMIZED = 2
SIZE_MAXSHOW = 3
SIZE_MAXHIDE = 4
SIZENORMAL = 0
SIZEICONIC = 1
SIZEFULLSCREEN = 2
SIZEZOOMSHOW = 3
SIZEZOOMHIDE = 4
WVR_ALIGNTOP = 16
WVR_ALIGNLEFT = 32
WVR_ALIGNBOTTOM = 64
WVR_ALIGNRIGHT = 128
WVR_HREDRAW = 256
WVR_VREDRAW = 512
WVR_VALIDRECTS = 1024
MK_LBUTTON = 1
MK_RBUTTON = 2
MK_SHIFT = 4
MK_CONTROL = 8
MK_MBUTTON = 16
MK_XBUTTON1 = 32
MK_XBUTTON2 = 64
PRF_CHECKVISIBLE = 1
PRF_NONCLIENT = 2
PRF_CLIENT = 4
PRF_ERASEBKGND = 8
PRF_CHILDREN = 16
PRF_OWNED = 32
IDANI_OPEN = 1
IDANI_CAPTION = 3
FVIRTKEY = 1
FNOINVERT = 2
FSHIFT = 4
FCONTROL = 8
FALT = 16
ODA_DRAWENTIRE = 1
ODA_SELECT = 2
ODA_FOCUS = 4
ODS_SELECTED = 1
ODS_GRAYED = 2
ODS_DISABLED = 4
ODS_CHECKED = 8
ODS_FOCUS = 16
ODS_DEFAULT = 32
ODS_COMBOBOXEDIT = 4096
ODS_HOTLIGHT = 64
ODS_INACTIVE = 128
ODS_NOACCEL = 256
ODS_NOFOCUSRECT = 512
IDHOT_SNAPWINDOW = -1
IDHOT_SNAPDESKTOP = -2
ENDSESSION_CLOSEAPP = 1
ENDSESSION_CRITICAL = 1073741824
ENDSESSION_LOGOFF = 2147483648
EWX_FORCE = 4
EWX_FORCEIFHUNG = 16
EWX_QUICKRESOLVE = 32
EWX_BOOTOPTIONS = 16777216
EWX_ARSO = 67108864
EWX_CHECK_SAFE_FOR_SERVER = 134217728
EWX_SYSTEM_INITIATED = 268435456
BROADCAST_QUERY_DENY = 1112363332
DEVICE_NOTIFY_ALL_INTERFACE_CLASSES = 4
HWND_MESSAGE = -3
ISMEX_NOSEND = 0
ISMEX_SEND = 1
ISMEX_NOTIFY = 2
ISMEX_CALLBACK = 4
ISMEX_REPLIED = 8
HWND_DESKTOP = 0
PW_RENDERFULLCONTENT = 2
HWND_TOP = 0
HWND_BOTTOM = 1
HWND_TOPMOST = -1
HWND_NOTOPMOST = -2
DLGWINDOWEXTRA = 30
POINTER_MOD_SHIFT = 4
POINTER_MOD_CTRL = 8
TOUCH_FLAG_NONE = 0
TOUCH_MASK_NONE = 0
TOUCH_MASK_CONTACTAREA = 1
TOUCH_MASK_ORIENTATION = 2
TOUCH_MASK_PRESSURE = 4
PEN_FLAG_NONE = 0
PEN_FLAG_BARREL = 1
PEN_FLAG_INVERTED = 2
PEN_FLAG_ERASER = 4
PEN_MASK_NONE = 0
PEN_MASK_PRESSURE = 1
PEN_MASK_ROTATION = 2
PEN_MASK_TILT_X = 4
PEN_MASK_TILT_Y = 8
POINTER_MESSAGE_FLAG_NEW = 1
POINTER_MESSAGE_FLAG_INRANGE = 2
POINTER_MESSAGE_FLAG_INCONTACT = 4
POINTER_MESSAGE_FLAG_FIRSTBUTTON = 16
POINTER_MESSAGE_FLAG_SECONDBUTTON = 32
POINTER_MESSAGE_FLAG_THIRDBUTTON = 64
POINTER_MESSAGE_FLAG_FOURTHBUTTON = 128
POINTER_MESSAGE_FLAG_FIFTHBUTTON = 256
POINTER_MESSAGE_FLAG_PRIMARY = 8192
POINTER_MESSAGE_FLAG_CONFIDENCE = 16384
POINTER_MESSAGE_FLAG_CANCELED = 32768
PA_ACTIVATE = 1
PA_NOACTIVATE = 3
MAX_TOUCH_COUNT = 256
TOUCH_HIT_TESTING_DEFAULT = 0
TOUCH_HIT_TESTING_CLIENT = 1
TOUCH_HIT_TESTING_NONE = 2
TOUCH_HIT_TESTING_PROXIMITY_CLOSEST = 0
TOUCH_HIT_TESTING_PROXIMITY_FARTHEST = 4095
GWFS_INCLUDE_ANCESTORS = 1
MAPVK_VK_TO_VSC = 0
MAPVK_VSC_TO_VK = 1
MAPVK_VK_TO_CHAR = 2
MAPVK_VSC_TO_VK_EX = 3
MAPVK_VK_TO_VSC_EX = 4
QS_TOUCH = 2048
QS_POINTER = 4096
USER_TIMER_MAXIMUM = 2147483647
USER_TIMER_MINIMUM = 10
TIMERV_DEFAULT_COALESCING = 0
TIMERV_NO_COALESCING = 4294967295
TIMERV_COALESCING_MIN = 1
TIMERV_COALESCING_MAX = 2147483637
SM_RESERVED1 = 24
SM_RESERVED2 = 25
SM_RESERVED3 = 26
SM_RESERVED4 = 27
SM_CMETRICS = 76
SM_CARETBLINKINGENABLED = 8194
SM_SYSTEMDOCKED = 8196
PMB_ACTIVE = 1
MNC_IGNORE = 0
MNC_CLOSE = 1
MNC_EXECUTE = 2
MNC_SELECT = 3
MND_CONTINUE = 0
MND_ENDMENU = 1
MNGO_NOINTERFACE = 0
MNGO_NOERROR = 1
DOF_EXECUTABLE = 32769
DOF_DOCUMENT = 32770
DOF_DIRECTORY = 32771
DOF_MULTIPLE = 32772
DOF_PROGMAN = 1
DOF_SHELLDATA = 2
DO_DROPFILE = 1162627398
DO_PRINTFILE = 1414419024
ASFW_ANY = 4294967295
DCX_EXCLUDEUPDATE = 256
HELPINFO_WINDOW = 1
HELPINFO_MENUITEM = 2
CTLCOLOR_MSGBOX = 0
CTLCOLOR_EDIT = 1
CTLCOLOR_LISTBOX = 2
CTLCOLOR_BTN = 3
CTLCOLOR_DLG = 4
CTLCOLOR_SCROLLBAR = 5
CTLCOLOR_STATIC = 6
CTLCOLOR_MAX = 7
COLOR_BTNHIGHLIGHT = 20
COLOR_BTNHILIGHT = 20
GW_MAX = 5
SC_SIZE = 61440
SC_MOVE = 61456
SC_MINIMIZE = 61472
SC_MAXIMIZE = 61488
SC_NEXTWINDOW = 61504
SC_PREVWINDOW = 61520
SC_CLOSE = 61536
SC_VSCROLL = 61552
SC_HSCROLL = 61568
SC_MOUSEMENU = 61584
SC_KEYMENU = 61696
SC_ARRANGE = 61712
SC_RESTORE = 61728
SC_TASKLIST = 61744
SC_HOTKEY = 61776
SC_DEFAULT = 61792
SC_MONITORPOWER = 61808
SC_CONTEXTHELP = 61824
SC_SEPARATOR = 61455
SCF_ISSECURE = 1
SC_ICON = 61472
SC_ZOOM = 61488
IDC_ARROW = 32512
IDC_IBEAM = 32513
IDC_WAIT = 32514
IDC_CROSS = 32515
IDC_UPARROW = 32516
IDC_SIZE = 32640
IDC_ICON = 32641
IDC_SIZENWSE = 32642
IDC_SIZENESW = 32643
IDC_SIZEWE = 32644
IDC_SIZENS = 32645
IDC_SIZEALL = 32646
IDC_NO = 32648
IDC_HAND = 32649
IDC_APPSTARTING = 32650
IDC_HELP = 32651
IDC_PIN = 32671
IDC_PERSON = 32672
CURSOR_CREATION_SCALING_NONE = 1
CURSOR_CREATION_SCALING_DEFAULT = 2
IMAGE_ENHMETAFILE = 3
LR_COLOR = 2
RES_ICON = 1
RES_CURSOR = 2
OBM_CLOSE = 32754
OBM_UPARROW = 32753
OBM_DNARROW = 32752
OBM_RGARROW = 32751
OBM_LFARROW = 32750
OBM_REDUCE = 32749
OBM_ZOOM = 32748
OBM_RESTORE = 32747
OBM_REDUCED = 32746
OBM_ZOOMD = 32745
OBM_RESTORED = 32744
OBM_UPARROWD = 32743
OBM_DNARROWD = 32742
OBM_RGARROWD = 32741
OBM_LFARROWD = 32740
OBM_MNARROW = 32739
OBM_COMBO = 32738
OBM_UPARROWI = 32737
OBM_DNARROWI = 32736
OBM_RGARROWI = 32735
OBM_LFARROWI = 32734
OBM_OLD_CLOSE = 32767
OBM_SIZE = 32766
OBM_OLD_UPARROW = 32765
OBM_OLD_DNARROW = 32764
OBM_OLD_RGARROW = 32763
OBM_OLD_LFARROW = 32762
OBM_BTSIZE = 32761
OBM_CHECK = 32760
OBM_CHECKBOXES = 32759
OBM_BTNCORNERS = 32758
OBM_OLD_REDUCE = 32757
OBM_OLD_ZOOM = 32756
OBM_OLD_RESTORE = 32755
OCR_SIZE = 32640
OCR_ICON = 32641
OCR_ICOCUR = 32647
OIC_SAMPLE = 32512
OIC_HAND = 32513
OIC_QUES = 32514
OIC_BANG = 32515
OIC_NOTE = 32516
OIC_WINLOGO = 32517
OIC_WARNING = 32515
OIC_ERROR = 32513
OIC_INFORMATION = 32516
OIC_SHIELD = 32518
ORD_LANGDRIVER = 1
IDI_APPLICATION = 32512
IDI_HAND = 32513
IDI_QUESTION = 32514
IDI_EXCLAMATION = 32515
IDI_ASTERISK = 32516
IDI_WINLOGO = 32517
IDI_SHIELD = 32518
IDI_WARNING = 32515
IDI_ERROR = 32513
IDI_INFORMATION = 32516
ES_LEFT = 0
ES_CENTER = 1
ES_RIGHT = 2
ES_MULTILINE = 4
ES_UPPERCASE = 8
ES_LOWERCASE = 16
ES_PASSWORD = 32
ES_AUTOVSCROLL = 64
ES_AUTOHSCROLL = 128
ES_NOHIDESEL = 256
ES_OEMCONVERT = 1024
ES_READONLY = 2048
ES_WANTRETURN = 4096
ES_NUMBER = 8192
EN_SETFOCUS = 256
EN_KILLFOCUS = 512
EN_CHANGE = 768
EN_UPDATE = 1024
EN_ERRSPACE = 1280
EN_MAXTEXT = 1281
EN_HSCROLL = 1537
EN_VSCROLL = 1538
EN_ALIGN_LTR_EC = 1792
EN_ALIGN_RTL_EC = 1793
EN_BEFORE_PASTE = 2048
EN_AFTER_PASTE = 2049
EC_LEFTMARGIN = 1
EC_RIGHTMARGIN = 2
EC_USEFONTINFO = 65535
EMSIS_COMPOSITIONSTRING = 1
EIMES_GETCOMPSTRATONCE = 1
EIMES_CANCELCOMPSTRINFOCUS = 2
EIMES_COMPLETECOMPSTRKILLFOCUS = 4
BS_PUSHBUTTON = 0
BS_DEFPUSHBUTTON = 1
BS_CHECKBOX = 2
BS_AUTOCHECKBOX = 3
BS_RADIOBUTTON = 4
BS_3STATE = 5
BS_AUTO3STATE = 6
BS_GROUPBOX = 7
BS_USERBUTTON = 8
BS_AUTORADIOBUTTON = 9
BS_PUSHBOX = 10
BS_OWNERDRAW = 11
BS_TYPEMASK = 15
BS_LEFTTEXT = 32
BS_TEXT = 0
BS_ICON = 64
BS_BITMAP = 128
BS_LEFT = 256
BS_RIGHT = 512
BS_CENTER = 768
BS_TOP = 1024
BS_BOTTOM = 2048
BS_VCENTER = 3072
BS_PUSHLIKE = 4096
BS_MULTILINE = 8192
BS_NOTIFY = 16384
BS_FLAT = 32768
BS_RIGHTBUTTON = 32
BN_CLICKED = 0
BN_PAINT = 1
BN_HILITE = 2
BN_UNHILITE = 3
BN_DISABLE = 4
BN_DOUBLECLICKED = 5
BN_PUSHED = 2
BN_UNPUSHED = 3
BN_DBLCLK = 5
BN_SETFOCUS = 6
BN_KILLFOCUS = 7
BM_GETCHECK = 240
BM_SETCHECK = 241
BM_GETSTATE = 242
BM_SETSTATE = 243
BM_SETSTYLE = 244
BM_CLICK = 245
BM_GETIMAGE = 246
BM_SETIMAGE = 247
BM_SETDONTCLICK = 248
BST_PUSHED = 4
BST_FOCUS = 8
SS_LEFT = 0
SS_CENTER = 1
SS_RIGHT = 2
SS_ICON = 3
SS_BLACKRECT = 4
SS_GRAYRECT = 5
SS_WHITERECT = 6
SS_BLACKFRAME = 7
SS_GRAYFRAME = 8
SS_WHITEFRAME = 9
SS_USERITEM = 10
SS_SIMPLE = 11
SS_LEFTNOWORDWRAP = 12
SS_OWNERDRAW = 13
SS_BITMAP = 14
SS_ENHMETAFILE = 15
SS_ETCHEDHORZ = 16
SS_ETCHEDVERT = 17
SS_ETCHEDFRAME = 18
SS_TYPEMASK = 31
SS_REALSIZECONTROL = 64
SS_NOPREFIX = 128
SS_NOTIFY = 256
SS_CENTERIMAGE = 512
SS_RIGHTJUST = 1024
SS_REALSIZEIMAGE = 2048
SS_SUNKEN = 4096
SS_EDITCONTROL = 8192
SS_ENDELLIPSIS = 16384
SS_PATHELLIPSIS = 32768
SS_WORDELLIPSIS = 49152
SS_ELLIPSISMASK = 49152
STM_SETICON = 368
STM_GETICON = 369
STM_SETIMAGE = 370
STM_GETIMAGE = 371
STN_CLICKED = 0
STN_DBLCLK = 1
STN_ENABLE = 2
STN_DISABLE = 3
STM_MSGMAX = 372
DWL_MSGRESULT = 0
DWL_DLGPROC = 4
DWL_USER = 8
DWLP_MSGRESULT = 0
DS_ABSALIGN = 1
DS_SYSMODAL = 2
DS_LOCALEDIT = 32
DS_SETFONT = 64
DS_MODALFRAME = 128
DS_NOIDLEMSG = 256
DS_SETFOREGROUND = 512
DS_3DLOOK = 4
DS_FIXEDSYS = 8
DS_NOFAILCREATE = 16
DS_CONTROL = 1024
DS_CENTER = 2048
DS_CENTERMOUSE = 4096
DS_CONTEXTHELP = 8192
DS_USEPIXELS = 32768
DM_GETDEFID = 1024
DM_SETDEFID = 1025
DM_REPOSITION = 1026
DC_HASDEFID = 21323
DLGC_WANTARROWS = 1
DLGC_WANTTAB = 2
DLGC_WANTALLKEYS = 4
DLGC_WANTMESSAGE = 4
DLGC_HASSETSEL = 8
DLGC_DEFPUSHBUTTON = 16
DLGC_UNDEFPUSHBUTTON = 32
DLGC_RADIOBUTTON = 64
DLGC_WANTCHARS = 128
DLGC_STATIC = 256
DLGC_BUTTON = 8192
LB_CTLCODE = 0
LB_OKAY = 0
LB_ERR = -1
LB_ERRSPACE = -2
LBN_ERRSPACE = -2
LBN_SELCHANGE = 1
LBN_DBLCLK = 2
LBN_SELCANCEL = 3
LBN_SETFOCUS = 4
LBN_KILLFOCUS = 5
LB_ADDSTRING = 384
LB_INSERTSTRING = 385
LB_DELETESTRING = 386
LB_SELITEMRANGEEX = 387
LB_RESETCONTENT = 388
LB_SETSEL = 389
LB_SETCURSEL = 390
LB_GETSEL = 391
LB_GETCURSEL = 392
LB_GETTEXT = 393
LB_GETTEXTLEN = 394
LB_GETCOUNT = 395
LB_SELECTSTRING = 396
LB_DIR = 397
LB_GETTOPINDEX = 398
LB_FINDSTRING = 399
LB_GETSELCOUNT = 400
LB_GETSELITEMS = 401
LB_SETTABSTOPS = 402
LB_GETHORIZONTALEXTENT = 403
LB_SETHORIZONTALEXTENT = 404
LB_SETCOLUMNWIDTH = 405
LB_ADDFILE = 406
LB_SETTOPINDEX = 407
LB_GETITEMRECT = 408
LB_GETITEMDATA = 409
LB_SETITEMDATA = 410
LB_SELITEMRANGE = 411
LB_SETANCHORINDEX = 412
LB_GETANCHORINDEX = 413
LB_SETCARETINDEX = 414
LB_GETCARETINDEX = 415
LB_SETITEMHEIGHT = 416
LB_GETITEMHEIGHT = 417
LB_FINDSTRINGEXACT = 418
LB_SETLOCALE = 421
LB_GETLOCALE = 422
LB_SETCOUNT = 423
LB_INITSTORAGE = 424
LB_ITEMFROMPOINT = 425
LB_MULTIPLEADDSTRING = 433
LB_GETLISTBOXINFO = 434
LB_MSGMAX = 435
LBS_NOTIFY = 1
LBS_SORT = 2
LBS_NOREDRAW = 4
LBS_MULTIPLESEL = 8
LBS_OWNERDRAWFIXED = 16
LBS_OWNERDRAWVARIABLE = 32
LBS_HASSTRINGS = 64
LBS_USETABSTOPS = 128
LBS_NOINTEGRALHEIGHT = 256
LBS_MULTICOLUMN = 512
LBS_WANTKEYBOARDINPUT = 1024
LBS_EXTENDEDSEL = 2048
LBS_DISABLENOSCROLL = 4096
LBS_NODATA = 8192
LBS_NOSEL = 16384
LBS_COMBOBOX = 32768
CB_OKAY = 0
CB_ERR = -1
CB_ERRSPACE = -2
CBN_ERRSPACE = -1
CBN_SELCHANGE = 1
CBN_DBLCLK = 2
CBN_SETFOCUS = 3
CBN_KILLFOCUS = 4
CBN_EDITCHANGE = 5
CBN_EDITUPDATE = 6
CBN_DROPDOWN = 7
CBN_CLOSEUP = 8
CBN_SELENDOK = 9
CBN_SELENDCANCEL = 10
CBS_SIMPLE = 1
CBS_DROPDOWN = 2
CBS_DROPDOWNLIST = 3
CBS_OWNERDRAWFIXED = 16
CBS_OWNERDRAWVARIABLE = 32
CBS_AUTOHSCROLL = 64
CBS_OEMCONVERT = 128
CBS_SORT = 256
CBS_HASSTRINGS = 512
CBS_NOINTEGRALHEIGHT = 1024
CBS_DISABLENOSCROLL = 2048
CBS_UPPERCASE = 8192
CBS_LOWERCASE = 16384
CB_GETEDITSEL = 320
CB_LIMITTEXT = 321
CB_SETEDITSEL = 322
CB_ADDSTRING = 323
CB_DELETESTRING = 324
CB_DIR = 325
CB_GETCOUNT = 326
CB_GETCURSEL = 327
CB_GETLBTEXT = 328
CB_GETLBTEXTLEN = 329
CB_INSERTSTRING = 330
CB_RESETCONTENT = 331
CB_FINDSTRING = 332
CB_SELECTSTRING = 333
CB_SETCURSEL = 334
CB_SHOWDROPDOWN = 335
CB_GETITEMDATA = 336
CB_SETITEMDATA = 337
CB_GETDROPPEDCONTROLRECT = 338
CB_SETITEMHEIGHT = 339
CB_GETITEMHEIGHT = 340
CB_SETEXTENDEDUI = 341
CB_GETEXTENDEDUI = 342
CB_GETDROPPEDSTATE = 343
CB_FINDSTRINGEXACT = 344
CB_SETLOCALE = 345
CB_GETLOCALE = 346
CB_GETTOPINDEX = 347
CB_SETTOPINDEX = 348
CB_GETHORIZONTALEXTENT = 349
CB_SETHORIZONTALEXTENT = 350
CB_GETDROPPEDWIDTH = 351
CB_SETDROPPEDWIDTH = 352
CB_INITSTORAGE = 353
CB_MULTIPLEADDSTRING = 355
CB_GETCOMBOBOXINFO = 356
CB_MSGMAX = 357
SBS_HORZ = 0
SBS_VERT = 1
SBS_TOPALIGN = 2
SBS_LEFTALIGN = 2
SBS_BOTTOMALIGN = 4
SBS_RIGHTALIGN = 4
SBS_SIZEBOXTOPLEFTALIGN = 2
SBS_SIZEBOXBOTTOMRIGHTALIGN = 4
SBS_SIZEBOX = 8
SBS_SIZEGRIP = 16
SBM_SETPOS = 224
SBM_GETPOS = 225
SBM_SETRANGE = 226
SBM_SETRANGEREDRAW = 230
SBM_GETRANGE = 227
SBM_ENABLE_ARROWS = 228
SBM_SETSCROLLINFO = 233
SBM_GETSCROLLINFO = 234
SBM_GETSCROLLBARINFO = 235
MDIS_ALLCHILDSTYLES = 1
HELP_CONTEXT = 1
HELP_QUIT = 2
HELP_INDEX = 3
HELP_CONTENTS = 3
HELP_HELPONHELP = 4
HELP_SETINDEX = 5
HELP_SETCONTENTS = 5
HELP_CONTEXTPOPUP = 8
HELP_FORCEFILE = 9
HELP_KEY = 257
HELP_COMMAND = 258
HELP_PARTIALKEY = 261
HELP_MULTIKEY = 513
HELP_SETWINPOS = 515
HELP_CONTEXTMENU = 10
HELP_FINDER = 11
HELP_WM_HELP = 12
HELP_SETPOPUP_POS = 13
HELP_TCARD = 32768
HELP_TCARD_DATA = 16
HELP_TCARD_OTHER_CALLER = 17
IDH_NO_HELP = 28440
IDH_MISSING_CONTEXT = 28441
IDH_GENERIC_HELP_BUTTON = 28442
IDH_OK = 28443
IDH_CANCEL = 28444
IDH_HELP = 28445
MAX_TOUCH_PREDICTION_FILTER_TAPS = 3
TOUCHPREDICTIONPARAMETERS_DEFAULT_LATENCY = 8
TOUCHPREDICTIONPARAMETERS_DEFAULT_SAMPLETIME = 8
TOUCHPREDICTIONPARAMETERS_DEFAULT_USE_HW_TIMESTAMP = 1
TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_DELTA = 0.001
TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MIN = 0.9
TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MAX = 0.999
TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_LEARNING_RATE = 0.001
TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_EXPO_SMOOTH_ALPHA = 0.99
MAX_LOGICALDPIOVERRIDE = 2
MIN_LOGICALDPIOVERRIDE = -2
FE_FONTSMOOTHINGSTANDARD = 1
FE_FONTSMOOTHINGCLEARTYPE = 2
FE_FONTSMOOTHINGORIENTATIONBGR = 0
FE_FONTSMOOTHINGORIENTATIONRGB = 1
CONTACTVISUALIZATION_OFF = 0
CONTACTVISUALIZATION_ON = 1
CONTACTVISUALIZATION_PRESENTATIONMODE = 2
GESTUREVISUALIZATION_OFF = 0
GESTUREVISUALIZATION_ON = 31
GESTUREVISUALIZATION_TAP = 1
GESTUREVISUALIZATION_DOUBLETAP = 2
GESTUREVISUALIZATION_PRESSANDTAP = 4
GESTUREVISUALIZATION_PRESSANDHOLD = 8
GESTUREVISUALIZATION_RIGHTTAP = 16
MOUSEWHEEL_ROUTING_FOCUS = 0
MOUSEWHEEL_ROUTING_HYBRID = 1
MOUSEWHEEL_ROUTING_MOUSE_POS = 2
PENVISUALIZATION_ON = 35
PENVISUALIZATION_OFF = 0
PENVISUALIZATION_TAP = 1
PENVISUALIZATION_DOUBLETAP = 2
PENVISUALIZATION_CURSOR = 32
PENARBITRATIONTYPE_NONE = 0
PENARBITRATIONTYPE_WIN8 = 1
PENARBITRATIONTYPE_FIS = 2
PENARBITRATIONTYPE_SPT = 3
PENARBITRATIONTYPE_MAX = 4
METRICS_USEDEFAULT = -1
ARW_STARTMASK = 3
ARW_STARTRIGHT = 1
ARW_STARTTOP = 2
ARW_LEFT = 0
ARW_RIGHT = 0
ARW_UP = 4
ARW_DOWN = 4
ARW_HIDE = 8
HCF_LOGONDESKTOP = 256
HCF_DEFAULTDESKTOP = 512
EDS_RAWMODE = 2
EDS_ROTATEDMODE = 4
EDD_GET_DEVICE_INTERFACE_NAME = 1
FKF_FILTERKEYSON = 1
FKF_AVAILABLE = 2
FKF_HOTKEYACTIVE = 4
FKF_CONFIRMHOTKEY = 8
FKF_HOTKEYSOUND = 16
FKF_INDICATOR = 32
FKF_CLICKON = 64
MKF_MOUSEKEYSON = 1
MKF_AVAILABLE = 2
MKF_HOTKEYACTIVE = 4
MKF_CONFIRMHOTKEY = 8
MKF_HOTKEYSOUND = 16
MKF_INDICATOR = 32
MKF_MODIFIERS = 64
MKF_REPLACENUMBERS = 128
MKF_LEFTBUTTONSEL = 268435456
MKF_RIGHTBUTTONSEL = 536870912
MKF_LEFTBUTTONDOWN = 16777216
MKF_RIGHTBUTTONDOWN = 33554432
MKF_MOUSEMODE = 2147483648
TKF_TOGGLEKEYSON = 1
TKF_AVAILABLE = 2
TKF_HOTKEYACTIVE = 4
TKF_CONFIRMHOTKEY = 8
TKF_HOTKEYSOUND = 16
TKF_INDICATOR = 32
MONITORINFOF_PRIMARY = 1
WINEVENT_OUTOFCONTEXT = 0
WINEVENT_SKIPOWNTHREAD = 1
WINEVENT_SKIPOWNPROCESS = 2
WINEVENT_INCONTEXT = 4
CHILDID_SELF = 0
INDEXID_OBJECT = 0
INDEXID_CONTAINER = 0
EVENT_MIN = 1
EVENT_MAX = 2147483647
EVENT_SYSTEM_SOUND = 1
EVENT_SYSTEM_ALERT = 2
EVENT_SYSTEM_FOREGROUND = 3
EVENT_SYSTEM_MENUSTART = 4
EVENT_SYSTEM_MENUEND = 5
EVENT_SYSTEM_MENUPOPUPSTART = 6
EVENT_SYSTEM_MENUPOPUPEND = 7
EVENT_SYSTEM_CAPTURESTART = 8
EVENT_SYSTEM_CAPTUREEND = 9
EVENT_SYSTEM_MOVESIZESTART = 10
EVENT_SYSTEM_MOVESIZEEND = 11
EVENT_SYSTEM_CONTEXTHELPSTART = 12
EVENT_SYSTEM_CONTEXTHELPEND = 13
EVENT_SYSTEM_DRAGDROPSTART = 14
EVENT_SYSTEM_DRAGDROPEND = 15
EVENT_SYSTEM_DIALOGSTART = 16
EVENT_SYSTEM_DIALOGEND = 17
EVENT_SYSTEM_SCROLLINGSTART = 18
EVENT_SYSTEM_SCROLLINGEND = 19
EVENT_SYSTEM_SWITCHSTART = 20
EVENT_SYSTEM_SWITCHEND = 21
EVENT_SYSTEM_MINIMIZESTART = 22
EVENT_SYSTEM_MINIMIZEEND = 23
EVENT_SYSTEM_DESKTOPSWITCH = 32
EVENT_SYSTEM_SWITCHER_APPGRABBED = 36
EVENT_SYSTEM_SWITCHER_APPOVERTARGET = 37
EVENT_SYSTEM_SWITCHER_APPDROPPED = 38
EVENT_SYSTEM_SWITCHER_CANCELLED = 39
EVENT_SYSTEM_IME_KEY_NOTIFICATION = 41
EVENT_SYSTEM_END = 255
EVENT_OEM_DEFINED_START = 257
EVENT_OEM_DEFINED_END = 511
EVENT_UIA_EVENTID_START = 19968
EVENT_UIA_EVENTID_END = 20223
EVENT_UIA_PROPID_START = 29952
EVENT_UIA_PROPID_END = 30207
EVENT_CONSOLE_CARET = 16385
EVENT_CONSOLE_UPDATE_REGION = 16386
EVENT_CONSOLE_UPDATE_SIMPLE = 16387
EVENT_CONSOLE_UPDATE_SCROLL = 16388
EVENT_CONSOLE_LAYOUT = 16389
EVENT_CONSOLE_START_APPLICATION = 16390
EVENT_CONSOLE_END_APPLICATION = 16391
CONSOLE_APPLICATION_16BIT = 0
CONSOLE_CARET_SELECTION = 1
CONSOLE_CARET_VISIBLE = 2
EVENT_CONSOLE_END = 16639
EVENT_OBJECT_CREATE = 32768
EVENT_OBJECT_DESTROY = 32769
EVENT_OBJECT_SHOW = 32770
EVENT_OBJECT_HIDE = 32771
EVENT_OBJECT_REORDER = 32772
EVENT_OBJECT_FOCUS = 32773
EVENT_OBJECT_SELECTION = 32774
EVENT_OBJECT_SELECTIONADD = 32775
EVENT_OBJECT_SELECTIONREMOVE = 32776
EVENT_OBJECT_SELECTIONWITHIN = 32777
EVENT_OBJECT_STATECHANGE = 32778
EVENT_OBJECT_LOCATIONCHANGE = 32779
EVENT_OBJECT_NAMECHANGE = 32780
EVENT_OBJECT_DESCRIPTIONCHANGE = 32781
EVENT_OBJECT_VALUECHANGE = 32782
EVENT_OBJECT_PARENTCHANGE = 32783
EVENT_OBJECT_HELPCHANGE = 32784
EVENT_OBJECT_DEFACTIONCHANGE = 32785
EVENT_OBJECT_ACCELERATORCHANGE = 32786
EVENT_OBJECT_INVOKED = 32787
EVENT_OBJECT_TEXTSELECTIONCHANGED = 32788
EVENT_OBJECT_CONTENTSCROLLED = 32789
EVENT_SYSTEM_ARRANGMENTPREVIEW = 32790
EVENT_OBJECT_CLOAKED = 32791
EVENT_OBJECT_UNCLOAKED = 32792
EVENT_OBJECT_LIVEREGIONCHANGED = 32793
EVENT_OBJECT_HOSTEDOBJECTSINVALIDATED = 32800
EVENT_OBJECT_DRAGSTART = 32801
EVENT_OBJECT_DRAGCANCEL = 32802
EVENT_OBJECT_DRAGCOMPLETE = 32803
EVENT_OBJECT_DRAGENTER = 32804
EVENT_OBJECT_DRAGLEAVE = 32805
EVENT_OBJECT_DRAGDROPPED = 32806
EVENT_OBJECT_IME_SHOW = 32807
EVENT_OBJECT_IME_HIDE = 32808
EVENT_OBJECT_IME_CHANGE = 32809
EVENT_OBJECT_TEXTEDIT_CONVERSIONTARGETCHANGED = 32816
EVENT_OBJECT_END = 33023
EVENT_AIA_START = 40960
EVENT_AIA_END = 45055
SOUND_SYSTEM_STARTUP = 1
SOUND_SYSTEM_SHUTDOWN = 2
SOUND_SYSTEM_BEEP = 3
SOUND_SYSTEM_ERROR = 4
SOUND_SYSTEM_QUESTION = 5
SOUND_SYSTEM_WARNING = 6
SOUND_SYSTEM_INFORMATION = 7
SOUND_SYSTEM_MAXIMIZE = 8
SOUND_SYSTEM_MINIMIZE = 9
SOUND_SYSTEM_RESTOREUP = 10
SOUND_SYSTEM_RESTOREDOWN = 11
SOUND_SYSTEM_APPSTART = 12
SOUND_SYSTEM_FAULT = 13
SOUND_SYSTEM_APPEND = 14
SOUND_SYSTEM_MENUCOMMAND = 15
SOUND_SYSTEM_MENUPOPUP = 16
CSOUND_SYSTEM = 16
CALERT_SYSTEM = 6
GUI_16BITTASK = 0
USER_DEFAULT_SCREEN_DPI = 96
STATE_SYSTEM_SELECTED = 2
STATE_SYSTEM_FOCUSED = 4
STATE_SYSTEM_CHECKED = 16
STATE_SYSTEM_MIXED = 32
STATE_SYSTEM_INDETERMINATE = 32
STATE_SYSTEM_READONLY = 64
STATE_SYSTEM_HOTTRACKED = 128
STATE_SYSTEM_DEFAULT = 256
STATE_SYSTEM_EXPANDED = 512
STATE_SYSTEM_COLLAPSED = 1024
STATE_SYSTEM_BUSY = 2048
STATE_SYSTEM_FLOATING = 4096
STATE_SYSTEM_MARQUEED = 8192
STATE_SYSTEM_ANIMATED = 16384
STATE_SYSTEM_SIZEABLE = 131072
STATE_SYSTEM_MOVEABLE = 262144
STATE_SYSTEM_SELFVOICING = 524288
STATE_SYSTEM_SELECTABLE = 2097152
STATE_SYSTEM_LINKED = 4194304
STATE_SYSTEM_TRAVERSED = 8388608
STATE_SYSTEM_MULTISELECTABLE = 16777216
STATE_SYSTEM_EXTSELECTABLE = 33554432
STATE_SYSTEM_ALERT_LOW = 67108864
STATE_SYSTEM_ALERT_MEDIUM = 134217728
STATE_SYSTEM_ALERT_HIGH = 268435456
STATE_SYSTEM_PROTECTED = 536870912
STATE_SYSTEM_VALID = 1073741823
CCHILDREN_TITLEBAR = 5
CCHILDREN_SCROLLBAR = 5
RIM_INPUT = 0
RIM_INPUTSINK = 1
RIM_TYPEMAX = 2
RI_MOUSE_LEFT_BUTTON_DOWN = 1
RI_MOUSE_LEFT_BUTTON_UP = 2
RI_MOUSE_RIGHT_BUTTON_DOWN = 4
RI_MOUSE_RIGHT_BUTTON_UP = 8
RI_MOUSE_MIDDLE_BUTTON_DOWN = 16
RI_MOUSE_MIDDLE_BUTTON_UP = 32
RI_MOUSE_BUTTON_1_DOWN = 1
RI_MOUSE_BUTTON_1_UP = 2
RI_MOUSE_BUTTON_2_DOWN = 4
RI_MOUSE_BUTTON_2_UP = 8
RI_MOUSE_BUTTON_3_DOWN = 16
RI_MOUSE_BUTTON_3_UP = 32
RI_MOUSE_BUTTON_4_DOWN = 64
RI_MOUSE_BUTTON_4_UP = 128
RI_MOUSE_BUTTON_5_DOWN = 256
RI_MOUSE_BUTTON_5_UP = 512
RI_MOUSE_WHEEL = 1024
RI_MOUSE_HWHEEL = 2048
RI_KEY_MAKE = 0
RI_KEY_BREAK = 1
RI_KEY_E0 = 2
RI_KEY_E1 = 4
RI_KEY_TERMSRV_SET_LED = 8
RI_KEY_TERMSRV_SHADOW = 16
RIDEV_EXMODEMASK = 240
GIDC_ARRIVAL = 1
GIDC_REMOVAL = 2
POINTER_DEVICE_PRODUCT_STRING_MAX = 520
PDC_ARRIVAL = 1
PDC_REMOVAL = 2
PDC_ORIENTATION_0 = 4
PDC_ORIENTATION_90 = 8
PDC_ORIENTATION_180 = 16
PDC_ORIENTATION_270 = 32
PDC_MODE_DEFAULT = 64
PDC_MODE_CENTERED = 128
PDC_MAPPING_CHANGE = 256
PDC_RESOLUTION = 512
PDC_ORIGIN = 1024
PDC_MODE_ASPECTRATIOPRESERVED = 2048
GF_BEGIN = 1
GF_INERTIA = 2
GF_END = 4
GESTURECONFIGMAXCOUNT = 256
GCF_INCLUDE_ANCESTORS = 1
NID_INTEGRATED_TOUCH = 1
NID_EXTERNAL_TOUCH = 2
NID_INTEGRATED_PEN = 4
NID_EXTERNAL_PEN = 8
NID_MULTI_INPUT = 64
NID_READY = 128
MAX_STR_BLOCKREASON = 256
STRSAFE_USE_SECURE_CRT = 0
STRSAFE_MAX_CCH = 2147483647
STRSAFE_IGNORE_NULLS = 256
STRSAFE_FILL_BEHIND_NULL = 512
STRSAFE_FILL_ON_FAILURE = 1024
STRSAFE_NULL_ON_FAILURE = 2048
STRSAFE_NO_TRUNCATION = 4096
STRSAFE_E_INSUFFICIENT_BUFFER = -2147024774
STRSAFE_E_INVALID_PARAMETER = -2147024809
STRSAFE_E_END_OF_FILE = -2147024858
__WARNING_CYCLOMATIC_COMPLEXITY = 28734
__WARNING_USING_UNINIT_VAR = 6001
__WARNING_RETURN_UNINIT_VAR = 6101
__WARNING_DEREF_NULL_PTR = 6011
__WARNING_MISSING_ZERO_TERMINATION2 = 6054
__WARNING_INVALID_PARAM_VALUE_1 = 6387
__WARNING_INCORRECT_ANNOTATION = 26007
__WARNING_POTENTIAL_BUFFER_OVERFLOW_HIGH_PRIORITY = 26015
__WARNING_PRECONDITION_NULLTERMINATION_VIOLATION = 26035
__WARNING_POSTCONDITION_NULLTERMINATION_VIOLATION = 26036
__WARNING_HIGH_PRIORITY_OVERFLOW_POSTCONDITION = 26045
__WARNING_RANGE_POSTCONDITION_VIOLATION = 26061
__WARNING_POTENTIAL_RANGE_POSTCONDITION_VIOLATION = 26071
__WARNING_INVALID_PARAM_VALUE_3 = 28183
__WARNING_RETURNING_BAD_RESULT = 28196
__WARNING_BANNED_API_USAGE = 28719
__WARNING_POST_EXPECTED = 28210
HBMMENU_CALLBACK = -1
HBMMENU_SYSTEM = 1
HBMMENU_MBAR_RESTORE = 2
HBMMENU_MBAR_MINIMIZE = 3
HBMMENU_MBAR_CLOSE = 5
HBMMENU_MBAR_CLOSE_D = 6
HBMMENU_MBAR_MINIMIZE_D = 7
HBMMENU_POPUP_CLOSE = 8
HBMMENU_POPUP_RESTORE = 9
HBMMENU_POPUP_MAXIMIZE = 10
HBMMENU_POPUP_MINIMIZE = 11
CW_USEDEFAULT = -2147483648
LBS_STANDARD = 10485763
WNDCLASS_STYLES = UInt32
CS_VREDRAW = 1
CS_HREDRAW = 2
CS_DBLCLKS = 8
CS_OWNDC = 32
CS_CLASSDC = 64
CS_PARENTDC = 128
CS_NOCLOSE = 512
CS_SAVEBITS = 2048
CS_BYTEALIGNCLIENT = 4096
CS_BYTEALIGNWINDOW = 8192
CS_GLOBALCLASS = 16384
CS_IME = 65536
CS_DROPSHADOW = 131072
CWP_FLAGS = UInt32
CWP_ALL = 0
CWP_SKIPINVISIBLE = 1
CWP_SKIPDISABLED = 2
CWP_SKIPTRANSPARENT = 4
MESSAGEBOX_STYLE = UInt32
MB_ABORTRETRYIGNORE = 2
MB_CANCELTRYCONTINUE = 6
MB_HELP = 16384
MB_OK = 0
MB_OKCANCEL = 1
MB_RETRYCANCEL = 5
MB_YESNO = 4
MB_YESNOCANCEL = 3
MB_ICONHAND = 16
MB_ICONQUESTION = 32
MB_ICONEXCLAMATION = 48
MB_ICONASTERISK = 64
MB_USERICON = 128
MB_ICONWARNING = 48
MB_ICONERROR = 16
MB_ICONINFORMATION = 64
MB_ICONSTOP = 16
MB_DEFBUTTON1 = 0
MB_DEFBUTTON2 = 256
MB_DEFBUTTON3 = 512
MB_DEFBUTTON4 = 768
MB_APPLMODAL = 0
MB_SYSTEMMODAL = 4096
MB_TASKMODAL = 8192
MB_NOFOCUS = 32768
MB_SETFOREGROUND = 65536
MB_DEFAULT_DESKTOP_ONLY = 131072
MB_TOPMOST = 262144
MB_RIGHT = 524288
MB_RTLREADING = 1048576
MB_SERVICE_NOTIFICATION = 2097152
MB_SERVICE_NOTIFICATION_NT3X = 262144
MB_TYPEMASK = 15
MB_ICONMASK = 240
MB_DEFMASK = 3840
MB_MODEMASK = 12288
MB_MISCMASK = 49152
MENU_ITEM_FLAGS = UInt32
MF_BYCOMMAND = 0
MF_BYPOSITION = 1024
MF_BITMAP = 4
MF_CHECKED = 8
MF_DISABLED = 2
MF_ENABLED = 0
MF_GRAYED = 1
MF_MENUBARBREAK = 32
MF_MENUBREAK = 64
MF_OWNERDRAW = 256
MF_POPUP = 16
MF_SEPARATOR = 2048
MF_STRING = 0
MF_UNCHECKED = 0
MF_INSERT = 0
MF_CHANGE = 128
MF_APPEND = 256
MF_DELETE = 512
MF_REMOVE = 4096
MF_USECHECKBITMAPS = 512
MF_UNHILITE = 0
MF_HILITE = 128
MF_DEFAULT = 4096
MF_SYSMENU = 8192
MF_HELP = 16384
MF_RIGHTJUSTIFY = 16384
MF_MOUSESELECT = 32768
MF_END = 128
SHOW_WINDOW_CMD = UInt32
SW_FORCEMINIMIZE = 11
SW_HIDE = 0
SW_MAXIMIZE = 3
SW_MINIMIZE = 6
SW_RESTORE = 9
SW_SHOW = 5
SW_SHOWDEFAULT = 10
SW_SHOWMAXIMIZED = 3
SW_SHOWMINIMIZED = 2
SW_SHOWMINNOACTIVE = 7
SW_SHOWNA = 8
SW_SHOWNOACTIVATE = 4
SW_SHOWNORMAL = 1
SW_NORMAL = 1
SW_MAX = 11
SW_PARENTCLOSING = 1
SW_OTHERZOOM = 2
SW_PARENTOPENING = 3
SW_OTHERUNZOOM = 4
SW_SCROLLCHILDREN = 1
SW_INVALIDATE = 2
SW_ERASE = 4
SW_SMOOTHSCROLL = 16
SYSTEM_PARAMETERS_INFO_ACTION = UInt32
SPI_GETBEEP = 1
SPI_SETBEEP = 2
SPI_GETMOUSE = 3
SPI_SETMOUSE = 4
SPI_GETBORDER = 5
SPI_SETBORDER = 6
SPI_GETKEYBOARDSPEED = 10
SPI_SETKEYBOARDSPEED = 11
SPI_LANGDRIVER = 12
SPI_ICONHORIZONTALSPACING = 13
SPI_GETSCREENSAVETIMEOUT = 14
SPI_SETSCREENSAVETIMEOUT = 15
SPI_GETSCREENSAVEACTIVE = 16
SPI_SETSCREENSAVEACTIVE = 17
SPI_GETGRIDGRANULARITY = 18
SPI_SETGRIDGRANULARITY = 19
SPI_SETDESKWALLPAPER = 20
SPI_SETDESKPATTERN = 21
SPI_GETKEYBOARDDELAY = 22
SPI_SETKEYBOARDDELAY = 23
SPI_ICONVERTICALSPACING = 24
SPI_GETICONTITLEWRAP = 25
SPI_SETICONTITLEWRAP = 26
SPI_GETMENUDROPALIGNMENT = 27
SPI_SETMENUDROPALIGNMENT = 28
SPI_SETDOUBLECLKWIDTH = 29
SPI_SETDOUBLECLKHEIGHT = 30
SPI_GETICONTITLELOGFONT = 31
SPI_SETDOUBLECLICKTIME = 32
SPI_SETMOUSEBUTTONSWAP = 33
SPI_SETICONTITLELOGFONT = 34
SPI_GETFASTTASKSWITCH = 35
SPI_SETFASTTASKSWITCH = 36
SPI_SETDRAGFULLWINDOWS = 37
SPI_GETDRAGFULLWINDOWS = 38
SPI_GETNONCLIENTMETRICS = 41
SPI_SETNONCLIENTMETRICS = 42
SPI_GETMINIMIZEDMETRICS = 43
SPI_SETMINIMIZEDMETRICS = 44
SPI_GETICONMETRICS = 45
SPI_SETICONMETRICS = 46
SPI_SETWORKAREA = 47
SPI_GETWORKAREA = 48
SPI_SETPENWINDOWS = 49
SPI_GETHIGHCONTRAST = 66
SPI_SETHIGHCONTRAST = 67
SPI_GETKEYBOARDPREF = 68
SPI_SETKEYBOARDPREF = 69
SPI_GETSCREENREADER = 70
SPI_SETSCREENREADER = 71
SPI_GETANIMATION = 72
SPI_SETANIMATION = 73
SPI_GETFONTSMOOTHING = 74
SPI_SETFONTSMOOTHING = 75
SPI_SETDRAGWIDTH = 76
SPI_SETDRAGHEIGHT = 77
SPI_SETHANDHELD = 78
SPI_GETLOWPOWERTIMEOUT = 79
SPI_GETPOWEROFFTIMEOUT = 80
SPI_SETLOWPOWERTIMEOUT = 81
SPI_SETPOWEROFFTIMEOUT = 82
SPI_GETLOWPOWERACTIVE = 83
SPI_GETPOWEROFFACTIVE = 84
SPI_SETLOWPOWERACTIVE = 85
SPI_SETPOWEROFFACTIVE = 86
SPI_SETCURSORS = 87
SPI_SETICONS = 88
SPI_GETDEFAULTINPUTLANG = 89
SPI_SETDEFAULTINPUTLANG = 90
SPI_SETLANGTOGGLE = 91
SPI_GETWINDOWSEXTENSION = 92
SPI_SETMOUSETRAILS = 93
SPI_GETMOUSETRAILS = 94
SPI_SETSCREENSAVERRUNNING = 97
SPI_SCREENSAVERRUNNING = 97
SPI_GETFILTERKEYS = 50
SPI_SETFILTERKEYS = 51
SPI_GETTOGGLEKEYS = 52
SPI_SETTOGGLEKEYS = 53
SPI_GETMOUSEKEYS = 54
SPI_SETMOUSEKEYS = 55
SPI_GETSHOWSOUNDS = 56
SPI_SETSHOWSOUNDS = 57
SPI_GETSTICKYKEYS = 58
SPI_SETSTICKYKEYS = 59
SPI_GETACCESSTIMEOUT = 60
SPI_SETACCESSTIMEOUT = 61
SPI_GETSERIALKEYS = 62
SPI_SETSERIALKEYS = 63
SPI_GETSOUNDSENTRY = 64
SPI_SETSOUNDSENTRY = 65
SPI_GETSNAPTODEFBUTTON = 95
SPI_SETSNAPTODEFBUTTON = 96
SPI_GETMOUSEHOVERWIDTH = 98
SPI_SETMOUSEHOVERWIDTH = 99
SPI_GETMOUSEHOVERHEIGHT = 100
SPI_SETMOUSEHOVERHEIGHT = 101
SPI_GETMOUSEHOVERTIME = 102
SPI_SETMOUSEHOVERTIME = 103
SPI_GETWHEELSCROLLLINES = 104
SPI_SETWHEELSCROLLLINES = 105
SPI_GETMENUSHOWDELAY = 106
SPI_SETMENUSHOWDELAY = 107
SPI_GETWHEELSCROLLCHARS = 108
SPI_SETWHEELSCROLLCHARS = 109
SPI_GETSHOWIMEUI = 110
SPI_SETSHOWIMEUI = 111
SPI_GETMOUSESPEED = 112
SPI_SETMOUSESPEED = 113
SPI_GETSCREENSAVERRUNNING = 114
SPI_GETDESKWALLPAPER = 115
SPI_GETAUDIODESCRIPTION = 116
SPI_SETAUDIODESCRIPTION = 117
SPI_GETSCREENSAVESECURE = 118
SPI_SETSCREENSAVESECURE = 119
SPI_GETHUNGAPPTIMEOUT = 120
SPI_SETHUNGAPPTIMEOUT = 121
SPI_GETWAITTOKILLTIMEOUT = 122
SPI_SETWAITTOKILLTIMEOUT = 123
SPI_GETWAITTOKILLSERVICETIMEOUT = 124
SPI_SETWAITTOKILLSERVICETIMEOUT = 125
SPI_GETMOUSEDOCKTHRESHOLD = 126
SPI_SETMOUSEDOCKTHRESHOLD = 127
SPI_GETPENDOCKTHRESHOLD = 128
SPI_SETPENDOCKTHRESHOLD = 129
SPI_GETWINARRANGING = 130
SPI_SETWINARRANGING = 131
SPI_GETMOUSEDRAGOUTTHRESHOLD = 132
SPI_SETMOUSEDRAGOUTTHRESHOLD = 133
SPI_GETPENDRAGOUTTHRESHOLD = 134
SPI_SETPENDRAGOUTTHRESHOLD = 135
SPI_GETMOUSESIDEMOVETHRESHOLD = 136
SPI_SETMOUSESIDEMOVETHRESHOLD = 137
SPI_GETPENSIDEMOVETHRESHOLD = 138
SPI_SETPENSIDEMOVETHRESHOLD = 139
SPI_GETDRAGFROMMAXIMIZE = 140
SPI_SETDRAGFROMMAXIMIZE = 141
SPI_GETSNAPSIZING = 142
SPI_SETSNAPSIZING = 143
SPI_GETDOCKMOVING = 144
SPI_SETDOCKMOVING = 145
SPI_GETTOUCHPREDICTIONPARAMETERS = 156
SPI_SETTOUCHPREDICTIONPARAMETERS = 157
SPI_GETLOGICALDPIOVERRIDE = 158
SPI_SETLOGICALDPIOVERRIDE = 159
SPI_GETMENURECT = 162
SPI_SETMENURECT = 163
SPI_GETACTIVEWINDOWTRACKING = 4096
SPI_SETACTIVEWINDOWTRACKING = 4097
SPI_GETMENUANIMATION = 4098
SPI_SETMENUANIMATION = 4099
SPI_GETCOMBOBOXANIMATION = 4100
SPI_SETCOMBOBOXANIMATION = 4101
SPI_GETLISTBOXSMOOTHSCROLLING = 4102
SPI_SETLISTBOXSMOOTHSCROLLING = 4103
SPI_GETGRADIENTCAPTIONS = 4104
SPI_SETGRADIENTCAPTIONS = 4105
SPI_GETKEYBOARDCUES = 4106
SPI_SETKEYBOARDCUES = 4107
SPI_GETMENUUNDERLINES = 4106
SPI_SETMENUUNDERLINES = 4107
SPI_GETACTIVEWNDTRKZORDER = 4108
SPI_SETACTIVEWNDTRKZORDER = 4109
SPI_GETHOTTRACKING = 4110
SPI_SETHOTTRACKING = 4111
SPI_GETMENUFADE = 4114
SPI_SETMENUFADE = 4115
SPI_GETSELECTIONFADE = 4116
SPI_SETSELECTIONFADE = 4117
SPI_GETTOOLTIPANIMATION = 4118
SPI_SETTOOLTIPANIMATION = 4119
SPI_GETTOOLTIPFADE = 4120
SPI_SETTOOLTIPFADE = 4121
SPI_GETCURSORSHADOW = 4122
SPI_SETCURSORSHADOW = 4123
SPI_GETMOUSESONAR = 4124
SPI_SETMOUSESONAR = 4125
SPI_GETMOUSECLICKLOCK = 4126
SPI_SETMOUSECLICKLOCK = 4127
SPI_GETMOUSEVANISH = 4128
SPI_SETMOUSEVANISH = 4129
SPI_GETFLATMENU = 4130
SPI_SETFLATMENU = 4131
SPI_GETDROPSHADOW = 4132
SPI_SETDROPSHADOW = 4133
SPI_GETBLOCKSENDINPUTRESETS = 4134
SPI_SETBLOCKSENDINPUTRESETS = 4135
SPI_GETUIEFFECTS = 4158
SPI_SETUIEFFECTS = 4159
SPI_GETDISABLEOVERLAPPEDCONTENT = 4160
SPI_SETDISABLEOVERLAPPEDCONTENT = 4161
SPI_GETCLIENTAREAANIMATION = 4162
SPI_SETCLIENTAREAANIMATION = 4163
SPI_GETCLEARTYPE = 4168
SPI_SETCLEARTYPE = 4169
SPI_GETSPEECHRECOGNITION = 4170
SPI_SETSPEECHRECOGNITION = 4171
SPI_GETCARETBROWSING = 4172
SPI_SETCARETBROWSING = 4173
SPI_GETTHREADLOCALINPUTSETTINGS = 4174
SPI_SETTHREADLOCALINPUTSETTINGS = 4175
SPI_GETSYSTEMLANGUAGEBAR = 4176
SPI_SETSYSTEMLANGUAGEBAR = 4177
SPI_GETFOREGROUNDLOCKTIMEOUT = 8192
SPI_SETFOREGROUNDLOCKTIMEOUT = 8193
SPI_GETACTIVEWNDTRKTIMEOUT = 8194
SPI_SETACTIVEWNDTRKTIMEOUT = 8195
SPI_GETFOREGROUNDFLASHCOUNT = 8196
SPI_SETFOREGROUNDFLASHCOUNT = 8197
SPI_GETCARETWIDTH = 8198
SPI_SETCARETWIDTH = 8199
SPI_GETMOUSECLICKLOCKTIME = 8200
SPI_SETMOUSECLICKLOCKTIME = 8201
SPI_GETFONTSMOOTHINGTYPE = 8202
SPI_SETFONTSMOOTHINGTYPE = 8203
SPI_GETFONTSMOOTHINGCONTRAST = 8204
SPI_SETFONTSMOOTHINGCONTRAST = 8205
SPI_GETFOCUSBORDERWIDTH = 8206
SPI_SETFOCUSBORDERWIDTH = 8207
SPI_GETFOCUSBORDERHEIGHT = 8208
SPI_SETFOCUSBORDERHEIGHT = 8209
SPI_GETFONTSMOOTHINGORIENTATION = 8210
SPI_SETFONTSMOOTHINGORIENTATION = 8211
SPI_GETMINIMUMHITRADIUS = 8212
SPI_SETMINIMUMHITRADIUS = 8213
SPI_GETMESSAGEDURATION = 8214
SPI_SETMESSAGEDURATION = 8215
SPI_GETCONTACTVISUALIZATION = 8216
SPI_SETCONTACTVISUALIZATION = 8217
SPI_GETGESTUREVISUALIZATION = 8218
SPI_SETGESTUREVISUALIZATION = 8219
SPI_GETMOUSEWHEELROUTING = 8220
SPI_SETMOUSEWHEELROUTING = 8221
SPI_GETPENVISUALIZATION = 8222
SPI_SETPENVISUALIZATION = 8223
SPI_GETPENARBITRATIONTYPE = 8224
SPI_SETPENARBITRATIONTYPE = 8225
SPI_GETCARETTIMEOUT = 8226
SPI_SETCARETTIMEOUT = 8227
SPI_GETHANDEDNESS = 8228
SPI_SETHANDEDNESS = 8229
TRACK_POPUP_MENU_FLAGS = UInt32
TPM_LEFTBUTTON = 0
TPM_RIGHTBUTTON = 2
TPM_LEFTALIGN = 0
TPM_CENTERALIGN = 4
TPM_RIGHTALIGN = 8
TPM_TOPALIGN = 0
TPM_VCENTERALIGN = 16
TPM_BOTTOMALIGN = 32
TPM_HORIZONTAL = 0
TPM_VERTICAL = 64
TPM_NONOTIFY = 128
TPM_RETURNCMD = 256
TPM_RECURSE = 1
TPM_HORPOSANIMATION = 1024
TPM_HORNEGANIMATION = 2048
TPM_VERPOSANIMATION = 4096
TPM_VERNEGANIMATION = 8192
TPM_NOANIMATION = 16384
TPM_LAYOUTRTL = 32768
TPM_WORKAREA = 65536
WINDOW_EX_STYLE = UInt32
WS_EX_DLGMODALFRAME = 1
WS_EX_NOPARENTNOTIFY = 4
WS_EX_TOPMOST = 8
WS_EX_ACCEPTFILES = 16
WS_EX_TRANSPARENT = 32
WS_EX_MDICHILD = 64
WS_EX_TOOLWINDOW = 128
WS_EX_WINDOWEDGE = 256
WS_EX_CLIENTEDGE = 512
WS_EX_CONTEXTHELP = 1024
WS_EX_RIGHT = 4096
WS_EX_LEFT = 0
WS_EX_RTLREADING = 8192
WS_EX_LTRREADING = 0
WS_EX_LEFTSCROLLBAR = 16384
WS_EX_RIGHTSCROLLBAR = 0
WS_EX_CONTROLPARENT = 65536
WS_EX_STATICEDGE = 131072
WS_EX_APPWINDOW = 262144
WS_EX_OVERLAPPEDWINDOW = 768
WS_EX_PALETTEWINDOW = 392
WS_EX_LAYERED = 524288
WS_EX_NOINHERITLAYOUT = 1048576
WS_EX_NOREDIRECTIONBITMAP = 2097152
WS_EX_LAYOUTRTL = 4194304
WS_EX_COMPOSITED = 33554432
WS_EX_NOACTIVATE = 134217728
WINDOW_STYLE = UInt32
WS_OVERLAPPED = 0
WS_POPUP = 2147483648
WS_CHILD = 1073741824
WS_MINIMIZE = 536870912
WS_VISIBLE = 268435456
WS_DISABLED = 134217728
WS_CLIPSIBLINGS = 67108864
WS_CLIPCHILDREN = 33554432
WS_MAXIMIZE = 16777216
WS_CAPTION = 12582912
WS_BORDER = 8388608
WS_DLGFRAME = 4194304
WS_VSCROLL = 2097152
WS_HSCROLL = 1048576
WS_SYSMENU = 524288
WS_THICKFRAME = 262144
WS_GROUP = 131072
WS_TABSTOP = 65536
WS_MINIMIZEBOX = 131072
WS_MAXIMIZEBOX = 65536
WS_TILED = 0
WS_ICONIC = 536870912
WS_SIZEBOX = 262144
WS_TILEDWINDOW = 13565952
WS_OVERLAPPEDWINDOW = 13565952
WS_POPUPWINDOW = 2156396544
WS_CHILDWINDOW = 1073741824
WS_ACTIVECAPTION = 1
OBJECT_IDENTIFIER = Int32
OBJID_WINDOW = 0
OBJID_SYSMENU = -1
OBJID_TITLEBAR = -2
OBJID_MENU = -3
OBJID_CLIENT = -4
OBJID_VSCROLL = -5
OBJID_HSCROLL = -6
OBJID_SIZEGRIP = -7
OBJID_CARET = -8
OBJID_CURSOR = -9
OBJID_ALERT = -10
OBJID_SOUND = -11
OBJID_QUERYCLASSNAMEIDX = -12
OBJID_NATIVEOM = -16
MENU_ITEM_TYPE = UInt32
MFT_BITMAP = 4
MFT_MENUBARBREAK = 32
MFT_MENUBREAK = 64
MFT_OWNERDRAW = 256
MFT_RADIOCHECK = 512
MFT_RIGHTJUSTIFY = 16384
MFT_RIGHTORDER = 8192
MFT_SEPARATOR = 2048
MFT_STRING = 0
MESSAGEBOX_RESULT = Int32
IDOK = 1
IDCANCEL = 2
IDABORT = 3
IDRETRY = 4
IDIGNORE = 5
IDYES = 6
IDNO = 7
IDCLOSE = 8
IDHELP = 9
IDTRYAGAIN = 10
IDCONTINUE = 11
IDASYNC = 32001
IDTIMEOUT = 32000
MENU_ITEM_STATE = UInt32
MFS_GRAYED = 3
MFS_DISABLED = 3
MFS_CHECKED = 8
MFS_HILITE = 128
MFS_ENABLED = 0
MFS_UNCHECKED = 0
MFS_UNHILITE = 0
MFS_DEFAULT = 4096
SCROLLBAR_CONSTANTS = UInt32
SB_CTL = 2
SB_HORZ = 0
SB_VERT = 1
SB_BOTH = 3
GET_CLASS_LONG_INDEX = Int32
GCW_ATOM = -32
GCL_CBCLSEXTRA = -20
GCL_CBWNDEXTRA = -18
GCL_HBRBACKGROUND = -10
GCL_HCURSOR = -12
GCL_HICON = -14
GCL_HICONSM = -34
GCL_HMODULE = -16
GCL_MENUNAME = -8
GCL_STYLE = -26
GCL_WNDPROC = -24
GCLP_HBRBACKGROUND = -10
GCLP_HCURSOR = -12
GCLP_HICON = -14
GCLP_HICONSM = -34
GCLP_HMODULE = -16
GCLP_MENUNAME = -8
GCLP_WNDPROC = -24
UPDATE_LAYERED_WINDOW_FLAGS = UInt32
ULW_ALPHA = 2
ULW_COLORKEY = 1
ULW_OPAQUE = 4
ULW_EX_NORESIZE = 8
WINDOW_LONG_PTR_INDEX = Int32
GWL_EXSTYLE = -20
GWLP_HINSTANCE = -6
GWLP_HWNDPARENT = -8
GWLP_ID = -12
GWL_STYLE = -16
GWLP_USERDATA = -21
GWLP_WNDPROC = -4
GWL_HINSTANCE = -6
GWL_ID = -12
GWL_USERDATA = -21
GWL_WNDPROC = -4
GWL_HWNDPARENT = -8
ANIMATE_WINDOW_FLAGS = UInt32
AW_ACTIVATE = 131072
AW_BLEND = 524288
AW_CENTER = 16
AW_HIDE = 65536
AW_HOR_POSITIVE = 1
AW_HOR_NEGATIVE = 2
AW_SLIDE = 262144
AW_VER_POSITIVE = 4
AW_VER_NEGATIVE = 8
CHANGE_WINDOW_MESSAGE_FILTER_FLAGS = UInt32
MSGFLT_ADD = 1
MSGFLT_REMOVE = 2
GDI_IMAGE_TYPE = UInt32
IMAGE_BITMAP = 0
IMAGE_CURSOR = 2
IMAGE_ICON = 1
WINDOWS_HOOK_ID = Int32
WH_CALLWNDPROC = 4
WH_CALLWNDPROCRET = 12
WH_CBT = 5
WH_DEBUG = 9
WH_FOREGROUNDIDLE = 11
WH_GETMESSAGE = 3
WH_JOURNALPLAYBACK = 1
WH_JOURNALRECORD = 0
WH_KEYBOARD = 2
WH_KEYBOARD_LL = 13
WH_MOUSE = 7
WH_MOUSE_LL = 14
WH_MSGFILTER = -1
WH_SHELL = 10
WH_SYSMSGFILTER = 6
IMAGE_FLAGS = UInt32
LR_CREATEDIBSECTION = 8192
LR_DEFAULTCOLOR = 0
LR_DEFAULTSIZE = 64
LR_LOADFROMFILE = 16
LR_LOADMAP3DCOLORS = 4096
LR_LOADTRANSPARENT = 32
LR_MONOCHROME = 1
LR_SHARED = 32768
LR_VGACOLOR = 128
LR_COPYDELETEORG = 8
LR_COPYFROMRESOURCE = 16384
LR_COPYRETURNORG = 4
SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS = UInt32
SPIF_UPDATEINIFILE = 1
SPIF_SENDCHANGE = 2
SPIF_SENDWININICHANGE = 2
SET_WINDOW_POS_FLAGS = UInt32
SWP_ASYNCWINDOWPOS = 16384
SWP_DEFERERASE = 8192
SWP_DRAWFRAME = 32
SWP_FRAMECHANGED = 32
SWP_HIDEWINDOW = 128
SWP_NOACTIVATE = 16
SWP_NOCOPYBITS = 256
SWP_NOMOVE = 2
SWP_NOOWNERZORDER = 512
SWP_NOREDRAW = 8
SWP_NOREPOSITION = 512
SWP_NOSENDCHANGING = 1024
SWP_NOSIZE = 1
SWP_NOZORDER = 4
SWP_SHOWWINDOW = 64
SWP__NOOWNERZORDER = 512
MSG_WAIT_FOR_MULTIPLE_OBJECTS_EX_FLAGS = UInt32
MWMO_NONE = 0
MWMO_ALERTABLE = 2
MWMO_INPUTAVAILABLE = 4
MWMO_WAITALL = 1
QUEUE_STATUS_FLAGS = UInt32
QS_ALLEVENTS = 1215
QS_ALLINPUT = 1279
QS_ALLPOSTMESSAGE = 256
QS_HOTKEY = 128
QS_INPUT = 1031
QS_KEY = 1
QS_MOUSE = 6
QS_MOUSEBUTTON = 4
QS_MOUSEMOVE = 2
QS_PAINT = 32
QS_POSTMESSAGE = 8
QS_RAWINPUT = 1024
QS_SENDMESSAGE = 64
QS_TIMER = 16
SYSTEM_CURSOR_ID = UInt32
OCR_APPSTARTING = 32650
OCR_NORMAL = 32512
OCR_CROSS = 32515
OCR_HAND = 32649
OCR_HELP = 32651
OCR_IBEAM = 32513
OCR_NO = 32648
OCR_SIZEALL = 32646
OCR_SIZENESW = 32643
OCR_SIZENS = 32645
OCR_SIZENWSE = 32642
OCR_SIZEWE = 32644
OCR_UP = 32516
OCR_WAIT = 32514
LAYERED_WINDOW_ATTRIBUTES_FLAGS = UInt32
LWA_ALPHA = 2
LWA_COLORKEY = 1
SEND_MESSAGE_TIMEOUT_FLAGS = UInt32
SMTO_ABORTIFHUNG = 2
SMTO_BLOCK = 1
SMTO_NORMAL = 0
SMTO_NOTIMEOUTIFNOTHUNG = 8
SMTO_ERRORONEXIT = 32
PEEK_MESSAGE_REMOVE_TYPE = UInt32
PM_NOREMOVE = 0
PM_REMOVE = 1
PM_NOYIELD = 2
PM_QS_INPUT = 67567616
PM_QS_POSTMESSAGE = 9961472
PM_QS_PAINT = 2097152
PM_QS_SENDMESSAGE = 4194304
SYS_COLOR_INDEX = UInt32
COLOR_3DDKSHADOW = 21
COLOR_3DFACE = 15
COLOR_3DHIGHLIGHT = 20
COLOR_3DHILIGHT = 20
COLOR_3DLIGHT = 22
COLOR_3DSHADOW = 16
COLOR_ACTIVEBORDER = 10
COLOR_ACTIVECAPTION = 2
COLOR_APPWORKSPACE = 12
COLOR_BACKGROUND = 1
COLOR_BTNFACE = 15
_COLOR_BTNHIGHLIGHT = 20
_COLOR_BTNHILIGHT = 20
COLOR_BTNSHADOW = 16
COLOR_BTNTEXT = 18
COLOR_CAPTIONTEXT = 9
COLOR_DESKTOP = 1
COLOR_GRADIENTACTIVECAPTION = 27
COLOR_GRADIENTINACTIVECAPTION = 28
COLOR_GRAYTEXT = 17
COLOR_HIGHLIGHT = 13
COLOR_HIGHLIGHTTEXT = 14
COLOR_HOTLIGHT = 26
COLOR_INACTIVEBORDER = 11
COLOR_INACTIVECAPTION = 3
COLOR_INACTIVECAPTIONTEXT = 19
COLOR_INFOBK = 24
COLOR_INFOTEXT = 23
COLOR_MENU = 4
COLOR_MENUHILIGHT = 29
COLOR_MENUBAR = 30
COLOR_MENUTEXT = 7
COLOR_SCROLLBAR = 0
COLOR_WINDOW = 5
COLOR_WINDOWFRAME = 6
COLOR_WINDOWTEXT = 8
GET_WINDOW_CMD = UInt32
GW_CHILD = 5
GW_ENABLEDPOPUP = 6
GW_HWNDFIRST = 0
GW_HWNDLAST = 1
GW_HWNDNEXT = 2
GW_HWNDPREV = 3
GW_OWNER = 4
SYSTEM_METRICS_INDEX = UInt32
SM_ARRANGE = 56
SM_CLEANBOOT = 67
SM_CMONITORS = 80
SM_CMOUSEBUTTONS = 43
SM_CONVERTIBLESLATEMODE = 8195
SM_CXBORDER = 5
SM_CXCURSOR = 13
SM_CXDLGFRAME = 7
SM_CXDOUBLECLK = 36
SM_CXDRAG = 68
SM_CXEDGE = 45
SM_CXFIXEDFRAME = 7
SM_CXFOCUSBORDER = 83
SM_CXFRAME = 32
SM_CXFULLSCREEN = 16
SM_CXHSCROLL = 21
SM_CXHTHUMB = 10
SM_CXICON = 11
SM_CXICONSPACING = 38
SM_CXMAXIMIZED = 61
SM_CXMAXTRACK = 59
SM_CXMENUCHECK = 71
SM_CXMENUSIZE = 54
SM_CXMIN = 28
SM_CXMINIMIZED = 57
SM_CXMINSPACING = 47
SM_CXMINTRACK = 34
SM_CXPADDEDBORDER = 92
SM_CXSCREEN = 0
SM_CXSIZE = 30
SM_CXSIZEFRAME = 32
SM_CXSMICON = 49
SM_CXSMSIZE = 52
SM_CXVIRTUALSCREEN = 78
SM_CXVSCROLL = 2
SM_CYBORDER = 6
SM_CYCAPTION = 4
SM_CYCURSOR = 14
SM_CYDLGFRAME = 8
SM_CYDOUBLECLK = 37
SM_CYDRAG = 69
SM_CYEDGE = 46
SM_CYFIXEDFRAME = 8
SM_CYFOCUSBORDER = 84
SM_CYFRAME = 33
SM_CYFULLSCREEN = 17
SM_CYHSCROLL = 3
SM_CYICON = 12
SM_CYICONSPACING = 39
SM_CYKANJIWINDOW = 18
SM_CYMAXIMIZED = 62
SM_CYMAXTRACK = 60
SM_CYMENU = 15
SM_CYMENUCHECK = 72
SM_CYMENUSIZE = 55
SM_CYMIN = 29
SM_CYMINIMIZED = 58
SM_CYMINSPACING = 48
SM_CYMINTRACK = 35
SM_CYSCREEN = 1
SM_CYSIZE = 31
SM_CYSIZEFRAME = 33
SM_CYSMCAPTION = 51
SM_CYSMICON = 50
SM_CYSMSIZE = 53
SM_CYVIRTUALSCREEN = 79
SM_CYVSCROLL = 20
SM_CYVTHUMB = 9
SM_DBCSENABLED = 42
SM_DEBUG = 22
SM_DIGITIZER = 94
SM_IMMENABLED = 82
SM_MAXIMUMTOUCHES = 95
SM_MEDIACENTER = 87
SM_MENUDROPALIGNMENT = 40
SM_MIDEASTENABLED = 74
SM_MOUSEPRESENT = 19
SM_MOUSEHORIZONTALWHEELPRESENT = 91
SM_MOUSEWHEELPRESENT = 75
SM_NETWORK = 63
SM_PENWINDOWS = 41
SM_REMOTECONTROL = 8193
SM_REMOTESESSION = 4096
SM_SAMEDISPLAYFORMAT = 81
SM_SECURE = 44
SM_SERVERR2 = 89
SM_SHOWSOUNDS = 70
SM_SHUTTINGDOWN = 8192
SM_SLOWMACHINE = 73
SM_STARTER = 88
SM_SWAPBUTTON = 23
SM_SYSTEMDOCKED_ = 8196
SM_TABLETPC = 86
SM_XVIRTUALSCREEN = 76
SM_YVIRTUALSCREEN = 77
GET_ANCESTOR_FLAGS = UInt32
GA_PARENT = 1
GA_ROOT = 2
GA_ROOTOWNER = 3
TILE_WINDOWS_HOW = UInt32
MDITILE_HORIZONTAL = 1
MDITILE_VERTICAL = 0
WINDOW_DISPLAY_AFFINITY = UInt32
WDA_NONE = 0
WDA_MONITOR = 1
WDA_EXCLUDEFROMCAPTURE = 17
FOREGROUND_WINDOW_LOCK_CODE = UInt32
LSFW_LOCK = 1
LSFW_UNLOCK = 2
CASCADE_WINDOWS_HOW = UInt32
MDITILE_SKIPDISABLED = 2
MDITILE_ZORDER = 4
WINDOW_MESSAGE_FILTER_ACTION = UInt32
MSGFLT_ALLOW = 1
MSGFLT_DISALLOW = 2
MSGFLT_RESET = 0
GET_MENU_DEFAULT_ITEM_FLAGS = UInt32
GMDI_GOINTOPOPUPS = 2
GMDI_USEDISABLED = 1
MSGFLTINFO_STATUS = UInt32
MSGFLTINFO_NONE = 0
MSGFLTINFO_ALLOWED_HIGHER = 3
MSGFLTINFO_ALREADYALLOWED_FORWND = 1
MSGFLTINFO_ALREADYDISALLOWED_FORWND = 2
MOUSEHOOKSTRUCTEX_MOUSE_DATA = UInt32
XBUTTON1 = 1
XBUTTON2 = 2
MENU_ITEM_MASK = UInt32
MIIM_BITMAP = 128
MIIM_CHECKMARKS = 8
MIIM_DATA = 32
MIIM_FTYPE = 256
MIIM_ID = 2
MIIM_STATE = 1
MIIM_STRING = 64
MIIM_SUBMENU = 4
MIIM_TYPE = 16
FLASHWINFO_FLAGS = UInt32
FLASHW_ALL = 3
FLASHW_CAPTION = 1
FLASHW_STOP = 0
FLASHW_TIMER = 4
FLASHW_TIMERNOFG = 12
FLASHW_TRAY = 2
CURSORINFO_FLAGS = UInt32
CURSOR_SHOWING = 1
CURSOR_SUPPRESSED = 2
MENUINFO_STYLE = UInt32
MNS_AUTODISMISS = 268435456
MNS_CHECKORBMP = 67108864
MNS_DRAGDROP = 536870912
MNS_MODELESS = 1073741824
MNS_NOCHECK = 2147483648
MNS_NOTIFYBYPOS = 134217728
WINDOWPLACEMENT_FLAGS = UInt32
WPF_ASYNCWINDOWPLACEMENT = 4
WPF_RESTORETOMAXIMIZED = 2
WPF_SETMINPOSITION = 1
MENUINFO_MASK = UInt32
MIM_APPLYTOSUBMENUS = 2147483648
MIM_BACKGROUND = 2
MIM_HELPID = 4
MIM_MAXHEIGHT = 1
MIM_MENUDATA = 8
MIM_STYLE = 16
MINIMIZEDMETRICS_ARRANGE = Int32
ARW_BOTTOMLEFT = 0
ARW_BOTTOMRIGHT = 1
ARW_TOPLEFT = 2
ARW_TOPRIGHT = 3
SCROLLINFO_MASK = UInt32
SIF_ALL = 23
SIF_DISABLENOSCROLL = 8
SIF_PAGE = 2
SIF_POS = 4
SIF_RANGE = 1
SIF_TRACKPOS = 16
MENUGETOBJECTINFO_FLAGS = UInt32
MNGOF_BOTTOMGAP = 2
MNGOF_TOPGAP = 1
GUITHREADINFO_FLAGS = UInt32
GUI_CARETBLINKING = 1
GUI_INMENUMODE = 4
GUI_INMOVESIZE = 2
GUI_POPUPMENUMODE = 16
GUI_SYSTEMMENUMODE = 8
KBDLLHOOKSTRUCT_FLAGS = UInt32
LLKHF_EXTENDED = 1
LLKHF_ALTDOWN = 32
LLKHF_UP = 128
LLKHF_INJECTED = 16
LLKHF_LOWER_IL_INJECTED = 2
DI_FLAGS = UInt32
DI_MASK = 1
DI_IMAGE = 2
DI_NORMAL = 3
DI_COMPAT = 4
DI_DEFAULTSIZE = 8
DI_NOMIRROR = 16
HHOOK = IntPtr
HICON = IntPtr
HMENU = IntPtr
HCURSOR = IntPtr
HACCEL = IntPtr
def _define_MESSAGE_RESOURCE_ENTRY_head():
    class MESSAGE_RESOURCE_ENTRY(Structure):
        pass
    return MESSAGE_RESOURCE_ENTRY
def _define_MESSAGE_RESOURCE_ENTRY():
    MESSAGE_RESOURCE_ENTRY = win32more.UI.WindowsAndMessaging.MESSAGE_RESOURCE_ENTRY_head
    MESSAGE_RESOURCE_ENTRY._fields_ = [
        ("Length", UInt16),
        ("Flags", UInt16),
        ("Text", Byte * 0),
    ]
    return MESSAGE_RESOURCE_ENTRY
def _define_MESSAGE_RESOURCE_BLOCK_head():
    class MESSAGE_RESOURCE_BLOCK(Structure):
        pass
    return MESSAGE_RESOURCE_BLOCK
def _define_MESSAGE_RESOURCE_BLOCK():
    MESSAGE_RESOURCE_BLOCK = win32more.UI.WindowsAndMessaging.MESSAGE_RESOURCE_BLOCK_head
    MESSAGE_RESOURCE_BLOCK._fields_ = [
        ("LowId", UInt32),
        ("HighId", UInt32),
        ("OffsetToEntries", UInt32),
    ]
    return MESSAGE_RESOURCE_BLOCK
def _define_MESSAGE_RESOURCE_DATA_head():
    class MESSAGE_RESOURCE_DATA(Structure):
        pass
    return MESSAGE_RESOURCE_DATA
def _define_MESSAGE_RESOURCE_DATA():
    MESSAGE_RESOURCE_DATA = win32more.UI.WindowsAndMessaging.MESSAGE_RESOURCE_DATA_head
    MESSAGE_RESOURCE_DATA._fields_ = [
        ("NumberOfBlocks", UInt32),
        ("Blocks", win32more.UI.WindowsAndMessaging.MESSAGE_RESOURCE_BLOCK * 0),
    ]
    return MESSAGE_RESOURCE_DATA
def _define_WNDPROC():
    return CFUNCTYPE(win32more.Foundation.LRESULT,win32more.Foundation.HWND,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM, use_last_error=False)
def _define_DLGPROC():
    return CFUNCTYPE(IntPtr,win32more.Foundation.HWND,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM, use_last_error=False)
def _define_TIMERPROC():
    return CFUNCTYPE(Void,win32more.Foundation.HWND,UInt32,UIntPtr,UInt32, use_last_error=False)
def _define_WNDENUMPROC():
    return CFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.LPARAM, use_last_error=False)
def _define_HOOKPROC():
    return CFUNCTYPE(win32more.Foundation.LRESULT,Int32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM, use_last_error=False)
def _define_SENDASYNCPROC():
    return CFUNCTYPE(Void,win32more.Foundation.HWND,UInt32,UIntPtr,win32more.Foundation.LRESULT, use_last_error=False)
def _define_PROPENUMPROCA():
    return CFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PSTR,win32more.Foundation.HANDLE, use_last_error=False)
def _define_PROPENUMPROCW():
    return CFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PWSTR,win32more.Foundation.HANDLE, use_last_error=False)
def _define_PROPENUMPROCEXA():
    return CFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PSTR,win32more.Foundation.HANDLE,UIntPtr, use_last_error=False)
def _define_PROPENUMPROCEXW():
    return CFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PWSTR,win32more.Foundation.HANDLE,UIntPtr, use_last_error=False)
def _define_NAMEENUMPROCA():
    return CFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,win32more.Foundation.LPARAM, use_last_error=False)
def _define_NAMEENUMPROCW():
    return CFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,win32more.Foundation.LPARAM, use_last_error=False)
def _define_CBT_CREATEWNDA_head():
    class CBT_CREATEWNDA(Structure):
        pass
    return CBT_CREATEWNDA
def _define_CBT_CREATEWNDA():
    CBT_CREATEWNDA = win32more.UI.WindowsAndMessaging.CBT_CREATEWNDA_head
    CBT_CREATEWNDA._fields_ = [
        ("lpcs", POINTER(win32more.UI.WindowsAndMessaging.CREATESTRUCTA_head)),
        ("hwndInsertAfter", win32more.Foundation.HWND),
    ]
    return CBT_CREATEWNDA
def _define_CBT_CREATEWNDW_head():
    class CBT_CREATEWNDW(Structure):
        pass
    return CBT_CREATEWNDW
def _define_CBT_CREATEWNDW():
    CBT_CREATEWNDW = win32more.UI.WindowsAndMessaging.CBT_CREATEWNDW_head
    CBT_CREATEWNDW._fields_ = [
        ("lpcs", POINTER(win32more.UI.WindowsAndMessaging.CREATESTRUCTW_head)),
        ("hwndInsertAfter", win32more.Foundation.HWND),
    ]
    return CBT_CREATEWNDW
def _define_CBTACTIVATESTRUCT_head():
    class CBTACTIVATESTRUCT(Structure):
        pass
    return CBTACTIVATESTRUCT
def _define_CBTACTIVATESTRUCT():
    CBTACTIVATESTRUCT = win32more.UI.WindowsAndMessaging.CBTACTIVATESTRUCT_head
    CBTACTIVATESTRUCT._fields_ = [
        ("fMouse", win32more.Foundation.BOOL),
        ("hWndActive", win32more.Foundation.HWND),
    ]
    return CBTACTIVATESTRUCT
def _define_SHELLHOOKINFO_head():
    class SHELLHOOKINFO(Structure):
        pass
    return SHELLHOOKINFO
def _define_SHELLHOOKINFO():
    SHELLHOOKINFO = win32more.UI.WindowsAndMessaging.SHELLHOOKINFO_head
    SHELLHOOKINFO._fields_ = [
        ("hwnd", win32more.Foundation.HWND),
        ("rc", win32more.Foundation.RECT),
    ]
    return SHELLHOOKINFO
def _define_EVENTMSG_head():
    class EVENTMSG(Structure):
        pass
    return EVENTMSG
def _define_EVENTMSG():
    EVENTMSG = win32more.UI.WindowsAndMessaging.EVENTMSG_head
    EVENTMSG._fields_ = [
        ("message", UInt32),
        ("paramL", UInt32),
        ("paramH", UInt32),
        ("time", UInt32),
        ("hwnd", win32more.Foundation.HWND),
    ]
    return EVENTMSG
def _define_CWPSTRUCT_head():
    class CWPSTRUCT(Structure):
        pass
    return CWPSTRUCT
def _define_CWPSTRUCT():
    CWPSTRUCT = win32more.UI.WindowsAndMessaging.CWPSTRUCT_head
    CWPSTRUCT._fields_ = [
        ("lParam", win32more.Foundation.LPARAM),
        ("wParam", win32more.Foundation.WPARAM),
        ("message", UInt32),
        ("hwnd", win32more.Foundation.HWND),
    ]
    return CWPSTRUCT
def _define_CWPRETSTRUCT_head():
    class CWPRETSTRUCT(Structure):
        pass
    return CWPRETSTRUCT
def _define_CWPRETSTRUCT():
    CWPRETSTRUCT = win32more.UI.WindowsAndMessaging.CWPRETSTRUCT_head
    CWPRETSTRUCT._fields_ = [
        ("lResult", win32more.Foundation.LRESULT),
        ("lParam", win32more.Foundation.LPARAM),
        ("wParam", win32more.Foundation.WPARAM),
        ("message", UInt32),
        ("hwnd", win32more.Foundation.HWND),
    ]
    return CWPRETSTRUCT
def _define_KBDLLHOOKSTRUCT_head():
    class KBDLLHOOKSTRUCT(Structure):
        pass
    return KBDLLHOOKSTRUCT
def _define_KBDLLHOOKSTRUCT():
    KBDLLHOOKSTRUCT = win32more.UI.WindowsAndMessaging.KBDLLHOOKSTRUCT_head
    KBDLLHOOKSTRUCT._fields_ = [
        ("vkCode", UInt32),
        ("scanCode", UInt32),
        ("flags", win32more.UI.WindowsAndMessaging.KBDLLHOOKSTRUCT_FLAGS),
        ("time", UInt32),
        ("dwExtraInfo", UIntPtr),
    ]
    return KBDLLHOOKSTRUCT
def _define_MSLLHOOKSTRUCT_head():
    class MSLLHOOKSTRUCT(Structure):
        pass
    return MSLLHOOKSTRUCT
def _define_MSLLHOOKSTRUCT():
    MSLLHOOKSTRUCT = win32more.UI.WindowsAndMessaging.MSLLHOOKSTRUCT_head
    MSLLHOOKSTRUCT._fields_ = [
        ("pt", win32more.Foundation.POINT),
        ("mouseData", win32more.UI.WindowsAndMessaging.MOUSEHOOKSTRUCTEX_MOUSE_DATA),
        ("flags", UInt32),
        ("time", UInt32),
        ("dwExtraInfo", UIntPtr),
    ]
    return MSLLHOOKSTRUCT
def _define_DEBUGHOOKINFO_head():
    class DEBUGHOOKINFO(Structure):
        pass
    return DEBUGHOOKINFO
def _define_DEBUGHOOKINFO():
    DEBUGHOOKINFO = win32more.UI.WindowsAndMessaging.DEBUGHOOKINFO_head
    DEBUGHOOKINFO._fields_ = [
        ("idThread", UInt32),
        ("idThreadInstaller", UInt32),
        ("lParam", win32more.Foundation.LPARAM),
        ("wParam", win32more.Foundation.WPARAM),
        ("code", Int32),
    ]
    return DEBUGHOOKINFO
def _define_MOUSEHOOKSTRUCT_head():
    class MOUSEHOOKSTRUCT(Structure):
        pass
    return MOUSEHOOKSTRUCT
def _define_MOUSEHOOKSTRUCT():
    MOUSEHOOKSTRUCT = win32more.UI.WindowsAndMessaging.MOUSEHOOKSTRUCT_head
    MOUSEHOOKSTRUCT._fields_ = [
        ("pt", win32more.Foundation.POINT),
        ("hwnd", win32more.Foundation.HWND),
        ("wHitTestCode", UInt32),
        ("dwExtraInfo", UIntPtr),
    ]
    return MOUSEHOOKSTRUCT
def _define_MOUSEHOOKSTRUCTEX_head():
    class MOUSEHOOKSTRUCTEX(Structure):
        pass
    return MOUSEHOOKSTRUCTEX
def _define_MOUSEHOOKSTRUCTEX():
    MOUSEHOOKSTRUCTEX = win32more.UI.WindowsAndMessaging.MOUSEHOOKSTRUCTEX_head
    MOUSEHOOKSTRUCTEX._fields_ = [
        ("__AnonymousBase_winuser_L1166_C46", win32more.UI.WindowsAndMessaging.MOUSEHOOKSTRUCT),
        ("mouseData", win32more.UI.WindowsAndMessaging.MOUSEHOOKSTRUCTEX_MOUSE_DATA),
    ]
    return MOUSEHOOKSTRUCTEX
def _define_HARDWAREHOOKSTRUCT_head():
    class HARDWAREHOOKSTRUCT(Structure):
        pass
    return HARDWAREHOOKSTRUCT
def _define_HARDWAREHOOKSTRUCT():
    HARDWAREHOOKSTRUCT = win32more.UI.WindowsAndMessaging.HARDWAREHOOKSTRUCT_head
    HARDWAREHOOKSTRUCT._fields_ = [
        ("hwnd", win32more.Foundation.HWND),
        ("message", UInt32),
        ("wParam", win32more.Foundation.WPARAM),
        ("lParam", win32more.Foundation.LPARAM),
    ]
    return HARDWAREHOOKSTRUCT
def _define_WNDCLASSEXA_head():
    class WNDCLASSEXA(Structure):
        pass
    return WNDCLASSEXA
def _define_WNDCLASSEXA():
    WNDCLASSEXA = win32more.UI.WindowsAndMessaging.WNDCLASSEXA_head
    WNDCLASSEXA._fields_ = [
        ("cbSize", UInt32),
        ("style", win32more.UI.WindowsAndMessaging.WNDCLASS_STYLES),
        ("lpfnWndProc", win32more.UI.WindowsAndMessaging.WNDPROC),
        ("cbClsExtra", Int32),
        ("cbWndExtra", Int32),
        ("hInstance", win32more.Foundation.HINSTANCE),
        ("hIcon", win32more.UI.WindowsAndMessaging.HICON),
        ("hCursor", win32more.UI.WindowsAndMessaging.HCURSOR),
        ("hbrBackground", win32more.Graphics.Gdi.HBRUSH),
        ("lpszMenuName", win32more.Foundation.PSTR),
        ("lpszClassName", win32more.Foundation.PSTR),
        ("hIconSm", win32more.UI.WindowsAndMessaging.HICON),
    ]
    return WNDCLASSEXA
def _define_WNDCLASSEXW_head():
    class WNDCLASSEXW(Structure):
        pass
    return WNDCLASSEXW
def _define_WNDCLASSEXW():
    WNDCLASSEXW = win32more.UI.WindowsAndMessaging.WNDCLASSEXW_head
    WNDCLASSEXW._fields_ = [
        ("cbSize", UInt32),
        ("style", win32more.UI.WindowsAndMessaging.WNDCLASS_STYLES),
        ("lpfnWndProc", win32more.UI.WindowsAndMessaging.WNDPROC),
        ("cbClsExtra", Int32),
        ("cbWndExtra", Int32),
        ("hInstance", win32more.Foundation.HINSTANCE),
        ("hIcon", win32more.UI.WindowsAndMessaging.HICON),
        ("hCursor", win32more.UI.WindowsAndMessaging.HCURSOR),
        ("hbrBackground", win32more.Graphics.Gdi.HBRUSH),
        ("lpszMenuName", win32more.Foundation.PWSTR),
        ("lpszClassName", win32more.Foundation.PWSTR),
        ("hIconSm", win32more.UI.WindowsAndMessaging.HICON),
    ]
    return WNDCLASSEXW
def _define_WNDCLASSA_head():
    class WNDCLASSA(Structure):
        pass
    return WNDCLASSA
def _define_WNDCLASSA():
    WNDCLASSA = win32more.UI.WindowsAndMessaging.WNDCLASSA_head
    WNDCLASSA._fields_ = [
        ("style", win32more.UI.WindowsAndMessaging.WNDCLASS_STYLES),
        ("lpfnWndProc", win32more.UI.WindowsAndMessaging.WNDPROC),
        ("cbClsExtra", Int32),
        ("cbWndExtra", Int32),
        ("hInstance", win32more.Foundation.HINSTANCE),
        ("hIcon", win32more.UI.WindowsAndMessaging.HICON),
        ("hCursor", win32more.UI.WindowsAndMessaging.HCURSOR),
        ("hbrBackground", win32more.Graphics.Gdi.HBRUSH),
        ("lpszMenuName", win32more.Foundation.PSTR),
        ("lpszClassName", win32more.Foundation.PSTR),
    ]
    return WNDCLASSA
def _define_WNDCLASSW_head():
    class WNDCLASSW(Structure):
        pass
    return WNDCLASSW
def _define_WNDCLASSW():
    WNDCLASSW = win32more.UI.WindowsAndMessaging.WNDCLASSW_head
    WNDCLASSW._fields_ = [
        ("style", win32more.UI.WindowsAndMessaging.WNDCLASS_STYLES),
        ("lpfnWndProc", win32more.UI.WindowsAndMessaging.WNDPROC),
        ("cbClsExtra", Int32),
        ("cbWndExtra", Int32),
        ("hInstance", win32more.Foundation.HINSTANCE),
        ("hIcon", win32more.UI.WindowsAndMessaging.HICON),
        ("hCursor", win32more.UI.WindowsAndMessaging.HCURSOR),
        ("hbrBackground", win32more.Graphics.Gdi.HBRUSH),
        ("lpszMenuName", win32more.Foundation.PWSTR),
        ("lpszClassName", win32more.Foundation.PWSTR),
    ]
    return WNDCLASSW
def _define_MSG_head():
    class MSG(Structure):
        pass
    return MSG
def _define_MSG():
    MSG = win32more.UI.WindowsAndMessaging.MSG_head
    MSG._fields_ = [
        ("hwnd", win32more.Foundation.HWND),
        ("message", UInt32),
        ("wParam", win32more.Foundation.WPARAM),
        ("lParam", win32more.Foundation.LPARAM),
        ("time", UInt32),
        ("pt", win32more.Foundation.POINT),
    ]
    return MSG
def _define_MINMAXINFO_head():
    class MINMAXINFO(Structure):
        pass
    return MINMAXINFO
def _define_MINMAXINFO():
    MINMAXINFO = win32more.UI.WindowsAndMessaging.MINMAXINFO_head
    MINMAXINFO._fields_ = [
        ("ptReserved", win32more.Foundation.POINT),
        ("ptMaxSize", win32more.Foundation.POINT),
        ("ptMaxPosition", win32more.Foundation.POINT),
        ("ptMinTrackSize", win32more.Foundation.POINT),
        ("ptMaxTrackSize", win32more.Foundation.POINT),
    ]
    return MINMAXINFO
def _define_MDINEXTMENU_head():
    class MDINEXTMENU(Structure):
        pass
    return MDINEXTMENU
def _define_MDINEXTMENU():
    MDINEXTMENU = win32more.UI.WindowsAndMessaging.MDINEXTMENU_head
    MDINEXTMENU._fields_ = [
        ("hmenuIn", win32more.UI.WindowsAndMessaging.HMENU),
        ("hmenuNext", win32more.UI.WindowsAndMessaging.HMENU),
        ("hwndNext", win32more.Foundation.HWND),
    ]
    return MDINEXTMENU
def _define_WINDOWPOS_head():
    class WINDOWPOS(Structure):
        pass
    return WINDOWPOS
def _define_WINDOWPOS():
    WINDOWPOS = win32more.UI.WindowsAndMessaging.WINDOWPOS_head
    WINDOWPOS._fields_ = [
        ("hwnd", win32more.Foundation.HWND),
        ("hwndInsertAfter", win32more.Foundation.HWND),
        ("x", Int32),
        ("y", Int32),
        ("cx", Int32),
        ("cy", Int32),
        ("flags", win32more.UI.WindowsAndMessaging.SET_WINDOW_POS_FLAGS),
    ]
    return WINDOWPOS
def _define_NCCALCSIZE_PARAMS_head():
    class NCCALCSIZE_PARAMS(Structure):
        pass
    return NCCALCSIZE_PARAMS
def _define_NCCALCSIZE_PARAMS():
    NCCALCSIZE_PARAMS = win32more.UI.WindowsAndMessaging.NCCALCSIZE_PARAMS_head
    NCCALCSIZE_PARAMS._fields_ = [
        ("rgrc", win32more.Foundation.RECT * 3),
        ("lppos", POINTER(win32more.UI.WindowsAndMessaging.WINDOWPOS_head)),
    ]
    return NCCALCSIZE_PARAMS
def _define_ACCEL_head():
    class ACCEL(Structure):
        pass
    return ACCEL
def _define_ACCEL():
    ACCEL = win32more.UI.WindowsAndMessaging.ACCEL_head
    ACCEL._fields_ = [
        ("fVirt", Byte),
        ("key", UInt16),
        ("cmd", UInt16),
    ]
    return ACCEL
def _define_CREATESTRUCTA_head():
    class CREATESTRUCTA(Structure):
        pass
    return CREATESTRUCTA
def _define_CREATESTRUCTA():
    CREATESTRUCTA = win32more.UI.WindowsAndMessaging.CREATESTRUCTA_head
    CREATESTRUCTA._fields_ = [
        ("lpCreateParams", c_void_p),
        ("hInstance", win32more.Foundation.HINSTANCE),
        ("hMenu", win32more.UI.WindowsAndMessaging.HMENU),
        ("hwndParent", win32more.Foundation.HWND),
        ("cy", Int32),
        ("cx", Int32),
        ("y", Int32),
        ("x", Int32),
        ("style", Int32),
        ("lpszName", win32more.Foundation.PSTR),
        ("lpszClass", win32more.Foundation.PSTR),
        ("dwExStyle", UInt32),
    ]
    return CREATESTRUCTA
def _define_CREATESTRUCTW_head():
    class CREATESTRUCTW(Structure):
        pass
    return CREATESTRUCTW
def _define_CREATESTRUCTW():
    CREATESTRUCTW = win32more.UI.WindowsAndMessaging.CREATESTRUCTW_head
    CREATESTRUCTW._fields_ = [
        ("lpCreateParams", c_void_p),
        ("hInstance", win32more.Foundation.HINSTANCE),
        ("hMenu", win32more.UI.WindowsAndMessaging.HMENU),
        ("hwndParent", win32more.Foundation.HWND),
        ("cy", Int32),
        ("cx", Int32),
        ("y", Int32),
        ("x", Int32),
        ("style", Int32),
        ("lpszName", win32more.Foundation.PWSTR),
        ("lpszClass", win32more.Foundation.PWSTR),
        ("dwExStyle", UInt32),
    ]
    return CREATESTRUCTW
def _define_WINDOWPLACEMENT_head():
    class WINDOWPLACEMENT(Structure):
        pass
    return WINDOWPLACEMENT
def _define_WINDOWPLACEMENT():
    WINDOWPLACEMENT = win32more.UI.WindowsAndMessaging.WINDOWPLACEMENT_head
    WINDOWPLACEMENT._fields_ = [
        ("length", UInt32),
        ("flags", win32more.UI.WindowsAndMessaging.WINDOWPLACEMENT_FLAGS),
        ("showCmd", win32more.UI.WindowsAndMessaging.SHOW_WINDOW_CMD),
        ("ptMinPosition", win32more.Foundation.POINT),
        ("ptMaxPosition", win32more.Foundation.POINT),
        ("rcNormalPosition", win32more.Foundation.RECT),
    ]
    return WINDOWPLACEMENT
def _define_STYLESTRUCT_head():
    class STYLESTRUCT(Structure):
        pass
    return STYLESTRUCT
def _define_STYLESTRUCT():
    STYLESTRUCT = win32more.UI.WindowsAndMessaging.STYLESTRUCT_head
    STYLESTRUCT._fields_ = [
        ("styleOld", UInt32),
        ("styleNew", UInt32),
    ]
    return STYLESTRUCT
def _define_PREGISTERCLASSNAMEW():
    return CFUNCTYPE(win32more.Foundation.BOOLEAN,win32more.Foundation.PWSTR, use_last_error=False)
def _define_UPDATELAYEREDWINDOWINFO_head():
    class UPDATELAYEREDWINDOWINFO(Structure):
        pass
    return UPDATELAYEREDWINDOWINFO
def _define_UPDATELAYEREDWINDOWINFO():
    UPDATELAYEREDWINDOWINFO = win32more.UI.WindowsAndMessaging.UPDATELAYEREDWINDOWINFO_head
    UPDATELAYEREDWINDOWINFO._fields_ = [
        ("cbSize", UInt32),
        ("hdcDst", win32more.Graphics.Gdi.HDC),
        ("pptDst", POINTER(win32more.Foundation.POINT_head)),
        ("psize", POINTER(win32more.Foundation.SIZE_head)),
        ("hdcSrc", win32more.Graphics.Gdi.HDC),
        ("pptSrc", POINTER(win32more.Foundation.POINT_head)),
        ("crKey", UInt32),
        ("pblend", POINTER(win32more.Graphics.Gdi.BLENDFUNCTION_head)),
        ("dwFlags", win32more.UI.WindowsAndMessaging.UPDATE_LAYERED_WINDOW_FLAGS),
        ("prcDirty", POINTER(win32more.Foundation.RECT_head)),
    ]
    return UPDATELAYEREDWINDOWINFO
def _define_FLASHWINFO_head():
    class FLASHWINFO(Structure):
        pass
    return FLASHWINFO
def _define_FLASHWINFO():
    FLASHWINFO = win32more.UI.WindowsAndMessaging.FLASHWINFO_head
    FLASHWINFO._fields_ = [
        ("cbSize", UInt32),
        ("hwnd", win32more.Foundation.HWND),
        ("dwFlags", win32more.UI.WindowsAndMessaging.FLASHWINFO_FLAGS),
        ("uCount", UInt32),
        ("dwTimeout", UInt32),
    ]
    return FLASHWINFO
def _define_DLGTEMPLATE_head():
    class DLGTEMPLATE(Structure):
        pass
    return DLGTEMPLATE
def _define_DLGTEMPLATE():
    DLGTEMPLATE = win32more.UI.WindowsAndMessaging.DLGTEMPLATE_head
    DLGTEMPLATE._pack_ = 2
    DLGTEMPLATE._fields_ = [
        ("style", UInt32),
        ("dwExtendedStyle", UInt32),
        ("cdit", UInt16),
        ("x", Int16),
        ("y", Int16),
        ("cx", Int16),
        ("cy", Int16),
    ]
    return DLGTEMPLATE
def _define_DLGITEMTEMPLATE_head():
    class DLGITEMTEMPLATE(Structure):
        pass
    return DLGITEMTEMPLATE
def _define_DLGITEMTEMPLATE():
    DLGITEMTEMPLATE = win32more.UI.WindowsAndMessaging.DLGITEMTEMPLATE_head
    DLGITEMTEMPLATE._pack_ = 2
    DLGITEMTEMPLATE._fields_ = [
        ("style", UInt32),
        ("dwExtendedStyle", UInt32),
        ("x", Int16),
        ("y", Int16),
        ("cx", Int16),
        ("cy", Int16),
        ("id", UInt16),
    ]
    return DLGITEMTEMPLATE
POINTER_INPUT_TYPE = Int32
PT_POINTER = 1
PT_TOUCH = 2
PT_PEN = 3
PT_MOUSE = 4
PT_TOUCHPAD = 5
def _define_TPMPARAMS_head():
    class TPMPARAMS(Structure):
        pass
    return TPMPARAMS
def _define_TPMPARAMS():
    TPMPARAMS = win32more.UI.WindowsAndMessaging.TPMPARAMS_head
    TPMPARAMS._fields_ = [
        ("cbSize", UInt32),
        ("rcExclude", win32more.Foundation.RECT),
    ]
    return TPMPARAMS
def _define_MENUINFO_head():
    class MENUINFO(Structure):
        pass
    return MENUINFO
def _define_MENUINFO():
    MENUINFO = win32more.UI.WindowsAndMessaging.MENUINFO_head
    MENUINFO._fields_ = [
        ("cbSize", UInt32),
        ("fMask", win32more.UI.WindowsAndMessaging.MENUINFO_MASK),
        ("dwStyle", win32more.UI.WindowsAndMessaging.MENUINFO_STYLE),
        ("cyMax", UInt32),
        ("hbrBack", win32more.Graphics.Gdi.HBRUSH),
        ("dwContextHelpID", UInt32),
        ("dwMenuData", UIntPtr),
    ]
    return MENUINFO
def _define_MENUGETOBJECTINFO_head():
    class MENUGETOBJECTINFO(Structure):
        pass
    return MENUGETOBJECTINFO
def _define_MENUGETOBJECTINFO():
    MENUGETOBJECTINFO = win32more.UI.WindowsAndMessaging.MENUGETOBJECTINFO_head
    MENUGETOBJECTINFO._fields_ = [
        ("dwFlags", win32more.UI.WindowsAndMessaging.MENUGETOBJECTINFO_FLAGS),
        ("uPos", UInt32),
        ("hmenu", win32more.UI.WindowsAndMessaging.HMENU),
        ("riid", c_void_p),
        ("pvObj", c_void_p),
    ]
    return MENUGETOBJECTINFO
def _define_MENUITEMINFOA_head():
    class MENUITEMINFOA(Structure):
        pass
    return MENUITEMINFOA
def _define_MENUITEMINFOA():
    MENUITEMINFOA = win32more.UI.WindowsAndMessaging.MENUITEMINFOA_head
    MENUITEMINFOA._fields_ = [
        ("cbSize", UInt32),
        ("fMask", win32more.UI.WindowsAndMessaging.MENU_ITEM_MASK),
        ("fType", win32more.UI.WindowsAndMessaging.MENU_ITEM_TYPE),
        ("fState", win32more.UI.WindowsAndMessaging.MENU_ITEM_STATE),
        ("wID", UInt32),
        ("hSubMenu", win32more.UI.WindowsAndMessaging.HMENU),
        ("hbmpChecked", win32more.Graphics.Gdi.HBITMAP),
        ("hbmpUnchecked", win32more.Graphics.Gdi.HBITMAP),
        ("dwItemData", UIntPtr),
        ("dwTypeData", win32more.Foundation.PSTR),
        ("cch", UInt32),
        ("hbmpItem", win32more.Graphics.Gdi.HBITMAP),
    ]
    return MENUITEMINFOA
def _define_MENUITEMINFOW_head():
    class MENUITEMINFOW(Structure):
        pass
    return MENUITEMINFOW
def _define_MENUITEMINFOW():
    MENUITEMINFOW = win32more.UI.WindowsAndMessaging.MENUITEMINFOW_head
    MENUITEMINFOW._fields_ = [
        ("cbSize", UInt32),
        ("fMask", win32more.UI.WindowsAndMessaging.MENU_ITEM_MASK),
        ("fType", win32more.UI.WindowsAndMessaging.MENU_ITEM_TYPE),
        ("fState", win32more.UI.WindowsAndMessaging.MENU_ITEM_STATE),
        ("wID", UInt32),
        ("hSubMenu", win32more.UI.WindowsAndMessaging.HMENU),
        ("hbmpChecked", win32more.Graphics.Gdi.HBITMAP),
        ("hbmpUnchecked", win32more.Graphics.Gdi.HBITMAP),
        ("dwItemData", UIntPtr),
        ("dwTypeData", win32more.Foundation.PWSTR),
        ("cch", UInt32),
        ("hbmpItem", win32more.Graphics.Gdi.HBITMAP),
    ]
    return MENUITEMINFOW
def _define_DROPSTRUCT_head():
    class DROPSTRUCT(Structure):
        pass
    return DROPSTRUCT
def _define_DROPSTRUCT():
    DROPSTRUCT = win32more.UI.WindowsAndMessaging.DROPSTRUCT_head
    DROPSTRUCT._fields_ = [
        ("hwndSource", win32more.Foundation.HWND),
        ("hwndSink", win32more.Foundation.HWND),
        ("wFmt", UInt32),
        ("dwData", UIntPtr),
        ("ptDrop", win32more.Foundation.POINT),
        ("dwControlData", UInt32),
    ]
    return DROPSTRUCT
def _define_MSGBOXCALLBACK():
    return CFUNCTYPE(Void,POINTER(win32more.UI.Shell.HELPINFO_head), use_last_error=False)
def _define_MSGBOXPARAMSA_head():
    class MSGBOXPARAMSA(Structure):
        pass
    return MSGBOXPARAMSA
def _define_MSGBOXPARAMSA():
    MSGBOXPARAMSA = win32more.UI.WindowsAndMessaging.MSGBOXPARAMSA_head
    MSGBOXPARAMSA._fields_ = [
        ("cbSize", UInt32),
        ("hwndOwner", win32more.Foundation.HWND),
        ("hInstance", win32more.Foundation.HINSTANCE),
        ("lpszText", win32more.Foundation.PSTR),
        ("lpszCaption", win32more.Foundation.PSTR),
        ("dwStyle", win32more.UI.WindowsAndMessaging.MESSAGEBOX_STYLE),
        ("lpszIcon", win32more.Foundation.PSTR),
        ("dwContextHelpId", UIntPtr),
        ("lpfnMsgBoxCallback", win32more.UI.WindowsAndMessaging.MSGBOXCALLBACK),
        ("dwLanguageId", UInt32),
    ]
    return MSGBOXPARAMSA
def _define_MSGBOXPARAMSW_head():
    class MSGBOXPARAMSW(Structure):
        pass
    return MSGBOXPARAMSW
def _define_MSGBOXPARAMSW():
    MSGBOXPARAMSW = win32more.UI.WindowsAndMessaging.MSGBOXPARAMSW_head
    MSGBOXPARAMSW._fields_ = [
        ("cbSize", UInt32),
        ("hwndOwner", win32more.Foundation.HWND),
        ("hInstance", win32more.Foundation.HINSTANCE),
        ("lpszText", win32more.Foundation.PWSTR),
        ("lpszCaption", win32more.Foundation.PWSTR),
        ("dwStyle", win32more.UI.WindowsAndMessaging.MESSAGEBOX_STYLE),
        ("lpszIcon", win32more.Foundation.PWSTR),
        ("dwContextHelpId", UIntPtr),
        ("lpfnMsgBoxCallback", win32more.UI.WindowsAndMessaging.MSGBOXCALLBACK),
        ("dwLanguageId", UInt32),
    ]
    return MSGBOXPARAMSW
def _define_MENUITEMTEMPLATEHEADER_head():
    class MENUITEMTEMPLATEHEADER(Structure):
        pass
    return MENUITEMTEMPLATEHEADER
def _define_MENUITEMTEMPLATEHEADER():
    MENUITEMTEMPLATEHEADER = win32more.UI.WindowsAndMessaging.MENUITEMTEMPLATEHEADER_head
    MENUITEMTEMPLATEHEADER._fields_ = [
        ("versionNumber", UInt16),
        ("offset", UInt16),
    ]
    return MENUITEMTEMPLATEHEADER
def _define_MENUITEMTEMPLATE_head():
    class MENUITEMTEMPLATE(Structure):
        pass
    return MENUITEMTEMPLATE
def _define_MENUITEMTEMPLATE():
    MENUITEMTEMPLATE = win32more.UI.WindowsAndMessaging.MENUITEMTEMPLATE_head
    MENUITEMTEMPLATE._fields_ = [
        ("mtOption", UInt16),
        ("mtID", UInt16),
        ("mtString", Char * 0),
    ]
    return MENUITEMTEMPLATE
def _define_ICONINFO_head():
    class ICONINFO(Structure):
        pass
    return ICONINFO
def _define_ICONINFO():
    ICONINFO = win32more.UI.WindowsAndMessaging.ICONINFO_head
    ICONINFO._fields_ = [
        ("fIcon", win32more.Foundation.BOOL),
        ("xHotspot", UInt32),
        ("yHotspot", UInt32),
        ("hbmMask", win32more.Graphics.Gdi.HBITMAP),
        ("hbmColor", win32more.Graphics.Gdi.HBITMAP),
    ]
    return ICONINFO
def _define_CURSORSHAPE_head():
    class CURSORSHAPE(Structure):
        pass
    return CURSORSHAPE
def _define_CURSORSHAPE():
    CURSORSHAPE = win32more.UI.WindowsAndMessaging.CURSORSHAPE_head
    CURSORSHAPE._fields_ = [
        ("xHotSpot", Int32),
        ("yHotSpot", Int32),
        ("cx", Int32),
        ("cy", Int32),
        ("cbWidth", Int32),
        ("Planes", Byte),
        ("BitsPixel", Byte),
    ]
    return CURSORSHAPE
def _define_ICONINFOEXA_head():
    class ICONINFOEXA(Structure):
        pass
    return ICONINFOEXA
def _define_ICONINFOEXA():
    ICONINFOEXA = win32more.UI.WindowsAndMessaging.ICONINFOEXA_head
    ICONINFOEXA._fields_ = [
        ("cbSize", UInt32),
        ("fIcon", win32more.Foundation.BOOL),
        ("xHotspot", UInt32),
        ("yHotspot", UInt32),
        ("hbmMask", win32more.Graphics.Gdi.HBITMAP),
        ("hbmColor", win32more.Graphics.Gdi.HBITMAP),
        ("wResID", UInt16),
        ("szModName", win32more.Foundation.CHAR * 260),
        ("szResName", win32more.Foundation.CHAR * 260),
    ]
    return ICONINFOEXA
def _define_ICONINFOEXW_head():
    class ICONINFOEXW(Structure):
        pass
    return ICONINFOEXW
def _define_ICONINFOEXW():
    ICONINFOEXW = win32more.UI.WindowsAndMessaging.ICONINFOEXW_head
    ICONINFOEXW._fields_ = [
        ("cbSize", UInt32),
        ("fIcon", win32more.Foundation.BOOL),
        ("xHotspot", UInt32),
        ("yHotspot", UInt32),
        ("hbmMask", win32more.Graphics.Gdi.HBITMAP),
        ("hbmColor", win32more.Graphics.Gdi.HBITMAP),
        ("wResID", UInt16),
        ("szModName", Char * 260),
        ("szResName", Char * 260),
    ]
    return ICONINFOEXW
EDIT_CONTROL_FEATURE = Int32
EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT = 0
EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS = 1
def _define_SCROLLINFO_head():
    class SCROLLINFO(Structure):
        pass
    return SCROLLINFO
def _define_SCROLLINFO():
    SCROLLINFO = win32more.UI.WindowsAndMessaging.SCROLLINFO_head
    SCROLLINFO._fields_ = [
        ("cbSize", UInt32),
        ("fMask", win32more.UI.WindowsAndMessaging.SCROLLINFO_MASK),
        ("nMin", Int32),
        ("nMax", Int32),
        ("nPage", UInt32),
        ("nPos", Int32),
        ("nTrackPos", Int32),
    ]
    return SCROLLINFO
def _define_MDICREATESTRUCTA_head():
    class MDICREATESTRUCTA(Structure):
        pass
    return MDICREATESTRUCTA
def _define_MDICREATESTRUCTA():
    MDICREATESTRUCTA = win32more.UI.WindowsAndMessaging.MDICREATESTRUCTA_head
    MDICREATESTRUCTA._fields_ = [
        ("szClass", win32more.Foundation.PSTR),
        ("szTitle", win32more.Foundation.PSTR),
        ("hOwner", win32more.Foundation.HANDLE),
        ("x", Int32),
        ("y", Int32),
        ("cx", Int32),
        ("cy", Int32),
        ("style", win32more.UI.WindowsAndMessaging.WINDOW_STYLE),
        ("lParam", win32more.Foundation.LPARAM),
    ]
    return MDICREATESTRUCTA
def _define_MDICREATESTRUCTW_head():
    class MDICREATESTRUCTW(Structure):
        pass
    return MDICREATESTRUCTW
def _define_MDICREATESTRUCTW():
    MDICREATESTRUCTW = win32more.UI.WindowsAndMessaging.MDICREATESTRUCTW_head
    MDICREATESTRUCTW._fields_ = [
        ("szClass", win32more.Foundation.PWSTR),
        ("szTitle", win32more.Foundation.PWSTR),
        ("hOwner", win32more.Foundation.HANDLE),
        ("x", Int32),
        ("y", Int32),
        ("cx", Int32),
        ("cy", Int32),
        ("style", win32more.UI.WindowsAndMessaging.WINDOW_STYLE),
        ("lParam", win32more.Foundation.LPARAM),
    ]
    return MDICREATESTRUCTW
def _define_CLIENTCREATESTRUCT_head():
    class CLIENTCREATESTRUCT(Structure):
        pass
    return CLIENTCREATESTRUCT
def _define_CLIENTCREATESTRUCT():
    CLIENTCREATESTRUCT = win32more.UI.WindowsAndMessaging.CLIENTCREATESTRUCT_head
    CLIENTCREATESTRUCT._fields_ = [
        ("hWindowMenu", win32more.Foundation.HANDLE),
        ("idFirstChild", UInt32),
    ]
    return CLIENTCREATESTRUCT
def _define_TouchPredictionParameters_head():
    class TouchPredictionParameters(Structure):
        pass
    return TouchPredictionParameters
def _define_TouchPredictionParameters():
    TouchPredictionParameters = win32more.UI.WindowsAndMessaging.TouchPredictionParameters_head
    TouchPredictionParameters._fields_ = [
        ("cbSize", UInt32),
        ("dwLatency", UInt32),
        ("dwSampleTime", UInt32),
        ("bUseHWTimeStamp", UInt32),
    ]
    return TouchPredictionParameters
HANDEDNESS = Int32
HANDEDNESS_LEFT = 0
HANDEDNESS_RIGHT = 1
def _define_NONCLIENTMETRICSA_head():
    class NONCLIENTMETRICSA(Structure):
        pass
    return NONCLIENTMETRICSA
def _define_NONCLIENTMETRICSA():
    NONCLIENTMETRICSA = win32more.UI.WindowsAndMessaging.NONCLIENTMETRICSA_head
    NONCLIENTMETRICSA._fields_ = [
        ("cbSize", UInt32),
        ("iBorderWidth", Int32),
        ("iScrollWidth", Int32),
        ("iScrollHeight", Int32),
        ("iCaptionWidth", Int32),
        ("iCaptionHeight", Int32),
        ("lfCaptionFont", win32more.Graphics.Gdi.LOGFONTA),
        ("iSmCaptionWidth", Int32),
        ("iSmCaptionHeight", Int32),
        ("lfSmCaptionFont", win32more.Graphics.Gdi.LOGFONTA),
        ("iMenuWidth", Int32),
        ("iMenuHeight", Int32),
        ("lfMenuFont", win32more.Graphics.Gdi.LOGFONTA),
        ("lfStatusFont", win32more.Graphics.Gdi.LOGFONTA),
        ("lfMessageFont", win32more.Graphics.Gdi.LOGFONTA),
        ("iPaddedBorderWidth", Int32),
    ]
    return NONCLIENTMETRICSA
def _define_NONCLIENTMETRICSW_head():
    class NONCLIENTMETRICSW(Structure):
        pass
    return NONCLIENTMETRICSW
def _define_NONCLIENTMETRICSW():
    NONCLIENTMETRICSW = win32more.UI.WindowsAndMessaging.NONCLIENTMETRICSW_head
    NONCLIENTMETRICSW._fields_ = [
        ("cbSize", UInt32),
        ("iBorderWidth", Int32),
        ("iScrollWidth", Int32),
        ("iScrollHeight", Int32),
        ("iCaptionWidth", Int32),
        ("iCaptionHeight", Int32),
        ("lfCaptionFont", win32more.Graphics.Gdi.LOGFONTW),
        ("iSmCaptionWidth", Int32),
        ("iSmCaptionHeight", Int32),
        ("lfSmCaptionFont", win32more.Graphics.Gdi.LOGFONTW),
        ("iMenuWidth", Int32),
        ("iMenuHeight", Int32),
        ("lfMenuFont", win32more.Graphics.Gdi.LOGFONTW),
        ("lfStatusFont", win32more.Graphics.Gdi.LOGFONTW),
        ("lfMessageFont", win32more.Graphics.Gdi.LOGFONTW),
        ("iPaddedBorderWidth", Int32),
    ]
    return NONCLIENTMETRICSW
def _define_MINIMIZEDMETRICS_head():
    class MINIMIZEDMETRICS(Structure):
        pass
    return MINIMIZEDMETRICS
def _define_MINIMIZEDMETRICS():
    MINIMIZEDMETRICS = win32more.UI.WindowsAndMessaging.MINIMIZEDMETRICS_head
    MINIMIZEDMETRICS._fields_ = [
        ("cbSize", UInt32),
        ("iWidth", Int32),
        ("iHorzGap", Int32),
        ("iVertGap", Int32),
        ("iArrange", win32more.UI.WindowsAndMessaging.MINIMIZEDMETRICS_ARRANGE),
    ]
    return MINIMIZEDMETRICS
def _define_ICONMETRICSA_head():
    class ICONMETRICSA(Structure):
        pass
    return ICONMETRICSA
def _define_ICONMETRICSA():
    ICONMETRICSA = win32more.UI.WindowsAndMessaging.ICONMETRICSA_head
    ICONMETRICSA._fields_ = [
        ("cbSize", UInt32),
        ("iHorzSpacing", Int32),
        ("iVertSpacing", Int32),
        ("iTitleWrap", Int32),
        ("lfFont", win32more.Graphics.Gdi.LOGFONTA),
    ]
    return ICONMETRICSA
def _define_ICONMETRICSW_head():
    class ICONMETRICSW(Structure):
        pass
    return ICONMETRICSW
def _define_ICONMETRICSW():
    ICONMETRICSW = win32more.UI.WindowsAndMessaging.ICONMETRICSW_head
    ICONMETRICSW._fields_ = [
        ("cbSize", UInt32),
        ("iHorzSpacing", Int32),
        ("iVertSpacing", Int32),
        ("iTitleWrap", Int32),
        ("lfFont", win32more.Graphics.Gdi.LOGFONTW),
    ]
    return ICONMETRICSW
def _define_ANIMATIONINFO_head():
    class ANIMATIONINFO(Structure):
        pass
    return ANIMATIONINFO
def _define_ANIMATIONINFO():
    ANIMATIONINFO = win32more.UI.WindowsAndMessaging.ANIMATIONINFO_head
    ANIMATIONINFO._fields_ = [
        ("cbSize", UInt32),
        ("iMinAnimate", Int32),
    ]
    return ANIMATIONINFO
def _define_AUDIODESCRIPTION_head():
    class AUDIODESCRIPTION(Structure):
        pass
    return AUDIODESCRIPTION
def _define_AUDIODESCRIPTION():
    AUDIODESCRIPTION = win32more.UI.WindowsAndMessaging.AUDIODESCRIPTION_head
    AUDIODESCRIPTION._fields_ = [
        ("cbSize", UInt32),
        ("Enabled", win32more.Foundation.BOOL),
        ("Locale", UInt32),
    ]
    return AUDIODESCRIPTION
def _define_GUITHREADINFO_head():
    class GUITHREADINFO(Structure):
        pass
    return GUITHREADINFO
def _define_GUITHREADINFO():
    GUITHREADINFO = win32more.UI.WindowsAndMessaging.GUITHREADINFO_head
    GUITHREADINFO._fields_ = [
        ("cbSize", UInt32),
        ("flags", win32more.UI.WindowsAndMessaging.GUITHREADINFO_FLAGS),
        ("hwndActive", win32more.Foundation.HWND),
        ("hwndFocus", win32more.Foundation.HWND),
        ("hwndCapture", win32more.Foundation.HWND),
        ("hwndMenuOwner", win32more.Foundation.HWND),
        ("hwndMoveSize", win32more.Foundation.HWND),
        ("hwndCaret", win32more.Foundation.HWND),
        ("rcCaret", win32more.Foundation.RECT),
    ]
    return GUITHREADINFO
def _define_CURSORINFO_head():
    class CURSORINFO(Structure):
        pass
    return CURSORINFO
def _define_CURSORINFO():
    CURSORINFO = win32more.UI.WindowsAndMessaging.CURSORINFO_head
    CURSORINFO._fields_ = [
        ("cbSize", UInt32),
        ("flags", win32more.UI.WindowsAndMessaging.CURSORINFO_FLAGS),
        ("hCursor", win32more.UI.WindowsAndMessaging.HCURSOR),
        ("ptScreenPos", win32more.Foundation.POINT),
    ]
    return CURSORINFO
def _define_WINDOWINFO_head():
    class WINDOWINFO(Structure):
        pass
    return WINDOWINFO
def _define_WINDOWINFO():
    WINDOWINFO = win32more.UI.WindowsAndMessaging.WINDOWINFO_head
    WINDOWINFO._fields_ = [
        ("cbSize", UInt32),
        ("rcWindow", win32more.Foundation.RECT),
        ("rcClient", win32more.Foundation.RECT),
        ("dwStyle", UInt32),
        ("dwExStyle", UInt32),
        ("dwWindowStatus", UInt32),
        ("cxWindowBorders", UInt32),
        ("cyWindowBorders", UInt32),
        ("atomWindowType", UInt16),
        ("wCreatorVersion", UInt16),
    ]
    return WINDOWINFO
def _define_TITLEBARINFO_head():
    class TITLEBARINFO(Structure):
        pass
    return TITLEBARINFO
def _define_TITLEBARINFO():
    TITLEBARINFO = win32more.UI.WindowsAndMessaging.TITLEBARINFO_head
    TITLEBARINFO._fields_ = [
        ("cbSize", UInt32),
        ("rcTitleBar", win32more.Foundation.RECT),
        ("rgstate", UInt32 * 6),
    ]
    return TITLEBARINFO
def _define_TITLEBARINFOEX_head():
    class TITLEBARINFOEX(Structure):
        pass
    return TITLEBARINFOEX
def _define_TITLEBARINFOEX():
    TITLEBARINFOEX = win32more.UI.WindowsAndMessaging.TITLEBARINFOEX_head
    TITLEBARINFOEX._fields_ = [
        ("cbSize", UInt32),
        ("rcTitleBar", win32more.Foundation.RECT),
        ("rgstate", UInt32 * 6),
        ("rgrect", win32more.Foundation.RECT * 6),
    ]
    return TITLEBARINFOEX
def _define_MENUBARINFO_head():
    class MENUBARINFO(Structure):
        pass
    return MENUBARINFO
def _define_MENUBARINFO():
    MENUBARINFO = win32more.UI.WindowsAndMessaging.MENUBARINFO_head
    MENUBARINFO._fields_ = [
        ("cbSize", UInt32),
        ("rcBar", win32more.Foundation.RECT),
        ("hMenu", win32more.UI.WindowsAndMessaging.HMENU),
        ("hwndMenu", win32more.Foundation.HWND),
        ("_bitfield", Int32),
    ]
    return MENUBARINFO
def _define_SCROLLBARINFO_head():
    class SCROLLBARINFO(Structure):
        pass
    return SCROLLBARINFO
def _define_SCROLLBARINFO():
    SCROLLBARINFO = win32more.UI.WindowsAndMessaging.SCROLLBARINFO_head
    SCROLLBARINFO._fields_ = [
        ("cbSize", UInt32),
        ("rcScrollBar", win32more.Foundation.RECT),
        ("dxyLineButton", Int32),
        ("xyThumbTop", Int32),
        ("xyThumbBottom", Int32),
        ("reserved", Int32),
        ("rgstate", UInt32 * 6),
    ]
    return SCROLLBARINFO
def _define_ALTTABINFO_head():
    class ALTTABINFO(Structure):
        pass
    return ALTTABINFO
def _define_ALTTABINFO():
    ALTTABINFO = win32more.UI.WindowsAndMessaging.ALTTABINFO_head
    ALTTABINFO._fields_ = [
        ("cbSize", UInt32),
        ("cItems", Int32),
        ("cColumns", Int32),
        ("cRows", Int32),
        ("iColFocus", Int32),
        ("iRowFocus", Int32),
        ("cxItem", Int32),
        ("cyItem", Int32),
        ("ptStart", win32more.Foundation.POINT),
    ]
    return ALTTABINFO
def _define_CHANGEFILTERSTRUCT_head():
    class CHANGEFILTERSTRUCT(Structure):
        pass
    return CHANGEFILTERSTRUCT
def _define_CHANGEFILTERSTRUCT():
    CHANGEFILTERSTRUCT = win32more.UI.WindowsAndMessaging.CHANGEFILTERSTRUCT_head
    CHANGEFILTERSTRUCT._fields_ = [
        ("cbSize", UInt32),
        ("ExtStatus", win32more.UI.WindowsAndMessaging.MSGFLTINFO_STATUS),
    ]
    return CHANGEFILTERSTRUCT
def _define_IndexedResourceQualifier_head():
    class IndexedResourceQualifier(Structure):
        pass
    return IndexedResourceQualifier
def _define_IndexedResourceQualifier():
    IndexedResourceQualifier = win32more.UI.WindowsAndMessaging.IndexedResourceQualifier_head
    IndexedResourceQualifier._fields_ = [
        ("name", win32more.Foundation.PWSTR),
        ("value", win32more.Foundation.PWSTR),
    ]
    return IndexedResourceQualifier
MrmPlatformVersion = Int32
MrmPlatformVersion_Default = 0
MrmPlatformVersion_Windows10_0_0_0 = 17432576
MrmPlatformVersion_Windows10_0_0_5 = 17432581
def _define_MrmResourceIndexerHandle_head():
    class MrmResourceIndexerHandle(Structure):
        pass
    return MrmResourceIndexerHandle
def _define_MrmResourceIndexerHandle():
    MrmResourceIndexerHandle = win32more.UI.WindowsAndMessaging.MrmResourceIndexerHandle_head
    MrmResourceIndexerHandle._fields_ = [
        ("handle", c_void_p),
    ]
    return MrmResourceIndexerHandle
MrmPackagingMode = Int32
MrmPackagingMode_MrmPackagingModeStandaloneFile = 0
MrmPackagingMode_MrmPackagingModeAutoSplit = 1
MrmPackagingMode_MrmPackagingModeResourcePack = 2
MrmPackagingOptions = Int32
MrmPackagingOptions_MrmPackagingOptionsNone = 0
MrmPackagingOptions_MrmPackagingOptionsOmitSchemaFromResourcePacks = 1
MrmPackagingOptions_MrmPackagingOptionsSplitLanguageVariants = 2
MrmDumpType = Int32
MrmDumpType_Basic = 0
MrmDumpType_Detailed = 1
MrmDumpType_Schema = 2
MrmResourceIndexerMessageSeverity = Int32
MrmResourceIndexerMessageSeverity_MrmResourceIndexerMessageSeverityVerbose = 0
MrmResourceIndexerMessageSeverity_MrmResourceIndexerMessageSeverityInfo = 1
MrmResourceIndexerMessageSeverity_MrmResourceIndexerMessageSeverityWarning = 2
MrmResourceIndexerMessageSeverity_MrmResourceIndexerMessageSeverityError = 3
MrmIndexerFlags = Int32
MrmIndexerFlags_MrmIndexerFlagsNone = 0
MrmIndexerFlags_MrmIndexerFlagsAutoMerge = 1
MrmIndexerFlags_MrmIndexerFlagsCreateContentChecksum = 2
def _define_MrmResourceIndexerMessage_head():
    class MrmResourceIndexerMessage(Structure):
        pass
    return MrmResourceIndexerMessage
def _define_MrmResourceIndexerMessage():
    MrmResourceIndexerMessage = win32more.UI.WindowsAndMessaging.MrmResourceIndexerMessage_head
    MrmResourceIndexerMessage._fields_ = [
        ("severity", win32more.UI.WindowsAndMessaging.MrmResourceIndexerMessageSeverity),
        ("id", UInt32),
        ("text", win32more.Foundation.PWSTR),
    ]
    return MrmResourceIndexerMessage
def _define_LoadStringA():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.HINSTANCE,UInt32,POINTER(Byte),Int32, use_last_error=True)(("LoadStringA", windll["USER32"]), ((1, 'hInstance'),(1, 'uID'),(1, 'lpBuffer'),(1, 'cchBufferMax'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LoadStringW():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.HINSTANCE,UInt32,POINTER(Char),Int32, use_last_error=True)(("LoadStringW", windll["USER32"]), ((1, 'hInstance'),(1, 'uID'),(1, 'lpBuffer'),(1, 'cchBufferMax'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LoadString():
    return win32more.UI.WindowsAndMessaging.LoadStringW
def _define_wvsprintfA():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(SByte), use_last_error=True)(("wvsprintfA", windll["USER32"]), ((1, 'param0'),(1, 'param1'),(1, 'arglist'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_wvsprintfW():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,POINTER(SByte), use_last_error=True)(("wvsprintfW", windll["USER32"]), ((1, 'param0'),(1, 'param1'),(1, 'arglist'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_wvsprintf():
    return win32more.UI.WindowsAndMessaging.wvsprintfW
def _define_wsprintfA():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR, use_last_error=True)(("wsprintfA", windll["USER32"]), ((1, 'param0'),(1, 'param1'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_wsprintfW():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR, use_last_error=True)(("wsprintfW", windll["USER32"]), ((1, 'param0'),(1, 'param1'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_wsprintf():
    return win32more.UI.WindowsAndMessaging.wsprintfW
def _define_IsHungAppWindow():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND, use_last_error=False)(("IsHungAppWindow", windll["USER32"]), ((1, 'hwnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DisableProcessWindowsGhosting():
    try:
        return WINFUNCTYPE(Void, use_last_error=False)(("DisableProcessWindowsGhosting", windll["USER32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_RegisterWindowMessageA():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.PSTR, use_last_error=True)(("RegisterWindowMessageA", windll["USER32"]), ((1, 'lpString'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_RegisterWindowMessageW():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.PWSTR, use_last_error=True)(("RegisterWindowMessageW", windll["USER32"]), ((1, 'lpString'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_RegisterWindowMessage():
    return win32more.UI.WindowsAndMessaging.RegisterWindowMessageW
def _define_GetMessageA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.UI.WindowsAndMessaging.MSG_head),win32more.Foundation.HWND,UInt32,UInt32, use_last_error=True)(("GetMessageA", windll["USER32"]), ((1, 'lpMsg'),(1, 'hWnd'),(1, 'wMsgFilterMin'),(1, 'wMsgFilterMax'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetMessageW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.UI.WindowsAndMessaging.MSG_head),win32more.Foundation.HWND,UInt32,UInt32, use_last_error=True)(("GetMessageW", windll["USER32"]), ((1, 'lpMsg'),(1, 'hWnd'),(1, 'wMsgFilterMin'),(1, 'wMsgFilterMax'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetMessage():
    return win32more.UI.WindowsAndMessaging.GetMessageW
def _define_TranslateMessage():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.UI.WindowsAndMessaging.MSG_head), use_last_error=False)(("TranslateMessage", windll["USER32"]), ((1, 'lpMsg'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DispatchMessageA():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,POINTER(win32more.UI.WindowsAndMessaging.MSG_head), use_last_error=False)(("DispatchMessageA", windll["USER32"]), ((1, 'lpMsg'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DispatchMessageW():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,POINTER(win32more.UI.WindowsAndMessaging.MSG_head), use_last_error=False)(("DispatchMessageW", windll["USER32"]), ((1, 'lpMsg'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DispatchMessage():
    return win32more.UI.WindowsAndMessaging.DispatchMessageW
def _define_SetMessageQueue():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,Int32, use_last_error=False)(("SetMessageQueue", windll["USER32"]), ((1, 'cMessagesMax'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_PeekMessageA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.UI.WindowsAndMessaging.MSG_head),win32more.Foundation.HWND,UInt32,UInt32,win32more.UI.WindowsAndMessaging.PEEK_MESSAGE_REMOVE_TYPE, use_last_error=False)(("PeekMessageA", windll["USER32"]), ((1, 'lpMsg'),(1, 'hWnd'),(1, 'wMsgFilterMin'),(1, 'wMsgFilterMax'),(1, 'wRemoveMsg'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_PeekMessageW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.UI.WindowsAndMessaging.MSG_head),win32more.Foundation.HWND,UInt32,UInt32,win32more.UI.WindowsAndMessaging.PEEK_MESSAGE_REMOVE_TYPE, use_last_error=False)(("PeekMessageW", windll["USER32"]), ((1, 'lpMsg'),(1, 'hWnd'),(1, 'wMsgFilterMin'),(1, 'wMsgFilterMax'),(1, 'wRemoveMsg'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_PeekMessage():
    return win32more.UI.WindowsAndMessaging.PeekMessageW
def _define_GetMessagePos():
    try:
        return WINFUNCTYPE(UInt32, use_last_error=False)(("GetMessagePos", windll["USER32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetMessageTime():
    try:
        return WINFUNCTYPE(Int32, use_last_error=False)(("GetMessageTime", windll["USER32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetMessageExtraInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.LPARAM, use_last_error=False)(("GetMessageExtraInfo", windll["USER32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsWow64Message():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=False)(("IsWow64Message", windll["USER32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetMessageExtraInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.LPARAM,win32more.Foundation.LPARAM, use_last_error=False)(("SetMessageExtraInfo", windll["USER32"]), ((1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SendMessageA():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,win32more.Foundation.HWND,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM, use_last_error=True)(("SendMessageA", windll["USER32"]), ((1, 'hWnd'),(1, 'Msg'),(1, 'wParam'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SendMessageW():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,win32more.Foundation.HWND,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM, use_last_error=True)(("SendMessageW", windll["USER32"]), ((1, 'hWnd'),(1, 'Msg'),(1, 'wParam'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SendMessage():
    return win32more.UI.WindowsAndMessaging.SendMessageW
def _define_SendMessageTimeoutA():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,win32more.Foundation.HWND,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM,win32more.UI.WindowsAndMessaging.SEND_MESSAGE_TIMEOUT_FLAGS,UInt32,POINTER(UIntPtr), use_last_error=True)(("SendMessageTimeoutA", windll["USER32"]), ((1, 'hWnd'),(1, 'Msg'),(1, 'wParam'),(1, 'lParam'),(1, 'fuFlags'),(1, 'uTimeout'),(1, 'lpdwResult'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SendMessageTimeoutW():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,win32more.Foundation.HWND,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM,win32more.UI.WindowsAndMessaging.SEND_MESSAGE_TIMEOUT_FLAGS,UInt32,POINTER(UIntPtr), use_last_error=True)(("SendMessageTimeoutW", windll["USER32"]), ((1, 'hWnd'),(1, 'Msg'),(1, 'wParam'),(1, 'lParam'),(1, 'fuFlags'),(1, 'uTimeout'),(1, 'lpdwResult'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SendMessageTimeout():
    return win32more.UI.WindowsAndMessaging.SendMessageTimeoutW
def _define_SendNotifyMessageA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM, use_last_error=True)(("SendNotifyMessageA", windll["USER32"]), ((1, 'hWnd'),(1, 'Msg'),(1, 'wParam'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SendNotifyMessageW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM, use_last_error=True)(("SendNotifyMessageW", windll["USER32"]), ((1, 'hWnd'),(1, 'Msg'),(1, 'wParam'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SendNotifyMessage():
    return win32more.UI.WindowsAndMessaging.SendNotifyMessageW
def _define_SendMessageCallbackA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM,win32more.UI.WindowsAndMessaging.SENDASYNCPROC,UIntPtr, use_last_error=True)(("SendMessageCallbackA", windll["USER32"]), ((1, 'hWnd'),(1, 'Msg'),(1, 'wParam'),(1, 'lParam'),(1, 'lpResultCallBack'),(1, 'dwData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SendMessageCallbackW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM,win32more.UI.WindowsAndMessaging.SENDASYNCPROC,UIntPtr, use_last_error=True)(("SendMessageCallbackW", windll["USER32"]), ((1, 'hWnd'),(1, 'Msg'),(1, 'wParam'),(1, 'lParam'),(1, 'lpResultCallBack'),(1, 'dwData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SendMessageCallback():
    return win32more.UI.WindowsAndMessaging.SendMessageCallbackW
def _define_RegisterDeviceNotificationA():
    try:
        return WINFUNCTYPE(c_void_p,win32more.Foundation.HANDLE,c_void_p,win32more.System.Power.POWER_SETTING_REGISTER_NOTIFICATION_FLAGS, use_last_error=True)(("RegisterDeviceNotificationA", windll["USER32"]), ((1, 'hRecipient'),(1, 'NotificationFilter'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_RegisterDeviceNotificationW():
    try:
        return WINFUNCTYPE(c_void_p,win32more.Foundation.HANDLE,c_void_p,win32more.System.Power.POWER_SETTING_REGISTER_NOTIFICATION_FLAGS, use_last_error=True)(("RegisterDeviceNotificationW", windll["USER32"]), ((1, 'hRecipient'),(1, 'NotificationFilter'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_RegisterDeviceNotification():
    return win32more.UI.WindowsAndMessaging.RegisterDeviceNotificationW
def _define_PostMessageA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM, use_last_error=True)(("PostMessageA", windll["USER32"]), ((1, 'hWnd'),(1, 'Msg'),(1, 'wParam'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_PostMessageW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM, use_last_error=True)(("PostMessageW", windll["USER32"]), ((1, 'hWnd'),(1, 'Msg'),(1, 'wParam'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_PostMessage():
    return win32more.UI.WindowsAndMessaging.PostMessageW
def _define_PostThreadMessageA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM, use_last_error=True)(("PostThreadMessageA", windll["USER32"]), ((1, 'idThread'),(1, 'Msg'),(1, 'wParam'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_PostThreadMessageW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM, use_last_error=True)(("PostThreadMessageW", windll["USER32"]), ((1, 'idThread'),(1, 'Msg'),(1, 'wParam'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_PostThreadMessage():
    return win32more.UI.WindowsAndMessaging.PostThreadMessageW
def _define_ReplyMessage():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.LRESULT, use_last_error=False)(("ReplyMessage", windll["USER32"]), ((1, 'lResult'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_WaitMessage():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=True)(("WaitMessage", windll["USER32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_DefWindowProcA():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,win32more.Foundation.HWND,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM, use_last_error=False)(("DefWindowProcA", windll["USER32"]), ((1, 'hWnd'),(1, 'Msg'),(1, 'wParam'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DefWindowProcW():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,win32more.Foundation.HWND,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM, use_last_error=False)(("DefWindowProcW", windll["USER32"]), ((1, 'hWnd'),(1, 'Msg'),(1, 'wParam'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DefWindowProc():
    return win32more.UI.WindowsAndMessaging.DefWindowProcW
def _define_PostQuitMessage():
    try:
        return WINFUNCTYPE(Void,Int32, use_last_error=False)(("PostQuitMessage", windll["USER32"]), ((1, 'nExitCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CallWindowProcA():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,win32more.UI.WindowsAndMessaging.WNDPROC,win32more.Foundation.HWND,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM, use_last_error=False)(("CallWindowProcA", windll["USER32"]), ((1, 'lpPrevWndFunc'),(1, 'hWnd'),(1, 'Msg'),(1, 'wParam'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CallWindowProcW():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,win32more.UI.WindowsAndMessaging.WNDPROC,win32more.Foundation.HWND,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM, use_last_error=False)(("CallWindowProcW", windll["USER32"]), ((1, 'lpPrevWndFunc'),(1, 'hWnd'),(1, 'Msg'),(1, 'wParam'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CallWindowProc():
    return win32more.UI.WindowsAndMessaging.CallWindowProcW
def _define_InSendMessage():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=False)(("InSendMessage", windll["USER32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_InSendMessageEx():
    try:
        return WINFUNCTYPE(UInt32,c_void_p, use_last_error=False)(("InSendMessageEx", windll["USER32"]), ((1, 'lpReserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_RegisterClassA():
    try:
        return WINFUNCTYPE(UInt16,POINTER(win32more.UI.WindowsAndMessaging.WNDCLASSA_head), use_last_error=True)(("RegisterClassA", windll["USER32"]), ((1, 'lpWndClass'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_RegisterClassW():
    try:
        return WINFUNCTYPE(UInt16,POINTER(win32more.UI.WindowsAndMessaging.WNDCLASSW_head), use_last_error=True)(("RegisterClassW", windll["USER32"]), ((1, 'lpWndClass'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_RegisterClass():
    return win32more.UI.WindowsAndMessaging.RegisterClassW
def _define_UnregisterClassA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,win32more.Foundation.HINSTANCE, use_last_error=True)(("UnregisterClassA", windll["USER32"]), ((1, 'lpClassName'),(1, 'hInstance'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_UnregisterClassW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,win32more.Foundation.HINSTANCE, use_last_error=True)(("UnregisterClassW", windll["USER32"]), ((1, 'lpClassName'),(1, 'hInstance'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_UnregisterClass():
    return win32more.UI.WindowsAndMessaging.UnregisterClassW
def _define_GetClassInfoA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HINSTANCE,win32more.Foundation.PSTR,POINTER(win32more.UI.WindowsAndMessaging.WNDCLASSA_head), use_last_error=True)(("GetClassInfoA", windll["USER32"]), ((1, 'hInstance'),(1, 'lpClassName'),(1, 'lpWndClass'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetClassInfoW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HINSTANCE,win32more.Foundation.PWSTR,POINTER(win32more.UI.WindowsAndMessaging.WNDCLASSW_head), use_last_error=True)(("GetClassInfoW", windll["USER32"]), ((1, 'hInstance'),(1, 'lpClassName'),(1, 'lpWndClass'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetClassInfo():
    return win32more.UI.WindowsAndMessaging.GetClassInfoW
def _define_RegisterClassExA():
    try:
        return WINFUNCTYPE(UInt16,POINTER(win32more.UI.WindowsAndMessaging.WNDCLASSEXA_head), use_last_error=True)(("RegisterClassExA", windll["USER32"]), ((1, 'param0'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_RegisterClassExW():
    try:
        return WINFUNCTYPE(UInt16,POINTER(win32more.UI.WindowsAndMessaging.WNDCLASSEXW_head), use_last_error=True)(("RegisterClassExW", windll["USER32"]), ((1, 'param0'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_RegisterClassEx():
    return win32more.UI.WindowsAndMessaging.RegisterClassExW
def _define_GetClassInfoExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HINSTANCE,win32more.Foundation.PSTR,POINTER(win32more.UI.WindowsAndMessaging.WNDCLASSEXA_head), use_last_error=True)(("GetClassInfoExA", windll["USER32"]), ((1, 'hInstance'),(1, 'lpszClass'),(1, 'lpwcx'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetClassInfoExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HINSTANCE,win32more.Foundation.PWSTR,POINTER(win32more.UI.WindowsAndMessaging.WNDCLASSEXW_head), use_last_error=True)(("GetClassInfoExW", windll["USER32"]), ((1, 'hInstance'),(1, 'lpszClass'),(1, 'lpwcx'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetClassInfoEx():
    return win32more.UI.WindowsAndMessaging.GetClassInfoExW
def _define_CreateWindowExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.WINDOW_EX_STYLE,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.UI.WindowsAndMessaging.WINDOW_STYLE,Int32,Int32,Int32,Int32,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.HMENU,win32more.Foundation.HINSTANCE,c_void_p, use_last_error=True)(("CreateWindowExA", windll["USER32"]), ((1, 'dwExStyle'),(1, 'lpClassName'),(1, 'lpWindowName'),(1, 'dwStyle'),(1, 'X'),(1, 'Y'),(1, 'nWidth'),(1, 'nHeight'),(1, 'hWndParent'),(1, 'hMenu'),(1, 'hInstance'),(1, 'lpParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CreateWindowExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.WINDOW_EX_STYLE,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.UI.WindowsAndMessaging.WINDOW_STYLE,Int32,Int32,Int32,Int32,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.HMENU,win32more.Foundation.HINSTANCE,c_void_p, use_last_error=True)(("CreateWindowExW", windll["USER32"]), ((1, 'dwExStyle'),(1, 'lpClassName'),(1, 'lpWindowName'),(1, 'dwStyle'),(1, 'X'),(1, 'Y'),(1, 'nWidth'),(1, 'nHeight'),(1, 'hWndParent'),(1, 'hMenu'),(1, 'hInstance'),(1, 'lpParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CreateWindowEx():
    return win32more.UI.WindowsAndMessaging.CreateWindowExW
def _define_IsWindow():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND, use_last_error=False)(("IsWindow", windll["USER32"]), ((1, 'hWnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsMenu():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU, use_last_error=False)(("IsMenu", windll["USER32"]), ((1, 'hMenu'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsChild():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.HWND, use_last_error=False)(("IsChild", windll["USER32"]), ((1, 'hWndParent'),(1, 'hWnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DestroyWindow():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND, use_last_error=True)(("DestroyWindow", windll["USER32"]), ((1, 'hWnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ShowWindow():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.SHOW_WINDOW_CMD, use_last_error=False)(("ShowWindow", windll["USER32"]), ((1, 'hWnd'),(1, 'nCmdShow'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AnimateWindow():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,UInt32,win32more.UI.WindowsAndMessaging.ANIMATE_WINDOW_FLAGS, use_last_error=True)(("AnimateWindow", windll["USER32"]), ((1, 'hWnd'),(1, 'dwTime'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_UpdateLayeredWindow():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Graphics.Gdi.HDC,POINTER(win32more.Foundation.POINT_head),POINTER(win32more.Foundation.SIZE_head),win32more.Graphics.Gdi.HDC,POINTER(win32more.Foundation.POINT_head),UInt32,POINTER(win32more.Graphics.Gdi.BLENDFUNCTION_head),win32more.UI.WindowsAndMessaging.UPDATE_LAYERED_WINDOW_FLAGS, use_last_error=True)(("UpdateLayeredWindow", windll["USER32"]), ((1, 'hWnd'),(1, 'hdcDst'),(1, 'pptDst'),(1, 'psize'),(1, 'hdcSrc'),(1, 'pptSrc'),(1, 'crKey'),(1, 'pblend'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_UpdateLayeredWindowIndirect():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,POINTER(win32more.UI.WindowsAndMessaging.UPDATELAYEREDWINDOWINFO_head), use_last_error=False)(("UpdateLayeredWindowIndirect", windll["USER32"]), ((1, 'hWnd'),(1, 'pULWInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetLayeredWindowAttributes():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,POINTER(UInt32),c_char_p_no,POINTER(win32more.UI.WindowsAndMessaging.LAYERED_WINDOW_ATTRIBUTES_FLAGS), use_last_error=True)(("GetLayeredWindowAttributes", windll["USER32"]), ((1, 'hwnd'),(1, 'pcrKey'),(1, 'pbAlpha'),(1, 'pdwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetLayeredWindowAttributes():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,UInt32,Byte,win32more.UI.WindowsAndMessaging.LAYERED_WINDOW_ATTRIBUTES_FLAGS, use_last_error=True)(("SetLayeredWindowAttributes", windll["USER32"]), ((1, 'hwnd'),(1, 'crKey'),(1, 'bAlpha'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ShowWindowAsync():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.SHOW_WINDOW_CMD, use_last_error=False)(("ShowWindowAsync", windll["USER32"]), ((1, 'hWnd'),(1, 'nCmdShow'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FlashWindow():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.BOOL, use_last_error=False)(("FlashWindow", windll["USER32"]), ((1, 'hWnd'),(1, 'bInvert'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FlashWindowEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.UI.WindowsAndMessaging.FLASHWINFO_head), use_last_error=False)(("FlashWindowEx", windll["USER32"]), ((1, 'pfwi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ShowOwnedPopups():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.BOOL, use_last_error=True)(("ShowOwnedPopups", windll["USER32"]), ((1, 'hWnd'),(1, 'fShow'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_OpenIcon():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND, use_last_error=True)(("OpenIcon", windll["USER32"]), ((1, 'hWnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CloseWindow():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND, use_last_error=True)(("CloseWindow", windll["USER32"]), ((1, 'hWnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MoveWindow():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,Int32,Int32,Int32,Int32,win32more.Foundation.BOOL, use_last_error=True)(("MoveWindow", windll["USER32"]), ((1, 'hWnd'),(1, 'X'),(1, 'Y'),(1, 'nWidth'),(1, 'nHeight'),(1, 'bRepaint'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetWindowPos():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.HWND,Int32,Int32,Int32,Int32,win32more.UI.WindowsAndMessaging.SET_WINDOW_POS_FLAGS, use_last_error=True)(("SetWindowPos", windll["USER32"]), ((1, 'hWnd'),(1, 'hWndInsertAfter'),(1, 'X'),(1, 'Y'),(1, 'cx'),(1, 'cy'),(1, 'uFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetWindowPlacement():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,POINTER(win32more.UI.WindowsAndMessaging.WINDOWPLACEMENT_head), use_last_error=True)(("GetWindowPlacement", windll["USER32"]), ((1, 'hWnd'),(1, 'lpwndpl'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetWindowPlacement():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,POINTER(win32more.UI.WindowsAndMessaging.WINDOWPLACEMENT_head), use_last_error=True)(("SetWindowPlacement", windll["USER32"]), ((1, 'hWnd'),(1, 'lpwndpl'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetWindowDisplayAffinity():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,POINTER(UInt32), use_last_error=True)(("GetWindowDisplayAffinity", windll["USER32"]), ((1, 'hWnd'),(1, 'pdwAffinity'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetWindowDisplayAffinity():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.WINDOW_DISPLAY_AFFINITY, use_last_error=True)(("SetWindowDisplayAffinity", windll["USER32"]), ((1, 'hWnd'),(1, 'dwAffinity'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BeginDeferWindowPos():
    try:
        return WINFUNCTYPE(IntPtr,Int32, use_last_error=True)(("BeginDeferWindowPos", windll["USER32"]), ((1, 'nNumWindows'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DeferWindowPos():
    try:
        return WINFUNCTYPE(IntPtr,IntPtr,win32more.Foundation.HWND,win32more.Foundation.HWND,Int32,Int32,Int32,Int32,win32more.UI.WindowsAndMessaging.SET_WINDOW_POS_FLAGS, use_last_error=True)(("DeferWindowPos", windll["USER32"]), ((1, 'hWinPosInfo'),(1, 'hWnd'),(1, 'hWndInsertAfter'),(1, 'x'),(1, 'y'),(1, 'cx'),(1, 'cy'),(1, 'uFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EndDeferWindowPos():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,IntPtr, use_last_error=True)(("EndDeferWindowPos", windll["USER32"]), ((1, 'hWinPosInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsWindowVisible():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND, use_last_error=False)(("IsWindowVisible", windll["USER32"]), ((1, 'hWnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsIconic():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND, use_last_error=False)(("IsIconic", windll["USER32"]), ((1, 'hWnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AnyPopup():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=False)(("AnyPopup", windll["USER32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_BringWindowToTop():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND, use_last_error=True)(("BringWindowToTop", windll["USER32"]), ((1, 'hWnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsZoomed():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND, use_last_error=False)(("IsZoomed", windll["USER32"]), ((1, 'hWnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CreateDialogParamA():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.HINSTANCE,win32more.Foundation.PSTR,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.DLGPROC,win32more.Foundation.LPARAM, use_last_error=True)(("CreateDialogParamA", windll["USER32"]), ((1, 'hInstance'),(1, 'lpTemplateName'),(1, 'hWndParent'),(1, 'lpDialogFunc'),(1, 'dwInitParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CreateDialogParamW():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.HINSTANCE,win32more.Foundation.PWSTR,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.DLGPROC,win32more.Foundation.LPARAM, use_last_error=True)(("CreateDialogParamW", windll["USER32"]), ((1, 'hInstance'),(1, 'lpTemplateName'),(1, 'hWndParent'),(1, 'lpDialogFunc'),(1, 'dwInitParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CreateDialogParam():
    return win32more.UI.WindowsAndMessaging.CreateDialogParamW
def _define_CreateDialogIndirectParamA():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.HINSTANCE,POINTER(win32more.UI.WindowsAndMessaging.DLGTEMPLATE_head),win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.DLGPROC,win32more.Foundation.LPARAM, use_last_error=True)(("CreateDialogIndirectParamA", windll["USER32"]), ((1, 'hInstance'),(1, 'lpTemplate'),(1, 'hWndParent'),(1, 'lpDialogFunc'),(1, 'dwInitParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CreateDialogIndirectParamW():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.HINSTANCE,POINTER(win32more.UI.WindowsAndMessaging.DLGTEMPLATE_head),win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.DLGPROC,win32more.Foundation.LPARAM, use_last_error=True)(("CreateDialogIndirectParamW", windll["USER32"]), ((1, 'hInstance'),(1, 'lpTemplate'),(1, 'hWndParent'),(1, 'lpDialogFunc'),(1, 'dwInitParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CreateDialogIndirectParam():
    return win32more.UI.WindowsAndMessaging.CreateDialogIndirectParamW
def _define_DialogBoxParamA():
    try:
        return WINFUNCTYPE(IntPtr,win32more.Foundation.HINSTANCE,win32more.Foundation.PSTR,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.DLGPROC,win32more.Foundation.LPARAM, use_last_error=True)(("DialogBoxParamA", windll["USER32"]), ((1, 'hInstance'),(1, 'lpTemplateName'),(1, 'hWndParent'),(1, 'lpDialogFunc'),(1, 'dwInitParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DialogBoxParamW():
    try:
        return WINFUNCTYPE(IntPtr,win32more.Foundation.HINSTANCE,win32more.Foundation.PWSTR,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.DLGPROC,win32more.Foundation.LPARAM, use_last_error=True)(("DialogBoxParamW", windll["USER32"]), ((1, 'hInstance'),(1, 'lpTemplateName'),(1, 'hWndParent'),(1, 'lpDialogFunc'),(1, 'dwInitParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DialogBoxParam():
    return win32more.UI.WindowsAndMessaging.DialogBoxParamW
def _define_DialogBoxIndirectParamA():
    try:
        return WINFUNCTYPE(IntPtr,win32more.Foundation.HINSTANCE,POINTER(win32more.UI.WindowsAndMessaging.DLGTEMPLATE_head),win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.DLGPROC,win32more.Foundation.LPARAM, use_last_error=True)(("DialogBoxIndirectParamA", windll["USER32"]), ((1, 'hInstance'),(1, 'hDialogTemplate'),(1, 'hWndParent'),(1, 'lpDialogFunc'),(1, 'dwInitParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DialogBoxIndirectParamW():
    try:
        return WINFUNCTYPE(IntPtr,win32more.Foundation.HINSTANCE,POINTER(win32more.UI.WindowsAndMessaging.DLGTEMPLATE_head),win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.DLGPROC,win32more.Foundation.LPARAM, use_last_error=True)(("DialogBoxIndirectParamW", windll["USER32"]), ((1, 'hInstance'),(1, 'hDialogTemplate'),(1, 'hWndParent'),(1, 'lpDialogFunc'),(1, 'dwInitParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DialogBoxIndirectParam():
    return win32more.UI.WindowsAndMessaging.DialogBoxIndirectParamW
def _define_EndDialog():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,IntPtr, use_last_error=True)(("EndDialog", windll["USER32"]), ((1, 'hDlg'),(1, 'nResult'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetDlgItem():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.HWND,Int32, use_last_error=True)(("GetDlgItem", windll["USER32"]), ((1, 'hDlg'),(1, 'nIDDlgItem'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetDlgItemInt():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,Int32,UInt32,win32more.Foundation.BOOL, use_last_error=True)(("SetDlgItemInt", windll["USER32"]), ((1, 'hDlg'),(1, 'nIDDlgItem'),(1, 'uValue'),(1, 'bSigned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetDlgItemInt():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,Int32,POINTER(win32more.Foundation.BOOL),win32more.Foundation.BOOL, use_last_error=True)(("GetDlgItemInt", windll["USER32"]), ((1, 'hDlg'),(1, 'nIDDlgItem'),(1, 'lpTranslated'),(1, 'bSigned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetDlgItemTextA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,Int32,win32more.Foundation.PSTR, use_last_error=True)(("SetDlgItemTextA", windll["USER32"]), ((1, 'hDlg'),(1, 'nIDDlgItem'),(1, 'lpString'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetDlgItemTextW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,Int32,win32more.Foundation.PWSTR, use_last_error=True)(("SetDlgItemTextW", windll["USER32"]), ((1, 'hDlg'),(1, 'nIDDlgItem'),(1, 'lpString'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetDlgItemText():
    return win32more.UI.WindowsAndMessaging.SetDlgItemTextW
def _define_GetDlgItemTextA():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,Int32,POINTER(Byte),Int32, use_last_error=True)(("GetDlgItemTextA", windll["USER32"]), ((1, 'hDlg'),(1, 'nIDDlgItem'),(1, 'lpString'),(1, 'cchMax'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetDlgItemTextW():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,Int32,POINTER(Char),Int32, use_last_error=True)(("GetDlgItemTextW", windll["USER32"]), ((1, 'hDlg'),(1, 'nIDDlgItem'),(1, 'lpString'),(1, 'cchMax'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetDlgItemText():
    return win32more.UI.WindowsAndMessaging.GetDlgItemTextW
def _define_SendDlgItemMessageA():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,win32more.Foundation.HWND,Int32,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM, use_last_error=False)(("SendDlgItemMessageA", windll["USER32"]), ((1, 'hDlg'),(1, 'nIDDlgItem'),(1, 'Msg'),(1, 'wParam'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SendDlgItemMessageW():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,win32more.Foundation.HWND,Int32,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM, use_last_error=False)(("SendDlgItemMessageW", windll["USER32"]), ((1, 'hDlg'),(1, 'nIDDlgItem'),(1, 'Msg'),(1, 'wParam'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SendDlgItemMessage():
    return win32more.UI.WindowsAndMessaging.SendDlgItemMessageW
def _define_GetNextDlgGroupItem():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.HWND,win32more.Foundation.HWND,win32more.Foundation.BOOL, use_last_error=True)(("GetNextDlgGroupItem", windll["USER32"]), ((1, 'hDlg'),(1, 'hCtl'),(1, 'bPrevious'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetNextDlgTabItem():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.HWND,win32more.Foundation.HWND,win32more.Foundation.BOOL, use_last_error=True)(("GetNextDlgTabItem", windll["USER32"]), ((1, 'hDlg'),(1, 'hCtl'),(1, 'bPrevious'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetDlgCtrlID():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.HWND, use_last_error=True)(("GetDlgCtrlID", windll["USER32"]), ((1, 'hWnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetDialogBaseUnits():
    try:
        return WINFUNCTYPE(Int32, use_last_error=False)(("GetDialogBaseUnits", windll["USER32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_DefDlgProcA():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,win32more.Foundation.HWND,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM, use_last_error=False)(("DefDlgProcA", windll["USER32"]), ((1, 'hDlg'),(1, 'Msg'),(1, 'wParam'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DefDlgProcW():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,win32more.Foundation.HWND,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM, use_last_error=False)(("DefDlgProcW", windll["USER32"]), ((1, 'hDlg'),(1, 'Msg'),(1, 'wParam'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DefDlgProc():
    return win32more.UI.WindowsAndMessaging.DefDlgProcW
def _define_CallMsgFilterA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.UI.WindowsAndMessaging.MSG_head),Int32, use_last_error=False)(("CallMsgFilterA", windll["USER32"]), ((1, 'lpMsg'),(1, 'nCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CallMsgFilterW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.UI.WindowsAndMessaging.MSG_head),Int32, use_last_error=False)(("CallMsgFilterW", windll["USER32"]), ((1, 'lpMsg'),(1, 'nCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CallMsgFilter():
    return win32more.UI.WindowsAndMessaging.CallMsgFilterW
def _define_CharToOemA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,win32more.Foundation.PSTR, use_last_error=True)(("CharToOemA", windll["USER32"]), ((1, 'pSrc'),(1, 'pDst'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CharToOemW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,win32more.Foundation.PSTR, use_last_error=True)(("CharToOemW", windll["USER32"]), ((1, 'pSrc'),(1, 'pDst'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CharToOem():
    return win32more.UI.WindowsAndMessaging.CharToOemW
def _define_OemToCharA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,win32more.Foundation.PSTR, use_last_error=True)(("OemToCharA", windll["USER32"]), ((1, 'pSrc'),(1, 'pDst'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_OemToCharW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,win32more.Foundation.PWSTR, use_last_error=True)(("OemToCharW", windll["USER32"]), ((1, 'pSrc'),(1, 'pDst'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_OemToChar():
    return win32more.UI.WindowsAndMessaging.OemToCharW
def _define_CharToOemBuffA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,POINTER(Byte),UInt32, use_last_error=True)(("CharToOemBuffA", windll["USER32"]), ((1, 'lpszSrc'),(1, 'lpszDst'),(1, 'cchDstLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CharToOemBuffW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,POINTER(Byte),UInt32, use_last_error=True)(("CharToOemBuffW", windll["USER32"]), ((1, 'lpszSrc'),(1, 'lpszDst'),(1, 'cchDstLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CharToOemBuff():
    return win32more.UI.WindowsAndMessaging.CharToOemBuffW
def _define_OemToCharBuffA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,POINTER(Byte),UInt32, use_last_error=True)(("OemToCharBuffA", windll["USER32"]), ((1, 'lpszSrc'),(1, 'lpszDst'),(1, 'cchDstLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_OemToCharBuffW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,POINTER(Char),UInt32, use_last_error=True)(("OemToCharBuffW", windll["USER32"]), ((1, 'lpszSrc'),(1, 'lpszDst'),(1, 'cchDstLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_OemToCharBuff():
    return win32more.UI.WindowsAndMessaging.OemToCharBuffW
def _define_CharUpperA():
    try:
        return WINFUNCTYPE(win32more.Foundation.PSTR,win32more.Foundation.PSTR, use_last_error=True)(("CharUpperA", windll["USER32"]), ((1, 'lpsz'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CharUpperW():
    try:
        return WINFUNCTYPE(win32more.Foundation.PWSTR,win32more.Foundation.PWSTR, use_last_error=True)(("CharUpperW", windll["USER32"]), ((1, 'lpsz'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CharUpper():
    return win32more.UI.WindowsAndMessaging.CharUpperW
def _define_CharUpperBuffA():
    try:
        return WINFUNCTYPE(UInt32,POINTER(Byte),UInt32, use_last_error=False)(("CharUpperBuffA", windll["USER32"]), ((1, 'lpsz'),(1, 'cchLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CharUpperBuffW():
    try:
        return WINFUNCTYPE(UInt32,POINTER(Char),UInt32, use_last_error=False)(("CharUpperBuffW", windll["USER32"]), ((1, 'lpsz'),(1, 'cchLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CharUpperBuff():
    return win32more.UI.WindowsAndMessaging.CharUpperBuffW
def _define_CharLowerA():
    try:
        return WINFUNCTYPE(win32more.Foundation.PSTR,win32more.Foundation.PSTR, use_last_error=True)(("CharLowerA", windll["USER32"]), ((1, 'lpsz'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CharLowerW():
    try:
        return WINFUNCTYPE(win32more.Foundation.PWSTR,win32more.Foundation.PWSTR, use_last_error=True)(("CharLowerW", windll["USER32"]), ((1, 'lpsz'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CharLower():
    return win32more.UI.WindowsAndMessaging.CharLowerW
def _define_CharLowerBuffA():
    try:
        return WINFUNCTYPE(UInt32,POINTER(Byte),UInt32, use_last_error=False)(("CharLowerBuffA", windll["USER32"]), ((1, 'lpsz'),(1, 'cchLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CharLowerBuffW():
    try:
        return WINFUNCTYPE(UInt32,POINTER(Char),UInt32, use_last_error=False)(("CharLowerBuffW", windll["USER32"]), ((1, 'lpsz'),(1, 'cchLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CharLowerBuff():
    return win32more.UI.WindowsAndMessaging.CharLowerBuffW
def _define_CharNextA():
    try:
        return WINFUNCTYPE(win32more.Foundation.PSTR,win32more.Foundation.PSTR, use_last_error=False)(("CharNextA", windll["USER32"]), ((1, 'lpsz'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CharNextW():
    try:
        return WINFUNCTYPE(win32more.Foundation.PWSTR,win32more.Foundation.PWSTR, use_last_error=False)(("CharNextW", windll["USER32"]), ((1, 'lpsz'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CharNext():
    return win32more.UI.WindowsAndMessaging.CharNextW
def _define_CharPrevA():
    try:
        return WINFUNCTYPE(win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR, use_last_error=False)(("CharPrevA", windll["USER32"]), ((1, 'lpszStart'),(1, 'lpszCurrent'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CharPrevW():
    try:
        return WINFUNCTYPE(win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR, use_last_error=False)(("CharPrevW", windll["USER32"]), ((1, 'lpszStart'),(1, 'lpszCurrent'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CharPrev():
    return win32more.UI.WindowsAndMessaging.CharPrevW
def _define_CharNextExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.PSTR,UInt16,win32more.Foundation.PSTR,UInt32, use_last_error=False)(("CharNextExA", windll["USER32"]), ((1, 'CodePage'),(1, 'lpCurrentChar'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CharPrevExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.PSTR,UInt16,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32, use_last_error=False)(("CharPrevExA", windll["USER32"]), ((1, 'CodePage'),(1, 'lpStart'),(1, 'lpCurrentChar'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsCharAlphaA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.CHAR, use_last_error=True)(("IsCharAlphaA", windll["USER32"]), ((1, 'ch'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsCharAlphaW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,Char, use_last_error=True)(("IsCharAlphaW", windll["USER32"]), ((1, 'ch'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsCharAlpha():
    return win32more.UI.WindowsAndMessaging.IsCharAlphaW
def _define_IsCharAlphaNumericA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.CHAR, use_last_error=True)(("IsCharAlphaNumericA", windll["USER32"]), ((1, 'ch'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsCharAlphaNumericW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,Char, use_last_error=True)(("IsCharAlphaNumericW", windll["USER32"]), ((1, 'ch'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsCharAlphaNumeric():
    return win32more.UI.WindowsAndMessaging.IsCharAlphaNumericW
def _define_IsCharUpperA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.CHAR, use_last_error=True)(("IsCharUpperA", windll["USER32"]), ((1, 'ch'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsCharUpperW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,Char, use_last_error=True)(("IsCharUpperW", windll["USER32"]), ((1, 'ch'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsCharUpper():
    return win32more.UI.WindowsAndMessaging.IsCharUpperW
def _define_IsCharLowerA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.CHAR, use_last_error=True)(("IsCharLowerA", windll["USER32"]), ((1, 'ch'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetInputState():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=False)(("GetInputState", windll["USER32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetQueueStatus():
    try:
        return WINFUNCTYPE(UInt32,win32more.UI.WindowsAndMessaging.QUEUE_STATUS_FLAGS, use_last_error=False)(("GetQueueStatus", windll["USER32"]), ((1, 'flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MsgWaitForMultipleObjects():
    try:
        return WINFUNCTYPE(UInt32,UInt32,POINTER(win32more.Foundation.HANDLE),win32more.Foundation.BOOL,UInt32,win32more.UI.WindowsAndMessaging.QUEUE_STATUS_FLAGS, use_last_error=True)(("MsgWaitForMultipleObjects", windll["USER32"]), ((1, 'nCount'),(1, 'pHandles'),(1, 'fWaitAll'),(1, 'dwMilliseconds'),(1, 'dwWakeMask'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MsgWaitForMultipleObjectsEx():
    try:
        return WINFUNCTYPE(UInt32,UInt32,POINTER(win32more.Foundation.HANDLE),UInt32,win32more.UI.WindowsAndMessaging.QUEUE_STATUS_FLAGS,win32more.UI.WindowsAndMessaging.MSG_WAIT_FOR_MULTIPLE_OBJECTS_EX_FLAGS, use_last_error=True)(("MsgWaitForMultipleObjectsEx", windll["USER32"]), ((1, 'nCount'),(1, 'pHandles'),(1, 'dwMilliseconds'),(1, 'dwWakeMask'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetTimer():
    try:
        return WINFUNCTYPE(UIntPtr,win32more.Foundation.HWND,UIntPtr,UInt32,win32more.UI.WindowsAndMessaging.TIMERPROC, use_last_error=True)(("SetTimer", windll["USER32"]), ((1, 'hWnd'),(1, 'nIDEvent'),(1, 'uElapse'),(1, 'lpTimerFunc'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetCoalescableTimer():
    try:
        return WINFUNCTYPE(UIntPtr,win32more.Foundation.HWND,UIntPtr,UInt32,win32more.UI.WindowsAndMessaging.TIMERPROC,UInt32, use_last_error=True)(("SetCoalescableTimer", windll["USER32"]), ((1, 'hWnd'),(1, 'nIDEvent'),(1, 'uElapse'),(1, 'lpTimerFunc'),(1, 'uToleranceDelay'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_KillTimer():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,UIntPtr, use_last_error=True)(("KillTimer", windll["USER32"]), ((1, 'hWnd'),(1, 'uIDEvent'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsWindowUnicode():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND, use_last_error=False)(("IsWindowUnicode", windll["USER32"]), ((1, 'hWnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LoadAcceleratorsA():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HACCEL,win32more.Foundation.HINSTANCE,win32more.Foundation.PSTR, use_last_error=True)(("LoadAcceleratorsA", windll["USER32"]), ((1, 'hInstance'),(1, 'lpTableName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LoadAcceleratorsW():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HACCEL,win32more.Foundation.HINSTANCE,win32more.Foundation.PWSTR, use_last_error=True)(("LoadAcceleratorsW", windll["USER32"]), ((1, 'hInstance'),(1, 'lpTableName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LoadAccelerators():
    return win32more.UI.WindowsAndMessaging.LoadAcceleratorsW
def _define_CreateAcceleratorTableA():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HACCEL,POINTER(win32more.UI.WindowsAndMessaging.ACCEL),Int32, use_last_error=True)(("CreateAcceleratorTableA", windll["USER32"]), ((1, 'paccel'),(1, 'cAccel'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CreateAcceleratorTableW():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HACCEL,POINTER(win32more.UI.WindowsAndMessaging.ACCEL),Int32, use_last_error=True)(("CreateAcceleratorTableW", windll["USER32"]), ((1, 'paccel'),(1, 'cAccel'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CreateAcceleratorTable():
    return win32more.UI.WindowsAndMessaging.CreateAcceleratorTableW
def _define_DestroyAcceleratorTable():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HACCEL, use_last_error=False)(("DestroyAcceleratorTable", windll["USER32"]), ((1, 'hAccel'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CopyAcceleratorTableA():
    try:
        return WINFUNCTYPE(Int32,win32more.UI.WindowsAndMessaging.HACCEL,POINTER(win32more.UI.WindowsAndMessaging.ACCEL),Int32, use_last_error=False)(("CopyAcceleratorTableA", windll["USER32"]), ((1, 'hAccelSrc'),(1, 'lpAccelDst'),(1, 'cAccelEntries'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CopyAcceleratorTableW():
    try:
        return WINFUNCTYPE(Int32,win32more.UI.WindowsAndMessaging.HACCEL,POINTER(win32more.UI.WindowsAndMessaging.ACCEL),Int32, use_last_error=False)(("CopyAcceleratorTableW", windll["USER32"]), ((1, 'hAccelSrc'),(1, 'lpAccelDst'),(1, 'cAccelEntries'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CopyAcceleratorTable():
    return win32more.UI.WindowsAndMessaging.CopyAcceleratorTableW
def _define_TranslateAcceleratorA():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.HACCEL,POINTER(win32more.UI.WindowsAndMessaging.MSG_head), use_last_error=True)(("TranslateAcceleratorA", windll["USER32"]), ((1, 'hWnd'),(1, 'hAccTable'),(1, 'lpMsg'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_TranslateAcceleratorW():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.HACCEL,POINTER(win32more.UI.WindowsAndMessaging.MSG_head), use_last_error=True)(("TranslateAcceleratorW", windll["USER32"]), ((1, 'hWnd'),(1, 'hAccTable'),(1, 'lpMsg'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_TranslateAccelerator():
    return win32more.UI.WindowsAndMessaging.TranslateAcceleratorW
def _define_GetSystemMetrics():
    try:
        return WINFUNCTYPE(Int32,win32more.UI.WindowsAndMessaging.SYSTEM_METRICS_INDEX, use_last_error=True)(("GetSystemMetrics", windll["USER32"]), ((1, 'nIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LoadMenuA():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HMENU,win32more.Foundation.HINSTANCE,win32more.Foundation.PSTR, use_last_error=True)(("LoadMenuA", windll["USER32"]), ((1, 'hInstance'),(1, 'lpMenuName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LoadMenuW():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HMENU,win32more.Foundation.HINSTANCE,win32more.Foundation.PWSTR, use_last_error=True)(("LoadMenuW", windll["USER32"]), ((1, 'hInstance'),(1, 'lpMenuName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LoadMenu():
    return win32more.UI.WindowsAndMessaging.LoadMenuW
def _define_LoadMenuIndirectA():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HMENU,c_void_p, use_last_error=True)(("LoadMenuIndirectA", windll["USER32"]), ((1, 'lpMenuTemplate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LoadMenuIndirectW():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HMENU,c_void_p, use_last_error=True)(("LoadMenuIndirectW", windll["USER32"]), ((1, 'lpMenuTemplate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LoadMenuIndirect():
    return win32more.UI.WindowsAndMessaging.LoadMenuIndirectW
def _define_GetMenu():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HMENU,win32more.Foundation.HWND, use_last_error=False)(("GetMenu", windll["USER32"]), ((1, 'hWnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetMenu():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.HMENU, use_last_error=True)(("SetMenu", windll["USER32"]), ((1, 'hWnd'),(1, 'hMenu'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ChangeMenuA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU,UInt32,win32more.Foundation.PSTR,UInt32,UInt32, use_last_error=False)(("ChangeMenuA", windll["USER32"]), ((1, 'hMenu'),(1, 'cmd'),(1, 'lpszNewItem'),(1, 'cmdInsert'),(1, 'flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ChangeMenuW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU,UInt32,win32more.Foundation.PWSTR,UInt32,UInt32, use_last_error=False)(("ChangeMenuW", windll["USER32"]), ((1, 'hMenu'),(1, 'cmd'),(1, 'lpszNewItem'),(1, 'cmdInsert'),(1, 'flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ChangeMenu():
    return win32more.UI.WindowsAndMessaging.ChangeMenuW
def _define_HiliteMenuItem():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.HMENU,UInt32,UInt32, use_last_error=False)(("HiliteMenuItem", windll["USER32"]), ((1, 'hWnd'),(1, 'hMenu'),(1, 'uIDHiliteItem'),(1, 'uHilite'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetMenuStringA():
    try:
        return WINFUNCTYPE(Int32,win32more.UI.WindowsAndMessaging.HMENU,UInt32,POINTER(Byte),Int32,win32more.UI.WindowsAndMessaging.MENU_ITEM_FLAGS, use_last_error=False)(("GetMenuStringA", windll["USER32"]), ((1, 'hMenu'),(1, 'uIDItem'),(1, 'lpString'),(1, 'cchMax'),(1, 'flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetMenuStringW():
    try:
        return WINFUNCTYPE(Int32,win32more.UI.WindowsAndMessaging.HMENU,UInt32,POINTER(Char),Int32,win32more.UI.WindowsAndMessaging.MENU_ITEM_FLAGS, use_last_error=False)(("GetMenuStringW", windll["USER32"]), ((1, 'hMenu'),(1, 'uIDItem'),(1, 'lpString'),(1, 'cchMax'),(1, 'flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetMenuString():
    return win32more.UI.WindowsAndMessaging.GetMenuStringW
def _define_GetMenuState():
    try:
        return WINFUNCTYPE(UInt32,win32more.UI.WindowsAndMessaging.HMENU,UInt32,win32more.UI.WindowsAndMessaging.MENU_ITEM_FLAGS, use_last_error=False)(("GetMenuState", windll["USER32"]), ((1, 'hMenu'),(1, 'uId'),(1, 'uFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DrawMenuBar():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND, use_last_error=True)(("DrawMenuBar", windll["USER32"]), ((1, 'hWnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetSystemMenu():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HMENU,win32more.Foundation.HWND,win32more.Foundation.BOOL, use_last_error=False)(("GetSystemMenu", windll["USER32"]), ((1, 'hWnd'),(1, 'bRevert'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CreateMenu():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HMENU, use_last_error=True)(("CreateMenu", windll["USER32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_CreatePopupMenu():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HMENU, use_last_error=True)(("CreatePopupMenu", windll["USER32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_DestroyMenu():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU, use_last_error=True)(("DestroyMenu", windll["USER32"]), ((1, 'hMenu'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CheckMenuItem():
    try:
        return WINFUNCTYPE(UInt32,win32more.UI.WindowsAndMessaging.HMENU,UInt32,UInt32, use_last_error=False)(("CheckMenuItem", windll["USER32"]), ((1, 'hMenu'),(1, 'uIDCheckItem'),(1, 'uCheck'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnableMenuItem():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU,UInt32,win32more.UI.WindowsAndMessaging.MENU_ITEM_FLAGS, use_last_error=False)(("EnableMenuItem", windll["USER32"]), ((1, 'hMenu'),(1, 'uIDEnableItem'),(1, 'uEnable'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetSubMenu():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HMENU,win32more.UI.WindowsAndMessaging.HMENU,Int32, use_last_error=False)(("GetSubMenu", windll["USER32"]), ((1, 'hMenu'),(1, 'nPos'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetMenuItemID():
    try:
        return WINFUNCTYPE(UInt32,win32more.UI.WindowsAndMessaging.HMENU,Int32, use_last_error=False)(("GetMenuItemID", windll["USER32"]), ((1, 'hMenu'),(1, 'nPos'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetMenuItemCount():
    try:
        return WINFUNCTYPE(Int32,win32more.UI.WindowsAndMessaging.HMENU, use_last_error=True)(("GetMenuItemCount", windll["USER32"]), ((1, 'hMenu'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_InsertMenuA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU,UInt32,win32more.UI.WindowsAndMessaging.MENU_ITEM_FLAGS,UIntPtr,win32more.Foundation.PSTR, use_last_error=True)(("InsertMenuA", windll["USER32"]), ((1, 'hMenu'),(1, 'uPosition'),(1, 'uFlags'),(1, 'uIDNewItem'),(1, 'lpNewItem'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_InsertMenuW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU,UInt32,win32more.UI.WindowsAndMessaging.MENU_ITEM_FLAGS,UIntPtr,win32more.Foundation.PWSTR, use_last_error=True)(("InsertMenuW", windll["USER32"]), ((1, 'hMenu'),(1, 'uPosition'),(1, 'uFlags'),(1, 'uIDNewItem'),(1, 'lpNewItem'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_InsertMenu():
    return win32more.UI.WindowsAndMessaging.InsertMenuW
def _define_AppendMenuA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU,win32more.UI.WindowsAndMessaging.MENU_ITEM_FLAGS,UIntPtr,win32more.Foundation.PSTR, use_last_error=True)(("AppendMenuA", windll["USER32"]), ((1, 'hMenu'),(1, 'uFlags'),(1, 'uIDNewItem'),(1, 'lpNewItem'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AppendMenuW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU,win32more.UI.WindowsAndMessaging.MENU_ITEM_FLAGS,UIntPtr,win32more.Foundation.PWSTR, use_last_error=True)(("AppendMenuW", windll["USER32"]), ((1, 'hMenu'),(1, 'uFlags'),(1, 'uIDNewItem'),(1, 'lpNewItem'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AppendMenu():
    return win32more.UI.WindowsAndMessaging.AppendMenuW
def _define_ModifyMenuA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU,UInt32,win32more.UI.WindowsAndMessaging.MENU_ITEM_FLAGS,UIntPtr,win32more.Foundation.PSTR, use_last_error=True)(("ModifyMenuA", windll["USER32"]), ((1, 'hMnu'),(1, 'uPosition'),(1, 'uFlags'),(1, 'uIDNewItem'),(1, 'lpNewItem'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ModifyMenuW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU,UInt32,win32more.UI.WindowsAndMessaging.MENU_ITEM_FLAGS,UIntPtr,win32more.Foundation.PWSTR, use_last_error=True)(("ModifyMenuW", windll["USER32"]), ((1, 'hMnu'),(1, 'uPosition'),(1, 'uFlags'),(1, 'uIDNewItem'),(1, 'lpNewItem'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ModifyMenu():
    return win32more.UI.WindowsAndMessaging.ModifyMenuW
def _define_RemoveMenu():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU,UInt32,win32more.UI.WindowsAndMessaging.MENU_ITEM_FLAGS, use_last_error=True)(("RemoveMenu", windll["USER32"]), ((1, 'hMenu'),(1, 'uPosition'),(1, 'uFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DeleteMenu():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU,UInt32,win32more.UI.WindowsAndMessaging.MENU_ITEM_FLAGS, use_last_error=True)(("DeleteMenu", windll["USER32"]), ((1, 'hMenu'),(1, 'uPosition'),(1, 'uFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetMenuItemBitmaps():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU,UInt32,win32more.UI.WindowsAndMessaging.MENU_ITEM_FLAGS,win32more.Graphics.Gdi.HBITMAP,win32more.Graphics.Gdi.HBITMAP, use_last_error=True)(("SetMenuItemBitmaps", windll["USER32"]), ((1, 'hMenu'),(1, 'uPosition'),(1, 'uFlags'),(1, 'hBitmapUnchecked'),(1, 'hBitmapChecked'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetMenuCheckMarkDimensions():
    try:
        return WINFUNCTYPE(Int32, use_last_error=False)(("GetMenuCheckMarkDimensions", windll["USER32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_TrackPopupMenu():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU,win32more.UI.WindowsAndMessaging.TRACK_POPUP_MENU_FLAGS,Int32,Int32,Int32,win32more.Foundation.HWND,POINTER(win32more.Foundation.RECT_head), use_last_error=True)(("TrackPopupMenu", windll["USER32"]), ((1, 'hMenu'),(1, 'uFlags'),(1, 'x'),(1, 'y'),(1, 'nReserved'),(1, 'hWnd'),(1, 'prcRect'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_TrackPopupMenuEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU,UInt32,Int32,Int32,win32more.Foundation.HWND,POINTER(win32more.UI.WindowsAndMessaging.TPMPARAMS_head), use_last_error=True)(("TrackPopupMenuEx", windll["USER32"]), ((1, 'hMenu'),(1, 'uFlags'),(1, 'x'),(1, 'y'),(1, 'hwnd'),(1, 'lptpm'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CalculatePopupWindowPosition():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Foundation.POINT_head),POINTER(win32more.Foundation.SIZE_head),UInt32,POINTER(win32more.Foundation.RECT_head),POINTER(win32more.Foundation.RECT_head), use_last_error=True)(("CalculatePopupWindowPosition", windll["USER32"]), ((1, 'anchorPoint'),(1, 'windowSize'),(1, 'flags'),(1, 'excludeRect'),(1, 'popupWindowPosition'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetMenuInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU,POINTER(win32more.UI.WindowsAndMessaging.MENUINFO_head), use_last_error=True)(("GetMenuInfo", windll["USER32"]), ((1, 'param0'),(1, 'param1'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetMenuInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU,POINTER(win32more.UI.WindowsAndMessaging.MENUINFO_head), use_last_error=True)(("SetMenuInfo", windll["USER32"]), ((1, 'param0'),(1, 'param1'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EndMenu():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=True)(("EndMenu", windll["USER32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_InsertMenuItemA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU,UInt32,win32more.Foundation.BOOL,POINTER(win32more.UI.WindowsAndMessaging.MENUITEMINFOA_head), use_last_error=True)(("InsertMenuItemA", windll["USER32"]), ((1, 'hmenu'),(1, 'item'),(1, 'fByPosition'),(1, 'lpmi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_InsertMenuItemW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU,UInt32,win32more.Foundation.BOOL,POINTER(win32more.UI.WindowsAndMessaging.MENUITEMINFOW_head), use_last_error=True)(("InsertMenuItemW", windll["USER32"]), ((1, 'hmenu'),(1, 'item'),(1, 'fByPosition'),(1, 'lpmi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_InsertMenuItem():
    return win32more.UI.WindowsAndMessaging.InsertMenuItemW
def _define_GetMenuItemInfoA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU,UInt32,win32more.Foundation.BOOL,POINTER(win32more.UI.WindowsAndMessaging.MENUITEMINFOA_head), use_last_error=True)(("GetMenuItemInfoA", windll["USER32"]), ((1, 'hmenu'),(1, 'item'),(1, 'fByPosition'),(1, 'lpmii'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetMenuItemInfoW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU,UInt32,win32more.Foundation.BOOL,POINTER(win32more.UI.WindowsAndMessaging.MENUITEMINFOW_head), use_last_error=True)(("GetMenuItemInfoW", windll["USER32"]), ((1, 'hmenu'),(1, 'item'),(1, 'fByPosition'),(1, 'lpmii'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetMenuItemInfo():
    return win32more.UI.WindowsAndMessaging.GetMenuItemInfoW
def _define_SetMenuItemInfoA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU,UInt32,win32more.Foundation.BOOL,POINTER(win32more.UI.WindowsAndMessaging.MENUITEMINFOA_head), use_last_error=True)(("SetMenuItemInfoA", windll["USER32"]), ((1, 'hmenu'),(1, 'item'),(1, 'fByPositon'),(1, 'lpmii'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetMenuItemInfoW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU,UInt32,win32more.Foundation.BOOL,POINTER(win32more.UI.WindowsAndMessaging.MENUITEMINFOW_head), use_last_error=True)(("SetMenuItemInfoW", windll["USER32"]), ((1, 'hmenu'),(1, 'item'),(1, 'fByPositon'),(1, 'lpmii'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetMenuItemInfo():
    return win32more.UI.WindowsAndMessaging.SetMenuItemInfoW
def _define_GetMenuDefaultItem():
    try:
        return WINFUNCTYPE(UInt32,win32more.UI.WindowsAndMessaging.HMENU,UInt32,win32more.UI.WindowsAndMessaging.GET_MENU_DEFAULT_ITEM_FLAGS, use_last_error=True)(("GetMenuDefaultItem", windll["USER32"]), ((1, 'hMenu'),(1, 'fByPos'),(1, 'gmdiFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetMenuDefaultItem():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU,UInt32,UInt32, use_last_error=True)(("SetMenuDefaultItem", windll["USER32"]), ((1, 'hMenu'),(1, 'uItem'),(1, 'fByPos'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetMenuItemRect():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.HMENU,UInt32,POINTER(win32more.Foundation.RECT_head), use_last_error=True)(("GetMenuItemRect", windll["USER32"]), ((1, 'hWnd'),(1, 'hMenu'),(1, 'uItem'),(1, 'lprcItem'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MenuItemFromPoint():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.HMENU,win32more.Foundation.POINT, use_last_error=False)(("MenuItemFromPoint", windll["USER32"]), ((1, 'hWnd'),(1, 'hMenu'),(1, 'ptScreen'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DragObject():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,win32more.Foundation.HWND,UInt32,UIntPtr,win32more.UI.WindowsAndMessaging.HCURSOR, use_last_error=False)(("DragObject", windll["USER32"]), ((1, 'hwndParent'),(1, 'hwndFrom'),(1, 'fmt'),(1, 'data'),(1, 'hcur'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DrawIcon():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Graphics.Gdi.HDC,Int32,Int32,win32more.UI.WindowsAndMessaging.HICON, use_last_error=True)(("DrawIcon", windll["USER32"]), ((1, 'hDC'),(1, 'X'),(1, 'Y'),(1, 'hIcon'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetForegroundWindow():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND, use_last_error=False)(("GetForegroundWindow", windll["USER32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_SwitchToThisWindow():
    try:
        return WINFUNCTYPE(Void,win32more.Foundation.HWND,win32more.Foundation.BOOL, use_last_error=False)(("SwitchToThisWindow", windll["USER32"]), ((1, 'hwnd'),(1, 'fUnknown'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetForegroundWindow():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND, use_last_error=False)(("SetForegroundWindow", windll["USER32"]), ((1, 'hWnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AllowSetForegroundWindow():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32, use_last_error=True)(("AllowSetForegroundWindow", windll["USER32"]), ((1, 'dwProcessId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LockSetForegroundWindow():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.FOREGROUND_WINDOW_LOCK_CODE, use_last_error=True)(("LockSetForegroundWindow", windll["USER32"]), ((1, 'uLockCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScrollWindow():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,Int32,Int32,POINTER(win32more.Foundation.RECT_head),POINTER(win32more.Foundation.RECT_head), use_last_error=True)(("ScrollWindow", windll["USER32"]), ((1, 'hWnd'),(1, 'XAmount'),(1, 'YAmount'),(1, 'lpRect'),(1, 'lpClipRect'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScrollDC():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Graphics.Gdi.HDC,Int32,Int32,POINTER(win32more.Foundation.RECT_head),POINTER(win32more.Foundation.RECT_head),win32more.Graphics.Gdi.HRGN,POINTER(win32more.Foundation.RECT_head), use_last_error=True)(("ScrollDC", windll["USER32"]), ((1, 'hDC'),(1, 'dx'),(1, 'dy'),(1, 'lprcScroll'),(1, 'lprcClip'),(1, 'hrgnUpdate'),(1, 'lprcUpdate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScrollWindowEx():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.HWND,Int32,Int32,POINTER(win32more.Foundation.RECT_head),POINTER(win32more.Foundation.RECT_head),win32more.Graphics.Gdi.HRGN,POINTER(win32more.Foundation.RECT_head),win32more.UI.WindowsAndMessaging.SHOW_WINDOW_CMD, use_last_error=True)(("ScrollWindowEx", windll["USER32"]), ((1, 'hWnd'),(1, 'dx'),(1, 'dy'),(1, 'prcScroll'),(1, 'prcClip'),(1, 'hrgnUpdate'),(1, 'prcUpdate'),(1, 'flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetScrollPos():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS, use_last_error=True)(("GetScrollPos", windll["USER32"]), ((1, 'hWnd'),(1, 'nBar'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetScrollRange():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS,POINTER(Int32),POINTER(Int32), use_last_error=True)(("GetScrollRange", windll["USER32"]), ((1, 'hWnd'),(1, 'nBar'),(1, 'lpMinPos'),(1, 'lpMaxPos'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetPropA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PSTR,win32more.Foundation.HANDLE, use_last_error=True)(("SetPropA", windll["USER32"]), ((1, 'hWnd'),(1, 'lpString'),(1, 'hData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetPropW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PWSTR,win32more.Foundation.HANDLE, use_last_error=True)(("SetPropW", windll["USER32"]), ((1, 'hWnd'),(1, 'lpString'),(1, 'hData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetProp():
    return win32more.UI.WindowsAndMessaging.SetPropW
def _define_GetPropA():
    try:
        return WINFUNCTYPE(win32more.Foundation.HANDLE,win32more.Foundation.HWND,win32more.Foundation.PSTR, use_last_error=False)(("GetPropA", windll["USER32"]), ((1, 'hWnd'),(1, 'lpString'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetPropW():
    try:
        return WINFUNCTYPE(win32more.Foundation.HANDLE,win32more.Foundation.HWND,win32more.Foundation.PWSTR, use_last_error=False)(("GetPropW", windll["USER32"]), ((1, 'hWnd'),(1, 'lpString'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetProp():
    return win32more.UI.WindowsAndMessaging.GetPropW
def _define_RemovePropA():
    try:
        return WINFUNCTYPE(win32more.Foundation.HANDLE,win32more.Foundation.HWND,win32more.Foundation.PSTR, use_last_error=True)(("RemovePropA", windll["USER32"]), ((1, 'hWnd'),(1, 'lpString'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_RemovePropW():
    try:
        return WINFUNCTYPE(win32more.Foundation.HANDLE,win32more.Foundation.HWND,win32more.Foundation.PWSTR, use_last_error=True)(("RemovePropW", windll["USER32"]), ((1, 'hWnd'),(1, 'lpString'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_RemoveProp():
    return win32more.UI.WindowsAndMessaging.RemovePropW
def _define_EnumPropsExA():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.PROPENUMPROCEXA,win32more.Foundation.LPARAM, use_last_error=False)(("EnumPropsExA", windll["USER32"]), ((1, 'hWnd'),(1, 'lpEnumFunc'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumPropsExW():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.PROPENUMPROCEXW,win32more.Foundation.LPARAM, use_last_error=False)(("EnumPropsExW", windll["USER32"]), ((1, 'hWnd'),(1, 'lpEnumFunc'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumPropsEx():
    return win32more.UI.WindowsAndMessaging.EnumPropsExW
def _define_EnumPropsA():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.PROPENUMPROCA, use_last_error=False)(("EnumPropsA", windll["USER32"]), ((1, 'hWnd'),(1, 'lpEnumFunc'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumPropsW():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.PROPENUMPROCW, use_last_error=False)(("EnumPropsW", windll["USER32"]), ((1, 'hWnd'),(1, 'lpEnumFunc'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumProps():
    return win32more.UI.WindowsAndMessaging.EnumPropsW
def _define_SetWindowTextA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PSTR, use_last_error=True)(("SetWindowTextA", windll["USER32"]), ((1, 'hWnd'),(1, 'lpString'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetWindowTextW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PWSTR, use_last_error=True)(("SetWindowTextW", windll["USER32"]), ((1, 'hWnd'),(1, 'lpString'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetWindowText():
    return win32more.UI.WindowsAndMessaging.SetWindowTextW
def _define_GetWindowTextA():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.HWND,POINTER(Byte),Int32, use_last_error=True)(("GetWindowTextA", windll["USER32"]), ((1, 'hWnd'),(1, 'lpString'),(1, 'nMaxCount'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetWindowTextW():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.HWND,POINTER(Char),Int32, use_last_error=True)(("GetWindowTextW", windll["USER32"]), ((1, 'hWnd'),(1, 'lpString'),(1, 'nMaxCount'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetWindowText():
    return win32more.UI.WindowsAndMessaging.GetWindowTextW
def _define_GetWindowTextLengthA():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.HWND, use_last_error=True)(("GetWindowTextLengthA", windll["USER32"]), ((1, 'hWnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetWindowTextLengthW():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.HWND, use_last_error=True)(("GetWindowTextLengthW", windll["USER32"]), ((1, 'hWnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetWindowTextLength():
    return win32more.UI.WindowsAndMessaging.GetWindowTextLengthW
def _define_GetClientRect():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,POINTER(win32more.Foundation.RECT_head), use_last_error=True)(("GetClientRect", windll["USER32"]), ((1, 'hWnd'),(1, 'lpRect'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetWindowRect():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,POINTER(win32more.Foundation.RECT_head), use_last_error=True)(("GetWindowRect", windll["USER32"]), ((1, 'hWnd'),(1, 'lpRect'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AdjustWindowRect():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Foundation.RECT_head),win32more.UI.WindowsAndMessaging.WINDOW_STYLE,win32more.Foundation.BOOL, use_last_error=True)(("AdjustWindowRect", windll["USER32"]), ((1, 'lpRect'),(1, 'dwStyle'),(1, 'bMenu'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AdjustWindowRectEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Foundation.RECT_head),win32more.UI.WindowsAndMessaging.WINDOW_STYLE,win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.WINDOW_EX_STYLE, use_last_error=True)(("AdjustWindowRectEx", windll["USER32"]), ((1, 'lpRect'),(1, 'dwStyle'),(1, 'bMenu'),(1, 'dwExStyle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MessageBoxA():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.MESSAGEBOX_RESULT,win32more.Foundation.HWND,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.UI.WindowsAndMessaging.MESSAGEBOX_STYLE, use_last_error=True)(("MessageBoxA", windll["USER32"]), ((1, 'hWnd'),(1, 'lpText'),(1, 'lpCaption'),(1, 'uType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MessageBoxW():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.MESSAGEBOX_RESULT,win32more.Foundation.HWND,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.UI.WindowsAndMessaging.MESSAGEBOX_STYLE, use_last_error=True)(("MessageBoxW", windll["USER32"]), ((1, 'hWnd'),(1, 'lpText'),(1, 'lpCaption'),(1, 'uType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MessageBox():
    return win32more.UI.WindowsAndMessaging.MessageBoxW
def _define_MessageBoxExA():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.MESSAGEBOX_RESULT,win32more.Foundation.HWND,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.UI.WindowsAndMessaging.MESSAGEBOX_STYLE,UInt16, use_last_error=True)(("MessageBoxExA", windll["USER32"]), ((1, 'hWnd'),(1, 'lpText'),(1, 'lpCaption'),(1, 'uType'),(1, 'wLanguageId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MessageBoxExW():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.MESSAGEBOX_RESULT,win32more.Foundation.HWND,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.UI.WindowsAndMessaging.MESSAGEBOX_STYLE,UInt16, use_last_error=True)(("MessageBoxExW", windll["USER32"]), ((1, 'hWnd'),(1, 'lpText'),(1, 'lpCaption'),(1, 'uType'),(1, 'wLanguageId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MessageBoxEx():
    return win32more.UI.WindowsAndMessaging.MessageBoxExW
def _define_MessageBoxIndirectA():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.MESSAGEBOX_RESULT,POINTER(win32more.UI.WindowsAndMessaging.MSGBOXPARAMSA_head), use_last_error=False)(("MessageBoxIndirectA", windll["USER32"]), ((1, 'lpmbp'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MessageBoxIndirectW():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.MESSAGEBOX_RESULT,POINTER(win32more.UI.WindowsAndMessaging.MSGBOXPARAMSW_head), use_last_error=False)(("MessageBoxIndirectW", windll["USER32"]), ((1, 'lpmbp'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MessageBoxIndirect():
    return win32more.UI.WindowsAndMessaging.MessageBoxIndirectW
def _define_ShowCursor():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.BOOL, use_last_error=False)(("ShowCursor", windll["USER32"]), ((1, 'bShow'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetCursorPos():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,Int32,Int32, use_last_error=True)(("SetCursorPos", windll["USER32"]), ((1, 'X'),(1, 'Y'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetPhysicalCursorPos():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,Int32,Int32, use_last_error=True)(("SetPhysicalCursorPos", windll["USER32"]), ((1, 'X'),(1, 'Y'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetCursor():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HCURSOR,win32more.UI.WindowsAndMessaging.HCURSOR, use_last_error=False)(("SetCursor", windll["USER32"]), ((1, 'hCursor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetCursorPos():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Foundation.POINT_head), use_last_error=True)(("GetCursorPos", windll["USER32"]), ((1, 'lpPoint'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetPhysicalCursorPos():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Foundation.POINT_head), use_last_error=True)(("GetPhysicalCursorPos", windll["USER32"]), ((1, 'lpPoint'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetClipCursor():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Foundation.RECT_head), use_last_error=True)(("GetClipCursor", windll["USER32"]), ((1, 'lpRect'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetCursor():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HCURSOR, use_last_error=False)(("GetCursor", windll["USER32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_CreateCaret():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Graphics.Gdi.HBITMAP,Int32,Int32, use_last_error=True)(("CreateCaret", windll["USER32"]), ((1, 'hWnd'),(1, 'hBitmap'),(1, 'nWidth'),(1, 'nHeight'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetCaretBlinkTime():
    try:
        return WINFUNCTYPE(UInt32, use_last_error=True)(("GetCaretBlinkTime", windll["USER32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetCaretBlinkTime():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32, use_last_error=True)(("SetCaretBlinkTime", windll["USER32"]), ((1, 'uMSeconds'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DestroyCaret():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=True)(("DestroyCaret", windll["USER32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_HideCaret():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND, use_last_error=True)(("HideCaret", windll["USER32"]), ((1, 'hWnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ShowCaret():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND, use_last_error=True)(("ShowCaret", windll["USER32"]), ((1, 'hWnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetCaretPos():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,Int32,Int32, use_last_error=True)(("SetCaretPos", windll["USER32"]), ((1, 'X'),(1, 'Y'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetCaretPos():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Foundation.POINT_head), use_last_error=True)(("GetCaretPos", windll["USER32"]), ((1, 'lpPoint'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LogicalToPhysicalPoint():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,POINTER(win32more.Foundation.POINT_head), use_last_error=False)(("LogicalToPhysicalPoint", windll["USER32"]), ((1, 'hWnd'),(1, 'lpPoint'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_PhysicalToLogicalPoint():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,POINTER(win32more.Foundation.POINT_head), use_last_error=False)(("PhysicalToLogicalPoint", windll["USER32"]), ((1, 'hWnd'),(1, 'lpPoint'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_WindowFromPoint():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.POINT, use_last_error=False)(("WindowFromPoint", windll["USER32"]), ((1, 'Point'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_WindowFromPhysicalPoint():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.POINT, use_last_error=False)(("WindowFromPhysicalPoint", windll["USER32"]), ((1, 'Point'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ChildWindowFromPoint():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.HWND,win32more.Foundation.POINT, use_last_error=False)(("ChildWindowFromPoint", windll["USER32"]), ((1, 'hWndParent'),(1, 'Point'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ClipCursor():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Foundation.RECT_head), use_last_error=True)(("ClipCursor", windll["USER32"]), ((1, 'lpRect'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ChildWindowFromPointEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.HWND,win32more.Foundation.POINT,win32more.UI.WindowsAndMessaging.CWP_FLAGS, use_last_error=False)(("ChildWindowFromPointEx", windll["USER32"]), ((1, 'hwnd'),(1, 'pt'),(1, 'flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetSysColor():
    try:
        return WINFUNCTYPE(UInt32,win32more.UI.WindowsAndMessaging.SYS_COLOR_INDEX, use_last_error=False)(("GetSysColor", windll["USER32"]), ((1, 'nIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetSysColors():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,Int32,POINTER(Int32),POINTER(UInt32), use_last_error=True)(("SetSysColors", windll["USER32"]), ((1, 'cElements'),(1, 'lpaElements'),(1, 'lpaRgbValues'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetWindowWord():
    try:
        return WINFUNCTYPE(UInt16,win32more.Foundation.HWND,Int32, use_last_error=False)(("GetWindowWord", windll["USER32"]), ((1, 'hWnd'),(1, 'nIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetWindowWord():
    try:
        return WINFUNCTYPE(UInt16,win32more.Foundation.HWND,Int32,UInt16, use_last_error=False)(("SetWindowWord", windll["USER32"]), ((1, 'hWnd'),(1, 'nIndex'),(1, 'wNewWord'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetWindowLongA():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.WINDOW_LONG_PTR_INDEX, use_last_error=True)(("GetWindowLongA", windll["USER32"]), ((1, 'hWnd'),(1, 'nIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetWindowLongW():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.WINDOW_LONG_PTR_INDEX, use_last_error=True)(("GetWindowLongW", windll["USER32"]), ((1, 'hWnd'),(1, 'nIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetWindowLong():
    return win32more.UI.WindowsAndMessaging.GetWindowLongW
def _define_SetWindowLongA():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.WINDOW_LONG_PTR_INDEX,Int32, use_last_error=True)(("SetWindowLongA", windll["USER32"]), ((1, 'hWnd'),(1, 'nIndex'),(1, 'dwNewLong'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetWindowLongW():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.WINDOW_LONG_PTR_INDEX,Int32, use_last_error=True)(("SetWindowLongW", windll["USER32"]), ((1, 'hWnd'),(1, 'nIndex'),(1, 'dwNewLong'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetWindowLong():
    return win32more.UI.WindowsAndMessaging.SetWindowLongW
def _define_GetWindowLongPtrA():
    try:
        return WINFUNCTYPE(IntPtr,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.WINDOW_LONG_PTR_INDEX, use_last_error=True)(("GetWindowLongPtrA", windll["USER32"]), ((1, 'hWnd'),(1, 'nIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetWindowLongPtrW():
    try:
        return WINFUNCTYPE(IntPtr,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.WINDOW_LONG_PTR_INDEX, use_last_error=True)(("GetWindowLongPtrW", windll["USER32"]), ((1, 'hWnd'),(1, 'nIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetWindowLongPtr():
    return win32more.UI.WindowsAndMessaging.GetWindowLongPtrW
def _define_SetWindowLongPtrA():
    try:
        return WINFUNCTYPE(IntPtr,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.WINDOW_LONG_PTR_INDEX,IntPtr, use_last_error=True)(("SetWindowLongPtrA", windll["USER32"]), ((1, 'hWnd'),(1, 'nIndex'),(1, 'dwNewLong'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetWindowLongPtrW():
    try:
        return WINFUNCTYPE(IntPtr,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.WINDOW_LONG_PTR_INDEX,IntPtr, use_last_error=True)(("SetWindowLongPtrW", windll["USER32"]), ((1, 'hWnd'),(1, 'nIndex'),(1, 'dwNewLong'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetWindowLongPtr():
    return win32more.UI.WindowsAndMessaging.SetWindowLongPtrW
def _define_GetClassWord():
    try:
        return WINFUNCTYPE(UInt16,win32more.Foundation.HWND,Int32, use_last_error=True)(("GetClassWord", windll["USER32"]), ((1, 'hWnd'),(1, 'nIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetClassWord():
    try:
        return WINFUNCTYPE(UInt16,win32more.Foundation.HWND,Int32,UInt16, use_last_error=True)(("SetClassWord", windll["USER32"]), ((1, 'hWnd'),(1, 'nIndex'),(1, 'wNewWord'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetClassLongA():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.GET_CLASS_LONG_INDEX, use_last_error=True)(("GetClassLongA", windll["USER32"]), ((1, 'hWnd'),(1, 'nIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetClassLongW():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.GET_CLASS_LONG_INDEX, use_last_error=True)(("GetClassLongW", windll["USER32"]), ((1, 'hWnd'),(1, 'nIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetClassLong():
    return win32more.UI.WindowsAndMessaging.GetClassLongW
def _define_SetClassLongA():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.GET_CLASS_LONG_INDEX,Int32, use_last_error=True)(("SetClassLongA", windll["USER32"]), ((1, 'hWnd'),(1, 'nIndex'),(1, 'dwNewLong'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetClassLongW():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.GET_CLASS_LONG_INDEX,Int32, use_last_error=True)(("SetClassLongW", windll["USER32"]), ((1, 'hWnd'),(1, 'nIndex'),(1, 'dwNewLong'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetClassLong():
    return win32more.UI.WindowsAndMessaging.SetClassLongW
def _define_GetClassLongPtrA():
    try:
        return WINFUNCTYPE(UIntPtr,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.GET_CLASS_LONG_INDEX, use_last_error=True)(("GetClassLongPtrA", windll["USER32"]), ((1, 'hWnd'),(1, 'nIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetClassLongPtrW():
    try:
        return WINFUNCTYPE(UIntPtr,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.GET_CLASS_LONG_INDEX, use_last_error=True)(("GetClassLongPtrW", windll["USER32"]), ((1, 'hWnd'),(1, 'nIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetClassLongPtr():
    return win32more.UI.WindowsAndMessaging.GetClassLongPtrW
def _define_SetClassLongPtrA():
    try:
        return WINFUNCTYPE(UIntPtr,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.GET_CLASS_LONG_INDEX,IntPtr, use_last_error=True)(("SetClassLongPtrA", windll["USER32"]), ((1, 'hWnd'),(1, 'nIndex'),(1, 'dwNewLong'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetClassLongPtrW():
    try:
        return WINFUNCTYPE(UIntPtr,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.GET_CLASS_LONG_INDEX,IntPtr, use_last_error=True)(("SetClassLongPtrW", windll["USER32"]), ((1, 'hWnd'),(1, 'nIndex'),(1, 'dwNewLong'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetClassLongPtr():
    return win32more.UI.WindowsAndMessaging.SetClassLongPtrW
def _define_GetProcessDefaultLayout():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(UInt32), use_last_error=True)(("GetProcessDefaultLayout", windll["USER32"]), ((1, 'pdwDefaultLayout'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetProcessDefaultLayout():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32, use_last_error=True)(("SetProcessDefaultLayout", windll["USER32"]), ((1, 'dwDefaultLayout'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetDesktopWindow():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND, use_last_error=False)(("GetDesktopWindow", windll["USER32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetParent():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.HWND, use_last_error=True)(("GetParent", windll["USER32"]), ((1, 'hWnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetParent():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.HWND,win32more.Foundation.HWND, use_last_error=True)(("SetParent", windll["USER32"]), ((1, 'hWndChild'),(1, 'hWndNewParent'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumChildWindows():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.WNDENUMPROC,win32more.Foundation.LPARAM, use_last_error=False)(("EnumChildWindows", windll["USER32"]), ((1, 'hWndParent'),(1, 'lpEnumFunc'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FindWindowA():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.PSTR,win32more.Foundation.PSTR, use_last_error=True)(("FindWindowA", windll["USER32"]), ((1, 'lpClassName'),(1, 'lpWindowName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FindWindowW():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR, use_last_error=True)(("FindWindowW", windll["USER32"]), ((1, 'lpClassName'),(1, 'lpWindowName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FindWindow():
    return win32more.UI.WindowsAndMessaging.FindWindowW
def _define_FindWindowExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.HWND,win32more.Foundation.HWND,win32more.Foundation.PSTR,win32more.Foundation.PSTR, use_last_error=True)(("FindWindowExA", windll["USER32"]), ((1, 'hWndParent'),(1, 'hWndChildAfter'),(1, 'lpszClass'),(1, 'lpszWindow'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FindWindowExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.HWND,win32more.Foundation.HWND,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR, use_last_error=True)(("FindWindowExW", windll["USER32"]), ((1, 'hWndParent'),(1, 'hWndChildAfter'),(1, 'lpszClass'),(1, 'lpszWindow'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FindWindowEx():
    return win32more.UI.WindowsAndMessaging.FindWindowExW
def _define_GetShellWindow():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND, use_last_error=False)(("GetShellWindow", windll["USER32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_RegisterShellHookWindow():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND, use_last_error=False)(("RegisterShellHookWindow", windll["USER32"]), ((1, 'hwnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DeregisterShellHookWindow():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND, use_last_error=False)(("DeregisterShellHookWindow", windll["USER32"]), ((1, 'hwnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumWindows():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.WNDENUMPROC,win32more.Foundation.LPARAM, use_last_error=True)(("EnumWindows", windll["USER32"]), ((1, 'lpEnumFunc'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumThreadWindows():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.UI.WindowsAndMessaging.WNDENUMPROC,win32more.Foundation.LPARAM, use_last_error=False)(("EnumThreadWindows", windll["USER32"]), ((1, 'dwThreadId'),(1, 'lpfn'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetClassNameA():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.HWND,POINTER(Byte),Int32, use_last_error=True)(("GetClassNameA", windll["USER32"]), ((1, 'hWnd'),(1, 'lpClassName'),(1, 'nMaxCount'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetClassNameW():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.HWND,POINTER(Char),Int32, use_last_error=True)(("GetClassNameW", windll["USER32"]), ((1, 'hWnd'),(1, 'lpClassName'),(1, 'nMaxCount'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetClassName():
    return win32more.UI.WindowsAndMessaging.GetClassNameW
def _define_GetTopWindow():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.HWND, use_last_error=True)(("GetTopWindow", windll["USER32"]), ((1, 'hWnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetWindowThreadProcessId():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,POINTER(UInt32), use_last_error=False)(("GetWindowThreadProcessId", windll["USER32"]), ((1, 'hWnd'),(1, 'lpdwProcessId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsGUIThread():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.BOOL, use_last_error=False)(("IsGUIThread", windll["USER32"]), ((1, 'bConvert'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetLastActivePopup():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.HWND, use_last_error=False)(("GetLastActivePopup", windll["USER32"]), ((1, 'hWnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetWindow():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.GET_WINDOW_CMD, use_last_error=True)(("GetWindow", windll["USER32"]), ((1, 'hWnd'),(1, 'uCmd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetWindowsHookA():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HHOOK,Int32,win32more.UI.WindowsAndMessaging.HOOKPROC, use_last_error=False)(("SetWindowsHookA", windll["USER32"]), ((1, 'nFilterType'),(1, 'pfnFilterProc'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetWindowsHookW():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HHOOK,Int32,win32more.UI.WindowsAndMessaging.HOOKPROC, use_last_error=False)(("SetWindowsHookW", windll["USER32"]), ((1, 'nFilterType'),(1, 'pfnFilterProc'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetWindowsHook():
    return win32more.UI.WindowsAndMessaging.SetWindowsHookW
def _define_UnhookWindowsHook():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,Int32,win32more.UI.WindowsAndMessaging.HOOKPROC, use_last_error=False)(("UnhookWindowsHook", windll["USER32"]), ((1, 'nCode'),(1, 'pfnFilterProc'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetWindowsHookExA():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HHOOK,win32more.UI.WindowsAndMessaging.WINDOWS_HOOK_ID,win32more.UI.WindowsAndMessaging.HOOKPROC,win32more.Foundation.HINSTANCE,UInt32, use_last_error=True)(("SetWindowsHookExA", windll["USER32"]), ((1, 'idHook'),(1, 'lpfn'),(1, 'hmod'),(1, 'dwThreadId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetWindowsHookExW():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HHOOK,win32more.UI.WindowsAndMessaging.WINDOWS_HOOK_ID,win32more.UI.WindowsAndMessaging.HOOKPROC,win32more.Foundation.HINSTANCE,UInt32, use_last_error=True)(("SetWindowsHookExW", windll["USER32"]), ((1, 'idHook'),(1, 'lpfn'),(1, 'hmod'),(1, 'dwThreadId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetWindowsHookEx():
    return win32more.UI.WindowsAndMessaging.SetWindowsHookExW
def _define_UnhookWindowsHookEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HHOOK, use_last_error=True)(("UnhookWindowsHookEx", windll["USER32"]), ((1, 'hhk'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CallNextHookEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,win32more.UI.WindowsAndMessaging.HHOOK,Int32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM, use_last_error=False)(("CallNextHookEx", windll["USER32"]), ((1, 'hhk'),(1, 'nCode'),(1, 'wParam'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CheckMenuRadioItem():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HMENU,UInt32,UInt32,UInt32,UInt32, use_last_error=True)(("CheckMenuRadioItem", windll["USER32"]), ((1, 'hmenu'),(1, 'first'),(1, 'last'),(1, 'check'),(1, 'flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LoadCursorA():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HCURSOR,win32more.Foundation.HINSTANCE,win32more.Foundation.PSTR, use_last_error=True)(("LoadCursorA", windll["USER32"]), ((1, 'hInstance'),(1, 'lpCursorName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LoadCursorW():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HCURSOR,win32more.Foundation.HINSTANCE,win32more.Foundation.PWSTR, use_last_error=True)(("LoadCursorW", windll["USER32"]), ((1, 'hInstance'),(1, 'lpCursorName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LoadCursor():
    return win32more.UI.WindowsAndMessaging.LoadCursorW
def _define_LoadCursorFromFileA():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HCURSOR,win32more.Foundation.PSTR, use_last_error=True)(("LoadCursorFromFileA", windll["USER32"]), ((1, 'lpFileName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LoadCursorFromFileW():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HCURSOR,win32more.Foundation.PWSTR, use_last_error=True)(("LoadCursorFromFileW", windll["USER32"]), ((1, 'lpFileName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LoadCursorFromFile():
    return win32more.UI.WindowsAndMessaging.LoadCursorFromFileW
def _define_CreateCursor():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HCURSOR,win32more.Foundation.HINSTANCE,Int32,Int32,Int32,Int32,c_void_p,c_void_p, use_last_error=True)(("CreateCursor", windll["USER32"]), ((1, 'hInst'),(1, 'xHotSpot'),(1, 'yHotSpot'),(1, 'nWidth'),(1, 'nHeight'),(1, 'pvANDPlane'),(1, 'pvXORPlane'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DestroyCursor():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HCURSOR, use_last_error=True)(("DestroyCursor", windll["USER32"]), ((1, 'hCursor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetSystemCursor():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HCURSOR,win32more.UI.WindowsAndMessaging.SYSTEM_CURSOR_ID, use_last_error=True)(("SetSystemCursor", windll["USER32"]), ((1, 'hcur'),(1, 'id'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LoadIconA():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HICON,win32more.Foundation.HINSTANCE,win32more.Foundation.PSTR, use_last_error=True)(("LoadIconA", windll["USER32"]), ((1, 'hInstance'),(1, 'lpIconName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LoadIconW():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HICON,win32more.Foundation.HINSTANCE,win32more.Foundation.PWSTR, use_last_error=True)(("LoadIconW", windll["USER32"]), ((1, 'hInstance'),(1, 'lpIconName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LoadIcon():
    return win32more.UI.WindowsAndMessaging.LoadIconW
def _define_PrivateExtractIconsA():
    try:
        return WINFUNCTYPE(UInt32,POINTER(Byte),Int32,Int32,Int32,POINTER(win32more.UI.WindowsAndMessaging.HICON),POINTER(UInt32),UInt32,UInt32, use_last_error=False)(("PrivateExtractIconsA", windll["USER32"]), ((1, 'szFileName'),(1, 'nIconIndex'),(1, 'cxIcon'),(1, 'cyIcon'),(1, 'phicon'),(1, 'piconid'),(1, 'nIcons'),(1, 'flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_PrivateExtractIconsW():
    try:
        return WINFUNCTYPE(UInt32,POINTER(Char),Int32,Int32,Int32,POINTER(win32more.UI.WindowsAndMessaging.HICON),POINTER(UInt32),UInt32,UInt32, use_last_error=False)(("PrivateExtractIconsW", windll["USER32"]), ((1, 'szFileName'),(1, 'nIconIndex'),(1, 'cxIcon'),(1, 'cyIcon'),(1, 'phicon'),(1, 'piconid'),(1, 'nIcons'),(1, 'flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_PrivateExtractIcons():
    return win32more.UI.WindowsAndMessaging.PrivateExtractIconsW
def _define_CreateIcon():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HICON,win32more.Foundation.HINSTANCE,Int32,Int32,Byte,Byte,POINTER(Byte),POINTER(Byte), use_last_error=True)(("CreateIcon", windll["USER32"]), ((1, 'hInstance'),(1, 'nWidth'),(1, 'nHeight'),(1, 'cPlanes'),(1, 'cBitsPixel'),(1, 'lpbANDbits'),(1, 'lpbXORbits'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DestroyIcon():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HICON, use_last_error=True)(("DestroyIcon", windll["USER32"]), ((1, 'hIcon'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LookupIconIdFromDirectory():
    try:
        return WINFUNCTYPE(Int32,c_char_p_no,win32more.Foundation.BOOL, use_last_error=True)(("LookupIconIdFromDirectory", windll["USER32"]), ((1, 'presbits'),(1, 'fIcon'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LookupIconIdFromDirectoryEx():
    try:
        return WINFUNCTYPE(Int32,c_char_p_no,win32more.Foundation.BOOL,Int32,Int32,win32more.UI.WindowsAndMessaging.IMAGE_FLAGS, use_last_error=True)(("LookupIconIdFromDirectoryEx", windll["USER32"]), ((1, 'presbits'),(1, 'fIcon'),(1, 'cxDesired'),(1, 'cyDesired'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CreateIconFromResource():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HICON,c_char_p_no,UInt32,win32more.Foundation.BOOL,UInt32, use_last_error=True)(("CreateIconFromResource", windll["USER32"]), ((1, 'presbits'),(1, 'dwResSize'),(1, 'fIcon'),(1, 'dwVer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CreateIconFromResourceEx():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HICON,c_char_p_no,UInt32,win32more.Foundation.BOOL,UInt32,Int32,Int32,win32more.UI.WindowsAndMessaging.IMAGE_FLAGS, use_last_error=True)(("CreateIconFromResourceEx", windll["USER32"]), ((1, 'presbits'),(1, 'dwResSize'),(1, 'fIcon'),(1, 'dwVer'),(1, 'cxDesired'),(1, 'cyDesired'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LoadImageA():
    try:
        return WINFUNCTYPE(win32more.Foundation.HANDLE,win32more.Foundation.HINSTANCE,win32more.Foundation.PSTR,win32more.UI.WindowsAndMessaging.GDI_IMAGE_TYPE,Int32,Int32,win32more.UI.WindowsAndMessaging.IMAGE_FLAGS, use_last_error=True)(("LoadImageA", windll["USER32"]), ((1, 'hInst'),(1, 'name'),(1, 'type'),(1, 'cx'),(1, 'cy'),(1, 'fuLoad'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LoadImageW():
    try:
        return WINFUNCTYPE(win32more.Foundation.HANDLE,win32more.Foundation.HINSTANCE,win32more.Foundation.PWSTR,win32more.UI.WindowsAndMessaging.GDI_IMAGE_TYPE,Int32,Int32,win32more.UI.WindowsAndMessaging.IMAGE_FLAGS, use_last_error=True)(("LoadImageW", windll["USER32"]), ((1, 'hInst'),(1, 'name'),(1, 'type'),(1, 'cx'),(1, 'cy'),(1, 'fuLoad'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LoadImage():
    return win32more.UI.WindowsAndMessaging.LoadImageW
def _define_CopyImage():
    try:
        return WINFUNCTYPE(win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,win32more.UI.WindowsAndMessaging.GDI_IMAGE_TYPE,Int32,Int32,win32more.UI.WindowsAndMessaging.IMAGE_FLAGS, use_last_error=True)(("CopyImage", windll["USER32"]), ((1, 'h'),(1, 'type'),(1, 'cx'),(1, 'cy'),(1, 'flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DrawIconEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Graphics.Gdi.HDC,Int32,Int32,win32more.UI.WindowsAndMessaging.HICON,Int32,Int32,UInt32,win32more.Graphics.Gdi.HBRUSH,win32more.UI.WindowsAndMessaging.DI_FLAGS, use_last_error=True)(("DrawIconEx", windll["USER32"]), ((1, 'hdc'),(1, 'xLeft'),(1, 'yTop'),(1, 'hIcon'),(1, 'cxWidth'),(1, 'cyWidth'),(1, 'istepIfAniCur'),(1, 'hbrFlickerFreeDraw'),(1, 'diFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CreateIconIndirect():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HICON,POINTER(win32more.UI.WindowsAndMessaging.ICONINFO_head), use_last_error=True)(("CreateIconIndirect", windll["USER32"]), ((1, 'piconinfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CopyIcon():
    try:
        return WINFUNCTYPE(win32more.UI.WindowsAndMessaging.HICON,win32more.UI.WindowsAndMessaging.HICON, use_last_error=True)(("CopyIcon", windll["USER32"]), ((1, 'hIcon'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetIconInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HICON,POINTER(win32more.UI.WindowsAndMessaging.ICONINFO_head), use_last_error=True)(("GetIconInfo", windll["USER32"]), ((1, 'hIcon'),(1, 'piconinfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetIconInfoExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HICON,POINTER(win32more.UI.WindowsAndMessaging.ICONINFOEXA_head), use_last_error=False)(("GetIconInfoExA", windll["USER32"]), ((1, 'hicon'),(1, 'piconinfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetIconInfoExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.HICON,POINTER(win32more.UI.WindowsAndMessaging.ICONINFOEXW_head), use_last_error=False)(("GetIconInfoExW", windll["USER32"]), ((1, 'hicon'),(1, 'piconinfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetIconInfoEx():
    return win32more.UI.WindowsAndMessaging.GetIconInfoExW
def _define_IsDialogMessageA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,POINTER(win32more.UI.WindowsAndMessaging.MSG_head), use_last_error=False)(("IsDialogMessageA", windll["USER32"]), ((1, 'hDlg'),(1, 'lpMsg'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsDialogMessageW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,POINTER(win32more.UI.WindowsAndMessaging.MSG_head), use_last_error=False)(("IsDialogMessageW", windll["USER32"]), ((1, 'hDlg'),(1, 'lpMsg'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsDialogMessage():
    return win32more.UI.WindowsAndMessaging.IsDialogMessageW
def _define_MapDialogRect():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,POINTER(win32more.Foundation.RECT_head), use_last_error=True)(("MapDialogRect", windll["USER32"]), ((1, 'hDlg'),(1, 'lpRect'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetScrollInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS,POINTER(win32more.UI.WindowsAndMessaging.SCROLLINFO_head), use_last_error=True)(("GetScrollInfo", windll["USER32"]), ((1, 'hwnd'),(1, 'nBar'),(1, 'lpsi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DefFrameProcA():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,win32more.Foundation.HWND,win32more.Foundation.HWND,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM, use_last_error=False)(("DefFrameProcA", windll["USER32"]), ((1, 'hWnd'),(1, 'hWndMDIClient'),(1, 'uMsg'),(1, 'wParam'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DefFrameProcW():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,win32more.Foundation.HWND,win32more.Foundation.HWND,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM, use_last_error=False)(("DefFrameProcW", windll["USER32"]), ((1, 'hWnd'),(1, 'hWndMDIClient'),(1, 'uMsg'),(1, 'wParam'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DefFrameProc():
    return win32more.UI.WindowsAndMessaging.DefFrameProcW
def _define_DefMDIChildProcA():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,win32more.Foundation.HWND,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM, use_last_error=False)(("DefMDIChildProcA", windll["USER32"]), ((1, 'hWnd'),(1, 'uMsg'),(1, 'wParam'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DefMDIChildProcW():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,win32more.Foundation.HWND,UInt32,win32more.Foundation.WPARAM,win32more.Foundation.LPARAM, use_last_error=False)(("DefMDIChildProcW", windll["USER32"]), ((1, 'hWnd'),(1, 'uMsg'),(1, 'wParam'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DefMDIChildProc():
    return win32more.UI.WindowsAndMessaging.DefMDIChildProcW
def _define_TranslateMDISysAccel():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,POINTER(win32more.UI.WindowsAndMessaging.MSG_head), use_last_error=False)(("TranslateMDISysAccel", windll["USER32"]), ((1, 'hWndClient'),(1, 'lpMsg'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ArrangeIconicWindows():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND, use_last_error=True)(("ArrangeIconicWindows", windll["USER32"]), ((1, 'hWnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CreateMDIWindowA():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.UI.WindowsAndMessaging.WINDOW_STYLE,Int32,Int32,Int32,Int32,win32more.Foundation.HWND,win32more.Foundation.HINSTANCE,win32more.Foundation.LPARAM, use_last_error=True)(("CreateMDIWindowA", windll["USER32"]), ((1, 'lpClassName'),(1, 'lpWindowName'),(1, 'dwStyle'),(1, 'X'),(1, 'Y'),(1, 'nWidth'),(1, 'nHeight'),(1, 'hWndParent'),(1, 'hInstance'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CreateMDIWindowW():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.UI.WindowsAndMessaging.WINDOW_STYLE,Int32,Int32,Int32,Int32,win32more.Foundation.HWND,win32more.Foundation.HINSTANCE,win32more.Foundation.LPARAM, use_last_error=True)(("CreateMDIWindowW", windll["USER32"]), ((1, 'lpClassName'),(1, 'lpWindowName'),(1, 'dwStyle'),(1, 'X'),(1, 'Y'),(1, 'nWidth'),(1, 'nHeight'),(1, 'hWndParent'),(1, 'hInstance'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CreateMDIWindow():
    return win32more.UI.WindowsAndMessaging.CreateMDIWindowW
def _define_TileWindows():
    try:
        return WINFUNCTYPE(UInt16,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.TILE_WINDOWS_HOW,POINTER(win32more.Foundation.RECT_head),UInt32,POINTER(win32more.Foundation.HWND), use_last_error=True)(("TileWindows", windll["USER32"]), ((1, 'hwndParent'),(1, 'wHow'),(1, 'lpRect'),(1, 'cKids'),(1, 'lpKids'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CascadeWindows():
    try:
        return WINFUNCTYPE(UInt16,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.CASCADE_WINDOWS_HOW,POINTER(win32more.Foundation.RECT_head),UInt32,POINTER(win32more.Foundation.HWND), use_last_error=True)(("CascadeWindows", windll["USER32"]), ((1, 'hwndParent'),(1, 'wHow'),(1, 'lpRect'),(1, 'cKids'),(1, 'lpKids'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SystemParametersInfoA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_ACTION,UInt32,c_void_p,win32more.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS, use_last_error=True)(("SystemParametersInfoA", windll["USER32"]), ((1, 'uiAction'),(1, 'uiParam'),(1, 'pvParam'),(1, 'fWinIni'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SystemParametersInfoW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_ACTION,UInt32,c_void_p,win32more.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS, use_last_error=True)(("SystemParametersInfoW", windll["USER32"]), ((1, 'uiAction'),(1, 'uiParam'),(1, 'pvParam'),(1, 'fWinIni'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SystemParametersInfo():
    return win32more.UI.WindowsAndMessaging.SystemParametersInfoW
def _define_SoundSentry():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=False)(("SoundSentry", windll["USER32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetDebugErrorLevel():
    try:
        return WINFUNCTYPE(Void,UInt32, use_last_error=False)(("SetDebugErrorLevel", windll["USER32"]), ((1, 'dwLevel'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_InternalGetWindowText():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.HWND,POINTER(Char),Int32, use_last_error=True)(("InternalGetWindowText", windll["USER32"]), ((1, 'hWnd'),(1, 'pString'),(1, 'cchMaxCount'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CancelShutdown():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=False)(("CancelShutdown", windll["USER32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetGUIThreadInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(win32more.UI.WindowsAndMessaging.GUITHREADINFO_head), use_last_error=True)(("GetGUIThreadInfo", windll["USER32"]), ((1, 'idThread'),(1, 'pgui'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetProcessDPIAware():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=False)(("SetProcessDPIAware", windll["USER32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsProcessDPIAware():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=False)(("IsProcessDPIAware", windll["USER32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_InheritWindowMonitor():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.HWND, use_last_error=False)(("InheritWindowMonitor", windll["USER32"]), ((1, 'hwnd'),(1, 'hwndInherit'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetWindowModuleFileNameA():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,POINTER(Byte),UInt32, use_last_error=False)(("GetWindowModuleFileNameA", windll["USER32"]), ((1, 'hwnd'),(1, 'pszFileName'),(1, 'cchFileNameMax'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetWindowModuleFileNameW():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,POINTER(Char),UInt32, use_last_error=False)(("GetWindowModuleFileNameW", windll["USER32"]), ((1, 'hwnd'),(1, 'pszFileName'),(1, 'cchFileNameMax'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetWindowModuleFileName():
    return win32more.UI.WindowsAndMessaging.GetWindowModuleFileNameW
def _define_GetCursorInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.UI.WindowsAndMessaging.CURSORINFO_head), use_last_error=True)(("GetCursorInfo", windll["USER32"]), ((1, 'pci'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetWindowInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,POINTER(win32more.UI.WindowsAndMessaging.WINDOWINFO_head), use_last_error=True)(("GetWindowInfo", windll["USER32"]), ((1, 'hwnd'),(1, 'pwi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetTitleBarInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,POINTER(win32more.UI.WindowsAndMessaging.TITLEBARINFO_head), use_last_error=True)(("GetTitleBarInfo", windll["USER32"]), ((1, 'hwnd'),(1, 'pti'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetMenuBarInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.OBJECT_IDENTIFIER,Int32,POINTER(win32more.UI.WindowsAndMessaging.MENUBARINFO_head), use_last_error=True)(("GetMenuBarInfo", windll["USER32"]), ((1, 'hwnd'),(1, 'idObject'),(1, 'idItem'),(1, 'pmbi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetScrollBarInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.OBJECT_IDENTIFIER,POINTER(win32more.UI.WindowsAndMessaging.SCROLLBARINFO_head), use_last_error=True)(("GetScrollBarInfo", windll["USER32"]), ((1, 'hwnd'),(1, 'idObject'),(1, 'psbi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetAncestor():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.HWND,win32more.UI.WindowsAndMessaging.GET_ANCESTOR_FLAGS, use_last_error=False)(("GetAncestor", windll["USER32"]), ((1, 'hwnd'),(1, 'gaFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_RealChildWindowFromPoint():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.HWND,win32more.Foundation.POINT, use_last_error=False)(("RealChildWindowFromPoint", windll["USER32"]), ((1, 'hwndParent'),(1, 'ptParentClientCoords'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_RealGetWindowClassA():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,POINTER(Byte),UInt32, use_last_error=False)(("RealGetWindowClassA", windll["USER32"]), ((1, 'hwnd'),(1, 'ptszClassName'),(1, 'cchClassNameMax'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_RealGetWindowClassW():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,POINTER(Char),UInt32, use_last_error=True)(("RealGetWindowClassW", windll["USER32"]), ((1, 'hwnd'),(1, 'ptszClassName'),(1, 'cchClassNameMax'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_RealGetWindowClass():
    return win32more.UI.WindowsAndMessaging.RealGetWindowClassW
def _define_GetAltTabInfoA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,Int32,POINTER(win32more.UI.WindowsAndMessaging.ALTTABINFO_head),POINTER(Byte),UInt32, use_last_error=True)(("GetAltTabInfoA", windll["USER32"]), ((1, 'hwnd'),(1, 'iItem'),(1, 'pati'),(1, 'pszItemText'),(1, 'cchItemText'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetAltTabInfoW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,Int32,POINTER(win32more.UI.WindowsAndMessaging.ALTTABINFO_head),POINTER(Char),UInt32, use_last_error=True)(("GetAltTabInfoW", windll["USER32"]), ((1, 'hwnd'),(1, 'iItem'),(1, 'pati'),(1, 'pszItemText'),(1, 'cchItemText'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetAltTabInfo():
    return win32more.UI.WindowsAndMessaging.GetAltTabInfoW
def _define_ChangeWindowMessageFilter():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.UI.WindowsAndMessaging.CHANGE_WINDOW_MESSAGE_FILTER_FLAGS, use_last_error=True)(("ChangeWindowMessageFilter", windll["USER32"]), ((1, 'message'),(1, 'dwFlag'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ChangeWindowMessageFilterEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,UInt32,win32more.UI.WindowsAndMessaging.WINDOW_MESSAGE_FILTER_ACTION,POINTER(win32more.UI.WindowsAndMessaging.CHANGEFILTERSTRUCT_head), use_last_error=True)(("ChangeWindowMessageFilterEx", windll["USER32"]), ((1, 'hwnd'),(1, 'message'),(1, 'action'),(1, 'pChangeFilterStruct'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CreateResourceIndexer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,POINTER(c_void_p), use_last_error=False)(("CreateResourceIndexer", windll["MrmSupport"]), ((1, 'projectRoot'),(1, 'extensionDllPath'),(1, 'ppResourceIndexer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DestroyResourceIndexer():
    try:
        return WINFUNCTYPE(Void,c_void_p, use_last_error=False)(("DestroyResourceIndexer", windll["MrmSupport"]), ((1, 'resourceIndexer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IndexFilePath():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,c_void_p,win32more.Foundation.PWSTR,POINTER(win32more.Foundation.PWSTR),POINTER(UInt32),POINTER(POINTER(win32more.UI.WindowsAndMessaging.IndexedResourceQualifier_head)), use_last_error=False)(("IndexFilePath", windll["MrmSupport"]), ((1, 'resourceIndexer'),(1, 'filePath'),(1, 'ppResourceUri'),(1, 'pQualifierCount'),(1, 'ppQualifiers'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DestroyIndexedResults():
    try:
        return WINFUNCTYPE(Void,win32more.Foundation.PWSTR,UInt32,POINTER(win32more.UI.WindowsAndMessaging.IndexedResourceQualifier), use_last_error=False)(("DestroyIndexedResults", windll["MrmSupport"]), ((1, 'resourceUri'),(1, 'qualifierCount'),(1, 'qualifiers'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MrmCreateResourceIndexer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.UI.WindowsAndMessaging.MrmPlatformVersion,win32more.Foundation.PWSTR,POINTER(win32more.UI.WindowsAndMessaging.MrmResourceIndexerHandle_head), use_last_error=False)(("MrmCreateResourceIndexer", windll["MrmSupport"]), ((1, 'packageFamilyName'),(1, 'projectRoot'),(1, 'platformVersion'),(1, 'defaultQualifiers'),(1, 'indexer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MrmCreateResourceIndexerFromPreviousSchemaFile():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.UI.WindowsAndMessaging.MrmPlatformVersion,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,POINTER(win32more.UI.WindowsAndMessaging.MrmResourceIndexerHandle_head), use_last_error=False)(("MrmCreateResourceIndexerFromPreviousSchemaFile", windll["MrmSupport"]), ((1, 'projectRoot'),(1, 'platformVersion'),(1, 'defaultQualifiers'),(1, 'schemaFile'),(1, 'indexer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MrmCreateResourceIndexerFromPreviousPriFile():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.UI.WindowsAndMessaging.MrmPlatformVersion,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,POINTER(win32more.UI.WindowsAndMessaging.MrmResourceIndexerHandle_head), use_last_error=False)(("MrmCreateResourceIndexerFromPreviousPriFile", windll["MrmSupport"]), ((1, 'projectRoot'),(1, 'platformVersion'),(1, 'defaultQualifiers'),(1, 'priFile'),(1, 'indexer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MrmCreateResourceIndexerFromPreviousSchemaData():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.UI.WindowsAndMessaging.MrmPlatformVersion,win32more.Foundation.PWSTR,c_char_p_no,UInt32,POINTER(win32more.UI.WindowsAndMessaging.MrmResourceIndexerHandle_head), use_last_error=False)(("MrmCreateResourceIndexerFromPreviousSchemaData", windll["MrmSupport"]), ((1, 'projectRoot'),(1, 'platformVersion'),(1, 'defaultQualifiers'),(1, 'schemaXmlData'),(1, 'schemaXmlSize'),(1, 'indexer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MrmCreateResourceIndexerFromPreviousPriData():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.UI.WindowsAndMessaging.MrmPlatformVersion,win32more.Foundation.PWSTR,c_char_p_no,UInt32,POINTER(win32more.UI.WindowsAndMessaging.MrmResourceIndexerHandle_head), use_last_error=False)(("MrmCreateResourceIndexerFromPreviousPriData", windll["MrmSupport"]), ((1, 'projectRoot'),(1, 'platformVersion'),(1, 'defaultQualifiers'),(1, 'priData'),(1, 'priSize'),(1, 'indexer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MrmCreateResourceIndexerWithFlags():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.UI.WindowsAndMessaging.MrmPlatformVersion,win32more.Foundation.PWSTR,win32more.UI.WindowsAndMessaging.MrmIndexerFlags,POINTER(win32more.UI.WindowsAndMessaging.MrmResourceIndexerHandle_head), use_last_error=False)(("MrmCreateResourceIndexerWithFlags", windll["MrmSupport"]), ((1, 'packageFamilyName'),(1, 'projectRoot'),(1, 'platformVersion'),(1, 'defaultQualifiers'),(1, 'flags'),(1, 'indexer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MrmIndexString():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.UI.WindowsAndMessaging.MrmResourceIndexerHandle,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR, use_last_error=False)(("MrmIndexString", windll["MrmSupport"]), ((1, 'indexer'),(1, 'resourceUri'),(1, 'resourceString'),(1, 'qualifiers'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MrmIndexEmbeddedData():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.UI.WindowsAndMessaging.MrmResourceIndexerHandle,win32more.Foundation.PWSTR,c_char_p_no,UInt32,win32more.Foundation.PWSTR, use_last_error=False)(("MrmIndexEmbeddedData", windll["MrmSupport"]), ((1, 'indexer'),(1, 'resourceUri'),(1, 'embeddedData'),(1, 'embeddedDataSize'),(1, 'qualifiers'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MrmIndexFile():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.UI.WindowsAndMessaging.MrmResourceIndexerHandle,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR, use_last_error=False)(("MrmIndexFile", windll["MrmSupport"]), ((1, 'indexer'),(1, 'resourceUri'),(1, 'filePath'),(1, 'qualifiers'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MrmIndexFileAutoQualifiers():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.UI.WindowsAndMessaging.MrmResourceIndexerHandle,win32more.Foundation.PWSTR, use_last_error=False)(("MrmIndexFileAutoQualifiers", windll["MrmSupport"]), ((1, 'indexer'),(1, 'filePath'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MrmIndexResourceContainerAutoQualifiers():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.UI.WindowsAndMessaging.MrmResourceIndexerHandle,win32more.Foundation.PWSTR, use_last_error=False)(("MrmIndexResourceContainerAutoQualifiers", windll["MrmSupport"]), ((1, 'indexer'),(1, 'containerPath'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MrmCreateResourceFile():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.UI.WindowsAndMessaging.MrmResourceIndexerHandle,win32more.UI.WindowsAndMessaging.MrmPackagingMode,win32more.UI.WindowsAndMessaging.MrmPackagingOptions,win32more.Foundation.PWSTR, use_last_error=False)(("MrmCreateResourceFile", windll["MrmSupport"]), ((1, 'indexer'),(1, 'packagingMode'),(1, 'packagingOptions'),(1, 'outputDirectory'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MrmCreateResourceFileWithChecksum():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.UI.WindowsAndMessaging.MrmResourceIndexerHandle,win32more.UI.WindowsAndMessaging.MrmPackagingMode,win32more.UI.WindowsAndMessaging.MrmPackagingOptions,UInt32,win32more.Foundation.PWSTR, use_last_error=False)(("MrmCreateResourceFileWithChecksum", windll["MrmSupport"]), ((1, 'indexer'),(1, 'packagingMode'),(1, 'packagingOptions'),(1, 'checksum'),(1, 'outputDirectory'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MrmCreateResourceFileInMemory():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.UI.WindowsAndMessaging.MrmResourceIndexerHandle,win32more.UI.WindowsAndMessaging.MrmPackagingMode,win32more.UI.WindowsAndMessaging.MrmPackagingOptions,POINTER(c_char_p_no),POINTER(UInt32), use_last_error=False)(("MrmCreateResourceFileInMemory", windll["MrmSupport"]), ((1, 'indexer'),(1, 'packagingMode'),(1, 'packagingOptions'),(1, 'outputPriData'),(1, 'outputPriSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MrmPeekResourceIndexerMessages():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.UI.WindowsAndMessaging.MrmResourceIndexerHandle,POINTER(POINTER(win32more.UI.WindowsAndMessaging.MrmResourceIndexerMessage_head)),POINTER(UInt32), use_last_error=False)(("MrmPeekResourceIndexerMessages", windll["MrmSupport"]), ((1, 'handle'),(1, 'messages'),(1, 'numMsgs'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MrmDestroyIndexerAndMessages():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.UI.WindowsAndMessaging.MrmResourceIndexerHandle, use_last_error=False)(("MrmDestroyIndexerAndMessages", windll["MrmSupport"]), ((1, 'indexer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MrmFreeMemory():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no, use_last_error=False)(("MrmFreeMemory", windll["MrmSupport"]), ((1, 'data'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MrmDumpPriFile():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.UI.WindowsAndMessaging.MrmDumpType,win32more.Foundation.PWSTR, use_last_error=False)(("MrmDumpPriFile", windll["MrmSupport"]), ((1, 'indexFileName'),(1, 'schemaPriFile'),(1, 'dumpType'),(1, 'outputXmlFile'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MrmDumpPriFileInMemory():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.UI.WindowsAndMessaging.MrmDumpType,POINTER(c_char_p_no),POINTER(UInt32), use_last_error=False)(("MrmDumpPriFileInMemory", windll["MrmSupport"]), ((1, 'indexFileName'),(1, 'schemaPriFile'),(1, 'dumpType'),(1, 'outputXmlData'),(1, 'outputXmlSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MrmDumpPriDataInMemory():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32,c_char_p_no,UInt32,win32more.UI.WindowsAndMessaging.MrmDumpType,POINTER(c_char_p_no),POINTER(UInt32), use_last_error=False)(("MrmDumpPriDataInMemory", windll["MrmSupport"]), ((1, 'inputPriData'),(1, 'inputPriSize'),(1, 'schemaPriData'),(1, 'schemaPriSize'),(1, 'dumpType'),(1, 'outputXmlData'),(1, 'outputXmlSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MrmCreateConfig():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.UI.WindowsAndMessaging.MrmPlatformVersion,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR, use_last_error=False)(("MrmCreateConfig", windll["MrmSupport"]), ((1, 'platformVersion'),(1, 'defaultQualifiers'),(1, 'outputXmlFile'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MrmCreateConfigInMemory():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.UI.WindowsAndMessaging.MrmPlatformVersion,win32more.Foundation.PWSTR,POINTER(c_char_p_no),POINTER(UInt32), use_last_error=False)(("MrmCreateConfigInMemory", windll["MrmSupport"]), ((1, 'platformVersion'),(1, 'defaultQualifiers'),(1, 'outputXmlData'),(1, 'outputXmlSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MrmGetPriFileContentChecksum():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(UInt32), use_last_error=False)(("MrmGetPriFileContentChecksum", windll["MrmSupport"]), ((1, 'priFile'),(1, 'checksum'),))
    except (FileNotFoundError, AttributeError):
        return None
__all__ = [
    "WM_DEVICECHANGE",
    "BSM_VXDS",
    "BSM_NETDRIVER",
    "BSM_INSTALLABLEDRIVERS",
    "RT_CURSOR",
    "RT_BITMAP",
    "RT_ICON",
    "RT_MENU",
    "RT_DIALOG",
    "RT_FONTDIR",
    "RT_FONT",
    "RT_ACCELERATOR",
    "RT_MESSAGETABLE",
    "DIFFERENCE",
    "RT_VERSION",
    "RT_DLGINCLUDE",
    "RT_PLUGPLAY",
    "RT_VXD",
    "RT_ANICURSOR",
    "RT_ANIICON",
    "RT_HTML",
    "RT_MANIFEST",
    "CREATEPROCESS_MANIFEST_RESOURCE_ID",
    "ISOLATIONAWARE_MANIFEST_RESOURCE_ID",
    "ISOLATIONAWARE_NOSTATICIMPORT_MANIFEST_RESOURCE_ID",
    "ISOLATIONPOLICY_MANIFEST_RESOURCE_ID",
    "ISOLATIONPOLICY_BROWSER_MANIFEST_RESOURCE_ID",
    "MINIMUM_RESERVED_MANIFEST_RESOURCE_ID",
    "MAXIMUM_RESERVED_MANIFEST_RESOURCE_ID",
    "SB_LINEUP",
    "SB_LINELEFT",
    "SB_LINEDOWN",
    "SB_LINERIGHT",
    "SB_PAGEUP",
    "SB_PAGELEFT",
    "SB_PAGEDOWN",
    "SB_PAGERIGHT",
    "SB_THUMBPOSITION",
    "SB_THUMBTRACK",
    "SB_TOP",
    "SB_LEFT",
    "SB_BOTTOM",
    "SB_RIGHT",
    "SB_ENDSCROLL",
    "HIDE_WINDOW",
    "SHOW_OPENWINDOW",
    "SHOW_ICONWINDOW",
    "SHOW_FULLSCREEN",
    "SHOW_OPENNOACTIVATE",
    "KF_EXTENDED",
    "KF_DLGMODE",
    "KF_MENUMODE",
    "KF_ALTDOWN",
    "KF_REPEAT",
    "KF_UP",
    "WH_MIN",
    "WH_HARDWARE",
    "WH_MAX",
    "WH_MINHOOK",
    "WH_MAXHOOK",
    "HC_ACTION",
    "HC_GETNEXT",
    "HC_SKIP",
    "HC_NOREMOVE",
    "HC_NOREM",
    "HC_SYSMODALON",
    "HC_SYSMODALOFF",
    "HCBT_MOVESIZE",
    "HCBT_MINMAX",
    "HCBT_QS",
    "HCBT_CREATEWND",
    "HCBT_DESTROYWND",
    "HCBT_ACTIVATE",
    "HCBT_CLICKSKIPPED",
    "HCBT_KEYSKIPPED",
    "HCBT_SYSCOMMAND",
    "HCBT_SETFOCUS",
    "WTS_CONSOLE_CONNECT",
    "WTS_CONSOLE_DISCONNECT",
    "WTS_REMOTE_CONNECT",
    "WTS_REMOTE_DISCONNECT",
    "WTS_SESSION_LOGON",
    "WTS_SESSION_LOGOFF",
    "WTS_SESSION_LOCK",
    "WTS_SESSION_UNLOCK",
    "WTS_SESSION_REMOTE_CONTROL",
    "WTS_SESSION_CREATE",
    "WTS_SESSION_TERMINATE",
    "MSGF_DIALOGBOX",
    "MSGF_MESSAGEBOX",
    "MSGF_MENU",
    "MSGF_SCROLLBAR",
    "MSGF_NEXTWINDOW",
    "MSGF_MAX",
    "MSGF_USER",
    "HSHELL_WINDOWCREATED",
    "HSHELL_WINDOWDESTROYED",
    "HSHELL_ACTIVATESHELLWINDOW",
    "HSHELL_WINDOWACTIVATED",
    "HSHELL_GETMINRECT",
    "HSHELL_REDRAW",
    "HSHELL_TASKMAN",
    "HSHELL_LANGUAGE",
    "HSHELL_SYSMENU",
    "HSHELL_ENDTASK",
    "HSHELL_ACCESSIBILITYSTATE",
    "HSHELL_APPCOMMAND",
    "HSHELL_WINDOWREPLACED",
    "HSHELL_WINDOWREPLACING",
    "HSHELL_MONITORCHANGED",
    "HSHELL_HIGHBIT",
    "FAPPCOMMAND_MOUSE",
    "FAPPCOMMAND_KEY",
    "FAPPCOMMAND_OEM",
    "FAPPCOMMAND_MASK",
    "LLMHF_INJECTED",
    "LLMHF_LOWER_IL_INJECTED",
    "HKL_PREV",
    "HKL_NEXT",
    "INPUTLANGCHANGE_SYSCHARSET",
    "INPUTLANGCHANGE_FORWARD",
    "INPUTLANGCHANGE_BACKWARD",
    "KL_NAMELENGTH",
    "DESKTOP_READOBJECTS",
    "DESKTOP_CREATEWINDOW",
    "DESKTOP_CREATEMENU",
    "DESKTOP_HOOKCONTROL",
    "DESKTOP_JOURNALRECORD",
    "DESKTOP_JOURNALPLAYBACK",
    "DESKTOP_ENUMERATE",
    "DESKTOP_WRITEOBJECTS",
    "DESKTOP_SWITCHDESKTOP",
    "DF_ALLOWOTHERACCOUNTHOOK",
    "WINSTA_ENUMDESKTOPS",
    "WINSTA_READATTRIBUTES",
    "WINSTA_ACCESSCLIPBOARD",
    "WINSTA_CREATEDESKTOP",
    "WINSTA_WRITEATTRIBUTES",
    "WINSTA_ACCESSGLOBALATOMS",
    "WINSTA_EXITWINDOWS",
    "WINSTA_ENUMERATE",
    "WINSTA_READSCREEN",
    "CWF_CREATE_ONLY",
    "WSF_VISIBLE",
    "UOI_TIMERPROC_EXCEPTION_SUPPRESSION",
    "WM_NULL",
    "WM_CREATE",
    "WM_DESTROY",
    "WM_MOVE",
    "WM_SIZE",
    "WM_ACTIVATE",
    "WA_INACTIVE",
    "WA_ACTIVE",
    "WA_CLICKACTIVE",
    "WM_SETFOCUS",
    "WM_KILLFOCUS",
    "WM_ENABLE",
    "WM_SETREDRAW",
    "WM_SETTEXT",
    "WM_GETTEXT",
    "WM_GETTEXTLENGTH",
    "WM_PAINT",
    "WM_CLOSE",
    "WM_QUERYENDSESSION",
    "WM_QUERYOPEN",
    "WM_ENDSESSION",
    "WM_QUIT",
    "WM_ERASEBKGND",
    "WM_SYSCOLORCHANGE",
    "WM_SHOWWINDOW",
    "WM_WININICHANGE",
    "WM_SETTINGCHANGE",
    "WM_DEVMODECHANGE",
    "WM_ACTIVATEAPP",
    "WM_FONTCHANGE",
    "WM_TIMECHANGE",
    "WM_CANCELMODE",
    "WM_SETCURSOR",
    "WM_MOUSEACTIVATE",
    "WM_CHILDACTIVATE",
    "WM_QUEUESYNC",
    "WM_GETMINMAXINFO",
    "WM_PAINTICON",
    "WM_ICONERASEBKGND",
    "WM_NEXTDLGCTL",
    "WM_SPOOLERSTATUS",
    "WM_DRAWITEM",
    "WM_MEASUREITEM",
    "WM_DELETEITEM",
    "WM_VKEYTOITEM",
    "WM_CHARTOITEM",
    "WM_SETFONT",
    "WM_GETFONT",
    "WM_SETHOTKEY",
    "WM_GETHOTKEY",
    "WM_QUERYDRAGICON",
    "WM_COMPAREITEM",
    "WM_GETOBJECT",
    "WM_COMPACTING",
    "WM_COMMNOTIFY",
    "WM_WINDOWPOSCHANGING",
    "WM_WINDOWPOSCHANGED",
    "WM_POWER",
    "PWR_OK",
    "PWR_FAIL",
    "PWR_SUSPENDREQUEST",
    "PWR_SUSPENDRESUME",
    "PWR_CRITICALRESUME",
    "WM_COPYDATA",
    "WM_CANCELJOURNAL",
    "WM_INPUTLANGCHANGEREQUEST",
    "WM_INPUTLANGCHANGE",
    "WM_TCARD",
    "WM_HELP",
    "WM_USERCHANGED",
    "WM_NOTIFYFORMAT",
    "NFR_ANSI",
    "NFR_UNICODE",
    "NF_QUERY",
    "NF_REQUERY",
    "WM_STYLECHANGING",
    "WM_STYLECHANGED",
    "WM_DISPLAYCHANGE",
    "WM_GETICON",
    "WM_SETICON",
    "WM_NCCREATE",
    "WM_NCDESTROY",
    "WM_NCCALCSIZE",
    "WM_NCHITTEST",
    "WM_NCPAINT",
    "WM_NCACTIVATE",
    "WM_GETDLGCODE",
    "WM_SYNCPAINT",
    "WM_NCMOUSEMOVE",
    "WM_NCLBUTTONDOWN",
    "WM_NCLBUTTONUP",
    "WM_NCLBUTTONDBLCLK",
    "WM_NCRBUTTONDOWN",
    "WM_NCRBUTTONUP",
    "WM_NCRBUTTONDBLCLK",
    "WM_NCMBUTTONDOWN",
    "WM_NCMBUTTONUP",
    "WM_NCMBUTTONDBLCLK",
    "WM_NCXBUTTONDOWN",
    "WM_NCXBUTTONUP",
    "WM_NCXBUTTONDBLCLK",
    "WM_INPUT_DEVICE_CHANGE",
    "WM_INPUT",
    "WM_KEYFIRST",
    "WM_KEYDOWN",
    "WM_KEYUP",
    "WM_CHAR",
    "WM_DEADCHAR",
    "WM_SYSKEYDOWN",
    "WM_SYSKEYUP",
    "WM_SYSCHAR",
    "WM_SYSDEADCHAR",
    "WM_KEYLAST",
    "UNICODE_NOCHAR",
    "WM_IME_STARTCOMPOSITION",
    "WM_IME_ENDCOMPOSITION",
    "WM_IME_COMPOSITION",
    "WM_IME_KEYLAST",
    "WM_INITDIALOG",
    "WM_COMMAND",
    "WM_SYSCOMMAND",
    "WM_TIMER",
    "WM_HSCROLL",
    "WM_VSCROLL",
    "WM_INITMENU",
    "WM_INITMENUPOPUP",
    "WM_GESTURE",
    "WM_GESTURENOTIFY",
    "WM_MENUSELECT",
    "WM_MENUCHAR",
    "WM_ENTERIDLE",
    "WM_MENURBUTTONUP",
    "WM_MENUDRAG",
    "WM_MENUGETOBJECT",
    "WM_UNINITMENUPOPUP",
    "WM_MENUCOMMAND",
    "WM_CHANGEUISTATE",
    "WM_UPDATEUISTATE",
    "WM_QUERYUISTATE",
    "UIS_SET",
    "UIS_CLEAR",
    "UIS_INITIALIZE",
    "UISF_HIDEFOCUS",
    "UISF_HIDEACCEL",
    "UISF_ACTIVE",
    "WM_CTLCOLORMSGBOX",
    "WM_CTLCOLOREDIT",
    "WM_CTLCOLORLISTBOX",
    "WM_CTLCOLORBTN",
    "WM_CTLCOLORDLG",
    "WM_CTLCOLORSCROLLBAR",
    "WM_CTLCOLORSTATIC",
    "MN_GETHMENU",
    "WM_MOUSEFIRST",
    "WM_MOUSEMOVE",
    "WM_LBUTTONDOWN",
    "WM_LBUTTONUP",
    "WM_LBUTTONDBLCLK",
    "WM_RBUTTONDOWN",
    "WM_RBUTTONUP",
    "WM_RBUTTONDBLCLK",
    "WM_MBUTTONDOWN",
    "WM_MBUTTONUP",
    "WM_MBUTTONDBLCLK",
    "WM_MOUSEWHEEL",
    "WM_XBUTTONDOWN",
    "WM_XBUTTONUP",
    "WM_XBUTTONDBLCLK",
    "WM_MOUSEHWHEEL",
    "WM_MOUSELAST",
    "WHEEL_DELTA",
    "WM_PARENTNOTIFY",
    "WM_ENTERMENULOOP",
    "WM_EXITMENULOOP",
    "WM_NEXTMENU",
    "WM_SIZING",
    "WM_CAPTURECHANGED",
    "WM_MOVING",
    "WM_POWERBROADCAST",
    "PBT_APMQUERYSUSPEND",
    "PBT_APMQUERYSTANDBY",
    "PBT_APMQUERYSUSPENDFAILED",
    "PBT_APMQUERYSTANDBYFAILED",
    "PBT_APMSUSPEND",
    "PBT_APMSTANDBY",
    "PBT_APMRESUMECRITICAL",
    "PBT_APMRESUMESUSPEND",
    "PBT_APMRESUMESTANDBY",
    "PBTF_APMRESUMEFROMFAILURE",
    "PBT_APMBATTERYLOW",
    "PBT_APMPOWERSTATUSCHANGE",
    "PBT_APMOEMEVENT",
    "PBT_APMRESUMEAUTOMATIC",
    "PBT_POWERSETTINGCHANGE",
    "WM_MDICREATE",
    "WM_MDIDESTROY",
    "WM_MDIACTIVATE",
    "WM_MDIRESTORE",
    "WM_MDINEXT",
    "WM_MDIMAXIMIZE",
    "WM_MDITILE",
    "WM_MDICASCADE",
    "WM_MDIICONARRANGE",
    "WM_MDIGETACTIVE",
    "WM_MDISETMENU",
    "WM_ENTERSIZEMOVE",
    "WM_EXITSIZEMOVE",
    "WM_DROPFILES",
    "WM_MDIREFRESHMENU",
    "WM_POINTERDEVICECHANGE",
    "WM_POINTERDEVICEINRANGE",
    "WM_POINTERDEVICEOUTOFRANGE",
    "WM_TOUCH",
    "WM_NCPOINTERUPDATE",
    "WM_NCPOINTERDOWN",
    "WM_NCPOINTERUP",
    "WM_POINTERUPDATE",
    "WM_POINTERDOWN",
    "WM_POINTERUP",
    "WM_POINTERENTER",
    "WM_POINTERLEAVE",
    "WM_POINTERACTIVATE",
    "WM_POINTERCAPTURECHANGED",
    "WM_TOUCHHITTESTING",
    "WM_POINTERWHEEL",
    "WM_POINTERHWHEEL",
    "DM_POINTERHITTEST",
    "WM_POINTERROUTEDTO",
    "WM_POINTERROUTEDAWAY",
    "WM_POINTERROUTEDRELEASED",
    "WM_IME_SETCONTEXT",
    "WM_IME_NOTIFY",
    "WM_IME_CONTROL",
    "WM_IME_COMPOSITIONFULL",
    "WM_IME_SELECT",
    "WM_IME_CHAR",
    "WM_IME_REQUEST",
    "WM_IME_KEYDOWN",
    "WM_IME_KEYUP",
    "WM_NCMOUSEHOVER",
    "WM_NCMOUSELEAVE",
    "WM_WTSSESSION_CHANGE",
    "WM_TABLET_FIRST",
    "WM_TABLET_LAST",
    "WM_DPICHANGED",
    "WM_DPICHANGED_BEFOREPARENT",
    "WM_DPICHANGED_AFTERPARENT",
    "WM_GETDPISCALEDSIZE",
    "WM_CUT",
    "WM_COPY",
    "WM_PASTE",
    "WM_CLEAR",
    "WM_UNDO",
    "WM_RENDERFORMAT",
    "WM_RENDERALLFORMATS",
    "WM_DESTROYCLIPBOARD",
    "WM_DRAWCLIPBOARD",
    "WM_PAINTCLIPBOARD",
    "WM_VSCROLLCLIPBOARD",
    "WM_SIZECLIPBOARD",
    "WM_ASKCBFORMATNAME",
    "WM_CHANGECBCHAIN",
    "WM_HSCROLLCLIPBOARD",
    "WM_QUERYNEWPALETTE",
    "WM_PALETTEISCHANGING",
    "WM_PALETTECHANGED",
    "WM_HOTKEY",
    "WM_PRINT",
    "WM_APPCOMMAND",
    "WM_THEMECHANGED",
    "WM_CLIPBOARDUPDATE",
    "WM_DWMCOMPOSITIONCHANGED",
    "WM_DWMNCRENDERINGCHANGED",
    "WM_DWMCOLORIZATIONCOLORCHANGED",
    "WM_DWMWINDOWMAXIMIZEDCHANGE",
    "WM_DWMSENDICONICTHUMBNAIL",
    "WM_DWMSENDICONICLIVEPREVIEWBITMAP",
    "WM_GETTITLEBARINFOEX",
    "WM_HANDHELDFIRST",
    "WM_HANDHELDLAST",
    "WM_AFXFIRST",
    "WM_AFXLAST",
    "WM_PENWINFIRST",
    "WM_PENWINLAST",
    "WM_APP",
    "WM_USER",
    "WMSZ_LEFT",
    "WMSZ_RIGHT",
    "WMSZ_TOP",
    "WMSZ_TOPLEFT",
    "WMSZ_TOPRIGHT",
    "WMSZ_BOTTOM",
    "WMSZ_BOTTOMLEFT",
    "WMSZ_BOTTOMRIGHT",
    "HTERROR",
    "HTTRANSPARENT",
    "HTNOWHERE",
    "HTCLIENT",
    "HTCAPTION",
    "HTSYSMENU",
    "HTGROWBOX",
    "HTSIZE",
    "HTMENU",
    "HTHSCROLL",
    "HTVSCROLL",
    "HTMINBUTTON",
    "HTMAXBUTTON",
    "HTLEFT",
    "HTRIGHT",
    "HTTOP",
    "HTTOPLEFT",
    "HTTOPRIGHT",
    "HTBOTTOM",
    "HTBOTTOMLEFT",
    "HTBOTTOMRIGHT",
    "HTBORDER",
    "HTREDUCE",
    "HTZOOM",
    "HTSIZEFIRST",
    "HTSIZELAST",
    "HTOBJECT",
    "HTCLOSE",
    "HTHELP",
    "MA_ACTIVATE",
    "MA_ACTIVATEANDEAT",
    "MA_NOACTIVATE",
    "MA_NOACTIVATEANDEAT",
    "ICON_SMALL",
    "ICON_BIG",
    "ICON_SMALL2",
    "SIZE_RESTORED",
    "SIZE_MINIMIZED",
    "SIZE_MAXIMIZED",
    "SIZE_MAXSHOW",
    "SIZE_MAXHIDE",
    "SIZENORMAL",
    "SIZEICONIC",
    "SIZEFULLSCREEN",
    "SIZEZOOMSHOW",
    "SIZEZOOMHIDE",
    "WVR_ALIGNTOP",
    "WVR_ALIGNLEFT",
    "WVR_ALIGNBOTTOM",
    "WVR_ALIGNRIGHT",
    "WVR_HREDRAW",
    "WVR_VREDRAW",
    "WVR_VALIDRECTS",
    "MK_LBUTTON",
    "MK_RBUTTON",
    "MK_SHIFT",
    "MK_CONTROL",
    "MK_MBUTTON",
    "MK_XBUTTON1",
    "MK_XBUTTON2",
    "PRF_CHECKVISIBLE",
    "PRF_NONCLIENT",
    "PRF_CLIENT",
    "PRF_ERASEBKGND",
    "PRF_CHILDREN",
    "PRF_OWNED",
    "IDANI_OPEN",
    "IDANI_CAPTION",
    "FVIRTKEY",
    "FNOINVERT",
    "FSHIFT",
    "FCONTROL",
    "FALT",
    "ODA_DRAWENTIRE",
    "ODA_SELECT",
    "ODA_FOCUS",
    "ODS_SELECTED",
    "ODS_GRAYED",
    "ODS_DISABLED",
    "ODS_CHECKED",
    "ODS_FOCUS",
    "ODS_DEFAULT",
    "ODS_COMBOBOXEDIT",
    "ODS_HOTLIGHT",
    "ODS_INACTIVE",
    "ODS_NOACCEL",
    "ODS_NOFOCUSRECT",
    "IDHOT_SNAPWINDOW",
    "IDHOT_SNAPDESKTOP",
    "ENDSESSION_CLOSEAPP",
    "ENDSESSION_CRITICAL",
    "ENDSESSION_LOGOFF",
    "EWX_FORCE",
    "EWX_FORCEIFHUNG",
    "EWX_QUICKRESOLVE",
    "EWX_BOOTOPTIONS",
    "EWX_ARSO",
    "EWX_CHECK_SAFE_FOR_SERVER",
    "EWX_SYSTEM_INITIATED",
    "BROADCAST_QUERY_DENY",
    "DEVICE_NOTIFY_ALL_INTERFACE_CLASSES",
    "HWND_MESSAGE",
    "ISMEX_NOSEND",
    "ISMEX_SEND",
    "ISMEX_NOTIFY",
    "ISMEX_CALLBACK",
    "ISMEX_REPLIED",
    "HWND_DESKTOP",
    "PW_RENDERFULLCONTENT",
    "HWND_TOP",
    "HWND_BOTTOM",
    "HWND_TOPMOST",
    "HWND_NOTOPMOST",
    "DLGWINDOWEXTRA",
    "POINTER_MOD_SHIFT",
    "POINTER_MOD_CTRL",
    "TOUCH_FLAG_NONE",
    "TOUCH_MASK_NONE",
    "TOUCH_MASK_CONTACTAREA",
    "TOUCH_MASK_ORIENTATION",
    "TOUCH_MASK_PRESSURE",
    "PEN_FLAG_NONE",
    "PEN_FLAG_BARREL",
    "PEN_FLAG_INVERTED",
    "PEN_FLAG_ERASER",
    "PEN_MASK_NONE",
    "PEN_MASK_PRESSURE",
    "PEN_MASK_ROTATION",
    "PEN_MASK_TILT_X",
    "PEN_MASK_TILT_Y",
    "POINTER_MESSAGE_FLAG_NEW",
    "POINTER_MESSAGE_FLAG_INRANGE",
    "POINTER_MESSAGE_FLAG_INCONTACT",
    "POINTER_MESSAGE_FLAG_FIRSTBUTTON",
    "POINTER_MESSAGE_FLAG_SECONDBUTTON",
    "POINTER_MESSAGE_FLAG_THIRDBUTTON",
    "POINTER_MESSAGE_FLAG_FOURTHBUTTON",
    "POINTER_MESSAGE_FLAG_FIFTHBUTTON",
    "POINTER_MESSAGE_FLAG_PRIMARY",
    "POINTER_MESSAGE_FLAG_CONFIDENCE",
    "POINTER_MESSAGE_FLAG_CANCELED",
    "PA_ACTIVATE",
    "PA_NOACTIVATE",
    "MAX_TOUCH_COUNT",
    "TOUCH_HIT_TESTING_DEFAULT",
    "TOUCH_HIT_TESTING_CLIENT",
    "TOUCH_HIT_TESTING_NONE",
    "TOUCH_HIT_TESTING_PROXIMITY_CLOSEST",
    "TOUCH_HIT_TESTING_PROXIMITY_FARTHEST",
    "GWFS_INCLUDE_ANCESTORS",
    "MAPVK_VK_TO_VSC",
    "MAPVK_VSC_TO_VK",
    "MAPVK_VK_TO_CHAR",
    "MAPVK_VSC_TO_VK_EX",
    "MAPVK_VK_TO_VSC_EX",
    "QS_TOUCH",
    "QS_POINTER",
    "USER_TIMER_MAXIMUM",
    "USER_TIMER_MINIMUM",
    "TIMERV_DEFAULT_COALESCING",
    "TIMERV_NO_COALESCING",
    "TIMERV_COALESCING_MIN",
    "TIMERV_COALESCING_MAX",
    "SM_RESERVED1",
    "SM_RESERVED2",
    "SM_RESERVED3",
    "SM_RESERVED4",
    "SM_CMETRICS",
    "SM_CARETBLINKINGENABLED",
    "SM_SYSTEMDOCKED",
    "PMB_ACTIVE",
    "MNC_IGNORE",
    "MNC_CLOSE",
    "MNC_EXECUTE",
    "MNC_SELECT",
    "MND_CONTINUE",
    "MND_ENDMENU",
    "MNGO_NOINTERFACE",
    "MNGO_NOERROR",
    "DOF_EXECUTABLE",
    "DOF_DOCUMENT",
    "DOF_DIRECTORY",
    "DOF_MULTIPLE",
    "DOF_PROGMAN",
    "DOF_SHELLDATA",
    "DO_DROPFILE",
    "DO_PRINTFILE",
    "ASFW_ANY",
    "DCX_EXCLUDEUPDATE",
    "HELPINFO_WINDOW",
    "HELPINFO_MENUITEM",
    "CTLCOLOR_MSGBOX",
    "CTLCOLOR_EDIT",
    "CTLCOLOR_LISTBOX",
    "CTLCOLOR_BTN",
    "CTLCOLOR_DLG",
    "CTLCOLOR_SCROLLBAR",
    "CTLCOLOR_STATIC",
    "CTLCOLOR_MAX",
    "COLOR_BTNHIGHLIGHT",
    "COLOR_BTNHILIGHT",
    "GW_MAX",
    "SC_SIZE",
    "SC_MOVE",
    "SC_MINIMIZE",
    "SC_MAXIMIZE",
    "SC_NEXTWINDOW",
    "SC_PREVWINDOW",
    "SC_CLOSE",
    "SC_VSCROLL",
    "SC_HSCROLL",
    "SC_MOUSEMENU",
    "SC_KEYMENU",
    "SC_ARRANGE",
    "SC_RESTORE",
    "SC_TASKLIST",
    "SC_HOTKEY",
    "SC_DEFAULT",
    "SC_MONITORPOWER",
    "SC_CONTEXTHELP",
    "SC_SEPARATOR",
    "SCF_ISSECURE",
    "SC_ICON",
    "SC_ZOOM",
    "IDC_ARROW",
    "IDC_IBEAM",
    "IDC_WAIT",
    "IDC_CROSS",
    "IDC_UPARROW",
    "IDC_SIZE",
    "IDC_ICON",
    "IDC_SIZENWSE",
    "IDC_SIZENESW",
    "IDC_SIZEWE",
    "IDC_SIZENS",
    "IDC_SIZEALL",
    "IDC_NO",
    "IDC_HAND",
    "IDC_APPSTARTING",
    "IDC_HELP",
    "IDC_PIN",
    "IDC_PERSON",
    "CURSOR_CREATION_SCALING_NONE",
    "CURSOR_CREATION_SCALING_DEFAULT",
    "IMAGE_ENHMETAFILE",
    "LR_COLOR",
    "RES_ICON",
    "RES_CURSOR",
    "OBM_CLOSE",
    "OBM_UPARROW",
    "OBM_DNARROW",
    "OBM_RGARROW",
    "OBM_LFARROW",
    "OBM_REDUCE",
    "OBM_ZOOM",
    "OBM_RESTORE",
    "OBM_REDUCED",
    "OBM_ZOOMD",
    "OBM_RESTORED",
    "OBM_UPARROWD",
    "OBM_DNARROWD",
    "OBM_RGARROWD",
    "OBM_LFARROWD",
    "OBM_MNARROW",
    "OBM_COMBO",
    "OBM_UPARROWI",
    "OBM_DNARROWI",
    "OBM_RGARROWI",
    "OBM_LFARROWI",
    "OBM_OLD_CLOSE",
    "OBM_SIZE",
    "OBM_OLD_UPARROW",
    "OBM_OLD_DNARROW",
    "OBM_OLD_RGARROW",
    "OBM_OLD_LFARROW",
    "OBM_BTSIZE",
    "OBM_CHECK",
    "OBM_CHECKBOXES",
    "OBM_BTNCORNERS",
    "OBM_OLD_REDUCE",
    "OBM_OLD_ZOOM",
    "OBM_OLD_RESTORE",
    "OCR_SIZE",
    "OCR_ICON",
    "OCR_ICOCUR",
    "OIC_SAMPLE",
    "OIC_HAND",
    "OIC_QUES",
    "OIC_BANG",
    "OIC_NOTE",
    "OIC_WINLOGO",
    "OIC_WARNING",
    "OIC_ERROR",
    "OIC_INFORMATION",
    "OIC_SHIELD",
    "ORD_LANGDRIVER",
    "IDI_APPLICATION",
    "IDI_HAND",
    "IDI_QUESTION",
    "IDI_EXCLAMATION",
    "IDI_ASTERISK",
    "IDI_WINLOGO",
    "IDI_SHIELD",
    "IDI_WARNING",
    "IDI_ERROR",
    "IDI_INFORMATION",
    "ES_LEFT",
    "ES_CENTER",
    "ES_RIGHT",
    "ES_MULTILINE",
    "ES_UPPERCASE",
    "ES_LOWERCASE",
    "ES_PASSWORD",
    "ES_AUTOVSCROLL",
    "ES_AUTOHSCROLL",
    "ES_NOHIDESEL",
    "ES_OEMCONVERT",
    "ES_READONLY",
    "ES_WANTRETURN",
    "ES_NUMBER",
    "EN_SETFOCUS",
    "EN_KILLFOCUS",
    "EN_CHANGE",
    "EN_UPDATE",
    "EN_ERRSPACE",
    "EN_MAXTEXT",
    "EN_HSCROLL",
    "EN_VSCROLL",
    "EN_ALIGN_LTR_EC",
    "EN_ALIGN_RTL_EC",
    "EN_BEFORE_PASTE",
    "EN_AFTER_PASTE",
    "EC_LEFTMARGIN",
    "EC_RIGHTMARGIN",
    "EC_USEFONTINFO",
    "EMSIS_COMPOSITIONSTRING",
    "EIMES_GETCOMPSTRATONCE",
    "EIMES_CANCELCOMPSTRINFOCUS",
    "EIMES_COMPLETECOMPSTRKILLFOCUS",
    "BS_PUSHBUTTON",
    "BS_DEFPUSHBUTTON",
    "BS_CHECKBOX",
    "BS_AUTOCHECKBOX",
    "BS_RADIOBUTTON",
    "BS_3STATE",
    "BS_AUTO3STATE",
    "BS_GROUPBOX",
    "BS_USERBUTTON",
    "BS_AUTORADIOBUTTON",
    "BS_PUSHBOX",
    "BS_OWNERDRAW",
    "BS_TYPEMASK",
    "BS_LEFTTEXT",
    "BS_TEXT",
    "BS_ICON",
    "BS_BITMAP",
    "BS_LEFT",
    "BS_RIGHT",
    "BS_CENTER",
    "BS_TOP",
    "BS_BOTTOM",
    "BS_VCENTER",
    "BS_PUSHLIKE",
    "BS_MULTILINE",
    "BS_NOTIFY",
    "BS_FLAT",
    "BS_RIGHTBUTTON",
    "BN_CLICKED",
    "BN_PAINT",
    "BN_HILITE",
    "BN_UNHILITE",
    "BN_DISABLE",
    "BN_DOUBLECLICKED",
    "BN_PUSHED",
    "BN_UNPUSHED",
    "BN_DBLCLK",
    "BN_SETFOCUS",
    "BN_KILLFOCUS",
    "BM_GETCHECK",
    "BM_SETCHECK",
    "BM_GETSTATE",
    "BM_SETSTATE",
    "BM_SETSTYLE",
    "BM_CLICK",
    "BM_GETIMAGE",
    "BM_SETIMAGE",
    "BM_SETDONTCLICK",
    "BST_PUSHED",
    "BST_FOCUS",
    "SS_LEFT",
    "SS_CENTER",
    "SS_RIGHT",
    "SS_ICON",
    "SS_BLACKRECT",
    "SS_GRAYRECT",
    "SS_WHITERECT",
    "SS_BLACKFRAME",
    "SS_GRAYFRAME",
    "SS_WHITEFRAME",
    "SS_USERITEM",
    "SS_SIMPLE",
    "SS_LEFTNOWORDWRAP",
    "SS_OWNERDRAW",
    "SS_BITMAP",
    "SS_ENHMETAFILE",
    "SS_ETCHEDHORZ",
    "SS_ETCHEDVERT",
    "SS_ETCHEDFRAME",
    "SS_TYPEMASK",
    "SS_REALSIZECONTROL",
    "SS_NOPREFIX",
    "SS_NOTIFY",
    "SS_CENTERIMAGE",
    "SS_RIGHTJUST",
    "SS_REALSIZEIMAGE",
    "SS_SUNKEN",
    "SS_EDITCONTROL",
    "SS_ENDELLIPSIS",
    "SS_PATHELLIPSIS",
    "SS_WORDELLIPSIS",
    "SS_ELLIPSISMASK",
    "STM_SETICON",
    "STM_GETICON",
    "STM_SETIMAGE",
    "STM_GETIMAGE",
    "STN_CLICKED",
    "STN_DBLCLK",
    "STN_ENABLE",
    "STN_DISABLE",
    "STM_MSGMAX",
    "DWL_MSGRESULT",
    "DWL_DLGPROC",
    "DWL_USER",
    "DWLP_MSGRESULT",
    "DS_ABSALIGN",
    "DS_SYSMODAL",
    "DS_LOCALEDIT",
    "DS_SETFONT",
    "DS_MODALFRAME",
    "DS_NOIDLEMSG",
    "DS_SETFOREGROUND",
    "DS_3DLOOK",
    "DS_FIXEDSYS",
    "DS_NOFAILCREATE",
    "DS_CONTROL",
    "DS_CENTER",
    "DS_CENTERMOUSE",
    "DS_CONTEXTHELP",
    "DS_USEPIXELS",
    "DM_GETDEFID",
    "DM_SETDEFID",
    "DM_REPOSITION",
    "DC_HASDEFID",
    "DLGC_WANTARROWS",
    "DLGC_WANTTAB",
    "DLGC_WANTALLKEYS",
    "DLGC_WANTMESSAGE",
    "DLGC_HASSETSEL",
    "DLGC_DEFPUSHBUTTON",
    "DLGC_UNDEFPUSHBUTTON",
    "DLGC_RADIOBUTTON",
    "DLGC_WANTCHARS",
    "DLGC_STATIC",
    "DLGC_BUTTON",
    "LB_CTLCODE",
    "LB_OKAY",
    "LB_ERR",
    "LB_ERRSPACE",
    "LBN_ERRSPACE",
    "LBN_SELCHANGE",
    "LBN_DBLCLK",
    "LBN_SELCANCEL",
    "LBN_SETFOCUS",
    "LBN_KILLFOCUS",
    "LB_ADDSTRING",
    "LB_INSERTSTRING",
    "LB_DELETESTRING",
    "LB_SELITEMRANGEEX",
    "LB_RESETCONTENT",
    "LB_SETSEL",
    "LB_SETCURSEL",
    "LB_GETSEL",
    "LB_GETCURSEL",
    "LB_GETTEXT",
    "LB_GETTEXTLEN",
    "LB_GETCOUNT",
    "LB_SELECTSTRING",
    "LB_DIR",
    "LB_GETTOPINDEX",
    "LB_FINDSTRING",
    "LB_GETSELCOUNT",
    "LB_GETSELITEMS",
    "LB_SETTABSTOPS",
    "LB_GETHORIZONTALEXTENT",
    "LB_SETHORIZONTALEXTENT",
    "LB_SETCOLUMNWIDTH",
    "LB_ADDFILE",
    "LB_SETTOPINDEX",
    "LB_GETITEMRECT",
    "LB_GETITEMDATA",
    "LB_SETITEMDATA",
    "LB_SELITEMRANGE",
    "LB_SETANCHORINDEX",
    "LB_GETANCHORINDEX",
    "LB_SETCARETINDEX",
    "LB_GETCARETINDEX",
    "LB_SETITEMHEIGHT",
    "LB_GETITEMHEIGHT",
    "LB_FINDSTRINGEXACT",
    "LB_SETLOCALE",
    "LB_GETLOCALE",
    "LB_SETCOUNT",
    "LB_INITSTORAGE",
    "LB_ITEMFROMPOINT",
    "LB_MULTIPLEADDSTRING",
    "LB_GETLISTBOXINFO",
    "LB_MSGMAX",
    "LBS_NOTIFY",
    "LBS_SORT",
    "LBS_NOREDRAW",
    "LBS_MULTIPLESEL",
    "LBS_OWNERDRAWFIXED",
    "LBS_OWNERDRAWVARIABLE",
    "LBS_HASSTRINGS",
    "LBS_USETABSTOPS",
    "LBS_NOINTEGRALHEIGHT",
    "LBS_MULTICOLUMN",
    "LBS_WANTKEYBOARDINPUT",
    "LBS_EXTENDEDSEL",
    "LBS_DISABLENOSCROLL",
    "LBS_NODATA",
    "LBS_NOSEL",
    "LBS_COMBOBOX",
    "CB_OKAY",
    "CB_ERR",
    "CB_ERRSPACE",
    "CBN_ERRSPACE",
    "CBN_SELCHANGE",
    "CBN_DBLCLK",
    "CBN_SETFOCUS",
    "CBN_KILLFOCUS",
    "CBN_EDITCHANGE",
    "CBN_EDITUPDATE",
    "CBN_DROPDOWN",
    "CBN_CLOSEUP",
    "CBN_SELENDOK",
    "CBN_SELENDCANCEL",
    "CBS_SIMPLE",
    "CBS_DROPDOWN",
    "CBS_DROPDOWNLIST",
    "CBS_OWNERDRAWFIXED",
    "CBS_OWNERDRAWVARIABLE",
    "CBS_AUTOHSCROLL",
    "CBS_OEMCONVERT",
    "CBS_SORT",
    "CBS_HASSTRINGS",
    "CBS_NOINTEGRALHEIGHT",
    "CBS_DISABLENOSCROLL",
    "CBS_UPPERCASE",
    "CBS_LOWERCASE",
    "CB_GETEDITSEL",
    "CB_LIMITTEXT",
    "CB_SETEDITSEL",
    "CB_ADDSTRING",
    "CB_DELETESTRING",
    "CB_DIR",
    "CB_GETCOUNT",
    "CB_GETCURSEL",
    "CB_GETLBTEXT",
    "CB_GETLBTEXTLEN",
    "CB_INSERTSTRING",
    "CB_RESETCONTENT",
    "CB_FINDSTRING",
    "CB_SELECTSTRING",
    "CB_SETCURSEL",
    "CB_SHOWDROPDOWN",
    "CB_GETITEMDATA",
    "CB_SETITEMDATA",
    "CB_GETDROPPEDCONTROLRECT",
    "CB_SETITEMHEIGHT",
    "CB_GETITEMHEIGHT",
    "CB_SETEXTENDEDUI",
    "CB_GETEXTENDEDUI",
    "CB_GETDROPPEDSTATE",
    "CB_FINDSTRINGEXACT",
    "CB_SETLOCALE",
    "CB_GETLOCALE",
    "CB_GETTOPINDEX",
    "CB_SETTOPINDEX",
    "CB_GETHORIZONTALEXTENT",
    "CB_SETHORIZONTALEXTENT",
    "CB_GETDROPPEDWIDTH",
    "CB_SETDROPPEDWIDTH",
    "CB_INITSTORAGE",
    "CB_MULTIPLEADDSTRING",
    "CB_GETCOMBOBOXINFO",
    "CB_MSGMAX",
    "SBS_HORZ",
    "SBS_VERT",
    "SBS_TOPALIGN",
    "SBS_LEFTALIGN",
    "SBS_BOTTOMALIGN",
    "SBS_RIGHTALIGN",
    "SBS_SIZEBOXTOPLEFTALIGN",
    "SBS_SIZEBOXBOTTOMRIGHTALIGN",
    "SBS_SIZEBOX",
    "SBS_SIZEGRIP",
    "SBM_SETPOS",
    "SBM_GETPOS",
    "SBM_SETRANGE",
    "SBM_SETRANGEREDRAW",
    "SBM_GETRANGE",
    "SBM_ENABLE_ARROWS",
    "SBM_SETSCROLLINFO",
    "SBM_GETSCROLLINFO",
    "SBM_GETSCROLLBARINFO",
    "MDIS_ALLCHILDSTYLES",
    "HELP_CONTEXT",
    "HELP_QUIT",
    "HELP_INDEX",
    "HELP_CONTENTS",
    "HELP_HELPONHELP",
    "HELP_SETINDEX",
    "HELP_SETCONTENTS",
    "HELP_CONTEXTPOPUP",
    "HELP_FORCEFILE",
    "HELP_KEY",
    "HELP_COMMAND",
    "HELP_PARTIALKEY",
    "HELP_MULTIKEY",
    "HELP_SETWINPOS",
    "HELP_CONTEXTMENU",
    "HELP_FINDER",
    "HELP_WM_HELP",
    "HELP_SETPOPUP_POS",
    "HELP_TCARD",
    "HELP_TCARD_DATA",
    "HELP_TCARD_OTHER_CALLER",
    "IDH_NO_HELP",
    "IDH_MISSING_CONTEXT",
    "IDH_GENERIC_HELP_BUTTON",
    "IDH_OK",
    "IDH_CANCEL",
    "IDH_HELP",
    "MAX_TOUCH_PREDICTION_FILTER_TAPS",
    "TOUCHPREDICTIONPARAMETERS_DEFAULT_LATENCY",
    "TOUCHPREDICTIONPARAMETERS_DEFAULT_SAMPLETIME",
    "TOUCHPREDICTIONPARAMETERS_DEFAULT_USE_HW_TIMESTAMP",
    "TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_DELTA",
    "TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MIN",
    "TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MAX",
    "TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_LEARNING_RATE",
    "TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_EXPO_SMOOTH_ALPHA",
    "MAX_LOGICALDPIOVERRIDE",
    "MIN_LOGICALDPIOVERRIDE",
    "FE_FONTSMOOTHINGSTANDARD",
    "FE_FONTSMOOTHINGCLEARTYPE",
    "FE_FONTSMOOTHINGORIENTATIONBGR",
    "FE_FONTSMOOTHINGORIENTATIONRGB",
    "CONTACTVISUALIZATION_OFF",
    "CONTACTVISUALIZATION_ON",
    "CONTACTVISUALIZATION_PRESENTATIONMODE",
    "GESTUREVISUALIZATION_OFF",
    "GESTUREVISUALIZATION_ON",
    "GESTUREVISUALIZATION_TAP",
    "GESTUREVISUALIZATION_DOUBLETAP",
    "GESTUREVISUALIZATION_PRESSANDTAP",
    "GESTUREVISUALIZATION_PRESSANDHOLD",
    "GESTUREVISUALIZATION_RIGHTTAP",
    "MOUSEWHEEL_ROUTING_FOCUS",
    "MOUSEWHEEL_ROUTING_HYBRID",
    "MOUSEWHEEL_ROUTING_MOUSE_POS",
    "PENVISUALIZATION_ON",
    "PENVISUALIZATION_OFF",
    "PENVISUALIZATION_TAP",
    "PENVISUALIZATION_DOUBLETAP",
    "PENVISUALIZATION_CURSOR",
    "PENARBITRATIONTYPE_NONE",
    "PENARBITRATIONTYPE_WIN8",
    "PENARBITRATIONTYPE_FIS",
    "PENARBITRATIONTYPE_SPT",
    "PENARBITRATIONTYPE_MAX",
    "METRICS_USEDEFAULT",
    "ARW_STARTMASK",
    "ARW_STARTRIGHT",
    "ARW_STARTTOP",
    "ARW_LEFT",
    "ARW_RIGHT",
    "ARW_UP",
    "ARW_DOWN",
    "ARW_HIDE",
    "HCF_LOGONDESKTOP",
    "HCF_DEFAULTDESKTOP",
    "EDS_RAWMODE",
    "EDS_ROTATEDMODE",
    "EDD_GET_DEVICE_INTERFACE_NAME",
    "FKF_FILTERKEYSON",
    "FKF_AVAILABLE",
    "FKF_HOTKEYACTIVE",
    "FKF_CONFIRMHOTKEY",
    "FKF_HOTKEYSOUND",
    "FKF_INDICATOR",
    "FKF_CLICKON",
    "MKF_MOUSEKEYSON",
    "MKF_AVAILABLE",
    "MKF_HOTKEYACTIVE",
    "MKF_CONFIRMHOTKEY",
    "MKF_HOTKEYSOUND",
    "MKF_INDICATOR",
    "MKF_MODIFIERS",
    "MKF_REPLACENUMBERS",
    "MKF_LEFTBUTTONSEL",
    "MKF_RIGHTBUTTONSEL",
    "MKF_LEFTBUTTONDOWN",
    "MKF_RIGHTBUTTONDOWN",
    "MKF_MOUSEMODE",
    "TKF_TOGGLEKEYSON",
    "TKF_AVAILABLE",
    "TKF_HOTKEYACTIVE",
    "TKF_CONFIRMHOTKEY",
    "TKF_HOTKEYSOUND",
    "TKF_INDICATOR",
    "MONITORINFOF_PRIMARY",
    "WINEVENT_OUTOFCONTEXT",
    "WINEVENT_SKIPOWNTHREAD",
    "WINEVENT_SKIPOWNPROCESS",
    "WINEVENT_INCONTEXT",
    "CHILDID_SELF",
    "INDEXID_OBJECT",
    "INDEXID_CONTAINER",
    "EVENT_MIN",
    "EVENT_MAX",
    "EVENT_SYSTEM_SOUND",
    "EVENT_SYSTEM_ALERT",
    "EVENT_SYSTEM_FOREGROUND",
    "EVENT_SYSTEM_MENUSTART",
    "EVENT_SYSTEM_MENUEND",
    "EVENT_SYSTEM_MENUPOPUPSTART",
    "EVENT_SYSTEM_MENUPOPUPEND",
    "EVENT_SYSTEM_CAPTURESTART",
    "EVENT_SYSTEM_CAPTUREEND",
    "EVENT_SYSTEM_MOVESIZESTART",
    "EVENT_SYSTEM_MOVESIZEEND",
    "EVENT_SYSTEM_CONTEXTHELPSTART",
    "EVENT_SYSTEM_CONTEXTHELPEND",
    "EVENT_SYSTEM_DRAGDROPSTART",
    "EVENT_SYSTEM_DRAGDROPEND",
    "EVENT_SYSTEM_DIALOGSTART",
    "EVENT_SYSTEM_DIALOGEND",
    "EVENT_SYSTEM_SCROLLINGSTART",
    "EVENT_SYSTEM_SCROLLINGEND",
    "EVENT_SYSTEM_SWITCHSTART",
    "EVENT_SYSTEM_SWITCHEND",
    "EVENT_SYSTEM_MINIMIZESTART",
    "EVENT_SYSTEM_MINIMIZEEND",
    "EVENT_SYSTEM_DESKTOPSWITCH",
    "EVENT_SYSTEM_SWITCHER_APPGRABBED",
    "EVENT_SYSTEM_SWITCHER_APPOVERTARGET",
    "EVENT_SYSTEM_SWITCHER_APPDROPPED",
    "EVENT_SYSTEM_SWITCHER_CANCELLED",
    "EVENT_SYSTEM_IME_KEY_NOTIFICATION",
    "EVENT_SYSTEM_END",
    "EVENT_OEM_DEFINED_START",
    "EVENT_OEM_DEFINED_END",
    "EVENT_UIA_EVENTID_START",
    "EVENT_UIA_EVENTID_END",
    "EVENT_UIA_PROPID_START",
    "EVENT_UIA_PROPID_END",
    "EVENT_CONSOLE_CARET",
    "EVENT_CONSOLE_UPDATE_REGION",
    "EVENT_CONSOLE_UPDATE_SIMPLE",
    "EVENT_CONSOLE_UPDATE_SCROLL",
    "EVENT_CONSOLE_LAYOUT",
    "EVENT_CONSOLE_START_APPLICATION",
    "EVENT_CONSOLE_END_APPLICATION",
    "CONSOLE_APPLICATION_16BIT",
    "CONSOLE_CARET_SELECTION",
    "CONSOLE_CARET_VISIBLE",
    "EVENT_CONSOLE_END",
    "EVENT_OBJECT_CREATE",
    "EVENT_OBJECT_DESTROY",
    "EVENT_OBJECT_SHOW",
    "EVENT_OBJECT_HIDE",
    "EVENT_OBJECT_REORDER",
    "EVENT_OBJECT_FOCUS",
    "EVENT_OBJECT_SELECTION",
    "EVENT_OBJECT_SELECTIONADD",
    "EVENT_OBJECT_SELECTIONREMOVE",
    "EVENT_OBJECT_SELECTIONWITHIN",
    "EVENT_OBJECT_STATECHANGE",
    "EVENT_OBJECT_LOCATIONCHANGE",
    "EVENT_OBJECT_NAMECHANGE",
    "EVENT_OBJECT_DESCRIPTIONCHANGE",
    "EVENT_OBJECT_VALUECHANGE",
    "EVENT_OBJECT_PARENTCHANGE",
    "EVENT_OBJECT_HELPCHANGE",
    "EVENT_OBJECT_DEFACTIONCHANGE",
    "EVENT_OBJECT_ACCELERATORCHANGE",
    "EVENT_OBJECT_INVOKED",
    "EVENT_OBJECT_TEXTSELECTIONCHANGED",
    "EVENT_OBJECT_CONTENTSCROLLED",
    "EVENT_SYSTEM_ARRANGMENTPREVIEW",
    "EVENT_OBJECT_CLOAKED",
    "EVENT_OBJECT_UNCLOAKED",
    "EVENT_OBJECT_LIVEREGIONCHANGED",
    "EVENT_OBJECT_HOSTEDOBJECTSINVALIDATED",
    "EVENT_OBJECT_DRAGSTART",
    "EVENT_OBJECT_DRAGCANCEL",
    "EVENT_OBJECT_DRAGCOMPLETE",
    "EVENT_OBJECT_DRAGENTER",
    "EVENT_OBJECT_DRAGLEAVE",
    "EVENT_OBJECT_DRAGDROPPED",
    "EVENT_OBJECT_IME_SHOW",
    "EVENT_OBJECT_IME_HIDE",
    "EVENT_OBJECT_IME_CHANGE",
    "EVENT_OBJECT_TEXTEDIT_CONVERSIONTARGETCHANGED",
    "EVENT_OBJECT_END",
    "EVENT_AIA_START",
    "EVENT_AIA_END",
    "SOUND_SYSTEM_STARTUP",
    "SOUND_SYSTEM_SHUTDOWN",
    "SOUND_SYSTEM_BEEP",
    "SOUND_SYSTEM_ERROR",
    "SOUND_SYSTEM_QUESTION",
    "SOUND_SYSTEM_WARNING",
    "SOUND_SYSTEM_INFORMATION",
    "SOUND_SYSTEM_MAXIMIZE",
    "SOUND_SYSTEM_MINIMIZE",
    "SOUND_SYSTEM_RESTOREUP",
    "SOUND_SYSTEM_RESTOREDOWN",
    "SOUND_SYSTEM_APPSTART",
    "SOUND_SYSTEM_FAULT",
    "SOUND_SYSTEM_APPEND",
    "SOUND_SYSTEM_MENUCOMMAND",
    "SOUND_SYSTEM_MENUPOPUP",
    "CSOUND_SYSTEM",
    "CALERT_SYSTEM",
    "GUI_16BITTASK",
    "USER_DEFAULT_SCREEN_DPI",
    "STATE_SYSTEM_SELECTED",
    "STATE_SYSTEM_FOCUSED",
    "STATE_SYSTEM_CHECKED",
    "STATE_SYSTEM_MIXED",
    "STATE_SYSTEM_INDETERMINATE",
    "STATE_SYSTEM_READONLY",
    "STATE_SYSTEM_HOTTRACKED",
    "STATE_SYSTEM_DEFAULT",
    "STATE_SYSTEM_EXPANDED",
    "STATE_SYSTEM_COLLAPSED",
    "STATE_SYSTEM_BUSY",
    "STATE_SYSTEM_FLOATING",
    "STATE_SYSTEM_MARQUEED",
    "STATE_SYSTEM_ANIMATED",
    "STATE_SYSTEM_SIZEABLE",
    "STATE_SYSTEM_MOVEABLE",
    "STATE_SYSTEM_SELFVOICING",
    "STATE_SYSTEM_SELECTABLE",
    "STATE_SYSTEM_LINKED",
    "STATE_SYSTEM_TRAVERSED",
    "STATE_SYSTEM_MULTISELECTABLE",
    "STATE_SYSTEM_EXTSELECTABLE",
    "STATE_SYSTEM_ALERT_LOW",
    "STATE_SYSTEM_ALERT_MEDIUM",
    "STATE_SYSTEM_ALERT_HIGH",
    "STATE_SYSTEM_PROTECTED",
    "STATE_SYSTEM_VALID",
    "CCHILDREN_TITLEBAR",
    "CCHILDREN_SCROLLBAR",
    "RIM_INPUT",
    "RIM_INPUTSINK",
    "RIM_TYPEMAX",
    "RI_MOUSE_LEFT_BUTTON_DOWN",
    "RI_MOUSE_LEFT_BUTTON_UP",
    "RI_MOUSE_RIGHT_BUTTON_DOWN",
    "RI_MOUSE_RIGHT_BUTTON_UP",
    "RI_MOUSE_MIDDLE_BUTTON_DOWN",
    "RI_MOUSE_MIDDLE_BUTTON_UP",
    "RI_MOUSE_BUTTON_1_DOWN",
    "RI_MOUSE_BUTTON_1_UP",
    "RI_MOUSE_BUTTON_2_DOWN",
    "RI_MOUSE_BUTTON_2_UP",
    "RI_MOUSE_BUTTON_3_DOWN",
    "RI_MOUSE_BUTTON_3_UP",
    "RI_MOUSE_BUTTON_4_DOWN",
    "RI_MOUSE_BUTTON_4_UP",
    "RI_MOUSE_BUTTON_5_DOWN",
    "RI_MOUSE_BUTTON_5_UP",
    "RI_MOUSE_WHEEL",
    "RI_MOUSE_HWHEEL",
    "RI_KEY_MAKE",
    "RI_KEY_BREAK",
    "RI_KEY_E0",
    "RI_KEY_E1",
    "RI_KEY_TERMSRV_SET_LED",
    "RI_KEY_TERMSRV_SHADOW",
    "RIDEV_EXMODEMASK",
    "GIDC_ARRIVAL",
    "GIDC_REMOVAL",
    "POINTER_DEVICE_PRODUCT_STRING_MAX",
    "PDC_ARRIVAL",
    "PDC_REMOVAL",
    "PDC_ORIENTATION_0",
    "PDC_ORIENTATION_90",
    "PDC_ORIENTATION_180",
    "PDC_ORIENTATION_270",
    "PDC_MODE_DEFAULT",
    "PDC_MODE_CENTERED",
    "PDC_MAPPING_CHANGE",
    "PDC_RESOLUTION",
    "PDC_ORIGIN",
    "PDC_MODE_ASPECTRATIOPRESERVED",
    "GF_BEGIN",
    "GF_INERTIA",
    "GF_END",
    "GESTURECONFIGMAXCOUNT",
    "GCF_INCLUDE_ANCESTORS",
    "NID_INTEGRATED_TOUCH",
    "NID_EXTERNAL_TOUCH",
    "NID_INTEGRATED_PEN",
    "NID_EXTERNAL_PEN",
    "NID_MULTI_INPUT",
    "NID_READY",
    "MAX_STR_BLOCKREASON",
    "STRSAFE_USE_SECURE_CRT",
    "STRSAFE_MAX_CCH",
    "STRSAFE_IGNORE_NULLS",
    "STRSAFE_FILL_BEHIND_NULL",
    "STRSAFE_FILL_ON_FAILURE",
    "STRSAFE_NULL_ON_FAILURE",
    "STRSAFE_NO_TRUNCATION",
    "STRSAFE_E_INSUFFICIENT_BUFFER",
    "STRSAFE_E_INVALID_PARAMETER",
    "STRSAFE_E_END_OF_FILE",
    "__WARNING_CYCLOMATIC_COMPLEXITY",
    "__WARNING_USING_UNINIT_VAR",
    "__WARNING_RETURN_UNINIT_VAR",
    "__WARNING_DEREF_NULL_PTR",
    "__WARNING_MISSING_ZERO_TERMINATION2",
    "__WARNING_INVALID_PARAM_VALUE_1",
    "__WARNING_INCORRECT_ANNOTATION",
    "__WARNING_POTENTIAL_BUFFER_OVERFLOW_HIGH_PRIORITY",
    "__WARNING_PRECONDITION_NULLTERMINATION_VIOLATION",
    "__WARNING_POSTCONDITION_NULLTERMINATION_VIOLATION",
    "__WARNING_HIGH_PRIORITY_OVERFLOW_POSTCONDITION",
    "__WARNING_RANGE_POSTCONDITION_VIOLATION",
    "__WARNING_POTENTIAL_RANGE_POSTCONDITION_VIOLATION",
    "__WARNING_INVALID_PARAM_VALUE_3",
    "__WARNING_RETURNING_BAD_RESULT",
    "__WARNING_BANNED_API_USAGE",
    "__WARNING_POST_EXPECTED",
    "HBMMENU_CALLBACK",
    "HBMMENU_SYSTEM",
    "HBMMENU_MBAR_RESTORE",
    "HBMMENU_MBAR_MINIMIZE",
    "HBMMENU_MBAR_CLOSE",
    "HBMMENU_MBAR_CLOSE_D",
    "HBMMENU_MBAR_MINIMIZE_D",
    "HBMMENU_POPUP_CLOSE",
    "HBMMENU_POPUP_RESTORE",
    "HBMMENU_POPUP_MAXIMIZE",
    "HBMMENU_POPUP_MINIMIZE",
    "CW_USEDEFAULT",
    "LBS_STANDARD",
    "WNDCLASS_STYLES",
    "CS_VREDRAW",
    "CS_HREDRAW",
    "CS_DBLCLKS",
    "CS_OWNDC",
    "CS_CLASSDC",
    "CS_PARENTDC",
    "CS_NOCLOSE",
    "CS_SAVEBITS",
    "CS_BYTEALIGNCLIENT",
    "CS_BYTEALIGNWINDOW",
    "CS_GLOBALCLASS",
    "CS_IME",
    "CS_DROPSHADOW",
    "CWP_FLAGS",
    "CWP_ALL",
    "CWP_SKIPINVISIBLE",
    "CWP_SKIPDISABLED",
    "CWP_SKIPTRANSPARENT",
    "MESSAGEBOX_STYLE",
    "MB_ABORTRETRYIGNORE",
    "MB_CANCELTRYCONTINUE",
    "MB_HELP",
    "MB_OK",
    "MB_OKCANCEL",
    "MB_RETRYCANCEL",
    "MB_YESNO",
    "MB_YESNOCANCEL",
    "MB_ICONHAND",
    "MB_ICONQUESTION",
    "MB_ICONEXCLAMATION",
    "MB_ICONASTERISK",
    "MB_USERICON",
    "MB_ICONWARNING",
    "MB_ICONERROR",
    "MB_ICONINFORMATION",
    "MB_ICONSTOP",
    "MB_DEFBUTTON1",
    "MB_DEFBUTTON2",
    "MB_DEFBUTTON3",
    "MB_DEFBUTTON4",
    "MB_APPLMODAL",
    "MB_SYSTEMMODAL",
    "MB_TASKMODAL",
    "MB_NOFOCUS",
    "MB_SETFOREGROUND",
    "MB_DEFAULT_DESKTOP_ONLY",
    "MB_TOPMOST",
    "MB_RIGHT",
    "MB_RTLREADING",
    "MB_SERVICE_NOTIFICATION",
    "MB_SERVICE_NOTIFICATION_NT3X",
    "MB_TYPEMASK",
    "MB_ICONMASK",
    "MB_DEFMASK",
    "MB_MODEMASK",
    "MB_MISCMASK",
    "MENU_ITEM_FLAGS",
    "MF_BYCOMMAND",
    "MF_BYPOSITION",
    "MF_BITMAP",
    "MF_CHECKED",
    "MF_DISABLED",
    "MF_ENABLED",
    "MF_GRAYED",
    "MF_MENUBARBREAK",
    "MF_MENUBREAK",
    "MF_OWNERDRAW",
    "MF_POPUP",
    "MF_SEPARATOR",
    "MF_STRING",
    "MF_UNCHECKED",
    "MF_INSERT",
    "MF_CHANGE",
    "MF_APPEND",
    "MF_DELETE",
    "MF_REMOVE",
    "MF_USECHECKBITMAPS",
    "MF_UNHILITE",
    "MF_HILITE",
    "MF_DEFAULT",
    "MF_SYSMENU",
    "MF_HELP",
    "MF_RIGHTJUSTIFY",
    "MF_MOUSESELECT",
    "MF_END",
    "SHOW_WINDOW_CMD",
    "SW_FORCEMINIMIZE",
    "SW_HIDE",
    "SW_MAXIMIZE",
    "SW_MINIMIZE",
    "SW_RESTORE",
    "SW_SHOW",
    "SW_SHOWDEFAULT",
    "SW_SHOWMAXIMIZED",
    "SW_SHOWMINIMIZED",
    "SW_SHOWMINNOACTIVE",
    "SW_SHOWNA",
    "SW_SHOWNOACTIVATE",
    "SW_SHOWNORMAL",
    "SW_NORMAL",
    "SW_MAX",
    "SW_PARENTCLOSING",
    "SW_OTHERZOOM",
    "SW_PARENTOPENING",
    "SW_OTHERUNZOOM",
    "SW_SCROLLCHILDREN",
    "SW_INVALIDATE",
    "SW_ERASE",
    "SW_SMOOTHSCROLL",
    "SYSTEM_PARAMETERS_INFO_ACTION",
    "SPI_GETBEEP",
    "SPI_SETBEEP",
    "SPI_GETMOUSE",
    "SPI_SETMOUSE",
    "SPI_GETBORDER",
    "SPI_SETBORDER",
    "SPI_GETKEYBOARDSPEED",
    "SPI_SETKEYBOARDSPEED",
    "SPI_LANGDRIVER",
    "SPI_ICONHORIZONTALSPACING",
    "SPI_GETSCREENSAVETIMEOUT",
    "SPI_SETSCREENSAVETIMEOUT",
    "SPI_GETSCREENSAVEACTIVE",
    "SPI_SETSCREENSAVEACTIVE",
    "SPI_GETGRIDGRANULARITY",
    "SPI_SETGRIDGRANULARITY",
    "SPI_SETDESKWALLPAPER",
    "SPI_SETDESKPATTERN",
    "SPI_GETKEYBOARDDELAY",
    "SPI_SETKEYBOARDDELAY",
    "SPI_ICONVERTICALSPACING",
    "SPI_GETICONTITLEWRAP",
    "SPI_SETICONTITLEWRAP",
    "SPI_GETMENUDROPALIGNMENT",
    "SPI_SETMENUDROPALIGNMENT",
    "SPI_SETDOUBLECLKWIDTH",
    "SPI_SETDOUBLECLKHEIGHT",
    "SPI_GETICONTITLELOGFONT",
    "SPI_SETDOUBLECLICKTIME",
    "SPI_SETMOUSEBUTTONSWAP",
    "SPI_SETICONTITLELOGFONT",
    "SPI_GETFASTTASKSWITCH",
    "SPI_SETFASTTASKSWITCH",
    "SPI_SETDRAGFULLWINDOWS",
    "SPI_GETDRAGFULLWINDOWS",
    "SPI_GETNONCLIENTMETRICS",
    "SPI_SETNONCLIENTMETRICS",
    "SPI_GETMINIMIZEDMETRICS",
    "SPI_SETMINIMIZEDMETRICS",
    "SPI_GETICONMETRICS",
    "SPI_SETICONMETRICS",
    "SPI_SETWORKAREA",
    "SPI_GETWORKAREA",
    "SPI_SETPENWINDOWS",
    "SPI_GETHIGHCONTRAST",
    "SPI_SETHIGHCONTRAST",
    "SPI_GETKEYBOARDPREF",
    "SPI_SETKEYBOARDPREF",
    "SPI_GETSCREENREADER",
    "SPI_SETSCREENREADER",
    "SPI_GETANIMATION",
    "SPI_SETANIMATION",
    "SPI_GETFONTSMOOTHING",
    "SPI_SETFONTSMOOTHING",
    "SPI_SETDRAGWIDTH",
    "SPI_SETDRAGHEIGHT",
    "SPI_SETHANDHELD",
    "SPI_GETLOWPOWERTIMEOUT",
    "SPI_GETPOWEROFFTIMEOUT",
    "SPI_SETLOWPOWERTIMEOUT",
    "SPI_SETPOWEROFFTIMEOUT",
    "SPI_GETLOWPOWERACTIVE",
    "SPI_GETPOWEROFFACTIVE",
    "SPI_SETLOWPOWERACTIVE",
    "SPI_SETPOWEROFFACTIVE",
    "SPI_SETCURSORS",
    "SPI_SETICONS",
    "SPI_GETDEFAULTINPUTLANG",
    "SPI_SETDEFAULTINPUTLANG",
    "SPI_SETLANGTOGGLE",
    "SPI_GETWINDOWSEXTENSION",
    "SPI_SETMOUSETRAILS",
    "SPI_GETMOUSETRAILS",
    "SPI_SETSCREENSAVERRUNNING",
    "SPI_SCREENSAVERRUNNING",
    "SPI_GETFILTERKEYS",
    "SPI_SETFILTERKEYS",
    "SPI_GETTOGGLEKEYS",
    "SPI_SETTOGGLEKEYS",
    "SPI_GETMOUSEKEYS",
    "SPI_SETMOUSEKEYS",
    "SPI_GETSHOWSOUNDS",
    "SPI_SETSHOWSOUNDS",
    "SPI_GETSTICKYKEYS",
    "SPI_SETSTICKYKEYS",
    "SPI_GETACCESSTIMEOUT",
    "SPI_SETACCESSTIMEOUT",
    "SPI_GETSERIALKEYS",
    "SPI_SETSERIALKEYS",
    "SPI_GETSOUNDSENTRY",
    "SPI_SETSOUNDSENTRY",
    "SPI_GETSNAPTODEFBUTTON",
    "SPI_SETSNAPTODEFBUTTON",
    "SPI_GETMOUSEHOVERWIDTH",
    "SPI_SETMOUSEHOVERWIDTH",
    "SPI_GETMOUSEHOVERHEIGHT",
    "SPI_SETMOUSEHOVERHEIGHT",
    "SPI_GETMOUSEHOVERTIME",
    "SPI_SETMOUSEHOVERTIME",
    "SPI_GETWHEELSCROLLLINES",
    "SPI_SETWHEELSCROLLLINES",
    "SPI_GETMENUSHOWDELAY",
    "SPI_SETMENUSHOWDELAY",
    "SPI_GETWHEELSCROLLCHARS",
    "SPI_SETWHEELSCROLLCHARS",
    "SPI_GETSHOWIMEUI",
    "SPI_SETSHOWIMEUI",
    "SPI_GETMOUSESPEED",
    "SPI_SETMOUSESPEED",
    "SPI_GETSCREENSAVERRUNNING",
    "SPI_GETDESKWALLPAPER",
    "SPI_GETAUDIODESCRIPTION",
    "SPI_SETAUDIODESCRIPTION",
    "SPI_GETSCREENSAVESECURE",
    "SPI_SETSCREENSAVESECURE",
    "SPI_GETHUNGAPPTIMEOUT",
    "SPI_SETHUNGAPPTIMEOUT",
    "SPI_GETWAITTOKILLTIMEOUT",
    "SPI_SETWAITTOKILLTIMEOUT",
    "SPI_GETWAITTOKILLSERVICETIMEOUT",
    "SPI_SETWAITTOKILLSERVICETIMEOUT",
    "SPI_GETMOUSEDOCKTHRESHOLD",
    "SPI_SETMOUSEDOCKTHRESHOLD",
    "SPI_GETPENDOCKTHRESHOLD",
    "SPI_SETPENDOCKTHRESHOLD",
    "SPI_GETWINARRANGING",
    "SPI_SETWINARRANGING",
    "SPI_GETMOUSEDRAGOUTTHRESHOLD",
    "SPI_SETMOUSEDRAGOUTTHRESHOLD",
    "SPI_GETPENDRAGOUTTHRESHOLD",
    "SPI_SETPENDRAGOUTTHRESHOLD",
    "SPI_GETMOUSESIDEMOVETHRESHOLD",
    "SPI_SETMOUSESIDEMOVETHRESHOLD",
    "SPI_GETPENSIDEMOVETHRESHOLD",
    "SPI_SETPENSIDEMOVETHRESHOLD",
    "SPI_GETDRAGFROMMAXIMIZE",
    "SPI_SETDRAGFROMMAXIMIZE",
    "SPI_GETSNAPSIZING",
    "SPI_SETSNAPSIZING",
    "SPI_GETDOCKMOVING",
    "SPI_SETDOCKMOVING",
    "SPI_GETTOUCHPREDICTIONPARAMETERS",
    "SPI_SETTOUCHPREDICTIONPARAMETERS",
    "SPI_GETLOGICALDPIOVERRIDE",
    "SPI_SETLOGICALDPIOVERRIDE",
    "SPI_GETMENURECT",
    "SPI_SETMENURECT",
    "SPI_GETACTIVEWINDOWTRACKING",
    "SPI_SETACTIVEWINDOWTRACKING",
    "SPI_GETMENUANIMATION",
    "SPI_SETMENUANIMATION",
    "SPI_GETCOMBOBOXANIMATION",
    "SPI_SETCOMBOBOXANIMATION",
    "SPI_GETLISTBOXSMOOTHSCROLLING",
    "SPI_SETLISTBOXSMOOTHSCROLLING",
    "SPI_GETGRADIENTCAPTIONS",
    "SPI_SETGRADIENTCAPTIONS",
    "SPI_GETKEYBOARDCUES",
    "SPI_SETKEYBOARDCUES",
    "SPI_GETMENUUNDERLINES",
    "SPI_SETMENUUNDERLINES",
    "SPI_GETACTIVEWNDTRKZORDER",
    "SPI_SETACTIVEWNDTRKZORDER",
    "SPI_GETHOTTRACKING",
    "SPI_SETHOTTRACKING",
    "SPI_GETMENUFADE",
    "SPI_SETMENUFADE",
    "SPI_GETSELECTIONFADE",
    "SPI_SETSELECTIONFADE",
    "SPI_GETTOOLTIPANIMATION",
    "SPI_SETTOOLTIPANIMATION",
    "SPI_GETTOOLTIPFADE",
    "SPI_SETTOOLTIPFADE",
    "SPI_GETCURSORSHADOW",
    "SPI_SETCURSORSHADOW",
    "SPI_GETMOUSESONAR",
    "SPI_SETMOUSESONAR",
    "SPI_GETMOUSECLICKLOCK",
    "SPI_SETMOUSECLICKLOCK",
    "SPI_GETMOUSEVANISH",
    "SPI_SETMOUSEVANISH",
    "SPI_GETFLATMENU",
    "SPI_SETFLATMENU",
    "SPI_GETDROPSHADOW",
    "SPI_SETDROPSHADOW",
    "SPI_GETBLOCKSENDINPUTRESETS",
    "SPI_SETBLOCKSENDINPUTRESETS",
    "SPI_GETUIEFFECTS",
    "SPI_SETUIEFFECTS",
    "SPI_GETDISABLEOVERLAPPEDCONTENT",
    "SPI_SETDISABLEOVERLAPPEDCONTENT",
    "SPI_GETCLIENTAREAANIMATION",
    "SPI_SETCLIENTAREAANIMATION",
    "SPI_GETCLEARTYPE",
    "SPI_SETCLEARTYPE",
    "SPI_GETSPEECHRECOGNITION",
    "SPI_SETSPEECHRECOGNITION",
    "SPI_GETCARETBROWSING",
    "SPI_SETCARETBROWSING",
    "SPI_GETTHREADLOCALINPUTSETTINGS",
    "SPI_SETTHREADLOCALINPUTSETTINGS",
    "SPI_GETSYSTEMLANGUAGEBAR",
    "SPI_SETSYSTEMLANGUAGEBAR",
    "SPI_GETFOREGROUNDLOCKTIMEOUT",
    "SPI_SETFOREGROUNDLOCKTIMEOUT",
    "SPI_GETACTIVEWNDTRKTIMEOUT",
    "SPI_SETACTIVEWNDTRKTIMEOUT",
    "SPI_GETFOREGROUNDFLASHCOUNT",
    "SPI_SETFOREGROUNDFLASHCOUNT",
    "SPI_GETCARETWIDTH",
    "SPI_SETCARETWIDTH",
    "SPI_GETMOUSECLICKLOCKTIME",
    "SPI_SETMOUSECLICKLOCKTIME",
    "SPI_GETFONTSMOOTHINGTYPE",
    "SPI_SETFONTSMOOTHINGTYPE",
    "SPI_GETFONTSMOOTHINGCONTRAST",
    "SPI_SETFONTSMOOTHINGCONTRAST",
    "SPI_GETFOCUSBORDERWIDTH",
    "SPI_SETFOCUSBORDERWIDTH",
    "SPI_GETFOCUSBORDERHEIGHT",
    "SPI_SETFOCUSBORDERHEIGHT",
    "SPI_GETFONTSMOOTHINGORIENTATION",
    "SPI_SETFONTSMOOTHINGORIENTATION",
    "SPI_GETMINIMUMHITRADIUS",
    "SPI_SETMINIMUMHITRADIUS",
    "SPI_GETMESSAGEDURATION",
    "SPI_SETMESSAGEDURATION",
    "SPI_GETCONTACTVISUALIZATION",
    "SPI_SETCONTACTVISUALIZATION",
    "SPI_GETGESTUREVISUALIZATION",
    "SPI_SETGESTUREVISUALIZATION",
    "SPI_GETMOUSEWHEELROUTING",
    "SPI_SETMOUSEWHEELROUTING",
    "SPI_GETPENVISUALIZATION",
    "SPI_SETPENVISUALIZATION",
    "SPI_GETPENARBITRATIONTYPE",
    "SPI_SETPENARBITRATIONTYPE",
    "SPI_GETCARETTIMEOUT",
    "SPI_SETCARETTIMEOUT",
    "SPI_GETHANDEDNESS",
    "SPI_SETHANDEDNESS",
    "TRACK_POPUP_MENU_FLAGS",
    "TPM_LEFTBUTTON",
    "TPM_RIGHTBUTTON",
    "TPM_LEFTALIGN",
    "TPM_CENTERALIGN",
    "TPM_RIGHTALIGN",
    "TPM_TOPALIGN",
    "TPM_VCENTERALIGN",
    "TPM_BOTTOMALIGN",
    "TPM_HORIZONTAL",
    "TPM_VERTICAL",
    "TPM_NONOTIFY",
    "TPM_RETURNCMD",
    "TPM_RECURSE",
    "TPM_HORPOSANIMATION",
    "TPM_HORNEGANIMATION",
    "TPM_VERPOSANIMATION",
    "TPM_VERNEGANIMATION",
    "TPM_NOANIMATION",
    "TPM_LAYOUTRTL",
    "TPM_WORKAREA",
    "WINDOW_EX_STYLE",
    "WS_EX_DLGMODALFRAME",
    "WS_EX_NOPARENTNOTIFY",
    "WS_EX_TOPMOST",
    "WS_EX_ACCEPTFILES",
    "WS_EX_TRANSPARENT",
    "WS_EX_MDICHILD",
    "WS_EX_TOOLWINDOW",
    "WS_EX_WINDOWEDGE",
    "WS_EX_CLIENTEDGE",
    "WS_EX_CONTEXTHELP",
    "WS_EX_RIGHT",
    "WS_EX_LEFT",
    "WS_EX_RTLREADING",
    "WS_EX_LTRREADING",
    "WS_EX_LEFTSCROLLBAR",
    "WS_EX_RIGHTSCROLLBAR",
    "WS_EX_CONTROLPARENT",
    "WS_EX_STATICEDGE",
    "WS_EX_APPWINDOW",
    "WS_EX_OVERLAPPEDWINDOW",
    "WS_EX_PALETTEWINDOW",
    "WS_EX_LAYERED",
    "WS_EX_NOINHERITLAYOUT",
    "WS_EX_NOREDIRECTIONBITMAP",
    "WS_EX_LAYOUTRTL",
    "WS_EX_COMPOSITED",
    "WS_EX_NOACTIVATE",
    "WINDOW_STYLE",
    "WS_OVERLAPPED",
    "WS_POPUP",
    "WS_CHILD",
    "WS_MINIMIZE",
    "WS_VISIBLE",
    "WS_DISABLED",
    "WS_CLIPSIBLINGS",
    "WS_CLIPCHILDREN",
    "WS_MAXIMIZE",
    "WS_CAPTION",
    "WS_BORDER",
    "WS_DLGFRAME",
    "WS_VSCROLL",
    "WS_HSCROLL",
    "WS_SYSMENU",
    "WS_THICKFRAME",
    "WS_GROUP",
    "WS_TABSTOP",
    "WS_MINIMIZEBOX",
    "WS_MAXIMIZEBOX",
    "WS_TILED",
    "WS_ICONIC",
    "WS_SIZEBOX",
    "WS_TILEDWINDOW",
    "WS_OVERLAPPEDWINDOW",
    "WS_POPUPWINDOW",
    "WS_CHILDWINDOW",
    "WS_ACTIVECAPTION",
    "OBJECT_IDENTIFIER",
    "OBJID_WINDOW",
    "OBJID_SYSMENU",
    "OBJID_TITLEBAR",
    "OBJID_MENU",
    "OBJID_CLIENT",
    "OBJID_VSCROLL",
    "OBJID_HSCROLL",
    "OBJID_SIZEGRIP",
    "OBJID_CARET",
    "OBJID_CURSOR",
    "OBJID_ALERT",
    "OBJID_SOUND",
    "OBJID_QUERYCLASSNAMEIDX",
    "OBJID_NATIVEOM",
    "MENU_ITEM_TYPE",
    "MFT_BITMAP",
    "MFT_MENUBARBREAK",
    "MFT_MENUBREAK",
    "MFT_OWNERDRAW",
    "MFT_RADIOCHECK",
    "MFT_RIGHTJUSTIFY",
    "MFT_RIGHTORDER",
    "MFT_SEPARATOR",
    "MFT_STRING",
    "MESSAGEBOX_RESULT",
    "IDOK",
    "IDCANCEL",
    "IDABORT",
    "IDRETRY",
    "IDIGNORE",
    "IDYES",
    "IDNO",
    "IDCLOSE",
    "IDHELP",
    "IDTRYAGAIN",
    "IDCONTINUE",
    "IDASYNC",
    "IDTIMEOUT",
    "MENU_ITEM_STATE",
    "MFS_GRAYED",
    "MFS_DISABLED",
    "MFS_CHECKED",
    "MFS_HILITE",
    "MFS_ENABLED",
    "MFS_UNCHECKED",
    "MFS_UNHILITE",
    "MFS_DEFAULT",
    "SCROLLBAR_CONSTANTS",
    "SB_CTL",
    "SB_HORZ",
    "SB_VERT",
    "SB_BOTH",
    "GET_CLASS_LONG_INDEX",
    "GCW_ATOM",
    "GCL_CBCLSEXTRA",
    "GCL_CBWNDEXTRA",
    "GCL_HBRBACKGROUND",
    "GCL_HCURSOR",
    "GCL_HICON",
    "GCL_HICONSM",
    "GCL_HMODULE",
    "GCL_MENUNAME",
    "GCL_STYLE",
    "GCL_WNDPROC",
    "GCLP_HBRBACKGROUND",
    "GCLP_HCURSOR",
    "GCLP_HICON",
    "GCLP_HICONSM",
    "GCLP_HMODULE",
    "GCLP_MENUNAME",
    "GCLP_WNDPROC",
    "UPDATE_LAYERED_WINDOW_FLAGS",
    "ULW_ALPHA",
    "ULW_COLORKEY",
    "ULW_OPAQUE",
    "ULW_EX_NORESIZE",
    "WINDOW_LONG_PTR_INDEX",
    "GWL_EXSTYLE",
    "GWLP_HINSTANCE",
    "GWLP_HWNDPARENT",
    "GWLP_ID",
    "GWL_STYLE",
    "GWLP_USERDATA",
    "GWLP_WNDPROC",
    "GWL_HINSTANCE",
    "GWL_ID",
    "GWL_USERDATA",
    "GWL_WNDPROC",
    "GWL_HWNDPARENT",
    "ANIMATE_WINDOW_FLAGS",
    "AW_ACTIVATE",
    "AW_BLEND",
    "AW_CENTER",
    "AW_HIDE",
    "AW_HOR_POSITIVE",
    "AW_HOR_NEGATIVE",
    "AW_SLIDE",
    "AW_VER_POSITIVE",
    "AW_VER_NEGATIVE",
    "CHANGE_WINDOW_MESSAGE_FILTER_FLAGS",
    "MSGFLT_ADD",
    "MSGFLT_REMOVE",
    "GDI_IMAGE_TYPE",
    "IMAGE_BITMAP",
    "IMAGE_CURSOR",
    "IMAGE_ICON",
    "WINDOWS_HOOK_ID",
    "WH_CALLWNDPROC",
    "WH_CALLWNDPROCRET",
    "WH_CBT",
    "WH_DEBUG",
    "WH_FOREGROUNDIDLE",
    "WH_GETMESSAGE",
    "WH_JOURNALPLAYBACK",
    "WH_JOURNALRECORD",
    "WH_KEYBOARD",
    "WH_KEYBOARD_LL",
    "WH_MOUSE",
    "WH_MOUSE_LL",
    "WH_MSGFILTER",
    "WH_SHELL",
    "WH_SYSMSGFILTER",
    "IMAGE_FLAGS",
    "LR_CREATEDIBSECTION",
    "LR_DEFAULTCOLOR",
    "LR_DEFAULTSIZE",
    "LR_LOADFROMFILE",
    "LR_LOADMAP3DCOLORS",
    "LR_LOADTRANSPARENT",
    "LR_MONOCHROME",
    "LR_SHARED",
    "LR_VGACOLOR",
    "LR_COPYDELETEORG",
    "LR_COPYFROMRESOURCE",
    "LR_COPYRETURNORG",
    "SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS",
    "SPIF_UPDATEINIFILE",
    "SPIF_SENDCHANGE",
    "SPIF_SENDWININICHANGE",
    "SET_WINDOW_POS_FLAGS",
    "SWP_ASYNCWINDOWPOS",
    "SWP_DEFERERASE",
    "SWP_DRAWFRAME",
    "SWP_FRAMECHANGED",
    "SWP_HIDEWINDOW",
    "SWP_NOACTIVATE",
    "SWP_NOCOPYBITS",
    "SWP_NOMOVE",
    "SWP_NOOWNERZORDER",
    "SWP_NOREDRAW",
    "SWP_NOREPOSITION",
    "SWP_NOSENDCHANGING",
    "SWP_NOSIZE",
    "SWP_NOZORDER",
    "SWP_SHOWWINDOW",
    "SWP__NOOWNERZORDER",
    "MSG_WAIT_FOR_MULTIPLE_OBJECTS_EX_FLAGS",
    "MWMO_NONE",
    "MWMO_ALERTABLE",
    "MWMO_INPUTAVAILABLE",
    "MWMO_WAITALL",
    "QUEUE_STATUS_FLAGS",
    "QS_ALLEVENTS",
    "QS_ALLINPUT",
    "QS_ALLPOSTMESSAGE",
    "QS_HOTKEY",
    "QS_INPUT",
    "QS_KEY",
    "QS_MOUSE",
    "QS_MOUSEBUTTON",
    "QS_MOUSEMOVE",
    "QS_PAINT",
    "QS_POSTMESSAGE",
    "QS_RAWINPUT",
    "QS_SENDMESSAGE",
    "QS_TIMER",
    "SYSTEM_CURSOR_ID",
    "OCR_APPSTARTING",
    "OCR_NORMAL",
    "OCR_CROSS",
    "OCR_HAND",
    "OCR_HELP",
    "OCR_IBEAM",
    "OCR_NO",
    "OCR_SIZEALL",
    "OCR_SIZENESW",
    "OCR_SIZENS",
    "OCR_SIZENWSE",
    "OCR_SIZEWE",
    "OCR_UP",
    "OCR_WAIT",
    "LAYERED_WINDOW_ATTRIBUTES_FLAGS",
    "LWA_ALPHA",
    "LWA_COLORKEY",
    "SEND_MESSAGE_TIMEOUT_FLAGS",
    "SMTO_ABORTIFHUNG",
    "SMTO_BLOCK",
    "SMTO_NORMAL",
    "SMTO_NOTIMEOUTIFNOTHUNG",
    "SMTO_ERRORONEXIT",
    "PEEK_MESSAGE_REMOVE_TYPE",
    "PM_NOREMOVE",
    "PM_REMOVE",
    "PM_NOYIELD",
    "PM_QS_INPUT",
    "PM_QS_POSTMESSAGE",
    "PM_QS_PAINT",
    "PM_QS_SENDMESSAGE",
    "SYS_COLOR_INDEX",
    "COLOR_3DDKSHADOW",
    "COLOR_3DFACE",
    "COLOR_3DHIGHLIGHT",
    "COLOR_3DHILIGHT",
    "COLOR_3DLIGHT",
    "COLOR_3DSHADOW",
    "COLOR_ACTIVEBORDER",
    "COLOR_ACTIVECAPTION",
    "COLOR_APPWORKSPACE",
    "COLOR_BACKGROUND",
    "COLOR_BTNFACE",
    "_COLOR_BTNHIGHLIGHT",
    "_COLOR_BTNHILIGHT",
    "COLOR_BTNSHADOW",
    "COLOR_BTNTEXT",
    "COLOR_CAPTIONTEXT",
    "COLOR_DESKTOP",
    "COLOR_GRADIENTACTIVECAPTION",
    "COLOR_GRADIENTINACTIVECAPTION",
    "COLOR_GRAYTEXT",
    "COLOR_HIGHLIGHT",
    "COLOR_HIGHLIGHTTEXT",
    "COLOR_HOTLIGHT",
    "COLOR_INACTIVEBORDER",
    "COLOR_INACTIVECAPTION",
    "COLOR_INACTIVECAPTIONTEXT",
    "COLOR_INFOBK",
    "COLOR_INFOTEXT",
    "COLOR_MENU",
    "COLOR_MENUHILIGHT",
    "COLOR_MENUBAR",
    "COLOR_MENUTEXT",
    "COLOR_SCROLLBAR",
    "COLOR_WINDOW",
    "COLOR_WINDOWFRAME",
    "COLOR_WINDOWTEXT",
    "GET_WINDOW_CMD",
    "GW_CHILD",
    "GW_ENABLEDPOPUP",
    "GW_HWNDFIRST",
    "GW_HWNDLAST",
    "GW_HWNDNEXT",
    "GW_HWNDPREV",
    "GW_OWNER",
    "SYSTEM_METRICS_INDEX",
    "SM_ARRANGE",
    "SM_CLEANBOOT",
    "SM_CMONITORS",
    "SM_CMOUSEBUTTONS",
    "SM_CONVERTIBLESLATEMODE",
    "SM_CXBORDER",
    "SM_CXCURSOR",
    "SM_CXDLGFRAME",
    "SM_CXDOUBLECLK",
    "SM_CXDRAG",
    "SM_CXEDGE",
    "SM_CXFIXEDFRAME",
    "SM_CXFOCUSBORDER",
    "SM_CXFRAME",
    "SM_CXFULLSCREEN",
    "SM_CXHSCROLL",
    "SM_CXHTHUMB",
    "SM_CXICON",
    "SM_CXICONSPACING",
    "SM_CXMAXIMIZED",
    "SM_CXMAXTRACK",
    "SM_CXMENUCHECK",
    "SM_CXMENUSIZE",
    "SM_CXMIN",
    "SM_CXMINIMIZED",
    "SM_CXMINSPACING",
    "SM_CXMINTRACK",
    "SM_CXPADDEDBORDER",
    "SM_CXSCREEN",
    "SM_CXSIZE",
    "SM_CXSIZEFRAME",
    "SM_CXSMICON",
    "SM_CXSMSIZE",
    "SM_CXVIRTUALSCREEN",
    "SM_CXVSCROLL",
    "SM_CYBORDER",
    "SM_CYCAPTION",
    "SM_CYCURSOR",
    "SM_CYDLGFRAME",
    "SM_CYDOUBLECLK",
    "SM_CYDRAG",
    "SM_CYEDGE",
    "SM_CYFIXEDFRAME",
    "SM_CYFOCUSBORDER",
    "SM_CYFRAME",
    "SM_CYFULLSCREEN",
    "SM_CYHSCROLL",
    "SM_CYICON",
    "SM_CYICONSPACING",
    "SM_CYKANJIWINDOW",
    "SM_CYMAXIMIZED",
    "SM_CYMAXTRACK",
    "SM_CYMENU",
    "SM_CYMENUCHECK",
    "SM_CYMENUSIZE",
    "SM_CYMIN",
    "SM_CYMINIMIZED",
    "SM_CYMINSPACING",
    "SM_CYMINTRACK",
    "SM_CYSCREEN",
    "SM_CYSIZE",
    "SM_CYSIZEFRAME",
    "SM_CYSMCAPTION",
    "SM_CYSMICON",
    "SM_CYSMSIZE",
    "SM_CYVIRTUALSCREEN",
    "SM_CYVSCROLL",
    "SM_CYVTHUMB",
    "SM_DBCSENABLED",
    "SM_DEBUG",
    "SM_DIGITIZER",
    "SM_IMMENABLED",
    "SM_MAXIMUMTOUCHES",
    "SM_MEDIACENTER",
    "SM_MENUDROPALIGNMENT",
    "SM_MIDEASTENABLED",
    "SM_MOUSEPRESENT",
    "SM_MOUSEHORIZONTALWHEELPRESENT",
    "SM_MOUSEWHEELPRESENT",
    "SM_NETWORK",
    "SM_PENWINDOWS",
    "SM_REMOTECONTROL",
    "SM_REMOTESESSION",
    "SM_SAMEDISPLAYFORMAT",
    "SM_SECURE",
    "SM_SERVERR2",
    "SM_SHOWSOUNDS",
    "SM_SHUTTINGDOWN",
    "SM_SLOWMACHINE",
    "SM_STARTER",
    "SM_SWAPBUTTON",
    "SM_SYSTEMDOCKED_",
    "SM_TABLETPC",
    "SM_XVIRTUALSCREEN",
    "SM_YVIRTUALSCREEN",
    "GET_ANCESTOR_FLAGS",
    "GA_PARENT",
    "GA_ROOT",
    "GA_ROOTOWNER",
    "TILE_WINDOWS_HOW",
    "MDITILE_HORIZONTAL",
    "MDITILE_VERTICAL",
    "WINDOW_DISPLAY_AFFINITY",
    "WDA_NONE",
    "WDA_MONITOR",
    "WDA_EXCLUDEFROMCAPTURE",
    "FOREGROUND_WINDOW_LOCK_CODE",
    "LSFW_LOCK",
    "LSFW_UNLOCK",
    "CASCADE_WINDOWS_HOW",
    "MDITILE_SKIPDISABLED",
    "MDITILE_ZORDER",
    "WINDOW_MESSAGE_FILTER_ACTION",
    "MSGFLT_ALLOW",
    "MSGFLT_DISALLOW",
    "MSGFLT_RESET",
    "GET_MENU_DEFAULT_ITEM_FLAGS",
    "GMDI_GOINTOPOPUPS",
    "GMDI_USEDISABLED",
    "MSGFLTINFO_STATUS",
    "MSGFLTINFO_NONE",
    "MSGFLTINFO_ALLOWED_HIGHER",
    "MSGFLTINFO_ALREADYALLOWED_FORWND",
    "MSGFLTINFO_ALREADYDISALLOWED_FORWND",
    "MOUSEHOOKSTRUCTEX_MOUSE_DATA",
    "XBUTTON1",
    "XBUTTON2",
    "MENU_ITEM_MASK",
    "MIIM_BITMAP",
    "MIIM_CHECKMARKS",
    "MIIM_DATA",
    "MIIM_FTYPE",
    "MIIM_ID",
    "MIIM_STATE",
    "MIIM_STRING",
    "MIIM_SUBMENU",
    "MIIM_TYPE",
    "FLASHWINFO_FLAGS",
    "FLASHW_ALL",
    "FLASHW_CAPTION",
    "FLASHW_STOP",
    "FLASHW_TIMER",
    "FLASHW_TIMERNOFG",
    "FLASHW_TRAY",
    "CURSORINFO_FLAGS",
    "CURSOR_SHOWING",
    "CURSOR_SUPPRESSED",
    "MENUINFO_STYLE",
    "MNS_AUTODISMISS",
    "MNS_CHECKORBMP",
    "MNS_DRAGDROP",
    "MNS_MODELESS",
    "MNS_NOCHECK",
    "MNS_NOTIFYBYPOS",
    "WINDOWPLACEMENT_FLAGS",
    "WPF_ASYNCWINDOWPLACEMENT",
    "WPF_RESTORETOMAXIMIZED",
    "WPF_SETMINPOSITION",
    "MENUINFO_MASK",
    "MIM_APPLYTOSUBMENUS",
    "MIM_BACKGROUND",
    "MIM_HELPID",
    "MIM_MAXHEIGHT",
    "MIM_MENUDATA",
    "MIM_STYLE",
    "MINIMIZEDMETRICS_ARRANGE",
    "ARW_BOTTOMLEFT",
    "ARW_BOTTOMRIGHT",
    "ARW_TOPLEFT",
    "ARW_TOPRIGHT",
    "SCROLLINFO_MASK",
    "SIF_ALL",
    "SIF_DISABLENOSCROLL",
    "SIF_PAGE",
    "SIF_POS",
    "SIF_RANGE",
    "SIF_TRACKPOS",
    "MENUGETOBJECTINFO_FLAGS",
    "MNGOF_BOTTOMGAP",
    "MNGOF_TOPGAP",
    "GUITHREADINFO_FLAGS",
    "GUI_CARETBLINKING",
    "GUI_INMENUMODE",
    "GUI_INMOVESIZE",
    "GUI_POPUPMENUMODE",
    "GUI_SYSTEMMENUMODE",
    "KBDLLHOOKSTRUCT_FLAGS",
    "LLKHF_EXTENDED",
    "LLKHF_ALTDOWN",
    "LLKHF_UP",
    "LLKHF_INJECTED",
    "LLKHF_LOWER_IL_INJECTED",
    "DI_FLAGS",
    "DI_MASK",
    "DI_IMAGE",
    "DI_NORMAL",
    "DI_COMPAT",
    "DI_DEFAULTSIZE",
    "DI_NOMIRROR",
    "HHOOK",
    "HICON",
    "HMENU",
    "HCURSOR",
    "HACCEL",
    "MESSAGE_RESOURCE_ENTRY",
    "MESSAGE_RESOURCE_BLOCK",
    "MESSAGE_RESOURCE_DATA",
    "WNDPROC",
    "DLGPROC",
    "TIMERPROC",
    "WNDENUMPROC",
    "HOOKPROC",
    "SENDASYNCPROC",
    "PROPENUMPROCA",
    "PROPENUMPROCW",
    "PROPENUMPROCEXA",
    "PROPENUMPROCEXW",
    "NAMEENUMPROCA",
    "NAMEENUMPROCW",
    "CBT_CREATEWNDA",
    "CBT_CREATEWNDW",
    "CBTACTIVATESTRUCT",
    "SHELLHOOKINFO",
    "EVENTMSG",
    "CWPSTRUCT",
    "CWPRETSTRUCT",
    "KBDLLHOOKSTRUCT",
    "MSLLHOOKSTRUCT",
    "DEBUGHOOKINFO",
    "MOUSEHOOKSTRUCT",
    "MOUSEHOOKSTRUCTEX",
    "HARDWAREHOOKSTRUCT",
    "WNDCLASSEXA",
    "WNDCLASSEXW",
    "WNDCLASSA",
    "WNDCLASSW",
    "MSG",
    "MINMAXINFO",
    "MDINEXTMENU",
    "WINDOWPOS",
    "NCCALCSIZE_PARAMS",
    "ACCEL",
    "CREATESTRUCTA",
    "CREATESTRUCTW",
    "WINDOWPLACEMENT",
    "STYLESTRUCT",
    "PREGISTERCLASSNAMEW",
    "UPDATELAYEREDWINDOWINFO",
    "FLASHWINFO",
    "DLGTEMPLATE",
    "DLGITEMTEMPLATE",
    "POINTER_INPUT_TYPE",
    "PT_POINTER",
    "PT_TOUCH",
    "PT_PEN",
    "PT_MOUSE",
    "PT_TOUCHPAD",
    "TPMPARAMS",
    "MENUINFO",
    "MENUGETOBJECTINFO",
    "MENUITEMINFOA",
    "MENUITEMINFOW",
    "DROPSTRUCT",
    "MSGBOXCALLBACK",
    "MSGBOXPARAMSA",
    "MSGBOXPARAMSW",
    "MENUITEMTEMPLATEHEADER",
    "MENUITEMTEMPLATE",
    "ICONINFO",
    "CURSORSHAPE",
    "ICONINFOEXA",
    "ICONINFOEXW",
    "EDIT_CONTROL_FEATURE",
    "EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT",
    "EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS",
    "SCROLLINFO",
    "MDICREATESTRUCTA",
    "MDICREATESTRUCTW",
    "CLIENTCREATESTRUCT",
    "TouchPredictionParameters",
    "HANDEDNESS",
    "HANDEDNESS_LEFT",
    "HANDEDNESS_RIGHT",
    "NONCLIENTMETRICSA",
    "NONCLIENTMETRICSW",
    "MINIMIZEDMETRICS",
    "ICONMETRICSA",
    "ICONMETRICSW",
    "ANIMATIONINFO",
    "AUDIODESCRIPTION",
    "GUITHREADINFO",
    "CURSORINFO",
    "WINDOWINFO",
    "TITLEBARINFO",
    "TITLEBARINFOEX",
    "MENUBARINFO",
    "SCROLLBARINFO",
    "ALTTABINFO",
    "CHANGEFILTERSTRUCT",
    "IndexedResourceQualifier",
    "MrmPlatformVersion",
    "MrmPlatformVersion_Default",
    "MrmPlatformVersion_Windows10_0_0_0",
    "MrmPlatformVersion_Windows10_0_0_5",
    "MrmResourceIndexerHandle",
    "MrmPackagingMode",
    "MrmPackagingMode_MrmPackagingModeStandaloneFile",
    "MrmPackagingMode_MrmPackagingModeAutoSplit",
    "MrmPackagingMode_MrmPackagingModeResourcePack",
    "MrmPackagingOptions",
    "MrmPackagingOptions_MrmPackagingOptionsNone",
    "MrmPackagingOptions_MrmPackagingOptionsOmitSchemaFromResourcePacks",
    "MrmPackagingOptions_MrmPackagingOptionsSplitLanguageVariants",
    "MrmDumpType",
    "MrmDumpType_Basic",
    "MrmDumpType_Detailed",
    "MrmDumpType_Schema",
    "MrmResourceIndexerMessageSeverity",
    "MrmResourceIndexerMessageSeverity_MrmResourceIndexerMessageSeverityVerbose",
    "MrmResourceIndexerMessageSeverity_MrmResourceIndexerMessageSeverityInfo",
    "MrmResourceIndexerMessageSeverity_MrmResourceIndexerMessageSeverityWarning",
    "MrmResourceIndexerMessageSeverity_MrmResourceIndexerMessageSeverityError",
    "MrmIndexerFlags",
    "MrmIndexerFlags_MrmIndexerFlagsNone",
    "MrmIndexerFlags_MrmIndexerFlagsAutoMerge",
    "MrmIndexerFlags_MrmIndexerFlagsCreateContentChecksum",
    "MrmResourceIndexerMessage",
    "LoadStringA",
    "LoadStringW",
    "LoadString",
    "wvsprintfA",
    "wvsprintfW",
    "wvsprintf",
    "wsprintfA",
    "wsprintfW",
    "wsprintf",
    "IsHungAppWindow",
    "DisableProcessWindowsGhosting",
    "RegisterWindowMessageA",
    "RegisterWindowMessageW",
    "RegisterWindowMessage",
    "GetMessageA",
    "GetMessageW",
    "GetMessage",
    "TranslateMessage",
    "DispatchMessageA",
    "DispatchMessageW",
    "DispatchMessage",
    "SetMessageQueue",
    "PeekMessageA",
    "PeekMessageW",
    "PeekMessage",
    "GetMessagePos",
    "GetMessageTime",
    "GetMessageExtraInfo",
    "IsWow64Message",
    "SetMessageExtraInfo",
    "SendMessageA",
    "SendMessageW",
    "SendMessage",
    "SendMessageTimeoutA",
    "SendMessageTimeoutW",
    "SendMessageTimeout",
    "SendNotifyMessageA",
    "SendNotifyMessageW",
    "SendNotifyMessage",
    "SendMessageCallbackA",
    "SendMessageCallbackW",
    "SendMessageCallback",
    "RegisterDeviceNotificationA",
    "RegisterDeviceNotificationW",
    "RegisterDeviceNotification",
    "PostMessageA",
    "PostMessageW",
    "PostMessage",
    "PostThreadMessageA",
    "PostThreadMessageW",
    "PostThreadMessage",
    "ReplyMessage",
    "WaitMessage",
    "DefWindowProcA",
    "DefWindowProcW",
    "DefWindowProc",
    "PostQuitMessage",
    "CallWindowProcA",
    "CallWindowProcW",
    "CallWindowProc",
    "InSendMessage",
    "InSendMessageEx",
    "RegisterClassA",
    "RegisterClassW",
    "RegisterClass",
    "UnregisterClassA",
    "UnregisterClassW",
    "UnregisterClass",
    "GetClassInfoA",
    "GetClassInfoW",
    "GetClassInfo",
    "RegisterClassExA",
    "RegisterClassExW",
    "RegisterClassEx",
    "GetClassInfoExA",
    "GetClassInfoExW",
    "GetClassInfoEx",
    "CreateWindowExA",
    "CreateWindowExW",
    "CreateWindowEx",
    "IsWindow",
    "IsMenu",
    "IsChild",
    "DestroyWindow",
    "ShowWindow",
    "AnimateWindow",
    "UpdateLayeredWindow",
    "UpdateLayeredWindowIndirect",
    "GetLayeredWindowAttributes",
    "SetLayeredWindowAttributes",
    "ShowWindowAsync",
    "FlashWindow",
    "FlashWindowEx",
    "ShowOwnedPopups",
    "OpenIcon",
    "CloseWindow",
    "MoveWindow",
    "SetWindowPos",
    "GetWindowPlacement",
    "SetWindowPlacement",
    "GetWindowDisplayAffinity",
    "SetWindowDisplayAffinity",
    "BeginDeferWindowPos",
    "DeferWindowPos",
    "EndDeferWindowPos",
    "IsWindowVisible",
    "IsIconic",
    "AnyPopup",
    "BringWindowToTop",
    "IsZoomed",
    "CreateDialogParamA",
    "CreateDialogParamW",
    "CreateDialogParam",
    "CreateDialogIndirectParamA",
    "CreateDialogIndirectParamW",
    "CreateDialogIndirectParam",
    "DialogBoxParamA",
    "DialogBoxParamW",
    "DialogBoxParam",
    "DialogBoxIndirectParamA",
    "DialogBoxIndirectParamW",
    "DialogBoxIndirectParam",
    "EndDialog",
    "GetDlgItem",
    "SetDlgItemInt",
    "GetDlgItemInt",
    "SetDlgItemTextA",
    "SetDlgItemTextW",
    "SetDlgItemText",
    "GetDlgItemTextA",
    "GetDlgItemTextW",
    "GetDlgItemText",
    "SendDlgItemMessageA",
    "SendDlgItemMessageW",
    "SendDlgItemMessage",
    "GetNextDlgGroupItem",
    "GetNextDlgTabItem",
    "GetDlgCtrlID",
    "GetDialogBaseUnits",
    "DefDlgProcA",
    "DefDlgProcW",
    "DefDlgProc",
    "CallMsgFilterA",
    "CallMsgFilterW",
    "CallMsgFilter",
    "CharToOemA",
    "CharToOemW",
    "CharToOem",
    "OemToCharA",
    "OemToCharW",
    "OemToChar",
    "CharToOemBuffA",
    "CharToOemBuffW",
    "CharToOemBuff",
    "OemToCharBuffA",
    "OemToCharBuffW",
    "OemToCharBuff",
    "CharUpperA",
    "CharUpperW",
    "CharUpper",
    "CharUpperBuffA",
    "CharUpperBuffW",
    "CharUpperBuff",
    "CharLowerA",
    "CharLowerW",
    "CharLower",
    "CharLowerBuffA",
    "CharLowerBuffW",
    "CharLowerBuff",
    "CharNextA",
    "CharNextW",
    "CharNext",
    "CharPrevA",
    "CharPrevW",
    "CharPrev",
    "CharNextExA",
    "CharPrevExA",
    "IsCharAlphaA",
    "IsCharAlphaW",
    "IsCharAlpha",
    "IsCharAlphaNumericA",
    "IsCharAlphaNumericW",
    "IsCharAlphaNumeric",
    "IsCharUpperA",
    "IsCharUpperW",
    "IsCharUpper",
    "IsCharLowerA",
    "GetInputState",
    "GetQueueStatus",
    "MsgWaitForMultipleObjects",
    "MsgWaitForMultipleObjectsEx",
    "SetTimer",
    "SetCoalescableTimer",
    "KillTimer",
    "IsWindowUnicode",
    "LoadAcceleratorsA",
    "LoadAcceleratorsW",
    "LoadAccelerators",
    "CreateAcceleratorTableA",
    "CreateAcceleratorTableW",
    "CreateAcceleratorTable",
    "DestroyAcceleratorTable",
    "CopyAcceleratorTableA",
    "CopyAcceleratorTableW",
    "CopyAcceleratorTable",
    "TranslateAcceleratorA",
    "TranslateAcceleratorW",
    "TranslateAccelerator",
    "GetSystemMetrics",
    "LoadMenuA",
    "LoadMenuW",
    "LoadMenu",
    "LoadMenuIndirectA",
    "LoadMenuIndirectW",
    "LoadMenuIndirect",
    "GetMenu",
    "SetMenu",
    "ChangeMenuA",
    "ChangeMenuW",
    "ChangeMenu",
    "HiliteMenuItem",
    "GetMenuStringA",
    "GetMenuStringW",
    "GetMenuString",
    "GetMenuState",
    "DrawMenuBar",
    "GetSystemMenu",
    "CreateMenu",
    "CreatePopupMenu",
    "DestroyMenu",
    "CheckMenuItem",
    "EnableMenuItem",
    "GetSubMenu",
    "GetMenuItemID",
    "GetMenuItemCount",
    "InsertMenuA",
    "InsertMenuW",
    "InsertMenu",
    "AppendMenuA",
    "AppendMenuW",
    "AppendMenu",
    "ModifyMenuA",
    "ModifyMenuW",
    "ModifyMenu",
    "RemoveMenu",
    "DeleteMenu",
    "SetMenuItemBitmaps",
    "GetMenuCheckMarkDimensions",
    "TrackPopupMenu",
    "TrackPopupMenuEx",
    "CalculatePopupWindowPosition",
    "GetMenuInfo",
    "SetMenuInfo",
    "EndMenu",
    "InsertMenuItemA",
    "InsertMenuItemW",
    "InsertMenuItem",
    "GetMenuItemInfoA",
    "GetMenuItemInfoW",
    "GetMenuItemInfo",
    "SetMenuItemInfoA",
    "SetMenuItemInfoW",
    "SetMenuItemInfo",
    "GetMenuDefaultItem",
    "SetMenuDefaultItem",
    "GetMenuItemRect",
    "MenuItemFromPoint",
    "DragObject",
    "DrawIcon",
    "GetForegroundWindow",
    "SwitchToThisWindow",
    "SetForegroundWindow",
    "AllowSetForegroundWindow",
    "LockSetForegroundWindow",
    "ScrollWindow",
    "ScrollDC",
    "ScrollWindowEx",
    "GetScrollPos",
    "GetScrollRange",
    "SetPropA",
    "SetPropW",
    "SetProp",
    "GetPropA",
    "GetPropW",
    "GetProp",
    "RemovePropA",
    "RemovePropW",
    "RemoveProp",
    "EnumPropsExA",
    "EnumPropsExW",
    "EnumPropsEx",
    "EnumPropsA",
    "EnumPropsW",
    "EnumProps",
    "SetWindowTextA",
    "SetWindowTextW",
    "SetWindowText",
    "GetWindowTextA",
    "GetWindowTextW",
    "GetWindowText",
    "GetWindowTextLengthA",
    "GetWindowTextLengthW",
    "GetWindowTextLength",
    "GetClientRect",
    "GetWindowRect",
    "AdjustWindowRect",
    "AdjustWindowRectEx",
    "MessageBoxA",
    "MessageBoxW",
    "MessageBox",
    "MessageBoxExA",
    "MessageBoxExW",
    "MessageBoxEx",
    "MessageBoxIndirectA",
    "MessageBoxIndirectW",
    "MessageBoxIndirect",
    "ShowCursor",
    "SetCursorPos",
    "SetPhysicalCursorPos",
    "SetCursor",
    "GetCursorPos",
    "GetPhysicalCursorPos",
    "GetClipCursor",
    "GetCursor",
    "CreateCaret",
    "GetCaretBlinkTime",
    "SetCaretBlinkTime",
    "DestroyCaret",
    "HideCaret",
    "ShowCaret",
    "SetCaretPos",
    "GetCaretPos",
    "LogicalToPhysicalPoint",
    "PhysicalToLogicalPoint",
    "WindowFromPoint",
    "WindowFromPhysicalPoint",
    "ChildWindowFromPoint",
    "ClipCursor",
    "ChildWindowFromPointEx",
    "GetSysColor",
    "SetSysColors",
    "GetWindowWord",
    "SetWindowWord",
    "GetWindowLongA",
    "GetWindowLongW",
    "GetWindowLong",
    "SetWindowLongA",
    "SetWindowLongW",
    "SetWindowLong",
    "GetWindowLongPtrA",
    "GetWindowLongPtrW",
    "GetWindowLongPtr",
    "SetWindowLongPtrA",
    "SetWindowLongPtrW",
    "SetWindowLongPtr",
    "GetClassWord",
    "SetClassWord",
    "GetClassLongA",
    "GetClassLongW",
    "GetClassLong",
    "SetClassLongA",
    "SetClassLongW",
    "SetClassLong",
    "GetClassLongPtrA",
    "GetClassLongPtrW",
    "GetClassLongPtr",
    "SetClassLongPtrA",
    "SetClassLongPtrW",
    "SetClassLongPtr",
    "GetProcessDefaultLayout",
    "SetProcessDefaultLayout",
    "GetDesktopWindow",
    "GetParent",
    "SetParent",
    "EnumChildWindows",
    "FindWindowA",
    "FindWindowW",
    "FindWindow",
    "FindWindowExA",
    "FindWindowExW",
    "FindWindowEx",
    "GetShellWindow",
    "RegisterShellHookWindow",
    "DeregisterShellHookWindow",
    "EnumWindows",
    "EnumThreadWindows",
    "GetClassNameA",
    "GetClassNameW",
    "GetClassName",
    "GetTopWindow",
    "GetWindowThreadProcessId",
    "IsGUIThread",
    "GetLastActivePopup",
    "GetWindow",
    "SetWindowsHookA",
    "SetWindowsHookW",
    "SetWindowsHook",
    "UnhookWindowsHook",
    "SetWindowsHookExA",
    "SetWindowsHookExW",
    "SetWindowsHookEx",
    "UnhookWindowsHookEx",
    "CallNextHookEx",
    "CheckMenuRadioItem",
    "LoadCursorA",
    "LoadCursorW",
    "LoadCursor",
    "LoadCursorFromFileA",
    "LoadCursorFromFileW",
    "LoadCursorFromFile",
    "CreateCursor",
    "DestroyCursor",
    "SetSystemCursor",
    "LoadIconA",
    "LoadIconW",
    "LoadIcon",
    "PrivateExtractIconsA",
    "PrivateExtractIconsW",
    "PrivateExtractIcons",
    "CreateIcon",
    "DestroyIcon",
    "LookupIconIdFromDirectory",
    "LookupIconIdFromDirectoryEx",
    "CreateIconFromResource",
    "CreateIconFromResourceEx",
    "LoadImageA",
    "LoadImageW",
    "LoadImage",
    "CopyImage",
    "DrawIconEx",
    "CreateIconIndirect",
    "CopyIcon",
    "GetIconInfo",
    "GetIconInfoExA",
    "GetIconInfoExW",
    "GetIconInfoEx",
    "IsDialogMessageA",
    "IsDialogMessageW",
    "IsDialogMessage",
    "MapDialogRect",
    "GetScrollInfo",
    "DefFrameProcA",
    "DefFrameProcW",
    "DefFrameProc",
    "DefMDIChildProcA",
    "DefMDIChildProcW",
    "DefMDIChildProc",
    "TranslateMDISysAccel",
    "ArrangeIconicWindows",
    "CreateMDIWindowA",
    "CreateMDIWindowW",
    "CreateMDIWindow",
    "TileWindows",
    "CascadeWindows",
    "SystemParametersInfoA",
    "SystemParametersInfoW",
    "SystemParametersInfo",
    "SoundSentry",
    "SetDebugErrorLevel",
    "InternalGetWindowText",
    "CancelShutdown",
    "GetGUIThreadInfo",
    "SetProcessDPIAware",
    "IsProcessDPIAware",
    "InheritWindowMonitor",
    "GetWindowModuleFileNameA",
    "GetWindowModuleFileNameW",
    "GetWindowModuleFileName",
    "GetCursorInfo",
    "GetWindowInfo",
    "GetTitleBarInfo",
    "GetMenuBarInfo",
    "GetScrollBarInfo",
    "GetAncestor",
    "RealChildWindowFromPoint",
    "RealGetWindowClassA",
    "RealGetWindowClassW",
    "RealGetWindowClass",
    "GetAltTabInfoA",
    "GetAltTabInfoW",
    "GetAltTabInfo",
    "ChangeWindowMessageFilter",
    "ChangeWindowMessageFilterEx",
    "CreateResourceIndexer",
    "DestroyResourceIndexer",
    "IndexFilePath",
    "DestroyIndexedResults",
    "MrmCreateResourceIndexer",
    "MrmCreateResourceIndexerFromPreviousSchemaFile",
    "MrmCreateResourceIndexerFromPreviousPriFile",
    "MrmCreateResourceIndexerFromPreviousSchemaData",
    "MrmCreateResourceIndexerFromPreviousPriData",
    "MrmCreateResourceIndexerWithFlags",
    "MrmIndexString",
    "MrmIndexEmbeddedData",
    "MrmIndexFile",
    "MrmIndexFileAutoQualifiers",
    "MrmIndexResourceContainerAutoQualifiers",
    "MrmCreateResourceFile",
    "MrmCreateResourceFileWithChecksum",
    "MrmCreateResourceFileInMemory",
    "MrmPeekResourceIndexerMessages",
    "MrmDestroyIndexerAndMessages",
    "MrmFreeMemory",
    "MrmDumpPriFile",
    "MrmDumpPriFileInMemory",
    "MrmDumpPriDataInMemory",
    "MrmCreateConfig",
    "MrmCreateConfigInMemory",
    "MrmGetPriFileContentChecksum",
]
