from win32more import *
import win32more.Foundation
import win32more.Graphics.Gdi
import win32more.Media
import win32more.Media.Audio
import win32more.Media.Multimedia
import win32more.System.Com
import win32more.System.IO
import win32more.UI.Controls
import win32more.UI.Controls.Dialogs

import sys
_module = sys.modules[__name__]
def __getattr__(name):
    try:
        f = globals()[f"_define_{name}"]
    except KeyError:
        raise AttributeError(f"module '{__name__}' has no attribute '{name}'") from None
    setattr(_module, name, f())
    return getattr(_module, name)
def __dir__():
    return __all__
WM_CAP_START = 1024
MODM_USER = 16384
MIDM_USER = 16384
MODM_MAPPER = 8192
MIDM_MAPPER = 8192
MODM_INIT = 100
MIDM_INIT = 100
MODM_INIT_EX = 104
MIDM_INIT_EX = 104
DRV_MCI_FIRST = 2048
ACMDM_BASE = 24576
ICM_RESERVED = 20480
MCI_TEST = 32
MCI_CAPTURE = 2160
MCI_MONITOR = 2161
MCI_RESERVE = 2162
MCI_SETAUDIO = 2163
MCI_SIGNAL = 2165
MCI_SETVIDEO = 2166
MCI_QUALITY = 2167
MCI_LIST = 2168
MCI_UNDO = 2169
MCI_CONFIGURE = 2170
MCI_RESTORE = 2171
MCI_ON = 1
MCI_OFF = 0
MCI_DGV_FILE_MODE_SAVING = 1
MCI_DGV_FILE_MODE_LOADING = 2
MCI_DGV_FILE_MODE_EDITING = 3
MCI_DGV_FILE_MODE_IDLE = 4
MCI_ON_S = 32768
MCI_OFF_S = 32769
MCI_DGV_FILE_S = 32770
MCI_DGV_INPUT_S = 32771
MCI_DGV_FILE_MODE_SAVING_S = 32772
MCI_DGV_FILE_MODE_LOADING_S = 32773
MCI_DGV_FILE_MODE_EDITING_S = 32774
MCI_DGV_FILE_MODE_IDLE_S = 32775
MCI_DGV_SETVIDEO_SRC_NTSC_S = 32784
MCI_DGV_SETVIDEO_SRC_RGB_S = 32785
MCI_DGV_SETVIDEO_SRC_SVIDEO_S = 32786
MCI_DGV_SETVIDEO_SRC_PAL_S = 32787
MCI_DGV_SETVIDEO_SRC_SECAM_S = 32788
MCI_DGV_SETVIDEO_SRC_GENERIC_S = 32789
MCI_DGV_SETAUDIO_SRC_LEFT_S = 32800
MCI_DGV_SETAUDIO_SRC_RIGHT_S = 32801
MCI_DGV_SETAUDIO_SRC_AVERAGE_S = 32802
MCI_DGV_SETAUDIO_SRC_STEREO_S = 32803
MCIERR_DGV_DEVICE_LIMIT = 512
MCIERR_DGV_IOERR = 513
MCIERR_DGV_WORKSPACE_EMPTY = 514
MCIERR_DGV_DISK_FULL = 515
MCIERR_DGV_DEVICE_MEMORY_FULL = 516
MCIERR_DGV_BAD_CLIPBOARD_RANGE = 517
MCI_DGV_METHOD_PRE = 40960
MCI_DGV_METHOD_POST = 40961
MCI_DGV_METHOD_DIRECT = 40962
MCI_DGV_FF_AVSS = 16384
MCI_DGV_FF_AVI = 16385
MCI_DGV_FF_DIB = 16386
MCI_DGV_FF_RDIB = 16387
MCI_DGV_FF_JPEG = 16388
MCI_DGV_FF_RJPEG = 16389
MCI_DGV_FF_JFIF = 16390
MCI_DGV_FF_MPEG = 16391
MCI_DGV_GETDEVCAPS_CAN_LOCK = 16384
MCI_DGV_GETDEVCAPS_CAN_STRETCH = 16385
MCI_DGV_GETDEVCAPS_CAN_FREEZE = 16386
MCI_DGV_GETDEVCAPS_MAX_WINDOWS = 16387
MCI_DGV_GETDEVCAPS_CAN_REVERSE = 16388
MCI_DGV_GETDEVCAPS_HAS_STILL = 16389
MCI_DGV_GETDEVCAPS_PALETTES = 16390
MCI_DGV_GETDEVCAPS_CAN_STR_IN = 16392
MCI_DGV_GETDEVCAPS_CAN_TEST = 16393
MCI_DGV_GETDEVCAPS_MAXIMUM_RATE = 16394
MCI_DGV_GETDEVCAPS_MINIMUM_RATE = 16395
MCI_DGV_CAPTURE_AS = 65536
MCI_DGV_CAPTURE_AT = 131072
MCI_DGV_COPY_AT = 65536
MCI_DGV_COPY_AUDIO_STREAM = 131072
MCI_DGV_COPY_VIDEO_STREAM = 262144
MCI_DGV_CUE_INPUT = 65536
MCI_DGV_CUE_OUTPUT = 131072
MCI_DGV_CUE_NOSHOW = 262144
MCI_DGV_CUT_AT = 65536
MCI_DGV_CUT_AUDIO_STREAM = 131072
MCI_DGV_CUT_VIDEO_STREAM = 262144
MCI_DGV_DELETE_AT = 65536
MCI_DGV_DELETE_AUDIO_STREAM = 131072
MCI_DGV_DELETE_VIDEO_STREAM = 262144
MCI_DGV_FREEZE_AT = 65536
MCI_DGV_FREEZE_OUTSIDE = 131072
MCI_DGV_INFO_TEXT = 65536
MCI_DGV_INFO_ITEM = 131072
MCI_INFO_VERSION = 1024
MCI_DGV_INFO_USAGE = 16384
MCI_DGV_INFO_AUDIO_QUALITY = 16385
MCI_DGV_INFO_STILL_QUALITY = 16386
MCI_DGV_INFO_VIDEO_QUALITY = 16387
MCI_DGV_INFO_AUDIO_ALG = 16388
MCI_DGV_INFO_STILL_ALG = 16389
MCI_DGV_INFO_VIDEO_ALG = 16390
MCI_DGV_LIST_ITEM = 65536
MCI_DGV_LIST_COUNT = 131072
MCI_DGV_LIST_NUMBER = 262144
MCI_DGV_LIST_ALG = 524288
MCI_DGV_LIST_AUDIO_ALG = 16384
MCI_DGV_LIST_AUDIO_QUALITY = 16385
MCI_DGV_LIST_AUDIO_STREAM = 16386
MCI_DGV_LIST_STILL_ALG = 16387
MCI_DGV_LIST_STILL_QUALITY = 16388
MCI_DGV_LIST_VIDEO_ALG = 16389
MCI_DGV_LIST_VIDEO_QUALITY = 16390
MCI_DGV_LIST_VIDEO_STREAM = 16391
MCI_DGV_LIST_VIDEO_SOURCE = 16392
MCI_DGV_MONITOR_METHOD = 65536
MCI_DGV_MONITOR_SOURCE = 131072
MCI_DGV_MONITOR_INPUT = 16384
MCI_DGV_MONITOR_FILE = 16385
MCI_DGV_OPEN_WS = 65536
MCI_DGV_OPEN_PARENT = 131072
MCI_DGV_OPEN_NOSTATIC = 262144
MCI_DGV_OPEN_16BIT = 524288
MCI_DGV_OPEN_32BIT = 1048576
MCI_DGV_PASTE_AT = 65536
MCI_DGV_PASTE_AUDIO_STREAM = 131072
MCI_DGV_PASTE_VIDEO_STREAM = 262144
MCI_DGV_PASTE_INSERT = 524288
MCI_DGV_PASTE_OVERWRITE = 1048576
MCI_DGV_PLAY_REPEAT = 65536
MCI_DGV_PLAY_REVERSE = 131072
MCI_DGV_RECT = 65536
MCI_DGV_PUT_SOURCE = 131072
MCI_DGV_PUT_DESTINATION = 262144
MCI_DGV_PUT_FRAME = 524288
MCI_DGV_PUT_VIDEO = 1048576
MCI_DGV_PUT_WINDOW = 2097152
MCI_DGV_PUT_CLIENT = 4194304
MCI_QUALITY_ITEM = 65536
MCI_QUALITY_NAME = 131072
MCI_QUALITY_ALG = 262144
MCI_QUALITY_DIALOG = 524288
MCI_QUALITY_HANDLE = 1048576
MCI_QUALITY_ITEM_AUDIO = 16384
MCI_QUALITY_ITEM_STILL = 16385
MCI_QUALITY_ITEM_VIDEO = 16386
MCI_DGV_REALIZE_NORM = 65536
MCI_DGV_REALIZE_BKGD = 131072
MCI_DGV_RECORD_HOLD = 131072
MCI_DGV_RECORD_AUDIO_STREAM = 262144
MCI_DGV_RECORD_VIDEO_STREAM = 524288
MCI_DGV_RESERVE_IN = 65536
MCI_DGV_RESERVE_SIZE = 131072
MCI_DGV_RESTORE_FROM = 65536
MCI_DGV_RESTORE_AT = 131072
MCI_DGV_SAVE_ABORT = 131072
MCI_DGV_SAVE_KEEPRESERVE = 262144
MCI_DGV_SET_SEEK_EXACTLY = 65536
MCI_DGV_SET_SPEED = 131072
MCI_DGV_SET_STILL = 262144
MCI_DGV_SET_FILEFORMAT = 524288
MCI_DGV_SETAUDIO_OVER = 65536
MCI_DGV_SETAUDIO_CLOCKTIME = 131072
MCI_DGV_SETAUDIO_ALG = 262144
MCI_DGV_SETAUDIO_QUALITY = 524288
MCI_DGV_SETAUDIO_RECORD = 1048576
MCI_DGV_SETAUDIO_LEFT = 2097152
MCI_DGV_SETAUDIO_RIGHT = 4194304
MCI_DGV_SETAUDIO_ITEM = 8388608
MCI_DGV_SETAUDIO_VALUE = 16777216
MCI_DGV_SETAUDIO_INPUT = 33554432
MCI_DGV_SETAUDIO_OUTPUT = 67108864
MCI_DGV_SETAUDIO_TREBLE = 16384
MCI_DGV_SETAUDIO_BASS = 16385
MCI_DGV_SETAUDIO_VOLUME = 16386
MCI_DGV_SETAUDIO_STREAM = 16387
MCI_DGV_SETAUDIO_SOURCE = 16388
MCI_DGV_SETAUDIO_SAMPLESPERSEC = 16389
MCI_DGV_SETAUDIO_AVGBYTESPERSEC = 16390
MCI_DGV_SETAUDIO_BLOCKALIGN = 16391
MCI_DGV_SETAUDIO_BITSPERSAMPLE = 16392
MCI_DGV_SETAUDIO_SOURCE_STEREO = 0
MCI_DGV_SETAUDIO_SOURCE_LEFT = 1
MCI_DGV_SETAUDIO_SOURCE_RIGHT = 2
MCI_DGV_SETAUDIO_SOURCE_AVERAGE = 16384
MCI_DGV_SETVIDEO_QUALITY = 65536
MCI_DGV_SETVIDEO_ALG = 131072
MCI_DGV_SETVIDEO_CLOCKTIME = 262144
MCI_DGV_SETVIDEO_SRC_NUMBER = 524288
MCI_DGV_SETVIDEO_ITEM = 1048576
MCI_DGV_SETVIDEO_OVER = 2097152
MCI_DGV_SETVIDEO_RECORD = 4194304
MCI_DGV_SETVIDEO_STILL = 8388608
MCI_DGV_SETVIDEO_VALUE = 16777216
MCI_DGV_SETVIDEO_INPUT = 33554432
MCI_DGV_SETVIDEO_OUTPUT = 67108864
MCI_DGV_SETVIDEO_SRC_NTSC = 16384
MCI_DGV_SETVIDEO_SRC_RGB = 16385
MCI_DGV_SETVIDEO_SRC_SVIDEO = 16386
MCI_DGV_SETVIDEO_SRC_PAL = 16387
MCI_DGV_SETVIDEO_SRC_SECAM = 16388
MCI_DGV_SETVIDEO_SRC_GENERIC = 16389
MCI_DGV_SETVIDEO_BRIGHTNESS = 16384
MCI_DGV_SETVIDEO_COLOR = 16385
MCI_DGV_SETVIDEO_CONTRAST = 16386
MCI_DGV_SETVIDEO_TINT = 16387
MCI_DGV_SETVIDEO_SHARPNESS = 16388
MCI_DGV_SETVIDEO_GAMMA = 16389
MCI_DGV_SETVIDEO_STREAM = 16390
MCI_DGV_SETVIDEO_PALHANDLE = 16391
MCI_DGV_SETVIDEO_FRAME_RATE = 16392
MCI_DGV_SETVIDEO_SOURCE = 16393
MCI_DGV_SETVIDEO_KEY_INDEX = 16394
MCI_DGV_SETVIDEO_KEY_COLOR = 16395
MCI_DGV_SETVIDEO_BITSPERPEL = 16396
MCI_DGV_SIGNAL_AT = 65536
MCI_DGV_SIGNAL_EVERY = 131072
MCI_DGV_SIGNAL_USERVAL = 262144
MCI_DGV_SIGNAL_CANCEL = 524288
MCI_DGV_SIGNAL_POSITION = 1048576
MCI_DGV_STATUS_NOMINAL = 131072
MCI_DGV_STATUS_REFERENCE = 262144
MCI_DGV_STATUS_LEFT = 524288
MCI_DGV_STATUS_RIGHT = 1048576
MCI_DGV_STATUS_DISKSPACE = 2097152
MCI_DGV_STATUS_INPUT = 4194304
MCI_DGV_STATUS_OUTPUT = 8388608
MCI_DGV_STATUS_RECORD = 16777216
MCI_DGV_STATUS_AUDIO_INPUT = 16384
MCI_DGV_STATUS_HWND = 16385
MCI_DGV_STATUS_SPEED = 16387
MCI_DGV_STATUS_HPAL = 16388
MCI_DGV_STATUS_BRIGHTNESS = 16389
MCI_DGV_STATUS_COLOR = 16390
MCI_DGV_STATUS_CONTRAST = 16391
MCI_DGV_STATUS_FILEFORMAT = 16392
MCI_DGV_STATUS_AUDIO_SOURCE = 16393
MCI_DGV_STATUS_GAMMA = 16394
MCI_DGV_STATUS_MONITOR = 16395
MCI_DGV_STATUS_MONITOR_METHOD = 16396
MCI_DGV_STATUS_FRAME_RATE = 16398
MCI_DGV_STATUS_BASS = 16399
MCI_DGV_STATUS_SIZE = 16400
MCI_DGV_STATUS_SEEK_EXACTLY = 16401
MCI_DGV_STATUS_SHARPNESS = 16402
MCI_DGV_STATUS_SMPTE = 16403
MCI_DGV_STATUS_AUDIO = 16404
MCI_DGV_STATUS_TINT = 16405
MCI_DGV_STATUS_TREBLE = 16406
MCI_DGV_STATUS_UNSAVED = 16407
MCI_DGV_STATUS_VIDEO = 16408
MCI_DGV_STATUS_VOLUME = 16409
MCI_DGV_STATUS_AUDIO_RECORD = 16410
MCI_DGV_STATUS_VIDEO_SOURCE = 16411
MCI_DGV_STATUS_VIDEO_RECORD = 16412
MCI_DGV_STATUS_STILL_FILEFORMAT = 16413
MCI_DGV_STATUS_VIDEO_SRC_NUM = 16414
MCI_DGV_STATUS_FILE_MODE = 16415
MCI_DGV_STATUS_FILE_COMPLETION = 16416
MCI_DGV_STATUS_WINDOW_VISIBLE = 16417
MCI_DGV_STATUS_WINDOW_MINIMIZED = 16418
MCI_DGV_STATUS_WINDOW_MAXIMIZED = 16419
MCI_DGV_STATUS_KEY_INDEX = 16420
MCI_DGV_STATUS_KEY_COLOR = 16421
MCI_DGV_STATUS_PAUSE_MODE = 16422
MCI_DGV_STATUS_SAMPLESPERSEC = 16423
MCI_DGV_STATUS_AVGBYTESPERSEC = 16424
MCI_DGV_STATUS_BLOCKALIGN = 16425
MCI_DGV_STATUS_BITSPERSAMPLE = 16426
MCI_DGV_STATUS_BITSPERPEL = 16427
MCI_DGV_STATUS_FORWARD = 16428
MCI_DGV_STATUS_AUDIO_STREAM = 16429
MCI_DGV_STATUS_VIDEO_STREAM = 16430
MCI_DGV_STEP_REVERSE = 65536
MCI_DGV_STEP_FRAMES = 131072
MCI_DGV_STOP_HOLD = 65536
MCI_DGV_UPDATE_HDC = 131072
MCI_DGV_UPDATE_PAINT = 262144
MCI_DGV_WHERE_SOURCE = 131072
MCI_DGV_WHERE_DESTINATION = 262144
MCI_DGV_WHERE_FRAME = 524288
MCI_DGV_WHERE_VIDEO = 1048576
MCI_DGV_WHERE_WINDOW = 2097152
MCI_DGV_WHERE_MAX = 4194304
MCI_DGV_WINDOW_HWND = 65536
MCI_DGV_WINDOW_STATE = 262144
MCI_DGV_WINDOW_TEXT = 524288
MCI_DGV_WINDOW_DEFAULT = 0
MM_CREATIVE = 2
MM_MEDIAVISION = 3
MM_FUJITSU = 4
MM_PRAGMATRAX = 5
MM_CYRIX = 6
MM_PHILIPS_SPEECH_PROCESSING = 7
MM_NETXL = 8
MM_ZYXEL = 9
MM_BECUBED = 10
MM_AARDVARK = 11
MM_BINTEC = 12
MM_HEWLETT_PACKARD = 13
MM_ACULAB = 14
MM_FAITH = 15
MM_MITEL = 16
MM_QUANTUM3D = 17
MM_SNI = 18
MM_EMU = 19
MM_ARTISOFT = 20
MM_TURTLE_BEACH = 21
MM_IBM = 22
MM_VOCALTEC = 23
MM_ROLAND = 24
MM_DSP_SOLUTIONS = 25
MM_NEC = 26
MM_ATI = 27
MM_WANGLABS = 28
MM_TANDY = 29
MM_VOYETRA = 30
MM_ANTEX = 31
MM_ICL_PS = 32
MM_INTEL = 33
MM_GRAVIS = 34
MM_VAL = 35
MM_INTERACTIVE = 36
MM_YAMAHA = 37
MM_EVEREX = 38
MM_ECHO = 39
MM_SIERRA = 40
MM_CAT = 41
MM_APPS = 42
MM_DSP_GROUP = 43
MM_MELABS = 44
MM_COMPUTER_FRIENDS = 45
MM_ESS = 46
MM_AUDIOFILE = 47
MM_MOTOROLA = 48
MM_CANOPUS = 49
MM_EPSON = 50
MM_TRUEVISION = 51
MM_AZTECH = 52
MM_VIDEOLOGIC = 53
MM_SCALACS = 54
MM_KORG = 55
MM_APT = 56
MM_ICS = 57
MM_ITERATEDSYS = 58
MM_METHEUS = 59
MM_LOGITECH = 60
MM_WINNOV = 61
MM_NCR = 62
MM_EXAN = 63
MM_AST = 64
MM_WILLOWPOND = 65
MM_SONICFOUNDRY = 66
MM_VITEC = 67
MM_MOSCOM = 68
MM_SILICONSOFT = 69
MM_TERRATEC = 70
MM_MEDIASONIC = 71
MM_SANYO = 72
MM_SUPERMAC = 73
MM_AUDIOPT = 74
MM_NOGATECH = 75
MM_SPEECHCOMP = 76
MM_AHEAD = 77
MM_DOLBY = 78
MM_OKI = 79
MM_AURAVISION = 80
MM_OLIVETTI = 81
MM_IOMAGIC = 82
MM_MATSUSHITA = 83
MM_CONTROLRES = 84
MM_XEBEC = 85
MM_NEWMEDIA = 86
MM_NMS = 87
MM_LYRRUS = 88
MM_COMPUSIC = 89
MM_OPTI = 90
MM_ADLACC = 91
MM_COMPAQ = 92
MM_DIALOGIC = 93
MM_INSOFT = 94
MM_MPTUS = 95
MM_WEITEK = 96
MM_LERNOUT_AND_HAUSPIE = 97
MM_QCIAR = 98
MM_APPLE = 99
MM_DIGITAL = 100
MM_MOTU = 101
MM_WORKBIT = 102
MM_OSITECH = 103
MM_MIRO = 104
MM_CIRRUSLOGIC = 105
MM_ISOLUTION = 106
MM_HORIZONS = 107
MM_CONCEPTS = 108
MM_VTG = 109
MM_RADIUS = 110
MM_ROCKWELL = 111
MM_XYZ = 112
MM_OPCODE = 113
MM_VOXWARE = 114
MM_NORTHERN_TELECOM = 115
MM_APICOM = 116
MM_GRANDE = 117
MM_ADDX = 118
MM_WILDCAT = 119
MM_RHETOREX = 120
MM_BROOKTREE = 121
MM_ENSONIQ = 125
MM_FAST = 126
MM_NVIDIA = 127
MM_OKSORI = 128
MM_DIACOUSTICS = 129
MM_GULBRANSEN = 130
MM_KAY_ELEMETRICS = 131
MM_CRYSTAL = 132
MM_SPLASH_STUDIOS = 133
MM_QUARTERDECK = 134
MM_TDK = 135
MM_DIGITAL_AUDIO_LABS = 136
MM_SEERSYS = 137
MM_PICTURETEL = 138
MM_ATT_MICROELECTRONICS = 139
MM_OSPREY = 140
MM_MEDIATRIX = 141
MM_SOUNDESIGNS = 142
MM_ALDIGITAL = 143
MM_SPECTRUM_SIGNAL_PROCESSING = 144
MM_ECS = 145
MM_AMD = 146
MM_COREDYNAMICS = 147
MM_CANAM = 148
MM_SOFTSOUND = 149
MM_NORRIS = 150
MM_DDD = 151
MM_EUPHONICS = 152
MM_PRECEPT = 153
MM_CRYSTAL_NET = 154
MM_CHROMATIC = 155
MM_VOICEINFO = 156
MM_VIENNASYS = 157
MM_CONNECTIX = 158
MM_GADGETLABS = 159
MM_FRONTIER = 160
MM_VIONA = 161
MM_CASIO = 162
MM_DIAMONDMM = 163
MM_S3 = 164
MM_DVISION = 165
MM_NETSCAPE = 166
MM_SOUNDSPACE = 167
MM_VANKOEVERING = 168
MM_QTEAM = 169
MM_ZEFIRO = 170
MM_STUDER = 171
MM_FRAUNHOFER_IIS = 172
MM_QUICKNET = 173
MM_ALARIS = 174
MM_SICRESOURCE = 175
MM_NEOMAGIC = 176
MM_MERGING_TECHNOLOGIES = 177
MM_XIRLINK = 178
MM_COLORGRAPH = 179
MM_OTI = 180
MM_AUREAL = 181
MM_VIVO = 182
MM_SHARP = 183
MM_LUCENT = 184
MM_ATT = 185
MM_SUNCOM = 186
MM_SORVIS = 187
MM_INVISION = 188
MM_BERKOM = 189
MM_MARIAN = 190
MM_DPSINC = 191
MM_BCB = 192
MM_MOTIONPIXELS = 193
MM_QDESIGN = 194
MM_NMP = 195
MM_DATAFUSION = 196
MM_DUCK = 197
MM_FTR = 198
MM_BERCOS = 199
MM_ONLIVE = 200
MM_SIEMENS_SBC = 201
MM_TERALOGIC = 202
MM_PHONET = 203
MM_WINBOND = 204
MM_VIRTUALMUSIC = 205
MM_ENET = 206
MM_GUILLEMOT = 207
MM_EMAGIC = 208
MM_MWM = 209
MM_PACIFICRESEARCH = 210
MM_SIPROLAB = 211
MM_LYNX = 212
MM_SPECTRUM_PRODUCTIONS = 213
MM_DICTAPHONE = 214
MM_QUALCOMM = 215
MM_RZS = 216
MM_AUDIOSCIENCE = 217
MM_PINNACLE = 218
MM_EES = 219
MM_HAFTMANN = 220
MM_LUCID = 221
MM_HEADSPACE = 222
MM_UNISYS = 223
MM_LUMINOSITI = 224
MM_ACTIVEVOICE = 225
MM_DTS = 226
MM_DIGIGRAM = 227
MM_SOFTLAB_NSK = 228
MM_FORTEMEDIA = 229
MM_SONORUS = 230
MM_ARRAY = 231
MM_DATARAN = 232
MM_I_LINK = 233
MM_SELSIUS_SYSTEMS = 234
MM_ADMOS = 235
MM_LEXICON = 236
MM_SGI = 237
MM_IPI = 238
MM_ICE = 239
MM_VQST = 240
MM_ETEK = 241
MM_CS = 242
MM_ALESIS = 243
MM_INTERNET = 244
MM_SONY = 245
MM_HYPERACTIVE = 246
MM_UHER_INFORMATIC = 247
MM_SYDEC_NV = 248
MM_FLEXION = 249
MM_VIA = 250
MM_MICRONAS = 251
MM_ANALOGDEVICES = 252
MM_HP = 253
MM_MATROX_DIV = 254
MM_QUICKAUDIO = 255
MM_YOUCOM = 256
MM_RICHMOND = 257
MM_IODD = 258
MM_ICCC = 259
MM_3COM = 260
MM_MALDEN = 261
MM_3DFX = 262
MM_MINDMAKER = 263
MM_TELEKOL = 264
MM_ST_MICROELECTRONICS = 265
MM_ALGOVISION = 266
MM_UNMAPPED = 65535
MM_PID_UNMAPPED = 65535
MM_PCSPEAKER_WAVEOUT = 13
MM_MSFT_WSS_WAVEIN = 14
MM_MSFT_WSS_WAVEOUT = 15
MM_MSFT_WSS_FMSYNTH_STEREO = 16
MM_MSFT_WSS_MIXER = 17
MM_MSFT_WSS_OEM_WAVEIN = 18
MM_MSFT_WSS_OEM_WAVEOUT = 19
MM_MSFT_WSS_OEM_FMSYNTH_STEREO = 20
MM_MSFT_WSS_AUX = 21
MM_MSFT_WSS_OEM_AUX = 22
MM_MSFT_GENERIC_WAVEIN = 23
MM_MSFT_GENERIC_WAVEOUT = 24
MM_MSFT_GENERIC_MIDIIN = 25
MM_MSFT_GENERIC_MIDIOUT = 26
MM_MSFT_GENERIC_MIDISYNTH = 27
MM_MSFT_GENERIC_AUX_LINE = 28
MM_MSFT_GENERIC_AUX_MIC = 29
MM_MSFT_GENERIC_AUX_CD = 30
MM_MSFT_WSS_OEM_MIXER = 31
MM_MSFT_MSACM = 32
MM_MSFT_ACM_MSADPCM = 33
MM_MSFT_ACM_IMAADPCM = 34
MM_MSFT_ACM_MSFILTER = 35
MM_MSFT_ACM_GSM610 = 36
MM_MSFT_ACM_G711 = 37
MM_MSFT_ACM_PCM = 38
MM_WSS_SB16_WAVEIN = 39
MM_WSS_SB16_WAVEOUT = 40
MM_WSS_SB16_MIDIIN = 41
MM_WSS_SB16_MIDIOUT = 42
MM_WSS_SB16_SYNTH = 43
MM_WSS_SB16_AUX_LINE = 44
MM_WSS_SB16_AUX_CD = 45
MM_WSS_SB16_MIXER = 46
MM_WSS_SBPRO_WAVEIN = 47
MM_WSS_SBPRO_WAVEOUT = 48
MM_WSS_SBPRO_MIDIIN = 49
MM_WSS_SBPRO_MIDIOUT = 50
MM_WSS_SBPRO_SYNTH = 51
MM_WSS_SBPRO_AUX_LINE = 52
MM_WSS_SBPRO_AUX_CD = 53
MM_WSS_SBPRO_MIXER = 54
MM_MSFT_WSS_NT_WAVEIN = 55
MM_MSFT_WSS_NT_WAVEOUT = 56
MM_MSFT_WSS_NT_FMSYNTH_STEREO = 57
MM_MSFT_WSS_NT_MIXER = 58
MM_MSFT_WSS_NT_AUX = 59
MM_MSFT_SB16_WAVEIN = 60
MM_MSFT_SB16_WAVEOUT = 61
MM_MSFT_SB16_MIDIIN = 62
MM_MSFT_SB16_MIDIOUT = 63
MM_MSFT_SB16_SYNTH = 64
MM_MSFT_SB16_AUX_LINE = 65
MM_MSFT_SB16_AUX_CD = 66
MM_MSFT_SB16_MIXER = 67
MM_MSFT_SBPRO_WAVEIN = 68
MM_MSFT_SBPRO_WAVEOUT = 69
MM_MSFT_SBPRO_MIDIIN = 70
MM_MSFT_SBPRO_MIDIOUT = 71
MM_MSFT_SBPRO_SYNTH = 72
MM_MSFT_SBPRO_AUX_LINE = 73
MM_MSFT_SBPRO_AUX_CD = 74
MM_MSFT_SBPRO_MIXER = 75
MM_MSFT_MSOPL_SYNTH = 76
MM_MSFT_VMDMS_LINE_WAVEIN = 80
MM_MSFT_VMDMS_LINE_WAVEOUT = 81
MM_MSFT_VMDMS_HANDSET_WAVEIN = 82
MM_MSFT_VMDMS_HANDSET_WAVEOUT = 83
MM_MSFT_VMDMW_LINE_WAVEIN = 84
MM_MSFT_VMDMW_LINE_WAVEOUT = 85
MM_MSFT_VMDMW_HANDSET_WAVEIN = 86
MM_MSFT_VMDMW_HANDSET_WAVEOUT = 87
MM_MSFT_VMDMW_MIXER = 88
MM_MSFT_VMDM_GAME_WAVEOUT = 89
MM_MSFT_VMDM_GAME_WAVEIN = 90
MM_MSFT_ACM_MSNAUDIO = 91
MM_MSFT_ACM_MSG723 = 92
MM_MSFT_ACM_MSRT24 = 93
MM_MSFT_WDMAUDIO_WAVEOUT = 100
MM_MSFT_WDMAUDIO_WAVEIN = 101
MM_MSFT_WDMAUDIO_MIDIOUT = 102
MM_MSFT_WDMAUDIO_MIDIIN = 103
MM_MSFT_WDMAUDIO_MIXER = 104
MM_MSFT_WDMAUDIO_AUX = 105
MM_CREATIVE_SB15_WAVEIN = 1
MM_CREATIVE_SB20_WAVEIN = 2
MM_CREATIVE_SBPRO_WAVEIN = 3
MM_CREATIVE_SBP16_WAVEIN = 4
MM_CREATIVE_PHNBLST_WAVEIN = 5
MM_CREATIVE_SB15_WAVEOUT = 101
MM_CREATIVE_SB20_WAVEOUT = 102
MM_CREATIVE_SBPRO_WAVEOUT = 103
MM_CREATIVE_SBP16_WAVEOUT = 104
MM_CREATIVE_PHNBLST_WAVEOUT = 105
MM_CREATIVE_MIDIOUT = 201
MM_CREATIVE_MIDIIN = 202
MM_CREATIVE_FMSYNTH_MONO = 301
MM_CREATIVE_FMSYNTH_STEREO = 302
MM_CREATIVE_MIDI_AWE32 = 303
MM_CREATIVE_AUX_CD = 401
MM_CREATIVE_AUX_LINE = 402
MM_CREATIVE_AUX_MIC = 403
MM_CREATIVE_AUX_MASTER = 404
MM_CREATIVE_AUX_PCSPK = 405
MM_CREATIVE_AUX_WAVE = 406
MM_CREATIVE_AUX_MIDI = 407
MM_CREATIVE_SBPRO_MIXER = 408
MM_CREATIVE_SB16_MIXER = 409
MM_MEDIAVISION_PROAUDIO = 16
MM_PROAUD_MIDIOUT = 17
MM_PROAUD_MIDIIN = 18
MM_PROAUD_SYNTH = 19
MM_PROAUD_WAVEOUT = 20
MM_PROAUD_WAVEIN = 21
MM_PROAUD_MIXER = 22
MM_PROAUD_AUX = 23
MM_MEDIAVISION_THUNDER = 32
MM_THUNDER_SYNTH = 35
MM_THUNDER_WAVEOUT = 36
MM_THUNDER_WAVEIN = 37
MM_THUNDER_AUX = 39
MM_MEDIAVISION_TPORT = 64
MM_TPORT_WAVEOUT = 65
MM_TPORT_WAVEIN = 66
MM_TPORT_SYNTH = 67
MM_MEDIAVISION_PROAUDIO_PLUS = 80
MM_PROAUD_PLUS_MIDIOUT = 81
MM_PROAUD_PLUS_MIDIIN = 82
MM_PROAUD_PLUS_SYNTH = 83
MM_PROAUD_PLUS_WAVEOUT = 84
MM_PROAUD_PLUS_WAVEIN = 85
MM_PROAUD_PLUS_MIXER = 86
MM_PROAUD_PLUS_AUX = 87
MM_MEDIAVISION_PROAUDIO_16 = 96
MM_PROAUD_16_MIDIOUT = 97
MM_PROAUD_16_MIDIIN = 98
MM_PROAUD_16_SYNTH = 99
MM_PROAUD_16_WAVEOUT = 100
MM_PROAUD_16_WAVEIN = 101
MM_PROAUD_16_MIXER = 102
MM_PROAUD_16_AUX = 103
MM_MEDIAVISION_PROSTUDIO_16 = 96
MM_STUDIO_16_MIDIOUT = 97
MM_STUDIO_16_MIDIIN = 98
MM_STUDIO_16_SYNTH = 99
MM_STUDIO_16_WAVEOUT = 100
MM_STUDIO_16_WAVEIN = 101
MM_STUDIO_16_MIXER = 102
MM_STUDIO_16_AUX = 103
MM_MEDIAVISION_CDPC = 112
MM_CDPC_MIDIOUT = 113
MM_CDPC_MIDIIN = 114
MM_CDPC_SYNTH = 115
MM_CDPC_WAVEOUT = 116
MM_CDPC_WAVEIN = 117
MM_CDPC_MIXER = 118
MM_CDPC_AUX = 119
MM_MEDIAVISION_OPUS1208 = 128
MM_OPUS401_MIDIOUT = 129
MM_OPUS401_MIDIIN = 130
MM_OPUS1208_SYNTH = 131
MM_OPUS1208_WAVEOUT = 132
MM_OPUS1208_WAVEIN = 133
MM_OPUS1208_MIXER = 134
MM_OPUS1208_AUX = 135
MM_MEDIAVISION_OPUS1216 = 144
MM_OPUS1216_MIDIOUT = 145
MM_OPUS1216_MIDIIN = 146
MM_OPUS1216_SYNTH = 147
MM_OPUS1216_WAVEOUT = 148
MM_OPUS1216_WAVEIN = 149
MM_OPUS1216_MIXER = 150
MM_OPUS1216_AUX = 151
MM_CYRIX_XASYNTH = 1
MM_CYRIX_XAMIDIIN = 2
MM_CYRIX_XAMIDIOUT = 3
MM_CYRIX_XAWAVEIN = 4
MM_CYRIX_XAWAVEOUT = 5
MM_CYRIX_XAAUX = 6
MM_CYRIX_XAMIXER = 7
MM_PHILIPS_ACM_LPCBB = 1
MM_NETXL_XLVIDEO = 1
MM_ZYXEL_ACM_ADPCM = 1
MM_AARDVARK_STUDIO12_WAVEOUT = 1
MM_AARDVARK_STUDIO12_WAVEIN = 2
MM_AARDVARK_STUDIO88_WAVEOUT = 3
MM_AARDVARK_STUDIO88_WAVEIN = 4
MM_BINTEC_TAPI_WAVE = 1
MM_HEWLETT_PACKARD_CU_CODEC = 1
MM_MITEL_TALKTO_LINE_WAVEOUT = 100
MM_MITEL_TALKTO_LINE_WAVEIN = 101
MM_MITEL_TALKTO_HANDSET_WAVEOUT = 102
MM_MITEL_TALKTO_HANDSET_WAVEIN = 103
MM_MITEL_TALKTO_BRIDGED_WAVEOUT = 104
MM_MITEL_TALKTO_BRIDGED_WAVEIN = 105
MM_MITEL_MPA_HANDSET_WAVEOUT = 200
MM_MITEL_MPA_HANDSET_WAVEIN = 201
MM_MITEL_MPA_HANDSFREE_WAVEOUT = 202
MM_MITEL_MPA_HANDSFREE_WAVEIN = 203
MM_MITEL_MPA_LINE1_WAVEOUT = 204
MM_MITEL_MPA_LINE1_WAVEIN = 205
MM_MITEL_MPA_LINE2_WAVEOUT = 206
MM_MITEL_MPA_LINE2_WAVEIN = 207
MM_MITEL_MEDIAPATH_WAVEOUT = 300
MM_MITEL_MEDIAPATH_WAVEIN = 301
MM_SNI_ACM_G721 = 1
MM_EMU_APSSYNTH = 1
MM_EMU_APSMIDIIN = 2
MM_EMU_APSMIDIOUT = 3
MM_EMU_APSWAVEIN = 4
MM_EMU_APSWAVEOUT = 5
MM_ARTISOFT_SBWAVEIN = 1
MM_ARTISOFT_SBWAVEOUT = 2
MM_TBS_TROPEZ_WAVEIN = 37
MM_TBS_TROPEZ_WAVEOUT = 38
MM_TBS_TROPEZ_AUX1 = 39
MM_TBS_TROPEZ_AUX2 = 40
MM_TBS_TROPEZ_LINE = 41
MM_MMOTION_WAVEAUX = 1
MM_MMOTION_WAVEOUT = 2
MM_MMOTION_WAVEIN = 3
MM_IBM_PCMCIA_WAVEIN = 11
MM_IBM_PCMCIA_WAVEOUT = 12
MM_IBM_PCMCIA_SYNTH = 13
MM_IBM_PCMCIA_MIDIIN = 14
MM_IBM_PCMCIA_MIDIOUT = 15
MM_IBM_PCMCIA_AUX = 16
MM_IBM_THINKPAD200 = 17
MM_IBM_MWAVE_WAVEIN = 18
MM_IBM_MWAVE_WAVEOUT = 19
MM_IBM_MWAVE_MIXER = 20
MM_IBM_MWAVE_MIDIIN = 21
MM_IBM_MWAVE_MIDIOUT = 22
MM_IBM_MWAVE_AUX = 23
MM_IBM_WC_MIDIOUT = 30
MM_IBM_WC_WAVEOUT = 31
MM_IBM_WC_MIXEROUT = 33
MM_VOCALTEC_WAVEOUT = 1
MM_VOCALTEC_WAVEIN = 2
MM_ROLAND_RAP10_MIDIOUT = 10
MM_ROLAND_RAP10_MIDIIN = 11
MM_ROLAND_RAP10_SYNTH = 12
MM_ROLAND_RAP10_WAVEOUT = 13
MM_ROLAND_RAP10_WAVEIN = 14
MM_ROLAND_MPU401_MIDIOUT = 15
MM_ROLAND_MPU401_MIDIIN = 16
MM_ROLAND_SMPU_MIDIOUTA = 17
MM_ROLAND_SMPU_MIDIOUTB = 18
MM_ROLAND_SMPU_MIDIINA = 19
MM_ROLAND_SMPU_MIDIINB = 20
MM_ROLAND_SC7_MIDIOUT = 21
MM_ROLAND_SC7_MIDIIN = 22
MM_ROLAND_SERIAL_MIDIOUT = 23
MM_ROLAND_SERIAL_MIDIIN = 24
MM_ROLAND_SCP_MIDIOUT = 38
MM_ROLAND_SCP_MIDIIN = 39
MM_ROLAND_SCP_WAVEOUT = 40
MM_ROLAND_SCP_WAVEIN = 41
MM_ROLAND_SCP_MIXER = 42
MM_ROLAND_SCP_AUX = 48
MM_DSP_SOLUTIONS_WAVEOUT = 1
MM_DSP_SOLUTIONS_WAVEIN = 2
MM_DSP_SOLUTIONS_SYNTH = 3
MM_DSP_SOLUTIONS_AUX = 4
MM_NEC_73_86_SYNTH = 5
MM_NEC_73_86_WAVEOUT = 6
MM_NEC_73_86_WAVEIN = 7
MM_NEC_26_SYNTH = 9
MM_NEC_MPU401_MIDIOUT = 10
MM_NEC_MPU401_MIDIIN = 11
MM_NEC_JOYSTICK = 12
MM_WANGLABS_WAVEIN1 = 1
MM_WANGLABS_WAVEOUT1 = 2
MM_TANDY_VISWAVEIN = 1
MM_TANDY_VISWAVEOUT = 2
MM_TANDY_VISBIOSSYNTH = 3
MM_TANDY_SENS_MMAWAVEIN = 4
MM_TANDY_SENS_MMAWAVEOUT = 5
MM_TANDY_SENS_MMAMIDIIN = 6
MM_TANDY_SENS_MMAMIDIOUT = 7
MM_TANDY_SENS_VISWAVEOUT = 8
MM_TANDY_PSSJWAVEIN = 9
MM_TANDY_PSSJWAVEOUT = 10
MM_ANTEX_SX12_WAVEIN = 1
MM_ANTEX_SX12_WAVEOUT = 2
MM_ANTEX_SX15_WAVEIN = 3
MM_ANTEX_SX15_WAVEOUT = 4
MM_ANTEX_VP625_WAVEIN = 5
MM_ANTEX_VP625_WAVEOUT = 6
MM_ANTEX_AUDIOPORT22_WAVEIN = 7
MM_ANTEX_AUDIOPORT22_WAVEOUT = 8
MM_ANTEX_AUDIOPORT22_FEEDTHRU = 9
MM_INTELOPD_WAVEIN = 1
MM_INTELOPD_WAVEOUT = 101
MM_INTELOPD_AUX = 401
MM_INTEL_NSPMODEMLINEIN = 501
MM_INTEL_NSPMODEMLINEOUT = 502
MM_VAL_MICROKEY_AP_WAVEIN = 1
MM_VAL_MICROKEY_AP_WAVEOUT = 2
MM_INTERACTIVE_WAVEIN = 69
MM_INTERACTIVE_WAVEOUT = 69
MM_YAMAHA_GSS_SYNTH = 1
MM_YAMAHA_GSS_WAVEOUT = 2
MM_YAMAHA_GSS_WAVEIN = 3
MM_YAMAHA_GSS_MIDIOUT = 4
MM_YAMAHA_GSS_MIDIIN = 5
MM_YAMAHA_GSS_AUX = 6
MM_YAMAHA_SERIAL_MIDIOUT = 7
MM_YAMAHA_SERIAL_MIDIIN = 8
MM_YAMAHA_OPL3SA_WAVEOUT = 16
MM_YAMAHA_OPL3SA_WAVEIN = 17
MM_YAMAHA_OPL3SA_FMSYNTH = 18
MM_YAMAHA_OPL3SA_YSYNTH = 19
MM_YAMAHA_OPL3SA_MIDIOUT = 20
MM_YAMAHA_OPL3SA_MIDIIN = 21
MM_YAMAHA_OPL3SA_MIXER = 23
MM_YAMAHA_OPL3SA_JOYSTICK = 24
MM_YAMAHA_YMF724LEG_MIDIOUT = 25
MM_YAMAHA_YMF724LEG_MIDIIN = 26
MM_YAMAHA_YMF724_WAVEOUT = 27
MM_YAMAHA_YMF724_WAVEIN = 28
MM_YAMAHA_YMF724_MIDIOUT = 29
MM_YAMAHA_YMF724_AUX = 30
MM_YAMAHA_YMF724_MIXER = 31
MM_YAMAHA_YMF724LEG_FMSYNTH = 32
MM_YAMAHA_YMF724LEG_MIXER = 33
MM_YAMAHA_SXG_MIDIOUT = 34
MM_YAMAHA_SXG_WAVEOUT = 35
MM_YAMAHA_SXG_MIXER = 36
MM_YAMAHA_ACXG_WAVEIN = 37
MM_YAMAHA_ACXG_WAVEOUT = 38
MM_YAMAHA_ACXG_MIDIOUT = 39
MM_YAMAHA_ACXG_MIXER = 40
MM_YAMAHA_ACXG_AUX = 41
MM_EVEREX_CARRIER = 1
MM_ECHO_SYNTH = 1
MM_ECHO_WAVEOUT = 2
MM_ECHO_WAVEIN = 3
MM_ECHO_MIDIOUT = 4
MM_ECHO_MIDIIN = 5
MM_ECHO_AUX = 6
MM_SIERRA_ARIA_MIDIOUT = 20
MM_SIERRA_ARIA_MIDIIN = 21
MM_SIERRA_ARIA_SYNTH = 22
MM_SIERRA_ARIA_WAVEOUT = 23
MM_SIERRA_ARIA_WAVEIN = 24
MM_SIERRA_ARIA_AUX = 25
MM_SIERRA_ARIA_AUX2 = 32
MM_SIERRA_QUARTET_WAVEIN = 80
MM_SIERRA_QUARTET_WAVEOUT = 81
MM_SIERRA_QUARTET_MIDIIN = 82
MM_SIERRA_QUARTET_MIDIOUT = 83
MM_SIERRA_QUARTET_SYNTH = 84
MM_SIERRA_QUARTET_AUX_CD = 85
MM_SIERRA_QUARTET_AUX_LINE = 86
MM_SIERRA_QUARTET_AUX_MODEM = 87
MM_SIERRA_QUARTET_MIXER = 88
MM_CAT_WAVEOUT = 1
MM_DSP_GROUP_TRUESPEECH = 1
MM_MELABS_MIDI2GO = 1
MM_ESS_AMWAVEOUT = 1
MM_ESS_AMWAVEIN = 2
MM_ESS_AMAUX = 3
MM_ESS_AMSYNTH = 4
MM_ESS_AMMIDIOUT = 5
MM_ESS_AMMIDIIN = 6
MM_ESS_MIXER = 7
MM_ESS_AUX_CD = 8
MM_ESS_MPU401_MIDIOUT = 9
MM_ESS_MPU401_MIDIIN = 10
MM_ESS_ES488_WAVEOUT = 16
MM_ESS_ES488_WAVEIN = 17
MM_ESS_ES488_MIXER = 18
MM_ESS_ES688_WAVEOUT = 19
MM_ESS_ES688_WAVEIN = 20
MM_ESS_ES688_MIXER = 21
MM_ESS_ES1488_WAVEOUT = 22
MM_ESS_ES1488_WAVEIN = 23
MM_ESS_ES1488_MIXER = 24
MM_ESS_ES1688_WAVEOUT = 25
MM_ESS_ES1688_WAVEIN = 26
MM_ESS_ES1688_MIXER = 27
MM_ESS_ES1788_WAVEOUT = 28
MM_ESS_ES1788_WAVEIN = 29
MM_ESS_ES1788_MIXER = 30
MM_ESS_ES1888_WAVEOUT = 31
MM_ESS_ES1888_WAVEIN = 32
MM_ESS_ES1888_MIXER = 33
MM_ESS_ES1868_WAVEOUT = 34
MM_ESS_ES1868_WAVEIN = 35
MM_ESS_ES1868_MIXER = 36
MM_ESS_ES1878_WAVEOUT = 37
MM_ESS_ES1878_WAVEIN = 38
MM_ESS_ES1878_MIXER = 39
MM_CANOPUS_ACM_DVREX = 1
MM_EPS_FMSND = 1
MM_TRUEVISION_WAVEIN1 = 1
MM_TRUEVISION_WAVEOUT1 = 2
MM_AZTECH_MIDIOUT = 3
MM_AZTECH_MIDIIN = 4
MM_AZTECH_WAVEIN = 17
MM_AZTECH_WAVEOUT = 18
MM_AZTECH_FMSYNTH = 20
MM_AZTECH_MIXER = 21
MM_AZTECH_PRO16_WAVEIN = 33
MM_AZTECH_PRO16_WAVEOUT = 34
MM_AZTECH_PRO16_FMSYNTH = 38
MM_AZTECH_DSP16_WAVEIN = 65
MM_AZTECH_DSP16_WAVEOUT = 66
MM_AZTECH_DSP16_FMSYNTH = 68
MM_AZTECH_DSP16_WAVESYNTH = 70
MM_AZTECH_NOVA16_WAVEIN = 71
MM_AZTECH_NOVA16_WAVEOUT = 72
MM_AZTECH_NOVA16_MIXER = 73
MM_AZTECH_WASH16_WAVEIN = 74
MM_AZTECH_WASH16_WAVEOUT = 75
MM_AZTECH_WASH16_MIXER = 76
MM_AZTECH_AUX_CD = 401
MM_AZTECH_AUX_LINE = 402
MM_AZTECH_AUX_MIC = 403
MM_AZTECH_AUX = 404
MM_VIDEOLOGIC_MSWAVEIN = 1
MM_VIDEOLOGIC_MSWAVEOUT = 2
MM_KORG_PCIF_MIDIOUT = 1
MM_KORG_PCIF_MIDIIN = 2
MM_KORG_1212IO_MSWAVEIN = 3
MM_KORG_1212IO_MSWAVEOUT = 4
MM_APT_ACE100CD = 1
MM_ICS_WAVEDECK_WAVEOUT = 1
MM_ICS_WAVEDECK_WAVEIN = 2
MM_ICS_WAVEDECK_MIXER = 3
MM_ICS_WAVEDECK_AUX = 4
MM_ICS_WAVEDECK_SYNTH = 5
MM_ICS_WAVEDEC_SB_WAVEOUT = 6
MM_ICS_WAVEDEC_SB_WAVEIN = 7
MM_ICS_WAVEDEC_SB_FM_MIDIOUT = 8
MM_ICS_WAVEDEC_SB_MPU401_MIDIOUT = 9
MM_ICS_WAVEDEC_SB_MPU401_MIDIIN = 10
MM_ICS_WAVEDEC_SB_MIXER = 11
MM_ICS_WAVEDEC_SB_AUX = 12
MM_ICS_2115_LITE_MIDIOUT = 13
MM_ICS_2120_LITE_MIDIOUT = 14
MM_ITERATEDSYS_FUFCODEC = 1
MM_METHEUS_ZIPPER = 1
MM_WINNOV_CAVIAR_WAVEIN = 1
MM_WINNOV_CAVIAR_WAVEOUT = 2
MM_WINNOV_CAVIAR_VIDC = 3
MM_WINNOV_CAVIAR_CHAMPAGNE = 4
MM_WINNOV_CAVIAR_YUV8 = 5
MM_NCR_BA_WAVEIN = 1
MM_NCR_BA_WAVEOUT = 2
MM_NCR_BA_SYNTH = 3
MM_NCR_BA_AUX = 4
MM_NCR_BA_MIXER = 5
MM_AST_MODEMWAVE_WAVEIN = 13
MM_AST_MODEMWAVE_WAVEOUT = 14
MM_WILLOWPOND_FMSYNTH_STEREO = 20
MM_WILLOWPOND_MPU401 = 21
MM_WILLOWPOND_SNDPORT_WAVEIN = 100
MM_WILLOWPOND_SNDPORT_WAVEOUT = 101
MM_WILLOWPOND_SNDPORT_MIXER = 102
MM_WILLOWPOND_SNDPORT_AUX = 103
MM_WILLOWPOND_PH_WAVEIN = 104
MM_WILLOWPOND_PH_WAVEOUT = 105
MM_WILLOWPOND_PH_MIXER = 106
MM_WILLOWPOND_PH_AUX = 107
MM_WILLOPOND_SNDCOMM_WAVEIN = 108
MM_WILLOWPOND_SNDCOMM_WAVEOUT = 109
MM_WILLOWPOND_SNDCOMM_MIXER = 110
MM_WILLOWPOND_SNDCOMM_AUX = 111
MM_WILLOWPOND_GENERIC_WAVEIN = 112
MM_WILLOWPOND_GENERIC_WAVEOUT = 113
MM_WILLOWPOND_GENERIC_MIXER = 114
MM_WILLOWPOND_GENERIC_AUX = 115
MM_VITEC_VMAKER = 1
MM_VITEC_VMPRO = 2
MM_MOSCOM_VPC2400_IN = 1
MM_MOSCOM_VPC2400_OUT = 2
MM_SILICONSOFT_SC1_WAVEIN = 1
MM_SILICONSOFT_SC1_WAVEOUT = 2
MM_SILICONSOFT_SC2_WAVEIN = 3
MM_SILICONSOFT_SC2_WAVEOUT = 4
MM_SILICONSOFT_SOUNDJR2_WAVEOUT = 5
MM_SILICONSOFT_SOUNDJR2PR_WAVEIN = 6
MM_SILICONSOFT_SOUNDJR2PR_WAVEOUT = 7
MM_SILICONSOFT_SOUNDJR3_WAVEOUT = 8
MM_TTEWS_WAVEIN = 1
MM_TTEWS_WAVEOUT = 2
MM_TTEWS_MIDIIN = 3
MM_TTEWS_MIDIOUT = 4
MM_TTEWS_MIDISYNTH = 5
MM_TTEWS_MIDIMONITOR = 6
MM_TTEWS_VMIDIIN = 7
MM_TTEWS_VMIDIOUT = 8
MM_TTEWS_AUX = 9
MM_TTEWS_MIXER = 10
MM_MEDIASONIC_ACM_G723 = 1
MM_MEDIASONIC_ICOM = 2
MM_ICOM_WAVEIN = 3
MM_ICOM_WAVEOUT = 4
MM_ICOM_MIXER = 5
MM_ICOM_AUX = 6
MM_ICOM_LINE = 7
MM_SANYO_ACM_LD_ADPCM = 1
MM_AHEAD_MULTISOUND = 1
MM_AHEAD_SOUNDBLASTER = 2
MM_AHEAD_PROAUDIO = 3
MM_AHEAD_GENERIC = 4
MM_OLIVETTI_WAVEIN = 1
MM_OLIVETTI_WAVEOUT = 2
MM_OLIVETTI_MIXER = 3
MM_OLIVETTI_AUX = 4
MM_OLIVETTI_MIDIIN = 5
MM_OLIVETTI_MIDIOUT = 6
MM_OLIVETTI_SYNTH = 7
MM_OLIVETTI_JOYSTICK = 8
MM_OLIVETTI_ACM_GSM = 9
MM_OLIVETTI_ACM_ADPCM = 10
MM_OLIVETTI_ACM_CELP = 11
MM_OLIVETTI_ACM_SBC = 12
MM_OLIVETTI_ACM_OPR = 13
MM_IOMAGIC_TEMPO_WAVEOUT = 1
MM_IOMAGIC_TEMPO_WAVEIN = 2
MM_IOMAGIC_TEMPO_SYNTH = 3
MM_IOMAGIC_TEMPO_MIDIOUT = 4
MM_IOMAGIC_TEMPO_MXDOUT = 5
MM_IOMAGIC_TEMPO_AUXOUT = 6
MM_MATSUSHITA_WAVEIN = 1
MM_MATSUSHITA_WAVEOUT = 2
MM_MATSUSHITA_FMSYNTH_STEREO = 3
MM_MATSUSHITA_MIXER = 4
MM_MATSUSHITA_AUX = 5
MM_NEWMEDIA_WAVJAMMER = 1
MM_LYRRUS_BRIDGE_GUITAR = 1
MM_OPTI_M16_FMSYNTH_STEREO = 1
MM_OPTI_M16_MIDIIN = 2
MM_OPTI_M16_MIDIOUT = 3
MM_OPTI_M16_WAVEIN = 4
MM_OPTI_M16_WAVEOUT = 5
MM_OPTI_M16_MIXER = 6
MM_OPTI_M16_AUX = 7
MM_OPTI_P16_FMSYNTH_STEREO = 16
MM_OPTI_P16_MIDIIN = 17
MM_OPTI_P16_MIDIOUT = 18
MM_OPTI_P16_WAVEIN = 19
MM_OPTI_P16_WAVEOUT = 20
MM_OPTI_P16_MIXER = 21
MM_OPTI_P16_AUX = 22
MM_OPTI_M32_WAVEIN = 32
MM_OPTI_M32_WAVEOUT = 33
MM_OPTI_M32_MIDIIN = 34
MM_OPTI_M32_MIDIOUT = 35
MM_OPTI_M32_SYNTH_STEREO = 36
MM_OPTI_M32_MIXER = 37
MM_OPTI_M32_AUX = 38
MM_COMPAQ_BB_WAVEIN = 1
MM_COMPAQ_BB_WAVEOUT = 2
MM_COMPAQ_BB_WAVEAUX = 3
MM_MPTUS_SPWAVEOUT = 1
MM_LERNOUT_ANDHAUSPIE_LHCODECACM = 1
MM_DIGITAL_AV320_WAVEIN = 1
MM_DIGITAL_AV320_WAVEOUT = 2
MM_DIGITAL_ACM_G723 = 3
MM_DIGITAL_ICM_H263 = 4
MM_DIGITAL_ICM_H261 = 5
MM_MOTU_MTP_MIDIOUT_ALL = 100
MM_MOTU_MTP_MIDIIN_1 = 101
MM_MOTU_MTP_MIDIOUT_1 = 101
MM_MOTU_MTP_MIDIIN_2 = 102
MM_MOTU_MTP_MIDIOUT_2 = 102
MM_MOTU_MTP_MIDIIN_3 = 103
MM_MOTU_MTP_MIDIOUT_3 = 103
MM_MOTU_MTP_MIDIIN_4 = 104
MM_MOTU_MTP_MIDIOUT_4 = 104
MM_MOTU_MTP_MIDIIN_5 = 105
MM_MOTU_MTP_MIDIOUT_5 = 105
MM_MOTU_MTP_MIDIIN_6 = 106
MM_MOTU_MTP_MIDIOUT_6 = 106
MM_MOTU_MTP_MIDIIN_7 = 107
MM_MOTU_MTP_MIDIOUT_7 = 107
MM_MOTU_MTP_MIDIIN_8 = 108
MM_MOTU_MTP_MIDIOUT_8 = 108
MM_MOTU_MTPII_MIDIOUT_ALL = 200
MM_MOTU_MTPII_MIDIIN_SYNC = 200
MM_MOTU_MTPII_MIDIIN_1 = 201
MM_MOTU_MTPII_MIDIOUT_1 = 201
MM_MOTU_MTPII_MIDIIN_2 = 202
MM_MOTU_MTPII_MIDIOUT_2 = 202
MM_MOTU_MTPII_MIDIIN_3 = 203
MM_MOTU_MTPII_MIDIOUT_3 = 203
MM_MOTU_MTPII_MIDIIN_4 = 204
MM_MOTU_MTPII_MIDIOUT_4 = 204
MM_MOTU_MTPII_MIDIIN_5 = 205
MM_MOTU_MTPII_MIDIOUT_5 = 205
MM_MOTU_MTPII_MIDIIN_6 = 206
MM_MOTU_MTPII_MIDIOUT_6 = 206
MM_MOTU_MTPII_MIDIIN_7 = 207
MM_MOTU_MTPII_MIDIOUT_7 = 207
MM_MOTU_MTPII_MIDIIN_8 = 208
MM_MOTU_MTPII_MIDIOUT_8 = 208
MM_MOTU_MTPII_NET_MIDIIN_1 = 209
MM_MOTU_MTPII_NET_MIDIOUT_1 = 209
MM_MOTU_MTPII_NET_MIDIIN_2 = 210
MM_MOTU_MTPII_NET_MIDIOUT_2 = 210
MM_MOTU_MTPII_NET_MIDIIN_3 = 211
MM_MOTU_MTPII_NET_MIDIOUT_3 = 211
MM_MOTU_MTPII_NET_MIDIIN_4 = 212
MM_MOTU_MTPII_NET_MIDIOUT_4 = 212
MM_MOTU_MTPII_NET_MIDIIN_5 = 213
MM_MOTU_MTPII_NET_MIDIOUT_5 = 213
MM_MOTU_MTPII_NET_MIDIIN_6 = 214
MM_MOTU_MTPII_NET_MIDIOUT_6 = 214
MM_MOTU_MTPII_NET_MIDIIN_7 = 215
MM_MOTU_MTPII_NET_MIDIOUT_7 = 215
MM_MOTU_MTPII_NET_MIDIIN_8 = 216
MM_MOTU_MTPII_NET_MIDIOUT_8 = 216
MM_MOTU_MXP_MIDIIN_MIDIOUT_ALL = 300
MM_MOTU_MXP_MIDIIN_SYNC = 300
MM_MOTU_MXP_MIDIIN_MIDIIN_1 = 301
MM_MOTU_MXP_MIDIIN_MIDIOUT_1 = 301
MM_MOTU_MXP_MIDIIN_MIDIIN_2 = 302
MM_MOTU_MXP_MIDIIN_MIDIOUT_2 = 302
MM_MOTU_MXP_MIDIIN_MIDIIN_3 = 303
MM_MOTU_MXP_MIDIIN_MIDIOUT_3 = 303
MM_MOTU_MXP_MIDIIN_MIDIIN_4 = 304
MM_MOTU_MXP_MIDIIN_MIDIOUT_4 = 304
MM_MOTU_MXP_MIDIIN_MIDIIN_5 = 305
MM_MOTU_MXP_MIDIIN_MIDIOUT_5 = 305
MM_MOTU_MXP_MIDIIN_MIDIIN_6 = 306
MM_MOTU_MXP_MIDIIN_MIDIOUT_6 = 306
MM_MOTU_MXPMPU_MIDIOUT_ALL = 400
MM_MOTU_MXPMPU_MIDIIN_SYNC = 400
MM_MOTU_MXPMPU_MIDIIN_1 = 401
MM_MOTU_MXPMPU_MIDIOUT_1 = 401
MM_MOTU_MXPMPU_MIDIIN_2 = 402
MM_MOTU_MXPMPU_MIDIOUT_2 = 402
MM_MOTU_MXPMPU_MIDIIN_3 = 403
MM_MOTU_MXPMPU_MIDIOUT_3 = 403
MM_MOTU_MXPMPU_MIDIIN_4 = 404
MM_MOTU_MXPMPU_MIDIOUT_4 = 404
MM_MOTU_MXPMPU_MIDIIN_5 = 405
MM_MOTU_MXPMPU_MIDIOUT_5 = 405
MM_MOTU_MXPMPU_MIDIIN_6 = 406
MM_MOTU_MXPMPU_MIDIOUT_6 = 406
MM_MOTU_MXN_MIDIOUT_ALL = 500
MM_MOTU_MXN_MIDIIN_SYNC = 500
MM_MOTU_MXN_MIDIIN_1 = 501
MM_MOTU_MXN_MIDIOUT_1 = 501
MM_MOTU_MXN_MIDIIN_2 = 502
MM_MOTU_MXN_MIDIOUT_2 = 502
MM_MOTU_MXN_MIDIIN_3 = 503
MM_MOTU_MXN_MIDIOUT_3 = 503
MM_MOTU_MXN_MIDIIN_4 = 504
MM_MOTU_MXN_MIDIOUT_4 = 504
MM_MOTU_FLYER_MIDI_IN_SYNC = 600
MM_MOTU_FLYER_MIDI_IN_A = 601
MM_MOTU_FLYER_MIDI_OUT_A = 601
MM_MOTU_FLYER_MIDI_IN_B = 602
MM_MOTU_FLYER_MIDI_OUT_B = 602
MM_MOTU_PKX_MIDI_IN_SYNC = 700
MM_MOTU_PKX_MIDI_IN_A = 701
MM_MOTU_PKX_MIDI_OUT_A = 701
MM_MOTU_PKX_MIDI_IN_B = 702
MM_MOTU_PKX_MIDI_OUT_B = 702
MM_MOTU_DTX_MIDI_IN_SYNC = 800
MM_MOTU_DTX_MIDI_IN_A = 801
MM_MOTU_DTX_MIDI_OUT_A = 801
MM_MOTU_DTX_MIDI_IN_B = 802
MM_MOTU_DTX_MIDI_OUT_B = 802
MM_MOTU_MTPAV_MIDIOUT_ALL = 900
MM_MOTU_MTPAV_MIDIIN_SYNC = 900
MM_MOTU_MTPAV_MIDIIN_1 = 901
MM_MOTU_MTPAV_MIDIOUT_1 = 901
MM_MOTU_MTPAV_MIDIIN_2 = 902
MM_MOTU_MTPAV_MIDIOUT_2 = 902
MM_MOTU_MTPAV_MIDIIN_3 = 903
MM_MOTU_MTPAV_MIDIOUT_3 = 903
MM_MOTU_MTPAV_MIDIIN_4 = 904
MM_MOTU_MTPAV_MIDIOUT_4 = 904
MM_MOTU_MTPAV_MIDIIN_5 = 905
MM_MOTU_MTPAV_MIDIOUT_5 = 905
MM_MOTU_MTPAV_MIDIIN_6 = 906
MM_MOTU_MTPAV_MIDIOUT_6 = 906
MM_MOTU_MTPAV_MIDIIN_7 = 907
MM_MOTU_MTPAV_MIDIOUT_7 = 907
MM_MOTU_MTPAV_MIDIIN_8 = 908
MM_MOTU_MTPAV_MIDIOUT_8 = 908
MM_MOTU_MTPAV_NET_MIDIIN_1 = 909
MM_MOTU_MTPAV_NET_MIDIOUT_1 = 909
MM_MOTU_MTPAV_NET_MIDIIN_2 = 910
MM_MOTU_MTPAV_NET_MIDIOUT_2 = 910
MM_MOTU_MTPAV_NET_MIDIIN_3 = 911
MM_MOTU_MTPAV_NET_MIDIOUT_3 = 911
MM_MOTU_MTPAV_NET_MIDIIN_4 = 912
MM_MOTU_MTPAV_NET_MIDIOUT_4 = 912
MM_MOTU_MTPAV_NET_MIDIIN_5 = 913
MM_MOTU_MTPAV_NET_MIDIOUT_5 = 913
MM_MOTU_MTPAV_NET_MIDIIN_6 = 914
MM_MOTU_MTPAV_NET_MIDIOUT_6 = 914
MM_MOTU_MTPAV_NET_MIDIIN_7 = 915
MM_MOTU_MTPAV_NET_MIDIOUT_7 = 915
MM_MOTU_MTPAV_NET_MIDIIN_8 = 916
MM_MOTU_MTPAV_NET_MIDIOUT_8 = 916
MM_MOTU_MTPAV_MIDIIN_ADAT = 917
MM_MOTU_MTPAV_MIDIOUT_ADAT = 917
MM_MOTU_MXPXT_MIDIIN_SYNC = 1000
MM_MOTU_MXPXT_MIDIOUT_ALL = 1000
MM_MOTU_MXPXT_MIDIIN_1 = 1001
MM_MOTU_MXPXT_MIDIOUT_1 = 1001
MM_MOTU_MXPXT_MIDIOUT_2 = 1002
MM_MOTU_MXPXT_MIDIIN_2 = 1002
MM_MOTU_MXPXT_MIDIIN_3 = 1003
MM_MOTU_MXPXT_MIDIOUT_3 = 1003
MM_MOTU_MXPXT_MIDIIN_4 = 1004
MM_MOTU_MXPXT_MIDIOUT_4 = 1004
MM_MOTU_MXPXT_MIDIIN_5 = 1005
MM_MOTU_MXPXT_MIDIOUT_5 = 1005
MM_MOTU_MXPXT_MIDIOUT_6 = 1006
MM_MOTU_MXPXT_MIDIIN_6 = 1006
MM_MOTU_MXPXT_MIDIOUT_7 = 1007
MM_MOTU_MXPXT_MIDIIN_7 = 1007
MM_MOTU_MXPXT_MIDIOUT_8 = 1008
MM_MOTU_MXPXT_MIDIIN_8 = 1008
MM_WORKBIT_MIXER = 1
MM_WORKBIT_WAVEOUT = 2
MM_WORKBIT_WAVEIN = 3
MM_WORKBIT_MIDIIN = 4
MM_WORKBIT_MIDIOUT = 5
MM_WORKBIT_FMSYNTH = 6
MM_WORKBIT_AUX = 7
MM_WORKBIT_JOYSTICK = 8
MM_OSITECH_TRUMPCARD = 1
MM_MIRO_MOVIEPRO = 1
MM_MIRO_VIDEOD1 = 2
MM_MIRO_VIDEODC1TV = 3
MM_MIRO_VIDEOTD = 4
MM_MIRO_DC30_WAVEOUT = 5
MM_MIRO_DC30_WAVEIN = 6
MM_MIRO_DC30_MIX = 7
MM_ISOLUTION_PASCAL = 1
MM_VOICEMIXER = 1
ROCKWELL_WA1_WAVEIN = 100
ROCKWELL_WA1_WAVEOUT = 101
ROCKWELL_WA1_SYNTH = 102
ROCKWELL_WA1_MIXER = 103
ROCKWELL_WA1_MPU401_IN = 104
ROCKWELL_WA1_MPU401_OUT = 105
ROCKWELL_WA2_WAVEIN = 200
ROCKWELL_WA2_WAVEOUT = 201
ROCKWELL_WA2_SYNTH = 202
ROCKWELL_WA2_MIXER = 203
ROCKWELL_WA2_MPU401_IN = 204
ROCKWELL_WA2_MPU401_OUT = 205
MM_VOXWARE_CODEC = 1
MM_NORTEL_MPXAC_WAVEIN = 1
MM_NORTEL_MPXAC_WAVEOUT = 2
MM_ADDX_PCTV_DIGITALMIX = 1
MM_ADDX_PCTV_WAVEIN = 2
MM_ADDX_PCTV_WAVEOUT = 3
MM_ADDX_PCTV_MIXER = 4
MM_ADDX_PCTV_AUX_CD = 5
MM_ADDX_PCTV_AUX_LINE = 6
MM_WILDCAT_AUTOSCOREMIDIIN = 1
MM_RHETOREX_WAVEIN = 1
MM_RHETOREX_WAVEOUT = 2
MM_BTV_WAVEIN = 1
MM_BTV_WAVEOUT = 2
MM_BTV_MIDIIN = 3
MM_BTV_MIDIOUT = 4
MM_BTV_MIDISYNTH = 5
MM_BTV_AUX_LINE = 6
MM_BTV_AUX_MIC = 7
MM_BTV_AUX_CD = 8
MM_BTV_DIGITALIN = 9
MM_BTV_DIGITALOUT = 10
MM_BTV_MIDIWAVESTREAM = 11
MM_BTV_MIXER = 12
MM_ENSONIQ_SOUNDSCAPE = 16
MM_SOUNDSCAPE_WAVEOUT = 17
MM_SOUNDSCAPE_WAVEOUT_AUX = 18
MM_SOUNDSCAPE_WAVEIN = 19
MM_SOUNDSCAPE_MIDIOUT = 20
MM_SOUNDSCAPE_MIDIIN = 21
MM_SOUNDSCAPE_SYNTH = 22
MM_SOUNDSCAPE_MIXER = 23
MM_SOUNDSCAPE_AUX = 24
MM_NVIDIA_WAVEOUT = 1
MM_NVIDIA_WAVEIN = 2
MM_NVIDIA_MIDIOUT = 3
MM_NVIDIA_MIDIIN = 4
MM_NVIDIA_GAMEPORT = 5
MM_NVIDIA_MIXER = 6
MM_NVIDIA_AUX = 7
MM_OKSORI_BASE = 0
MM_OKSORI_OSR8_WAVEOUT = 1
MM_OKSORI_OSR8_WAVEIN = 2
MM_OKSORI_OSR16_WAVEOUT = 3
MM_OKSORI_OSR16_WAVEIN = 4
MM_OKSORI_FM_OPL4 = 5
MM_OKSORI_MIX_MASTER = 6
MM_OKSORI_MIX_WAVE = 7
MM_OKSORI_MIX_FM = 8
MM_OKSORI_MIX_LINE = 9
MM_OKSORI_MIX_CD = 10
MM_OKSORI_MIX_MIC = 11
MM_OKSORI_MIX_ECHO = 12
MM_OKSORI_MIX_AUX1 = 13
MM_OKSORI_MIX_LINE1 = 14
MM_OKSORI_EXT_MIC1 = 15
MM_OKSORI_EXT_MIC2 = 16
MM_OKSORI_MIDIOUT = 17
MM_OKSORI_MIDIIN = 18
MM_OKSORI_MPEG_CDVISION = 19
MM_DIACOUSTICS_DRUM_ACTION = 1
MM_KAY_ELEMETRICS_CSL = 17152
MM_KAY_ELEMETRICS_CSL_DAT = 17160
MM_KAY_ELEMETRICS_CSL_4CHANNEL = 17161
MM_CRYSTAL_CS4232_WAVEIN = 1
MM_CRYSTAL_CS4232_WAVEOUT = 2
MM_CRYSTAL_CS4232_WAVEMIXER = 3
MM_CRYSTAL_CS4232_WAVEAUX_AUX1 = 4
MM_CRYSTAL_CS4232_WAVEAUX_AUX2 = 5
MM_CRYSTAL_CS4232_WAVEAUX_LINE = 6
MM_CRYSTAL_CS4232_WAVEAUX_MONO = 7
MM_CRYSTAL_CS4232_WAVEAUX_MASTER = 8
MM_CRYSTAL_CS4232_MIDIIN = 9
MM_CRYSTAL_CS4232_MIDIOUT = 10
MM_CRYSTAL_CS4232_INPUTGAIN_AUX1 = 13
MM_CRYSTAL_CS4232_INPUTGAIN_LOOP = 14
MM_CRYSTAL_SOUND_FUSION_WAVEIN = 21
MM_CRYSTAL_SOUND_FUSION_WAVEOUT = 22
MM_CRYSTAL_SOUND_FUSION_MIXER = 23
MM_CRYSTAL_SOUND_FUSION_MIDIIN = 24
MM_CRYSTAL_SOUND_FUSION_MIDIOUT = 25
MM_CRYSTAL_SOUND_FUSION_JOYSTICK = 26
MM_QUARTERDECK_LHWAVEIN = 0
MM_QUARTERDECK_LHWAVEOUT = 1
MM_TDK_MW_MIDI_SYNTH = 1
MM_TDK_MW_MIDI_IN = 2
MM_TDK_MW_MIDI_OUT = 3
MM_TDK_MW_WAVE_IN = 4
MM_TDK_MW_WAVE_OUT = 5
MM_TDK_MW_AUX = 6
MM_TDK_MW_MIXER = 10
MM_TDK_MW_AUX_MASTER = 100
MM_TDK_MW_AUX_BASS = 101
MM_TDK_MW_AUX_TREBLE = 102
MM_TDK_MW_AUX_MIDI_VOL = 103
MM_TDK_MW_AUX_WAVE_VOL = 104
MM_TDK_MW_AUX_WAVE_RVB = 105
MM_TDK_MW_AUX_WAVE_CHR = 106
MM_TDK_MW_AUX_VOL = 107
MM_TDK_MW_AUX_RVB = 108
MM_TDK_MW_AUX_CHR = 109
MM_DIGITAL_AUDIO_LABS_TC = 1
MM_DIGITAL_AUDIO_LABS_DOC = 2
MM_DIGITAL_AUDIO_LABS_V8 = 16
MM_DIGITAL_AUDIO_LABS_CPRO = 17
MM_DIGITAL_AUDIO_LABS_VP = 18
MM_DIGITAL_AUDIO_LABS_CDLX = 19
MM_DIGITAL_AUDIO_LABS_CTDIF = 20
MM_SEERSYS_SEERSYNTH = 1
MM_SEERSYS_SEERWAVE = 2
MM_SEERSYS_SEERMIX = 3
MM_SEERSYS_WAVESYNTH = 4
MM_SEERSYS_WAVESYNTH_WG = 5
MM_SEERSYS_REALITY = 6
MM_OSPREY_1000WAVEIN = 1
MM_OSPREY_1000WAVEOUT = 2
MM_SOUNDESIGNS_WAVEIN = 1
MM_SOUNDESIGNS_WAVEOUT = 2
MM_SSP_SNDFESWAVEIN = 1
MM_SSP_SNDFESWAVEOUT = 2
MM_SSP_SNDFESMIDIIN = 3
MM_SSP_SNDFESMIDIOUT = 4
MM_SSP_SNDFESSYNTH = 5
MM_SSP_SNDFESMIX = 6
MM_SSP_SNDFESAUX = 7
MM_ECS_AADF_MIDI_IN = 10
MM_ECS_AADF_MIDI_OUT = 11
MM_ECS_AADF_WAVE2MIDI_IN = 12
MM_AMD_INTERWAVE_WAVEIN = 1
MM_AMD_INTERWAVE_WAVEOUT = 2
MM_AMD_INTERWAVE_SYNTH = 3
MM_AMD_INTERWAVE_MIXER1 = 4
MM_AMD_INTERWAVE_MIXER2 = 5
MM_AMD_INTERWAVE_JOYSTICK = 6
MM_AMD_INTERWAVE_EX_CD = 7
MM_AMD_INTERWAVE_MIDIIN = 8
MM_AMD_INTERWAVE_MIDIOUT = 9
MM_AMD_INTERWAVE_AUX1 = 10
MM_AMD_INTERWAVE_AUX2 = 11
MM_AMD_INTERWAVE_AUX_MIC = 12
MM_AMD_INTERWAVE_AUX_CD = 13
MM_AMD_INTERWAVE_MONO_IN = 14
MM_AMD_INTERWAVE_MONO_OUT = 15
MM_AMD_INTERWAVE_EX_TELEPHONY = 16
MM_AMD_INTERWAVE_WAVEOUT_BASE = 17
MM_AMD_INTERWAVE_WAVEOUT_TREBLE = 18
MM_AMD_INTERWAVE_STEREO_ENHANCED = 19
MM_COREDYNAMICS_DYNAMIXHR = 1
MM_COREDYNAMICS_DYNASONIX_SYNTH = 2
MM_COREDYNAMICS_DYNASONIX_MIDI_IN = 3
MM_COREDYNAMICS_DYNASONIX_MIDI_OUT = 4
MM_COREDYNAMICS_DYNASONIX_WAVE_IN = 5
MM_COREDYNAMICS_DYNASONIX_WAVE_OUT = 6
MM_COREDYNAMICS_DYNASONIX_AUDIO_IN = 7
MM_COREDYNAMICS_DYNASONIX_AUDIO_OUT = 8
MM_COREDYNAMICS_DYNAGRAFX_VGA = 9
MM_COREDYNAMICS_DYNAGRAFX_WAVE_IN = 10
MM_COREDYNAMICS_DYNAGRAFX_WAVE_OUT = 11
MM_CANAM_CBXWAVEOUT = 1
MM_CANAM_CBXWAVEIN = 2
MM_SOFTSOUND_CODEC = 1
MM_NORRIS_VOICELINK = 1
MM_DDD_MIDILINK_MIDIIN = 1
MM_DDD_MIDILINK_MIDIOUT = 2
MM_EUPHONICS_AUX_CD = 1
MM_EUPHONICS_AUX_LINE = 2
MM_EUPHONICS_AUX_MASTER = 3
MM_EUPHONICS_AUX_MIC = 4
MM_EUPHONICS_AUX_MIDI = 5
MM_EUPHONICS_AUX_WAVE = 6
MM_EUPHONICS_FMSYNTH_MONO = 7
MM_EUPHONICS_FMSYNTH_STEREO = 8
MM_EUPHONICS_MIDIIN = 9
MM_EUPHONICS_MIDIOUT = 10
MM_EUPHONICS_MIXER = 11
MM_EUPHONICS_WAVEIN = 12
MM_EUPHONICS_WAVEOUT = 13
MM_EUPHONICS_EUSYNTH = 14
CRYSTAL_NET_SFM_CODEC = 1
MM_CHROMATIC_M1 = 1
MM_CHROMATIC_M1_WAVEIN = 2
MM_CHROMATIC_M1_WAVEOUT = 3
MM_CHROMATIC_M1_FMSYNTH = 4
MM_CHROMATIC_M1_MIXER = 5
MM_CHROMATIC_M1_AUX = 6
MM_CHROMATIC_M1_AUX_CD = 7
MM_CHROMATIC_M1_MIDIIN = 8
MM_CHROMATIC_M1_MIDIOUT = 9
MM_CHROMATIC_M1_WTSYNTH = 16
MM_CHROMATIC_M1_MPEGWAVEIN = 17
MM_CHROMATIC_M1_MPEGWAVEOUT = 18
MM_CHROMATIC_M2 = 19
MM_CHROMATIC_M2_WAVEIN = 20
MM_CHROMATIC_M2_WAVEOUT = 21
MM_CHROMATIC_M2_FMSYNTH = 22
MM_CHROMATIC_M2_MIXER = 23
MM_CHROMATIC_M2_AUX = 24
MM_CHROMATIC_M2_AUX_CD = 25
MM_CHROMATIC_M2_MIDIIN = 32
MM_CHROMATIC_M2_MIDIOUT = 33
MM_CHROMATIC_M2_WTSYNTH = 34
MM_CHROMATIC_M2_MPEGWAVEIN = 35
MM_CHROMATIC_M2_MPEGWAVEOUT = 36
MM_VIENNASYS_TSP_WAVE_DRIVER = 1
MM_CONNECTIX_VIDEC_CODEC = 1
MM_GADGETLABS_WAVE44_WAVEIN = 1
MM_GADGETLABS_WAVE44_WAVEOUT = 2
MM_GADGETLABS_WAVE42_WAVEIN = 3
MM_GADGETLABS_WAVE42_WAVEOUT = 4
MM_GADGETLABS_WAVE4_MIDIIN = 5
MM_GADGETLABS_WAVE4_MIDIOUT = 6
MM_FRONTIER_WAVECENTER_MIDIIN = 1
MM_FRONTIER_WAVECENTER_MIDIOUT = 2
MM_FRONTIER_WAVECENTER_WAVEIN = 3
MM_FRONTIER_WAVECENTER_WAVEOUT = 4
MM_VIONA_QVINPCI_MIXER = 1
MM_VIONA_QVINPCI_WAVEIN = 2
MM_VIONAQVINPCI_WAVEOUT = 3
MM_VIONA_BUSTER_MIXER = 4
MM_VIONA_CINEMASTER_MIXER = 5
MM_VIONA_CONCERTO_MIXER = 6
MM_CASIO_WP150_MIDIOUT = 1
MM_CASIO_WP150_MIDIIN = 2
MM_CASIO_LSG_MIDIOUT = 3
MM_DIMD_PLATFORM = 0
MM_DIMD_DIRSOUND = 1
MM_DIMD_VIRTMPU = 2
MM_DIMD_VIRTSB = 3
MM_DIMD_VIRTJOY = 4
MM_DIMD_WAVEIN = 5
MM_DIMD_WAVEOUT = 6
MM_DIMD_MIDIIN = 7
MM_DIMD_MIDIOUT = 8
MM_DIMD_AUX_LINE = 9
MM_DIMD_MIXER = 10
MM_DIMD_WSS_WAVEIN = 14
MM_DIMD_WSS_WAVEOUT = 15
MM_DIMD_WSS_MIXER = 17
MM_DIMD_WSS_AUX = 21
MM_DIMD_WSS_SYNTH = 76
MM_S3_WAVEOUT = 1
MM_S3_WAVEIN = 2
MM_S3_MIDIOUT = 3
MM_S3_MIDIIN = 4
MM_S3_FMSYNTH = 5
MM_S3_MIXER = 6
MM_S3_AUX = 7
MM_VKC_MPU401_MIDIIN = 256
MM_VKC_SERIAL_MIDIIN = 257
MM_VKC_MPU401_MIDIOUT = 512
MM_VKC_SERIAL_MIDIOUT = 513
MM_ZEFIRO_ZA2 = 2
MM_FHGIIS_MPEGLAYER3_DECODE = 9
MM_FHGIIS_MPEGLAYER3 = 10
MM_FHGIIS_MPEGLAYER3_LITE = 10
MM_FHGIIS_MPEGLAYER3_BASIC = 11
MM_FHGIIS_MPEGLAYER3_ADVANCED = 12
MM_FHGIIS_MPEGLAYER3_PROFESSIONAL = 13
MM_FHGIIS_MPEGLAYER3_ADVANCEDPLUS = 14
MM_QUICKNET_PJWAVEIN = 1
MM_QUICKNET_PJWAVEOUT = 2
MM_SICRESOURCE_SSO3D = 2
MM_SICRESOURCE_SSOW3DI = 3
MM_NEOMAGIC_SYNTH = 1
MM_NEOMAGIC_WAVEOUT = 2
MM_NEOMAGIC_WAVEIN = 3
MM_NEOMAGIC_MIDIOUT = 4
MM_NEOMAGIC_MIDIIN = 5
MM_NEOMAGIC_AUX = 6
MM_NEOMAGIC_MW3DX_WAVEOUT = 10
MM_NEOMAGIC_MW3DX_WAVEIN = 11
MM_NEOMAGIC_MW3DX_MIDIOUT = 12
MM_NEOMAGIC_MW3DX_MIDIIN = 13
MM_NEOMAGIC_MW3DX_FMSYNTH = 14
MM_NEOMAGIC_MW3DX_GMSYNTH = 15
MM_NEOMAGIC_MW3DX_MIXER = 16
MM_NEOMAGIC_MW3DX_AUX = 17
MM_NEOMAGIC_MWAVE_WAVEOUT = 20
MM_NEOMAGIC_MWAVE_WAVEIN = 21
MM_NEOMAGIC_MWAVE_MIDIOUT = 22
MM_NEOMAGIC_MWAVE_MIDIIN = 23
MM_NEOMAGIC_MWAVE_MIXER = 24
MM_NEOMAGIC_MWAVE_AUX = 25
MM_MERGING_MPEGL3 = 1
MM_XIRLINK_VISIONLINK = 1
MM_OTI_611WAVEIN = 5
MM_OTI_611WAVEOUT = 6
MM_OTI_611MIXER = 7
MM_OTI_611MIDIN = 18
MM_OTI_611MIDIOUT = 19
MM_AUREAL_AU8820 = 16
MM_AU8820_SYNTH = 17
MM_AU8820_WAVEOUT = 18
MM_AU8820_WAVEIN = 19
MM_AU8820_MIXER = 20
MM_AU8820_AUX = 21
MM_AU8820_MIDIOUT = 22
MM_AU8820_MIDIIN = 23
MM_AUREAL_AU8830 = 32
MM_AU8830_SYNTH = 33
MM_AU8830_WAVEOUT = 34
MM_AU8830_WAVEIN = 35
MM_AU8830_MIXER = 36
MM_AU8830_AUX = 37
MM_AU8830_MIDIOUT = 38
MM_AU8830_MIDIIN = 39
MM_VIVO_AUDIO_CODEC = 1
MM_SHARP_MDC_MIDI_SYNTH = 1
MM_SHARP_MDC_MIDI_IN = 2
MM_SHARP_MDC_MIDI_OUT = 3
MM_SHARP_MDC_WAVE_IN = 4
MM_SHARP_MDC_WAVE_OUT = 5
MM_SHARP_MDC_AUX = 6
MM_SHARP_MDC_MIXER = 10
MM_SHARP_MDC_AUX_MASTER = 100
MM_SHARP_MDC_AUX_BASS = 101
MM_SHARP_MDC_AUX_TREBLE = 102
MM_SHARP_MDC_AUX_MIDI_VOL = 103
MM_SHARP_MDC_AUX_WAVE_VOL = 104
MM_SHARP_MDC_AUX_WAVE_RVB = 105
MM_SHARP_MDC_AUX_WAVE_CHR = 106
MM_SHARP_MDC_AUX_VOL = 107
MM_SHARP_MDC_AUX_RVB = 108
MM_SHARP_MDC_AUX_CHR = 109
MM_LUCENT_ACM_G723 = 0
MM_ATT_G729A = 1
MM_MARIAN_ARC44WAVEIN = 1
MM_MARIAN_ARC44WAVEOUT = 2
MM_MARIAN_PRODIF24WAVEIN = 3
MM_MARIAN_PRODIF24WAVEOUT = 4
MM_MARIAN_ARC88WAVEIN = 5
MM_MARIAN_ARC88WAVEOUT = 6
MM_BCB_NETBOARD_10 = 1
MM_BCB_TT75_10 = 2
MM_MOTIONPIXELS_MVI2 = 1
MM_QDESIGN_ACM_MPEG = 1
MM_QDESIGN_ACM_QDESIGN_MUSIC = 2
MM_NMP_CCP_WAVEIN = 1
MM_NMP_CCP_WAVEOUT = 2
MM_NMP_ACM_AMR = 10
MM_DF_ACM_G726 = 1
MM_DF_ACM_GSM610 = 2
MM_BERCOS_WAVEIN = 1
MM_BERCOS_MIXER = 2
MM_BERCOS_WAVEOUT = 3
MM_ONLIVE_MPCODEC = 1
MM_PHONET_PP_WAVEOUT = 1
MM_PHONET_PP_WAVEIN = 2
MM_PHONET_PP_MIXER = 3
MM_FTR_ENCODER_WAVEIN = 1
MM_FTR_ACM = 2
MM_ENET_T2000_LINEIN = 1
MM_ENET_T2000_LINEOUT = 2
MM_ENET_T2000_HANDSETIN = 3
MM_ENET_T2000_HANDSETOUT = 4
MM_EMAGIC_UNITOR8 = 1
MM_SIPROLAB_ACELPNET = 1
MM_DICTAPHONE_G726 = 1
MM_RZS_ACM_TUBGSM = 1
MM_EES_PCMIDI14 = 1
MM_EES_PCMIDI14_IN = 2
MM_EES_PCMIDI14_OUT1 = 3
MM_EES_PCMIDI14_OUT2 = 4
MM_EES_PCMIDI14_OUT3 = 5
MM_EES_PCMIDI14_OUT4 = 6
MM_HAFTMANN_LPTDAC2 = 1
MM_LUCID_PCI24WAVEIN = 1
MM_LUCID_PCI24WAVEOUT = 2
MM_HEADSPACE_HAESYNTH = 1
MM_HEADSPACE_HAEWAVEOUT = 2
MM_HEADSPACE_HAEWAVEIN = 3
MM_HEADSPACE_HAEMIXER = 4
MM_UNISYS_ACM_NAP = 1
MM_LUMINOSITI_SCWAVEIN = 1
MM_LUMINOSITI_SCWAVEOUT = 2
MM_LUMINOSITI_SCWAVEMIX = 3
MM_ACTIVEVOICE_ACM_VOXADPCM = 1
MM_DTS_DS = 1
MM_SOFTLAB_NSK_FRW_WAVEIN = 1
MM_SOFTLAB_NSK_FRW_WAVEOUT = 2
MM_SOFTLAB_NSK_FRW_MIXER = 3
MM_SOFTLAB_NSK_FRW_AUX = 4
MM_FORTEMEDIA_WAVEIN = 1
MM_FORTEMEDIA_WAVEOUT = 2
MM_FORTEMEDIA_FMSYNC = 3
MM_FORTEMEDIA_MIXER = 4
MM_FORTEMEDIA_AUX = 5
MM_SONORUS_STUDIO = 1
MM_I_LINK_VOICE_CODER = 1
MM_SELSIUS_SYSTEMS_RTPWAVEOUT = 1
MM_SELSIUS_SYSTEMS_RTPWAVEIN = 2
MM_ADMOS_FM_SYNTH = 1
MM_ADMOS_QS3AMIDIOUT = 2
MM_ADMOS_QS3AMIDIIN = 3
MM_ADMOS_QS3AWAVEOUT = 4
MM_ADMOS_QS3AWAVEIN = 5
MM_LEXICON_STUDIO_WAVE_OUT = 1
MM_LEXICON_STUDIO_WAVE_IN = 2
MM_SGI_320_WAVEIN = 1
MM_SGI_320_WAVEOUT = 2
MM_SGI_320_MIXER = 3
MM_SGI_540_WAVEIN = 4
MM_SGI_540_WAVEOUT = 5
MM_SGI_540_MIXER = 6
MM_SGI_RAD_ADATMONO1_WAVEIN = 7
MM_SGI_RAD_ADATMONO2_WAVEIN = 8
MM_SGI_RAD_ADATMONO3_WAVEIN = 9
MM_SGI_RAD_ADATMONO4_WAVEIN = 10
MM_SGI_RAD_ADATMONO5_WAVEIN = 11
MM_SGI_RAD_ADATMONO6_WAVEIN = 12
MM_SGI_RAD_ADATMONO7_WAVEIN = 13
MM_SGI_RAD_ADATMONO8_WAVEIN = 14
MM_SGI_RAD_ADATSTEREO12_WAVEIN = 15
MM_SGI_RAD_ADATSTEREO34_WAVEIN = 16
MM_SGI_RAD_ADATSTEREO56_WAVEIN = 17
MM_SGI_RAD_ADATSTEREO78_WAVEIN = 18
MM_SGI_RAD_ADAT8CHAN_WAVEIN = 19
MM_SGI_RAD_ADATMONO1_WAVEOUT = 20
MM_SGI_RAD_ADATMONO2_WAVEOUT = 21
MM_SGI_RAD_ADATMONO3_WAVEOUT = 22
MM_SGI_RAD_ADATMONO4_WAVEOUT = 23
MM_SGI_RAD_ADATMONO5_WAVEOUT = 24
MM_SGI_RAD_ADATMONO6_WAVEOUT = 25
MM_SGI_RAD_ADATMONO7_WAVEOUT = 26
MM_SGI_RAD_ADATMONO8_WAVEOUT = 27
MM_SGI_RAD_ADATSTEREO12_WAVEOUT = 28
MM_SGI_RAD_ADATSTEREO32_WAVEOUT = 29
MM_SGI_RAD_ADATSTEREO56_WAVEOUT = 30
MM_SGI_RAD_ADATSTEREO78_WAVEOUT = 31
MM_SGI_RAD_ADAT8CHAN_WAVEOUT = 32
MM_SGI_RAD_AESMONO1_WAVEIN = 33
MM_SGI_RAD_AESMONO2_WAVEIN = 34
MM_SGI_RAD_AESSTEREO_WAVEIN = 35
MM_SGI_RAD_AESMONO1_WAVEOUT = 36
MM_SGI_RAD_AESMONO2_WAVEOUT = 37
MM_SGI_RAD_AESSTEREO_WAVEOUT = 38
MM_IPI_ACM_HSX = 1
MM_IPI_ACM_RPELP = 2
MM_IPI_WF_ASSS = 3
MM_IPI_AT_WAVEOUT = 4
MM_IPI_AT_WAVEIN = 5
MM_IPI_AT_MIXER = 6
MM_ICE_WAVEOUT = 1
MM_ICE_WAVEIN = 2
MM_ICE_MTWAVEOUT = 3
MM_ICE_MTWAVEIN = 4
MM_ICE_MIDIOUT1 = 5
MM_ICE_MIDIIN1 = 6
MM_ICE_MIDIOUT2 = 7
MM_ICE_MIDIIN2 = 8
MM_ICE_SYNTH = 9
MM_ICE_MIXER = 10
MM_ICE_AUX = 11
MM_VQST_VQC1 = 1
MM_VQST_VQC2 = 2
MM_ETEK_KWIKMIDI_MIDIIN = 1
MM_ETEK_KWIKMIDI_MIDIOUT = 2
MM_INTERNET_SSW_MIDIOUT = 10
MM_INTERNET_SSW_MIDIIN = 11
MM_INTERNET_SSW_WAVEOUT = 12
MM_INTERNET_SSW_WAVEIN = 13
MM_SONY_ACM_SCX = 1
MM_UH_ACM_ADPCM = 1
MM_SYDEC_NV_WAVEIN = 1
MM_SYDEC_NV_WAVEOUT = 2
MM_FLEXION_X300_WAVEIN = 1
MM_FLEXION_X300_WAVEOUT = 2
MM_VIA_WAVEOUT = 1
MM_VIA_WAVEIN = 2
MM_VIA_MIXER = 3
MM_VIA_AUX = 4
MM_VIA_MPU401_MIDIOUT = 5
MM_VIA_MPU401_MIDIIN = 6
MM_VIA_SWFM_SYNTH = 7
MM_VIA_WDM_WAVEOUT = 8
MM_VIA_WDM_WAVEIN = 9
MM_VIA_WDM_MIXER = 10
MM_VIA_WDM_MPU401_MIDIOUT = 11
MM_VIA_WDM_MPU401_MIDIIN = 12
MM_MICRONAS_SC4 = 1
MM_MICRONAS_CLP833 = 2
MM_HP_WAVEOUT = 1
MM_HP_WAVEIN = 2
MM_QUICKAUDIO_MINIMIDI = 1
MM_QUICKAUDIO_MAXIMIDI = 2
MM_ICCC_UNA3_WAVEIN = 1
MM_ICCC_UNA3_WAVEOUT = 2
MM_ICCC_UNA3_AUX = 3
MM_ICCC_UNA3_MIXER = 4
MM_3COM_CB_MIXER = 1
MM_3COM_CB_WAVEIN = 2
MM_3COM_CB_WAVEOUT = 3
MM_MINDMAKER_GC_WAVEIN = 1
MM_MINDMAKER_GC_WAVEOUT = 2
MM_MINDMAKER_GC_MIXER = 3
MM_TELEKOL_WAVEOUT = 1
MM_TELEKOL_WAVEIN = 2
MM_ALGOVISION_VB80WAVEOUT = 1
MM_ALGOVISION_VB80WAVEIN = 2
MM_ALGOVISION_VB80MIXER = 3
MM_ALGOVISION_VB80AUX = 4
MM_ALGOVISION_VB80AUX2 = 5
WAVE_FORMAT_UNKNOWN = 0
WAVE_FORMAT_ADPCM = 2
WAVE_FORMAT_IEEE_FLOAT = 3
WAVE_FORMAT_VSELP = 4
WAVE_FORMAT_IBM_CVSD = 5
WAVE_FORMAT_ALAW = 6
WAVE_FORMAT_MULAW = 7
WAVE_FORMAT_DTS = 8
WAVE_FORMAT_DRM = 9
WAVE_FORMAT_WMAVOICE9 = 10
WAVE_FORMAT_WMAVOICE10 = 11
WAVE_FORMAT_OKI_ADPCM = 16
WAVE_FORMAT_DVI_ADPCM = 17
WAVE_FORMAT_IMA_ADPCM = 17
WAVE_FORMAT_MEDIASPACE_ADPCM = 18
WAVE_FORMAT_SIERRA_ADPCM = 19
WAVE_FORMAT_G723_ADPCM = 20
WAVE_FORMAT_DIGISTD = 21
WAVE_FORMAT_DIGIFIX = 22
WAVE_FORMAT_DIALOGIC_OKI_ADPCM = 23
WAVE_FORMAT_MEDIAVISION_ADPCM = 24
WAVE_FORMAT_CU_CODEC = 25
WAVE_FORMAT_HP_DYN_VOICE = 26
WAVE_FORMAT_YAMAHA_ADPCM = 32
WAVE_FORMAT_SONARC = 33
WAVE_FORMAT_DSPGROUP_TRUESPEECH = 34
WAVE_FORMAT_ECHOSC1 = 35
WAVE_FORMAT_AUDIOFILE_AF36 = 36
WAVE_FORMAT_APTX = 37
WAVE_FORMAT_AUDIOFILE_AF10 = 38
WAVE_FORMAT_PROSODY_1612 = 39
WAVE_FORMAT_LRC = 40
WAVE_FORMAT_DOLBY_AC2 = 48
WAVE_FORMAT_GSM610 = 49
WAVE_FORMAT_MSNAUDIO = 50
WAVE_FORMAT_ANTEX_ADPCME = 51
WAVE_FORMAT_CONTROL_RES_VQLPC = 52
WAVE_FORMAT_DIGIREAL = 53
WAVE_FORMAT_DIGIADPCM = 54
WAVE_FORMAT_CONTROL_RES_CR10 = 55
WAVE_FORMAT_NMS_VBXADPCM = 56
WAVE_FORMAT_CS_IMAADPCM = 57
WAVE_FORMAT_ECHOSC3 = 58
WAVE_FORMAT_ROCKWELL_ADPCM = 59
WAVE_FORMAT_ROCKWELL_DIGITALK = 60
WAVE_FORMAT_XEBEC = 61
WAVE_FORMAT_G721_ADPCM = 64
WAVE_FORMAT_G728_CELP = 65
WAVE_FORMAT_MSG723 = 66
WAVE_FORMAT_INTEL_G723_1 = 67
WAVE_FORMAT_INTEL_G729 = 68
WAVE_FORMAT_SHARP_G726 = 69
WAVE_FORMAT_MPEG = 80
WAVE_FORMAT_RT24 = 82
WAVE_FORMAT_PAC = 83
WAVE_FORMAT_MPEGLAYER3 = 85
WAVE_FORMAT_LUCENT_G723 = 89
WAVE_FORMAT_CIRRUS = 96
WAVE_FORMAT_ESPCM = 97
WAVE_FORMAT_VOXWARE = 98
WAVE_FORMAT_CANOPUS_ATRAC = 99
WAVE_FORMAT_G726_ADPCM = 100
WAVE_FORMAT_G722_ADPCM = 101
WAVE_FORMAT_DSAT = 102
WAVE_FORMAT_DSAT_DISPLAY = 103
WAVE_FORMAT_VOXWARE_BYTE_ALIGNED = 105
WAVE_FORMAT_VOXWARE_AC8 = 112
WAVE_FORMAT_VOXWARE_AC10 = 113
WAVE_FORMAT_VOXWARE_AC16 = 114
WAVE_FORMAT_VOXWARE_AC20 = 115
WAVE_FORMAT_VOXWARE_RT24 = 116
WAVE_FORMAT_VOXWARE_RT29 = 117
WAVE_FORMAT_VOXWARE_RT29HW = 118
WAVE_FORMAT_VOXWARE_VR12 = 119
WAVE_FORMAT_VOXWARE_VR18 = 120
WAVE_FORMAT_VOXWARE_TQ40 = 121
WAVE_FORMAT_VOXWARE_SC3 = 122
WAVE_FORMAT_VOXWARE_SC3_1 = 123
WAVE_FORMAT_SOFTSOUND = 128
WAVE_FORMAT_VOXWARE_TQ60 = 129
WAVE_FORMAT_MSRT24 = 130
WAVE_FORMAT_G729A = 131
WAVE_FORMAT_MVI_MVI2 = 132
WAVE_FORMAT_DF_G726 = 133
WAVE_FORMAT_DF_GSM610 = 134
WAVE_FORMAT_ISIAUDIO = 136
WAVE_FORMAT_ONLIVE = 137
WAVE_FORMAT_MULTITUDE_FT_SX20 = 138
WAVE_FORMAT_INFOCOM_ITS_G721_ADPCM = 139
WAVE_FORMAT_CONVEDIA_G729 = 140
WAVE_FORMAT_CONGRUENCY = 141
WAVE_FORMAT_SBC24 = 145
WAVE_FORMAT_DOLBY_AC3_SPDIF = 146
WAVE_FORMAT_MEDIASONIC_G723 = 147
WAVE_FORMAT_PROSODY_8KBPS = 148
WAVE_FORMAT_ZYXEL_ADPCM = 151
WAVE_FORMAT_PHILIPS_LPCBB = 152
WAVE_FORMAT_PACKED = 153
WAVE_FORMAT_MALDEN_PHONYTALK = 160
WAVE_FORMAT_RACAL_RECORDER_GSM = 161
WAVE_FORMAT_RACAL_RECORDER_G720_A = 162
WAVE_FORMAT_RACAL_RECORDER_G723_1 = 163
WAVE_FORMAT_RACAL_RECORDER_TETRA_ACELP = 164
WAVE_FORMAT_NEC_AAC = 176
WAVE_FORMAT_RAW_AAC1 = 255
WAVE_FORMAT_RHETOREX_ADPCM = 256
WAVE_FORMAT_IRAT = 257
WAVE_FORMAT_VIVO_G723 = 273
WAVE_FORMAT_VIVO_SIREN = 274
WAVE_FORMAT_PHILIPS_CELP = 288
WAVE_FORMAT_PHILIPS_GRUNDIG = 289
WAVE_FORMAT_DIGITAL_G723 = 291
WAVE_FORMAT_SANYO_LD_ADPCM = 293
WAVE_FORMAT_SIPROLAB_ACEPLNET = 304
WAVE_FORMAT_SIPROLAB_ACELP4800 = 305
WAVE_FORMAT_SIPROLAB_ACELP8V3 = 306
WAVE_FORMAT_SIPROLAB_G729 = 307
WAVE_FORMAT_SIPROLAB_G729A = 308
WAVE_FORMAT_SIPROLAB_KELVIN = 309
WAVE_FORMAT_VOICEAGE_AMR = 310
WAVE_FORMAT_G726ADPCM = 320
WAVE_FORMAT_DICTAPHONE_CELP68 = 321
WAVE_FORMAT_DICTAPHONE_CELP54 = 322
WAVE_FORMAT_QUALCOMM_PUREVOICE = 336
WAVE_FORMAT_QUALCOMM_HALFRATE = 337
WAVE_FORMAT_TUBGSM = 341
WAVE_FORMAT_MSAUDIO1 = 352
WAVE_FORMAT_WMAUDIO2 = 353
WAVE_FORMAT_WMAUDIO3 = 354
WAVE_FORMAT_WMAUDIO_LOSSLESS = 355
WAVE_FORMAT_WMASPDIF = 356
WAVE_FORMAT_UNISYS_NAP_ADPCM = 368
WAVE_FORMAT_UNISYS_NAP_ULAW = 369
WAVE_FORMAT_UNISYS_NAP_ALAW = 370
WAVE_FORMAT_UNISYS_NAP_16K = 371
WAVE_FORMAT_SYCOM_ACM_SYC008 = 372
WAVE_FORMAT_SYCOM_ACM_SYC701_G726L = 373
WAVE_FORMAT_SYCOM_ACM_SYC701_CELP54 = 374
WAVE_FORMAT_SYCOM_ACM_SYC701_CELP68 = 375
WAVE_FORMAT_KNOWLEDGE_ADVENTURE_ADPCM = 376
WAVE_FORMAT_FRAUNHOFER_IIS_MPEG2_AAC = 384
WAVE_FORMAT_DTS_DS = 400
WAVE_FORMAT_CREATIVE_ADPCM = 512
WAVE_FORMAT_CREATIVE_FASTSPEECH8 = 514
WAVE_FORMAT_CREATIVE_FASTSPEECH10 = 515
WAVE_FORMAT_UHER_ADPCM = 528
WAVE_FORMAT_ULEAD_DV_AUDIO = 533
WAVE_FORMAT_ULEAD_DV_AUDIO_1 = 534
WAVE_FORMAT_QUARTERDECK = 544
WAVE_FORMAT_ILINK_VC = 560
WAVE_FORMAT_RAW_SPORT = 576
WAVE_FORMAT_ESST_AC3 = 577
WAVE_FORMAT_GENERIC_PASSTHRU = 585
WAVE_FORMAT_IPI_HSX = 592
WAVE_FORMAT_IPI_RPELP = 593
WAVE_FORMAT_CS2 = 608
WAVE_FORMAT_SONY_SCX = 624
WAVE_FORMAT_SONY_SCY = 625
WAVE_FORMAT_SONY_ATRAC3 = 626
WAVE_FORMAT_SONY_SPC = 627
WAVE_FORMAT_TELUM_AUDIO = 640
WAVE_FORMAT_TELUM_IA_AUDIO = 641
WAVE_FORMAT_NORCOM_VOICE_SYSTEMS_ADPCM = 645
WAVE_FORMAT_FM_TOWNS_SND = 768
WAVE_FORMAT_MICRONAS = 848
WAVE_FORMAT_MICRONAS_CELP833 = 849
WAVE_FORMAT_BTV_DIGITAL = 1024
WAVE_FORMAT_INTEL_MUSIC_CODER = 1025
WAVE_FORMAT_INDEO_AUDIO = 1026
WAVE_FORMAT_QDESIGN_MUSIC = 1104
WAVE_FORMAT_ON2_VP7_AUDIO = 1280
WAVE_FORMAT_ON2_VP6_AUDIO = 1281
WAVE_FORMAT_VME_VMPCM = 1664
WAVE_FORMAT_TPC = 1665
WAVE_FORMAT_LIGHTWAVE_LOSSLESS = 2222
WAVE_FORMAT_OLIGSM = 4096
WAVE_FORMAT_OLIADPCM = 4097
WAVE_FORMAT_OLICELP = 4098
WAVE_FORMAT_OLISBC = 4099
WAVE_FORMAT_OLIOPR = 4100
WAVE_FORMAT_LH_CODEC = 4352
WAVE_FORMAT_LH_CODEC_CELP = 4353
WAVE_FORMAT_LH_CODEC_SBC8 = 4354
WAVE_FORMAT_LH_CODEC_SBC12 = 4355
WAVE_FORMAT_LH_CODEC_SBC16 = 4356
WAVE_FORMAT_NORRIS = 5120
WAVE_FORMAT_ISIAUDIO_2 = 5121
WAVE_FORMAT_SOUNDSPACE_MUSICOMPRESS = 5376
WAVE_FORMAT_MPEG_ADTS_AAC = 5632
WAVE_FORMAT_MPEG_RAW_AAC = 5633
WAVE_FORMAT_MPEG_LOAS = 5634
WAVE_FORMAT_NOKIA_MPEG_ADTS_AAC = 5640
WAVE_FORMAT_NOKIA_MPEG_RAW_AAC = 5641
WAVE_FORMAT_VODAFONE_MPEG_ADTS_AAC = 5642
WAVE_FORMAT_VODAFONE_MPEG_RAW_AAC = 5643
WAVE_FORMAT_MPEG_HEAAC = 5648
WAVE_FORMAT_VOXWARE_RT24_SPEECH = 6172
WAVE_FORMAT_SONICFOUNDRY_LOSSLESS = 6513
WAVE_FORMAT_INNINGS_TELECOM_ADPCM = 6521
WAVE_FORMAT_LUCENT_SX8300P = 7175
WAVE_FORMAT_LUCENT_SX5363S = 7180
WAVE_FORMAT_CUSEEME = 7939
WAVE_FORMAT_NTCSOFT_ALF2CM_ACM = 8132
WAVE_FORMAT_DVM = 8192
WAVE_FORMAT_DTS2 = 8193
WAVE_FORMAT_MAKEAVIS = 13075
WAVE_FORMAT_DIVIO_MPEG4_AAC = 16707
WAVE_FORMAT_NOKIA_ADAPTIVE_MULTIRATE = 16897
WAVE_FORMAT_DIVIO_G726 = 16963
WAVE_FORMAT_LEAD_SPEECH = 17228
WAVE_FORMAT_LEAD_VORBIS = 22092
WAVE_FORMAT_WAVPACK_AUDIO = 22358
WAVE_FORMAT_ALAC = 27745
WAVE_FORMAT_OGG_VORBIS_MODE_1 = 26447
WAVE_FORMAT_OGG_VORBIS_MODE_2 = 26448
WAVE_FORMAT_OGG_VORBIS_MODE_3 = 26449
WAVE_FORMAT_OGG_VORBIS_MODE_1_PLUS = 26479
WAVE_FORMAT_OGG_VORBIS_MODE_2_PLUS = 26480
WAVE_FORMAT_OGG_VORBIS_MODE_3_PLUS = 26481
WAVE_FORMAT_3COM_NBX = 28672
WAVE_FORMAT_OPUS = 28751
WAVE_FORMAT_FAAD_AAC = 28781
WAVE_FORMAT_AMR_NB = 29537
WAVE_FORMAT_AMR_WB = 29538
WAVE_FORMAT_AMR_WP = 29539
WAVE_FORMAT_GSM_AMR_CBR = 31265
WAVE_FORMAT_GSM_AMR_VBR_SID = 31266
WAVE_FORMAT_COMVERSE_INFOSYS_G723_1 = 41216
WAVE_FORMAT_COMVERSE_INFOSYS_AVQSBC = 41217
WAVE_FORMAT_COMVERSE_INFOSYS_SBC = 41218
WAVE_FORMAT_SYMBOL_G729_A = 41219
WAVE_FORMAT_VOICEAGE_AMR_WB = 41220
WAVE_FORMAT_INGENIENT_G726 = 41221
WAVE_FORMAT_MPEG4_AAC = 41222
WAVE_FORMAT_ENCORE_G726 = 41223
WAVE_FORMAT_ZOLL_ASAO = 41224
WAVE_FORMAT_SPEEX_VOICE = 41225
WAVE_FORMAT_VIANIX_MASC = 41226
WAVE_FORMAT_WM9_SPECTRUM_ANALYZER = 41227
WAVE_FORMAT_WMF_SPECTRUM_ANAYZER = 41228
WAVE_FORMAT_GSM_610 = 41229
WAVE_FORMAT_GSM_620 = 41230
WAVE_FORMAT_GSM_660 = 41231
WAVE_FORMAT_GSM_690 = 41232
WAVE_FORMAT_GSM_ADAPTIVE_MULTIRATE_WB = 41233
WAVE_FORMAT_POLYCOM_G722 = 41234
WAVE_FORMAT_POLYCOM_G728 = 41235
WAVE_FORMAT_POLYCOM_G729_A = 41236
WAVE_FORMAT_POLYCOM_SIREN = 41237
WAVE_FORMAT_GLOBAL_IP_ILBC = 41238
WAVE_FORMAT_RADIOTIME_TIME_SHIFT_RADIO = 41239
WAVE_FORMAT_NICE_ACA = 41240
WAVE_FORMAT_NICE_ADPCM = 41241
WAVE_FORMAT_VOCORD_G721 = 41242
WAVE_FORMAT_VOCORD_G726 = 41243
WAVE_FORMAT_VOCORD_G722_1 = 41244
WAVE_FORMAT_VOCORD_G728 = 41245
WAVE_FORMAT_VOCORD_G729 = 41246
WAVE_FORMAT_VOCORD_G729_A = 41247
WAVE_FORMAT_VOCORD_G723_1 = 41248
WAVE_FORMAT_VOCORD_LBC = 41249
WAVE_FORMAT_NICE_G728 = 41250
WAVE_FORMAT_FRACE_TELECOM_G729 = 41251
WAVE_FORMAT_CODIAN = 41252
WAVE_FORMAT_DOLBY_AC4 = 44096
WAVE_FORMAT_FLAC = 61868
WAVE_FORMAT_DEVELOPMENT = 65535
ACM_MPEG_LAYER1 = 1
ACM_MPEG_LAYER2 = 2
ACM_MPEG_LAYER3 = 4
ACM_MPEG_STEREO = 1
ACM_MPEG_JOINTSTEREO = 2
ACM_MPEG_DUALCHANNEL = 4
ACM_MPEG_SINGLECHANNEL = 8
ACM_MPEG_PRIVATEBIT = 1
ACM_MPEG_COPYRIGHT = 2
ACM_MPEG_ORIGINALHOME = 4
ACM_MPEG_PROTECTIONBIT = 8
ACM_MPEG_ID_MPEG1 = 16
MPEGLAYER3_WFX_EXTRA_BYTES = 12
MPEGLAYER3_ID_UNKNOWN = 0
MPEGLAYER3_ID_MPEG = 1
MPEGLAYER3_ID_CONSTANTFRAMESIZE = 2
MM_MSFT_ACM_WMAUDIO = 39
WMAUDIO_BITS_PER_SAMPLE = 16
WMAUDIO_MAX_CHANNELS = 2
MM_MSFT_ACM_MSAUDIO1 = 39
MSAUDIO1_BITS_PER_SAMPLE = 16
MSAUDIO1_MAX_CHANNELS = 2
MM_MSFT_ACM_WMAUDIO2 = 101
WMAUDIO2_BITS_PER_SAMPLE = 16
WMAUDIO2_MAX_CHANNELS = 2
WAVE_FILTER_UNKNOWN = 0
WAVE_FILTER_DEVELOPMENT = 65535
WAVE_FILTER_VOLUME = 1
WAVE_FILTER_ECHO = 2
JPEG_PROCESS_BASELINE = 0
AVIIF_CONTROLFRAME = 512
JIFMK_SOF0 = 65472
JIFMK_SOF1 = 65473
JIFMK_SOF2 = 65474
JIFMK_SOF3 = 65475
JIFMK_SOF5 = 65477
JIFMK_SOF6 = 65478
JIFMK_SOF7 = 65479
JIFMK_JPG = 65480
JIFMK_SOF9 = 65481
JIFMK_SOF10 = 65482
JIFMK_SOF11 = 65483
JIFMK_SOF13 = 65485
JIFMK_SOF14 = 65486
JIFMK_SOF15 = 65487
JIFMK_DHT = 65476
JIFMK_DAC = 65484
JIFMK_RST0 = 65488
JIFMK_RST1 = 65489
JIFMK_RST2 = 65490
JIFMK_RST3 = 65491
JIFMK_RST4 = 65492
JIFMK_RST5 = 65493
JIFMK_RST6 = 65494
JIFMK_RST7 = 65495
JIFMK_SOI = 65496
JIFMK_EOI = 65497
JIFMK_SOS = 65498
JIFMK_DQT = 65499
JIFMK_DNL = 65500
JIFMK_DRI = 65501
JIFMK_DHP = 65502
JIFMK_EXP = 65503
JIFMK_APP0 = 65504
JIFMK_APP1 = 65505
JIFMK_APP2 = 65506
JIFMK_APP3 = 65507
JIFMK_APP4 = 65508
JIFMK_APP5 = 65509
JIFMK_APP6 = 65510
JIFMK_APP7 = 65511
JIFMK_JPG0 = 65520
JIFMK_JPG1 = 65521
JIFMK_JPG2 = 65522
JIFMK_JPG3 = 65523
JIFMK_JPG4 = 65524
JIFMK_JPG5 = 65525
JIFMK_JPG6 = 65526
JIFMK_JPG7 = 65527
JIFMK_JPG8 = 65528
JIFMK_JPG9 = 65529
JIFMK_JPG10 = 65530
JIFMK_JPG11 = 65531
JIFMK_JPG12 = 65532
JIFMK_JPG13 = 65533
JIFMK_COM = 65534
JIFMK_TEM = 65281
JIFMK_RES = 65282
JIFMK_00 = 65280
JIFMK_FF = 65535
JPEG_Y = 1
JPEG_YCbCr = 2
JPEG_RGB = 3
MIXERCONTROL_CONTROLTYPE_SRS_MTS = 536936454
MIXERCONTROL_CONTROLTYPE_SRS_ONOFF = 536936455
MIXERCONTROL_CONTROLTYPE_SRS_SYNTHSELECT = 536936456
VP_COMMAND_GET = 1
VP_COMMAND_SET = 2
VP_FLAGS_TV_MODE = 1
VP_FLAGS_TV_STANDARD = 2
VP_FLAGS_FLICKER = 4
VP_FLAGS_OVERSCAN = 8
VP_FLAGS_MAX_UNSCALED = 16
VP_FLAGS_POSITION = 32
VP_FLAGS_BRIGHTNESS = 64
VP_FLAGS_CONTRAST = 128
VP_FLAGS_COPYPROTECT = 256
VP_MODE_WIN_GRAPHICS = 1
VP_MODE_TV_PLAYBACK = 2
VP_TV_STANDARD_NTSC_M = 1
VP_TV_STANDARD_NTSC_M_J = 2
VP_TV_STANDARD_PAL_B = 4
VP_TV_STANDARD_PAL_D = 8
VP_TV_STANDARD_PAL_H = 16
VP_TV_STANDARD_PAL_I = 32
VP_TV_STANDARD_PAL_M = 64
VP_TV_STANDARD_PAL_N = 128
VP_TV_STANDARD_SECAM_B = 256
VP_TV_STANDARD_SECAM_D = 512
VP_TV_STANDARD_SECAM_G = 1024
VP_TV_STANDARD_SECAM_H = 2048
VP_TV_STANDARD_SECAM_K = 4096
VP_TV_STANDARD_SECAM_K1 = 8192
VP_TV_STANDARD_SECAM_L = 16384
VP_TV_STANDARD_WIN_VGA = 32768
VP_TV_STANDARD_NTSC_433 = 65536
VP_TV_STANDARD_PAL_G = 131072
VP_TV_STANDARD_PAL_60 = 262144
VP_TV_STANDARD_SECAM_L1 = 524288
VP_CP_TYPE_APS_TRIGGER = 1
VP_CP_TYPE_MACROVISION = 2
VP_CP_CMD_ACTIVATE = 1
VP_CP_CMD_DEACTIVATE = 2
VP_CP_CMD_CHANGE = 4
ICVERSION = 260
BI_1632 = 842217009
ICERR_OK = 0
ICERR_DONTDRAW = 1
ICERR_NEWPALETTE = 2
ICERR_GOTOKEYFRAME = 3
ICERR_STOPDRAWING = 4
ICERR_UNSUPPORTED = -1
ICERR_BADFORMAT = -2
ICERR_MEMORY = -3
ICERR_INTERNAL = -4
ICERR_BADFLAGS = -5
ICERR_BADPARAM = -6
ICERR_BADSIZE = -7
ICERR_BADHANDLE = -8
ICERR_CANTUPDATE = -9
ICERR_ABORT = -10
ICERR_ERROR = -100
ICERR_BADBITDEPTH = -200
ICERR_BADIMAGESIZE = -201
ICERR_CUSTOM = -400
ICMODE_COMPRESS = 1
ICMODE_DECOMPRESS = 2
ICMODE_FASTDECOMPRESS = 3
ICMODE_QUERY = 4
ICMODE_FASTCOMPRESS = 5
ICMODE_DRAW = 8
ICMODE_INTERNALF_FUNCTION32 = 32768
ICMODE_INTERNALF_MASK = 32768
AVIIF_TWOCC = 2
ICQUALITY_LOW = 0
ICQUALITY_HIGH = 10000
ICQUALITY_DEFAULT = -1
ICM_USER = 16384
ICM_RESERVED_LOW = 20480
ICM_RESERVED_HIGH = 24576
ICM_GETSTATE = 20480
ICM_SETSTATE = 20481
ICM_GETINFO = 20482
ICM_CONFIGURE = 20490
ICM_ABOUT = 20491
ICM_GETERRORTEXT = 20492
ICM_GETFORMATNAME = 20500
ICM_ENUMFORMATS = 20501
ICM_GETDEFAULTQUALITY = 20510
ICM_GETQUALITY = 20511
ICM_SETQUALITY = 20512
ICM_SET = 20520
ICM_GET = 20521
ICM_COMPRESS_GET_FORMAT = 16388
ICM_COMPRESS_GET_SIZE = 16389
ICM_COMPRESS_QUERY = 16390
ICM_COMPRESS_BEGIN = 16391
ICM_COMPRESS = 16392
ICM_COMPRESS_END = 16393
ICM_DECOMPRESS_GET_FORMAT = 16394
ICM_DECOMPRESS_QUERY = 16395
ICM_DECOMPRESS_BEGIN = 16396
ICM_DECOMPRESS = 16397
ICM_DECOMPRESS_END = 16398
ICM_DECOMPRESS_SET_PALETTE = 16413
ICM_DECOMPRESS_GET_PALETTE = 16414
ICM_DRAW_QUERY = 16415
ICM_DRAW_BEGIN = 16399
ICM_DRAW_GET_PALETTE = 16400
ICM_DRAW_UPDATE = 16401
ICM_DRAW_START = 16402
ICM_DRAW_STOP = 16403
ICM_DRAW_BITS = 16404
ICM_DRAW_END = 16405
ICM_DRAW_GETTIME = 16416
ICM_DRAW = 16417
ICM_DRAW_WINDOW = 16418
ICM_DRAW_SETTIME = 16419
ICM_DRAW_REALIZE = 16420
ICM_DRAW_FLUSH = 16421
ICM_DRAW_RENDERBUFFER = 16422
ICM_DRAW_START_PLAY = 16423
ICM_DRAW_STOP_PLAY = 16424
ICM_DRAW_SUGGESTFORMAT = 16434
ICM_DRAW_CHANGEPALETTE = 16435
ICM_DRAW_IDLE = 16436
ICM_GETBUFFERSWANTED = 16425
ICM_GETDEFAULTKEYFRAMERATE = 16426
ICM_DECOMPRESSEX_BEGIN = 16444
ICM_DECOMPRESSEX_QUERY = 16445
ICM_DECOMPRESSEX = 16446
ICM_DECOMPRESSEX_END = 16447
ICM_COMPRESS_FRAMES_INFO = 16454
ICM_COMPRESS_FRAMES = 16455
ICM_SET_STATUS_PROC = 16456
VIDCF_QUALITY = 1
VIDCF_CRUNCH = 2
VIDCF_TEMPORAL = 4
VIDCF_COMPRESSFRAMES = 8
VIDCF_DRAW = 16
VIDCF_FASTTEMPORALC = 32
VIDCF_FASTTEMPORALD = 128
ICCOMPRESS_KEYFRAME = 1
ICCOMPRESSFRAMES_PADDING = 1
ICSTATUS_START = 0
ICSTATUS_STATUS = 1
ICSTATUS_END = 2
ICSTATUS_ERROR = 3
ICSTATUS_YIELD = 4
ICDECOMPRESS_HURRYUP = -2147483648
ICDECOMPRESS_UPDATE = 1073741824
ICDECOMPRESS_PREROLL = 536870912
ICDECOMPRESS_NULLFRAME = 268435456
ICDECOMPRESS_NOTKEYFRAME = 134217728
ICDRAW_QUERY = 1
ICDRAW_FULLSCREEN = 2
ICDRAW_HDC = 4
ICDRAW_ANIMATE = 8
ICDRAW_CONTINUE = 16
ICDRAW_MEMORYDC = 32
ICDRAW_UPDATING = 64
ICDRAW_RENDER = 128
ICDRAW_BUFFER = 256
ICDRAW_HURRYUP = -2147483648
ICDRAW_UPDATE = 1073741824
ICDRAW_PREROLL = 536870912
ICDRAW_NULLFRAME = 268435456
ICDRAW_NOTKEYFRAME = 134217728
ICINSTALL_UNICODE = 32768
ICINSTALL_FUNCTION = 1
ICINSTALL_DRIVER = 2
ICINSTALL_HDRV = 4
ICINSTALL_DRIVERW = 32770
ICMF_CONFIGURE_QUERY = 1
ICMF_ABOUT_QUERY = 1
ICMF_COMPVARS_VALID = 1
ICMF_CHOOSE_KEYFRAME = 1
ICMF_CHOOSE_DATARATE = 2
ICMF_CHOOSE_PREVIEW = 4
ICMF_CHOOSE_ALLCOMPRESSORS = 8
DDF_0001 = 1
DDF_UPDATE = 2
DDF_SAME_HDC = 4
DDF_SAME_DRAW = 8
DDF_DONTDRAW = 16
DDF_ANIMATE = 32
DDF_BUFFER = 64
DDF_JUSTDRAWIT = 128
DDF_FULLSCREEN = 256
DDF_BACKGROUNDPAL = 512
DDF_NOTKEYFRAME = 1024
DDF_HURRYUP = 2048
DDF_HALFTONE = 4096
DDF_2000 = 8192
DDF_PREROLL = 16
DDF_SAME_DIB = 8
DDF_SAME_SIZE = 8
PD_CAN_DRAW_DIB = 1
PD_CAN_STRETCHDIB = 2
PD_STRETCHDIB_1_1_OK = 4
PD_STRETCHDIB_1_2_OK = 8
PD_STRETCHDIB_1_N_OK = 16
AVIGETFRAMEF_BESTDISPLAYFMT = 1
AVISTREAMINFO_DISABLED = 1
AVISTREAMINFO_FORMATCHANGES = 65536
AVIFILEINFO_HASINDEX = 16
AVIFILEINFO_MUSTUSEINDEX = 32
AVIFILEINFO_ISINTERLEAVED = 256
AVIFILEINFO_WASCAPTUREFILE = 65536
AVIFILEINFO_COPYRIGHTED = 131072
AVIFILECAPS_CANREAD = 1
AVIFILECAPS_CANWRITE = 2
AVIFILECAPS_ALLKEYFRAMES = 16
AVIFILECAPS_NOCOMPRESSION = 32
AVICOMPRESSF_INTERLEAVE = 1
AVICOMPRESSF_DATARATE = 2
AVICOMPRESSF_KEYFRAMES = 4
AVICOMPRESSF_VALID = 8
CLSID_AVISimpleUnMarshal = '00020009-0000-0000-c000-000000000046'
CLSID_AVIFile = '00020000-0000-0000-c000-000000000046'
AVIFILEHANDLER_CANREAD = 1
AVIFILEHANDLER_CANWRITE = 2
AVIFILEHANDLER_CANACCEPTNONRGB = 4
AVISTREAMREAD_CONVENIENT = -1
FIND_DIR = 15
FIND_NEXT = 1
FIND_PREV = 4
FIND_FROM_START = 8
FIND_TYPE = 240
FIND_KEY = 16
FIND_ANY = 32
FIND_FORMAT = 64
FIND_RET = 61440
FIND_POS = 0
FIND_LENGTH = 4096
FIND_OFFSET = 8192
FIND_SIZE = 12288
FIND_INDEX = 16384
SEARCH_NEAREST = 4
SEARCH_BACKWARD = 4
SEARCH_FORWARD = 1
SEARCH_KEY = 16
SEARCH_ANY = 32
AVIERR_OK = 0
MCIWNDOPENF_NEW = 1
MCIWNDF_NOAUTOSIZEWINDOW = 1
MCIWNDF_NOPLAYBAR = 2
MCIWNDF_NOAUTOSIZEMOVIE = 4
MCIWNDF_NOMENU = 8
MCIWNDF_SHOWNAME = 16
MCIWNDF_SHOWPOS = 32
MCIWNDF_SHOWMODE = 64
MCIWNDF_SHOWALL = 112
MCIWNDF_NOTIFYMODE = 256
MCIWNDF_NOTIFYPOS = 512
MCIWNDF_NOTIFYSIZE = 1024
MCIWNDF_NOTIFYERROR = 4096
MCIWNDF_NOTIFYALL = 7936
MCIWNDF_NOTIFYANSI = 128
MCIWNDF_NOTIFYMEDIAA = 2176
MCIWNDF_NOTIFYMEDIAW = 2048
MCIWNDF_NOTIFYMEDIA = 2048
MCIWNDF_RECORD = 8192
MCIWNDF_NOERRORDLG = 16384
MCIWNDF_NOOPEN = 32768
MCIWNDM_GETDEVICEID = 1124
MCIWNDM_GETSTART = 1127
MCIWNDM_GETLENGTH = 1128
MCIWNDM_GETEND = 1129
MCIWNDM_EJECT = 1131
MCIWNDM_SETZOOM = 1132
MCIWNDM_GETZOOM = 1133
MCIWNDM_SETVOLUME = 1134
MCIWNDM_GETVOLUME = 1135
MCIWNDM_SETSPEED = 1136
MCIWNDM_GETSPEED = 1137
MCIWNDM_SETREPEAT = 1138
MCIWNDM_GETREPEAT = 1139
MCIWNDM_REALIZE = 1142
MCIWNDM_VALIDATEMEDIA = 1145
MCIWNDM_PLAYFROM = 1146
MCIWNDM_PLAYTO = 1147
MCIWNDM_GETPALETTE = 1150
MCIWNDM_SETPALETTE = 1151
MCIWNDM_SETTIMERS = 1153
MCIWNDM_SETACTIVETIMER = 1154
MCIWNDM_SETINACTIVETIMER = 1155
MCIWNDM_GETACTIVETIMER = 1156
MCIWNDM_GETINACTIVETIMER = 1157
MCIWNDM_CHANGESTYLES = 1159
MCIWNDM_GETSTYLES = 1160
MCIWNDM_GETALIAS = 1161
MCIWNDM_PLAYREVERSE = 1163
MCIWNDM_GET_SOURCE = 1164
MCIWNDM_PUT_SOURCE = 1165
MCIWNDM_GET_DEST = 1166
MCIWNDM_PUT_DEST = 1167
MCIWNDM_CAN_PLAY = 1168
MCIWNDM_CAN_WINDOW = 1169
MCIWNDM_CAN_RECORD = 1170
MCIWNDM_CAN_SAVE = 1171
MCIWNDM_CAN_EJECT = 1172
MCIWNDM_CAN_CONFIG = 1173
MCIWNDM_PALETTEKICK = 1174
MCIWNDM_OPENINTERFACE = 1175
MCIWNDM_SETOWNER = 1176
MCIWNDM_SENDSTRINGA = 1125
MCIWNDM_GETPOSITIONA = 1126
MCIWNDM_GETMODEA = 1130
MCIWNDM_SETTIMEFORMATA = 1143
MCIWNDM_GETTIMEFORMATA = 1144
MCIWNDM_GETFILENAMEA = 1148
MCIWNDM_GETDEVICEA = 1149
MCIWNDM_GETERRORA = 1152
MCIWNDM_NEWA = 1158
MCIWNDM_RETURNSTRINGA = 1162
MCIWNDM_OPENA = 1177
MCIWNDM_SENDSTRINGW = 1225
MCIWNDM_GETPOSITIONW = 1226
MCIWNDM_GETMODEW = 1230
MCIWNDM_SETTIMEFORMATW = 1243
MCIWNDM_GETTIMEFORMATW = 1244
MCIWNDM_GETFILENAMEW = 1248
MCIWNDM_GETDEVICEW = 1249
MCIWNDM_GETERRORW = 1252
MCIWNDM_NEWW = 1258
MCIWNDM_RETURNSTRINGW = 1262
MCIWNDM_OPENW = 1276
MCIWNDM_SENDSTRING = 1225
MCIWNDM_GETPOSITION = 1226
MCIWNDM_GETMODE = 1230
MCIWNDM_SETTIMEFORMAT = 1243
MCIWNDM_GETTIMEFORMAT = 1244
MCIWNDM_GETFILENAME = 1248
MCIWNDM_GETDEVICE = 1249
MCIWNDM_GETERROR = 1252
MCIWNDM_NEW = 1258
MCIWNDM_RETURNSTRING = 1262
MCIWNDM_OPEN = 1276
MCIWNDM_NOTIFYMODE = 1224
MCIWNDM_NOTIFYPOS = 1225
MCIWNDM_NOTIFYSIZE = 1226
MCIWNDM_NOTIFYMEDIA = 1227
MCIWNDM_NOTIFYERROR = 1229
MCIWND_START = -1
MCIWND_END = -2
MCI_OPEN = 2051
MCI_CLOSE = 2052
MCI_PLAY = 2054
MCI_SEEK = 2055
MCI_STOP = 2056
MCI_PAUSE = 2057
MCI_STEP = 2062
MCI_RECORD = 2063
MCI_SAVE = 2067
MCI_CUT = 2129
MCI_COPY = 2130
MCI_PASTE = 2131
MCI_RESUME = 2133
MCI_DELETE = 2134
MCI_MODE_NOT_READY = 524
MCI_MODE_STOP = 525
MCI_MODE_PLAY = 526
MCI_MODE_RECORD = 527
MCI_MODE_SEEK = 528
MCI_MODE_PAUSE = 529
MCI_MODE_OPEN = 530
DV_ERR_OK = 0
DV_ERR_BASE = 1
DV_ERR_NONSPECIFIC = 1
DV_ERR_BADFORMAT = 2
DV_ERR_STILLPLAYING = 3
DV_ERR_UNPREPARED = 4
DV_ERR_SYNC = 5
DV_ERR_TOOMANYCHANNELS = 6
DV_ERR_NOTDETECTED = 7
DV_ERR_BADINSTALL = 8
DV_ERR_CREATEPALETTE = 9
DV_ERR_SIZEFIELD = 10
DV_ERR_PARAM1 = 11
DV_ERR_PARAM2 = 12
DV_ERR_CONFIG1 = 13
DV_ERR_CONFIG2 = 14
DV_ERR_FLAGS = 15
DV_ERR_13 = 16
DV_ERR_NOTSUPPORTED = 17
DV_ERR_NOMEM = 18
DV_ERR_ALLOCATED = 19
DV_ERR_BADDEVICEID = 20
DV_ERR_INVALHANDLE = 21
DV_ERR_BADERRNUM = 22
DV_ERR_NO_BUFFERS = 23
DV_ERR_MEM_CONFLICT = 24
DV_ERR_IO_CONFLICT = 25
DV_ERR_DMA_CONFLICT = 26
DV_ERR_INT_CONFLICT = 27
DV_ERR_PROTECT_ONLY = 28
DV_ERR_LASTERROR = 28
DV_ERR_USER_MSG = 1001
DV_VM_OPEN = 976
DV_VM_CLOSE = 977
DV_VM_DATA = 978
DV_VM_ERROR = 979
VHDR_DONE = 1
VHDR_PREPARED = 2
VHDR_INQUEUE = 4
VHDR_KEYFRAME = 8
VHDR_VALID = 15
VCAPS_OVERLAY = 1
VCAPS_SRC_CAN_CLIP = 2
VCAPS_DST_CAN_CLIP = 4
VCAPS_CAN_SCALE = 8
VIDEO_EXTERNALIN = 1
VIDEO_EXTERNALOUT = 2
VIDEO_IN = 4
VIDEO_OUT = 8
VIDEO_DLG_QUERY = 16
VIDEO_CONFIGURE_QUERY = 32768
VIDEO_CONFIGURE_SET = 4096
VIDEO_CONFIGURE_GET = 8192
VIDEO_CONFIGURE_QUERYSIZE = 1
VIDEO_CONFIGURE_CURRENT = 16
VIDEO_CONFIGURE_NOMINAL = 32
VIDEO_CONFIGURE_MIN = 64
VIDEO_CONFIGURE_MAX = 128
DVM_USER = 16384
DVM_CONFIGURE_START = 4096
DVM_CONFIGURE_END = 8191
DVM_PALETTE = 4097
DVM_FORMAT = 4098
DVM_PALETTERGB555 = 4099
DVM_SRC_RECT = 4100
DVM_DST_RECT = 4101
WM_CAP_UNICODE_START = 1124
WM_CAP_GET_CAPSTREAMPTR = 1025
WM_CAP_SET_CALLBACK_ERRORW = 1126
WM_CAP_SET_CALLBACK_STATUSW = 1127
WM_CAP_SET_CALLBACK_ERRORA = 1026
WM_CAP_SET_CALLBACK_STATUSA = 1027
WM_CAP_SET_CALLBACK_ERROR = 1126
WM_CAP_SET_CALLBACK_STATUS = 1127
WM_CAP_SET_CALLBACK_YIELD = 1028
WM_CAP_SET_CALLBACK_FRAME = 1029
WM_CAP_SET_CALLBACK_VIDEOSTREAM = 1030
WM_CAP_SET_CALLBACK_WAVESTREAM = 1031
WM_CAP_GET_USER_DATA = 1032
WM_CAP_SET_USER_DATA = 1033
WM_CAP_DRIVER_CONNECT = 1034
WM_CAP_DRIVER_DISCONNECT = 1035
WM_CAP_DRIVER_GET_NAMEA = 1036
WM_CAP_DRIVER_GET_VERSIONA = 1037
WM_CAP_DRIVER_GET_NAMEW = 1136
WM_CAP_DRIVER_GET_VERSIONW = 1137
WM_CAP_DRIVER_GET_NAME = 1136
WM_CAP_DRIVER_GET_VERSION = 1137
WM_CAP_DRIVER_GET_CAPS = 1038
WM_CAP_FILE_SET_CAPTURE_FILEA = 1044
WM_CAP_FILE_GET_CAPTURE_FILEA = 1045
WM_CAP_FILE_SAVEASA = 1047
WM_CAP_FILE_SAVEDIBA = 1049
WM_CAP_FILE_SET_CAPTURE_FILEW = 1144
WM_CAP_FILE_GET_CAPTURE_FILEW = 1145
WM_CAP_FILE_SAVEASW = 1147
WM_CAP_FILE_SAVEDIBW = 1149
WM_CAP_FILE_SET_CAPTURE_FILE = 1144
WM_CAP_FILE_GET_CAPTURE_FILE = 1145
WM_CAP_FILE_SAVEAS = 1147
WM_CAP_FILE_SAVEDIB = 1149
WM_CAP_FILE_ALLOCATE = 1046
WM_CAP_FILE_SET_INFOCHUNK = 1048
WM_CAP_EDIT_COPY = 1054
WM_CAP_SET_AUDIOFORMAT = 1059
WM_CAP_GET_AUDIOFORMAT = 1060
WM_CAP_DLG_VIDEOFORMAT = 1065
WM_CAP_DLG_VIDEOSOURCE = 1066
WM_CAP_DLG_VIDEODISPLAY = 1067
WM_CAP_GET_VIDEOFORMAT = 1068
WM_CAP_SET_VIDEOFORMAT = 1069
WM_CAP_DLG_VIDEOCOMPRESSION = 1070
WM_CAP_SET_PREVIEW = 1074
WM_CAP_SET_OVERLAY = 1075
WM_CAP_SET_PREVIEWRATE = 1076
WM_CAP_SET_SCALE = 1077
WM_CAP_GET_STATUS = 1078
WM_CAP_SET_SCROLL = 1079
WM_CAP_GRAB_FRAME = 1084
WM_CAP_GRAB_FRAME_NOSTOP = 1085
WM_CAP_SEQUENCE = 1086
WM_CAP_SEQUENCE_NOFILE = 1087
WM_CAP_SET_SEQUENCE_SETUP = 1088
WM_CAP_GET_SEQUENCE_SETUP = 1089
WM_CAP_SET_MCI_DEVICEA = 1090
WM_CAP_GET_MCI_DEVICEA = 1091
WM_CAP_SET_MCI_DEVICEW = 1190
WM_CAP_GET_MCI_DEVICEW = 1191
WM_CAP_SET_MCI_DEVICE = 1190
WM_CAP_GET_MCI_DEVICE = 1191
WM_CAP_STOP = 1092
WM_CAP_ABORT = 1093
WM_CAP_SINGLE_FRAME_OPEN = 1094
WM_CAP_SINGLE_FRAME_CLOSE = 1095
WM_CAP_SINGLE_FRAME = 1096
WM_CAP_PAL_OPENA = 1104
WM_CAP_PAL_SAVEA = 1105
WM_CAP_PAL_OPENW = 1204
WM_CAP_PAL_SAVEW = 1205
WM_CAP_PAL_OPEN = 1204
WM_CAP_PAL_SAVE = 1205
WM_CAP_PAL_PASTE = 1106
WM_CAP_PAL_AUTOCREATE = 1107
WM_CAP_PAL_MANUALCREATE = 1108
WM_CAP_SET_CALLBACK_CAPCONTROL = 1109
WM_CAP_UNICODE_END = 1205
WM_CAP_END = 1205
AVSTREAMMASTER_AUDIO = 0
AVSTREAMMASTER_NONE = 1
CONTROLCALLBACK_PREROLL = 1
CONTROLCALLBACK_CAPTURING = 2
IDS_CAP_BEGIN = 300
IDS_CAP_END = 301
IDS_CAP_INFO = 401
IDS_CAP_OUTOFMEM = 402
IDS_CAP_FILEEXISTS = 403
IDS_CAP_ERRORPALOPEN = 404
IDS_CAP_ERRORPALSAVE = 405
IDS_CAP_ERRORDIBSAVE = 406
IDS_CAP_DEFAVIEXT = 407
IDS_CAP_DEFPALEXT = 408
IDS_CAP_CANTOPEN = 409
IDS_CAP_SEQ_MSGSTART = 410
IDS_CAP_SEQ_MSGSTOP = 411
IDS_CAP_VIDEDITERR = 412
IDS_CAP_READONLYFILE = 413
IDS_CAP_WRITEERROR = 414
IDS_CAP_NODISKSPACE = 415
IDS_CAP_SETFILESIZE = 416
IDS_CAP_SAVEASPERCENT = 417
IDS_CAP_DRIVER_ERROR = 418
IDS_CAP_WAVE_OPEN_ERROR = 419
IDS_CAP_WAVE_ALLOC_ERROR = 420
IDS_CAP_WAVE_PREPARE_ERROR = 421
IDS_CAP_WAVE_ADD_ERROR = 422
IDS_CAP_WAVE_SIZE_ERROR = 423
IDS_CAP_VIDEO_OPEN_ERROR = 424
IDS_CAP_VIDEO_ALLOC_ERROR = 425
IDS_CAP_VIDEO_PREPARE_ERROR = 426
IDS_CAP_VIDEO_ADD_ERROR = 427
IDS_CAP_VIDEO_SIZE_ERROR = 428
IDS_CAP_FILE_OPEN_ERROR = 429
IDS_CAP_FILE_WRITE_ERROR = 430
IDS_CAP_RECORDING_ERROR = 431
IDS_CAP_RECORDING_ERROR2 = 432
IDS_CAP_AVI_INIT_ERROR = 433
IDS_CAP_NO_FRAME_CAP_ERROR = 434
IDS_CAP_NO_PALETTE_WARN = 435
IDS_CAP_MCI_CONTROL_ERROR = 436
IDS_CAP_MCI_CANT_STEP_ERROR = 437
IDS_CAP_NO_AUDIO_CAP_ERROR = 438
IDS_CAP_AVI_DRAWDIB_ERROR = 439
IDS_CAP_COMPRESSOR_ERROR = 440
IDS_CAP_AUDIO_DROP_ERROR = 441
IDS_CAP_AUDIO_DROP_COMPERROR = 442
IDS_CAP_STAT_LIVE_MODE = 500
IDS_CAP_STAT_OVERLAY_MODE = 501
IDS_CAP_STAT_CAP_INIT = 502
IDS_CAP_STAT_CAP_FINI = 503
IDS_CAP_STAT_PALETTE_BUILD = 504
IDS_CAP_STAT_OPTPAL_BUILD = 505
IDS_CAP_STAT_I_FRAMES = 506
IDS_CAP_STAT_L_FRAMES = 507
IDS_CAP_STAT_CAP_L_FRAMES = 508
IDS_CAP_STAT_CAP_AUDIO = 509
IDS_CAP_STAT_VIDEOCURRENT = 510
IDS_CAP_STAT_VIDEOAUDIO = 511
IDS_CAP_STAT_VIDEOONLY = 512
IDS_CAP_STAT_FRAMESDROPPED = 513
JOYERR_NOERROR = 0
JOYERR_PARMS = 165
JOYERR_NOCANDO = 166
JOYERR_UNPLUGGED = 167
JOY_BUTTON1 = 1
JOY_BUTTON2 = 2
JOY_BUTTON3 = 4
JOY_BUTTON4 = 8
JOY_BUTTON1CHG = 256
JOY_BUTTON2CHG = 512
JOY_BUTTON3CHG = 1024
JOY_BUTTON4CHG = 2048
JOY_BUTTON5 = 16
JOY_BUTTON6 = 32
JOY_BUTTON7 = 64
JOY_BUTTON8 = 128
JOY_BUTTON9 = 256
JOY_BUTTON10 = 512
JOY_BUTTON11 = 1024
JOY_BUTTON12 = 2048
JOY_BUTTON13 = 4096
JOY_BUTTON14 = 8192
JOY_BUTTON15 = 16384
JOY_BUTTON16 = 32768
JOY_BUTTON17 = 65536
JOY_BUTTON18 = 131072
JOY_BUTTON19 = 262144
JOY_BUTTON20 = 524288
JOY_BUTTON21 = 1048576
JOY_BUTTON22 = 2097152
JOY_BUTTON23 = 4194304
JOY_BUTTON24 = 8388608
JOY_BUTTON25 = 16777216
JOY_BUTTON26 = 33554432
JOY_BUTTON27 = 67108864
JOY_BUTTON28 = 134217728
JOY_BUTTON29 = 268435456
JOY_BUTTON30 = 536870912
JOY_BUTTON31 = 1073741824
JOY_BUTTON32 = -2147483648
JOY_POVFORWARD = 0
JOY_POVRIGHT = 9000
JOY_POVBACKWARD = 18000
JOY_POVLEFT = 27000
JOY_RETURNX = 1
JOY_RETURNY = 2
JOY_RETURNZ = 4
JOY_RETURNR = 8
JOY_RETURNU = 16
JOY_RETURNV = 32
JOY_RETURNPOV = 64
JOY_RETURNBUTTONS = 128
JOY_RETURNRAWDATA = 256
JOY_RETURNPOVCTS = 512
JOY_RETURNCENTERED = 1024
JOY_USEDEADZONE = 2048
JOY_CAL_READALWAYS = 65536
JOY_CAL_READXYONLY = 131072
JOY_CAL_READ3 = 262144
JOY_CAL_READ4 = 524288
JOY_CAL_READXONLY = 1048576
JOY_CAL_READYONLY = 2097152
JOY_CAL_READ5 = 4194304
JOY_CAL_READ6 = 8388608
JOY_CAL_READZONLY = 16777216
JOY_CAL_READRONLY = 33554432
JOY_CAL_READUONLY = 67108864
JOY_CAL_READVONLY = 134217728
JOYSTICKID1 = 0
JOYSTICKID2 = 1
JOYCAPS_HASZ = 1
JOYCAPS_HASR = 2
JOYCAPS_HASU = 4
JOYCAPS_HASV = 8
JOYCAPS_HASPOV = 16
JOYCAPS_POV4DIR = 32
JOYCAPS_POVCTS = 64
DRV_LOAD = 1
DRV_ENABLE = 2
DRV_OPEN = 3
DRV_CLOSE = 4
DRV_DISABLE = 5
DRV_FREE = 6
DRV_CONFIGURE = 7
DRV_QUERYCONFIGURE = 8
DRV_INSTALL = 9
DRV_REMOVE = 10
DRV_RESERVED = 2048
DRV_USER = 16384
DCB_NOSWITCH = 8
DCB_TYPEMASK = 7
DCB_NULL = 0
DCB_WINDOW = 1
DCB_TASK = 2
DCB_FUNCTION = 3
DCB_EVENT = 5
DRVM_INIT = 100
DRVM_EXIT = 101
DRVM_DISABLE = 102
DRVM_ENABLE = 103
DRVM_INIT_EX = 104
DRVM_USER = 16384
DRVM_MAPPER_RECONFIGURE = 8193
DRVM_MAPPER_PREFERRED_GET = 8213
DRVM_MAPPER_CONSOLEVOICECOM_GET = 8215
DRV_QUERYDEVNODE = 2050
DRV_QUERYMAPPABLE = 2053
DRV_QUERYMODULE = 2057
DRV_PNPINSTALL = 2059
DRV_QUERYDEVICEINTERFACE = 2060
DRV_QUERYDEVICEINTERFACESIZE = 2061
DRV_QUERYSTRINGID = 2062
DRV_QUERYSTRINGIDSIZE = 2063
DRV_QUERYIDFROMSTRINGID = 2064
DRV_QUERYFUNCTIONINSTANCEID = 2065
DRV_QUERYFUNCTIONINSTANCEIDSIZE = 2066
DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY = 1
DRVM_IOCTL = 256
DRVM_ADD_THRU = 257
DRVM_REMOVE_THRU = 258
DRVM_IOCTL_LAST = 261
DRVM_IOCTL_CMD_USER = 0
DRVM_IOCTL_CMD_SYSTEM = -2147483648
VADMAD_Device_ID = 1092
WODM_INIT = 100
WIDM_INIT = 100
WODM_INIT_EX = 104
WIDM_INIT_EX = 104
WODM_GETNUMDEVS = 3
WODM_GETDEVCAPS = 4
WODM_OPEN = 5
WODM_CLOSE = 6
WODM_PREPARE = 7
WODM_UNPREPARE = 8
WODM_WRITE = 9
WODM_PAUSE = 10
WODM_RESTART = 11
WODM_RESET = 12
WODM_GETPOS = 13
WODM_GETPITCH = 14
WODM_SETPITCH = 15
WODM_GETVOLUME = 16
WODM_SETVOLUME = 17
WODM_GETPLAYBACKRATE = 18
WODM_SETPLAYBACKRATE = 19
WODM_BREAKLOOP = 20
WODM_PREFERRED = 21
WODM_BUSY = 21
WIDM_GETNUMDEVS = 50
WIDM_GETDEVCAPS = 51
WIDM_OPEN = 52
WIDM_CLOSE = 53
WIDM_PREPARE = 54
WIDM_UNPREPARE = 55
WIDM_ADDBUFFER = 56
WIDM_START = 57
WIDM_STOP = 58
WIDM_RESET = 59
WIDM_GETPOS = 60
WIDM_PREFERRED = 61
MIDI_IO_PACKED = 0
MIDI_IO_COOKED = 2
MODM_GETNUMDEVS = 1
MODM_GETDEVCAPS = 2
MODM_OPEN = 3
MODM_CLOSE = 4
MODM_PREPARE = 5
MODM_UNPREPARE = 6
MODM_DATA = 7
MODM_LONGDATA = 8
MODM_RESET = 9
MODM_GETVOLUME = 10
MODM_SETVOLUME = 11
MODM_CACHEPATCHES = 12
MODM_CACHEDRUMPATCHES = 13
MODM_STRMDATA = 14
MODM_GETPOS = 17
MODM_PAUSE = 18
MODM_RESTART = 19
MODM_STOP = 20
MODM_PROPERTIES = 21
MODM_PREFERRED = 22
MODM_RECONFIGURE = 18280
MIDM_GETNUMDEVS = 53
MIDM_GETDEVCAPS = 54
MIDM_OPEN = 55
MIDM_CLOSE = 56
MIDM_PREPARE = 57
MIDM_UNPREPARE = 58
MIDM_ADDBUFFER = 59
MIDM_START = 60
MIDM_STOP = 61
MIDM_RESET = 62
AUXM_INIT = 100
AUXM_INIT_EX = 104
AUXDM_GETNUMDEVS = 3
AUXDM_GETDEVCAPS = 4
AUXDM_GETVOLUME = 5
AUXDM_SETVOLUME = 6
MXDM_INIT = 100
MXDM_INIT_EX = 104
MXDM_USER = 16384
MXDM_BASE = 1
MXDM_GETNUMDEVS = 1
MXDM_GETDEVCAPS = 2
MXDM_OPEN = 3
MXDM_CLOSE = 4
MXDM_GETLINEINFO = 5
MXDM_GETLINECONTROLS = 6
MXDM_GETCONTROLDETAILS = 7
MXDM_SETCONTROLDETAILS = 8
TDD_KILLTIMEREVENT = 2048
TDD_SETTIMEREVENT = 2052
TDD_GETSYSTEMTIME = 2056
TDD_GETDEVCAPS = 2060
TDD_BEGINMINPERIOD = 2064
TDD_ENDMINPERIOD = 2068
JDD_GETNUMDEVS = 2049
JDD_GETDEVCAPS = 2050
JDD_GETPOS = 2305
JDD_SETCALIBRATION = 2306
JDD_CONFIGCHANGED = 2307
JDD_GETPOSEX = 2308
MCI_OPEN_DRIVER = 2049
MCI_CLOSE_DRIVER = 2050
MCI_FALSE = 531
MCI_TRUE = 532
MCI_FORMAT_MILLISECONDS_S = 533
MCI_FORMAT_HMS_S = 534
MCI_FORMAT_MSF_S = 535
MCI_FORMAT_FRAMES_S = 536
MCI_FORMAT_SMPTE_24_S = 537
MCI_FORMAT_SMPTE_25_S = 538
MCI_FORMAT_SMPTE_30_S = 539
MCI_FORMAT_SMPTE_30DROP_S = 540
MCI_FORMAT_BYTES_S = 541
MCI_FORMAT_SAMPLES_S = 542
MCI_FORMAT_TMSF_S = 543
MCI_VD_FORMAT_TRACK_S = 1029
WAVE_FORMAT_PCM_S = 1152
WAVE_MAPPER_S = 1153
MCI_SEQ_MAPPER_S = 1221
MCI_SEQ_FILE_S = 1222
MCI_SEQ_MIDI_S = 1223
MCI_SEQ_SMPTE_S = 1224
MCI_SEQ_FORMAT_SONGPTR_S = 1225
MCI_SEQ_NONE_S = 1226
MIDIMAPPER_S = 1227
MCI_MAX_DEVICE_TYPE_LENGTH = 80
MCI_RESOURCE_RETURNED = 65536
MCI_COLONIZED3_RETURN = 131072
MCI_COLONIZED4_RETURN = 262144
MCI_INTEGER_RETURNED = 524288
MCI_RESOURCE_DRIVER = 1048576
MCI_COMMAND_HEAD = 0
MCI_STRING = 1
MCI_INTEGER = 2
MCI_END_COMMAND = 3
MCI_RETURN = 4
MCI_FLAG = 5
MCI_END_COMMAND_LIST = 6
MCI_RECT = 7
MCI_CONSTANT = 8
MCI_END_CONSTANT = 9
MCI_HWND = 10
MCI_HPAL = 11
MCI_HDC = 12
MCI_INTEGER64 = 13
TASKERR_NOTASKSUPPORT = 1
TASKERR_OUTOFMEMORY = 2
DRV_EXITSESSION = 11
DRV_POWER = 15
DRVCNF_CANCEL = 0
DRVCNF_OK = 1
DRVCNF_RESTART = 2
DRV_CANCEL = 0
DRV_OK = 1
DRV_RESTART = 2
DRV_MCI_LAST = 6143
MMIOERR_BASE = 256
MMIOERR_FILENOTFOUND = 257
MMIOERR_OUTOFMEMORY = 258
MMIOERR_CANNOTOPEN = 259
MMIOERR_CANNOTCLOSE = 260
MMIOERR_CANNOTREAD = 261
MMIOERR_CANNOTWRITE = 262
MMIOERR_CANNOTSEEK = 263
MMIOERR_CANNOTEXPAND = 264
MMIOERR_CHUNKNOTFOUND = 265
MMIOERR_UNBUFFERED = 266
MMIOERR_PATHNOTFOUND = 267
MMIOERR_ACCESSDENIED = 268
MMIOERR_SHARINGVIOLATION = 269
MMIOERR_NETWORKERROR = 270
MMIOERR_TOOMANYOPENFILES = 271
MMIOERR_INVALIDFILE = 272
MMIO_RWMODE = 3
MMIO_SHAREMODE = 112
MMIO_CREATE = 4096
MMIO_PARSE = 256
MMIO_DELETE = 512
MMIO_EXIST = 16384
MMIO_ALLOCBUF = 65536
MMIO_GETTEMP = 131072
MMIO_DIRTY = 268435456
MMIO_READ = 0
MMIO_WRITE = 1
MMIO_READWRITE = 2
MMIO_COMPAT = 0
MMIO_EXCLUSIVE = 16
MMIO_DENYWRITE = 32
MMIO_DENYREAD = 48
MMIO_DENYNONE = 64
MMIO_FHOPEN = 16
MMIO_EMPTYBUF = 16
MMIO_TOUPPER = 16
MMIO_INSTALLPROC = 65536
MMIO_GLOBALPROC = 268435456
MMIO_REMOVEPROC = 131072
MMIO_UNICODEPROC = 16777216
MMIO_FINDPROC = 262144
MMIO_FINDCHUNK = 16
MMIO_FINDRIFF = 32
MMIO_FINDLIST = 64
MMIO_CREATERIFF = 32
MMIO_CREATELIST = 64
MMIOM_READ = 0
MMIOM_WRITE = 1
MMIOM_SEEK = 2
MMIOM_OPEN = 3
MMIOM_CLOSE = 4
MMIOM_WRITEFLUSH = 5
MMIOM_RENAME = 6
MMIOM_USER = 32768
SEEK_SET = 0
SEEK_CUR = 1
SEEK_END = 2
MMIO_DEFAULTBUFFER = 8192
FACILITY_NS = 13
MCI_MCIAVI_PLAY_WINDOW = 16777216
MCI_MCIAVI_PLAY_FULLSCREEN = 33554432
MCI_MCIAVI_PLAY_FULLBY2 = 67108864
MCI_AVI_STATUS_FRAMES_SKIPPED = 32769
MCI_AVI_STATUS_LAST_PLAY_SPEED = 32770
MCI_AVI_STATUS_AUDIO_BREAKS = 32771
MCI_AVI_SETVIDEO_DRAW_PROCEDURE = 32768
MCI_AVI_SETVIDEO_PALETTE_COLOR = 33024
MCI_AVI_SETVIDEO_PALETTE_HALFTONE = 65535
MCIERR_AVI_OLDAVIFORMAT = 612
MCIERR_AVI_NOTINTERLEAVED = 613
MCIERR_AVI_NODISPDIB = 614
MCIERR_AVI_CANTPLAYFULLSCREEN = 615
MCIERR_AVI_TOOBIGFORVGA = 616
MCIERR_AVI_NOCOMPRESSOR = 617
MCIERR_AVI_DISPLAYERROR = 618
MCIERR_AVI_AUDIOERROR = 619
MCIERR_AVI_BADPALETTE = 620
DLG_ACMFORMATCHOOSE_ID = 70
IDD_ACMFORMATCHOOSE_BTN_HELP = 9
IDD_ACMFORMATCHOOSE_CMB_CUSTOM = 100
IDD_ACMFORMATCHOOSE_CMB_FORMATTAG = 101
IDD_ACMFORMATCHOOSE_CMB_FORMAT = 102
IDD_ACMFORMATCHOOSE_BTN_SETNAME = 103
IDD_ACMFORMATCHOOSE_BTN_DELNAME = 104
DLG_ACMFILTERCHOOSE_ID = 71
IDD_ACMFILTERCHOOSE_BTN_HELP = 9
IDD_ACMFILTERCHOOSE_CMB_CUSTOM = 100
IDD_ACMFILTERCHOOSE_CMB_FILTERTAG = 101
IDD_ACMFILTERCHOOSE_CMB_FILTER = 102
IDD_ACMFILTERCHOOSE_BTN_SETNAME = 103
IDD_ACMFILTERCHOOSE_BTN_DELNAME = 104
FACILITY_NS_WIN32 = 7
NS_S_CALLPENDING = 851968
NS_S_CALLABORTED = 851969
NS_S_STREAM_TRUNCATED = 851970
NS_W_SERVER_BANDWIDTH_LIMIT = -2146631677
NS_W_FILE_BANDWIDTH_LIMIT = -2146631676
NS_E_NOCONNECTION = -1072889851
NS_E_CANNOTCONNECT = -1072889850
NS_E_CANNOTDESTROYTITLE = -1072889849
NS_E_CANNOTRENAMETITLE = -1072889848
NS_E_CANNOTOFFLINEDISK = -1072889847
NS_E_CANNOTONLINEDISK = -1072889846
NS_E_NOREGISTEREDWALKER = -1072889845
NS_E_NOFUNNEL = -1072889844
NS_E_NO_LOCALPLAY = -1072889843
NS_E_NETWORK_BUSY = -1072889842
NS_E_TOO_MANY_SESS = -1072889841
NS_E_ALREADY_CONNECTED = -1072889840
NS_E_INVALID_INDEX = -1072889839
NS_E_PROTOCOL_MISMATCH = -1072889838
NS_E_TIMEOUT = -1072889837
NS_E_NET_WRITE = -1072889836
NS_E_NET_READ = -1072889835
NS_E_DISK_WRITE = -1072889834
NS_E_DISK_READ = -1072889833
NS_E_FILE_WRITE = -1072889832
NS_E_FILE_READ = -1072889831
NS_E_FILE_NOT_FOUND = -1072889830
NS_E_FILE_EXISTS = -1072889829
NS_E_INVALID_NAME = -1072889828
NS_E_FILE_OPEN_FAILED = -1072889827
NS_E_FILE_ALLOCATION_FAILED = -1072889826
NS_E_FILE_INIT_FAILED = -1072889825
NS_E_FILE_PLAY_FAILED = -1072889824
NS_E_SET_DISK_UID_FAILED = -1072889823
NS_E_INDUCED = -1072889822
NS_E_CCLINK_DOWN = -1072889821
NS_E_INTERNAL = -1072889820
NS_E_BUSY = -1072889819
NS_E_UNRECOGNIZED_STREAM_TYPE = -1072889818
NS_E_NETWORK_SERVICE_FAILURE = -1072889817
NS_E_NETWORK_RESOURCE_FAILURE = -1072889816
NS_E_CONNECTION_FAILURE = -1072889815
NS_E_SHUTDOWN = -1072889814
NS_E_INVALID_REQUEST = -1072889813
NS_E_INSUFFICIENT_BANDWIDTH = -1072889812
NS_E_NOT_REBUILDING = -1072889811
NS_E_LATE_OPERATION = -1072889810
NS_E_INVALID_DATA = -1072889809
NS_E_FILE_BANDWIDTH_LIMIT = -1072889808
NS_E_OPEN_FILE_LIMIT = -1072889807
NS_E_BAD_CONTROL_DATA = -1072889806
NS_E_NO_STREAM = -1072889805
NS_E_STREAM_END = -1072889804
NS_E_SERVER_NOT_FOUND = -1072889803
NS_E_DUPLICATE_NAME = -1072889802
NS_E_DUPLICATE_ADDRESS = -1072889801
NS_E_BAD_MULTICAST_ADDRESS = -1072889800
NS_E_BAD_ADAPTER_ADDRESS = -1072889799
NS_E_BAD_DELIVERY_MODE = -1072889798
NS_E_INVALID_CHANNEL = -1072889797
NS_E_INVALID_STREAM = -1072889796
NS_E_INVALID_ARCHIVE = -1072889795
NS_E_NOTITLES = -1072889794
NS_E_INVALID_CLIENT = -1072889793
NS_E_INVALID_BLACKHOLE_ADDRESS = -1072889792
NS_E_INCOMPATIBLE_FORMAT = -1072889791
NS_E_INVALID_KEY = -1072889790
NS_E_INVALID_PORT = -1072889789
NS_E_INVALID_TTL = -1072889788
NS_E_STRIDE_REFUSED = -1072889787
NS_E_MMSAUTOSERVER_CANTFINDWALKER = -1072889786
NS_E_MAX_BITRATE = -1072889785
NS_E_LOGFILEPERIOD = -1072889784
NS_E_MAX_CLIENTS = -1072889783
NS_E_LOG_FILE_SIZE = -1072889782
NS_E_MAX_FILERATE = -1072889781
NS_E_WALKER_UNKNOWN = -1072889780
NS_E_WALKER_SERVER = -1072889779
NS_E_WALKER_USAGE = -1072889778
NS_I_TIGER_START = 1074593871
NS_E_TIGER_FAIL = -1072889776
NS_I_CUB_START = 1074593873
NS_I_CUB_RUNNING = 1074593874
NS_E_CUB_FAIL = -1072889773
NS_I_DISK_START = 1074593876
NS_E_DISK_FAIL = -1072889771
NS_I_DISK_REBUILD_STARTED = 1074593878
NS_I_DISK_REBUILD_FINISHED = 1074593879
NS_I_DISK_REBUILD_ABORTED = 1074593880
NS_I_LIMIT_FUNNELS = 1074593881
NS_I_START_DISK = 1074593882
NS_I_STOP_DISK = 1074593883
NS_I_STOP_CUB = 1074593884
NS_I_KILL_USERSESSION = 1074593885
NS_I_KILL_CONNECTION = 1074593886
NS_I_REBUILD_DISK = 1074593887
NS_W_UNKNOWN_EVENT = -2146631584
NS_E_MAX_FUNNELS_ALERT = -1072889760
NS_E_ALLOCATE_FILE_FAIL = -1072889759
NS_E_PAGING_ERROR = -1072889758
NS_E_BAD_BLOCK0_VERSION = -1072889757
NS_E_BAD_DISK_UID = -1072889756
NS_E_BAD_FSMAJOR_VERSION = -1072889755
NS_E_BAD_STAMPNUMBER = -1072889754
NS_E_PARTIALLY_REBUILT_DISK = -1072889753
NS_E_ENACTPLAN_GIVEUP = -1072889752
MCMADM_I_NO_EVENTS = 1074593897
MCMADM_E_REGKEY_NOT_FOUND = -1072889750
NS_E_NO_FORMATS = -1072889749
NS_E_NO_REFERENCES = -1072889748
NS_E_WAVE_OPEN = -1072889747
NS_I_LOGGING_FAILED = 1074593902
NS_E_CANNOTCONNECTEVENTS = -1072889745
NS_I_LIMIT_BANDWIDTH = 1074593904
NS_E_NO_DEVICE = -1072889743
NS_E_NO_SPECIFIED_DEVICE = -1072889742
NS_E_NOTHING_TO_DO = -1072887823
NS_E_NO_MULTICAST = -1072887822
NS_E_MONITOR_GIVEUP = -1072889656
NS_E_REMIRRORED_DISK = -1072889655
NS_E_INSUFFICIENT_DATA = -1072889654
NS_E_ASSERT = -1072889653
NS_E_BAD_ADAPTER_NAME = -1072889652
NS_E_NOT_LICENSED = -1072889651
NS_E_NO_SERVER_CONTACT = -1072889650
NS_E_TOO_MANY_TITLES = -1072889649
NS_E_TITLE_SIZE_EXCEEDED = -1072889648
NS_E_UDP_DISABLED = -1072889647
NS_E_TCP_DISABLED = -1072889646
NS_E_HTTP_DISABLED = -1072889645
NS_E_LICENSE_EXPIRED = -1072889644
NS_E_TITLE_BITRATE = -1072889643
NS_E_EMPTY_PROGRAM_NAME = -1072889642
NS_E_MISSING_CHANNEL = -1072889641
NS_E_NO_CHANNELS = -1072889640
NS_E_INVALID_INDEX2 = -1072889639
NS_E_CUB_FAIL_LINK = -1072889456
NS_I_CUB_UNFAIL_LINK = 1074594193
NS_E_BAD_CUB_UID = -1072889454
NS_I_RESTRIPE_START = 1074594195
NS_I_RESTRIPE_DONE = 1074594196
NS_E_GLITCH_MODE = -1072889451
NS_I_RESTRIPE_DISK_OUT = 1074594198
NS_I_RESTRIPE_CUB_OUT = 1074594199
NS_I_DISK_STOP = 1074594200
NS_I_CATATONIC_FAILURE = -2146631271
NS_I_CATATONIC_AUTO_UNFAIL = -2146631270
NS_E_NO_MEDIA_PROTOCOL = -1072889445
NS_E_INVALID_INPUT_FORMAT = -1072886856
NS_E_MSAUDIO_NOT_INSTALLED = -1072886855
NS_E_UNEXPECTED_MSAUDIO_ERROR = -1072886854
NS_E_INVALID_OUTPUT_FORMAT = -1072886853
NS_E_NOT_CONFIGURED = -1072886852
NS_E_PROTECTED_CONTENT = -1072886851
NS_E_LICENSE_REQUIRED = -1072886850
NS_E_TAMPERED_CONTENT = -1072886849
NS_E_LICENSE_OUTOFDATE = -1072886848
NS_E_LICENSE_INCORRECT_RIGHTS = -1072886847
NS_E_AUDIO_CODEC_NOT_INSTALLED = -1072886846
NS_E_AUDIO_CODEC_ERROR = -1072886845
NS_E_VIDEO_CODEC_NOT_INSTALLED = -1072886844
NS_E_VIDEO_CODEC_ERROR = -1072886843
NS_E_INVALIDPROFILE = -1072886842
NS_E_INCOMPATIBLE_VERSION = -1072886841
NS_S_REBUFFERING = 854984
NS_S_DEGRADING_QUALITY = 854985
NS_E_OFFLINE_MODE = -1072886838
NS_E_NOT_CONNECTED = -1072886837
NS_E_TOO_MUCH_DATA = -1072886836
NS_E_UNSUPPORTED_PROPERTY = -1072886835
NS_E_8BIT_WAVE_UNSUPPORTED = -1072886834
NS_E_NO_MORE_SAMPLES = -1072886833
NS_E_INVALID_SAMPLING_RATE = -1072886832
NS_E_MAX_PACKET_SIZE_TOO_SMALL = -1072886831
NS_E_LATE_PACKET = -1072886830
NS_E_DUPLICATE_PACKET = -1072886829
NS_E_SDK_BUFFERTOOSMALL = -1072886828
NS_E_INVALID_NUM_PASSES = -1072886827
NS_E_ATTRIBUTE_READ_ONLY = -1072886826
NS_E_ATTRIBUTE_NOT_ALLOWED = -1072886825
NS_E_INVALID_EDL = -1072886824
NS_E_DATA_UNIT_EXTENSION_TOO_LARGE = -1072886823
NS_E_CODEC_DMO_ERROR = -1072886822
NS_S_TRANSCRYPTOR_EOF = 855003
NS_E_FEATURE_DISABLED_BY_GROUP_POLICY = -1072886820
NS_E_FEATURE_DISABLED_IN_SKU = -1072886819
NS_E_WMDRM_DEPRECATED = -1072886818
NS_E_NO_CD = -1072885856
NS_E_CANT_READ_DIGITAL = -1072885855
NS_E_DEVICE_DISCONNECTED = -1072885854
NS_E_DEVICE_NOT_SUPPORT_FORMAT = -1072885853
NS_E_SLOW_READ_DIGITAL = -1072885852
NS_E_MIXER_INVALID_LINE = -1072885851
NS_E_MIXER_INVALID_CONTROL = -1072885850
NS_E_MIXER_INVALID_VALUE = -1072885849
NS_E_MIXER_UNKNOWN_MMRESULT = -1072885848
NS_E_USER_STOP = -1072885847
NS_E_MP3_FORMAT_NOT_FOUND = -1072885846
NS_E_CD_READ_ERROR_NO_CORRECTION = -1072885845
NS_E_CD_READ_ERROR = -1072885844
NS_E_CD_SLOW_COPY = -1072885843
NS_E_CD_COPYTO_CD = -1072885842
NS_E_MIXER_NODRIVER = -1072885841
NS_E_REDBOOK_ENABLED_WHILE_COPYING = -1072885840
NS_E_CD_REFRESH = -1072885839
NS_E_CD_DRIVER_PROBLEM = -1072885838
NS_E_WONT_DO_DIGITAL = -1072885837
NS_E_WMPXML_NOERROR = -1072885836
NS_E_WMPXML_ENDOFDATA = -1072885835
NS_E_WMPXML_PARSEERROR = -1072885834
NS_E_WMPXML_ATTRIBUTENOTFOUND = -1072885833
NS_E_WMPXML_PINOTFOUND = -1072885832
NS_E_WMPXML_EMPTYDOC = -1072885831
NS_E_WMP_PATH_ALREADY_IN_LIBRARY = -1072885830
NS_E_WMP_FILESCANALREADYSTARTED = -1072885826
NS_E_WMP_HME_INVALIDOBJECTID = -1072885825
NS_E_WMP_MF_CODE_EXPIRED = -1072885824
NS_E_WMP_HME_NOTSEARCHABLEFORITEMS = -1072885823
NS_E_WMP_HME_STALEREQUEST = -1072885822
NS_E_WMP_ADDTOLIBRARY_FAILED = -1072885817
NS_E_WMP_WINDOWSAPIFAILURE = -1072885816
NS_E_WMP_RECORDING_NOT_ALLOWED = -1072885815
NS_E_DEVICE_NOT_READY = -1072885814
NS_E_DAMAGED_FILE = -1072885813
NS_E_MPDB_GENERIC = -1072885812
NS_E_FILE_FAILED_CHECKS = -1072885811
NS_E_MEDIA_LIBRARY_FAILED = -1072885810
NS_E_SHARING_VIOLATION = -1072885809
NS_E_NO_ERROR_STRING_FOUND = -1072885808
NS_E_WMPOCX_NO_REMOTE_CORE = -1072885807
NS_E_WMPOCX_NO_ACTIVE_CORE = -1072885806
NS_E_WMPOCX_NOT_RUNNING_REMOTELY = -1072885805
NS_E_WMPOCX_NO_REMOTE_WINDOW = -1072885804
NS_E_WMPOCX_ERRORMANAGERNOTAVAILABLE = -1072885803
NS_E_PLUGIN_NOTSHUTDOWN = -1072885802
NS_E_WMP_CANNOT_FIND_FOLDER = -1072885801
NS_E_WMP_STREAMING_RECORDING_NOT_ALLOWED = -1072885800
NS_E_WMP_PLUGINDLL_NOTFOUND = -1072885799
NS_E_NEED_TO_ASK_USER = -1072885798
NS_E_WMPOCX_PLAYER_NOT_DOCKED = -1072885797
NS_E_WMP_EXTERNAL_NOTREADY = -1072885796
NS_E_WMP_MLS_STALE_DATA = -1072885795
NS_E_WMP_UI_SUBCONTROLSNOTSUPPORTED = -1072885794
NS_E_WMP_UI_VERSIONMISMATCH = -1072885793
NS_E_WMP_UI_NOTATHEMEFILE = -1072885792
NS_E_WMP_UI_SUBELEMENTNOTFOUND = -1072885791
NS_E_WMP_UI_VERSIONPARSE = -1072885790
NS_E_WMP_UI_VIEWIDNOTFOUND = -1072885789
NS_E_WMP_UI_PASSTHROUGH = -1072885788
NS_E_WMP_UI_OBJECTNOTFOUND = -1072885787
NS_E_WMP_UI_SECONDHANDLER = -1072885786
NS_E_WMP_UI_NOSKININZIP = -1072885785
NS_S_WMP_UI_VERSIONMISMATCH = 856040
NS_S_WMP_EXCEPTION = 856041
NS_E_WMP_URLDOWNLOADFAILED = -1072885782
NS_E_WMPOCX_UNABLE_TO_LOAD_SKIN = -1072885781
NS_E_WMP_INVALID_SKIN = -1072885780
NS_E_WMP_SENDMAILFAILED = -1072885779
NS_E_WMP_LOCKEDINSKINMODE = -1072885778
NS_E_WMP_FAILED_TO_SAVE_FILE = -1072885777
NS_E_WMP_SAVEAS_READONLY = -1072885776
NS_E_WMP_FAILED_TO_SAVE_PLAYLIST = -1072885775
NS_E_WMP_FAILED_TO_OPEN_WMD = -1072885774
NS_E_WMP_CANT_PLAY_PROTECTED = -1072885773
NS_E_SHARING_STATE_OUT_OF_SYNC = -1072885772
NS_E_WMPOCX_REMOTE_PLAYER_ALREADY_RUNNING = -1072885766
NS_E_WMP_RBC_JPGMAPPINGIMAGE = -1072885756
NS_E_WMP_JPGTRANSPARENCY = -1072885755
NS_E_WMP_INVALID_MAX_VAL = -1072885751
NS_E_WMP_INVALID_MIN_VAL = -1072885750
NS_E_WMP_CS_JPGPOSITIONIMAGE = -1072885746
NS_E_WMP_CS_NOTEVENLYDIVISIBLE = -1072885745
NS_E_WMPZIP_NOTAZIPFILE = -1072885736
NS_E_WMPZIP_CORRUPT = -1072885735
NS_E_WMPZIP_FILENOTFOUND = -1072885734
NS_E_WMP_IMAGE_FILETYPE_UNSUPPORTED = -1072885726
NS_E_WMP_IMAGE_INVALID_FORMAT = -1072885725
NS_E_WMP_GIF_UNEXPECTED_ENDOFFILE = -1072885724
NS_E_WMP_GIF_INVALID_FORMAT = -1072885723
NS_E_WMP_GIF_BAD_VERSION_NUMBER = -1072885722
NS_E_WMP_GIF_NO_IMAGE_IN_FILE = -1072885721
NS_E_WMP_PNG_INVALIDFORMAT = -1072885720
NS_E_WMP_PNG_UNSUPPORTED_BITDEPTH = -1072885719
NS_E_WMP_PNG_UNSUPPORTED_COMPRESSION = -1072885718
NS_E_WMP_PNG_UNSUPPORTED_FILTER = -1072885717
NS_E_WMP_PNG_UNSUPPORTED_INTERLACE = -1072885716
NS_E_WMP_PNG_UNSUPPORTED_BAD_CRC = -1072885715
NS_E_WMP_BMP_INVALID_BITMASK = -1072885714
NS_E_WMP_BMP_TOPDOWN_DIB_UNSUPPORTED = -1072885713
NS_E_WMP_BMP_BITMAP_NOT_CREATED = -1072885712
NS_E_WMP_BMP_COMPRESSION_UNSUPPORTED = -1072885711
NS_E_WMP_BMP_INVALID_FORMAT = -1072885710
NS_E_WMP_JPG_JERR_ARITHCODING_NOTIMPL = -1072885709
NS_E_WMP_JPG_INVALID_FORMAT = -1072885708
NS_E_WMP_JPG_BAD_DCTSIZE = -1072885707
NS_E_WMP_JPG_BAD_VERSION_NUMBER = -1072885706
NS_E_WMP_JPG_BAD_PRECISION = -1072885705
NS_E_WMP_JPG_CCIR601_NOTIMPL = -1072885704
NS_E_WMP_JPG_NO_IMAGE_IN_FILE = -1072885703
NS_E_WMP_JPG_READ_ERROR = -1072885702
NS_E_WMP_JPG_FRACT_SAMPLE_NOTIMPL = -1072885701
NS_E_WMP_JPG_IMAGE_TOO_BIG = -1072885700
NS_E_WMP_JPG_UNEXPECTED_ENDOFFILE = -1072885699
NS_E_WMP_JPG_SOF_UNSUPPORTED = -1072885698
NS_E_WMP_JPG_UNKNOWN_MARKER = -1072885697
NS_S_WMP_LOADED_GIF_IMAGE = 856128
NS_S_WMP_LOADED_PNG_IMAGE = 856129
NS_S_WMP_LOADED_BMP_IMAGE = 856130
NS_S_WMP_LOADED_JPG_IMAGE = 856131
NS_E_WMP_FAILED_TO_OPEN_IMAGE = -1072885692
NS_E_WMP_DAI_SONGTOOSHORT = -1072885687
NS_E_WMG_RATEUNAVAILABLE = -1072885686
NS_E_WMG_PLUGINUNAVAILABLE = -1072885685
NS_E_WMG_CANNOTQUEUE = -1072885684
NS_E_WMG_PREROLLLICENSEACQUISITIONNOTALLOWED = -1072885683
NS_E_WMG_UNEXPECTEDPREROLLSTATUS = -1072885682
NS_S_WMG_FORCE_DROP_FRAME = 856143
NS_E_WMG_INVALID_COPP_CERTIFICATE = -1072885679
NS_E_WMG_COPP_SECURITY_INVALID = -1072885678
NS_E_WMG_COPP_UNSUPPORTED = -1072885677
NS_E_WMG_INVALIDSTATE = -1072885676
NS_E_WMG_SINKALREADYEXISTS = -1072885675
NS_E_WMG_NOSDKINTERFACE = -1072885674
NS_E_WMG_NOTALLOUTPUTSRENDERED = -1072885673
NS_E_WMG_FILETRANSFERNOTALLOWED = -1072885672
NS_E_WMR_UNSUPPORTEDSTREAM = -1072885671
NS_E_WMR_PINNOTFOUND = -1072885670
NS_E_WMR_WAITINGONFORMATSWITCH = -1072885669
NS_E_WMR_NOSOURCEFILTER = -1072885668
NS_E_WMR_PINTYPENOMATCH = -1072885667
NS_E_WMR_NOCALLBACKAVAILABLE = -1072885666
NS_S_WMR_ALREADYRENDERED = 856159
NS_S_WMR_PINTYPEPARTIALMATCH = 856160
NS_S_WMR_PINTYPEFULLMATCH = 856161
NS_E_WMR_SAMPLEPROPERTYNOTSET = -1072885662
NS_E_WMR_CANNOT_RENDER_BINARY_STREAM = -1072885661
NS_E_WMG_LICENSE_TAMPERED = -1072885660
NS_E_WMR_WILLNOT_RENDER_BINARY_STREAM = -1072885659
NS_S_WMG_ADVISE_DROP_FRAME = 856166
NS_S_WMG_ADVISE_DROP_TO_KEYFRAME = 856167
NS_E_WMX_UNRECOGNIZED_PLAYLIST_FORMAT = -1072885656
NS_E_ASX_INVALIDFORMAT = -1072885655
NS_E_ASX_INVALIDVERSION = -1072885654
NS_E_ASX_INVALID_REPEAT_BLOCK = -1072885653
NS_E_ASX_NOTHING_TO_WRITE = -1072885652
NS_E_URLLIST_INVALIDFORMAT = -1072885651
NS_E_WMX_ATTRIBUTE_DOES_NOT_EXIST = -1072885650
NS_E_WMX_ATTRIBUTE_ALREADY_EXISTS = -1072885649
NS_E_WMX_ATTRIBUTE_UNRETRIEVABLE = -1072885648
NS_E_WMX_ITEM_DOES_NOT_EXIST = -1072885647
NS_E_WMX_ITEM_TYPE_ILLEGAL = -1072885646
NS_E_WMX_ITEM_UNSETTABLE = -1072885645
NS_E_WMX_PLAYLIST_EMPTY = -1072885644
NS_E_MLS_SMARTPLAYLIST_FILTER_NOT_REGISTERED = -1072885643
NS_E_WMX_INVALID_FORMAT_OVER_NESTING = -1072885642
NS_E_WMPCORE_NOSOURCEURLSTRING = -1072885636
NS_E_WMPCORE_COCREATEFAILEDFORGITOBJECT = -1072885635
NS_E_WMPCORE_FAILEDTOGETMARSHALLEDEVENTHANDLERINTERFACE = -1072885634
NS_E_WMPCORE_BUFFERTOOSMALL = -1072885633
NS_E_WMPCORE_UNAVAILABLE = -1072885632
NS_E_WMPCORE_INVALIDPLAYLISTMODE = -1072885631
NS_E_WMPCORE_ITEMNOTINPLAYLIST = -1072885626
NS_E_WMPCORE_PLAYLISTEMPTY = -1072885625
NS_E_WMPCORE_NOBROWSER = -1072885624
NS_E_WMPCORE_UNRECOGNIZED_MEDIA_URL = -1072885623
NS_E_WMPCORE_GRAPH_NOT_IN_LIST = -1072885622
NS_E_WMPCORE_PLAYLIST_EMPTY_OR_SINGLE_MEDIA = -1072885621
NS_E_WMPCORE_ERRORSINKNOTREGISTERED = -1072885620
NS_E_WMPCORE_ERRORMANAGERNOTAVAILABLE = -1072885619
NS_E_WMPCORE_WEBHELPFAILED = -1072885618
NS_E_WMPCORE_MEDIA_ERROR_RESUME_FAILED = -1072885617
NS_E_WMPCORE_NO_REF_IN_ENTRY = -1072885616
NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_NAME_EMPTY = -1072885615
NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_NAME_ILLEGAL = -1072885614
NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_VALUE_EMPTY = -1072885613
NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_VALUE_ILLEGAL = -1072885612
NS_E_WMPCORE_WMX_LIST_ITEM_ATTRIBUTE_NAME_EMPTY = -1072885611
NS_E_WMPCORE_WMX_LIST_ITEM_ATTRIBUTE_NAME_ILLEGAL = -1072885610
NS_E_WMPCORE_WMX_LIST_ITEM_ATTRIBUTE_VALUE_EMPTY = -1072885609
NS_E_WMPCORE_LIST_ENTRY_NO_REF = -1072885608
NS_E_WMPCORE_MISNAMED_FILE = -1072885607
NS_E_WMPCORE_CODEC_NOT_TRUSTED = -1072885606
NS_E_WMPCORE_CODEC_NOT_FOUND = -1072885605
NS_E_WMPCORE_CODEC_DOWNLOAD_NOT_ALLOWED = -1072885604
NS_E_WMPCORE_ERROR_DOWNLOADING_PLAYLIST = -1072885603
NS_E_WMPCORE_FAILED_TO_BUILD_PLAYLIST = -1072885602
NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_NONE = -1072885601
NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_EXHAUSTED = -1072885600
NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_NAME_NOT_FOUND = -1072885599
NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_MORPH_FAILED = -1072885598
NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_INIT_FAILED = -1072885597
NS_E_WMPCORE_MEDIA_ALTERNATE_REF_EMPTY = -1072885596
NS_E_WMPCORE_PLAYLIST_NO_EVENT_NAME = -1072885595
NS_E_WMPCORE_PLAYLIST_EVENT_ATTRIBUTE_ABSENT = -1072885594
NS_E_WMPCORE_PLAYLIST_EVENT_EMPTY = -1072885593
NS_E_WMPCORE_PLAYLIST_STACK_EMPTY = -1072885592
NS_E_WMPCORE_CURRENT_MEDIA_NOT_ACTIVE = -1072885591
NS_E_WMPCORE_USER_CANCEL = -1072885589
NS_E_WMPCORE_PLAYLIST_REPEAT_EMPTY = -1072885588
NS_E_WMPCORE_PLAYLIST_REPEAT_START_MEDIA_NONE = -1072885587
NS_E_WMPCORE_PLAYLIST_REPEAT_END_MEDIA_NONE = -1072885586
NS_E_WMPCORE_INVALID_PLAYLIST_URL = -1072885585
NS_E_WMPCORE_MISMATCHED_RUNTIME = -1072885584
NS_E_WMPCORE_PLAYLIST_IMPORT_FAILED_NO_ITEMS = -1072885583
NS_E_WMPCORE_VIDEO_TRANSFORM_FILTER_INSERTION = -1072885582
NS_E_WMPCORE_MEDIA_UNAVAILABLE = -1072885581
NS_E_WMPCORE_WMX_ENTRYREF_NO_REF = -1072885580
NS_E_WMPCORE_NO_PLAYABLE_MEDIA_IN_PLAYLIST = -1072885579
NS_E_WMPCORE_PLAYLIST_EMPTY_NESTED_PLAYLIST_SKIPPED_ITEMS = -1072885578
NS_E_WMPCORE_BUSY = -1072885577
NS_E_WMPCORE_MEDIA_CHILD_PLAYLIST_UNAVAILABLE = -1072885576
NS_E_WMPCORE_MEDIA_NO_CHILD_PLAYLIST = -1072885575
NS_E_WMPCORE_FILE_NOT_FOUND = -1072885574
NS_E_WMPCORE_TEMP_FILE_NOT_FOUND = -1072885573
NS_E_WMDM_REVOKED = -1072885572
NS_E_DDRAW_GENERIC = -1072885571
NS_E_DISPLAY_MODE_CHANGE_FAILED = -1072885570
NS_E_PLAYLIST_CONTAINS_ERRORS = -1072885569
NS_E_CHANGING_PROXY_NAME = -1072885568
NS_E_CHANGING_PROXY_PORT = -1072885567
NS_E_CHANGING_PROXY_EXCEPTIONLIST = -1072885566
NS_E_CHANGING_PROXYBYPASS = -1072885565
NS_E_CHANGING_PROXY_PROTOCOL_NOT_FOUND = -1072885564
NS_E_GRAPH_NOAUDIOLANGUAGE = -1072885563
NS_E_GRAPH_NOAUDIOLANGUAGESELECTED = -1072885562
NS_E_CORECD_NOTAMEDIACD = -1072885561
NS_E_WMPCORE_MEDIA_URL_TOO_LONG = -1072885560
NS_E_WMPFLASH_CANT_FIND_COM_SERVER = -1072885559
NS_E_WMPFLASH_INCOMPATIBLEVERSION = -1072885558
NS_E_WMPOCXGRAPH_IE_DISALLOWS_ACTIVEX_CONTROLS = -1072885557
NS_E_NEED_CORE_REFERENCE = -1072885556
NS_E_MEDIACD_READ_ERROR = -1072885555
NS_E_IE_DISALLOWS_ACTIVEX_CONTROLS = -1072885554
NS_E_FLASH_PLAYBACK_NOT_ALLOWED = -1072885553
NS_E_UNABLE_TO_CREATE_RIP_LOCATION = -1072885552
NS_E_WMPCORE_SOME_CODECS_MISSING = -1072885551
NS_E_WMP_RIP_FAILED = -1072885550
NS_E_WMP_FAILED_TO_RIP_TRACK = -1072885549
NS_E_WMP_ERASE_FAILED = -1072885548
NS_E_WMP_FORMAT_FAILED = -1072885547
NS_E_WMP_CANNOT_BURN_NON_LOCAL_FILE = -1072885546
NS_E_WMP_FILE_TYPE_CANNOT_BURN_TO_AUDIO_CD = -1072885545
NS_E_WMP_FILE_DOES_NOT_FIT_ON_CD = -1072885544
NS_E_WMP_FILE_NO_DURATION = -1072885543
NS_E_PDA_FAILED_TO_BURN = -1072885542
NS_S_NEED_TO_BUY_BURN_RIGHTS = 856283
NS_E_FAILED_DOWNLOAD_ABORT_BURN = -1072885540
NS_E_WMPCORE_DEVICE_DRIVERS_MISSING = -1072885539
NS_S_WMPCORE_PLAYLISTCLEARABORT = 856318
NS_S_WMPCORE_PLAYLISTREMOVEITEMABORT = 856319
NS_S_WMPCORE_PLAYLIST_CREATION_PENDING = 856322
NS_S_WMPCORE_MEDIA_VALIDATION_PENDING = 856323
NS_S_WMPCORE_PLAYLIST_REPEAT_SECONDARY_SEGMENTS_IGNORED = 856324
NS_S_WMPCORE_COMMAND_NOT_AVAILABLE = 856325
NS_S_WMPCORE_PLAYLIST_NAME_AUTO_GENERATED = 856326
NS_S_WMPCORE_PLAYLIST_IMPORT_MISSING_ITEMS = 856327
NS_S_WMPCORE_PLAYLIST_COLLAPSED_TO_SINGLE_MEDIA = 856328
NS_S_WMPCORE_MEDIA_CHILD_PLAYLIST_OPEN_PENDING = 856329
NS_S_WMPCORE_MORE_NODES_AVAIABLE = 856330
NS_E_WMPIM_USEROFFLINE = -1072885466
NS_E_WMPIM_USERCANCELED = -1072885465
NS_E_WMPIM_DIALUPFAILED = -1072885464
NS_E_WINSOCK_ERROR_STRING = -1072885463
NS_E_WMPBR_NOLISTENER = -1072885456
NS_E_WMPBR_BACKUPCANCEL = -1072885455
NS_E_WMPBR_RESTORECANCEL = -1072885454
NS_E_WMPBR_ERRORWITHURL = -1072885453
NS_E_WMPBR_NAMECOLLISION = -1072885452
NS_S_WMPBR_SUCCESS = 856373
NS_S_WMPBR_PARTIALSUCCESS = 856374
NS_E_WMPBR_DRIVE_INVALID = -1072885449
NS_E_WMPBR_BACKUPRESTOREFAILED = -1072885448
NS_S_WMPEFFECT_TRANSPARENT = 856388
NS_S_WMPEFFECT_OPAQUE = 856389
NS_S_OPERATION_PENDING = 856398
NS_E_WMP_CONVERT_FILE_FAILED = -1072885416
NS_E_WMP_CONVERT_NO_RIGHTS_ERRORURL = -1072885415
NS_E_WMP_CONVERT_NO_RIGHTS_NOERRORURL = -1072885414
NS_E_WMP_CONVERT_FILE_CORRUPT = -1072885413
NS_E_WMP_CONVERT_PLUGIN_UNAVAILABLE_ERRORURL = -1072885412
NS_E_WMP_CONVERT_PLUGIN_UNAVAILABLE_NOERRORURL = -1072885411
NS_E_WMP_CONVERT_PLUGIN_UNKNOWN_FILE_OWNER = -1072885410
NS_E_DVD_DISC_COPY_PROTECT_OUTPUT_NS = -1072885408
NS_E_DVD_DISC_COPY_PROTECT_OUTPUT_FAILED = -1072885407
NS_E_DVD_NO_SUBPICTURE_STREAM = -1072885406
NS_E_DVD_COPY_PROTECT = -1072885405
NS_E_DVD_AUTHORING_PROBLEM = -1072885404
NS_E_DVD_INVALID_DISC_REGION = -1072885403
NS_E_DVD_COMPATIBLE_VIDEO_CARD = -1072885402
NS_E_DVD_MACROVISION = -1072885401
NS_E_DVD_SYSTEM_DECODER_REGION = -1072885400
NS_E_DVD_DISC_DECODER_REGION = -1072885399
NS_E_DVD_NO_VIDEO_STREAM = -1072885398
NS_E_DVD_NO_AUDIO_STREAM = -1072885397
NS_E_DVD_GRAPH_BUILDING = -1072885396
NS_E_DVD_NO_DECODER = -1072885395
NS_E_DVD_PARENTAL = -1072885394
NS_E_DVD_CANNOT_JUMP = -1072885393
NS_E_DVD_DEVICE_CONTENTION = -1072885392
NS_E_DVD_NO_VIDEO_MEMORY = -1072885391
NS_E_DVD_CANNOT_COPY_PROTECTED = -1072885390
NS_E_DVD_REQUIRED_PROPERTY_NOT_SET = -1072885389
NS_E_DVD_INVALID_TITLE_CHAPTER = -1072885388
NS_E_NO_CD_BURNER = -1072885386
NS_E_DEVICE_IS_NOT_READY = -1072885385
NS_E_PDA_UNSUPPORTED_FORMAT = -1072885384
NS_E_NO_PDA = -1072885383
NS_E_PDA_UNSPECIFIED_ERROR = -1072885382
NS_E_MEMSTORAGE_BAD_DATA = -1072885381
NS_E_PDA_FAIL_SELECT_DEVICE = -1072885380
NS_E_PDA_FAIL_READ_WAVE_FILE = -1072885379
NS_E_IMAPI_LOSSOFSTREAMING = -1072885378
NS_E_PDA_DEVICE_FULL = -1072885377
NS_E_FAIL_LAUNCH_ROXIO_PLUGIN = -1072885376
NS_E_PDA_DEVICE_FULL_IN_SESSION = -1072885375
NS_E_IMAPI_MEDIUM_INVALIDTYPE = -1072885374
NS_E_PDA_MANUALDEVICE = -1072885373
NS_E_PDA_PARTNERSHIPNOTEXIST = -1072885372
NS_E_PDA_CANNOT_CREATE_ADDITIONAL_SYNC_RELATIONSHIP = -1072885371
NS_E_PDA_NO_TRANSCODE_OF_DRM = -1072885370
NS_E_PDA_TRANSCODECACHEFULL = -1072885369
NS_E_PDA_TOO_MANY_FILE_COLLISIONS = -1072885368
NS_E_PDA_CANNOT_TRANSCODE = -1072885367
NS_E_PDA_TOO_MANY_FILES_IN_DIRECTORY = -1072885366
NS_E_PROCESSINGSHOWSYNCWIZARD = -1072885365
NS_E_PDA_TRANSCODE_NOT_PERMITTED = -1072885364
NS_E_PDA_INITIALIZINGDEVICES = -1072885363
NS_E_PDA_OBSOLETE_SP = -1072885362
NS_E_PDA_TITLE_COLLISION = -1072885361
NS_E_PDA_DEVICESUPPORTDISABLED = -1072885360
NS_E_PDA_NO_LONGER_AVAILABLE = -1072885359
NS_E_PDA_ENCODER_NOT_RESPONDING = -1072885358
NS_E_PDA_CANNOT_SYNC_FROM_LOCATION = -1072885357
NS_E_WMP_PROTOCOL_PROBLEM = -1072885356
NS_E_WMP_NO_DISK_SPACE = -1072885355
NS_E_WMP_LOGON_FAILURE = -1072885354
NS_E_WMP_CANNOT_FIND_FILE = -1072885353
NS_E_WMP_SERVER_INACCESSIBLE = -1072885352
NS_E_WMP_UNSUPPORTED_FORMAT = -1072885351
NS_E_WMP_DSHOW_UNSUPPORTED_FORMAT = -1072885350
NS_E_WMP_PLAYLIST_EXISTS = -1072885349
NS_E_WMP_NONMEDIA_FILES = -1072885348
NS_E_WMP_INVALID_ASX = -1072885347
NS_E_WMP_ALREADY_IN_USE = -1072885346
NS_E_WMP_IMAPI_FAILURE = -1072885345
NS_E_WMP_WMDM_FAILURE = -1072885344
NS_E_WMP_CODEC_NEEDED_WITH_4CC = -1072885343
NS_E_WMP_CODEC_NEEDED_WITH_FORMATTAG = -1072885342
NS_E_WMP_MSSAP_NOT_AVAILABLE = -1072885341
NS_E_WMP_WMDM_INTERFACEDEAD = -1072885340
NS_E_WMP_WMDM_NOTCERTIFIED = -1072885339
NS_E_WMP_WMDM_LICENSE_NOTEXIST = -1072885338
NS_E_WMP_WMDM_LICENSE_EXPIRED = -1072885337
NS_E_WMP_WMDM_BUSY = -1072885336
NS_E_WMP_WMDM_NORIGHTS = -1072885335
NS_E_WMP_WMDM_INCORRECT_RIGHTS = -1072885334
NS_E_WMP_IMAPI_GENERIC = -1072885333
NS_E_WMP_IMAPI_DEVICE_NOTPRESENT = -1072885331
NS_E_WMP_IMAPI_DEVICE_BUSY = -1072885330
NS_E_WMP_IMAPI_LOSS_OF_STREAMING = -1072885329
NS_E_WMP_SERVER_UNAVAILABLE = -1072885328
NS_E_WMP_FILE_OPEN_FAILED = -1072885327
NS_E_WMP_VERIFY_ONLINE = -1072885326
NS_E_WMP_SERVER_NOT_RESPONDING = -1072885325
NS_E_WMP_DRM_CORRUPT_BACKUP = -1072885324
NS_E_WMP_DRM_LICENSE_SERVER_UNAVAILABLE = -1072885323
NS_E_WMP_NETWORK_FIREWALL = -1072885322
NS_E_WMP_NO_REMOVABLE_MEDIA = -1072885321
NS_E_WMP_PROXY_CONNECT_TIMEOUT = -1072885320
NS_E_WMP_NEED_UPGRADE = -1072885319
NS_E_WMP_AUDIO_HW_PROBLEM = -1072885318
NS_E_WMP_INVALID_PROTOCOL = -1072885317
NS_E_WMP_INVALID_LIBRARY_ADD = -1072885316
NS_E_WMP_MMS_NOT_SUPPORTED = -1072885315
NS_E_WMP_NO_PROTOCOLS_SELECTED = -1072885314
NS_E_WMP_GOFULLSCREEN_FAILED = -1072885313
NS_E_WMP_NETWORK_ERROR = -1072885312
NS_E_WMP_CONNECT_TIMEOUT = -1072885311
NS_E_WMP_MULTICAST_DISABLED = -1072885310
NS_E_WMP_SERVER_DNS_TIMEOUT = -1072885309
NS_E_WMP_PROXY_NOT_FOUND = -1072885308
NS_E_WMP_TAMPERED_CONTENT = -1072885307
NS_E_WMP_OUTOFMEMORY = -1072885306
NS_E_WMP_AUDIO_CODEC_NOT_INSTALLED = -1072885305
NS_E_WMP_VIDEO_CODEC_NOT_INSTALLED = -1072885304
NS_E_WMP_IMAPI_DEVICE_INVALIDTYPE = -1072885303
NS_E_WMP_DRM_DRIVER_AUTH_FAILURE = -1072885302
NS_E_WMP_NETWORK_RESOURCE_FAILURE = -1072885301
NS_E_WMP_UPGRADE_APPLICATION = -1072885300
NS_E_WMP_UNKNOWN_ERROR = -1072885299
NS_E_WMP_INVALID_KEY = -1072885298
NS_E_WMP_CD_ANOTHER_USER = -1072885297
NS_E_WMP_DRM_NEEDS_AUTHORIZATION = -1072885296
NS_E_WMP_BAD_DRIVER = -1072885295
NS_E_WMP_ACCESS_DENIED = -1072885294
NS_E_WMP_LICENSE_RESTRICTS = -1072885293
NS_E_WMP_INVALID_REQUEST = -1072885292
NS_E_WMP_CD_STASH_NO_SPACE = -1072885291
NS_E_WMP_DRM_NEW_HARDWARE = -1072885290
NS_E_WMP_DRM_INVALID_SIG = -1072885289
NS_E_WMP_DRM_CANNOT_RESTORE = -1072885288
NS_E_WMP_BURN_DISC_OVERFLOW = -1072885287
NS_E_WMP_DRM_GENERIC_LICENSE_FAILURE = -1072885286
NS_E_WMP_DRM_NO_SECURE_CLOCK = -1072885285
NS_E_WMP_DRM_NO_RIGHTS = -1072885284
NS_E_WMP_DRM_INDIV_FAILED = -1072885283
NS_E_WMP_SERVER_NONEWCONNECTIONS = -1072885282
NS_E_WMP_MULTIPLE_ERROR_IN_PLAYLIST = -1072885281
NS_E_WMP_IMAPI2_ERASE_FAIL = -1072885280
NS_E_WMP_IMAPI2_ERASE_DEVICE_BUSY = -1072885279
NS_E_WMP_DRM_COMPONENT_FAILURE = -1072885278
NS_E_WMP_DRM_NO_DEVICE_CERT = -1072885277
NS_E_WMP_SERVER_SECURITY_ERROR = -1072885276
NS_E_WMP_AUDIO_DEVICE_LOST = -1072885275
NS_E_WMP_IMAPI_MEDIA_INCOMPATIBLE = -1072885274
NS_E_SYNCWIZ_DEVICE_FULL = -1072885266
NS_E_SYNCWIZ_CANNOT_CHANGE_SETTINGS = -1072885265
NS_E_TRANSCODE_DELETECACHEERROR = -1072885264
NS_E_CD_NO_BUFFERS_READ = -1072885256
NS_E_CD_EMPTY_TRACK_QUEUE = -1072885255
NS_E_CD_NO_READER = -1072885254
NS_E_CD_ISRC_INVALID = -1072885253
NS_E_CD_MEDIA_CATALOG_NUMBER_INVALID = -1072885252
NS_E_SLOW_READ_DIGITAL_WITH_ERRORCORRECTION = -1072885251
NS_E_CD_SPEEDDETECT_NOT_ENOUGH_READS = -1072885250
NS_E_CD_QUEUEING_DISABLED = -1072885249
NS_E_WMP_DRM_ACQUIRING_LICENSE = -1072885246
NS_E_WMP_DRM_LICENSE_EXPIRED = -1072885245
NS_E_WMP_DRM_LICENSE_NOTACQUIRED = -1072885244
NS_E_WMP_DRM_LICENSE_NOTENABLED = -1072885243
NS_E_WMP_DRM_LICENSE_UNUSABLE = -1072885242
NS_E_WMP_DRM_LICENSE_CONTENT_REVOKED = -1072885241
NS_E_WMP_DRM_LICENSE_NOSAP = -1072885240
NS_E_WMP_DRM_UNABLE_TO_ACQUIRE_LICENSE = -1072885239
NS_E_WMP_LICENSE_REQUIRED = -1072885238
NS_E_WMP_PROTECTED_CONTENT = -1072885237
NS_E_WMP_POLICY_VALUE_NOT_CONFIGURED = -1072885206
NS_E_PDA_CANNOT_SYNC_FROM_INTERNET = -1072885196
NS_E_PDA_CANNOT_SYNC_INVALID_PLAYLIST = -1072885195
NS_E_PDA_FAILED_TO_SYNCHRONIZE_FILE = -1072885194
NS_E_PDA_SYNC_FAILED = -1072885193
NS_E_PDA_DELETE_FAILED = -1072885192
NS_E_PDA_FAILED_TO_RETRIEVE_FILE = -1072885191
NS_E_PDA_DEVICE_NOT_RESPONDING = -1072885190
NS_E_PDA_FAILED_TO_TRANSCODE_PHOTO = -1072885189
NS_E_PDA_FAILED_TO_ENCRYPT_TRANSCODED_FILE = -1072885188
NS_E_PDA_CANNOT_TRANSCODE_TO_AUDIO = -1072885187
NS_E_PDA_CANNOT_TRANSCODE_TO_VIDEO = -1072885186
NS_E_PDA_CANNOT_TRANSCODE_TO_IMAGE = -1072885185
NS_E_PDA_RETRIEVED_FILE_FILENAME_TOO_LONG = -1072885184
NS_E_PDA_CEWMDM_DRM_ERROR = -1072885183
NS_E_INCOMPLETE_PLAYLIST = -1072885182
NS_E_PDA_SYNC_RUNNING = -1072885181
NS_E_PDA_SYNC_LOGIN_ERROR = -1072885180
NS_E_PDA_TRANSCODE_CODEC_NOT_FOUND = -1072885179
NS_E_CANNOT_SYNC_DRM_TO_NON_JANUS_DEVICE = -1072885178
NS_E_CANNOT_SYNC_PREVIOUS_SYNC_RUNNING = -1072885177
NS_E_WMP_HWND_NOTFOUND = -1072885156
NS_E_BKGDOWNLOAD_WRONG_NO_FILES = -1072885155
NS_E_BKGDOWNLOAD_COMPLETECANCELLEDJOB = -1072885154
NS_E_BKGDOWNLOAD_CANCELCOMPLETEDJOB = -1072885153
NS_E_BKGDOWNLOAD_NOJOBPOINTER = -1072885152
NS_E_BKGDOWNLOAD_INVALIDJOBSIGNATURE = -1072885151
NS_E_BKGDOWNLOAD_FAILED_TO_CREATE_TEMPFILE = -1072885150
NS_E_BKGDOWNLOAD_PLUGIN_FAILEDINITIALIZE = -1072885149
NS_E_BKGDOWNLOAD_PLUGIN_FAILEDTOMOVEFILE = -1072885148
NS_E_BKGDOWNLOAD_CALLFUNCFAILED = -1072885147
NS_E_BKGDOWNLOAD_CALLFUNCTIMEOUT = -1072885146
NS_E_BKGDOWNLOAD_CALLFUNCENDED = -1072885145
NS_E_BKGDOWNLOAD_WMDUNPACKFAILED = -1072885144
NS_E_BKGDOWNLOAD_FAILEDINITIALIZE = -1072885143
NS_E_INTERFACE_NOT_REGISTERED_IN_GIT = -1072885142
NS_E_BKGDOWNLOAD_INVALID_FILE_NAME = -1072885141
NS_E_IMAGE_DOWNLOAD_FAILED = -1072885106
NS_E_WMP_UDRM_NOUSERLIST = -1072885056
NS_E_WMP_DRM_NOT_ACQUIRING = -1072885055
NS_E_WMP_BSTR_TOO_LONG = -1072885006
NS_E_WMP_AUTOPLAY_INVALID_STATE = -1072884996
NS_E_WMP_COMPONENT_REVOKED = -1072884986
NS_E_CURL_NOTSAFE = -1072884956
NS_E_CURL_INVALIDCHAR = -1072884955
NS_E_CURL_INVALIDHOSTNAME = -1072884954
NS_E_CURL_INVALIDPATH = -1072884953
NS_E_CURL_INVALIDSCHEME = -1072884952
NS_E_CURL_INVALIDURL = -1072884951
NS_E_CURL_CANTWALK = -1072884949
NS_E_CURL_INVALIDPORT = -1072884948
NS_E_CURLHELPER_NOTADIRECTORY = -1072884947
NS_E_CURLHELPER_NOTAFILE = -1072884946
NS_E_CURL_CANTDECODE = -1072884945
NS_E_CURLHELPER_NOTRELATIVE = -1072884944
NS_E_CURL_INVALIDBUFFERSIZE = -1072884943
NS_E_SUBSCRIPTIONSERVICE_PLAYBACK_DISALLOWED = -1072884906
NS_E_CANNOT_BUY_OR_DOWNLOAD_FROM_MULTIPLE_SERVICES = -1072884905
NS_E_CANNOT_BUY_OR_DOWNLOAD_CONTENT = -1072884904
NS_S_TRACK_BUY_REQUIRES_ALBUM_PURCHASE = 856921
NS_E_NOT_CONTENT_PARTNER_TRACK = -1072884902
NS_E_TRACK_DOWNLOAD_REQUIRES_ALBUM_PURCHASE = -1072884901
NS_E_TRACK_DOWNLOAD_REQUIRES_PURCHASE = -1072884900
NS_E_TRACK_PURCHASE_MAXIMUM_EXCEEDED = -1072884899
NS_S_NAVIGATION_COMPLETE_WITH_ERRORS = 856926
NS_E_SUBSCRIPTIONSERVICE_LOGIN_FAILED = -1072884897
NS_E_SUBSCRIPTIONSERVICE_DOWNLOAD_TIMEOUT = -1072884896
NS_S_TRACK_ALREADY_DOWNLOADED = 856929
NS_E_CONTENT_PARTNER_STILL_INITIALIZING = -1072884894
NS_E_OPEN_CONTAINING_FOLDER_FAILED = -1072884893
NS_E_ADVANCEDEDIT_TOO_MANY_PICTURES = -1072884886
NS_E_REDIRECT = -1072884856
NS_E_STALE_PRESENTATION = -1072884855
NS_E_NAMESPACE_WRONG_PERSIST = -1072884854
NS_E_NAMESPACE_WRONG_TYPE = -1072884853
NS_E_NAMESPACE_NODE_CONFLICT = -1072884852
NS_E_NAMESPACE_NODE_NOT_FOUND = -1072884851
NS_E_NAMESPACE_BUFFER_TOO_SMALL = -1072884850
NS_E_NAMESPACE_TOO_MANY_CALLBACKS = -1072884849
NS_E_NAMESPACE_DUPLICATE_CALLBACK = -1072884848
NS_E_NAMESPACE_CALLBACK_NOT_FOUND = -1072884847
NS_E_NAMESPACE_NAME_TOO_LONG = -1072884846
NS_E_NAMESPACE_DUPLICATE_NAME = -1072884845
NS_E_NAMESPACE_EMPTY_NAME = -1072884844
NS_E_NAMESPACE_INDEX_TOO_LARGE = -1072884843
NS_E_NAMESPACE_BAD_NAME = -1072884842
NS_E_NAMESPACE_WRONG_SECURITY = -1072884841
NS_E_CACHE_ARCHIVE_CONFLICT = -1072884756
NS_E_CACHE_ORIGIN_SERVER_NOT_FOUND = -1072884755
NS_E_CACHE_ORIGIN_SERVER_TIMEOUT = -1072884754
NS_E_CACHE_NOT_BROADCAST = -1072884753
NS_E_CACHE_CANNOT_BE_CACHED = -1072884752
NS_E_CACHE_NOT_MODIFIED = -1072884751
NS_E_CANNOT_REMOVE_PUBLISHING_POINT = -1072884656
NS_E_CANNOT_REMOVE_PLUGIN = -1072884655
NS_E_WRONG_PUBLISHING_POINT_TYPE = -1072884654
NS_E_UNSUPPORTED_LOAD_TYPE = -1072884653
NS_E_INVALID_PLUGIN_LOAD_TYPE_CONFIGURATION = -1072884652
NS_E_INVALID_PUBLISHING_POINT_NAME = -1072884651
NS_E_TOO_MANY_MULTICAST_SINKS = -1072884650
NS_E_PUBLISHING_POINT_INVALID_REQUEST_WHILE_STARTED = -1072884649
NS_E_MULTICAST_PLUGIN_NOT_ENABLED = -1072884648
NS_E_INVALID_OPERATING_SYSTEM_VERSION = -1072884647
NS_E_PUBLISHING_POINT_REMOVED = -1072884646
NS_E_INVALID_PUSH_PUBLISHING_POINT_START_REQUEST = -1072884645
NS_E_UNSUPPORTED_LANGUAGE = -1072884644
NS_E_WRONG_OS_VERSION = -1072884643
NS_E_PUBLISHING_POINT_STOPPED = -1072884642
NS_E_PLAYLIST_ENTRY_ALREADY_PLAYING = -1072884556
NS_E_EMPTY_PLAYLIST = -1072884555
NS_E_PLAYLIST_PARSE_FAILURE = -1072884554
NS_E_PLAYLIST_UNSUPPORTED_ENTRY = -1072884553
NS_E_PLAYLIST_ENTRY_NOT_IN_PLAYLIST = -1072884552
NS_E_PLAYLIST_ENTRY_SEEK = -1072884551
NS_E_PLAYLIST_RECURSIVE_PLAYLISTS = -1072884550
NS_E_PLAYLIST_TOO_MANY_NESTED_PLAYLISTS = -1072884549
NS_E_PLAYLIST_SHUTDOWN = -1072884548
NS_E_PLAYLIST_END_RECEDING = -1072884547
NS_I_PLAYLIST_CHANGE_RECEDING = 1074599102
NS_E_DATAPATH_NO_SINK = -1072884456
NS_S_PUBLISHING_POINT_STARTED_WITH_FAILED_SINKS = 857369
NS_E_INVALID_PUSH_TEMPLATE = -1072884454
NS_E_INVALID_PUSH_PUBLISHING_POINT = -1072884453
NS_E_CRITICAL_ERROR = -1072884452
NS_E_NO_NEW_CONNECTIONS = -1072884451
NS_E_WSX_INVALID_VERSION = -1072884450
NS_E_HEADER_MISMATCH = -1072884449
NS_E_PUSH_DUPLICATE_PUBLISHING_POINT_NAME = -1072884448
NS_E_NO_SCRIPT_ENGINE = -1072884356
NS_E_PLUGIN_ERROR_REPORTED = -1072884355
NS_E_SOURCE_PLUGIN_NOT_FOUND = -1072884354
NS_E_PLAYLIST_PLUGIN_NOT_FOUND = -1072884353
NS_E_DATA_SOURCE_ENUMERATION_NOT_SUPPORTED = -1072884352
NS_E_MEDIA_PARSER_INVALID_FORMAT = -1072884351
NS_E_SCRIPT_DEBUGGER_NOT_INSTALLED = -1072884350
NS_E_FEATURE_REQUIRES_ENTERPRISE_SERVER = -1072884349
NS_E_WIZARD_RUNNING = -1072884348
NS_E_INVALID_LOG_URL = -1072884347
NS_E_INVALID_MTU_RANGE = -1072884346
NS_E_INVALID_PLAY_STATISTICS = -1072884345
NS_E_LOG_NEED_TO_BE_SKIPPED = -1072884344
NS_E_HTTP_TEXT_DATACONTAINER_SIZE_LIMIT_EXCEEDED = -1072884343
NS_E_PORT_IN_USE = -1072884342
NS_E_PORT_IN_USE_HTTP = -1072884341
NS_E_HTTP_TEXT_DATACONTAINER_INVALID_SERVER_RESPONSE = -1072884340
NS_E_ARCHIVE_REACH_QUOTA = -1072884339
NS_E_ARCHIVE_ABORT_DUE_TO_BCAST = -1072884338
NS_E_ARCHIVE_GAP_DETECTED = -1072884337
NS_E_AUTHORIZATION_FILE_NOT_FOUND = -1072884336
NS_E_BAD_MARKIN = -1072882856
NS_E_BAD_MARKOUT = -1072882855
NS_E_NOMATCHING_MEDIASOURCE = -1072882854
NS_E_UNSUPPORTED_SOURCETYPE = -1072882853
NS_E_TOO_MANY_AUDIO = -1072882852
NS_E_TOO_MANY_VIDEO = -1072882851
NS_E_NOMATCHING_ELEMENT = -1072882850
NS_E_MISMATCHED_MEDIACONTENT = -1072882849
NS_E_CANNOT_DELETE_ACTIVE_SOURCEGROUP = -1072882848
NS_E_AUDIODEVICE_BUSY = -1072882847
NS_E_AUDIODEVICE_UNEXPECTED = -1072882846
NS_E_AUDIODEVICE_BADFORMAT = -1072882845
NS_E_VIDEODEVICE_BUSY = -1072882844
NS_E_VIDEODEVICE_UNEXPECTED = -1072882843
NS_E_INVALIDCALL_WHILE_ENCODER_RUNNING = -1072882842
NS_E_NO_PROFILE_IN_SOURCEGROUP = -1072882841
NS_E_VIDEODRIVER_UNSTABLE = -1072882840
NS_E_VIDCAPSTARTFAILED = -1072882839
NS_E_VIDSOURCECOMPRESSION = -1072882838
NS_E_VIDSOURCESIZE = -1072882837
NS_E_ICMQUERYFORMAT = -1072882836
NS_E_VIDCAPCREATEWINDOW = -1072882835
NS_E_VIDCAPDRVINUSE = -1072882834
NS_E_NO_MEDIAFORMAT_IN_SOURCE = -1072882833
NS_E_NO_VALID_OUTPUT_STREAM = -1072882832
NS_E_NO_VALID_SOURCE_PLUGIN = -1072882831
NS_E_NO_ACTIVE_SOURCEGROUP = -1072882830
NS_E_NO_SCRIPT_STREAM = -1072882829
NS_E_INVALIDCALL_WHILE_ARCHIVAL_RUNNING = -1072882828
NS_E_INVALIDPACKETSIZE = -1072882827
NS_E_PLUGIN_CLSID_INVALID = -1072882826
NS_E_UNSUPPORTED_ARCHIVETYPE = -1072882825
NS_E_UNSUPPORTED_ARCHIVEOPERATION = -1072882824
NS_E_ARCHIVE_FILENAME_NOTSET = -1072882823
NS_E_SOURCEGROUP_NOTPREPARED = -1072882822
NS_E_PROFILE_MISMATCH = -1072882821
NS_E_INCORRECTCLIPSETTINGS = -1072882820
NS_E_NOSTATSAVAILABLE = -1072882819
NS_E_NOTARCHIVING = -1072882818
NS_E_INVALIDCALL_WHILE_ENCODER_STOPPED = -1072882817
NS_E_NOSOURCEGROUPS = -1072882816
NS_E_INVALIDINPUTFPS = -1072882815
NS_E_NO_DATAVIEW_SUPPORT = -1072882814
NS_E_CODEC_UNAVAILABLE = -1072882813
NS_E_ARCHIVE_SAME_AS_INPUT = -1072882812
NS_E_SOURCE_NOTSPECIFIED = -1072882811
NS_E_NO_REALTIME_TIMECOMPRESSION = -1072882810
NS_E_UNSUPPORTED_ENCODER_DEVICE = -1072882809
NS_E_UNEXPECTED_DISPLAY_SETTINGS = -1072882808
NS_E_NO_AUDIODATA = -1072882807
NS_E_INPUTSOURCE_PROBLEM = -1072882806
NS_E_WME_VERSION_MISMATCH = -1072882805
NS_E_NO_REALTIME_PREPROCESS = -1072882804
NS_E_NO_REPEAT_PREPROCESS = -1072882803
NS_E_CANNOT_PAUSE_LIVEBROADCAST = -1072882802
NS_E_DRM_PROFILE_NOT_SET = -1072882801
NS_E_DUPLICATE_DRMPROFILE = -1072882800
NS_E_INVALID_DEVICE = -1072882799
NS_E_SPEECHEDL_ON_NON_MIXEDMODE = -1072882798
NS_E_DRM_PASSWORD_TOO_LONG = -1072882797
NS_E_DEVCONTROL_FAILED_SEEK = -1072882796
NS_E_INTERLACE_REQUIRE_SAMESIZE = -1072882795
NS_E_TOO_MANY_DEVICECONTROL = -1072882794
NS_E_NO_MULTIPASS_FOR_LIVEDEVICE = -1072882793
NS_E_MISSING_AUDIENCE = -1072882792
NS_E_AUDIENCE_CONTENTTYPE_MISMATCH = -1072882791
NS_E_MISSING_SOURCE_INDEX = -1072882790
NS_E_NUM_LANGUAGE_MISMATCH = -1072882789
NS_E_LANGUAGE_MISMATCH = -1072882788
NS_E_VBRMODE_MISMATCH = -1072882787
NS_E_INVALID_INPUT_AUDIENCE_INDEX = -1072882786
NS_E_INVALID_INPUT_LANGUAGE = -1072882785
NS_E_INVALID_INPUT_STREAM = -1072882784
NS_E_EXPECT_MONO_WAV_INPUT = -1072882783
NS_E_INPUT_WAVFORMAT_MISMATCH = -1072882782
NS_E_RECORDQ_DISK_FULL = -1072882781
NS_E_NO_PAL_INVERSE_TELECINE = -1072882780
NS_E_ACTIVE_SG_DEVICE_DISCONNECTED = -1072882779
NS_E_ACTIVE_SG_DEVICE_CONTROL_DISCONNECTED = -1072882778
NS_E_NO_FRAMES_SUBMITTED_TO_ANALYZER = -1072882777
NS_E_INPUT_DOESNOT_SUPPORT_SMPTE = -1072882776
NS_E_NO_SMPTE_WITH_MULTIPLE_SOURCEGROUPS = -1072882775
NS_E_BAD_CONTENTEDL = -1072882774
NS_E_INTERLACEMODE_MISMATCH = -1072882773
NS_E_NONSQUAREPIXELMODE_MISMATCH = -1072882772
NS_E_SMPTEMODE_MISMATCH = -1072882771
NS_E_END_OF_TAPE = -1072882770
NS_E_NO_MEDIA_IN_AUDIENCE = -1072882769
NS_E_NO_AUDIENCES = -1072882768
NS_E_NO_AUDIO_COMPAT = -1072882767
NS_E_INVALID_VBR_COMPAT = -1072882766
NS_E_NO_PROFILE_NAME = -1072882765
NS_E_INVALID_VBR_WITH_UNCOMP = -1072882764
NS_E_MULTIPLE_VBR_AUDIENCES = -1072882763
NS_E_UNCOMP_COMP_COMBINATION = -1072882762
NS_E_MULTIPLE_AUDIO_CODECS = -1072882761
NS_E_MULTIPLE_AUDIO_FORMATS = -1072882760
NS_E_AUDIO_BITRATE_STEPDOWN = -1072882759
NS_E_INVALID_AUDIO_PEAKRATE = -1072882758
NS_E_INVALID_AUDIO_PEAKRATE_2 = -1072882757
NS_E_INVALID_AUDIO_BUFFERMAX = -1072882756
NS_E_MULTIPLE_VIDEO_CODECS = -1072882755
NS_E_MULTIPLE_VIDEO_SIZES = -1072882754
NS_E_INVALID_VIDEO_BITRATE = -1072882753
NS_E_VIDEO_BITRATE_STEPDOWN = -1072882752
NS_E_INVALID_VIDEO_PEAKRATE = -1072882751
NS_E_INVALID_VIDEO_PEAKRATE_2 = -1072882750
NS_E_INVALID_VIDEO_WIDTH = -1072882749
NS_E_INVALID_VIDEO_HEIGHT = -1072882748
NS_E_INVALID_VIDEO_FPS = -1072882747
NS_E_INVALID_VIDEO_KEYFRAME = -1072882746
NS_E_INVALID_VIDEO_IQUALITY = -1072882745
NS_E_INVALID_VIDEO_CQUALITY = -1072882744
NS_E_INVALID_VIDEO_BUFFER = -1072882743
NS_E_INVALID_VIDEO_BUFFERMAX = -1072882742
NS_E_INVALID_VIDEO_BUFFERMAX_2 = -1072882741
NS_E_INVALID_VIDEO_WIDTH_ALIGN = -1072882740
NS_E_INVALID_VIDEO_HEIGHT_ALIGN = -1072882739
NS_E_MULTIPLE_SCRIPT_BITRATES = -1072882738
NS_E_INVALID_SCRIPT_BITRATE = -1072882737
NS_E_MULTIPLE_FILE_BITRATES = -1072882736
NS_E_INVALID_FILE_BITRATE = -1072882735
NS_E_SAME_AS_INPUT_COMBINATION = -1072882734
NS_E_SOURCE_CANNOT_LOOP = -1072882733
NS_E_INVALID_FOLDDOWN_COEFFICIENTS = -1072882732
NS_E_DRMPROFILE_NOTFOUND = -1072882731
NS_E_INVALID_TIMECODE = -1072882730
NS_E_NO_AUDIO_TIMECOMPRESSION = -1072882729
NS_E_NO_TWOPASS_TIMECOMPRESSION = -1072882728
NS_E_TIMECODE_REQUIRES_VIDEOSTREAM = -1072882727
NS_E_NO_MBR_WITH_TIMECODE = -1072882726
NS_E_INVALID_INTERLACEMODE = -1072882725
NS_E_INVALID_INTERLACE_COMPAT = -1072882724
NS_E_INVALID_NONSQUAREPIXEL_COMPAT = -1072882723
NS_E_INVALID_SOURCE_WITH_DEVICE_CONTROL = -1072882722
NS_E_CANNOT_GENERATE_BROADCAST_INFO_FOR_QUALITYVBR = -1072882721
NS_E_EXCEED_MAX_DRM_PROFILE_LIMIT = -1072882720
NS_E_DEVICECONTROL_UNSTABLE = -1072882719
NS_E_INVALID_PIXEL_ASPECT_RATIO = -1072882718
NS_E_AUDIENCE__LANGUAGE_CONTENTTYPE_MISMATCH = -1072882717
NS_E_INVALID_PROFILE_CONTENTTYPE = -1072882716
NS_E_TRANSFORM_PLUGIN_NOT_FOUND = -1072882715
NS_E_TRANSFORM_PLUGIN_INVALID = -1072882714
NS_E_EDL_REQUIRED_FOR_DEVICE_MULTIPASS = -1072882713
NS_E_INVALID_VIDEO_WIDTH_FOR_INTERLACED_ENCODING = -1072882712
NS_E_MARKIN_UNSUPPORTED = -1072882711
NS_E_DRM_INVALID_APPLICATION = -1072879855
NS_E_DRM_LICENSE_STORE_ERROR = -1072879854
NS_E_DRM_SECURE_STORE_ERROR = -1072879853
NS_E_DRM_LICENSE_STORE_SAVE_ERROR = -1072879852
NS_E_DRM_SECURE_STORE_UNLOCK_ERROR = -1072879851
NS_E_DRM_INVALID_CONTENT = -1072879850
NS_E_DRM_UNABLE_TO_OPEN_LICENSE = -1072879849
NS_E_DRM_INVALID_LICENSE = -1072879848
NS_E_DRM_INVALID_MACHINE = -1072879847
NS_E_DRM_ENUM_LICENSE_FAILED = -1072879845
NS_E_DRM_INVALID_LICENSE_REQUEST = -1072879844
NS_E_DRM_UNABLE_TO_INITIALIZE = -1072879843
NS_E_DRM_UNABLE_TO_ACQUIRE_LICENSE = -1072879842
NS_E_DRM_INVALID_LICENSE_ACQUIRED = -1072879841
NS_E_DRM_NO_RIGHTS = -1072879840
NS_E_DRM_KEY_ERROR = -1072879839
NS_E_DRM_ENCRYPT_ERROR = -1072879838
NS_E_DRM_DECRYPT_ERROR = -1072879837
NS_E_DRM_LICENSE_INVALID_XML = -1072879835
NS_S_DRM_LICENSE_ACQUIRED = 861990
NS_S_DRM_INDIVIDUALIZED = 861991
NS_E_DRM_NEEDS_INDIVIDUALIZATION = -1072879832
NS_E_DRM_ALREADY_INDIVIDUALIZED = -1072879831
NS_E_DRM_ACTION_NOT_QUERIED = -1072879830
NS_E_DRM_ACQUIRING_LICENSE = -1072879829
NS_E_DRM_INDIVIDUALIZING = -1072879828
NS_E_BACKUP_RESTORE_FAILURE = -1072879827
NS_E_BACKUP_RESTORE_BAD_REQUEST_ID = -1072879826
NS_E_DRM_PARAMETERS_MISMATCHED = -1072879825
NS_E_DRM_UNABLE_TO_CREATE_LICENSE_OBJECT = -1072879824
NS_E_DRM_UNABLE_TO_CREATE_INDI_OBJECT = -1072879823
NS_E_DRM_UNABLE_TO_CREATE_ENCRYPT_OBJECT = -1072879822
NS_E_DRM_UNABLE_TO_CREATE_DECRYPT_OBJECT = -1072879821
NS_E_DRM_UNABLE_TO_CREATE_PROPERTIES_OBJECT = -1072879820
NS_E_DRM_UNABLE_TO_CREATE_BACKUP_OBJECT = -1072879819
NS_E_DRM_INDIVIDUALIZE_ERROR = -1072879818
NS_E_DRM_LICENSE_OPEN_ERROR = -1072879817
NS_E_DRM_LICENSE_CLOSE_ERROR = -1072879816
NS_E_DRM_GET_LICENSE_ERROR = -1072879815
NS_E_DRM_QUERY_ERROR = -1072879814
NS_E_DRM_REPORT_ERROR = -1072879813
NS_E_DRM_GET_LICENSESTRING_ERROR = -1072879812
NS_E_DRM_GET_CONTENTSTRING_ERROR = -1072879811
NS_E_DRM_MONITOR_ERROR = -1072879810
NS_E_DRM_UNABLE_TO_SET_PARAMETER = -1072879809
NS_E_DRM_INVALID_APPDATA = -1072879808
NS_E_DRM_INVALID_APPDATA_VERSION = -1072879807
NS_E_DRM_BACKUP_EXISTS = -1072879806
NS_E_DRM_BACKUP_CORRUPT = -1072879805
NS_E_DRM_BACKUPRESTORE_BUSY = -1072879804
NS_E_BACKUP_RESTORE_BAD_DATA = -1072879803
NS_S_DRM_MONITOR_CANCELLED = 862022
NS_S_DRM_ACQUIRE_CANCELLED = 862023
NS_E_DRM_LICENSE_UNUSABLE = -1072879800
NS_E_DRM_INVALID_PROPERTY = -1072879799
NS_E_DRM_SECURE_STORE_NOT_FOUND = -1072879798
NS_E_DRM_CACHED_CONTENT_ERROR = -1072879797
NS_E_DRM_INDIVIDUALIZATION_INCOMPLETE = -1072879796
NS_E_DRM_DRIVER_AUTH_FAILURE = -1072879795
NS_E_DRM_NEED_UPGRADE_MSSAP = -1072879794
NS_E_DRM_REOPEN_CONTENT = -1072879793
NS_E_DRM_DRIVER_DIGIOUT_FAILURE = -1072879792
NS_E_DRM_INVALID_SECURESTORE_PASSWORD = -1072879791
NS_E_DRM_APPCERT_REVOKED = -1072879790
NS_E_DRM_RESTORE_FRAUD = -1072879789
NS_E_DRM_HARDWARE_INCONSISTENT = -1072879788
NS_E_DRM_SDMI_TRIGGER = -1072879787
NS_E_DRM_SDMI_NOMORECOPIES = -1072879786
NS_E_DRM_UNABLE_TO_CREATE_HEADER_OBJECT = -1072879785
NS_E_DRM_UNABLE_TO_CREATE_KEYS_OBJECT = -1072879784
NS_E_DRM_LICENSE_NOTACQUIRED = -1072879783
NS_E_DRM_UNABLE_TO_CREATE_CODING_OBJECT = -1072879782
NS_E_DRM_UNABLE_TO_CREATE_STATE_DATA_OBJECT = -1072879781
NS_E_DRM_BUFFER_TOO_SMALL = -1072879780
NS_E_DRM_UNSUPPORTED_PROPERTY = -1072879779
NS_E_DRM_ERROR_BAD_NET_RESP = -1072879778
NS_E_DRM_STORE_NOTALLSTORED = -1072879777
NS_E_DRM_SECURITY_COMPONENT_SIGNATURE_INVALID = -1072879776
NS_E_DRM_INVALID_DATA = -1072879775
NS_E_DRM_POLICY_DISABLE_ONLINE = -1072879774
NS_E_DRM_UNABLE_TO_CREATE_AUTHENTICATION_OBJECT = -1072879773
NS_E_DRM_NOT_CONFIGURED = -1072879772
NS_E_DRM_DEVICE_ACTIVATION_CANCELED = -1072879771
NS_E_BACKUP_RESTORE_TOO_MANY_RESETS = -1072879770
NS_E_DRM_DEBUGGING_NOT_ALLOWED = -1072879769
NS_E_DRM_OPERATION_CANCELED = -1072879768
NS_E_DRM_RESTRICTIONS_NOT_RETRIEVED = -1072879767
NS_E_DRM_UNABLE_TO_CREATE_PLAYLIST_OBJECT = -1072879766
NS_E_DRM_UNABLE_TO_CREATE_PLAYLIST_BURN_OBJECT = -1072879765
NS_E_DRM_UNABLE_TO_CREATE_DEVICE_REGISTRATION_OBJECT = -1072879764
NS_E_DRM_UNABLE_TO_CREATE_METERING_OBJECT = -1072879763
NS_S_DRM_BURNABLE_TRACK = 862062
NS_S_DRM_BURNABLE_TRACK_WITH_PLAYLIST_RESTRICTION = 862063
NS_E_DRM_TRACK_EXCEEDED_PLAYLIST_RESTICTION = -1072879760
NS_E_DRM_TRACK_EXCEEDED_TRACKBURN_RESTRICTION = -1072879759
NS_E_DRM_UNABLE_TO_GET_DEVICE_CERT = -1072879758
NS_E_DRM_UNABLE_TO_GET_SECURE_CLOCK = -1072879757
NS_E_DRM_UNABLE_TO_SET_SECURE_CLOCK = -1072879756
NS_E_DRM_UNABLE_TO_GET_SECURE_CLOCK_FROM_SERVER = -1072879755
NS_E_DRM_POLICY_METERING_DISABLED = -1072879754
NS_E_DRM_TRANSFER_CHAINED_LICENSES_UNSUPPORTED = -1072879753
NS_E_DRM_SDK_VERSIONMISMATCH = -1072879752
NS_E_DRM_LIC_NEEDS_DEVICE_CLOCK_SET = -1072879751
NS_E_LICENSE_HEADER_MISSING_URL = -1072879750
NS_E_DEVICE_NOT_WMDRM_DEVICE = -1072879749
NS_E_DRM_INVALID_APPCERT = -1072879748
NS_E_DRM_PROTOCOL_FORCEFUL_TERMINATION_ON_PETITION = -1072879747
NS_E_DRM_PROTOCOL_FORCEFUL_TERMINATION_ON_CHALLENGE = -1072879746
NS_E_DRM_CHECKPOINT_FAILED = -1072879745
NS_E_DRM_BB_UNABLE_TO_INITIALIZE = -1072879744
NS_E_DRM_UNABLE_TO_LOAD_HARDWARE_ID = -1072879743
NS_E_DRM_UNABLE_TO_OPEN_DATA_STORE = -1072879742
NS_E_DRM_DATASTORE_CORRUPT = -1072879741
NS_E_DRM_UNABLE_TO_CREATE_INMEMORYSTORE_OBJECT = -1072879740
NS_E_DRM_STUBLIB_REQUIRED = -1072879739
NS_E_DRM_UNABLE_TO_CREATE_CERTIFICATE_OBJECT = -1072879738
NS_E_DRM_MIGRATION_TARGET_NOT_ONLINE = -1072879737
NS_E_DRM_INVALID_MIGRATION_IMAGE = -1072879736
NS_E_DRM_MIGRATION_TARGET_STATES_CORRUPTED = -1072879735
NS_E_DRM_MIGRATION_IMPORTER_NOT_AVAILABLE = -1072879734
NS_DRM_E_MIGRATION_UPGRADE_WITH_DIFF_SID = -1072879733
NS_DRM_E_MIGRATION_SOURCE_MACHINE_IN_USE = -1072879732
NS_DRM_E_MIGRATION_TARGET_MACHINE_LESS_THAN_LH = -1072879731
NS_DRM_E_MIGRATION_IMAGE_ALREADY_EXISTS = -1072879730
NS_E_DRM_HARDWAREID_MISMATCH = -1072879729
NS_E_INVALID_DRMV2CLT_STUBLIB = -1072879728
NS_E_DRM_MIGRATION_INVALID_LEGACYV2_DATA = -1072879727
NS_E_DRM_MIGRATION_LICENSE_ALREADY_EXISTS = -1072879726
NS_E_DRM_MIGRATION_INVALID_LEGACYV2_SST_PASSWORD = -1072879725
NS_E_DRM_MIGRATION_NOT_SUPPORTED = -1072879724
NS_E_DRM_UNABLE_TO_CREATE_MIGRATION_IMPORTER_OBJECT = -1072879723
NS_E_DRM_CHECKPOINT_MISMATCH = -1072879722
NS_E_DRM_CHECKPOINT_CORRUPT = -1072879721
NS_E_REG_FLUSH_FAILURE = -1072879720
NS_E_HDS_KEY_MISMATCH = -1072879719
NS_E_DRM_MIGRATION_OPERATION_CANCELLED = -1072879718
NS_E_DRM_MIGRATION_OBJECT_IN_USE = -1072879717
NS_E_DRM_MALFORMED_CONTENT_HEADER = -1072879716
NS_E_DRM_LICENSE_EXPIRED = -1072879656
NS_E_DRM_LICENSE_NOTENABLED = -1072879655
NS_E_DRM_LICENSE_APPSECLOW = -1072879654
NS_E_DRM_STORE_NEEDINDI = -1072879653
NS_E_DRM_STORE_NOTALLOWED = -1072879652
NS_E_DRM_LICENSE_APP_NOTALLOWED = -1072879651
NS_S_DRM_NEEDS_INDIVIDUALIZATION = 862174
NS_E_DRM_LICENSE_CERT_EXPIRED = -1072879649
NS_E_DRM_LICENSE_SECLOW = -1072879648
NS_E_DRM_LICENSE_CONTENT_REVOKED = -1072879647
NS_E_DRM_DEVICE_NOT_REGISTERED = -1072879646
NS_E_DRM_LICENSE_NOSAP = -1072879606
NS_E_DRM_LICENSE_NOSVP = -1072879605
NS_E_DRM_LICENSE_NOWDM = -1072879604
NS_E_DRM_LICENSE_NOTRUSTEDCODEC = -1072879603
NS_E_DRM_SOURCEID_NOT_SUPPORTED = -1072879602
NS_E_DRM_NEEDS_UPGRADE_TEMPFILE = -1072879555
NS_E_DRM_NEED_UPGRADE_PD = -1072879554
NS_E_DRM_SIGNATURE_FAILURE = -1072879553
NS_E_DRM_LICENSE_SERVER_INFO_MISSING = -1072879552
NS_E_DRM_BUSY = -1072879551
NS_E_DRM_PD_TOO_MANY_DEVICES = -1072879550
NS_E_DRM_INDIV_FRAUD = -1072879549
NS_E_DRM_INDIV_NO_CABS = -1072879548
NS_E_DRM_INDIV_SERVICE_UNAVAILABLE = -1072879547
NS_E_DRM_RESTORE_SERVICE_UNAVAILABLE = -1072879546
NS_E_DRM_CLIENT_CODE_EXPIRED = -1072879545
NS_E_DRM_NO_UPLINK_LICENSE = -1072879544
NS_E_DRM_INVALID_KID = -1072879543
NS_E_DRM_LICENSE_INITIALIZATION_ERROR = -1072879542
NS_E_DRM_CHAIN_TOO_LONG = -1072879540
NS_E_DRM_UNSUPPORTED_ALGORITHM = -1072879539
NS_E_DRM_LICENSE_DELETION_ERROR = -1072879538
NS_E_DRM_INVALID_CERTIFICATE = -1072879456
NS_E_DRM_CERTIFICATE_REVOKED = -1072879455
NS_E_DRM_LICENSE_UNAVAILABLE = -1072879454
NS_E_DRM_DEVICE_LIMIT_REACHED = -1072879453
NS_E_DRM_UNABLE_TO_VERIFY_PROXIMITY = -1072879452
NS_E_DRM_MUST_REGISTER = -1072879451
NS_E_DRM_MUST_APPROVE = -1072879450
NS_E_DRM_MUST_REVALIDATE = -1072879449
NS_E_DRM_INVALID_PROXIMITY_RESPONSE = -1072879448
NS_E_DRM_INVALID_SESSION = -1072879447
NS_E_DRM_DEVICE_NOT_OPEN = -1072879446
NS_E_DRM_DEVICE_ALREADY_REGISTERED = -1072879445
NS_E_DRM_UNSUPPORTED_PROTOCOL_VERSION = -1072879444
NS_E_DRM_UNSUPPORTED_ACTION = -1072879443
NS_E_DRM_CERTIFICATE_SECURITY_LEVEL_INADEQUATE = -1072879442
NS_E_DRM_UNABLE_TO_OPEN_PORT = -1072879441
NS_E_DRM_BAD_REQUEST = -1072879440
NS_E_DRM_INVALID_CRL = -1072879439
NS_E_DRM_ATTRIBUTE_TOO_LONG = -1072879438
NS_E_DRM_EXPIRED_LICENSEBLOB = -1072879437
NS_E_DRM_INVALID_LICENSEBLOB = -1072879436
NS_E_DRM_INCLUSION_LIST_REQUIRED = -1072879435
NS_E_DRM_DRMV2CLT_REVOKED = -1072879434
NS_E_DRM_RIV_TOO_SMALL = -1072879433
NS_E_OUTPUT_PROTECTION_LEVEL_UNSUPPORTED = -1072879356
NS_E_COMPRESSED_DIGITAL_VIDEO_PROTECTION_LEVEL_UNSUPPORTED = -1072879355
NS_E_UNCOMPRESSED_DIGITAL_VIDEO_PROTECTION_LEVEL_UNSUPPORTED = -1072879354
NS_E_ANALOG_VIDEO_PROTECTION_LEVEL_UNSUPPORTED = -1072879353
NS_E_COMPRESSED_DIGITAL_AUDIO_PROTECTION_LEVEL_UNSUPPORTED = -1072879352
NS_E_UNCOMPRESSED_DIGITAL_AUDIO_PROTECTION_LEVEL_UNSUPPORTED = -1072879351
NS_E_OUTPUT_PROTECTION_SCHEME_UNSUPPORTED = -1072879350
NS_S_REBOOT_RECOMMENDED = 862968
NS_S_REBOOT_REQUIRED = 862969
NS_E_REBOOT_RECOMMENDED = -1072878854
NS_E_REBOOT_REQUIRED = -1072878853
NS_E_SETUP_INCOMPLETE = -1072878852
NS_E_SETUP_DRM_MIGRATION_FAILED = -1072878851
NS_E_SETUP_IGNORABLE_FAILURE = -1072878850
NS_E_SETUP_DRM_MIGRATION_FAILED_AND_IGNORABLE_FAILURE = -1072878849
NS_E_SETUP_BLOCKED = -1072878848
NS_E_UNKNOWN_PROTOCOL = -1072877856
NS_E_REDIRECT_TO_PROXY = -1072877855
NS_E_INTERNAL_SERVER_ERROR = -1072877854
NS_E_BAD_REQUEST = -1072877853
NS_E_ERROR_FROM_PROXY = -1072877852
NS_E_PROXY_TIMEOUT = -1072877851
NS_E_SERVER_UNAVAILABLE = -1072877850
NS_E_REFUSED_BY_SERVER = -1072877849
NS_E_INCOMPATIBLE_SERVER = -1072877848
NS_E_MULTICAST_DISABLED = -1072877847
NS_E_INVALID_REDIRECT = -1072877846
NS_E_ALL_PROTOCOLS_DISABLED = -1072877845
NS_E_MSBD_NO_LONGER_SUPPORTED = -1072877844
NS_E_PROXY_NOT_FOUND = -1072877843
NS_E_CANNOT_CONNECT_TO_PROXY = -1072877842
NS_E_SERVER_DNS_TIMEOUT = -1072877841
NS_E_PROXY_DNS_TIMEOUT = -1072877840
NS_E_CLOSED_ON_SUSPEND = -1072877839
NS_E_CANNOT_READ_PLAYLIST_FROM_MEDIASERVER = -1072877838
NS_E_SESSION_NOT_FOUND = -1072877837
NS_E_REQUIRE_STREAMING_CLIENT = -1072877836
NS_E_PLAYLIST_ENTRY_HAS_CHANGED = -1072877835
NS_E_PROXY_ACCESSDENIED = -1072877834
NS_E_PROXY_SOURCE_ACCESSDENIED = -1072877833
NS_E_NETWORK_SINK_WRITE = -1072877832
NS_E_FIREWALL = -1072877831
NS_E_MMS_NOT_SUPPORTED = -1072877830
NS_E_SERVER_ACCESSDENIED = -1072877829
NS_E_RESOURCE_GONE = -1072877828
NS_E_NO_EXISTING_PACKETIZER = -1072877827
NS_E_BAD_SYNTAX_IN_SERVER_RESPONSE = -1072877826
NS_I_RECONNECTED = 1074605823
NS_E_RESET_SOCKET_CONNECTION = -1072877824
NS_I_NOLOG_STOP = 1074605825
NS_E_TOO_MANY_HOPS = -1072877822
NS_I_EXISTING_PACKETIZER = 1074605827
NS_I_MANUAL_PROXY = 1074605828
NS_E_TOO_MUCH_DATA_FROM_SERVER = -1072877819
NS_E_CONNECT_TIMEOUT = -1072877818
NS_E_PROXY_CONNECT_TIMEOUT = -1072877817
NS_E_SESSION_INVALID = -1072877816
NS_S_EOSRECEDING = 864009
NS_E_PACKETSINK_UNKNOWN_FEC_STREAM = -1072877814
NS_E_PUSH_CANNOTCONNECT = -1072877813
NS_E_INCOMPATIBLE_PUSH_SERVER = -1072877812
NS_S_CHANGENOTICE = 864013
NS_E_END_OF_PLAYLIST = -1072876856
NS_E_USE_FILE_SOURCE = -1072876855
NS_E_PROPERTY_NOT_FOUND = -1072876854
NS_E_PROPERTY_READ_ONLY = -1072876852
NS_E_TABLE_KEY_NOT_FOUND = -1072876851
NS_E_INVALID_QUERY_OPERATOR = -1072876849
NS_E_INVALID_QUERY_PROPERTY = -1072876848
NS_E_PROPERTY_NOT_SUPPORTED = -1072876846
NS_E_SCHEMA_CLASSIFY_FAILURE = -1072876844
NS_E_METADATA_FORMAT_NOT_SUPPORTED = -1072876843
NS_E_METADATA_NO_EDITING_CAPABILITY = -1072876842
NS_E_METADATA_CANNOT_SET_LOCALE = -1072876841
NS_E_METADATA_LANGUAGE_NOT_SUPORTED = -1072876840
NS_E_METADATA_NO_RFC1766_NAME_FOR_LOCALE = -1072876839
NS_E_METADATA_NOT_AVAILABLE = -1072876838
NS_E_METADATA_CACHE_DATA_NOT_AVAILABLE = -1072876837
NS_E_METADATA_INVALID_DOCUMENT_TYPE = -1072876836
NS_E_METADATA_IDENTIFIER_NOT_AVAILABLE = -1072876835
NS_E_METADATA_CANNOT_RETRIEVE_FROM_OFFLINE_CACHE = -1072876834
VFW_HIDE_SETTINGS_PAGE = 1
VFW_HIDE_VIDEOSRC_PAGE = 2
VFW_HIDE_CAMERACONTROL_PAGE = 4
VFW_OEM_ADD_PAGE = 2147483648
VFW_USE_DEVICE_HANDLE = 1
VFW_USE_STREAM_HANDLE = 2
VFW_QUERY_DEV_CHANGED = 256
MCIERR_INVALID_DEVICE_ID = 257
MCIERR_UNRECOGNIZED_KEYWORD = 259
MCIERR_UNRECOGNIZED_COMMAND = 261
MCIERR_HARDWARE = 262
MCIERR_INVALID_DEVICE_NAME = 263
MCIERR_OUT_OF_MEMORY = 264
MCIERR_DEVICE_OPEN = 265
MCIERR_CANNOT_LOAD_DRIVER = 266
MCIERR_MISSING_COMMAND_STRING = 267
MCIERR_PARAM_OVERFLOW = 268
MCIERR_MISSING_STRING_ARGUMENT = 269
MCIERR_BAD_INTEGER = 270
MCIERR_PARSER_INTERNAL = 271
MCIERR_DRIVER_INTERNAL = 272
MCIERR_MISSING_PARAMETER = 273
MCIERR_UNSUPPORTED_FUNCTION = 274
MCIERR_FILE_NOT_FOUND = 275
MCIERR_DEVICE_NOT_READY = 276
MCIERR_INTERNAL = 277
MCIERR_DRIVER = 278
MCIERR_CANNOT_USE_ALL = 279
MCIERR_MULTIPLE = 280
MCIERR_EXTENSION_NOT_FOUND = 281
MCIERR_OUTOFRANGE = 282
MCIERR_FLAGS_NOT_COMPATIBLE = 284
MCIERR_FILE_NOT_SAVED = 286
MCIERR_DEVICE_TYPE_REQUIRED = 287
MCIERR_DEVICE_LOCKED = 288
MCIERR_DUPLICATE_ALIAS = 289
MCIERR_BAD_CONSTANT = 290
MCIERR_MUST_USE_SHAREABLE = 291
MCIERR_MISSING_DEVICE_NAME = 292
MCIERR_BAD_TIME_FORMAT = 293
MCIERR_NO_CLOSING_QUOTE = 294
MCIERR_DUPLICATE_FLAGS = 295
MCIERR_INVALID_FILE = 296
MCIERR_NULL_PARAMETER_BLOCK = 297
MCIERR_UNNAMED_RESOURCE = 298
MCIERR_NEW_REQUIRES_ALIAS = 299
MCIERR_NOTIFY_ON_AUTO_OPEN = 300
MCIERR_NO_ELEMENT_ALLOWED = 301
MCIERR_NONAPPLICABLE_FUNCTION = 302
MCIERR_ILLEGAL_FOR_AUTO_OPEN = 303
MCIERR_FILENAME_REQUIRED = 304
MCIERR_EXTRA_CHARACTERS = 305
MCIERR_DEVICE_NOT_INSTALLED = 306
MCIERR_GET_CD = 307
MCIERR_SET_CD = 308
MCIERR_SET_DRIVE = 309
MCIERR_DEVICE_LENGTH = 310
MCIERR_DEVICE_ORD_LENGTH = 311
MCIERR_NO_INTEGER = 312
MCIERR_WAVE_OUTPUTSINUSE = 320
MCIERR_WAVE_SETOUTPUTINUSE = 321
MCIERR_WAVE_INPUTSINUSE = 322
MCIERR_WAVE_SETINPUTINUSE = 323
MCIERR_WAVE_OUTPUTUNSPECIFIED = 324
MCIERR_WAVE_INPUTUNSPECIFIED = 325
MCIERR_WAVE_OUTPUTSUNSUITABLE = 326
MCIERR_WAVE_SETOUTPUTUNSUITABLE = 327
MCIERR_WAVE_INPUTSUNSUITABLE = 328
MCIERR_WAVE_SETINPUTUNSUITABLE = 329
MCIERR_SEQ_DIV_INCOMPATIBLE = 336
MCIERR_SEQ_PORT_INUSE = 337
MCIERR_SEQ_PORT_NONEXISTENT = 338
MCIERR_SEQ_PORT_MAPNODEVICE = 339
MCIERR_SEQ_PORT_MISCERROR = 340
MCIERR_SEQ_TIMER = 341
MCIERR_SEQ_PORTUNSPECIFIED = 342
MCIERR_SEQ_NOMIDIPRESENT = 343
MCIERR_NO_WINDOW = 346
MCIERR_CREATEWINDOW = 347
MCIERR_FILE_READ = 348
MCIERR_FILE_WRITE = 349
MCIERR_NO_IDENTITY = 350
MCIERR_CUSTOM_DRIVER_BASE = 512
MCI_FIRST = 2048
MCI_ESCAPE = 2053
MCI_INFO = 2058
MCI_GETDEVCAPS = 2059
MCI_SPIN = 2060
MCI_SET = 2061
MCI_SYSINFO = 2064
MCI_BREAK = 2065
MCI_STATUS = 2068
MCI_CUE = 2096
MCI_REALIZE = 2112
MCI_WINDOW = 2113
MCI_PUT = 2114
MCI_WHERE = 2115
MCI_FREEZE = 2116
MCI_UNFREEZE = 2117
MCI_LOAD = 2128
MCI_UPDATE = 2132
MCI_USER_MESSAGES = 3072
MCI_LAST = 4095
MCI_DEVTYPE_VCR = 513
MCI_DEVTYPE_VIDEODISC = 514
MCI_DEVTYPE_OVERLAY = 515
MCI_DEVTYPE_CD_AUDIO = 516
MCI_DEVTYPE_DAT = 517
MCI_DEVTYPE_SCANNER = 518
MCI_DEVTYPE_ANIMATION = 519
MCI_DEVTYPE_DIGITAL_VIDEO = 520
MCI_DEVTYPE_OTHER = 521
MCI_DEVTYPE_WAVEFORM_AUDIO = 522
MCI_DEVTYPE_SEQUENCER = 523
MCI_DEVTYPE_FIRST = 513
MCI_DEVTYPE_LAST = 523
MCI_DEVTYPE_FIRST_USER = 4096
MCI_FORMAT_MILLISECONDS = 0
MCI_FORMAT_HMS = 1
MCI_FORMAT_MSF = 2
MCI_FORMAT_FRAMES = 3
MCI_FORMAT_SMPTE_24 = 4
MCI_FORMAT_SMPTE_25 = 5
MCI_FORMAT_SMPTE_30 = 6
MCI_FORMAT_SMPTE_30DROP = 7
MCI_FORMAT_BYTES = 8
MCI_FORMAT_SAMPLES = 9
MCI_FORMAT_TMSF = 10
MCI_NOTIFY_SUCCESSFUL = 1
MCI_NOTIFY_SUPERSEDED = 2
MCI_NOTIFY_ABORTED = 4
MCI_NOTIFY_FAILURE = 8
MCI_NOTIFY = 1
MCI_WAIT = 2
MCI_FROM = 4
MCI_TO = 8
MCI_TRACK = 16
MCI_OPEN_SHAREABLE = 256
MCI_OPEN_ELEMENT = 512
MCI_OPEN_ALIAS = 1024
MCI_OPEN_ELEMENT_ID = 2048
MCI_OPEN_TYPE_ID = 4096
MCI_OPEN_TYPE = 8192
MCI_SEEK_TO_START = 256
MCI_SEEK_TO_END = 512
MCI_STATUS_ITEM = 256
MCI_STATUS_START = 512
MCI_STATUS_LENGTH = 1
MCI_STATUS_POSITION = 2
MCI_STATUS_NUMBER_OF_TRACKS = 3
MCI_STATUS_MODE = 4
MCI_STATUS_MEDIA_PRESENT = 5
MCI_STATUS_TIME_FORMAT = 6
MCI_STATUS_READY = 7
MCI_STATUS_CURRENT_TRACK = 8
MCI_INFO_PRODUCT = 256
MCI_INFO_FILE = 512
MCI_INFO_MEDIA_UPC = 1024
MCI_INFO_MEDIA_IDENTITY = 2048
MCI_INFO_NAME = 4096
MCI_INFO_COPYRIGHT = 8192
MCI_GETDEVCAPS_ITEM = 256
MCI_GETDEVCAPS_CAN_RECORD = 1
MCI_GETDEVCAPS_HAS_AUDIO = 2
MCI_GETDEVCAPS_HAS_VIDEO = 3
MCI_GETDEVCAPS_DEVICE_TYPE = 4
MCI_GETDEVCAPS_USES_FILES = 5
MCI_GETDEVCAPS_COMPOUND_DEVICE = 6
MCI_GETDEVCAPS_CAN_EJECT = 7
MCI_GETDEVCAPS_CAN_PLAY = 8
MCI_GETDEVCAPS_CAN_SAVE = 9
MCI_SYSINFO_QUANTITY = 256
MCI_SYSINFO_OPEN = 512
MCI_SYSINFO_NAME = 1024
MCI_SYSINFO_INSTALLNAME = 2048
MCI_SET_DOOR_OPEN = 256
MCI_SET_DOOR_CLOSED = 512
MCI_SET_TIME_FORMAT = 1024
MCI_SET_AUDIO = 2048
MCI_SET_VIDEO = 4096
MCI_SET_ON = 8192
MCI_SET_OFF = 16384
MCI_SET_AUDIO_ALL = 0
MCI_SET_AUDIO_LEFT = 1
MCI_SET_AUDIO_RIGHT = 2
MCI_BREAK_KEY = 256
MCI_BREAK_HWND = 512
MCI_BREAK_OFF = 1024
MCI_RECORD_INSERT = 256
MCI_RECORD_OVERWRITE = 512
MCI_SAVE_FILE = 256
MCI_LOAD_FILE = 256
MCI_VD_MODE_PARK = 1025
MCI_VD_MEDIA_CLV = 1026
MCI_VD_MEDIA_CAV = 1027
MCI_VD_MEDIA_OTHER = 1028
MCI_VD_FORMAT_TRACK = 16385
MCI_VD_PLAY_REVERSE = 65536
MCI_VD_PLAY_FAST = 131072
MCI_VD_PLAY_SPEED = 262144
MCI_VD_PLAY_SCAN = 524288
MCI_VD_PLAY_SLOW = 1048576
MCI_VD_SEEK_REVERSE = 65536
MCI_VD_STATUS_SPEED = 16386
MCI_VD_STATUS_FORWARD = 16387
MCI_VD_STATUS_MEDIA_TYPE = 16388
MCI_VD_STATUS_SIDE = 16389
MCI_VD_STATUS_DISC_SIZE = 16390
MCI_VD_GETDEVCAPS_CLV = 65536
MCI_VD_GETDEVCAPS_CAV = 131072
MCI_VD_SPIN_UP = 65536
MCI_VD_SPIN_DOWN = 131072
MCI_VD_GETDEVCAPS_CAN_REVERSE = 16386
MCI_VD_GETDEVCAPS_FAST_RATE = 16387
MCI_VD_GETDEVCAPS_SLOW_RATE = 16388
MCI_VD_GETDEVCAPS_NORMAL_RATE = 16389
MCI_VD_STEP_FRAMES = 65536
MCI_VD_STEP_REVERSE = 131072
MCI_VD_ESCAPE_STRING = 256
MCI_CDA_STATUS_TYPE_TRACK = 16385
MCI_CDA_TRACK_AUDIO = 1088
MCI_CDA_TRACK_OTHER = 1089
MCI_WAVE_PCM = 1152
MCI_WAVE_MAPPER = 1153
MCI_WAVE_OPEN_BUFFER = 65536
MCI_WAVE_SET_FORMATTAG = 65536
MCI_WAVE_SET_CHANNELS = 131072
MCI_WAVE_SET_SAMPLESPERSEC = 262144
MCI_WAVE_SET_AVGBYTESPERSEC = 524288
MCI_WAVE_SET_BLOCKALIGN = 1048576
MCI_WAVE_SET_BITSPERSAMPLE = 2097152
MCI_WAVE_INPUT = 4194304
MCI_WAVE_OUTPUT = 8388608
MCI_WAVE_STATUS_FORMATTAG = 16385
MCI_WAVE_STATUS_CHANNELS = 16386
MCI_WAVE_STATUS_SAMPLESPERSEC = 16387
MCI_WAVE_STATUS_AVGBYTESPERSEC = 16388
MCI_WAVE_STATUS_BLOCKALIGN = 16389
MCI_WAVE_STATUS_BITSPERSAMPLE = 16390
MCI_WAVE_STATUS_LEVEL = 16391
MCI_WAVE_SET_ANYINPUT = 67108864
MCI_WAVE_SET_ANYOUTPUT = 134217728
MCI_WAVE_GETDEVCAPS_INPUTS = 16385
MCI_WAVE_GETDEVCAPS_OUTPUTS = 16386
MCI_SEQ_FORMAT_SONGPTR = 16385
MCI_SEQ_FILE = 16386
MCI_SEQ_MIDI = 16387
MCI_SEQ_SMPTE = 16388
MCI_SEQ_NONE = 65533
MCI_SEQ_MAPPER = 65535
MCI_SEQ_STATUS_TEMPO = 16386
MCI_SEQ_STATUS_PORT = 16387
MCI_SEQ_STATUS_SLAVE = 16391
MCI_SEQ_STATUS_MASTER = 16392
MCI_SEQ_STATUS_OFFSET = 16393
MCI_SEQ_STATUS_DIVTYPE = 16394
MCI_SEQ_STATUS_NAME = 16395
MCI_SEQ_STATUS_COPYRIGHT = 16396
MCI_SEQ_SET_TEMPO = 65536
MCI_SEQ_SET_PORT = 131072
MCI_SEQ_SET_SLAVE = 262144
MCI_SEQ_SET_MASTER = 524288
MCI_SEQ_SET_OFFSET = 16777216
MCI_ANIM_OPEN_WS = 65536
MCI_ANIM_OPEN_PARENT = 131072
MCI_ANIM_OPEN_NOSTATIC = 262144
MCI_ANIM_PLAY_SPEED = 65536
MCI_ANIM_PLAY_REVERSE = 131072
MCI_ANIM_PLAY_FAST = 262144
MCI_ANIM_PLAY_SLOW = 524288
MCI_ANIM_PLAY_SCAN = 1048576
MCI_ANIM_STEP_REVERSE = 65536
MCI_ANIM_STEP_FRAMES = 131072
MCI_ANIM_STATUS_SPEED = 16385
MCI_ANIM_STATUS_FORWARD = 16386
MCI_ANIM_STATUS_HWND = 16387
MCI_ANIM_STATUS_HPAL = 16388
MCI_ANIM_STATUS_STRETCH = 16389
MCI_ANIM_INFO_TEXT = 65536
MCI_ANIM_GETDEVCAPS_CAN_REVERSE = 16385
MCI_ANIM_GETDEVCAPS_FAST_RATE = 16386
MCI_ANIM_GETDEVCAPS_SLOW_RATE = 16387
MCI_ANIM_GETDEVCAPS_NORMAL_RATE = 16388
MCI_ANIM_GETDEVCAPS_PALETTES = 16390
MCI_ANIM_GETDEVCAPS_CAN_STRETCH = 16391
MCI_ANIM_GETDEVCAPS_MAX_WINDOWS = 16392
MCI_ANIM_REALIZE_NORM = 65536
MCI_ANIM_REALIZE_BKGD = 131072
MCI_ANIM_WINDOW_HWND = 65536
MCI_ANIM_WINDOW_STATE = 262144
MCI_ANIM_WINDOW_TEXT = 524288
MCI_ANIM_WINDOW_ENABLE_STRETCH = 1048576
MCI_ANIM_WINDOW_DISABLE_STRETCH = 2097152
MCI_ANIM_WINDOW_DEFAULT = 0
MCI_ANIM_RECT = 65536
MCI_ANIM_PUT_SOURCE = 131072
MCI_ANIM_PUT_DESTINATION = 262144
MCI_ANIM_WHERE_SOURCE = 131072
MCI_ANIM_WHERE_DESTINATION = 262144
MCI_ANIM_UPDATE_HDC = 131072
MCI_OVLY_OPEN_WS = 65536
MCI_OVLY_OPEN_PARENT = 131072
MCI_OVLY_STATUS_HWND = 16385
MCI_OVLY_STATUS_STRETCH = 16386
MCI_OVLY_INFO_TEXT = 65536
MCI_OVLY_GETDEVCAPS_CAN_STRETCH = 16385
MCI_OVLY_GETDEVCAPS_CAN_FREEZE = 16386
MCI_OVLY_GETDEVCAPS_MAX_WINDOWS = 16387
MCI_OVLY_WINDOW_HWND = 65536
MCI_OVLY_WINDOW_STATE = 262144
MCI_OVLY_WINDOW_TEXT = 524288
MCI_OVLY_WINDOW_ENABLE_STRETCH = 1048576
MCI_OVLY_WINDOW_DISABLE_STRETCH = 2097152
MCI_OVLY_WINDOW_DEFAULT = 0
MCI_OVLY_RECT = 65536
MCI_OVLY_PUT_SOURCE = 131072
MCI_OVLY_PUT_DESTINATION = 262144
MCI_OVLY_PUT_FRAME = 524288
MCI_OVLY_PUT_VIDEO = 1048576
MCI_OVLY_WHERE_SOURCE = 131072
MCI_OVLY_WHERE_DESTINATION = 262144
MCI_OVLY_WHERE_FRAME = 524288
MCI_OVLY_WHERE_VIDEO = 1048576
HMMIO = IntPtr
HDRVR = IntPtr
HIC = IntPtr
HVIDEO = IntPtr
KSDATAFORMAT_SUBTYPE_IEEE_FLOAT = Guid('00000003-0000-0010-8000-00aa00389b71')
def _define_ADPCMCOEFSET_head():
    class ADPCMCOEFSET(Structure):
        pass
    return ADPCMCOEFSET
def _define_ADPCMCOEFSET():
    ADPCMCOEFSET = win32more.Media.Multimedia.ADPCMCOEFSET_head
    ADPCMCOEFSET._pack_ = 1
    ADPCMCOEFSET._fields_ = [
        ("iCoef1", Int16),
        ("iCoef2", Int16),
    ]
    return ADPCMCOEFSET
def _define_ADPCMWAVEFORMAT_head():
    class ADPCMWAVEFORMAT(Structure):
        pass
    return ADPCMWAVEFORMAT
def _define_ADPCMWAVEFORMAT():
    ADPCMWAVEFORMAT = win32more.Media.Multimedia.ADPCMWAVEFORMAT_head
    ADPCMWAVEFORMAT._pack_ = 1
    ADPCMWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
        ("wSamplesPerBlock", UInt16),
        ("wNumCoef", UInt16),
        ("aCoef", win32more.Media.Multimedia.ADPCMCOEFSET * 0),
    ]
    return ADPCMWAVEFORMAT
def _define_DRMWAVEFORMAT_head():
    class DRMWAVEFORMAT(Structure):
        pass
    return DRMWAVEFORMAT
def _define_DRMWAVEFORMAT():
    DRMWAVEFORMAT = win32more.Media.Multimedia.DRMWAVEFORMAT_head
    DRMWAVEFORMAT._pack_ = 1
    DRMWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
        ("wReserved", UInt16),
        ("ulContentId", UInt32),
        ("wfxSecure", win32more.Media.Audio.WAVEFORMATEX),
    ]
    return DRMWAVEFORMAT
def _define_DVIADPCMWAVEFORMAT_head():
    class DVIADPCMWAVEFORMAT(Structure):
        pass
    return DVIADPCMWAVEFORMAT
def _define_DVIADPCMWAVEFORMAT():
    DVIADPCMWAVEFORMAT = win32more.Media.Multimedia.DVIADPCMWAVEFORMAT_head
    DVIADPCMWAVEFORMAT._pack_ = 1
    DVIADPCMWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
        ("wSamplesPerBlock", UInt16),
    ]
    return DVIADPCMWAVEFORMAT
def _define_IMAADPCMWAVEFORMAT_head():
    class IMAADPCMWAVEFORMAT(Structure):
        pass
    return IMAADPCMWAVEFORMAT
def _define_IMAADPCMWAVEFORMAT():
    IMAADPCMWAVEFORMAT = win32more.Media.Multimedia.IMAADPCMWAVEFORMAT_head
    IMAADPCMWAVEFORMAT._pack_ = 1
    IMAADPCMWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
        ("wSamplesPerBlock", UInt16),
    ]
    return IMAADPCMWAVEFORMAT
def _define_MEDIASPACEADPCMWAVEFORMAT_head():
    class MEDIASPACEADPCMWAVEFORMAT(Structure):
        pass
    return MEDIASPACEADPCMWAVEFORMAT
def _define_MEDIASPACEADPCMWAVEFORMAT():
    MEDIASPACEADPCMWAVEFORMAT = win32more.Media.Multimedia.MEDIASPACEADPCMWAVEFORMAT_head
    MEDIASPACEADPCMWAVEFORMAT._pack_ = 1
    MEDIASPACEADPCMWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
        ("wRevision", UInt16),
    ]
    return MEDIASPACEADPCMWAVEFORMAT
def _define_SIERRAADPCMWAVEFORMAT_head():
    class SIERRAADPCMWAVEFORMAT(Structure):
        pass
    return SIERRAADPCMWAVEFORMAT
def _define_SIERRAADPCMWAVEFORMAT():
    SIERRAADPCMWAVEFORMAT = win32more.Media.Multimedia.SIERRAADPCMWAVEFORMAT_head
    SIERRAADPCMWAVEFORMAT._pack_ = 1
    SIERRAADPCMWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
        ("wRevision", UInt16),
    ]
    return SIERRAADPCMWAVEFORMAT
def _define_G723_ADPCMWAVEFORMAT_head():
    class G723_ADPCMWAVEFORMAT(Structure):
        pass
    return G723_ADPCMWAVEFORMAT
def _define_G723_ADPCMWAVEFORMAT():
    G723_ADPCMWAVEFORMAT = win32more.Media.Multimedia.G723_ADPCMWAVEFORMAT_head
    G723_ADPCMWAVEFORMAT._pack_ = 1
    G723_ADPCMWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
        ("cbExtraSize", UInt16),
        ("nAuxBlockSize", UInt16),
    ]
    return G723_ADPCMWAVEFORMAT
def _define_DIGISTDWAVEFORMAT_head():
    class DIGISTDWAVEFORMAT(Structure):
        pass
    return DIGISTDWAVEFORMAT
def _define_DIGISTDWAVEFORMAT():
    DIGISTDWAVEFORMAT = win32more.Media.Multimedia.DIGISTDWAVEFORMAT_head
    DIGISTDWAVEFORMAT._pack_ = 1
    DIGISTDWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
    ]
    return DIGISTDWAVEFORMAT
def _define_DIGIFIXWAVEFORMAT_head():
    class DIGIFIXWAVEFORMAT(Structure):
        pass
    return DIGIFIXWAVEFORMAT
def _define_DIGIFIXWAVEFORMAT():
    DIGIFIXWAVEFORMAT = win32more.Media.Multimedia.DIGIFIXWAVEFORMAT_head
    DIGIFIXWAVEFORMAT._pack_ = 1
    DIGIFIXWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
    ]
    return DIGIFIXWAVEFORMAT
def _define_DIALOGICOKIADPCMWAVEFORMAT_head():
    class DIALOGICOKIADPCMWAVEFORMAT(Structure):
        pass
    return DIALOGICOKIADPCMWAVEFORMAT
def _define_DIALOGICOKIADPCMWAVEFORMAT():
    DIALOGICOKIADPCMWAVEFORMAT = win32more.Media.Multimedia.DIALOGICOKIADPCMWAVEFORMAT_head
    DIALOGICOKIADPCMWAVEFORMAT._pack_ = 1
    DIALOGICOKIADPCMWAVEFORMAT._fields_ = [
        ("ewf", win32more.Media.Audio.WAVEFORMATEX),
    ]
    return DIALOGICOKIADPCMWAVEFORMAT
def _define_YAMAHA_ADPCMWAVEFORMAT_head():
    class YAMAHA_ADPCMWAVEFORMAT(Structure):
        pass
    return YAMAHA_ADPCMWAVEFORMAT
def _define_YAMAHA_ADPCMWAVEFORMAT():
    YAMAHA_ADPCMWAVEFORMAT = win32more.Media.Multimedia.YAMAHA_ADPCMWAVEFORMAT_head
    YAMAHA_ADPCMWAVEFORMAT._pack_ = 1
    YAMAHA_ADPCMWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
    ]
    return YAMAHA_ADPCMWAVEFORMAT
def _define_SONARCWAVEFORMAT_head():
    class SONARCWAVEFORMAT(Structure):
        pass
    return SONARCWAVEFORMAT
def _define_SONARCWAVEFORMAT():
    SONARCWAVEFORMAT = win32more.Media.Multimedia.SONARCWAVEFORMAT_head
    SONARCWAVEFORMAT._pack_ = 1
    SONARCWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
        ("wCompType", UInt16),
    ]
    return SONARCWAVEFORMAT
def _define_TRUESPEECHWAVEFORMAT_head():
    class TRUESPEECHWAVEFORMAT(Structure):
        pass
    return TRUESPEECHWAVEFORMAT
def _define_TRUESPEECHWAVEFORMAT():
    TRUESPEECHWAVEFORMAT = win32more.Media.Multimedia.TRUESPEECHWAVEFORMAT_head
    TRUESPEECHWAVEFORMAT._pack_ = 1
    TRUESPEECHWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
        ("wRevision", UInt16),
        ("nSamplesPerBlock", UInt16),
        ("abReserved", Byte * 28),
    ]
    return TRUESPEECHWAVEFORMAT
def _define_ECHOSC1WAVEFORMAT_head():
    class ECHOSC1WAVEFORMAT(Structure):
        pass
    return ECHOSC1WAVEFORMAT
def _define_ECHOSC1WAVEFORMAT():
    ECHOSC1WAVEFORMAT = win32more.Media.Multimedia.ECHOSC1WAVEFORMAT_head
    ECHOSC1WAVEFORMAT._pack_ = 1
    ECHOSC1WAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
    ]
    return ECHOSC1WAVEFORMAT
def _define_AUDIOFILE_AF36WAVEFORMAT_head():
    class AUDIOFILE_AF36WAVEFORMAT(Structure):
        pass
    return AUDIOFILE_AF36WAVEFORMAT
def _define_AUDIOFILE_AF36WAVEFORMAT():
    AUDIOFILE_AF36WAVEFORMAT = win32more.Media.Multimedia.AUDIOFILE_AF36WAVEFORMAT_head
    AUDIOFILE_AF36WAVEFORMAT._pack_ = 1
    AUDIOFILE_AF36WAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
    ]
    return AUDIOFILE_AF36WAVEFORMAT
def _define_APTXWAVEFORMAT_head():
    class APTXWAVEFORMAT(Structure):
        pass
    return APTXWAVEFORMAT
def _define_APTXWAVEFORMAT():
    APTXWAVEFORMAT = win32more.Media.Multimedia.APTXWAVEFORMAT_head
    APTXWAVEFORMAT._pack_ = 1
    APTXWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
    ]
    return APTXWAVEFORMAT
def _define_AUDIOFILE_AF10WAVEFORMAT_head():
    class AUDIOFILE_AF10WAVEFORMAT(Structure):
        pass
    return AUDIOFILE_AF10WAVEFORMAT
def _define_AUDIOFILE_AF10WAVEFORMAT():
    AUDIOFILE_AF10WAVEFORMAT = win32more.Media.Multimedia.AUDIOFILE_AF10WAVEFORMAT_head
    AUDIOFILE_AF10WAVEFORMAT._pack_ = 1
    AUDIOFILE_AF10WAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
    ]
    return AUDIOFILE_AF10WAVEFORMAT
def _define_DOLBYAC2WAVEFORMAT_head():
    class DOLBYAC2WAVEFORMAT(Structure):
        pass
    return DOLBYAC2WAVEFORMAT
def _define_DOLBYAC2WAVEFORMAT():
    DOLBYAC2WAVEFORMAT = win32more.Media.Multimedia.DOLBYAC2WAVEFORMAT_head
    DOLBYAC2WAVEFORMAT._pack_ = 1
    DOLBYAC2WAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
        ("nAuxBitsCode", UInt16),
    ]
    return DOLBYAC2WAVEFORMAT
def _define_GSM610WAVEFORMAT_head():
    class GSM610WAVEFORMAT(Structure):
        pass
    return GSM610WAVEFORMAT
def _define_GSM610WAVEFORMAT():
    GSM610WAVEFORMAT = win32more.Media.Multimedia.GSM610WAVEFORMAT_head
    GSM610WAVEFORMAT._pack_ = 1
    GSM610WAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
        ("wSamplesPerBlock", UInt16),
    ]
    return GSM610WAVEFORMAT
def _define_ADPCMEWAVEFORMAT_head():
    class ADPCMEWAVEFORMAT(Structure):
        pass
    return ADPCMEWAVEFORMAT
def _define_ADPCMEWAVEFORMAT():
    ADPCMEWAVEFORMAT = win32more.Media.Multimedia.ADPCMEWAVEFORMAT_head
    ADPCMEWAVEFORMAT._pack_ = 1
    ADPCMEWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
        ("wSamplesPerBlock", UInt16),
    ]
    return ADPCMEWAVEFORMAT
def _define_CONTRESVQLPCWAVEFORMAT_head():
    class CONTRESVQLPCWAVEFORMAT(Structure):
        pass
    return CONTRESVQLPCWAVEFORMAT
def _define_CONTRESVQLPCWAVEFORMAT():
    CONTRESVQLPCWAVEFORMAT = win32more.Media.Multimedia.CONTRESVQLPCWAVEFORMAT_head
    CONTRESVQLPCWAVEFORMAT._pack_ = 1
    CONTRESVQLPCWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
        ("wSamplesPerBlock", UInt16),
    ]
    return CONTRESVQLPCWAVEFORMAT
def _define_DIGIREALWAVEFORMAT_head():
    class DIGIREALWAVEFORMAT(Structure):
        pass
    return DIGIREALWAVEFORMAT
def _define_DIGIREALWAVEFORMAT():
    DIGIREALWAVEFORMAT = win32more.Media.Multimedia.DIGIREALWAVEFORMAT_head
    DIGIREALWAVEFORMAT._pack_ = 1
    DIGIREALWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
        ("wSamplesPerBlock", UInt16),
    ]
    return DIGIREALWAVEFORMAT
def _define_DIGIADPCMWAVEFORMAT_head():
    class DIGIADPCMWAVEFORMAT(Structure):
        pass
    return DIGIADPCMWAVEFORMAT
def _define_DIGIADPCMWAVEFORMAT():
    DIGIADPCMWAVEFORMAT = win32more.Media.Multimedia.DIGIADPCMWAVEFORMAT_head
    DIGIADPCMWAVEFORMAT._pack_ = 1
    DIGIADPCMWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
        ("wSamplesPerBlock", UInt16),
    ]
    return DIGIADPCMWAVEFORMAT
def _define_CONTRESCR10WAVEFORMAT_head():
    class CONTRESCR10WAVEFORMAT(Structure):
        pass
    return CONTRESCR10WAVEFORMAT
def _define_CONTRESCR10WAVEFORMAT():
    CONTRESCR10WAVEFORMAT = win32more.Media.Multimedia.CONTRESCR10WAVEFORMAT_head
    CONTRESCR10WAVEFORMAT._pack_ = 1
    CONTRESCR10WAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
        ("wSamplesPerBlock", UInt16),
    ]
    return CONTRESCR10WAVEFORMAT
def _define_NMS_VBXADPCMWAVEFORMAT_head():
    class NMS_VBXADPCMWAVEFORMAT(Structure):
        pass
    return NMS_VBXADPCMWAVEFORMAT
def _define_NMS_VBXADPCMWAVEFORMAT():
    NMS_VBXADPCMWAVEFORMAT = win32more.Media.Multimedia.NMS_VBXADPCMWAVEFORMAT_head
    NMS_VBXADPCMWAVEFORMAT._pack_ = 1
    NMS_VBXADPCMWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
        ("wSamplesPerBlock", UInt16),
    ]
    return NMS_VBXADPCMWAVEFORMAT
def _define_G721_ADPCMWAVEFORMAT_head():
    class G721_ADPCMWAVEFORMAT(Structure):
        pass
    return G721_ADPCMWAVEFORMAT
def _define_G721_ADPCMWAVEFORMAT():
    G721_ADPCMWAVEFORMAT = win32more.Media.Multimedia.G721_ADPCMWAVEFORMAT_head
    G721_ADPCMWAVEFORMAT._pack_ = 1
    G721_ADPCMWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
        ("nAuxBlockSize", UInt16),
    ]
    return G721_ADPCMWAVEFORMAT
def _define_MSAUDIO1WAVEFORMAT_head():
    class MSAUDIO1WAVEFORMAT(Structure):
        pass
    return MSAUDIO1WAVEFORMAT
def _define_MSAUDIO1WAVEFORMAT():
    MSAUDIO1WAVEFORMAT = win32more.Media.Multimedia.MSAUDIO1WAVEFORMAT_head
    MSAUDIO1WAVEFORMAT._pack_ = 1
    MSAUDIO1WAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
        ("wSamplesPerBlock", UInt16),
        ("wEncodeOptions", UInt16),
    ]
    return MSAUDIO1WAVEFORMAT
def _define_WMAUDIO2WAVEFORMAT_head():
    class WMAUDIO2WAVEFORMAT(Structure):
        pass
    return WMAUDIO2WAVEFORMAT
def _define_WMAUDIO2WAVEFORMAT():
    WMAUDIO2WAVEFORMAT = win32more.Media.Multimedia.WMAUDIO2WAVEFORMAT_head
    WMAUDIO2WAVEFORMAT._pack_ = 1
    WMAUDIO2WAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
        ("dwSamplesPerBlock", UInt32),
        ("wEncodeOptions", UInt16),
        ("dwSuperBlockAlign", UInt32),
    ]
    return WMAUDIO2WAVEFORMAT
def _define_WMAUDIO3WAVEFORMAT_head():
    class WMAUDIO3WAVEFORMAT(Structure):
        pass
    return WMAUDIO3WAVEFORMAT
def _define_WMAUDIO3WAVEFORMAT():
    WMAUDIO3WAVEFORMAT = win32more.Media.Multimedia.WMAUDIO3WAVEFORMAT_head
    WMAUDIO3WAVEFORMAT._pack_ = 1
    WMAUDIO3WAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
        ("wValidBitsPerSample", UInt16),
        ("dwChannelMask", UInt32),
        ("dwReserved1", UInt32),
        ("dwReserved2", UInt32),
        ("wEncodeOptions", UInt16),
        ("wReserved3", UInt16),
    ]
    return WMAUDIO3WAVEFORMAT
def _define_CREATIVEADPCMWAVEFORMAT_head():
    class CREATIVEADPCMWAVEFORMAT(Structure):
        pass
    return CREATIVEADPCMWAVEFORMAT
def _define_CREATIVEADPCMWAVEFORMAT():
    CREATIVEADPCMWAVEFORMAT = win32more.Media.Multimedia.CREATIVEADPCMWAVEFORMAT_head
    CREATIVEADPCMWAVEFORMAT._pack_ = 1
    CREATIVEADPCMWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
        ("wRevision", UInt16),
    ]
    return CREATIVEADPCMWAVEFORMAT
def _define_CREATIVEFASTSPEECH8WAVEFORMAT_head():
    class CREATIVEFASTSPEECH8WAVEFORMAT(Structure):
        pass
    return CREATIVEFASTSPEECH8WAVEFORMAT
def _define_CREATIVEFASTSPEECH8WAVEFORMAT():
    CREATIVEFASTSPEECH8WAVEFORMAT = win32more.Media.Multimedia.CREATIVEFASTSPEECH8WAVEFORMAT_head
    CREATIVEFASTSPEECH8WAVEFORMAT._pack_ = 1
    CREATIVEFASTSPEECH8WAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
        ("wRevision", UInt16),
    ]
    return CREATIVEFASTSPEECH8WAVEFORMAT
def _define_CREATIVEFASTSPEECH10WAVEFORMAT_head():
    class CREATIVEFASTSPEECH10WAVEFORMAT(Structure):
        pass
    return CREATIVEFASTSPEECH10WAVEFORMAT
def _define_CREATIVEFASTSPEECH10WAVEFORMAT():
    CREATIVEFASTSPEECH10WAVEFORMAT = win32more.Media.Multimedia.CREATIVEFASTSPEECH10WAVEFORMAT_head
    CREATIVEFASTSPEECH10WAVEFORMAT._pack_ = 1
    CREATIVEFASTSPEECH10WAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
        ("wRevision", UInt16),
    ]
    return CREATIVEFASTSPEECH10WAVEFORMAT
def _define_FMTOWNS_SND_WAVEFORMAT_head():
    class FMTOWNS_SND_WAVEFORMAT(Structure):
        pass
    return FMTOWNS_SND_WAVEFORMAT
def _define_FMTOWNS_SND_WAVEFORMAT():
    FMTOWNS_SND_WAVEFORMAT = win32more.Media.Multimedia.FMTOWNS_SND_WAVEFORMAT_head
    FMTOWNS_SND_WAVEFORMAT._pack_ = 1
    FMTOWNS_SND_WAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
        ("wRevision", UInt16),
    ]
    return FMTOWNS_SND_WAVEFORMAT
def _define_OLIGSMWAVEFORMAT_head():
    class OLIGSMWAVEFORMAT(Structure):
        pass
    return OLIGSMWAVEFORMAT
def _define_OLIGSMWAVEFORMAT():
    OLIGSMWAVEFORMAT = win32more.Media.Multimedia.OLIGSMWAVEFORMAT_head
    OLIGSMWAVEFORMAT._pack_ = 1
    OLIGSMWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
    ]
    return OLIGSMWAVEFORMAT
def _define_OLIADPCMWAVEFORMAT_head():
    class OLIADPCMWAVEFORMAT(Structure):
        pass
    return OLIADPCMWAVEFORMAT
def _define_OLIADPCMWAVEFORMAT():
    OLIADPCMWAVEFORMAT = win32more.Media.Multimedia.OLIADPCMWAVEFORMAT_head
    OLIADPCMWAVEFORMAT._pack_ = 1
    OLIADPCMWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
    ]
    return OLIADPCMWAVEFORMAT
def _define_OLICELPWAVEFORMAT_head():
    class OLICELPWAVEFORMAT(Structure):
        pass
    return OLICELPWAVEFORMAT
def _define_OLICELPWAVEFORMAT():
    OLICELPWAVEFORMAT = win32more.Media.Multimedia.OLICELPWAVEFORMAT_head
    OLICELPWAVEFORMAT._pack_ = 1
    OLICELPWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
    ]
    return OLICELPWAVEFORMAT
def _define_OLISBCWAVEFORMAT_head():
    class OLISBCWAVEFORMAT(Structure):
        pass
    return OLISBCWAVEFORMAT
def _define_OLISBCWAVEFORMAT():
    OLISBCWAVEFORMAT = win32more.Media.Multimedia.OLISBCWAVEFORMAT_head
    OLISBCWAVEFORMAT._pack_ = 1
    OLISBCWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
    ]
    return OLISBCWAVEFORMAT
def _define_OLIOPRWAVEFORMAT_head():
    class OLIOPRWAVEFORMAT(Structure):
        pass
    return OLIOPRWAVEFORMAT
def _define_OLIOPRWAVEFORMAT():
    OLIOPRWAVEFORMAT = win32more.Media.Multimedia.OLIOPRWAVEFORMAT_head
    OLIOPRWAVEFORMAT._pack_ = 1
    OLIOPRWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
    ]
    return OLIOPRWAVEFORMAT
def _define_CSIMAADPCMWAVEFORMAT_head():
    class CSIMAADPCMWAVEFORMAT(Structure):
        pass
    return CSIMAADPCMWAVEFORMAT
def _define_CSIMAADPCMWAVEFORMAT():
    CSIMAADPCMWAVEFORMAT = win32more.Media.Multimedia.CSIMAADPCMWAVEFORMAT_head
    CSIMAADPCMWAVEFORMAT._pack_ = 1
    CSIMAADPCMWAVEFORMAT._fields_ = [
        ("wfx", win32more.Media.Audio.WAVEFORMATEX),
    ]
    return CSIMAADPCMWAVEFORMAT
def _define_s_RIFFWAVE_inst_head():
    class s_RIFFWAVE_inst(Structure):
        pass
    return s_RIFFWAVE_inst
def _define_s_RIFFWAVE_inst():
    s_RIFFWAVE_inst = win32more.Media.Multimedia.s_RIFFWAVE_inst_head
    s_RIFFWAVE_inst._fields_ = [
        ("bUnshiftedNote", Byte),
        ("chFineTune", win32more.Foundation.CHAR),
        ("chGain", win32more.Foundation.CHAR),
        ("bLowNote", Byte),
        ("bHighNote", Byte),
        ("bLowVelocity", Byte),
        ("bHighVelocity", Byte),
    ]
    return s_RIFFWAVE_inst
def _define_EXBMINFOHEADER_head():
    class EXBMINFOHEADER(Structure):
        pass
    return EXBMINFOHEADER
def _define_EXBMINFOHEADER():
    EXBMINFOHEADER = win32more.Media.Multimedia.EXBMINFOHEADER_head
    EXBMINFOHEADER._pack_ = 1
    EXBMINFOHEADER._fields_ = [
        ("bmi", win32more.Graphics.Gdi.BITMAPINFOHEADER),
        ("biExtDataOffset", UInt32),
    ]
    return EXBMINFOHEADER
def _define_JPEGINFOHEADER_head():
    class JPEGINFOHEADER(Structure):
        pass
    return JPEGINFOHEADER
def _define_JPEGINFOHEADER():
    JPEGINFOHEADER = win32more.Media.Multimedia.JPEGINFOHEADER_head
    JPEGINFOHEADER._pack_ = 1
    JPEGINFOHEADER._fields_ = [
        ("JPEGSize", UInt32),
        ("JPEGProcess", UInt32),
        ("JPEGColorSpaceID", UInt32),
        ("JPEGBitsPerSample", UInt32),
        ("JPEGHSubSampling", UInt32),
        ("JPEGVSubSampling", UInt32),
    ]
    return JPEGINFOHEADER
def _define_YIELDPROC():
    return CFUNCTYPE(UInt32,UInt32,UInt32, use_last_error=False)
def _define_MCI_GENERIC_PARMS_head():
    class MCI_GENERIC_PARMS(Structure):
        pass
    return MCI_GENERIC_PARMS
def _define_MCI_GENERIC_PARMS():
    MCI_GENERIC_PARMS = win32more.Media.Multimedia.MCI_GENERIC_PARMS_head
    MCI_GENERIC_PARMS._pack_ = 1
    MCI_GENERIC_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
    ]
    return MCI_GENERIC_PARMS
def _define_MCI_OPEN_PARMSA_head():
    class MCI_OPEN_PARMSA(Structure):
        pass
    return MCI_OPEN_PARMSA
def _define_MCI_OPEN_PARMSA():
    MCI_OPEN_PARMSA = win32more.Media.Multimedia.MCI_OPEN_PARMSA_head
    MCI_OPEN_PARMSA._pack_ = 1
    MCI_OPEN_PARMSA._fields_ = [
        ("dwCallback", UIntPtr),
        ("wDeviceID", UInt32),
        ("lpstrDeviceType", win32more.Foundation.PSTR),
        ("lpstrElementName", win32more.Foundation.PSTR),
        ("lpstrAlias", win32more.Foundation.PSTR),
    ]
    return MCI_OPEN_PARMSA
def _define_MCI_OPEN_PARMSW_head():
    class MCI_OPEN_PARMSW(Structure):
        pass
    return MCI_OPEN_PARMSW
def _define_MCI_OPEN_PARMSW():
    MCI_OPEN_PARMSW = win32more.Media.Multimedia.MCI_OPEN_PARMSW_head
    MCI_OPEN_PARMSW._pack_ = 1
    MCI_OPEN_PARMSW._fields_ = [
        ("dwCallback", UIntPtr),
        ("wDeviceID", UInt32),
        ("lpstrDeviceType", win32more.Foundation.PWSTR),
        ("lpstrElementName", win32more.Foundation.PWSTR),
        ("lpstrAlias", win32more.Foundation.PWSTR),
    ]
    return MCI_OPEN_PARMSW
def _define_MCI_PLAY_PARMS_head():
    class MCI_PLAY_PARMS(Structure):
        pass
    return MCI_PLAY_PARMS
def _define_MCI_PLAY_PARMS():
    MCI_PLAY_PARMS = win32more.Media.Multimedia.MCI_PLAY_PARMS_head
    MCI_PLAY_PARMS._pack_ = 1
    MCI_PLAY_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwFrom", UInt32),
        ("dwTo", UInt32),
    ]
    return MCI_PLAY_PARMS
def _define_MCI_SEEK_PARMS_head():
    class MCI_SEEK_PARMS(Structure):
        pass
    return MCI_SEEK_PARMS
def _define_MCI_SEEK_PARMS():
    MCI_SEEK_PARMS = win32more.Media.Multimedia.MCI_SEEK_PARMS_head
    MCI_SEEK_PARMS._pack_ = 1
    MCI_SEEK_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwTo", UInt32),
    ]
    return MCI_SEEK_PARMS
def _define_MCI_STATUS_PARMS_head():
    class MCI_STATUS_PARMS(Structure):
        pass
    return MCI_STATUS_PARMS
def _define_MCI_STATUS_PARMS():
    MCI_STATUS_PARMS = win32more.Media.Multimedia.MCI_STATUS_PARMS_head
    MCI_STATUS_PARMS._pack_ = 1
    MCI_STATUS_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwReturn", UIntPtr),
        ("dwItem", UInt32),
        ("dwTrack", UInt32),
    ]
    return MCI_STATUS_PARMS
def _define_MCI_INFO_PARMSA_head():
    class MCI_INFO_PARMSA(Structure):
        pass
    return MCI_INFO_PARMSA
def _define_MCI_INFO_PARMSA():
    MCI_INFO_PARMSA = win32more.Media.Multimedia.MCI_INFO_PARMSA_head
    MCI_INFO_PARMSA._pack_ = 1
    MCI_INFO_PARMSA._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpstrReturn", win32more.Foundation.PSTR),
        ("dwRetSize", UInt32),
    ]
    return MCI_INFO_PARMSA
def _define_MCI_INFO_PARMSW_head():
    class MCI_INFO_PARMSW(Structure):
        pass
    return MCI_INFO_PARMSW
def _define_MCI_INFO_PARMSW():
    MCI_INFO_PARMSW = win32more.Media.Multimedia.MCI_INFO_PARMSW_head
    MCI_INFO_PARMSW._pack_ = 1
    MCI_INFO_PARMSW._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpstrReturn", win32more.Foundation.PWSTR),
        ("dwRetSize", UInt32),
    ]
    return MCI_INFO_PARMSW
def _define_MCI_GETDEVCAPS_PARMS_head():
    class MCI_GETDEVCAPS_PARMS(Structure):
        pass
    return MCI_GETDEVCAPS_PARMS
def _define_MCI_GETDEVCAPS_PARMS():
    MCI_GETDEVCAPS_PARMS = win32more.Media.Multimedia.MCI_GETDEVCAPS_PARMS_head
    MCI_GETDEVCAPS_PARMS._pack_ = 1
    MCI_GETDEVCAPS_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwReturn", UInt32),
        ("dwItem", UInt32),
    ]
    return MCI_GETDEVCAPS_PARMS
def _define_MCI_SYSINFO_PARMSA_head():
    class MCI_SYSINFO_PARMSA(Structure):
        pass
    return MCI_SYSINFO_PARMSA
def _define_MCI_SYSINFO_PARMSA():
    MCI_SYSINFO_PARMSA = win32more.Media.Multimedia.MCI_SYSINFO_PARMSA_head
    MCI_SYSINFO_PARMSA._pack_ = 1
    MCI_SYSINFO_PARMSA._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpstrReturn", win32more.Foundation.PSTR),
        ("dwRetSize", UInt32),
        ("dwNumber", UInt32),
        ("wDeviceType", UInt32),
    ]
    return MCI_SYSINFO_PARMSA
def _define_MCI_SYSINFO_PARMSW_head():
    class MCI_SYSINFO_PARMSW(Structure):
        pass
    return MCI_SYSINFO_PARMSW
def _define_MCI_SYSINFO_PARMSW():
    MCI_SYSINFO_PARMSW = win32more.Media.Multimedia.MCI_SYSINFO_PARMSW_head
    MCI_SYSINFO_PARMSW._pack_ = 1
    MCI_SYSINFO_PARMSW._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpstrReturn", win32more.Foundation.PWSTR),
        ("dwRetSize", UInt32),
        ("dwNumber", UInt32),
        ("wDeviceType", UInt32),
    ]
    return MCI_SYSINFO_PARMSW
def _define_MCI_SET_PARMS_head():
    class MCI_SET_PARMS(Structure):
        pass
    return MCI_SET_PARMS
def _define_MCI_SET_PARMS():
    MCI_SET_PARMS = win32more.Media.Multimedia.MCI_SET_PARMS_head
    MCI_SET_PARMS._pack_ = 1
    MCI_SET_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwTimeFormat", UInt32),
        ("dwAudio", UInt32),
    ]
    return MCI_SET_PARMS
def _define_MCI_BREAK_PARMS_head():
    class MCI_BREAK_PARMS(Structure):
        pass
    return MCI_BREAK_PARMS
def _define_MCI_BREAK_PARMS():
    MCI_BREAK_PARMS = win32more.Media.Multimedia.MCI_BREAK_PARMS_head
    MCI_BREAK_PARMS._pack_ = 1
    MCI_BREAK_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("nVirtKey", Int32),
        ("hwndBreak", win32more.Foundation.HWND),
    ]
    return MCI_BREAK_PARMS
def _define_MCI_SAVE_PARMSA_head():
    class MCI_SAVE_PARMSA(Structure):
        pass
    return MCI_SAVE_PARMSA
def _define_MCI_SAVE_PARMSA():
    MCI_SAVE_PARMSA = win32more.Media.Multimedia.MCI_SAVE_PARMSA_head
    MCI_SAVE_PARMSA._pack_ = 1
    MCI_SAVE_PARMSA._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpfilename", win32more.Foundation.PSTR),
    ]
    return MCI_SAVE_PARMSA
def _define_MCI_SAVE_PARMSW_head():
    class MCI_SAVE_PARMSW(Structure):
        pass
    return MCI_SAVE_PARMSW
def _define_MCI_SAVE_PARMSW():
    MCI_SAVE_PARMSW = win32more.Media.Multimedia.MCI_SAVE_PARMSW_head
    MCI_SAVE_PARMSW._pack_ = 1
    MCI_SAVE_PARMSW._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpfilename", win32more.Foundation.PWSTR),
    ]
    return MCI_SAVE_PARMSW
def _define_MCI_LOAD_PARMSA_head():
    class MCI_LOAD_PARMSA(Structure):
        pass
    return MCI_LOAD_PARMSA
def _define_MCI_LOAD_PARMSA():
    MCI_LOAD_PARMSA = win32more.Media.Multimedia.MCI_LOAD_PARMSA_head
    MCI_LOAD_PARMSA._pack_ = 1
    MCI_LOAD_PARMSA._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpfilename", win32more.Foundation.PSTR),
    ]
    return MCI_LOAD_PARMSA
def _define_MCI_LOAD_PARMSW_head():
    class MCI_LOAD_PARMSW(Structure):
        pass
    return MCI_LOAD_PARMSW
def _define_MCI_LOAD_PARMSW():
    MCI_LOAD_PARMSW = win32more.Media.Multimedia.MCI_LOAD_PARMSW_head
    MCI_LOAD_PARMSW._pack_ = 1
    MCI_LOAD_PARMSW._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpfilename", win32more.Foundation.PWSTR),
    ]
    return MCI_LOAD_PARMSW
def _define_MCI_RECORD_PARMS_head():
    class MCI_RECORD_PARMS(Structure):
        pass
    return MCI_RECORD_PARMS
def _define_MCI_RECORD_PARMS():
    MCI_RECORD_PARMS = win32more.Media.Multimedia.MCI_RECORD_PARMS_head
    MCI_RECORD_PARMS._pack_ = 1
    MCI_RECORD_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwFrom", UInt32),
        ("dwTo", UInt32),
    ]
    return MCI_RECORD_PARMS
def _define_MCI_VD_PLAY_PARMS_head():
    class MCI_VD_PLAY_PARMS(Structure):
        pass
    return MCI_VD_PLAY_PARMS
def _define_MCI_VD_PLAY_PARMS():
    MCI_VD_PLAY_PARMS = win32more.Media.Multimedia.MCI_VD_PLAY_PARMS_head
    MCI_VD_PLAY_PARMS._pack_ = 1
    MCI_VD_PLAY_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwFrom", UInt32),
        ("dwTo", UInt32),
        ("dwSpeed", UInt32),
    ]
    return MCI_VD_PLAY_PARMS
def _define_MCI_VD_STEP_PARMS_head():
    class MCI_VD_STEP_PARMS(Structure):
        pass
    return MCI_VD_STEP_PARMS
def _define_MCI_VD_STEP_PARMS():
    MCI_VD_STEP_PARMS = win32more.Media.Multimedia.MCI_VD_STEP_PARMS_head
    MCI_VD_STEP_PARMS._pack_ = 1
    MCI_VD_STEP_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwFrames", UInt32),
    ]
    return MCI_VD_STEP_PARMS
def _define_MCI_VD_ESCAPE_PARMSA_head():
    class MCI_VD_ESCAPE_PARMSA(Structure):
        pass
    return MCI_VD_ESCAPE_PARMSA
def _define_MCI_VD_ESCAPE_PARMSA():
    MCI_VD_ESCAPE_PARMSA = win32more.Media.Multimedia.MCI_VD_ESCAPE_PARMSA_head
    MCI_VD_ESCAPE_PARMSA._pack_ = 1
    MCI_VD_ESCAPE_PARMSA._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpstrCommand", win32more.Foundation.PSTR),
    ]
    return MCI_VD_ESCAPE_PARMSA
def _define_MCI_VD_ESCAPE_PARMSW_head():
    class MCI_VD_ESCAPE_PARMSW(Structure):
        pass
    return MCI_VD_ESCAPE_PARMSW
def _define_MCI_VD_ESCAPE_PARMSW():
    MCI_VD_ESCAPE_PARMSW = win32more.Media.Multimedia.MCI_VD_ESCAPE_PARMSW_head
    MCI_VD_ESCAPE_PARMSW._pack_ = 1
    MCI_VD_ESCAPE_PARMSW._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpstrCommand", win32more.Foundation.PWSTR),
    ]
    return MCI_VD_ESCAPE_PARMSW
def _define_MCI_WAVE_OPEN_PARMSA_head():
    class MCI_WAVE_OPEN_PARMSA(Structure):
        pass
    return MCI_WAVE_OPEN_PARMSA
def _define_MCI_WAVE_OPEN_PARMSA():
    MCI_WAVE_OPEN_PARMSA = win32more.Media.Multimedia.MCI_WAVE_OPEN_PARMSA_head
    MCI_WAVE_OPEN_PARMSA._pack_ = 1
    MCI_WAVE_OPEN_PARMSA._fields_ = [
        ("dwCallback", UIntPtr),
        ("wDeviceID", UInt32),
        ("lpstrDeviceType", win32more.Foundation.PSTR),
        ("lpstrElementName", win32more.Foundation.PSTR),
        ("lpstrAlias", win32more.Foundation.PSTR),
        ("dwBufferSeconds", UInt32),
    ]
    return MCI_WAVE_OPEN_PARMSA
def _define_MCI_WAVE_OPEN_PARMSW_head():
    class MCI_WAVE_OPEN_PARMSW(Structure):
        pass
    return MCI_WAVE_OPEN_PARMSW
def _define_MCI_WAVE_OPEN_PARMSW():
    MCI_WAVE_OPEN_PARMSW = win32more.Media.Multimedia.MCI_WAVE_OPEN_PARMSW_head
    MCI_WAVE_OPEN_PARMSW._pack_ = 1
    MCI_WAVE_OPEN_PARMSW._fields_ = [
        ("dwCallback", UIntPtr),
        ("wDeviceID", UInt32),
        ("lpstrDeviceType", win32more.Foundation.PWSTR),
        ("lpstrElementName", win32more.Foundation.PWSTR),
        ("lpstrAlias", win32more.Foundation.PWSTR),
        ("dwBufferSeconds", UInt32),
    ]
    return MCI_WAVE_OPEN_PARMSW
def _define_MCI_WAVE_DELETE_PARMS_head():
    class MCI_WAVE_DELETE_PARMS(Structure):
        pass
    return MCI_WAVE_DELETE_PARMS
def _define_MCI_WAVE_DELETE_PARMS():
    MCI_WAVE_DELETE_PARMS = win32more.Media.Multimedia.MCI_WAVE_DELETE_PARMS_head
    MCI_WAVE_DELETE_PARMS._pack_ = 1
    MCI_WAVE_DELETE_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwFrom", UInt32),
        ("dwTo", UInt32),
    ]
    return MCI_WAVE_DELETE_PARMS
def _define_MCI_WAVE_SET_PARMS_head():
    class MCI_WAVE_SET_PARMS(Structure):
        pass
    return MCI_WAVE_SET_PARMS
def _define_MCI_WAVE_SET_PARMS():
    MCI_WAVE_SET_PARMS = win32more.Media.Multimedia.MCI_WAVE_SET_PARMS_head
    MCI_WAVE_SET_PARMS._pack_ = 1
    MCI_WAVE_SET_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwTimeFormat", UInt32),
        ("dwAudio", UInt32),
        ("wInput", UInt32),
        ("wOutput", UInt32),
        ("wFormatTag", UInt16),
        ("wReserved2", UInt16),
        ("nChannels", UInt16),
        ("wReserved3", UInt16),
        ("nSamplesPerSec", UInt32),
        ("nAvgBytesPerSec", UInt32),
        ("nBlockAlign", UInt16),
        ("wReserved4", UInt16),
        ("wBitsPerSample", UInt16),
        ("wReserved5", UInt16),
    ]
    return MCI_WAVE_SET_PARMS
def _define_MCI_SEQ_SET_PARMS_head():
    class MCI_SEQ_SET_PARMS(Structure):
        pass
    return MCI_SEQ_SET_PARMS
def _define_MCI_SEQ_SET_PARMS():
    MCI_SEQ_SET_PARMS = win32more.Media.Multimedia.MCI_SEQ_SET_PARMS_head
    MCI_SEQ_SET_PARMS._pack_ = 1
    MCI_SEQ_SET_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwTimeFormat", UInt32),
        ("dwAudio", UInt32),
        ("dwTempo", UInt32),
        ("dwPort", UInt32),
        ("dwSlave", UInt32),
        ("dwMaster", UInt32),
        ("dwOffset", UInt32),
    ]
    return MCI_SEQ_SET_PARMS
def _define_MCI_ANIM_OPEN_PARMSA_head():
    class MCI_ANIM_OPEN_PARMSA(Structure):
        pass
    return MCI_ANIM_OPEN_PARMSA
def _define_MCI_ANIM_OPEN_PARMSA():
    MCI_ANIM_OPEN_PARMSA = win32more.Media.Multimedia.MCI_ANIM_OPEN_PARMSA_head
    MCI_ANIM_OPEN_PARMSA._pack_ = 1
    MCI_ANIM_OPEN_PARMSA._fields_ = [
        ("dwCallback", UIntPtr),
        ("wDeviceID", UInt32),
        ("lpstrDeviceType", win32more.Foundation.PSTR),
        ("lpstrElementName", win32more.Foundation.PSTR),
        ("lpstrAlias", win32more.Foundation.PSTR),
        ("dwStyle", UInt32),
        ("hWndParent", win32more.Foundation.HWND),
    ]
    return MCI_ANIM_OPEN_PARMSA
def _define_MCI_ANIM_OPEN_PARMSW_head():
    class MCI_ANIM_OPEN_PARMSW(Structure):
        pass
    return MCI_ANIM_OPEN_PARMSW
def _define_MCI_ANIM_OPEN_PARMSW():
    MCI_ANIM_OPEN_PARMSW = win32more.Media.Multimedia.MCI_ANIM_OPEN_PARMSW_head
    MCI_ANIM_OPEN_PARMSW._pack_ = 1
    MCI_ANIM_OPEN_PARMSW._fields_ = [
        ("dwCallback", UIntPtr),
        ("wDeviceID", UInt32),
        ("lpstrDeviceType", win32more.Foundation.PWSTR),
        ("lpstrElementName", win32more.Foundation.PWSTR),
        ("lpstrAlias", win32more.Foundation.PWSTR),
        ("dwStyle", UInt32),
        ("hWndParent", win32more.Foundation.HWND),
    ]
    return MCI_ANIM_OPEN_PARMSW
def _define_MCI_ANIM_PLAY_PARMS_head():
    class MCI_ANIM_PLAY_PARMS(Structure):
        pass
    return MCI_ANIM_PLAY_PARMS
def _define_MCI_ANIM_PLAY_PARMS():
    MCI_ANIM_PLAY_PARMS = win32more.Media.Multimedia.MCI_ANIM_PLAY_PARMS_head
    MCI_ANIM_PLAY_PARMS._pack_ = 1
    MCI_ANIM_PLAY_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwFrom", UInt32),
        ("dwTo", UInt32),
        ("dwSpeed", UInt32),
    ]
    return MCI_ANIM_PLAY_PARMS
def _define_MCI_ANIM_STEP_PARMS_head():
    class MCI_ANIM_STEP_PARMS(Structure):
        pass
    return MCI_ANIM_STEP_PARMS
def _define_MCI_ANIM_STEP_PARMS():
    MCI_ANIM_STEP_PARMS = win32more.Media.Multimedia.MCI_ANIM_STEP_PARMS_head
    MCI_ANIM_STEP_PARMS._pack_ = 1
    MCI_ANIM_STEP_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwFrames", UInt32),
    ]
    return MCI_ANIM_STEP_PARMS
def _define_MCI_ANIM_WINDOW_PARMSA_head():
    class MCI_ANIM_WINDOW_PARMSA(Structure):
        pass
    return MCI_ANIM_WINDOW_PARMSA
def _define_MCI_ANIM_WINDOW_PARMSA():
    MCI_ANIM_WINDOW_PARMSA = win32more.Media.Multimedia.MCI_ANIM_WINDOW_PARMSA_head
    MCI_ANIM_WINDOW_PARMSA._pack_ = 1
    MCI_ANIM_WINDOW_PARMSA._fields_ = [
        ("dwCallback", UIntPtr),
        ("hWnd", win32more.Foundation.HWND),
        ("nCmdShow", UInt32),
        ("lpstrText", win32more.Foundation.PSTR),
    ]
    return MCI_ANIM_WINDOW_PARMSA
def _define_MCI_ANIM_WINDOW_PARMSW_head():
    class MCI_ANIM_WINDOW_PARMSW(Structure):
        pass
    return MCI_ANIM_WINDOW_PARMSW
def _define_MCI_ANIM_WINDOW_PARMSW():
    MCI_ANIM_WINDOW_PARMSW = win32more.Media.Multimedia.MCI_ANIM_WINDOW_PARMSW_head
    MCI_ANIM_WINDOW_PARMSW._pack_ = 1
    MCI_ANIM_WINDOW_PARMSW._fields_ = [
        ("dwCallback", UIntPtr),
        ("hWnd", win32more.Foundation.HWND),
        ("nCmdShow", UInt32),
        ("lpstrText", win32more.Foundation.PWSTR),
    ]
    return MCI_ANIM_WINDOW_PARMSW
def _define_MCI_ANIM_RECT_PARMS_head():
    class MCI_ANIM_RECT_PARMS(Structure):
        pass
    return MCI_ANIM_RECT_PARMS
def _define_MCI_ANIM_RECT_PARMS():
    MCI_ANIM_RECT_PARMS = win32more.Media.Multimedia.MCI_ANIM_RECT_PARMS_head
    MCI_ANIM_RECT_PARMS._pack_ = 1
    MCI_ANIM_RECT_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("rc", win32more.Foundation.RECT),
    ]
    return MCI_ANIM_RECT_PARMS
def _define_MCI_ANIM_UPDATE_PARMS_head():
    class MCI_ANIM_UPDATE_PARMS(Structure):
        pass
    return MCI_ANIM_UPDATE_PARMS
def _define_MCI_ANIM_UPDATE_PARMS():
    MCI_ANIM_UPDATE_PARMS = win32more.Media.Multimedia.MCI_ANIM_UPDATE_PARMS_head
    MCI_ANIM_UPDATE_PARMS._pack_ = 1
    MCI_ANIM_UPDATE_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("rc", win32more.Foundation.RECT),
        ("hDC", win32more.Graphics.Gdi.HDC),
    ]
    return MCI_ANIM_UPDATE_PARMS
def _define_MCI_OVLY_OPEN_PARMSA_head():
    class MCI_OVLY_OPEN_PARMSA(Structure):
        pass
    return MCI_OVLY_OPEN_PARMSA
def _define_MCI_OVLY_OPEN_PARMSA():
    MCI_OVLY_OPEN_PARMSA = win32more.Media.Multimedia.MCI_OVLY_OPEN_PARMSA_head
    MCI_OVLY_OPEN_PARMSA._pack_ = 1
    MCI_OVLY_OPEN_PARMSA._fields_ = [
        ("dwCallback", UIntPtr),
        ("wDeviceID", UInt32),
        ("lpstrDeviceType", win32more.Foundation.PSTR),
        ("lpstrElementName", win32more.Foundation.PSTR),
        ("lpstrAlias", win32more.Foundation.PSTR),
        ("dwStyle", UInt32),
        ("hWndParent", win32more.Foundation.HWND),
    ]
    return MCI_OVLY_OPEN_PARMSA
def _define_MCI_OVLY_OPEN_PARMSW_head():
    class MCI_OVLY_OPEN_PARMSW(Structure):
        pass
    return MCI_OVLY_OPEN_PARMSW
def _define_MCI_OVLY_OPEN_PARMSW():
    MCI_OVLY_OPEN_PARMSW = win32more.Media.Multimedia.MCI_OVLY_OPEN_PARMSW_head
    MCI_OVLY_OPEN_PARMSW._pack_ = 1
    MCI_OVLY_OPEN_PARMSW._fields_ = [
        ("dwCallback", UIntPtr),
        ("wDeviceID", UInt32),
        ("lpstrDeviceType", win32more.Foundation.PWSTR),
        ("lpstrElementName", win32more.Foundation.PWSTR),
        ("lpstrAlias", win32more.Foundation.PWSTR),
        ("dwStyle", UInt32),
        ("hWndParent", win32more.Foundation.HWND),
    ]
    return MCI_OVLY_OPEN_PARMSW
def _define_MCI_OVLY_WINDOW_PARMSA_head():
    class MCI_OVLY_WINDOW_PARMSA(Structure):
        pass
    return MCI_OVLY_WINDOW_PARMSA
def _define_MCI_OVLY_WINDOW_PARMSA():
    MCI_OVLY_WINDOW_PARMSA = win32more.Media.Multimedia.MCI_OVLY_WINDOW_PARMSA_head
    MCI_OVLY_WINDOW_PARMSA._pack_ = 1
    MCI_OVLY_WINDOW_PARMSA._fields_ = [
        ("dwCallback", UIntPtr),
        ("hWnd", win32more.Foundation.HWND),
        ("nCmdShow", UInt32),
        ("lpstrText", win32more.Foundation.PSTR),
    ]
    return MCI_OVLY_WINDOW_PARMSA
def _define_MCI_OVLY_WINDOW_PARMSW_head():
    class MCI_OVLY_WINDOW_PARMSW(Structure):
        pass
    return MCI_OVLY_WINDOW_PARMSW
def _define_MCI_OVLY_WINDOW_PARMSW():
    MCI_OVLY_WINDOW_PARMSW = win32more.Media.Multimedia.MCI_OVLY_WINDOW_PARMSW_head
    MCI_OVLY_WINDOW_PARMSW._pack_ = 1
    MCI_OVLY_WINDOW_PARMSW._fields_ = [
        ("dwCallback", UIntPtr),
        ("hWnd", win32more.Foundation.HWND),
        ("nCmdShow", UInt32),
        ("lpstrText", win32more.Foundation.PWSTR),
    ]
    return MCI_OVLY_WINDOW_PARMSW
def _define_MCI_OVLY_RECT_PARMS_head():
    class MCI_OVLY_RECT_PARMS(Structure):
        pass
    return MCI_OVLY_RECT_PARMS
def _define_MCI_OVLY_RECT_PARMS():
    MCI_OVLY_RECT_PARMS = win32more.Media.Multimedia.MCI_OVLY_RECT_PARMS_head
    MCI_OVLY_RECT_PARMS._pack_ = 1
    MCI_OVLY_RECT_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("rc", win32more.Foundation.RECT),
    ]
    return MCI_OVLY_RECT_PARMS
def _define_MCI_OVLY_SAVE_PARMSA_head():
    class MCI_OVLY_SAVE_PARMSA(Structure):
        pass
    return MCI_OVLY_SAVE_PARMSA
def _define_MCI_OVLY_SAVE_PARMSA():
    MCI_OVLY_SAVE_PARMSA = win32more.Media.Multimedia.MCI_OVLY_SAVE_PARMSA_head
    MCI_OVLY_SAVE_PARMSA._pack_ = 1
    MCI_OVLY_SAVE_PARMSA._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpfilename", win32more.Foundation.PSTR),
        ("rc", win32more.Foundation.RECT),
    ]
    return MCI_OVLY_SAVE_PARMSA
def _define_MCI_OVLY_SAVE_PARMSW_head():
    class MCI_OVLY_SAVE_PARMSW(Structure):
        pass
    return MCI_OVLY_SAVE_PARMSW
def _define_MCI_OVLY_SAVE_PARMSW():
    MCI_OVLY_SAVE_PARMSW = win32more.Media.Multimedia.MCI_OVLY_SAVE_PARMSW_head
    MCI_OVLY_SAVE_PARMSW._pack_ = 1
    MCI_OVLY_SAVE_PARMSW._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpfilename", win32more.Foundation.PWSTR),
        ("rc", win32more.Foundation.RECT),
    ]
    return MCI_OVLY_SAVE_PARMSW
def _define_MCI_OVLY_LOAD_PARMSA_head():
    class MCI_OVLY_LOAD_PARMSA(Structure):
        pass
    return MCI_OVLY_LOAD_PARMSA
def _define_MCI_OVLY_LOAD_PARMSA():
    MCI_OVLY_LOAD_PARMSA = win32more.Media.Multimedia.MCI_OVLY_LOAD_PARMSA_head
    MCI_OVLY_LOAD_PARMSA._pack_ = 1
    MCI_OVLY_LOAD_PARMSA._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpfilename", win32more.Foundation.PSTR),
        ("rc", win32more.Foundation.RECT),
    ]
    return MCI_OVLY_LOAD_PARMSA
def _define_MCI_OVLY_LOAD_PARMSW_head():
    class MCI_OVLY_LOAD_PARMSW(Structure):
        pass
    return MCI_OVLY_LOAD_PARMSW
def _define_MCI_OVLY_LOAD_PARMSW():
    MCI_OVLY_LOAD_PARMSW = win32more.Media.Multimedia.MCI_OVLY_LOAD_PARMSW_head
    MCI_OVLY_LOAD_PARMSW._pack_ = 1
    MCI_OVLY_LOAD_PARMSW._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpfilename", win32more.Foundation.PWSTR),
        ("rc", win32more.Foundation.RECT),
    ]
    return MCI_OVLY_LOAD_PARMSW
def _define_DRVCONFIGINFOEX_head():
    class DRVCONFIGINFOEX(Structure):
        pass
    return DRVCONFIGINFOEX
def _define_DRVCONFIGINFOEX():
    DRVCONFIGINFOEX = win32more.Media.Multimedia.DRVCONFIGINFOEX_head
    DRVCONFIGINFOEX._pack_ = 1
    DRVCONFIGINFOEX._fields_ = [
        ("dwDCISize", UInt32),
        ("lpszDCISectionName", win32more.Foundation.PWSTR),
        ("lpszDCIAliasName", win32more.Foundation.PWSTR),
        ("dnDevNode", UInt32),
    ]
    return DRVCONFIGINFOEX
def _define_DRVCONFIGINFO_head():
    class DRVCONFIGINFO(Structure):
        pass
    return DRVCONFIGINFO
def _define_DRVCONFIGINFO():
    DRVCONFIGINFO = win32more.Media.Multimedia.DRVCONFIGINFO_head
    DRVCONFIGINFO._pack_ = 1
    DRVCONFIGINFO._fields_ = [
        ("dwDCISize", UInt32),
        ("lpszDCISectionName", win32more.Foundation.PWSTR),
        ("lpszDCIAliasName", win32more.Foundation.PWSTR),
    ]
    return DRVCONFIGINFO
def _define_DRIVERPROC():
    return CFUNCTYPE(win32more.Foundation.LRESULT,UIntPtr,win32more.Media.Multimedia.HDRVR,UInt32,win32more.Foundation.LPARAM,win32more.Foundation.LPARAM, use_last_error=False)
def _define_DRIVERMSGPROC():
    return CFUNCTYPE(UInt32,UInt32,UInt32,UIntPtr,UIntPtr,UIntPtr, use_last_error=False)
def _define_LPMMIOPROC():
    return CFUNCTYPE(win32more.Foundation.LRESULT,win32more.Foundation.PSTR,UInt32,win32more.Foundation.LPARAM,win32more.Foundation.LPARAM, use_last_error=False)
def _define_MMIOINFO_head():
    class MMIOINFO(Structure):
        pass
    return MMIOINFO
def _define_MMIOINFO():
    MMIOINFO = win32more.Media.Multimedia.MMIOINFO_head
    MMIOINFO._pack_ = 1
    MMIOINFO._fields_ = [
        ("dwFlags", UInt32),
        ("fccIOProc", UInt32),
        ("pIOProc", win32more.Media.Multimedia.LPMMIOPROC),
        ("wErrorRet", UInt32),
        ("htask", win32more.Media.HTASK),
        ("cchBuffer", Int32),
        ("pchBuffer", POINTER(SByte)),
        ("pchNext", POINTER(SByte)),
        ("pchEndRead", POINTER(SByte)),
        ("pchEndWrite", POINTER(SByte)),
        ("lBufOffset", Int32),
        ("lDiskOffset", Int32),
        ("adwInfo", UInt32 * 3),
        ("dwReserved1", UInt32),
        ("dwReserved2", UInt32),
        ("hmmio", win32more.Media.Multimedia.HMMIO),
    ]
    return MMIOINFO
def _define_MMCKINFO_head():
    class MMCKINFO(Structure):
        pass
    return MMCKINFO
def _define_MMCKINFO():
    MMCKINFO = win32more.Media.Multimedia.MMCKINFO_head
    MMCKINFO._pack_ = 1
    MMCKINFO._fields_ = [
        ("ckid", UInt32),
        ("cksize", UInt32),
        ("fccType", UInt32),
        ("dwDataOffset", UInt32),
        ("dwFlags", UInt32),
    ]
    return MMCKINFO
def _define_JOYCAPSA_head():
    class JOYCAPSA(Structure):
        pass
    return JOYCAPSA
def _define_JOYCAPSA():
    JOYCAPSA = win32more.Media.Multimedia.JOYCAPSA_head
    JOYCAPSA._pack_ = 1
    JOYCAPSA._fields_ = [
        ("wMid", UInt16),
        ("wPid", UInt16),
        ("szPname", win32more.Foundation.CHAR * 32),
        ("wXmin", UInt32),
        ("wXmax", UInt32),
        ("wYmin", UInt32),
        ("wYmax", UInt32),
        ("wZmin", UInt32),
        ("wZmax", UInt32),
        ("wNumButtons", UInt32),
        ("wPeriodMin", UInt32),
        ("wPeriodMax", UInt32),
        ("wRmin", UInt32),
        ("wRmax", UInt32),
        ("wUmin", UInt32),
        ("wUmax", UInt32),
        ("wVmin", UInt32),
        ("wVmax", UInt32),
        ("wCaps", UInt32),
        ("wMaxAxes", UInt32),
        ("wNumAxes", UInt32),
        ("wMaxButtons", UInt32),
        ("szRegKey", win32more.Foundation.CHAR * 32),
        ("szOEMVxD", win32more.Foundation.CHAR * 260),
    ]
    return JOYCAPSA
def _define_JOYCAPSW_head():
    class JOYCAPSW(Structure):
        pass
    return JOYCAPSW
def _define_JOYCAPSW():
    JOYCAPSW = win32more.Media.Multimedia.JOYCAPSW_head
    JOYCAPSW._pack_ = 1
    JOYCAPSW._fields_ = [
        ("wMid", UInt16),
        ("wPid", UInt16),
        ("szPname", Char * 32),
        ("wXmin", UInt32),
        ("wXmax", UInt32),
        ("wYmin", UInt32),
        ("wYmax", UInt32),
        ("wZmin", UInt32),
        ("wZmax", UInt32),
        ("wNumButtons", UInt32),
        ("wPeriodMin", UInt32),
        ("wPeriodMax", UInt32),
        ("wRmin", UInt32),
        ("wRmax", UInt32),
        ("wUmin", UInt32),
        ("wUmax", UInt32),
        ("wVmin", UInt32),
        ("wVmax", UInt32),
        ("wCaps", UInt32),
        ("wMaxAxes", UInt32),
        ("wNumAxes", UInt32),
        ("wMaxButtons", UInt32),
        ("szRegKey", Char * 32),
        ("szOEMVxD", Char * 260),
    ]
    return JOYCAPSW
def _define_JOYCAPS2A_head():
    class JOYCAPS2A(Structure):
        pass
    return JOYCAPS2A
def _define_JOYCAPS2A():
    JOYCAPS2A = win32more.Media.Multimedia.JOYCAPS2A_head
    JOYCAPS2A._pack_ = 1
    JOYCAPS2A._fields_ = [
        ("wMid", UInt16),
        ("wPid", UInt16),
        ("szPname", win32more.Foundation.CHAR * 32),
        ("wXmin", UInt32),
        ("wXmax", UInt32),
        ("wYmin", UInt32),
        ("wYmax", UInt32),
        ("wZmin", UInt32),
        ("wZmax", UInt32),
        ("wNumButtons", UInt32),
        ("wPeriodMin", UInt32),
        ("wPeriodMax", UInt32),
        ("wRmin", UInt32),
        ("wRmax", UInt32),
        ("wUmin", UInt32),
        ("wUmax", UInt32),
        ("wVmin", UInt32),
        ("wVmax", UInt32),
        ("wCaps", UInt32),
        ("wMaxAxes", UInt32),
        ("wNumAxes", UInt32),
        ("wMaxButtons", UInt32),
        ("szRegKey", win32more.Foundation.CHAR * 32),
        ("szOEMVxD", win32more.Foundation.CHAR * 260),
        ("ManufacturerGuid", Guid),
        ("ProductGuid", Guid),
        ("NameGuid", Guid),
    ]
    return JOYCAPS2A
def _define_JOYCAPS2W_head():
    class JOYCAPS2W(Structure):
        pass
    return JOYCAPS2W
def _define_JOYCAPS2W():
    JOYCAPS2W = win32more.Media.Multimedia.JOYCAPS2W_head
    JOYCAPS2W._pack_ = 1
    JOYCAPS2W._fields_ = [
        ("wMid", UInt16),
        ("wPid", UInt16),
        ("szPname", Char * 32),
        ("wXmin", UInt32),
        ("wXmax", UInt32),
        ("wYmin", UInt32),
        ("wYmax", UInt32),
        ("wZmin", UInt32),
        ("wZmax", UInt32),
        ("wNumButtons", UInt32),
        ("wPeriodMin", UInt32),
        ("wPeriodMax", UInt32),
        ("wRmin", UInt32),
        ("wRmax", UInt32),
        ("wUmin", UInt32),
        ("wUmax", UInt32),
        ("wVmin", UInt32),
        ("wVmax", UInt32),
        ("wCaps", UInt32),
        ("wMaxAxes", UInt32),
        ("wNumAxes", UInt32),
        ("wMaxButtons", UInt32),
        ("szRegKey", Char * 32),
        ("szOEMVxD", Char * 260),
        ("ManufacturerGuid", Guid),
        ("ProductGuid", Guid),
        ("NameGuid", Guid),
    ]
    return JOYCAPS2W
def _define_JOYINFO_head():
    class JOYINFO(Structure):
        pass
    return JOYINFO
def _define_JOYINFO():
    JOYINFO = win32more.Media.Multimedia.JOYINFO_head
    JOYINFO._pack_ = 1
    JOYINFO._fields_ = [
        ("wXpos", UInt32),
        ("wYpos", UInt32),
        ("wZpos", UInt32),
        ("wButtons", UInt32),
    ]
    return JOYINFO
def _define_JOYINFOEX_head():
    class JOYINFOEX(Structure):
        pass
    return JOYINFOEX
def _define_JOYINFOEX():
    JOYINFOEX = win32more.Media.Multimedia.JOYINFOEX_head
    JOYINFOEX._pack_ = 1
    JOYINFOEX._fields_ = [
        ("dwSize", UInt32),
        ("dwFlags", UInt32),
        ("dwXpos", UInt32),
        ("dwYpos", UInt32),
        ("dwZpos", UInt32),
        ("dwRpos", UInt32),
        ("dwUpos", UInt32),
        ("dwVpos", UInt32),
        ("dwButtons", UInt32),
        ("dwButtonNumber", UInt32),
        ("dwPOV", UInt32),
        ("dwReserved1", UInt32),
        ("dwReserved2", UInt32),
    ]
    return JOYINFOEX
def _define_MCI_DGV_RECT_PARMS_head():
    class MCI_DGV_RECT_PARMS(Structure):
        pass
    return MCI_DGV_RECT_PARMS
def _define_MCI_DGV_RECT_PARMS():
    MCI_DGV_RECT_PARMS = win32more.Media.Multimedia.MCI_DGV_RECT_PARMS_head
    MCI_DGV_RECT_PARMS._pack_ = 1
    MCI_DGV_RECT_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("rc", win32more.Foundation.RECT),
    ]
    return MCI_DGV_RECT_PARMS
def _define_MCI_DGV_CAPTURE_PARMSA_head():
    class MCI_DGV_CAPTURE_PARMSA(Structure):
        pass
    return MCI_DGV_CAPTURE_PARMSA
def _define_MCI_DGV_CAPTURE_PARMSA():
    MCI_DGV_CAPTURE_PARMSA = win32more.Media.Multimedia.MCI_DGV_CAPTURE_PARMSA_head
    MCI_DGV_CAPTURE_PARMSA._pack_ = 1
    MCI_DGV_CAPTURE_PARMSA._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpstrFileName", win32more.Foundation.PSTR),
        ("rc", win32more.Foundation.RECT),
    ]
    return MCI_DGV_CAPTURE_PARMSA
def _define_MCI_DGV_CAPTURE_PARMSW_head():
    class MCI_DGV_CAPTURE_PARMSW(Structure):
        pass
    return MCI_DGV_CAPTURE_PARMSW
def _define_MCI_DGV_CAPTURE_PARMSW():
    MCI_DGV_CAPTURE_PARMSW = win32more.Media.Multimedia.MCI_DGV_CAPTURE_PARMSW_head
    MCI_DGV_CAPTURE_PARMSW._pack_ = 1
    MCI_DGV_CAPTURE_PARMSW._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpstrFileName", win32more.Foundation.PWSTR),
        ("rc", win32more.Foundation.RECT),
    ]
    return MCI_DGV_CAPTURE_PARMSW
def _define_MCI_DGV_COPY_PARMS_head():
    class MCI_DGV_COPY_PARMS(Structure):
        pass
    return MCI_DGV_COPY_PARMS
def _define_MCI_DGV_COPY_PARMS():
    MCI_DGV_COPY_PARMS = win32more.Media.Multimedia.MCI_DGV_COPY_PARMS_head
    MCI_DGV_COPY_PARMS._pack_ = 1
    MCI_DGV_COPY_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwFrom", UInt32),
        ("dwTo", UInt32),
        ("rc", win32more.Foundation.RECT),
        ("dwAudioStream", UInt32),
        ("dwVideoStream", UInt32),
    ]
    return MCI_DGV_COPY_PARMS
def _define_MCI_DGV_CUE_PARMS_head():
    class MCI_DGV_CUE_PARMS(Structure):
        pass
    return MCI_DGV_CUE_PARMS
def _define_MCI_DGV_CUE_PARMS():
    MCI_DGV_CUE_PARMS = win32more.Media.Multimedia.MCI_DGV_CUE_PARMS_head
    MCI_DGV_CUE_PARMS._pack_ = 1
    MCI_DGV_CUE_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwTo", UInt32),
    ]
    return MCI_DGV_CUE_PARMS
def _define_MCI_DGV_CUT_PARMS_head():
    class MCI_DGV_CUT_PARMS(Structure):
        pass
    return MCI_DGV_CUT_PARMS
def _define_MCI_DGV_CUT_PARMS():
    MCI_DGV_CUT_PARMS = win32more.Media.Multimedia.MCI_DGV_CUT_PARMS_head
    MCI_DGV_CUT_PARMS._pack_ = 1
    MCI_DGV_CUT_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwFrom", UInt32),
        ("dwTo", UInt32),
        ("rc", win32more.Foundation.RECT),
        ("dwAudioStream", UInt32),
        ("dwVideoStream", UInt32),
    ]
    return MCI_DGV_CUT_PARMS
def _define_MCI_DGV_DELETE_PARMS_head():
    class MCI_DGV_DELETE_PARMS(Structure):
        pass
    return MCI_DGV_DELETE_PARMS
def _define_MCI_DGV_DELETE_PARMS():
    MCI_DGV_DELETE_PARMS = win32more.Media.Multimedia.MCI_DGV_DELETE_PARMS_head
    MCI_DGV_DELETE_PARMS._pack_ = 1
    MCI_DGV_DELETE_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwFrom", UInt32),
        ("dwTo", UInt32),
        ("rc", win32more.Foundation.RECT),
        ("dwAudioStream", UInt32),
        ("dwVideoStream", UInt32),
    ]
    return MCI_DGV_DELETE_PARMS
def _define_MCI_DGV_INFO_PARMSA_head():
    class MCI_DGV_INFO_PARMSA(Structure):
        pass
    return MCI_DGV_INFO_PARMSA
def _define_MCI_DGV_INFO_PARMSA():
    MCI_DGV_INFO_PARMSA = win32more.Media.Multimedia.MCI_DGV_INFO_PARMSA_head
    MCI_DGV_INFO_PARMSA._pack_ = 1
    MCI_DGV_INFO_PARMSA._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpstrReturn", win32more.Foundation.PSTR),
        ("dwRetSize", UInt32),
        ("dwItem", UInt32),
    ]
    return MCI_DGV_INFO_PARMSA
def _define_MCI_DGV_INFO_PARMSW_head():
    class MCI_DGV_INFO_PARMSW(Structure):
        pass
    return MCI_DGV_INFO_PARMSW
def _define_MCI_DGV_INFO_PARMSW():
    MCI_DGV_INFO_PARMSW = win32more.Media.Multimedia.MCI_DGV_INFO_PARMSW_head
    MCI_DGV_INFO_PARMSW._pack_ = 1
    MCI_DGV_INFO_PARMSW._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpstrReturn", win32more.Foundation.PWSTR),
        ("dwRetSize", UInt32),
        ("dwItem", UInt32),
    ]
    return MCI_DGV_INFO_PARMSW
def _define_MCI_DGV_LIST_PARMSA_head():
    class MCI_DGV_LIST_PARMSA(Structure):
        pass
    return MCI_DGV_LIST_PARMSA
def _define_MCI_DGV_LIST_PARMSA():
    MCI_DGV_LIST_PARMSA = win32more.Media.Multimedia.MCI_DGV_LIST_PARMSA_head
    MCI_DGV_LIST_PARMSA._pack_ = 1
    MCI_DGV_LIST_PARMSA._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpstrReturn", win32more.Foundation.PSTR),
        ("dwLength", UInt32),
        ("dwNumber", UInt32),
        ("dwItem", UInt32),
        ("lpstrAlgorithm", win32more.Foundation.PSTR),
    ]
    return MCI_DGV_LIST_PARMSA
def _define_MCI_DGV_LIST_PARMSW_head():
    class MCI_DGV_LIST_PARMSW(Structure):
        pass
    return MCI_DGV_LIST_PARMSW
def _define_MCI_DGV_LIST_PARMSW():
    MCI_DGV_LIST_PARMSW = win32more.Media.Multimedia.MCI_DGV_LIST_PARMSW_head
    MCI_DGV_LIST_PARMSW._pack_ = 1
    MCI_DGV_LIST_PARMSW._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpstrReturn", win32more.Foundation.PWSTR),
        ("dwLength", UInt32),
        ("dwNumber", UInt32),
        ("dwItem", UInt32),
        ("lpstrAlgorithm", win32more.Foundation.PWSTR),
    ]
    return MCI_DGV_LIST_PARMSW
def _define_MCI_DGV_MONITOR_PARMS_head():
    class MCI_DGV_MONITOR_PARMS(Structure):
        pass
    return MCI_DGV_MONITOR_PARMS
def _define_MCI_DGV_MONITOR_PARMS():
    MCI_DGV_MONITOR_PARMS = win32more.Media.Multimedia.MCI_DGV_MONITOR_PARMS_head
    MCI_DGV_MONITOR_PARMS._pack_ = 1
    MCI_DGV_MONITOR_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwSource", UInt32),
        ("dwMethod", UInt32),
    ]
    return MCI_DGV_MONITOR_PARMS
def _define_MCI_DGV_OPEN_PARMSA_head():
    class MCI_DGV_OPEN_PARMSA(Structure):
        pass
    return MCI_DGV_OPEN_PARMSA
def _define_MCI_DGV_OPEN_PARMSA():
    MCI_DGV_OPEN_PARMSA = win32more.Media.Multimedia.MCI_DGV_OPEN_PARMSA_head
    MCI_DGV_OPEN_PARMSA._pack_ = 1
    MCI_DGV_OPEN_PARMSA._fields_ = [
        ("dwCallback", UIntPtr),
        ("wDeviceID", UInt32),
        ("lpstrDeviceType", win32more.Foundation.PSTR),
        ("lpstrElementName", win32more.Foundation.PSTR),
        ("lpstrAlias", win32more.Foundation.PSTR),
        ("dwStyle", UInt32),
        ("hWndParent", win32more.Foundation.HWND),
    ]
    return MCI_DGV_OPEN_PARMSA
def _define_MCI_DGV_OPEN_PARMSW_head():
    class MCI_DGV_OPEN_PARMSW(Structure):
        pass
    return MCI_DGV_OPEN_PARMSW
def _define_MCI_DGV_OPEN_PARMSW():
    MCI_DGV_OPEN_PARMSW = win32more.Media.Multimedia.MCI_DGV_OPEN_PARMSW_head
    MCI_DGV_OPEN_PARMSW._pack_ = 1
    MCI_DGV_OPEN_PARMSW._fields_ = [
        ("dwCallback", UIntPtr),
        ("wDeviceID", UInt32),
        ("lpstrDeviceType", win32more.Foundation.PWSTR),
        ("lpstrElementName", win32more.Foundation.PWSTR),
        ("lpstrAlias", win32more.Foundation.PWSTR),
        ("dwStyle", UInt32),
        ("hWndParent", win32more.Foundation.HWND),
    ]
    return MCI_DGV_OPEN_PARMSW
def _define_MCI_DGV_PASTE_PARMS_head():
    class MCI_DGV_PASTE_PARMS(Structure):
        pass
    return MCI_DGV_PASTE_PARMS
def _define_MCI_DGV_PASTE_PARMS():
    MCI_DGV_PASTE_PARMS = win32more.Media.Multimedia.MCI_DGV_PASTE_PARMS_head
    MCI_DGV_PASTE_PARMS._pack_ = 1
    MCI_DGV_PASTE_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwTo", UInt32),
        ("rc", win32more.Foundation.RECT),
        ("dwAudioStream", UInt32),
        ("dwVideoStream", UInt32),
    ]
    return MCI_DGV_PASTE_PARMS
def _define_MCI_DGV_QUALITY_PARMSA_head():
    class MCI_DGV_QUALITY_PARMSA(Structure):
        pass
    return MCI_DGV_QUALITY_PARMSA
def _define_MCI_DGV_QUALITY_PARMSA():
    MCI_DGV_QUALITY_PARMSA = win32more.Media.Multimedia.MCI_DGV_QUALITY_PARMSA_head
    MCI_DGV_QUALITY_PARMSA._pack_ = 1
    MCI_DGV_QUALITY_PARMSA._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwItem", UInt32),
        ("lpstrName", win32more.Foundation.PSTR),
        ("lpstrAlgorithm", UInt32),
        ("dwHandle", UInt32),
    ]
    return MCI_DGV_QUALITY_PARMSA
def _define_MCI_DGV_QUALITY_PARMSW_head():
    class MCI_DGV_QUALITY_PARMSW(Structure):
        pass
    return MCI_DGV_QUALITY_PARMSW
def _define_MCI_DGV_QUALITY_PARMSW():
    MCI_DGV_QUALITY_PARMSW = win32more.Media.Multimedia.MCI_DGV_QUALITY_PARMSW_head
    MCI_DGV_QUALITY_PARMSW._pack_ = 1
    MCI_DGV_QUALITY_PARMSW._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwItem", UInt32),
        ("lpstrName", win32more.Foundation.PWSTR),
        ("lpstrAlgorithm", UInt32),
        ("dwHandle", UInt32),
    ]
    return MCI_DGV_QUALITY_PARMSW
def _define_MCI_DGV_RECORD_PARMS_head():
    class MCI_DGV_RECORD_PARMS(Structure):
        pass
    return MCI_DGV_RECORD_PARMS
def _define_MCI_DGV_RECORD_PARMS():
    MCI_DGV_RECORD_PARMS = win32more.Media.Multimedia.MCI_DGV_RECORD_PARMS_head
    MCI_DGV_RECORD_PARMS._pack_ = 1
    MCI_DGV_RECORD_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwFrom", UInt32),
        ("dwTo", UInt32),
        ("rc", win32more.Foundation.RECT),
        ("dwAudioStream", UInt32),
        ("dwVideoStream", UInt32),
    ]
    return MCI_DGV_RECORD_PARMS
def _define_MCI_DGV_RESERVE_PARMSA_head():
    class MCI_DGV_RESERVE_PARMSA(Structure):
        pass
    return MCI_DGV_RESERVE_PARMSA
def _define_MCI_DGV_RESERVE_PARMSA():
    MCI_DGV_RESERVE_PARMSA = win32more.Media.Multimedia.MCI_DGV_RESERVE_PARMSA_head
    MCI_DGV_RESERVE_PARMSA._pack_ = 1
    MCI_DGV_RESERVE_PARMSA._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpstrPath", win32more.Foundation.PSTR),
        ("dwSize", UInt32),
    ]
    return MCI_DGV_RESERVE_PARMSA
def _define_MCI_DGV_RESERVE_PARMSW_head():
    class MCI_DGV_RESERVE_PARMSW(Structure):
        pass
    return MCI_DGV_RESERVE_PARMSW
def _define_MCI_DGV_RESERVE_PARMSW():
    MCI_DGV_RESERVE_PARMSW = win32more.Media.Multimedia.MCI_DGV_RESERVE_PARMSW_head
    MCI_DGV_RESERVE_PARMSW._pack_ = 1
    MCI_DGV_RESERVE_PARMSW._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpstrPath", win32more.Foundation.PWSTR),
        ("dwSize", UInt32),
    ]
    return MCI_DGV_RESERVE_PARMSW
def _define_MCI_DGV_RESTORE_PARMSA_head():
    class MCI_DGV_RESTORE_PARMSA(Structure):
        pass
    return MCI_DGV_RESTORE_PARMSA
def _define_MCI_DGV_RESTORE_PARMSA():
    MCI_DGV_RESTORE_PARMSA = win32more.Media.Multimedia.MCI_DGV_RESTORE_PARMSA_head
    MCI_DGV_RESTORE_PARMSA._pack_ = 1
    MCI_DGV_RESTORE_PARMSA._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpstrFileName", win32more.Foundation.PSTR),
        ("rc", win32more.Foundation.RECT),
    ]
    return MCI_DGV_RESTORE_PARMSA
def _define_MCI_DGV_RESTORE_PARMSW_head():
    class MCI_DGV_RESTORE_PARMSW(Structure):
        pass
    return MCI_DGV_RESTORE_PARMSW
def _define_MCI_DGV_RESTORE_PARMSW():
    MCI_DGV_RESTORE_PARMSW = win32more.Media.Multimedia.MCI_DGV_RESTORE_PARMSW_head
    MCI_DGV_RESTORE_PARMSW._pack_ = 1
    MCI_DGV_RESTORE_PARMSW._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpstrFileName", win32more.Foundation.PWSTR),
        ("rc", win32more.Foundation.RECT),
    ]
    return MCI_DGV_RESTORE_PARMSW
def _define_MCI_DGV_SAVE_PARMSA_head():
    class MCI_DGV_SAVE_PARMSA(Structure):
        pass
    return MCI_DGV_SAVE_PARMSA
def _define_MCI_DGV_SAVE_PARMSA():
    MCI_DGV_SAVE_PARMSA = win32more.Media.Multimedia.MCI_DGV_SAVE_PARMSA_head
    MCI_DGV_SAVE_PARMSA._pack_ = 1
    MCI_DGV_SAVE_PARMSA._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpstrFileName", win32more.Foundation.PSTR),
        ("rc", win32more.Foundation.RECT),
    ]
    return MCI_DGV_SAVE_PARMSA
def _define_MCI_DGV_SAVE_PARMSW_head():
    class MCI_DGV_SAVE_PARMSW(Structure):
        pass
    return MCI_DGV_SAVE_PARMSW
def _define_MCI_DGV_SAVE_PARMSW():
    MCI_DGV_SAVE_PARMSW = win32more.Media.Multimedia.MCI_DGV_SAVE_PARMSW_head
    MCI_DGV_SAVE_PARMSW._pack_ = 1
    MCI_DGV_SAVE_PARMSW._fields_ = [
        ("dwCallback", UIntPtr),
        ("lpstrFileName", win32more.Foundation.PWSTR),
        ("rc", win32more.Foundation.RECT),
    ]
    return MCI_DGV_SAVE_PARMSW
def _define_MCI_DGV_SET_PARMS_head():
    class MCI_DGV_SET_PARMS(Structure):
        pass
    return MCI_DGV_SET_PARMS
def _define_MCI_DGV_SET_PARMS():
    MCI_DGV_SET_PARMS = win32more.Media.Multimedia.MCI_DGV_SET_PARMS_head
    MCI_DGV_SET_PARMS._pack_ = 1
    MCI_DGV_SET_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwTimeFormat", UInt32),
        ("dwAudio", UInt32),
        ("dwFileFormat", UInt32),
        ("dwSpeed", UInt32),
    ]
    return MCI_DGV_SET_PARMS
def _define_MCI_DGV_SETAUDIO_PARMSA_head():
    class MCI_DGV_SETAUDIO_PARMSA(Structure):
        pass
    return MCI_DGV_SETAUDIO_PARMSA
def _define_MCI_DGV_SETAUDIO_PARMSA():
    MCI_DGV_SETAUDIO_PARMSA = win32more.Media.Multimedia.MCI_DGV_SETAUDIO_PARMSA_head
    MCI_DGV_SETAUDIO_PARMSA._pack_ = 1
    MCI_DGV_SETAUDIO_PARMSA._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwItem", UInt32),
        ("dwValue", UInt32),
        ("dwOver", UInt32),
        ("lpstrAlgorithm", win32more.Foundation.PSTR),
        ("lpstrQuality", win32more.Foundation.PSTR),
    ]
    return MCI_DGV_SETAUDIO_PARMSA
def _define_MCI_DGV_SETAUDIO_PARMSW_head():
    class MCI_DGV_SETAUDIO_PARMSW(Structure):
        pass
    return MCI_DGV_SETAUDIO_PARMSW
def _define_MCI_DGV_SETAUDIO_PARMSW():
    MCI_DGV_SETAUDIO_PARMSW = win32more.Media.Multimedia.MCI_DGV_SETAUDIO_PARMSW_head
    MCI_DGV_SETAUDIO_PARMSW._pack_ = 1
    MCI_DGV_SETAUDIO_PARMSW._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwItem", UInt32),
        ("dwValue", UInt32),
        ("dwOver", UInt32),
        ("lpstrAlgorithm", win32more.Foundation.PWSTR),
        ("lpstrQuality", win32more.Foundation.PWSTR),
    ]
    return MCI_DGV_SETAUDIO_PARMSW
def _define_MCI_DGV_SIGNAL_PARMS_head():
    class MCI_DGV_SIGNAL_PARMS(Structure):
        pass
    return MCI_DGV_SIGNAL_PARMS
def _define_MCI_DGV_SIGNAL_PARMS():
    MCI_DGV_SIGNAL_PARMS = win32more.Media.Multimedia.MCI_DGV_SIGNAL_PARMS_head
    MCI_DGV_SIGNAL_PARMS._pack_ = 1
    MCI_DGV_SIGNAL_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwPosition", UInt32),
        ("dwPeriod", UInt32),
        ("dwUserParm", UInt32),
    ]
    return MCI_DGV_SIGNAL_PARMS
def _define_MCI_DGV_SETVIDEO_PARMSA_head():
    class MCI_DGV_SETVIDEO_PARMSA(Structure):
        pass
    return MCI_DGV_SETVIDEO_PARMSA
def _define_MCI_DGV_SETVIDEO_PARMSA():
    MCI_DGV_SETVIDEO_PARMSA = win32more.Media.Multimedia.MCI_DGV_SETVIDEO_PARMSA_head
    MCI_DGV_SETVIDEO_PARMSA._pack_ = 1
    MCI_DGV_SETVIDEO_PARMSA._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwItem", UInt32),
        ("dwValue", UInt32),
        ("dwOver", UInt32),
        ("lpstrAlgorithm", win32more.Foundation.PSTR),
        ("lpstrQuality", win32more.Foundation.PSTR),
        ("dwSourceNumber", UInt32),
    ]
    return MCI_DGV_SETVIDEO_PARMSA
def _define_MCI_DGV_SETVIDEO_PARMSW_head():
    class MCI_DGV_SETVIDEO_PARMSW(Structure):
        pass
    return MCI_DGV_SETVIDEO_PARMSW
def _define_MCI_DGV_SETVIDEO_PARMSW():
    MCI_DGV_SETVIDEO_PARMSW = win32more.Media.Multimedia.MCI_DGV_SETVIDEO_PARMSW_head
    MCI_DGV_SETVIDEO_PARMSW._pack_ = 1
    MCI_DGV_SETVIDEO_PARMSW._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwItem", UInt32),
        ("dwValue", UInt32),
        ("dwOver", UInt32),
        ("lpstrAlgorithm", win32more.Foundation.PWSTR),
        ("lpstrQuality", win32more.Foundation.PWSTR),
        ("dwSourceNumber", UInt32),
    ]
    return MCI_DGV_SETVIDEO_PARMSW
def _define_MCI_DGV_STATUS_PARMSA_head():
    class MCI_DGV_STATUS_PARMSA(Structure):
        pass
    return MCI_DGV_STATUS_PARMSA
def _define_MCI_DGV_STATUS_PARMSA():
    MCI_DGV_STATUS_PARMSA = win32more.Media.Multimedia.MCI_DGV_STATUS_PARMSA_head
    MCI_DGV_STATUS_PARMSA._pack_ = 1
    MCI_DGV_STATUS_PARMSA._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwReturn", UIntPtr),
        ("dwItem", UInt32),
        ("dwTrack", UInt32),
        ("lpstrDrive", win32more.Foundation.PSTR),
        ("dwReference", UInt32),
    ]
    return MCI_DGV_STATUS_PARMSA
def _define_MCI_DGV_STATUS_PARMSW_head():
    class MCI_DGV_STATUS_PARMSW(Structure):
        pass
    return MCI_DGV_STATUS_PARMSW
def _define_MCI_DGV_STATUS_PARMSW():
    MCI_DGV_STATUS_PARMSW = win32more.Media.Multimedia.MCI_DGV_STATUS_PARMSW_head
    MCI_DGV_STATUS_PARMSW._pack_ = 1
    MCI_DGV_STATUS_PARMSW._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwReturn", UIntPtr),
        ("dwItem", UInt32),
        ("dwTrack", UInt32),
        ("lpstrDrive", win32more.Foundation.PWSTR),
        ("dwReference", UInt32),
    ]
    return MCI_DGV_STATUS_PARMSW
def _define_MCI_DGV_STEP_PARMS_head():
    class MCI_DGV_STEP_PARMS(Structure):
        pass
    return MCI_DGV_STEP_PARMS
def _define_MCI_DGV_STEP_PARMS():
    MCI_DGV_STEP_PARMS = win32more.Media.Multimedia.MCI_DGV_STEP_PARMS_head
    MCI_DGV_STEP_PARMS._pack_ = 1
    MCI_DGV_STEP_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("dwFrames", UInt32),
    ]
    return MCI_DGV_STEP_PARMS
def _define_MCI_DGV_UPDATE_PARMS_head():
    class MCI_DGV_UPDATE_PARMS(Structure):
        pass
    return MCI_DGV_UPDATE_PARMS
def _define_MCI_DGV_UPDATE_PARMS():
    MCI_DGV_UPDATE_PARMS = win32more.Media.Multimedia.MCI_DGV_UPDATE_PARMS_head
    MCI_DGV_UPDATE_PARMS._pack_ = 1
    MCI_DGV_UPDATE_PARMS._fields_ = [
        ("dwCallback", UIntPtr),
        ("rc", win32more.Foundation.RECT),
        ("hDC", win32more.Graphics.Gdi.HDC),
    ]
    return MCI_DGV_UPDATE_PARMS
def _define_MCI_DGV_WINDOW_PARMSA_head():
    class MCI_DGV_WINDOW_PARMSA(Structure):
        pass
    return MCI_DGV_WINDOW_PARMSA
def _define_MCI_DGV_WINDOW_PARMSA():
    MCI_DGV_WINDOW_PARMSA = win32more.Media.Multimedia.MCI_DGV_WINDOW_PARMSA_head
    MCI_DGV_WINDOW_PARMSA._pack_ = 1
    MCI_DGV_WINDOW_PARMSA._fields_ = [
        ("dwCallback", UIntPtr),
        ("hWnd", win32more.Foundation.HWND),
        ("nCmdShow", UInt32),
        ("lpstrText", win32more.Foundation.PSTR),
    ]
    return MCI_DGV_WINDOW_PARMSA
def _define_MCI_DGV_WINDOW_PARMSW_head():
    class MCI_DGV_WINDOW_PARMSW(Structure):
        pass
    return MCI_DGV_WINDOW_PARMSW
def _define_MCI_DGV_WINDOW_PARMSW():
    MCI_DGV_WINDOW_PARMSW = win32more.Media.Multimedia.MCI_DGV_WINDOW_PARMSW_head
    MCI_DGV_WINDOW_PARMSW._pack_ = 1
    MCI_DGV_WINDOW_PARMSW._fields_ = [
        ("dwCallback", UIntPtr),
        ("hWnd", win32more.Foundation.HWND),
        ("nCmdShow", UInt32),
        ("lpstrText", win32more.Foundation.PWSTR),
    ]
    return MCI_DGV_WINDOW_PARMSW
def _define_ICOPEN_head():
    class ICOPEN(Structure):
        pass
    return ICOPEN
def _define_ICOPEN():
    ICOPEN = win32more.Media.Multimedia.ICOPEN_head
    ICOPEN._fields_ = [
        ("dwSize", UInt32),
        ("fccType", UInt32),
        ("fccHandler", UInt32),
        ("dwVersion", UInt32),
        ("dwFlags", UInt32),
        ("dwError", win32more.Foundation.LRESULT),
        ("pV1Reserved", c_void_p),
        ("pV2Reserved", c_void_p),
        ("dnDevNode", UInt32),
    ]
    return ICOPEN
def _define_ICINFO_head():
    class ICINFO(Structure):
        pass
    return ICINFO
def _define_ICINFO():
    ICINFO = win32more.Media.Multimedia.ICINFO_head
    ICINFO._fields_ = [
        ("dwSize", UInt32),
        ("fccType", UInt32),
        ("fccHandler", UInt32),
        ("dwFlags", UInt32),
        ("dwVersion", UInt32),
        ("dwVersionICM", UInt32),
        ("szName", Char * 16),
        ("szDescription", Char * 128),
        ("szDriver", Char * 128),
    ]
    return ICINFO
def _define_ICCOMPRESS_head():
    class ICCOMPRESS(Structure):
        pass
    return ICCOMPRESS
def _define_ICCOMPRESS():
    ICCOMPRESS = win32more.Media.Multimedia.ICCOMPRESS_head
    ICCOMPRESS._fields_ = [
        ("dwFlags", UInt32),
        ("lpbiOutput", POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head)),
        ("lpOutput", c_void_p),
        ("lpbiInput", POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head)),
        ("lpInput", c_void_p),
        ("lpckid", POINTER(UInt32)),
        ("lpdwFlags", POINTER(UInt32)),
        ("lFrameNum", Int32),
        ("dwFrameSize", UInt32),
        ("dwQuality", UInt32),
        ("lpbiPrev", POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head)),
        ("lpPrev", c_void_p),
    ]
    return ICCOMPRESS
def _define_ICCOMPRESSFRAMES_head():
    class ICCOMPRESSFRAMES(Structure):
        pass
    return ICCOMPRESSFRAMES
def _define_ICCOMPRESSFRAMES():
    ICCOMPRESSFRAMES = win32more.Media.Multimedia.ICCOMPRESSFRAMES_head
    ICCOMPRESSFRAMES._fields_ = [
        ("dwFlags", UInt32),
        ("lpbiOutput", POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head)),
        ("lOutput", win32more.Foundation.LPARAM),
        ("lpbiInput", POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head)),
        ("lInput", win32more.Foundation.LPARAM),
        ("lStartFrame", Int32),
        ("lFrameCount", Int32),
        ("lQuality", Int32),
        ("lDataRate", Int32),
        ("lKeyRate", Int32),
        ("dwRate", UInt32),
        ("dwScale", UInt32),
        ("dwOverheadPerFrame", UInt32),
        ("dwReserved2", UInt32),
        ("GetData", IntPtr),
        ("PutData", IntPtr),
    ]
    return ICCOMPRESSFRAMES
def _define_ICSETSTATUSPROC_head():
    class ICSETSTATUSPROC(Structure):
        pass
    return ICSETSTATUSPROC
def _define_ICSETSTATUSPROC():
    ICSETSTATUSPROC = win32more.Media.Multimedia.ICSETSTATUSPROC_head
    ICSETSTATUSPROC._fields_ = [
        ("dwFlags", UInt32),
        ("lParam", win32more.Foundation.LPARAM),
        ("Status", IntPtr),
    ]
    return ICSETSTATUSPROC
def _define_ICDECOMPRESS_head():
    class ICDECOMPRESS(Structure):
        pass
    return ICDECOMPRESS
def _define_ICDECOMPRESS():
    ICDECOMPRESS = win32more.Media.Multimedia.ICDECOMPRESS_head
    ICDECOMPRESS._fields_ = [
        ("dwFlags", UInt32),
        ("lpbiInput", POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head)),
        ("lpInput", c_void_p),
        ("lpbiOutput", POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head)),
        ("lpOutput", c_void_p),
        ("ckid", UInt32),
    ]
    return ICDECOMPRESS
def _define_ICDECOMPRESSEX_head():
    class ICDECOMPRESSEX(Structure):
        pass
    return ICDECOMPRESSEX
def _define_ICDECOMPRESSEX():
    ICDECOMPRESSEX = win32more.Media.Multimedia.ICDECOMPRESSEX_head
    ICDECOMPRESSEX._fields_ = [
        ("dwFlags", UInt32),
        ("lpbiSrc", POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head)),
        ("lpSrc", c_void_p),
        ("lpbiDst", POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head)),
        ("lpDst", c_void_p),
        ("xDst", Int32),
        ("yDst", Int32),
        ("dxDst", Int32),
        ("dyDst", Int32),
        ("xSrc", Int32),
        ("ySrc", Int32),
        ("dxSrc", Int32),
        ("dySrc", Int32),
    ]
    return ICDECOMPRESSEX
def _define_ICDRAWBEGIN_head():
    class ICDRAWBEGIN(Structure):
        pass
    return ICDRAWBEGIN
def _define_ICDRAWBEGIN():
    ICDRAWBEGIN = win32more.Media.Multimedia.ICDRAWBEGIN_head
    ICDRAWBEGIN._fields_ = [
        ("dwFlags", UInt32),
        ("hpal", win32more.Graphics.Gdi.HPALETTE),
        ("hwnd", win32more.Foundation.HWND),
        ("hdc", win32more.Graphics.Gdi.HDC),
        ("xDst", Int32),
        ("yDst", Int32),
        ("dxDst", Int32),
        ("dyDst", Int32),
        ("lpbi", POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head)),
        ("xSrc", Int32),
        ("ySrc", Int32),
        ("dxSrc", Int32),
        ("dySrc", Int32),
        ("dwRate", UInt32),
        ("dwScale", UInt32),
    ]
    return ICDRAWBEGIN
def _define_ICDRAW_head():
    class ICDRAW(Structure):
        pass
    return ICDRAW
def _define_ICDRAW():
    ICDRAW = win32more.Media.Multimedia.ICDRAW_head
    ICDRAW._fields_ = [
        ("dwFlags", UInt32),
        ("lpFormat", c_void_p),
        ("lpData", c_void_p),
        ("cbData", UInt32),
        ("lTime", Int32),
    ]
    return ICDRAW
def _define_ICDRAWSUGGEST_head():
    class ICDRAWSUGGEST(Structure):
        pass
    return ICDRAWSUGGEST
def _define_ICDRAWSUGGEST():
    ICDRAWSUGGEST = win32more.Media.Multimedia.ICDRAWSUGGEST_head
    ICDRAWSUGGEST._fields_ = [
        ("lpbiIn", POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head)),
        ("lpbiSuggest", POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head)),
        ("dxSrc", Int32),
        ("dySrc", Int32),
        ("dxDst", Int32),
        ("dyDst", Int32),
        ("hicDecompressor", win32more.Media.Multimedia.HIC),
    ]
    return ICDRAWSUGGEST
def _define_ICPALETTE_head():
    class ICPALETTE(Structure):
        pass
    return ICPALETTE
def _define_ICPALETTE():
    ICPALETTE = win32more.Media.Multimedia.ICPALETTE_head
    ICPALETTE._fields_ = [
        ("dwFlags", UInt32),
        ("iStart", Int32),
        ("iLen", Int32),
        ("lppe", POINTER(win32more.Graphics.Gdi.PALETTEENTRY_head)),
    ]
    return ICPALETTE
def _define_COMPVARS_head():
    class COMPVARS(Structure):
        pass
    return COMPVARS
def _define_COMPVARS():
    COMPVARS = win32more.Media.Multimedia.COMPVARS_head
    COMPVARS._fields_ = [
        ("cbSize", Int32),
        ("dwFlags", UInt32),
        ("hic", win32more.Media.Multimedia.HIC),
        ("fccType", UInt32),
        ("fccHandler", UInt32),
        ("lpbiIn", POINTER(win32more.Graphics.Gdi.BITMAPINFO_head)),
        ("lpbiOut", POINTER(win32more.Graphics.Gdi.BITMAPINFO_head)),
        ("lpBitsOut", c_void_p),
        ("lpBitsPrev", c_void_p),
        ("lFrame", Int32),
        ("lKey", Int32),
        ("lDataRate", Int32),
        ("lQ", Int32),
        ("lKeyCount", Int32),
        ("lpState", c_void_p),
        ("cbState", Int32),
    ]
    return COMPVARS
def _define_DRAWDIBTIME_head():
    class DRAWDIBTIME(Structure):
        pass
    return DRAWDIBTIME
def _define_DRAWDIBTIME():
    DRAWDIBTIME = win32more.Media.Multimedia.DRAWDIBTIME_head
    DRAWDIBTIME._fields_ = [
        ("timeCount", Int32),
        ("timeDraw", Int32),
        ("timeDecompress", Int32),
        ("timeDither", Int32),
        ("timeStretch", Int32),
        ("timeBlt", Int32),
        ("timeSetDIBits", Int32),
    ]
    return DRAWDIBTIME
def _define_AVISTREAMINFOW_head():
    class AVISTREAMINFOW(Structure):
        pass
    return AVISTREAMINFOW
def _define_AVISTREAMINFOW():
    AVISTREAMINFOW = win32more.Media.Multimedia.AVISTREAMINFOW_head
    AVISTREAMINFOW._fields_ = [
        ("fccType", UInt32),
        ("fccHandler", UInt32),
        ("dwFlags", UInt32),
        ("dwCaps", UInt32),
        ("wPriority", UInt16),
        ("wLanguage", UInt16),
        ("dwScale", UInt32),
        ("dwRate", UInt32),
        ("dwStart", UInt32),
        ("dwLength", UInt32),
        ("dwInitialFrames", UInt32),
        ("dwSuggestedBufferSize", UInt32),
        ("dwQuality", UInt32),
        ("dwSampleSize", UInt32),
        ("rcFrame", win32more.Foundation.RECT),
        ("dwEditCount", UInt32),
        ("dwFormatChangeCount", UInt32),
        ("szName", Char * 64),
    ]
    return AVISTREAMINFOW
def _define_AVISTREAMINFOA_head():
    class AVISTREAMINFOA(Structure):
        pass
    return AVISTREAMINFOA
def _define_AVISTREAMINFOA():
    AVISTREAMINFOA = win32more.Media.Multimedia.AVISTREAMINFOA_head
    AVISTREAMINFOA._fields_ = [
        ("fccType", UInt32),
        ("fccHandler", UInt32),
        ("dwFlags", UInt32),
        ("dwCaps", UInt32),
        ("wPriority", UInt16),
        ("wLanguage", UInt16),
        ("dwScale", UInt32),
        ("dwRate", UInt32),
        ("dwStart", UInt32),
        ("dwLength", UInt32),
        ("dwInitialFrames", UInt32),
        ("dwSuggestedBufferSize", UInt32),
        ("dwQuality", UInt32),
        ("dwSampleSize", UInt32),
        ("rcFrame", win32more.Foundation.RECT),
        ("dwEditCount", UInt32),
        ("dwFormatChangeCount", UInt32),
        ("szName", win32more.Foundation.CHAR * 64),
    ]
    return AVISTREAMINFOA
def _define_AVIFILEINFOW_head():
    class AVIFILEINFOW(Structure):
        pass
    return AVIFILEINFOW
def _define_AVIFILEINFOW():
    AVIFILEINFOW = win32more.Media.Multimedia.AVIFILEINFOW_head
    AVIFILEINFOW._fields_ = [
        ("dwMaxBytesPerSec", UInt32),
        ("dwFlags", UInt32),
        ("dwCaps", UInt32),
        ("dwStreams", UInt32),
        ("dwSuggestedBufferSize", UInt32),
        ("dwWidth", UInt32),
        ("dwHeight", UInt32),
        ("dwScale", UInt32),
        ("dwRate", UInt32),
        ("dwLength", UInt32),
        ("dwEditCount", UInt32),
        ("szFileType", Char * 64),
    ]
    return AVIFILEINFOW
def _define_AVIFILEINFOA_head():
    class AVIFILEINFOA(Structure):
        pass
    return AVIFILEINFOA
def _define_AVIFILEINFOA():
    AVIFILEINFOA = win32more.Media.Multimedia.AVIFILEINFOA_head
    AVIFILEINFOA._fields_ = [
        ("dwMaxBytesPerSec", UInt32),
        ("dwFlags", UInt32),
        ("dwCaps", UInt32),
        ("dwStreams", UInt32),
        ("dwSuggestedBufferSize", UInt32),
        ("dwWidth", UInt32),
        ("dwHeight", UInt32),
        ("dwScale", UInt32),
        ("dwRate", UInt32),
        ("dwLength", UInt32),
        ("dwEditCount", UInt32),
        ("szFileType", win32more.Foundation.CHAR * 64),
    ]
    return AVIFILEINFOA
def _define_AVISAVECALLBACK():
    return CFUNCTYPE(win32more.Foundation.BOOL,Int32, use_last_error=False)
def _define_AVICOMPRESSOPTIONS_head():
    class AVICOMPRESSOPTIONS(Structure):
        pass
    return AVICOMPRESSOPTIONS
def _define_AVICOMPRESSOPTIONS():
    AVICOMPRESSOPTIONS = win32more.Media.Multimedia.AVICOMPRESSOPTIONS_head
    AVICOMPRESSOPTIONS._fields_ = [
        ("fccType", UInt32),
        ("fccHandler", UInt32),
        ("dwKeyFrameEvery", UInt32),
        ("dwQuality", UInt32),
        ("dwBytesPerSecond", UInt32),
        ("dwFlags", UInt32),
        ("lpFormat", c_void_p),
        ("cbFormat", UInt32),
        ("lpParms", c_void_p),
        ("cbParms", UInt32),
        ("dwInterleaveEvery", UInt32),
    ]
    return AVICOMPRESSOPTIONS
def _define_IAVIStream_head():
    class IAVIStream(win32more.System.Com.IUnknown_head):
        Guid = Guid('00020021-0000-0000-c000-000000000046')
    return IAVIStream
def _define_IAVIStream():
    IAVIStream = win32more.Media.Multimedia.IAVIStream_head
    IAVIStream.Create = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.LPARAM,win32more.Foundation.LPARAM, use_last_error=False)(3, 'Create', ((1, 'lParam1'),(1, 'lParam2'),)))
    IAVIStream.Info = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.Multimedia.AVISTREAMINFOW_head),Int32, use_last_error=False)(4, 'Info', ((1, 'psi'),(1, 'lSize'),)))
    IAVIStream.FindSample = COMMETHOD(WINFUNCTYPE(Int32,Int32,Int32, use_last_error=False)(5, 'FindSample', ((1, 'lPos'),(1, 'lFlags'),)))
    IAVIStream.ReadFormat = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,c_void_p,POINTER(Int32), use_last_error=False)(6, 'ReadFormat', ((1, 'lPos'),(1, 'lpFormat'),(1, 'lpcbFormat'),)))
    IAVIStream.SetFormat = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,c_void_p,Int32, use_last_error=False)(7, 'SetFormat', ((1, 'lPos'),(1, 'lpFormat'),(1, 'cbFormat'),)))
    IAVIStream.Read = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,c_void_p,Int32,POINTER(Int32),POINTER(Int32), use_last_error=False)(8, 'Read', ((1, 'lStart'),(1, 'lSamples'),(1, 'lpBuffer'),(1, 'cbBuffer'),(1, 'plBytes'),(1, 'plSamples'),)))
    IAVIStream.Write = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,c_void_p,Int32,UInt32,POINTER(Int32),POINTER(Int32), use_last_error=False)(9, 'Write', ((1, 'lStart'),(1, 'lSamples'),(1, 'lpBuffer'),(1, 'cbBuffer'),(1, 'dwFlags'),(1, 'plSampWritten'),(1, 'plBytesWritten'),)))
    IAVIStream.Delete = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32, use_last_error=False)(10, 'Delete', ((1, 'lStart'),(1, 'lSamples'),)))
    IAVIStream.ReadData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_void_p,POINTER(Int32), use_last_error=False)(11, 'ReadData', ((1, 'fcc'),(1, 'lp'),(1, 'lpcb'),)))
    IAVIStream.WriteData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_void_p,Int32, use_last_error=False)(12, 'WriteData', ((1, 'fcc'),(1, 'lp'),(1, 'cb'),)))
    IAVIStream.SetInfo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.Multimedia.AVISTREAMINFOW_head),Int32, use_last_error=False)(13, 'SetInfo', ((1, 'lpInfo'),(1, 'cbInfo'),)))
    return IAVIStream
def _define_IAVIStreaming_head():
    class IAVIStreaming(win32more.System.Com.IUnknown_head):
        Guid = Guid('00020022-0000-0000-c000-000000000046')
    return IAVIStreaming
def _define_IAVIStreaming():
    IAVIStreaming = win32more.Media.Multimedia.IAVIStreaming_head
    IAVIStreaming.Begin = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,Int32, use_last_error=False)(3, 'Begin', ((1, 'lStart'),(1, 'lEnd'),(1, 'lRate'),)))
    IAVIStreaming.End = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(4, 'End', ()))
    return IAVIStreaming
def _define_IAVIEditStream_head():
    class IAVIEditStream(win32more.System.Com.IUnknown_head):
        Guid = Guid('00020024-0000-0000-c000-000000000046')
    return IAVIEditStream
def _define_IAVIEditStream():
    IAVIEditStream = win32more.Media.Multimedia.IAVIEditStream_head
    IAVIEditStream.Cut = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int32),POINTER(Int32),POINTER(win32more.Media.Multimedia.IAVIStream_head), use_last_error=False)(3, 'Cut', ((1, 'plStart'),(1, 'plLength'),(1, 'ppResult'),)))
    IAVIEditStream.Copy = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int32),POINTER(Int32),POINTER(win32more.Media.Multimedia.IAVIStream_head), use_last_error=False)(4, 'Copy', ((1, 'plStart'),(1, 'plLength'),(1, 'ppResult'),)))
    IAVIEditStream.Paste = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int32),POINTER(Int32),win32more.Media.Multimedia.IAVIStream_head,Int32,Int32, use_last_error=False)(5, 'Paste', ((1, 'plPos'),(1, 'plLength'),(1, 'pstream'),(1, 'lStart'),(1, 'lEnd'),)))
    IAVIEditStream.Clone = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.Multimedia.IAVIStream_head), use_last_error=False)(6, 'Clone', ((1, 'ppResult'),)))
    IAVIEditStream.SetInfo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.Multimedia.AVISTREAMINFOW_head),Int32, use_last_error=False)(7, 'SetInfo', ((1, 'lpInfo'),(1, 'cbInfo'),)))
    return IAVIEditStream
def _define_IAVIPersistFile_head():
    class IAVIPersistFile(win32more.System.Com.IPersistFile_head):
        Guid = Guid('00020025-0000-0000-c000-000000000046')
    return IAVIPersistFile
def _define_IAVIPersistFile():
    IAVIPersistFile = win32more.Media.Multimedia.IAVIPersistFile_head
    IAVIPersistFile.Reserved1 = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(9, 'Reserved1', ()))
    return IAVIPersistFile
def _define_IAVIFile_head():
    class IAVIFile(win32more.System.Com.IUnknown_head):
        Guid = Guid('00020020-0000-0000-c000-000000000046')
    return IAVIFile
def _define_IAVIFile():
    IAVIFile = win32more.Media.Multimedia.IAVIFile_head
    IAVIFile.Info = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.Multimedia.AVIFILEINFOW_head),Int32, use_last_error=False)(3, 'Info', ((1, 'pfi'),(1, 'lSize'),)))
    IAVIFile.GetStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.Multimedia.IAVIStream_head),UInt32,Int32, use_last_error=False)(4, 'GetStream', ((1, 'ppStream'),(1, 'fccType'),(1, 'lParam'),)))
    IAVIFile.CreateStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.Multimedia.IAVIStream_head),POINTER(win32more.Media.Multimedia.AVISTREAMINFOW_head), use_last_error=False)(5, 'CreateStream', ((1, 'ppStream'),(1, 'psi'),)))
    IAVIFile.WriteData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_void_p,Int32, use_last_error=False)(6, 'WriteData', ((1, 'ckid'),(1, 'lpData'),(1, 'cbData'),)))
    IAVIFile.ReadData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_void_p,POINTER(Int32), use_last_error=False)(7, 'ReadData', ((1, 'ckid'),(1, 'lpData'),(1, 'lpcbData'),)))
    IAVIFile.EndRecord = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(8, 'EndRecord', ()))
    IAVIFile.DeleteStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,Int32, use_last_error=False)(9, 'DeleteStream', ((1, 'fccType'),(1, 'lParam'),)))
    return IAVIFile
def _define_IGetFrame_head():
    class IGetFrame(win32more.System.Com.IUnknown_head):
        Guid = Guid('00020023-0000-0000-c000-000000000046')
    return IGetFrame
def _define_IGetFrame():
    IGetFrame = win32more.Media.Multimedia.IGetFrame_head
    IGetFrame.GetFrame = COMMETHOD(WINFUNCTYPE(c_void_p,Int32, use_last_error=False)(3, 'GetFrame', ((1, 'lPos'),)))
    IGetFrame.Begin = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,Int32, use_last_error=False)(4, 'Begin', ((1, 'lStart'),(1, 'lEnd'),(1, 'lRate'),)))
    IGetFrame.End = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(5, 'End', ()))
    IGetFrame.SetFormat = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head),c_void_p,Int32,Int32,Int32,Int32, use_last_error=False)(6, 'SetFormat', ((1, 'lpbi'),(1, 'lpBits'),(1, 'x'),(1, 'y'),(1, 'dx'),(1, 'dy'),)))
    return IGetFrame
def _define_VIDEOHDR_head():
    class VIDEOHDR(Structure):
        pass
    return VIDEOHDR
def _define_VIDEOHDR():
    VIDEOHDR = win32more.Media.Multimedia.VIDEOHDR_head
    VIDEOHDR._fields_ = [
        ("lpData", c_char_p_no),
        ("dwBufferLength", UInt32),
        ("dwBytesUsed", UInt32),
        ("dwTimeCaptured", UInt32),
        ("dwUser", UIntPtr),
        ("dwFlags", UInt32),
        ("dwReserved", UIntPtr * 4),
    ]
    return VIDEOHDR
def _define_CHANNEL_CAPS_head():
    class CHANNEL_CAPS(Structure):
        pass
    return CHANNEL_CAPS
def _define_CHANNEL_CAPS():
    CHANNEL_CAPS = win32more.Media.Multimedia.CHANNEL_CAPS_head
    CHANNEL_CAPS._fields_ = [
        ("dwFlags", UInt32),
        ("dwSrcRectXMod", UInt32),
        ("dwSrcRectYMod", UInt32),
        ("dwSrcRectWidthMod", UInt32),
        ("dwSrcRectHeightMod", UInt32),
        ("dwDstRectXMod", UInt32),
        ("dwDstRectYMod", UInt32),
        ("dwDstRectWidthMod", UInt32),
        ("dwDstRectHeightMod", UInt32),
    ]
    return CHANNEL_CAPS
def _define_CAPDRIVERCAPS_head():
    class CAPDRIVERCAPS(Structure):
        pass
    return CAPDRIVERCAPS
def _define_CAPDRIVERCAPS():
    CAPDRIVERCAPS = win32more.Media.Multimedia.CAPDRIVERCAPS_head
    CAPDRIVERCAPS._fields_ = [
        ("wDeviceIndex", UInt32),
        ("fHasOverlay", win32more.Foundation.BOOL),
        ("fHasDlgVideoSource", win32more.Foundation.BOOL),
        ("fHasDlgVideoFormat", win32more.Foundation.BOOL),
        ("fHasDlgVideoDisplay", win32more.Foundation.BOOL),
        ("fCaptureInitialized", win32more.Foundation.BOOL),
        ("fDriverSuppliesPalettes", win32more.Foundation.BOOL),
        ("hVideoIn", win32more.Foundation.HANDLE),
        ("hVideoOut", win32more.Foundation.HANDLE),
        ("hVideoExtIn", win32more.Foundation.HANDLE),
        ("hVideoExtOut", win32more.Foundation.HANDLE),
    ]
    return CAPDRIVERCAPS
def _define_CAPSTATUS_head():
    class CAPSTATUS(Structure):
        pass
    return CAPSTATUS
def _define_CAPSTATUS():
    CAPSTATUS = win32more.Media.Multimedia.CAPSTATUS_head
    CAPSTATUS._fields_ = [
        ("uiImageWidth", UInt32),
        ("uiImageHeight", UInt32),
        ("fLiveWindow", win32more.Foundation.BOOL),
        ("fOverlayWindow", win32more.Foundation.BOOL),
        ("fScale", win32more.Foundation.BOOL),
        ("ptScroll", win32more.Foundation.POINT),
        ("fUsingDefaultPalette", win32more.Foundation.BOOL),
        ("fAudioHardware", win32more.Foundation.BOOL),
        ("fCapFileExists", win32more.Foundation.BOOL),
        ("dwCurrentVideoFrame", UInt32),
        ("dwCurrentVideoFramesDropped", UInt32),
        ("dwCurrentWaveSamples", UInt32),
        ("dwCurrentTimeElapsedMS", UInt32),
        ("hPalCurrent", win32more.Graphics.Gdi.HPALETTE),
        ("fCapturingNow", win32more.Foundation.BOOL),
        ("dwReturn", UInt32),
        ("wNumVideoAllocated", UInt32),
        ("wNumAudioAllocated", UInt32),
    ]
    return CAPSTATUS
def _define_CAPTUREPARMS_head():
    class CAPTUREPARMS(Structure):
        pass
    return CAPTUREPARMS
def _define_CAPTUREPARMS():
    CAPTUREPARMS = win32more.Media.Multimedia.CAPTUREPARMS_head
    CAPTUREPARMS._fields_ = [
        ("dwRequestMicroSecPerFrame", UInt32),
        ("fMakeUserHitOKToCapture", win32more.Foundation.BOOL),
        ("wPercentDropForError", UInt32),
        ("fYield", win32more.Foundation.BOOL),
        ("dwIndexSize", UInt32),
        ("wChunkGranularity", UInt32),
        ("fUsingDOSMemory", win32more.Foundation.BOOL),
        ("wNumVideoRequested", UInt32),
        ("fCaptureAudio", win32more.Foundation.BOOL),
        ("wNumAudioRequested", UInt32),
        ("vKeyAbort", UInt32),
        ("fAbortLeftMouse", win32more.Foundation.BOOL),
        ("fAbortRightMouse", win32more.Foundation.BOOL),
        ("fLimitEnabled", win32more.Foundation.BOOL),
        ("wTimeLimit", UInt32),
        ("fMCIControl", win32more.Foundation.BOOL),
        ("fStepMCIDevice", win32more.Foundation.BOOL),
        ("dwMCIStartTime", UInt32),
        ("dwMCIStopTime", UInt32),
        ("fStepCaptureAt2x", win32more.Foundation.BOOL),
        ("wStepCaptureAverageFrames", UInt32),
        ("dwAudioBufferSize", UInt32),
        ("fDisableWriteCache", win32more.Foundation.BOOL),
        ("AVStreamMaster", UInt32),
    ]
    return CAPTUREPARMS
def _define_CAPINFOCHUNK_head():
    class CAPINFOCHUNK(Structure):
        pass
    return CAPINFOCHUNK
def _define_CAPINFOCHUNK():
    CAPINFOCHUNK = win32more.Media.Multimedia.CAPINFOCHUNK_head
    CAPINFOCHUNK._fields_ = [
        ("fccInfoID", UInt32),
        ("lpData", c_void_p),
        ("cbData", Int32),
    ]
    return CAPINFOCHUNK
def _define_CAPYIELDCALLBACK():
    return CFUNCTYPE(win32more.Foundation.LRESULT,win32more.Foundation.HWND, use_last_error=False)
def _define_CAPSTATUSCALLBACKW():
    return CFUNCTYPE(win32more.Foundation.LRESULT,win32more.Foundation.HWND,Int32,win32more.Foundation.PWSTR, use_last_error=False)
def _define_CAPERRORCALLBACKW():
    return CFUNCTYPE(win32more.Foundation.LRESULT,win32more.Foundation.HWND,Int32,win32more.Foundation.PWSTR, use_last_error=False)
def _define_CAPSTATUSCALLBACKA():
    return CFUNCTYPE(win32more.Foundation.LRESULT,win32more.Foundation.HWND,Int32,win32more.Foundation.PSTR, use_last_error=False)
def _define_CAPERRORCALLBACKA():
    return CFUNCTYPE(win32more.Foundation.LRESULT,win32more.Foundation.HWND,Int32,win32more.Foundation.PSTR, use_last_error=False)
def _define_CAPVIDEOCALLBACK():
    return CFUNCTYPE(win32more.Foundation.LRESULT,win32more.Foundation.HWND,POINTER(win32more.Media.Multimedia.VIDEOHDR_head), use_last_error=False)
def _define_CAPWAVECALLBACK():
    return CFUNCTYPE(win32more.Foundation.LRESULT,win32more.Foundation.HWND,POINTER(win32more.Media.Audio.WAVEHDR_head), use_last_error=False)
def _define_CAPCONTROLCALLBACK():
    return CFUNCTYPE(win32more.Foundation.LRESULT,win32more.Foundation.HWND,Int32, use_last_error=False)
def _define_DRVM_IOCTL_DATA_head():
    class DRVM_IOCTL_DATA(Structure):
        pass
    return DRVM_IOCTL_DATA
def _define_DRVM_IOCTL_DATA():
    DRVM_IOCTL_DATA = win32more.Media.Multimedia.DRVM_IOCTL_DATA_head
    DRVM_IOCTL_DATA._pack_ = 1
    DRVM_IOCTL_DATA._fields_ = [
        ("dwSize", UInt32),
        ("dwCmd", UInt32),
    ]
    return DRVM_IOCTL_DATA
def _define_WAVEOPENDESC_head():
    class WAVEOPENDESC(Structure):
        pass
    return WAVEOPENDESC
def _define_WAVEOPENDESC():
    WAVEOPENDESC = win32more.Media.Multimedia.WAVEOPENDESC_head
    WAVEOPENDESC._pack_ = 1
    WAVEOPENDESC._fields_ = [
        ("hWave", win32more.Media.Audio.HWAVE),
        ("lpFormat", POINTER(win32more.Media.Audio.WAVEFORMAT_head)),
        ("dwCallback", UIntPtr),
        ("dwInstance", UIntPtr),
        ("uMappedDeviceID", UInt32),
        ("dnDevNode", UIntPtr),
    ]
    return WAVEOPENDESC
def _define_MIDIOPENSTRMID_head():
    class MIDIOPENSTRMID(Structure):
        pass
    return MIDIOPENSTRMID
def _define_MIDIOPENSTRMID():
    MIDIOPENSTRMID = win32more.Media.Multimedia.MIDIOPENSTRMID_head
    MIDIOPENSTRMID._pack_ = 1
    MIDIOPENSTRMID._fields_ = [
        ("dwStreamID", UInt32),
        ("uDeviceID", UInt32),
    ]
    return MIDIOPENSTRMID
def _define_MIXEROPENDESC_head():
    class MIXEROPENDESC(Structure):
        pass
    return MIXEROPENDESC
def _define_MIXEROPENDESC():
    MIXEROPENDESC = win32more.Media.Multimedia.MIXEROPENDESC_head
    MIXEROPENDESC._pack_ = 1
    MIXEROPENDESC._fields_ = [
        ("hmx", win32more.Media.Audio.HMIXER),
        ("pReserved0", c_void_p),
        ("dwCallback", UIntPtr),
        ("dwInstance", UIntPtr),
        ("dnDevNode", UIntPtr),
    ]
    return MIXEROPENDESC
def _define_TIMEREVENT_head():
    class TIMEREVENT(Structure):
        pass
    return TIMEREVENT
def _define_TIMEREVENT():
    TIMEREVENT = win32more.Media.Multimedia.TIMEREVENT_head
    TIMEREVENT._pack_ = 1
    TIMEREVENT._fields_ = [
        ("wDelay", UInt16),
        ("wResolution", UInt16),
        ("lpFunction", win32more.Media.LPTIMECALLBACK),
        ("dwUser", UInt32),
        ("wFlags", UInt16),
        ("wReserved1", UInt16),
    ]
    return TIMEREVENT
def _define_MCI_OPEN_DRIVER_PARMS_head():
    class MCI_OPEN_DRIVER_PARMS(Structure):
        pass
    return MCI_OPEN_DRIVER_PARMS
def _define_MCI_OPEN_DRIVER_PARMS():
    MCI_OPEN_DRIVER_PARMS = win32more.Media.Multimedia.MCI_OPEN_DRIVER_PARMS_head
    MCI_OPEN_DRIVER_PARMS._pack_ = 1
    MCI_OPEN_DRIVER_PARMS._fields_ = [
        ("wDeviceID", UInt32),
        ("lpstrParams", win32more.Foundation.PWSTR),
        ("wCustomCommandTable", UInt32),
        ("wType", UInt32),
    ]
    return MCI_OPEN_DRIVER_PARMS
def _define_LPTASKCALLBACK():
    return CFUNCTYPE(Void,UIntPtr, use_last_error=False)
def _define_VFWWDMExtensionProc():
    return CFUNCTYPE(UInt32,c_void_p,win32more.UI.Controls.LPFNSVADDPROPSHEETPAGE,win32more.Foundation.LPARAM, use_last_error=False)
def _define_LPFNEXTDEVIO():
    return CFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.LPARAM,UInt32,UInt32,c_void_p,UInt32,c_void_p,UInt32,POINTER(UInt32),POINTER(win32more.System.IO.OVERLAPPED_head), use_last_error=False)
def _define_mciSendCommandA():
    try:
        return WINFUNCTYPE(UInt32,UInt32,UInt32,UIntPtr,UIntPtr, use_last_error=False)(("mciSendCommandA", windll["WINMM"]), ((1, 'mciId'),(1, 'uMsg'),(1, 'dwParam1'),(1, 'dwParam2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mciSendCommandW():
    try:
        return WINFUNCTYPE(UInt32,UInt32,UInt32,UIntPtr,UIntPtr, use_last_error=False)(("mciSendCommandW", windll["WINMM"]), ((1, 'mciId'),(1, 'uMsg'),(1, 'dwParam1'),(1, 'dwParam2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mciSendCommand():
    return win32more.Media.Multimedia.mciSendCommandW
def _define_mciSendStringA():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.PSTR,POINTER(Byte),UInt32,win32more.Foundation.HWND, use_last_error=False)(("mciSendStringA", windll["WINMM"]), ((1, 'lpstrCommand'),(1, 'lpstrReturnString'),(1, 'uReturnLength'),(1, 'hwndCallback'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mciSendStringW():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.PWSTR,POINTER(Char),UInt32,win32more.Foundation.HWND, use_last_error=False)(("mciSendStringW", windll["WINMM"]), ((1, 'lpstrCommand'),(1, 'lpstrReturnString'),(1, 'uReturnLength'),(1, 'hwndCallback'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mciSendString():
    return win32more.Media.Multimedia.mciSendStringW
def _define_mciGetDeviceIDA():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.PSTR, use_last_error=False)(("mciGetDeviceIDA", windll["WINMM"]), ((1, 'pszDevice'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mciGetDeviceIDW():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.PWSTR, use_last_error=False)(("mciGetDeviceIDW", windll["WINMM"]), ((1, 'pszDevice'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mciGetDeviceID():
    return win32more.Media.Multimedia.mciGetDeviceIDW
def _define_mciGetDeviceIDFromElementIDA():
    try:
        return WINFUNCTYPE(UInt32,UInt32,win32more.Foundation.PSTR, use_last_error=False)(("mciGetDeviceIDFromElementIDA", windll["WINMM"]), ((1, 'dwElementID'),(1, 'lpstrType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mciGetDeviceIDFromElementIDW():
    try:
        return WINFUNCTYPE(UInt32,UInt32,win32more.Foundation.PWSTR, use_last_error=False)(("mciGetDeviceIDFromElementIDW", windll["WINMM"]), ((1, 'dwElementID'),(1, 'lpstrType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mciGetDeviceIDFromElementID():
    return win32more.Media.Multimedia.mciGetDeviceIDFromElementIDW
def _define_mciGetErrorStringA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(Byte),UInt32, use_last_error=False)(("mciGetErrorStringA", windll["WINMM"]), ((1, 'mcierr'),(1, 'pszText'),(1, 'cchText'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mciGetErrorStringW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(Char),UInt32, use_last_error=False)(("mciGetErrorStringW", windll["WINMM"]), ((1, 'mcierr'),(1, 'pszText'),(1, 'cchText'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mciGetErrorString():
    return win32more.Media.Multimedia.mciGetErrorStringW
def _define_mciSetYieldProc():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Media.Multimedia.YIELDPROC,UInt32, use_last_error=False)(("mciSetYieldProc", windll["WINMM"]), ((1, 'mciId'),(1, 'fpYieldProc'),(1, 'dwYieldData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mciGetCreatorTask():
    try:
        return WINFUNCTYPE(win32more.Media.HTASK,UInt32, use_last_error=False)(("mciGetCreatorTask", windll["WINMM"]), ((1, 'mciId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mciGetYieldProc():
    try:
        return WINFUNCTYPE(win32more.Media.Multimedia.YIELDPROC,UInt32,POINTER(UInt32), use_last_error=False)(("mciGetYieldProc", windll["WINMM"]), ((1, 'mciId'),(1, 'pdwYieldData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mciGetDriverData():
    try:
        return WINFUNCTYPE(UIntPtr,UInt32, use_last_error=False)(("mciGetDriverData", windll["WINMM"]), ((1, 'wDeviceID'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mciLoadCommandResource():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.PWSTR,UInt32, use_last_error=False)(("mciLoadCommandResource", windll["WINMM"]), ((1, 'hInstance'),(1, 'lpResName'),(1, 'wType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mciSetDriverData():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,UIntPtr, use_last_error=False)(("mciSetDriverData", windll["WINMM"]), ((1, 'wDeviceID'),(1, 'dwData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mciDriverYield():
    try:
        return WINFUNCTYPE(UInt32,UInt32, use_last_error=False)(("mciDriverYield", windll["WINMM"]), ((1, 'wDeviceID'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mciDriverNotify():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HANDLE,UInt32,UInt32, use_last_error=False)(("mciDriverNotify", windll["WINMM"]), ((1, 'hwndCallback'),(1, 'wDeviceID'),(1, 'uStatus'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mciFreeCommandResource():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32, use_last_error=False)(("mciFreeCommandResource", windll["WINMM"]), ((1, 'wTable'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CloseDriver():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,win32more.Media.Multimedia.HDRVR,win32more.Foundation.LPARAM,win32more.Foundation.LPARAM, use_last_error=False)(("CloseDriver", windll["WINMM"]), ((1, 'hDriver'),(1, 'lParam1'),(1, 'lParam2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_OpenDriver():
    try:
        return WINFUNCTYPE(win32more.Media.Multimedia.HDRVR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.LPARAM, use_last_error=False)(("OpenDriver", windll["WINMM"]), ((1, 'szDriverName'),(1, 'szSectionName'),(1, 'lParam2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SendDriverMessage():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,win32more.Media.Multimedia.HDRVR,UInt32,win32more.Foundation.LPARAM,win32more.Foundation.LPARAM, use_last_error=False)(("SendDriverMessage", windll["WINMM"]), ((1, 'hDriver'),(1, 'message'),(1, 'lParam1'),(1, 'lParam2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DrvGetModuleHandle():
    try:
        return WINFUNCTYPE(win32more.Foundation.HINSTANCE,win32more.Media.Multimedia.HDRVR, use_last_error=False)(("DrvGetModuleHandle", windll["WINMM"]), ((1, 'hDriver'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetDriverModuleHandle():
    try:
        return WINFUNCTYPE(win32more.Foundation.HINSTANCE,win32more.Media.Multimedia.HDRVR, use_last_error=False)(("GetDriverModuleHandle", windll["WINMM"]), ((1, 'hDriver'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DefDriverProc():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,UIntPtr,win32more.Media.Multimedia.HDRVR,UInt32,win32more.Foundation.LPARAM,win32more.Foundation.LPARAM, use_last_error=False)(("DefDriverProc", windll["WINMM"]), ((1, 'dwDriverIdentifier'),(1, 'hdrvr'),(1, 'uMsg'),(1, 'lParam1'),(1, 'lParam2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DriverCallback():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,win32more.Media.Multimedia.HDRVR,UInt32,UIntPtr,UIntPtr,UIntPtr, use_last_error=False)(("DriverCallback", windll["WINMM"]), ((1, 'dwCallback'),(1, 'dwFlags'),(1, 'hDevice'),(1, 'dwMsg'),(1, 'dwUser'),(1, 'dwParam1'),(1, 'dwParam2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_sndOpenSound():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,Int32,POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("sndOpenSound", windll["api-ms-win-mm-misc-l1-1-1"]), ((1, 'EventName'),(1, 'AppName'),(1, 'Flags'),(1, 'FileHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmDrvInstall():
    try:
        return WINFUNCTYPE(UInt32,win32more.Media.Multimedia.HDRVR,win32more.Foundation.PWSTR,win32more.Media.Multimedia.DRIVERMSGPROC,UInt32, use_last_error=False)(("mmDrvInstall", windll["WINMM"]), ((1, 'hDriver'),(1, 'wszDrvEntry'),(1, 'drvMessage'),(1, 'wFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmioStringToFOURCCA():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.PSTR,UInt32, use_last_error=False)(("mmioStringToFOURCCA", windll["WINMM"]), ((1, 'sz'),(1, 'uFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmioStringToFOURCCW():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.PWSTR,UInt32, use_last_error=False)(("mmioStringToFOURCCW", windll["WINMM"]), ((1, 'sz'),(1, 'uFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmioStringToFOURCC():
    return win32more.Media.Multimedia.mmioStringToFOURCCW
def _define_mmioInstallIOProcA():
    try:
        return WINFUNCTYPE(win32more.Media.Multimedia.LPMMIOPROC,UInt32,win32more.Media.Multimedia.LPMMIOPROC,UInt32, use_last_error=False)(("mmioInstallIOProcA", windll["WINMM"]), ((1, 'fccIOProc'),(1, 'pIOProc'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmioInstallIOProcW():
    try:
        return WINFUNCTYPE(win32more.Media.Multimedia.LPMMIOPROC,UInt32,win32more.Media.Multimedia.LPMMIOPROC,UInt32, use_last_error=False)(("mmioInstallIOProcW", windll["WINMM"]), ((1, 'fccIOProc'),(1, 'pIOProc'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmioInstallIOProc():
    return win32more.Media.Multimedia.mmioInstallIOProcW
def _define_mmioOpenA():
    try:
        return WINFUNCTYPE(win32more.Media.Multimedia.HMMIO,POINTER(Byte),POINTER(win32more.Media.Multimedia.MMIOINFO_head),UInt32, use_last_error=False)(("mmioOpenA", windll["WINMM"]), ((1, 'pszFileName'),(1, 'pmmioinfo'),(1, 'fdwOpen'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmioOpenW():
    try:
        return WINFUNCTYPE(win32more.Media.Multimedia.HMMIO,POINTER(Char),POINTER(win32more.Media.Multimedia.MMIOINFO_head),UInt32, use_last_error=False)(("mmioOpenW", windll["WINMM"]), ((1, 'pszFileName'),(1, 'pmmioinfo'),(1, 'fdwOpen'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmioOpen():
    return win32more.Media.Multimedia.mmioOpenW
def _define_mmioRenameA():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(win32more.Media.Multimedia.MMIOINFO_head),UInt32, use_last_error=False)(("mmioRenameA", windll["WINMM"]), ((1, 'pszFileName'),(1, 'pszNewFileName'),(1, 'pmmioinfo'),(1, 'fdwRename'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmioRenameW():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,POINTER(win32more.Media.Multimedia.MMIOINFO_head),UInt32, use_last_error=False)(("mmioRenameW", windll["WINMM"]), ((1, 'pszFileName'),(1, 'pszNewFileName'),(1, 'pmmioinfo'),(1, 'fdwRename'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmioRename():
    return win32more.Media.Multimedia.mmioRenameW
def _define_mmioClose():
    try:
        return WINFUNCTYPE(UInt32,win32more.Media.Multimedia.HMMIO,UInt32, use_last_error=False)(("mmioClose", windll["WINMM"]), ((1, 'hmmio'),(1, 'fuClose'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmioRead():
    try:
        return WINFUNCTYPE(Int32,win32more.Media.Multimedia.HMMIO,POINTER(SByte),Int32, use_last_error=False)(("mmioRead", windll["WINMM"]), ((1, 'hmmio'),(1, 'pch'),(1, 'cch'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmioWrite():
    try:
        return WINFUNCTYPE(Int32,win32more.Media.Multimedia.HMMIO,win32more.Foundation.PSTR,Int32, use_last_error=False)(("mmioWrite", windll["WINMM"]), ((1, 'hmmio'),(1, 'pch'),(1, 'cch'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmioSeek():
    try:
        return WINFUNCTYPE(Int32,win32more.Media.Multimedia.HMMIO,Int32,Int32, use_last_error=False)(("mmioSeek", windll["WINMM"]), ((1, 'hmmio'),(1, 'lOffset'),(1, 'iOrigin'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmioGetInfo():
    try:
        return WINFUNCTYPE(UInt32,win32more.Media.Multimedia.HMMIO,POINTER(win32more.Media.Multimedia.MMIOINFO_head),UInt32, use_last_error=False)(("mmioGetInfo", windll["WINMM"]), ((1, 'hmmio'),(1, 'pmmioinfo'),(1, 'fuInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmioSetInfo():
    try:
        return WINFUNCTYPE(UInt32,win32more.Media.Multimedia.HMMIO,POINTER(win32more.Media.Multimedia.MMIOINFO_head),UInt32, use_last_error=False)(("mmioSetInfo", windll["WINMM"]), ((1, 'hmmio'),(1, 'pmmioinfo'),(1, 'fuInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmioSetBuffer():
    try:
        return WINFUNCTYPE(UInt32,win32more.Media.Multimedia.HMMIO,POINTER(Byte),Int32,UInt32, use_last_error=False)(("mmioSetBuffer", windll["WINMM"]), ((1, 'hmmio'),(1, 'pchBuffer'),(1, 'cchBuffer'),(1, 'fuBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmioFlush():
    try:
        return WINFUNCTYPE(UInt32,win32more.Media.Multimedia.HMMIO,UInt32, use_last_error=False)(("mmioFlush", windll["WINMM"]), ((1, 'hmmio'),(1, 'fuFlush'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmioAdvance():
    try:
        return WINFUNCTYPE(UInt32,win32more.Media.Multimedia.HMMIO,POINTER(win32more.Media.Multimedia.MMIOINFO_head),UInt32, use_last_error=False)(("mmioAdvance", windll["WINMM"]), ((1, 'hmmio'),(1, 'pmmioinfo'),(1, 'fuAdvance'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmioSendMessage():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,win32more.Media.Multimedia.HMMIO,UInt32,win32more.Foundation.LPARAM,win32more.Foundation.LPARAM, use_last_error=False)(("mmioSendMessage", windll["WINMM"]), ((1, 'hmmio'),(1, 'uMsg'),(1, 'lParam1'),(1, 'lParam2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmioDescend():
    try:
        return WINFUNCTYPE(UInt32,win32more.Media.Multimedia.HMMIO,POINTER(win32more.Media.Multimedia.MMCKINFO_head),POINTER(win32more.Media.Multimedia.MMCKINFO_head),UInt32, use_last_error=False)(("mmioDescend", windll["WINMM"]), ((1, 'hmmio'),(1, 'pmmcki'),(1, 'pmmckiParent'),(1, 'fuDescend'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmioAscend():
    try:
        return WINFUNCTYPE(UInt32,win32more.Media.Multimedia.HMMIO,POINTER(win32more.Media.Multimedia.MMCKINFO_head),UInt32, use_last_error=False)(("mmioAscend", windll["WINMM"]), ((1, 'hmmio'),(1, 'pmmcki'),(1, 'fuAscend'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmioCreateChunk():
    try:
        return WINFUNCTYPE(UInt32,win32more.Media.Multimedia.HMMIO,POINTER(win32more.Media.Multimedia.MMCKINFO_head),UInt32, use_last_error=False)(("mmioCreateChunk", windll["WINMM"]), ((1, 'hmmio'),(1, 'pmmcki'),(1, 'fuCreate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_joyGetPosEx():
    try:
        return WINFUNCTYPE(UInt32,UInt32,POINTER(win32more.Media.Multimedia.JOYINFOEX_head), use_last_error=False)(("joyGetPosEx", windll["WINMM"]), ((1, 'uJoyID'),(1, 'pji'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_joyGetNumDevs():
    try:
        return WINFUNCTYPE(UInt32, use_last_error=False)(("joyGetNumDevs", windll["WINMM"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_joyGetDevCapsA():
    try:
        return WINFUNCTYPE(UInt32,UIntPtr,POINTER(win32more.Media.Multimedia.JOYCAPSA_head),UInt32, use_last_error=False)(("joyGetDevCapsA", windll["WINMM"]), ((1, 'uJoyID'),(1, 'pjc'),(1, 'cbjc'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_joyGetDevCapsW():
    try:
        return WINFUNCTYPE(UInt32,UIntPtr,POINTER(win32more.Media.Multimedia.JOYCAPSW_head),UInt32, use_last_error=False)(("joyGetDevCapsW", windll["WINMM"]), ((1, 'uJoyID'),(1, 'pjc'),(1, 'cbjc'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_joyGetDevCaps():
    return win32more.Media.Multimedia.joyGetDevCapsW
def _define_joyGetPos():
    try:
        return WINFUNCTYPE(UInt32,UInt32,POINTER(win32more.Media.Multimedia.JOYINFO_head), use_last_error=False)(("joyGetPos", windll["WINMM"]), ((1, 'uJoyID'),(1, 'pji'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_joyGetThreshold():
    try:
        return WINFUNCTYPE(UInt32,UInt32,POINTER(UInt32), use_last_error=False)(("joyGetThreshold", windll["WINMM"]), ((1, 'uJoyID'),(1, 'puThreshold'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_joyReleaseCapture():
    try:
        return WINFUNCTYPE(UInt32,UInt32, use_last_error=False)(("joyReleaseCapture", windll["WINMM"]), ((1, 'uJoyID'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_joySetCapture():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,UInt32,UInt32,win32more.Foundation.BOOL, use_last_error=False)(("joySetCapture", windll["WINMM"]), ((1, 'hwnd'),(1, 'uJoyID'),(1, 'uPeriod'),(1, 'fChanged'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_joySetThreshold():
    try:
        return WINFUNCTYPE(UInt32,UInt32,UInt32, use_last_error=False)(("joySetThreshold", windll["WINMM"]), ((1, 'uJoyID'),(1, 'uThreshold'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_VideoForWindowsVersion():
    try:
        return WINFUNCTYPE(UInt32, use_last_error=False)(("VideoForWindowsVersion", windll["MSVFW32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_ICInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,UInt32,POINTER(win32more.Media.Multimedia.ICINFO_head), use_last_error=False)(("ICInfo", windll["MSVFW32"]), ((1, 'fccType'),(1, 'fccHandler'),(1, 'lpicinfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ICInstall():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,UInt32,win32more.Foundation.LPARAM,win32more.Foundation.PSTR,UInt32, use_last_error=False)(("ICInstall", windll["MSVFW32"]), ((1, 'fccType'),(1, 'fccHandler'),(1, 'lParam'),(1, 'szDesc'),(1, 'wFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ICRemove():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,UInt32,UInt32, use_last_error=False)(("ICRemove", windll["MSVFW32"]), ((1, 'fccType'),(1, 'fccHandler'),(1, 'wFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ICGetInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,win32more.Media.Multimedia.HIC,POINTER(win32more.Media.Multimedia.ICINFO_head),UInt32, use_last_error=False)(("ICGetInfo", windll["MSVFW32"]), ((1, 'hic'),(1, 'picinfo'),(1, 'cb'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ICOpen():
    try:
        return WINFUNCTYPE(win32more.Media.Multimedia.HIC,UInt32,UInt32,UInt32, use_last_error=False)(("ICOpen", windll["MSVFW32"]), ((1, 'fccType'),(1, 'fccHandler'),(1, 'wMode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ICOpenFunction():
    try:
        return WINFUNCTYPE(win32more.Media.Multimedia.HIC,UInt32,UInt32,UInt32,win32more.Foundation.FARPROC, use_last_error=False)(("ICOpenFunction", windll["MSVFW32"]), ((1, 'fccType'),(1, 'fccHandler'),(1, 'wMode'),(1, 'lpfnHandler'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ICClose():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,win32more.Media.Multimedia.HIC, use_last_error=False)(("ICClose", windll["MSVFW32"]), ((1, 'hic'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ICSendMessage():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,win32more.Media.Multimedia.HIC,UInt32,UIntPtr,UIntPtr, use_last_error=False)(("ICSendMessage", windll["MSVFW32"]), ((1, 'hic'),(1, 'msg'),(1, 'dw1'),(1, 'dw2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ICCompress():
    try:
        return WINFUNCTYPE(UInt32,win32more.Media.Multimedia.HIC,UInt32,POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head),c_void_p,POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head),c_void_p,POINTER(UInt32),POINTER(UInt32),Int32,UInt32,UInt32,POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head),c_void_p, use_last_error=False)(("ICCompress", windll["MSVFW32"]), ((1, 'hic'),(1, 'dwFlags'),(1, 'lpbiOutput'),(1, 'lpData'),(1, 'lpbiInput'),(1, 'lpBits'),(1, 'lpckid'),(1, 'lpdwFlags'),(1, 'lFrameNum'),(1, 'dwFrameSize'),(1, 'dwQuality'),(1, 'lpbiPrev'),(1, 'lpPrev'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ICDecompress():
    try:
        return WINFUNCTYPE(UInt32,win32more.Media.Multimedia.HIC,UInt32,POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head),c_void_p,POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head),c_void_p, use_last_error=False)(("ICDecompress", windll["MSVFW32"]), ((1, 'hic'),(1, 'dwFlags'),(1, 'lpbiFormat'),(1, 'lpData'),(1, 'lpbi'),(1, 'lpBits'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ICDrawBegin():
    try:
        return WINFUNCTYPE(UInt32,win32more.Media.Multimedia.HIC,UInt32,win32more.Graphics.Gdi.HPALETTE,win32more.Foundation.HWND,win32more.Graphics.Gdi.HDC,Int32,Int32,Int32,Int32,POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head),Int32,Int32,Int32,Int32,UInt32,UInt32, use_last_error=False)(("ICDrawBegin", windll["MSVFW32"]), ((1, 'hic'),(1, 'dwFlags'),(1, 'hpal'),(1, 'hwnd'),(1, 'hdc'),(1, 'xDst'),(1, 'yDst'),(1, 'dxDst'),(1, 'dyDst'),(1, 'lpbi'),(1, 'xSrc'),(1, 'ySrc'),(1, 'dxSrc'),(1, 'dySrc'),(1, 'dwRate'),(1, 'dwScale'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ICDraw():
    try:
        return WINFUNCTYPE(UInt32,win32more.Media.Multimedia.HIC,UInt32,c_void_p,c_void_p,UInt32,Int32, use_last_error=False)(("ICDraw", windll["MSVFW32"]), ((1, 'hic'),(1, 'dwFlags'),(1, 'lpFormat'),(1, 'lpData'),(1, 'cbData'),(1, 'lTime'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ICLocate():
    try:
        return WINFUNCTYPE(win32more.Media.Multimedia.HIC,UInt32,UInt32,POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head),POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head),UInt16, use_last_error=False)(("ICLocate", windll["MSVFW32"]), ((1, 'fccType'),(1, 'fccHandler'),(1, 'lpbiIn'),(1, 'lpbiOut'),(1, 'wFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ICGetDisplayFormat():
    try:
        return WINFUNCTYPE(win32more.Media.Multimedia.HIC,win32more.Media.Multimedia.HIC,POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head),POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head),Int32,Int32,Int32, use_last_error=False)(("ICGetDisplayFormat", windll["MSVFW32"]), ((1, 'hic'),(1, 'lpbiIn'),(1, 'lpbiOut'),(1, 'BitDepth'),(1, 'dx'),(1, 'dy'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ICImageCompress():
    try:
        return WINFUNCTYPE(win32more.Foundation.HANDLE,win32more.Media.Multimedia.HIC,UInt32,POINTER(win32more.Graphics.Gdi.BITMAPINFO_head),c_void_p,POINTER(win32more.Graphics.Gdi.BITMAPINFO_head),Int32,POINTER(Int32), use_last_error=False)(("ICImageCompress", windll["MSVFW32"]), ((1, 'hic'),(1, 'uiFlags'),(1, 'lpbiIn'),(1, 'lpBits'),(1, 'lpbiOut'),(1, 'lQuality'),(1, 'plSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ICImageDecompress():
    try:
        return WINFUNCTYPE(win32more.Foundation.HANDLE,win32more.Media.Multimedia.HIC,UInt32,POINTER(win32more.Graphics.Gdi.BITMAPINFO_head),c_void_p,POINTER(win32more.Graphics.Gdi.BITMAPINFO_head), use_last_error=False)(("ICImageDecompress", windll["MSVFW32"]), ((1, 'hic'),(1, 'uiFlags'),(1, 'lpbiIn'),(1, 'lpBits'),(1, 'lpbiOut'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ICCompressorChoose():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,UInt32,c_void_p,c_void_p,POINTER(win32more.Media.Multimedia.COMPVARS_head),win32more.Foundation.PSTR, use_last_error=False)(("ICCompressorChoose", windll["MSVFW32"]), ((1, 'hwnd'),(1, 'uiFlags'),(1, 'pvIn'),(1, 'lpData'),(1, 'pc'),(1, 'lpszTitle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ICSeqCompressFrameStart():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Media.Multimedia.COMPVARS_head),POINTER(win32more.Graphics.Gdi.BITMAPINFO_head), use_last_error=False)(("ICSeqCompressFrameStart", windll["MSVFW32"]), ((1, 'pc'),(1, 'lpbiIn'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ICSeqCompressFrameEnd():
    try:
        return WINFUNCTYPE(Void,POINTER(win32more.Media.Multimedia.COMPVARS_head), use_last_error=False)(("ICSeqCompressFrameEnd", windll["MSVFW32"]), ((1, 'pc'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ICSeqCompressFrame():
    try:
        return WINFUNCTYPE(c_void_p,POINTER(win32more.Media.Multimedia.COMPVARS_head),UInt32,c_void_p,POINTER(win32more.Foundation.BOOL),POINTER(Int32), use_last_error=False)(("ICSeqCompressFrame", windll["MSVFW32"]), ((1, 'pc'),(1, 'uiFlags'),(1, 'lpBits'),(1, 'pfKey'),(1, 'plSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ICCompressorFree():
    try:
        return WINFUNCTYPE(Void,POINTER(win32more.Media.Multimedia.COMPVARS_head), use_last_error=False)(("ICCompressorFree", windll["MSVFW32"]), ((1, 'pc'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DrawDibOpen():
    try:
        return WINFUNCTYPE(IntPtr, use_last_error=False)(("DrawDibOpen", windll["MSVFW32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_DrawDibClose():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,IntPtr, use_last_error=False)(("DrawDibClose", windll["MSVFW32"]), ((1, 'hdd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DrawDibGetBuffer():
    try:
        return WINFUNCTYPE(c_void_p,IntPtr,POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head),UInt32,UInt32, use_last_error=False)(("DrawDibGetBuffer", windll["MSVFW32"]), ((1, 'hdd'),(1, 'lpbi'),(1, 'dwSize'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DrawDibGetPalette():
    try:
        return WINFUNCTYPE(win32more.Graphics.Gdi.HPALETTE,IntPtr, use_last_error=False)(("DrawDibGetPalette", windll["MSVFW32"]), ((1, 'hdd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DrawDibSetPalette():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,IntPtr,win32more.Graphics.Gdi.HPALETTE, use_last_error=False)(("DrawDibSetPalette", windll["MSVFW32"]), ((1, 'hdd'),(1, 'hpal'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DrawDibChangePalette():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,IntPtr,Int32,Int32,POINTER(win32more.Graphics.Gdi.PALETTEENTRY), use_last_error=False)(("DrawDibChangePalette", windll["MSVFW32"]), ((1, 'hdd'),(1, 'iStart'),(1, 'iLen'),(1, 'lppe'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DrawDibRealize():
    try:
        return WINFUNCTYPE(UInt32,IntPtr,win32more.Graphics.Gdi.HDC,win32more.Foundation.BOOL, use_last_error=False)(("DrawDibRealize", windll["MSVFW32"]), ((1, 'hdd'),(1, 'hdc'),(1, 'fBackground'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DrawDibStart():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,IntPtr,UInt32, use_last_error=False)(("DrawDibStart", windll["MSVFW32"]), ((1, 'hdd'),(1, 'rate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DrawDibStop():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,IntPtr, use_last_error=False)(("DrawDibStop", windll["MSVFW32"]), ((1, 'hdd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DrawDibBegin():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,IntPtr,win32more.Graphics.Gdi.HDC,Int32,Int32,POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head),Int32,Int32,UInt32, use_last_error=False)(("DrawDibBegin", windll["MSVFW32"]), ((1, 'hdd'),(1, 'hdc'),(1, 'dxDst'),(1, 'dyDst'),(1, 'lpbi'),(1, 'dxSrc'),(1, 'dySrc'),(1, 'wFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DrawDibDraw():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,IntPtr,win32more.Graphics.Gdi.HDC,Int32,Int32,Int32,Int32,POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head),c_void_p,Int32,Int32,Int32,Int32,UInt32, use_last_error=False)(("DrawDibDraw", windll["MSVFW32"]), ((1, 'hdd'),(1, 'hdc'),(1, 'xDst'),(1, 'yDst'),(1, 'dxDst'),(1, 'dyDst'),(1, 'lpbi'),(1, 'lpBits'),(1, 'xSrc'),(1, 'ySrc'),(1, 'dxSrc'),(1, 'dySrc'),(1, 'wFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DrawDibEnd():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,IntPtr, use_last_error=False)(("DrawDibEnd", windll["MSVFW32"]), ((1, 'hdd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DrawDibTime():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,IntPtr,POINTER(win32more.Media.Multimedia.DRAWDIBTIME_head), use_last_error=False)(("DrawDibTime", windll["MSVFW32"]), ((1, 'hdd'),(1, 'lpddtime'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DrawDibProfileDisplay():
    try:
        return WINFUNCTYPE(win32more.Foundation.LRESULT,POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head), use_last_error=False)(("DrawDibProfileDisplay", windll["MSVFW32"]), ((1, 'lpbi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIFileInit():
    try:
        return WINFUNCTYPE(Void, use_last_error=False)(("AVIFileInit", windll["AVIFIL32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIFileExit():
    try:
        return WINFUNCTYPE(Void, use_last_error=False)(("AVIFileExit", windll["AVIFIL32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIFileAddRef():
    try:
        return WINFUNCTYPE(UInt32,win32more.Media.Multimedia.IAVIFile_head, use_last_error=False)(("AVIFileAddRef", windll["AVIFIL32"]), ((1, 'pfile'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIFileRelease():
    try:
        return WINFUNCTYPE(UInt32,win32more.Media.Multimedia.IAVIFile_head, use_last_error=False)(("AVIFileRelease", windll["AVIFIL32"]), ((1, 'pfile'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIFileOpenA():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.Multimedia.IAVIFile_head),win32more.Foundation.PSTR,UInt32,POINTER(Guid), use_last_error=False)(("AVIFileOpenA", windll["AVIFIL32"]), ((1, 'ppfile'),(1, 'szFile'),(1, 'uMode'),(1, 'lpHandler'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIFileOpenW():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.Multimedia.IAVIFile_head),win32more.Foundation.PWSTR,UInt32,POINTER(Guid), use_last_error=False)(("AVIFileOpenW", windll["AVIFIL32"]), ((1, 'ppfile'),(1, 'szFile'),(1, 'uMode'),(1, 'lpHandler'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIFileOpen():
    return win32more.Media.Multimedia.AVIFileOpenW
def _define_AVIFileInfoW():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIFile_head,POINTER(win32more.Media.Multimedia.AVIFILEINFOW_head),Int32, use_last_error=False)(("AVIFileInfoW", windll["AVIFIL32"]), ((1, 'pfile'),(1, 'pfi'),(1, 'lSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIFileInfo():
    return win32more.Media.Multimedia.AVIFileInfoW
def _define_AVIFileInfoA():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIFile_head,POINTER(win32more.Media.Multimedia.AVIFILEINFOA_head),Int32, use_last_error=False)(("AVIFileInfoA", windll["AVIFIL32"]), ((1, 'pfile'),(1, 'pfi'),(1, 'lSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIFileGetStream():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIFile_head,POINTER(win32more.Media.Multimedia.IAVIStream_head),UInt32,Int32, use_last_error=False)(("AVIFileGetStream", windll["AVIFIL32"]), ((1, 'pfile'),(1, 'ppavi'),(1, 'fccType'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIFileCreateStreamW():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIFile_head,POINTER(win32more.Media.Multimedia.IAVIStream_head),POINTER(win32more.Media.Multimedia.AVISTREAMINFOW_head), use_last_error=False)(("AVIFileCreateStreamW", windll["AVIFIL32"]), ((1, 'pfile'),(1, 'ppavi'),(1, 'psi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIFileCreateStream():
    return win32more.Media.Multimedia.AVIFileCreateStreamW
def _define_AVIFileCreateStreamA():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIFile_head,POINTER(win32more.Media.Multimedia.IAVIStream_head),POINTER(win32more.Media.Multimedia.AVISTREAMINFOA_head), use_last_error=False)(("AVIFileCreateStreamA", windll["AVIFIL32"]), ((1, 'pfile'),(1, 'ppavi'),(1, 'psi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIFileWriteData():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIFile_head,UInt32,c_void_p,Int32, use_last_error=False)(("AVIFileWriteData", windll["AVIFIL32"]), ((1, 'pfile'),(1, 'ckid'),(1, 'lpData'),(1, 'cbData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIFileReadData():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIFile_head,UInt32,c_void_p,POINTER(Int32), use_last_error=False)(("AVIFileReadData", windll["AVIFIL32"]), ((1, 'pfile'),(1, 'ckid'),(1, 'lpData'),(1, 'lpcbData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIFileEndRecord():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIFile_head, use_last_error=False)(("AVIFileEndRecord", windll["AVIFIL32"]), ((1, 'pfile'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIStreamAddRef():
    try:
        return WINFUNCTYPE(UInt32,win32more.Media.Multimedia.IAVIStream_head, use_last_error=False)(("AVIStreamAddRef", windll["AVIFIL32"]), ((1, 'pavi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIStreamRelease():
    try:
        return WINFUNCTYPE(UInt32,win32more.Media.Multimedia.IAVIStream_head, use_last_error=False)(("AVIStreamRelease", windll["AVIFIL32"]), ((1, 'pavi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIStreamInfoW():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIStream_head,POINTER(win32more.Media.Multimedia.AVISTREAMINFOW_head),Int32, use_last_error=False)(("AVIStreamInfoW", windll["AVIFIL32"]), ((1, 'pavi'),(1, 'psi'),(1, 'lSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIStreamInfo():
    return win32more.Media.Multimedia.AVIStreamInfoW
def _define_AVIStreamInfoA():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIStream_head,POINTER(win32more.Media.Multimedia.AVISTREAMINFOA_head),Int32, use_last_error=False)(("AVIStreamInfoA", windll["AVIFIL32"]), ((1, 'pavi'),(1, 'psi'),(1, 'lSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIStreamFindSample():
    try:
        return WINFUNCTYPE(Int32,win32more.Media.Multimedia.IAVIStream_head,Int32,Int32, use_last_error=False)(("AVIStreamFindSample", windll["AVIFIL32"]), ((1, 'pavi'),(1, 'lPos'),(1, 'lFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIStreamReadFormat():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIStream_head,Int32,c_void_p,POINTER(Int32), use_last_error=False)(("AVIStreamReadFormat", windll["AVIFIL32"]), ((1, 'pavi'),(1, 'lPos'),(1, 'lpFormat'),(1, 'lpcbFormat'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIStreamSetFormat():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIStream_head,Int32,c_void_p,Int32, use_last_error=False)(("AVIStreamSetFormat", windll["AVIFIL32"]), ((1, 'pavi'),(1, 'lPos'),(1, 'lpFormat'),(1, 'cbFormat'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIStreamReadData():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIStream_head,UInt32,c_void_p,POINTER(Int32), use_last_error=False)(("AVIStreamReadData", windll["AVIFIL32"]), ((1, 'pavi'),(1, 'fcc'),(1, 'lp'),(1, 'lpcb'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIStreamWriteData():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIStream_head,UInt32,c_void_p,Int32, use_last_error=False)(("AVIStreamWriteData", windll["AVIFIL32"]), ((1, 'pavi'),(1, 'fcc'),(1, 'lp'),(1, 'cb'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIStreamRead():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIStream_head,Int32,Int32,c_void_p,Int32,POINTER(Int32),POINTER(Int32), use_last_error=False)(("AVIStreamRead", windll["AVIFIL32"]), ((1, 'pavi'),(1, 'lStart'),(1, 'lSamples'),(1, 'lpBuffer'),(1, 'cbBuffer'),(1, 'plBytes'),(1, 'plSamples'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIStreamWrite():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIStream_head,Int32,Int32,c_void_p,Int32,UInt32,POINTER(Int32),POINTER(Int32), use_last_error=False)(("AVIStreamWrite", windll["AVIFIL32"]), ((1, 'pavi'),(1, 'lStart'),(1, 'lSamples'),(1, 'lpBuffer'),(1, 'cbBuffer'),(1, 'dwFlags'),(1, 'plSampWritten'),(1, 'plBytesWritten'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIStreamStart():
    try:
        return WINFUNCTYPE(Int32,win32more.Media.Multimedia.IAVIStream_head, use_last_error=False)(("AVIStreamStart", windll["AVIFIL32"]), ((1, 'pavi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIStreamLength():
    try:
        return WINFUNCTYPE(Int32,win32more.Media.Multimedia.IAVIStream_head, use_last_error=False)(("AVIStreamLength", windll["AVIFIL32"]), ((1, 'pavi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIStreamTimeToSample():
    try:
        return WINFUNCTYPE(Int32,win32more.Media.Multimedia.IAVIStream_head,Int32, use_last_error=False)(("AVIStreamTimeToSample", windll["AVIFIL32"]), ((1, 'pavi'),(1, 'lTime'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIStreamSampleToTime():
    try:
        return WINFUNCTYPE(Int32,win32more.Media.Multimedia.IAVIStream_head,Int32, use_last_error=False)(("AVIStreamSampleToTime", windll["AVIFIL32"]), ((1, 'pavi'),(1, 'lSample'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIStreamBeginStreaming():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIStream_head,Int32,Int32,Int32, use_last_error=False)(("AVIStreamBeginStreaming", windll["AVIFIL32"]), ((1, 'pavi'),(1, 'lStart'),(1, 'lEnd'),(1, 'lRate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIStreamEndStreaming():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIStream_head, use_last_error=False)(("AVIStreamEndStreaming", windll["AVIFIL32"]), ((1, 'pavi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIStreamGetFrameOpen():
    try:
        return WINFUNCTYPE(win32more.Media.Multimedia.IGetFrame_head,win32more.Media.Multimedia.IAVIStream_head,POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head), use_last_error=False)(("AVIStreamGetFrameOpen", windll["AVIFIL32"]), ((1, 'pavi'),(1, 'lpbiWanted'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIStreamGetFrame():
    try:
        return WINFUNCTYPE(c_void_p,win32more.Media.Multimedia.IGetFrame_head,Int32, use_last_error=False)(("AVIStreamGetFrame", windll["AVIFIL32"]), ((1, 'pg'),(1, 'lPos'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIStreamGetFrameClose():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IGetFrame_head, use_last_error=False)(("AVIStreamGetFrameClose", windll["AVIFIL32"]), ((1, 'pg'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIStreamOpenFromFileA():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.Multimedia.IAVIStream_head),win32more.Foundation.PSTR,UInt32,Int32,UInt32,POINTER(Guid), use_last_error=False)(("AVIStreamOpenFromFileA", windll["AVIFIL32"]), ((1, 'ppavi'),(1, 'szFile'),(1, 'fccType'),(1, 'lParam'),(1, 'mode'),(1, 'pclsidHandler'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIStreamOpenFromFileW():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.Multimedia.IAVIStream_head),win32more.Foundation.PWSTR,UInt32,Int32,UInt32,POINTER(Guid), use_last_error=False)(("AVIStreamOpenFromFileW", windll["AVIFIL32"]), ((1, 'ppavi'),(1, 'szFile'),(1, 'fccType'),(1, 'lParam'),(1, 'mode'),(1, 'pclsidHandler'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIStreamOpenFromFile():
    return win32more.Media.Multimedia.AVIStreamOpenFromFileW
def _define_AVIStreamCreate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.Multimedia.IAVIStream_head),Int32,Int32,POINTER(Guid), use_last_error=False)(("AVIStreamCreate", windll["AVIFIL32"]), ((1, 'ppavi'),(1, 'lParam1'),(1, 'lParam2'),(1, 'pclsidHandler'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIMakeCompressedStream():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.Multimedia.IAVIStream_head),win32more.Media.Multimedia.IAVIStream_head,POINTER(win32more.Media.Multimedia.AVICOMPRESSOPTIONS_head),POINTER(Guid), use_last_error=False)(("AVIMakeCompressedStream", windll["AVIFIL32"]), ((1, 'ppsCompressed'),(1, 'ppsSource'),(1, 'lpOptions'),(1, 'pclsidHandler'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVISaveA():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PSTR,POINTER(Guid),win32more.Media.Multimedia.AVISAVECALLBACK,Int32,win32more.Media.Multimedia.IAVIStream_head,POINTER(win32more.Media.Multimedia.AVICOMPRESSOPTIONS_head), use_last_error=False)(("AVISaveA", windll["AVIFIL32"]), ((1, 'szFile'),(1, 'pclsidHandler'),(1, 'lpfnCallback'),(1, 'nStreams'),(1, 'pfile'),(1, 'lpOptions'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVISaveVA():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PSTR,POINTER(Guid),win32more.Media.Multimedia.AVISAVECALLBACK,Int32,POINTER(win32more.Media.Multimedia.IAVIStream_head),POINTER(POINTER(win32more.Media.Multimedia.AVICOMPRESSOPTIONS_head)), use_last_error=False)(("AVISaveVA", windll["AVIFIL32"]), ((1, 'szFile'),(1, 'pclsidHandler'),(1, 'lpfnCallback'),(1, 'nStreams'),(1, 'ppavi'),(1, 'plpOptions'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVISaveW():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(Guid),win32more.Media.Multimedia.AVISAVECALLBACK,Int32,win32more.Media.Multimedia.IAVIStream_head,POINTER(win32more.Media.Multimedia.AVICOMPRESSOPTIONS_head), use_last_error=False)(("AVISaveW", windll["AVIFIL32"]), ((1, 'szFile'),(1, 'pclsidHandler'),(1, 'lpfnCallback'),(1, 'nStreams'),(1, 'pfile'),(1, 'lpOptions'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVISave():
    return win32more.Media.Multimedia.AVISaveW
def _define_AVISaveVW():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(Guid),win32more.Media.Multimedia.AVISAVECALLBACK,Int32,POINTER(win32more.Media.Multimedia.IAVIStream_head),POINTER(POINTER(win32more.Media.Multimedia.AVICOMPRESSOPTIONS_head)), use_last_error=False)(("AVISaveVW", windll["AVIFIL32"]), ((1, 'szFile'),(1, 'pclsidHandler'),(1, 'lpfnCallback'),(1, 'nStreams'),(1, 'ppavi'),(1, 'plpOptions'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVISaveV():
    return win32more.Media.Multimedia.AVISaveVW
def _define_AVISaveOptions():
    try:
        return WINFUNCTYPE(IntPtr,win32more.Foundation.HWND,UInt32,Int32,POINTER(win32more.Media.Multimedia.IAVIStream_head),POINTER(POINTER(win32more.Media.Multimedia.AVICOMPRESSOPTIONS_head)), use_last_error=False)(("AVISaveOptions", windll["AVIFIL32"]), ((1, 'hwnd'),(1, 'uiFlags'),(1, 'nStreams'),(1, 'ppavi'),(1, 'plpOptions'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVISaveOptionsFree():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,POINTER(POINTER(win32more.Media.Multimedia.AVICOMPRESSOPTIONS_head)), use_last_error=False)(("AVISaveOptionsFree", windll["AVIFIL32"]), ((1, 'nStreams'),(1, 'plpOptions'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIBuildFilterW():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Char),Int32,win32more.Foundation.BOOL, use_last_error=False)(("AVIBuildFilterW", windll["AVIFIL32"]), ((1, 'lpszFilter'),(1, 'cbFilter'),(1, 'fSaving'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIBuildFilter():
    return win32more.Media.Multimedia.AVIBuildFilterW
def _define_AVIBuildFilterA():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Byte),Int32,win32more.Foundation.BOOL, use_last_error=False)(("AVIBuildFilterA", windll["AVIFIL32"]), ((1, 'lpszFilter'),(1, 'cbFilter'),(1, 'fSaving'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIMakeFileFromStreams():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.Multimedia.IAVIFile_head),Int32,POINTER(win32more.Media.Multimedia.IAVIStream_head), use_last_error=False)(("AVIMakeFileFromStreams", windll["AVIFIL32"]), ((1, 'ppfile'),(1, 'nStreams'),(1, 'papStreams'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIMakeStreamFromClipboard():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.HANDLE,POINTER(win32more.Media.Multimedia.IAVIStream_head), use_last_error=False)(("AVIMakeStreamFromClipboard", windll["AVIFIL32"]), ((1, 'cfFormat'),(1, 'hGlobal'),(1, 'ppstream'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIPutFileOnClipboard():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIFile_head, use_last_error=False)(("AVIPutFileOnClipboard", windll["AVIFIL32"]), ((1, 'pf'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIGetFromClipboard():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.Multimedia.IAVIFile_head), use_last_error=False)(("AVIGetFromClipboard", windll["AVIFIL32"]), ((1, 'lppf'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_AVIClearClipboard():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(("AVIClearClipboard", windll["AVIFIL32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_CreateEditableStream():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.Multimedia.IAVIStream_head),win32more.Media.Multimedia.IAVIStream_head, use_last_error=False)(("CreateEditableStream", windll["AVIFIL32"]), ((1, 'ppsEditable'),(1, 'psSource'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EditStreamCut():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIStream_head,POINTER(Int32),POINTER(Int32),POINTER(win32more.Media.Multimedia.IAVIStream_head), use_last_error=False)(("EditStreamCut", windll["AVIFIL32"]), ((1, 'pavi'),(1, 'plStart'),(1, 'plLength'),(1, 'ppResult'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EditStreamCopy():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIStream_head,POINTER(Int32),POINTER(Int32),POINTER(win32more.Media.Multimedia.IAVIStream_head), use_last_error=False)(("EditStreamCopy", windll["AVIFIL32"]), ((1, 'pavi'),(1, 'plStart'),(1, 'plLength'),(1, 'ppResult'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EditStreamPaste():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIStream_head,POINTER(Int32),POINTER(Int32),win32more.Media.Multimedia.IAVIStream_head,Int32,Int32, use_last_error=False)(("EditStreamPaste", windll["AVIFIL32"]), ((1, 'pavi'),(1, 'plPos'),(1, 'plLength'),(1, 'pstream'),(1, 'lStart'),(1, 'lEnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EditStreamClone():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIStream_head,POINTER(win32more.Media.Multimedia.IAVIStream_head), use_last_error=False)(("EditStreamClone", windll["AVIFIL32"]), ((1, 'pavi'),(1, 'ppResult'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EditStreamSetNameA():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIStream_head,win32more.Foundation.PSTR, use_last_error=False)(("EditStreamSetNameA", windll["AVIFIL32"]), ((1, 'pavi'),(1, 'lpszName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EditStreamSetNameW():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIStream_head,win32more.Foundation.PWSTR, use_last_error=False)(("EditStreamSetNameW", windll["AVIFIL32"]), ((1, 'pavi'),(1, 'lpszName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EditStreamSetName():
    return win32more.Media.Multimedia.EditStreamSetNameW
def _define_EditStreamSetInfoW():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIStream_head,POINTER(win32more.Media.Multimedia.AVISTREAMINFOW_head),Int32, use_last_error=False)(("EditStreamSetInfoW", windll["AVIFIL32"]), ((1, 'pavi'),(1, 'lpInfo'),(1, 'cbInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EditStreamSetInfo():
    return win32more.Media.Multimedia.EditStreamSetInfoW
def _define_EditStreamSetInfoA():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Multimedia.IAVIStream_head,POINTER(win32more.Media.Multimedia.AVISTREAMINFOA_head),Int32, use_last_error=False)(("EditStreamSetInfoA", windll["AVIFIL32"]), ((1, 'pavi'),(1, 'lpInfo'),(1, 'cbInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MCIWndCreateA():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.HWND,win32more.Foundation.HINSTANCE,UInt32,win32more.Foundation.PSTR, use_last_error=False)(("MCIWndCreateA", windll["MSVFW32"]), ((1, 'hwndParent'),(1, 'hInstance'),(1, 'dwStyle'),(1, 'szFile'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MCIWndCreateW():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.HWND,win32more.Foundation.HINSTANCE,UInt32,win32more.Foundation.PWSTR, use_last_error=False)(("MCIWndCreateW", windll["MSVFW32"]), ((1, 'hwndParent'),(1, 'hInstance'),(1, 'dwStyle'),(1, 'szFile'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MCIWndCreate():
    return win32more.Media.Multimedia.MCIWndCreateW
def _define_MCIWndRegisterClass():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=False)(("MCIWndRegisterClass", windll["MSVFW32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_capCreateCaptureWindowA():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.PSTR,UInt32,Int32,Int32,Int32,Int32,win32more.Foundation.HWND,Int32, use_last_error=False)(("capCreateCaptureWindowA", windll["AVICAP32"]), ((1, 'lpszWindowName'),(1, 'dwStyle'),(1, 'x'),(1, 'y'),(1, 'nWidth'),(1, 'nHeight'),(1, 'hwndParent'),(1, 'nID'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_capGetDriverDescriptionA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(Byte),Int32,POINTER(Byte),Int32, use_last_error=False)(("capGetDriverDescriptionA", windll["AVICAP32"]), ((1, 'wDriverIndex'),(1, 'lpszName'),(1, 'cbName'),(1, 'lpszVer'),(1, 'cbVer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_capCreateCaptureWindowW():
    try:
        return WINFUNCTYPE(win32more.Foundation.HWND,win32more.Foundation.PWSTR,UInt32,Int32,Int32,Int32,Int32,win32more.Foundation.HWND,Int32, use_last_error=False)(("capCreateCaptureWindowW", windll["AVICAP32"]), ((1, 'lpszWindowName'),(1, 'dwStyle'),(1, 'x'),(1, 'y'),(1, 'nWidth'),(1, 'nHeight'),(1, 'hwndParent'),(1, 'nID'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_capCreateCaptureWindow():
    return win32more.Media.Multimedia.capCreateCaptureWindowW
def _define_capGetDriverDescriptionW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(Char),Int32,POINTER(Char),Int32, use_last_error=False)(("capGetDriverDescriptionW", windll["AVICAP32"]), ((1, 'wDriverIndex'),(1, 'lpszName'),(1, 'cbName'),(1, 'lpszVer'),(1, 'cbVer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_capGetDriverDescription():
    return win32more.Media.Multimedia.capGetDriverDescriptionW
def _define_GetOpenFileNamePreviewA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.UI.Controls.Dialogs.OPENFILENAMEA_head), use_last_error=False)(("GetOpenFileNamePreviewA", windll["MSVFW32"]), ((1, 'lpofn'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetSaveFileNamePreviewA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.UI.Controls.Dialogs.OPENFILENAMEA_head), use_last_error=False)(("GetSaveFileNamePreviewA", windll["MSVFW32"]), ((1, 'lpofn'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetOpenFileNamePreviewW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.UI.Controls.Dialogs.OPENFILENAMEW_head), use_last_error=False)(("GetOpenFileNamePreviewW", windll["MSVFW32"]), ((1, 'lpofn'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetOpenFileNamePreview():
    return win32more.Media.Multimedia.GetOpenFileNamePreviewW
def _define_GetSaveFileNamePreviewW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.UI.Controls.Dialogs.OPENFILENAMEW_head), use_last_error=False)(("GetSaveFileNamePreviewW", windll["MSVFW32"]), ((1, 'lpofn'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetSaveFileNamePreview():
    return win32more.Media.Multimedia.GetSaveFileNamePreviewW
def _define_mmTaskCreate():
    try:
        return WINFUNCTYPE(UInt32,win32more.Media.Multimedia.LPTASKCALLBACK,POINTER(win32more.Foundation.HANDLE),UIntPtr, use_last_error=False)(("mmTaskCreate", windll["WINMM"]), ((1, 'lpfn'),(1, 'lph'),(1, 'dwInst'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmTaskBlock():
    try:
        return WINFUNCTYPE(Void,UInt32, use_last_error=False)(("mmTaskBlock", windll["WINMM"]), ((1, 'h'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmTaskSignal():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32, use_last_error=False)(("mmTaskSignal", windll["WINMM"]), ((1, 'h'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmTaskYield():
    try:
        return WINFUNCTYPE(Void, use_last_error=False)(("mmTaskYield", windll["WINMM"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_mmGetCurrentTask():
    try:
        return WINFUNCTYPE(UInt32, use_last_error=False)(("mmGetCurrentTask", windll["WINMM"]), ())
    except (FileNotFoundError, AttributeError):
        return None
__all__ = [
    "WM_CAP_START",
    "MODM_USER",
    "MIDM_USER",
    "MODM_MAPPER",
    "MIDM_MAPPER",
    "MODM_INIT",
    "MIDM_INIT",
    "MODM_INIT_EX",
    "MIDM_INIT_EX",
    "DRV_MCI_FIRST",
    "ACMDM_BASE",
    "ICM_RESERVED",
    "MCI_TEST",
    "MCI_CAPTURE",
    "MCI_MONITOR",
    "MCI_RESERVE",
    "MCI_SETAUDIO",
    "MCI_SIGNAL",
    "MCI_SETVIDEO",
    "MCI_QUALITY",
    "MCI_LIST",
    "MCI_UNDO",
    "MCI_CONFIGURE",
    "MCI_RESTORE",
    "MCI_ON",
    "MCI_OFF",
    "MCI_DGV_FILE_MODE_SAVING",
    "MCI_DGV_FILE_MODE_LOADING",
    "MCI_DGV_FILE_MODE_EDITING",
    "MCI_DGV_FILE_MODE_IDLE",
    "MCI_ON_S",
    "MCI_OFF_S",
    "MCI_DGV_FILE_S",
    "MCI_DGV_INPUT_S",
    "MCI_DGV_FILE_MODE_SAVING_S",
    "MCI_DGV_FILE_MODE_LOADING_S",
    "MCI_DGV_FILE_MODE_EDITING_S",
    "MCI_DGV_FILE_MODE_IDLE_S",
    "MCI_DGV_SETVIDEO_SRC_NTSC_S",
    "MCI_DGV_SETVIDEO_SRC_RGB_S",
    "MCI_DGV_SETVIDEO_SRC_SVIDEO_S",
    "MCI_DGV_SETVIDEO_SRC_PAL_S",
    "MCI_DGV_SETVIDEO_SRC_SECAM_S",
    "MCI_DGV_SETVIDEO_SRC_GENERIC_S",
    "MCI_DGV_SETAUDIO_SRC_LEFT_S",
    "MCI_DGV_SETAUDIO_SRC_RIGHT_S",
    "MCI_DGV_SETAUDIO_SRC_AVERAGE_S",
    "MCI_DGV_SETAUDIO_SRC_STEREO_S",
    "MCIERR_DGV_DEVICE_LIMIT",
    "MCIERR_DGV_IOERR",
    "MCIERR_DGV_WORKSPACE_EMPTY",
    "MCIERR_DGV_DISK_FULL",
    "MCIERR_DGV_DEVICE_MEMORY_FULL",
    "MCIERR_DGV_BAD_CLIPBOARD_RANGE",
    "MCI_DGV_METHOD_PRE",
    "MCI_DGV_METHOD_POST",
    "MCI_DGV_METHOD_DIRECT",
    "MCI_DGV_FF_AVSS",
    "MCI_DGV_FF_AVI",
    "MCI_DGV_FF_DIB",
    "MCI_DGV_FF_RDIB",
    "MCI_DGV_FF_JPEG",
    "MCI_DGV_FF_RJPEG",
    "MCI_DGV_FF_JFIF",
    "MCI_DGV_FF_MPEG",
    "MCI_DGV_GETDEVCAPS_CAN_LOCK",
    "MCI_DGV_GETDEVCAPS_CAN_STRETCH",
    "MCI_DGV_GETDEVCAPS_CAN_FREEZE",
    "MCI_DGV_GETDEVCAPS_MAX_WINDOWS",
    "MCI_DGV_GETDEVCAPS_CAN_REVERSE",
    "MCI_DGV_GETDEVCAPS_HAS_STILL",
    "MCI_DGV_GETDEVCAPS_PALETTES",
    "MCI_DGV_GETDEVCAPS_CAN_STR_IN",
    "MCI_DGV_GETDEVCAPS_CAN_TEST",
    "MCI_DGV_GETDEVCAPS_MAXIMUM_RATE",
    "MCI_DGV_GETDEVCAPS_MINIMUM_RATE",
    "MCI_DGV_CAPTURE_AS",
    "MCI_DGV_CAPTURE_AT",
    "MCI_DGV_COPY_AT",
    "MCI_DGV_COPY_AUDIO_STREAM",
    "MCI_DGV_COPY_VIDEO_STREAM",
    "MCI_DGV_CUE_INPUT",
    "MCI_DGV_CUE_OUTPUT",
    "MCI_DGV_CUE_NOSHOW",
    "MCI_DGV_CUT_AT",
    "MCI_DGV_CUT_AUDIO_STREAM",
    "MCI_DGV_CUT_VIDEO_STREAM",
    "MCI_DGV_DELETE_AT",
    "MCI_DGV_DELETE_AUDIO_STREAM",
    "MCI_DGV_DELETE_VIDEO_STREAM",
    "MCI_DGV_FREEZE_AT",
    "MCI_DGV_FREEZE_OUTSIDE",
    "MCI_DGV_INFO_TEXT",
    "MCI_DGV_INFO_ITEM",
    "MCI_INFO_VERSION",
    "MCI_DGV_INFO_USAGE",
    "MCI_DGV_INFO_AUDIO_QUALITY",
    "MCI_DGV_INFO_STILL_QUALITY",
    "MCI_DGV_INFO_VIDEO_QUALITY",
    "MCI_DGV_INFO_AUDIO_ALG",
    "MCI_DGV_INFO_STILL_ALG",
    "MCI_DGV_INFO_VIDEO_ALG",
    "MCI_DGV_LIST_ITEM",
    "MCI_DGV_LIST_COUNT",
    "MCI_DGV_LIST_NUMBER",
    "MCI_DGV_LIST_ALG",
    "MCI_DGV_LIST_AUDIO_ALG",
    "MCI_DGV_LIST_AUDIO_QUALITY",
    "MCI_DGV_LIST_AUDIO_STREAM",
    "MCI_DGV_LIST_STILL_ALG",
    "MCI_DGV_LIST_STILL_QUALITY",
    "MCI_DGV_LIST_VIDEO_ALG",
    "MCI_DGV_LIST_VIDEO_QUALITY",
    "MCI_DGV_LIST_VIDEO_STREAM",
    "MCI_DGV_LIST_VIDEO_SOURCE",
    "MCI_DGV_MONITOR_METHOD",
    "MCI_DGV_MONITOR_SOURCE",
    "MCI_DGV_MONITOR_INPUT",
    "MCI_DGV_MONITOR_FILE",
    "MCI_DGV_OPEN_WS",
    "MCI_DGV_OPEN_PARENT",
    "MCI_DGV_OPEN_NOSTATIC",
    "MCI_DGV_OPEN_16BIT",
    "MCI_DGV_OPEN_32BIT",
    "MCI_DGV_PASTE_AT",
    "MCI_DGV_PASTE_AUDIO_STREAM",
    "MCI_DGV_PASTE_VIDEO_STREAM",
    "MCI_DGV_PASTE_INSERT",
    "MCI_DGV_PASTE_OVERWRITE",
    "MCI_DGV_PLAY_REPEAT",
    "MCI_DGV_PLAY_REVERSE",
    "MCI_DGV_RECT",
    "MCI_DGV_PUT_SOURCE",
    "MCI_DGV_PUT_DESTINATION",
    "MCI_DGV_PUT_FRAME",
    "MCI_DGV_PUT_VIDEO",
    "MCI_DGV_PUT_WINDOW",
    "MCI_DGV_PUT_CLIENT",
    "MCI_QUALITY_ITEM",
    "MCI_QUALITY_NAME",
    "MCI_QUALITY_ALG",
    "MCI_QUALITY_DIALOG",
    "MCI_QUALITY_HANDLE",
    "MCI_QUALITY_ITEM_AUDIO",
    "MCI_QUALITY_ITEM_STILL",
    "MCI_QUALITY_ITEM_VIDEO",
    "MCI_DGV_REALIZE_NORM",
    "MCI_DGV_REALIZE_BKGD",
    "MCI_DGV_RECORD_HOLD",
    "MCI_DGV_RECORD_AUDIO_STREAM",
    "MCI_DGV_RECORD_VIDEO_STREAM",
    "MCI_DGV_RESERVE_IN",
    "MCI_DGV_RESERVE_SIZE",
    "MCI_DGV_RESTORE_FROM",
    "MCI_DGV_RESTORE_AT",
    "MCI_DGV_SAVE_ABORT",
    "MCI_DGV_SAVE_KEEPRESERVE",
    "MCI_DGV_SET_SEEK_EXACTLY",
    "MCI_DGV_SET_SPEED",
    "MCI_DGV_SET_STILL",
    "MCI_DGV_SET_FILEFORMAT",
    "MCI_DGV_SETAUDIO_OVER",
    "MCI_DGV_SETAUDIO_CLOCKTIME",
    "MCI_DGV_SETAUDIO_ALG",
    "MCI_DGV_SETAUDIO_QUALITY",
    "MCI_DGV_SETAUDIO_RECORD",
    "MCI_DGV_SETAUDIO_LEFT",
    "MCI_DGV_SETAUDIO_RIGHT",
    "MCI_DGV_SETAUDIO_ITEM",
    "MCI_DGV_SETAUDIO_VALUE",
    "MCI_DGV_SETAUDIO_INPUT",
    "MCI_DGV_SETAUDIO_OUTPUT",
    "MCI_DGV_SETAUDIO_TREBLE",
    "MCI_DGV_SETAUDIO_BASS",
    "MCI_DGV_SETAUDIO_VOLUME",
    "MCI_DGV_SETAUDIO_STREAM",
    "MCI_DGV_SETAUDIO_SOURCE",
    "MCI_DGV_SETAUDIO_SAMPLESPERSEC",
    "MCI_DGV_SETAUDIO_AVGBYTESPERSEC",
    "MCI_DGV_SETAUDIO_BLOCKALIGN",
    "MCI_DGV_SETAUDIO_BITSPERSAMPLE",
    "MCI_DGV_SETAUDIO_SOURCE_STEREO",
    "MCI_DGV_SETAUDIO_SOURCE_LEFT",
    "MCI_DGV_SETAUDIO_SOURCE_RIGHT",
    "MCI_DGV_SETAUDIO_SOURCE_AVERAGE",
    "MCI_DGV_SETVIDEO_QUALITY",
    "MCI_DGV_SETVIDEO_ALG",
    "MCI_DGV_SETVIDEO_CLOCKTIME",
    "MCI_DGV_SETVIDEO_SRC_NUMBER",
    "MCI_DGV_SETVIDEO_ITEM",
    "MCI_DGV_SETVIDEO_OVER",
    "MCI_DGV_SETVIDEO_RECORD",
    "MCI_DGV_SETVIDEO_STILL",
    "MCI_DGV_SETVIDEO_VALUE",
    "MCI_DGV_SETVIDEO_INPUT",
    "MCI_DGV_SETVIDEO_OUTPUT",
    "MCI_DGV_SETVIDEO_SRC_NTSC",
    "MCI_DGV_SETVIDEO_SRC_RGB",
    "MCI_DGV_SETVIDEO_SRC_SVIDEO",
    "MCI_DGV_SETVIDEO_SRC_PAL",
    "MCI_DGV_SETVIDEO_SRC_SECAM",
    "MCI_DGV_SETVIDEO_SRC_GENERIC",
    "MCI_DGV_SETVIDEO_BRIGHTNESS",
    "MCI_DGV_SETVIDEO_COLOR",
    "MCI_DGV_SETVIDEO_CONTRAST",
    "MCI_DGV_SETVIDEO_TINT",
    "MCI_DGV_SETVIDEO_SHARPNESS",
    "MCI_DGV_SETVIDEO_GAMMA",
    "MCI_DGV_SETVIDEO_STREAM",
    "MCI_DGV_SETVIDEO_PALHANDLE",
    "MCI_DGV_SETVIDEO_FRAME_RATE",
    "MCI_DGV_SETVIDEO_SOURCE",
    "MCI_DGV_SETVIDEO_KEY_INDEX",
    "MCI_DGV_SETVIDEO_KEY_COLOR",
    "MCI_DGV_SETVIDEO_BITSPERPEL",
    "MCI_DGV_SIGNAL_AT",
    "MCI_DGV_SIGNAL_EVERY",
    "MCI_DGV_SIGNAL_USERVAL",
    "MCI_DGV_SIGNAL_CANCEL",
    "MCI_DGV_SIGNAL_POSITION",
    "MCI_DGV_STATUS_NOMINAL",
    "MCI_DGV_STATUS_REFERENCE",
    "MCI_DGV_STATUS_LEFT",
    "MCI_DGV_STATUS_RIGHT",
    "MCI_DGV_STATUS_DISKSPACE",
    "MCI_DGV_STATUS_INPUT",
    "MCI_DGV_STATUS_OUTPUT",
    "MCI_DGV_STATUS_RECORD",
    "MCI_DGV_STATUS_AUDIO_INPUT",
    "MCI_DGV_STATUS_HWND",
    "MCI_DGV_STATUS_SPEED",
    "MCI_DGV_STATUS_HPAL",
    "MCI_DGV_STATUS_BRIGHTNESS",
    "MCI_DGV_STATUS_COLOR",
    "MCI_DGV_STATUS_CONTRAST",
    "MCI_DGV_STATUS_FILEFORMAT",
    "MCI_DGV_STATUS_AUDIO_SOURCE",
    "MCI_DGV_STATUS_GAMMA",
    "MCI_DGV_STATUS_MONITOR",
    "MCI_DGV_STATUS_MONITOR_METHOD",
    "MCI_DGV_STATUS_FRAME_RATE",
    "MCI_DGV_STATUS_BASS",
    "MCI_DGV_STATUS_SIZE",
    "MCI_DGV_STATUS_SEEK_EXACTLY",
    "MCI_DGV_STATUS_SHARPNESS",
    "MCI_DGV_STATUS_SMPTE",
    "MCI_DGV_STATUS_AUDIO",
    "MCI_DGV_STATUS_TINT",
    "MCI_DGV_STATUS_TREBLE",
    "MCI_DGV_STATUS_UNSAVED",
    "MCI_DGV_STATUS_VIDEO",
    "MCI_DGV_STATUS_VOLUME",
    "MCI_DGV_STATUS_AUDIO_RECORD",
    "MCI_DGV_STATUS_VIDEO_SOURCE",
    "MCI_DGV_STATUS_VIDEO_RECORD",
    "MCI_DGV_STATUS_STILL_FILEFORMAT",
    "MCI_DGV_STATUS_VIDEO_SRC_NUM",
    "MCI_DGV_STATUS_FILE_MODE",
    "MCI_DGV_STATUS_FILE_COMPLETION",
    "MCI_DGV_STATUS_WINDOW_VISIBLE",
    "MCI_DGV_STATUS_WINDOW_MINIMIZED",
    "MCI_DGV_STATUS_WINDOW_MAXIMIZED",
    "MCI_DGV_STATUS_KEY_INDEX",
    "MCI_DGV_STATUS_KEY_COLOR",
    "MCI_DGV_STATUS_PAUSE_MODE",
    "MCI_DGV_STATUS_SAMPLESPERSEC",
    "MCI_DGV_STATUS_AVGBYTESPERSEC",
    "MCI_DGV_STATUS_BLOCKALIGN",
    "MCI_DGV_STATUS_BITSPERSAMPLE",
    "MCI_DGV_STATUS_BITSPERPEL",
    "MCI_DGV_STATUS_FORWARD",
    "MCI_DGV_STATUS_AUDIO_STREAM",
    "MCI_DGV_STATUS_VIDEO_STREAM",
    "MCI_DGV_STEP_REVERSE",
    "MCI_DGV_STEP_FRAMES",
    "MCI_DGV_STOP_HOLD",
    "MCI_DGV_UPDATE_HDC",
    "MCI_DGV_UPDATE_PAINT",
    "MCI_DGV_WHERE_SOURCE",
    "MCI_DGV_WHERE_DESTINATION",
    "MCI_DGV_WHERE_FRAME",
    "MCI_DGV_WHERE_VIDEO",
    "MCI_DGV_WHERE_WINDOW",
    "MCI_DGV_WHERE_MAX",
    "MCI_DGV_WINDOW_HWND",
    "MCI_DGV_WINDOW_STATE",
    "MCI_DGV_WINDOW_TEXT",
    "MCI_DGV_WINDOW_DEFAULT",
    "MM_CREATIVE",
    "MM_MEDIAVISION",
    "MM_FUJITSU",
    "MM_PRAGMATRAX",
    "MM_CYRIX",
    "MM_PHILIPS_SPEECH_PROCESSING",
    "MM_NETXL",
    "MM_ZYXEL",
    "MM_BECUBED",
    "MM_AARDVARK",
    "MM_BINTEC",
    "MM_HEWLETT_PACKARD",
    "MM_ACULAB",
    "MM_FAITH",
    "MM_MITEL",
    "MM_QUANTUM3D",
    "MM_SNI",
    "MM_EMU",
    "MM_ARTISOFT",
    "MM_TURTLE_BEACH",
    "MM_IBM",
    "MM_VOCALTEC",
    "MM_ROLAND",
    "MM_DSP_SOLUTIONS",
    "MM_NEC",
    "MM_ATI",
    "MM_WANGLABS",
    "MM_TANDY",
    "MM_VOYETRA",
    "MM_ANTEX",
    "MM_ICL_PS",
    "MM_INTEL",
    "MM_GRAVIS",
    "MM_VAL",
    "MM_INTERACTIVE",
    "MM_YAMAHA",
    "MM_EVEREX",
    "MM_ECHO",
    "MM_SIERRA",
    "MM_CAT",
    "MM_APPS",
    "MM_DSP_GROUP",
    "MM_MELABS",
    "MM_COMPUTER_FRIENDS",
    "MM_ESS",
    "MM_AUDIOFILE",
    "MM_MOTOROLA",
    "MM_CANOPUS",
    "MM_EPSON",
    "MM_TRUEVISION",
    "MM_AZTECH",
    "MM_VIDEOLOGIC",
    "MM_SCALACS",
    "MM_KORG",
    "MM_APT",
    "MM_ICS",
    "MM_ITERATEDSYS",
    "MM_METHEUS",
    "MM_LOGITECH",
    "MM_WINNOV",
    "MM_NCR",
    "MM_EXAN",
    "MM_AST",
    "MM_WILLOWPOND",
    "MM_SONICFOUNDRY",
    "MM_VITEC",
    "MM_MOSCOM",
    "MM_SILICONSOFT",
    "MM_TERRATEC",
    "MM_MEDIASONIC",
    "MM_SANYO",
    "MM_SUPERMAC",
    "MM_AUDIOPT",
    "MM_NOGATECH",
    "MM_SPEECHCOMP",
    "MM_AHEAD",
    "MM_DOLBY",
    "MM_OKI",
    "MM_AURAVISION",
    "MM_OLIVETTI",
    "MM_IOMAGIC",
    "MM_MATSUSHITA",
    "MM_CONTROLRES",
    "MM_XEBEC",
    "MM_NEWMEDIA",
    "MM_NMS",
    "MM_LYRRUS",
    "MM_COMPUSIC",
    "MM_OPTI",
    "MM_ADLACC",
    "MM_COMPAQ",
    "MM_DIALOGIC",
    "MM_INSOFT",
    "MM_MPTUS",
    "MM_WEITEK",
    "MM_LERNOUT_AND_HAUSPIE",
    "MM_QCIAR",
    "MM_APPLE",
    "MM_DIGITAL",
    "MM_MOTU",
    "MM_WORKBIT",
    "MM_OSITECH",
    "MM_MIRO",
    "MM_CIRRUSLOGIC",
    "MM_ISOLUTION",
    "MM_HORIZONS",
    "MM_CONCEPTS",
    "MM_VTG",
    "MM_RADIUS",
    "MM_ROCKWELL",
    "MM_XYZ",
    "MM_OPCODE",
    "MM_VOXWARE",
    "MM_NORTHERN_TELECOM",
    "MM_APICOM",
    "MM_GRANDE",
    "MM_ADDX",
    "MM_WILDCAT",
    "MM_RHETOREX",
    "MM_BROOKTREE",
    "MM_ENSONIQ",
    "MM_FAST",
    "MM_NVIDIA",
    "MM_OKSORI",
    "MM_DIACOUSTICS",
    "MM_GULBRANSEN",
    "MM_KAY_ELEMETRICS",
    "MM_CRYSTAL",
    "MM_SPLASH_STUDIOS",
    "MM_QUARTERDECK",
    "MM_TDK",
    "MM_DIGITAL_AUDIO_LABS",
    "MM_SEERSYS",
    "MM_PICTURETEL",
    "MM_ATT_MICROELECTRONICS",
    "MM_OSPREY",
    "MM_MEDIATRIX",
    "MM_SOUNDESIGNS",
    "MM_ALDIGITAL",
    "MM_SPECTRUM_SIGNAL_PROCESSING",
    "MM_ECS",
    "MM_AMD",
    "MM_COREDYNAMICS",
    "MM_CANAM",
    "MM_SOFTSOUND",
    "MM_NORRIS",
    "MM_DDD",
    "MM_EUPHONICS",
    "MM_PRECEPT",
    "MM_CRYSTAL_NET",
    "MM_CHROMATIC",
    "MM_VOICEINFO",
    "MM_VIENNASYS",
    "MM_CONNECTIX",
    "MM_GADGETLABS",
    "MM_FRONTIER",
    "MM_VIONA",
    "MM_CASIO",
    "MM_DIAMONDMM",
    "MM_S3",
    "MM_DVISION",
    "MM_NETSCAPE",
    "MM_SOUNDSPACE",
    "MM_VANKOEVERING",
    "MM_QTEAM",
    "MM_ZEFIRO",
    "MM_STUDER",
    "MM_FRAUNHOFER_IIS",
    "MM_QUICKNET",
    "MM_ALARIS",
    "MM_SICRESOURCE",
    "MM_NEOMAGIC",
    "MM_MERGING_TECHNOLOGIES",
    "MM_XIRLINK",
    "MM_COLORGRAPH",
    "MM_OTI",
    "MM_AUREAL",
    "MM_VIVO",
    "MM_SHARP",
    "MM_LUCENT",
    "MM_ATT",
    "MM_SUNCOM",
    "MM_SORVIS",
    "MM_INVISION",
    "MM_BERKOM",
    "MM_MARIAN",
    "MM_DPSINC",
    "MM_BCB",
    "MM_MOTIONPIXELS",
    "MM_QDESIGN",
    "MM_NMP",
    "MM_DATAFUSION",
    "MM_DUCK",
    "MM_FTR",
    "MM_BERCOS",
    "MM_ONLIVE",
    "MM_SIEMENS_SBC",
    "MM_TERALOGIC",
    "MM_PHONET",
    "MM_WINBOND",
    "MM_VIRTUALMUSIC",
    "MM_ENET",
    "MM_GUILLEMOT",
    "MM_EMAGIC",
    "MM_MWM",
    "MM_PACIFICRESEARCH",
    "MM_SIPROLAB",
    "MM_LYNX",
    "MM_SPECTRUM_PRODUCTIONS",
    "MM_DICTAPHONE",
    "MM_QUALCOMM",
    "MM_RZS",
    "MM_AUDIOSCIENCE",
    "MM_PINNACLE",
    "MM_EES",
    "MM_HAFTMANN",
    "MM_LUCID",
    "MM_HEADSPACE",
    "MM_UNISYS",
    "MM_LUMINOSITI",
    "MM_ACTIVEVOICE",
    "MM_DTS",
    "MM_DIGIGRAM",
    "MM_SOFTLAB_NSK",
    "MM_FORTEMEDIA",
    "MM_SONORUS",
    "MM_ARRAY",
    "MM_DATARAN",
    "MM_I_LINK",
    "MM_SELSIUS_SYSTEMS",
    "MM_ADMOS",
    "MM_LEXICON",
    "MM_SGI",
    "MM_IPI",
    "MM_ICE",
    "MM_VQST",
    "MM_ETEK",
    "MM_CS",
    "MM_ALESIS",
    "MM_INTERNET",
    "MM_SONY",
    "MM_HYPERACTIVE",
    "MM_UHER_INFORMATIC",
    "MM_SYDEC_NV",
    "MM_FLEXION",
    "MM_VIA",
    "MM_MICRONAS",
    "MM_ANALOGDEVICES",
    "MM_HP",
    "MM_MATROX_DIV",
    "MM_QUICKAUDIO",
    "MM_YOUCOM",
    "MM_RICHMOND",
    "MM_IODD",
    "MM_ICCC",
    "MM_3COM",
    "MM_MALDEN",
    "MM_3DFX",
    "MM_MINDMAKER",
    "MM_TELEKOL",
    "MM_ST_MICROELECTRONICS",
    "MM_ALGOVISION",
    "MM_UNMAPPED",
    "MM_PID_UNMAPPED",
    "MM_PCSPEAKER_WAVEOUT",
    "MM_MSFT_WSS_WAVEIN",
    "MM_MSFT_WSS_WAVEOUT",
    "MM_MSFT_WSS_FMSYNTH_STEREO",
    "MM_MSFT_WSS_MIXER",
    "MM_MSFT_WSS_OEM_WAVEIN",
    "MM_MSFT_WSS_OEM_WAVEOUT",
    "MM_MSFT_WSS_OEM_FMSYNTH_STEREO",
    "MM_MSFT_WSS_AUX",
    "MM_MSFT_WSS_OEM_AUX",
    "MM_MSFT_GENERIC_WAVEIN",
    "MM_MSFT_GENERIC_WAVEOUT",
    "MM_MSFT_GENERIC_MIDIIN",
    "MM_MSFT_GENERIC_MIDIOUT",
    "MM_MSFT_GENERIC_MIDISYNTH",
    "MM_MSFT_GENERIC_AUX_LINE",
    "MM_MSFT_GENERIC_AUX_MIC",
    "MM_MSFT_GENERIC_AUX_CD",
    "MM_MSFT_WSS_OEM_MIXER",
    "MM_MSFT_MSACM",
    "MM_MSFT_ACM_MSADPCM",
    "MM_MSFT_ACM_IMAADPCM",
    "MM_MSFT_ACM_MSFILTER",
    "MM_MSFT_ACM_GSM610",
    "MM_MSFT_ACM_G711",
    "MM_MSFT_ACM_PCM",
    "MM_WSS_SB16_WAVEIN",
    "MM_WSS_SB16_WAVEOUT",
    "MM_WSS_SB16_MIDIIN",
    "MM_WSS_SB16_MIDIOUT",
    "MM_WSS_SB16_SYNTH",
    "MM_WSS_SB16_AUX_LINE",
    "MM_WSS_SB16_AUX_CD",
    "MM_WSS_SB16_MIXER",
    "MM_WSS_SBPRO_WAVEIN",
    "MM_WSS_SBPRO_WAVEOUT",
    "MM_WSS_SBPRO_MIDIIN",
    "MM_WSS_SBPRO_MIDIOUT",
    "MM_WSS_SBPRO_SYNTH",
    "MM_WSS_SBPRO_AUX_LINE",
    "MM_WSS_SBPRO_AUX_CD",
    "MM_WSS_SBPRO_MIXER",
    "MM_MSFT_WSS_NT_WAVEIN",
    "MM_MSFT_WSS_NT_WAVEOUT",
    "MM_MSFT_WSS_NT_FMSYNTH_STEREO",
    "MM_MSFT_WSS_NT_MIXER",
    "MM_MSFT_WSS_NT_AUX",
    "MM_MSFT_SB16_WAVEIN",
    "MM_MSFT_SB16_WAVEOUT",
    "MM_MSFT_SB16_MIDIIN",
    "MM_MSFT_SB16_MIDIOUT",
    "MM_MSFT_SB16_SYNTH",
    "MM_MSFT_SB16_AUX_LINE",
    "MM_MSFT_SB16_AUX_CD",
    "MM_MSFT_SB16_MIXER",
    "MM_MSFT_SBPRO_WAVEIN",
    "MM_MSFT_SBPRO_WAVEOUT",
    "MM_MSFT_SBPRO_MIDIIN",
    "MM_MSFT_SBPRO_MIDIOUT",
    "MM_MSFT_SBPRO_SYNTH",
    "MM_MSFT_SBPRO_AUX_LINE",
    "MM_MSFT_SBPRO_AUX_CD",
    "MM_MSFT_SBPRO_MIXER",
    "MM_MSFT_MSOPL_SYNTH",
    "MM_MSFT_VMDMS_LINE_WAVEIN",
    "MM_MSFT_VMDMS_LINE_WAVEOUT",
    "MM_MSFT_VMDMS_HANDSET_WAVEIN",
    "MM_MSFT_VMDMS_HANDSET_WAVEOUT",
    "MM_MSFT_VMDMW_LINE_WAVEIN",
    "MM_MSFT_VMDMW_LINE_WAVEOUT",
    "MM_MSFT_VMDMW_HANDSET_WAVEIN",
    "MM_MSFT_VMDMW_HANDSET_WAVEOUT",
    "MM_MSFT_VMDMW_MIXER",
    "MM_MSFT_VMDM_GAME_WAVEOUT",
    "MM_MSFT_VMDM_GAME_WAVEIN",
    "MM_MSFT_ACM_MSNAUDIO",
    "MM_MSFT_ACM_MSG723",
    "MM_MSFT_ACM_MSRT24",
    "MM_MSFT_WDMAUDIO_WAVEOUT",
    "MM_MSFT_WDMAUDIO_WAVEIN",
    "MM_MSFT_WDMAUDIO_MIDIOUT",
    "MM_MSFT_WDMAUDIO_MIDIIN",
    "MM_MSFT_WDMAUDIO_MIXER",
    "MM_MSFT_WDMAUDIO_AUX",
    "MM_CREATIVE_SB15_WAVEIN",
    "MM_CREATIVE_SB20_WAVEIN",
    "MM_CREATIVE_SBPRO_WAVEIN",
    "MM_CREATIVE_SBP16_WAVEIN",
    "MM_CREATIVE_PHNBLST_WAVEIN",
    "MM_CREATIVE_SB15_WAVEOUT",
    "MM_CREATIVE_SB20_WAVEOUT",
    "MM_CREATIVE_SBPRO_WAVEOUT",
    "MM_CREATIVE_SBP16_WAVEOUT",
    "MM_CREATIVE_PHNBLST_WAVEOUT",
    "MM_CREATIVE_MIDIOUT",
    "MM_CREATIVE_MIDIIN",
    "MM_CREATIVE_FMSYNTH_MONO",
    "MM_CREATIVE_FMSYNTH_STEREO",
    "MM_CREATIVE_MIDI_AWE32",
    "MM_CREATIVE_AUX_CD",
    "MM_CREATIVE_AUX_LINE",
    "MM_CREATIVE_AUX_MIC",
    "MM_CREATIVE_AUX_MASTER",
    "MM_CREATIVE_AUX_PCSPK",
    "MM_CREATIVE_AUX_WAVE",
    "MM_CREATIVE_AUX_MIDI",
    "MM_CREATIVE_SBPRO_MIXER",
    "MM_CREATIVE_SB16_MIXER",
    "MM_MEDIAVISION_PROAUDIO",
    "MM_PROAUD_MIDIOUT",
    "MM_PROAUD_MIDIIN",
    "MM_PROAUD_SYNTH",
    "MM_PROAUD_WAVEOUT",
    "MM_PROAUD_WAVEIN",
    "MM_PROAUD_MIXER",
    "MM_PROAUD_AUX",
    "MM_MEDIAVISION_THUNDER",
    "MM_THUNDER_SYNTH",
    "MM_THUNDER_WAVEOUT",
    "MM_THUNDER_WAVEIN",
    "MM_THUNDER_AUX",
    "MM_MEDIAVISION_TPORT",
    "MM_TPORT_WAVEOUT",
    "MM_TPORT_WAVEIN",
    "MM_TPORT_SYNTH",
    "MM_MEDIAVISION_PROAUDIO_PLUS",
    "MM_PROAUD_PLUS_MIDIOUT",
    "MM_PROAUD_PLUS_MIDIIN",
    "MM_PROAUD_PLUS_SYNTH",
    "MM_PROAUD_PLUS_WAVEOUT",
    "MM_PROAUD_PLUS_WAVEIN",
    "MM_PROAUD_PLUS_MIXER",
    "MM_PROAUD_PLUS_AUX",
    "MM_MEDIAVISION_PROAUDIO_16",
    "MM_PROAUD_16_MIDIOUT",
    "MM_PROAUD_16_MIDIIN",
    "MM_PROAUD_16_SYNTH",
    "MM_PROAUD_16_WAVEOUT",
    "MM_PROAUD_16_WAVEIN",
    "MM_PROAUD_16_MIXER",
    "MM_PROAUD_16_AUX",
    "MM_MEDIAVISION_PROSTUDIO_16",
    "MM_STUDIO_16_MIDIOUT",
    "MM_STUDIO_16_MIDIIN",
    "MM_STUDIO_16_SYNTH",
    "MM_STUDIO_16_WAVEOUT",
    "MM_STUDIO_16_WAVEIN",
    "MM_STUDIO_16_MIXER",
    "MM_STUDIO_16_AUX",
    "MM_MEDIAVISION_CDPC",
    "MM_CDPC_MIDIOUT",
    "MM_CDPC_MIDIIN",
    "MM_CDPC_SYNTH",
    "MM_CDPC_WAVEOUT",
    "MM_CDPC_WAVEIN",
    "MM_CDPC_MIXER",
    "MM_CDPC_AUX",
    "MM_MEDIAVISION_OPUS1208",
    "MM_OPUS401_MIDIOUT",
    "MM_OPUS401_MIDIIN",
    "MM_OPUS1208_SYNTH",
    "MM_OPUS1208_WAVEOUT",
    "MM_OPUS1208_WAVEIN",
    "MM_OPUS1208_MIXER",
    "MM_OPUS1208_AUX",
    "MM_MEDIAVISION_OPUS1216",
    "MM_OPUS1216_MIDIOUT",
    "MM_OPUS1216_MIDIIN",
    "MM_OPUS1216_SYNTH",
    "MM_OPUS1216_WAVEOUT",
    "MM_OPUS1216_WAVEIN",
    "MM_OPUS1216_MIXER",
    "MM_OPUS1216_AUX",
    "MM_CYRIX_XASYNTH",
    "MM_CYRIX_XAMIDIIN",
    "MM_CYRIX_XAMIDIOUT",
    "MM_CYRIX_XAWAVEIN",
    "MM_CYRIX_XAWAVEOUT",
    "MM_CYRIX_XAAUX",
    "MM_CYRIX_XAMIXER",
    "MM_PHILIPS_ACM_LPCBB",
    "MM_NETXL_XLVIDEO",
    "MM_ZYXEL_ACM_ADPCM",
    "MM_AARDVARK_STUDIO12_WAVEOUT",
    "MM_AARDVARK_STUDIO12_WAVEIN",
    "MM_AARDVARK_STUDIO88_WAVEOUT",
    "MM_AARDVARK_STUDIO88_WAVEIN",
    "MM_BINTEC_TAPI_WAVE",
    "MM_HEWLETT_PACKARD_CU_CODEC",
    "MM_MITEL_TALKTO_LINE_WAVEOUT",
    "MM_MITEL_TALKTO_LINE_WAVEIN",
    "MM_MITEL_TALKTO_HANDSET_WAVEOUT",
    "MM_MITEL_TALKTO_HANDSET_WAVEIN",
    "MM_MITEL_TALKTO_BRIDGED_WAVEOUT",
    "MM_MITEL_TALKTO_BRIDGED_WAVEIN",
    "MM_MITEL_MPA_HANDSET_WAVEOUT",
    "MM_MITEL_MPA_HANDSET_WAVEIN",
    "MM_MITEL_MPA_HANDSFREE_WAVEOUT",
    "MM_MITEL_MPA_HANDSFREE_WAVEIN",
    "MM_MITEL_MPA_LINE1_WAVEOUT",
    "MM_MITEL_MPA_LINE1_WAVEIN",
    "MM_MITEL_MPA_LINE2_WAVEOUT",
    "MM_MITEL_MPA_LINE2_WAVEIN",
    "MM_MITEL_MEDIAPATH_WAVEOUT",
    "MM_MITEL_MEDIAPATH_WAVEIN",
    "MM_SNI_ACM_G721",
    "MM_EMU_APSSYNTH",
    "MM_EMU_APSMIDIIN",
    "MM_EMU_APSMIDIOUT",
    "MM_EMU_APSWAVEIN",
    "MM_EMU_APSWAVEOUT",
    "MM_ARTISOFT_SBWAVEIN",
    "MM_ARTISOFT_SBWAVEOUT",
    "MM_TBS_TROPEZ_WAVEIN",
    "MM_TBS_TROPEZ_WAVEOUT",
    "MM_TBS_TROPEZ_AUX1",
    "MM_TBS_TROPEZ_AUX2",
    "MM_TBS_TROPEZ_LINE",
    "MM_MMOTION_WAVEAUX",
    "MM_MMOTION_WAVEOUT",
    "MM_MMOTION_WAVEIN",
    "MM_IBM_PCMCIA_WAVEIN",
    "MM_IBM_PCMCIA_WAVEOUT",
    "MM_IBM_PCMCIA_SYNTH",
    "MM_IBM_PCMCIA_MIDIIN",
    "MM_IBM_PCMCIA_MIDIOUT",
    "MM_IBM_PCMCIA_AUX",
    "MM_IBM_THINKPAD200",
    "MM_IBM_MWAVE_WAVEIN",
    "MM_IBM_MWAVE_WAVEOUT",
    "MM_IBM_MWAVE_MIXER",
    "MM_IBM_MWAVE_MIDIIN",
    "MM_IBM_MWAVE_MIDIOUT",
    "MM_IBM_MWAVE_AUX",
    "MM_IBM_WC_MIDIOUT",
    "MM_IBM_WC_WAVEOUT",
    "MM_IBM_WC_MIXEROUT",
    "MM_VOCALTEC_WAVEOUT",
    "MM_VOCALTEC_WAVEIN",
    "MM_ROLAND_RAP10_MIDIOUT",
    "MM_ROLAND_RAP10_MIDIIN",
    "MM_ROLAND_RAP10_SYNTH",
    "MM_ROLAND_RAP10_WAVEOUT",
    "MM_ROLAND_RAP10_WAVEIN",
    "MM_ROLAND_MPU401_MIDIOUT",
    "MM_ROLAND_MPU401_MIDIIN",
    "MM_ROLAND_SMPU_MIDIOUTA",
    "MM_ROLAND_SMPU_MIDIOUTB",
    "MM_ROLAND_SMPU_MIDIINA",
    "MM_ROLAND_SMPU_MIDIINB",
    "MM_ROLAND_SC7_MIDIOUT",
    "MM_ROLAND_SC7_MIDIIN",
    "MM_ROLAND_SERIAL_MIDIOUT",
    "MM_ROLAND_SERIAL_MIDIIN",
    "MM_ROLAND_SCP_MIDIOUT",
    "MM_ROLAND_SCP_MIDIIN",
    "MM_ROLAND_SCP_WAVEOUT",
    "MM_ROLAND_SCP_WAVEIN",
    "MM_ROLAND_SCP_MIXER",
    "MM_ROLAND_SCP_AUX",
    "MM_DSP_SOLUTIONS_WAVEOUT",
    "MM_DSP_SOLUTIONS_WAVEIN",
    "MM_DSP_SOLUTIONS_SYNTH",
    "MM_DSP_SOLUTIONS_AUX",
    "MM_NEC_73_86_SYNTH",
    "MM_NEC_73_86_WAVEOUT",
    "MM_NEC_73_86_WAVEIN",
    "MM_NEC_26_SYNTH",
    "MM_NEC_MPU401_MIDIOUT",
    "MM_NEC_MPU401_MIDIIN",
    "MM_NEC_JOYSTICK",
    "MM_WANGLABS_WAVEIN1",
    "MM_WANGLABS_WAVEOUT1",
    "MM_TANDY_VISWAVEIN",
    "MM_TANDY_VISWAVEOUT",
    "MM_TANDY_VISBIOSSYNTH",
    "MM_TANDY_SENS_MMAWAVEIN",
    "MM_TANDY_SENS_MMAWAVEOUT",
    "MM_TANDY_SENS_MMAMIDIIN",
    "MM_TANDY_SENS_MMAMIDIOUT",
    "MM_TANDY_SENS_VISWAVEOUT",
    "MM_TANDY_PSSJWAVEIN",
    "MM_TANDY_PSSJWAVEOUT",
    "MM_ANTEX_SX12_WAVEIN",
    "MM_ANTEX_SX12_WAVEOUT",
    "MM_ANTEX_SX15_WAVEIN",
    "MM_ANTEX_SX15_WAVEOUT",
    "MM_ANTEX_VP625_WAVEIN",
    "MM_ANTEX_VP625_WAVEOUT",
    "MM_ANTEX_AUDIOPORT22_WAVEIN",
    "MM_ANTEX_AUDIOPORT22_WAVEOUT",
    "MM_ANTEX_AUDIOPORT22_FEEDTHRU",
    "MM_INTELOPD_WAVEIN",
    "MM_INTELOPD_WAVEOUT",
    "MM_INTELOPD_AUX",
    "MM_INTEL_NSPMODEMLINEIN",
    "MM_INTEL_NSPMODEMLINEOUT",
    "MM_VAL_MICROKEY_AP_WAVEIN",
    "MM_VAL_MICROKEY_AP_WAVEOUT",
    "MM_INTERACTIVE_WAVEIN",
    "MM_INTERACTIVE_WAVEOUT",
    "MM_YAMAHA_GSS_SYNTH",
    "MM_YAMAHA_GSS_WAVEOUT",
    "MM_YAMAHA_GSS_WAVEIN",
    "MM_YAMAHA_GSS_MIDIOUT",
    "MM_YAMAHA_GSS_MIDIIN",
    "MM_YAMAHA_GSS_AUX",
    "MM_YAMAHA_SERIAL_MIDIOUT",
    "MM_YAMAHA_SERIAL_MIDIIN",
    "MM_YAMAHA_OPL3SA_WAVEOUT",
    "MM_YAMAHA_OPL3SA_WAVEIN",
    "MM_YAMAHA_OPL3SA_FMSYNTH",
    "MM_YAMAHA_OPL3SA_YSYNTH",
    "MM_YAMAHA_OPL3SA_MIDIOUT",
    "MM_YAMAHA_OPL3SA_MIDIIN",
    "MM_YAMAHA_OPL3SA_MIXER",
    "MM_YAMAHA_OPL3SA_JOYSTICK",
    "MM_YAMAHA_YMF724LEG_MIDIOUT",
    "MM_YAMAHA_YMF724LEG_MIDIIN",
    "MM_YAMAHA_YMF724_WAVEOUT",
    "MM_YAMAHA_YMF724_WAVEIN",
    "MM_YAMAHA_YMF724_MIDIOUT",
    "MM_YAMAHA_YMF724_AUX",
    "MM_YAMAHA_YMF724_MIXER",
    "MM_YAMAHA_YMF724LEG_FMSYNTH",
    "MM_YAMAHA_YMF724LEG_MIXER",
    "MM_YAMAHA_SXG_MIDIOUT",
    "MM_YAMAHA_SXG_WAVEOUT",
    "MM_YAMAHA_SXG_MIXER",
    "MM_YAMAHA_ACXG_WAVEIN",
    "MM_YAMAHA_ACXG_WAVEOUT",
    "MM_YAMAHA_ACXG_MIDIOUT",
    "MM_YAMAHA_ACXG_MIXER",
    "MM_YAMAHA_ACXG_AUX",
    "MM_EVEREX_CARRIER",
    "MM_ECHO_SYNTH",
    "MM_ECHO_WAVEOUT",
    "MM_ECHO_WAVEIN",
    "MM_ECHO_MIDIOUT",
    "MM_ECHO_MIDIIN",
    "MM_ECHO_AUX",
    "MM_SIERRA_ARIA_MIDIOUT",
    "MM_SIERRA_ARIA_MIDIIN",
    "MM_SIERRA_ARIA_SYNTH",
    "MM_SIERRA_ARIA_WAVEOUT",
    "MM_SIERRA_ARIA_WAVEIN",
    "MM_SIERRA_ARIA_AUX",
    "MM_SIERRA_ARIA_AUX2",
    "MM_SIERRA_QUARTET_WAVEIN",
    "MM_SIERRA_QUARTET_WAVEOUT",
    "MM_SIERRA_QUARTET_MIDIIN",
    "MM_SIERRA_QUARTET_MIDIOUT",
    "MM_SIERRA_QUARTET_SYNTH",
    "MM_SIERRA_QUARTET_AUX_CD",
    "MM_SIERRA_QUARTET_AUX_LINE",
    "MM_SIERRA_QUARTET_AUX_MODEM",
    "MM_SIERRA_QUARTET_MIXER",
    "MM_CAT_WAVEOUT",
    "MM_DSP_GROUP_TRUESPEECH",
    "MM_MELABS_MIDI2GO",
    "MM_ESS_AMWAVEOUT",
    "MM_ESS_AMWAVEIN",
    "MM_ESS_AMAUX",
    "MM_ESS_AMSYNTH",
    "MM_ESS_AMMIDIOUT",
    "MM_ESS_AMMIDIIN",
    "MM_ESS_MIXER",
    "MM_ESS_AUX_CD",
    "MM_ESS_MPU401_MIDIOUT",
    "MM_ESS_MPU401_MIDIIN",
    "MM_ESS_ES488_WAVEOUT",
    "MM_ESS_ES488_WAVEIN",
    "MM_ESS_ES488_MIXER",
    "MM_ESS_ES688_WAVEOUT",
    "MM_ESS_ES688_WAVEIN",
    "MM_ESS_ES688_MIXER",
    "MM_ESS_ES1488_WAVEOUT",
    "MM_ESS_ES1488_WAVEIN",
    "MM_ESS_ES1488_MIXER",
    "MM_ESS_ES1688_WAVEOUT",
    "MM_ESS_ES1688_WAVEIN",
    "MM_ESS_ES1688_MIXER",
    "MM_ESS_ES1788_WAVEOUT",
    "MM_ESS_ES1788_WAVEIN",
    "MM_ESS_ES1788_MIXER",
    "MM_ESS_ES1888_WAVEOUT",
    "MM_ESS_ES1888_WAVEIN",
    "MM_ESS_ES1888_MIXER",
    "MM_ESS_ES1868_WAVEOUT",
    "MM_ESS_ES1868_WAVEIN",
    "MM_ESS_ES1868_MIXER",
    "MM_ESS_ES1878_WAVEOUT",
    "MM_ESS_ES1878_WAVEIN",
    "MM_ESS_ES1878_MIXER",
    "MM_CANOPUS_ACM_DVREX",
    "MM_EPS_FMSND",
    "MM_TRUEVISION_WAVEIN1",
    "MM_TRUEVISION_WAVEOUT1",
    "MM_AZTECH_MIDIOUT",
    "MM_AZTECH_MIDIIN",
    "MM_AZTECH_WAVEIN",
    "MM_AZTECH_WAVEOUT",
    "MM_AZTECH_FMSYNTH",
    "MM_AZTECH_MIXER",
    "MM_AZTECH_PRO16_WAVEIN",
    "MM_AZTECH_PRO16_WAVEOUT",
    "MM_AZTECH_PRO16_FMSYNTH",
    "MM_AZTECH_DSP16_WAVEIN",
    "MM_AZTECH_DSP16_WAVEOUT",
    "MM_AZTECH_DSP16_FMSYNTH",
    "MM_AZTECH_DSP16_WAVESYNTH",
    "MM_AZTECH_NOVA16_WAVEIN",
    "MM_AZTECH_NOVA16_WAVEOUT",
    "MM_AZTECH_NOVA16_MIXER",
    "MM_AZTECH_WASH16_WAVEIN",
    "MM_AZTECH_WASH16_WAVEOUT",
    "MM_AZTECH_WASH16_MIXER",
    "MM_AZTECH_AUX_CD",
    "MM_AZTECH_AUX_LINE",
    "MM_AZTECH_AUX_MIC",
    "MM_AZTECH_AUX",
    "MM_VIDEOLOGIC_MSWAVEIN",
    "MM_VIDEOLOGIC_MSWAVEOUT",
    "MM_KORG_PCIF_MIDIOUT",
    "MM_KORG_PCIF_MIDIIN",
    "MM_KORG_1212IO_MSWAVEIN",
    "MM_KORG_1212IO_MSWAVEOUT",
    "MM_APT_ACE100CD",
    "MM_ICS_WAVEDECK_WAVEOUT",
    "MM_ICS_WAVEDECK_WAVEIN",
    "MM_ICS_WAVEDECK_MIXER",
    "MM_ICS_WAVEDECK_AUX",
    "MM_ICS_WAVEDECK_SYNTH",
    "MM_ICS_WAVEDEC_SB_WAVEOUT",
    "MM_ICS_WAVEDEC_SB_WAVEIN",
    "MM_ICS_WAVEDEC_SB_FM_MIDIOUT",
    "MM_ICS_WAVEDEC_SB_MPU401_MIDIOUT",
    "MM_ICS_WAVEDEC_SB_MPU401_MIDIIN",
    "MM_ICS_WAVEDEC_SB_MIXER",
    "MM_ICS_WAVEDEC_SB_AUX",
    "MM_ICS_2115_LITE_MIDIOUT",
    "MM_ICS_2120_LITE_MIDIOUT",
    "MM_ITERATEDSYS_FUFCODEC",
    "MM_METHEUS_ZIPPER",
    "MM_WINNOV_CAVIAR_WAVEIN",
    "MM_WINNOV_CAVIAR_WAVEOUT",
    "MM_WINNOV_CAVIAR_VIDC",
    "MM_WINNOV_CAVIAR_CHAMPAGNE",
    "MM_WINNOV_CAVIAR_YUV8",
    "MM_NCR_BA_WAVEIN",
    "MM_NCR_BA_WAVEOUT",
    "MM_NCR_BA_SYNTH",
    "MM_NCR_BA_AUX",
    "MM_NCR_BA_MIXER",
    "MM_AST_MODEMWAVE_WAVEIN",
    "MM_AST_MODEMWAVE_WAVEOUT",
    "MM_WILLOWPOND_FMSYNTH_STEREO",
    "MM_WILLOWPOND_MPU401",
    "MM_WILLOWPOND_SNDPORT_WAVEIN",
    "MM_WILLOWPOND_SNDPORT_WAVEOUT",
    "MM_WILLOWPOND_SNDPORT_MIXER",
    "MM_WILLOWPOND_SNDPORT_AUX",
    "MM_WILLOWPOND_PH_WAVEIN",
    "MM_WILLOWPOND_PH_WAVEOUT",
    "MM_WILLOWPOND_PH_MIXER",
    "MM_WILLOWPOND_PH_AUX",
    "MM_WILLOPOND_SNDCOMM_WAVEIN",
    "MM_WILLOWPOND_SNDCOMM_WAVEOUT",
    "MM_WILLOWPOND_SNDCOMM_MIXER",
    "MM_WILLOWPOND_SNDCOMM_AUX",
    "MM_WILLOWPOND_GENERIC_WAVEIN",
    "MM_WILLOWPOND_GENERIC_WAVEOUT",
    "MM_WILLOWPOND_GENERIC_MIXER",
    "MM_WILLOWPOND_GENERIC_AUX",
    "MM_VITEC_VMAKER",
    "MM_VITEC_VMPRO",
    "MM_MOSCOM_VPC2400_IN",
    "MM_MOSCOM_VPC2400_OUT",
    "MM_SILICONSOFT_SC1_WAVEIN",
    "MM_SILICONSOFT_SC1_WAVEOUT",
    "MM_SILICONSOFT_SC2_WAVEIN",
    "MM_SILICONSOFT_SC2_WAVEOUT",
    "MM_SILICONSOFT_SOUNDJR2_WAVEOUT",
    "MM_SILICONSOFT_SOUNDJR2PR_WAVEIN",
    "MM_SILICONSOFT_SOUNDJR2PR_WAVEOUT",
    "MM_SILICONSOFT_SOUNDJR3_WAVEOUT",
    "MM_TTEWS_WAVEIN",
    "MM_TTEWS_WAVEOUT",
    "MM_TTEWS_MIDIIN",
    "MM_TTEWS_MIDIOUT",
    "MM_TTEWS_MIDISYNTH",
    "MM_TTEWS_MIDIMONITOR",
    "MM_TTEWS_VMIDIIN",
    "MM_TTEWS_VMIDIOUT",
    "MM_TTEWS_AUX",
    "MM_TTEWS_MIXER",
    "MM_MEDIASONIC_ACM_G723",
    "MM_MEDIASONIC_ICOM",
    "MM_ICOM_WAVEIN",
    "MM_ICOM_WAVEOUT",
    "MM_ICOM_MIXER",
    "MM_ICOM_AUX",
    "MM_ICOM_LINE",
    "MM_SANYO_ACM_LD_ADPCM",
    "MM_AHEAD_MULTISOUND",
    "MM_AHEAD_SOUNDBLASTER",
    "MM_AHEAD_PROAUDIO",
    "MM_AHEAD_GENERIC",
    "MM_OLIVETTI_WAVEIN",
    "MM_OLIVETTI_WAVEOUT",
    "MM_OLIVETTI_MIXER",
    "MM_OLIVETTI_AUX",
    "MM_OLIVETTI_MIDIIN",
    "MM_OLIVETTI_MIDIOUT",
    "MM_OLIVETTI_SYNTH",
    "MM_OLIVETTI_JOYSTICK",
    "MM_OLIVETTI_ACM_GSM",
    "MM_OLIVETTI_ACM_ADPCM",
    "MM_OLIVETTI_ACM_CELP",
    "MM_OLIVETTI_ACM_SBC",
    "MM_OLIVETTI_ACM_OPR",
    "MM_IOMAGIC_TEMPO_WAVEOUT",
    "MM_IOMAGIC_TEMPO_WAVEIN",
    "MM_IOMAGIC_TEMPO_SYNTH",
    "MM_IOMAGIC_TEMPO_MIDIOUT",
    "MM_IOMAGIC_TEMPO_MXDOUT",
    "MM_IOMAGIC_TEMPO_AUXOUT",
    "MM_MATSUSHITA_WAVEIN",
    "MM_MATSUSHITA_WAVEOUT",
    "MM_MATSUSHITA_FMSYNTH_STEREO",
    "MM_MATSUSHITA_MIXER",
    "MM_MATSUSHITA_AUX",
    "MM_NEWMEDIA_WAVJAMMER",
    "MM_LYRRUS_BRIDGE_GUITAR",
    "MM_OPTI_M16_FMSYNTH_STEREO",
    "MM_OPTI_M16_MIDIIN",
    "MM_OPTI_M16_MIDIOUT",
    "MM_OPTI_M16_WAVEIN",
    "MM_OPTI_M16_WAVEOUT",
    "MM_OPTI_M16_MIXER",
    "MM_OPTI_M16_AUX",
    "MM_OPTI_P16_FMSYNTH_STEREO",
    "MM_OPTI_P16_MIDIIN",
    "MM_OPTI_P16_MIDIOUT",
    "MM_OPTI_P16_WAVEIN",
    "MM_OPTI_P16_WAVEOUT",
    "MM_OPTI_P16_MIXER",
    "MM_OPTI_P16_AUX",
    "MM_OPTI_M32_WAVEIN",
    "MM_OPTI_M32_WAVEOUT",
    "MM_OPTI_M32_MIDIIN",
    "MM_OPTI_M32_MIDIOUT",
    "MM_OPTI_M32_SYNTH_STEREO",
    "MM_OPTI_M32_MIXER",
    "MM_OPTI_M32_AUX",
    "MM_COMPAQ_BB_WAVEIN",
    "MM_COMPAQ_BB_WAVEOUT",
    "MM_COMPAQ_BB_WAVEAUX",
    "MM_MPTUS_SPWAVEOUT",
    "MM_LERNOUT_ANDHAUSPIE_LHCODECACM",
    "MM_DIGITAL_AV320_WAVEIN",
    "MM_DIGITAL_AV320_WAVEOUT",
    "MM_DIGITAL_ACM_G723",
    "MM_DIGITAL_ICM_H263",
    "MM_DIGITAL_ICM_H261",
    "MM_MOTU_MTP_MIDIOUT_ALL",
    "MM_MOTU_MTP_MIDIIN_1",
    "MM_MOTU_MTP_MIDIOUT_1",
    "MM_MOTU_MTP_MIDIIN_2",
    "MM_MOTU_MTP_MIDIOUT_2",
    "MM_MOTU_MTP_MIDIIN_3",
    "MM_MOTU_MTP_MIDIOUT_3",
    "MM_MOTU_MTP_MIDIIN_4",
    "MM_MOTU_MTP_MIDIOUT_4",
    "MM_MOTU_MTP_MIDIIN_5",
    "MM_MOTU_MTP_MIDIOUT_5",
    "MM_MOTU_MTP_MIDIIN_6",
    "MM_MOTU_MTP_MIDIOUT_6",
    "MM_MOTU_MTP_MIDIIN_7",
    "MM_MOTU_MTP_MIDIOUT_7",
    "MM_MOTU_MTP_MIDIIN_8",
    "MM_MOTU_MTP_MIDIOUT_8",
    "MM_MOTU_MTPII_MIDIOUT_ALL",
    "MM_MOTU_MTPII_MIDIIN_SYNC",
    "MM_MOTU_MTPII_MIDIIN_1",
    "MM_MOTU_MTPII_MIDIOUT_1",
    "MM_MOTU_MTPII_MIDIIN_2",
    "MM_MOTU_MTPII_MIDIOUT_2",
    "MM_MOTU_MTPII_MIDIIN_3",
    "MM_MOTU_MTPII_MIDIOUT_3",
    "MM_MOTU_MTPII_MIDIIN_4",
    "MM_MOTU_MTPII_MIDIOUT_4",
    "MM_MOTU_MTPII_MIDIIN_5",
    "MM_MOTU_MTPII_MIDIOUT_5",
    "MM_MOTU_MTPII_MIDIIN_6",
    "MM_MOTU_MTPII_MIDIOUT_6",
    "MM_MOTU_MTPII_MIDIIN_7",
    "MM_MOTU_MTPII_MIDIOUT_7",
    "MM_MOTU_MTPII_MIDIIN_8",
    "MM_MOTU_MTPII_MIDIOUT_8",
    "MM_MOTU_MTPII_NET_MIDIIN_1",
    "MM_MOTU_MTPII_NET_MIDIOUT_1",
    "MM_MOTU_MTPII_NET_MIDIIN_2",
    "MM_MOTU_MTPII_NET_MIDIOUT_2",
    "MM_MOTU_MTPII_NET_MIDIIN_3",
    "MM_MOTU_MTPII_NET_MIDIOUT_3",
    "MM_MOTU_MTPII_NET_MIDIIN_4",
    "MM_MOTU_MTPII_NET_MIDIOUT_4",
    "MM_MOTU_MTPII_NET_MIDIIN_5",
    "MM_MOTU_MTPII_NET_MIDIOUT_5",
    "MM_MOTU_MTPII_NET_MIDIIN_6",
    "MM_MOTU_MTPII_NET_MIDIOUT_6",
    "MM_MOTU_MTPII_NET_MIDIIN_7",
    "MM_MOTU_MTPII_NET_MIDIOUT_7",
    "MM_MOTU_MTPII_NET_MIDIIN_8",
    "MM_MOTU_MTPII_NET_MIDIOUT_8",
    "MM_MOTU_MXP_MIDIIN_MIDIOUT_ALL",
    "MM_MOTU_MXP_MIDIIN_SYNC",
    "MM_MOTU_MXP_MIDIIN_MIDIIN_1",
    "MM_MOTU_MXP_MIDIIN_MIDIOUT_1",
    "MM_MOTU_MXP_MIDIIN_MIDIIN_2",
    "MM_MOTU_MXP_MIDIIN_MIDIOUT_2",
    "MM_MOTU_MXP_MIDIIN_MIDIIN_3",
    "MM_MOTU_MXP_MIDIIN_MIDIOUT_3",
    "MM_MOTU_MXP_MIDIIN_MIDIIN_4",
    "MM_MOTU_MXP_MIDIIN_MIDIOUT_4",
    "MM_MOTU_MXP_MIDIIN_MIDIIN_5",
    "MM_MOTU_MXP_MIDIIN_MIDIOUT_5",
    "MM_MOTU_MXP_MIDIIN_MIDIIN_6",
    "MM_MOTU_MXP_MIDIIN_MIDIOUT_6",
    "MM_MOTU_MXPMPU_MIDIOUT_ALL",
    "MM_MOTU_MXPMPU_MIDIIN_SYNC",
    "MM_MOTU_MXPMPU_MIDIIN_1",
    "MM_MOTU_MXPMPU_MIDIOUT_1",
    "MM_MOTU_MXPMPU_MIDIIN_2",
    "MM_MOTU_MXPMPU_MIDIOUT_2",
    "MM_MOTU_MXPMPU_MIDIIN_3",
    "MM_MOTU_MXPMPU_MIDIOUT_3",
    "MM_MOTU_MXPMPU_MIDIIN_4",
    "MM_MOTU_MXPMPU_MIDIOUT_4",
    "MM_MOTU_MXPMPU_MIDIIN_5",
    "MM_MOTU_MXPMPU_MIDIOUT_5",
    "MM_MOTU_MXPMPU_MIDIIN_6",
    "MM_MOTU_MXPMPU_MIDIOUT_6",
    "MM_MOTU_MXN_MIDIOUT_ALL",
    "MM_MOTU_MXN_MIDIIN_SYNC",
    "MM_MOTU_MXN_MIDIIN_1",
    "MM_MOTU_MXN_MIDIOUT_1",
    "MM_MOTU_MXN_MIDIIN_2",
    "MM_MOTU_MXN_MIDIOUT_2",
    "MM_MOTU_MXN_MIDIIN_3",
    "MM_MOTU_MXN_MIDIOUT_3",
    "MM_MOTU_MXN_MIDIIN_4",
    "MM_MOTU_MXN_MIDIOUT_4",
    "MM_MOTU_FLYER_MIDI_IN_SYNC",
    "MM_MOTU_FLYER_MIDI_IN_A",
    "MM_MOTU_FLYER_MIDI_OUT_A",
    "MM_MOTU_FLYER_MIDI_IN_B",
    "MM_MOTU_FLYER_MIDI_OUT_B",
    "MM_MOTU_PKX_MIDI_IN_SYNC",
    "MM_MOTU_PKX_MIDI_IN_A",
    "MM_MOTU_PKX_MIDI_OUT_A",
    "MM_MOTU_PKX_MIDI_IN_B",
    "MM_MOTU_PKX_MIDI_OUT_B",
    "MM_MOTU_DTX_MIDI_IN_SYNC",
    "MM_MOTU_DTX_MIDI_IN_A",
    "MM_MOTU_DTX_MIDI_OUT_A",
    "MM_MOTU_DTX_MIDI_IN_B",
    "MM_MOTU_DTX_MIDI_OUT_B",
    "MM_MOTU_MTPAV_MIDIOUT_ALL",
    "MM_MOTU_MTPAV_MIDIIN_SYNC",
    "MM_MOTU_MTPAV_MIDIIN_1",
    "MM_MOTU_MTPAV_MIDIOUT_1",
    "MM_MOTU_MTPAV_MIDIIN_2",
    "MM_MOTU_MTPAV_MIDIOUT_2",
    "MM_MOTU_MTPAV_MIDIIN_3",
    "MM_MOTU_MTPAV_MIDIOUT_3",
    "MM_MOTU_MTPAV_MIDIIN_4",
    "MM_MOTU_MTPAV_MIDIOUT_4",
    "MM_MOTU_MTPAV_MIDIIN_5",
    "MM_MOTU_MTPAV_MIDIOUT_5",
    "MM_MOTU_MTPAV_MIDIIN_6",
    "MM_MOTU_MTPAV_MIDIOUT_6",
    "MM_MOTU_MTPAV_MIDIIN_7",
    "MM_MOTU_MTPAV_MIDIOUT_7",
    "MM_MOTU_MTPAV_MIDIIN_8",
    "MM_MOTU_MTPAV_MIDIOUT_8",
    "MM_MOTU_MTPAV_NET_MIDIIN_1",
    "MM_MOTU_MTPAV_NET_MIDIOUT_1",
    "MM_MOTU_MTPAV_NET_MIDIIN_2",
    "MM_MOTU_MTPAV_NET_MIDIOUT_2",
    "MM_MOTU_MTPAV_NET_MIDIIN_3",
    "MM_MOTU_MTPAV_NET_MIDIOUT_3",
    "MM_MOTU_MTPAV_NET_MIDIIN_4",
    "MM_MOTU_MTPAV_NET_MIDIOUT_4",
    "MM_MOTU_MTPAV_NET_MIDIIN_5",
    "MM_MOTU_MTPAV_NET_MIDIOUT_5",
    "MM_MOTU_MTPAV_NET_MIDIIN_6",
    "MM_MOTU_MTPAV_NET_MIDIOUT_6",
    "MM_MOTU_MTPAV_NET_MIDIIN_7",
    "MM_MOTU_MTPAV_NET_MIDIOUT_7",
    "MM_MOTU_MTPAV_NET_MIDIIN_8",
    "MM_MOTU_MTPAV_NET_MIDIOUT_8",
    "MM_MOTU_MTPAV_MIDIIN_ADAT",
    "MM_MOTU_MTPAV_MIDIOUT_ADAT",
    "MM_MOTU_MXPXT_MIDIIN_SYNC",
    "MM_MOTU_MXPXT_MIDIOUT_ALL",
    "MM_MOTU_MXPXT_MIDIIN_1",
    "MM_MOTU_MXPXT_MIDIOUT_1",
    "MM_MOTU_MXPXT_MIDIOUT_2",
    "MM_MOTU_MXPXT_MIDIIN_2",
    "MM_MOTU_MXPXT_MIDIIN_3",
    "MM_MOTU_MXPXT_MIDIOUT_3",
    "MM_MOTU_MXPXT_MIDIIN_4",
    "MM_MOTU_MXPXT_MIDIOUT_4",
    "MM_MOTU_MXPXT_MIDIIN_5",
    "MM_MOTU_MXPXT_MIDIOUT_5",
    "MM_MOTU_MXPXT_MIDIOUT_6",
    "MM_MOTU_MXPXT_MIDIIN_6",
    "MM_MOTU_MXPXT_MIDIOUT_7",
    "MM_MOTU_MXPXT_MIDIIN_7",
    "MM_MOTU_MXPXT_MIDIOUT_8",
    "MM_MOTU_MXPXT_MIDIIN_8",
    "MM_WORKBIT_MIXER",
    "MM_WORKBIT_WAVEOUT",
    "MM_WORKBIT_WAVEIN",
    "MM_WORKBIT_MIDIIN",
    "MM_WORKBIT_MIDIOUT",
    "MM_WORKBIT_FMSYNTH",
    "MM_WORKBIT_AUX",
    "MM_WORKBIT_JOYSTICK",
    "MM_OSITECH_TRUMPCARD",
    "MM_MIRO_MOVIEPRO",
    "MM_MIRO_VIDEOD1",
    "MM_MIRO_VIDEODC1TV",
    "MM_MIRO_VIDEOTD",
    "MM_MIRO_DC30_WAVEOUT",
    "MM_MIRO_DC30_WAVEIN",
    "MM_MIRO_DC30_MIX",
    "MM_ISOLUTION_PASCAL",
    "MM_VOICEMIXER",
    "ROCKWELL_WA1_WAVEIN",
    "ROCKWELL_WA1_WAVEOUT",
    "ROCKWELL_WA1_SYNTH",
    "ROCKWELL_WA1_MIXER",
    "ROCKWELL_WA1_MPU401_IN",
    "ROCKWELL_WA1_MPU401_OUT",
    "ROCKWELL_WA2_WAVEIN",
    "ROCKWELL_WA2_WAVEOUT",
    "ROCKWELL_WA2_SYNTH",
    "ROCKWELL_WA2_MIXER",
    "ROCKWELL_WA2_MPU401_IN",
    "ROCKWELL_WA2_MPU401_OUT",
    "MM_VOXWARE_CODEC",
    "MM_NORTEL_MPXAC_WAVEIN",
    "MM_NORTEL_MPXAC_WAVEOUT",
    "MM_ADDX_PCTV_DIGITALMIX",
    "MM_ADDX_PCTV_WAVEIN",
    "MM_ADDX_PCTV_WAVEOUT",
    "MM_ADDX_PCTV_MIXER",
    "MM_ADDX_PCTV_AUX_CD",
    "MM_ADDX_PCTV_AUX_LINE",
    "MM_WILDCAT_AUTOSCOREMIDIIN",
    "MM_RHETOREX_WAVEIN",
    "MM_RHETOREX_WAVEOUT",
    "MM_BTV_WAVEIN",
    "MM_BTV_WAVEOUT",
    "MM_BTV_MIDIIN",
    "MM_BTV_MIDIOUT",
    "MM_BTV_MIDISYNTH",
    "MM_BTV_AUX_LINE",
    "MM_BTV_AUX_MIC",
    "MM_BTV_AUX_CD",
    "MM_BTV_DIGITALIN",
    "MM_BTV_DIGITALOUT",
    "MM_BTV_MIDIWAVESTREAM",
    "MM_BTV_MIXER",
    "MM_ENSONIQ_SOUNDSCAPE",
    "MM_SOUNDSCAPE_WAVEOUT",
    "MM_SOUNDSCAPE_WAVEOUT_AUX",
    "MM_SOUNDSCAPE_WAVEIN",
    "MM_SOUNDSCAPE_MIDIOUT",
    "MM_SOUNDSCAPE_MIDIIN",
    "MM_SOUNDSCAPE_SYNTH",
    "MM_SOUNDSCAPE_MIXER",
    "MM_SOUNDSCAPE_AUX",
    "MM_NVIDIA_WAVEOUT",
    "MM_NVIDIA_WAVEIN",
    "MM_NVIDIA_MIDIOUT",
    "MM_NVIDIA_MIDIIN",
    "MM_NVIDIA_GAMEPORT",
    "MM_NVIDIA_MIXER",
    "MM_NVIDIA_AUX",
    "MM_OKSORI_BASE",
    "MM_OKSORI_OSR8_WAVEOUT",
    "MM_OKSORI_OSR8_WAVEIN",
    "MM_OKSORI_OSR16_WAVEOUT",
    "MM_OKSORI_OSR16_WAVEIN",
    "MM_OKSORI_FM_OPL4",
    "MM_OKSORI_MIX_MASTER",
    "MM_OKSORI_MIX_WAVE",
    "MM_OKSORI_MIX_FM",
    "MM_OKSORI_MIX_LINE",
    "MM_OKSORI_MIX_CD",
    "MM_OKSORI_MIX_MIC",
    "MM_OKSORI_MIX_ECHO",
    "MM_OKSORI_MIX_AUX1",
    "MM_OKSORI_MIX_LINE1",
    "MM_OKSORI_EXT_MIC1",
    "MM_OKSORI_EXT_MIC2",
    "MM_OKSORI_MIDIOUT",
    "MM_OKSORI_MIDIIN",
    "MM_OKSORI_MPEG_CDVISION",
    "MM_DIACOUSTICS_DRUM_ACTION",
    "MM_KAY_ELEMETRICS_CSL",
    "MM_KAY_ELEMETRICS_CSL_DAT",
    "MM_KAY_ELEMETRICS_CSL_4CHANNEL",
    "MM_CRYSTAL_CS4232_WAVEIN",
    "MM_CRYSTAL_CS4232_WAVEOUT",
    "MM_CRYSTAL_CS4232_WAVEMIXER",
    "MM_CRYSTAL_CS4232_WAVEAUX_AUX1",
    "MM_CRYSTAL_CS4232_WAVEAUX_AUX2",
    "MM_CRYSTAL_CS4232_WAVEAUX_LINE",
    "MM_CRYSTAL_CS4232_WAVEAUX_MONO",
    "MM_CRYSTAL_CS4232_WAVEAUX_MASTER",
    "MM_CRYSTAL_CS4232_MIDIIN",
    "MM_CRYSTAL_CS4232_MIDIOUT",
    "MM_CRYSTAL_CS4232_INPUTGAIN_AUX1",
    "MM_CRYSTAL_CS4232_INPUTGAIN_LOOP",
    "MM_CRYSTAL_SOUND_FUSION_WAVEIN",
    "MM_CRYSTAL_SOUND_FUSION_WAVEOUT",
    "MM_CRYSTAL_SOUND_FUSION_MIXER",
    "MM_CRYSTAL_SOUND_FUSION_MIDIIN",
    "MM_CRYSTAL_SOUND_FUSION_MIDIOUT",
    "MM_CRYSTAL_SOUND_FUSION_JOYSTICK",
    "MM_QUARTERDECK_LHWAVEIN",
    "MM_QUARTERDECK_LHWAVEOUT",
    "MM_TDK_MW_MIDI_SYNTH",
    "MM_TDK_MW_MIDI_IN",
    "MM_TDK_MW_MIDI_OUT",
    "MM_TDK_MW_WAVE_IN",
    "MM_TDK_MW_WAVE_OUT",
    "MM_TDK_MW_AUX",
    "MM_TDK_MW_MIXER",
    "MM_TDK_MW_AUX_MASTER",
    "MM_TDK_MW_AUX_BASS",
    "MM_TDK_MW_AUX_TREBLE",
    "MM_TDK_MW_AUX_MIDI_VOL",
    "MM_TDK_MW_AUX_WAVE_VOL",
    "MM_TDK_MW_AUX_WAVE_RVB",
    "MM_TDK_MW_AUX_WAVE_CHR",
    "MM_TDK_MW_AUX_VOL",
    "MM_TDK_MW_AUX_RVB",
    "MM_TDK_MW_AUX_CHR",
    "MM_DIGITAL_AUDIO_LABS_TC",
    "MM_DIGITAL_AUDIO_LABS_DOC",
    "MM_DIGITAL_AUDIO_LABS_V8",
    "MM_DIGITAL_AUDIO_LABS_CPRO",
    "MM_DIGITAL_AUDIO_LABS_VP",
    "MM_DIGITAL_AUDIO_LABS_CDLX",
    "MM_DIGITAL_AUDIO_LABS_CTDIF",
    "MM_SEERSYS_SEERSYNTH",
    "MM_SEERSYS_SEERWAVE",
    "MM_SEERSYS_SEERMIX",
    "MM_SEERSYS_WAVESYNTH",
    "MM_SEERSYS_WAVESYNTH_WG",
    "MM_SEERSYS_REALITY",
    "MM_OSPREY_1000WAVEIN",
    "MM_OSPREY_1000WAVEOUT",
    "MM_SOUNDESIGNS_WAVEIN",
    "MM_SOUNDESIGNS_WAVEOUT",
    "MM_SSP_SNDFESWAVEIN",
    "MM_SSP_SNDFESWAVEOUT",
    "MM_SSP_SNDFESMIDIIN",
    "MM_SSP_SNDFESMIDIOUT",
    "MM_SSP_SNDFESSYNTH",
    "MM_SSP_SNDFESMIX",
    "MM_SSP_SNDFESAUX",
    "MM_ECS_AADF_MIDI_IN",
    "MM_ECS_AADF_MIDI_OUT",
    "MM_ECS_AADF_WAVE2MIDI_IN",
    "MM_AMD_INTERWAVE_WAVEIN",
    "MM_AMD_INTERWAVE_WAVEOUT",
    "MM_AMD_INTERWAVE_SYNTH",
    "MM_AMD_INTERWAVE_MIXER1",
    "MM_AMD_INTERWAVE_MIXER2",
    "MM_AMD_INTERWAVE_JOYSTICK",
    "MM_AMD_INTERWAVE_EX_CD",
    "MM_AMD_INTERWAVE_MIDIIN",
    "MM_AMD_INTERWAVE_MIDIOUT",
    "MM_AMD_INTERWAVE_AUX1",
    "MM_AMD_INTERWAVE_AUX2",
    "MM_AMD_INTERWAVE_AUX_MIC",
    "MM_AMD_INTERWAVE_AUX_CD",
    "MM_AMD_INTERWAVE_MONO_IN",
    "MM_AMD_INTERWAVE_MONO_OUT",
    "MM_AMD_INTERWAVE_EX_TELEPHONY",
    "MM_AMD_INTERWAVE_WAVEOUT_BASE",
    "MM_AMD_INTERWAVE_WAVEOUT_TREBLE",
    "MM_AMD_INTERWAVE_STEREO_ENHANCED",
    "MM_COREDYNAMICS_DYNAMIXHR",
    "MM_COREDYNAMICS_DYNASONIX_SYNTH",
    "MM_COREDYNAMICS_DYNASONIX_MIDI_IN",
    "MM_COREDYNAMICS_DYNASONIX_MIDI_OUT",
    "MM_COREDYNAMICS_DYNASONIX_WAVE_IN",
    "MM_COREDYNAMICS_DYNASONIX_WAVE_OUT",
    "MM_COREDYNAMICS_DYNASONIX_AUDIO_IN",
    "MM_COREDYNAMICS_DYNASONIX_AUDIO_OUT",
    "MM_COREDYNAMICS_DYNAGRAFX_VGA",
    "MM_COREDYNAMICS_DYNAGRAFX_WAVE_IN",
    "MM_COREDYNAMICS_DYNAGRAFX_WAVE_OUT",
    "MM_CANAM_CBXWAVEOUT",
    "MM_CANAM_CBXWAVEIN",
    "MM_SOFTSOUND_CODEC",
    "MM_NORRIS_VOICELINK",
    "MM_DDD_MIDILINK_MIDIIN",
    "MM_DDD_MIDILINK_MIDIOUT",
    "MM_EUPHONICS_AUX_CD",
    "MM_EUPHONICS_AUX_LINE",
    "MM_EUPHONICS_AUX_MASTER",
    "MM_EUPHONICS_AUX_MIC",
    "MM_EUPHONICS_AUX_MIDI",
    "MM_EUPHONICS_AUX_WAVE",
    "MM_EUPHONICS_FMSYNTH_MONO",
    "MM_EUPHONICS_FMSYNTH_STEREO",
    "MM_EUPHONICS_MIDIIN",
    "MM_EUPHONICS_MIDIOUT",
    "MM_EUPHONICS_MIXER",
    "MM_EUPHONICS_WAVEIN",
    "MM_EUPHONICS_WAVEOUT",
    "MM_EUPHONICS_EUSYNTH",
    "CRYSTAL_NET_SFM_CODEC",
    "MM_CHROMATIC_M1",
    "MM_CHROMATIC_M1_WAVEIN",
    "MM_CHROMATIC_M1_WAVEOUT",
    "MM_CHROMATIC_M1_FMSYNTH",
    "MM_CHROMATIC_M1_MIXER",
    "MM_CHROMATIC_M1_AUX",
    "MM_CHROMATIC_M1_AUX_CD",
    "MM_CHROMATIC_M1_MIDIIN",
    "MM_CHROMATIC_M1_MIDIOUT",
    "MM_CHROMATIC_M1_WTSYNTH",
    "MM_CHROMATIC_M1_MPEGWAVEIN",
    "MM_CHROMATIC_M1_MPEGWAVEOUT",
    "MM_CHROMATIC_M2",
    "MM_CHROMATIC_M2_WAVEIN",
    "MM_CHROMATIC_M2_WAVEOUT",
    "MM_CHROMATIC_M2_FMSYNTH",
    "MM_CHROMATIC_M2_MIXER",
    "MM_CHROMATIC_M2_AUX",
    "MM_CHROMATIC_M2_AUX_CD",
    "MM_CHROMATIC_M2_MIDIIN",
    "MM_CHROMATIC_M2_MIDIOUT",
    "MM_CHROMATIC_M2_WTSYNTH",
    "MM_CHROMATIC_M2_MPEGWAVEIN",
    "MM_CHROMATIC_M2_MPEGWAVEOUT",
    "MM_VIENNASYS_TSP_WAVE_DRIVER",
    "MM_CONNECTIX_VIDEC_CODEC",
    "MM_GADGETLABS_WAVE44_WAVEIN",
    "MM_GADGETLABS_WAVE44_WAVEOUT",
    "MM_GADGETLABS_WAVE42_WAVEIN",
    "MM_GADGETLABS_WAVE42_WAVEOUT",
    "MM_GADGETLABS_WAVE4_MIDIIN",
    "MM_GADGETLABS_WAVE4_MIDIOUT",
    "MM_FRONTIER_WAVECENTER_MIDIIN",
    "MM_FRONTIER_WAVECENTER_MIDIOUT",
    "MM_FRONTIER_WAVECENTER_WAVEIN",
    "MM_FRONTIER_WAVECENTER_WAVEOUT",
    "MM_VIONA_QVINPCI_MIXER",
    "MM_VIONA_QVINPCI_WAVEIN",
    "MM_VIONAQVINPCI_WAVEOUT",
    "MM_VIONA_BUSTER_MIXER",
    "MM_VIONA_CINEMASTER_MIXER",
    "MM_VIONA_CONCERTO_MIXER",
    "MM_CASIO_WP150_MIDIOUT",
    "MM_CASIO_WP150_MIDIIN",
    "MM_CASIO_LSG_MIDIOUT",
    "MM_DIMD_PLATFORM",
    "MM_DIMD_DIRSOUND",
    "MM_DIMD_VIRTMPU",
    "MM_DIMD_VIRTSB",
    "MM_DIMD_VIRTJOY",
    "MM_DIMD_WAVEIN",
    "MM_DIMD_WAVEOUT",
    "MM_DIMD_MIDIIN",
    "MM_DIMD_MIDIOUT",
    "MM_DIMD_AUX_LINE",
    "MM_DIMD_MIXER",
    "MM_DIMD_WSS_WAVEIN",
    "MM_DIMD_WSS_WAVEOUT",
    "MM_DIMD_WSS_MIXER",
    "MM_DIMD_WSS_AUX",
    "MM_DIMD_WSS_SYNTH",
    "MM_S3_WAVEOUT",
    "MM_S3_WAVEIN",
    "MM_S3_MIDIOUT",
    "MM_S3_MIDIIN",
    "MM_S3_FMSYNTH",
    "MM_S3_MIXER",
    "MM_S3_AUX",
    "MM_VKC_MPU401_MIDIIN",
    "MM_VKC_SERIAL_MIDIIN",
    "MM_VKC_MPU401_MIDIOUT",
    "MM_VKC_SERIAL_MIDIOUT",
    "MM_ZEFIRO_ZA2",
    "MM_FHGIIS_MPEGLAYER3_DECODE",
    "MM_FHGIIS_MPEGLAYER3",
    "MM_FHGIIS_MPEGLAYER3_LITE",
    "MM_FHGIIS_MPEGLAYER3_BASIC",
    "MM_FHGIIS_MPEGLAYER3_ADVANCED",
    "MM_FHGIIS_MPEGLAYER3_PROFESSIONAL",
    "MM_FHGIIS_MPEGLAYER3_ADVANCEDPLUS",
    "MM_QUICKNET_PJWAVEIN",
    "MM_QUICKNET_PJWAVEOUT",
    "MM_SICRESOURCE_SSO3D",
    "MM_SICRESOURCE_SSOW3DI",
    "MM_NEOMAGIC_SYNTH",
    "MM_NEOMAGIC_WAVEOUT",
    "MM_NEOMAGIC_WAVEIN",
    "MM_NEOMAGIC_MIDIOUT",
    "MM_NEOMAGIC_MIDIIN",
    "MM_NEOMAGIC_AUX",
    "MM_NEOMAGIC_MW3DX_WAVEOUT",
    "MM_NEOMAGIC_MW3DX_WAVEIN",
    "MM_NEOMAGIC_MW3DX_MIDIOUT",
    "MM_NEOMAGIC_MW3DX_MIDIIN",
    "MM_NEOMAGIC_MW3DX_FMSYNTH",
    "MM_NEOMAGIC_MW3DX_GMSYNTH",
    "MM_NEOMAGIC_MW3DX_MIXER",
    "MM_NEOMAGIC_MW3DX_AUX",
    "MM_NEOMAGIC_MWAVE_WAVEOUT",
    "MM_NEOMAGIC_MWAVE_WAVEIN",
    "MM_NEOMAGIC_MWAVE_MIDIOUT",
    "MM_NEOMAGIC_MWAVE_MIDIIN",
    "MM_NEOMAGIC_MWAVE_MIXER",
    "MM_NEOMAGIC_MWAVE_AUX",
    "MM_MERGING_MPEGL3",
    "MM_XIRLINK_VISIONLINK",
    "MM_OTI_611WAVEIN",
    "MM_OTI_611WAVEOUT",
    "MM_OTI_611MIXER",
    "MM_OTI_611MIDIN",
    "MM_OTI_611MIDIOUT",
    "MM_AUREAL_AU8820",
    "MM_AU8820_SYNTH",
    "MM_AU8820_WAVEOUT",
    "MM_AU8820_WAVEIN",
    "MM_AU8820_MIXER",
    "MM_AU8820_AUX",
    "MM_AU8820_MIDIOUT",
    "MM_AU8820_MIDIIN",
    "MM_AUREAL_AU8830",
    "MM_AU8830_SYNTH",
    "MM_AU8830_WAVEOUT",
    "MM_AU8830_WAVEIN",
    "MM_AU8830_MIXER",
    "MM_AU8830_AUX",
    "MM_AU8830_MIDIOUT",
    "MM_AU8830_MIDIIN",
    "MM_VIVO_AUDIO_CODEC",
    "MM_SHARP_MDC_MIDI_SYNTH",
    "MM_SHARP_MDC_MIDI_IN",
    "MM_SHARP_MDC_MIDI_OUT",
    "MM_SHARP_MDC_WAVE_IN",
    "MM_SHARP_MDC_WAVE_OUT",
    "MM_SHARP_MDC_AUX",
    "MM_SHARP_MDC_MIXER",
    "MM_SHARP_MDC_AUX_MASTER",
    "MM_SHARP_MDC_AUX_BASS",
    "MM_SHARP_MDC_AUX_TREBLE",
    "MM_SHARP_MDC_AUX_MIDI_VOL",
    "MM_SHARP_MDC_AUX_WAVE_VOL",
    "MM_SHARP_MDC_AUX_WAVE_RVB",
    "MM_SHARP_MDC_AUX_WAVE_CHR",
    "MM_SHARP_MDC_AUX_VOL",
    "MM_SHARP_MDC_AUX_RVB",
    "MM_SHARP_MDC_AUX_CHR",
    "MM_LUCENT_ACM_G723",
    "MM_ATT_G729A",
    "MM_MARIAN_ARC44WAVEIN",
    "MM_MARIAN_ARC44WAVEOUT",
    "MM_MARIAN_PRODIF24WAVEIN",
    "MM_MARIAN_PRODIF24WAVEOUT",
    "MM_MARIAN_ARC88WAVEIN",
    "MM_MARIAN_ARC88WAVEOUT",
    "MM_BCB_NETBOARD_10",
    "MM_BCB_TT75_10",
    "MM_MOTIONPIXELS_MVI2",
    "MM_QDESIGN_ACM_MPEG",
    "MM_QDESIGN_ACM_QDESIGN_MUSIC",
    "MM_NMP_CCP_WAVEIN",
    "MM_NMP_CCP_WAVEOUT",
    "MM_NMP_ACM_AMR",
    "MM_DF_ACM_G726",
    "MM_DF_ACM_GSM610",
    "MM_BERCOS_WAVEIN",
    "MM_BERCOS_MIXER",
    "MM_BERCOS_WAVEOUT",
    "MM_ONLIVE_MPCODEC",
    "MM_PHONET_PP_WAVEOUT",
    "MM_PHONET_PP_WAVEIN",
    "MM_PHONET_PP_MIXER",
    "MM_FTR_ENCODER_WAVEIN",
    "MM_FTR_ACM",
    "MM_ENET_T2000_LINEIN",
    "MM_ENET_T2000_LINEOUT",
    "MM_ENET_T2000_HANDSETIN",
    "MM_ENET_T2000_HANDSETOUT",
    "MM_EMAGIC_UNITOR8",
    "MM_SIPROLAB_ACELPNET",
    "MM_DICTAPHONE_G726",
    "MM_RZS_ACM_TUBGSM",
    "MM_EES_PCMIDI14",
    "MM_EES_PCMIDI14_IN",
    "MM_EES_PCMIDI14_OUT1",
    "MM_EES_PCMIDI14_OUT2",
    "MM_EES_PCMIDI14_OUT3",
    "MM_EES_PCMIDI14_OUT4",
    "MM_HAFTMANN_LPTDAC2",
    "MM_LUCID_PCI24WAVEIN",
    "MM_LUCID_PCI24WAVEOUT",
    "MM_HEADSPACE_HAESYNTH",
    "MM_HEADSPACE_HAEWAVEOUT",
    "MM_HEADSPACE_HAEWAVEIN",
    "MM_HEADSPACE_HAEMIXER",
    "MM_UNISYS_ACM_NAP",
    "MM_LUMINOSITI_SCWAVEIN",
    "MM_LUMINOSITI_SCWAVEOUT",
    "MM_LUMINOSITI_SCWAVEMIX",
    "MM_ACTIVEVOICE_ACM_VOXADPCM",
    "MM_DTS_DS",
    "MM_SOFTLAB_NSK_FRW_WAVEIN",
    "MM_SOFTLAB_NSK_FRW_WAVEOUT",
    "MM_SOFTLAB_NSK_FRW_MIXER",
    "MM_SOFTLAB_NSK_FRW_AUX",
    "MM_FORTEMEDIA_WAVEIN",
    "MM_FORTEMEDIA_WAVEOUT",
    "MM_FORTEMEDIA_FMSYNC",
    "MM_FORTEMEDIA_MIXER",
    "MM_FORTEMEDIA_AUX",
    "MM_SONORUS_STUDIO",
    "MM_I_LINK_VOICE_CODER",
    "MM_SELSIUS_SYSTEMS_RTPWAVEOUT",
    "MM_SELSIUS_SYSTEMS_RTPWAVEIN",
    "MM_ADMOS_FM_SYNTH",
    "MM_ADMOS_QS3AMIDIOUT",
    "MM_ADMOS_QS3AMIDIIN",
    "MM_ADMOS_QS3AWAVEOUT",
    "MM_ADMOS_QS3AWAVEIN",
    "MM_LEXICON_STUDIO_WAVE_OUT",
    "MM_LEXICON_STUDIO_WAVE_IN",
    "MM_SGI_320_WAVEIN",
    "MM_SGI_320_WAVEOUT",
    "MM_SGI_320_MIXER",
    "MM_SGI_540_WAVEIN",
    "MM_SGI_540_WAVEOUT",
    "MM_SGI_540_MIXER",
    "MM_SGI_RAD_ADATMONO1_WAVEIN",
    "MM_SGI_RAD_ADATMONO2_WAVEIN",
    "MM_SGI_RAD_ADATMONO3_WAVEIN",
    "MM_SGI_RAD_ADATMONO4_WAVEIN",
    "MM_SGI_RAD_ADATMONO5_WAVEIN",
    "MM_SGI_RAD_ADATMONO6_WAVEIN",
    "MM_SGI_RAD_ADATMONO7_WAVEIN",
    "MM_SGI_RAD_ADATMONO8_WAVEIN",
    "MM_SGI_RAD_ADATSTEREO12_WAVEIN",
    "MM_SGI_RAD_ADATSTEREO34_WAVEIN",
    "MM_SGI_RAD_ADATSTEREO56_WAVEIN",
    "MM_SGI_RAD_ADATSTEREO78_WAVEIN",
    "MM_SGI_RAD_ADAT8CHAN_WAVEIN",
    "MM_SGI_RAD_ADATMONO1_WAVEOUT",
    "MM_SGI_RAD_ADATMONO2_WAVEOUT",
    "MM_SGI_RAD_ADATMONO3_WAVEOUT",
    "MM_SGI_RAD_ADATMONO4_WAVEOUT",
    "MM_SGI_RAD_ADATMONO5_WAVEOUT",
    "MM_SGI_RAD_ADATMONO6_WAVEOUT",
    "MM_SGI_RAD_ADATMONO7_WAVEOUT",
    "MM_SGI_RAD_ADATMONO8_WAVEOUT",
    "MM_SGI_RAD_ADATSTEREO12_WAVEOUT",
    "MM_SGI_RAD_ADATSTEREO32_WAVEOUT",
    "MM_SGI_RAD_ADATSTEREO56_WAVEOUT",
    "MM_SGI_RAD_ADATSTEREO78_WAVEOUT",
    "MM_SGI_RAD_ADAT8CHAN_WAVEOUT",
    "MM_SGI_RAD_AESMONO1_WAVEIN",
    "MM_SGI_RAD_AESMONO2_WAVEIN",
    "MM_SGI_RAD_AESSTEREO_WAVEIN",
    "MM_SGI_RAD_AESMONO1_WAVEOUT",
    "MM_SGI_RAD_AESMONO2_WAVEOUT",
    "MM_SGI_RAD_AESSTEREO_WAVEOUT",
    "MM_IPI_ACM_HSX",
    "MM_IPI_ACM_RPELP",
    "MM_IPI_WF_ASSS",
    "MM_IPI_AT_WAVEOUT",
    "MM_IPI_AT_WAVEIN",
    "MM_IPI_AT_MIXER",
    "MM_ICE_WAVEOUT",
    "MM_ICE_WAVEIN",
    "MM_ICE_MTWAVEOUT",
    "MM_ICE_MTWAVEIN",
    "MM_ICE_MIDIOUT1",
    "MM_ICE_MIDIIN1",
    "MM_ICE_MIDIOUT2",
    "MM_ICE_MIDIIN2",
    "MM_ICE_SYNTH",
    "MM_ICE_MIXER",
    "MM_ICE_AUX",
    "MM_VQST_VQC1",
    "MM_VQST_VQC2",
    "MM_ETEK_KWIKMIDI_MIDIIN",
    "MM_ETEK_KWIKMIDI_MIDIOUT",
    "MM_INTERNET_SSW_MIDIOUT",
    "MM_INTERNET_SSW_MIDIIN",
    "MM_INTERNET_SSW_WAVEOUT",
    "MM_INTERNET_SSW_WAVEIN",
    "MM_SONY_ACM_SCX",
    "MM_UH_ACM_ADPCM",
    "MM_SYDEC_NV_WAVEIN",
    "MM_SYDEC_NV_WAVEOUT",
    "MM_FLEXION_X300_WAVEIN",
    "MM_FLEXION_X300_WAVEOUT",
    "MM_VIA_WAVEOUT",
    "MM_VIA_WAVEIN",
    "MM_VIA_MIXER",
    "MM_VIA_AUX",
    "MM_VIA_MPU401_MIDIOUT",
    "MM_VIA_MPU401_MIDIIN",
    "MM_VIA_SWFM_SYNTH",
    "MM_VIA_WDM_WAVEOUT",
    "MM_VIA_WDM_WAVEIN",
    "MM_VIA_WDM_MIXER",
    "MM_VIA_WDM_MPU401_MIDIOUT",
    "MM_VIA_WDM_MPU401_MIDIIN",
    "MM_MICRONAS_SC4",
    "MM_MICRONAS_CLP833",
    "MM_HP_WAVEOUT",
    "MM_HP_WAVEIN",
    "MM_QUICKAUDIO_MINIMIDI",
    "MM_QUICKAUDIO_MAXIMIDI",
    "MM_ICCC_UNA3_WAVEIN",
    "MM_ICCC_UNA3_WAVEOUT",
    "MM_ICCC_UNA3_AUX",
    "MM_ICCC_UNA3_MIXER",
    "MM_3COM_CB_MIXER",
    "MM_3COM_CB_WAVEIN",
    "MM_3COM_CB_WAVEOUT",
    "MM_MINDMAKER_GC_WAVEIN",
    "MM_MINDMAKER_GC_WAVEOUT",
    "MM_MINDMAKER_GC_MIXER",
    "MM_TELEKOL_WAVEOUT",
    "MM_TELEKOL_WAVEIN",
    "MM_ALGOVISION_VB80WAVEOUT",
    "MM_ALGOVISION_VB80WAVEIN",
    "MM_ALGOVISION_VB80MIXER",
    "MM_ALGOVISION_VB80AUX",
    "MM_ALGOVISION_VB80AUX2",
    "WAVE_FORMAT_UNKNOWN",
    "WAVE_FORMAT_ADPCM",
    "WAVE_FORMAT_IEEE_FLOAT",
    "WAVE_FORMAT_VSELP",
    "WAVE_FORMAT_IBM_CVSD",
    "WAVE_FORMAT_ALAW",
    "WAVE_FORMAT_MULAW",
    "WAVE_FORMAT_DTS",
    "WAVE_FORMAT_DRM",
    "WAVE_FORMAT_WMAVOICE9",
    "WAVE_FORMAT_WMAVOICE10",
    "WAVE_FORMAT_OKI_ADPCM",
    "WAVE_FORMAT_DVI_ADPCM",
    "WAVE_FORMAT_IMA_ADPCM",
    "WAVE_FORMAT_MEDIASPACE_ADPCM",
    "WAVE_FORMAT_SIERRA_ADPCM",
    "WAVE_FORMAT_G723_ADPCM",
    "WAVE_FORMAT_DIGISTD",
    "WAVE_FORMAT_DIGIFIX",
    "WAVE_FORMAT_DIALOGIC_OKI_ADPCM",
    "WAVE_FORMAT_MEDIAVISION_ADPCM",
    "WAVE_FORMAT_CU_CODEC",
    "WAVE_FORMAT_HP_DYN_VOICE",
    "WAVE_FORMAT_YAMAHA_ADPCM",
    "WAVE_FORMAT_SONARC",
    "WAVE_FORMAT_DSPGROUP_TRUESPEECH",
    "WAVE_FORMAT_ECHOSC1",
    "WAVE_FORMAT_AUDIOFILE_AF36",
    "WAVE_FORMAT_APTX",
    "WAVE_FORMAT_AUDIOFILE_AF10",
    "WAVE_FORMAT_PROSODY_1612",
    "WAVE_FORMAT_LRC",
    "WAVE_FORMAT_DOLBY_AC2",
    "WAVE_FORMAT_GSM610",
    "WAVE_FORMAT_MSNAUDIO",
    "WAVE_FORMAT_ANTEX_ADPCME",
    "WAVE_FORMAT_CONTROL_RES_VQLPC",
    "WAVE_FORMAT_DIGIREAL",
    "WAVE_FORMAT_DIGIADPCM",
    "WAVE_FORMAT_CONTROL_RES_CR10",
    "WAVE_FORMAT_NMS_VBXADPCM",
    "WAVE_FORMAT_CS_IMAADPCM",
    "WAVE_FORMAT_ECHOSC3",
    "WAVE_FORMAT_ROCKWELL_ADPCM",
    "WAVE_FORMAT_ROCKWELL_DIGITALK",
    "WAVE_FORMAT_XEBEC",
    "WAVE_FORMAT_G721_ADPCM",
    "WAVE_FORMAT_G728_CELP",
    "WAVE_FORMAT_MSG723",
    "WAVE_FORMAT_INTEL_G723_1",
    "WAVE_FORMAT_INTEL_G729",
    "WAVE_FORMAT_SHARP_G726",
    "WAVE_FORMAT_MPEG",
    "WAVE_FORMAT_RT24",
    "WAVE_FORMAT_PAC",
    "WAVE_FORMAT_MPEGLAYER3",
    "WAVE_FORMAT_LUCENT_G723",
    "WAVE_FORMAT_CIRRUS",
    "WAVE_FORMAT_ESPCM",
    "WAVE_FORMAT_VOXWARE",
    "WAVE_FORMAT_CANOPUS_ATRAC",
    "WAVE_FORMAT_G726_ADPCM",
    "WAVE_FORMAT_G722_ADPCM",
    "WAVE_FORMAT_DSAT",
    "WAVE_FORMAT_DSAT_DISPLAY",
    "WAVE_FORMAT_VOXWARE_BYTE_ALIGNED",
    "WAVE_FORMAT_VOXWARE_AC8",
    "WAVE_FORMAT_VOXWARE_AC10",
    "WAVE_FORMAT_VOXWARE_AC16",
    "WAVE_FORMAT_VOXWARE_AC20",
    "WAVE_FORMAT_VOXWARE_RT24",
    "WAVE_FORMAT_VOXWARE_RT29",
    "WAVE_FORMAT_VOXWARE_RT29HW",
    "WAVE_FORMAT_VOXWARE_VR12",
    "WAVE_FORMAT_VOXWARE_VR18",
    "WAVE_FORMAT_VOXWARE_TQ40",
    "WAVE_FORMAT_VOXWARE_SC3",
    "WAVE_FORMAT_VOXWARE_SC3_1",
    "WAVE_FORMAT_SOFTSOUND",
    "WAVE_FORMAT_VOXWARE_TQ60",
    "WAVE_FORMAT_MSRT24",
    "WAVE_FORMAT_G729A",
    "WAVE_FORMAT_MVI_MVI2",
    "WAVE_FORMAT_DF_G726",
    "WAVE_FORMAT_DF_GSM610",
    "WAVE_FORMAT_ISIAUDIO",
    "WAVE_FORMAT_ONLIVE",
    "WAVE_FORMAT_MULTITUDE_FT_SX20",
    "WAVE_FORMAT_INFOCOM_ITS_G721_ADPCM",
    "WAVE_FORMAT_CONVEDIA_G729",
    "WAVE_FORMAT_CONGRUENCY",
    "WAVE_FORMAT_SBC24",
    "WAVE_FORMAT_DOLBY_AC3_SPDIF",
    "WAVE_FORMAT_MEDIASONIC_G723",
    "WAVE_FORMAT_PROSODY_8KBPS",
    "WAVE_FORMAT_ZYXEL_ADPCM",
    "WAVE_FORMAT_PHILIPS_LPCBB",
    "WAVE_FORMAT_PACKED",
    "WAVE_FORMAT_MALDEN_PHONYTALK",
    "WAVE_FORMAT_RACAL_RECORDER_GSM",
    "WAVE_FORMAT_RACAL_RECORDER_G720_A",
    "WAVE_FORMAT_RACAL_RECORDER_G723_1",
    "WAVE_FORMAT_RACAL_RECORDER_TETRA_ACELP",
    "WAVE_FORMAT_NEC_AAC",
    "WAVE_FORMAT_RAW_AAC1",
    "WAVE_FORMAT_RHETOREX_ADPCM",
    "WAVE_FORMAT_IRAT",
    "WAVE_FORMAT_VIVO_G723",
    "WAVE_FORMAT_VIVO_SIREN",
    "WAVE_FORMAT_PHILIPS_CELP",
    "WAVE_FORMAT_PHILIPS_GRUNDIG",
    "WAVE_FORMAT_DIGITAL_G723",
    "WAVE_FORMAT_SANYO_LD_ADPCM",
    "WAVE_FORMAT_SIPROLAB_ACEPLNET",
    "WAVE_FORMAT_SIPROLAB_ACELP4800",
    "WAVE_FORMAT_SIPROLAB_ACELP8V3",
    "WAVE_FORMAT_SIPROLAB_G729",
    "WAVE_FORMAT_SIPROLAB_G729A",
    "WAVE_FORMAT_SIPROLAB_KELVIN",
    "WAVE_FORMAT_VOICEAGE_AMR",
    "WAVE_FORMAT_G726ADPCM",
    "WAVE_FORMAT_DICTAPHONE_CELP68",
    "WAVE_FORMAT_DICTAPHONE_CELP54",
    "WAVE_FORMAT_QUALCOMM_PUREVOICE",
    "WAVE_FORMAT_QUALCOMM_HALFRATE",
    "WAVE_FORMAT_TUBGSM",
    "WAVE_FORMAT_MSAUDIO1",
    "WAVE_FORMAT_WMAUDIO2",
    "WAVE_FORMAT_WMAUDIO3",
    "WAVE_FORMAT_WMAUDIO_LOSSLESS",
    "WAVE_FORMAT_WMASPDIF",
    "WAVE_FORMAT_UNISYS_NAP_ADPCM",
    "WAVE_FORMAT_UNISYS_NAP_ULAW",
    "WAVE_FORMAT_UNISYS_NAP_ALAW",
    "WAVE_FORMAT_UNISYS_NAP_16K",
    "WAVE_FORMAT_SYCOM_ACM_SYC008",
    "WAVE_FORMAT_SYCOM_ACM_SYC701_G726L",
    "WAVE_FORMAT_SYCOM_ACM_SYC701_CELP54",
    "WAVE_FORMAT_SYCOM_ACM_SYC701_CELP68",
    "WAVE_FORMAT_KNOWLEDGE_ADVENTURE_ADPCM",
    "WAVE_FORMAT_FRAUNHOFER_IIS_MPEG2_AAC",
    "WAVE_FORMAT_DTS_DS",
    "WAVE_FORMAT_CREATIVE_ADPCM",
    "WAVE_FORMAT_CREATIVE_FASTSPEECH8",
    "WAVE_FORMAT_CREATIVE_FASTSPEECH10",
    "WAVE_FORMAT_UHER_ADPCM",
    "WAVE_FORMAT_ULEAD_DV_AUDIO",
    "WAVE_FORMAT_ULEAD_DV_AUDIO_1",
    "WAVE_FORMAT_QUARTERDECK",
    "WAVE_FORMAT_ILINK_VC",
    "WAVE_FORMAT_RAW_SPORT",
    "WAVE_FORMAT_ESST_AC3",
    "WAVE_FORMAT_GENERIC_PASSTHRU",
    "WAVE_FORMAT_IPI_HSX",
    "WAVE_FORMAT_IPI_RPELP",
    "WAVE_FORMAT_CS2",
    "WAVE_FORMAT_SONY_SCX",
    "WAVE_FORMAT_SONY_SCY",
    "WAVE_FORMAT_SONY_ATRAC3",
    "WAVE_FORMAT_SONY_SPC",
    "WAVE_FORMAT_TELUM_AUDIO",
    "WAVE_FORMAT_TELUM_IA_AUDIO",
    "WAVE_FORMAT_NORCOM_VOICE_SYSTEMS_ADPCM",
    "WAVE_FORMAT_FM_TOWNS_SND",
    "WAVE_FORMAT_MICRONAS",
    "WAVE_FORMAT_MICRONAS_CELP833",
    "WAVE_FORMAT_BTV_DIGITAL",
    "WAVE_FORMAT_INTEL_MUSIC_CODER",
    "WAVE_FORMAT_INDEO_AUDIO",
    "WAVE_FORMAT_QDESIGN_MUSIC",
    "WAVE_FORMAT_ON2_VP7_AUDIO",
    "WAVE_FORMAT_ON2_VP6_AUDIO",
    "WAVE_FORMAT_VME_VMPCM",
    "WAVE_FORMAT_TPC",
    "WAVE_FORMAT_LIGHTWAVE_LOSSLESS",
    "WAVE_FORMAT_OLIGSM",
    "WAVE_FORMAT_OLIADPCM",
    "WAVE_FORMAT_OLICELP",
    "WAVE_FORMAT_OLISBC",
    "WAVE_FORMAT_OLIOPR",
    "WAVE_FORMAT_LH_CODEC",
    "WAVE_FORMAT_LH_CODEC_CELP",
    "WAVE_FORMAT_LH_CODEC_SBC8",
    "WAVE_FORMAT_LH_CODEC_SBC12",
    "WAVE_FORMAT_LH_CODEC_SBC16",
    "WAVE_FORMAT_NORRIS",
    "WAVE_FORMAT_ISIAUDIO_2",
    "WAVE_FORMAT_SOUNDSPACE_MUSICOMPRESS",
    "WAVE_FORMAT_MPEG_ADTS_AAC",
    "WAVE_FORMAT_MPEG_RAW_AAC",
    "WAVE_FORMAT_MPEG_LOAS",
    "WAVE_FORMAT_NOKIA_MPEG_ADTS_AAC",
    "WAVE_FORMAT_NOKIA_MPEG_RAW_AAC",
    "WAVE_FORMAT_VODAFONE_MPEG_ADTS_AAC",
    "WAVE_FORMAT_VODAFONE_MPEG_RAW_AAC",
    "WAVE_FORMAT_MPEG_HEAAC",
    "WAVE_FORMAT_VOXWARE_RT24_SPEECH",
    "WAVE_FORMAT_SONICFOUNDRY_LOSSLESS",
    "WAVE_FORMAT_INNINGS_TELECOM_ADPCM",
    "WAVE_FORMAT_LUCENT_SX8300P",
    "WAVE_FORMAT_LUCENT_SX5363S",
    "WAVE_FORMAT_CUSEEME",
    "WAVE_FORMAT_NTCSOFT_ALF2CM_ACM",
    "WAVE_FORMAT_DVM",
    "WAVE_FORMAT_DTS2",
    "WAVE_FORMAT_MAKEAVIS",
    "WAVE_FORMAT_DIVIO_MPEG4_AAC",
    "WAVE_FORMAT_NOKIA_ADAPTIVE_MULTIRATE",
    "WAVE_FORMAT_DIVIO_G726",
    "WAVE_FORMAT_LEAD_SPEECH",
    "WAVE_FORMAT_LEAD_VORBIS",
    "WAVE_FORMAT_WAVPACK_AUDIO",
    "WAVE_FORMAT_ALAC",
    "WAVE_FORMAT_OGG_VORBIS_MODE_1",
    "WAVE_FORMAT_OGG_VORBIS_MODE_2",
    "WAVE_FORMAT_OGG_VORBIS_MODE_3",
    "WAVE_FORMAT_OGG_VORBIS_MODE_1_PLUS",
    "WAVE_FORMAT_OGG_VORBIS_MODE_2_PLUS",
    "WAVE_FORMAT_OGG_VORBIS_MODE_3_PLUS",
    "WAVE_FORMAT_3COM_NBX",
    "WAVE_FORMAT_OPUS",
    "WAVE_FORMAT_FAAD_AAC",
    "WAVE_FORMAT_AMR_NB",
    "WAVE_FORMAT_AMR_WB",
    "WAVE_FORMAT_AMR_WP",
    "WAVE_FORMAT_GSM_AMR_CBR",
    "WAVE_FORMAT_GSM_AMR_VBR_SID",
    "WAVE_FORMAT_COMVERSE_INFOSYS_G723_1",
    "WAVE_FORMAT_COMVERSE_INFOSYS_AVQSBC",
    "WAVE_FORMAT_COMVERSE_INFOSYS_SBC",
    "WAVE_FORMAT_SYMBOL_G729_A",
    "WAVE_FORMAT_VOICEAGE_AMR_WB",
    "WAVE_FORMAT_INGENIENT_G726",
    "WAVE_FORMAT_MPEG4_AAC",
    "WAVE_FORMAT_ENCORE_G726",
    "WAVE_FORMAT_ZOLL_ASAO",
    "WAVE_FORMAT_SPEEX_VOICE",
    "WAVE_FORMAT_VIANIX_MASC",
    "WAVE_FORMAT_WM9_SPECTRUM_ANALYZER",
    "WAVE_FORMAT_WMF_SPECTRUM_ANAYZER",
    "WAVE_FORMAT_GSM_610",
    "WAVE_FORMAT_GSM_620",
    "WAVE_FORMAT_GSM_660",
    "WAVE_FORMAT_GSM_690",
    "WAVE_FORMAT_GSM_ADAPTIVE_MULTIRATE_WB",
    "WAVE_FORMAT_POLYCOM_G722",
    "WAVE_FORMAT_POLYCOM_G728",
    "WAVE_FORMAT_POLYCOM_G729_A",
    "WAVE_FORMAT_POLYCOM_SIREN",
    "WAVE_FORMAT_GLOBAL_IP_ILBC",
    "WAVE_FORMAT_RADIOTIME_TIME_SHIFT_RADIO",
    "WAVE_FORMAT_NICE_ACA",
    "WAVE_FORMAT_NICE_ADPCM",
    "WAVE_FORMAT_VOCORD_G721",
    "WAVE_FORMAT_VOCORD_G726",
    "WAVE_FORMAT_VOCORD_G722_1",
    "WAVE_FORMAT_VOCORD_G728",
    "WAVE_FORMAT_VOCORD_G729",
    "WAVE_FORMAT_VOCORD_G729_A",
    "WAVE_FORMAT_VOCORD_G723_1",
    "WAVE_FORMAT_VOCORD_LBC",
    "WAVE_FORMAT_NICE_G728",
    "WAVE_FORMAT_FRACE_TELECOM_G729",
    "WAVE_FORMAT_CODIAN",
    "WAVE_FORMAT_DOLBY_AC4",
    "WAVE_FORMAT_FLAC",
    "WAVE_FORMAT_DEVELOPMENT",
    "ACM_MPEG_LAYER1",
    "ACM_MPEG_LAYER2",
    "ACM_MPEG_LAYER3",
    "ACM_MPEG_STEREO",
    "ACM_MPEG_JOINTSTEREO",
    "ACM_MPEG_DUALCHANNEL",
    "ACM_MPEG_SINGLECHANNEL",
    "ACM_MPEG_PRIVATEBIT",
    "ACM_MPEG_COPYRIGHT",
    "ACM_MPEG_ORIGINALHOME",
    "ACM_MPEG_PROTECTIONBIT",
    "ACM_MPEG_ID_MPEG1",
    "MPEGLAYER3_WFX_EXTRA_BYTES",
    "MPEGLAYER3_ID_UNKNOWN",
    "MPEGLAYER3_ID_MPEG",
    "MPEGLAYER3_ID_CONSTANTFRAMESIZE",
    "MM_MSFT_ACM_WMAUDIO",
    "WMAUDIO_BITS_PER_SAMPLE",
    "WMAUDIO_MAX_CHANNELS",
    "MM_MSFT_ACM_MSAUDIO1",
    "MSAUDIO1_BITS_PER_SAMPLE",
    "MSAUDIO1_MAX_CHANNELS",
    "MM_MSFT_ACM_WMAUDIO2",
    "WMAUDIO2_BITS_PER_SAMPLE",
    "WMAUDIO2_MAX_CHANNELS",
    "WAVE_FILTER_UNKNOWN",
    "WAVE_FILTER_DEVELOPMENT",
    "WAVE_FILTER_VOLUME",
    "WAVE_FILTER_ECHO",
    "JPEG_PROCESS_BASELINE",
    "AVIIF_CONTROLFRAME",
    "JIFMK_SOF0",
    "JIFMK_SOF1",
    "JIFMK_SOF2",
    "JIFMK_SOF3",
    "JIFMK_SOF5",
    "JIFMK_SOF6",
    "JIFMK_SOF7",
    "JIFMK_JPG",
    "JIFMK_SOF9",
    "JIFMK_SOF10",
    "JIFMK_SOF11",
    "JIFMK_SOF13",
    "JIFMK_SOF14",
    "JIFMK_SOF15",
    "JIFMK_DHT",
    "JIFMK_DAC",
    "JIFMK_RST0",
    "JIFMK_RST1",
    "JIFMK_RST2",
    "JIFMK_RST3",
    "JIFMK_RST4",
    "JIFMK_RST5",
    "JIFMK_RST6",
    "JIFMK_RST7",
    "JIFMK_SOI",
    "JIFMK_EOI",
    "JIFMK_SOS",
    "JIFMK_DQT",
    "JIFMK_DNL",
    "JIFMK_DRI",
    "JIFMK_DHP",
    "JIFMK_EXP",
    "JIFMK_APP0",
    "JIFMK_APP1",
    "JIFMK_APP2",
    "JIFMK_APP3",
    "JIFMK_APP4",
    "JIFMK_APP5",
    "JIFMK_APP6",
    "JIFMK_APP7",
    "JIFMK_JPG0",
    "JIFMK_JPG1",
    "JIFMK_JPG2",
    "JIFMK_JPG3",
    "JIFMK_JPG4",
    "JIFMK_JPG5",
    "JIFMK_JPG6",
    "JIFMK_JPG7",
    "JIFMK_JPG8",
    "JIFMK_JPG9",
    "JIFMK_JPG10",
    "JIFMK_JPG11",
    "JIFMK_JPG12",
    "JIFMK_JPG13",
    "JIFMK_COM",
    "JIFMK_TEM",
    "JIFMK_RES",
    "JIFMK_00",
    "JIFMK_FF",
    "JPEG_Y",
    "JPEG_YCbCr",
    "JPEG_RGB",
    "MIXERCONTROL_CONTROLTYPE_SRS_MTS",
    "MIXERCONTROL_CONTROLTYPE_SRS_ONOFF",
    "MIXERCONTROL_CONTROLTYPE_SRS_SYNTHSELECT",
    "VP_COMMAND_GET",
    "VP_COMMAND_SET",
    "VP_FLAGS_TV_MODE",
    "VP_FLAGS_TV_STANDARD",
    "VP_FLAGS_FLICKER",
    "VP_FLAGS_OVERSCAN",
    "VP_FLAGS_MAX_UNSCALED",
    "VP_FLAGS_POSITION",
    "VP_FLAGS_BRIGHTNESS",
    "VP_FLAGS_CONTRAST",
    "VP_FLAGS_COPYPROTECT",
    "VP_MODE_WIN_GRAPHICS",
    "VP_MODE_TV_PLAYBACK",
    "VP_TV_STANDARD_NTSC_M",
    "VP_TV_STANDARD_NTSC_M_J",
    "VP_TV_STANDARD_PAL_B",
    "VP_TV_STANDARD_PAL_D",
    "VP_TV_STANDARD_PAL_H",
    "VP_TV_STANDARD_PAL_I",
    "VP_TV_STANDARD_PAL_M",
    "VP_TV_STANDARD_PAL_N",
    "VP_TV_STANDARD_SECAM_B",
    "VP_TV_STANDARD_SECAM_D",
    "VP_TV_STANDARD_SECAM_G",
    "VP_TV_STANDARD_SECAM_H",
    "VP_TV_STANDARD_SECAM_K",
    "VP_TV_STANDARD_SECAM_K1",
    "VP_TV_STANDARD_SECAM_L",
    "VP_TV_STANDARD_WIN_VGA",
    "VP_TV_STANDARD_NTSC_433",
    "VP_TV_STANDARD_PAL_G",
    "VP_TV_STANDARD_PAL_60",
    "VP_TV_STANDARD_SECAM_L1",
    "VP_CP_TYPE_APS_TRIGGER",
    "VP_CP_TYPE_MACROVISION",
    "VP_CP_CMD_ACTIVATE",
    "VP_CP_CMD_DEACTIVATE",
    "VP_CP_CMD_CHANGE",
    "ICVERSION",
    "BI_1632",
    "ICERR_OK",
    "ICERR_DONTDRAW",
    "ICERR_NEWPALETTE",
    "ICERR_GOTOKEYFRAME",
    "ICERR_STOPDRAWING",
    "ICERR_UNSUPPORTED",
    "ICERR_BADFORMAT",
    "ICERR_MEMORY",
    "ICERR_INTERNAL",
    "ICERR_BADFLAGS",
    "ICERR_BADPARAM",
    "ICERR_BADSIZE",
    "ICERR_BADHANDLE",
    "ICERR_CANTUPDATE",
    "ICERR_ABORT",
    "ICERR_ERROR",
    "ICERR_BADBITDEPTH",
    "ICERR_BADIMAGESIZE",
    "ICERR_CUSTOM",
    "ICMODE_COMPRESS",
    "ICMODE_DECOMPRESS",
    "ICMODE_FASTDECOMPRESS",
    "ICMODE_QUERY",
    "ICMODE_FASTCOMPRESS",
    "ICMODE_DRAW",
    "ICMODE_INTERNALF_FUNCTION32",
    "ICMODE_INTERNALF_MASK",
    "AVIIF_TWOCC",
    "ICQUALITY_LOW",
    "ICQUALITY_HIGH",
    "ICQUALITY_DEFAULT",
    "ICM_USER",
    "ICM_RESERVED_LOW",
    "ICM_RESERVED_HIGH",
    "ICM_GETSTATE",
    "ICM_SETSTATE",
    "ICM_GETINFO",
    "ICM_CONFIGURE",
    "ICM_ABOUT",
    "ICM_GETERRORTEXT",
    "ICM_GETFORMATNAME",
    "ICM_ENUMFORMATS",
    "ICM_GETDEFAULTQUALITY",
    "ICM_GETQUALITY",
    "ICM_SETQUALITY",
    "ICM_SET",
    "ICM_GET",
    "ICM_COMPRESS_GET_FORMAT",
    "ICM_COMPRESS_GET_SIZE",
    "ICM_COMPRESS_QUERY",
    "ICM_COMPRESS_BEGIN",
    "ICM_COMPRESS",
    "ICM_COMPRESS_END",
    "ICM_DECOMPRESS_GET_FORMAT",
    "ICM_DECOMPRESS_QUERY",
    "ICM_DECOMPRESS_BEGIN",
    "ICM_DECOMPRESS",
    "ICM_DECOMPRESS_END",
    "ICM_DECOMPRESS_SET_PALETTE",
    "ICM_DECOMPRESS_GET_PALETTE",
    "ICM_DRAW_QUERY",
    "ICM_DRAW_BEGIN",
    "ICM_DRAW_GET_PALETTE",
    "ICM_DRAW_UPDATE",
    "ICM_DRAW_START",
    "ICM_DRAW_STOP",
    "ICM_DRAW_BITS",
    "ICM_DRAW_END",
    "ICM_DRAW_GETTIME",
    "ICM_DRAW",
    "ICM_DRAW_WINDOW",
    "ICM_DRAW_SETTIME",
    "ICM_DRAW_REALIZE",
    "ICM_DRAW_FLUSH",
    "ICM_DRAW_RENDERBUFFER",
    "ICM_DRAW_START_PLAY",
    "ICM_DRAW_STOP_PLAY",
    "ICM_DRAW_SUGGESTFORMAT",
    "ICM_DRAW_CHANGEPALETTE",
    "ICM_DRAW_IDLE",
    "ICM_GETBUFFERSWANTED",
    "ICM_GETDEFAULTKEYFRAMERATE",
    "ICM_DECOMPRESSEX_BEGIN",
    "ICM_DECOMPRESSEX_QUERY",
    "ICM_DECOMPRESSEX",
    "ICM_DECOMPRESSEX_END",
    "ICM_COMPRESS_FRAMES_INFO",
    "ICM_COMPRESS_FRAMES",
    "ICM_SET_STATUS_PROC",
    "VIDCF_QUALITY",
    "VIDCF_CRUNCH",
    "VIDCF_TEMPORAL",
    "VIDCF_COMPRESSFRAMES",
    "VIDCF_DRAW",
    "VIDCF_FASTTEMPORALC",
    "VIDCF_FASTTEMPORALD",
    "ICCOMPRESS_KEYFRAME",
    "ICCOMPRESSFRAMES_PADDING",
    "ICSTATUS_START",
    "ICSTATUS_STATUS",
    "ICSTATUS_END",
    "ICSTATUS_ERROR",
    "ICSTATUS_YIELD",
    "ICDECOMPRESS_HURRYUP",
    "ICDECOMPRESS_UPDATE",
    "ICDECOMPRESS_PREROLL",
    "ICDECOMPRESS_NULLFRAME",
    "ICDECOMPRESS_NOTKEYFRAME",
    "ICDRAW_QUERY",
    "ICDRAW_FULLSCREEN",
    "ICDRAW_HDC",
    "ICDRAW_ANIMATE",
    "ICDRAW_CONTINUE",
    "ICDRAW_MEMORYDC",
    "ICDRAW_UPDATING",
    "ICDRAW_RENDER",
    "ICDRAW_BUFFER",
    "ICDRAW_HURRYUP",
    "ICDRAW_UPDATE",
    "ICDRAW_PREROLL",
    "ICDRAW_NULLFRAME",
    "ICDRAW_NOTKEYFRAME",
    "ICINSTALL_UNICODE",
    "ICINSTALL_FUNCTION",
    "ICINSTALL_DRIVER",
    "ICINSTALL_HDRV",
    "ICINSTALL_DRIVERW",
    "ICMF_CONFIGURE_QUERY",
    "ICMF_ABOUT_QUERY",
    "ICMF_COMPVARS_VALID",
    "ICMF_CHOOSE_KEYFRAME",
    "ICMF_CHOOSE_DATARATE",
    "ICMF_CHOOSE_PREVIEW",
    "ICMF_CHOOSE_ALLCOMPRESSORS",
    "DDF_0001",
    "DDF_UPDATE",
    "DDF_SAME_HDC",
    "DDF_SAME_DRAW",
    "DDF_DONTDRAW",
    "DDF_ANIMATE",
    "DDF_BUFFER",
    "DDF_JUSTDRAWIT",
    "DDF_FULLSCREEN",
    "DDF_BACKGROUNDPAL",
    "DDF_NOTKEYFRAME",
    "DDF_HURRYUP",
    "DDF_HALFTONE",
    "DDF_2000",
    "DDF_PREROLL",
    "DDF_SAME_DIB",
    "DDF_SAME_SIZE",
    "PD_CAN_DRAW_DIB",
    "PD_CAN_STRETCHDIB",
    "PD_STRETCHDIB_1_1_OK",
    "PD_STRETCHDIB_1_2_OK",
    "PD_STRETCHDIB_1_N_OK",
    "AVIGETFRAMEF_BESTDISPLAYFMT",
    "AVISTREAMINFO_DISABLED",
    "AVISTREAMINFO_FORMATCHANGES",
    "AVIFILEINFO_HASINDEX",
    "AVIFILEINFO_MUSTUSEINDEX",
    "AVIFILEINFO_ISINTERLEAVED",
    "AVIFILEINFO_WASCAPTUREFILE",
    "AVIFILEINFO_COPYRIGHTED",
    "AVIFILECAPS_CANREAD",
    "AVIFILECAPS_CANWRITE",
    "AVIFILECAPS_ALLKEYFRAMES",
    "AVIFILECAPS_NOCOMPRESSION",
    "AVICOMPRESSF_INTERLEAVE",
    "AVICOMPRESSF_DATARATE",
    "AVICOMPRESSF_KEYFRAMES",
    "AVICOMPRESSF_VALID",
    "CLSID_AVISimpleUnMarshal",
    "CLSID_AVIFile",
    "AVIFILEHANDLER_CANREAD",
    "AVIFILEHANDLER_CANWRITE",
    "AVIFILEHANDLER_CANACCEPTNONRGB",
    "AVISTREAMREAD_CONVENIENT",
    "FIND_DIR",
    "FIND_NEXT",
    "FIND_PREV",
    "FIND_FROM_START",
    "FIND_TYPE",
    "FIND_KEY",
    "FIND_ANY",
    "FIND_FORMAT",
    "FIND_RET",
    "FIND_POS",
    "FIND_LENGTH",
    "FIND_OFFSET",
    "FIND_SIZE",
    "FIND_INDEX",
    "SEARCH_NEAREST",
    "SEARCH_BACKWARD",
    "SEARCH_FORWARD",
    "SEARCH_KEY",
    "SEARCH_ANY",
    "AVIERR_OK",
    "MCIWNDOPENF_NEW",
    "MCIWNDF_NOAUTOSIZEWINDOW",
    "MCIWNDF_NOPLAYBAR",
    "MCIWNDF_NOAUTOSIZEMOVIE",
    "MCIWNDF_NOMENU",
    "MCIWNDF_SHOWNAME",
    "MCIWNDF_SHOWPOS",
    "MCIWNDF_SHOWMODE",
    "MCIWNDF_SHOWALL",
    "MCIWNDF_NOTIFYMODE",
    "MCIWNDF_NOTIFYPOS",
    "MCIWNDF_NOTIFYSIZE",
    "MCIWNDF_NOTIFYERROR",
    "MCIWNDF_NOTIFYALL",
    "MCIWNDF_NOTIFYANSI",
    "MCIWNDF_NOTIFYMEDIAA",
    "MCIWNDF_NOTIFYMEDIAW",
    "MCIWNDF_NOTIFYMEDIA",
    "MCIWNDF_RECORD",
    "MCIWNDF_NOERRORDLG",
    "MCIWNDF_NOOPEN",
    "MCIWNDM_GETDEVICEID",
    "MCIWNDM_GETSTART",
    "MCIWNDM_GETLENGTH",
    "MCIWNDM_GETEND",
    "MCIWNDM_EJECT",
    "MCIWNDM_SETZOOM",
    "MCIWNDM_GETZOOM",
    "MCIWNDM_SETVOLUME",
    "MCIWNDM_GETVOLUME",
    "MCIWNDM_SETSPEED",
    "MCIWNDM_GETSPEED",
    "MCIWNDM_SETREPEAT",
    "MCIWNDM_GETREPEAT",
    "MCIWNDM_REALIZE",
    "MCIWNDM_VALIDATEMEDIA",
    "MCIWNDM_PLAYFROM",
    "MCIWNDM_PLAYTO",
    "MCIWNDM_GETPALETTE",
    "MCIWNDM_SETPALETTE",
    "MCIWNDM_SETTIMERS",
    "MCIWNDM_SETACTIVETIMER",
    "MCIWNDM_SETINACTIVETIMER",
    "MCIWNDM_GETACTIVETIMER",
    "MCIWNDM_GETINACTIVETIMER",
    "MCIWNDM_CHANGESTYLES",
    "MCIWNDM_GETSTYLES",
    "MCIWNDM_GETALIAS",
    "MCIWNDM_PLAYREVERSE",
    "MCIWNDM_GET_SOURCE",
    "MCIWNDM_PUT_SOURCE",
    "MCIWNDM_GET_DEST",
    "MCIWNDM_PUT_DEST",
    "MCIWNDM_CAN_PLAY",
    "MCIWNDM_CAN_WINDOW",
    "MCIWNDM_CAN_RECORD",
    "MCIWNDM_CAN_SAVE",
    "MCIWNDM_CAN_EJECT",
    "MCIWNDM_CAN_CONFIG",
    "MCIWNDM_PALETTEKICK",
    "MCIWNDM_OPENINTERFACE",
    "MCIWNDM_SETOWNER",
    "MCIWNDM_SENDSTRINGA",
    "MCIWNDM_GETPOSITIONA",
    "MCIWNDM_GETMODEA",
    "MCIWNDM_SETTIMEFORMATA",
    "MCIWNDM_GETTIMEFORMATA",
    "MCIWNDM_GETFILENAMEA",
    "MCIWNDM_GETDEVICEA",
    "MCIWNDM_GETERRORA",
    "MCIWNDM_NEWA",
    "MCIWNDM_RETURNSTRINGA",
    "MCIWNDM_OPENA",
    "MCIWNDM_SENDSTRINGW",
    "MCIWNDM_GETPOSITIONW",
    "MCIWNDM_GETMODEW",
    "MCIWNDM_SETTIMEFORMATW",
    "MCIWNDM_GETTIMEFORMATW",
    "MCIWNDM_GETFILENAMEW",
    "MCIWNDM_GETDEVICEW",
    "MCIWNDM_GETERRORW",
    "MCIWNDM_NEWW",
    "MCIWNDM_RETURNSTRINGW",
    "MCIWNDM_OPENW",
    "MCIWNDM_SENDSTRING",
    "MCIWNDM_GETPOSITION",
    "MCIWNDM_GETMODE",
    "MCIWNDM_SETTIMEFORMAT",
    "MCIWNDM_GETTIMEFORMAT",
    "MCIWNDM_GETFILENAME",
    "MCIWNDM_GETDEVICE",
    "MCIWNDM_GETERROR",
    "MCIWNDM_NEW",
    "MCIWNDM_RETURNSTRING",
    "MCIWNDM_OPEN",
    "MCIWNDM_NOTIFYMODE",
    "MCIWNDM_NOTIFYPOS",
    "MCIWNDM_NOTIFYSIZE",
    "MCIWNDM_NOTIFYMEDIA",
    "MCIWNDM_NOTIFYERROR",
    "MCIWND_START",
    "MCIWND_END",
    "MCI_OPEN",
    "MCI_CLOSE",
    "MCI_PLAY",
    "MCI_SEEK",
    "MCI_STOP",
    "MCI_PAUSE",
    "MCI_STEP",
    "MCI_RECORD",
    "MCI_SAVE",
    "MCI_CUT",
    "MCI_COPY",
    "MCI_PASTE",
    "MCI_RESUME",
    "MCI_DELETE",
    "MCI_MODE_NOT_READY",
    "MCI_MODE_STOP",
    "MCI_MODE_PLAY",
    "MCI_MODE_RECORD",
    "MCI_MODE_SEEK",
    "MCI_MODE_PAUSE",
    "MCI_MODE_OPEN",
    "DV_ERR_OK",
    "DV_ERR_BASE",
    "DV_ERR_NONSPECIFIC",
    "DV_ERR_BADFORMAT",
    "DV_ERR_STILLPLAYING",
    "DV_ERR_UNPREPARED",
    "DV_ERR_SYNC",
    "DV_ERR_TOOMANYCHANNELS",
    "DV_ERR_NOTDETECTED",
    "DV_ERR_BADINSTALL",
    "DV_ERR_CREATEPALETTE",
    "DV_ERR_SIZEFIELD",
    "DV_ERR_PARAM1",
    "DV_ERR_PARAM2",
    "DV_ERR_CONFIG1",
    "DV_ERR_CONFIG2",
    "DV_ERR_FLAGS",
    "DV_ERR_13",
    "DV_ERR_NOTSUPPORTED",
    "DV_ERR_NOMEM",
    "DV_ERR_ALLOCATED",
    "DV_ERR_BADDEVICEID",
    "DV_ERR_INVALHANDLE",
    "DV_ERR_BADERRNUM",
    "DV_ERR_NO_BUFFERS",
    "DV_ERR_MEM_CONFLICT",
    "DV_ERR_IO_CONFLICT",
    "DV_ERR_DMA_CONFLICT",
    "DV_ERR_INT_CONFLICT",
    "DV_ERR_PROTECT_ONLY",
    "DV_ERR_LASTERROR",
    "DV_ERR_USER_MSG",
    "DV_VM_OPEN",
    "DV_VM_CLOSE",
    "DV_VM_DATA",
    "DV_VM_ERROR",
    "VHDR_DONE",
    "VHDR_PREPARED",
    "VHDR_INQUEUE",
    "VHDR_KEYFRAME",
    "VHDR_VALID",
    "VCAPS_OVERLAY",
    "VCAPS_SRC_CAN_CLIP",
    "VCAPS_DST_CAN_CLIP",
    "VCAPS_CAN_SCALE",
    "VIDEO_EXTERNALIN",
    "VIDEO_EXTERNALOUT",
    "VIDEO_IN",
    "VIDEO_OUT",
    "VIDEO_DLG_QUERY",
    "VIDEO_CONFIGURE_QUERY",
    "VIDEO_CONFIGURE_SET",
    "VIDEO_CONFIGURE_GET",
    "VIDEO_CONFIGURE_QUERYSIZE",
    "VIDEO_CONFIGURE_CURRENT",
    "VIDEO_CONFIGURE_NOMINAL",
    "VIDEO_CONFIGURE_MIN",
    "VIDEO_CONFIGURE_MAX",
    "DVM_USER",
    "DVM_CONFIGURE_START",
    "DVM_CONFIGURE_END",
    "DVM_PALETTE",
    "DVM_FORMAT",
    "DVM_PALETTERGB555",
    "DVM_SRC_RECT",
    "DVM_DST_RECT",
    "WM_CAP_UNICODE_START",
    "WM_CAP_GET_CAPSTREAMPTR",
    "WM_CAP_SET_CALLBACK_ERRORW",
    "WM_CAP_SET_CALLBACK_STATUSW",
    "WM_CAP_SET_CALLBACK_ERRORA",
    "WM_CAP_SET_CALLBACK_STATUSA",
    "WM_CAP_SET_CALLBACK_ERROR",
    "WM_CAP_SET_CALLBACK_STATUS",
    "WM_CAP_SET_CALLBACK_YIELD",
    "WM_CAP_SET_CALLBACK_FRAME",
    "WM_CAP_SET_CALLBACK_VIDEOSTREAM",
    "WM_CAP_SET_CALLBACK_WAVESTREAM",
    "WM_CAP_GET_USER_DATA",
    "WM_CAP_SET_USER_DATA",
    "WM_CAP_DRIVER_CONNECT",
    "WM_CAP_DRIVER_DISCONNECT",
    "WM_CAP_DRIVER_GET_NAMEA",
    "WM_CAP_DRIVER_GET_VERSIONA",
    "WM_CAP_DRIVER_GET_NAMEW",
    "WM_CAP_DRIVER_GET_VERSIONW",
    "WM_CAP_DRIVER_GET_NAME",
    "WM_CAP_DRIVER_GET_VERSION",
    "WM_CAP_DRIVER_GET_CAPS",
    "WM_CAP_FILE_SET_CAPTURE_FILEA",
    "WM_CAP_FILE_GET_CAPTURE_FILEA",
    "WM_CAP_FILE_SAVEASA",
    "WM_CAP_FILE_SAVEDIBA",
    "WM_CAP_FILE_SET_CAPTURE_FILEW",
    "WM_CAP_FILE_GET_CAPTURE_FILEW",
    "WM_CAP_FILE_SAVEASW",
    "WM_CAP_FILE_SAVEDIBW",
    "WM_CAP_FILE_SET_CAPTURE_FILE",
    "WM_CAP_FILE_GET_CAPTURE_FILE",
    "WM_CAP_FILE_SAVEAS",
    "WM_CAP_FILE_SAVEDIB",
    "WM_CAP_FILE_ALLOCATE",
    "WM_CAP_FILE_SET_INFOCHUNK",
    "WM_CAP_EDIT_COPY",
    "WM_CAP_SET_AUDIOFORMAT",
    "WM_CAP_GET_AUDIOFORMAT",
    "WM_CAP_DLG_VIDEOFORMAT",
    "WM_CAP_DLG_VIDEOSOURCE",
    "WM_CAP_DLG_VIDEODISPLAY",
    "WM_CAP_GET_VIDEOFORMAT",
    "WM_CAP_SET_VIDEOFORMAT",
    "WM_CAP_DLG_VIDEOCOMPRESSION",
    "WM_CAP_SET_PREVIEW",
    "WM_CAP_SET_OVERLAY",
    "WM_CAP_SET_PREVIEWRATE",
    "WM_CAP_SET_SCALE",
    "WM_CAP_GET_STATUS",
    "WM_CAP_SET_SCROLL",
    "WM_CAP_GRAB_FRAME",
    "WM_CAP_GRAB_FRAME_NOSTOP",
    "WM_CAP_SEQUENCE",
    "WM_CAP_SEQUENCE_NOFILE",
    "WM_CAP_SET_SEQUENCE_SETUP",
    "WM_CAP_GET_SEQUENCE_SETUP",
    "WM_CAP_SET_MCI_DEVICEA",
    "WM_CAP_GET_MCI_DEVICEA",
    "WM_CAP_SET_MCI_DEVICEW",
    "WM_CAP_GET_MCI_DEVICEW",
    "WM_CAP_SET_MCI_DEVICE",
    "WM_CAP_GET_MCI_DEVICE",
    "WM_CAP_STOP",
    "WM_CAP_ABORT",
    "WM_CAP_SINGLE_FRAME_OPEN",
    "WM_CAP_SINGLE_FRAME_CLOSE",
    "WM_CAP_SINGLE_FRAME",
    "WM_CAP_PAL_OPENA",
    "WM_CAP_PAL_SAVEA",
    "WM_CAP_PAL_OPENW",
    "WM_CAP_PAL_SAVEW",
    "WM_CAP_PAL_OPEN",
    "WM_CAP_PAL_SAVE",
    "WM_CAP_PAL_PASTE",
    "WM_CAP_PAL_AUTOCREATE",
    "WM_CAP_PAL_MANUALCREATE",
    "WM_CAP_SET_CALLBACK_CAPCONTROL",
    "WM_CAP_UNICODE_END",
    "WM_CAP_END",
    "AVSTREAMMASTER_AUDIO",
    "AVSTREAMMASTER_NONE",
    "CONTROLCALLBACK_PREROLL",
    "CONTROLCALLBACK_CAPTURING",
    "IDS_CAP_BEGIN",
    "IDS_CAP_END",
    "IDS_CAP_INFO",
    "IDS_CAP_OUTOFMEM",
    "IDS_CAP_FILEEXISTS",
    "IDS_CAP_ERRORPALOPEN",
    "IDS_CAP_ERRORPALSAVE",
    "IDS_CAP_ERRORDIBSAVE",
    "IDS_CAP_DEFAVIEXT",
    "IDS_CAP_DEFPALEXT",
    "IDS_CAP_CANTOPEN",
    "IDS_CAP_SEQ_MSGSTART",
    "IDS_CAP_SEQ_MSGSTOP",
    "IDS_CAP_VIDEDITERR",
    "IDS_CAP_READONLYFILE",
    "IDS_CAP_WRITEERROR",
    "IDS_CAP_NODISKSPACE",
    "IDS_CAP_SETFILESIZE",
    "IDS_CAP_SAVEASPERCENT",
    "IDS_CAP_DRIVER_ERROR",
    "IDS_CAP_WAVE_OPEN_ERROR",
    "IDS_CAP_WAVE_ALLOC_ERROR",
    "IDS_CAP_WAVE_PREPARE_ERROR",
    "IDS_CAP_WAVE_ADD_ERROR",
    "IDS_CAP_WAVE_SIZE_ERROR",
    "IDS_CAP_VIDEO_OPEN_ERROR",
    "IDS_CAP_VIDEO_ALLOC_ERROR",
    "IDS_CAP_VIDEO_PREPARE_ERROR",
    "IDS_CAP_VIDEO_ADD_ERROR",
    "IDS_CAP_VIDEO_SIZE_ERROR",
    "IDS_CAP_FILE_OPEN_ERROR",
    "IDS_CAP_FILE_WRITE_ERROR",
    "IDS_CAP_RECORDING_ERROR",
    "IDS_CAP_RECORDING_ERROR2",
    "IDS_CAP_AVI_INIT_ERROR",
    "IDS_CAP_NO_FRAME_CAP_ERROR",
    "IDS_CAP_NO_PALETTE_WARN",
    "IDS_CAP_MCI_CONTROL_ERROR",
    "IDS_CAP_MCI_CANT_STEP_ERROR",
    "IDS_CAP_NO_AUDIO_CAP_ERROR",
    "IDS_CAP_AVI_DRAWDIB_ERROR",
    "IDS_CAP_COMPRESSOR_ERROR",
    "IDS_CAP_AUDIO_DROP_ERROR",
    "IDS_CAP_AUDIO_DROP_COMPERROR",
    "IDS_CAP_STAT_LIVE_MODE",
    "IDS_CAP_STAT_OVERLAY_MODE",
    "IDS_CAP_STAT_CAP_INIT",
    "IDS_CAP_STAT_CAP_FINI",
    "IDS_CAP_STAT_PALETTE_BUILD",
    "IDS_CAP_STAT_OPTPAL_BUILD",
    "IDS_CAP_STAT_I_FRAMES",
    "IDS_CAP_STAT_L_FRAMES",
    "IDS_CAP_STAT_CAP_L_FRAMES",
    "IDS_CAP_STAT_CAP_AUDIO",
    "IDS_CAP_STAT_VIDEOCURRENT",
    "IDS_CAP_STAT_VIDEOAUDIO",
    "IDS_CAP_STAT_VIDEOONLY",
    "IDS_CAP_STAT_FRAMESDROPPED",
    "JOYERR_NOERROR",
    "JOYERR_PARMS",
    "JOYERR_NOCANDO",
    "JOYERR_UNPLUGGED",
    "JOY_BUTTON1",
    "JOY_BUTTON2",
    "JOY_BUTTON3",
    "JOY_BUTTON4",
    "JOY_BUTTON1CHG",
    "JOY_BUTTON2CHG",
    "JOY_BUTTON3CHG",
    "JOY_BUTTON4CHG",
    "JOY_BUTTON5",
    "JOY_BUTTON6",
    "JOY_BUTTON7",
    "JOY_BUTTON8",
    "JOY_BUTTON9",
    "JOY_BUTTON10",
    "JOY_BUTTON11",
    "JOY_BUTTON12",
    "JOY_BUTTON13",
    "JOY_BUTTON14",
    "JOY_BUTTON15",
    "JOY_BUTTON16",
    "JOY_BUTTON17",
    "JOY_BUTTON18",
    "JOY_BUTTON19",
    "JOY_BUTTON20",
    "JOY_BUTTON21",
    "JOY_BUTTON22",
    "JOY_BUTTON23",
    "JOY_BUTTON24",
    "JOY_BUTTON25",
    "JOY_BUTTON26",
    "JOY_BUTTON27",
    "JOY_BUTTON28",
    "JOY_BUTTON29",
    "JOY_BUTTON30",
    "JOY_BUTTON31",
    "JOY_BUTTON32",
    "JOY_POVFORWARD",
    "JOY_POVRIGHT",
    "JOY_POVBACKWARD",
    "JOY_POVLEFT",
    "JOY_RETURNX",
    "JOY_RETURNY",
    "JOY_RETURNZ",
    "JOY_RETURNR",
    "JOY_RETURNU",
    "JOY_RETURNV",
    "JOY_RETURNPOV",
    "JOY_RETURNBUTTONS",
    "JOY_RETURNRAWDATA",
    "JOY_RETURNPOVCTS",
    "JOY_RETURNCENTERED",
    "JOY_USEDEADZONE",
    "JOY_CAL_READALWAYS",
    "JOY_CAL_READXYONLY",
    "JOY_CAL_READ3",
    "JOY_CAL_READ4",
    "JOY_CAL_READXONLY",
    "JOY_CAL_READYONLY",
    "JOY_CAL_READ5",
    "JOY_CAL_READ6",
    "JOY_CAL_READZONLY",
    "JOY_CAL_READRONLY",
    "JOY_CAL_READUONLY",
    "JOY_CAL_READVONLY",
    "JOYSTICKID1",
    "JOYSTICKID2",
    "JOYCAPS_HASZ",
    "JOYCAPS_HASR",
    "JOYCAPS_HASU",
    "JOYCAPS_HASV",
    "JOYCAPS_HASPOV",
    "JOYCAPS_POV4DIR",
    "JOYCAPS_POVCTS",
    "DRV_LOAD",
    "DRV_ENABLE",
    "DRV_OPEN",
    "DRV_CLOSE",
    "DRV_DISABLE",
    "DRV_FREE",
    "DRV_CONFIGURE",
    "DRV_QUERYCONFIGURE",
    "DRV_INSTALL",
    "DRV_REMOVE",
    "DRV_RESERVED",
    "DRV_USER",
    "DCB_NOSWITCH",
    "DCB_TYPEMASK",
    "DCB_NULL",
    "DCB_WINDOW",
    "DCB_TASK",
    "DCB_FUNCTION",
    "DCB_EVENT",
    "DRVM_INIT",
    "DRVM_EXIT",
    "DRVM_DISABLE",
    "DRVM_ENABLE",
    "DRVM_INIT_EX",
    "DRVM_USER",
    "DRVM_MAPPER_RECONFIGURE",
    "DRVM_MAPPER_PREFERRED_GET",
    "DRVM_MAPPER_CONSOLEVOICECOM_GET",
    "DRV_QUERYDEVNODE",
    "DRV_QUERYMAPPABLE",
    "DRV_QUERYMODULE",
    "DRV_PNPINSTALL",
    "DRV_QUERYDEVICEINTERFACE",
    "DRV_QUERYDEVICEINTERFACESIZE",
    "DRV_QUERYSTRINGID",
    "DRV_QUERYSTRINGIDSIZE",
    "DRV_QUERYIDFROMSTRINGID",
    "DRV_QUERYFUNCTIONINSTANCEID",
    "DRV_QUERYFUNCTIONINSTANCEIDSIZE",
    "DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY",
    "DRVM_IOCTL",
    "DRVM_ADD_THRU",
    "DRVM_REMOVE_THRU",
    "DRVM_IOCTL_LAST",
    "DRVM_IOCTL_CMD_USER",
    "DRVM_IOCTL_CMD_SYSTEM",
    "VADMAD_Device_ID",
    "WODM_INIT",
    "WIDM_INIT",
    "WODM_INIT_EX",
    "WIDM_INIT_EX",
    "WODM_GETNUMDEVS",
    "WODM_GETDEVCAPS",
    "WODM_OPEN",
    "WODM_CLOSE",
    "WODM_PREPARE",
    "WODM_UNPREPARE",
    "WODM_WRITE",
    "WODM_PAUSE",
    "WODM_RESTART",
    "WODM_RESET",
    "WODM_GETPOS",
    "WODM_GETPITCH",
    "WODM_SETPITCH",
    "WODM_GETVOLUME",
    "WODM_SETVOLUME",
    "WODM_GETPLAYBACKRATE",
    "WODM_SETPLAYBACKRATE",
    "WODM_BREAKLOOP",
    "WODM_PREFERRED",
    "WODM_BUSY",
    "WIDM_GETNUMDEVS",
    "WIDM_GETDEVCAPS",
    "WIDM_OPEN",
    "WIDM_CLOSE",
    "WIDM_PREPARE",
    "WIDM_UNPREPARE",
    "WIDM_ADDBUFFER",
    "WIDM_START",
    "WIDM_STOP",
    "WIDM_RESET",
    "WIDM_GETPOS",
    "WIDM_PREFERRED",
    "MIDI_IO_PACKED",
    "MIDI_IO_COOKED",
    "MODM_GETNUMDEVS",
    "MODM_GETDEVCAPS",
    "MODM_OPEN",
    "MODM_CLOSE",
    "MODM_PREPARE",
    "MODM_UNPREPARE",
    "MODM_DATA",
    "MODM_LONGDATA",
    "MODM_RESET",
    "MODM_GETVOLUME",
    "MODM_SETVOLUME",
    "MODM_CACHEPATCHES",
    "MODM_CACHEDRUMPATCHES",
    "MODM_STRMDATA",
    "MODM_GETPOS",
    "MODM_PAUSE",
    "MODM_RESTART",
    "MODM_STOP",
    "MODM_PROPERTIES",
    "MODM_PREFERRED",
    "MODM_RECONFIGURE",
    "MIDM_GETNUMDEVS",
    "MIDM_GETDEVCAPS",
    "MIDM_OPEN",
    "MIDM_CLOSE",
    "MIDM_PREPARE",
    "MIDM_UNPREPARE",
    "MIDM_ADDBUFFER",
    "MIDM_START",
    "MIDM_STOP",
    "MIDM_RESET",
    "AUXM_INIT",
    "AUXM_INIT_EX",
    "AUXDM_GETNUMDEVS",
    "AUXDM_GETDEVCAPS",
    "AUXDM_GETVOLUME",
    "AUXDM_SETVOLUME",
    "MXDM_INIT",
    "MXDM_INIT_EX",
    "MXDM_USER",
    "MXDM_BASE",
    "MXDM_GETNUMDEVS",
    "MXDM_GETDEVCAPS",
    "MXDM_OPEN",
    "MXDM_CLOSE",
    "MXDM_GETLINEINFO",
    "MXDM_GETLINECONTROLS",
    "MXDM_GETCONTROLDETAILS",
    "MXDM_SETCONTROLDETAILS",
    "TDD_KILLTIMEREVENT",
    "TDD_SETTIMEREVENT",
    "TDD_GETSYSTEMTIME",
    "TDD_GETDEVCAPS",
    "TDD_BEGINMINPERIOD",
    "TDD_ENDMINPERIOD",
    "JDD_GETNUMDEVS",
    "JDD_GETDEVCAPS",
    "JDD_GETPOS",
    "JDD_SETCALIBRATION",
    "JDD_CONFIGCHANGED",
    "JDD_GETPOSEX",
    "MCI_OPEN_DRIVER",
    "MCI_CLOSE_DRIVER",
    "MCI_FALSE",
    "MCI_TRUE",
    "MCI_FORMAT_MILLISECONDS_S",
    "MCI_FORMAT_HMS_S",
    "MCI_FORMAT_MSF_S",
    "MCI_FORMAT_FRAMES_S",
    "MCI_FORMAT_SMPTE_24_S",
    "MCI_FORMAT_SMPTE_25_S",
    "MCI_FORMAT_SMPTE_30_S",
    "MCI_FORMAT_SMPTE_30DROP_S",
    "MCI_FORMAT_BYTES_S",
    "MCI_FORMAT_SAMPLES_S",
    "MCI_FORMAT_TMSF_S",
    "MCI_VD_FORMAT_TRACK_S",
    "WAVE_FORMAT_PCM_S",
    "WAVE_MAPPER_S",
    "MCI_SEQ_MAPPER_S",
    "MCI_SEQ_FILE_S",
    "MCI_SEQ_MIDI_S",
    "MCI_SEQ_SMPTE_S",
    "MCI_SEQ_FORMAT_SONGPTR_S",
    "MCI_SEQ_NONE_S",
    "MIDIMAPPER_S",
    "MCI_MAX_DEVICE_TYPE_LENGTH",
    "MCI_RESOURCE_RETURNED",
    "MCI_COLONIZED3_RETURN",
    "MCI_COLONIZED4_RETURN",
    "MCI_INTEGER_RETURNED",
    "MCI_RESOURCE_DRIVER",
    "MCI_COMMAND_HEAD",
    "MCI_STRING",
    "MCI_INTEGER",
    "MCI_END_COMMAND",
    "MCI_RETURN",
    "MCI_FLAG",
    "MCI_END_COMMAND_LIST",
    "MCI_RECT",
    "MCI_CONSTANT",
    "MCI_END_CONSTANT",
    "MCI_HWND",
    "MCI_HPAL",
    "MCI_HDC",
    "MCI_INTEGER64",
    "TASKERR_NOTASKSUPPORT",
    "TASKERR_OUTOFMEMORY",
    "DRV_EXITSESSION",
    "DRV_POWER",
    "DRVCNF_CANCEL",
    "DRVCNF_OK",
    "DRVCNF_RESTART",
    "DRV_CANCEL",
    "DRV_OK",
    "DRV_RESTART",
    "DRV_MCI_LAST",
    "MMIOERR_BASE",
    "MMIOERR_FILENOTFOUND",
    "MMIOERR_OUTOFMEMORY",
    "MMIOERR_CANNOTOPEN",
    "MMIOERR_CANNOTCLOSE",
    "MMIOERR_CANNOTREAD",
    "MMIOERR_CANNOTWRITE",
    "MMIOERR_CANNOTSEEK",
    "MMIOERR_CANNOTEXPAND",
    "MMIOERR_CHUNKNOTFOUND",
    "MMIOERR_UNBUFFERED",
    "MMIOERR_PATHNOTFOUND",
    "MMIOERR_ACCESSDENIED",
    "MMIOERR_SHARINGVIOLATION",
    "MMIOERR_NETWORKERROR",
    "MMIOERR_TOOMANYOPENFILES",
    "MMIOERR_INVALIDFILE",
    "MMIO_RWMODE",
    "MMIO_SHAREMODE",
    "MMIO_CREATE",
    "MMIO_PARSE",
    "MMIO_DELETE",
    "MMIO_EXIST",
    "MMIO_ALLOCBUF",
    "MMIO_GETTEMP",
    "MMIO_DIRTY",
    "MMIO_READ",
    "MMIO_WRITE",
    "MMIO_READWRITE",
    "MMIO_COMPAT",
    "MMIO_EXCLUSIVE",
    "MMIO_DENYWRITE",
    "MMIO_DENYREAD",
    "MMIO_DENYNONE",
    "MMIO_FHOPEN",
    "MMIO_EMPTYBUF",
    "MMIO_TOUPPER",
    "MMIO_INSTALLPROC",
    "MMIO_GLOBALPROC",
    "MMIO_REMOVEPROC",
    "MMIO_UNICODEPROC",
    "MMIO_FINDPROC",
    "MMIO_FINDCHUNK",
    "MMIO_FINDRIFF",
    "MMIO_FINDLIST",
    "MMIO_CREATERIFF",
    "MMIO_CREATELIST",
    "MMIOM_READ",
    "MMIOM_WRITE",
    "MMIOM_SEEK",
    "MMIOM_OPEN",
    "MMIOM_CLOSE",
    "MMIOM_WRITEFLUSH",
    "MMIOM_RENAME",
    "MMIOM_USER",
    "SEEK_SET",
    "SEEK_CUR",
    "SEEK_END",
    "MMIO_DEFAULTBUFFER",
    "FACILITY_NS",
    "MCI_MCIAVI_PLAY_WINDOW",
    "MCI_MCIAVI_PLAY_FULLSCREEN",
    "MCI_MCIAVI_PLAY_FULLBY2",
    "MCI_AVI_STATUS_FRAMES_SKIPPED",
    "MCI_AVI_STATUS_LAST_PLAY_SPEED",
    "MCI_AVI_STATUS_AUDIO_BREAKS",
    "MCI_AVI_SETVIDEO_DRAW_PROCEDURE",
    "MCI_AVI_SETVIDEO_PALETTE_COLOR",
    "MCI_AVI_SETVIDEO_PALETTE_HALFTONE",
    "MCIERR_AVI_OLDAVIFORMAT",
    "MCIERR_AVI_NOTINTERLEAVED",
    "MCIERR_AVI_NODISPDIB",
    "MCIERR_AVI_CANTPLAYFULLSCREEN",
    "MCIERR_AVI_TOOBIGFORVGA",
    "MCIERR_AVI_NOCOMPRESSOR",
    "MCIERR_AVI_DISPLAYERROR",
    "MCIERR_AVI_AUDIOERROR",
    "MCIERR_AVI_BADPALETTE",
    "DLG_ACMFORMATCHOOSE_ID",
    "IDD_ACMFORMATCHOOSE_BTN_HELP",
    "IDD_ACMFORMATCHOOSE_CMB_CUSTOM",
    "IDD_ACMFORMATCHOOSE_CMB_FORMATTAG",
    "IDD_ACMFORMATCHOOSE_CMB_FORMAT",
    "IDD_ACMFORMATCHOOSE_BTN_SETNAME",
    "IDD_ACMFORMATCHOOSE_BTN_DELNAME",
    "DLG_ACMFILTERCHOOSE_ID",
    "IDD_ACMFILTERCHOOSE_BTN_HELP",
    "IDD_ACMFILTERCHOOSE_CMB_CUSTOM",
    "IDD_ACMFILTERCHOOSE_CMB_FILTERTAG",
    "IDD_ACMFILTERCHOOSE_CMB_FILTER",
    "IDD_ACMFILTERCHOOSE_BTN_SETNAME",
    "IDD_ACMFILTERCHOOSE_BTN_DELNAME",
    "FACILITY_NS_WIN32",
    "NS_S_CALLPENDING",
    "NS_S_CALLABORTED",
    "NS_S_STREAM_TRUNCATED",
    "NS_W_SERVER_BANDWIDTH_LIMIT",
    "NS_W_FILE_BANDWIDTH_LIMIT",
    "NS_E_NOCONNECTION",
    "NS_E_CANNOTCONNECT",
    "NS_E_CANNOTDESTROYTITLE",
    "NS_E_CANNOTRENAMETITLE",
    "NS_E_CANNOTOFFLINEDISK",
    "NS_E_CANNOTONLINEDISK",
    "NS_E_NOREGISTEREDWALKER",
    "NS_E_NOFUNNEL",
    "NS_E_NO_LOCALPLAY",
    "NS_E_NETWORK_BUSY",
    "NS_E_TOO_MANY_SESS",
    "NS_E_ALREADY_CONNECTED",
    "NS_E_INVALID_INDEX",
    "NS_E_PROTOCOL_MISMATCH",
    "NS_E_TIMEOUT",
    "NS_E_NET_WRITE",
    "NS_E_NET_READ",
    "NS_E_DISK_WRITE",
    "NS_E_DISK_READ",
    "NS_E_FILE_WRITE",
    "NS_E_FILE_READ",
    "NS_E_FILE_NOT_FOUND",
    "NS_E_FILE_EXISTS",
    "NS_E_INVALID_NAME",
    "NS_E_FILE_OPEN_FAILED",
    "NS_E_FILE_ALLOCATION_FAILED",
    "NS_E_FILE_INIT_FAILED",
    "NS_E_FILE_PLAY_FAILED",
    "NS_E_SET_DISK_UID_FAILED",
    "NS_E_INDUCED",
    "NS_E_CCLINK_DOWN",
    "NS_E_INTERNAL",
    "NS_E_BUSY",
    "NS_E_UNRECOGNIZED_STREAM_TYPE",
    "NS_E_NETWORK_SERVICE_FAILURE",
    "NS_E_NETWORK_RESOURCE_FAILURE",
    "NS_E_CONNECTION_FAILURE",
    "NS_E_SHUTDOWN",
    "NS_E_INVALID_REQUEST",
    "NS_E_INSUFFICIENT_BANDWIDTH",
    "NS_E_NOT_REBUILDING",
    "NS_E_LATE_OPERATION",
    "NS_E_INVALID_DATA",
    "NS_E_FILE_BANDWIDTH_LIMIT",
    "NS_E_OPEN_FILE_LIMIT",
    "NS_E_BAD_CONTROL_DATA",
    "NS_E_NO_STREAM",
    "NS_E_STREAM_END",
    "NS_E_SERVER_NOT_FOUND",
    "NS_E_DUPLICATE_NAME",
    "NS_E_DUPLICATE_ADDRESS",
    "NS_E_BAD_MULTICAST_ADDRESS",
    "NS_E_BAD_ADAPTER_ADDRESS",
    "NS_E_BAD_DELIVERY_MODE",
    "NS_E_INVALID_CHANNEL",
    "NS_E_INVALID_STREAM",
    "NS_E_INVALID_ARCHIVE",
    "NS_E_NOTITLES",
    "NS_E_INVALID_CLIENT",
    "NS_E_INVALID_BLACKHOLE_ADDRESS",
    "NS_E_INCOMPATIBLE_FORMAT",
    "NS_E_INVALID_KEY",
    "NS_E_INVALID_PORT",
    "NS_E_INVALID_TTL",
    "NS_E_STRIDE_REFUSED",
    "NS_E_MMSAUTOSERVER_CANTFINDWALKER",
    "NS_E_MAX_BITRATE",
    "NS_E_LOGFILEPERIOD",
    "NS_E_MAX_CLIENTS",
    "NS_E_LOG_FILE_SIZE",
    "NS_E_MAX_FILERATE",
    "NS_E_WALKER_UNKNOWN",
    "NS_E_WALKER_SERVER",
    "NS_E_WALKER_USAGE",
    "NS_I_TIGER_START",
    "NS_E_TIGER_FAIL",
    "NS_I_CUB_START",
    "NS_I_CUB_RUNNING",
    "NS_E_CUB_FAIL",
    "NS_I_DISK_START",
    "NS_E_DISK_FAIL",
    "NS_I_DISK_REBUILD_STARTED",
    "NS_I_DISK_REBUILD_FINISHED",
    "NS_I_DISK_REBUILD_ABORTED",
    "NS_I_LIMIT_FUNNELS",
    "NS_I_START_DISK",
    "NS_I_STOP_DISK",
    "NS_I_STOP_CUB",
    "NS_I_KILL_USERSESSION",
    "NS_I_KILL_CONNECTION",
    "NS_I_REBUILD_DISK",
    "NS_W_UNKNOWN_EVENT",
    "NS_E_MAX_FUNNELS_ALERT",
    "NS_E_ALLOCATE_FILE_FAIL",
    "NS_E_PAGING_ERROR",
    "NS_E_BAD_BLOCK0_VERSION",
    "NS_E_BAD_DISK_UID",
    "NS_E_BAD_FSMAJOR_VERSION",
    "NS_E_BAD_STAMPNUMBER",
    "NS_E_PARTIALLY_REBUILT_DISK",
    "NS_E_ENACTPLAN_GIVEUP",
    "MCMADM_I_NO_EVENTS",
    "MCMADM_E_REGKEY_NOT_FOUND",
    "NS_E_NO_FORMATS",
    "NS_E_NO_REFERENCES",
    "NS_E_WAVE_OPEN",
    "NS_I_LOGGING_FAILED",
    "NS_E_CANNOTCONNECTEVENTS",
    "NS_I_LIMIT_BANDWIDTH",
    "NS_E_NO_DEVICE",
    "NS_E_NO_SPECIFIED_DEVICE",
    "NS_E_NOTHING_TO_DO",
    "NS_E_NO_MULTICAST",
    "NS_E_MONITOR_GIVEUP",
    "NS_E_REMIRRORED_DISK",
    "NS_E_INSUFFICIENT_DATA",
    "NS_E_ASSERT",
    "NS_E_BAD_ADAPTER_NAME",
    "NS_E_NOT_LICENSED",
    "NS_E_NO_SERVER_CONTACT",
    "NS_E_TOO_MANY_TITLES",
    "NS_E_TITLE_SIZE_EXCEEDED",
    "NS_E_UDP_DISABLED",
    "NS_E_TCP_DISABLED",
    "NS_E_HTTP_DISABLED",
    "NS_E_LICENSE_EXPIRED",
    "NS_E_TITLE_BITRATE",
    "NS_E_EMPTY_PROGRAM_NAME",
    "NS_E_MISSING_CHANNEL",
    "NS_E_NO_CHANNELS",
    "NS_E_INVALID_INDEX2",
    "NS_E_CUB_FAIL_LINK",
    "NS_I_CUB_UNFAIL_LINK",
    "NS_E_BAD_CUB_UID",
    "NS_I_RESTRIPE_START",
    "NS_I_RESTRIPE_DONE",
    "NS_E_GLITCH_MODE",
    "NS_I_RESTRIPE_DISK_OUT",
    "NS_I_RESTRIPE_CUB_OUT",
    "NS_I_DISK_STOP",
    "NS_I_CATATONIC_FAILURE",
    "NS_I_CATATONIC_AUTO_UNFAIL",
    "NS_E_NO_MEDIA_PROTOCOL",
    "NS_E_INVALID_INPUT_FORMAT",
    "NS_E_MSAUDIO_NOT_INSTALLED",
    "NS_E_UNEXPECTED_MSAUDIO_ERROR",
    "NS_E_INVALID_OUTPUT_FORMAT",
    "NS_E_NOT_CONFIGURED",
    "NS_E_PROTECTED_CONTENT",
    "NS_E_LICENSE_REQUIRED",
    "NS_E_TAMPERED_CONTENT",
    "NS_E_LICENSE_OUTOFDATE",
    "NS_E_LICENSE_INCORRECT_RIGHTS",
    "NS_E_AUDIO_CODEC_NOT_INSTALLED",
    "NS_E_AUDIO_CODEC_ERROR",
    "NS_E_VIDEO_CODEC_NOT_INSTALLED",
    "NS_E_VIDEO_CODEC_ERROR",
    "NS_E_INVALIDPROFILE",
    "NS_E_INCOMPATIBLE_VERSION",
    "NS_S_REBUFFERING",
    "NS_S_DEGRADING_QUALITY",
    "NS_E_OFFLINE_MODE",
    "NS_E_NOT_CONNECTED",
    "NS_E_TOO_MUCH_DATA",
    "NS_E_UNSUPPORTED_PROPERTY",
    "NS_E_8BIT_WAVE_UNSUPPORTED",
    "NS_E_NO_MORE_SAMPLES",
    "NS_E_INVALID_SAMPLING_RATE",
    "NS_E_MAX_PACKET_SIZE_TOO_SMALL",
    "NS_E_LATE_PACKET",
    "NS_E_DUPLICATE_PACKET",
    "NS_E_SDK_BUFFERTOOSMALL",
    "NS_E_INVALID_NUM_PASSES",
    "NS_E_ATTRIBUTE_READ_ONLY",
    "NS_E_ATTRIBUTE_NOT_ALLOWED",
    "NS_E_INVALID_EDL",
    "NS_E_DATA_UNIT_EXTENSION_TOO_LARGE",
    "NS_E_CODEC_DMO_ERROR",
    "NS_S_TRANSCRYPTOR_EOF",
    "NS_E_FEATURE_DISABLED_BY_GROUP_POLICY",
    "NS_E_FEATURE_DISABLED_IN_SKU",
    "NS_E_WMDRM_DEPRECATED",
    "NS_E_NO_CD",
    "NS_E_CANT_READ_DIGITAL",
    "NS_E_DEVICE_DISCONNECTED",
    "NS_E_DEVICE_NOT_SUPPORT_FORMAT",
    "NS_E_SLOW_READ_DIGITAL",
    "NS_E_MIXER_INVALID_LINE",
    "NS_E_MIXER_INVALID_CONTROL",
    "NS_E_MIXER_INVALID_VALUE",
    "NS_E_MIXER_UNKNOWN_MMRESULT",
    "NS_E_USER_STOP",
    "NS_E_MP3_FORMAT_NOT_FOUND",
    "NS_E_CD_READ_ERROR_NO_CORRECTION",
    "NS_E_CD_READ_ERROR",
    "NS_E_CD_SLOW_COPY",
    "NS_E_CD_COPYTO_CD",
    "NS_E_MIXER_NODRIVER",
    "NS_E_REDBOOK_ENABLED_WHILE_COPYING",
    "NS_E_CD_REFRESH",
    "NS_E_CD_DRIVER_PROBLEM",
    "NS_E_WONT_DO_DIGITAL",
    "NS_E_WMPXML_NOERROR",
    "NS_E_WMPXML_ENDOFDATA",
    "NS_E_WMPXML_PARSEERROR",
    "NS_E_WMPXML_ATTRIBUTENOTFOUND",
    "NS_E_WMPXML_PINOTFOUND",
    "NS_E_WMPXML_EMPTYDOC",
    "NS_E_WMP_PATH_ALREADY_IN_LIBRARY",
    "NS_E_WMP_FILESCANALREADYSTARTED",
    "NS_E_WMP_HME_INVALIDOBJECTID",
    "NS_E_WMP_MF_CODE_EXPIRED",
    "NS_E_WMP_HME_NOTSEARCHABLEFORITEMS",
    "NS_E_WMP_HME_STALEREQUEST",
    "NS_E_WMP_ADDTOLIBRARY_FAILED",
    "NS_E_WMP_WINDOWSAPIFAILURE",
    "NS_E_WMP_RECORDING_NOT_ALLOWED",
    "NS_E_DEVICE_NOT_READY",
    "NS_E_DAMAGED_FILE",
    "NS_E_MPDB_GENERIC",
    "NS_E_FILE_FAILED_CHECKS",
    "NS_E_MEDIA_LIBRARY_FAILED",
    "NS_E_SHARING_VIOLATION",
    "NS_E_NO_ERROR_STRING_FOUND",
    "NS_E_WMPOCX_NO_REMOTE_CORE",
    "NS_E_WMPOCX_NO_ACTIVE_CORE",
    "NS_E_WMPOCX_NOT_RUNNING_REMOTELY",
    "NS_E_WMPOCX_NO_REMOTE_WINDOW",
    "NS_E_WMPOCX_ERRORMANAGERNOTAVAILABLE",
    "NS_E_PLUGIN_NOTSHUTDOWN",
    "NS_E_WMP_CANNOT_FIND_FOLDER",
    "NS_E_WMP_STREAMING_RECORDING_NOT_ALLOWED",
    "NS_E_WMP_PLUGINDLL_NOTFOUND",
    "NS_E_NEED_TO_ASK_USER",
    "NS_E_WMPOCX_PLAYER_NOT_DOCKED",
    "NS_E_WMP_EXTERNAL_NOTREADY",
    "NS_E_WMP_MLS_STALE_DATA",
    "NS_E_WMP_UI_SUBCONTROLSNOTSUPPORTED",
    "NS_E_WMP_UI_VERSIONMISMATCH",
    "NS_E_WMP_UI_NOTATHEMEFILE",
    "NS_E_WMP_UI_SUBELEMENTNOTFOUND",
    "NS_E_WMP_UI_VERSIONPARSE",
    "NS_E_WMP_UI_VIEWIDNOTFOUND",
    "NS_E_WMP_UI_PASSTHROUGH",
    "NS_E_WMP_UI_OBJECTNOTFOUND",
    "NS_E_WMP_UI_SECONDHANDLER",
    "NS_E_WMP_UI_NOSKININZIP",
    "NS_S_WMP_UI_VERSIONMISMATCH",
    "NS_S_WMP_EXCEPTION",
    "NS_E_WMP_URLDOWNLOADFAILED",
    "NS_E_WMPOCX_UNABLE_TO_LOAD_SKIN",
    "NS_E_WMP_INVALID_SKIN",
    "NS_E_WMP_SENDMAILFAILED",
    "NS_E_WMP_LOCKEDINSKINMODE",
    "NS_E_WMP_FAILED_TO_SAVE_FILE",
    "NS_E_WMP_SAVEAS_READONLY",
    "NS_E_WMP_FAILED_TO_SAVE_PLAYLIST",
    "NS_E_WMP_FAILED_TO_OPEN_WMD",
    "NS_E_WMP_CANT_PLAY_PROTECTED",
    "NS_E_SHARING_STATE_OUT_OF_SYNC",
    "NS_E_WMPOCX_REMOTE_PLAYER_ALREADY_RUNNING",
    "NS_E_WMP_RBC_JPGMAPPINGIMAGE",
    "NS_E_WMP_JPGTRANSPARENCY",
    "NS_E_WMP_INVALID_MAX_VAL",
    "NS_E_WMP_INVALID_MIN_VAL",
    "NS_E_WMP_CS_JPGPOSITIONIMAGE",
    "NS_E_WMP_CS_NOTEVENLYDIVISIBLE",
    "NS_E_WMPZIP_NOTAZIPFILE",
    "NS_E_WMPZIP_CORRUPT",
    "NS_E_WMPZIP_FILENOTFOUND",
    "NS_E_WMP_IMAGE_FILETYPE_UNSUPPORTED",
    "NS_E_WMP_IMAGE_INVALID_FORMAT",
    "NS_E_WMP_GIF_UNEXPECTED_ENDOFFILE",
    "NS_E_WMP_GIF_INVALID_FORMAT",
    "NS_E_WMP_GIF_BAD_VERSION_NUMBER",
    "NS_E_WMP_GIF_NO_IMAGE_IN_FILE",
    "NS_E_WMP_PNG_INVALIDFORMAT",
    "NS_E_WMP_PNG_UNSUPPORTED_BITDEPTH",
    "NS_E_WMP_PNG_UNSUPPORTED_COMPRESSION",
    "NS_E_WMP_PNG_UNSUPPORTED_FILTER",
    "NS_E_WMP_PNG_UNSUPPORTED_INTERLACE",
    "NS_E_WMP_PNG_UNSUPPORTED_BAD_CRC",
    "NS_E_WMP_BMP_INVALID_BITMASK",
    "NS_E_WMP_BMP_TOPDOWN_DIB_UNSUPPORTED",
    "NS_E_WMP_BMP_BITMAP_NOT_CREATED",
    "NS_E_WMP_BMP_COMPRESSION_UNSUPPORTED",
    "NS_E_WMP_BMP_INVALID_FORMAT",
    "NS_E_WMP_JPG_JERR_ARITHCODING_NOTIMPL",
    "NS_E_WMP_JPG_INVALID_FORMAT",
    "NS_E_WMP_JPG_BAD_DCTSIZE",
    "NS_E_WMP_JPG_BAD_VERSION_NUMBER",
    "NS_E_WMP_JPG_BAD_PRECISION",
    "NS_E_WMP_JPG_CCIR601_NOTIMPL",
    "NS_E_WMP_JPG_NO_IMAGE_IN_FILE",
    "NS_E_WMP_JPG_READ_ERROR",
    "NS_E_WMP_JPG_FRACT_SAMPLE_NOTIMPL",
    "NS_E_WMP_JPG_IMAGE_TOO_BIG",
    "NS_E_WMP_JPG_UNEXPECTED_ENDOFFILE",
    "NS_E_WMP_JPG_SOF_UNSUPPORTED",
    "NS_E_WMP_JPG_UNKNOWN_MARKER",
    "NS_S_WMP_LOADED_GIF_IMAGE",
    "NS_S_WMP_LOADED_PNG_IMAGE",
    "NS_S_WMP_LOADED_BMP_IMAGE",
    "NS_S_WMP_LOADED_JPG_IMAGE",
    "NS_E_WMP_FAILED_TO_OPEN_IMAGE",
    "NS_E_WMP_DAI_SONGTOOSHORT",
    "NS_E_WMG_RATEUNAVAILABLE",
    "NS_E_WMG_PLUGINUNAVAILABLE",
    "NS_E_WMG_CANNOTQUEUE",
    "NS_E_WMG_PREROLLLICENSEACQUISITIONNOTALLOWED",
    "NS_E_WMG_UNEXPECTEDPREROLLSTATUS",
    "NS_S_WMG_FORCE_DROP_FRAME",
    "NS_E_WMG_INVALID_COPP_CERTIFICATE",
    "NS_E_WMG_COPP_SECURITY_INVALID",
    "NS_E_WMG_COPP_UNSUPPORTED",
    "NS_E_WMG_INVALIDSTATE",
    "NS_E_WMG_SINKALREADYEXISTS",
    "NS_E_WMG_NOSDKINTERFACE",
    "NS_E_WMG_NOTALLOUTPUTSRENDERED",
    "NS_E_WMG_FILETRANSFERNOTALLOWED",
    "NS_E_WMR_UNSUPPORTEDSTREAM",
    "NS_E_WMR_PINNOTFOUND",
    "NS_E_WMR_WAITINGONFORMATSWITCH",
    "NS_E_WMR_NOSOURCEFILTER",
    "NS_E_WMR_PINTYPENOMATCH",
    "NS_E_WMR_NOCALLBACKAVAILABLE",
    "NS_S_WMR_ALREADYRENDERED",
    "NS_S_WMR_PINTYPEPARTIALMATCH",
    "NS_S_WMR_PINTYPEFULLMATCH",
    "NS_E_WMR_SAMPLEPROPERTYNOTSET",
    "NS_E_WMR_CANNOT_RENDER_BINARY_STREAM",
    "NS_E_WMG_LICENSE_TAMPERED",
    "NS_E_WMR_WILLNOT_RENDER_BINARY_STREAM",
    "NS_S_WMG_ADVISE_DROP_FRAME",
    "NS_S_WMG_ADVISE_DROP_TO_KEYFRAME",
    "NS_E_WMX_UNRECOGNIZED_PLAYLIST_FORMAT",
    "NS_E_ASX_INVALIDFORMAT",
    "NS_E_ASX_INVALIDVERSION",
    "NS_E_ASX_INVALID_REPEAT_BLOCK",
    "NS_E_ASX_NOTHING_TO_WRITE",
    "NS_E_URLLIST_INVALIDFORMAT",
    "NS_E_WMX_ATTRIBUTE_DOES_NOT_EXIST",
    "NS_E_WMX_ATTRIBUTE_ALREADY_EXISTS",
    "NS_E_WMX_ATTRIBUTE_UNRETRIEVABLE",
    "NS_E_WMX_ITEM_DOES_NOT_EXIST",
    "NS_E_WMX_ITEM_TYPE_ILLEGAL",
    "NS_E_WMX_ITEM_UNSETTABLE",
    "NS_E_WMX_PLAYLIST_EMPTY",
    "NS_E_MLS_SMARTPLAYLIST_FILTER_NOT_REGISTERED",
    "NS_E_WMX_INVALID_FORMAT_OVER_NESTING",
    "NS_E_WMPCORE_NOSOURCEURLSTRING",
    "NS_E_WMPCORE_COCREATEFAILEDFORGITOBJECT",
    "NS_E_WMPCORE_FAILEDTOGETMARSHALLEDEVENTHANDLERINTERFACE",
    "NS_E_WMPCORE_BUFFERTOOSMALL",
    "NS_E_WMPCORE_UNAVAILABLE",
    "NS_E_WMPCORE_INVALIDPLAYLISTMODE",
    "NS_E_WMPCORE_ITEMNOTINPLAYLIST",
    "NS_E_WMPCORE_PLAYLISTEMPTY",
    "NS_E_WMPCORE_NOBROWSER",
    "NS_E_WMPCORE_UNRECOGNIZED_MEDIA_URL",
    "NS_E_WMPCORE_GRAPH_NOT_IN_LIST",
    "NS_E_WMPCORE_PLAYLIST_EMPTY_OR_SINGLE_MEDIA",
    "NS_E_WMPCORE_ERRORSINKNOTREGISTERED",
    "NS_E_WMPCORE_ERRORMANAGERNOTAVAILABLE",
    "NS_E_WMPCORE_WEBHELPFAILED",
    "NS_E_WMPCORE_MEDIA_ERROR_RESUME_FAILED",
    "NS_E_WMPCORE_NO_REF_IN_ENTRY",
    "NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_NAME_EMPTY",
    "NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_NAME_ILLEGAL",
    "NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_VALUE_EMPTY",
    "NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_VALUE_ILLEGAL",
    "NS_E_WMPCORE_WMX_LIST_ITEM_ATTRIBUTE_NAME_EMPTY",
    "NS_E_WMPCORE_WMX_LIST_ITEM_ATTRIBUTE_NAME_ILLEGAL",
    "NS_E_WMPCORE_WMX_LIST_ITEM_ATTRIBUTE_VALUE_EMPTY",
    "NS_E_WMPCORE_LIST_ENTRY_NO_REF",
    "NS_E_WMPCORE_MISNAMED_FILE",
    "NS_E_WMPCORE_CODEC_NOT_TRUSTED",
    "NS_E_WMPCORE_CODEC_NOT_FOUND",
    "NS_E_WMPCORE_CODEC_DOWNLOAD_NOT_ALLOWED",
    "NS_E_WMPCORE_ERROR_DOWNLOADING_PLAYLIST",
    "NS_E_WMPCORE_FAILED_TO_BUILD_PLAYLIST",
    "NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_NONE",
    "NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_EXHAUSTED",
    "NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_NAME_NOT_FOUND",
    "NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_MORPH_FAILED",
    "NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_INIT_FAILED",
    "NS_E_WMPCORE_MEDIA_ALTERNATE_REF_EMPTY",
    "NS_E_WMPCORE_PLAYLIST_NO_EVENT_NAME",
    "NS_E_WMPCORE_PLAYLIST_EVENT_ATTRIBUTE_ABSENT",
    "NS_E_WMPCORE_PLAYLIST_EVENT_EMPTY",
    "NS_E_WMPCORE_PLAYLIST_STACK_EMPTY",
    "NS_E_WMPCORE_CURRENT_MEDIA_NOT_ACTIVE",
    "NS_E_WMPCORE_USER_CANCEL",
    "NS_E_WMPCORE_PLAYLIST_REPEAT_EMPTY",
    "NS_E_WMPCORE_PLAYLIST_REPEAT_START_MEDIA_NONE",
    "NS_E_WMPCORE_PLAYLIST_REPEAT_END_MEDIA_NONE",
    "NS_E_WMPCORE_INVALID_PLAYLIST_URL",
    "NS_E_WMPCORE_MISMATCHED_RUNTIME",
    "NS_E_WMPCORE_PLAYLIST_IMPORT_FAILED_NO_ITEMS",
    "NS_E_WMPCORE_VIDEO_TRANSFORM_FILTER_INSERTION",
    "NS_E_WMPCORE_MEDIA_UNAVAILABLE",
    "NS_E_WMPCORE_WMX_ENTRYREF_NO_REF",
    "NS_E_WMPCORE_NO_PLAYABLE_MEDIA_IN_PLAYLIST",
    "NS_E_WMPCORE_PLAYLIST_EMPTY_NESTED_PLAYLIST_SKIPPED_ITEMS",
    "NS_E_WMPCORE_BUSY",
    "NS_E_WMPCORE_MEDIA_CHILD_PLAYLIST_UNAVAILABLE",
    "NS_E_WMPCORE_MEDIA_NO_CHILD_PLAYLIST",
    "NS_E_WMPCORE_FILE_NOT_FOUND",
    "NS_E_WMPCORE_TEMP_FILE_NOT_FOUND",
    "NS_E_WMDM_REVOKED",
    "NS_E_DDRAW_GENERIC",
    "NS_E_DISPLAY_MODE_CHANGE_FAILED",
    "NS_E_PLAYLIST_CONTAINS_ERRORS",
    "NS_E_CHANGING_PROXY_NAME",
    "NS_E_CHANGING_PROXY_PORT",
    "NS_E_CHANGING_PROXY_EXCEPTIONLIST",
    "NS_E_CHANGING_PROXYBYPASS",
    "NS_E_CHANGING_PROXY_PROTOCOL_NOT_FOUND",
    "NS_E_GRAPH_NOAUDIOLANGUAGE",
    "NS_E_GRAPH_NOAUDIOLANGUAGESELECTED",
    "NS_E_CORECD_NOTAMEDIACD",
    "NS_E_WMPCORE_MEDIA_URL_TOO_LONG",
    "NS_E_WMPFLASH_CANT_FIND_COM_SERVER",
    "NS_E_WMPFLASH_INCOMPATIBLEVERSION",
    "NS_E_WMPOCXGRAPH_IE_DISALLOWS_ACTIVEX_CONTROLS",
    "NS_E_NEED_CORE_REFERENCE",
    "NS_E_MEDIACD_READ_ERROR",
    "NS_E_IE_DISALLOWS_ACTIVEX_CONTROLS",
    "NS_E_FLASH_PLAYBACK_NOT_ALLOWED",
    "NS_E_UNABLE_TO_CREATE_RIP_LOCATION",
    "NS_E_WMPCORE_SOME_CODECS_MISSING",
    "NS_E_WMP_RIP_FAILED",
    "NS_E_WMP_FAILED_TO_RIP_TRACK",
    "NS_E_WMP_ERASE_FAILED",
    "NS_E_WMP_FORMAT_FAILED",
    "NS_E_WMP_CANNOT_BURN_NON_LOCAL_FILE",
    "NS_E_WMP_FILE_TYPE_CANNOT_BURN_TO_AUDIO_CD",
    "NS_E_WMP_FILE_DOES_NOT_FIT_ON_CD",
    "NS_E_WMP_FILE_NO_DURATION",
    "NS_E_PDA_FAILED_TO_BURN",
    "NS_S_NEED_TO_BUY_BURN_RIGHTS",
    "NS_E_FAILED_DOWNLOAD_ABORT_BURN",
    "NS_E_WMPCORE_DEVICE_DRIVERS_MISSING",
    "NS_S_WMPCORE_PLAYLISTCLEARABORT",
    "NS_S_WMPCORE_PLAYLISTREMOVEITEMABORT",
    "NS_S_WMPCORE_PLAYLIST_CREATION_PENDING",
    "NS_S_WMPCORE_MEDIA_VALIDATION_PENDING",
    "NS_S_WMPCORE_PLAYLIST_REPEAT_SECONDARY_SEGMENTS_IGNORED",
    "NS_S_WMPCORE_COMMAND_NOT_AVAILABLE",
    "NS_S_WMPCORE_PLAYLIST_NAME_AUTO_GENERATED",
    "NS_S_WMPCORE_PLAYLIST_IMPORT_MISSING_ITEMS",
    "NS_S_WMPCORE_PLAYLIST_COLLAPSED_TO_SINGLE_MEDIA",
    "NS_S_WMPCORE_MEDIA_CHILD_PLAYLIST_OPEN_PENDING",
    "NS_S_WMPCORE_MORE_NODES_AVAIABLE",
    "NS_E_WMPIM_USEROFFLINE",
    "NS_E_WMPIM_USERCANCELED",
    "NS_E_WMPIM_DIALUPFAILED",
    "NS_E_WINSOCK_ERROR_STRING",
    "NS_E_WMPBR_NOLISTENER",
    "NS_E_WMPBR_BACKUPCANCEL",
    "NS_E_WMPBR_RESTORECANCEL",
    "NS_E_WMPBR_ERRORWITHURL",
    "NS_E_WMPBR_NAMECOLLISION",
    "NS_S_WMPBR_SUCCESS",
    "NS_S_WMPBR_PARTIALSUCCESS",
    "NS_E_WMPBR_DRIVE_INVALID",
    "NS_E_WMPBR_BACKUPRESTOREFAILED",
    "NS_S_WMPEFFECT_TRANSPARENT",
    "NS_S_WMPEFFECT_OPAQUE",
    "NS_S_OPERATION_PENDING",
    "NS_E_WMP_CONVERT_FILE_FAILED",
    "NS_E_WMP_CONVERT_NO_RIGHTS_ERRORURL",
    "NS_E_WMP_CONVERT_NO_RIGHTS_NOERRORURL",
    "NS_E_WMP_CONVERT_FILE_CORRUPT",
    "NS_E_WMP_CONVERT_PLUGIN_UNAVAILABLE_ERRORURL",
    "NS_E_WMP_CONVERT_PLUGIN_UNAVAILABLE_NOERRORURL",
    "NS_E_WMP_CONVERT_PLUGIN_UNKNOWN_FILE_OWNER",
    "NS_E_DVD_DISC_COPY_PROTECT_OUTPUT_NS",
    "NS_E_DVD_DISC_COPY_PROTECT_OUTPUT_FAILED",
    "NS_E_DVD_NO_SUBPICTURE_STREAM",
    "NS_E_DVD_COPY_PROTECT",
    "NS_E_DVD_AUTHORING_PROBLEM",
    "NS_E_DVD_INVALID_DISC_REGION",
    "NS_E_DVD_COMPATIBLE_VIDEO_CARD",
    "NS_E_DVD_MACROVISION",
    "NS_E_DVD_SYSTEM_DECODER_REGION",
    "NS_E_DVD_DISC_DECODER_REGION",
    "NS_E_DVD_NO_VIDEO_STREAM",
    "NS_E_DVD_NO_AUDIO_STREAM",
    "NS_E_DVD_GRAPH_BUILDING",
    "NS_E_DVD_NO_DECODER",
    "NS_E_DVD_PARENTAL",
    "NS_E_DVD_CANNOT_JUMP",
    "NS_E_DVD_DEVICE_CONTENTION",
    "NS_E_DVD_NO_VIDEO_MEMORY",
    "NS_E_DVD_CANNOT_COPY_PROTECTED",
    "NS_E_DVD_REQUIRED_PROPERTY_NOT_SET",
    "NS_E_DVD_INVALID_TITLE_CHAPTER",
    "NS_E_NO_CD_BURNER",
    "NS_E_DEVICE_IS_NOT_READY",
    "NS_E_PDA_UNSUPPORTED_FORMAT",
    "NS_E_NO_PDA",
    "NS_E_PDA_UNSPECIFIED_ERROR",
    "NS_E_MEMSTORAGE_BAD_DATA",
    "NS_E_PDA_FAIL_SELECT_DEVICE",
    "NS_E_PDA_FAIL_READ_WAVE_FILE",
    "NS_E_IMAPI_LOSSOFSTREAMING",
    "NS_E_PDA_DEVICE_FULL",
    "NS_E_FAIL_LAUNCH_ROXIO_PLUGIN",
    "NS_E_PDA_DEVICE_FULL_IN_SESSION",
    "NS_E_IMAPI_MEDIUM_INVALIDTYPE",
    "NS_E_PDA_MANUALDEVICE",
    "NS_E_PDA_PARTNERSHIPNOTEXIST",
    "NS_E_PDA_CANNOT_CREATE_ADDITIONAL_SYNC_RELATIONSHIP",
    "NS_E_PDA_NO_TRANSCODE_OF_DRM",
    "NS_E_PDA_TRANSCODECACHEFULL",
    "NS_E_PDA_TOO_MANY_FILE_COLLISIONS",
    "NS_E_PDA_CANNOT_TRANSCODE",
    "NS_E_PDA_TOO_MANY_FILES_IN_DIRECTORY",
    "NS_E_PROCESSINGSHOWSYNCWIZARD",
    "NS_E_PDA_TRANSCODE_NOT_PERMITTED",
    "NS_E_PDA_INITIALIZINGDEVICES",
    "NS_E_PDA_OBSOLETE_SP",
    "NS_E_PDA_TITLE_COLLISION",
    "NS_E_PDA_DEVICESUPPORTDISABLED",
    "NS_E_PDA_NO_LONGER_AVAILABLE",
    "NS_E_PDA_ENCODER_NOT_RESPONDING",
    "NS_E_PDA_CANNOT_SYNC_FROM_LOCATION",
    "NS_E_WMP_PROTOCOL_PROBLEM",
    "NS_E_WMP_NO_DISK_SPACE",
    "NS_E_WMP_LOGON_FAILURE",
    "NS_E_WMP_CANNOT_FIND_FILE",
    "NS_E_WMP_SERVER_INACCESSIBLE",
    "NS_E_WMP_UNSUPPORTED_FORMAT",
    "NS_E_WMP_DSHOW_UNSUPPORTED_FORMAT",
    "NS_E_WMP_PLAYLIST_EXISTS",
    "NS_E_WMP_NONMEDIA_FILES",
    "NS_E_WMP_INVALID_ASX",
    "NS_E_WMP_ALREADY_IN_USE",
    "NS_E_WMP_IMAPI_FAILURE",
    "NS_E_WMP_WMDM_FAILURE",
    "NS_E_WMP_CODEC_NEEDED_WITH_4CC",
    "NS_E_WMP_CODEC_NEEDED_WITH_FORMATTAG",
    "NS_E_WMP_MSSAP_NOT_AVAILABLE",
    "NS_E_WMP_WMDM_INTERFACEDEAD",
    "NS_E_WMP_WMDM_NOTCERTIFIED",
    "NS_E_WMP_WMDM_LICENSE_NOTEXIST",
    "NS_E_WMP_WMDM_LICENSE_EXPIRED",
    "NS_E_WMP_WMDM_BUSY",
    "NS_E_WMP_WMDM_NORIGHTS",
    "NS_E_WMP_WMDM_INCORRECT_RIGHTS",
    "NS_E_WMP_IMAPI_GENERIC",
    "NS_E_WMP_IMAPI_DEVICE_NOTPRESENT",
    "NS_E_WMP_IMAPI_DEVICE_BUSY",
    "NS_E_WMP_IMAPI_LOSS_OF_STREAMING",
    "NS_E_WMP_SERVER_UNAVAILABLE",
    "NS_E_WMP_FILE_OPEN_FAILED",
    "NS_E_WMP_VERIFY_ONLINE",
    "NS_E_WMP_SERVER_NOT_RESPONDING",
    "NS_E_WMP_DRM_CORRUPT_BACKUP",
    "NS_E_WMP_DRM_LICENSE_SERVER_UNAVAILABLE",
    "NS_E_WMP_NETWORK_FIREWALL",
    "NS_E_WMP_NO_REMOVABLE_MEDIA",
    "NS_E_WMP_PROXY_CONNECT_TIMEOUT",
    "NS_E_WMP_NEED_UPGRADE",
    "NS_E_WMP_AUDIO_HW_PROBLEM",
    "NS_E_WMP_INVALID_PROTOCOL",
    "NS_E_WMP_INVALID_LIBRARY_ADD",
    "NS_E_WMP_MMS_NOT_SUPPORTED",
    "NS_E_WMP_NO_PROTOCOLS_SELECTED",
    "NS_E_WMP_GOFULLSCREEN_FAILED",
    "NS_E_WMP_NETWORK_ERROR",
    "NS_E_WMP_CONNECT_TIMEOUT",
    "NS_E_WMP_MULTICAST_DISABLED",
    "NS_E_WMP_SERVER_DNS_TIMEOUT",
    "NS_E_WMP_PROXY_NOT_FOUND",
    "NS_E_WMP_TAMPERED_CONTENT",
    "NS_E_WMP_OUTOFMEMORY",
    "NS_E_WMP_AUDIO_CODEC_NOT_INSTALLED",
    "NS_E_WMP_VIDEO_CODEC_NOT_INSTALLED",
    "NS_E_WMP_IMAPI_DEVICE_INVALIDTYPE",
    "NS_E_WMP_DRM_DRIVER_AUTH_FAILURE",
    "NS_E_WMP_NETWORK_RESOURCE_FAILURE",
    "NS_E_WMP_UPGRADE_APPLICATION",
    "NS_E_WMP_UNKNOWN_ERROR",
    "NS_E_WMP_INVALID_KEY",
    "NS_E_WMP_CD_ANOTHER_USER",
    "NS_E_WMP_DRM_NEEDS_AUTHORIZATION",
    "NS_E_WMP_BAD_DRIVER",
    "NS_E_WMP_ACCESS_DENIED",
    "NS_E_WMP_LICENSE_RESTRICTS",
    "NS_E_WMP_INVALID_REQUEST",
    "NS_E_WMP_CD_STASH_NO_SPACE",
    "NS_E_WMP_DRM_NEW_HARDWARE",
    "NS_E_WMP_DRM_INVALID_SIG",
    "NS_E_WMP_DRM_CANNOT_RESTORE",
    "NS_E_WMP_BURN_DISC_OVERFLOW",
    "NS_E_WMP_DRM_GENERIC_LICENSE_FAILURE",
    "NS_E_WMP_DRM_NO_SECURE_CLOCK",
    "NS_E_WMP_DRM_NO_RIGHTS",
    "NS_E_WMP_DRM_INDIV_FAILED",
    "NS_E_WMP_SERVER_NONEWCONNECTIONS",
    "NS_E_WMP_MULTIPLE_ERROR_IN_PLAYLIST",
    "NS_E_WMP_IMAPI2_ERASE_FAIL",
    "NS_E_WMP_IMAPI2_ERASE_DEVICE_BUSY",
    "NS_E_WMP_DRM_COMPONENT_FAILURE",
    "NS_E_WMP_DRM_NO_DEVICE_CERT",
    "NS_E_WMP_SERVER_SECURITY_ERROR",
    "NS_E_WMP_AUDIO_DEVICE_LOST",
    "NS_E_WMP_IMAPI_MEDIA_INCOMPATIBLE",
    "NS_E_SYNCWIZ_DEVICE_FULL",
    "NS_E_SYNCWIZ_CANNOT_CHANGE_SETTINGS",
    "NS_E_TRANSCODE_DELETECACHEERROR",
    "NS_E_CD_NO_BUFFERS_READ",
    "NS_E_CD_EMPTY_TRACK_QUEUE",
    "NS_E_CD_NO_READER",
    "NS_E_CD_ISRC_INVALID",
    "NS_E_CD_MEDIA_CATALOG_NUMBER_INVALID",
    "NS_E_SLOW_READ_DIGITAL_WITH_ERRORCORRECTION",
    "NS_E_CD_SPEEDDETECT_NOT_ENOUGH_READS",
    "NS_E_CD_QUEUEING_DISABLED",
    "NS_E_WMP_DRM_ACQUIRING_LICENSE",
    "NS_E_WMP_DRM_LICENSE_EXPIRED",
    "NS_E_WMP_DRM_LICENSE_NOTACQUIRED",
    "NS_E_WMP_DRM_LICENSE_NOTENABLED",
    "NS_E_WMP_DRM_LICENSE_UNUSABLE",
    "NS_E_WMP_DRM_LICENSE_CONTENT_REVOKED",
    "NS_E_WMP_DRM_LICENSE_NOSAP",
    "NS_E_WMP_DRM_UNABLE_TO_ACQUIRE_LICENSE",
    "NS_E_WMP_LICENSE_REQUIRED",
    "NS_E_WMP_PROTECTED_CONTENT",
    "NS_E_WMP_POLICY_VALUE_NOT_CONFIGURED",
    "NS_E_PDA_CANNOT_SYNC_FROM_INTERNET",
    "NS_E_PDA_CANNOT_SYNC_INVALID_PLAYLIST",
    "NS_E_PDA_FAILED_TO_SYNCHRONIZE_FILE",
    "NS_E_PDA_SYNC_FAILED",
    "NS_E_PDA_DELETE_FAILED",
    "NS_E_PDA_FAILED_TO_RETRIEVE_FILE",
    "NS_E_PDA_DEVICE_NOT_RESPONDING",
    "NS_E_PDA_FAILED_TO_TRANSCODE_PHOTO",
    "NS_E_PDA_FAILED_TO_ENCRYPT_TRANSCODED_FILE",
    "NS_E_PDA_CANNOT_TRANSCODE_TO_AUDIO",
    "NS_E_PDA_CANNOT_TRANSCODE_TO_VIDEO",
    "NS_E_PDA_CANNOT_TRANSCODE_TO_IMAGE",
    "NS_E_PDA_RETRIEVED_FILE_FILENAME_TOO_LONG",
    "NS_E_PDA_CEWMDM_DRM_ERROR",
    "NS_E_INCOMPLETE_PLAYLIST",
    "NS_E_PDA_SYNC_RUNNING",
    "NS_E_PDA_SYNC_LOGIN_ERROR",
    "NS_E_PDA_TRANSCODE_CODEC_NOT_FOUND",
    "NS_E_CANNOT_SYNC_DRM_TO_NON_JANUS_DEVICE",
    "NS_E_CANNOT_SYNC_PREVIOUS_SYNC_RUNNING",
    "NS_E_WMP_HWND_NOTFOUND",
    "NS_E_BKGDOWNLOAD_WRONG_NO_FILES",
    "NS_E_BKGDOWNLOAD_COMPLETECANCELLEDJOB",
    "NS_E_BKGDOWNLOAD_CANCELCOMPLETEDJOB",
    "NS_E_BKGDOWNLOAD_NOJOBPOINTER",
    "NS_E_BKGDOWNLOAD_INVALIDJOBSIGNATURE",
    "NS_E_BKGDOWNLOAD_FAILED_TO_CREATE_TEMPFILE",
    "NS_E_BKGDOWNLOAD_PLUGIN_FAILEDINITIALIZE",
    "NS_E_BKGDOWNLOAD_PLUGIN_FAILEDTOMOVEFILE",
    "NS_E_BKGDOWNLOAD_CALLFUNCFAILED",
    "NS_E_BKGDOWNLOAD_CALLFUNCTIMEOUT",
    "NS_E_BKGDOWNLOAD_CALLFUNCENDED",
    "NS_E_BKGDOWNLOAD_WMDUNPACKFAILED",
    "NS_E_BKGDOWNLOAD_FAILEDINITIALIZE",
    "NS_E_INTERFACE_NOT_REGISTERED_IN_GIT",
    "NS_E_BKGDOWNLOAD_INVALID_FILE_NAME",
    "NS_E_IMAGE_DOWNLOAD_FAILED",
    "NS_E_WMP_UDRM_NOUSERLIST",
    "NS_E_WMP_DRM_NOT_ACQUIRING",
    "NS_E_WMP_BSTR_TOO_LONG",
    "NS_E_WMP_AUTOPLAY_INVALID_STATE",
    "NS_E_WMP_COMPONENT_REVOKED",
    "NS_E_CURL_NOTSAFE",
    "NS_E_CURL_INVALIDCHAR",
    "NS_E_CURL_INVALIDHOSTNAME",
    "NS_E_CURL_INVALIDPATH",
    "NS_E_CURL_INVALIDSCHEME",
    "NS_E_CURL_INVALIDURL",
    "NS_E_CURL_CANTWALK",
    "NS_E_CURL_INVALIDPORT",
    "NS_E_CURLHELPER_NOTADIRECTORY",
    "NS_E_CURLHELPER_NOTAFILE",
    "NS_E_CURL_CANTDECODE",
    "NS_E_CURLHELPER_NOTRELATIVE",
    "NS_E_CURL_INVALIDBUFFERSIZE",
    "NS_E_SUBSCRIPTIONSERVICE_PLAYBACK_DISALLOWED",
    "NS_E_CANNOT_BUY_OR_DOWNLOAD_FROM_MULTIPLE_SERVICES",
    "NS_E_CANNOT_BUY_OR_DOWNLOAD_CONTENT",
    "NS_S_TRACK_BUY_REQUIRES_ALBUM_PURCHASE",
    "NS_E_NOT_CONTENT_PARTNER_TRACK",
    "NS_E_TRACK_DOWNLOAD_REQUIRES_ALBUM_PURCHASE",
    "NS_E_TRACK_DOWNLOAD_REQUIRES_PURCHASE",
    "NS_E_TRACK_PURCHASE_MAXIMUM_EXCEEDED",
    "NS_S_NAVIGATION_COMPLETE_WITH_ERRORS",
    "NS_E_SUBSCRIPTIONSERVICE_LOGIN_FAILED",
    "NS_E_SUBSCRIPTIONSERVICE_DOWNLOAD_TIMEOUT",
    "NS_S_TRACK_ALREADY_DOWNLOADED",
    "NS_E_CONTENT_PARTNER_STILL_INITIALIZING",
    "NS_E_OPEN_CONTAINING_FOLDER_FAILED",
    "NS_E_ADVANCEDEDIT_TOO_MANY_PICTURES",
    "NS_E_REDIRECT",
    "NS_E_STALE_PRESENTATION",
    "NS_E_NAMESPACE_WRONG_PERSIST",
    "NS_E_NAMESPACE_WRONG_TYPE",
    "NS_E_NAMESPACE_NODE_CONFLICT",
    "NS_E_NAMESPACE_NODE_NOT_FOUND",
    "NS_E_NAMESPACE_BUFFER_TOO_SMALL",
    "NS_E_NAMESPACE_TOO_MANY_CALLBACKS",
    "NS_E_NAMESPACE_DUPLICATE_CALLBACK",
    "NS_E_NAMESPACE_CALLBACK_NOT_FOUND",
    "NS_E_NAMESPACE_NAME_TOO_LONG",
    "NS_E_NAMESPACE_DUPLICATE_NAME",
    "NS_E_NAMESPACE_EMPTY_NAME",
    "NS_E_NAMESPACE_INDEX_TOO_LARGE",
    "NS_E_NAMESPACE_BAD_NAME",
    "NS_E_NAMESPACE_WRONG_SECURITY",
    "NS_E_CACHE_ARCHIVE_CONFLICT",
    "NS_E_CACHE_ORIGIN_SERVER_NOT_FOUND",
    "NS_E_CACHE_ORIGIN_SERVER_TIMEOUT",
    "NS_E_CACHE_NOT_BROADCAST",
    "NS_E_CACHE_CANNOT_BE_CACHED",
    "NS_E_CACHE_NOT_MODIFIED",
    "NS_E_CANNOT_REMOVE_PUBLISHING_POINT",
    "NS_E_CANNOT_REMOVE_PLUGIN",
    "NS_E_WRONG_PUBLISHING_POINT_TYPE",
    "NS_E_UNSUPPORTED_LOAD_TYPE",
    "NS_E_INVALID_PLUGIN_LOAD_TYPE_CONFIGURATION",
    "NS_E_INVALID_PUBLISHING_POINT_NAME",
    "NS_E_TOO_MANY_MULTICAST_SINKS",
    "NS_E_PUBLISHING_POINT_INVALID_REQUEST_WHILE_STARTED",
    "NS_E_MULTICAST_PLUGIN_NOT_ENABLED",
    "NS_E_INVALID_OPERATING_SYSTEM_VERSION",
    "NS_E_PUBLISHING_POINT_REMOVED",
    "NS_E_INVALID_PUSH_PUBLISHING_POINT_START_REQUEST",
    "NS_E_UNSUPPORTED_LANGUAGE",
    "NS_E_WRONG_OS_VERSION",
    "NS_E_PUBLISHING_POINT_STOPPED",
    "NS_E_PLAYLIST_ENTRY_ALREADY_PLAYING",
    "NS_E_EMPTY_PLAYLIST",
    "NS_E_PLAYLIST_PARSE_FAILURE",
    "NS_E_PLAYLIST_UNSUPPORTED_ENTRY",
    "NS_E_PLAYLIST_ENTRY_NOT_IN_PLAYLIST",
    "NS_E_PLAYLIST_ENTRY_SEEK",
    "NS_E_PLAYLIST_RECURSIVE_PLAYLISTS",
    "NS_E_PLAYLIST_TOO_MANY_NESTED_PLAYLISTS",
    "NS_E_PLAYLIST_SHUTDOWN",
    "NS_E_PLAYLIST_END_RECEDING",
    "NS_I_PLAYLIST_CHANGE_RECEDING",
    "NS_E_DATAPATH_NO_SINK",
    "NS_S_PUBLISHING_POINT_STARTED_WITH_FAILED_SINKS",
    "NS_E_INVALID_PUSH_TEMPLATE",
    "NS_E_INVALID_PUSH_PUBLISHING_POINT",
    "NS_E_CRITICAL_ERROR",
    "NS_E_NO_NEW_CONNECTIONS",
    "NS_E_WSX_INVALID_VERSION",
    "NS_E_HEADER_MISMATCH",
    "NS_E_PUSH_DUPLICATE_PUBLISHING_POINT_NAME",
    "NS_E_NO_SCRIPT_ENGINE",
    "NS_E_PLUGIN_ERROR_REPORTED",
    "NS_E_SOURCE_PLUGIN_NOT_FOUND",
    "NS_E_PLAYLIST_PLUGIN_NOT_FOUND",
    "NS_E_DATA_SOURCE_ENUMERATION_NOT_SUPPORTED",
    "NS_E_MEDIA_PARSER_INVALID_FORMAT",
    "NS_E_SCRIPT_DEBUGGER_NOT_INSTALLED",
    "NS_E_FEATURE_REQUIRES_ENTERPRISE_SERVER",
    "NS_E_WIZARD_RUNNING",
    "NS_E_INVALID_LOG_URL",
    "NS_E_INVALID_MTU_RANGE",
    "NS_E_INVALID_PLAY_STATISTICS",
    "NS_E_LOG_NEED_TO_BE_SKIPPED",
    "NS_E_HTTP_TEXT_DATACONTAINER_SIZE_LIMIT_EXCEEDED",
    "NS_E_PORT_IN_USE",
    "NS_E_PORT_IN_USE_HTTP",
    "NS_E_HTTP_TEXT_DATACONTAINER_INVALID_SERVER_RESPONSE",
    "NS_E_ARCHIVE_REACH_QUOTA",
    "NS_E_ARCHIVE_ABORT_DUE_TO_BCAST",
    "NS_E_ARCHIVE_GAP_DETECTED",
    "NS_E_AUTHORIZATION_FILE_NOT_FOUND",
    "NS_E_BAD_MARKIN",
    "NS_E_BAD_MARKOUT",
    "NS_E_NOMATCHING_MEDIASOURCE",
    "NS_E_UNSUPPORTED_SOURCETYPE",
    "NS_E_TOO_MANY_AUDIO",
    "NS_E_TOO_MANY_VIDEO",
    "NS_E_NOMATCHING_ELEMENT",
    "NS_E_MISMATCHED_MEDIACONTENT",
    "NS_E_CANNOT_DELETE_ACTIVE_SOURCEGROUP",
    "NS_E_AUDIODEVICE_BUSY",
    "NS_E_AUDIODEVICE_UNEXPECTED",
    "NS_E_AUDIODEVICE_BADFORMAT",
    "NS_E_VIDEODEVICE_BUSY",
    "NS_E_VIDEODEVICE_UNEXPECTED",
    "NS_E_INVALIDCALL_WHILE_ENCODER_RUNNING",
    "NS_E_NO_PROFILE_IN_SOURCEGROUP",
    "NS_E_VIDEODRIVER_UNSTABLE",
    "NS_E_VIDCAPSTARTFAILED",
    "NS_E_VIDSOURCECOMPRESSION",
    "NS_E_VIDSOURCESIZE",
    "NS_E_ICMQUERYFORMAT",
    "NS_E_VIDCAPCREATEWINDOW",
    "NS_E_VIDCAPDRVINUSE",
    "NS_E_NO_MEDIAFORMAT_IN_SOURCE",
    "NS_E_NO_VALID_OUTPUT_STREAM",
    "NS_E_NO_VALID_SOURCE_PLUGIN",
    "NS_E_NO_ACTIVE_SOURCEGROUP",
    "NS_E_NO_SCRIPT_STREAM",
    "NS_E_INVALIDCALL_WHILE_ARCHIVAL_RUNNING",
    "NS_E_INVALIDPACKETSIZE",
    "NS_E_PLUGIN_CLSID_INVALID",
    "NS_E_UNSUPPORTED_ARCHIVETYPE",
    "NS_E_UNSUPPORTED_ARCHIVEOPERATION",
    "NS_E_ARCHIVE_FILENAME_NOTSET",
    "NS_E_SOURCEGROUP_NOTPREPARED",
    "NS_E_PROFILE_MISMATCH",
    "NS_E_INCORRECTCLIPSETTINGS",
    "NS_E_NOSTATSAVAILABLE",
    "NS_E_NOTARCHIVING",
    "NS_E_INVALIDCALL_WHILE_ENCODER_STOPPED",
    "NS_E_NOSOURCEGROUPS",
    "NS_E_INVALIDINPUTFPS",
    "NS_E_NO_DATAVIEW_SUPPORT",
    "NS_E_CODEC_UNAVAILABLE",
    "NS_E_ARCHIVE_SAME_AS_INPUT",
    "NS_E_SOURCE_NOTSPECIFIED",
    "NS_E_NO_REALTIME_TIMECOMPRESSION",
    "NS_E_UNSUPPORTED_ENCODER_DEVICE",
    "NS_E_UNEXPECTED_DISPLAY_SETTINGS",
    "NS_E_NO_AUDIODATA",
    "NS_E_INPUTSOURCE_PROBLEM",
    "NS_E_WME_VERSION_MISMATCH",
    "NS_E_NO_REALTIME_PREPROCESS",
    "NS_E_NO_REPEAT_PREPROCESS",
    "NS_E_CANNOT_PAUSE_LIVEBROADCAST",
    "NS_E_DRM_PROFILE_NOT_SET",
    "NS_E_DUPLICATE_DRMPROFILE",
    "NS_E_INVALID_DEVICE",
    "NS_E_SPEECHEDL_ON_NON_MIXEDMODE",
    "NS_E_DRM_PASSWORD_TOO_LONG",
    "NS_E_DEVCONTROL_FAILED_SEEK",
    "NS_E_INTERLACE_REQUIRE_SAMESIZE",
    "NS_E_TOO_MANY_DEVICECONTROL",
    "NS_E_NO_MULTIPASS_FOR_LIVEDEVICE",
    "NS_E_MISSING_AUDIENCE",
    "NS_E_AUDIENCE_CONTENTTYPE_MISMATCH",
    "NS_E_MISSING_SOURCE_INDEX",
    "NS_E_NUM_LANGUAGE_MISMATCH",
    "NS_E_LANGUAGE_MISMATCH",
    "NS_E_VBRMODE_MISMATCH",
    "NS_E_INVALID_INPUT_AUDIENCE_INDEX",
    "NS_E_INVALID_INPUT_LANGUAGE",
    "NS_E_INVALID_INPUT_STREAM",
    "NS_E_EXPECT_MONO_WAV_INPUT",
    "NS_E_INPUT_WAVFORMAT_MISMATCH",
    "NS_E_RECORDQ_DISK_FULL",
    "NS_E_NO_PAL_INVERSE_TELECINE",
    "NS_E_ACTIVE_SG_DEVICE_DISCONNECTED",
    "NS_E_ACTIVE_SG_DEVICE_CONTROL_DISCONNECTED",
    "NS_E_NO_FRAMES_SUBMITTED_TO_ANALYZER",
    "NS_E_INPUT_DOESNOT_SUPPORT_SMPTE",
    "NS_E_NO_SMPTE_WITH_MULTIPLE_SOURCEGROUPS",
    "NS_E_BAD_CONTENTEDL",
    "NS_E_INTERLACEMODE_MISMATCH",
    "NS_E_NONSQUAREPIXELMODE_MISMATCH",
    "NS_E_SMPTEMODE_MISMATCH",
    "NS_E_END_OF_TAPE",
    "NS_E_NO_MEDIA_IN_AUDIENCE",
    "NS_E_NO_AUDIENCES",
    "NS_E_NO_AUDIO_COMPAT",
    "NS_E_INVALID_VBR_COMPAT",
    "NS_E_NO_PROFILE_NAME",
    "NS_E_INVALID_VBR_WITH_UNCOMP",
    "NS_E_MULTIPLE_VBR_AUDIENCES",
    "NS_E_UNCOMP_COMP_COMBINATION",
    "NS_E_MULTIPLE_AUDIO_CODECS",
    "NS_E_MULTIPLE_AUDIO_FORMATS",
    "NS_E_AUDIO_BITRATE_STEPDOWN",
    "NS_E_INVALID_AUDIO_PEAKRATE",
    "NS_E_INVALID_AUDIO_PEAKRATE_2",
    "NS_E_INVALID_AUDIO_BUFFERMAX",
    "NS_E_MULTIPLE_VIDEO_CODECS",
    "NS_E_MULTIPLE_VIDEO_SIZES",
    "NS_E_INVALID_VIDEO_BITRATE",
    "NS_E_VIDEO_BITRATE_STEPDOWN",
    "NS_E_INVALID_VIDEO_PEAKRATE",
    "NS_E_INVALID_VIDEO_PEAKRATE_2",
    "NS_E_INVALID_VIDEO_WIDTH",
    "NS_E_INVALID_VIDEO_HEIGHT",
    "NS_E_INVALID_VIDEO_FPS",
    "NS_E_INVALID_VIDEO_KEYFRAME",
    "NS_E_INVALID_VIDEO_IQUALITY",
    "NS_E_INVALID_VIDEO_CQUALITY",
    "NS_E_INVALID_VIDEO_BUFFER",
    "NS_E_INVALID_VIDEO_BUFFERMAX",
    "NS_E_INVALID_VIDEO_BUFFERMAX_2",
    "NS_E_INVALID_VIDEO_WIDTH_ALIGN",
    "NS_E_INVALID_VIDEO_HEIGHT_ALIGN",
    "NS_E_MULTIPLE_SCRIPT_BITRATES",
    "NS_E_INVALID_SCRIPT_BITRATE",
    "NS_E_MULTIPLE_FILE_BITRATES",
    "NS_E_INVALID_FILE_BITRATE",
    "NS_E_SAME_AS_INPUT_COMBINATION",
    "NS_E_SOURCE_CANNOT_LOOP",
    "NS_E_INVALID_FOLDDOWN_COEFFICIENTS",
    "NS_E_DRMPROFILE_NOTFOUND",
    "NS_E_INVALID_TIMECODE",
    "NS_E_NO_AUDIO_TIMECOMPRESSION",
    "NS_E_NO_TWOPASS_TIMECOMPRESSION",
    "NS_E_TIMECODE_REQUIRES_VIDEOSTREAM",
    "NS_E_NO_MBR_WITH_TIMECODE",
    "NS_E_INVALID_INTERLACEMODE",
    "NS_E_INVALID_INTERLACE_COMPAT",
    "NS_E_INVALID_NONSQUAREPIXEL_COMPAT",
    "NS_E_INVALID_SOURCE_WITH_DEVICE_CONTROL",
    "NS_E_CANNOT_GENERATE_BROADCAST_INFO_FOR_QUALITYVBR",
    "NS_E_EXCEED_MAX_DRM_PROFILE_LIMIT",
    "NS_E_DEVICECONTROL_UNSTABLE",
    "NS_E_INVALID_PIXEL_ASPECT_RATIO",
    "NS_E_AUDIENCE__LANGUAGE_CONTENTTYPE_MISMATCH",
    "NS_E_INVALID_PROFILE_CONTENTTYPE",
    "NS_E_TRANSFORM_PLUGIN_NOT_FOUND",
    "NS_E_TRANSFORM_PLUGIN_INVALID",
    "NS_E_EDL_REQUIRED_FOR_DEVICE_MULTIPASS",
    "NS_E_INVALID_VIDEO_WIDTH_FOR_INTERLACED_ENCODING",
    "NS_E_MARKIN_UNSUPPORTED",
    "NS_E_DRM_INVALID_APPLICATION",
    "NS_E_DRM_LICENSE_STORE_ERROR",
    "NS_E_DRM_SECURE_STORE_ERROR",
    "NS_E_DRM_LICENSE_STORE_SAVE_ERROR",
    "NS_E_DRM_SECURE_STORE_UNLOCK_ERROR",
    "NS_E_DRM_INVALID_CONTENT",
    "NS_E_DRM_UNABLE_TO_OPEN_LICENSE",
    "NS_E_DRM_INVALID_LICENSE",
    "NS_E_DRM_INVALID_MACHINE",
    "NS_E_DRM_ENUM_LICENSE_FAILED",
    "NS_E_DRM_INVALID_LICENSE_REQUEST",
    "NS_E_DRM_UNABLE_TO_INITIALIZE",
    "NS_E_DRM_UNABLE_TO_ACQUIRE_LICENSE",
    "NS_E_DRM_INVALID_LICENSE_ACQUIRED",
    "NS_E_DRM_NO_RIGHTS",
    "NS_E_DRM_KEY_ERROR",
    "NS_E_DRM_ENCRYPT_ERROR",
    "NS_E_DRM_DECRYPT_ERROR",
    "NS_E_DRM_LICENSE_INVALID_XML",
    "NS_S_DRM_LICENSE_ACQUIRED",
    "NS_S_DRM_INDIVIDUALIZED",
    "NS_E_DRM_NEEDS_INDIVIDUALIZATION",
    "NS_E_DRM_ALREADY_INDIVIDUALIZED",
    "NS_E_DRM_ACTION_NOT_QUERIED",
    "NS_E_DRM_ACQUIRING_LICENSE",
    "NS_E_DRM_INDIVIDUALIZING",
    "NS_E_BACKUP_RESTORE_FAILURE",
    "NS_E_BACKUP_RESTORE_BAD_REQUEST_ID",
    "NS_E_DRM_PARAMETERS_MISMATCHED",
    "NS_E_DRM_UNABLE_TO_CREATE_LICENSE_OBJECT",
    "NS_E_DRM_UNABLE_TO_CREATE_INDI_OBJECT",
    "NS_E_DRM_UNABLE_TO_CREATE_ENCRYPT_OBJECT",
    "NS_E_DRM_UNABLE_TO_CREATE_DECRYPT_OBJECT",
    "NS_E_DRM_UNABLE_TO_CREATE_PROPERTIES_OBJECT",
    "NS_E_DRM_UNABLE_TO_CREATE_BACKUP_OBJECT",
    "NS_E_DRM_INDIVIDUALIZE_ERROR",
    "NS_E_DRM_LICENSE_OPEN_ERROR",
    "NS_E_DRM_LICENSE_CLOSE_ERROR",
    "NS_E_DRM_GET_LICENSE_ERROR",
    "NS_E_DRM_QUERY_ERROR",
    "NS_E_DRM_REPORT_ERROR",
    "NS_E_DRM_GET_LICENSESTRING_ERROR",
    "NS_E_DRM_GET_CONTENTSTRING_ERROR",
    "NS_E_DRM_MONITOR_ERROR",
    "NS_E_DRM_UNABLE_TO_SET_PARAMETER",
    "NS_E_DRM_INVALID_APPDATA",
    "NS_E_DRM_INVALID_APPDATA_VERSION",
    "NS_E_DRM_BACKUP_EXISTS",
    "NS_E_DRM_BACKUP_CORRUPT",
    "NS_E_DRM_BACKUPRESTORE_BUSY",
    "NS_E_BACKUP_RESTORE_BAD_DATA",
    "NS_S_DRM_MONITOR_CANCELLED",
    "NS_S_DRM_ACQUIRE_CANCELLED",
    "NS_E_DRM_LICENSE_UNUSABLE",
    "NS_E_DRM_INVALID_PROPERTY",
    "NS_E_DRM_SECURE_STORE_NOT_FOUND",
    "NS_E_DRM_CACHED_CONTENT_ERROR",
    "NS_E_DRM_INDIVIDUALIZATION_INCOMPLETE",
    "NS_E_DRM_DRIVER_AUTH_FAILURE",
    "NS_E_DRM_NEED_UPGRADE_MSSAP",
    "NS_E_DRM_REOPEN_CONTENT",
    "NS_E_DRM_DRIVER_DIGIOUT_FAILURE",
    "NS_E_DRM_INVALID_SECURESTORE_PASSWORD",
    "NS_E_DRM_APPCERT_REVOKED",
    "NS_E_DRM_RESTORE_FRAUD",
    "NS_E_DRM_HARDWARE_INCONSISTENT",
    "NS_E_DRM_SDMI_TRIGGER",
    "NS_E_DRM_SDMI_NOMORECOPIES",
    "NS_E_DRM_UNABLE_TO_CREATE_HEADER_OBJECT",
    "NS_E_DRM_UNABLE_TO_CREATE_KEYS_OBJECT",
    "NS_E_DRM_LICENSE_NOTACQUIRED",
    "NS_E_DRM_UNABLE_TO_CREATE_CODING_OBJECT",
    "NS_E_DRM_UNABLE_TO_CREATE_STATE_DATA_OBJECT",
    "NS_E_DRM_BUFFER_TOO_SMALL",
    "NS_E_DRM_UNSUPPORTED_PROPERTY",
    "NS_E_DRM_ERROR_BAD_NET_RESP",
    "NS_E_DRM_STORE_NOTALLSTORED",
    "NS_E_DRM_SECURITY_COMPONENT_SIGNATURE_INVALID",
    "NS_E_DRM_INVALID_DATA",
    "NS_E_DRM_POLICY_DISABLE_ONLINE",
    "NS_E_DRM_UNABLE_TO_CREATE_AUTHENTICATION_OBJECT",
    "NS_E_DRM_NOT_CONFIGURED",
    "NS_E_DRM_DEVICE_ACTIVATION_CANCELED",
    "NS_E_BACKUP_RESTORE_TOO_MANY_RESETS",
    "NS_E_DRM_DEBUGGING_NOT_ALLOWED",
    "NS_E_DRM_OPERATION_CANCELED",
    "NS_E_DRM_RESTRICTIONS_NOT_RETRIEVED",
    "NS_E_DRM_UNABLE_TO_CREATE_PLAYLIST_OBJECT",
    "NS_E_DRM_UNABLE_TO_CREATE_PLAYLIST_BURN_OBJECT",
    "NS_E_DRM_UNABLE_TO_CREATE_DEVICE_REGISTRATION_OBJECT",
    "NS_E_DRM_UNABLE_TO_CREATE_METERING_OBJECT",
    "NS_S_DRM_BURNABLE_TRACK",
    "NS_S_DRM_BURNABLE_TRACK_WITH_PLAYLIST_RESTRICTION",
    "NS_E_DRM_TRACK_EXCEEDED_PLAYLIST_RESTICTION",
    "NS_E_DRM_TRACK_EXCEEDED_TRACKBURN_RESTRICTION",
    "NS_E_DRM_UNABLE_TO_GET_DEVICE_CERT",
    "NS_E_DRM_UNABLE_TO_GET_SECURE_CLOCK",
    "NS_E_DRM_UNABLE_TO_SET_SECURE_CLOCK",
    "NS_E_DRM_UNABLE_TO_GET_SECURE_CLOCK_FROM_SERVER",
    "NS_E_DRM_POLICY_METERING_DISABLED",
    "NS_E_DRM_TRANSFER_CHAINED_LICENSES_UNSUPPORTED",
    "NS_E_DRM_SDK_VERSIONMISMATCH",
    "NS_E_DRM_LIC_NEEDS_DEVICE_CLOCK_SET",
    "NS_E_LICENSE_HEADER_MISSING_URL",
    "NS_E_DEVICE_NOT_WMDRM_DEVICE",
    "NS_E_DRM_INVALID_APPCERT",
    "NS_E_DRM_PROTOCOL_FORCEFUL_TERMINATION_ON_PETITION",
    "NS_E_DRM_PROTOCOL_FORCEFUL_TERMINATION_ON_CHALLENGE",
    "NS_E_DRM_CHECKPOINT_FAILED",
    "NS_E_DRM_BB_UNABLE_TO_INITIALIZE",
    "NS_E_DRM_UNABLE_TO_LOAD_HARDWARE_ID",
    "NS_E_DRM_UNABLE_TO_OPEN_DATA_STORE",
    "NS_E_DRM_DATASTORE_CORRUPT",
    "NS_E_DRM_UNABLE_TO_CREATE_INMEMORYSTORE_OBJECT",
    "NS_E_DRM_STUBLIB_REQUIRED",
    "NS_E_DRM_UNABLE_TO_CREATE_CERTIFICATE_OBJECT",
    "NS_E_DRM_MIGRATION_TARGET_NOT_ONLINE",
    "NS_E_DRM_INVALID_MIGRATION_IMAGE",
    "NS_E_DRM_MIGRATION_TARGET_STATES_CORRUPTED",
    "NS_E_DRM_MIGRATION_IMPORTER_NOT_AVAILABLE",
    "NS_DRM_E_MIGRATION_UPGRADE_WITH_DIFF_SID",
    "NS_DRM_E_MIGRATION_SOURCE_MACHINE_IN_USE",
    "NS_DRM_E_MIGRATION_TARGET_MACHINE_LESS_THAN_LH",
    "NS_DRM_E_MIGRATION_IMAGE_ALREADY_EXISTS",
    "NS_E_DRM_HARDWAREID_MISMATCH",
    "NS_E_INVALID_DRMV2CLT_STUBLIB",
    "NS_E_DRM_MIGRATION_INVALID_LEGACYV2_DATA",
    "NS_E_DRM_MIGRATION_LICENSE_ALREADY_EXISTS",
    "NS_E_DRM_MIGRATION_INVALID_LEGACYV2_SST_PASSWORD",
    "NS_E_DRM_MIGRATION_NOT_SUPPORTED",
    "NS_E_DRM_UNABLE_TO_CREATE_MIGRATION_IMPORTER_OBJECT",
    "NS_E_DRM_CHECKPOINT_MISMATCH",
    "NS_E_DRM_CHECKPOINT_CORRUPT",
    "NS_E_REG_FLUSH_FAILURE",
    "NS_E_HDS_KEY_MISMATCH",
    "NS_E_DRM_MIGRATION_OPERATION_CANCELLED",
    "NS_E_DRM_MIGRATION_OBJECT_IN_USE",
    "NS_E_DRM_MALFORMED_CONTENT_HEADER",
    "NS_E_DRM_LICENSE_EXPIRED",
    "NS_E_DRM_LICENSE_NOTENABLED",
    "NS_E_DRM_LICENSE_APPSECLOW",
    "NS_E_DRM_STORE_NEEDINDI",
    "NS_E_DRM_STORE_NOTALLOWED",
    "NS_E_DRM_LICENSE_APP_NOTALLOWED",
    "NS_S_DRM_NEEDS_INDIVIDUALIZATION",
    "NS_E_DRM_LICENSE_CERT_EXPIRED",
    "NS_E_DRM_LICENSE_SECLOW",
    "NS_E_DRM_LICENSE_CONTENT_REVOKED",
    "NS_E_DRM_DEVICE_NOT_REGISTERED",
    "NS_E_DRM_LICENSE_NOSAP",
    "NS_E_DRM_LICENSE_NOSVP",
    "NS_E_DRM_LICENSE_NOWDM",
    "NS_E_DRM_LICENSE_NOTRUSTEDCODEC",
    "NS_E_DRM_SOURCEID_NOT_SUPPORTED",
    "NS_E_DRM_NEEDS_UPGRADE_TEMPFILE",
    "NS_E_DRM_NEED_UPGRADE_PD",
    "NS_E_DRM_SIGNATURE_FAILURE",
    "NS_E_DRM_LICENSE_SERVER_INFO_MISSING",
    "NS_E_DRM_BUSY",
    "NS_E_DRM_PD_TOO_MANY_DEVICES",
    "NS_E_DRM_INDIV_FRAUD",
    "NS_E_DRM_INDIV_NO_CABS",
    "NS_E_DRM_INDIV_SERVICE_UNAVAILABLE",
    "NS_E_DRM_RESTORE_SERVICE_UNAVAILABLE",
    "NS_E_DRM_CLIENT_CODE_EXPIRED",
    "NS_E_DRM_NO_UPLINK_LICENSE",
    "NS_E_DRM_INVALID_KID",
    "NS_E_DRM_LICENSE_INITIALIZATION_ERROR",
    "NS_E_DRM_CHAIN_TOO_LONG",
    "NS_E_DRM_UNSUPPORTED_ALGORITHM",
    "NS_E_DRM_LICENSE_DELETION_ERROR",
    "NS_E_DRM_INVALID_CERTIFICATE",
    "NS_E_DRM_CERTIFICATE_REVOKED",
    "NS_E_DRM_LICENSE_UNAVAILABLE",
    "NS_E_DRM_DEVICE_LIMIT_REACHED",
    "NS_E_DRM_UNABLE_TO_VERIFY_PROXIMITY",
    "NS_E_DRM_MUST_REGISTER",
    "NS_E_DRM_MUST_APPROVE",
    "NS_E_DRM_MUST_REVALIDATE",
    "NS_E_DRM_INVALID_PROXIMITY_RESPONSE",
    "NS_E_DRM_INVALID_SESSION",
    "NS_E_DRM_DEVICE_NOT_OPEN",
    "NS_E_DRM_DEVICE_ALREADY_REGISTERED",
    "NS_E_DRM_UNSUPPORTED_PROTOCOL_VERSION",
    "NS_E_DRM_UNSUPPORTED_ACTION",
    "NS_E_DRM_CERTIFICATE_SECURITY_LEVEL_INADEQUATE",
    "NS_E_DRM_UNABLE_TO_OPEN_PORT",
    "NS_E_DRM_BAD_REQUEST",
    "NS_E_DRM_INVALID_CRL",
    "NS_E_DRM_ATTRIBUTE_TOO_LONG",
    "NS_E_DRM_EXPIRED_LICENSEBLOB",
    "NS_E_DRM_INVALID_LICENSEBLOB",
    "NS_E_DRM_INCLUSION_LIST_REQUIRED",
    "NS_E_DRM_DRMV2CLT_REVOKED",
    "NS_E_DRM_RIV_TOO_SMALL",
    "NS_E_OUTPUT_PROTECTION_LEVEL_UNSUPPORTED",
    "NS_E_COMPRESSED_DIGITAL_VIDEO_PROTECTION_LEVEL_UNSUPPORTED",
    "NS_E_UNCOMPRESSED_DIGITAL_VIDEO_PROTECTION_LEVEL_UNSUPPORTED",
    "NS_E_ANALOG_VIDEO_PROTECTION_LEVEL_UNSUPPORTED",
    "NS_E_COMPRESSED_DIGITAL_AUDIO_PROTECTION_LEVEL_UNSUPPORTED",
    "NS_E_UNCOMPRESSED_DIGITAL_AUDIO_PROTECTION_LEVEL_UNSUPPORTED",
    "NS_E_OUTPUT_PROTECTION_SCHEME_UNSUPPORTED",
    "NS_S_REBOOT_RECOMMENDED",
    "NS_S_REBOOT_REQUIRED",
    "NS_E_REBOOT_RECOMMENDED",
    "NS_E_REBOOT_REQUIRED",
    "NS_E_SETUP_INCOMPLETE",
    "NS_E_SETUP_DRM_MIGRATION_FAILED",
    "NS_E_SETUP_IGNORABLE_FAILURE",
    "NS_E_SETUP_DRM_MIGRATION_FAILED_AND_IGNORABLE_FAILURE",
    "NS_E_SETUP_BLOCKED",
    "NS_E_UNKNOWN_PROTOCOL",
    "NS_E_REDIRECT_TO_PROXY",
    "NS_E_INTERNAL_SERVER_ERROR",
    "NS_E_BAD_REQUEST",
    "NS_E_ERROR_FROM_PROXY",
    "NS_E_PROXY_TIMEOUT",
    "NS_E_SERVER_UNAVAILABLE",
    "NS_E_REFUSED_BY_SERVER",
    "NS_E_INCOMPATIBLE_SERVER",
    "NS_E_MULTICAST_DISABLED",
    "NS_E_INVALID_REDIRECT",
    "NS_E_ALL_PROTOCOLS_DISABLED",
    "NS_E_MSBD_NO_LONGER_SUPPORTED",
    "NS_E_PROXY_NOT_FOUND",
    "NS_E_CANNOT_CONNECT_TO_PROXY",
    "NS_E_SERVER_DNS_TIMEOUT",
    "NS_E_PROXY_DNS_TIMEOUT",
    "NS_E_CLOSED_ON_SUSPEND",
    "NS_E_CANNOT_READ_PLAYLIST_FROM_MEDIASERVER",
    "NS_E_SESSION_NOT_FOUND",
    "NS_E_REQUIRE_STREAMING_CLIENT",
    "NS_E_PLAYLIST_ENTRY_HAS_CHANGED",
    "NS_E_PROXY_ACCESSDENIED",
    "NS_E_PROXY_SOURCE_ACCESSDENIED",
    "NS_E_NETWORK_SINK_WRITE",
    "NS_E_FIREWALL",
    "NS_E_MMS_NOT_SUPPORTED",
    "NS_E_SERVER_ACCESSDENIED",
    "NS_E_RESOURCE_GONE",
    "NS_E_NO_EXISTING_PACKETIZER",
    "NS_E_BAD_SYNTAX_IN_SERVER_RESPONSE",
    "NS_I_RECONNECTED",
    "NS_E_RESET_SOCKET_CONNECTION",
    "NS_I_NOLOG_STOP",
    "NS_E_TOO_MANY_HOPS",
    "NS_I_EXISTING_PACKETIZER",
    "NS_I_MANUAL_PROXY",
    "NS_E_TOO_MUCH_DATA_FROM_SERVER",
    "NS_E_CONNECT_TIMEOUT",
    "NS_E_PROXY_CONNECT_TIMEOUT",
    "NS_E_SESSION_INVALID",
    "NS_S_EOSRECEDING",
    "NS_E_PACKETSINK_UNKNOWN_FEC_STREAM",
    "NS_E_PUSH_CANNOTCONNECT",
    "NS_E_INCOMPATIBLE_PUSH_SERVER",
    "NS_S_CHANGENOTICE",
    "NS_E_END_OF_PLAYLIST",
    "NS_E_USE_FILE_SOURCE",
    "NS_E_PROPERTY_NOT_FOUND",
    "NS_E_PROPERTY_READ_ONLY",
    "NS_E_TABLE_KEY_NOT_FOUND",
    "NS_E_INVALID_QUERY_OPERATOR",
    "NS_E_INVALID_QUERY_PROPERTY",
    "NS_E_PROPERTY_NOT_SUPPORTED",
    "NS_E_SCHEMA_CLASSIFY_FAILURE",
    "NS_E_METADATA_FORMAT_NOT_SUPPORTED",
    "NS_E_METADATA_NO_EDITING_CAPABILITY",
    "NS_E_METADATA_CANNOT_SET_LOCALE",
    "NS_E_METADATA_LANGUAGE_NOT_SUPORTED",
    "NS_E_METADATA_NO_RFC1766_NAME_FOR_LOCALE",
    "NS_E_METADATA_NOT_AVAILABLE",
    "NS_E_METADATA_CACHE_DATA_NOT_AVAILABLE",
    "NS_E_METADATA_INVALID_DOCUMENT_TYPE",
    "NS_E_METADATA_IDENTIFIER_NOT_AVAILABLE",
    "NS_E_METADATA_CANNOT_RETRIEVE_FROM_OFFLINE_CACHE",
    "VFW_HIDE_SETTINGS_PAGE",
    "VFW_HIDE_VIDEOSRC_PAGE",
    "VFW_HIDE_CAMERACONTROL_PAGE",
    "VFW_OEM_ADD_PAGE",
    "VFW_USE_DEVICE_HANDLE",
    "VFW_USE_STREAM_HANDLE",
    "VFW_QUERY_DEV_CHANGED",
    "MCIERR_INVALID_DEVICE_ID",
    "MCIERR_UNRECOGNIZED_KEYWORD",
    "MCIERR_UNRECOGNIZED_COMMAND",
    "MCIERR_HARDWARE",
    "MCIERR_INVALID_DEVICE_NAME",
    "MCIERR_OUT_OF_MEMORY",
    "MCIERR_DEVICE_OPEN",
    "MCIERR_CANNOT_LOAD_DRIVER",
    "MCIERR_MISSING_COMMAND_STRING",
    "MCIERR_PARAM_OVERFLOW",
    "MCIERR_MISSING_STRING_ARGUMENT",
    "MCIERR_BAD_INTEGER",
    "MCIERR_PARSER_INTERNAL",
    "MCIERR_DRIVER_INTERNAL",
    "MCIERR_MISSING_PARAMETER",
    "MCIERR_UNSUPPORTED_FUNCTION",
    "MCIERR_FILE_NOT_FOUND",
    "MCIERR_DEVICE_NOT_READY",
    "MCIERR_INTERNAL",
    "MCIERR_DRIVER",
    "MCIERR_CANNOT_USE_ALL",
    "MCIERR_MULTIPLE",
    "MCIERR_EXTENSION_NOT_FOUND",
    "MCIERR_OUTOFRANGE",
    "MCIERR_FLAGS_NOT_COMPATIBLE",
    "MCIERR_FILE_NOT_SAVED",
    "MCIERR_DEVICE_TYPE_REQUIRED",
    "MCIERR_DEVICE_LOCKED",
    "MCIERR_DUPLICATE_ALIAS",
    "MCIERR_BAD_CONSTANT",
    "MCIERR_MUST_USE_SHAREABLE",
    "MCIERR_MISSING_DEVICE_NAME",
    "MCIERR_BAD_TIME_FORMAT",
    "MCIERR_NO_CLOSING_QUOTE",
    "MCIERR_DUPLICATE_FLAGS",
    "MCIERR_INVALID_FILE",
    "MCIERR_NULL_PARAMETER_BLOCK",
    "MCIERR_UNNAMED_RESOURCE",
    "MCIERR_NEW_REQUIRES_ALIAS",
    "MCIERR_NOTIFY_ON_AUTO_OPEN",
    "MCIERR_NO_ELEMENT_ALLOWED",
    "MCIERR_NONAPPLICABLE_FUNCTION",
    "MCIERR_ILLEGAL_FOR_AUTO_OPEN",
    "MCIERR_FILENAME_REQUIRED",
    "MCIERR_EXTRA_CHARACTERS",
    "MCIERR_DEVICE_NOT_INSTALLED",
    "MCIERR_GET_CD",
    "MCIERR_SET_CD",
    "MCIERR_SET_DRIVE",
    "MCIERR_DEVICE_LENGTH",
    "MCIERR_DEVICE_ORD_LENGTH",
    "MCIERR_NO_INTEGER",
    "MCIERR_WAVE_OUTPUTSINUSE",
    "MCIERR_WAVE_SETOUTPUTINUSE",
    "MCIERR_WAVE_INPUTSINUSE",
    "MCIERR_WAVE_SETINPUTINUSE",
    "MCIERR_WAVE_OUTPUTUNSPECIFIED",
    "MCIERR_WAVE_INPUTUNSPECIFIED",
    "MCIERR_WAVE_OUTPUTSUNSUITABLE",
    "MCIERR_WAVE_SETOUTPUTUNSUITABLE",
    "MCIERR_WAVE_INPUTSUNSUITABLE",
    "MCIERR_WAVE_SETINPUTUNSUITABLE",
    "MCIERR_SEQ_DIV_INCOMPATIBLE",
    "MCIERR_SEQ_PORT_INUSE",
    "MCIERR_SEQ_PORT_NONEXISTENT",
    "MCIERR_SEQ_PORT_MAPNODEVICE",
    "MCIERR_SEQ_PORT_MISCERROR",
    "MCIERR_SEQ_TIMER",
    "MCIERR_SEQ_PORTUNSPECIFIED",
    "MCIERR_SEQ_NOMIDIPRESENT",
    "MCIERR_NO_WINDOW",
    "MCIERR_CREATEWINDOW",
    "MCIERR_FILE_READ",
    "MCIERR_FILE_WRITE",
    "MCIERR_NO_IDENTITY",
    "MCIERR_CUSTOM_DRIVER_BASE",
    "MCI_FIRST",
    "MCI_ESCAPE",
    "MCI_INFO",
    "MCI_GETDEVCAPS",
    "MCI_SPIN",
    "MCI_SET",
    "MCI_SYSINFO",
    "MCI_BREAK",
    "MCI_STATUS",
    "MCI_CUE",
    "MCI_REALIZE",
    "MCI_WINDOW",
    "MCI_PUT",
    "MCI_WHERE",
    "MCI_FREEZE",
    "MCI_UNFREEZE",
    "MCI_LOAD",
    "MCI_UPDATE",
    "MCI_USER_MESSAGES",
    "MCI_LAST",
    "MCI_DEVTYPE_VCR",
    "MCI_DEVTYPE_VIDEODISC",
    "MCI_DEVTYPE_OVERLAY",
    "MCI_DEVTYPE_CD_AUDIO",
    "MCI_DEVTYPE_DAT",
    "MCI_DEVTYPE_SCANNER",
    "MCI_DEVTYPE_ANIMATION",
    "MCI_DEVTYPE_DIGITAL_VIDEO",
    "MCI_DEVTYPE_OTHER",
    "MCI_DEVTYPE_WAVEFORM_AUDIO",
    "MCI_DEVTYPE_SEQUENCER",
    "MCI_DEVTYPE_FIRST",
    "MCI_DEVTYPE_LAST",
    "MCI_DEVTYPE_FIRST_USER",
    "MCI_FORMAT_MILLISECONDS",
    "MCI_FORMAT_HMS",
    "MCI_FORMAT_MSF",
    "MCI_FORMAT_FRAMES",
    "MCI_FORMAT_SMPTE_24",
    "MCI_FORMAT_SMPTE_25",
    "MCI_FORMAT_SMPTE_30",
    "MCI_FORMAT_SMPTE_30DROP",
    "MCI_FORMAT_BYTES",
    "MCI_FORMAT_SAMPLES",
    "MCI_FORMAT_TMSF",
    "MCI_NOTIFY_SUCCESSFUL",
    "MCI_NOTIFY_SUPERSEDED",
    "MCI_NOTIFY_ABORTED",
    "MCI_NOTIFY_FAILURE",
    "MCI_NOTIFY",
    "MCI_WAIT",
    "MCI_FROM",
    "MCI_TO",
    "MCI_TRACK",
    "MCI_OPEN_SHAREABLE",
    "MCI_OPEN_ELEMENT",
    "MCI_OPEN_ALIAS",
    "MCI_OPEN_ELEMENT_ID",
    "MCI_OPEN_TYPE_ID",
    "MCI_OPEN_TYPE",
    "MCI_SEEK_TO_START",
    "MCI_SEEK_TO_END",
    "MCI_STATUS_ITEM",
    "MCI_STATUS_START",
    "MCI_STATUS_LENGTH",
    "MCI_STATUS_POSITION",
    "MCI_STATUS_NUMBER_OF_TRACKS",
    "MCI_STATUS_MODE",
    "MCI_STATUS_MEDIA_PRESENT",
    "MCI_STATUS_TIME_FORMAT",
    "MCI_STATUS_READY",
    "MCI_STATUS_CURRENT_TRACK",
    "MCI_INFO_PRODUCT",
    "MCI_INFO_FILE",
    "MCI_INFO_MEDIA_UPC",
    "MCI_INFO_MEDIA_IDENTITY",
    "MCI_INFO_NAME",
    "MCI_INFO_COPYRIGHT",
    "MCI_GETDEVCAPS_ITEM",
    "MCI_GETDEVCAPS_CAN_RECORD",
    "MCI_GETDEVCAPS_HAS_AUDIO",
    "MCI_GETDEVCAPS_HAS_VIDEO",
    "MCI_GETDEVCAPS_DEVICE_TYPE",
    "MCI_GETDEVCAPS_USES_FILES",
    "MCI_GETDEVCAPS_COMPOUND_DEVICE",
    "MCI_GETDEVCAPS_CAN_EJECT",
    "MCI_GETDEVCAPS_CAN_PLAY",
    "MCI_GETDEVCAPS_CAN_SAVE",
    "MCI_SYSINFO_QUANTITY",
    "MCI_SYSINFO_OPEN",
    "MCI_SYSINFO_NAME",
    "MCI_SYSINFO_INSTALLNAME",
    "MCI_SET_DOOR_OPEN",
    "MCI_SET_DOOR_CLOSED",
    "MCI_SET_TIME_FORMAT",
    "MCI_SET_AUDIO",
    "MCI_SET_VIDEO",
    "MCI_SET_ON",
    "MCI_SET_OFF",
    "MCI_SET_AUDIO_ALL",
    "MCI_SET_AUDIO_LEFT",
    "MCI_SET_AUDIO_RIGHT",
    "MCI_BREAK_KEY",
    "MCI_BREAK_HWND",
    "MCI_BREAK_OFF",
    "MCI_RECORD_INSERT",
    "MCI_RECORD_OVERWRITE",
    "MCI_SAVE_FILE",
    "MCI_LOAD_FILE",
    "MCI_VD_MODE_PARK",
    "MCI_VD_MEDIA_CLV",
    "MCI_VD_MEDIA_CAV",
    "MCI_VD_MEDIA_OTHER",
    "MCI_VD_FORMAT_TRACK",
    "MCI_VD_PLAY_REVERSE",
    "MCI_VD_PLAY_FAST",
    "MCI_VD_PLAY_SPEED",
    "MCI_VD_PLAY_SCAN",
    "MCI_VD_PLAY_SLOW",
    "MCI_VD_SEEK_REVERSE",
    "MCI_VD_STATUS_SPEED",
    "MCI_VD_STATUS_FORWARD",
    "MCI_VD_STATUS_MEDIA_TYPE",
    "MCI_VD_STATUS_SIDE",
    "MCI_VD_STATUS_DISC_SIZE",
    "MCI_VD_GETDEVCAPS_CLV",
    "MCI_VD_GETDEVCAPS_CAV",
    "MCI_VD_SPIN_UP",
    "MCI_VD_SPIN_DOWN",
    "MCI_VD_GETDEVCAPS_CAN_REVERSE",
    "MCI_VD_GETDEVCAPS_FAST_RATE",
    "MCI_VD_GETDEVCAPS_SLOW_RATE",
    "MCI_VD_GETDEVCAPS_NORMAL_RATE",
    "MCI_VD_STEP_FRAMES",
    "MCI_VD_STEP_REVERSE",
    "MCI_VD_ESCAPE_STRING",
    "MCI_CDA_STATUS_TYPE_TRACK",
    "MCI_CDA_TRACK_AUDIO",
    "MCI_CDA_TRACK_OTHER",
    "MCI_WAVE_PCM",
    "MCI_WAVE_MAPPER",
    "MCI_WAVE_OPEN_BUFFER",
    "MCI_WAVE_SET_FORMATTAG",
    "MCI_WAVE_SET_CHANNELS",
    "MCI_WAVE_SET_SAMPLESPERSEC",
    "MCI_WAVE_SET_AVGBYTESPERSEC",
    "MCI_WAVE_SET_BLOCKALIGN",
    "MCI_WAVE_SET_BITSPERSAMPLE",
    "MCI_WAVE_INPUT",
    "MCI_WAVE_OUTPUT",
    "MCI_WAVE_STATUS_FORMATTAG",
    "MCI_WAVE_STATUS_CHANNELS",
    "MCI_WAVE_STATUS_SAMPLESPERSEC",
    "MCI_WAVE_STATUS_AVGBYTESPERSEC",
    "MCI_WAVE_STATUS_BLOCKALIGN",
    "MCI_WAVE_STATUS_BITSPERSAMPLE",
    "MCI_WAVE_STATUS_LEVEL",
    "MCI_WAVE_SET_ANYINPUT",
    "MCI_WAVE_SET_ANYOUTPUT",
    "MCI_WAVE_GETDEVCAPS_INPUTS",
    "MCI_WAVE_GETDEVCAPS_OUTPUTS",
    "MCI_SEQ_FORMAT_SONGPTR",
    "MCI_SEQ_FILE",
    "MCI_SEQ_MIDI",
    "MCI_SEQ_SMPTE",
    "MCI_SEQ_NONE",
    "MCI_SEQ_MAPPER",
    "MCI_SEQ_STATUS_TEMPO",
    "MCI_SEQ_STATUS_PORT",
    "MCI_SEQ_STATUS_SLAVE",
    "MCI_SEQ_STATUS_MASTER",
    "MCI_SEQ_STATUS_OFFSET",
    "MCI_SEQ_STATUS_DIVTYPE",
    "MCI_SEQ_STATUS_NAME",
    "MCI_SEQ_STATUS_COPYRIGHT",
    "MCI_SEQ_SET_TEMPO",
    "MCI_SEQ_SET_PORT",
    "MCI_SEQ_SET_SLAVE",
    "MCI_SEQ_SET_MASTER",
    "MCI_SEQ_SET_OFFSET",
    "MCI_ANIM_OPEN_WS",
    "MCI_ANIM_OPEN_PARENT",
    "MCI_ANIM_OPEN_NOSTATIC",
    "MCI_ANIM_PLAY_SPEED",
    "MCI_ANIM_PLAY_REVERSE",
    "MCI_ANIM_PLAY_FAST",
    "MCI_ANIM_PLAY_SLOW",
    "MCI_ANIM_PLAY_SCAN",
    "MCI_ANIM_STEP_REVERSE",
    "MCI_ANIM_STEP_FRAMES",
    "MCI_ANIM_STATUS_SPEED",
    "MCI_ANIM_STATUS_FORWARD",
    "MCI_ANIM_STATUS_HWND",
    "MCI_ANIM_STATUS_HPAL",
    "MCI_ANIM_STATUS_STRETCH",
    "MCI_ANIM_INFO_TEXT",
    "MCI_ANIM_GETDEVCAPS_CAN_REVERSE",
    "MCI_ANIM_GETDEVCAPS_FAST_RATE",
    "MCI_ANIM_GETDEVCAPS_SLOW_RATE",
    "MCI_ANIM_GETDEVCAPS_NORMAL_RATE",
    "MCI_ANIM_GETDEVCAPS_PALETTES",
    "MCI_ANIM_GETDEVCAPS_CAN_STRETCH",
    "MCI_ANIM_GETDEVCAPS_MAX_WINDOWS",
    "MCI_ANIM_REALIZE_NORM",
    "MCI_ANIM_REALIZE_BKGD",
    "MCI_ANIM_WINDOW_HWND",
    "MCI_ANIM_WINDOW_STATE",
    "MCI_ANIM_WINDOW_TEXT",
    "MCI_ANIM_WINDOW_ENABLE_STRETCH",
    "MCI_ANIM_WINDOW_DISABLE_STRETCH",
    "MCI_ANIM_WINDOW_DEFAULT",
    "MCI_ANIM_RECT",
    "MCI_ANIM_PUT_SOURCE",
    "MCI_ANIM_PUT_DESTINATION",
    "MCI_ANIM_WHERE_SOURCE",
    "MCI_ANIM_WHERE_DESTINATION",
    "MCI_ANIM_UPDATE_HDC",
    "MCI_OVLY_OPEN_WS",
    "MCI_OVLY_OPEN_PARENT",
    "MCI_OVLY_STATUS_HWND",
    "MCI_OVLY_STATUS_STRETCH",
    "MCI_OVLY_INFO_TEXT",
    "MCI_OVLY_GETDEVCAPS_CAN_STRETCH",
    "MCI_OVLY_GETDEVCAPS_CAN_FREEZE",
    "MCI_OVLY_GETDEVCAPS_MAX_WINDOWS",
    "MCI_OVLY_WINDOW_HWND",
    "MCI_OVLY_WINDOW_STATE",
    "MCI_OVLY_WINDOW_TEXT",
    "MCI_OVLY_WINDOW_ENABLE_STRETCH",
    "MCI_OVLY_WINDOW_DISABLE_STRETCH",
    "MCI_OVLY_WINDOW_DEFAULT",
    "MCI_OVLY_RECT",
    "MCI_OVLY_PUT_SOURCE",
    "MCI_OVLY_PUT_DESTINATION",
    "MCI_OVLY_PUT_FRAME",
    "MCI_OVLY_PUT_VIDEO",
    "MCI_OVLY_WHERE_SOURCE",
    "MCI_OVLY_WHERE_DESTINATION",
    "MCI_OVLY_WHERE_FRAME",
    "MCI_OVLY_WHERE_VIDEO",
    "HMMIO",
    "HDRVR",
    "HIC",
    "HVIDEO",
    "KSDATAFORMAT_SUBTYPE_IEEE_FLOAT",
    "ADPCMCOEFSET",
    "ADPCMWAVEFORMAT",
    "DRMWAVEFORMAT",
    "DVIADPCMWAVEFORMAT",
    "IMAADPCMWAVEFORMAT",
    "MEDIASPACEADPCMWAVEFORMAT",
    "SIERRAADPCMWAVEFORMAT",
    "G723_ADPCMWAVEFORMAT",
    "DIGISTDWAVEFORMAT",
    "DIGIFIXWAVEFORMAT",
    "DIALOGICOKIADPCMWAVEFORMAT",
    "YAMAHA_ADPCMWAVEFORMAT",
    "SONARCWAVEFORMAT",
    "TRUESPEECHWAVEFORMAT",
    "ECHOSC1WAVEFORMAT",
    "AUDIOFILE_AF36WAVEFORMAT",
    "APTXWAVEFORMAT",
    "AUDIOFILE_AF10WAVEFORMAT",
    "DOLBYAC2WAVEFORMAT",
    "GSM610WAVEFORMAT",
    "ADPCMEWAVEFORMAT",
    "CONTRESVQLPCWAVEFORMAT",
    "DIGIREALWAVEFORMAT",
    "DIGIADPCMWAVEFORMAT",
    "CONTRESCR10WAVEFORMAT",
    "NMS_VBXADPCMWAVEFORMAT",
    "G721_ADPCMWAVEFORMAT",
    "MSAUDIO1WAVEFORMAT",
    "WMAUDIO2WAVEFORMAT",
    "WMAUDIO3WAVEFORMAT",
    "CREATIVEADPCMWAVEFORMAT",
    "CREATIVEFASTSPEECH8WAVEFORMAT",
    "CREATIVEFASTSPEECH10WAVEFORMAT",
    "FMTOWNS_SND_WAVEFORMAT",
    "OLIGSMWAVEFORMAT",
    "OLIADPCMWAVEFORMAT",
    "OLICELPWAVEFORMAT",
    "OLISBCWAVEFORMAT",
    "OLIOPRWAVEFORMAT",
    "CSIMAADPCMWAVEFORMAT",
    "s_RIFFWAVE_inst",
    "EXBMINFOHEADER",
    "JPEGINFOHEADER",
    "YIELDPROC",
    "MCI_GENERIC_PARMS",
    "MCI_OPEN_PARMSA",
    "MCI_OPEN_PARMSW",
    "MCI_PLAY_PARMS",
    "MCI_SEEK_PARMS",
    "MCI_STATUS_PARMS",
    "MCI_INFO_PARMSA",
    "MCI_INFO_PARMSW",
    "MCI_GETDEVCAPS_PARMS",
    "MCI_SYSINFO_PARMSA",
    "MCI_SYSINFO_PARMSW",
    "MCI_SET_PARMS",
    "MCI_BREAK_PARMS",
    "MCI_SAVE_PARMSA",
    "MCI_SAVE_PARMSW",
    "MCI_LOAD_PARMSA",
    "MCI_LOAD_PARMSW",
    "MCI_RECORD_PARMS",
    "MCI_VD_PLAY_PARMS",
    "MCI_VD_STEP_PARMS",
    "MCI_VD_ESCAPE_PARMSA",
    "MCI_VD_ESCAPE_PARMSW",
    "MCI_WAVE_OPEN_PARMSA",
    "MCI_WAVE_OPEN_PARMSW",
    "MCI_WAVE_DELETE_PARMS",
    "MCI_WAVE_SET_PARMS",
    "MCI_SEQ_SET_PARMS",
    "MCI_ANIM_OPEN_PARMSA",
    "MCI_ANIM_OPEN_PARMSW",
    "MCI_ANIM_PLAY_PARMS",
    "MCI_ANIM_STEP_PARMS",
    "MCI_ANIM_WINDOW_PARMSA",
    "MCI_ANIM_WINDOW_PARMSW",
    "MCI_ANIM_RECT_PARMS",
    "MCI_ANIM_UPDATE_PARMS",
    "MCI_OVLY_OPEN_PARMSA",
    "MCI_OVLY_OPEN_PARMSW",
    "MCI_OVLY_WINDOW_PARMSA",
    "MCI_OVLY_WINDOW_PARMSW",
    "MCI_OVLY_RECT_PARMS",
    "MCI_OVLY_SAVE_PARMSA",
    "MCI_OVLY_SAVE_PARMSW",
    "MCI_OVLY_LOAD_PARMSA",
    "MCI_OVLY_LOAD_PARMSW",
    "DRVCONFIGINFOEX",
    "DRVCONFIGINFO",
    "DRIVERPROC",
    "DRIVERMSGPROC",
    "LPMMIOPROC",
    "MMIOINFO",
    "MMCKINFO",
    "JOYCAPSA",
    "JOYCAPSW",
    "JOYCAPS2A",
    "JOYCAPS2W",
    "JOYINFO",
    "JOYINFOEX",
    "MCI_DGV_RECT_PARMS",
    "MCI_DGV_CAPTURE_PARMSA",
    "MCI_DGV_CAPTURE_PARMSW",
    "MCI_DGV_COPY_PARMS",
    "MCI_DGV_CUE_PARMS",
    "MCI_DGV_CUT_PARMS",
    "MCI_DGV_DELETE_PARMS",
    "MCI_DGV_INFO_PARMSA",
    "MCI_DGV_INFO_PARMSW",
    "MCI_DGV_LIST_PARMSA",
    "MCI_DGV_LIST_PARMSW",
    "MCI_DGV_MONITOR_PARMS",
    "MCI_DGV_OPEN_PARMSA",
    "MCI_DGV_OPEN_PARMSW",
    "MCI_DGV_PASTE_PARMS",
    "MCI_DGV_QUALITY_PARMSA",
    "MCI_DGV_QUALITY_PARMSW",
    "MCI_DGV_RECORD_PARMS",
    "MCI_DGV_RESERVE_PARMSA",
    "MCI_DGV_RESERVE_PARMSW",
    "MCI_DGV_RESTORE_PARMSA",
    "MCI_DGV_RESTORE_PARMSW",
    "MCI_DGV_SAVE_PARMSA",
    "MCI_DGV_SAVE_PARMSW",
    "MCI_DGV_SET_PARMS",
    "MCI_DGV_SETAUDIO_PARMSA",
    "MCI_DGV_SETAUDIO_PARMSW",
    "MCI_DGV_SIGNAL_PARMS",
    "MCI_DGV_SETVIDEO_PARMSA",
    "MCI_DGV_SETVIDEO_PARMSW",
    "MCI_DGV_STATUS_PARMSA",
    "MCI_DGV_STATUS_PARMSW",
    "MCI_DGV_STEP_PARMS",
    "MCI_DGV_UPDATE_PARMS",
    "MCI_DGV_WINDOW_PARMSA",
    "MCI_DGV_WINDOW_PARMSW",
    "ICOPEN",
    "ICINFO",
    "ICCOMPRESS",
    "ICCOMPRESSFRAMES",
    "ICSETSTATUSPROC",
    "ICDECOMPRESS",
    "ICDECOMPRESSEX",
    "ICDRAWBEGIN",
    "ICDRAW",
    "ICDRAWSUGGEST",
    "ICPALETTE",
    "COMPVARS",
    "DRAWDIBTIME",
    "AVISTREAMINFOW",
    "AVISTREAMINFOA",
    "AVIFILEINFOW",
    "AVIFILEINFOA",
    "AVISAVECALLBACK",
    "AVICOMPRESSOPTIONS",
    "IAVIStream",
    "IAVIStreaming",
    "IAVIEditStream",
    "IAVIPersistFile",
    "IAVIFile",
    "IGetFrame",
    "VIDEOHDR",
    "CHANNEL_CAPS",
    "CAPDRIVERCAPS",
    "CAPSTATUS",
    "CAPTUREPARMS",
    "CAPINFOCHUNK",
    "CAPYIELDCALLBACK",
    "CAPSTATUSCALLBACKW",
    "CAPERRORCALLBACKW",
    "CAPSTATUSCALLBACKA",
    "CAPERRORCALLBACKA",
    "CAPVIDEOCALLBACK",
    "CAPWAVECALLBACK",
    "CAPCONTROLCALLBACK",
    "DRVM_IOCTL_DATA",
    "WAVEOPENDESC",
    "MIDIOPENSTRMID",
    "MIXEROPENDESC",
    "TIMEREVENT",
    "MCI_OPEN_DRIVER_PARMS",
    "LPTASKCALLBACK",
    "VFWWDMExtensionProc",
    "LPFNEXTDEVIO",
    "mciSendCommandA",
    "mciSendCommandW",
    "mciSendCommand",
    "mciSendStringA",
    "mciSendStringW",
    "mciSendString",
    "mciGetDeviceIDA",
    "mciGetDeviceIDW",
    "mciGetDeviceID",
    "mciGetDeviceIDFromElementIDA",
    "mciGetDeviceIDFromElementIDW",
    "mciGetDeviceIDFromElementID",
    "mciGetErrorStringA",
    "mciGetErrorStringW",
    "mciGetErrorString",
    "mciSetYieldProc",
    "mciGetCreatorTask",
    "mciGetYieldProc",
    "mciGetDriverData",
    "mciLoadCommandResource",
    "mciSetDriverData",
    "mciDriverYield",
    "mciDriverNotify",
    "mciFreeCommandResource",
    "CloseDriver",
    "OpenDriver",
    "SendDriverMessage",
    "DrvGetModuleHandle",
    "GetDriverModuleHandle",
    "DefDriverProc",
    "DriverCallback",
    "sndOpenSound",
    "mmDrvInstall",
    "mmioStringToFOURCCA",
    "mmioStringToFOURCCW",
    "mmioStringToFOURCC",
    "mmioInstallIOProcA",
    "mmioInstallIOProcW",
    "mmioInstallIOProc",
    "mmioOpenA",
    "mmioOpenW",
    "mmioOpen",
    "mmioRenameA",
    "mmioRenameW",
    "mmioRename",
    "mmioClose",
    "mmioRead",
    "mmioWrite",
    "mmioSeek",
    "mmioGetInfo",
    "mmioSetInfo",
    "mmioSetBuffer",
    "mmioFlush",
    "mmioAdvance",
    "mmioSendMessage",
    "mmioDescend",
    "mmioAscend",
    "mmioCreateChunk",
    "joyGetPosEx",
    "joyGetNumDevs",
    "joyGetDevCapsA",
    "joyGetDevCapsW",
    "joyGetDevCaps",
    "joyGetPos",
    "joyGetThreshold",
    "joyReleaseCapture",
    "joySetCapture",
    "joySetThreshold",
    "VideoForWindowsVersion",
    "ICInfo",
    "ICInstall",
    "ICRemove",
    "ICGetInfo",
    "ICOpen",
    "ICOpenFunction",
    "ICClose",
    "ICSendMessage",
    "ICCompress",
    "ICDecompress",
    "ICDrawBegin",
    "ICDraw",
    "ICLocate",
    "ICGetDisplayFormat",
    "ICImageCompress",
    "ICImageDecompress",
    "ICCompressorChoose",
    "ICSeqCompressFrameStart",
    "ICSeqCompressFrameEnd",
    "ICSeqCompressFrame",
    "ICCompressorFree",
    "DrawDibOpen",
    "DrawDibClose",
    "DrawDibGetBuffer",
    "DrawDibGetPalette",
    "DrawDibSetPalette",
    "DrawDibChangePalette",
    "DrawDibRealize",
    "DrawDibStart",
    "DrawDibStop",
    "DrawDibBegin",
    "DrawDibDraw",
    "DrawDibEnd",
    "DrawDibTime",
    "DrawDibProfileDisplay",
    "AVIFileInit",
    "AVIFileExit",
    "AVIFileAddRef",
    "AVIFileRelease",
    "AVIFileOpenA",
    "AVIFileOpenW",
    "AVIFileOpen",
    "AVIFileInfoW",
    "AVIFileInfo",
    "AVIFileInfoA",
    "AVIFileGetStream",
    "AVIFileCreateStreamW",
    "AVIFileCreateStream",
    "AVIFileCreateStreamA",
    "AVIFileWriteData",
    "AVIFileReadData",
    "AVIFileEndRecord",
    "AVIStreamAddRef",
    "AVIStreamRelease",
    "AVIStreamInfoW",
    "AVIStreamInfo",
    "AVIStreamInfoA",
    "AVIStreamFindSample",
    "AVIStreamReadFormat",
    "AVIStreamSetFormat",
    "AVIStreamReadData",
    "AVIStreamWriteData",
    "AVIStreamRead",
    "AVIStreamWrite",
    "AVIStreamStart",
    "AVIStreamLength",
    "AVIStreamTimeToSample",
    "AVIStreamSampleToTime",
    "AVIStreamBeginStreaming",
    "AVIStreamEndStreaming",
    "AVIStreamGetFrameOpen",
    "AVIStreamGetFrame",
    "AVIStreamGetFrameClose",
    "AVIStreamOpenFromFileA",
    "AVIStreamOpenFromFileW",
    "AVIStreamOpenFromFile",
    "AVIStreamCreate",
    "AVIMakeCompressedStream",
    "AVISaveA",
    "AVISaveVA",
    "AVISaveW",
    "AVISave",
    "AVISaveVW",
    "AVISaveV",
    "AVISaveOptions",
    "AVISaveOptionsFree",
    "AVIBuildFilterW",
    "AVIBuildFilter",
    "AVIBuildFilterA",
    "AVIMakeFileFromStreams",
    "AVIMakeStreamFromClipboard",
    "AVIPutFileOnClipboard",
    "AVIGetFromClipboard",
    "AVIClearClipboard",
    "CreateEditableStream",
    "EditStreamCut",
    "EditStreamCopy",
    "EditStreamPaste",
    "EditStreamClone",
    "EditStreamSetNameA",
    "EditStreamSetNameW",
    "EditStreamSetName",
    "EditStreamSetInfoW",
    "EditStreamSetInfo",
    "EditStreamSetInfoA",
    "MCIWndCreateA",
    "MCIWndCreateW",
    "MCIWndCreate",
    "MCIWndRegisterClass",
    "capCreateCaptureWindowA",
    "capGetDriverDescriptionA",
    "capCreateCaptureWindowW",
    "capCreateCaptureWindow",
    "capGetDriverDescriptionW",
    "capGetDriverDescription",
    "GetOpenFileNamePreviewA",
    "GetSaveFileNamePreviewA",
    "GetOpenFileNamePreviewW",
    "GetOpenFileNamePreview",
    "GetSaveFileNamePreviewW",
    "GetSaveFileNamePreview",
    "mmTaskCreate",
    "mmTaskBlock",
    "mmTaskSignal",
    "mmTaskYield",
    "mmGetCurrentTask",
]
