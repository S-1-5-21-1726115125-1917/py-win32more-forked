from ctypes import c_void_p, Structure, Union, POINTER, CFUNCTYPE, WINFUNCTYPE, cdll, windll
from win32more.base import c_char_p_no, c_wchar_p_no, Byte, SByte, Char, Int16, UInt16, Int32, UInt32, Int64, UInt64, IntPtr, UIntPtr, Single, Double, String, Boolean, Void, Guid, PROPERTYKEY, COMMETHOD, SUCCEEDED, FAILED
import win32more.Devices.Properties
import win32more.Foundation
import win32more.Graphics.Direct3D12
import win32more.Graphics.Direct3D9
import win32more.Graphics.Dxgi.Common
import win32more.Graphics.Gdi
import win32more.Media.Audio
import win32more.Media.DirectShow
import win32more.Media.DxMediaObjects
import win32more.Media.MediaFoundation
import win32more.Media.Streaming
import win32more.System.Com
import win32more.System.Com.StructuredStorage
import win32more.System.WinRT
import win32more.UI.Shell.PropertiesSystem

import sys
_module = sys.modules[__name__]
def __getattr__(name):
    try:
        f = globals()[f"_define_{name}"]
    except KeyError:
        raise AttributeError(f"module '{__name__}' has no attribute '{name}'") from None
    setattr(_module, name, f())
    return getattr(_module, name)
def __dir__():
    return __all__
MEDIASUBTYPE_None = 'e436eb8e-524f-11ce-9f53-0020af0ba770'
AVENC_H263V_LEVELCOUNT = 8
AVENC_H264V_LEVELCOUNT = 16
AVENC_H264V_MAX_MBBITS = 3200
D3D12_VIDEO_DECODE_PROFILE_MPEG2 = 'ee27417f-5e28-4e65-beea-1d26b508adc9'
D3D12_VIDEO_DECODE_PROFILE_MPEG1_AND_MPEG2 = '86695f12-340e-4f04-9fd3-9253dd327460'
D3D12_VIDEO_DECODE_PROFILE_H264 = '1b81be68-a0c7-11d3-b984-00c04f2e73c5'
D3D12_VIDEO_DECODE_PROFILE_H264_STEREO_PROGRESSIVE = 'd79be8da-0cf1-4c81-b82a-69a4e236f43d'
D3D12_VIDEO_DECODE_PROFILE_H264_STEREO = 'f9aaccbb-c2b6-4cfc-8779-5707b1760552'
D3D12_VIDEO_DECODE_PROFILE_H264_MULTIVIEW = '705b9d82-76cf-49d6-b7e6-ac8872db013c'
D3D12_VIDEO_DECODE_PROFILE_VC1 = '1b81bea3-a0c7-11d3-b984-00c04f2e73c5'
D3D12_VIDEO_DECODE_PROFILE_VC1_D2010 = '1b81bea4-a0c7-11d3-b984-00c04f2e73c5'
D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_SIMPLE = 'efd64d74-c9e8-41d7-a5e9-e9b0e39fa319'
D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_ADVSIMPLE_NOGMC = 'ed418a9f-010d-4eda-9ae3-9a65358d8d2e'
D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN = '5b11d51b-2f4c-4452-bcc3-09f2a1160cc0'
D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN10 = '107af0e0-ef1a-4d19-aba8-67a163073d13'
D3D12_VIDEO_DECODE_PROFILE_VP9 = '463707f8-a1d0-4585-876d-83aa6d60b89e'
D3D12_VIDEO_DECODE_PROFILE_VP9_10BIT_PROFILE2 = 'a4c749ef-6ecf-48aa-8448-50a7a1165ff7'
D3D12_VIDEO_DECODE_PROFILE_VP8 = '90b899ea-3a62-4705-88b3-8df04b2744e7'
D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE0 = 'b8be4ccb-cf53-46ba-8d59-d6b8a6da5d2a'
D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE1 = '6936ff0f-45b1-4163-9cc1-646ef6946108'
D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE2 = '0c5f2aa1-e541-4089-bb7b-98110a19d7c8'
D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2 = '17127009-a00f-4ce1-994e-bf4081f6f3f0'
D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2_420 = '2d80bed6-9cac-4835-9e91-327bbc4f9ee8'
DXVA2_ModeMPEG2_MoComp = 'e6a9f44b-61b0-4563-9ea4-63d2a3c6fe66'
DXVA2_ModeMPEG2_IDCT = 'bf22ad00-03ea-4690-8077-473346209b7e'
DXVA2_ModeMPEG2_VLD = 'ee27417f-5e28-4e65-beea-1d26b508adc9'
DXVA2_ModeMPEG1_VLD = '6f3ec719-3735-42cc-8063-65cc3cb36616'
DXVA2_ModeMPEG2and1_VLD = '86695f12-340e-4f04-9fd3-9253dd327460'
DXVA2_ModeH264_A = '1b81be64-a0c7-11d3-b984-00c04f2e73c5'
DXVA2_ModeH264_B = '1b81be65-a0c7-11d3-b984-00c04f2e73c5'
DXVA2_ModeH264_C = '1b81be66-a0c7-11d3-b984-00c04f2e73c5'
DXVA2_ModeH264_D = '1b81be67-a0c7-11d3-b984-00c04f2e73c5'
DXVA2_ModeH264_E = '1b81be68-a0c7-11d3-b984-00c04f2e73c5'
DXVA2_ModeH264_F = '1b81be69-a0c7-11d3-b984-00c04f2e73c5'
DXVA2_ModeH264_VLD_WithFMOASO_NoFGT = 'd5f04ff9-3418-45d8-9561-32a76aae2ddd'
DXVA2_ModeH264_VLD_Stereo_Progressive_NoFGT = 'd79be8da-0cf1-4c81-b82a-69a4e236f43d'
DXVA2_ModeH264_VLD_Stereo_NoFGT = 'f9aaccbb-c2b6-4cfc-8779-5707b1760552'
DXVA2_ModeH264_VLD_Multiview_NoFGT = '705b9d82-76cf-49d6-b7e6-ac8872db013c'
DXVA2_ModeWMV8_A = '1b81be80-a0c7-11d3-b984-00c04f2e73c5'
DXVA2_ModeWMV8_B = '1b81be81-a0c7-11d3-b984-00c04f2e73c5'
DXVA2_ModeWMV9_A = '1b81be90-a0c7-11d3-b984-00c04f2e73c5'
DXVA2_ModeWMV9_B = '1b81be91-a0c7-11d3-b984-00c04f2e73c5'
DXVA2_ModeWMV9_C = '1b81be94-a0c7-11d3-b984-00c04f2e73c5'
DXVA2_ModeVC1_A = '1b81bea0-a0c7-11d3-b984-00c04f2e73c5'
DXVA2_ModeVC1_B = '1b81bea1-a0c7-11d3-b984-00c04f2e73c5'
DXVA2_ModeVC1_C = '1b81bea2-a0c7-11d3-b984-00c04f2e73c5'
DXVA2_ModeVC1_D = '1b81bea3-a0c7-11d3-b984-00c04f2e73c5'
DXVA2_ModeVC1_D2010 = '1b81bea4-a0c7-11d3-b984-00c04f2e73c5'
DXVA2_NoEncrypt = '1b81bed0-a0c7-11d3-b984-00c04f2e73c5'
DXVA2_VideoProcProgressiveDevice = '5a54a0c9-c7ec-4bd9-8ede-f3c75dc4393b'
DXVA2_VideoProcBobDevice = '335aa36e-7884-43a4-9c91-7f87faf3e37e'
DXVA2_VideoProcSoftwareDevice = '4553d47f-ee7e-4e3f-9475-dbf1376c4810'
DXVA2_ModeMPEG4pt2_VLD_Simple = 'efd64d74-c9e8-41d7-a5e9-e9b0e39fa319'
DXVA2_ModeMPEG4pt2_VLD_AdvSimple_NoGMC = 'ed418a9f-010d-4eda-9ae3-9a65358d8d2e'
DXVA2_ModeMPEG4pt2_VLD_AdvSimple_GMC = 'ab998b5b-4258-44a9-9feb-94e597a6baae'
DXVA2_ModeHEVC_VLD_Main = '5b11d51b-2f4c-4452-bcc3-09f2a1160cc0'
DXVA2_ModeHEVC_VLD_Main10 = '107af0e0-ef1a-4d19-aba8-67a163073d13'
DXVA2_ModeVP9_VLD_Profile0 = '463707f8-a1d0-4585-876d-83aa6d60b89e'
DXVA2_ModeVP9_VLD_10bit_Profile2 = 'a4c749ef-6ecf-48aa-8448-50a7a1165ff7'
DXVA2_ModeVP8_VLD = '90b899ea-3a62-4705-88b3-8df04b2744e7'
DXVA2_E_NOT_INITIALIZED = -2147217408
DXVA2_E_NEW_VIDEO_DEVICE = -2147217407
DXVA2_E_VIDEO_DEVICE_LOCKED = -2147217406
DXVA2_E_NOT_AVAILABLE = -2147217405
MAX_SUBSTREAMS = 15
DXVA2_DECODE_GET_DRIVER_HANDLE = 1829
DXVA2_DECODE_SPECIFY_ENCRYPTED_BLOCKS = 1828
DXVAp_ModeMPEG2_A = '1b81be0a-a0c7-11d3-b984-00c04f2e73c5'
DXVAp_ModeMPEG2_C = '1b81be0c-a0c7-11d3-b984-00c04f2e73c5'
DXVAp_NoEncrypt = '1b81bed0-a0c7-11d3-b984-00c04f2e73c5'
DXVAp_DeinterlaceBobDevice = '335aa36e-7884-43a4-9c91-7f87faf3e37e'
DXVAp_DeinterlaceContainerDevice = '0e85cb93-3046-4ff0-aecc-d58cb5f035fd'
DXVAHD_STREAM_STATE_PRIVATE_IVTC = '9c601e3c-0f33-414c-a739-99540ee42da5'
DXVAHDControlGuid = 'a0386e75-f70c-464c-a9ce-33c44e091623'
DXVAHDETWGUID_CREATEVIDEOPROCESSOR = '681e3d1e-5674-4fb3-a503-2f2055e91f60'
DXVAHDETWGUID_VIDEOPROCESSBLTSTATE = '76c94b5a-193f-4692-9484-a4d999da81a8'
DXVAHDETWGUID_VIDEOPROCESSSTREAMSTATE = '262c0b02-209d-47ed-94d8-82ae02b84aa7'
DXVAHDETWGUID_VIDEOPROCESSBLTHD = 'bef3d435-78c7-4de3-9707-cd1b083b160a'
DXVAHDETWGUID_VIDEOPROCESSBLTHD_STREAM = '27ae473e-a5fc-4be5-b4e3-f24994d3c495'
DXVAHDETWGUID_DESTROYVIDEOPROCESSOR = 'f943f0a0-3f16-43e0-8093-105a986aa5f1'
MR_VIDEO_RENDER_SERVICE = '1092a86c-ab1a-459a-a336-831fbc4d11ff'
MR_VIDEO_MIXER_SERVICE = '073cd2fc-6cf4-40b7-8859-e89552c841f8'
MR_VIDEO_ACCELERATION_SERVICE = 'efef5175-5c7d-4ce2-bbbd-34ff8bca6554'
MR_BUFFER_SERVICE = 'a562248c-9ac6-4ffc-9fba-3af8f8ad1a4d'
VIDEO_ZOOM_RECT = '7aaa1638-1b7f-4c93-bd89-5b9c9fb6fcf0'
MFEVRDLL = 0
MF_SDK_VERSION = 2
MF_API_VERSION = 112
MFSTARTUP_NOSOCKET = 1
MFSTARTUP_LITE = 1
MFSTARTUP_FULL = 0
MF_E_DXGI_DEVICE_NOT_INITIALIZED = -2147217408
MF_E_DXGI_NEW_VIDEO_DEVICE = -2147217407
MF_E_DXGI_VIDEO_DEVICE_LOCKED = -2147217406
MF_1_BYTE_ALIGNMENT = 0
MF_2_BYTE_ALIGNMENT = 1
MF_4_BYTE_ALIGNMENT = 3
MF_8_BYTE_ALIGNMENT = 7
MF_16_BYTE_ALIGNMENT = 15
MF_32_BYTE_ALIGNMENT = 31
MF_64_BYTE_ALIGNMENT = 63
MF_128_BYTE_ALIGNMENT = 127
MF_256_BYTE_ALIGNMENT = 255
MF_512_BYTE_ALIGNMENT = 511
MF_1024_BYTE_ALIGNMENT = 1023
MF_2048_BYTE_ALIGNMENT = 2047
MF_4096_BYTE_ALIGNMENT = 4095
MF_8192_BYTE_ALIGNMENT = 8191
MF_EVENT_SESSIONCAPS = '7e5ebcd0-11b8-4abe-afad-10f6599a7f42'
MF_EVENT_SESSIONCAPS_DELTA = '7e5ebcd1-11b8-4abe-afad-10f6599a7f42'
MFSESSIONCAP_START = 1
MFSESSIONCAP_SEEK = 2
MFSESSIONCAP_PAUSE = 4
MFSESSIONCAP_RATE_FORWARD = 16
MFSESSIONCAP_RATE_REVERSE = 32
MFSESSIONCAP_DOES_NOT_USE_NETWORK = 64
MF_EVENT_TOPOLOGY_STATUS = '30c5018d-9a53-454b-ad9e-6d5f8fa7c43b'
MF_EVENT_START_PRESENTATION_TIME = '5ad914d0-9b45-4a8d-a2c0-81d1e50bfb07'
MF_EVENT_PRESENTATION_TIME_OFFSET = '5ad914d1-9b45-4a8d-a2c0-81d1e50bfb07'
MF_EVENT_START_PRESENTATION_TIME_AT_OUTPUT = '5ad914d2-9b45-4a8d-a2c0-81d1e50bfb07'
MF_EVENT_SOURCE_FAKE_START = 'a8cc55a7-6b31-419f-845d-ffb351a2434b'
MF_EVENT_SOURCE_PROJECTSTART = 'a8cc55a8-6b31-419f-845d-ffb351a2434b'
MF_EVENT_SOURCE_ACTUAL_START = 'a8cc55a9-6b31-419f-845d-ffb351a2434b'
MF_EVENT_SOURCE_TOPOLOGY_CANCELED = 'db62f650-9a5e-4704-acf3-563bc6a73364'
MF_EVENT_SOURCE_CHARACTERISTICS = '47db8490-8b22-4f52-afda-9ce1b2d3cfa8'
MF_EVENT_SOURCE_CHARACTERISTICS_OLD = '47db8491-8b22-4f52-afda-9ce1b2d3cfa8'
MF_EVENT_DO_THINNING = '321ea6fb-dad9-46e4-b31d-d2eae7090e30'
MF_EVENT_SCRUBSAMPLE_TIME = '9ac712b3-dcb8-44d5-8d0c-37455a2782e3'
MF_EVENT_OUTPUT_NODE = '830f1a8b-c060-46dd-a801-1c95dec9b107'
MF_EVENT_MFT_INPUT_STREAM_ID = 'f29c2cca-7ae6-42d2-b284-bf837cc874e2'
MF_EVENT_MFT_CONTEXT = 'b7cd31f1-899e-4b41-80c9-26a896d32977'
MF_EVENT_STREAM_METADATA_KEYDATA = 'cd59a4a1-4a3b-4bbd-8665-72a40fbea776'
MF_EVENT_STREAM_METADATA_CONTENT_KEYIDS = '5063449d-cc29-4fc6-a75a-d247b35af85c'
MF_EVENT_STREAM_METADATA_SYSTEMID = '1ea2ef64-ba16-4a36-8719-fe7560ba32ad'
MFSampleExtension_MaxDecodeFrameSize = 'd3cc654f-f9f3-4a13-889f-f04eb2b5b957'
MFSampleExtension_AccumulatedNonRefPicPercent = '79ea74df-a740-445b-bc98-c9ed1f260eee'
MFSampleExtension_Encryption_ProtectionScheme = 'd054d096-28bb-45da-87ec-74f351871406'
MFSampleExtension_Encryption_CryptByteBlock = '9d84289b-0c7f-4713-ab95-108ab42ad801'
MFSampleExtension_Encryption_SkipByteBlock = '0d550548-8317-4ab1-845f-d06306e293e3'
MFSampleExtension_Encryption_SubSample_Mapping = '8444f27a-69a1-48da-bd08-11cef36830d2'
MFSampleExtension_Encryption_ClearSliceHeaderData = '5509a4f4-320d-4e6c-8d1a-94c66dd20cb0'
MFSampleExtension_Encryption_HardwareProtection_KeyInfoID = '8cbfcceb-94a5-4de1-8231-a85e47cf81e7'
MFSampleExtension_Encryption_HardwareProtection_KeyInfo = 'b2372080-455b-4dd7-9989-1a955784b754'
MFSampleExtension_Encryption_HardwareProtection_VideoDecryptorContext = '693470c8-e837-47a0-88cb-535b905e3582'
MFSampleExtension_Encryption_Opaque_Data = '224d77e5-1391-4ffb-9f41-b432f68c611d'
MFSampleExtension_NALULengthInfo = '19124e7c-ad4b-465f-bb18-20186287b6af'
MFSampleExtension_Encryption_ResumeVideoOutput = 'a435aba5-afde-4cf5-bc1c-f6acaf13949d'
MFSampleExtension_Encryption_NALUTypes = 'b0f067c7-714c-416c-8d59-5f4ddf8913b6'
MFSampleExtension_Encryption_SPSPPSData = 'aede0fa2-0e0c-453c-b7f3-de8693364d11'
MFSampleExtension_Encryption_SEIData = '3cf0e972-4542-4687-9999-585f565fba7d'
MFSampleExtension_Encryption_HardwareProtection = '9a2b2d2b-8270-43e3-8448-994f426e8886'
MFSampleExtension_CleanPoint = '9cdf01d8-a0f0-43ba-b077-eaa06cbd728a'
MFSampleExtension_Discontinuity = '9cdf01d9-a0f0-43ba-b077-eaa06cbd728a'
MFSampleExtension_Token = '8294da66-f328-4805-b551-00deb4c57a61'
MFSampleExtension_ClosedCaption_CEA708 = '26f09068-e744-47dc-aa03-dbf20403bde6'
MFSampleExtension_ClosedCaption_CEA708_MAX_SIZE = 256
MFSampleExtension_DecodeTimestamp = '73a954d4-09e2-4861-befc-94bd97c08e6e'
MFSampleExtension_VideoEncodeQP = 'b2efe478-f979-4c66-b95e-ee2b82c82f36'
MFSampleExtension_VideoEncodePictureType = '973704e6-cd14-483c-8f20-c9fc0928bad5'
MFSampleExtension_FrameCorruption = 'b4dd4a8c-0beb-44c4-8b75-b02b913b04f0'
MFSampleExtension_DirtyRects = '9ba70225-b342-4e97-9126-0b566ab7ea7e'
MFSampleExtension_MoveRegions = 'e2a6c693-3a8b-4b8d-95d0-f60281a12fb7'
MFSampleExtension_HDCP_OptionalHeader = '9a2e7390-121f-455f-8376-c97428e0b540'
MFSampleExtension_HDCP_FrameCounter = '9d389c60-f507-4aa6-a40a-71027a02f3de'
MFSampleExtension_HDCP_StreamID = '177e5d74-c370-4a7a-95a2-36833c01d0af'
MFSampleExtension_Timestamp = '1e436999-69be-4c7a-9369-70068c0260cb'
MFSampleExtension_RepeatFrame = '88be738f-0711-4f42-b458-344aed42ec2f'
MFT_ENCODER_ERROR = 'c8d1eda4-98e4-41d5-9297-44f53852f90e'
MFT_GFX_DRIVER_VERSION_ID_Attribute = 'f34b9093-05e0-4b16-993d-3e2a2cde6ad3'
MFSampleExtension_DescrambleData = '43483be6-4903-4314-b032-2951365936fc'
MFSampleExtension_SampleKeyID = '9ed713c8-9b87-4b26-8297-a93b0c5a8acc'
MFSampleExtension_GenKeyFunc = '441ca1ee-6b1f-4501-903a-de87df42f6ed'
MFSampleExtension_GenKeyCtx = '188120cb-d7da-4b59-9b3e-9252fd37301c'
MFSampleExtension_PacketCrossOffsets = '2789671d-389f-40bb-90d9-c282f77f9abd'
MFSampleExtension_Encryption_SampleID = '6698b84e-0afa-4330-aeb2-1c0a98d7a44d'
MFSampleExtension_Encryption_KeyID = '76376591-795f-4da1-86ed-9d46eca109a9'
MFSampleExtension_Content_KeyID = 'c6c7f5b0-acca-415b-87d9-10441469efc6'
MFSampleExtension_Encryption_SubSampleMappingSplit = 'fe0254b9-2aa5-4edc-99f7-17e89dbf9174'
MFSampleExtension_Interlaced = 'b1d5830a-deb8-40e3-90fa-389943716461'
MFSampleExtension_BottomFieldFirst = '941ce0a3-6ae3-4dda-9a08-a64298340617'
MFSampleExtension_RepeatFirstField = '304d257c-7493-4fbd-b149-9228de8d9a99'
MFSampleExtension_SingleField = '9d85f816-658b-455a-bde0-9fa7e15ab8f9'
MFSampleExtension_DerivedFromTopField = '6852465a-ae1c-4553-8e9b-c3420fcb1637'
MFSampleExtension_MeanAbsoluteDifference = '1cdbde11-08b4-4311-a6dd-0f9f371907aa'
MFSampleExtension_LongTermReferenceFrameInfo = '9154733f-e1bd-41bf-81d3-fcd918f71332'
MFSampleExtension_ROIRectangle = '3414a438-4998-4d2c-be82-be3ca0b24d43'
MFSampleExtension_LastSlice = '2b5d5457-5547-4f07-b8c8-b4a3a9a1daac'
MACROBLOCK_FLAG_SKIP = 1
MACROBLOCK_FLAG_DIRTY = 2
MACROBLOCK_FLAG_MOTION = 4
MACROBLOCK_FLAG_VIDEO = 8
MACROBLOCK_FLAG_HAS_MOTION_VECTOR = 16
MACROBLOCK_FLAG_HAS_QP = 32
MFSampleExtension_FeatureMap = 'a032d165-46fc-400a-b449-49de53e62a6e'
MFSampleExtension_ChromaOnly = '1eb9179c-a01f-4845-8c04-0e65a26eb04f'
MFSampleExtension_PhotoThumbnail = '74bbc85c-c8bb-42dc-b586-da17ffd35dcc'
MFSampleExtension_PhotoThumbnailMediaType = '61ad5420-ebf8-4143-89af-6bf25f672def'
MFSampleExtension_CaptureMetadata = '2ebe23a8-faf5-444a-a6a2-eb810880ab5d'
MFSampleExtension_MDLCacheCookie = '5f002af9-d8f9-41a3-b6c3-a2ad43f647ad'
MF_CAPTURE_METADATA_PHOTO_FRAME_FLASH = '0f9dd6c6-6003-45d8-bd59-f1f53e3d04e8'
MF_CAPTURE_METADATA_FRAME_RAWSTREAM = '9252077b-2680-49b9-ae02-b19075973b70'
MF_CAPTURE_METADATA_FOCUSSTATE = 'a87ee154-997f-465d-b91f-29d53b982b88'
MF_CAPTURE_METADATA_REQUESTED_FRAME_SETTING_ID = 'bb3716d9-8a61-47a4-8197-459c7ff174d5'
MF_CAPTURE_METADATA_EXPOSURE_TIME = '16b9ae99-cd84-4063-879d-a28c7633729e'
MF_CAPTURE_METADATA_EXPOSURE_COMPENSATION = 'd198aa75-4b62-4345-abf3-3c31fa12c299'
MF_CAPTURE_METADATA_ISO_SPEED = 'e528a68f-b2e3-44fe-8b65-07bf4b5a13ff'
MF_CAPTURE_METADATA_LENS_POSITION = 'b5fc8e86-11d1-4e70-819b-723a89fa4520'
MF_CAPTURE_METADATA_SCENE_MODE = '9cc3b54d-5ed3-4bae-b388-7670aef59e13'
MF_CAPTURE_METADATA_FLASH = '4a51520b-fb36-446c-9df2-68171b9a0389'
MF_CAPTURE_METADATA_FLASH_POWER = '9c0e0d49-0205-491a-bc9d-2d6e1f4d5684'
MF_CAPTURE_METADATA_WHITEBALANCE = 'c736fd77-0fb9-4e2e-97a2-fcd490739ee9'
MF_CAPTURE_METADATA_ZOOMFACTOR = 'e50b0b81-e501-42c2-abf2-857ecb13fa5c'
MF_CAPTURE_METADATA_FACEROIS = '864f25a6-349f-46b1-a30e-54cc22928a47'
MF_CAPTURE_METADATA_FACEROITIMESTAMPS = 'e94d50cc-3da0-44d4-bb34-83198a741868'
MF_CAPTURE_METADATA_FACEROICHARACTERIZATIONS = 'b927a1a8-18ef-46d3-b3af-69372f94d9b2'
MF_CAPTURE_METADATA_ISO_GAINS = '05802ac9-0e1d-41c7-a8c8-7e7369f84e1e'
MF_CAPTURE_METADATA_SENSORFRAMERATE = 'db51357e-9d3d-4962-b06d-07ce650d9a0a'
MF_CAPTURE_METADATA_WHITEBALANCE_GAINS = 'e7570c8f-2dcb-4c7c-aace-22ece7cce647'
MF_CAPTURE_METADATA_HISTOGRAM = '85358432-2ef6-4ba9-a3fb-06d82974b895'
MF_CAPTURE_METADATA_EXIF = '2e9575b8-8c31-4a02-8575-42b197b71592'
MF_CAPTURE_METADATA_FRAME_ILLUMINATION = '6d688ffc-63d3-46fe-bada-5b947db0d080'
MF_CAPTURE_METADATA_UVC_PAYLOADHEADER = 'f9f88a87-e1dd-441e-95cb-42e21a64f1d9'
MFSampleExtension_Depth_MinReliableDepth = '5f8582b2-e36b-47c8-9b87-fee1ca72c5b0'
MFSampleExtension_Depth_MaxReliableDepth = 'e45545d1-1f0f-4a32-a8a7-6101a24ea8be'
MF_CAPTURE_METADATA_FIRST_SCANLINE_START_TIME_QPC = '6a2c49f1-e052-46b6-b2d9-73c1558709af'
MF_CAPTURE_METADATA_LAST_SCANLINE_END_TIME_QPC = 'dccadecb-c4d4-400d-b418-10e88525e1f6'
MF_CAPTURE_METADATA_SCANLINE_TIME_QPC_ACCURACY = '4cd79c51-f765-4b09-b1e1-27d1f7ebea09'
MF_CAPTURE_METADATA_SCANLINE_DIRECTION = '6496a3ba-1907-49e6-b0c3-123795f380a9'
MFCAPTURE_METADATA_SCAN_RIGHT_LEFT = 1
MFCAPTURE_METADATA_SCAN_BOTTOM_TOP = 2
MFCAPTURE_METADATA_SCANLINE_VERTICAL = 4
MF_CAPTURE_METADATA_DIGITALWINDOW = '276f72a2-59c8-4f69-97b4-068b8c0ec044'
MF_CAPTURE_METADATA_FRAME_BACKGROUND_MASK = '03f14dd3-75dd-433a-a8e2-1e3f5f2a50a0'
MF_METADATAFACIALEXPRESSION_SMILE = 1
MF_METADATATIMESTAMPS_DEVICE = 1
MF_METADATATIMESTAMPS_PRESENTATION = 2
MF_HISTOGRAM_CHANNEL_Y = 1
MF_HISTOGRAM_CHANNEL_R = 2
MF_HISTOGRAM_CHANNEL_G = 4
MF_HISTOGRAM_CHANNEL_B = 8
MF_HISTOGRAM_CHANNEL_Cb = 16
MF_HISTOGRAM_CHANNEL_Cr = 32
MFT_CATEGORY_VIDEO_DECODER = 'd6c02d4b-6833-45b4-971a-05a4b04bab91'
MFT_CATEGORY_VIDEO_ENCODER = 'f79eac7d-e545-4387-bdee-d647d7bde42a'
MFT_CATEGORY_VIDEO_EFFECT = '12e17c21-532c-4a6e-8a1c-40825a736397'
MFT_CATEGORY_MULTIPLEXER = '059c561e-05ae-4b61-b69d-55b61ee54a7b'
MFT_CATEGORY_DEMULTIPLEXER = 'a8700a7a-939b-44c5-99d7-76226b23b3f1'
MFT_CATEGORY_AUDIO_DECODER = '9ea73fb4-ef7a-4559-8d5d-719d8f0426c7'
MFT_CATEGORY_AUDIO_ENCODER = '91c64bd0-f91e-4d8c-9276-db248279d975'
MFT_CATEGORY_AUDIO_EFFECT = '11064c48-3648-4ed0-932e-05ce8ac811b7'
MFT_CATEGORY_VIDEO_PROCESSOR = '302ea3fc-aa5f-47f9-9f7a-c2188bb16302'
MFT_CATEGORY_OTHER = '90175d57-b7ea-4901-aeb3-933a8747756f'
MFT_CATEGORY_ENCRYPTOR = 'b0c687be-01cd-44b5-b8b2-7c1d7e058b1f'
MFT_CATEGORY_VIDEO_RENDERER_EFFECT = '145cd8b4-92f4-4b23-8ae7-e0df06c2da95'
MFT_ENUM_VIDEO_RENDERER_EXTENSION_PROFILE = '62c56928-9a4e-443b-b9dc-cac830c24100'
MFT_ENUM_ADAPTER_LUID = '1d39518c-e220-4da8-a07f-ba172552d6b1'
MFT_SUPPORT_DYNAMIC_FORMAT_CHANGE = '53476a11-3f13-49fb-ac42-ee2733c96741'
LOCAL_D3DFMT_DEFINES = 1
MFVideoFormat_Base = '00000000-0000-0010-8000-00aa00389b71'
MFVideoFormat_RGB32 = '00000016-0000-0010-8000-00aa00389b71'
MFVideoFormat_ARGB32 = '00000015-0000-0010-8000-00aa00389b71'
MFVideoFormat_RGB24 = '00000014-0000-0010-8000-00aa00389b71'
MFVideoFormat_RGB555 = '00000018-0000-0010-8000-00aa00389b71'
MFVideoFormat_RGB565 = '00000017-0000-0010-8000-00aa00389b71'
MFVideoFormat_RGB8 = '00000029-0000-0010-8000-00aa00389b71'
MFVideoFormat_L8 = '00000032-0000-0010-8000-00aa00389b71'
MFVideoFormat_L16 = '00000051-0000-0010-8000-00aa00389b71'
MFVideoFormat_D16 = '00000050-0000-0010-8000-00aa00389b71'
MFVideoFormat_AI44 = '34344941-0000-0010-8000-00aa00389b71'
MFVideoFormat_AYUV = '56555941-0000-0010-8000-00aa00389b71'
MFVideoFormat_YUY2 = '32595559-0000-0010-8000-00aa00389b71'
MFVideoFormat_YVYU = '55595659-0000-0010-8000-00aa00389b71'
MFVideoFormat_YVU9 = '39555659-0000-0010-8000-00aa00389b71'
MFVideoFormat_UYVY = '59565955-0000-0010-8000-00aa00389b71'
MFVideoFormat_NV11 = '3131564e-0000-0010-8000-00aa00389b71'
MFVideoFormat_NV12 = '3231564e-0000-0010-8000-00aa00389b71'
MFVideoFormat_NV21 = '3132564e-0000-0010-8000-00aa00389b71'
MFVideoFormat_YV12 = '32315659-0000-0010-8000-00aa00389b71'
MFVideoFormat_I420 = '30323449-0000-0010-8000-00aa00389b71'
MFVideoFormat_IYUV = '56555949-0000-0010-8000-00aa00389b71'
MFVideoFormat_Y210 = '30313259-0000-0010-8000-00aa00389b71'
MFVideoFormat_Y216 = '36313259-0000-0010-8000-00aa00389b71'
MFVideoFormat_Y410 = '30313459-0000-0010-8000-00aa00389b71'
MFVideoFormat_Y416 = '36313459-0000-0010-8000-00aa00389b71'
MFVideoFormat_Y41P = '50313459-0000-0010-8000-00aa00389b71'
MFVideoFormat_Y41T = '54313459-0000-0010-8000-00aa00389b71'
MFVideoFormat_Y42T = '54323459-0000-0010-8000-00aa00389b71'
MFVideoFormat_P210 = '30313250-0000-0010-8000-00aa00389b71'
MFVideoFormat_P216 = '36313250-0000-0010-8000-00aa00389b71'
MFVideoFormat_P010 = '30313050-0000-0010-8000-00aa00389b71'
MFVideoFormat_P016 = '36313050-0000-0010-8000-00aa00389b71'
MFVideoFormat_v210 = '30313276-0000-0010-8000-00aa00389b71'
MFVideoFormat_v216 = '36313276-0000-0010-8000-00aa00389b71'
MFVideoFormat_v410 = '30313476-0000-0010-8000-00aa00389b71'
MFVideoFormat_MP43 = '3334504d-0000-0010-8000-00aa00389b71'
MFVideoFormat_MP4S = '5334504d-0000-0010-8000-00aa00389b71'
MFVideoFormat_M4S2 = '3253344d-0000-0010-8000-00aa00389b71'
MFVideoFormat_MP4V = '5634504d-0000-0010-8000-00aa00389b71'
MFVideoFormat_WMV1 = '31564d57-0000-0010-8000-00aa00389b71'
MFVideoFormat_WMV2 = '32564d57-0000-0010-8000-00aa00389b71'
MFVideoFormat_WMV3 = '33564d57-0000-0010-8000-00aa00389b71'
MFVideoFormat_WVC1 = '31435657-0000-0010-8000-00aa00389b71'
MFVideoFormat_MSS1 = '3153534d-0000-0010-8000-00aa00389b71'
MFVideoFormat_MSS2 = '3253534d-0000-0010-8000-00aa00389b71'
MFVideoFormat_MPG1 = '3147504d-0000-0010-8000-00aa00389b71'
MFVideoFormat_DVSL = '6c737664-0000-0010-8000-00aa00389b71'
MFVideoFormat_DVSD = '64737664-0000-0010-8000-00aa00389b71'
MFVideoFormat_DVHD = '64687664-0000-0010-8000-00aa00389b71'
MFVideoFormat_DV25 = '35327664-0000-0010-8000-00aa00389b71'
MFVideoFormat_DV50 = '30357664-0000-0010-8000-00aa00389b71'
MFVideoFormat_DVH1 = '31687664-0000-0010-8000-00aa00389b71'
MFVideoFormat_H264 = '34363248-0000-0010-8000-00aa00389b71'
MFVideoFormat_H265 = '35363248-0000-0010-8000-00aa00389b71'
MFVideoFormat_MJPG = '47504a4d-0000-0010-8000-00aa00389b71'
MFVideoFormat_420O = '4f303234-0000-0010-8000-00aa00389b71'
MFVideoFormat_HEVC = '43564548-0000-0010-8000-00aa00389b71'
MFVideoFormat_HEVC_ES = '53564548-0000-0010-8000-00aa00389b71'
MFVideoFormat_VP80 = '30385056-0000-0010-8000-00aa00389b71'
MFVideoFormat_VP90 = '30395056-0000-0010-8000-00aa00389b71'
MFVideoFormat_ORAW = '5741524f-0000-0010-8000-00aa00389b71'
MFVideoFormat_H263 = '33363248-0000-0010-8000-00aa00389b71'
MFVideoFormat_A2R10G10B10 = '0000001f-0000-0010-8000-00aa00389b71'
MFVideoFormat_A16B16G16R16F = '00000071-0000-0010-8000-00aa00389b71'
MFVideoFormat_VP10 = '30315056-0000-0010-8000-00aa00389b71'
MFVideoFormat_AV1 = '31305641-0000-0010-8000-00aa00389b71'
MFVideoFormat_Theora = '6f656874-0000-0010-8000-00aa00389b71'
MFVideoFormat_H264_ES = '3f40f4f0-5622-4ff8-b6d8-a17a584bee5e'
MFVideoFormat_MPEG2 = 'e06d8026-db46-11cf-b4d1-00805f6cbbea'
MFAudioFormat_Base = '00000000-0000-0010-8000-00aa00389b71'
MFAudioFormat_PCM = '00000001-0000-0010-8000-00aa00389b71'
MFAudioFormat_Float = '00000003-0000-0010-8000-00aa00389b71'
MFAudioFormat_DTS = '00000008-0000-0010-8000-00aa00389b71'
MFAudioFormat_Dolby_AC3_SPDIF = '00000092-0000-0010-8000-00aa00389b71'
MFAudioFormat_DRM = '00000009-0000-0010-8000-00aa00389b71'
MFAudioFormat_WMAudioV8 = '00000161-0000-0010-8000-00aa00389b71'
MFAudioFormat_WMAudioV9 = '00000162-0000-0010-8000-00aa00389b71'
MFAudioFormat_WMAudio_Lossless = '00000163-0000-0010-8000-00aa00389b71'
MFAudioFormat_WMASPDIF = '00000164-0000-0010-8000-00aa00389b71'
MFAudioFormat_MSP1 = '0000000a-0000-0010-8000-00aa00389b71'
MFAudioFormat_MP3 = '00000055-0000-0010-8000-00aa00389b71'
MFAudioFormat_MPEG = '00000050-0000-0010-8000-00aa00389b71'
MFAudioFormat_AAC = '00001610-0000-0010-8000-00aa00389b71'
MFAudioFormat_ADTS = '00001600-0000-0010-8000-00aa00389b71'
MFAudioFormat_AMR_NB = '00007361-0000-0010-8000-00aa00389b71'
MFAudioFormat_AMR_WB = '00007362-0000-0010-8000-00aa00389b71'
MFAudioFormat_AMR_WP = '00007363-0000-0010-8000-00aa00389b71'
MFAudioFormat_FLAC = '0000f1ac-0000-0010-8000-00aa00389b71'
MFAudioFormat_ALAC = '00006c61-0000-0010-8000-00aa00389b71'
MFAudioFormat_Opus = '0000704f-0000-0010-8000-00aa00389b71'
MFAudioFormat_Dolby_AC4 = '0000ac40-0000-0010-8000-00aa00389b71'
MFAudioFormat_Dolby_AC3 = 'e06d802c-db46-11cf-b4d1-00805f6cbbea'
MFAudioFormat_Dolby_DDPlus = 'a7fb87af-2d02-42fb-a4d4-05cd93843bdd'
MFAudioFormat_Dolby_AC4_V1 = '36b7927c-3d87-4a2a-9196-a21ad9e935e6'
MFAudioFormat_Dolby_AC4_V2 = '7998b2a0-17dd-49b6-8dfa-9b278552a2ac'
MFAudioFormat_Dolby_AC4_V1_ES = '9d8dccc6-d156-4fb8-979c-a85be7d21dfa'
MFAudioFormat_Dolby_AC4_V2_ES = '7e58c9f9-b070-45f4-8ccd-a99a0417c1ac'
MFAudioFormat_Vorbis = '8d2fd10b-5841-4a6b-8905-588fec1aded9'
MFAudioFormat_DTS_RAW = 'e06d8033-db46-11cf-b4d1-00805f6cbbea'
MFAudioFormat_DTS_HD = 'a2e58eb7-0fa9-48bb-a40c-fa0e156d0645'
MFAudioFormat_DTS_XLL = '45b37c1b-8c70-4e59-a7be-a1e42c81c80d'
MFAudioFormat_DTS_LBR = 'c2fe6f0a-4e3c-4df1-9b60-50863091e4b9'
MFAudioFormat_DTS_UHD = '87020117-ace3-42de-b73e-c656706263f8'
MFAudioFormat_DTS_UHDY = '9b9cca00-91b9-4ccc-883a-8f787ac3cc86'
MFAudioFormat_Float_SpatialObjects = 'fa39cd94-bc64-4ab1-9b71-dcd09d5a7e7a'
MFAudioFormat_LPCM = 'e06d8032-db46-11cf-b4d1-00805f6cbbea'
MFAudioFormat_PCM_HDCP = 'a5e7ff01-8411-4acc-a865-5f4941288d80'
MFAudioFormat_Dolby_AC3_HDCP = '97663a80-8ffb-4445-a6ba-792d908f497f'
MFAudioFormat_AAC_HDCP = '419bce76-8b72-400f-adeb-84b57d63484d'
MFAudioFormat_ADTS_HDCP = 'da4963a3-14d8-4dcf-92b7-193eb84363db'
MFAudioFormat_Base_HDCP = '3884b5bc-e277-43fd-983d-038aa8d9b605'
MFVideoFormat_H264_HDCP = '5d0ce9dd-9817-49da-bdfd-f5f5b98f18a6'
MFVideoFormat_HEVC_HDCP = '3cfe0fe6-05c4-47dc-9d70-4bdb2959720f'
MFVideoFormat_Base_HDCP = 'eac3b9d5-bd14-4237-8f1f-bab428e49312'
MFMPEG4Format_Base = '00000000-767a-494d-b478-f29d25dc9037'
MFSubtitleFormat_XML = '2006f94f-29ca-4195-b8db-00ded8ff0c97'
MFSubtitleFormat_TTML = '73e73992-9a10-4356-9557-7194e91e3e54'
MFSubtitleFormat_ATSC = '7fa7faa3-feae-4e16-aedf-36b9acfbb099'
MFSubtitleFormat_WebVTT = 'c886d215-f485-40bb-8db6-fadbc619a45d'
MFSubtitleFormat_SRT = '5e467f2e-77ca-4ca5-8391-d142ed4b76c8'
MFSubtitleFormat_SSA = '57176a1b-1a9e-4eea-abef-c61760198ac4'
MFSubtitleFormat_CustomUserData = '1bb3d849-6614-4d80-8882-ed24aa82da92'
MFSubtitleFormat_PGS = '71f40e4a-1278-4442-b30d-39dd1d7722bc'
MFSubtitleFormat_VobSub = '6b8e40f4-8d2c-4ced-ad91-5960e45b4433'
MF_MT_MAJOR_TYPE = '48eba18e-f8c9-4687-bf11-0a74c9f96a8f'
MF_MT_SUBTYPE = 'f7e34c9a-42e8-4714-b74b-cb29d72c35e5'
MF_MT_ALL_SAMPLES_INDEPENDENT = 'c9173739-5e56-461c-b713-46fb995cb95f'
MF_MT_FIXED_SIZE_SAMPLES = 'b8ebefaf-b718-4e04-b0a9-116775e3321b'
MF_MT_COMPRESSED = '3afd0cee-18f2-4ba5-a110-8bea502e1f92'
MF_MT_SAMPLE_SIZE = 'dad3ab78-1990-408b-bce2-eba673dacc10'
MF_MT_WRAPPED_TYPE = '4d3f7b23-d02f-4e6c-9bee-e4bf2c6c695d'
MF_MT_VIDEO_3D = 'cb5e88cf-7b5b-476b-85aa-1ca5ae187555'
MF_MT_VIDEO_3D_FORMAT = '5315d8a0-87c5-4697-b793-6606c67c049b'
MF_MT_VIDEO_3D_NUM_VIEWS = 'bb077e8a-dcbf-42eb-af60-418df98aa495'
MF_MT_VIDEO_3D_LEFT_IS_BASE = '6d4b7bff-5629-4404-948c-c634f4ce26d4'
MF_MT_VIDEO_3D_FIRST_IS_LEFT = 'ec298493-0ada-4ea1-a4fe-cbbd36ce9331'
MFSampleExtension_3DVideo = 'f86f97a4-dd54-4e2e-9a5e-55fc2d74a005'
MFSampleExtension_3DVideo_SampleFormat = '08671772-e36f-4cff-97b3-d72e20987a48'
MF_MT_VIDEO_ROTATION = 'c380465d-2271-428c-9b83-ecea3b4a85c1'
MF_DEVICESTREAM_MULTIPLEXED_MANAGER = '6ea542b0-281f-4231-a464-fe2f5022501c'
MF_MEDIATYPE_MULTIPLEXED_MANAGER = '13c78fb5-f275-4ea0-bb5f-0249832b0d6e'
MFSampleExtension_MULTIPLEXED_MANAGER = '8dcdee79-6b5a-4c45-8db9-20b395f02fcf'
MF_MT_SECURE = 'c5acc4fd-0304-4ecf-809f-47bc97ff63bd'
MF_DEVICESTREAM_ATTRIBUTE_FRAMESOURCE_TYPES = '17145fd1-1b2b-423c-8001-2b6833ed3588'
MF_MT_ALPHA_MODE = '5d959b0d-4cbf-4d04-919f-3f5f7f284211'
MF_MT_DEPTH_MEASUREMENT = 'fd5ac489-0917-4bb6-9d54-3122bf70144b'
MF_MT_DEPTH_VALUE_UNIT = '21a800f5-3189-4797-beba-f13cd9a31a5e'
MF_MT_VIDEO_NO_FRAME_ORDERING = '3f5b106f-6bc2-4ee3-b7ed-8902c18f5351'
MF_MT_VIDEO_H264_NO_FMOASO = 'ed461cd6-ec9f-416a-a8a3-26d7d31018d7'
MFSampleExtension_ForwardedDecodeUnits = '424c754c-97c8-48d6-8777-fc41f7b60879'
MFSampleExtension_TargetGlobalLuminance = '3f60ef36-31ef-4daf-8360-940397e41ef3'
MFSampleExtension_ForwardedDecodeUnitType = '089e57c7-47d3-4a26-bf9c-4b64fafb5d1e'
MF_MT_FORWARD_CUSTOM_NALU = 'ed336efd-244f-428d-9153-28f399458890'
MF_MT_FORWARD_CUSTOM_SEI = 'e27362f1-b136-41d1-9594-3a7e4febf2d1'
MF_MT_VIDEO_RENDERER_EXTENSION_PROFILE = '8437d4b9-d448-4fcd-9b6b-839bf96c7798'
MF_DECODER_FWD_CUSTOM_SEI_DECODE_ORDER = 'f13bbe3c-36d4-410a-b985-7a951a1e6294'
MF_VIDEO_RENDERER_EFFECT_APP_SERVICE_NAME = 'c6052a80-6d9c-40a3-9db8-f027a25c9ab9'
MF_MT_AUDIO_NUM_CHANNELS = '37e48bf5-645e-4c5b-89de-ada9e29b696a'
MF_MT_AUDIO_SAMPLES_PER_SECOND = '5faeeae7-0290-4c31-9e8a-c534f68d9dba'
MF_MT_AUDIO_FLOAT_SAMPLES_PER_SECOND = 'fb3b724a-cfb5-4319-aefe-6e42b2406132'
MF_MT_AUDIO_AVG_BYTES_PER_SECOND = '1aab75c8-cfef-451c-ab95-ac034b8e1731'
MF_MT_AUDIO_BLOCK_ALIGNMENT = '322de230-9eeb-43bd-ab7a-ff412251541d'
MF_MT_AUDIO_BITS_PER_SAMPLE = 'f2deb57f-40fa-4764-aa33-ed4f2d1ff669'
MF_MT_AUDIO_VALID_BITS_PER_SAMPLE = 'd9bf8d6a-9530-4b7c-9ddf-ff6fd58bbd06'
MF_MT_AUDIO_SAMPLES_PER_BLOCK = 'aab15aac-e13a-4995-9222-501ea15c6877'
MF_MT_AUDIO_CHANNEL_MASK = '55fb5765-644a-4caf-8479-938983bb1588'
MF_MT_AUDIO_FOLDDOWN_MATRIX = '9d62927c-36be-4cf2-b5c4-a3926e3e8711'
MF_MT_AUDIO_WMADRC_PEAKREF = '9d62927d-36be-4cf2-b5c4-a3926e3e8711'
MF_MT_AUDIO_WMADRC_PEAKTARGET = '9d62927e-36be-4cf2-b5c4-a3926e3e8711'
MF_MT_AUDIO_WMADRC_AVGREF = '9d62927f-36be-4cf2-b5c4-a3926e3e8711'
MF_MT_AUDIO_WMADRC_AVGTARGET = '9d629280-36be-4cf2-b5c4-a3926e3e8711'
MF_MT_AUDIO_PREFER_WAVEFORMATEX = 'a901aaba-e037-458a-bdf6-545be2074042'
MF_MT_AAC_PAYLOAD_TYPE = 'bfbabe79-7434-4d1c-94f0-72a3b9e17188'
MF_MT_AAC_AUDIO_PROFILE_LEVEL_INDICATION = '7632f0e6-9538-4d61-acda-ea29c8c14456'
MF_MT_AUDIO_FLAC_MAX_BLOCK_SIZE = '8b81adae-4b5a-4d40-8022-f38d09ca3c5c'
MF_MT_SPATIAL_AUDIO_MAX_DYNAMIC_OBJECTS = 'dcfba24a-2609-4240-a721-3faea76a4df9'
MF_MT_SPATIAL_AUDIO_OBJECT_METADATA_FORMAT_ID = '2ab71bc0-6223-4ba7-ad64-7b94b47ae792'
MF_MT_SPATIAL_AUDIO_OBJECT_METADATA_LENGTH = '094ba8be-d723-489f-92fa-766777b34726'
MF_MT_SPATIAL_AUDIO_MAX_METADATA_ITEMS = '11aa80b4-e0da-47c6-8060-96c1259ae50d'
MF_MT_SPATIAL_AUDIO_MIN_METADATA_ITEM_OFFSET_SPACING = '83e96ec9-1184-417e-8254-9f269158fc06'
MF_MT_SPATIAL_AUDIO_DATA_PRESENT = '6842f6e7-d43e-4ebb-9c9c-c96f41784863'
MF_MT_FRAME_SIZE = '1652c33d-d6b2-4012-b834-72030849a37d'
MF_MT_FRAME_RATE = 'c459a2e8-3d2c-4e44-b132-fee5156c7bb0'
MF_MT_PIXEL_ASPECT_RATIO = 'c6376a1e-8d0a-4027-be45-6d9a0ad39bb6'
MF_MT_DRM_FLAGS = '8772f323-355a-4cc7-bb78-6d61a048ae82'
MF_MT_TIMESTAMP_CAN_BE_DTS = '24974215-1b7b-41e4-8625-ac469f2dedaa'
MF_MT_PAD_CONTROL_FLAGS = '4d0e73e5-80ea-4354-a9d0-1176ceb028ea'
MF_MT_SOURCE_CONTENT_HINT = '68aca3cc-22d0-44e6-85f8-28167197fa38'
MF_MT_VIDEO_CHROMA_SITING = '65df2370-c773-4c33-aa64-843e068efb0c'
MF_MT_INTERLACE_MODE = 'e2724bb8-e676-4806-b4b2-a8d6efb44ccd'
MF_MT_TRANSFER_FUNCTION = '5fb0fce9-be5c-4935-a811-ec838f8eed93'
MF_MT_VIDEO_PRIMARIES = 'dbfbe4d7-0740-4ee0-8192-850ab0e21935'
MF_MT_MAX_LUMINANCE_LEVEL = '50253128-c110-4de4-98ae-46a324fae6da'
MF_MT_MAX_FRAME_AVERAGE_LUMINANCE_LEVEL = '58d4bf57-6f52-4733-a195-a9e29ecf9e27'
MF_MT_MAX_MASTERING_LUMINANCE = 'd6c6b997-272f-4ca1-8d00-8042111a0ff6'
MF_MT_MIN_MASTERING_LUMINANCE = '839a4460-4e7e-4b4f-ae79-cc08905c7b27'
MF_MT_DECODER_USE_MAX_RESOLUTION = '4c547c24-af9a-4f38-96ad-978773cf53e7'
MF_MT_DECODER_MAX_DPB_COUNT = '67be144c-88b7-4ca9-9628-c808d5262217'
MF_MT_CUSTOM_VIDEO_PRIMARIES = '47537213-8cfb-4722-aa34-fbc9e24d77b8'
MF_MT_YUV_MATRIX = '3e23d450-2c75-4d25-a00e-b91670d12327'
MF_MT_VIDEO_LIGHTING = '53a0529c-890b-4216-8bf9-599367ad6d20'
MF_MT_VIDEO_NOMINAL_RANGE = 'c21b8ee5-b956-4071-8daf-325edf5cab11'
MF_MT_GEOMETRIC_APERTURE = '66758743-7e5f-400d-980a-aa8596c85696'
MF_MT_MINIMUM_DISPLAY_APERTURE = 'd7388766-18fe-48c6-a177-ee894867c8c4'
MF_MT_PAN_SCAN_APERTURE = '79614dde-9187-48fb-b8c7-4d52689de649'
MF_MT_PAN_SCAN_ENABLED = '4b7f6bc3-8b13-40b2-a993-abf630b8204e'
MF_MT_AVG_BITRATE = '20332624-fb0d-4d9e-bd0d-cbf6786c102e'
MF_MT_AVG_BIT_ERROR_RATE = '799cabd6-3508-4db4-a3c7-569cd533deb1'
MF_MT_MAX_KEYFRAME_SPACING = 'c16eb52b-73a1-476f-8d62-839d6a020652'
MF_MT_USER_DATA = 'b6bc765f-4c3b-40a4-bd51-2535b66fe09d'
MF_MT_OUTPUT_BUFFER_NUM = 'a505d3ac-f930-436e-8ede-93a509ce23b2'
MF_MT_REALTIME_CONTENT = 'bb12d222-2bdb-425e-91ec-2308e189a58f'
MF_MT_DEFAULT_STRIDE = '644b4e48-1e02-4516-b0eb-c01ca9d49ac6'
MF_MT_PALETTE = '6d283f42-9846-4410-afd9-654d503b1a54'
MF_MT_AM_FORMAT_TYPE = '73d1072d-1870-4174-a063-29ff4ff6c11e'
MF_MT_VIDEO_PROFILE = 'ad76a80b-2d5c-4e0b-b375-64e520137036'
MF_MT_VIDEO_LEVEL = '96f66574-11c5-4015-8666-bff516436da7'
MF_MT_MPEG_START_TIME_CODE = '91f67885-4333-4280-97cd-bd5a6c03a06e'
MF_MT_MPEG2_PROFILE = 'ad76a80b-2d5c-4e0b-b375-64e520137036'
MF_MT_MPEG2_LEVEL = '96f66574-11c5-4015-8666-bff516436da7'
MF_MT_MPEG2_FLAGS = '31e3991d-f701-4b2f-b426-8ae3bda9e04b'
MF_MT_MPEG_SEQUENCE_HEADER = '3c036de7-3ad0-4c9e-9216-ee6d6ac21cb3'
MF_MT_MPEG2_STANDARD = 'a20af9e8-928a-4b26-aaa9-f05c74cac47c'
MF_MT_MPEG2_TIMECODE = '5229ba10-e29d-4f80-a59c-df4f180207d2'
MF_MT_MPEG2_CONTENT_PACKET = '825d55e4-4f12-4197-9eb3-59b6e4710f06'
MF_MT_MPEG2_ONE_FRAME_PER_PACKET = '91a49eb5-1d20-4b42-ace8-804269bf95ed'
MF_MT_MPEG2_HDCP = '168f1b4a-3e91-450f-aea7-e4baeadae5ba'
MF_MT_H264_MAX_CODEC_CONFIG_DELAY = 'f5929986-4c45-4fbb-bb49-6cc534d05b9b'
MF_MT_H264_SUPPORTED_SLICE_MODES = 'c8be1937-4d64-4549-8343-a8086c0bfda5'
MF_MT_H264_SUPPORTED_SYNC_FRAME_TYPES = '89a52c01-f282-48d2-b522-22e6ae633199'
MF_MT_H264_RESOLUTION_SCALING = 'e3854272-f715-4757-ba90-1b696c773457'
MF_MT_H264_SIMULCAST_SUPPORT = '9ea2d63d-53f0-4a34-b94e-9de49a078cb3'
MF_MT_H264_SUPPORTED_RATE_CONTROL_MODES = '6a8ac47e-519c-4f18-9bb3-7eeaaea5594d'
MF_MT_H264_MAX_MB_PER_SEC = '45256d30-7215-4576-9336-b0f1bcd59bb2'
MF_MT_H264_SUPPORTED_USAGES = '60b1a998-dc01-40ce-9736-aba845a2dbdc'
MF_MT_H264_CAPABILITIES = 'bb3bd508-490a-11e0-99e4-1316dfd72085'
MF_MT_H264_SVC_CAPABILITIES = 'f8993abe-d937-4a8f-bbca-6966fe9e1152'
MF_MT_H264_USAGE = '359ce3a5-af00-49ca-a2f4-2ac94ca82b61'
MF_MT_H264_RATE_CONTROL_MODES = '705177d8-45cb-11e0-ac7d-b91ce0d72085'
MF_MT_H264_LAYOUT_PER_STREAM = '85e299b2-90e3-4fe8-b2f5-c067e0bfe57a'
MF_MT_IN_BAND_PARAMETER_SET = '75da5090-910b-4a03-896c-7b898feea5af'
MF_MT_MPEG4_TRACK_TYPE = '54f486dd-9327-4f6d-80ab-6f709ebb4cce'
MF_MT_CONTAINER_RATE_SCALING = '83877f5e-0444-4e28-8479-6db0989b8c09'
MF_MT_DV_AAUX_SRC_PACK_0 = '84bd5d88-0fb8-4ac8-be4b-a8848bef98f3'
MF_MT_DV_AAUX_CTRL_PACK_0 = 'f731004e-1dd1-4515-aabe-f0c06aa536ac'
MF_MT_DV_AAUX_SRC_PACK_1 = '720e6544-0225-4003-a651-0196563a958e'
MF_MT_DV_AAUX_CTRL_PACK_1 = 'cd1f470d-1f04-4fe0-bfb9-d07ae0386ad8'
MF_MT_DV_VAUX_SRC_PACK = '41402d9d-7b57-43c6-b129-2cb997f15009'
MF_MT_DV_VAUX_CTRL_PACK = '2f84e1c4-0da1-4788-938e-0dfbfbb34b48'
MF_MT_ARBITRARY_HEADER = '9e6bd6f5-0109-4f95-84ac-9309153a19fc'
MF_MT_ARBITRARY_FORMAT = '5a75b249-0d7d-49a1-a1c3-e0d87f0cade5'
MF_MT_IMAGE_LOSS_TOLERANT = 'ed062cf4-e34e-4922-be99-934032133d7c'
MF_MT_MPEG4_SAMPLE_DESCRIPTION = '261e9d83-9529-4b8f-a111-8b9c950a81a9'
MF_MT_MPEG4_CURRENT_SAMPLE_ENTRY = '9aa7e155-b64a-4c1d-a500-455d600b6560'
MF_SD_AMBISONICS_SAMPLE3D_DESCRIPTION = 'f715cf3e-a964-4c3f-94ae-9d6ba7264641'
MF_MT_ORIGINAL_4CC = 'd7be3fe0-2bc7-492d-b843-61a1919b70c3'
MF_MT_ORIGINAL_WAVE_FORMAT_TAG = '8cbbc843-9fd9-49c2-882f-a72586c408ad'
MF_MT_FRAME_RATE_RANGE_MIN = 'd2e7558c-dc1f-403f-9a72-d28bb1eb3b5e'
MF_MT_FRAME_RATE_RANGE_MAX = 'e3371d41-b4cf-4a05-bd4e-20b88bb2c4d6'
MF_LOW_LATENCY = '9c27891a-ed7a-40e1-88e8-b22727a024ee'
MF_VIDEO_MAX_MB_PER_SEC = 'e3f2e203-d445-4b8c-9211-ae390d3ba017'
MF_DISABLE_FRAME_CORRUPTION_INFO = '7086e16c-49c5-4201-882a-8538f38cf13a'
MFStreamExtension_CameraExtrinsics = '686196d0-13e2-41d9-9638-ef032c272a52'
MFSampleExtension_CameraExtrinsics = '6b761658-b7ec-4c3b-8225-8623cabec31d'
MFStreamExtension_PinholeCameraIntrinsics = 'dbac0455-0ec8-4aef-9c32-7a3ee3456f53'
MFSampleExtension_PinholeCameraIntrinsics = '4ee3b6c5-6a15-4e72-9761-70c1db8b9fe3'
MFMediaType_Default = '81a412e6-8103-4b06-857f-1862781024ac'
MFMediaType_Audio = '73647561-0000-0010-8000-00aa00389b71'
MFMediaType_Video = '73646976-0000-0010-8000-00aa00389b71'
MFMediaType_Protected = '7b4b6fe6-9d04-4494-be14-7e0bd076c8e4'
MFMediaType_SAMI = 'e69669a0-3dcd-40cb-9e2e-3708387c0616'
MFMediaType_Script = '72178c22-e45b-11d5-bc2a-00b0d0f3f4ab'
MFMediaType_Image = '72178c23-e45b-11d5-bc2a-00b0d0f3f4ab'
MFMediaType_HTML = '72178c24-e45b-11d5-bc2a-00b0d0f3f4ab'
MFMediaType_Binary = '72178c25-e45b-11d5-bc2a-00b0d0f3f4ab'
MFMediaType_FileTransfer = '72178c26-e45b-11d5-bc2a-00b0d0f3f4ab'
MFMediaType_Stream = 'e436eb83-524f-11ce-9f53-0020af0ba770'
MFMediaType_MultiplexedFrames = '6ea542b0-281f-4231-a464-fe2f5022501c'
MFMediaType_Subtitle = 'a6d13581-ed50-4e65-ae08-26065576aacc'
MFMediaType_Perception = '597ff6f9-6ea2-4670-85b4-ea84073fe940'
MFImageFormat_JPEG = '19e4a5aa-5662-4fc5-a0c0-1758028e1057'
MFImageFormat_RGB32 = '00000016-0000-0010-8000-00aa00389b71'
MFStreamFormat_MPEG2Transport = 'e06d8023-db46-11cf-b4d1-00805f6cbbea'
MFStreamFormat_MPEG2Program = '263067d1-d330-45dc-b669-34d986e4e3e1'
AM_MEDIA_TYPE_REPRESENTATION = 'e2e42ad2-132c-491e-a268-3c7c2dca181f'
FORMAT_MFVideoFormat = 'aed4ab2d-7326-43cb-9464-c879cab9c43d'
MFMediaType_Metadata = '2c8fa20c-82bb-4782-90a0-98a2a5bd8ef8'
CLSID_MFSourceResolver = '90eab60f-e43a-4188-bcc4-e47fdf04868c'
MF_DEVICESTREAM_ATTRIBUTE_FACEAUTH_CAPABILITY = 'cb6fd12a-2248-4e41-ad46-e78bb90ab9fc'
MF_DEVICESTREAM_ATTRIBUTE_SECURE_CAPABILITY = '940fd626-ea6e-4684-9840-36bd6ec9fbef'
MEDIASINK_FIXED_STREAMS = 1
MEDIASINK_CANNOT_MATCH_CLOCK = 2
MEDIASINK_RATELESS = 4
MEDIASINK_CLOCK_REQUIRED = 8
MEDIASINK_CAN_PREROLL = 16
MEDIASINK_REQUIRE_REFERENCE_MEDIATYPE = 32
MFCLOCK_FREQUENCY_HNS = 10000000
MFCLOCK_TOLERANCE_UNKNOWN = 50000
MFCLOCK_JITTER_ISR = 1000
MFCLOCK_JITTER_DPC = 4000
MFCLOCK_JITTER_PASSIVE = 10000
PRESENTATION_CURRENT_POSITION = 9223372036854775807
MF_PD_ADAPTIVE_STREAMING = 'ea0d5d97-29f9-488b-ae6b-7d6b4136112b'
MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_CROSSPROCESS = 1
MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_NOPERSIST = 2
MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_DONT_ALLOW_FORMAT_CHANGES = 4
MFRR_INFO_VERSION = 0
MF_USER_MODE_COMPONENT_LOAD = 1
MF_KERNEL_MODE_COMPONENT_LOAD = 2
MF_GRL_LOAD_FAILED = 16
MF_INVALID_GRL_SIGNATURE = 32
MF_GRL_ABSENT = 4096
MF_COMPONENT_REVOKED = 8192
MF_COMPONENT_INVALID_EKU = 16384
MF_COMPONENT_CERT_REVOKED = 32768
MF_COMPONENT_INVALID_ROOT = 65536
MF_COMPONENT_HS_CERT_REVOKED = 131072
MF_COMPONENT_LS_CERT_REVOKED = 262144
MF_BOOT_DRIVER_VERIFICATION_FAILED = 1048576
MF_TEST_SIGNED_COMPONENT_LOADING = 16777216
MF_MINCRYPT_FAILURE = 268435456
SHA_HASH_LEN = 20
MFSEQUENCER_INVALID_ELEMENT_ID = 4294967295
MF_WRAPPED_BUFFER_SERVICE = 'ab544072-c269-4ebc-a552-1c3b32bed5ca'
CLSID_MPEG2ByteStreamPlugin = '40871c59-ab40-471f-8dc3-1f259d862479'
MFCONTENTPROTECTIONDEVICE_FUNCTIONID_START = 67108864
MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA_FUNCTIONID = 67108864
MF_UNKNOWN_DURATION = 0
MFStreamExtension_ExtendedCameraIntrinsics = 'aa74b3df-9a2c-48d6-8393-5bd1c1a81e6e'
MFSampleExtension_ExtendedCameraIntrinsics = '560bc4a5-4de0-4113-9cdc-832db9740f3d'
MF_INVALID_PRESENTATION_TIME = 9223372036854775808
MF_MEDIATYPE_EQUAL_MAJOR_TYPES = 1
MF_MEDIATYPE_EQUAL_FORMAT_TYPES = 2
MF_MEDIATYPE_EQUAL_FORMAT_DATA = 4
MF_MEDIATYPE_EQUAL_FORMAT_USER_DATA = 8
MFASYNC_FAST_IO_PROCESSING_CALLBACK = 1
MFASYNC_SIGNAL_CALLBACK = 2
MFASYNC_BLOCKING_CALLBACK = 4
MFASYNC_REPLY_CALLBACK = 8
MFASYNC_LOCALIZE_REMOTE_CALLBACK = 16
MFASYNC_CALLBACK_QUEUE_UNDEFINED = 0
MFASYNC_CALLBACK_QUEUE_STANDARD = 1
MFASYNC_CALLBACK_QUEUE_RT = 2
MFASYNC_CALLBACK_QUEUE_IO = 3
MFASYNC_CALLBACK_QUEUE_TIMER = 4
MFASYNC_CALLBACK_QUEUE_MULTITHREADED = 5
MFASYNC_CALLBACK_QUEUE_LONG_FUNCTION = 7
MFASYNC_CALLBACK_QUEUE_PRIVATE_MASK = 4294901760
MFASYNC_CALLBACK_QUEUE_ALL = 4294967295
MFBYTESTREAM_IS_READABLE = 1
MFBYTESTREAM_IS_WRITABLE = 2
MFBYTESTREAM_IS_SEEKABLE = 4
MFBYTESTREAM_IS_REMOTE = 8
MFBYTESTREAM_IS_DIRECTORY = 128
MFBYTESTREAM_HAS_SLOW_SEEK = 256
MFBYTESTREAM_IS_PARTIALLY_DOWNLOADED = 512
MFBYTESTREAM_SHARE_WRITE = 1024
MFBYTESTREAM_DOES_NOT_USE_NETWORK = 2048
MFBYTESTREAM_SEEK_FLAG_CANCEL_PENDING_IO = 1
MF_MEDIA_SHARING_ENGINE_INITIAL_SEEK_TIME = '6f3497f5-d528-4a4f-8dd7-db36657ec4c9'
MF_SHUTDOWN_RENDERER_ON_ENGINE_SHUTDOWN = 'c112d94d-6b9c-48f8-b6f9-7950ff9ab71e'
MF_PREFERRED_SOURCE_URI = '5fc85488-436a-4db8-90af-4db402ae5c57'
MF_SHARING_ENGINE_SHAREDRENDERER = 'efa446a0-73e7-404e-8ae2-fef60af5a32b'
MF_SHARING_ENGINE_CALLBACK = '57dc1e95-d252-43fa-9bbc-180070eefe6d'
MFT_STREAMS_UNLIMITED = 4294967295
MFT_OUTPUT_BOUND_UPPER_UNBOUNDED = 9223372036854775807
OPM_GET_CURRENT_HDCP_SRM_VERSION = '99c5ceff-5f1d-4879-81c1-c52443c9482b'
OPM_GET_CONNECTED_HDCP_DEVICE_INFORMATION = '0db59d74-a992-492e-a0bd-c23fda564e00'
OPM_GET_ACP_AND_CGMSA_SIGNALING = '6629a591-3b79-4cf3-924a-11e8e7811671'
OPM_GET_CONNECTOR_TYPE = '81d0bfd5-6afe-48c2-99c0-95a08f97c5da'
OPM_GET_SUPPORTED_PROTECTION_TYPES = '38f2a801-9a6c-48bb-9107-b6696e6f1797'
OPM_GET_VIRTUAL_PROTECTION_LEVEL = 'b2075857-3eda-4d5d-88db-748f8c1a0549'
OPM_GET_ACTUAL_PROTECTION_LEVEL = '1957210a-7766-452a-b99a-d27aed54f03a'
OPM_GET_ACTUAL_OUTPUT_FORMAT = 'd7bf1ba3-ad13-4f8e-af98-0dcb3ca204cc'
OPM_GET_ADAPTER_BUS_TYPE = 'c6f4d673-6174-4184-8e35-f6db5200bcba'
OPM_GET_OUTPUT_ID = '72cb6df3-244f-40ce-b09e-20506af6302f'
OPM_GET_DVI_CHARACTERISTICS = 'a470b3bb-5dd7-4172-839c-3d3776e0ebf5'
OPM_GET_CODEC_INFO = '4f374491-8f5f-4445-9dba-95588f6b58b4'
OPM_GET_OUTPUT_HARDWARE_PROTECTION_SUPPORT = '3b129589-2af8-4ef0-96a2-704a845a218e'
OPM_SET_PROTECTION_LEVEL = '9bb9327c-4eb5-4727-9f00-b42b0919c0da'
OPM_SET_ACP_AND_CGMSA_SIGNALING = '09a631a5-d684-4c60-8e4d-d3bb0f0be3ee'
OPM_SET_HDCP_SRM = '8b5ef5d1-c30d-44ff-84a5-ea71dce78f13'
OPM_SET_PROTECTION_LEVEL_ACCORDING_TO_CSS_DVD = '39ce333e-4cc0-44ae-bfcc-da50b5f82e72'
WM_CODEC_ONEPASS_CBR = 1
WM_CODEC_ONEPASS_VBR = 2
WM_CODEC_TWOPASS_CBR = 4
WM_CODEC_TWOPASS_VBR_UNCONSTRAINED = 8
WM_CODEC_TWOPASS_VBR_PEAKCONSTRAINED = 16
SYSFXUI_DONOTSHOW_LOUDNESSEQUALIZATION = 1
SYSFXUI_DONOTSHOW_ROOMCORRECTION = 2
SYSFXUI_DONOTSHOW_BASSMANAGEMENT = 4
SYSFXUI_DONOTSHOW_BASSBOOST = 8
SYSFXUI_DONOTSHOW_HEADPHONEVIRTUALIZATION = 16
SYSFXUI_DONOTSHOW_VIRTUALSURROUND = 32
SYSFXUI_DONOTSHOW_SPEAKERFILLING = 64
SYSFXUI_DONOTSHOW_CHANNELPHANTOMING = 128
AEC_MAX_SYSTEM_MODES = 6
WMAAECMA_E_NO_ACTIVE_RENDER_STREAM = 2278293514
MEDIASUBTYPE_Y41T = '54313459-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_Y42T = '54323459-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_NV11 = '3131564e-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_V216 = '36313256-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_V410 = '30313456-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_v210 = '30313276-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_I420 = '30323449-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_WVC1 = '31435657-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_wvc1 = '31637677-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_WMVA = '41564d57-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_wmva = '61766d77-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_WMVB = '42564d57-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_wmvb = '62766d77-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_WMVR = '52564d57-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_wmvr = '72766d77-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_WMVP = '50564d57-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_wmvp = '70766d77-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_WVP2 = '32505657-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_wvp2 = '32707677-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_WMV3 = '33564d57-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_wmv3 = '33766d77-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_WMV2 = '32564d57-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_wmv2 = '32766d77-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_WMV1 = '31564d57-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_wmv1 = '31766d77-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_MPG4 = '3447504d-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_mpg4 = '3467706d-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_MP42 = '3234504d-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_mp42 = '3234706d-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_MP43 = '3334504d-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_mp43 = '3334706d-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_MP4S = '5334504d-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_mp4s = '7334706d-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_M4S2 = '3253344d-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_m4s2 = '3273346d-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_MSS1 = '3153534d-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_MSS2 = '3253534d-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_MSAUDIO1 = '00000160-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_WMAUDIO2 = '00000161-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_WMAUDIO3 = '00000162-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_WMAUDIO_LOSSLESS = '00000163-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_WMASPDIF = '00000164-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_WMAUDIO4 = '00000168-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_MPEG_ADTS_AAC = '00001600-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_MPEG_RAW_AAC = '00001601-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_MPEG_LOAS = '00001602-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_NOKIA_MPEG_ADTS_AAC = '00001608-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_NOKIA_MPEG_RAW_AAC = '00001609-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_VODAFONE_MPEG_ADTS_AAC = '0000160a-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_VODAFONE_MPEG_RAW_AAC = '0000160b-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_MPEG_HEAAC = '00001610-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_RAW_AAC1 = '000000ff-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_DVM = '00002000-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_DTS2 = '00002001-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_DOLBY_DDPLUS = 'a7fb87af-2d02-42fb-a4d4-05cd93843bdd'
MEDIASUBTYPE_DOLBY_TRUEHD = 'eb27cec4-163e-4ca3-8b74-8e25f91b517e'
MEDIASUBTYPE_DTS_HD = 'a2e58eb7-0fa9-48bb-a40c-fa0e156d0645'
MEDIASUBTYPE_DTS_HD_HRA = 'a61ac364-ad0e-4744-89ff-213ce0df8804'
MEDIASUBTYPE_h264 = '34363268-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_AVC1 = '31435641-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_X264 = '34363258-0000-0010-8000-00aa00389b71'
MEDIASUBTYPE_x264 = '34363278-0000-0010-8000-00aa00389b71'
MF_VIDEODSP_MODE = '16d720f0-768c-11de-8a39-0800200c9a66'
MFSampleExtension_VideoDSPMode = 'c12d55cb-d7d9-476d-81f3-69117f163ea0'
CLSID_CTocEntry = 'f22f5e05-585c-4def-8523-6555cfbc0cb3'
CLSID_CTocEntryList = '3a8cccbc-0efd-43a3-b838-f38a552ba237'
CLSID_CToc = '4fe24495-28ce-4920-a4c4-e556e1f0df2a'
CLSID_CTocCollection = '5058292d-a244-4840-ab44-480975c4ffe4'
CLSID_CTocParser = '499eaeea-2737-4849-8bb6-47f107eaf358'
CLSID_CAsfTocParser = '9b77c0f2-8735-46c5-b90f-5f0b303ef6ab'
CLSID_CAviTocParser = '3adce5cc-13c8-4573-b328-ed438eb694f9'
CLSID_CFileIo = '11993195-1244-4840-ab44-480975c4ffe4'
CLSID_CFileClient = 'bfccd195-1244-4840-ab44-480975c4ffe4'
CLSID_CClusterDetectorEx = '47354492-827e-4b8a-b318-c80eba1381f0'
E_TOCPARSER_INVALIDASFFILE = -1728053247
E_TOCPARSER_INVALIDRIFFFILE = -1728053246
TOC_MAX_DESCRIPTION_SIZE = 65535
TOC_ENTRY_MAX_TITLE_SIZE = 65535
MFASFINDEXER_PER_ENTRY_BYTES_DYNAMIC = 65535
MFASFINDEXER_NO_FIXED_INTERVAL = 4294967295
MFASFINDEXER_READ_FOR_REVERSEPLAYBACK_OUTOFDATASEGMENT = 18446744073709551615
MFASFINDEXER_APPROX_SEEK_TIME_UNKNOWN = 18446744073709551615
MFASF_MAX_STREAM_NUMBER = 127
MFASF_INVALID_STREAM_NUMBER = 128
MFASF_PAYLOADEXTENSION_MAX_SIZE = 255
MFASF_PAYLOADEXTENSION_VARIABLE_SIZE = 65535
MFASF_DEFAULT_BUFFER_WINDOW_MS = 3000
FACILITY_MF = 13
FACILITY_MF_WIN32 = 7
MF_E_PLATFORM_NOT_INITIALIZED = -1072875856
MF_E_BUFFERTOOSMALL = -1072875855
MF_E_INVALIDREQUEST = -1072875854
MF_E_INVALIDSTREAMNUMBER = -1072875853
MF_E_INVALIDMEDIATYPE = -1072875852
MF_E_NOTACCEPTING = -1072875851
MF_E_NOT_INITIALIZED = -1072875850
MF_E_UNSUPPORTED_REPRESENTATION = -1072875849
MF_E_NO_MORE_TYPES = -1072875847
MF_E_UNSUPPORTED_SERVICE = -1072875846
MF_E_UNEXPECTED = -1072875845
MF_E_INVALIDNAME = -1072875844
MF_E_INVALIDTYPE = -1072875843
MF_E_INVALID_FILE_FORMAT = -1072875842
MF_E_INVALIDINDEX = -1072875841
MF_E_INVALID_TIMESTAMP = -1072875840
MF_E_UNSUPPORTED_SCHEME = -1072875837
MF_E_UNSUPPORTED_BYTESTREAM_TYPE = -1072875836
MF_E_UNSUPPORTED_TIME_FORMAT = -1072875835
MF_E_NO_SAMPLE_TIMESTAMP = -1072875832
MF_E_NO_SAMPLE_DURATION = -1072875831
MF_E_INVALID_STREAM_DATA = -1072875829
MF_E_RT_UNAVAILABLE = -1072875825
MF_E_UNSUPPORTED_RATE = -1072875824
MF_E_THINNING_UNSUPPORTED = -1072875823
MF_E_REVERSE_UNSUPPORTED = -1072875822
MF_E_UNSUPPORTED_RATE_TRANSITION = -1072875821
MF_E_RATE_CHANGE_PREEMPTED = -1072875820
MF_E_NOT_FOUND = -1072875819
MF_E_NOT_AVAILABLE = -1072875818
MF_E_NO_CLOCK = -1072875817
MF_S_MULTIPLE_BEGIN = 866008
MF_E_MULTIPLE_BEGIN = -1072875815
MF_E_MULTIPLE_SUBSCRIBERS = -1072875814
MF_E_TIMER_ORPHANED = -1072875813
MF_E_STATE_TRANSITION_PENDING = -1072875812
MF_E_UNSUPPORTED_STATE_TRANSITION = -1072875811
MF_E_UNRECOVERABLE_ERROR_OCCURRED = -1072875810
MF_E_SAMPLE_HAS_TOO_MANY_BUFFERS = -1072875809
MF_E_SAMPLE_NOT_WRITABLE = -1072875808
MF_E_INVALID_KEY = -1072875806
MF_E_BAD_STARTUP_VERSION = -1072875805
MF_E_UNSUPPORTED_CAPTION = -1072875804
MF_E_INVALID_POSITION = -1072875803
MF_E_ATTRIBUTENOTFOUND = -1072875802
MF_E_PROPERTY_TYPE_NOT_ALLOWED = -1072875801
MF_E_PROPERTY_TYPE_NOT_SUPPORTED = -1072875800
MF_E_PROPERTY_EMPTY = -1072875799
MF_E_PROPERTY_NOT_EMPTY = -1072875798
MF_E_PROPERTY_VECTOR_NOT_ALLOWED = -1072875797
MF_E_PROPERTY_VECTOR_REQUIRED = -1072875796
MF_E_OPERATION_CANCELLED = -1072875795
MF_E_BYTESTREAM_NOT_SEEKABLE = -1072875794
MF_E_DISABLED_IN_SAFEMODE = -1072875793
MF_E_CANNOT_PARSE_BYTESTREAM = -1072875792
MF_E_SOURCERESOLVER_MUTUALLY_EXCLUSIVE_FLAGS = -1072875791
MF_E_MEDIAPROC_WRONGSTATE = -1072875790
MF_E_RT_THROUGHPUT_NOT_AVAILABLE = -1072875789
MF_E_RT_TOO_MANY_CLASSES = -1072875788
MF_E_RT_WOULDBLOCK = -1072875787
MF_E_NO_BITPUMP = -1072875786
MF_E_RT_OUTOFMEMORY = -1072875785
MF_E_RT_WORKQUEUE_CLASS_NOT_SPECIFIED = -1072875784
MF_E_INSUFFICIENT_BUFFER = -1072860816
MF_E_CANNOT_CREATE_SINK = -1072875782
MF_E_BYTESTREAM_UNKNOWN_LENGTH = -1072875781
MF_E_SESSION_PAUSEWHILESTOPPED = -1072875780
MF_S_ACTIVATE_REPLACED = 866045
MF_E_FORMAT_CHANGE_NOT_SUPPORTED = -1072875778
MF_E_INVALID_WORKQUEUE = -1072875777
MF_E_DRM_UNSUPPORTED = -1072875776
MF_E_UNAUTHORIZED = -1072875775
MF_E_OUT_OF_RANGE = -1072875774
MF_E_INVALID_CODEC_MERIT = -1072875773
MF_E_HW_MFT_FAILED_START_STREAMING = -1072875772
MF_E_OPERATION_IN_PROGRESS = -1072875771
MF_E_HARDWARE_DRM_UNSUPPORTED = -1072875770
MF_E_DURATION_TOO_LONG = -1072875769
MF_E_OPERATION_UNSUPPORTED_AT_D3D_FEATURE_LEVEL = -1072875768
MF_E_UNSUPPORTED_MEDIATYPE_AT_D3D_FEATURE_LEVEL = -1072875767
MF_S_ASF_PARSEINPROGRESS = 1074608792
MF_E_ASF_PARSINGINCOMPLETE = -1072874856
MF_E_ASF_MISSINGDATA = -1072874855
MF_E_ASF_INVALIDDATA = -1072874854
MF_E_ASF_OPAQUEPACKET = -1072874853
MF_E_ASF_NOINDEX = -1072874852
MF_E_ASF_OUTOFRANGE = -1072874851
MF_E_ASF_INDEXNOTLOADED = -1072874850
MF_E_ASF_TOO_MANY_PAYLOADS = -1072874849
MF_E_ASF_UNSUPPORTED_STREAM_TYPE = -1072874848
MF_E_ASF_DROPPED_PACKET = -1072874847
MF_E_NO_EVENTS_AVAILABLE = -1072873856
MF_E_INVALID_STATE_TRANSITION = -1072873854
MF_E_END_OF_STREAM = -1072873852
MF_E_SHUTDOWN = -1072873851
MF_E_MP3_NOTFOUND = -1072873850
MF_E_MP3_OUTOFDATA = -1072873849
MF_E_MP3_NOTMP3 = -1072873848
MF_E_MP3_NOTSUPPORTED = -1072873847
MF_E_NO_DURATION = -1072873846
MF_E_INVALID_FORMAT = -1072873844
MF_E_PROPERTY_NOT_FOUND = -1072873843
MF_E_PROPERTY_READ_ONLY = -1072873842
MF_E_PROPERTY_NOT_ALLOWED = -1072873841
MF_E_MEDIA_SOURCE_NOT_STARTED = -1072873839
MF_E_UNSUPPORTED_FORMAT = -1072873832
MF_E_MP3_BAD_CRC = -1072873831
MF_E_NOT_PROTECTED = -1072873830
MF_E_MEDIA_SOURCE_WRONGSTATE = -1072873829
MF_E_MEDIA_SOURCE_NO_STREAMS_SELECTED = -1072873828
MF_E_CANNOT_FIND_KEYFRAME_SAMPLE = -1072873827
MF_E_UNSUPPORTED_CHARACTERISTICS = -1072873826
MF_E_NO_AUDIO_RECORDING_DEVICE = -1072873825
MF_E_AUDIO_RECORDING_DEVICE_IN_USE = -1072873824
MF_E_AUDIO_RECORDING_DEVICE_INVALIDATED = -1072873823
MF_E_VIDEO_RECORDING_DEVICE_INVALIDATED = -1072873822
MF_E_VIDEO_RECORDING_DEVICE_PREEMPTED = -1072873821
MF_E_NETWORK_RESOURCE_FAILURE = -1072872856
MF_E_NET_WRITE = -1072872855
MF_E_NET_READ = -1072872854
MF_E_NET_REQUIRE_NETWORK = -1072872853
MF_E_NET_REQUIRE_ASYNC = -1072872852
MF_E_NET_BWLEVEL_NOT_SUPPORTED = -1072872851
MF_E_NET_STREAMGROUPS_NOT_SUPPORTED = -1072872850
MF_E_NET_MANUALSS_NOT_SUPPORTED = -1072872849
MF_E_NET_INVALID_PRESENTATION_DESCRIPTOR = -1072872848
MF_E_NET_CACHESTREAM_NOT_FOUND = -1072872847
MF_I_MANUAL_PROXY = 1074610802
MF_E_NET_REQUIRE_INPUT = -1072872844
MF_E_NET_REDIRECT = -1072872843
MF_E_NET_REDIRECT_TO_PROXY = -1072872842
MF_E_NET_TOO_MANY_REDIRECTS = -1072872841
MF_E_NET_TIMEOUT = -1072872840
MF_E_NET_CLIENT_CLOSE = -1072872839
MF_E_NET_BAD_CONTROL_DATA = -1072872838
MF_E_NET_INCOMPATIBLE_SERVER = -1072872837
MF_E_NET_UNSAFE_URL = -1072872836
MF_E_NET_CACHE_NO_DATA = -1072872835
MF_E_NET_EOL = -1072872834
MF_E_NET_BAD_REQUEST = -1072872833
MF_E_NET_INTERNAL_SERVER_ERROR = -1072872832
MF_E_NET_SESSION_NOT_FOUND = -1072872831
MF_E_NET_NOCONNECTION = -1072872830
MF_E_NET_CONNECTION_FAILURE = -1072872829
MF_E_NET_INCOMPATIBLE_PUSHSERVER = -1072872828
MF_E_NET_SERVER_ACCESSDENIED = -1072872827
MF_E_NET_PROXY_ACCESSDENIED = -1072872826
MF_E_NET_CANNOTCONNECT = -1072872825
MF_E_NET_INVALID_PUSH_TEMPLATE = -1072872824
MF_E_NET_INVALID_PUSH_PUBLISHING_POINT = -1072872823
MF_E_NET_BUSY = -1072872822
MF_E_NET_RESOURCE_GONE = -1072872821
MF_E_NET_ERROR_FROM_PROXY = -1072872820
MF_E_NET_PROXY_TIMEOUT = -1072872819
MF_E_NET_SERVER_UNAVAILABLE = -1072872818
MF_E_NET_TOO_MUCH_DATA = -1072872817
MF_E_NET_SESSION_INVALID = -1072872816
MF_E_OFFLINE_MODE = -1072872815
MF_E_NET_UDP_BLOCKED = -1072872814
MF_E_NET_UNSUPPORTED_CONFIGURATION = -1072872813
MF_E_NET_PROTOCOL_DISABLED = -1072872812
MF_E_NET_COMPANION_DRIVER_DISCONNECT = -1072872811
MF_E_ALREADY_INITIALIZED = -1072871856
MF_E_BANDWIDTH_OVERRUN = -1072871855
MF_E_LATE_SAMPLE = -1072871854
MF_E_FLUSH_NEEDED = -1072871853
MF_E_INVALID_PROFILE = -1072871852
MF_E_INDEX_NOT_COMMITTED = -1072871851
MF_E_NO_INDEX = -1072871850
MF_E_CANNOT_INDEX_IN_PLACE = -1072871849
MF_E_MISSING_ASF_LEAKYBUCKET = -1072871848
MF_E_INVALID_ASF_STREAMID = -1072871847
MF_E_STREAMSINK_REMOVED = -1072870856
MF_E_STREAMSINKS_OUT_OF_SYNC = -1072870854
MF_E_STREAMSINKS_FIXED = -1072870853
MF_E_STREAMSINK_EXISTS = -1072870852
MF_E_SAMPLEALLOCATOR_CANCELED = -1072870851
MF_E_SAMPLEALLOCATOR_EMPTY = -1072870850
MF_E_SINK_ALREADYSTOPPED = -1072870849
MF_E_ASF_FILESINK_BITRATE_UNKNOWN = -1072870848
MF_E_SINK_NO_STREAMS = -1072870847
MF_S_SINK_NOT_FINALIZED = 870978
MF_E_METADATA_TOO_LONG = -1072870845
MF_E_SINK_NO_SAMPLES_PROCESSED = -1072870844
MF_E_SINK_HEADERS_NOT_FOUND = -1072870843
MF_E_VIDEO_REN_NO_PROCAMP_HW = -1072869856
MF_E_VIDEO_REN_NO_DEINTERLACE_HW = -1072869855
MF_E_VIDEO_REN_COPYPROT_FAILED = -1072869854
MF_E_VIDEO_REN_SURFACE_NOT_SHARED = -1072869853
MF_E_VIDEO_DEVICE_LOCKED = -1072869852
MF_E_NEW_VIDEO_DEVICE = -1072869851
MF_E_NO_VIDEO_SAMPLE_AVAILABLE = -1072869850
MF_E_NO_AUDIO_PLAYBACK_DEVICE = -1072869756
MF_E_AUDIO_PLAYBACK_DEVICE_IN_USE = -1072869755
MF_E_AUDIO_PLAYBACK_DEVICE_INVALIDATED = -1072869754
MF_E_AUDIO_SERVICE_NOT_RUNNING = -1072869753
MF_E_AUDIO_BUFFER_SIZE_ERROR = -1072869752
MF_E_AUDIO_CLIENT_WRAPPER_SPOOF_ERROR = -1072869751
MF_E_TOPO_INVALID_OPTIONAL_NODE = -1072868850
MF_E_TOPO_CANNOT_FIND_DECRYPTOR = -1072868847
MF_E_TOPO_CODEC_NOT_FOUND = -1072868846
MF_E_TOPO_CANNOT_CONNECT = -1072868845
MF_E_TOPO_UNSUPPORTED = -1072868844
MF_E_TOPO_INVALID_TIME_ATTRIBUTES = -1072868843
MF_E_TOPO_LOOPS_IN_TOPOLOGY = -1072868842
MF_E_TOPO_MISSING_PRESENTATION_DESCRIPTOR = -1072868841
MF_E_TOPO_MISSING_STREAM_DESCRIPTOR = -1072868840
MF_E_TOPO_STREAM_DESCRIPTOR_NOT_SELECTED = -1072868839
MF_E_TOPO_MISSING_SOURCE = -1072868838
MF_E_TOPO_SINK_ACTIVATES_UNSUPPORTED = -1072868837
MF_E_SEQUENCER_UNKNOWN_SEGMENT_ID = -1072864852
MF_S_SEQUENCER_CONTEXT_CANCELED = 876973
MF_E_NO_SOURCE_IN_CACHE = -1072864850
MF_S_SEQUENCER_SEGMENT_AT_END_OF_STREAM = 876975
MF_E_TRANSFORM_TYPE_NOT_SET = -1072861856
MF_E_TRANSFORM_STREAM_CHANGE = -1072861855
MF_E_TRANSFORM_INPUT_REMAINING = -1072861854
MF_E_TRANSFORM_PROFILE_MISSING = -1072861853
MF_E_TRANSFORM_PROFILE_INVALID_OR_CORRUPT = -1072861852
MF_E_TRANSFORM_PROFILE_TRUNCATED = -1072861851
MF_E_TRANSFORM_PROPERTY_PID_NOT_RECOGNIZED = -1072861850
MF_E_TRANSFORM_PROPERTY_VARIANT_TYPE_WRONG = -1072861849
MF_E_TRANSFORM_PROPERTY_NOT_WRITEABLE = -1072861848
MF_E_TRANSFORM_PROPERTY_ARRAY_VALUE_WRONG_NUM_DIM = -1072861847
MF_E_TRANSFORM_PROPERTY_VALUE_SIZE_WRONG = -1072861846
MF_E_TRANSFORM_PROPERTY_VALUE_OUT_OF_RANGE = -1072861845
MF_E_TRANSFORM_PROPERTY_VALUE_INCOMPATIBLE = -1072861844
MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_OUTPUT_MEDIATYPE = -1072861843
MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_INPUT_MEDIATYPE = -1072861842
MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_MEDIATYPE_COMBINATION = -1072861841
MF_E_TRANSFORM_CONFLICTS_WITH_OTHER_CURRENTLY_ENABLED_FEATURES = -1072861840
MF_E_TRANSFORM_NEED_MORE_INPUT = -1072861838
MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_SPKR_CONFIG = -1072861837
MF_E_TRANSFORM_CANNOT_CHANGE_MEDIATYPE_WHILE_PROCESSING = -1072861836
MF_S_TRANSFORM_DO_NOT_PROPAGATE_EVENT = 879989
MF_E_UNSUPPORTED_D3D_TYPE = -1072861834
MF_E_TRANSFORM_ASYNC_LOCKED = -1072861833
MF_E_TRANSFORM_CANNOT_INITIALIZE_ACM_DRIVER = -1072861832
MF_E_TRANSFORM_STREAM_INVALID_RESOLUTION = -1072861831
MF_E_TRANSFORM_ASYNC_MFT_NOT_SUPPORTED = -1072861830
MF_E_TRANSFORM_EXATTRIBUTE_NOT_SUPPORTED = -1072861828
MF_E_LICENSE_INCORRECT_RIGHTS = -1072860856
MF_E_LICENSE_OUTOFDATE = -1072860855
MF_E_LICENSE_REQUIRED = -1072860854
MF_E_DRM_HARDWARE_INCONSISTENT = -1072860853
MF_E_NO_CONTENT_PROTECTION_MANAGER = -1072860852
MF_E_LICENSE_RESTORE_NO_RIGHTS = -1072860851
MF_E_BACKUP_RESTRICTED_LICENSE = -1072860850
MF_E_LICENSE_RESTORE_NEEDS_INDIVIDUALIZATION = -1072860849
MF_S_PROTECTION_NOT_REQUIRED = 880976
MF_E_COMPONENT_REVOKED = -1072860847
MF_E_TRUST_DISABLED = -1072860846
MF_E_WMDRMOTA_NO_ACTION = -1072860845
MF_E_WMDRMOTA_ACTION_ALREADY_SET = -1072860844
MF_E_WMDRMOTA_DRM_HEADER_NOT_AVAILABLE = -1072860843
MF_E_WMDRMOTA_DRM_ENCRYPTION_SCHEME_NOT_SUPPORTED = -1072860842
MF_E_WMDRMOTA_ACTION_MISMATCH = -1072860841
MF_E_WMDRMOTA_INVALID_POLICY = -1072860840
MF_E_POLICY_UNSUPPORTED = -1072860839
MF_E_OPL_NOT_SUPPORTED = -1072860838
MF_E_TOPOLOGY_VERIFICATION_FAILED = -1072860837
MF_E_SIGNATURE_VERIFICATION_FAILED = -1072860836
MF_E_DEBUGGING_NOT_ALLOWED = -1072860835
MF_E_CODE_EXPIRED = -1072860834
MF_E_GRL_VERSION_TOO_LOW = -1072860833
MF_E_GRL_RENEWAL_NOT_FOUND = -1072860832
MF_E_GRL_EXTENSIBLE_ENTRY_NOT_FOUND = -1072860831
MF_E_KERNEL_UNTRUSTED = -1072860830
MF_E_PEAUTH_UNTRUSTED = -1072860829
MF_E_NON_PE_PROCESS = -1072860827
MF_E_REBOOT_REQUIRED = -1072860825
MF_S_WAIT_FOR_POLICY_SET = 881000
MF_S_VIDEO_DISABLED_WITH_UNKNOWN_SOFTWARE_OUTPUT = 881001
MF_E_GRL_INVALID_FORMAT = -1072860822
MF_E_GRL_UNRECOGNIZED_FORMAT = -1072860821
MF_E_ALL_PROCESS_RESTART_REQUIRED = -1072860820
MF_E_PROCESS_RESTART_REQUIRED = -1072860819
MF_E_USERMODE_UNTRUSTED = -1072860818
MF_E_PEAUTH_SESSION_NOT_STARTED = -1072860817
MF_E_PEAUTH_PUBLICKEY_REVOKED = -1072860815
MF_E_GRL_ABSENT = -1072860814
MF_S_PE_TRUSTED = 881011
MF_E_PE_UNTRUSTED = -1072860812
MF_E_PEAUTH_NOT_STARTED = -1072860811
MF_E_INCOMPATIBLE_SAMPLE_PROTECTION = -1072860810
MF_E_PE_SESSIONS_MAXED = -1072860809
MF_E_HIGH_SECURITY_LEVEL_CONTENT_NOT_ALLOWED = -1072860808
MF_E_TEST_SIGNED_COMPONENTS_NOT_ALLOWED = -1072860807
MF_E_ITA_UNSUPPORTED_ACTION = -1072860806
MF_E_ITA_ERROR_PARSING_SAP_PARAMETERS = -1072860805
MF_E_POLICY_MGR_ACTION_OUTOFBOUNDS = -1072860804
MF_E_BAD_OPL_STRUCTURE_FORMAT = -1072860803
MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_PROTECTION_GUID = -1072860802
MF_E_NO_PMP_HOST = -1072860801
MF_E_ITA_OPL_DATA_NOT_INITIALIZED = -1072860800
MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_OUTPUT = -1072860799
MF_E_ITA_UNRECOGNIZED_DIGITAL_VIDEO_OUTPUT = -1072860798
MF_E_RESOLUTION_REQUIRES_PMP_CREATION_CALLBACK = -1072860797
MF_E_INVALID_AKE_CHANNEL_PARAMETERS = -1072860796
MF_E_CONTENT_PROTECTION_SYSTEM_NOT_ENABLED = -1072860795
MF_E_UNSUPPORTED_CONTENT_PROTECTION_SYSTEM = -1072860794
MF_E_DRM_MIGRATION_NOT_SUPPORTED = -1072860793
MF_E_HDCP_AUTHENTICATION_FAILURE = -1072860792
MF_E_HDCP_LINK_FAILURE = -1072860791
MF_E_CLOCK_INVALID_CONTINUITY_KEY = -1072849856
MF_E_CLOCK_NO_TIME_SOURCE = -1072849855
MF_E_CLOCK_STATE_ALREADY_SET = -1072849854
MF_E_CLOCK_NOT_SIMPLE = -1072849853
MF_S_CLOCK_STOPPED = 891972
MF_E_CLOCK_AUDIO_DEVICE_POSITION_UNEXPECTED = 891973
MF_E_CLOCK_AUDIO_RENDER_POSITION_UNEXPECTED = 891974
MF_E_CLOCK_AUDIO_RENDER_TIME_UNEXPECTED = 891975
MF_E_NO_MORE_DROP_MODES = -1072848856
MF_E_NO_MORE_QUALITY_LEVELS = -1072848855
MF_E_DROPTIME_NOT_SUPPORTED = -1072848854
MF_E_QUALITYKNOB_WAIT_LONGER = -1072848853
MF_E_QM_INVALIDSTATE = -1072848852
MF_E_TRANSCODE_NO_CONTAINERTYPE = -1072847856
MF_E_TRANSCODE_PROFILE_NO_MATCHING_STREAMS = -1072847855
MF_E_TRANSCODE_NO_MATCHING_ENCODER = -1072847854
MF_E_TRANSCODE_INVALID_PROFILE = -1072847853
MF_E_ALLOCATOR_NOT_INITIALIZED = -1072846856
MF_E_ALLOCATOR_NOT_COMMITED = -1072846855
MF_E_ALLOCATOR_ALREADY_COMMITED = -1072846854
MF_E_STREAM_ERROR = -1072846853
MF_E_INVALID_STREAM_STATE = -1072846852
MF_E_HW_STREAM_NOT_CONNECTED = -1072846851
MF_E_NO_CAPTURE_DEVICES_AVAILABLE = -1072845856
MF_E_CAPTURE_SINK_OUTPUT_NOT_SET = -1072845855
MF_E_CAPTURE_SINK_MIRROR_ERROR = -1072845854
MF_E_CAPTURE_SINK_ROTATE_ERROR = -1072845853
MF_E_CAPTURE_ENGINE_INVALID_OP = -1072845852
MF_E_CAPTURE_ENGINE_ALL_EFFECTS_REMOVED = -1072845851
MF_E_CAPTURE_SOURCE_NO_INDEPENDENT_PHOTO_STREAM_PRESENT = -1072845850
MF_E_CAPTURE_SOURCE_NO_VIDEO_STREAM_PRESENT = -1072845849
MF_E_CAPTURE_SOURCE_NO_AUDIO_STREAM_PRESENT = -1072845848
MF_E_CAPTURE_SOURCE_DEVICE_EXTENDEDPROP_OP_IN_PROGRESS = -1072845847
MF_E_CAPTURE_PROPERTY_SET_DURING_PHOTO = -1072845846
MF_E_CAPTURE_NO_SAMPLES_IN_QUEUE = -1072845845
MF_E_HW_ACCELERATED_THUMBNAIL_NOT_SUPPORTED = -1072845844
MF_E_UNSUPPORTED_CAPTURE_DEVICE_PRESENT = -1072845843
MF_E_TIMELINECONTROLLER_UNSUPPORTED_SOURCE_TYPE = -1072844856
MF_E_TIMELINECONTROLLER_NOT_ALLOWED = -1072844855
MF_E_TIMELINECONTROLLER_CANNOT_ATTACH = -1072844854
MF_E_MEDIA_EXTENSION_APPSERVICE_CONNECTION_FAILED = -1072843856
MF_E_MEDIA_EXTENSION_APPSERVICE_REQUEST_FAILED = -1072843855
MF_E_MEDIA_EXTENSION_PACKAGE_INTEGRITY_CHECK_FAILED = -1072843854
MF_E_MEDIA_EXTENSION_PACKAGE_LICENSE_INVALID = -1072843853
MF_INDEX_SIZE_ERR = 2154823681
MF_NOT_FOUND_ERR = 2154823688
MF_NOT_SUPPORTED_ERR = 2154823689
MF_INVALID_STATE_ERR = 2154823691
MF_SYNTAX_ERR = 2154823692
MF_INVALID_ACCESS_ERR = 2154823695
MF_QUOTA_EXCEEDED_ERR = 2154823702
MF_PARSE_ERR = 2154823761
MF_TYPE_ERR = 2154840069
DEVPKEY_DeviceInterface_IsVirtualCamera = PROPERTYKEY(Fmtid='6edc630d-c2e3-43b7-b2d1-20525a1af120', Pid=3)
g_wszSpeechFormatCaps = 'SpeechFormatCap'
g_wszWMCPCodecName = '_CODECNAME'
g_wszWMCPSupportedVBRModes = '_SUPPORTEDVBRMODES'
g_wszWMCPAudioVBRSupported = '_VBRENABLED'
g_wszWMCPAudioVBRQuality = '_VBRQUALITY'
g_wszWMCPMaxPasses = '_PASSESRECOMMENDED'
g_wszWMCPDefaultCrisp = '_DEFAULTCRISP'
COPP_ProtectionType_Unknown = -2147483648
COPP_ProtectionType_None = 0
COPP_ProtectionType_HDCP = 1
COPP_ProtectionType_ACP = 2
COPP_ProtectionType_CGMSA = 4
COPP_ProtectionType_Mask = -2147483641
COPP_ProtectionType_Reserved = 2147483640
MF_BYTESTREAM_ORIGIN_NAME = 'fc358288-3cb6-460c-a424-b6681260375a'
MF_BYTESTREAM_CONTENT_TYPE = 'fc358289-3cb6-460c-a424-b6681260375a'
MF_BYTESTREAM_DURATION = 'fc35828a-3cb6-460c-a424-b6681260375a'
MF_BYTESTREAM_LAST_MODIFIED_TIME = 'fc35828b-3cb6-460c-a424-b6681260375a'
MF_BYTESTREAM_IFO_FILE_URI = 'fc35828c-3cb6-460c-a424-b6681260375a'
MF_BYTESTREAM_DLNA_PROFILE_ID = 'fc35828d-3cb6-460c-a424-b6681260375a'
MF_BYTESTREAM_EFFECTIVE_URL = '9afa0209-89d1-42af-8456-1de6b562d691'
MF_BYTESTREAM_TRANSCODED = 'b6c5c282-4dc9-4db9-ab48-cf3b6d8bc5e0'
CLSID_MFByteStreamProxyClassFactory = '770e8e77-4916-441c-a9a7-b342d0eebc71'
MEDeviceStreamCreated = '0252a1cf-3540-43b4-9164-d72eb405fa40'
MF_SA_D3D_AWARE = 'eaa35c29-775e-488e-9b61-b3283e49583b'
MF_SA_REQUIRED_SAMPLE_COUNT = '18802c61-324b-4952-abd0-176ff5c696ff'
MFT_END_STREAMING_AWARE = '70fbc845-b07e-4089-b064-399dc6110f29'
MF_SA_AUDIO_ENDPOINT_AWARE = 'c0381701-805c-42b2-ac8d-e2b4bf21f4f8'
MFT_AUDIO_DECODER_AUDIO_ENDPOINT_ID = 'c7ccdd6e-5398-4695-8be7-51b3e95111bd'
MFT_AUDIO_DECODER_SPATIAL_METADATA_CLIENT = '05987df4-1270-4999-925f-8e939a7c0af7'
MF_DMFT_FRAME_BUFFER_INFO = '396ce1c9-67a9-454c-8797-95a45799d804'
MF_SA_REQUIRED_SAMPLE_COUNT_PROGRESSIVE = 'b172d58e-fa77-4e48-8d2a-1df2d850eac2'
MF_SA_MINIMUM_OUTPUT_SAMPLE_COUNT = '851745d5-c3d6-476d-9527-498ef2d10d18'
MF_SA_MINIMUM_OUTPUT_SAMPLE_COUNT_PROGRESSIVE = '0f5523a5-1cb2-47c5-a550-2eeb84b4d14a'
MFT_SUPPORT_3DVIDEO = '093f81b1-4f2e-4631-8168-7934032a01d3'
MF_ENABLE_3DVIDEO_OUTPUT = 'bdad7bca-0e5f-4b10-ab16-26de381b6293'
MF_SA_D3D11_BINDFLAGS = 'eacf97ad-065c-4408-bee3-fdcbfd128be2'
MF_SA_D3D11_USAGE = 'e85fe442-2ca3-486e-a9c7-109dda609880'
MF_SA_D3D11_AWARE = '206b4fc8-fcf9-4c51-afe3-9764369e33a0'
MF_SA_D3D11_SHARED = '7b8f32c3-6d96-4b89-9203-dd38b61414f3'
MF_SA_D3D11_SHARED_WITHOUT_MUTEX = '39dbd44d-2e44-4931-a4c8-352d3dc42115'
MF_SA_D3D11_ALLOW_DYNAMIC_YUV_TEXTURE = 'ce06d49f-0613-4b9d-86a6-d8c4f9c10075'
MF_SA_D3D11_HW_PROTECTED = '3a8ba9d9-92ca-4307-a391-6999dbf3b6ce'
MF_SA_BUFFERS_PER_SAMPLE = '873c5171-1e3d-4e25-988d-b433ce041983'
MF_SA_D3D11_ALLOCATE_DISPLAYABLE_RESOURCES = 'eeface6d-2ea9-4adf-bbdf-7bbc482a1b6d'
MFT_DECODER_EXPOSE_OUTPUT_TYPES_IN_NATIVE_ORDER = 'ef80833f-f8fa-44d9-80d8-41ed6232670c'
MFT_DECODER_QUALITY_MANAGEMENT_CUSTOM_CONTROL = 'a24e30d7-de25-4558-bbfb-71070a2d332e'
MFT_DECODER_QUALITY_MANAGEMENT_RECOVERY_WITHOUT_ARTIFACTS = 'd8980deb-0a48-425f-8623-611db41d3810'
MFT_REMUX_MARK_I_PICTURE_AS_CLEAN_POINT = '364e8f85-3f2e-436c-b2a2-4440a012a9e8'
MFT_DECODER_FINAL_VIDEO_RESOLUTION_HINT = 'dc2f8496-15c4-407a-b6f0-1b66ab5fbf53'
MFT_ENCODER_SUPPORTS_CONFIG_EVENT = '86a355ae-3a77-4ec4-9f31-01149a4e92de'
MFT_ENUM_HARDWARE_VENDOR_ID_Attribute = '3aecb0cc-035b-4bcc-8185-2b8d551ef3af'
MF_TRANSFORM_ASYNC = 'f81a699a-649a-497d-8c73-29f8fed6ad7a'
MF_TRANSFORM_ASYNC_UNLOCK = 'e5666d6b-3422-4eb6-a421-da7db1f8e207'
MF_TRANSFORM_FLAGS_Attribute = '9359bb7e-6275-46c4-a025-1c01e45f1a86'
MF_TRANSFORM_CATEGORY_Attribute = 'ceabba49-506d-4757-a6ff-66c184987e4e'
MFT_TRANSFORM_CLSID_Attribute = '6821c42b-65a4-4e82-99bc-9a88205ecd0c'
MFT_INPUT_TYPES_Attributes = '4276c9b1-759d-4bf3-9cd0-0d723d138f96'
MFT_OUTPUT_TYPES_Attributes = '8eae8cf3-a44f-4306-ba5c-bf5dda242818'
MFT_ENUM_HARDWARE_URL_Attribute = '2fb866ac-b078-4942-ab6c-003d05cda674'
MFT_FRIENDLY_NAME_Attribute = '314ffbae-5b41-4c95-9c19-4e7d586face3'
MFT_CONNECTED_STREAM_ATTRIBUTE = '71eeb820-a59f-4de2-bcec-38db1dd611a4'
MFT_CONNECTED_TO_HW_STREAM = '34e6e728-06d6-4491-a553-4795650db912'
MFT_PREFERRED_OUTPUTTYPE_Attribute = '7e700499-396a-49ee-b1b4-f628021e8c9d'
MFT_PROCESS_LOCAL_Attribute = '543186e4-4649-4e65-b588-4aa352aff379'
MFT_PREFERRED_ENCODER_PROFILE = '53004909-1ef5-46d7-a18e-5a75f8b5905f'
MFT_HW_TIMESTAMP_WITH_QPC_Attribute = '8d030fb8-cc43-4258-a22e-9210bef89be4'
MFT_FIELDOFUSE_UNLOCK_Attribute = '8ec2e9fd-9148-410d-831e-702439461a8e'
MFT_CODEC_MERIT_Attribute = '88a7cb15-7b07-4a34-9128-e64c6703c4d3'
MFT_ENUM_TRANSCODE_ONLY_ATTRIBUTE = '111ea8cd-b62a-4bdb-89f6-67ffcdc2458b'
MFT_AUDIO_DECODER_DEGRADATION_INFO_ATTRIBUTE = '6c3386ad-ec20-430d-b2a5-505c7178d9c4'
MFT_POLICY_SET_AWARE = '5a633b19-cc39-4fa8-8ca5-59981b7a0018'
MFT_USING_HARDWARE_DRM = '34faa77d-d79e-4957-b8ce-362b2684996c'
MF_WVC1_PROG_SINGLE_SLICE_CONTENT = '67ec2559-0f2f-4420-a4dd-2f8ee7a5738b'
MF_PROGRESSIVE_CODING_CONTENT = '8f020eea-1508-471f-9da6-507d7cfa40db'
MF_NALU_LENGTH_SET = 'a7911d53-12a4-4965-ae70-6eadd6ff0551'
MF_NALU_LENGTH_INFORMATION = '19124e7c-ad4b-465f-bb18-20186287b6af'
MF_USER_DATA_PAYLOAD = 'd1d4985d-dc92-457a-b3a0-651a33a31047'
MF_MPEG4SINK_SPSPPS_PASSTHROUGH = '5601a134-2005-4ad2-b37d-22a6c554deb2'
MF_MPEG4SINK_MOOV_BEFORE_MDAT = 'f672e3ac-e1e6-4f10-b5ec-5f3b30828816'
MF_MPEG4SINK_MINIMUM_PROPERTIES_SIZE = 'dca1ed52-450e-4a22-8c62-4ed452f7a187'
MF_MPEG4SINK_MIN_FRAGMENT_DURATION = 'a30b570c-8efd-45e8-94fe-27c84b5bdff6'
MF_MPEG4SINK_MAX_CODED_SEQUENCES_PER_FRAGMENT = 'fc1b3bd6-692d-4ce5-9299-738aa5463e9a'
MF_SESSION_TOPOLOADER = '1e83d482-1f1c-4571-8405-88f4b2181f71'
MF_SESSION_GLOBAL_TIME = '1e83d482-1f1c-4571-8405-88f4b2181f72'
MF_SESSION_QUALITY_MANAGER = '1e83d482-1f1c-4571-8405-88f4b2181f73'
MF_SESSION_CONTENT_PROTECTION_MANAGER = '1e83d482-1f1c-4571-8405-88f4b2181f74'
MF_SESSION_SERVER_CONTEXT = 'afe5b291-50fa-46e8-b9be-0c0c3ce4b3a5'
MF_SESSION_REMOTE_SOURCE_MODE = 'f4033ef4-9bb3-4378-941f-85a0856bc244'
MF_SESSION_APPROX_EVENT_OCCURRENCE_TIME = '190e852f-6238-42d1-b5af-69ea338ef850'
MF_PMP_SERVER_CONTEXT = '2f00c910-d2cf-4278-8b6a-d077fac3a25f'
MF_TIME_FORMAT_ENTRY_RELATIVE = '4399f178-46d3-4504-afda-20d32e9ba360'
MF_SOURCE_STREAM_SUPPORTS_HW_CONNECTION = 'a38253aa-6314-42fd-a3ce-bb27b6859946'
MF_STREAM_SINK_SUPPORTS_HW_CONNECTION = '9b465cbf-0597-4f9e-9f3c-b97eeef90359'
MF_STREAM_SINK_SUPPORTS_ROTATION = 'b3e96280-bd05-41a5-97ad-8a7fee24b912'
MF_SINK_VIDEO_PTS = '2162bde7-421e-4b90-9b33-e58fbf1d58b6'
MF_SINK_VIDEO_NATIVE_WIDTH = 'e6d6a707-1505-4747-9b10-72d2d158cb3a'
MF_SINK_VIDEO_NATIVE_HEIGHT = 'f0ca6705-490c-43e8-941c-c0b3206b9a65'
MF_SINK_VIDEO_DISPLAY_ASPECT_RATIO_NUMERATOR = 'd0f33b22-b78a-4879-b455-f03ef3fa82cd'
MF_SINK_VIDEO_DISPLAY_ASPECT_RATIO_DENOMINATOR = '6ea1eb97-1fe0-4f10-a6e4-1f4f661564e0'
MF_BD_MVC_PLANE_OFFSET_METADATA = '62a654e4-b76c-4901-9823-2cb615d47318'
MF_LUMA_KEY_ENABLE = '7369820f-76de-43ca-9284-47b8f37e0649'
MF_LUMA_KEY_LOWER = '93d7b8d5-0b81-4715-aea0-8725871621e9'
MF_LUMA_KEY_UPPER = 'd09f39bb-4602-4c31-a706-a12171a5110a'
MF_USER_EXTENDED_ATTRIBUTES = 'c02abac6-feb2-4541-922f-920b43702722'
MF_INDEPENDENT_STILL_IMAGE = 'ea12af41-0710-42c9-a127-daa3e78483a5'
MF_XVP_SAMPLE_LOCK_TIMEOUT = 'aa4ddb29-5134-4363-ac72-83ec4bc10426'
MF_TOPOLOGY_PROJECTSTART = '7ed3f802-86bb-4b3f-b7e4-7cb43afd4b80'
MF_TOPOLOGY_PROJECTSTOP = '7ed3f803-86bb-4b3f-b7e4-7cb43afd4b80'
MF_TOPOLOGY_NO_MARKIN_MARKOUT = '7ed3f804-86bb-4b3f-b7e4-7cb43afd4b80'
MF_TOPOLOGY_DXVA_MODE = '1e8d34f6-f5ab-4e23-bb88-874aa3a1a74d'
MF_TOPOLOGY_ENABLE_XVP_FOR_PLAYBACK = '1967731f-cd78-42fc-b026-0992a56e5693'
MF_TOPOLOGY_STATIC_PLAYBACK_OPTIMIZATIONS = 'b86cac42-41a6-4b79-897a-1ab0e52b4a1b'
MF_TOPOLOGY_PLAYBACK_MAX_DIMS = '5715cf19-5768-44aa-ad6e-8721f1b0f9bb'
MF_TOPOLOGY_HARDWARE_MODE = 'd2d362fd-4e4f-4191-a579-c618b66706af'
MF_TOPOLOGY_PLAYBACK_FRAMERATE = 'c164737a-c2b1-4553-83bb-5a526072448f'
MF_TOPOLOGY_DYNAMIC_CHANGE_NOT_ALLOWED = 'd529950b-d484-4527-a9cd-b1909532b5b0'
MF_TOPOLOGY_ENUMERATE_SOURCE_TYPES = '6248c36d-5d0b-4f40-a0bb-b0b305f77698'
MF_TOPOLOGY_START_TIME_ON_PRESENTATION_SWITCH = 'c8cc113f-7951-4548-aad6-9ed6202e62b3'
MF_DISABLE_LOCALLY_REGISTERED_PLUGINS = '66b16da9-add4-47e0-a16b-5af1fb483634'
MF_LOCAL_PLUGIN_CONTROL_POLICY = 'd91b0085-c86d-4f81-8822-8c68e1d7fa04'
MF_TOPONODE_FLUSH = '494bbce8-b031-4e38-97c4-d5422dd618dc'
MF_TOPONODE_DRAIN = '494bbce9-b031-4e38-97c4-d5422dd618dc'
MF_TOPONODE_D3DAWARE = '494bbced-b031-4e38-97c4-d5422dd618dc'
MF_TOPOLOGY_RESOLUTION_STATUS = '494bbcde-b031-4e38-97c4-d5422dd618dc'
MF_TOPONODE_ERRORCODE = '494bbcee-b031-4e38-97c4-d5422dd618dc'
MF_TOPONODE_CONNECT_METHOD = '494bbcf1-b031-4e38-97c4-d5422dd618dc'
MF_TOPONODE_LOCKED = '494bbcf7-b031-4e38-97c4-d5422dd618dc'
MF_TOPONODE_WORKQUEUE_ID = '494bbcf8-b031-4e38-97c4-d5422dd618dc'
MF_TOPONODE_WORKQUEUE_MMCSS_CLASS = '494bbcf9-b031-4e38-97c4-d5422dd618dc'
MF_TOPONODE_DECRYPTOR = '494bbcfa-b031-4e38-97c4-d5422dd618dc'
MF_TOPONODE_DISCARDABLE = '494bbcfb-b031-4e38-97c4-d5422dd618dc'
MF_TOPONODE_ERROR_MAJORTYPE = '494bbcfd-b031-4e38-97c4-d5422dd618dc'
MF_TOPONODE_ERROR_SUBTYPE = '494bbcfe-b031-4e38-97c4-d5422dd618dc'
MF_TOPONODE_WORKQUEUE_MMCSS_TASKID = '494bbcff-b031-4e38-97c4-d5422dd618dc'
MF_TOPONODE_WORKQUEUE_MMCSS_PRIORITY = '5001f840-2816-48f4-9364-ad1ef661a123'
MF_TOPONODE_WORKQUEUE_ITEM_PRIORITY = 'a1ff99be-5e97-4a53-b494-568c642c0ff3'
MF_TOPONODE_MARKIN_HERE = '494bbd00-b031-4e38-97c4-d5422dd618dc'
MF_TOPONODE_MARKOUT_HERE = '494bbd01-b031-4e38-97c4-d5422dd618dc'
MF_TOPONODE_DECODER = '494bbd02-b031-4e38-97c4-d5422dd618dc'
MF_TOPONODE_MEDIASTART = '835c58ea-e075-4bc7-bcba-4de000df9ae6'
MF_TOPONODE_MEDIASTOP = '835c58eb-e075-4bc7-bcba-4de000df9ae6'
MF_TOPONODE_SOURCE = '835c58ec-e075-4bc7-bcba-4de000df9ae6'
MF_TOPONODE_PRESENTATION_DESCRIPTOR = '835c58ed-e075-4bc7-bcba-4de000df9ae6'
MF_TOPONODE_STREAM_DESCRIPTOR = '835c58ee-e075-4bc7-bcba-4de000df9ae6'
MF_TOPONODE_SEQUENCE_ELEMENTID = '835c58ef-e075-4bc7-bcba-4de000df9ae6'
MF_TOPONODE_TRANSFORM_OBJECTID = '88dcc0c9-293e-4e8b-9aeb-0ad64cc016b0'
MF_TOPONODE_STREAMID = '14932f9b-9087-4bb4-8412-5167145cbe04'
MF_TOPONODE_NOSHUTDOWN_ON_REMOVE = '14932f9c-9087-4bb4-8412-5167145cbe04'
MF_TOPONODE_RATELESS = '14932f9d-9087-4bb4-8412-5167145cbe04'
MF_TOPONODE_DISABLE_PREROLL = '14932f9e-9087-4bb4-8412-5167145cbe04'
MF_TOPONODE_PRIMARYOUTPUT = '6304ef99-16b2-4ebe-9d67-e4c539b3a259'
MF_PD_PMPHOST_CONTEXT = '6c990d31-bb8e-477a-8598-0d5d96fcd88a'
MF_PD_APP_CONTEXT = '6c990d32-bb8e-477a-8598-0d5d96fcd88a'
MF_PD_DURATION = '6c990d33-bb8e-477a-8598-0d5d96fcd88a'
MF_PD_TOTAL_FILE_SIZE = '6c990d34-bb8e-477a-8598-0d5d96fcd88a'
MF_PD_AUDIO_ENCODING_BITRATE = '6c990d35-bb8e-477a-8598-0d5d96fcd88a'
MF_PD_VIDEO_ENCODING_BITRATE = '6c990d36-bb8e-477a-8598-0d5d96fcd88a'
MF_PD_MIME_TYPE = '6c990d37-bb8e-477a-8598-0d5d96fcd88a'
MF_PD_LAST_MODIFIED_TIME = '6c990d38-bb8e-477a-8598-0d5d96fcd88a'
MF_PD_PLAYBACK_ELEMENT_ID = '6c990d39-bb8e-477a-8598-0d5d96fcd88a'
MF_PD_PREFERRED_LANGUAGE = '6c990d3a-bb8e-477a-8598-0d5d96fcd88a'
MF_PD_PLAYBACK_BOUNDARY_TIME = '6c990d3b-bb8e-477a-8598-0d5d96fcd88a'
MF_PD_AUDIO_ISVARIABLEBITRATE = '33026ee0-e387-4582-ae0a-34a2ad3baa18'
MF_SD_LANGUAGE = '00af2180-bdc2-423c-abca-f503593bc121'
MF_SD_PROTECTED = '00af2181-bdc2-423c-abca-f503593bc121'
MF_SD_STREAM_NAME = '4f1b099d-d314-41e5-a781-7fefaa4c501f'
MF_SD_MUTUALLY_EXCLUSIVE = '023ef79c-388d-487f-ac17-696cd6e3c6f5'
MF_ACTIVATE_CUSTOM_VIDEO_MIXER_CLSID = 'ba491360-be50-451e-95ab-6d4accc7dad8'
MF_ACTIVATE_CUSTOM_VIDEO_MIXER_ACTIVATE = 'ba491361-be50-451e-95ab-6d4accc7dad8'
MF_ACTIVATE_CUSTOM_VIDEO_MIXER_FLAGS = 'ba491362-be50-451e-95ab-6d4accc7dad8'
MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_CLSID = 'ba491364-be50-451e-95ab-6d4accc7dad8'
MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_ACTIVATE = 'ba491365-be50-451e-95ab-6d4accc7dad8'
MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_FLAGS = 'ba491366-be50-451e-95ab-6d4accc7dad8'
MF_ACTIVATE_MFT_LOCKED = 'c1f6093c-7f65-4fbd-9e39-5faec3c4fbd7'
MF_ACTIVATE_VIDEO_WINDOW = '9a2dbbdd-f57e-4162-82b9-6831377682d3'
MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS = 'ede4b5e0-f805-4d6c-99b3-db01bf95dfab'
MF_AUDIO_RENDERER_ATTRIBUTE_SESSION_ID = 'ede4b5e3-f805-4d6c-99b3-db01bf95dfab'
MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ID = 'b10aaec3-ef71-4cc3-b873-05a9a08b9f8e'
MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ROLE = '6ba644ff-27c5-4d02-9887-c28619fdb91b'
MF_AUDIO_RENDERER_ATTRIBUTE_STREAM_CATEGORY = 'a9770471-92ec-4df4-94fe-81c36f0c3a7a'
MFENABLETYPE_WMDRMV1_LicenseAcquisition = '4ff6eeaf-0b43-4797-9b85-abf31815e7b0'
MFENABLETYPE_WMDRMV7_LicenseAcquisition = '003306df-4a06-4884-a097-ef6d22ec84a3'
MFENABLETYPE_WMDRMV7_Individualization = 'acd2c84a-b303-4f65-bc2c-2c848d01a989'
MFENABLETYPE_MF_UpdateRevocationInformation = 'e558b0b5-b3c4-44a0-924c-50d178932385'
MFENABLETYPE_MF_UpdateUntrustedComponent = '9879f3d6-cee2-48e6-b573-9767ab172f16'
MFENABLETYPE_MF_RebootRequired = '6d4d3d4b-0ece-4652-8b3a-f2d24260d887'
MF_METADATA_PROVIDER_SERVICE = 'db214084-58a4-4d2e-b84f-6f755b2f7a0d'
MF_PROPERTY_HANDLER_SERVICE = 'a3face02-32b8-41dd-90e7-5fef7c8991b5'
MF_RATE_CONTROL_SERVICE = '866fa297-b802-4bf8-9dc9-5e3b6a9f53c9'
MF_TIMECODE_SERVICE = 'a0d502a7-0eb3-4885-b1b9-9feb0d083454'
MR_POLICY_VOLUME_SERVICE = '1abaa2ac-9d3b-47c6-ab48-c59506de784d'
MR_CAPTURE_POLICY_VOLUME_SERVICE = '24030acd-107a-4265-975c-414e33e65f2a'
MR_STREAM_VOLUME_SERVICE = 'f8b5fa2f-32ef-46f5-b172-1321212fb2c4'
MR_AUDIO_POLICY_SERVICE = '911fd737-6775-4ab0-a614-297862fdac88'
MF_SAMPLEGRABBERSINK_SAMPLE_TIME_OFFSET = '62e3d776-8100-4e03-a6e8-bd3857ac9c47'
MF_SAMPLEGRABBERSINK_IGNORE_CLOCK = '0efda2c0-2b69-4e2e-ab8d-46dcbff7d25d'
MF_QUALITY_SERVICES = 'b7e2be11-2f96-4640-b52c-282365bdf16c'
MF_WORKQUEUE_SERVICES = '8e37d489-41e0-413a-9068-287c886d8dda'
MF_QUALITY_NOTIFY_PROCESSING_LATENCY = 'f6b44af8-604d-46fe-a95d-45479b10c9bc'
MF_QUALITY_NOTIFY_SAMPLE_LAG = '30d15206-ed2a-4760-be17-eb4a9f12295c'
MF_TIME_FORMAT_SEGMENT_OFFSET = 'c8b8be77-869c-431d-812e-169693f65a39'
MF_SOURCE_PRESENTATION_PROVIDER_SERVICE = 'e002aadc-f4af-4ee5-9847-053edf840426'
MF_TOPONODE_ATTRIBUTE_EDITOR_SERVICE = '65656e1a-077f-4472-83ef-316f11d5087a'
MFNETSOURCE_SSLCERTIFICATE_MANAGER = '55e6cb27-e69b-4267-940c-2d7ec5bb8a0f'
MFNETSOURCE_RESOURCE_FILTER = '815d0ff6-265a-4477-9e46-7b80ad80b5fb'
MFNET_SAVEJOB_SERVICE = 'b85a587f-3d02-4e52-9565-55d3ec1e7ff7'
MFNETSOURCE_STATISTICS_SERVICE = '3cb1f275-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_STATISTICS = '3cb1f274-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_BUFFERINGTIME = '3cb1f276-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_ACCELERATEDSTREAMINGDURATION = '3cb1f277-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_MAXUDPACCELERATEDSTREAMINGDURATION = '4aab2879-bbe1-4994-9ff0-5495bd250129'
MFNETSOURCE_MAXBUFFERTIMEMS = '408b24e6-4038-4401-b5b2-fe701a9ebf10'
MFNETSOURCE_CONNECTIONBANDWIDTH = '3cb1f278-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_CACHEENABLED = '3cb1f279-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_AUTORECONNECTLIMIT = '3cb1f27a-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_RESENDSENABLED = '3cb1f27b-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_THINNINGENABLED = '3cb1f27c-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_PROTOCOL = '3cb1f27d-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_TRANSPORT = '3cb1f27e-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_PREVIEWMODEENABLED = '3cb1f27f-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_CREDENTIAL_MANAGER = '3cb1f280-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_PPBANDWIDTH = '3cb1f281-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_AUTORECONNECTPROGRESS = '3cb1f282-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_PROXYLOCATORFACTORY = '3cb1f283-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_BROWSERUSERAGENT = '3cb1f28b-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_BROWSERWEBPAGE = '3cb1f28c-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_PLAYERVERSION = '3cb1f28d-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_PLAYERID = '3cb1f28e-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_HOSTEXE = '3cb1f28f-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_HOSTVERSION = '3cb1f291-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_PLAYERUSERAGENT = '3cb1f292-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_CLIENTGUID = '60a2c4a6-f197-4c14-a5bf-88830d2458af'
MFNETSOURCE_LOGURL = '3cb1f293-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_ENABLE_UDP = '3cb1f294-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_ENABLE_TCP = '3cb1f295-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_ENABLE_MSB = '3cb1f296-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_ENABLE_RTSP = '3cb1f298-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_ENABLE_HTTP = '3cb1f299-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_ENABLE_STREAMING = '3cb1f29c-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_ENABLE_DOWNLOAD = '3cb1f29d-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_ENABLE_PRIVATEMODE = '824779d8-f18b-4405-8cf1-464fb5aa8f71'
MFNETSOURCE_UDP_PORT_RANGE = '3cb1f29a-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_PROXYINFO = '3cb1f29b-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_DRMNET_LICENSE_REPRESENTATION = '47eae1bd-bdfe-42e2-82f3-54a48c17962d'
MFNETSOURCE_PROXYSETTINGS = '3cb1f287-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_PROXYHOSTNAME = '3cb1f284-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_PROXYPORT = '3cb1f288-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_PROXYEXCEPTIONLIST = '3cb1f285-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_PROXYBYPASSFORLOCAL = '3cb1f286-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_PROXYRERUNAUTODETECTION = '3cb1f289-0505-4c5d-ae71-0a556344efa1'
MFNETSOURCE_STREAM_LANGUAGE = '9ab44318-f7cd-4f2d-8d6d-fa35b492cecb'
MFNETSOURCE_LOGPARAMS = '64936ae8-9418-453a-8cda-3e0a668b353b'
MFNETSOURCE_PEERMANAGER = '48b29adb-febf-45ee-a9bf-efb81c492efc'
MFNETSOURCE_FRIENDLYNAME = '5b2a7757-bc6b-447e-aa06-0dda1c646e2f'
MF_BYTESTREAMHANDLER_ACCEPTS_SHARE_WRITE = 'a6e1f733-3001-4915-8150-1558a2180ec8'
MF_BYTESTREAM_SERVICE = 'ab025e2b-16d9-4180-a127-ba6c70156161'
MF_MEDIA_PROTECTION_MANAGER_PROPERTIES = '38bd81a9-acea-4c73-89b2-5532c0aeca79'
MFCONNECTOR_SPDIF = '0b94a712-ad3e-4cee-83ce-ce32e3db6522'
MFCONNECTOR_UNKNOWN = 'ac3aef5c-ce43-11d9-92db-000bdb28ff98'
MFCONNECTOR_PCI = 'ac3aef5d-ce43-11d9-92db-000bdb28ff98'
MFCONNECTOR_PCIX = 'ac3aef5e-ce43-11d9-92db-000bdb28ff98'
MFCONNECTOR_PCI_Express = 'ac3aef5f-ce43-11d9-92db-000bdb28ff98'
MFCONNECTOR_AGP = 'ac3aef60-ce43-11d9-92db-000bdb28ff98'
MFCONNECTOR_VGA = '57cd5968-ce47-11d9-92db-000bdb28ff98'
MFCONNECTOR_SVIDEO = '57cd5969-ce47-11d9-92db-000bdb28ff98'
MFCONNECTOR_COMPOSITE = '57cd596a-ce47-11d9-92db-000bdb28ff98'
MFCONNECTOR_COMPONENT = '57cd596b-ce47-11d9-92db-000bdb28ff98'
MFCONNECTOR_DVI = '57cd596c-ce47-11d9-92db-000bdb28ff98'
MFCONNECTOR_HDMI = '57cd596d-ce47-11d9-92db-000bdb28ff98'
MFCONNECTOR_LVDS = '57cd596e-ce47-11d9-92db-000bdb28ff98'
MFCONNECTOR_D_JPN = '57cd5970-ce47-11d9-92db-000bdb28ff98'
MFCONNECTOR_SDI = '57cd5971-ce47-11d9-92db-000bdb28ff98'
MFCONNECTOR_DISPLAYPORT_EXTERNAL = '57cd5972-ce47-11d9-92db-000bdb28ff98'
MFCONNECTOR_DISPLAYPORT_EMBEDDED = '57cd5973-ce47-11d9-92db-000bdb28ff98'
MFCONNECTOR_UDI_EXTERNAL = '57cd5974-ce47-11d9-92db-000bdb28ff98'
MFCONNECTOR_UDI_EMBEDDED = '57cd5975-ce47-11d9-92db-000bdb28ff98'
MFCONNECTOR_MIRACAST = '57cd5977-ce47-11d9-92db-000bdb28ff98'
MFCONNECTOR_TRANSPORT_AGNOSTIC_DIGITAL_MODE_A = '57cd5978-ce47-11d9-92db-000bdb28ff98'
MFCONNECTOR_TRANSPORT_AGNOSTIC_DIGITAL_MODE_B = '57cd5979-ce47-11d9-92db-000bdb28ff98'
MF_POLICY_ID = 'b160c24d-c059-48f1-a901-9ee298a9a8c3'
MFPROTECTION_DISABLE = '8cc6d81b-fec6-4d8f-964b-cfba0b0dad0d'
MFPROTECTION_CONSTRICTVIDEO = '193370ce-c5e4-4c3a-8a66-6959b4da4442'
MFPROTECTION_CONSTRICTVIDEO_NOOPM = 'a580e8cd-c247-4957-b983-3c2eebd1ff59'
MFPROTECTION_CONSTRICTAUDIO = 'ffc99b44-df48-4e16-8e66-096892c1578a'
MFPROTECTION_TRUSTEDAUDIODRIVERS = '65bdf3d2-0168-4816-a533-55d47b027101'
MFPROTECTION_HDCP = 'ae7cc03d-c828-4021-acb7-d578d27aaf13'
MFPROTECTION_CGMSA = 'e57e69e9-226b-4d31-b4e3-d3db008736dd'
MFPROTECTION_ACP = 'c3fd11c6-f8b7-4d20-b008-1db17d61f2da'
MFPROTECTION_WMDRMOTA = 'a267a6a1-362e-47d0-8805-4628598a23e4'
MFPROTECTION_FFT = '462a56b2-2866-4bb6-980d-6d8d9edb1a8c'
MFPROTECTION_PROTECTED_SURFACE = '4f5d9566-e742-4a25-8d1f-d287b5fa0ade'
MFPROTECTION_DISABLE_SCREEN_SCRAPE = 'a21179a4-b7cd-40d8-9614-8ef2371ba78d'
MFPROTECTION_VIDEO_FRAMES = '36a59cbc-7401-4a8c-bc20-46a7c9e597f0'
MFPROTECTION_HARDWARE = '4ee7f0c1-9ed7-424f-b6be-996b33528856'
MFPROTECTION_HDCP_WITH_TYPE_ENFORCEMENT = 'a4a585e8-ed60-442d-814d-db4d4220a06d'
MFPROTECTIONATTRIBUTE_BEST_EFFORT = 'c8e06331-75f0-4ec1-8e77-17578f773b46'
MFPROTECTIONATTRIBUTE_FAIL_OVER = '8536abc5-38f1-4151-9cce-f55d941229ac'
MFPROTECTION_GRAPHICS_TRANSFER_AES_ENCRYPTION = 'c873de64-d8a5-49e6-88bb-fb963fd3d4ce'
MFPROTECTIONATTRIBUTE_CONSTRICTVIDEO_IMAGESIZE = '008476fc-4b58-4d80-a790-e7297673161d'
MFPROTECTIONATTRIBUTE_HDCP_SRM = '6f302107-3477-4468-8a08-eef9db10e20f'
MF_SampleProtectionSalt = '5403deee-b9ee-438f-aa83-3804997e569d'
MF_REMOTE_PROXY = '2f00c90e-d2cf-4278-8b6a-d077fac3a25f'
CLSID_CreateMediaExtensionObject = 'ef65a54d-0788-45b8-8b14-bc0f6a6b5137'
MF_SAMI_SERVICE = '49a89ae7-b4d9-4ef2-aa5c-f65a3e05ae4e'
MF_PD_SAMI_STYLELIST = 'e0b73c7f-486d-484e-9872-4de5192a7bf8'
MF_SD_SAMI_LANGUAGE = '36fcb98a-6cd0-44cb-acb9-a8f5600dd0bb'
MF_TRANSCODE_CONTAINERTYPE = '150ff23f-4abc-478b-ac4f-e1916fba1cca'
MFTranscodeContainerType_ASF = '430f6f6e-b6bf-4fc1-a0bd-9ee46eee2afb'
MFTranscodeContainerType_MPEG4 = 'dc6cd05d-b9d0-40ef-bd35-fa622c1ab28a'
MFTranscodeContainerType_MP3 = 'e438b912-83f1-4de6-9e3a-9ffbc6dd24d1'
MFTranscodeContainerType_FLAC = '31344aa3-05a9-42b5-901b-8e9d4257f75e'
MFTranscodeContainerType_3GP = '34c50167-4472-4f34-9ea0-c49fbacf037d'
MFTranscodeContainerType_AC3 = '6d8d91c3-8c91-4ed1-8742-8c347d5b44d0'
MFTranscodeContainerType_ADTS = '132fd27d-0f02-43de-a301-38fbbbb3834e'
MFTranscodeContainerType_MPEG2 = 'bfc2dbf9-7bb4-4f8f-afde-e112c44ba882'
MFTranscodeContainerType_WAVE = '64c3453c-0f26-4741-be63-87bdf8bb935b'
MFTranscodeContainerType_AVI = '7edfe8af-402f-4d76-a33c-619fd157d0f1'
MFTranscodeContainerType_FMPEG4 = '9ba876f1-419f-4b77-a1e0-35959d9d4004'
MFTranscodeContainerType_AMR = '025d5ad3-621a-475b-964d-66b1c824f079'
MF_TRANSCODE_SKIP_METADATA_TRANSFER = '4e4469ef-b571-4959-8f83-3dcfba33a393'
MF_TRANSCODE_TOPOLOGYMODE = '3e3df610-394a-40b2-9dea-3bab650bebf2'
MF_TRANSCODE_ADJUST_PROFILE = '9c37c21b-060f-487c-a690-80d7f50d1c72'
MF_TRANSCODE_ENCODINGPROFILE = '6947787c-f508-4ea9-b1e9-a1fe3a49fbc9'
MF_TRANSCODE_QUALITYVSSPEED = '98332df8-03cd-476b-89fa-3f9e442dec9f'
MF_TRANSCODE_DONOT_INSERT_ENCODER = 'f45aa7ce-ab24-4012-a11b-dc8220201410'
MF_VIDEO_PROCESSOR_ALGORITHM = '4a0a1e1f-272c-4fb6-9eb1-db330cbc97ca'
MF_XVP_DISABLE_FRC = '2c0afa19-7a97-4d5a-9ee8-16d4fc518d8c'
MF_XVP_CALLER_ALLOCATES_OUTPUT = '04a2cabc-0cab-40b1-a1b9-75bc3658f000'
MF_LOCAL_MFT_REGISTRATION_SERVICE = 'ddf5cf9c-4506-45aa-abf0-6d5d94dd1b4a'
MF_WRAPPED_SAMPLE_SERVICE = '31f52bf2-d03e-4048-80d0-9c1046d87c61'
MF_WRAPPED_OBJECT = '2b182c4c-d6ac-49f4-8915-f71887db70cd'
CLSID_HttpSchemePlugin = '44cb442b-9da9-49df-b3fd-023777b16e50'
CLSID_UrlmonSchemePlugin = '9ec4b4f9-3029-45ad-947b-344de2a249e2'
CLSID_NetSchemePlugin = 'e9f4ebab-d97b-463e-a2b1-c54ee3f9414d'
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE = 'c60ac5fe-252a-478f-a0ef-bc8fa5f7cad3'
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_HW_SOURCE = 'de7046ba-54d6-4487-a2a4-ec7c0d1bd163'
MF_DEVSOURCE_ATTRIBUTE_FRIENDLY_NAME = '60d0e559-52f8-4fa2-bbce-acdb34a8ec01'
MF_DEVSOURCE_ATTRIBUTE_MEDIA_TYPE = '56a819ca-0c78-4de4-a0a7-3ddaba0f24d4'
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_CATEGORY = '77f0ae69-c3bd-4509-941d-467e4d24899e'
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_SYMBOLIC_LINK = '58f0aad8-22bf-4f8a-bb3d-d2c4978c6e2f'
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_SYMBOLIC_LINK = '98d24b5e-5930-4614-b5a1-f600f9355a78'
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_MAX_BUFFERS = '7dd9b730-4f2d-41d5-8f95-0cc9a912ba26'
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ENDPOINT_ID = '30da9258-feb9-47a7-a453-763a7a8e1c5f'
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ROLE = 'bc9d118e-8c67-4a18-85d4-12d300400552'
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_PROVIDER_DEVICE_ID = '36689d42-a06c-40ae-84cf-f5a034067cc4'
MF_DEVSOURCE_ATTRIBUTE_SOURCE_XADDRESS = 'bca0be52-c327-44c7-9b7d-7fa8d9b5bcda'
MF_DEVSOURCE_ATTRIBUTE_SOURCE_STREAM_URL = '9d7b40d2-3617-4043-93e3-8d6da9bb3492'
MF_DEVSOURCE_ATTRIBUTE_SOURCE_USERNAME = '05d01add-949f-46eb-bc8e-8b0d2b32d79d'
MF_DEVSOURCE_ATTRIBUTE_SOURCE_PASSWORD = 'a0fd7e16-42d9-49df-84c0-e82c5eab8874'
CLSID_FrameServerNetworkCameraSource = '7a213aa7-866f-414a-8c1a-275c7283a395'
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_GUID = '14dd9a1c-7cff-41be-b1b9-ba1ac6ecb571'
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_GUID = '8ac3587a-4ae7-42d8-99e0-0a6013eef90f'
MF_DEVICESTREAM_IMAGE_STREAM = 'a7ffb865-e7b2-43b0-9f6f-9af2a0e50fc0'
MF_DEVICESTREAM_INDEPENDENT_IMAGE_STREAM = '03eeec7e-d605-4576-8b29-6580b490d7d3'
MF_DEVICESTREAM_STREAM_ID = '11bd5120-d124-446b-88e6-17060257fff9'
MF_DEVICESTREAM_STREAM_CATEGORY = '2939e7b8-a62e-4579-b674-d4073dfabbba'
MF_DEVICESTREAM_FRAMESERVER_SHARED = '1cb378e9-b279-41d4-af97-34a243e68320'
MF_DEVICESTREAM_TRANSFORM_STREAM_ID = 'e63937b7-daaf-4d49-815f-d826f8ad31e7'
MF_DEVICESTREAM_EXTENSION_PLUGIN_CLSID = '048e6558-60c4-4173-bd5b-6a3ca2896aee'
MF_DEVICEMFT_EXTENSION_PLUGIN_CLSID = '0844dbae-34fa-48a0-a783-8e696fb1c9a8'
MF_DEVICESTREAM_EXTENSION_PLUGIN_CONNECTION_POINT = '37f9375c-e664-4ea4-aae4-cb6d1daca1f4'
MF_DEVICESTREAM_TAKEPHOTO_TRIGGER = '1d180e34-538c-4fbb-a75a-859af7d261a6'
MF_DEVICESTREAM_MAX_FRAME_BUFFERS = '1684cebe-3175-4985-882c-0efd3e8ac11e'
MF_DEVICEMFT_CONNECTED_FILTER_KSCONTROL = '6a2c4fa6-d179-41cd-9523-822371ea40e5'
MF_DEVICEMFT_CONNECTED_PIN_KSCONTROL = 'e63310f7-b244-4ef8-9a7d-24c74e32ebd0'
MF_DEVICE_THERMAL_STATE_CHANGED = '70ccd0af-fc9f-4deb-a875-9fecd16c5bd4'
MFSampleExtension_DeviceTimestamp = '8f3e35e7-2dcd-4887-8622-2a58baa652b0'
MFSampleExtension_Spatial_CameraViewTransform = '4e251fa4-830f-4770-859a-4b8d99aa809b'
MFSampleExtension_Spatial_CameraCoordinateSystem = '9d13c82f-2199-4e67-91cd-d1a4181f2534'
MFSampleExtension_Spatial_CameraProjectionTransform = '47f9fcb5-2a02-4f26-a477-792fdf95886a'
MF_MEDIASOURCE_SERVICE = 'f09992f7-9fba-4c4a-a37f-8c47b4e1dfe7'
MF_ACCESS_CONTROLLED_MEDIASOURCE_SERVICE = '014a5031-2f05-4c6a-9f9c-7d0dc4eda5f4'
MF_CONTENT_DECRYPTOR_SERVICE = '68a72927-fc7b-44ee-85f4-7c51bd55a659'
MF_CONTENT_PROTECTION_DEVICE_SERVICE = 'ff58436f-76a0-41fe-b566-10cc53962edd'
MF_SD_AUDIO_ENCODER_DELAY = '8e85422c-73de-403f-9a35-550ad6e8b951'
MF_SD_AUDIO_ENCODER_PADDING = '529c7f2c-ac4b-4e3f-bfc3-0902194982cb'
CLSID_MSH264DecoderMFT = '62ce7e72-4c71-4d20-b15d-452831a87d9d'
CLSID_MSH264EncoderMFT = '6ca50344-051a-4ded-9779-a43305165e35'
CLSID_MSDDPlusDecMFT = '177c0afe-900b-48d4-9e4c-57add250b3d4'
CLSID_MP3DecMediaObject = 'bbeea841-0a63-4f52-a7ab-a9b3a84ed38a'
CLSID_MSAACDecMFT = '32d186a7-218f-4c75-8876-dd77273a8999'
CLSID_MSH265DecoderMFT = '420a51a3-d605-430c-b4fc-45274fa6c562'
CLSID_WMVDecoderMFT = '82d353df-90bd-4382-8bc2-3f6192b76e34'
CLSID_WMADecMediaObject = '2eeb4adf-4578-4d10-bca7-bb955f56320a'
CLSID_MSMPEGAudDecMFT = '70707b39-b2ca-4015-abea-f8447d22d88b'
CLSID_MSMPEGDecoderMFT = '2d709e52-123f-49b5-9cbc-9af5cde28fb9'
CLSID_AudioResamplerMediaObject = 'f447b69e-1884-4a7e-8055-346f74d6edb3'
CLSID_MSVPxDecoder = 'e3aaf548-c9a4-4c6e-234d-5ada374b0000'
CLSID_MSOpusDecoder = '63e17c10-2d43-4c42-8fe3-8d8b63e46a6a'
CLSID_VideoProcessorMFT = '88753b26-5b24-49bd-b2e7-0c445c78c982'
MFNETSOURCE_CROSS_ORIGIN_SUPPORT = '9842207c-b02c-4271-a2fc-72e49308e5c2'
MFNETSOURCE_HTTP_DOWNLOAD_SESSION_PROVIDER = '7d55081e-307d-4d6d-a663-a93be97c4b5c'
MF_SD_MEDIASOURCE_STATUS = '1913678b-fc0f-44da-8f43-1ba3b526f4ae'
MF_SD_VIDEO_SPHERICAL = 'a51da449-3fdc-478c-bcb5-30be76595f55'
MF_SD_VIDEO_SPHERICAL_FORMAT = '4a8fc407-6ea1-46c8-b567-6971d4a139c3'
MF_SD_VIDEO_SPHERICAL_INITIAL_VIEWDIRECTION = '11d25a49-bb62-467f-9db1-c17165716c49'
MF_MEDIASOURCE_EXPOSE_ALL_STREAMS = 'e7f250b8-8fd9-4a09-b6c1-6a315c7c720e'
MF_ST_MEDIASOURCE_COLLECTION = '616de972-83ad-4950-8170-630d19cbe307'
MF_DEVICESTREAM_FILTER_KSCONTROL = '46783cca-3df5-4923-a9ef-36b7223edde0'
MF_DEVICESTREAM_PIN_KSCONTROL = 'ef3ef9a7-87f2-48ca-be02-674878918e98'
MF_DEVICESTREAM_SOURCE_ATTRIBUTES = '2f8cb617-361b-434f-85ea-99a03e1ce4e0'
MF_DEVICESTREAM_FRAMESERVER_HIDDEN = 'f402567b-4d91-4179-96d1-74c8480c2034'
MF_STF_VERSION_INFO = '6770bd39-ef82-44ee-a49b-934beb24aef7'
MF_STF_VERSION_DATE = '31a165d5-df67-4095-8e44-8868fc20dbfd'
MF_DEVICESTREAM_REQUIRED_CAPABILITIES = '6d8b957e-7cf6-43f4-af56-9c0e1e4fcbe1'
MF_DEVICESTREAM_REQUIRED_SDDL = '331ae85d-c0d3-49ba-83ba-82a12d63cdd6'
MF_DEVICEMFT_SENSORPROFILE_COLLECTION = '36ebdc44-b12c-441b-89f4-08b2f41a9cfc'
MF_DEVICESTREAM_SENSORSTREAM_ID = 'e35b9fe4-0659-4cad-bb51-33160be7e413'
MF_PD_ASF_FILEPROPERTIES_FILE_ID = '3de649b4-d76d-4e66-9ec9-78120fb4c7e3'
MF_PD_ASF_FILEPROPERTIES_CREATION_TIME = '3de649b6-d76d-4e66-9ec9-78120fb4c7e3'
MF_PD_ASF_FILEPROPERTIES_PACKETS = '3de649b7-d76d-4e66-9ec9-78120fb4c7e3'
MF_PD_ASF_FILEPROPERTIES_PLAY_DURATION = '3de649b8-d76d-4e66-9ec9-78120fb4c7e3'
MF_PD_ASF_FILEPROPERTIES_SEND_DURATION = '3de649b9-d76d-4e66-9ec9-78120fb4c7e3'
MF_PD_ASF_FILEPROPERTIES_PREROLL = '3de649ba-d76d-4e66-9ec9-78120fb4c7e3'
MF_PD_ASF_FILEPROPERTIES_FLAGS = '3de649bb-d76d-4e66-9ec9-78120fb4c7e3'
MF_PD_ASF_FILEPROPERTIES_MIN_PACKET_SIZE = '3de649bc-d76d-4e66-9ec9-78120fb4c7e3'
MF_PD_ASF_FILEPROPERTIES_MAX_PACKET_SIZE = '3de649bd-d76d-4e66-9ec9-78120fb4c7e3'
MF_PD_ASF_FILEPROPERTIES_MAX_BITRATE = '3de649be-d76d-4e66-9ec9-78120fb4c7e3'
CLSID_WMDRMSystemID = '8948bb22-11bd-4796-93e3-974d1b575678'
MF_PD_ASF_CONTENTENCRYPTION_TYPE = '8520fe3d-277e-46ea-99e4-e30a86db12be'
MF_PD_ASF_CONTENTENCRYPTION_KEYID = '8520fe3e-277e-46ea-99e4-e30a86db12be'
MF_PD_ASF_CONTENTENCRYPTION_SECRET_DATA = '8520fe3f-277e-46ea-99e4-e30a86db12be'
MF_PD_ASF_CONTENTENCRYPTION_LICENSE_URL = '8520fe40-277e-46ea-99e4-e30a86db12be'
MF_PD_ASF_CONTENTENCRYPTIONEX_ENCRYPTION_DATA = '62508be5-ecdf-4924-a359-72bab3397b9d'
MF_PD_ASF_LANGLIST = 'f23de43c-9977-460d-a6ec-32937f160f7d'
MF_PD_ASF_LANGLIST_LEGACYORDER = 'f23de43d-9977-460d-a6ec-32937f160f7d'
MF_PD_ASF_MARKER = '5134330e-83a6-475e-a9d5-4fb875fb2e31'
MF_PD_ASF_SCRIPT = 'e29cd0d7-d602-4923-a7fe-73fd97ecc650'
MF_PD_ASF_CODECLIST = 'e4bb3509-c18d-4df1-bb99-7a36b3cc4119'
MF_PD_ASF_METADATA_IS_VBR = '5fc6947a-ef60-445d-b449-442ecc78b4c1'
MF_PD_ASF_METADATA_V8_VBRPEAK = '5fc6947b-ef60-445d-b449-442ecc78b4c1'
MF_PD_ASF_METADATA_V8_BUFFERAVERAGE = '5fc6947c-ef60-445d-b449-442ecc78b4c1'
MF_PD_ASF_METADATA_LEAKY_BUCKET_PAIRS = '5fc6947d-ef60-445d-b449-442ecc78b4c1'
MF_PD_ASF_DATA_START_OFFSET = 'e7d5b3e7-1f29-45d3-8822-3e78fae272ed'
MF_PD_ASF_DATA_LENGTH = 'e7d5b3e8-1f29-45d3-8822-3e78fae272ed'
MF_SD_ASF_EXTSTRMPROP_LANGUAGE_ID_INDEX = '48f8a522-305d-422d-8524-2502dda33680'
MF_SD_ASF_EXTSTRMPROP_AVG_DATA_BITRATE = '48f8a523-305d-422d-8524-2502dda33680'
MF_SD_ASF_EXTSTRMPROP_AVG_BUFFERSIZE = '48f8a524-305d-422d-8524-2502dda33680'
MF_SD_ASF_EXTSTRMPROP_MAX_DATA_BITRATE = '48f8a525-305d-422d-8524-2502dda33680'
MF_SD_ASF_EXTSTRMPROP_MAX_BUFFERSIZE = '48f8a526-305d-422d-8524-2502dda33680'
MF_SD_ASF_STREAMBITRATES_BITRATE = 'a8e182ed-afc8-43d0-b0d1-f65bad9da558'
MF_SD_ASF_METADATA_DEVICE_CONFORMANCE_TEMPLATE = '245e929d-c44e-4f7e-bb3c-77d4dfd27f8a'
MF_PD_ASF_INFO_HAS_AUDIO = '80e62295-2296-4a44-b31c-d103c6fed23c'
MF_PD_ASF_INFO_HAS_VIDEO = '80e62296-2296-4a44-b31c-d103c6fed23c'
MF_PD_ASF_INFO_HAS_NON_AUDIO_VIDEO = '80e62297-2296-4a44-b31c-d103c6fed23c'
MF_ASFPROFILE_MINPACKETSIZE = '22587626-47de-4168-87f5-b5aa9b12a8f0'
MF_ASFPROFILE_MAXPACKETSIZE = '22587627-47de-4168-87f5-b5aa9b12a8f0'
MF_ASFSTREAMCONFIG_LEAKYBUCKET1 = 'c69b5901-ea1a-4c9b-b692-e2a0d29a8add'
MF_ASFSTREAMCONFIG_LEAKYBUCKET2 = 'c69b5902-ea1a-4c9b-b692-e2a0d29a8add'
MFASFSampleExtension_SampleDuration = 'c6bd9450-867f-4907-83a3-c77921b733ad'
MFASFSampleExtension_OutputCleanPoint = 'f72a3c6f-6eb4-4ebc-b192-09ad9759e828'
MFASFSampleExtension_SMPTE = '399595ec-8667-4e2d-8fdb-98814ce76c1e'
MFASFSampleExtension_FileName = 'e165ec0e-19ed-45d7-b4a7-25cbd1e28e9b'
MFASFSampleExtension_ContentType = 'd590dc20-07bc-436c-9cf7-f3bbfbf1a4dc'
MFASFSampleExtension_PixelAspectRatio = '1b1ee554-f9ea-4bc8-821a-376b74e4c4b8'
MFASFSampleExtension_Encryption_SampleID = '6698b84e-0afa-4330-aeb2-1c0a98d7a44d'
MFASFSampleExtension_Encryption_KeyID = '76376591-795f-4da1-86ed-9d46eca109a9'
MFASFMutexType_Language = '72178c2b-e45b-11d5-bc2a-00b0d0f3f4ab'
MFASFMutexType_Bitrate = '72178c2c-e45b-11d5-bc2a-00b0d0f3f4ab'
MFASFMutexType_Presentation = '72178c2d-e45b-11d5-bc2a-00b0d0f3f4ab'
MFASFMutexType_Unknown = '72178c2e-e45b-11d5-bc2a-00b0d0f3f4ab'
MFASFSPLITTER_PACKET_BOUNDARY = 'fe584a05-e8d6-42e3-b176-f1211705fb6f'
MFASFINDEXER_TYPE_TIMECODE = '49815231-6bad-44fd-810a-3f60984ec7fd'
MF_CAPTURE_ENGINE_INITIALIZED = '219992bc-cf92-4531-a1ae-96e1e886c8f1'
MF_CAPTURE_ENGINE_PREVIEW_STARTED = 'a416df21-f9d3-4a74-991b-b817298952c4'
MF_CAPTURE_ENGINE_PREVIEW_STOPPED = '13d5143c-1edd-4e50-a2ef-350a47678060'
MF_CAPTURE_ENGINE_RECORD_STARTED = 'ac2b027b-ddf9-48a0-89be-38ab35ef45c0'
MF_CAPTURE_ENGINE_RECORD_STOPPED = '55e5200a-f98f-4c0d-a9ec-9eb25ed3d773'
MF_CAPTURE_ENGINE_PHOTO_TAKEN = '3c50c445-7304-48eb-865d-bba19ba3af5c'
MF_CAPTURE_SOURCE_CURRENT_DEVICE_MEDIA_TYPE_SET = 'e7e75e4c-039c-4410-815b-8741307b63aa'
MF_CAPTURE_ENGINE_ERROR = '46b89fc6-33cc-4399-9dad-784de77d587c'
MF_CAPTURE_ENGINE_EFFECT_ADDED = 'aa8dc7b5-a048-4e13-8ebe-f23c46c830c1'
MF_CAPTURE_ENGINE_EFFECT_REMOVED = 'c6e8db07-fb09-4a48-89c6-bf92a04222c9'
MF_CAPTURE_ENGINE_ALL_EFFECTS_REMOVED = 'fded7521-8ed8-431a-a96b-f3e2565e981c'
MF_CAPTURE_SINK_PREPARED = '7bfce257-12b1-4409-8c34-d445daab7578'
MF_CAPTURE_ENGINE_OUTPUT_MEDIA_TYPE_SET = 'caaad994-83ec-45e9-a30a-1f20aadb9831'
MF_CAPTURE_ENGINE_CAMERA_STREAM_BLOCKED = 'a4209417-8d39-46f3-b759-5912528f4207'
MF_CAPTURE_ENGINE_CAMERA_STREAM_UNBLOCKED = '9be9eef0-cdaf-4717-8564-834aae66415c'
MF_CAPTURE_ENGINE_D3D_MANAGER = '76e25e7b-d595-4283-962c-c594afd78ddf'
MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_UNPROCESSED_SAMPLES = 'b467f705-7913-4894-9d42-a215fea23da9'
MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_UNPROCESSED_SAMPLES = '1cddb141-a7f4-4d58-9896-4d15a53c4efe'
MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_PROCESSED_SAMPLES = 'e7b4a49e-382c-4aef-a946-aed5490b7111'
MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_PROCESSED_SAMPLES = '9896e12a-f707-4500-b6bd-db8eb810b50f'
MF_CAPTURE_ENGINE_USE_AUDIO_DEVICE_ONLY = '1c8077da-8466-4dc4-8b8e-276b3f85923b'
MF_CAPTURE_ENGINE_USE_VIDEO_DEVICE_ONLY = '7e025171-cf32-4f2e-8f19-410577b73a66'
MF_CAPTURE_ENGINE_DISABLE_HARDWARE_TRANSFORMS = 'b7c42a6b-3207-4495-b4e7-81f9c35d5991'
MF_CAPTURE_ENGINE_DISABLE_DXVA = 'f9818862-179d-433f-a32f-74cbcf74466d'
MF_CAPTURE_ENGINE_MEDIASOURCE_CONFIG = 'bc6989d2-0fc1-46e1-a74f-efd36bc788de'
MF_CAPTURE_ENGINE_DECODER_MFT_FIELDOFUSE_UNLOCK_Attribute = '2b8ad2e8-7acb-4321-a606-325c4249f4fc'
MF_CAPTURE_ENGINE_ENCODER_MFT_FIELDOFUSE_UNLOCK_Attribute = '54c63a00-78d5-422f-aa3e-5e99ac649269'
MF_CAPTURE_ENGINE_ENABLE_CAMERA_STREAMSTATE_NOTIFICATION = '4c808e9d-aaed-4713-90fb-cb24064ab8da'
MF_CAPTURE_ENGINE_MEDIA_CATEGORY = '8e3f5bd5-dbbf-42f0-8542-d07a3971762a'
MF_CAPTURE_ENGINE_AUDIO_PROCESSING = '10f1be5e-7e11-410b-973d-f4b6109000fe'
MF_CAPTURE_ENGINE_EVENT_GENERATOR_GUID = 'abfa8ad5-fc6d-4911-87e0-961945f8f7ce'
MF_CAPTURE_ENGINE_EVENT_STREAM_INDEX = '82697f44-b1cf-42eb-9753-f86d649c8865'
MF_CAPTURE_ENGINE_SELECTEDCAMERAPROFILE = '03160b7e-1c6f-4db2-ad56-a7c430f82392'
MF_CAPTURE_ENGINE_SELECTEDCAMERAPROFILE_INDEX = '3ce88613-2214-46c3-b417-82f8a313c9c3'
CLSID_MFCaptureEngine = 'efce38d3-8914-4674-a7df-ae1b3d654b8a'
CLSID_MFCaptureEngineClassFactory = 'efce38d3-8914-4674-a7df-ae1b3d654b8a'
MFSampleExtension_DeviceReferenceSystemTime = '6523775a-ba2d-405f-b2c5-01ff88e2e8f6'
MF_D3D12_SYNCHRONIZATION_OBJECT = '2a7c8d6a-85a6-494d-a046-06ea1a138f4b'
MF_MT_D3D_RESOURCE_VERSION = '174f1e85-fe26-453d-b52e-5bdd4e55b944'
MF_MT_D3D12_CPU_READBACK = '28ee9fe3-d481-46a6-b98a-7f69d5280e82'
MF_MT_D3D12_TEXTURE_LAYOUT = '97c85caa-0beb-4ee1-9715-f22fad8c10f5'
MF_MT_D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET = 'eeac2585-3430-498c-84a2-77b1bba570f6'
MF_MT_D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL = 'b1138dc3-01d5-4c14-9bdc-cdc9336f55b9'
MF_MT_D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS = '82c85647-5057-4960-9559-f45b8e271427'
MF_MT_D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE = 'ba06bfac-ffe3-474a-ab55-161ee4417a2e'
MF_MT_D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER = 'a6a1e439-2f96-4ab5-98dc-adf74973505d'
MF_MT_D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS = '0a4940b2-cfd6-4738-9d02-98113734015a'
MF_SA_D3D12_HEAP_FLAGS = '496b3266-d28f-4f8c-93a7-4a596b1a31a1'
MF_SA_D3D12_HEAP_TYPE = '56f26a76-bbc1-4ce0-bb11-e22368d874ed'
MF_SA_D3D12_CLEAR_VALUE = '86ba9a39-0526-495d-9ab5-54ec9fad6fc3'
MF_MSE_CALLBACK = '9063a7c0-42c5-4ffd-a8a8-6fcf9ea3d00c'
MF_MSE_ACTIVELIST_CALLBACK = '949bda0f-4549-46d5-ad7f-b846e1ab1652'
MF_MSE_BUFFERLIST_CALLBACK = '42e669b0-d60e-4afb-a85b-d8e5fe6bdab5'
MF_MSE_VP9_SUPPORT = '92d78429-d88b-4ff0-8322-803efa6e9626'
MF_MSE_OPUS_SUPPORT = '4d224cc1-8cc4-48a3-a7a7-e4c16ce6388a'
MF_MEDIA_ENGINE_NEEDKEY_CALLBACK = '7ea80843-b6e4-432c-8ea4-7848ffe4220e'
MF_MEDIA_ENGINE_CALLBACK = 'c60381b8-83a4-41f8-a3d0-de05076849a9'
MF_MEDIA_ENGINE_DXGI_MANAGER = '065702da-1094-486d-8617-ee7cc4ee4648'
MF_MEDIA_ENGINE_EXTENSION = '3109fd46-060d-4b62-8dcf-faff811318d2'
MF_MEDIA_ENGINE_PLAYBACK_HWND = 'd988879b-67c9-4d92-baa7-6eadd446039d'
MF_MEDIA_ENGINE_OPM_HWND = 'a0be8ee7-0572-4f2c-a801-2a151bd3e726'
MF_MEDIA_ENGINE_PLAYBACK_VISUAL = '6debd26f-6ab9-4d7e-b0ee-c61a73ffad15'
MF_MEDIA_ENGINE_COREWINDOW = 'fccae4dc-0b7f-41c2-9f96-4659948acddc'
MF_MEDIA_ENGINE_VIDEO_OUTPUT_FORMAT = '5066893c-8cf9-42bc-8b8a-472212e52726'
MF_MEDIA_ENGINE_CONTENT_PROTECTION_FLAGS = 'e0350223-5aaf-4d76-a7c3-06de70894db4'
MF_MEDIA_ENGINE_CONTENT_PROTECTION_MANAGER = 'fdd6dfaa-bd85-4af3-9e0f-a01d539d876a'
MF_MEDIA_ENGINE_AUDIO_ENDPOINT_ROLE = 'd2cb93d1-116a-44f2-9385-f7d0fda2fb46'
MF_MEDIA_ENGINE_AUDIO_CATEGORY = 'c8d4c51d-350e-41f2-ba46-faebbb0857f6'
MF_MEDIA_ENGINE_STREAM_CONTAINS_ALPHA_CHANNEL = '5cbfaf44-d2b2-4cfb-80a7-d429c74c789d'
MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE = '4e0212e2-e18f-41e1-95e5-c0e7e9235bc3'
MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE9 = '052c2d39-40c0-4188-ab86-f828273b7522'
MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE10 = '11a47afd-6589-4124-b312-6158ec517fc3'
MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE11 = '1cf1315f-ce3f-4035-9391-16142f775189'
MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE_EDGE = 'a6f3e465-3aca-442c-a3f0-ad6ddad839ae'
MF_MEDIA_ENGINE_COMPATIBILITY_MODE = '3ef26ad4-dc54-45de-b9af-76c8c66bfa8e'
MF_MEDIA_ENGINE_COMPATIBILITY_MODE_WWA_EDGE = '15b29098-9f01-4e4d-b65a-c06c6c89da2a'
MF_MEDIA_ENGINE_COMPATIBILITY_MODE_WIN10 = '5b25e089-6ca7-4139-a2cb-fcaab39552a3'
MF_MEDIA_ENGINE_SOURCE_RESOLVER_CONFIG_STORE = '0ac0c497-b3c4-48c9-9cde-bb8ca2442ca3'
MF_MEDIA_ENGINE_TRACK_ID = '65bea312-4043-4815-8eab-44dce2ef8f2a'
MF_MEDIA_ENGINE_TELEMETRY_APPLICATION_ID = '1e7b273b-a7e4-402a-8f51-c48e88a2cabc'
MF_MEDIA_ENGINE_SYNCHRONOUS_CLOSE = 'c3c2e12f-7e0e-4e43-b91c-dc992ccdfa5e'
MF_MEDIA_ENGINE_MEDIA_PLAYER_MODE = '3ddd8d45-5aa1-4112-82e5-36f6a2197e6e'
CLSID_MFMediaEngineClassFactory = 'b44392da-499b-446b-a4cb-005fead0e6d5'
MF_MEDIA_ENGINE_TIMEDTEXT = '805ea411-92e0-4e59-9b6e-5c7d7915e64f'
MF_MEDIA_ENGINE_CONTINUE_ON_CODEC_ERROR = 'dbcdb7f9-48e4-4295-b70d-d518234eeb38'
MF_MEDIA_ENGINE_EME_CALLBACK = '494553a7-a481-4cb7-bec5-380903513731'
CLSID_MPEG2DLNASink = 'fa5fe7c5-6a1d-4b11-b41f-f959d6c76500'
MF_MP2DLNA_USE_MMCSS = '54f3e2ee-a2a2-497d-9834-973afde521eb'
MF_MP2DLNA_VIDEO_BIT_RATE = 'e88548de-73b4-42d7-9c75-adfa0a2a6e4c'
MF_MP2DLNA_AUDIO_BIT_RATE = '2d1c070e-2b5f-4ab3-a7e6-8d943ba8d00a'
MF_MP2DLNA_ENCODE_QUALITY = 'b52379d7-1d46-4fb6-a317-a4a5f60959f8'
MF_MP2DLNA_STATISTICS = '75e488a3-d5ad-4898-85e0-bcce24a722d7'
CLSID_MFReadWriteClassFactory = '48e2ed0f-98c2-4a37-bed5-166312ddd83f'
CLSID_MFSourceReader = '1777133c-0881-411b-a577-ad545f0714c4'
MF_SOURCE_READER_ASYNC_CALLBACK = '1e3dbeac-bb43-4c35-b507-cd644464c965'
MF_SOURCE_READER_D3D_MANAGER = 'ec822da2-e1e9-4b29-a0d8-563c719f5269'
MF_SOURCE_READER_DISABLE_DXVA = 'aa456cfd-3943-4a1e-a77d-1838c0ea2e35'
MF_SOURCE_READER_MEDIASOURCE_CONFIG = '9085abeb-0354-48f9-abb5-200df838c68e'
MF_SOURCE_READER_MEDIASOURCE_CHARACTERISTICS = '6d23f5c8-c5d7-4a9b-9971-5d11f8bca880'
MF_SOURCE_READER_ENABLE_VIDEO_PROCESSING = 'fb394f3d-ccf1-42ee-bbb3-f9b845d5681d'
MF_SOURCE_READER_ENABLE_ADVANCED_VIDEO_PROCESSING = '0f81da2c-b537-4672-a8b2-a681b17307a3'
MF_SOURCE_READER_DISABLE_CAMERA_PLUGINS = '9d3365dd-058f-4cfb-9f97-b314cc99c8ad'
MF_SOURCE_READER_DISCONNECT_MEDIASOURCE_ON_SHUTDOWN = '56b67165-219e-456d-a22e-2d3004c7fe56'
MF_SOURCE_READER_ENABLE_TRANSCODE_ONLY_TRANSFORMS = 'dfd4f008-b5fd-4e78-ae44-62a1e67bbe27'
MF_SOURCE_READER_D3D11_BIND_FLAGS = '33f3197b-f73a-4e14-8d85-0e4c4368788d'
CLSID_MFSinkWriter = 'a3bbfb17-8273-4e52-9e0e-9739dc887990'
MF_SINK_WRITER_ASYNC_CALLBACK = '48cb183e-7b0b-46f4-822e-5e1d2dda4354'
MF_SINK_WRITER_DISABLE_THROTTLING = '08b845d8-2b74-4afe-9d53-be16d2d5ae4f'
MF_SINK_WRITER_D3D_MANAGER = 'ec822da2-e1e9-4b29-a0d8-563c719f5269'
MF_SINK_WRITER_ENCODER_CONFIG = 'ad91cd04-a7cc-4ac7-99b6-a57b9a4a7c70'
MF_READWRITE_DISABLE_CONVERTERS = '98d5b065-1374-4847-8d5d-31520fee7156'
MF_READWRITE_ENABLE_HARDWARE_TRANSFORMS = 'a634a91c-822b-41b9-a494-4de4643612b0'
MF_READWRITE_MMCSS_CLASS = '39384300-d0eb-40b1-87a0-3318871b5a53'
MF_READWRITE_MMCSS_PRIORITY = '43ad19ce-f33f-4ba9-a580-e4cd12f2d144'
MF_READWRITE_MMCSS_CLASS_AUDIO = '430847da-0890-4b0e-938c-054332c547e1'
MF_READWRITE_MMCSS_PRIORITY_AUDIO = '273db885-2de2-4db2-a6a7-fdb66fb40b61'
MF_READWRITE_D3D_OPTIONAL = '216479d9-3071-42ca-bb6c-4c22102e1d18'
MF_MEDIASINK_AUTOFINALIZE_SUPPORTED = '48c131be-135a-41cb-8290-03652509c999'
MF_MEDIASINK_ENABLE_AUTOFINALIZE = '34014265-cb7e-4cde-ac7c-effd3b3c2530'
MF_READWRITE_ENABLE_AUTOFINALIZE = 'dd7ca129-8cd1-4dc5-9dde-ce168675de61'
MFP_POSITIONTYPE_100NS = '00000000-0000-0000-0000-000000000000'
MF_MEDIA_SHARING_ENGINE_DEVICE_NAME = '771e05d1-862f-4299-95ac-ae81fd14f3e7'
MF_MEDIA_SHARING_ENGINE_DEVICE = 'b461c58a-7a08-4b98-99a8-70fd5f3badfd'
CLSID_MFMediaSharingEngineClassFactory = 'f8e307fb-6d45-4ad3-9993-66cd5a529659'
CLSID_MFImageSharingEngineClassFactory = 'b22c3339-87f3-4059-a0c5-037aa9707eaf'
CLSID_PlayToSourceClassFactory = 'da17539a-3dc3-42c1-a749-a183b51f085e'
GUID_PlayToService = 'f6a8ff9d-9e14-41c9-bf0f-120a2b3ce120'
GUID_NativeDeviceService = 'ef71e53c-52f4-43c5-b86a-ad6cb216a61e'
MF_CONTENTDECRYPTIONMODULE_SERVICE = '15320c45-ff80-484a-9dcb-0df894e69a01'
MF_VIRTUALCAMERA_CONFIGURATION_APP_PACKAGE_FAMILY_NAME = '658abe51-8044-462e-97ea-e676fd72055f'
MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_INITIALIZE = 'e52c4dff-e46d-4d0b-bc75-ddd4c8723f96'
MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_START = 'b1eeb989-b456-4f4a-ae40-079c28e24af8'
MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_STOP = 'b7fe7a61-fe91-415e-8608-d37dedb1a58b'
MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_UNINITIALIZE = 'a0ebaba7-a422-4e33-8401-b37d2800aa67'
MF_FRAMESERVER_VCAMEVENT_EXTENDED_PIPELINE_SHUTDOWN = '45a81b31-43f8-4e5d-8ce2-22dce026996d'
MF_FRAMESERVER_VCAMEVENT_EXTENDED_CUSTOM_EVENT = '6e59489c-47d3-4467-83ef-12d34e871665'
MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS = UInt32
MF_EVENT_FLAG_NONE = 0
MF_EVENT_FLAG_NO_WAIT = 1
MF_Plugin_Type = Int32
MF_Plugin_Type_MFT = 0
MF_Plugin_Type_MediaSource = 1
MF_Plugin_Type_MFT_MatchOutputType = 2
MF_Plugin_Type_Other = -1
def _define_CodecAPIEventData_head():
    class CodecAPIEventData(Structure):
        pass
    return CodecAPIEventData
def _define_CodecAPIEventData():
    CodecAPIEventData = win32more.Media.MediaFoundation.CodecAPIEventData_head
    CodecAPIEventData._fields_ = [
        ("guid", Guid),
        ("dataLength", UInt32),
        ("reserved", UInt32 * 3),
    ]
    return CodecAPIEventData
def _define_ICodecAPI_head():
    class ICodecAPI(win32more.System.Com.IUnknown_head):
        Guid = Guid('901db4c7-31ce-41a2-85dc-8fa0bf41b8da')
    return ICodecAPI
def _define_ICodecAPI():
    ICodecAPI = win32more.Media.MediaFoundation.ICodecAPI_head
    ICodecAPI.IsSupported = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid), use_last_error=False)(3, 'IsSupported', ((1, 'Api'),)))
    ICodecAPI.IsModifiable = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid), use_last_error=False)(4, 'IsModifiable', ((1, 'Api'),)))
    ICodecAPI.GetParameterRange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.VARIANT_head),POINTER(win32more.System.Com.VARIANT_head),POINTER(win32more.System.Com.VARIANT_head), use_last_error=False)(5, 'GetParameterRange', ((1, 'Api'),(1, 'ValueMin'),(1, 'ValueMax'),(1, 'SteppingDelta'),)))
    ICodecAPI.GetParameterValues = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(POINTER(win32more.System.Com.VARIANT_head)),POINTER(UInt32), use_last_error=False)(6, 'GetParameterValues', ((1, 'Api'),(1, 'Values'),(1, 'ValuesCount'),)))
    ICodecAPI.GetDefaultValue = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.VARIANT_head), use_last_error=False)(7, 'GetDefaultValue', ((1, 'Api'),(1, 'Value'),)))
    ICodecAPI.GetValue = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.VARIANT_head), use_last_error=False)(8, 'GetValue', ((1, 'Api'),(1, 'Value'),)))
    ICodecAPI.SetValue = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.VARIANT_head), use_last_error=False)(9, 'SetValue', ((1, 'Api'),(1, 'Value'),)))
    ICodecAPI.RegisterForEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),IntPtr, use_last_error=False)(10, 'RegisterForEvent', ((1, 'Api'),(1, 'userData'),)))
    ICodecAPI.UnregisterForEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid), use_last_error=False)(11, 'UnregisterForEvent', ((1, 'Api'),)))
    ICodecAPI.SetAllDefaults = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(12, 'SetAllDefaults', ()))
    ICodecAPI.SetValueWithNotify = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.VARIANT_head),POINTER(POINTER(Guid)),POINTER(UInt32), use_last_error=False)(13, 'SetValueWithNotify', ((1, 'Api'),(1, 'Value'),(1, 'ChangedParam'),(1, 'ChangedParamCount'),)))
    ICodecAPI.SetAllDefaultsWithNotify = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(POINTER(Guid)),POINTER(UInt32), use_last_error=False)(14, 'SetAllDefaultsWithNotify', ((1, 'ChangedParam'),(1, 'ChangedParamCount'),)))
    ICodecAPI.GetAllSettings = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IStream_head, use_last_error=False)(15, 'GetAllSettings', ((1, '__MIDL__ICodecAPI0000'),)))
    ICodecAPI.SetAllSettings = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IStream_head, use_last_error=False)(16, 'SetAllSettings', ((1, '__MIDL__ICodecAPI0001'),)))
    ICodecAPI.SetAllSettingsWithNotify = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IStream_head,POINTER(POINTER(Guid)),POINTER(UInt32), use_last_error=False)(17, 'SetAllSettingsWithNotify', ((1, '__MIDL__ICodecAPI0002'),(1, 'ChangedParam'),(1, 'ChangedParamCount'),)))
    win32more.System.Com.IUnknown
    return ICodecAPI
def _define_D3DOVERLAYCAPS_head():
    class D3DOVERLAYCAPS(Structure):
        pass
    return D3DOVERLAYCAPS
def _define_D3DOVERLAYCAPS():
    D3DOVERLAYCAPS = win32more.Media.MediaFoundation.D3DOVERLAYCAPS_head
    D3DOVERLAYCAPS._fields_ = [
        ("Caps", UInt32),
        ("MaxOverlayDisplayWidth", UInt32),
        ("MaxOverlayDisplayHeight", UInt32),
    ]
    return D3DOVERLAYCAPS
def _define_D3DCONTENTPROTECTIONCAPS_head():
    class D3DCONTENTPROTECTIONCAPS(Structure):
        pass
    return D3DCONTENTPROTECTIONCAPS
def _define_D3DCONTENTPROTECTIONCAPS():
    D3DCONTENTPROTECTIONCAPS = win32more.Media.MediaFoundation.D3DCONTENTPROTECTIONCAPS_head
    D3DCONTENTPROTECTIONCAPS._fields_ = [
        ("Caps", UInt32),
        ("KeyExchangeType", Guid),
        ("BufferAlignmentStart", UInt32),
        ("BlockAlignmentSize", UInt32),
        ("ProtectedMemorySize", UInt64),
    ]
    return D3DCONTENTPROTECTIONCAPS
def _define_IDirect3D9ExOverlayExtension_head():
    class IDirect3D9ExOverlayExtension(win32more.System.Com.IUnknown_head):
        Guid = Guid('187aeb13-aaf5-4c59-876d-e059088c0df8')
    return IDirect3D9ExOverlayExtension
def _define_IDirect3D9ExOverlayExtension():
    IDirect3D9ExOverlayExtension = win32more.Media.MediaFoundation.IDirect3D9ExOverlayExtension_head
    IDirect3D9ExOverlayExtension.CheckDeviceOverlayType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Graphics.Direct3D9.D3DDEVTYPE,UInt32,UInt32,win32more.Graphics.Direct3D9.D3DFORMAT,POINTER(win32more.Graphics.Direct3D9.D3DDISPLAYMODEEX_head),win32more.Graphics.Direct3D9.D3DDISPLAYROTATION,POINTER(win32more.Media.MediaFoundation.D3DOVERLAYCAPS_head), use_last_error=False)(3, 'CheckDeviceOverlayType', ((1, 'Adapter'),(1, 'DevType'),(1, 'OverlayWidth'),(1, 'OverlayHeight'),(1, 'OverlayFormat'),(1, 'pDisplayMode'),(1, 'DisplayRotation'),(1, 'pOverlayCaps'),)))
    win32more.System.Com.IUnknown
    return IDirect3D9ExOverlayExtension
def _define_IDirect3DDevice9Video_head():
    class IDirect3DDevice9Video(win32more.System.Com.IUnknown_head):
        Guid = Guid('26dc4561-a1ee-4ae7-96da-118a36c0ec95')
    return IDirect3DDevice9Video
def _define_IDirect3DDevice9Video():
    IDirect3DDevice9Video = win32more.Media.MediaFoundation.IDirect3DDevice9Video_head
    IDirect3DDevice9Video.GetContentProtectionCaps = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Guid),POINTER(win32more.Media.MediaFoundation.D3DCONTENTPROTECTIONCAPS_head), use_last_error=False)(3, 'GetContentProtectionCaps', ((1, 'pCryptoType'),(1, 'pDecodeProfile'),(1, 'pCaps'),)))
    IDirect3DDevice9Video.CreateAuthenticatedChannel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNELTYPE,POINTER(win32more.Media.MediaFoundation.IDirect3DAuthenticatedChannel9_head),POINTER(win32more.Foundation.HANDLE), use_last_error=False)(4, 'CreateAuthenticatedChannel', ((1, 'ChannelType'),(1, 'ppAuthenticatedChannel'),(1, 'pChannelHandle'),)))
    IDirect3DDevice9Video.CreateCryptoSession = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Guid),POINTER(win32more.Media.MediaFoundation.IDirect3DCryptoSession9_head),POINTER(win32more.Foundation.HANDLE), use_last_error=False)(5, 'CreateCryptoSession', ((1, 'pCryptoType'),(1, 'pDecodeProfile'),(1, 'ppCryptoSession'),(1, 'pCryptoHandle'),)))
    win32more.System.Com.IUnknown
    return IDirect3DDevice9Video
def _define_IDirect3DAuthenticatedChannel9_head():
    class IDirect3DAuthenticatedChannel9(win32more.System.Com.IUnknown_head):
        Guid = Guid('ff24beee-da21-4beb-98b5-d2f899f98af9')
    return IDirect3DAuthenticatedChannel9
def _define_IDirect3DAuthenticatedChannel9():
    IDirect3DAuthenticatedChannel9 = win32more.Media.MediaFoundation.IDirect3DAuthenticatedChannel9_head
    IDirect3DAuthenticatedChannel9.GetCertificateSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(3, 'GetCertificateSize', ((1, 'pCertificateSize'),)))
    IDirect3DAuthenticatedChannel9.GetCertificate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_char_p_no, use_last_error=False)(4, 'GetCertificate', ((1, 'CertifacteSize'),(1, 'ppCertificate'),)))
    IDirect3DAuthenticatedChannel9.NegotiateKeyExchange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_void_p, use_last_error=False)(5, 'NegotiateKeyExchange', ((1, 'DataSize'),(1, 'pData'),)))
    IDirect3DAuthenticatedChannel9.Query = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_void_p,UInt32,c_void_p, use_last_error=False)(6, 'Query', ((1, 'InputSize'),(1, 'pInput'),(1, 'OutputSize'),(1, 'pOutput'),)))
    IDirect3DAuthenticatedChannel9.Configure = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_void_p,POINTER(win32more.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT_head), use_last_error=False)(7, 'Configure', ((1, 'InputSize'),(1, 'pInput'),(1, 'pOutput'),)))
    win32more.System.Com.IUnknown
    return IDirect3DAuthenticatedChannel9
def _define_IDirect3DCryptoSession9_head():
    class IDirect3DCryptoSession9(win32more.System.Com.IUnknown_head):
        Guid = Guid('fa0ab799-7a9c-48ca-8c5b-237e71a54434')
    return IDirect3DCryptoSession9
def _define_IDirect3DCryptoSession9():
    IDirect3DCryptoSession9 = win32more.Media.MediaFoundation.IDirect3DCryptoSession9_head
    IDirect3DCryptoSession9.GetCertificateSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(3, 'GetCertificateSize', ((1, 'pCertificateSize'),)))
    IDirect3DCryptoSession9.GetCertificate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_char_p_no, use_last_error=False)(4, 'GetCertificate', ((1, 'CertifacteSize'),(1, 'ppCertificate'),)))
    IDirect3DCryptoSession9.NegotiateKeyExchange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_void_p, use_last_error=False)(5, 'NegotiateKeyExchange', ((1, 'DataSize'),(1, 'pData'),)))
    IDirect3DCryptoSession9.EncryptionBlt = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.IDirect3DSurface9_head,win32more.Graphics.Direct3D9.IDirect3DSurface9_head,UInt32,c_void_p, use_last_error=False)(6, 'EncryptionBlt', ((1, 'pSrcSurface'),(1, 'pDstSurface'),(1, 'DstSurfaceSize'),(1, 'pIV'),)))
    IDirect3DCryptoSession9.DecryptionBlt = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.IDirect3DSurface9_head,win32more.Graphics.Direct3D9.IDirect3DSurface9_head,UInt32,POINTER(win32more.Graphics.Direct3D9.D3DENCRYPTED_BLOCK_INFO_head),c_void_p,c_void_p, use_last_error=False)(7, 'DecryptionBlt', ((1, 'pSrcSurface'),(1, 'pDstSurface'),(1, 'SrcSurfaceSize'),(1, 'pEncryptedBlockInfo'),(1, 'pContentKey'),(1, 'pIV'),)))
    IDirect3DCryptoSession9.GetSurfacePitch = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.IDirect3DSurface9_head,POINTER(UInt32), use_last_error=False)(8, 'GetSurfacePitch', ((1, 'pSrcSurface'),(1, 'pSurfacePitch'),)))
    IDirect3DCryptoSession9.StartSessionKeyRefresh = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_void_p,UInt32, use_last_error=False)(9, 'StartSessionKeyRefresh', ((1, 'pRandomNumber'),(1, 'RandomNumberSize'),)))
    IDirect3DCryptoSession9.FinishSessionKeyRefresh = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(10, 'FinishSessionKeyRefresh', ()))
    IDirect3DCryptoSession9.GetEncryptionBltKey = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_void_p,UInt32, use_last_error=False)(11, 'GetEncryptionBltKey', ((1, 'pReadbackKey'),(1, 'KeySize'),)))
    win32more.System.Com.IUnknown
    return IDirect3DCryptoSession9
D3D12_VIDEO_FIELD_TYPE = Int32
D3D12_VIDEO_FIELD_TYPE_NONE = 0
D3D12_VIDEO_FIELD_TYPE_INTERLACED_TOP_FIELD_FIRST = 1
D3D12_VIDEO_FIELD_TYPE_INTERLACED_BOTTOM_FIELD_FIRST = 2
D3D12_VIDEO_FRAME_STEREO_FORMAT = Int32
D3D12_VIDEO_FRAME_STEREO_FORMAT_NONE = 0
D3D12_VIDEO_FRAME_STEREO_FORMAT_MONO = 1
D3D12_VIDEO_FRAME_STEREO_FORMAT_HORIZONTAL = 2
D3D12_VIDEO_FRAME_STEREO_FORMAT_VERTICAL = 3
D3D12_VIDEO_FRAME_STEREO_FORMAT_SEPARATE = 4
def _define_D3D12_VIDEO_FORMAT_head():
    class D3D12_VIDEO_FORMAT(Structure):
        pass
    return D3D12_VIDEO_FORMAT
def _define_D3D12_VIDEO_FORMAT():
    D3D12_VIDEO_FORMAT = win32more.Media.MediaFoundation.D3D12_VIDEO_FORMAT_head
    D3D12_VIDEO_FORMAT._fields_ = [
        ("Format", win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ("ColorSpace", win32more.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE),
    ]
    return D3D12_VIDEO_FORMAT
def _define_D3D12_VIDEO_SAMPLE_head():
    class D3D12_VIDEO_SAMPLE(Structure):
        pass
    return D3D12_VIDEO_SAMPLE
def _define_D3D12_VIDEO_SAMPLE():
    D3D12_VIDEO_SAMPLE = win32more.Media.MediaFoundation.D3D12_VIDEO_SAMPLE_head
    D3D12_VIDEO_SAMPLE._fields_ = [
        ("Width", UInt32),
        ("Height", UInt32),
        ("Format", win32more.Media.MediaFoundation.D3D12_VIDEO_FORMAT),
    ]
    return D3D12_VIDEO_SAMPLE
D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE = Int32
D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_NONE = 0
D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_FIELD_BASED = 1
D3D12_FEATURE_VIDEO = Int32
D3D12_FEATURE_VIDEO_DECODE_SUPPORT = 0
D3D12_FEATURE_VIDEO_DECODE_PROFILES = 1
D3D12_FEATURE_VIDEO_DECODE_FORMATS = 2
D3D12_FEATURE_VIDEO_DECODE_CONVERSION_SUPPORT = 3
D3D12_FEATURE_VIDEO_PROCESS_SUPPORT = 5
D3D12_FEATURE_VIDEO_PROCESS_MAX_INPUT_STREAMS = 6
D3D12_FEATURE_VIDEO_PROCESS_REFERENCE_INFO = 7
D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE = 8
D3D12_FEATURE_VIDEO_PROCESSOR_SIZE = 9
D3D12_FEATURE_VIDEO_DECODE_PROFILE_COUNT = 10
D3D12_FEATURE_VIDEO_DECODE_FORMAT_COUNT = 11
D3D12_FEATURE_VIDEO_ARCHITECTURE = 17
D3D12_FEATURE_VIDEO_DECODE_HISTOGRAM = 18
D3D12_FEATURE_VIDEO_FEATURE_AREA_SUPPORT = 19
D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR = 20
D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_SIZE = 21
D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_COUNT = 22
D3D12_FEATURE_VIDEO_EXTENSION_COMMANDS = 23
D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT = 24
D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETERS = 25
D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SUPPORT = 26
D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SIZE = 27
D3D12_FEATURE_VIDEO_DECODE_PROTECTED_RESOURCES = 28
D3D12_FEATURE_VIDEO_PROCESS_PROTECTED_RESOURCES = 29
D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES = 30
D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE1 = 31
D3D12_FEATURE_VIDEO_PROCESSOR_SIZE1 = 32
D3D12_BITSTREAM_ENCRYPTION_TYPE = Int32
D3D12_BITSTREAM_ENCRYPTION_TYPE_NONE = 0
def _define_D3D12_VIDEO_DECODE_CONFIGURATION_head():
    class D3D12_VIDEO_DECODE_CONFIGURATION(Structure):
        pass
    return D3D12_VIDEO_DECODE_CONFIGURATION
def _define_D3D12_VIDEO_DECODE_CONFIGURATION():
    D3D12_VIDEO_DECODE_CONFIGURATION = win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION_head
    D3D12_VIDEO_DECODE_CONFIGURATION._fields_ = [
        ("DecodeProfile", Guid),
        ("BitstreamEncryption", win32more.Media.MediaFoundation.D3D12_BITSTREAM_ENCRYPTION_TYPE),
        ("InterlaceType", win32more.Media.MediaFoundation.D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE),
    ]
    return D3D12_VIDEO_DECODE_CONFIGURATION
def _define_D3D12_VIDEO_DECODER_DESC_head():
    class D3D12_VIDEO_DECODER_DESC(Structure):
        pass
    return D3D12_VIDEO_DECODER_DESC
def _define_D3D12_VIDEO_DECODER_DESC():
    D3D12_VIDEO_DECODER_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_DECODER_DESC_head
    D3D12_VIDEO_DECODER_DESC._fields_ = [
        ("NodeMask", UInt32),
        ("Configuration", win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION),
    ]
    return D3D12_VIDEO_DECODER_DESC
def _define_D3D12_VIDEO_DECODER_HEAP_DESC_head():
    class D3D12_VIDEO_DECODER_HEAP_DESC(Structure):
        pass
    return D3D12_VIDEO_DECODER_HEAP_DESC
def _define_D3D12_VIDEO_DECODER_HEAP_DESC():
    D3D12_VIDEO_DECODER_HEAP_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_DECODER_HEAP_DESC_head
    D3D12_VIDEO_DECODER_HEAP_DESC._fields_ = [
        ("NodeMask", UInt32),
        ("Configuration", win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION),
        ("DecodeWidth", UInt32),
        ("DecodeHeight", UInt32),
        ("Format", win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ("FrameRate", win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
        ("BitRate", UInt32),
        ("MaxDecodePictureBufferCount", UInt32),
    ]
    return D3D12_VIDEO_DECODER_HEAP_DESC
def _define_D3D12_VIDEO_SIZE_RANGE_head():
    class D3D12_VIDEO_SIZE_RANGE(Structure):
        pass
    return D3D12_VIDEO_SIZE_RANGE
def _define_D3D12_VIDEO_SIZE_RANGE():
    D3D12_VIDEO_SIZE_RANGE = win32more.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE_head
    D3D12_VIDEO_SIZE_RANGE._fields_ = [
        ("MaxWidth", UInt32),
        ("MaxHeight", UInt32),
        ("MinWidth", UInt32),
        ("MinHeight", UInt32),
    ]
    return D3D12_VIDEO_SIZE_RANGE
D3D12_VIDEO_PROCESS_FILTER = Int32
D3D12_VIDEO_PROCESS_FILTER_BRIGHTNESS = 0
D3D12_VIDEO_PROCESS_FILTER_CONTRAST = 1
D3D12_VIDEO_PROCESS_FILTER_HUE = 2
D3D12_VIDEO_PROCESS_FILTER_SATURATION = 3
D3D12_VIDEO_PROCESS_FILTER_NOISE_REDUCTION = 4
D3D12_VIDEO_PROCESS_FILTER_EDGE_ENHANCEMENT = 5
D3D12_VIDEO_PROCESS_FILTER_ANAMORPHIC_SCALING = 6
D3D12_VIDEO_PROCESS_FILTER_STEREO_ADJUSTMENT = 7
D3D12_VIDEO_PROCESS_FILTER_FLAGS = UInt32
D3D12_VIDEO_PROCESS_FILTER_FLAG_NONE = 0
D3D12_VIDEO_PROCESS_FILTER_FLAG_BRIGHTNESS = 1
D3D12_VIDEO_PROCESS_FILTER_FLAG_CONTRAST = 2
D3D12_VIDEO_PROCESS_FILTER_FLAG_HUE = 4
D3D12_VIDEO_PROCESS_FILTER_FLAG_SATURATION = 8
D3D12_VIDEO_PROCESS_FILTER_FLAG_NOISE_REDUCTION = 16
D3D12_VIDEO_PROCESS_FILTER_FLAG_EDGE_ENHANCEMENT = 32
D3D12_VIDEO_PROCESS_FILTER_FLAG_ANAMORPHIC_SCALING = 64
D3D12_VIDEO_PROCESS_FILTER_FLAG_STEREO_ADJUSTMENT = 128
D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS = UInt32
D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_NONE = 0
D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_BOB = 1
D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_CUSTOM = 2147483648
def _define_D3D12_VIDEO_PROCESS_ALPHA_BLENDING_head():
    class D3D12_VIDEO_PROCESS_ALPHA_BLENDING(Structure):
        pass
    return D3D12_VIDEO_PROCESS_ALPHA_BLENDING
def _define_D3D12_VIDEO_PROCESS_ALPHA_BLENDING():
    D3D12_VIDEO_PROCESS_ALPHA_BLENDING = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_ALPHA_BLENDING_head
    D3D12_VIDEO_PROCESS_ALPHA_BLENDING._fields_ = [
        ("Enable", win32more.Foundation.BOOL),
        ("Alpha", Single),
    ]
    return D3D12_VIDEO_PROCESS_ALPHA_BLENDING
def _define_D3D12_VIDEO_PROCESS_LUMA_KEY_head():
    class D3D12_VIDEO_PROCESS_LUMA_KEY(Structure):
        pass
    return D3D12_VIDEO_PROCESS_LUMA_KEY
def _define_D3D12_VIDEO_PROCESS_LUMA_KEY():
    D3D12_VIDEO_PROCESS_LUMA_KEY = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_LUMA_KEY_head
    D3D12_VIDEO_PROCESS_LUMA_KEY._fields_ = [
        ("Enable", win32more.Foundation.BOOL),
        ("Lower", Single),
        ("Upper", Single),
    ]
    return D3D12_VIDEO_PROCESS_LUMA_KEY
def _define_D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC_head():
    class D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC(Structure):
        pass
    return D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC
def _define_D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC():
    D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC_head
    D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC._fields_ = [
        ("Format", win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ("ColorSpace", win32more.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE),
        ("SourceAspectRatio", win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
        ("DestinationAspectRatio", win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
        ("FrameRate", win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
        ("SourceSizeRange", win32more.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE),
        ("DestinationSizeRange", win32more.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE),
        ("EnableOrientation", win32more.Foundation.BOOL),
        ("FilterFlags", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FILTER_FLAGS),
        ("StereoFormat", win32more.Media.MediaFoundation.D3D12_VIDEO_FRAME_STEREO_FORMAT),
        ("FieldType", win32more.Media.MediaFoundation.D3D12_VIDEO_FIELD_TYPE),
        ("DeinterlaceMode", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS),
        ("EnableAlphaBlending", win32more.Foundation.BOOL),
        ("LumaKey", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_LUMA_KEY),
        ("NumPastFrames", UInt32),
        ("NumFutureFrames", UInt32),
        ("EnableAutoProcessing", win32more.Foundation.BOOL),
    ]
    return D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC
D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE = Int32
D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_OPAQUE = 0
D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_BACKGROUND = 1
D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_DESTINATION = 2
D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_SOURCE_STREAM = 3
def _define_D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC_head():
    class D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC(Structure):
        pass
    return D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC
def _define_D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC():
    D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC_head
    D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC._fields_ = [
        ("Format", win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ("ColorSpace", win32more.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE),
        ("AlphaFillMode", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE),
        ("AlphaFillModeSourceStreamIndex", UInt32),
        ("BackgroundColor", Single * 4),
        ("FrameRate", win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
        ("EnableStereo", win32more.Foundation.BOOL),
    ]
    return D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC
def _define_ID3D12VideoDecoderHeap_head():
    class ID3D12VideoDecoderHeap(win32more.Graphics.Direct3D12.ID3D12Pageable_head):
        Guid = Guid('0946b7c9-ebf6-4047-bb73-8683e27dbb1f')
    return ID3D12VideoDecoderHeap
def _define_ID3D12VideoDecoderHeap():
    ID3D12VideoDecoderHeap = win32more.Media.MediaFoundation.ID3D12VideoDecoderHeap_head
    ID3D12VideoDecoderHeap.GetDesc = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.D3D12_VIDEO_DECODER_HEAP_DESC, use_last_error=False)(8, 'GetDesc', ()))
    win32more.Graphics.Direct3D12.ID3D12Pageable
    return ID3D12VideoDecoderHeap
def _define_ID3D12VideoDevice_head():
    class ID3D12VideoDevice(win32more.System.Com.IUnknown_head):
        Guid = Guid('1f052807-0b46-4acc-8a89-364f793718a4')
    return ID3D12VideoDevice
def _define_ID3D12VideoDevice():
    ID3D12VideoDevice = win32more.Media.MediaFoundation.ID3D12VideoDevice_head
    ID3D12VideoDevice.CheckFeatureSupport = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.D3D12_FEATURE_VIDEO,c_void_p,UInt32, use_last_error=False)(3, 'CheckFeatureSupport', ((1, 'FeatureVideo'),(1, 'pFeatureSupportData'),(1, 'FeatureSupportDataSize'),)))
    ID3D12VideoDevice.CreateVideoDecoder = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_DECODER_DESC_head),POINTER(Guid),POINTER(c_void_p), use_last_error=False)(4, 'CreateVideoDecoder', ((1, 'pDesc'),(1, 'riid'),(1, 'ppVideoDecoder'),)))
    ID3D12VideoDevice.CreateVideoDecoderHeap = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_DECODER_HEAP_DESC_head),POINTER(Guid),POINTER(c_void_p), use_last_error=False)(5, 'CreateVideoDecoderHeap', ((1, 'pVideoDecoderHeapDesc'),(1, 'riid'),(1, 'ppVideoDecoderHeap'),)))
    ID3D12VideoDevice.CreateVideoProcessor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC_head),UInt32,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC),POINTER(Guid),POINTER(c_void_p), use_last_error=False)(6, 'CreateVideoProcessor', ((1, 'NodeMask'),(1, 'pOutputStreamDesc'),(1, 'NumInputStreamDescs'),(1, 'pInputStreamDescs'),(1, 'riid'),(1, 'ppVideoProcessor'),)))
    win32more.System.Com.IUnknown
    return ID3D12VideoDevice
def _define_ID3D12VideoDecoder_head():
    class ID3D12VideoDecoder(win32more.Graphics.Direct3D12.ID3D12Pageable_head):
        Guid = Guid('c59b6bdc-7720-4074-a136-17a156037470')
    return ID3D12VideoDecoder
def _define_ID3D12VideoDecoder():
    ID3D12VideoDecoder = win32more.Media.MediaFoundation.ID3D12VideoDecoder_head
    ID3D12VideoDecoder.GetDesc = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.D3D12_VIDEO_DECODER_DESC, use_last_error=False)(8, 'GetDesc', ()))
    win32more.Graphics.Direct3D12.ID3D12Pageable
    return ID3D12VideoDecoder
D3D12_VIDEO_DECODE_TIER = Int32
D3D12_VIDEO_DECODE_TIER_NOT_SUPPORTED = 0
D3D12_VIDEO_DECODE_TIER_1 = 1
D3D12_VIDEO_DECODE_TIER_2 = 2
D3D12_VIDEO_DECODE_TIER_3 = 3
D3D12_VIDEO_DECODE_SUPPORT_FLAGS = UInt32
D3D12_VIDEO_DECODE_SUPPORT_FLAG_NONE = 0
D3D12_VIDEO_DECODE_SUPPORT_FLAG_SUPPORTED = 1
D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS = UInt32
D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_NONE = 0
D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_HEIGHT_ALIGNMENT_MULTIPLE_32_REQUIRED = 1
D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_POST_PROCESSING_SUPPORTED = 2
D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_REFERENCE_ONLY_ALLOCATIONS_REQUIRED = 4
D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_ALLOW_RESOLUTION_CHANGE_ON_NON_KEY_FRAME = 8
D3D12_VIDEO_DECODE_STATUS = Int32
D3D12_VIDEO_DECODE_STATUS_OK = 0
D3D12_VIDEO_DECODE_STATUS_CONTINUE = 1
D3D12_VIDEO_DECODE_STATUS_CONTINUE_SKIP_DISPLAY = 2
D3D12_VIDEO_DECODE_STATUS_RESTART = 3
D3D12_VIDEO_DECODE_STATUS_RATE_EXCEEDED = 4
D3D12_VIDEO_DECODE_ARGUMENT_TYPE = Int32
D3D12_VIDEO_DECODE_ARGUMENT_TYPE_PICTURE_PARAMETERS = 0
D3D12_VIDEO_DECODE_ARGUMENT_TYPE_INVERSE_QUANTIZATION_MATRIX = 1
D3D12_VIDEO_DECODE_ARGUMENT_TYPE_SLICE_CONTROL = 2
D3D12_VIDEO_DECODE_ARGUMENT_TYPE_MAX_VALID = 3
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT_head():
    class D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT():
    D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT_head
    D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT._fields_ = [
        ("NodeIndex", UInt32),
        ("Configuration", win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION),
        ("Width", UInt32),
        ("Height", UInt32),
        ("DecodeFormat", win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ("FrameRate", win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
        ("BitRate", UInt32),
        ("SupportFlags", win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_SUPPORT_FLAGS),
        ("ConfigurationFlags", win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS),
        ("DecodeTier", win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_TIER),
    ]
    return D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT_head():
    class D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT():
    D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT_head
    D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT._fields_ = [
        ("NodeIndex", UInt32),
        ("ProfileCount", UInt32),
    ]
    return D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES_head():
    class D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES():
    D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES_head
    D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES._fields_ = [
        ("NodeIndex", UInt32),
        ("ProfileCount", UInt32),
        ("pProfiles", POINTER(Guid)),
    ]
    return D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT_head():
    class D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT():
    D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT_head
    D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT._fields_ = [
        ("NodeIndex", UInt32),
        ("Configuration", win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION),
        ("FormatCount", UInt32),
    ]
    return D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS_head():
    class D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS():
    D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS_head
    D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS._fields_ = [
        ("NodeIndex", UInt32),
        ("Configuration", win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION),
        ("FormatCount", UInt32),
        ("pOutputFormats", POINTER(win32more.Graphics.Dxgi.Common.DXGI_FORMAT)),
    ]
    return D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS
def _define_D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE_head():
    class D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE
def _define_D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE():
    D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE_head
    D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE._fields_ = [
        ("IOCoherent", win32more.Foundation.BOOL),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT = Int32
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_Y = 0
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_U = 1
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_V = 2
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_R = 0
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_G = 1
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_B = 2
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_A = 3
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS = UInt32
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_NONE = 0
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_Y = 1
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_U = 2
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_V = 4
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_R = 1
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_G = 2
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_B = 4
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_A = 8
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM_head():
    class D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM():
    D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM_head
    D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM._fields_ = [
        ("NodeIndex", UInt32),
        ("DecodeProfile", Guid),
        ("Width", UInt32),
        ("Height", UInt32),
        ("DecodeFormat", win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ("Components", win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS),
        ("BinCount", UInt32),
        ("CounterBitDepth", UInt32),
    ]
    return D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM
D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS = UInt32
D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_NONE = 0
D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_SUPPORTED = 1
D3D12_VIDEO_SCALE_SUPPORT_FLAGS = UInt32
D3D12_VIDEO_SCALE_SUPPORT_FLAG_NONE = 0
D3D12_VIDEO_SCALE_SUPPORT_FLAG_POW2_ONLY = 1
D3D12_VIDEO_SCALE_SUPPORT_FLAG_EVEN_DIMENSIONS_ONLY = 2
def _define_D3D12_VIDEO_SCALE_SUPPORT_head():
    class D3D12_VIDEO_SCALE_SUPPORT(Structure):
        pass
    return D3D12_VIDEO_SCALE_SUPPORT
def _define_D3D12_VIDEO_SCALE_SUPPORT():
    D3D12_VIDEO_SCALE_SUPPORT = win32more.Media.MediaFoundation.D3D12_VIDEO_SCALE_SUPPORT_head
    D3D12_VIDEO_SCALE_SUPPORT._fields_ = [
        ("OutputSizeRange", win32more.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE),
        ("Flags", win32more.Media.MediaFoundation.D3D12_VIDEO_SCALE_SUPPORT_FLAGS),
    ]
    return D3D12_VIDEO_SCALE_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT_head():
    class D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT():
    D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT_head
    D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT._fields_ = [
        ("NodeIndex", UInt32),
        ("Configuration", win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION),
        ("DecodeSample", win32more.Media.MediaFoundation.D3D12_VIDEO_SAMPLE),
        ("OutputFormat", win32more.Media.MediaFoundation.D3D12_VIDEO_FORMAT),
        ("FrameRate", win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
        ("BitRate", UInt32),
        ("SupportFlags", win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS),
        ("ScaleSupport", win32more.Media.MediaFoundation.D3D12_VIDEO_SCALE_SUPPORT),
    ]
    return D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE_head():
    class D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE
def _define_D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE():
    D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE_head
    D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE._fields_ = [
        ("VideoDecoderHeapDesc", win32more.Media.MediaFoundation.D3D12_VIDEO_DECODER_HEAP_DESC),
        ("MemoryPoolL0Size", UInt64),
        ("MemoryPoolL1Size", UInt64),
    ]
    return D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE
def _define_D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE_head():
    class D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE
def _define_D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE():
    D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE_head
    D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE._fields_ = [
        ("NodeMask", UInt32),
        ("pOutputStreamDesc", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC_head)),
        ("NumInputStreamDescs", UInt32),
        ("pInputStreamDescs", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC_head)),
        ("MemoryPoolL0Size", UInt64),
        ("MemoryPoolL1Size", UInt64),
    ]
    return D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE
def _define_D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS_head():
    class D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS(Structure):
        pass
    return D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS
def _define_D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS():
    D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS = win32more.Media.MediaFoundation.D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS_head
    D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS._fields_ = [
        ("Status", UInt64),
        ("NumMacroblocksAffected", UInt64),
        ("FrameRate", win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
        ("BitRate", UInt32),
    ]
    return D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS
def _define_D3D12_VIDEO_DECODE_FRAME_ARGUMENT_head():
    class D3D12_VIDEO_DECODE_FRAME_ARGUMENT(Structure):
        pass
    return D3D12_VIDEO_DECODE_FRAME_ARGUMENT
def _define_D3D12_VIDEO_DECODE_FRAME_ARGUMENT():
    D3D12_VIDEO_DECODE_FRAME_ARGUMENT = win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_FRAME_ARGUMENT_head
    D3D12_VIDEO_DECODE_FRAME_ARGUMENT._fields_ = [
        ("Type", win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_ARGUMENT_TYPE),
        ("Size", UInt32),
        ("pData", c_void_p),
    ]
    return D3D12_VIDEO_DECODE_FRAME_ARGUMENT
def _define_D3D12_VIDEO_DECODE_REFERENCE_FRAMES_head():
    class D3D12_VIDEO_DECODE_REFERENCE_FRAMES(Structure):
        pass
    return D3D12_VIDEO_DECODE_REFERENCE_FRAMES
def _define_D3D12_VIDEO_DECODE_REFERENCE_FRAMES():
    D3D12_VIDEO_DECODE_REFERENCE_FRAMES = win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_REFERENCE_FRAMES_head
    D3D12_VIDEO_DECODE_REFERENCE_FRAMES._fields_ = [
        ("NumTexture2Ds", UInt32),
        ("ppTexture2Ds", POINTER(win32more.Graphics.Direct3D12.ID3D12Resource_head)),
        ("pSubresources", POINTER(UInt32)),
        ("ppHeaps", POINTER(win32more.Media.MediaFoundation.ID3D12VideoDecoderHeap_head)),
    ]
    return D3D12_VIDEO_DECODE_REFERENCE_FRAMES
def _define_D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM_head():
    class D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM(Structure):
        pass
    return D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM
def _define_D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM():
    D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM = win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM_head
    D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM._fields_ = [
        ("pBuffer", win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ("Offset", UInt64),
        ("Size", UInt64),
    ]
    return D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM
def _define_D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS_head():
    class D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS(Structure):
        pass
    return D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS
def _define_D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS():
    D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS = win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS_head
    D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS._fields_ = [
        ("Enable", win32more.Foundation.BOOL),
        ("pReferenceTexture2D", win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ("ReferenceSubresource", UInt32),
        ("OutputColorSpace", win32more.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE),
        ("DecodeColorSpace", win32more.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE),
    ]
    return D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS
def _define_D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS_head():
    class D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS(Structure):
        pass
    return D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS
def _define_D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS():
    D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS = win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS_head
    D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS._fields_ = [
        ("NumFrameArguments", UInt32),
        ("FrameArguments", win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_FRAME_ARGUMENT * 10),
        ("ReferenceFrames", win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_REFERENCE_FRAMES),
        ("CompressedBitstream", win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM),
        ("pHeap", win32more.Media.MediaFoundation.ID3D12VideoDecoderHeap_head),
    ]
    return D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS
def _define_D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS_head():
    class D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS(Structure):
        pass
    return D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS
def _define_D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS():
    D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS = win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS_head
    D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS._fields_ = [
        ("pOutputTexture2D", win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ("OutputSubresource", UInt32),
        ("ConversionArguments", win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS),
    ]
    return D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS
def _define_ID3D12VideoProcessor_head():
    class ID3D12VideoProcessor(win32more.Graphics.Direct3D12.ID3D12Pageable_head):
        Guid = Guid('304fdb32-bede-410a-8545-943ac6a46138')
    return ID3D12VideoProcessor
def _define_ID3D12VideoProcessor():
    ID3D12VideoProcessor = win32more.Media.MediaFoundation.ID3D12VideoProcessor_head
    ID3D12VideoProcessor.GetNodeMask = COMMETHOD(WINFUNCTYPE(UInt32, use_last_error=False)(8, 'GetNodeMask', ()))
    ID3D12VideoProcessor.GetNumInputStreamDescs = COMMETHOD(WINFUNCTYPE(UInt32, use_last_error=False)(9, 'GetNumInputStreamDescs', ()))
    ID3D12VideoProcessor.GetInputStreamDescs = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC), use_last_error=False)(10, 'GetInputStreamDescs', ((1, 'NumInputStreamDescs'),(1, 'pInputStreamDescs'),)))
    ID3D12VideoProcessor.GetOutputStreamDesc = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC, use_last_error=False)(11, 'GetOutputStreamDesc', ()))
    win32more.Graphics.Direct3D12.ID3D12Pageable
    return ID3D12VideoProcessor
D3D12_VIDEO_PROCESS_FEATURE_FLAGS = UInt32
D3D12_VIDEO_PROCESS_FEATURE_FLAG_NONE = 0
D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_FILL = 1
D3D12_VIDEO_PROCESS_FEATURE_FLAG_LUMA_KEY = 2
D3D12_VIDEO_PROCESS_FEATURE_FLAG_STEREO = 4
D3D12_VIDEO_PROCESS_FEATURE_FLAG_ROTATION = 8
D3D12_VIDEO_PROCESS_FEATURE_FLAG_FLIP = 16
D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_BLENDING = 32
D3D12_VIDEO_PROCESS_FEATURE_FLAG_PIXEL_ASPECT_RATIO = 64
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS = UInt32
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_NONE = 0
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DENOISE = 1
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DERINGING = 2
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_EDGE_ENHANCEMENT = 4
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_COLOR_CORRECTION = 8
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_FLESH_TONE_MAPPING = 16
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_IMAGE_STABILIZATION = 32
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_SUPER_RESOLUTION = 64
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_ANAMORPHIC_SCALING = 128
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_CUSTOM = 2147483648
D3D12_VIDEO_PROCESS_ORIENTATION = Int32
D3D12_VIDEO_PROCESS_ORIENTATION_DEFAULT = 0
D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_HORIZONTAL = 1
D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90 = 2
D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90_FLIP_HORIZONTAL = 3
D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_180 = 4
D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_VERTICAL = 5
D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270 = 6
D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270_FLIP_HORIZONTAL = 7
D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS = UInt32
D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_NONE = 0
D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_DISCONTINUITY = 1
D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_REPEAT = 2
def _define_D3D12_VIDEO_PROCESS_FILTER_RANGE_head():
    class D3D12_VIDEO_PROCESS_FILTER_RANGE(Structure):
        pass
    return D3D12_VIDEO_PROCESS_FILTER_RANGE
def _define_D3D12_VIDEO_PROCESS_FILTER_RANGE():
    D3D12_VIDEO_PROCESS_FILTER_RANGE = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FILTER_RANGE_head
    D3D12_VIDEO_PROCESS_FILTER_RANGE._fields_ = [
        ("Minimum", Int32),
        ("Maximum", Int32),
        ("Default", Int32),
        ("Multiplier", Single),
    ]
    return D3D12_VIDEO_PROCESS_FILTER_RANGE
D3D12_VIDEO_PROCESS_SUPPORT_FLAGS = UInt32
D3D12_VIDEO_PROCESS_SUPPORT_FLAG_NONE = 0
D3D12_VIDEO_PROCESS_SUPPORT_FLAG_SUPPORTED = 1
def _define_D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT_head():
    class D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT():
    D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT_head
    D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT._fields_ = [
        ("NodeIndex", UInt32),
        ("InputSample", win32more.Media.MediaFoundation.D3D12_VIDEO_SAMPLE),
        ("InputFieldType", win32more.Media.MediaFoundation.D3D12_VIDEO_FIELD_TYPE),
        ("InputStereoFormat", win32more.Media.MediaFoundation.D3D12_VIDEO_FRAME_STEREO_FORMAT),
        ("InputFrameRate", win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
        ("OutputFormat", win32more.Media.MediaFoundation.D3D12_VIDEO_FORMAT),
        ("OutputStereoFormat", win32more.Media.MediaFoundation.D3D12_VIDEO_FRAME_STEREO_FORMAT),
        ("OutputFrameRate", win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
        ("SupportFlags", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_SUPPORT_FLAGS),
        ("ScaleSupport", win32more.Media.MediaFoundation.D3D12_VIDEO_SCALE_SUPPORT),
        ("FeatureSupport", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FEATURE_FLAGS),
        ("DeinterlaceSupport", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS),
        ("AutoProcessingSupport", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS),
        ("FilterSupport", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FILTER_FLAGS),
        ("FilterRangeSupport", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FILTER_RANGE * 32),
    ]
    return D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS_head():
    class D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS
def _define_D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS():
    D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS_head
    D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS._fields_ = [
        ("NodeIndex", UInt32),
        ("MaxInputStreams", UInt32),
    ]
    return D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS
def _define_D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO_head():
    class D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO
def _define_D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO():
    D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO_head
    D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO._fields_ = [
        ("NodeIndex", UInt32),
        ("DeinterlaceMode", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS),
        ("Filters", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FILTER_FLAGS),
        ("FeatureSupport", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FEATURE_FLAGS),
        ("InputFrameRate", win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
        ("OutputFrameRate", win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
        ("EnableAutoProcessing", win32more.Foundation.BOOL),
        ("PastFrames", UInt32),
        ("FutureFrames", UInt32),
    ]
    return D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO
def _define_D3D12_VIDEO_PROCESS_REFERENCE_SET_head():
    class D3D12_VIDEO_PROCESS_REFERENCE_SET(Structure):
        pass
    return D3D12_VIDEO_PROCESS_REFERENCE_SET
def _define_D3D12_VIDEO_PROCESS_REFERENCE_SET():
    D3D12_VIDEO_PROCESS_REFERENCE_SET = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_REFERENCE_SET_head
    D3D12_VIDEO_PROCESS_REFERENCE_SET._fields_ = [
        ("NumPastFrames", UInt32),
        ("ppPastFrames", POINTER(win32more.Graphics.Direct3D12.ID3D12Resource_head)),
        ("pPastSubresources", POINTER(UInt32)),
        ("NumFutureFrames", UInt32),
        ("ppFutureFrames", POINTER(win32more.Graphics.Direct3D12.ID3D12Resource_head)),
        ("pFutureSubresources", POINTER(UInt32)),
    ]
    return D3D12_VIDEO_PROCESS_REFERENCE_SET
def _define_D3D12_VIDEO_PROCESS_TRANSFORM_head():
    class D3D12_VIDEO_PROCESS_TRANSFORM(Structure):
        pass
    return D3D12_VIDEO_PROCESS_TRANSFORM
def _define_D3D12_VIDEO_PROCESS_TRANSFORM():
    D3D12_VIDEO_PROCESS_TRANSFORM = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_TRANSFORM_head
    D3D12_VIDEO_PROCESS_TRANSFORM._fields_ = [
        ("SourceRectangle", win32more.Foundation.RECT),
        ("DestinationRectangle", win32more.Foundation.RECT),
        ("Orientation", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_ORIENTATION),
    ]
    return D3D12_VIDEO_PROCESS_TRANSFORM
def _define_D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE_head():
    class D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE(Structure):
        pass
    return D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE
def _define_D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE():
    D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE_head
    D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE._fields_ = [
        ("OutputIndex", UInt32),
        ("InputFrameOrField", UInt32),
    ]
    return D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE
def _define_D3D12_VIDEO_PROCESS_INPUT_STREAM_head():
    class D3D12_VIDEO_PROCESS_INPUT_STREAM(Structure):
        pass
    return D3D12_VIDEO_PROCESS_INPUT_STREAM
def _define_D3D12_VIDEO_PROCESS_INPUT_STREAM():
    D3D12_VIDEO_PROCESS_INPUT_STREAM = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_head
    D3D12_VIDEO_PROCESS_INPUT_STREAM._fields_ = [
        ("pTexture2D", win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ("Subresource", UInt32),
        ("ReferenceSet", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_REFERENCE_SET),
    ]
    return D3D12_VIDEO_PROCESS_INPUT_STREAM
def _define_D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS_head():
    class D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS(Structure):
        pass
    return D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS
def _define_D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS():
    D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS_head
    D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS._fields_ = [
        ("InputStream", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM * 2),
        ("Transform", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_TRANSFORM),
        ("Flags", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS),
        ("RateInfo", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE),
        ("FilterLevels", Int32 * 32),
        ("AlphaBlending", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_ALPHA_BLENDING),
    ]
    return D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS
def _define_D3D12_VIDEO_PROCESS_OUTPUT_STREAM_head():
    class D3D12_VIDEO_PROCESS_OUTPUT_STREAM(Structure):
        pass
    return D3D12_VIDEO_PROCESS_OUTPUT_STREAM
def _define_D3D12_VIDEO_PROCESS_OUTPUT_STREAM():
    D3D12_VIDEO_PROCESS_OUTPUT_STREAM = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_head
    D3D12_VIDEO_PROCESS_OUTPUT_STREAM._fields_ = [
        ("pTexture2D", win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ("Subresource", UInt32),
    ]
    return D3D12_VIDEO_PROCESS_OUTPUT_STREAM
def _define_D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS_head():
    class D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS(Structure):
        pass
    return D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS
def _define_D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS():
    D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS_head
    D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS._fields_ = [
        ("OutputStream", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM * 2),
        ("TargetRectangle", win32more.Foundation.RECT),
    ]
    return D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS
def _define_ID3D12VideoDecodeCommandList_head():
    class ID3D12VideoDecodeCommandList(win32more.Graphics.Direct3D12.ID3D12CommandList_head):
        Guid = Guid('3b60536e-ad29-4e64-a269-f853837e5e53')
    return ID3D12VideoDecodeCommandList
def _define_ID3D12VideoDecodeCommandList():
    ID3D12VideoDecodeCommandList = win32more.Media.MediaFoundation.ID3D12VideoDecodeCommandList_head
    ID3D12VideoDecodeCommandList.Close = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(9, 'Close', ()))
    ID3D12VideoDecodeCommandList.Reset = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D12.ID3D12CommandAllocator_head, use_last_error=False)(10, 'Reset', ((1, 'pAllocator'),)))
    ID3D12VideoDecodeCommandList.ClearState = COMMETHOD(WINFUNCTYPE(Void, use_last_error=False)(11, 'ClearState', ()))
    ID3D12VideoDecodeCommandList.ResourceBarrier = COMMETHOD(WINFUNCTYPE(Void,UInt32,POINTER(win32more.Graphics.Direct3D12.D3D12_RESOURCE_BARRIER), use_last_error=False)(12, 'ResourceBarrier', ((1, 'NumBarriers'),(1, 'pBarriers'),)))
    ID3D12VideoDecodeCommandList.DiscardResource = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12Resource_head,POINTER(win32more.Graphics.Direct3D12.D3D12_DISCARD_REGION_head), use_last_error=False)(13, 'DiscardResource', ((1, 'pResource'),(1, 'pRegion'),)))
    ID3D12VideoDecodeCommandList.BeginQuery = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12QueryHeap_head,win32more.Graphics.Direct3D12.D3D12_QUERY_TYPE,UInt32, use_last_error=False)(14, 'BeginQuery', ((1, 'pQueryHeap'),(1, 'Type'),(1, 'Index'),)))
    ID3D12VideoDecodeCommandList.EndQuery = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12QueryHeap_head,win32more.Graphics.Direct3D12.D3D12_QUERY_TYPE,UInt32, use_last_error=False)(15, 'EndQuery', ((1, 'pQueryHeap'),(1, 'Type'),(1, 'Index'),)))
    ID3D12VideoDecodeCommandList.ResolveQueryData = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12QueryHeap_head,win32more.Graphics.Direct3D12.D3D12_QUERY_TYPE,UInt32,UInt32,win32more.Graphics.Direct3D12.ID3D12Resource_head,UInt64, use_last_error=False)(16, 'ResolveQueryData', ((1, 'pQueryHeap'),(1, 'Type'),(1, 'StartIndex'),(1, 'NumQueries'),(1, 'pDestinationBuffer'),(1, 'AlignedDestinationBufferOffset'),)))
    ID3D12VideoDecodeCommandList.SetPredication = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12Resource_head,UInt64,win32more.Graphics.Direct3D12.D3D12_PREDICATION_OP, use_last_error=False)(17, 'SetPredication', ((1, 'pBuffer'),(1, 'AlignedBufferOffset'),(1, 'Operation'),)))
    ID3D12VideoDecodeCommandList.SetMarker = COMMETHOD(WINFUNCTYPE(Void,UInt32,c_void_p,UInt32, use_last_error=False)(18, 'SetMarker', ((1, 'Metadata'),(1, 'pData'),(1, 'Size'),)))
    ID3D12VideoDecodeCommandList.BeginEvent = COMMETHOD(WINFUNCTYPE(Void,UInt32,c_void_p,UInt32, use_last_error=False)(19, 'BeginEvent', ((1, 'Metadata'),(1, 'pData'),(1, 'Size'),)))
    ID3D12VideoDecodeCommandList.EndEvent = COMMETHOD(WINFUNCTYPE(Void, use_last_error=False)(20, 'EndEvent', ()))
    ID3D12VideoDecodeCommandList.DecodeFrame = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.ID3D12VideoDecoder_head,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS_head),POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS_head), use_last_error=False)(21, 'DecodeFrame', ((1, 'pDecoder'),(1, 'pOutputArguments'),(1, 'pInputArguments'),)))
    ID3D12VideoDecodeCommandList.WriteBufferImmediate = COMMETHOD(WINFUNCTYPE(Void,UInt32,POINTER(win32more.Graphics.Direct3D12.D3D12_WRITEBUFFERIMMEDIATE_PARAMETER),POINTER(win32more.Graphics.Direct3D12.D3D12_WRITEBUFFERIMMEDIATE_MODE), use_last_error=False)(22, 'WriteBufferImmediate', ((1, 'Count'),(1, 'pParams'),(1, 'pModes'),)))
    win32more.Graphics.Direct3D12.ID3D12CommandList
    return ID3D12VideoDecodeCommandList
def _define_ID3D12VideoProcessCommandList_head():
    class ID3D12VideoProcessCommandList(win32more.Graphics.Direct3D12.ID3D12CommandList_head):
        Guid = Guid('aeb2543a-167f-4682-acc8-d159ed4a6209')
    return ID3D12VideoProcessCommandList
def _define_ID3D12VideoProcessCommandList():
    ID3D12VideoProcessCommandList = win32more.Media.MediaFoundation.ID3D12VideoProcessCommandList_head
    ID3D12VideoProcessCommandList.Close = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(9, 'Close', ()))
    ID3D12VideoProcessCommandList.Reset = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D12.ID3D12CommandAllocator_head, use_last_error=False)(10, 'Reset', ((1, 'pAllocator'),)))
    ID3D12VideoProcessCommandList.ClearState = COMMETHOD(WINFUNCTYPE(Void, use_last_error=False)(11, 'ClearState', ()))
    ID3D12VideoProcessCommandList.ResourceBarrier = COMMETHOD(WINFUNCTYPE(Void,UInt32,POINTER(win32more.Graphics.Direct3D12.D3D12_RESOURCE_BARRIER), use_last_error=False)(12, 'ResourceBarrier', ((1, 'NumBarriers'),(1, 'pBarriers'),)))
    ID3D12VideoProcessCommandList.DiscardResource = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12Resource_head,POINTER(win32more.Graphics.Direct3D12.D3D12_DISCARD_REGION_head), use_last_error=False)(13, 'DiscardResource', ((1, 'pResource'),(1, 'pRegion'),)))
    ID3D12VideoProcessCommandList.BeginQuery = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12QueryHeap_head,win32more.Graphics.Direct3D12.D3D12_QUERY_TYPE,UInt32, use_last_error=False)(14, 'BeginQuery', ((1, 'pQueryHeap'),(1, 'Type'),(1, 'Index'),)))
    ID3D12VideoProcessCommandList.EndQuery = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12QueryHeap_head,win32more.Graphics.Direct3D12.D3D12_QUERY_TYPE,UInt32, use_last_error=False)(15, 'EndQuery', ((1, 'pQueryHeap'),(1, 'Type'),(1, 'Index'),)))
    ID3D12VideoProcessCommandList.ResolveQueryData = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12QueryHeap_head,win32more.Graphics.Direct3D12.D3D12_QUERY_TYPE,UInt32,UInt32,win32more.Graphics.Direct3D12.ID3D12Resource_head,UInt64, use_last_error=False)(16, 'ResolveQueryData', ((1, 'pQueryHeap'),(1, 'Type'),(1, 'StartIndex'),(1, 'NumQueries'),(1, 'pDestinationBuffer'),(1, 'AlignedDestinationBufferOffset'),)))
    ID3D12VideoProcessCommandList.SetPredication = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12Resource_head,UInt64,win32more.Graphics.Direct3D12.D3D12_PREDICATION_OP, use_last_error=False)(17, 'SetPredication', ((1, 'pBuffer'),(1, 'AlignedBufferOffset'),(1, 'Operation'),)))
    ID3D12VideoProcessCommandList.SetMarker = COMMETHOD(WINFUNCTYPE(Void,UInt32,c_void_p,UInt32, use_last_error=False)(18, 'SetMarker', ((1, 'Metadata'),(1, 'pData'),(1, 'Size'),)))
    ID3D12VideoProcessCommandList.BeginEvent = COMMETHOD(WINFUNCTYPE(Void,UInt32,c_void_p,UInt32, use_last_error=False)(19, 'BeginEvent', ((1, 'Metadata'),(1, 'pData'),(1, 'Size'),)))
    ID3D12VideoProcessCommandList.EndEvent = COMMETHOD(WINFUNCTYPE(Void, use_last_error=False)(20, 'EndEvent', ()))
    ID3D12VideoProcessCommandList.ProcessFrames = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.ID3D12VideoProcessor_head,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS_head),UInt32,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS), use_last_error=False)(21, 'ProcessFrames', ((1, 'pVideoProcessor'),(1, 'pOutputArguments'),(1, 'NumInputStreams'),(1, 'pInputArguments'),)))
    ID3D12VideoProcessCommandList.WriteBufferImmediate = COMMETHOD(WINFUNCTYPE(Void,UInt32,POINTER(win32more.Graphics.Direct3D12.D3D12_WRITEBUFFERIMMEDIATE_PARAMETER),POINTER(win32more.Graphics.Direct3D12.D3D12_WRITEBUFFERIMMEDIATE_MODE), use_last_error=False)(22, 'WriteBufferImmediate', ((1, 'Count'),(1, 'pParams'),(1, 'pModes'),)))
    win32more.Graphics.Direct3D12.ID3D12CommandList
    return ID3D12VideoProcessCommandList
def _define_D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM_head():
    class D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM(Structure):
        pass
    return D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM
def _define_D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM():
    D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM = win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM_head
    D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM._fields_ = [
        ("Offset", UInt64),
        ("pBuffer", win32more.Graphics.Direct3D12.ID3D12Resource_head),
    ]
    return D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM
def _define_D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1_head():
    class D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1(Structure):
        pass
    return D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1
def _define_D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1():
    D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1 = win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1_head
    D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1._fields_ = [
        ("Enable", win32more.Foundation.BOOL),
        ("pReferenceTexture2D", win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ("ReferenceSubresource", UInt32),
        ("OutputColorSpace", win32more.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE),
        ("DecodeColorSpace", win32more.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE),
        ("OutputWidth", UInt32),
        ("OutputHeight", UInt32),
    ]
    return D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1
def _define_D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1_head():
    class D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1(Structure):
        pass
    return D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1
def _define_D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1():
    D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1 = win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1_head
    D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1._fields_ = [
        ("pOutputTexture2D", win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ("OutputSubresource", UInt32),
        ("ConversionArguments", win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1),
        ("Histograms", win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM * 4),
    ]
    return D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1
def _define_ID3D12VideoDecodeCommandList1_head():
    class ID3D12VideoDecodeCommandList1(win32more.Media.MediaFoundation.ID3D12VideoDecodeCommandList_head):
        Guid = Guid('d52f011b-b56e-453c-a05a-a7f311c8f472')
    return ID3D12VideoDecodeCommandList1
def _define_ID3D12VideoDecodeCommandList1():
    ID3D12VideoDecodeCommandList1 = win32more.Media.MediaFoundation.ID3D12VideoDecodeCommandList1_head
    ID3D12VideoDecodeCommandList1.DecodeFrame1 = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.ID3D12VideoDecoder_head,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1_head),POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS_head), use_last_error=False)(23, 'DecodeFrame1', ((1, 'pDecoder'),(1, 'pOutputArguments'),(1, 'pInputArguments'),)))
    win32more.Media.MediaFoundation.ID3D12VideoDecodeCommandList
    return ID3D12VideoDecodeCommandList1
def _define_D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1_head():
    class D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1(Structure):
        pass
    return D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1
def _define_D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1():
    D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1 = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1_head
    D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1._fields_ = [
        ("InputStream", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM * 2),
        ("Transform", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_TRANSFORM),
        ("Flags", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS),
        ("RateInfo", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE),
        ("FilterLevels", Int32 * 32),
        ("AlphaBlending", win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_ALPHA_BLENDING),
        ("FieldType", win32more.Media.MediaFoundation.D3D12_VIDEO_FIELD_TYPE),
    ]
    return D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1
def _define_ID3D12VideoProcessCommandList1_head():
    class ID3D12VideoProcessCommandList1(win32more.Media.MediaFoundation.ID3D12VideoProcessCommandList_head):
        Guid = Guid('542c5c4d-7596-434f-8c93-4efa6766f267')
    return ID3D12VideoProcessCommandList1
def _define_ID3D12VideoProcessCommandList1():
    ID3D12VideoProcessCommandList1 = win32more.Media.MediaFoundation.ID3D12VideoProcessCommandList1_head
    ID3D12VideoProcessCommandList1.ProcessFrames1 = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.ID3D12VideoProcessor_head,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS_head),UInt32,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1), use_last_error=False)(23, 'ProcessFrames1', ((1, 'pVideoProcessor'),(1, 'pOutputArguments'),(1, 'NumInputStreams'),(1, 'pInputArguments'),)))
    win32more.Media.MediaFoundation.ID3D12VideoProcessCommandList
    return ID3D12VideoProcessCommandList1
D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE = Int32
D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_8X8 = 0
D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_16X16 = 1
D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS = UInt32
D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_NONE = 0
D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_8X8 = 1
D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_16X16 = 2
D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION = Int32
D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_QUARTER_PEL = 0
D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS = UInt32
D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_NONE = 0
D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_QUARTER_PEL = 1
def _define_D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT_head():
    class D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT():
    D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT_head
    D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT._fields_ = [
        ("NodeIndex", UInt32),
        ("VideoDecodeSupport", win32more.Foundation.BOOL),
        ("VideoProcessSupport", win32more.Foundation.BOOL),
        ("VideoEncodeSupport", win32more.Foundation.BOOL),
    ]
    return D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_head():
    class D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR
def _define_D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR():
    D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_head
    D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR._fields_ = [
        ("NodeIndex", UInt32),
        ("InputFormat", win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ("BlockSizeFlags", win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS),
        ("PrecisionFlags", win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS),
        ("SizeRange", win32more.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE),
    ]
    return D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR
def _define_D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE_head():
    class D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE
def _define_D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE():
    D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE_head
    D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE._fields_ = [
        ("NodeIndex", UInt32),
        ("InputFormat", win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ("BlockSize", win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE),
        ("Precision", win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION),
        ("SizeRange", win32more.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE),
        ("Protected", win32more.Foundation.BOOL),
        ("MotionVectorHeapMemoryPoolL0Size", UInt64),
        ("MotionVectorHeapMemoryPoolL1Size", UInt64),
        ("MotionEstimatorMemoryPoolL0Size", UInt64),
        ("MotionEstimatorMemoryPoolL1Size", UInt64),
    ]
    return D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE
def _define_D3D12_VIDEO_MOTION_ESTIMATOR_DESC_head():
    class D3D12_VIDEO_MOTION_ESTIMATOR_DESC(Structure):
        pass
    return D3D12_VIDEO_MOTION_ESTIMATOR_DESC
def _define_D3D12_VIDEO_MOTION_ESTIMATOR_DESC():
    D3D12_VIDEO_MOTION_ESTIMATOR_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_DESC_head
    D3D12_VIDEO_MOTION_ESTIMATOR_DESC._fields_ = [
        ("NodeMask", UInt32),
        ("InputFormat", win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ("BlockSize", win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE),
        ("Precision", win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION),
        ("SizeRange", win32more.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE),
    ]
    return D3D12_VIDEO_MOTION_ESTIMATOR_DESC
def _define_ID3D12VideoMotionEstimator_head():
    class ID3D12VideoMotionEstimator(win32more.Graphics.Direct3D12.ID3D12Pageable_head):
        Guid = Guid('33fdae0e-098b-428f-87bb-34b695de08f8')
    return ID3D12VideoMotionEstimator
def _define_ID3D12VideoMotionEstimator():
    ID3D12VideoMotionEstimator = win32more.Media.MediaFoundation.ID3D12VideoMotionEstimator_head
    ID3D12VideoMotionEstimator.GetDesc = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_DESC, use_last_error=False)(8, 'GetDesc', ()))
    ID3D12VideoMotionEstimator.GetProtectedResourceSession = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(9, 'GetProtectedResourceSession', ((1, 'riid'),(1, 'ppProtectedSession'),)))
    win32more.Graphics.Direct3D12.ID3D12Pageable
    return ID3D12VideoMotionEstimator
def _define_D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC_head():
    class D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC(Structure):
        pass
    return D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC
def _define_D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC():
    D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC_head
    D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC._fields_ = [
        ("NodeMask", UInt32),
        ("InputFormat", win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ("BlockSize", win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE),
        ("Precision", win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION),
        ("SizeRange", win32more.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE),
    ]
    return D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC
def _define_ID3D12VideoMotionVectorHeap_head():
    class ID3D12VideoMotionVectorHeap(win32more.Graphics.Direct3D12.ID3D12Pageable_head):
        Guid = Guid('5be17987-743a-4061-834b-23d22daea505')
    return ID3D12VideoMotionVectorHeap
def _define_ID3D12VideoMotionVectorHeap():
    ID3D12VideoMotionVectorHeap = win32more.Media.MediaFoundation.ID3D12VideoMotionVectorHeap_head
    ID3D12VideoMotionVectorHeap.GetDesc = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC, use_last_error=False)(8, 'GetDesc', ()))
    ID3D12VideoMotionVectorHeap.GetProtectedResourceSession = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(9, 'GetProtectedResourceSession', ((1, 'riid'),(1, 'ppProtectedSession'),)))
    win32more.Graphics.Direct3D12.ID3D12Pageable
    return ID3D12VideoMotionVectorHeap
def _define_ID3D12VideoDevice1_head():
    class ID3D12VideoDevice1(win32more.Media.MediaFoundation.ID3D12VideoDevice_head):
        Guid = Guid('981611ad-a144-4c83-9890-f30e26d658ab')
    return ID3D12VideoDevice1
def _define_ID3D12VideoDevice1():
    ID3D12VideoDevice1 = win32more.Media.MediaFoundation.ID3D12VideoDevice1_head
    ID3D12VideoDevice1.CreateVideoMotionEstimator = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_DESC_head),win32more.Graphics.Direct3D12.ID3D12ProtectedResourceSession_head,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(7, 'CreateVideoMotionEstimator', ((1, 'pDesc'),(1, 'pProtectedResourceSession'),(1, 'riid'),(1, 'ppVideoMotionEstimator'),)))
    ID3D12VideoDevice1.CreateVideoMotionVectorHeap = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC_head),win32more.Graphics.Direct3D12.ID3D12ProtectedResourceSession_head,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(8, 'CreateVideoMotionVectorHeap', ((1, 'pDesc'),(1, 'pProtectedResourceSession'),(1, 'riid'),(1, 'ppVideoMotionVectorHeap'),)))
    win32more.Media.MediaFoundation.ID3D12VideoDevice
    return ID3D12VideoDevice1
def _define_D3D12_RESOURCE_COORDINATE_head():
    class D3D12_RESOURCE_COORDINATE(Structure):
        pass
    return D3D12_RESOURCE_COORDINATE
def _define_D3D12_RESOURCE_COORDINATE():
    D3D12_RESOURCE_COORDINATE = win32more.Media.MediaFoundation.D3D12_RESOURCE_COORDINATE_head
    D3D12_RESOURCE_COORDINATE._fields_ = [
        ("X", UInt64),
        ("Y", UInt32),
        ("Z", UInt32),
        ("SubresourceIndex", UInt32),
    ]
    return D3D12_RESOURCE_COORDINATE
def _define_D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT_head():
    class D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT(Structure):
        pass
    return D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT
def _define_D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT():
    D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT = win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT_head
    D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT._fields_ = [
        ("pMotionVectorHeap", win32more.Media.MediaFoundation.ID3D12VideoMotionVectorHeap_head),
    ]
    return D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT
def _define_D3D12_VIDEO_MOTION_ESTIMATOR_INPUT_head():
    class D3D12_VIDEO_MOTION_ESTIMATOR_INPUT(Structure):
        pass
    return D3D12_VIDEO_MOTION_ESTIMATOR_INPUT
def _define_D3D12_VIDEO_MOTION_ESTIMATOR_INPUT():
    D3D12_VIDEO_MOTION_ESTIMATOR_INPUT = win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_INPUT_head
    D3D12_VIDEO_MOTION_ESTIMATOR_INPUT._fields_ = [
        ("pInputTexture2D", win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ("InputSubresourceIndex", UInt32),
        ("pReferenceTexture2D", win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ("ReferenceSubresourceIndex", UInt32),
        ("pHintMotionVectorHeap", win32more.Media.MediaFoundation.ID3D12VideoMotionVectorHeap_head),
    ]
    return D3D12_VIDEO_MOTION_ESTIMATOR_INPUT
def _define_D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT_head():
    class D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT(Structure):
        pass
    return D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT
def _define_D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT():
    D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT = win32more.Media.MediaFoundation.D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT_head
    D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT._fields_ = [
        ("pMotionVectorTexture2D", win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ("MotionVectorCoordinate", win32more.Media.MediaFoundation.D3D12_RESOURCE_COORDINATE),
    ]
    return D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT
def _define_D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT_head():
    class D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT(Structure):
        pass
    return D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT
def _define_D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT():
    D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT = win32more.Media.MediaFoundation.D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT_head
    D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT._fields_ = [
        ("pMotionVectorHeap", win32more.Media.MediaFoundation.ID3D12VideoMotionVectorHeap_head),
        ("PixelWidth", UInt32),
        ("PixelHeight", UInt32),
    ]
    return D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT
def _define_ID3D12VideoEncodeCommandList_head():
    class ID3D12VideoEncodeCommandList(win32more.Graphics.Direct3D12.ID3D12CommandList_head):
        Guid = Guid('8455293a-0cbd-4831-9b39-fbdbab724723')
    return ID3D12VideoEncodeCommandList
def _define_ID3D12VideoEncodeCommandList():
    ID3D12VideoEncodeCommandList = win32more.Media.MediaFoundation.ID3D12VideoEncodeCommandList_head
    ID3D12VideoEncodeCommandList.Close = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(9, 'Close', ()))
    ID3D12VideoEncodeCommandList.Reset = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D12.ID3D12CommandAllocator_head, use_last_error=False)(10, 'Reset', ((1, 'pAllocator'),)))
    ID3D12VideoEncodeCommandList.ClearState = COMMETHOD(WINFUNCTYPE(Void, use_last_error=False)(11, 'ClearState', ()))
    ID3D12VideoEncodeCommandList.ResourceBarrier = COMMETHOD(WINFUNCTYPE(Void,UInt32,POINTER(win32more.Graphics.Direct3D12.D3D12_RESOURCE_BARRIER), use_last_error=False)(12, 'ResourceBarrier', ((1, 'NumBarriers'),(1, 'pBarriers'),)))
    ID3D12VideoEncodeCommandList.DiscardResource = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12Resource_head,POINTER(win32more.Graphics.Direct3D12.D3D12_DISCARD_REGION_head), use_last_error=False)(13, 'DiscardResource', ((1, 'pResource'),(1, 'pRegion'),)))
    ID3D12VideoEncodeCommandList.BeginQuery = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12QueryHeap_head,win32more.Graphics.Direct3D12.D3D12_QUERY_TYPE,UInt32, use_last_error=False)(14, 'BeginQuery', ((1, 'pQueryHeap'),(1, 'Type'),(1, 'Index'),)))
    ID3D12VideoEncodeCommandList.EndQuery = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12QueryHeap_head,win32more.Graphics.Direct3D12.D3D12_QUERY_TYPE,UInt32, use_last_error=False)(15, 'EndQuery', ((1, 'pQueryHeap'),(1, 'Type'),(1, 'Index'),)))
    ID3D12VideoEncodeCommandList.ResolveQueryData = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12QueryHeap_head,win32more.Graphics.Direct3D12.D3D12_QUERY_TYPE,UInt32,UInt32,win32more.Graphics.Direct3D12.ID3D12Resource_head,UInt64, use_last_error=False)(16, 'ResolveQueryData', ((1, 'pQueryHeap'),(1, 'Type'),(1, 'StartIndex'),(1, 'NumQueries'),(1, 'pDestinationBuffer'),(1, 'AlignedDestinationBufferOffset'),)))
    ID3D12VideoEncodeCommandList.SetPredication = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12Resource_head,UInt64,win32more.Graphics.Direct3D12.D3D12_PREDICATION_OP, use_last_error=False)(17, 'SetPredication', ((1, 'pBuffer'),(1, 'AlignedBufferOffset'),(1, 'Operation'),)))
    ID3D12VideoEncodeCommandList.SetMarker = COMMETHOD(WINFUNCTYPE(Void,UInt32,c_void_p,UInt32, use_last_error=False)(18, 'SetMarker', ((1, 'Metadata'),(1, 'pData'),(1, 'Size'),)))
    ID3D12VideoEncodeCommandList.BeginEvent = COMMETHOD(WINFUNCTYPE(Void,UInt32,c_void_p,UInt32, use_last_error=False)(19, 'BeginEvent', ((1, 'Metadata'),(1, 'pData'),(1, 'Size'),)))
    ID3D12VideoEncodeCommandList.EndEvent = COMMETHOD(WINFUNCTYPE(Void, use_last_error=False)(20, 'EndEvent', ()))
    ID3D12VideoEncodeCommandList.EstimateMotion = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.ID3D12VideoMotionEstimator_head,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT_head),POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_INPUT_head), use_last_error=False)(21, 'EstimateMotion', ((1, 'pMotionEstimator'),(1, 'pOutputArguments'),(1, 'pInputArguments'),)))
    ID3D12VideoEncodeCommandList.ResolveMotionVectorHeap = COMMETHOD(WINFUNCTYPE(Void,POINTER(win32more.Media.MediaFoundation.D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT_head),POINTER(win32more.Media.MediaFoundation.D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT_head), use_last_error=False)(22, 'ResolveMotionVectorHeap', ((1, 'pOutputArguments'),(1, 'pInputArguments'),)))
    ID3D12VideoEncodeCommandList.WriteBufferImmediate = COMMETHOD(WINFUNCTYPE(Void,UInt32,POINTER(win32more.Graphics.Direct3D12.D3D12_WRITEBUFFERIMMEDIATE_PARAMETER),POINTER(win32more.Graphics.Direct3D12.D3D12_WRITEBUFFERIMMEDIATE_MODE), use_last_error=False)(23, 'WriteBufferImmediate', ((1, 'Count'),(1, 'pParams'),(1, 'pModes'),)))
    ID3D12VideoEncodeCommandList.SetProtectedResourceSession = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12ProtectedResourceSession_head, use_last_error=False)(24, 'SetProtectedResourceSession', ((1, 'pProtectedResourceSession'),)))
    win32more.Graphics.Direct3D12.ID3D12CommandList
    return ID3D12VideoEncodeCommandList
D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS = UInt32
D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_NONE = 0
D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_SUPPORTED = 1
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES_head():
    class D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES():
    D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES_head
    D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES._fields_ = [
        ("NodeIndex", UInt32),
        ("Configuration", win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION),
        ("SupportFlags", win32more.Media.MediaFoundation.D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS),
    ]
    return D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES
def _define_D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES_head():
    class D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES
def _define_D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES():
    D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES_head
    D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES._fields_ = [
        ("NodeIndex", UInt32),
        ("SupportFlags", win32more.Media.MediaFoundation.D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS),
    ]
    return D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES
def _define_D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES_head():
    class D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES
def _define_D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES():
    D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES_head
    D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES._fields_ = [
        ("NodeIndex", UInt32),
        ("SupportFlags", win32more.Media.MediaFoundation.D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS),
    ]
    return D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES
def _define_D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1_head():
    class D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1
def _define_D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1():
    D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1 = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1_head
    D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1._fields_ = [
        ("VideoDecoderHeapDesc", win32more.Media.MediaFoundation.D3D12_VIDEO_DECODER_HEAP_DESC),
        ("Protected", win32more.Foundation.BOOL),
        ("MemoryPoolL0Size", UInt64),
        ("MemoryPoolL1Size", UInt64),
    ]
    return D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1
def _define_D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1_head():
    class D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1
def _define_D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1():
    D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1 = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1_head
    D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1._fields_ = [
        ("NodeMask", UInt32),
        ("pOutputStreamDesc", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC_head)),
        ("NumInputStreamDescs", UInt32),
        ("pInputStreamDescs", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC_head)),
        ("Protected", win32more.Foundation.BOOL),
        ("MemoryPoolL0Size", UInt64),
        ("MemoryPoolL1Size", UInt64),
    ]
    return D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE = Int32
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CREATION = 0
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_INITIALIZATION = 1
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_EXECUTION = 2
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_INPUT = 3
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_OUTPUT = 4
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_INPUT = 5
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_OUTPUT = 6
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE = Int32
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT8 = 0
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT16 = 1
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT32 = 2
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT64 = 3
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT8 = 4
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT16 = 5
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT32 = 6
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT64 = 7
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_FLOAT = 8
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_DOUBLE = 9
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_RESOURCE = 10
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS = UInt32
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_NONE = 0
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_READ = 1
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_WRITE = 2
def _define_D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT_head():
    class D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT
def _define_D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT():
    D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT_head
    D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT._fields_ = [
        ("NodeIndex", UInt32),
        ("CommandCount", UInt32),
    ]
    return D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT
def _define_D3D12_VIDEO_EXTENSION_COMMAND_INFO_head():
    class D3D12_VIDEO_EXTENSION_COMMAND_INFO(Structure):
        pass
    return D3D12_VIDEO_EXTENSION_COMMAND_INFO
def _define_D3D12_VIDEO_EXTENSION_COMMAND_INFO():
    D3D12_VIDEO_EXTENSION_COMMAND_INFO = win32more.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_INFO_head
    D3D12_VIDEO_EXTENSION_COMMAND_INFO._fields_ = [
        ("CommandId", Guid),
        ("Name", win32more.Foundation.PWSTR),
        ("CommandListSupportFlags", win32more.Graphics.Direct3D12.D3D12_COMMAND_LIST_SUPPORT_FLAGS),
    ]
    return D3D12_VIDEO_EXTENSION_COMMAND_INFO
def _define_D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS_head():
    class D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS
def _define_D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS():
    D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS_head
    D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS._fields_ = [
        ("NodeIndex", UInt32),
        ("CommandCount", UInt32),
        ("pCommandInfos", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_INFO_head)),
    ]
    return D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS
def _define_D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT_head():
    class D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT
def _define_D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT():
    D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT_head
    D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT._fields_ = [
        ("CommandId", Guid),
        ("Stage", win32more.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE),
        ("ParameterCount", UInt32),
        ("ParameterPacking", UInt32),
    ]
    return D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT
def _define_D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO_head():
    class D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO(Structure):
        pass
    return D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO
def _define_D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO():
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO = win32more.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO_head
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO._fields_ = [
        ("Name", win32more.Foundation.PWSTR),
        ("Type", win32more.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE),
        ("Flags", win32more.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS),
    ]
    return D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO
def _define_D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS_head():
    class D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS
def _define_D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS():
    D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS_head
    D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS._fields_ = [
        ("CommandId", Guid),
        ("Stage", win32more.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE),
        ("ParameterCount", UInt32),
        ("pParameterInfos", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO_head)),
    ]
    return D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS
def _define_D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT_head():
    class D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT():
    D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT_head
    D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT._fields_ = [
        ("NodeIndex", UInt32),
        ("CommandId", Guid),
        ("pInputData", c_void_p),
        ("InputDataSizeInBytes", UIntPtr),
        ("pOutputData", c_void_p),
        ("OutputDataSizeInBytes", UIntPtr),
    ]
    return D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE_head():
    class D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE
def _define_D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE():
    D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE_head
    D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE._fields_ = [
        ("NodeIndex", UInt32),
        ("CommandId", Guid),
        ("pCreationParameters", c_void_p),
        ("CreationParametersSizeInBytes", UIntPtr),
        ("MemoryPoolL0Size", UInt64),
        ("MemoryPoolL1Size", UInt64),
    ]
    return D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE
def _define_D3D12_VIDEO_EXTENSION_COMMAND_DESC_head():
    class D3D12_VIDEO_EXTENSION_COMMAND_DESC(Structure):
        pass
    return D3D12_VIDEO_EXTENSION_COMMAND_DESC
def _define_D3D12_VIDEO_EXTENSION_COMMAND_DESC():
    D3D12_VIDEO_EXTENSION_COMMAND_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_DESC_head
    D3D12_VIDEO_EXTENSION_COMMAND_DESC._fields_ = [
        ("NodeMask", UInt32),
        ("CommandId", Guid),
    ]
    return D3D12_VIDEO_EXTENSION_COMMAND_DESC
def _define_ID3D12VideoDecoder1_head():
    class ID3D12VideoDecoder1(win32more.Media.MediaFoundation.ID3D12VideoDecoder_head):
        Guid = Guid('79a2e5fb-ccd2-469a-9fde-195d10951f7e')
    return ID3D12VideoDecoder1
def _define_ID3D12VideoDecoder1():
    ID3D12VideoDecoder1 = win32more.Media.MediaFoundation.ID3D12VideoDecoder1_head
    ID3D12VideoDecoder1.GetProtectedResourceSession = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(9, 'GetProtectedResourceSession', ((1, 'riid'),(1, 'ppProtectedSession'),)))
    win32more.Media.MediaFoundation.ID3D12VideoDecoder
    return ID3D12VideoDecoder1
def _define_ID3D12VideoDecoderHeap1_head():
    class ID3D12VideoDecoderHeap1(win32more.Media.MediaFoundation.ID3D12VideoDecoderHeap_head):
        Guid = Guid('da1d98c5-539f-41b2-bf6b-1198a03b6d26')
    return ID3D12VideoDecoderHeap1
def _define_ID3D12VideoDecoderHeap1():
    ID3D12VideoDecoderHeap1 = win32more.Media.MediaFoundation.ID3D12VideoDecoderHeap1_head
    ID3D12VideoDecoderHeap1.GetProtectedResourceSession = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(9, 'GetProtectedResourceSession', ((1, 'riid'),(1, 'ppProtectedSession'),)))
    win32more.Media.MediaFoundation.ID3D12VideoDecoderHeap
    return ID3D12VideoDecoderHeap1
def _define_ID3D12VideoProcessor1_head():
    class ID3D12VideoProcessor1(win32more.Media.MediaFoundation.ID3D12VideoProcessor_head):
        Guid = Guid('f3cfe615-553f-425c-86d8-ee8c1b1fb01c')
    return ID3D12VideoProcessor1
def _define_ID3D12VideoProcessor1():
    ID3D12VideoProcessor1 = win32more.Media.MediaFoundation.ID3D12VideoProcessor1_head
    ID3D12VideoProcessor1.GetProtectedResourceSession = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(12, 'GetProtectedResourceSession', ((1, 'riid'),(1, 'ppProtectedSession'),)))
    win32more.Media.MediaFoundation.ID3D12VideoProcessor
    return ID3D12VideoProcessor1
def _define_ID3D12VideoExtensionCommand_head():
    class ID3D12VideoExtensionCommand(win32more.Graphics.Direct3D12.ID3D12Pageable_head):
        Guid = Guid('554e41e8-ae8e-4a8c-b7d2-5b4f274a30e4')
    return ID3D12VideoExtensionCommand
def _define_ID3D12VideoExtensionCommand():
    ID3D12VideoExtensionCommand = win32more.Media.MediaFoundation.ID3D12VideoExtensionCommand_head
    ID3D12VideoExtensionCommand.GetDesc = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_DESC, use_last_error=False)(8, 'GetDesc', ()))
    ID3D12VideoExtensionCommand.GetProtectedResourceSession = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(9, 'GetProtectedResourceSession', ((1, 'riid'),(1, 'ppProtectedSession'),)))
    win32more.Graphics.Direct3D12.ID3D12Pageable
    return ID3D12VideoExtensionCommand
def _define_ID3D12VideoDevice2_head():
    class ID3D12VideoDevice2(win32more.Media.MediaFoundation.ID3D12VideoDevice1_head):
        Guid = Guid('f019ac49-f838-4a95-9b17-579437c8f513')
    return ID3D12VideoDevice2
def _define_ID3D12VideoDevice2():
    ID3D12VideoDevice2 = win32more.Media.MediaFoundation.ID3D12VideoDevice2_head
    ID3D12VideoDevice2.CreateVideoDecoder1 = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_DECODER_DESC_head),win32more.Graphics.Direct3D12.ID3D12ProtectedResourceSession_head,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(9, 'CreateVideoDecoder1', ((1, 'pDesc'),(1, 'pProtectedResourceSession'),(1, 'riid'),(1, 'ppVideoDecoder'),)))
    ID3D12VideoDevice2.CreateVideoDecoderHeap1 = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_DECODER_HEAP_DESC_head),win32more.Graphics.Direct3D12.ID3D12ProtectedResourceSession_head,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(10, 'CreateVideoDecoderHeap1', ((1, 'pVideoDecoderHeapDesc'),(1, 'pProtectedResourceSession'),(1, 'riid'),(1, 'ppVideoDecoderHeap'),)))
    ID3D12VideoDevice2.CreateVideoProcessor1 = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC_head),UInt32,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC),win32more.Graphics.Direct3D12.ID3D12ProtectedResourceSession_head,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(11, 'CreateVideoProcessor1', ((1, 'NodeMask'),(1, 'pOutputStreamDesc'),(1, 'NumInputStreamDescs'),(1, 'pInputStreamDescs'),(1, 'pProtectedResourceSession'),(1, 'riid'),(1, 'ppVideoProcessor'),)))
    ID3D12VideoDevice2.CreateVideoExtensionCommand = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_DESC_head),c_void_p,UIntPtr,win32more.Graphics.Direct3D12.ID3D12ProtectedResourceSession_head,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(12, 'CreateVideoExtensionCommand', ((1, 'pDesc'),(1, 'pCreationParameters'),(1, 'CreationParametersDataSizeInBytes'),(1, 'pProtectedResourceSession'),(1, 'riid'),(1, 'ppVideoExtensionCommand'),)))
    ID3D12VideoDevice2.ExecuteExtensionCommand = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.ID3D12VideoExtensionCommand_head,c_void_p,UIntPtr,c_void_p,UIntPtr, use_last_error=False)(13, 'ExecuteExtensionCommand', ((1, 'pExtensionCommand'),(1, 'pExecutionParameters'),(1, 'ExecutionParametersSizeInBytes'),(1, 'pOutputData'),(1, 'OutputDataSizeInBytes'),)))
    win32more.Media.MediaFoundation.ID3D12VideoDevice1
    return ID3D12VideoDevice2
def _define_ID3D12VideoDecodeCommandList2_head():
    class ID3D12VideoDecodeCommandList2(win32more.Media.MediaFoundation.ID3D12VideoDecodeCommandList1_head):
        Guid = Guid('6e120880-c114-4153-8036-d247051e1729')
    return ID3D12VideoDecodeCommandList2
def _define_ID3D12VideoDecodeCommandList2():
    ID3D12VideoDecodeCommandList2 = win32more.Media.MediaFoundation.ID3D12VideoDecodeCommandList2_head
    ID3D12VideoDecodeCommandList2.SetProtectedResourceSession = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12ProtectedResourceSession_head, use_last_error=False)(24, 'SetProtectedResourceSession', ((1, 'pProtectedResourceSession'),)))
    ID3D12VideoDecodeCommandList2.InitializeExtensionCommand = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.ID3D12VideoExtensionCommand_head,c_void_p,UIntPtr, use_last_error=False)(25, 'InitializeExtensionCommand', ((1, 'pExtensionCommand'),(1, 'pInitializationParameters'),(1, 'InitializationParametersSizeInBytes'),)))
    ID3D12VideoDecodeCommandList2.ExecuteExtensionCommand = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.ID3D12VideoExtensionCommand_head,c_void_p,UIntPtr, use_last_error=False)(26, 'ExecuteExtensionCommand', ((1, 'pExtensionCommand'),(1, 'pExecutionParameters'),(1, 'ExecutionParametersSizeInBytes'),)))
    win32more.Media.MediaFoundation.ID3D12VideoDecodeCommandList1
    return ID3D12VideoDecodeCommandList2
def _define_ID3D12VideoProcessCommandList2_head():
    class ID3D12VideoProcessCommandList2(win32more.Media.MediaFoundation.ID3D12VideoProcessCommandList1_head):
        Guid = Guid('db525ae4-6ad6-473c-baa7-59b2e37082e4')
    return ID3D12VideoProcessCommandList2
def _define_ID3D12VideoProcessCommandList2():
    ID3D12VideoProcessCommandList2 = win32more.Media.MediaFoundation.ID3D12VideoProcessCommandList2_head
    ID3D12VideoProcessCommandList2.SetProtectedResourceSession = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12ProtectedResourceSession_head, use_last_error=False)(24, 'SetProtectedResourceSession', ((1, 'pProtectedResourceSession'),)))
    ID3D12VideoProcessCommandList2.InitializeExtensionCommand = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.ID3D12VideoExtensionCommand_head,c_void_p,UIntPtr, use_last_error=False)(25, 'InitializeExtensionCommand', ((1, 'pExtensionCommand'),(1, 'pInitializationParameters'),(1, 'InitializationParametersSizeInBytes'),)))
    ID3D12VideoProcessCommandList2.ExecuteExtensionCommand = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.ID3D12VideoExtensionCommand_head,c_void_p,UIntPtr, use_last_error=False)(26, 'ExecuteExtensionCommand', ((1, 'pExtensionCommand'),(1, 'pExecutionParameters'),(1, 'ExecutionParametersSizeInBytes'),)))
    win32more.Media.MediaFoundation.ID3D12VideoProcessCommandList1
    return ID3D12VideoProcessCommandList2
def _define_ID3D12VideoEncodeCommandList1_head():
    class ID3D12VideoEncodeCommandList1(win32more.Media.MediaFoundation.ID3D12VideoEncodeCommandList_head):
        Guid = Guid('94971eca-2bdb-4769-88cf-3675ea757ebc')
    return ID3D12VideoEncodeCommandList1
def _define_ID3D12VideoEncodeCommandList1():
    ID3D12VideoEncodeCommandList1 = win32more.Media.MediaFoundation.ID3D12VideoEncodeCommandList1_head
    ID3D12VideoEncodeCommandList1.InitializeExtensionCommand = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.ID3D12VideoExtensionCommand_head,c_void_p,UIntPtr, use_last_error=False)(25, 'InitializeExtensionCommand', ((1, 'pExtensionCommand'),(1, 'pInitializationParameters'),(1, 'InitializationParametersSizeInBytes'),)))
    ID3D12VideoEncodeCommandList1.ExecuteExtensionCommand = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.ID3D12VideoExtensionCommand_head,c_void_p,UIntPtr, use_last_error=False)(26, 'ExecuteExtensionCommand', ((1, 'pExtensionCommand'),(1, 'pExecutionParameters'),(1, 'ExecutionParametersSizeInBytes'),)))
    win32more.Media.MediaFoundation.ID3D12VideoEncodeCommandList
    return ID3D12VideoEncodeCommandList1
D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE = Int32
D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_ABSOLUTE_QP_MAP = 0
D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CQP = 1
D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CBR = 2
D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_VBR = 3
D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_QVBR = 4
D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS = UInt32
D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_NONE = 0
D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_DELTA_QP = 1
D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_FRAME_ANALYSIS = 2
D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_QP_RANGE = 4
D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_INITIAL_QP = 8
D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_MAX_FRAME_SIZE = 16
D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_VBV_SIZES = 32
def _define_D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP_head():
    class D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP(Structure):
        pass
    return D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP
def _define_D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP():
    D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP_head
    D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP._fields_ = [
        ("ConstantQP_FullIntracodedFrame", UInt32),
        ("ConstantQP_InterPredictedFrame_PrevRefOnly", UInt32),
        ("ConstantQP_InterPredictedFrame_BiDirectionalRef", UInt32),
    ]
    return D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP
def _define_D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR_head():
    class D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR(Structure):
        pass
    return D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR
def _define_D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR():
    D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR_head
    D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR._fields_ = [
        ("InitialQP", UInt32),
        ("MinQP", UInt32),
        ("MaxQP", UInt32),
        ("MaxFrameBitSize", UInt64),
        ("TargetBitRate", UInt64),
        ("VBVCapacity", UInt64),
        ("InitialVBVFullness", UInt64),
    ]
    return D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR
def _define_D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR_head():
    class D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR(Structure):
        pass
    return D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR
def _define_D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR():
    D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR_head
    D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR._fields_ = [
        ("InitialQP", UInt32),
        ("MinQP", UInt32),
        ("MaxQP", UInt32),
        ("MaxFrameBitSize", UInt64),
        ("TargetAvgBitRate", UInt64),
        ("PeakBitRate", UInt64),
        ("VBVCapacity", UInt64),
        ("InitialVBVFullness", UInt64),
    ]
    return D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR
def _define_D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR_head():
    class D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR(Structure):
        pass
    return D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR
def _define_D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR():
    D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR_head
    D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR._fields_ = [
        ("InitialQP", UInt32),
        ("MinQP", UInt32),
        ("MaxQP", UInt32),
        ("MaxFrameBitSize", UInt64),
        ("TargetAvgBitRate", UInt64),
        ("PeakBitRate", UInt64),
        ("ConstantQualityTarget", UInt32),
    ]
    return D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR
def _define_D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS_head():
    class D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS(Structure):
        pass
    return D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS
def _define_D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS():
    D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS_head
    class D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS__Anonymous_e__Union(Union):
        pass
    D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS__Anonymous_e__Union._fields_ = [
        ("pConfiguration_CQP", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP_head)),
        ("pConfiguration_CBR", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR_head)),
        ("pConfiguration_VBR", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR_head)),
        ("pConfiguration_QVBR", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR_head)),
    ]
    D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS._anonymous_ = [
        'Anonymous',
    ]
    D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS._fields_ = [
        ("DataSize", UInt32),
        ("Anonymous", D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS__Anonymous_e__Union),
    ]
    return D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS
def _define_D3D12_VIDEO_ENCODER_RATE_CONTROL_head():
    class D3D12_VIDEO_ENCODER_RATE_CONTROL(Structure):
        pass
    return D3D12_VIDEO_ENCODER_RATE_CONTROL
def _define_D3D12_VIDEO_ENCODER_RATE_CONTROL():
    D3D12_VIDEO_ENCODER_RATE_CONTROL = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_head
    D3D12_VIDEO_ENCODER_RATE_CONTROL._fields_ = [
        ("Mode", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE),
        ("Flags", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS),
        ("ConfigParams", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS),
        ("TargetFrameRate", win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
    ]
    return D3D12_VIDEO_ENCODER_RATE_CONTROL
D3D12_VIDEO_ENCODER_CODEC = Int32
D3D12_VIDEO_ENCODER_CODEC_H264 = 0
D3D12_VIDEO_ENCODER_CODEC_HEVC = 1
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC._fields_ = [
        ("NodeIndex", UInt32),
        ("Codec", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ("IsSupported", win32more.Foundation.BOOL),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC
D3D12_VIDEO_ENCODER_PROFILE_H264 = Int32
D3D12_VIDEO_ENCODER_PROFILE_H264_MAIN = 0
D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH = 1
D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH_10 = 2
D3D12_VIDEO_ENCODER_PROFILE_HEVC = Int32
D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN = 0
D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN10 = 1
def _define_D3D12_VIDEO_ENCODER_PROFILE_DESC_head():
    class D3D12_VIDEO_ENCODER_PROFILE_DESC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_PROFILE_DESC
def _define_D3D12_VIDEO_ENCODER_PROFILE_DESC():
    D3D12_VIDEO_ENCODER_PROFILE_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC_head
    class D3D12_VIDEO_ENCODER_PROFILE_DESC__Anonymous_e__Union(Union):
        pass
    D3D12_VIDEO_ENCODER_PROFILE_DESC__Anonymous_e__Union._fields_ = [
        ("pH264Profile", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_H264)),
        ("pHEVCProfile", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_HEVC)),
    ]
    D3D12_VIDEO_ENCODER_PROFILE_DESC._anonymous_ = [
        'Anonymous',
    ]
    D3D12_VIDEO_ENCODER_PROFILE_DESC._fields_ = [
        ("DataSize", UInt32),
        ("Anonymous", D3D12_VIDEO_ENCODER_PROFILE_DESC__Anonymous_e__Union),
    ]
    return D3D12_VIDEO_ENCODER_PROFILE_DESC
D3D12_VIDEO_ENCODER_LEVELS_H264 = Int32
D3D12_VIDEO_ENCODER_LEVELS_H264_1 = 0
D3D12_VIDEO_ENCODER_LEVELS_H264_1b = 1
D3D12_VIDEO_ENCODER_LEVELS_H264_11 = 2
D3D12_VIDEO_ENCODER_LEVELS_H264_12 = 3
D3D12_VIDEO_ENCODER_LEVELS_H264_13 = 4
D3D12_VIDEO_ENCODER_LEVELS_H264_2 = 5
D3D12_VIDEO_ENCODER_LEVELS_H264_21 = 6
D3D12_VIDEO_ENCODER_LEVELS_H264_22 = 7
D3D12_VIDEO_ENCODER_LEVELS_H264_3 = 8
D3D12_VIDEO_ENCODER_LEVELS_H264_31 = 9
D3D12_VIDEO_ENCODER_LEVELS_H264_32 = 10
D3D12_VIDEO_ENCODER_LEVELS_H264_4 = 11
D3D12_VIDEO_ENCODER_LEVELS_H264_41 = 12
D3D12_VIDEO_ENCODER_LEVELS_H264_42 = 13
D3D12_VIDEO_ENCODER_LEVELS_H264_5 = 14
D3D12_VIDEO_ENCODER_LEVELS_H264_51 = 15
D3D12_VIDEO_ENCODER_LEVELS_H264_52 = 16
D3D12_VIDEO_ENCODER_LEVELS_H264_6 = 17
D3D12_VIDEO_ENCODER_LEVELS_H264_61 = 18
D3D12_VIDEO_ENCODER_LEVELS_H264_62 = 19
D3D12_VIDEO_ENCODER_TIER_HEVC = Int32
D3D12_VIDEO_ENCODER_TIER_HEVC_MAIN = 0
D3D12_VIDEO_ENCODER_TIER_HEVC_HIGH = 1
D3D12_VIDEO_ENCODER_LEVELS_HEVC = Int32
D3D12_VIDEO_ENCODER_LEVELS_HEVC_1 = 0
D3D12_VIDEO_ENCODER_LEVELS_HEVC_2 = 1
D3D12_VIDEO_ENCODER_LEVELS_HEVC_21 = 2
D3D12_VIDEO_ENCODER_LEVELS_HEVC_3 = 3
D3D12_VIDEO_ENCODER_LEVELS_HEVC_31 = 4
D3D12_VIDEO_ENCODER_LEVELS_HEVC_4 = 5
D3D12_VIDEO_ENCODER_LEVELS_HEVC_41 = 6
D3D12_VIDEO_ENCODER_LEVELS_HEVC_5 = 7
D3D12_VIDEO_ENCODER_LEVELS_HEVC_51 = 8
D3D12_VIDEO_ENCODER_LEVELS_HEVC_52 = 9
D3D12_VIDEO_ENCODER_LEVELS_HEVC_6 = 10
D3D12_VIDEO_ENCODER_LEVELS_HEVC_61 = 11
D3D12_VIDEO_ENCODER_LEVELS_HEVC_62 = 12
def _define_D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC_head():
    class D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC
def _define_D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC():
    D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC_head
    D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC._fields_ = [
        ("Level", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVELS_HEVC),
        ("Tier", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_TIER_HEVC),
    ]
    return D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC
def _define_D3D12_VIDEO_ENCODER_LEVEL_SETTING_head():
    class D3D12_VIDEO_ENCODER_LEVEL_SETTING(Structure):
        pass
    return D3D12_VIDEO_ENCODER_LEVEL_SETTING
def _define_D3D12_VIDEO_ENCODER_LEVEL_SETTING():
    D3D12_VIDEO_ENCODER_LEVEL_SETTING = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING_head
    class D3D12_VIDEO_ENCODER_LEVEL_SETTING__Anonymous_e__Union(Union):
        pass
    D3D12_VIDEO_ENCODER_LEVEL_SETTING__Anonymous_e__Union._fields_ = [
        ("pH264LevelSetting", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVELS_H264)),
        ("pHEVCLevelSetting", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC_head)),
    ]
    D3D12_VIDEO_ENCODER_LEVEL_SETTING._anonymous_ = [
        'Anonymous',
    ]
    D3D12_VIDEO_ENCODER_LEVEL_SETTING._fields_ = [
        ("DataSize", UInt32),
        ("Anonymous", D3D12_VIDEO_ENCODER_LEVEL_SETTING__Anonymous_e__Union),
    ]
    return D3D12_VIDEO_ENCODER_LEVEL_SETTING
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL._fields_ = [
        ("NodeIndex", UInt32),
        ("Codec", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ("Profile", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC),
        ("IsSupported", win32more.Foundation.BOOL),
        ("MinSupportedLevel", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING),
        ("MaxSupportedLevel", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL
def _define_D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC_head():
    class D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC
def _define_D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC():
    D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC_head
    D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC._fields_ = [
        ("Width", UInt32),
        ("Height", UInt32),
    ]
    return D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC
def _define_D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC_head():
    class D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC
def _define_D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC():
    D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC_head
    D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC._fields_ = [
        ("WidthRatio", UInt32),
        ("HeightRatio", UInt32),
    ]
    return D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT._fields_ = [
        ("NodeIndex", UInt32),
        ("Codec", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ("ResolutionRatiosCount", UInt32),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION._fields_ = [
        ("NodeIndex", UInt32),
        ("Codec", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ("ResolutionRatiosCount", UInt32),
        ("IsSupported", win32more.Foundation.BOOL),
        ("MinResolutionSupported", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC),
        ("MaxResolutionSupported", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC),
        ("ResolutionWidthMultipleRequirement", UInt32),
        ("ResolutionHeightMultipleRequirement", UInt32),
        ("pResolutionRatios", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC_head)),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT._fields_ = [
        ("NodeIndex", UInt32),
        ("Codec", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ("Profile", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC),
        ("Format", win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ("IsSupported", win32more.Foundation.BOOL),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE._fields_ = [
        ("NodeIndex", UInt32),
        ("Codec", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ("RateControlMode", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE),
        ("IsSupported", win32more.Foundation.BOOL),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE
D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE = Int32
D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_NONE = 0
D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_ROW_BASED = 1
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE._fields_ = [
        ("NodeIndex", UInt32),
        ("Codec", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ("Profile", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC),
        ("Level", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING),
        ("IntraRefreshMode", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE),
        ("IsSupported", win32more.Foundation.BOOL),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE
D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE = Int32
D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_FULL_FRAME = 0
D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_BYTES_PER_SUBREGION = 1
D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_SQUARE_UNITS_PER_SUBREGION_ROW_UNALIGNED = 2
D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_ROWS_PER_SUBREGION = 3
D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_SUBREGIONS_PER_FRAME = 4
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE._fields_ = [
        ("NodeIndex", UInt32),
        ("Codec", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ("Profile", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC),
        ("Level", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING),
        ("SubregionMode", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE),
        ("IsSupported", win32more.Foundation.BOOL),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE
D3D12_VIDEO_ENCODER_HEAP_FLAGS = UInt32
D3D12_VIDEO_ENCODER_HEAP_FLAG_NONE = 0
def _define_D3D12_VIDEO_ENCODER_HEAP_DESC_head():
    class D3D12_VIDEO_ENCODER_HEAP_DESC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_HEAP_DESC
def _define_D3D12_VIDEO_ENCODER_HEAP_DESC():
    D3D12_VIDEO_ENCODER_HEAP_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_HEAP_DESC_head
    D3D12_VIDEO_ENCODER_HEAP_DESC._fields_ = [
        ("NodeMask", UInt32),
        ("Flags", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_HEAP_FLAGS),
        ("EncodeCodec", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ("EncodeProfile", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC),
        ("EncodeLevel", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING),
        ("ResolutionsListCount", UInt32),
        ("pResolutionList", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC_head)),
    ]
    return D3D12_VIDEO_ENCODER_HEAP_DESC
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE._fields_ = [
        ("HeapDesc", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_HEAP_DESC),
        ("IsSupported", win32more.Foundation.BOOL),
        ("MemoryPoolL0Size", UInt64),
        ("MemoryPoolL1Size", UInt64),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS = UInt32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_NONE = 0
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CABAC_ENCODING_SUPPORT = 1
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT = 2
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_BFRAME_LTR_COMBINED_SUPPORT = 4
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_ADAPTIVE_8x8_TRANSFORM_ENCODING_SUPPORT = 8
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_SPATIAL_ENCODING_SUPPORT = 16
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_TEMPORAL_ENCODING_SUPPORT = 32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT = 64
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES = Int32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED = 0
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_1_DISABLE_ALL_SLICE_BLOCK_EDGES = 1
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_2_DISABLE_SLICE_BOUNDARIES_BLOCKS = 2
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_3_USE_TWO_STAGE_DEBLOCKING = 3
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_4_DISABLE_CHROMA_BLOCK_EDGES = 4
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES = 5
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING = 6
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS = UInt32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_NONE = 0
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED = 1
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_1_DISABLE_ALL_SLICE_BLOCK_EDGES = 2
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_2_DISABLE_SLICE_BOUNDARIES_BLOCKS = 4
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_3_USE_TWO_STAGE_DEBLOCKING = 8
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_4_DISABLE_CHROMA_BLOCK_EDGES = 16
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES = 32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING = 64
def _define_D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_head():
    class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264(Structure):
        pass
    return D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264
def _define_D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264():
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264 = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_head
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264._fields_ = [
        ("SupportFlags", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS),
        ("DisableDeblockingFilterSupportedModes", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS),
    ]
    return D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS = UInt32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_NONE = 0
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_BFRAME_LTR_COMBINED_SUPPORT = 1
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT = 2
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT = 4
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_SAO_FILTER_SUPPORT = 8
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_SUPPORT = 16
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_REQUIRED = 32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_TRANSFORM_SKIP_SUPPORT = 64
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_DISABLING_LOOP_FILTER_ACROSS_SLICES_SUPPORT = 128
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_P_FRAMES_IMPLEMENTED_AS_LOW_DELAY_B_FRAMES = 256
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE = Int32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_8x8 = 0
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_16x16 = 1
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_32x32 = 2
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_64x64 = 3
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE = Int32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_4x4 = 0
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_8x8 = 1
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_16x16 = 2
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_32x32 = 3
def _define_D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_head():
    class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC
def _define_D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC():
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_head
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC._fields_ = [
        ("SupportFlags", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS),
        ("MinLumaCodingUnitSize", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE),
        ("MaxLumaCodingUnitSize", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE),
        ("MinLumaTransformUnitSize", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE),
        ("MaxLumaTransformUnitSize", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE),
        ("max_transform_hierarchy_depth_inter", Byte),
        ("max_transform_hierarchy_depth_intra", Byte),
    ]
    return D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC
def _define_D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_head():
    class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT(Structure):
        pass
    return D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT
def _define_D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT():
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_head
    class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT__Anonymous_e__Union(Union):
        pass
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT__Anonymous_e__Union._fields_ = [
        ("pH264Support", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_head)),
        ("pHEVCSupport", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_head)),
    ]
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT._anonymous_ = [
        'Anonymous',
    ]
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT._fields_ = [
        ("DataSize", UInt32),
        ("Anonymous", D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT__Anonymous_e__Union),
    ]
    return D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT._fields_ = [
        ("NodeIndex", UInt32),
        ("Codec", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ("Profile", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC),
        ("IsSupported", win32more.Foundation.BOOL),
        ("CodecSupportLimits", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT
def _define_D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264_head():
    class D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264(Structure):
        pass
    return D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264
def _define_D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264():
    D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264 = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264_head
    D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264._fields_ = [
        ("MaxL0ReferencesForP", UInt32),
        ("MaxL0ReferencesForB", UInt32),
        ("MaxL1ReferencesForB", UInt32),
        ("MaxLongTermReferences", UInt32),
        ("MaxDPBCapacity", UInt32),
    ]
    return D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264
def _define_D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC_head():
    class D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC
def _define_D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC():
    D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC_head
    D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC._fields_ = [
        ("MaxL0ReferencesForP", UInt32),
        ("MaxL0ReferencesForB", UInt32),
        ("MaxL1ReferencesForB", UInt32),
        ("MaxLongTermReferences", UInt32),
        ("MaxDPBCapacity", UInt32),
    ]
    return D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC
def _define_D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_head():
    class D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT(Structure):
        pass
    return D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT
def _define_D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT():
    D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_head
    class D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT__Anonymous_e__Union(Union):
        pass
    D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT__Anonymous_e__Union._fields_ = [
        ("pH264Support", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264_head)),
        ("pHEVCSupport", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC_head)),
    ]
    D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT._anonymous_ = [
        'Anonymous',
    ]
    D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT._fields_ = [
        ("DataSize", UInt32),
        ("Anonymous", D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT__Anonymous_e__Union),
    ]
    return D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT._fields_ = [
        ("NodeIndex", UInt32),
        ("Codec", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ("Profile", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC),
        ("IsSupported", win32more.Foundation.BOOL),
        ("PictureSupport", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT
D3D12_VIDEO_ENCODER_SUPPORT_FLAGS = UInt32
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_NONE = 0
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_GENERAL_SUPPORT_OK = 1
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_RECONFIGURATION_AVAILABLE = 2
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RESOLUTION_RECONFIGURATION_AVAILABLE = 4
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_VBV_SIZE_CONFIG_AVAILABLE = 8
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_FRAME_ANALYSIS_AVAILABLE = 16
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RECONSTRUCTED_FRAMES_REQUIRE_TEXTURE_ARRAYS = 32
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_DELTA_QP_AVAILABLE = 64
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SUBREGION_LAYOUT_RECONFIGURATION_AVAILABLE = 128
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_ADJUSTABLE_QP_RANGE_AVAILABLE = 256
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_INITIAL_QP_AVAILABLE = 512
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_MAX_FRAME_SIZE_AVAILABLE = 1024
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SEQUENCE_GOP_RECONFIGURATION_AVAILABLE = 2048
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_MOTION_ESTIMATION_PRECISION_MODE_LIMIT_AVAILABLE = 4096
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS = UInt32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_NONE = 0
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_CONSTRAINED_INTRAPREDICTION = 1
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_ADAPTIVE_8x8_TRANSFORM = 2
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ENABLE_CABAC_ENCODING = 4
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES = 8
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES = Int32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_DISABLED = 0
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_TEMPORAL = 1
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_SPATIAL = 2
def _define_D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_head():
    class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264(Structure):
        pass
    return D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264
def _define_D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264():
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264 = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_head
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264._fields_ = [
        ("ConfigurationFlags", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS),
        ("DirectModeConfig", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES),
        ("DisableDeblockingFilterConfig", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES),
    ]
    return D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS = UInt32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_NONE = 0
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_DISABLE_LOOP_FILTER_ACROSS_SLICES = 1
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES = 2
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_SAO_FILTER = 4
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_LONG_TERM_REFERENCES = 8
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_ASYMETRIC_MOTION_PARTITION = 16
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_TRANSFORM_SKIPPING = 32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_CONSTRAINED_INTRAPREDICTION = 64
def _define_D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_head():
    class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC
def _define_D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC():
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_head
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC._fields_ = [
        ("ConfigurationFlags", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS),
        ("MinLumaCodingUnitSize", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE),
        ("MaxLumaCodingUnitSize", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE),
        ("MinLumaTransformUnitSize", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE),
        ("MaxLumaTransformUnitSize", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE),
        ("max_transform_hierarchy_depth_inter", Byte),
        ("max_transform_hierarchy_depth_intra", Byte),
    ]
    return D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC
def _define_D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_head():
    class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION(Structure):
        pass
    return D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION
def _define_D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION():
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_head
    class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION__Anonymous_e__Union(Union):
        pass
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION__Anonymous_e__Union._fields_ = [
        ("pH264Config", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_head)),
        ("pHEVCConfig", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_head)),
    ]
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION._anonymous_ = [
        'Anonymous',
    ]
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION._fields_ = [
        ("DataSize", UInt32),
        ("Anonymous", D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION__Anonymous_e__Union),
    ]
    return D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION
def _define_D3D12_VIDEO_ENCODER_INTRA_REFRESH_head():
    class D3D12_VIDEO_ENCODER_INTRA_REFRESH(Structure):
        pass
    return D3D12_VIDEO_ENCODER_INTRA_REFRESH
def _define_D3D12_VIDEO_ENCODER_INTRA_REFRESH():
    D3D12_VIDEO_ENCODER_INTRA_REFRESH = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_INTRA_REFRESH_head
    D3D12_VIDEO_ENCODER_INTRA_REFRESH._fields_ = [
        ("Mode", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE),
        ("IntraRefreshDuration", UInt32),
    ]
    return D3D12_VIDEO_ENCODER_INTRA_REFRESH
D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE = Int32
D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_MAXIMUM = 0
D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_FULL_PIXEL = 1
D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_HALF_PIXEL = 2
D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_QUARTER_PIXEL = 3
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS._fields_ = [
        ("MaxSubregionsNumber", UInt32),
        ("MaxIntraRefreshFrameDuration", UInt32),
        ("SubregionBlockPixelsSize", UInt32),
        ("QPMapRegionPixelsSize", UInt32),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS
D3D12_VIDEO_ENCODER_VALIDATION_FLAGS = UInt32
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_NONE = 0
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_NOT_SUPPORTED = 1
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INPUT_FORMAT_NOT_SUPPORTED = 8
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_CONFIGURATION_NOT_SUPPORTED = 16
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_MODE_NOT_SUPPORTED = 32
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_CONFIGURATION_NOT_SUPPORTED = 64
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INTRA_REFRESH_MODE_NOT_SUPPORTED = 128
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_SUBREGION_LAYOUT_MODE_NOT_SUPPORTED = 256
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RESOLUTION_NOT_SUPPORTED_IN_LIST = 512
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_GOP_STRUCTURE_NOT_SUPPORTED = 2048
def _define_D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264_head():
    class D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264(Structure):
        pass
    return D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264
def _define_D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264():
    D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264 = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264_head
    D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264._fields_ = [
        ("GOPLength", UInt32),
        ("PPicturePeriod", UInt32),
        ("pic_order_cnt_type", Byte),
        ("log2_max_frame_num_minus4", Byte),
        ("log2_max_pic_order_cnt_lsb_minus4", Byte),
    ]
    return D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264
def _define_D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC_head():
    class D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC
def _define_D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC():
    D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC_head
    D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC._fields_ = [
        ("GOPLength", UInt32),
        ("PPicturePeriod", UInt32),
        ("log2_max_pic_order_cnt_lsb_minus4", Byte),
    ]
    return D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC
def _define_D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_head():
    class D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE(Structure):
        pass
    return D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE
def _define_D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE():
    D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_head
    class D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE__Anonymous_e__Union(Union):
        pass
    D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE__Anonymous_e__Union._fields_ = [
        ("pH264GroupOfPictures", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264_head)),
        ("pHEVCGroupOfPictures", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC_head)),
    ]
    D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE._anonymous_ = [
        'Anonymous',
    ]
    D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE._fields_ = [
        ("DataSize", UInt32),
        ("Anonymous", D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE__Anonymous_e__Union),
    ]
    return D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT._fields_ = [
        ("NodeIndex", UInt32),
        ("Codec", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ("InputFormat", win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ("CodecConfiguration", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION),
        ("CodecGopSequence", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE),
        ("RateControl", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL),
        ("IntraRefresh", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE),
        ("SubregionFrameEncoding", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE),
        ("ResolutionsListCount", UInt32),
        ("pResolutionList", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC_head)),
        ("MaxReferenceFramesInDPB", UInt32),
        ("ValidationFlags", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_VALIDATION_FLAGS),
        ("SupportFlags", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SUPPORT_FLAGS),
        ("SuggestedProfile", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC),
        ("SuggestedLevel", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING),
        ("pResolutionDependentSupport", POINTER(win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS_head)),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS._fields_ = [
        ("NodeIndex", UInt32),
        ("Codec", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ("Profile", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC),
        ("InputFormat", win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ("PictureTargetResolution", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC),
        ("IsSupported", win32more.Foundation.BOOL),
        ("CompressedBitstreamBufferAccessAlignment", UInt32),
        ("EncoderMetadataBufferAccessAlignment", UInt32),
        ("MaxEncoderOutputMetadataBufferSize", UInt32),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS
D3D12_VIDEO_ENCODER_FLAGS = UInt32
D3D12_VIDEO_ENCODER_FLAG_NONE = 0
def _define_D3D12_VIDEO_ENCODER_DESC_head():
    class D3D12_VIDEO_ENCODER_DESC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_DESC
def _define_D3D12_VIDEO_ENCODER_DESC():
    D3D12_VIDEO_ENCODER_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_DESC_head
    D3D12_VIDEO_ENCODER_DESC._fields_ = [
        ("NodeMask", UInt32),
        ("Flags", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FLAGS),
        ("EncodeCodec", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ("EncodeProfile", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC),
        ("InputFormat", win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ("CodecConfiguration", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION),
        ("MaxMotionEstimationPrecision", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE),
    ]
    return D3D12_VIDEO_ENCODER_DESC
def _define_ID3D12VideoEncoder_head():
    class ID3D12VideoEncoder(win32more.Graphics.Direct3D12.ID3D12Pageable_head):
        Guid = Guid('2e0d212d-8df9-44a6-a770-bb289b182737')
    return ID3D12VideoEncoder
def _define_ID3D12VideoEncoder():
    ID3D12VideoEncoder = win32more.Media.MediaFoundation.ID3D12VideoEncoder_head
    ID3D12VideoEncoder.GetNodeMask = COMMETHOD(WINFUNCTYPE(UInt32, use_last_error=False)(8, 'GetNodeMask', ()))
    ID3D12VideoEncoder.GetEncoderFlags = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FLAGS, use_last_error=False)(9, 'GetEncoderFlags', ()))
    ID3D12VideoEncoder.GetCodec = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC, use_last_error=False)(10, 'GetCodec', ()))
    ID3D12VideoEncoder.GetCodecProfile = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC, use_last_error=False)(11, 'GetCodecProfile', ((1, 'dstProfile'),)))
    ID3D12VideoEncoder.GetCodecConfiguration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION, use_last_error=False)(12, 'GetCodecConfiguration', ((1, 'dstCodecConfig'),)))
    ID3D12VideoEncoder.GetInputFormat = COMMETHOD(WINFUNCTYPE(win32more.Graphics.Dxgi.Common.DXGI_FORMAT, use_last_error=False)(13, 'GetInputFormat', ()))
    ID3D12VideoEncoder.GetMaxMotionEstimationPrecision = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE, use_last_error=False)(14, 'GetMaxMotionEstimationPrecision', ()))
    win32more.Graphics.Direct3D12.ID3D12Pageable
    return ID3D12VideoEncoder
def _define_ID3D12VideoEncoderHeap_head():
    class ID3D12VideoEncoderHeap(win32more.Graphics.Direct3D12.ID3D12Pageable_head):
        Guid = Guid('22b35d96-876a-44c0-b25e-fb8c9c7f1c4a')
    return ID3D12VideoEncoderHeap
def _define_ID3D12VideoEncoderHeap():
    ID3D12VideoEncoderHeap = win32more.Media.MediaFoundation.ID3D12VideoEncoderHeap_head
    ID3D12VideoEncoderHeap.GetNodeMask = COMMETHOD(WINFUNCTYPE(UInt32, use_last_error=False)(8, 'GetNodeMask', ()))
    ID3D12VideoEncoderHeap.GetEncoderHeapFlags = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_HEAP_FLAGS, use_last_error=False)(9, 'GetEncoderHeapFlags', ()))
    ID3D12VideoEncoderHeap.GetCodec = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC, use_last_error=False)(10, 'GetCodec', ()))
    ID3D12VideoEncoderHeap.GetCodecProfile = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC, use_last_error=False)(11, 'GetCodecProfile', ((1, 'dstProfile'),)))
    ID3D12VideoEncoderHeap.GetCodecLevel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING, use_last_error=False)(12, 'GetCodecLevel', ((1, 'dstLevel'),)))
    ID3D12VideoEncoderHeap.GetResolutionListCount = COMMETHOD(WINFUNCTYPE(UInt32, use_last_error=False)(13, 'GetResolutionListCount', ()))
    ID3D12VideoEncoderHeap.GetResolutionList = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC), use_last_error=False)(14, 'GetResolutionList', ((1, 'ResolutionsListCount'),(1, 'pResolutionList'),)))
    win32more.Graphics.Direct3D12.ID3D12Pageable
    return ID3D12VideoEncoderHeap
def _define_ID3D12VideoDevice3_head():
    class ID3D12VideoDevice3(win32more.Media.MediaFoundation.ID3D12VideoDevice2_head):
        Guid = Guid('4243adb4-3a32-4666-973c-0ccc5625dc44')
    return ID3D12VideoDevice3
def _define_ID3D12VideoDevice3():
    ID3D12VideoDevice3 = win32more.Media.MediaFoundation.ID3D12VideoDevice3_head
    ID3D12VideoDevice3.CreateVideoEncoder = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_DESC_head),POINTER(Guid),POINTER(c_void_p), use_last_error=False)(14, 'CreateVideoEncoder', ((1, 'pDesc'),(1, 'riid'),(1, 'ppVideoEncoder'),)))
    ID3D12VideoDevice3.CreateVideoEncoderHeap = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_HEAP_DESC_head),POINTER(Guid),POINTER(c_void_p), use_last_error=False)(15, 'CreateVideoEncoderHeap', ((1, 'pDesc'),(1, 'riid'),(1, 'ppVideoEncoderHeap'),)))
    win32more.Media.MediaFoundation.ID3D12VideoDevice2
    return ID3D12VideoDevice3
D3D12_VIDEO_ENCODER_FRAME_TYPE_H264 = Int32
D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_I_FRAME = 0
D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_P_FRAME = 1
D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_B_FRAME = 2
D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_IDR_FRAME = 3
def _define_D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264_head():
    class D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264(Structure):
        pass
    return D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264
def _define_D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264():
    D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264 = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264_head
    D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264._fields_ = [
        ("ReconstructedPictureResourceIndex", UInt32),
        ("IsLongTermReference", win32more.Foundation.BOOL),
        ("LongTermPictureIdx", UInt32),
        ("PictureOrderCountNumber", UInt32),
        ("FrameDecodingOrderNumber", UInt32),
        ("TemporalLayerIndex", UInt32),
    ]
    return D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264
D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS = UInt32
D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_NONE = 0
D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES = 1
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION_head():
    class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION(Structure):
        pass
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION():
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION_head
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION._fields_ = [
        ("memory_management_control_operation", Byte),
        ("difference_of_pic_nums_minus1", UInt32),
        ("long_term_pic_num", UInt32),
        ("long_term_frame_idx", UInt32),
        ("max_long_term_frame_idx_plus1", UInt32),
    ]
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION_head():
    class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION(Structure):
        pass
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION():
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION_head
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION._fields_ = [
        ("modification_of_pic_nums_idc", Byte),
        ("abs_diff_pic_num_minus1", UInt32),
        ("long_term_pic_num", UInt32),
    ]
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_head():
    class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264(Structure):
        pass
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264():
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264 = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_head
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264._fields_ = [
        ("Flags", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS),
        ("FrameType", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FRAME_TYPE_H264),
        ("pic_parameter_set_id", UInt32),
        ("idr_pic_id", UInt32),
        ("PictureOrderCountNumber", UInt32),
        ("FrameDecodingOrderNumber", UInt32),
        ("TemporalLayerIndex", UInt32),
        ("List0ReferenceFramesCount", UInt32),
        ("pList0ReferenceFrames", POINTER(UInt32)),
        ("List1ReferenceFramesCount", UInt32),
        ("pList1ReferenceFrames", POINTER(UInt32)),
        ("ReferenceFramesReconPictureDescriptorsCount", UInt32),
        ("pReferenceFramesReconPictureDescriptors", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264_head)),
        ("adaptive_ref_pic_marking_mode_flag", Byte),
        ("RefPicMarkingOperationsCommandsCount", UInt32),
        ("pRefPicMarkingOperationsCommands", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION_head)),
        ("List0RefPicModificationsCount", UInt32),
        ("pList0RefPicModifications", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION_head)),
        ("List1RefPicModificationsCount", UInt32),
        ("pList1RefPicModifications", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION_head)),
        ("QPMapValuesCount", UInt32),
        ("pRateControlQPMap", POINTER(SByte)),
    ]
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264
D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC = Int32
D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_I_FRAME = 0
D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_P_FRAME = 1
D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_B_FRAME = 2
D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_IDR_FRAME = 3
def _define_D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC_head():
    class D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC
def _define_D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC():
    D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC_head
    D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC._fields_ = [
        ("ReconstructedPictureResourceIndex", UInt32),
        ("IsRefUsedByCurrentPic", win32more.Foundation.BOOL),
        ("IsLongTermReference", win32more.Foundation.BOOL),
        ("PictureOrderCountNumber", UInt32),
        ("TemporalLayerIndex", UInt32),
    ]
    return D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC
D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS = UInt32
D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_NONE = 0
D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES = 1
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_head():
    class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC():
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_head
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC._fields_ = [
        ("Flags", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS),
        ("FrameType", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC),
        ("slice_pic_parameter_set_id", UInt32),
        ("PictureOrderCountNumber", UInt32),
        ("TemporalLayerIndex", UInt32),
        ("List0ReferenceFramesCount", UInt32),
        ("pList0ReferenceFrames", POINTER(UInt32)),
        ("List1ReferenceFramesCount", UInt32),
        ("pList1ReferenceFrames", POINTER(UInt32)),
        ("ReferenceFramesReconPictureDescriptorsCount", UInt32),
        ("pReferenceFramesReconPictureDescriptors", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC_head)),
        ("List0RefPicModificationsCount", UInt32),
        ("pList0RefPicModifications", POINTER(UInt32)),
        ("List1RefPicModificationsCount", UInt32),
        ("pList1RefPicModifications", POINTER(UInt32)),
        ("QPMapValuesCount", UInt32),
        ("pRateControlQPMap", POINTER(SByte)),
    ]
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_head():
    class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA(Structure):
        pass
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA():
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_head
    class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA__Anonymous_e__Union(Union):
        pass
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA__Anonymous_e__Union._fields_ = [
        ("pH264PicData", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_head)),
        ("pHEVCPicData", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_head)),
    ]
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA._anonymous_ = [
        'Anonymous',
    ]
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA._fields_ = [
        ("DataSize", UInt32),
        ("Anonymous", D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA__Anonymous_e__Union),
    ]
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA
def _define_D3D12_VIDEO_ENCODE_REFERENCE_FRAMES_head():
    class D3D12_VIDEO_ENCODE_REFERENCE_FRAMES(Structure):
        pass
    return D3D12_VIDEO_ENCODE_REFERENCE_FRAMES
def _define_D3D12_VIDEO_ENCODE_REFERENCE_FRAMES():
    D3D12_VIDEO_ENCODE_REFERENCE_FRAMES = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODE_REFERENCE_FRAMES_head
    D3D12_VIDEO_ENCODE_REFERENCE_FRAMES._fields_ = [
        ("NumTexture2Ds", UInt32),
        ("ppTexture2Ds", POINTER(win32more.Graphics.Direct3D12.ID3D12Resource_head)),
        ("pSubresources", POINTER(UInt32)),
    ]
    return D3D12_VIDEO_ENCODE_REFERENCE_FRAMES
D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS = UInt32
D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_NONE = 0
D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_USED_AS_REFERENCE_PICTURE = 1
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC_head():
    class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC():
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC_head
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC._fields_ = [
        ("IntraRefreshFrameIndex", UInt32),
        ("Flags", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS),
        ("PictureControlCodecData", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA),
        ("ReferenceFrames", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODE_REFERENCE_FRAMES),
    ]
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC
D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS = UInt32
D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_NONE = 0
D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RESOLUTION_CHANGE = 1
D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RATE_CONTROL_CHANGE = 2
D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_SUBREGION_LAYOUT_CHANGE = 4
D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_REQUEST_INTRA_REFRESH = 8
D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_GOP_SEQUENCE_CHANGE = 16
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES_head():
    class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES(Structure):
        pass
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES():
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES_head
    class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES__Anonymous_e__Union(Union):
        pass
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES__Anonymous_e__Union._fields_ = [
        ("MaxBytesPerSlice", UInt32),
        ("NumberOfCodingUnitsPerSlice", UInt32),
        ("NumberOfRowsPerSlice", UInt32),
        ("NumberOfSlicesPerFrame", UInt32),
    ]
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES._anonymous_ = [
        'Anonymous',
    ]
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES._fields_ = [
        ("Anonymous", D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES__Anonymous_e__Union),
    ]
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_head():
    class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA(Structure):
        pass
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA():
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_head
    class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA__Anonymous_e__Union(Union):
        pass
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA__Anonymous_e__Union._fields_ = [
        ("pSlicesPartition_H264", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES_head)),
        ("pSlicesPartition_HEVC", POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES_head)),
    ]
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA._anonymous_ = [
        'Anonymous',
    ]
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA._fields_ = [
        ("DataSize", UInt32),
        ("Anonymous", D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA__Anonymous_e__Union),
    ]
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA
def _define_D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC_head():
    class D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC
def _define_D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC():
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC_head
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC._fields_ = [
        ("Flags", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS),
        ("IntraRefreshConfig", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_INTRA_REFRESH),
        ("RateControl", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL),
        ("PictureTargetResolution", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC),
        ("SelectedLayoutMode", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE),
        ("FrameSubregionsLayoutData", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA),
        ("CodecGopSequence", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE),
    ]
    return D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC
def _define_D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS_head():
    class D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS(Structure):
        pass
    return D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS
def _define_D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS():
    D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS_head
    D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS._fields_ = [
        ("SequenceControlDesc", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC),
        ("PictureControlDesc", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC),
        ("pInputFrame", win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ("InputFrameSubresource", UInt32),
        ("CurrentFrameBitstreamMetadataSize", UInt32),
    ]
    return D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS
def _define_D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM_head():
    class D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM(Structure):
        pass
    return D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM
def _define_D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM():
    D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM_head
    D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM._fields_ = [
        ("pBuffer", win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ("FrameStartOffset", UInt64),
    ]
    return D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM
def _define_D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE_head():
    class D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE(Structure):
        pass
    return D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE
def _define_D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE():
    D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE_head
    D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE._fields_ = [
        ("pReconstructedPicture", win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ("ReconstructedPictureSubresource", UInt32),
    ]
    return D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE
def _define_D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA_head():
    class D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA(Structure):
        pass
    return D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA
def _define_D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA():
    D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA_head
    D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA._fields_ = [
        ("bSize", UInt64),
        ("bStartOffset", UInt64),
        ("bHeaderSize", UInt64),
    ]
    return D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA
D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS = UInt32
D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_NO_ERROR = 0
D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_CODEC_PICTURE_CONTROL_NOT_SUPPORTED = 1
D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_SUBREGION_LAYOUT_CONFIGURATION_NOT_SUPPORTED = 2
D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_REFERENCE_PICTURES = 4
D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_RECONFIGURATION_REQUEST_NOT_SUPPORTED = 8
D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_METADATA_BUFFER_SOURCE = 16
def _define_D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS_head():
    class D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS(Structure):
        pass
    return D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS
def _define_D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS():
    D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS_head
    D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS._fields_ = [
        ("AverageQP", UInt64),
        ("IntraCodingUnitsCount", UInt64),
        ("InterCodingUnitsCount", UInt64),
        ("SkipCodingUnitsCount", UInt64),
        ("AverageMotionEstimationXDirection", UInt64),
        ("AverageMotionEstimationYDirection", UInt64),
    ]
    return D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS
def _define_D3D12_VIDEO_ENCODER_OUTPUT_METADATA_head():
    class D3D12_VIDEO_ENCODER_OUTPUT_METADATA(Structure):
        pass
    return D3D12_VIDEO_ENCODER_OUTPUT_METADATA
def _define_D3D12_VIDEO_ENCODER_OUTPUT_METADATA():
    D3D12_VIDEO_ENCODER_OUTPUT_METADATA = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_OUTPUT_METADATA_head
    D3D12_VIDEO_ENCODER_OUTPUT_METADATA._fields_ = [
        ("EncodeErrorFlags", UInt64),
        ("EncodeStats", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS),
        ("EncodedBitstreamWrittenBytesCount", UInt64),
        ("WrittenSubregionsCount", UInt64),
    ]
    return D3D12_VIDEO_ENCODER_OUTPUT_METADATA
def _define_D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER_head():
    class D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER(Structure):
        pass
    return D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER
def _define_D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER():
    D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER_head
    D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER._fields_ = [
        ("pBuffer", win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ("Offset", UInt64),
    ]
    return D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER
def _define_D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS_head():
    class D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS(Structure):
        pass
    return D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS
def _define_D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS():
    D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS_head
    D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS._fields_ = [
        ("EncoderCodec", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ("EncoderProfile", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC),
        ("EncoderInputFormat", win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ("EncodedPictureEffectiveResolution", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC),
        ("HWLayoutMetadata", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER),
    ]
    return D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS
def _define_D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS_head():
    class D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS(Structure):
        pass
    return D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS
def _define_D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS():
    D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS_head
    D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS._fields_ = [
        ("ResolvedLayoutMetadata", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER),
    ]
    return D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS
def _define_D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS_head():
    class D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS(Structure):
        pass
    return D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS
def _define_D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS():
    D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS_head
    D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS._fields_ = [
        ("Bitstream", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM),
        ("ReconstructedPicture", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE),
        ("EncoderOutputMetadata", win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER),
    ]
    return D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS
def _define_ID3D12VideoEncodeCommandList2_head():
    class ID3D12VideoEncodeCommandList2(win32more.Media.MediaFoundation.ID3D12VideoEncodeCommandList1_head):
        Guid = Guid('895491e2-e701-46a9-9a1f-8d3480ed867a')
    return ID3D12VideoEncodeCommandList2
def _define_ID3D12VideoEncodeCommandList2():
    ID3D12VideoEncodeCommandList2 = win32more.Media.MediaFoundation.ID3D12VideoEncodeCommandList2_head
    ID3D12VideoEncodeCommandList2.EncodeFrame = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.ID3D12VideoEncoder_head,win32more.Media.MediaFoundation.ID3D12VideoEncoderHeap_head,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS_head),POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS_head), use_last_error=False)(27, 'EncodeFrame', ((1, 'pEncoder'),(1, 'pHeap'),(1, 'pInputArguments'),(1, 'pOutputArguments'),)))
    ID3D12VideoEncodeCommandList2.ResolveEncoderOutputMetadata = COMMETHOD(WINFUNCTYPE(Void,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS_head),POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS_head), use_last_error=False)(28, 'ResolveEncoderOutputMetadata', ((1, 'pInputArguments'),(1, 'pOutputArguments'),)))
    win32more.Media.MediaFoundation.ID3D12VideoEncodeCommandList1
    return ID3D12VideoEncodeCommandList2
CMpeg4DecMediaObject = Guid('f371728a-6052-4d47-827c-d039335dfe0a')
CMpeg43DecMediaObject = Guid('cba9e78b-49a3-49ea-93d4-6bcba8c4de07')
CMpeg4sDecMediaObject = Guid('2a11bae2-fe6e-4249-864b-9e9ed6e8dbc2')
CMpeg4sDecMFT = Guid('5686a0d9-fe39-409f-9dff-3fdbc849f9f5')
CZuneM4S2DecMediaObject = Guid('c56fc25c-0fc6-404a-9503-b10bf51a8ab9')
CMpeg4EncMediaObject = Guid('24f258d8-c651-4042-93e4-ca654abb682c')
CMpeg4sEncMediaObject = Guid('6ec5a7be-d81e-4f9e-ada3-cd1bf262b6d8')
CMSSCDecMediaObject = Guid('7bafb3b1-d8f4-4279-9253-27da423108de')
CMSSCEncMediaObject = Guid('8cb9cc06-d139-4ae6-8bb4-41e612e141d5')
CMSSCEncMediaObject2 = Guid('f7ffe0a0-a4f5-44b5-949e-15ed2bc66f9d')
CWMADecMediaObject = Guid('2eeb4adf-4578-4d10-bca7-bb955f56320a')
CWMAEncMediaObject = Guid('70f598e9-f4ab-495a-99e2-a7c4d3d89abf')
CWMATransMediaObject = Guid('edcad9cb-3127-40df-b527-0152ccb3f6f5')
CWMSPDecMediaObject = Guid('874131cb-4ecc-443b-8948-746b89595d20')
CWMSPEncMediaObject = Guid('67841b03-c689-4188-ad3f-4c9ebeec710b')
CWMSPEncMediaObject2 = Guid('1f1f4e1a-2252-4063-84bb-eee75f8856d5')
CWMTDecMediaObject = Guid('f9dbc64e-2dd0-45dd-9b52-66642ef94431')
CWMTEncMediaObject = Guid('60b67652-e46b-4e44-8609-f74bffdc083c')
CWMVDecMediaObject = Guid('82d353df-90bd-4382-8bc2-3f6192b76e34')
CWMVEncMediaObject2 = Guid('96b57cdd-8966-410c-bb1f-c97eea765c04')
CWMVXEncMediaObject = Guid('7e320092-596a-41b2-bbeb-175d10504eb6')
CWMV9EncMediaObject = Guid('d23b90d0-144f-46bd-841d-59e4eb19dc59')
CWVC1DecMediaObject = Guid('c9bfbccf-e60e-4588-a3df-5a03b1fd9585')
CWVC1EncMediaObject = Guid('44653d0d-8cca-41e7-baca-884337b747ac')
CDeColorConvMediaObject = Guid('49034c05-f43c-400f-84c1-90a683195a3a')
CDVDecoderMediaObject = Guid('e54709c5-1e17-4c8d-94e7-478940433584')
CDVEncoderMediaObject = Guid('c82ae729-c327-4cce-914d-8171fefebefb')
CMpeg2DecMediaObject = Guid('863d66cd-cdce-4617-b47f-c8929cfc28a6')
CPK_DS_MPEG2Decoder = Guid('9910c5cd-95c9-4e06-865a-efa1c8016bf4')
CAC3DecMediaObject = Guid('03d7c802-ecfa-47d9-b268-5fb3e310dee4')
CPK_DS_AC3Decoder = Guid('6c9c69d6-0ffc-4481-afdb-cdf1c79c6f3e')
CMP3DecMediaObject = Guid('bbeea841-0a63-4f52-a7ab-a9b3a84ed38a')
CResamplerMediaObject = Guid('f447b69e-1884-4a7e-8055-346f74d6edb3')
CResizerMediaObject = Guid('d3ec8b8b-7728-4fd8-9fe0-7b67d19f73a3')
CInterlaceMediaObject = Guid('b5a89c80-4901-407b-9abc-90d9a644bb46')
CWMAudioLFXAPO = Guid('62dc1a93-ae24-464c-a43e-452f824c4250')
CWMAudioGFXAPO = Guid('637c490d-eee3-4c0a-973f-371958802da2')
CWMAudioCAPXLFXAPO = Guid('c9453e73-8c5c-4463-9984-af8bab2f5447')
CWMAudioCAPXGFXAPO = Guid('13ab3ebd-137e-4903-9d89-60be8277fd17')
CWMAudioSpdTxDMO = Guid('5210f8e4-b0bb-47c3-a8d9-7b2282cc79ed')
CWMAudioAEC = Guid('745057c7-f353-4f2d-a7ee-58434477730e')
CClusterDetectorDmo = Guid('36e820c4-165a-4521-863c-619e1160d4d4')
CColorControlDmo = Guid('798059f0-89ca-4160-b325-aeb48efe4f9a')
CColorConvertDMO = Guid('98230571-0087-4204-b020-3282538e57d3')
CColorLegalizerDmo = Guid('fdfaa753-e48e-4e33-9c74-98a27fc6726a')
CFrameInterpDMO = Guid('0a7cfe1b-6ab5-4334-9ed8-3f97cb37daa1')
CFrameRateConvertDmo = Guid('01f36ce2-0907-4d8b-979d-f151be91c883')
CResizerDMO = Guid('1ea1ea14-48f4-4054-ad1a-e8aee10ac805')
CShotDetectorDmo = Guid('56aefacd-110c-4397-9292-b0a0c61b6750')
CSmpteTransformsDmo = Guid('bde6388b-da25-485d-ba7f-fabc28b20318')
CThumbnailGeneratorDmo = Guid('559c6bad-1ea8-4963-a087-8a6810f9218b')
CTocGeneratorDmo = Guid('4dda1941-77a0-4fb1-a518-e2185041d70c')
CMPEGAACDecMediaObject = Guid('8dde1772-edad-41c3-b4be-1f30fb4ee0d6')
CNokiaAACDecMediaObject = Guid('3cb2bde4-4e29-4c44-a73e-2d7c2c46d6ec')
CVodafoneAACDecMediaObject = Guid('7f36f942-dcf3-4d82-9289-5b1820278f7c')
CZuneAACCCDecMediaObject = Guid('a74e98f2-52d6-4b4e-885b-e0a6ca4f187a')
CNokiaAACCCDecMediaObject = Guid('eabf7a6f-ccba-4d60-8620-b152cc977263')
CVodafoneAACCCDecMediaObject = Guid('7e76bf7f-c993-4e26-8fab-470a70c0d59c')
CMPEG2EncoderDS = Guid('5f5aff4a-2f7f-4279-88c2-cd88eb39d144')
CMPEG2EncoderVideoDS = Guid('42150cd9-ca9a-4ea5-9939-30ee037f6e74')
CMPEG2EncoderAudioDS = Guid('acd453bc-c58a-44d1-bbf5-bfb325be2d78')
CMPEG2AudDecoderDS = Guid('e1f1a0b8-beee-490d-ba7c-066c40b5e2b9')
CMPEG2VidDecoderDS = Guid('212690fb-83e5-4526-8fd7-74478b7939cd')
CDTVAudDecoderDS = Guid('8e269032-fe03-4753-9b17-18253c21722e')
CDTVVidDecoderDS = Guid('64777dc8-4e24-4beb-9d19-60a35be1daaf')
CMSAC3Enc = Guid('c6b400e2-20a7-4e58-a2fe-24619682ce6c')
CMSH264DecoderMFT = Guid('62ce7e72-4c71-4d20-b15d-452831a87d9d')
CMSH263EncoderMFT = Guid('bc47fcfe-98a0-4f27-bb07-698af24f2b38')
CMSH264EncoderMFT = Guid('6ca50344-051a-4ded-9779-a43305165e35')
CMSH265EncoderMFT = Guid('f2f84074-8bca-40bd-9159-e880f673dd3b')
CMSVPXEncoderMFT = Guid('aeb6c755-2546-4881-82cc-e15ae5ebff3d')
CMSH264RemuxMFT = Guid('05a47ebb-8bf0-4cbf-ad2f-3b71d75866f5')
CMSAACDecMFT = Guid('32d186a7-218f-4c75-8876-dd77273a8999')
AACMFTEncoder = Guid('93af0c51-2275-45d2-a35b-f2ba21caed00')
CMSDDPlusDecMFT = Guid('177c0afe-900b-48d4-9e4c-57add250b3d4')
CMPEG2VideoEncoderMFT = Guid('e6335f02-80b7-4dc4-adfa-dfe7210d20d5')
CMPEG2AudioEncoderMFT = Guid('46a4dd5c-73f8-4304-94df-308f760974f4')
CMSMPEGDecoderMFT = Guid('2d709e52-123f-49b5-9cbc-9af5cde28fb9')
CMSMPEGAudDecMFT = Guid('70707b39-b2ca-4015-abea-f8447d22d88b')
CMSDolbyDigitalEncMFT = Guid('ac3315c9-f481-45d7-826c-0b406c1f64b8')
MP3ACMCodecWrapper = Guid('11103421-354c-4cca-a7a3-1aff9a5b6701')
ALawCodecWrapper = Guid('36cb6e0c-78c1-42b2-9943-846262f31786')
MULawCodecWrapper = Guid('92b66080-5e2d-449e-90c4-c41f268e5514')
CMSVideoDSPMFT = Guid('51571744-7fe4-4ff2-a498-2dc34ff74f1b')
VorbisDecoderMFT = Guid('1a198ef2-60e5-4ea8-90d8-da1f2832c288')
CMSFLACDecMFT = Guid('6b0b3e6b-a2c5-4514-8055-afe8a95242d9')
CMSFLACEncMFT = Guid('128509e9-c44e-45dc-95e9-c255b8f466a6')
MFFLACBytestreamHandler = Guid('0e41cfb8-0506-40f4-a516-77cc23642d91')
MFFLACSinkClassFactory = Guid('7d39c56f-6075-47c9-9bae-8cf9e531b5f5')
CMSALACDecMFT = Guid('c0cd7d12-31fc-4bbc-b363-7322ee3e1879')
CMSALACEncMFT = Guid('9ab6a28c-748e-4b6a-bfff-cc443b8e8fb4')
CMSOpusDecMFT = Guid('63e17c10-2d43-4c42-8fe3-8d8b63e46a6a')
MSAMRNBDecoder = Guid('265011ae-5481-4f77-a295-abb6ffe8d63e')
MSAMRNBEncoder = Guid('2fae8afe-04a3-423a-a814-85db454712b0')
MFAMRNBByteStreamHandler = Guid('efe6208a-0a2c-49fa-8a01-3768b559b6da')
MFAMRNBSinkClassFactory = Guid('b0271158-70d2-4c5b-9f94-76f549d90fdf')
WMT_PROP_DATATYPE = Int32
WMT_PROP_TYPE_DWORD = 0
WMT_PROP_TYPE_STRING = 1
WMT_PROP_TYPE_BINARY = 2
WMT_PROP_TYPE_BOOL = 3
WMT_PROP_TYPE_QWORD = 4
WMT_PROP_TYPE_WORD = 5
WMT_PROP_TYPE_GUID = 6
def _define_IWMValidate_head():
    class IWMValidate(win32more.System.Com.IUnknown_head):
        Guid = Guid('cee3def2-3808-414d-be66-fafd472210bc')
    return IWMValidate
def _define_IWMValidate():
    IWMValidate = win32more.Media.MediaFoundation.IWMValidate_head
    IWMValidate.SetIdentifier = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Guid, use_last_error=False)(3, 'SetIdentifier', ((1, 'guidValidationID'),)))
    win32more.System.Com.IUnknown
    return IWMValidate
def _define_IValidateBinding_head():
    class IValidateBinding(win32more.System.Com.IUnknown_head):
        Guid = Guid('04a578b2-e778-422a-a805-b3ee54d90bd9')
    return IValidateBinding
def _define_IValidateBinding():
    IValidateBinding = win32more.Media.MediaFoundation.IValidateBinding_head
    IValidateBinding.GetIdentifier = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,POINTER(Byte),UInt32,POINTER(c_char_p_no),POINTER(UInt32), use_last_error=False)(3, 'GetIdentifier', ((1, 'guidLicensorID'),(1, 'pbEphemeron'),(1, 'cbEphemeron'),(1, 'ppbBlobValidationID'),(1, 'pcbBlobSize'),)))
    win32more.System.Com.IUnknown
    return IValidateBinding
def _define_IWMVideoDecoderHurryup_head():
    class IWMVideoDecoderHurryup(win32more.System.Com.IUnknown_head):
        Guid = Guid('352bb3bd-2d4d-4323-9e71-dcdcfbd53ca6')
    return IWMVideoDecoderHurryup
def _define_IWMVideoDecoderHurryup():
    IWMVideoDecoderHurryup = win32more.Media.MediaFoundation.IWMVideoDecoderHurryup_head
    IWMVideoDecoderHurryup.SetHurryup = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32, use_last_error=False)(3, 'SetHurryup', ((1, 'lHurryup'),)))
    IWMVideoDecoderHurryup.GetHurryup = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int32), use_last_error=False)(4, 'GetHurryup', ((1, 'plHurryup'),)))
    win32more.System.Com.IUnknown
    return IWMVideoDecoderHurryup
def _define_IWMVideoForceKeyFrame_head():
    class IWMVideoForceKeyFrame(win32more.System.Com.IUnknown_head):
        Guid = Guid('9f8496be-5b9a-41b9-a9e8-f21cd80596c2')
    return IWMVideoForceKeyFrame
def _define_IWMVideoForceKeyFrame():
    IWMVideoForceKeyFrame = win32more.Media.MediaFoundation.IWMVideoForceKeyFrame_head
    IWMVideoForceKeyFrame.SetKeyFrame = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(3, 'SetKeyFrame', ()))
    win32more.System.Com.IUnknown
    return IWMVideoForceKeyFrame
def _define_IWMCodecStrings_head():
    class IWMCodecStrings(win32more.System.Com.IUnknown_head):
        Guid = Guid('a7b2504b-e58a-47fb-958b-cac7165a057d')
    return IWMCodecStrings
def _define_IWMCodecStrings():
    IWMCodecStrings = win32more.Media.MediaFoundation.IWMCodecStrings_head
    IWMCodecStrings.GetName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.DxMediaObjects.DMO_MEDIA_TYPE_head),UInt32,POINTER(Char),POINTER(UInt32), use_last_error=False)(3, 'GetName', ((1, 'pmt'),(1, 'cchLength'),(1, 'szName'),(1, 'pcchLength'),)))
    IWMCodecStrings.GetDescription = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.DxMediaObjects.DMO_MEDIA_TYPE_head),UInt32,POINTER(Char),POINTER(UInt32), use_last_error=False)(4, 'GetDescription', ((1, 'pmt'),(1, 'cchLength'),(1, 'szDescription'),(1, 'pcchLength'),)))
    win32more.System.Com.IUnknown
    return IWMCodecStrings
def _define_IWMCodecProps_head():
    class IWMCodecProps(win32more.System.Com.IUnknown_head):
        Guid = Guid('2573e11a-f01a-4fdd-a98d-63b8e0ba9589')
    return IWMCodecProps
def _define_IWMCodecProps():
    IWMCodecProps = win32more.Media.MediaFoundation.IWMCodecProps_head
    IWMCodecProps.GetFormatProp = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.DxMediaObjects.DMO_MEDIA_TYPE_head),win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.WMT_PROP_DATATYPE),c_char_p_no,POINTER(UInt32), use_last_error=False)(3, 'GetFormatProp', ((1, 'pmt'),(1, 'pszName'),(1, 'pType'),(1, 'pValue'),(1, 'pdwSize'),)))
    IWMCodecProps.GetCodecProp = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.WMT_PROP_DATATYPE),c_char_p_no,POINTER(UInt32), use_last_error=False)(4, 'GetCodecProp', ((1, 'dwFormat'),(1, 'pszName'),(1, 'pType'),(1, 'pValue'),(1, 'pdwSize'),)))
    win32more.System.Com.IUnknown
    return IWMCodecProps
def _define_IWMCodecLeakyBucket_head():
    class IWMCodecLeakyBucket(win32more.System.Com.IUnknown_head):
        Guid = Guid('a81ba647-6227-43b7-b231-c7b15135dd7d')
    return IWMCodecLeakyBucket
def _define_IWMCodecLeakyBucket():
    IWMCodecLeakyBucket = win32more.Media.MediaFoundation.IWMCodecLeakyBucket_head
    IWMCodecLeakyBucket.SetBufferSizeBits = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(3, 'SetBufferSizeBits', ((1, 'ulBufferSize'),)))
    IWMCodecLeakyBucket.GetBufferSizeBits = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(4, 'GetBufferSizeBits', ((1, 'pulBufferSize'),)))
    IWMCodecLeakyBucket.SetBufferFullnessBits = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(5, 'SetBufferFullnessBits', ((1, 'ulBufferFullness'),)))
    IWMCodecLeakyBucket.GetBufferFullnessBits = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(6, 'GetBufferFullnessBits', ((1, 'pulBufferFullness'),)))
    win32more.System.Com.IUnknown
    return IWMCodecLeakyBucket
def _define_IWMCodecOutputTimestamp_head():
    class IWMCodecOutputTimestamp(win32more.System.Com.IUnknown_head):
        Guid = Guid('b72adf95-7adc-4a72-bc05-577d8ea6bf68')
    return IWMCodecOutputTimestamp
def _define_IWMCodecOutputTimestamp():
    IWMCodecOutputTimestamp = win32more.Media.MediaFoundation.IWMCodecOutputTimestamp_head
    IWMCodecOutputTimestamp.GetNextOutputTime = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int64), use_last_error=False)(3, 'GetNextOutputTime', ((1, 'prtTime'),)))
    win32more.System.Com.IUnknown
    return IWMCodecOutputTimestamp
def _define_IWMVideoDecoderReconBuffer_head():
    class IWMVideoDecoderReconBuffer(win32more.System.Com.IUnknown_head):
        Guid = Guid('45bda2ac-88e2-4923-98ba-3949080711a3')
    return IWMVideoDecoderReconBuffer
def _define_IWMVideoDecoderReconBuffer():
    IWMVideoDecoderReconBuffer = win32more.Media.MediaFoundation.IWMVideoDecoderReconBuffer_head
    IWMVideoDecoderReconBuffer.GetReconstructedVideoFrameSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(3, 'GetReconstructedVideoFrameSize', ((1, 'pdwSize'),)))
    IWMVideoDecoderReconBuffer.GetReconstructedVideoFrame = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.DxMediaObjects.IMediaBuffer_head, use_last_error=False)(4, 'GetReconstructedVideoFrame', ((1, 'pBuf'),)))
    IWMVideoDecoderReconBuffer.SetReconstructedVideoFrame = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.DxMediaObjects.IMediaBuffer_head, use_last_error=False)(5, 'SetReconstructedVideoFrame', ((1, 'pBuf'),)))
    win32more.System.Com.IUnknown
    return IWMVideoDecoderReconBuffer
def _define_IWMCodecPrivateData_head():
    class IWMCodecPrivateData(win32more.System.Com.IUnknown_head):
        Guid = Guid('73f0be8e-57f7-4f01-aa66-9f57340cfe0e')
    return IWMCodecPrivateData
def _define_IWMCodecPrivateData():
    IWMCodecPrivateData = win32more.Media.MediaFoundation.IWMCodecPrivateData_head
    IWMCodecPrivateData.SetPartialOutputType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.DxMediaObjects.DMO_MEDIA_TYPE_head), use_last_error=False)(3, 'SetPartialOutputType', ((1, 'pmt'),)))
    IWMCodecPrivateData.GetPrivateData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,POINTER(UInt32), use_last_error=False)(4, 'GetPrivateData', ((1, 'pbData'),(1, 'pcbData'),)))
    win32more.System.Com.IUnknown
    return IWMCodecPrivateData
def _define_IWMSampleExtensionSupport_head():
    class IWMSampleExtensionSupport(win32more.System.Com.IUnknown_head):
        Guid = Guid('9bca9884-0604-4c2a-87da-793ff4d586c3')
    return IWMSampleExtensionSupport
def _define_IWMSampleExtensionSupport():
    IWMSampleExtensionSupport = win32more.Media.MediaFoundation.IWMSampleExtensionSupport_head
    IWMSampleExtensionSupport.SetUseSampleExtensions = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL, use_last_error=False)(3, 'SetUseSampleExtensions', ((1, 'fUseExtensions'),)))
    win32more.System.Com.IUnknown
    return IWMSampleExtensionSupport
def _define_IWMResamplerProps_head():
    class IWMResamplerProps(win32more.System.Com.IUnknown_head):
        Guid = Guid('e7e9984f-f09f-4da4-903f-6e2e0efe56b5')
    return IWMResamplerProps
def _define_IWMResamplerProps():
    IWMResamplerProps = win32more.Media.MediaFoundation.IWMResamplerProps_head
    IWMResamplerProps.SetHalfFilterLength = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32, use_last_error=False)(3, 'SetHalfFilterLength', ((1, 'lhalfFilterLen'),)))
    IWMResamplerProps.SetUserChannelMtx = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Single), use_last_error=False)(4, 'SetUserChannelMtx', ((1, 'userChannelMtx'),)))
    win32more.System.Com.IUnknown
    return IWMResamplerProps
def _define_IWMResizerProps_head():
    class IWMResizerProps(win32more.System.Com.IUnknown_head):
        Guid = Guid('57665d4c-0414-4faa-905b-10e546f81c33')
    return IWMResizerProps
def _define_IWMResizerProps():
    IWMResizerProps = win32more.Media.MediaFoundation.IWMResizerProps_head
    IWMResizerProps.SetResizerQuality = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32, use_last_error=False)(3, 'SetResizerQuality', ((1, 'lquality'),)))
    IWMResizerProps.SetInterlaceMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32, use_last_error=False)(4, 'SetInterlaceMode', ((1, 'lmode'),)))
    IWMResizerProps.SetClipRegion = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,Int32,Int32, use_last_error=False)(5, 'SetClipRegion', ((1, 'lClipOriXSrc'),(1, 'lClipOriYSrc'),(1, 'lClipWidthSrc'),(1, 'lClipHeightSrc'),)))
    IWMResizerProps.SetFullCropRegion = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32, use_last_error=False)(6, 'SetFullCropRegion', ((1, 'lClipOriXSrc'),(1, 'lClipOriYSrc'),(1, 'lClipWidthSrc'),(1, 'lClipHeightSrc'),(1, 'lClipOriXDst'),(1, 'lClipOriYDst'),(1, 'lClipWidthDst'),(1, 'lClipHeightDst'),)))
    IWMResizerProps.GetFullCropRegion = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int32),POINTER(Int32),POINTER(Int32),POINTER(Int32),POINTER(Int32),POINTER(Int32),POINTER(Int32),POINTER(Int32), use_last_error=False)(7, 'GetFullCropRegion', ((1, 'lClipOriXSrc'),(1, 'lClipOriYSrc'),(1, 'lClipWidthSrc'),(1, 'lClipHeightSrc'),(1, 'lClipOriXDst'),(1, 'lClipOriYDst'),(1, 'lClipWidthDst'),(1, 'lClipHeightDst'),)))
    win32more.System.Com.IUnknown
    return IWMResizerProps
def _define_IWMColorLegalizerProps_head():
    class IWMColorLegalizerProps(win32more.System.Com.IUnknown_head):
        Guid = Guid('776c93b3-b72d-4508-b6d0-208785f553e7')
    return IWMColorLegalizerProps
def _define_IWMColorLegalizerProps():
    IWMColorLegalizerProps = win32more.Media.MediaFoundation.IWMColorLegalizerProps_head
    IWMColorLegalizerProps.SetColorLegalizerQuality = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32, use_last_error=False)(3, 'SetColorLegalizerQuality', ((1, 'lquality'),)))
    win32more.System.Com.IUnknown
    return IWMColorLegalizerProps
def _define_IWMInterlaceProps_head():
    class IWMInterlaceProps(win32more.System.Com.IUnknown_head):
        Guid = Guid('7b12e5d1-bd22-48ea-bc06-98e893221c89')
    return IWMInterlaceProps
def _define_IWMInterlaceProps():
    IWMInterlaceProps = win32more.Media.MediaFoundation.IWMInterlaceProps_head
    IWMInterlaceProps.SetProcessType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32, use_last_error=False)(3, 'SetProcessType', ((1, 'iProcessType'),)))
    IWMInterlaceProps.SetInitInverseTeleCinePattern = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32, use_last_error=False)(4, 'SetInitInverseTeleCinePattern', ((1, 'iInitPattern'),)))
    IWMInterlaceProps.SetLastFrame = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(5, 'SetLastFrame', ()))
    win32more.System.Com.IUnknown
    return IWMInterlaceProps
def _define_IWMFrameInterpProps_head():
    class IWMFrameInterpProps(win32more.System.Com.IUnknown_head):
        Guid = Guid('4c06bb9b-626c-4614-8329-cc6a21b93fa0')
    return IWMFrameInterpProps
def _define_IWMFrameInterpProps():
    IWMFrameInterpProps = win32more.Media.MediaFoundation.IWMFrameInterpProps_head
    IWMFrameInterpProps.SetFrameRateIn = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32, use_last_error=False)(3, 'SetFrameRateIn', ((1, 'lFrameRate'),(1, 'lScale'),)))
    IWMFrameInterpProps.SetFrameRateOut = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32, use_last_error=False)(4, 'SetFrameRateOut', ((1, 'lFrameRate'),(1, 'lScale'),)))
    IWMFrameInterpProps.SetFrameInterpEnabled = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL, use_last_error=False)(5, 'SetFrameInterpEnabled', ((1, 'bFIEnabled'),)))
    IWMFrameInterpProps.SetComplexityLevel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32, use_last_error=False)(6, 'SetComplexityLevel', ((1, 'iComplexity'),)))
    win32more.System.Com.IUnknown
    return IWMFrameInterpProps
def _define_IWMColorConvProps_head():
    class IWMColorConvProps(win32more.System.Com.IUnknown_head):
        Guid = Guid('e6a49e22-c099-421d-aad3-c061fb4ae85b')
    return IWMColorConvProps
def _define_IWMColorConvProps():
    IWMColorConvProps = win32more.Media.MediaFoundation.IWMColorConvProps_head
    IWMColorConvProps.SetMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32, use_last_error=False)(3, 'SetMode', ((1, 'lMode'),)))
    IWMColorConvProps.SetFullCroppingParam = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,Int32,Int32,Int32,Int32, use_last_error=False)(4, 'SetFullCroppingParam', ((1, 'lSrcCropLeft'),(1, 'lSrcCropTop'),(1, 'lDstCropLeft'),(1, 'lDstCropTop'),(1, 'lCropWidth'),(1, 'lCropHeight'),)))
    win32more.System.Com.IUnknown
    return IWMColorConvProps
WMV_DYNAMIC_FLAGS = Int32
WMV_DYNAMIC_BITRATE = 1
WMV_DYNAMIC_RESOLUTION = 2
WMV_DYNAMIC_COMPLEXITY = 4
MF_AUVRHP_ROOMMODEL = Int32
VRHP_SMALLROOM = 0
VRHP_MEDIUMROOM = 1
VRHP_BIGROOM = 2
VRHP_CUSTUMIZEDROOM = 3
AEC_SYSTEM_MODE = Int32
SINGLE_CHANNEL_AEC = 0
ADAPTIVE_ARRAY_ONLY = 1
OPTIBEAM_ARRAY_ONLY = 2
ADAPTIVE_ARRAY_AND_AEC = 3
OPTIBEAM_ARRAY_AND_AEC = 4
SINGLE_CHANNEL_NSAGC = 5
MODE_NOT_SET = 6
def _define_AecQualityMetrics_Struct_head():
    class AecQualityMetrics_Struct(Structure):
        pass
    return AecQualityMetrics_Struct
def _define_AecQualityMetrics_Struct():
    AecQualityMetrics_Struct = win32more.Media.MediaFoundation.AecQualityMetrics_Struct_head
    AecQualityMetrics_Struct._fields_ = [
        ("i64Timestamp", Int64),
        ("ConvergenceFlag", Byte),
        ("MicClippedFlag", Byte),
        ("MicSilenceFlag", Byte),
        ("PstvFeadbackFlag", Byte),
        ("SpkClippedFlag", Byte),
        ("SpkMuteFlag", Byte),
        ("GlitchFlag", Byte),
        ("DoubleTalkFlag", Byte),
        ("uGlitchCount", UInt32),
        ("uMicClipCount", UInt32),
        ("fDuration", Single),
        ("fTSVariance", Single),
        ("fTSDriftRate", Single),
        ("fVoiceLevel", Single),
        ("fNoiseLevel", Single),
        ("fERLE", Single),
        ("fAvgERLE", Single),
        ("dwReserved", UInt32),
    ]
    return AecQualityMetrics_Struct
AEC_VAD_MODE = Int32
AEC_VAD_DISABLED = 0
AEC_VAD_NORMAL = 1
AEC_VAD_FOR_AGC = 2
AEC_VAD_FOR_SILENCE_SUPPRESSION = 3
AEC_INPUT_STREAM = Int32
AEC_CAPTURE_STREAM = 0
AEC_REFERENCE_STREAM = 1
MIC_ARRAY_MODE = Int32
MICARRAY_SINGLE_CHAN = 0
MICARRAY_SIMPLE_SUM = 256
MICARRAY_SINGLE_BEAM = 512
MICARRAY_FIXED_BEAM = 1024
MICARRAY_EXTERN_BEAM = 2048
MFVideoDSPMode = Int32
MFVideoDSPMode_Passthrough = 1
MFVideoDSPMode_Stabilization = 4
def _define_TOC_DESCRIPTOR_head():
    class TOC_DESCRIPTOR(Structure):
        pass
    return TOC_DESCRIPTOR
def _define_TOC_DESCRIPTOR():
    TOC_DESCRIPTOR = win32more.Media.MediaFoundation.TOC_DESCRIPTOR_head
    TOC_DESCRIPTOR._fields_ = [
        ("guidID", Guid),
        ("wStreamNumber", UInt16),
        ("guidType", Guid),
        ("wLanguageIndex", UInt16),
    ]
    return TOC_DESCRIPTOR
def _define_TOC_ENTRY_DESCRIPTOR_head():
    class TOC_ENTRY_DESCRIPTOR(Structure):
        pass
    return TOC_ENTRY_DESCRIPTOR
def _define_TOC_ENTRY_DESCRIPTOR():
    TOC_ENTRY_DESCRIPTOR = win32more.Media.MediaFoundation.TOC_ENTRY_DESCRIPTOR_head
    TOC_ENTRY_DESCRIPTOR._fields_ = [
        ("qwStartTime", UInt64),
        ("qwEndTime", UInt64),
        ("qwStartPacketOffset", UInt64),
        ("qwEndPacketOffset", UInt64),
        ("qwRepresentativeFrameTime", UInt64),
    ]
    return TOC_ENTRY_DESCRIPTOR
TOC_POS_TYPE = Int32
TOC_POS_INHEADER = 0
TOC_POS_TOPLEVELOBJECT = 1
def _define_ITocEntry_head():
    class ITocEntry(win32more.System.Com.IUnknown_head):
        Guid = Guid('f22f5e06-585c-4def-8523-6555cfbc0cb3')
    return ITocEntry
def _define_ITocEntry():
    ITocEntry = win32more.Media.MediaFoundation.ITocEntry_head
    ITocEntry.SetTitle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR, use_last_error=False)(3, 'SetTitle', ((1, 'pwszTitle'),)))
    ITocEntry.GetTitle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt16),POINTER(Char), use_last_error=False)(4, 'GetTitle', ((1, 'pwTitleSize'),(1, 'pwszTitle'),)))
    ITocEntry.SetDescriptor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.TOC_ENTRY_DESCRIPTOR_head), use_last_error=False)(5, 'SetDescriptor', ((1, 'pDescriptor'),)))
    ITocEntry.GetDescriptor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.TOC_ENTRY_DESCRIPTOR_head), use_last_error=False)(6, 'GetDescriptor', ((1, 'pDescriptor'),)))
    ITocEntry.SetSubEntries = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt16), use_last_error=False)(7, 'SetSubEntries', ((1, 'dwNumSubEntries'),(1, 'pwSubEntryIndices'),)))
    ITocEntry.GetSubEntries = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(UInt16), use_last_error=False)(8, 'GetSubEntries', ((1, 'pdwNumSubEntries'),(1, 'pwSubEntryIndices'),)))
    ITocEntry.SetDescriptionData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_char_p_no,POINTER(Guid), use_last_error=False)(9, 'SetDescriptionData', ((1, 'dwDescriptionDataSize'),(1, 'pbtDescriptionData'),(1, 'pguidType'),)))
    ITocEntry.GetDescriptionData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),c_char_p_no,POINTER(Guid), use_last_error=False)(10, 'GetDescriptionData', ((1, 'pdwDescriptionDataSize'),(1, 'pbtDescriptionData'),(1, 'pGuidType'),)))
    win32more.System.Com.IUnknown
    return ITocEntry
def _define_ITocEntryList_head():
    class ITocEntryList(win32more.System.Com.IUnknown_head):
        Guid = Guid('3a8cccbd-0efd-43a3-b838-f38a552ba237')
    return ITocEntryList
def _define_ITocEntryList():
    ITocEntryList = win32more.Media.MediaFoundation.ITocEntryList_head
    ITocEntryList.GetEntryCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(3, 'GetEntryCount', ((1, 'pdwEntryCount'),)))
    ITocEntryList.GetEntryByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.ITocEntry_head), use_last_error=False)(4, 'GetEntryByIndex', ((1, 'dwEntryIndex'),(1, 'ppEntry'),)))
    ITocEntryList.AddEntry = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.ITocEntry_head,POINTER(UInt32), use_last_error=False)(5, 'AddEntry', ((1, 'pEntry'),(1, 'pdwEntryIndex'),)))
    ITocEntryList.AddEntryByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.ITocEntry_head, use_last_error=False)(6, 'AddEntryByIndex', ((1, 'dwEntryIndex'),(1, 'pEntry'),)))
    ITocEntryList.RemoveEntryByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(7, 'RemoveEntryByIndex', ((1, 'dwEntryIndex'),)))
    win32more.System.Com.IUnknown
    return ITocEntryList
def _define_IToc_head():
    class IToc(win32more.System.Com.IUnknown_head):
        Guid = Guid('d6f05441-a919-423b-91a0-89d5b4a8ab77')
    return IToc
def _define_IToc():
    IToc = win32more.Media.MediaFoundation.IToc_head
    IToc.SetDescriptor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.TOC_DESCRIPTOR_head), use_last_error=False)(3, 'SetDescriptor', ((1, 'pDescriptor'),)))
    IToc.GetDescriptor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.TOC_DESCRIPTOR_head), use_last_error=False)(4, 'GetDescriptor', ((1, 'pDescriptor'),)))
    IToc.SetDescription = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR, use_last_error=False)(5, 'SetDescription', ((1, 'pwszDescription'),)))
    IToc.GetDescription = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt16),POINTER(Char), use_last_error=False)(6, 'GetDescription', ((1, 'pwDescriptionSize'),(1, 'pwszDescription'),)))
    IToc.SetContext = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_char_p_no, use_last_error=False)(7, 'SetContext', ((1, 'dwContextSize'),(1, 'pbtContext'),)))
    IToc.GetContext = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),c_char_p_no, use_last_error=False)(8, 'GetContext', ((1, 'pdwContextSize'),(1, 'pbtContext'),)))
    IToc.GetEntryListCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt16), use_last_error=False)(9, 'GetEntryListCount', ((1, 'pwCount'),)))
    IToc.GetEntryListByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16,POINTER(win32more.Media.MediaFoundation.ITocEntryList_head), use_last_error=False)(10, 'GetEntryListByIndex', ((1, 'wEntryListIndex'),(1, 'ppEntryList'),)))
    IToc.AddEntryList = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.ITocEntryList_head,POINTER(UInt16), use_last_error=False)(11, 'AddEntryList', ((1, 'pEntryList'),(1, 'pwEntryListIndex'),)))
    IToc.AddEntryListByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16,win32more.Media.MediaFoundation.ITocEntryList_head, use_last_error=False)(12, 'AddEntryListByIndex', ((1, 'wEntryListIndex'),(1, 'pEntryList'),)))
    IToc.RemoveEntryListByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16, use_last_error=False)(13, 'RemoveEntryListByIndex', ((1, 'wEntryListIndex'),)))
    win32more.System.Com.IUnknown
    return IToc
def _define_ITocCollection_head():
    class ITocCollection(win32more.System.Com.IUnknown_head):
        Guid = Guid('23fee831-ae96-42df-b170-25a04847a3ca')
    return ITocCollection
def _define_ITocCollection():
    ITocCollection = win32more.Media.MediaFoundation.ITocCollection_head
    ITocCollection.GetEntryCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(3, 'GetEntryCount', ((1, 'pdwEntryCount'),)))
    ITocCollection.GetEntryByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IToc_head), use_last_error=False)(4, 'GetEntryByIndex', ((1, 'dwEntryIndex'),(1, 'ppToc'),)))
    ITocCollection.AddEntry = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IToc_head,POINTER(UInt32), use_last_error=False)(5, 'AddEntry', ((1, 'pToc'),(1, 'pdwEntryIndex'),)))
    ITocCollection.AddEntryByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IToc_head, use_last_error=False)(6, 'AddEntryByIndex', ((1, 'dwEntryIndex'),(1, 'pToc'),)))
    ITocCollection.RemoveEntryByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(7, 'RemoveEntryByIndex', ((1, 'dwEntryIndex'),)))
    win32more.System.Com.IUnknown
    return ITocCollection
def _define_ITocParser_head():
    class ITocParser(win32more.System.Com.IUnknown_head):
        Guid = Guid('ecfb9a55-9298-4f49-887f-0b36206599d2')
    return ITocParser
def _define_ITocParser():
    ITocParser = win32more.Media.MediaFoundation.ITocParser_head
    ITocParser.Init = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR, use_last_error=False)(3, 'Init', ((1, 'pwszFileName'),)))
    ITocParser.GetTocCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.TOC_POS_TYPE,POINTER(UInt32), use_last_error=False)(4, 'GetTocCount', ((1, 'enumTocPosType'),(1, 'pdwTocCount'),)))
    ITocParser.GetTocByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.TOC_POS_TYPE,UInt32,POINTER(win32more.Media.MediaFoundation.IToc_head), use_last_error=False)(5, 'GetTocByIndex', ((1, 'enumTocPosType'),(1, 'dwTocIndex'),(1, 'ppToc'),)))
    ITocParser.GetTocByType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.TOC_POS_TYPE,Guid,POINTER(win32more.Media.MediaFoundation.ITocCollection_head), use_last_error=False)(6, 'GetTocByType', ((1, 'enumTocPosType'),(1, 'guidTocType'),(1, 'ppTocs'),)))
    ITocParser.AddToc = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.TOC_POS_TYPE,win32more.Media.MediaFoundation.IToc_head,POINTER(UInt32), use_last_error=False)(7, 'AddToc', ((1, 'enumTocPosType'),(1, 'pToc'),(1, 'pdwTocIndex'),)))
    ITocParser.RemoveTocByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.TOC_POS_TYPE,UInt32, use_last_error=False)(8, 'RemoveTocByIndex', ((1, 'enumTocPosType'),(1, 'dwTocIndex'),)))
    ITocParser.RemoveTocByType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.TOC_POS_TYPE,Guid, use_last_error=False)(9, 'RemoveTocByType', ((1, 'enumTocPosType'),(1, 'guidTocType'),)))
    ITocParser.Commit = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(10, 'Commit', ()))
    win32more.System.Com.IUnknown
    return ITocParser
FILE_OPENMODE = Int32
OPENMODE_FAIL_IF_NOT_EXIST = 0
OPENMODE_FAIL_IF_EXIST = 1
OPENMODE_RESET_IF_EXIST = 2
OPENMODE_APPEND_IF_EXIST = 3
OPENMODE_DELETE_IF_EXIST = 4
SEEK_ORIGIN = Int32
_msoBegin = 0
_msoCurrent = 1
FILE_ACCESSMODE = Int32
ACCESSMODE_READ = 1
ACCESSMODE_WRITE = 2
ACCESSMODE_READWRITE = 3
ACCESSMODE_WRITE_EXCLUSIVE = 4
def _define_IFileIo_head():
    class IFileIo(win32more.System.Com.IUnknown_head):
        Guid = Guid('11993196-1244-4840-ab44-480975c4ffe4')
    return IFileIo
def _define_IFileIo():
    IFileIo = win32more.Media.MediaFoundation.IFileIo_head
    IFileIo.Initialize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.FILE_ACCESSMODE,win32more.Media.MediaFoundation.FILE_OPENMODE,win32more.Foundation.PWSTR, use_last_error=False)(3, 'Initialize', ((1, 'eAccessMode'),(1, 'eOpenMode'),(1, 'pwszFileName'),)))
    IFileIo.GetLength = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64), use_last_error=False)(4, 'GetLength', ((1, 'pqwLength'),)))
    IFileIo.SetLength = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64, use_last_error=False)(5, 'SetLength', ((1, 'qwLength'),)))
    IFileIo.GetCurrentPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64), use_last_error=False)(6, 'GetCurrentPosition', ((1, 'pqwPosition'),)))
    IFileIo.SetCurrentPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64, use_last_error=False)(7, 'SetCurrentPosition', ((1, 'qwPosition'),)))
    IFileIo.IsEndOfStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(8, 'IsEndOfStream', ((1, 'pbEndOfStream'),)))
    IFileIo.Read = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32,POINTER(UInt32), use_last_error=False)(9, 'Read', ((1, 'pbt'),(1, 'ul'),(1, 'pulRead'),)))
    IFileIo.Write = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32,POINTER(UInt32), use_last_error=False)(10, 'Write', ((1, 'pbt'),(1, 'ul'),(1, 'pulWritten'),)))
    IFileIo.Seek = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.SEEK_ORIGIN,UInt64,UInt32,POINTER(UInt64), use_last_error=False)(11, 'Seek', ((1, 'eSeekOrigin'),(1, 'qwSeekOffset'),(1, 'dwSeekFlags'),(1, 'pqwCurrentPosition'),)))
    IFileIo.Close = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(12, 'Close', ()))
    win32more.System.Com.IUnknown
    return IFileIo
def _define_IFileClient_head():
    class IFileClient(win32more.System.Com.IUnknown_head):
        Guid = Guid('bfccd196-1244-4840-ab44-480975c4ffe4')
    return IFileClient
def _define_IFileClient():
    IFileClient = win32more.Media.MediaFoundation.IFileClient_head
    IFileClient.GetObjectDiskSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64), use_last_error=False)(3, 'GetObjectDiskSize', ((1, 'pqwSize'),)))
    IFileClient.Write = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IFileIo_head, use_last_error=False)(4, 'Write', ((1, 'pFio'),)))
    IFileClient.Read = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IFileIo_head, use_last_error=False)(5, 'Read', ((1, 'pFio'),)))
    win32more.System.Com.IUnknown
    return IFileClient
def _define_IClusterDetector_head():
    class IClusterDetector(win32more.System.Com.IUnknown_head):
        Guid = Guid('3f07f7b7-c680-41d9-9423-915107ec9ff9')
    return IClusterDetector
def _define_IClusterDetector():
    IClusterDetector = win32more.Media.MediaFoundation.IClusterDetector_head
    IClusterDetector.Initialize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16,UInt16, use_last_error=False)(3, 'Initialize', ((1, 'wBaseEntryLevel'),(1, 'wClusterEntryLevel'),)))
    IClusterDetector.Detect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,Single,Single,win32more.Media.MediaFoundation.IToc_head,POINTER(win32more.Media.MediaFoundation.IToc_head), use_last_error=False)(4, 'Detect', ((1, 'dwMaxNumClusters'),(1, 'fMinClusterDuration'),(1, 'fMaxClusterDuration'),(1, 'pSrcToc'),(1, 'ppDstToc'),)))
    win32more.System.Com.IUnknown
    return IClusterDetector
def _define_DXVA_AYUVsample2_head():
    class DXVA_AYUVsample2(Structure):
        pass
    return DXVA_AYUVsample2
def _define_DXVA_AYUVsample2():
    DXVA_AYUVsample2 = win32more.Media.MediaFoundation.DXVA_AYUVsample2_head
    DXVA_AYUVsample2._fields_ = [
        ("bCrValue", Byte),
        ("bCbValue", Byte),
        ("bY_Value", Byte),
        ("bSampleAlpha8", Byte),
    ]
    return DXVA_AYUVsample2
def _define_DXVA_BufferDescription_head():
    class DXVA_BufferDescription(Structure):
        pass
    return DXVA_BufferDescription
def _define_DXVA_BufferDescription():
    DXVA_BufferDescription = win32more.Media.MediaFoundation.DXVA_BufferDescription_head
    DXVA_BufferDescription._pack_ = 1
    DXVA_BufferDescription._fields_ = [
        ("dwTypeIndex", UInt32),
        ("dwBufferIndex", UInt32),
        ("dwDataOffset", UInt32),
        ("dwDataSize", UInt32),
        ("dwFirstMBaddress", UInt32),
        ("dwNumMBsInBuffer", UInt32),
        ("dwWidth", UInt32),
        ("dwHeight", UInt32),
        ("dwStride", UInt32),
        ("dwReservedBits", UInt32),
    ]
    return DXVA_BufferDescription
def _define_DXVA_ConfigPictureDecode_head():
    class DXVA_ConfigPictureDecode(Structure):
        pass
    return DXVA_ConfigPictureDecode
def _define_DXVA_ConfigPictureDecode():
    DXVA_ConfigPictureDecode = win32more.Media.MediaFoundation.DXVA_ConfigPictureDecode_head
    DXVA_ConfigPictureDecode._pack_ = 1
    DXVA_ConfigPictureDecode._fields_ = [
        ("dwFunction", UInt32),
        ("dwReservedBits", UInt32 * 3),
        ("guidConfigBitstreamEncryption", Guid),
        ("guidConfigMBcontrolEncryption", Guid),
        ("guidConfigResidDiffEncryption", Guid),
        ("bConfigBitstreamRaw", Byte),
        ("bConfigMBcontrolRasterOrder", Byte),
        ("bConfigResidDiffHost", Byte),
        ("bConfigSpatialResid8", Byte),
        ("bConfigResid8Subtraction", Byte),
        ("bConfigSpatialHost8or9Clipping", Byte),
        ("bConfigSpatialResidInterleaved", Byte),
        ("bConfigIntraResidUnsigned", Byte),
        ("bConfigResidDiffAccelerator", Byte),
        ("bConfigHostInverseScan", Byte),
        ("bConfigSpecificIDCT", Byte),
        ("bConfig4GroupedCoefs", Byte),
    ]
    return DXVA_ConfigPictureDecode
def _define_DXVA_PictureParameters_head():
    class DXVA_PictureParameters(Structure):
        pass
    return DXVA_PictureParameters
def _define_DXVA_PictureParameters():
    DXVA_PictureParameters = win32more.Media.MediaFoundation.DXVA_PictureParameters_head
    DXVA_PictureParameters._pack_ = 1
    DXVA_PictureParameters._fields_ = [
        ("wDecodedPictureIndex", UInt16),
        ("wDeblockedPictureIndex", UInt16),
        ("wForwardRefPictureIndex", UInt16),
        ("wBackwardRefPictureIndex", UInt16),
        ("wPicWidthInMBminus1", UInt16),
        ("wPicHeightInMBminus1", UInt16),
        ("bMacroblockWidthMinus1", Byte),
        ("bMacroblockHeightMinus1", Byte),
        ("bBlockWidthMinus1", Byte),
        ("bBlockHeightMinus1", Byte),
        ("bBPPminus1", Byte),
        ("bPicStructure", Byte),
        ("bSecondField", Byte),
        ("bPicIntra", Byte),
        ("bPicBackwardPrediction", Byte),
        ("bBidirectionalAveragingMode", Byte),
        ("bMVprecisionAndChromaRelation", Byte),
        ("bChromaFormat", Byte),
        ("bPicScanFixed", Byte),
        ("bPicScanMethod", Byte),
        ("bPicReadbackRequests", Byte),
        ("bRcontrol", Byte),
        ("bPicSpatialResid8", Byte),
        ("bPicOverflowBlocks", Byte),
        ("bPicExtrapolation", Byte),
        ("bPicDeblocked", Byte),
        ("bPicDeblockConfined", Byte),
        ("bPic4MVallowed", Byte),
        ("bPicOBMC", Byte),
        ("bPicBinPB", Byte),
        ("bMV_RPS", Byte),
        ("bReservedBits", Byte),
        ("wBitstreamFcodes", UInt16),
        ("wBitstreamPCEelements", UInt16),
        ("bBitstreamConcealmentNeed", Byte),
        ("bBitstreamConcealmentMethod", Byte),
    ]
    return DXVA_PictureParameters
def _define_DXVAUncompDataInfo_head():
    class DXVAUncompDataInfo(Structure):
        pass
    return DXVAUncompDataInfo
def _define_DXVAUncompDataInfo():
    DXVAUncompDataInfo = win32more.Media.MediaFoundation.DXVAUncompDataInfo_head
    DXVAUncompDataInfo._fields_ = [
        ("UncompWidth", UInt32),
        ("UncompHeight", UInt32),
        ("UncompFormat", win32more.Graphics.Direct3D9.D3DFORMAT),
    ]
    return DXVAUncompDataInfo
def _define_DXVACompBufferInfo_head():
    class DXVACompBufferInfo(Structure):
        pass
    return DXVACompBufferInfo
def _define_DXVACompBufferInfo():
    DXVACompBufferInfo = win32more.Media.MediaFoundation.DXVACompBufferInfo_head
    DXVACompBufferInfo._fields_ = [
        ("NumCompBuffers", UInt32),
        ("WidthToCreate", UInt32),
        ("HeightToCreate", UInt32),
        ("BytesToAllocate", UInt32),
        ("Usage", UInt32),
        ("Pool", win32more.Graphics.Direct3D9.D3DPOOL),
        ("Format", win32more.Graphics.Direct3D9.D3DFORMAT),
    ]
    return DXVACompBufferInfo
def _define_DXVABufferInfo_head():
    class DXVABufferInfo(Structure):
        pass
    return DXVABufferInfo
def _define_DXVABufferInfo():
    DXVABufferInfo = win32more.Media.MediaFoundation.DXVABufferInfo_head
    DXVABufferInfo._fields_ = [
        ("pCompSurface", c_void_p),
        ("DataOffset", UInt32),
        ("DataSize", UInt32),
    ]
    return DXVABufferInfo
DXVA_SampleFormat = Int32
DXVA_SampleFormatMask = 255
DXVA_SampleUnknown = 0
DXVA_SamplePreviousFrame = 1
DXVA_SampleProgressiveFrame = 2
DXVA_SampleFieldInterleavedEvenFirst = 3
DXVA_SampleFieldInterleavedOddFirst = 4
DXVA_SampleFieldSingleEven = 5
DXVA_SampleFieldSingleOdd = 6
DXVA_SampleSubStream = 7
DXVA_VideoTransferFunction = Int32
DXVA_VideoTransFuncShift = 27
DXVA_VideoTransFuncMask = -134217728
DXVA_VideoTransFunc_Unknown = 0
DXVA_VideoTransFunc_10 = 1
DXVA_VideoTransFunc_18 = 2
DXVA_VideoTransFunc_20 = 3
DXVA_VideoTransFunc_22 = 4
DXVA_VideoTransFunc_22_709 = 5
DXVA_VideoTransFunc_22_240M = 6
DXVA_VideoTransFunc_22_8bit_sRGB = 7
DXVA_VideoTransFunc_28 = 8
DXVA_VideoPrimaries = Int32
DXVA_VideoPrimariesShift = 22
DXVA_VideoPrimariesMask = 130023424
DXVA_VideoPrimaries_Unknown = 0
DXVA_VideoPrimaries_reserved = 1
DXVA_VideoPrimaries_BT709 = 2
DXVA_VideoPrimaries_BT470_2_SysM = 3
DXVA_VideoPrimaries_BT470_2_SysBG = 4
DXVA_VideoPrimaries_SMPTE170M = 5
DXVA_VideoPrimaries_SMPTE240M = 6
DXVA_VideoPrimaries_EBU3213 = 7
DXVA_VideoPrimaries_SMPTE_C = 8
DXVA_VideoLighting = Int32
DXVA_VideoLightingShift = 18
DXVA_VideoLightingMask = 3932160
DXVA_VideoLighting_Unknown = 0
DXVA_VideoLighting_bright = 1
DXVA_VideoLighting_office = 2
DXVA_VideoLighting_dim = 3
DXVA_VideoLighting_dark = 4
DXVA_VideoTransferMatrix = Int32
DXVA_VideoTransferMatrixShift = 15
DXVA_VideoTransferMatrixMask = 229376
DXVA_VideoTransferMatrix_Unknown = 0
DXVA_VideoTransferMatrix_BT709 = 1
DXVA_VideoTransferMatrix_BT601 = 2
DXVA_VideoTransferMatrix_SMPTE240M = 3
DXVA_NominalRange = Int32
DXVA_NominalRangeShift = 12
DXVA_NominalRangeMask = 28672
DXVA_NominalRange_Unknown = 0
DXVA_NominalRange_Normal = 1
DXVA_NominalRange_Wide = 2
DXVA_NominalRange_0_255 = 1
DXVA_NominalRange_16_235 = 2
DXVA_NominalRange_48_208 = 3
DXVA_VideoChromaSubsampling = Int32
DXVA_VideoChromaSubsamplingShift = 8
DXVA_VideoChromaSubsamplingMask = 3840
DXVA_VideoChromaSubsampling_Unknown = 0
DXVA_VideoChromaSubsampling_ProgressiveChroma = 8
DXVA_VideoChromaSubsampling_Horizontally_Cosited = 4
DXVA_VideoChromaSubsampling_Vertically_Cosited = 2
DXVA_VideoChromaSubsampling_Vertically_AlignedChromaPlanes = 1
DXVA_VideoChromaSubsampling_MPEG2 = 5
DXVA_VideoChromaSubsampling_MPEG1 = 1
DXVA_VideoChromaSubsampling_DV_PAL = 6
DXVA_VideoChromaSubsampling_Cosited = 7
def _define_DXVA_ExtendedFormat_head():
    class DXVA_ExtendedFormat(Structure):
        pass
    return DXVA_ExtendedFormat
def _define_DXVA_ExtendedFormat():
    DXVA_ExtendedFormat = win32more.Media.MediaFoundation.DXVA_ExtendedFormat_head
    DXVA_ExtendedFormat._fields_ = [
        ("_bitfield", UInt32),
    ]
    return DXVA_ExtendedFormat
def _define_DXVA_Frequency_head():
    class DXVA_Frequency(Structure):
        pass
    return DXVA_Frequency
def _define_DXVA_Frequency():
    DXVA_Frequency = win32more.Media.MediaFoundation.DXVA_Frequency_head
    DXVA_Frequency._fields_ = [
        ("Numerator", UInt32),
        ("Denominator", UInt32),
    ]
    return DXVA_Frequency
def _define_DXVA_VideoDesc_head():
    class DXVA_VideoDesc(Structure):
        pass
    return DXVA_VideoDesc
def _define_DXVA_VideoDesc():
    DXVA_VideoDesc = win32more.Media.MediaFoundation.DXVA_VideoDesc_head
    DXVA_VideoDesc._fields_ = [
        ("Size", UInt32),
        ("SampleWidth", UInt32),
        ("SampleHeight", UInt32),
        ("SampleFormat", UInt32),
        ("d3dFormat", win32more.Graphics.Direct3D9.D3DFORMAT),
        ("InputSampleFreq", win32more.Media.MediaFoundation.DXVA_Frequency),
        ("OutputFrameFreq", win32more.Media.MediaFoundation.DXVA_Frequency),
    ]
    return DXVA_VideoDesc
DXVA_VideoProcessCaps = Int32
DXVA_VideoProcess_None = 0
DXVA_VideoProcess_YUV2RGB = 1
DXVA_VideoProcess_StretchX = 2
DXVA_VideoProcess_StretchY = 4
DXVA_VideoProcess_AlphaBlend = 8
DXVA_VideoProcess_SubRects = 16
DXVA_VideoProcess_SubStreams = 32
DXVA_VideoProcess_SubStreamsExtended = 64
DXVA_VideoProcess_YUV2RGBExtended = 128
DXVA_VideoProcess_AlphaBlendExtended = 256
DXVA_DeinterlaceTech = Int32
DXVA_DeinterlaceTech_Unknown = 0
DXVA_DeinterlaceTech_BOBLineReplicate = 1
DXVA_DeinterlaceTech_BOBVerticalStretch = 2
DXVA_DeinterlaceTech_BOBVerticalStretch4Tap = 256
DXVA_DeinterlaceTech_MedianFiltering = 4
DXVA_DeinterlaceTech_EdgeFiltering = 16
DXVA_DeinterlaceTech_FieldAdaptive = 32
DXVA_DeinterlaceTech_PixelAdaptive = 64
DXVA_DeinterlaceTech_MotionVectorSteered = 128
def _define_DXVA_VideoSample_head():
    class DXVA_VideoSample(Structure):
        pass
    return DXVA_VideoSample
def _define_DXVA_VideoSample():
    DXVA_VideoSample = win32more.Media.MediaFoundation.DXVA_VideoSample_head
    DXVA_VideoSample._fields_ = [
        ("rtStart", Int64),
        ("rtEnd", Int64),
        ("SampleFormat", win32more.Media.MediaFoundation.DXVA_SampleFormat),
        ("lpDDSSrcSurface", c_void_p),
    ]
    return DXVA_VideoSample
DXVA_SampleFlags = Int32
DXVA_SampleFlagsMask = 15
DXVA_SampleFlag_Palette_Changed = 1
DXVA_SampleFlag_SrcRect_Changed = 2
DXVA_SampleFlag_DstRect_Changed = 4
DXVA_SampleFlag_ColorData_Changed = 8
DXVA_DestinationFlags = Int32
DXVA_DestinationFlagMask = 15
DXVA_DestinationFlag_Background_Changed = 1
DXVA_DestinationFlag_TargetRect_Changed = 2
DXVA_DestinationFlag_ColorData_Changed = 4
DXVA_DestinationFlag_Alpha_Changed = 8
def _define_DXVA_VideoSample2_head():
    class DXVA_VideoSample2(Structure):
        pass
    return DXVA_VideoSample2
def _define_DXVA_VideoSample2():
    DXVA_VideoSample2 = win32more.Media.MediaFoundation.DXVA_VideoSample2_head
    DXVA_VideoSample2._fields_ = [
        ("Size", UInt32),
        ("Reserved", UInt32),
        ("rtStart", Int64),
        ("rtEnd", Int64),
        ("SampleFormat", UInt32),
        ("SampleFlags", UInt32),
        ("lpDDSSrcSurface", c_void_p),
        ("rcSrc", win32more.Foundation.RECT),
        ("rcDst", win32more.Foundation.RECT),
        ("Palette", win32more.Media.MediaFoundation.DXVA_AYUVsample2 * 16),
    ]
    return DXVA_VideoSample2
def _define_DXVA_DeinterlaceCaps_head():
    class DXVA_DeinterlaceCaps(Structure):
        pass
    return DXVA_DeinterlaceCaps
def _define_DXVA_DeinterlaceCaps():
    DXVA_DeinterlaceCaps = win32more.Media.MediaFoundation.DXVA_DeinterlaceCaps_head
    DXVA_DeinterlaceCaps._fields_ = [
        ("Size", UInt32),
        ("NumPreviousOutputFrames", UInt32),
        ("InputPool", UInt32),
        ("NumForwardRefSamples", UInt32),
        ("NumBackwardRefSamples", UInt32),
        ("d3dOutputFormat", win32more.Graphics.Direct3D9.D3DFORMAT),
        ("VideoProcessingCaps", win32more.Media.MediaFoundation.DXVA_VideoProcessCaps),
        ("DeinterlaceTechnology", win32more.Media.MediaFoundation.DXVA_DeinterlaceTech),
    ]
    return DXVA_DeinterlaceCaps
def _define_DXVA_VideoSample32_head():
    class DXVA_VideoSample32(Structure):
        pass
    return DXVA_VideoSample32
def _define_DXVA_VideoSample32():
    DXVA_VideoSample32 = win32more.Media.MediaFoundation.DXVA_VideoSample32_head
    DXVA_VideoSample32._fields_ = [
        ("rtStart", Int64),
        ("rtEnd", Int64),
        ("SampleFormat", UInt32),
        ("SampleFlags", UInt32),
        ("lpDDSSrcSurface", UInt32),
        ("rcSrc", win32more.Foundation.RECT),
        ("rcDst", win32more.Foundation.RECT),
        ("Palette", win32more.Media.MediaFoundation.DXVA_AYUVsample2 * 16),
    ]
    return DXVA_VideoSample32
def _define_DXVA_DeinterlaceBltEx32_head():
    class DXVA_DeinterlaceBltEx32(Structure):
        pass
    return DXVA_DeinterlaceBltEx32
def _define_DXVA_DeinterlaceBltEx32():
    DXVA_DeinterlaceBltEx32 = win32more.Media.MediaFoundation.DXVA_DeinterlaceBltEx32_head
    DXVA_DeinterlaceBltEx32._fields_ = [
        ("Size", UInt32),
        ("BackgroundColor", win32more.Media.MediaFoundation.DXVA_AYUVsample2),
        ("rcTarget", win32more.Foundation.RECT),
        ("rtTarget", Int64),
        ("NumSourceSurfaces", UInt32),
        ("Alpha", Single),
        ("Source", win32more.Media.MediaFoundation.DXVA_VideoSample32 * 32),
        ("DestinationFormat", UInt32),
        ("DestinationFlags", UInt32),
    ]
    return DXVA_DeinterlaceBltEx32
def _define_DXVA_DeinterlaceBlt_head():
    class DXVA_DeinterlaceBlt(Structure):
        pass
    return DXVA_DeinterlaceBlt
def _define_DXVA_DeinterlaceBlt():
    DXVA_DeinterlaceBlt = win32more.Media.MediaFoundation.DXVA_DeinterlaceBlt_head
    DXVA_DeinterlaceBlt._fields_ = [
        ("Size", UInt32),
        ("Reserved", UInt32),
        ("rtTarget", Int64),
        ("DstRect", win32more.Foundation.RECT),
        ("SrcRect", win32more.Foundation.RECT),
        ("NumSourceSurfaces", UInt32),
        ("Alpha", Single),
        ("Source", win32more.Media.MediaFoundation.DXVA_VideoSample * 32),
    ]
    return DXVA_DeinterlaceBlt
def _define_DXVA_DeinterlaceBltEx_head():
    class DXVA_DeinterlaceBltEx(Structure):
        pass
    return DXVA_DeinterlaceBltEx
def _define_DXVA_DeinterlaceBltEx():
    DXVA_DeinterlaceBltEx = win32more.Media.MediaFoundation.DXVA_DeinterlaceBltEx_head
    DXVA_DeinterlaceBltEx._fields_ = [
        ("Size", UInt32),
        ("BackgroundColor", win32more.Media.MediaFoundation.DXVA_AYUVsample2),
        ("rcTarget", win32more.Foundation.RECT),
        ("rtTarget", Int64),
        ("NumSourceSurfaces", UInt32),
        ("Alpha", Single),
        ("Source", win32more.Media.MediaFoundation.DXVA_VideoSample2 * 32),
        ("DestinationFormat", UInt32),
        ("DestinationFlags", UInt32),
    ]
    return DXVA_DeinterlaceBltEx
def _define_DXVA_DeinterlaceQueryAvailableModes_head():
    class DXVA_DeinterlaceQueryAvailableModes(Structure):
        pass
    return DXVA_DeinterlaceQueryAvailableModes
def _define_DXVA_DeinterlaceQueryAvailableModes():
    DXVA_DeinterlaceQueryAvailableModes = win32more.Media.MediaFoundation.DXVA_DeinterlaceQueryAvailableModes_head
    DXVA_DeinterlaceQueryAvailableModes._fields_ = [
        ("Size", UInt32),
        ("NumGuids", UInt32),
        ("Guids", Guid * 32),
    ]
    return DXVA_DeinterlaceQueryAvailableModes
def _define_DXVA_DeinterlaceQueryModeCaps_head():
    class DXVA_DeinterlaceQueryModeCaps(Structure):
        pass
    return DXVA_DeinterlaceQueryModeCaps
def _define_DXVA_DeinterlaceQueryModeCaps():
    DXVA_DeinterlaceQueryModeCaps = win32more.Media.MediaFoundation.DXVA_DeinterlaceQueryModeCaps_head
    DXVA_DeinterlaceQueryModeCaps._fields_ = [
        ("Size", UInt32),
        ("Guid", Guid),
        ("VideoDesc", win32more.Media.MediaFoundation.DXVA_VideoDesc),
    ]
    return DXVA_DeinterlaceQueryModeCaps
DXVA_ProcAmpControlProp = Int32
DXVA_ProcAmp_None = 0
DXVA_ProcAmp_Brightness = 1
DXVA_ProcAmp_Contrast = 2
DXVA_ProcAmp_Hue = 4
DXVA_ProcAmp_Saturation = 8
def _define_DXVA_ProcAmpControlCaps_head():
    class DXVA_ProcAmpControlCaps(Structure):
        pass
    return DXVA_ProcAmpControlCaps
def _define_DXVA_ProcAmpControlCaps():
    DXVA_ProcAmpControlCaps = win32more.Media.MediaFoundation.DXVA_ProcAmpControlCaps_head
    DXVA_ProcAmpControlCaps._fields_ = [
        ("Size", UInt32),
        ("InputPool", UInt32),
        ("d3dOutputFormat", win32more.Graphics.Direct3D9.D3DFORMAT),
        ("ProcAmpControlProps", UInt32),
        ("VideoProcessingCaps", UInt32),
    ]
    return DXVA_ProcAmpControlCaps
def _define_DXVA_ProcAmpControlQueryRange_head():
    class DXVA_ProcAmpControlQueryRange(Structure):
        pass
    return DXVA_ProcAmpControlQueryRange
def _define_DXVA_ProcAmpControlQueryRange():
    DXVA_ProcAmpControlQueryRange = win32more.Media.MediaFoundation.DXVA_ProcAmpControlQueryRange_head
    DXVA_ProcAmpControlQueryRange._fields_ = [
        ("Size", UInt32),
        ("ProcAmpControlProp", win32more.Media.MediaFoundation.DXVA_ProcAmpControlProp),
        ("VideoDesc", win32more.Media.MediaFoundation.DXVA_VideoDesc),
    ]
    return DXVA_ProcAmpControlQueryRange
def _define_DXVA_VideoPropertyRange_head():
    class DXVA_VideoPropertyRange(Structure):
        pass
    return DXVA_VideoPropertyRange
def _define_DXVA_VideoPropertyRange():
    DXVA_VideoPropertyRange = win32more.Media.MediaFoundation.DXVA_VideoPropertyRange_head
    DXVA_VideoPropertyRange._fields_ = [
        ("MinValue", Single),
        ("MaxValue", Single),
        ("DefaultValue", Single),
        ("StepSize", Single),
    ]
    return DXVA_VideoPropertyRange
def _define_DXVA_ProcAmpControlBlt_head():
    class DXVA_ProcAmpControlBlt(Structure):
        pass
    return DXVA_ProcAmpControlBlt
def _define_DXVA_ProcAmpControlBlt():
    DXVA_ProcAmpControlBlt = win32more.Media.MediaFoundation.DXVA_ProcAmpControlBlt_head
    DXVA_ProcAmpControlBlt._fields_ = [
        ("Size", UInt32),
        ("DstRect", win32more.Foundation.RECT),
        ("SrcRect", win32more.Foundation.RECT),
        ("Alpha", Single),
        ("Brightness", Single),
        ("Contrast", Single),
        ("Hue", Single),
        ("Saturation", Single),
    ]
    return DXVA_ProcAmpControlBlt
def _define_DXVA_COPPSignature_head():
    class DXVA_COPPSignature(Structure):
        pass
    return DXVA_COPPSignature
def _define_DXVA_COPPSignature():
    DXVA_COPPSignature = win32more.Media.MediaFoundation.DXVA_COPPSignature_head
    DXVA_COPPSignature._fields_ = [
        ("Signature", Byte * 256),
    ]
    return DXVA_COPPSignature
def _define_DXVA_COPPCommand_head():
    class DXVA_COPPCommand(Structure):
        pass
    return DXVA_COPPCommand
def _define_DXVA_COPPCommand():
    DXVA_COPPCommand = win32more.Media.MediaFoundation.DXVA_COPPCommand_head
    DXVA_COPPCommand._fields_ = [
        ("macKDI", Guid),
        ("guidCommandID", Guid),
        ("dwSequence", UInt32),
        ("cbSizeData", UInt32),
        ("CommandData", Byte * 4056),
    ]
    return DXVA_COPPCommand
def _define_DXVA_COPPStatusInput_head():
    class DXVA_COPPStatusInput(Structure):
        pass
    return DXVA_COPPStatusInput
def _define_DXVA_COPPStatusInput():
    DXVA_COPPStatusInput = win32more.Media.MediaFoundation.DXVA_COPPStatusInput_head
    DXVA_COPPStatusInput._fields_ = [
        ("rApp", Guid),
        ("guidStatusRequestID", Guid),
        ("dwSequence", UInt32),
        ("cbSizeData", UInt32),
        ("StatusData", Byte * 4056),
    ]
    return DXVA_COPPStatusInput
def _define_DXVA_COPPStatusOutput_head():
    class DXVA_COPPStatusOutput(Structure):
        pass
    return DXVA_COPPStatusOutput
def _define_DXVA_COPPStatusOutput():
    DXVA_COPPStatusOutput = win32more.Media.MediaFoundation.DXVA_COPPStatusOutput_head
    DXVA_COPPStatusOutput._fields_ = [
        ("macKDI", Guid),
        ("cbSizeData", UInt32),
        ("COPPStatus", Byte * 4076),
    ]
    return DXVA_COPPStatusOutput
CODECAPI_AVEncCommonFormatConstraint = Guid('57cbb9b8-116f-4951-b40c-c2a035ed8f17')
CODECAPI_GUID_AVEncCommonFormatUnSpecified = Guid('af46a35a-6024-4525-a48a-094b97f5b3c2')
CODECAPI_GUID_AVEncCommonFormatDVD_V = Guid('cc9598c4-e7fe-451d-b1ca-761bc840b7f3')
CODECAPI_GUID_AVEncCommonFormatDVD_DashVR = Guid('e55199d6-044c-4dae-a488-531ed306235b')
CODECAPI_GUID_AVEncCommonFormatDVD_PlusVR = Guid('e74c6f2e-ec37-478d-9af4-a5e135b6271c')
CODECAPI_GUID_AVEncCommonFormatVCD = Guid('95035bf7-9d90-40ff-ad5c-5cf8cf71ca1d')
CODECAPI_GUID_AVEncCommonFormatSVCD = Guid('51d85818-8220-448c-8066-d69bed16c9ad')
CODECAPI_GUID_AVEncCommonFormatATSC = Guid('8d7b897c-a019-4670-aa76-2edcac7ac296')
CODECAPI_GUID_AVEncCommonFormatDVB = Guid('71830d8f-6c33-430d-844b-c2705baae6db')
CODECAPI_GUID_AVEncCommonFormatMP3 = Guid('349733cd-eb08-4dc2-8197-e49835ef828b')
CODECAPI_GUID_AVEncCommonFormatHighMAT = Guid('1eabe760-fb2b-4928-90d1-78db88eee889')
CODECAPI_GUID_AVEncCommonFormatHighMPV = Guid('a2d25db8-b8f9-42c2-8bc7-0b93cf604788')
CODECAPI_AVEncCodecType = Guid('08af4ac1-f3f2-4c74-9dcf-37f2ec79f826')
CODECAPI_GUID_AVEncMPEG1Video = Guid('c8dafefe-da1e-4774-b27d-11830c16b1fe')
CODECAPI_GUID_AVEncMPEG2Video = Guid('046dc19a-6677-4aaa-a31d-c1ab716f4560')
CODECAPI_GUID_AVEncMPEG1Audio = Guid('d4dd1362-cd4a-4cd6-8138-b94db4542b04')
CODECAPI_GUID_AVEncMPEG2Audio = Guid('ee4cbb1f-9c3f-4770-92b5-fcb7c2a8d381')
CODECAPI_GUID_AVEncWMV = Guid('4e0fef9b-1d43-41bd-b8bd-4d7bf7457a2a')
CODECAPI_GUID_AVEndMPEG4Video = Guid('dd37b12a-9503-4f8b-b8d0-324a00c0a1cf')
CODECAPI_GUID_AVEncH264Video = Guid('95044eab-31b3-47de-8e75-38a42bb03e28')
CODECAPI_GUID_AVEncDV = Guid('09b769c7-3329-44fb-8954-fa30937d3d5a')
CODECAPI_GUID_AVEncWMAPro = Guid('1955f90c-33f7-4a68-ab81-53f5657125c4')
CODECAPI_GUID_AVEncWMALossless = Guid('55ca7265-23d8-4761-9031-b74fbe12f4c1')
CODECAPI_GUID_AVEncWMAVoice = Guid('13ed18cb-50e8-4276-a288-a6aa228382d9')
CODECAPI_GUID_AVEncDolbyDigitalPro = Guid('f5be76cc-0ff8-40eb-9cb1-bba94004d44f')
CODECAPI_GUID_AVEncDolbyDigitalConsumer = Guid('c1a7bf6c-0059-4bfa-94ef-ef747a768d52')
CODECAPI_GUID_AVEncDolbyDigitalPlus = Guid('698d1b80-f7dd-415c-971c-42492a2056c6')
CODECAPI_GUID_AVEncDTSHD = Guid('2052e630-469d-4bfb-80ca-1d656e7e918f')
CODECAPI_GUID_AVEncDTS = Guid('45fbcaa2-5e6e-4ab0-8893-5903bee93acf')
CODECAPI_GUID_AVEncMLP = Guid('05f73e29-f0d1-431e-a41c-a47432ec5a66')
CODECAPI_GUID_AVEncPCM = Guid('844be7f4-26cf-4779-b386-cc05d187990c')
CODECAPI_GUID_AVEncSDDS = Guid('1dc1b82f-11c8-4c71-b7b6-ee3eb9bc2b94')
CODECAPI_AVEncCommonRateControlMode = Guid('1c0608e9-370c-4710-8a58-cb6181c42423')
eAVEncCommonRateControlMode = Int32
eAVEncCommonRateControlMode_CBR = 0
eAVEncCommonRateControlMode_PeakConstrainedVBR = 1
eAVEncCommonRateControlMode_UnconstrainedVBR = 2
eAVEncCommonRateControlMode_Quality = 3
eAVEncCommonRateControlMode_LowDelayVBR = 4
eAVEncCommonRateControlMode_GlobalVBR = 5
eAVEncCommonRateControlMode_GlobalLowDelayVBR = 6
CODECAPI_AVEncCommonLowLatency = Guid('9d3ecd55-89e8-490a-970a-0c9548d5a56e')
CODECAPI_AVEncCommonMultipassMode = Guid('22533d4c-47e1-41b5-9352-a2b7780e7ac4')
CODECAPI_AVEncCommonPassStart = Guid('6a67739f-4eb5-4385-9928-f276a939ef95')
CODECAPI_AVEncCommonPassEnd = Guid('0e3d01bc-c85c-467d-8b60-c41012ee3bf6')
CODECAPI_AVEncCommonRealTime = Guid('143a0ff6-a131-43da-b81e-98fbb8ec378e')
CODECAPI_AVEncCommonQuality = Guid('fcbf57a3-7ea5-4b0c-9644-69b40c39c391')
CODECAPI_AVEncCommonQualityVsSpeed = Guid('98332df8-03cd-476b-89fa-3f9e442dec9f')
CODECAPI_AVEncCommonTranscodeEncodingProfile = Guid('6947787c-f508-4ea9-b1e9-a1fe3a49fbc9')
CODECAPI_AVEncCommonMeanBitRate = Guid('f7222374-2144-4815-b550-a37f8e12ee52')
CODECAPI_AVEncCommonMeanBitRateInterval = Guid('bfaa2f0c-cb82-4bc0-8474-f06a8a0d0258')
CODECAPI_AVEncCommonMaxBitRate = Guid('9651eae4-39b9-4ebf-85ef-d7f444ec7465')
CODECAPI_AVEncCommonMinBitRate = Guid('101405b2-2083-4034-a806-efbeddd7c9ff')
CODECAPI_AVEncCommonBufferSize = Guid('0db96574-b6a4-4c8b-8106-3773de0310cd')
CODECAPI_AVEncCommonBufferInLevel = Guid('d9c5c8db-fc74-4064-94e9-cd19f947ed45')
CODECAPI_AVEncCommonBufferOutLevel = Guid('ccae7f49-d0bc-4e3d-a57e-fb5740140069')
CODECAPI_AVEncCommonStreamEndHandling = Guid('6aad30af-6ba8-4ccc-8fca-18d19beaeb1c')
eAVEncCommonStreamEndHandling = Int32
eAVEncCommonStreamEndHandling_DiscardPartial = 0
eAVEncCommonStreamEndHandling_EnsureComplete = 1
CODECAPI_AVEncStatCommonCompletedPasses = Guid('3e5de533-9df7-438c-854f-9f7dd3683d34')
CODECAPI_AVEncVideoOutputFrameRate = Guid('ea85e7c3-9567-4d99-87c4-02c1c278ca7c')
CODECAPI_AVEncVideoOutputFrameRateConversion = Guid('8c068bf4-369a-4ba3-82fd-b2518fb3396e')
eAVEncVideoOutputFrameRateConversion = Int32
eAVEncVideoOutputFrameRateConversion_Disable = 0
eAVEncVideoOutputFrameRateConversion_Enable = 1
eAVEncVideoOutputFrameRateConversion_Alias = 2
CODECAPI_AVEncVideoPixelAspectRatio = Guid('3cdc718f-b3e9-4eb6-a57f-cf1f1b321b87')
CODECAPI_AVDecVideoAcceleration_MPEG2 = Guid('f7db8a2e-4f48-4ee8-ae31-8b6ebe558ae2')
CODECAPI_AVDecVideoAcceleration_H264 = Guid('f7db8a2f-4f48-4ee8-ae31-8b6ebe558ae2')
CODECAPI_AVDecVideoAcceleration_VC1 = Guid('f7db8a30-4f48-4ee8-ae31-8b6ebe558ae2')
CODECAPI_AVDecVideoProcDeinterlaceCSC = Guid('f7db8a31-4f48-4ee8-ae31-8b6ebe558ae2')
CODECAPI_AVDecVideoThumbnailGenerationMode = Guid('2efd8eee-1150-4328-9cf5-66dce933fcf4')
CODECAPI_AVDecVideoMaxCodedWidth = Guid('5ae557b8-77af-41f5-9fa6-4db2fe1d4bca')
CODECAPI_AVDecVideoMaxCodedHeight = Guid('7262a16a-d2dc-4e75-9ba8-65c0c6d32b13')
CODECAPI_AVDecNumWorkerThreads = Guid('9561c3e8-ea9e-4435-9b1e-a93e691894d8')
CODECAPI_AVDecSoftwareDynamicFormatChange = Guid('862e2f0a-507b-47ff-af47-01e2624298b7')
CODECAPI_AVDecDisableVideoPostProcessing = Guid('f8749193-667a-4f2c-a9e8-5d4af924f08f')
CODECAPI_AVDecVideoDropPicWithMissingRef = Guid('f8226383-14c2-4567-9734-5004e96ff887')
CODECAPI_AVDecVideoSoftwareDeinterlaceMode = Guid('0c08d1ce-9ced-4540-bae3-ceb380141109')
eAVDecVideoSoftwareDeinterlaceMode = Int32
eAVDecVideoSoftwareDeinterlaceMode_NoDeinterlacing = 0
eAVDecVideoSoftwareDeinterlaceMode_ProgressiveDeinterlacing = 1
eAVDecVideoSoftwareDeinterlaceMode_BOBDeinterlacing = 2
eAVDecVideoSoftwareDeinterlaceMode_SmartBOBDeinterlacing = 3
CODECAPI_AVDecVideoFastDecodeMode = Guid('6b529f7d-d3b1-49c6-a999-9ec6911bedbf')
eAVFastDecodeMode = Int32
eAVFastDecodeMode_eVideoDecodeCompliant = 0
eAVFastDecodeMode_eVideoDecodeOptimalLF = 1
eAVFastDecodeMode_eVideoDecodeDisableLF = 2
eAVFastDecodeMode_eVideoDecodeFastest = 32
CODECAPI_AVLowLatencyMode = Guid('9c27891a-ed7a-40e1-88e8-b22727a024ee')
CODECAPI_AVDecVideoH264ErrorConcealment = Guid('ececace8-3436-462c-9294-cd7bacd758a9')
eAVDecVideoH264ErrorConcealment = Int32
eAVDecVideoH264ErrorConcealment_eErrorConcealmentTypeDrop = 0
eAVDecVideoH264ErrorConcealment_eErrorConcealmentTypeBasic = 1
eAVDecVideoH264ErrorConcealment_eErrorConcealmentTypeAdvanced = 2
eAVDecVideoH264ErrorConcealment_eErrorConcealmentTypeDXVASetBlack = 3
CODECAPI_AVDecVideoMPEG2ErrorConcealment = Guid('9d2bfe18-728d-48d2-b358-bc7e436c6674')
eAVDecVideoMPEG2ErrorConcealment = Int32
eAVDecVideoMPEG2ErrorConcealment_eErrorConcealmentOff = 0
eAVDecVideoMPEG2ErrorConcealment_eErrorConcealmentOn = 1
CODECAPI_AVDecVideoCodecType = Guid('434528e5-21f0-46b6-b62c-9b1b6b658cd1')
eAVDecVideoCodecType = Int32
eAVDecVideoCodecType_NOTPLAYING = 0
eAVDecVideoCodecType_MPEG2 = 1
eAVDecVideoCodecType_H264 = 2
CODECAPI_AVDecVideoDXVAMode = Guid('f758f09e-7337-4ae7-8387-73dc2d54e67d')
eAVDecVideoDXVAMode = Int32
eAVDecVideoDXVAMode_NOTPLAYING = 0
eAVDecVideoDXVAMode_SW = 1
eAVDecVideoDXVAMode_MC = 2
eAVDecVideoDXVAMode_IDCT = 3
eAVDecVideoDXVAMode_VLD = 4
CODECAPI_AVDecVideoDXVABusEncryption = Guid('42153c8b-fd0b-4765-a462-ddd9e8bcc388')
eAVDecVideoDXVABusEncryption = Int32
eAVDecVideoDXVABusEncryption_NONE = 0
eAVDecVideoDXVABusEncryption_PRIVATE = 1
eAVDecVideoDXVABusEncryption_AES = 2
CODECAPI_AVEncVideoForceSourceScanType = Guid('1ef2065f-058a-4765-a4fc-8a864c103012')
eAVEncVideoSourceScanType = Int32
eAVEncVideoSourceScan_Automatic = 0
eAVEncVideoSourceScan_Interlaced = 1
eAVEncVideoSourceScan_Progressive = 2
CODECAPI_AVEncVideoNoOfFieldsToEncode = Guid('61e4bbe2-4ee0-40e7-80ab-51ddeebe6291')
CODECAPI_AVEncVideoNoOfFieldsToSkip = Guid('a97e1240-1427-4c16-a7f7-3dcfd8ba4cc5')
CODECAPI_AVEncVideoEncodeDimension = Guid('1074df28-7e0f-47a4-a453-cdd73870f5ce')
CODECAPI_AVEncVideoEncodeOffsetOrigin = Guid('6bc098fe-a71a-4454-852e-4d2ddeb2cd24')
CODECAPI_AVEncVideoDisplayDimension = Guid('de053668-f4ec-47a9-86d0-836770f0c1d5')
CODECAPI_AVEncVideoOutputScanType = Guid('460b5576-842e-49ab-a62d-b36f7312c9db')
eAVEncVideoOutputScanType = Int32
eAVEncVideoOutputScan_Progressive = 0
eAVEncVideoOutputScan_Interlaced = 1
eAVEncVideoOutputScan_SameAsInput = 2
eAVEncVideoOutputScan_Automatic = 3
CODECAPI_AVEncVideoInverseTelecineEnable = Guid('2ea9098b-e76d-4ccd-a030-d3b889c1b64c')
CODECAPI_AVEncVideoInverseTelecineThreshold = Guid('40247d84-e895-497f-b44c-b74560acfe27')
CODECAPI_AVEncVideoSourceFilmContent = Guid('1791c64b-ccfc-4827-a0ed-2557793b2b1c')
eAVEncVideoFilmContent = Int32
eAVEncVideoFilmContent_VideoOnly = 0
eAVEncVideoFilmContent_FilmOnly = 1
eAVEncVideoFilmContent_Mixed = 2
CODECAPI_AVEncVideoSourceIsBW = Guid('42ffc49b-1812-4fdc-8d24-7054c521e6eb')
CODECAPI_AVEncVideoFieldSwap = Guid('fefd7569-4e0a-49f2-9f2b-360ea48c19a2')
CODECAPI_AVEncVideoInputChromaResolution = Guid('bb0cec33-16f1-47b0-8a88-37815bee1739')
CODECAPI_AVEncVideoOutputChromaResolution = Guid('6097b4c9-7c1d-4e64-bfcc-9e9765318ae7')
eAVEncVideoChromaResolution = Int32
eAVEncVideoChromaResolution_SameAsSource = 0
eAVEncVideoChromaResolution_444 = 1
eAVEncVideoChromaResolution_422 = 2
eAVEncVideoChromaResolution_420 = 3
eAVEncVideoChromaResolution_411 = 4
CODECAPI_AVEncVideoInputChromaSubsampling = Guid('a8e73a39-4435-4ec3-a6ea-98300f4b36f7')
CODECAPI_AVEncVideoOutputChromaSubsampling = Guid('fa561c6c-7d17-44f0-83c9-32ed12e96343')
eAVEncVideoChromaSubsampling = Int32
eAVEncVideoChromaSubsamplingFormat_SameAsSource = 0
eAVEncVideoChromaSubsamplingFormat_ProgressiveChroma = 8
eAVEncVideoChromaSubsamplingFormat_Horizontally_Cosited = 4
eAVEncVideoChromaSubsamplingFormat_Vertically_Cosited = 2
eAVEncVideoChromaSubsamplingFormat_Vertically_AlignedChromaPlanes = 1
CODECAPI_AVEncVideoInputColorPrimaries = Guid('c24d783f-7ce6-4278-90ab-28a4f1e5f86c')
CODECAPI_AVEncVideoOutputColorPrimaries = Guid('be95907c-9d04-4921-8985-a6d6d87d1a6c')
eAVEncVideoColorPrimaries = Int32
eAVEncVideoColorPrimaries_SameAsSource = 0
eAVEncVideoColorPrimaries_Reserved = 1
eAVEncVideoColorPrimaries_BT709 = 2
eAVEncVideoColorPrimaries_BT470_2_SysM = 3
eAVEncVideoColorPrimaries_BT470_2_SysBG = 4
eAVEncVideoColorPrimaries_SMPTE170M = 5
eAVEncVideoColorPrimaries_SMPTE240M = 6
eAVEncVideoColorPrimaries_EBU3231 = 7
eAVEncVideoColorPrimaries_SMPTE_C = 8
CODECAPI_AVEncVideoInputColorTransferFunction = Guid('8c056111-a9c3-4b08-a0a0-ce13f8a27c75')
CODECAPI_AVEncVideoOutputColorTransferFunction = Guid('4a7f884a-ea11-460d-bf57-b88bc75900de')
eAVEncVideoColorTransferFunction = Int32
eAVEncVideoColorTransferFunction_SameAsSource = 0
eAVEncVideoColorTransferFunction_10 = 1
eAVEncVideoColorTransferFunction_18 = 2
eAVEncVideoColorTransferFunction_20 = 3
eAVEncVideoColorTransferFunction_22 = 4
eAVEncVideoColorTransferFunction_22_709 = 5
eAVEncVideoColorTransferFunction_22_240M = 6
eAVEncVideoColorTransferFunction_22_8bit_sRGB = 7
eAVEncVideoColorTransferFunction_28 = 8
CODECAPI_AVEncVideoInputColorTransferMatrix = Guid('52ed68b9-72d5-4089-958d-f5405d55081c')
CODECAPI_AVEncVideoOutputColorTransferMatrix = Guid('a9b90444-af40-4310-8fbe-ed6d933f892b')
eAVEncVideoColorTransferMatrix = Int32
eAVEncVideoColorTransferMatrix_SameAsSource = 0
eAVEncVideoColorTransferMatrix_BT709 = 1
eAVEncVideoColorTransferMatrix_BT601 = 2
eAVEncVideoColorTransferMatrix_SMPTE240M = 3
CODECAPI_AVEncVideoInputColorLighting = Guid('46a99549-0015-4a45-9c30-1d5cfa258316')
CODECAPI_AVEncVideoOutputColorLighting = Guid('0e5aaac6-ace6-4c5c-998e-1a8c9c6c0f89')
eAVEncVideoColorLighting = Int32
eAVEncVideoColorLighting_SameAsSource = 0
eAVEncVideoColorLighting_Unknown = 1
eAVEncVideoColorLighting_Bright = 2
eAVEncVideoColorLighting_Office = 3
eAVEncVideoColorLighting_Dim = 4
eAVEncVideoColorLighting_Dark = 5
CODECAPI_AVEncVideoInputColorNominalRange = Guid('16cf25c6-a2a6-48e9-ae80-21aec41d427e')
CODECAPI_AVEncVideoOutputColorNominalRange = Guid('972835ed-87b5-4e95-9500-c73958566e54')
eAVEncVideoColorNominalRange = Int32
eAVEncVideoColorNominalRange_SameAsSource = 0
eAVEncVideoColorNominalRange_0_255 = 1
eAVEncVideoColorNominalRange_16_235 = 2
eAVEncVideoColorNominalRange_48_208 = 3
CODECAPI_AVEncInputVideoSystem = Guid('bede146d-b616-4dc7-92b2-f5d9fa9298f7')
eAVEncInputVideoSystem = Int32
eAVEncInputVideoSystem_Unspecified = 0
eAVEncInputVideoSystem_PAL = 1
eAVEncInputVideoSystem_NTSC = 2
eAVEncInputVideoSystem_SECAM = 3
eAVEncInputVideoSystem_MAC = 4
eAVEncInputVideoSystem_HDV = 5
eAVEncInputVideoSystem_Component = 6
CODECAPI_AVEncVideoHeaderDropFrame = Guid('6ed9e124-7925-43fe-971b-e019f62222b4')
CODECAPI_AVEncVideoHeaderHours = Guid('2acc7702-e2da-4158-bf9b-88880129d740')
CODECAPI_AVEncVideoHeaderMinutes = Guid('dc1a99ce-0307-408b-880b-b8348ee8ca7f')
CODECAPI_AVEncVideoHeaderSeconds = Guid('4a2e1a05-a780-4f58-8120-9a449d69656b')
CODECAPI_AVEncVideoHeaderFrames = Guid('afd5f567-5c1b-4adc-bdaf-735610381436')
CODECAPI_AVEncVideoDefaultUpperFieldDominant = Guid('810167c4-0bc1-47ca-8fc2-57055a1474a5')
CODECAPI_AVEncVideoCBRMotionTradeoff = Guid('0d49451e-18d5-4367-a4ef-3240df1693c4')
CODECAPI_AVEncVideoCodedVideoAccessUnitSize = Guid('b4b10c15-14a7-4ce8-b173-dc90a0b4fcdb')
CODECAPI_AVEncVideoMaxKeyframeDistance = Guid('2987123a-ba93-4704-b489-ec1e5f25292c')
CODECAPI_AVEncH264CABACEnable = Guid('ee6cad62-d305-4248-a50e-e1b255f7caf8')
CODECAPI_AVEncVideoContentType = Guid('66117aca-eb77-459d-930c-a48d9d0683fc')
eAVEncVideoContentType = Int32
eAVEncVideoContentType_Unknown = 0
eAVEncVideoContentType_FixedCameraAngle = 1
CODECAPI_AVEncNumWorkerThreads = Guid('b0c8bf60-16f7-4951-a30b-1db1609293d6')
CODECAPI_AVEncVideoEncodeQP = Guid('2cb5696b-23fb-4ce1-a0f9-ef5b90fd55ca')
CODECAPI_AVEncVideoMinQP = Guid('0ee22c6a-a37c-4568-b5f1-9d4c2b3ab886')
CODECAPI_AVEncVideoForceKeyFrame = Guid('398c1b98-8353-475a-9ef2-8f265d260345')
CODECAPI_AVEncH264SPSID = Guid('50f38f51-2b79-40e3-b39c-7e9fa0770501')
CODECAPI_AVEncH264PPSID = Guid('bfe29ec2-056c-4d68-a38d-ae5944c8582e')
CODECAPI_AVEncAdaptiveMode = Guid('4419b185-da1f-4f53-bc76-097d0c1efb1e')
CODECAPI_AVScenarioInfo = Guid('b28a6e64-3ff9-446a-8a4b-0d7a53413236')
CODECAPI_AVEncMPVGOPSizeMin = Guid('7155cf20-d440-4852-ad0f-9c4abfe37a6a')
CODECAPI_AVEncMPVGOPSizeMax = Guid('fe7de4c4-1936-4fe2-bdf7-1f18ca1d001f')
CODECAPI_AVEncVideoMaxCTBSize = Guid('822363ff-cec8-43e5-92fd-e097488485e9')
CODECAPI_AVEncVideoCTBSize = Guid('d47db8b2-e73b-4cb9-8c3e-bd877d06d77b')
CODECAPI_VideoEncoderDisplayContentType = Guid('79b90b27-f4b1-42dc-9dd7-cdaf8135c400')
CODECAPI_AVEncEnableVideoProcessing = Guid('006f4bf6-0ea3-4d42-8702-b5d8be0f7a92')
CODECAPI_AVEncVideoGradualIntraRefresh = Guid('8f347dee-cb0d-49ba-b462-db6927ee2101')
CODECAPI_GetOPMContext = Guid('2f036c05-4c14-4689-8839-294c6d73e053')
CODECAPI_SetHDCPManagerContext = Guid('6d2d1fc8-3dc9-47eb-a1a2-471c80cd60d0')
CODECAPI_AVEncVideoMaxTemporalLayers = Guid('9c668cfe-08e1-424a-934e-b764b064802a')
CODECAPI_AVEncVideoNumGOPsPerIDR = Guid('83bc5bdb-5b89-4521-8f66-33151c373176')
CODECAPI_AVEncCommonAllowFrameDrops = Guid('d8477dcb-9598-48e3-8d0c-752bf206093e')
CODECAPI_AVEncVideoIntraLayerPrediction = Guid('d3af46b8-bf47-44bb-a283-69f0b0228ff9')
CODECAPI_AVEncVideoInstantTemporalUpSwitching = Guid('a3308307-0d96-4ba4-b1f0-b91a5e49df10')
CODECAPI_AVEncLowPowerEncoder = Guid('b668d582-8bad-4f6a-9141-375a95358b6d')
CODECAPI_AVEnableInLoopDeblockFilter = Guid('d2e8e399-0623-4bf3-92a8-4d1818529ded')
eAVEncAdaptiveMode = Int32
eAVEncAdaptiveMode_None = 0
eAVEncAdaptiveMode_Resolution = 1
eAVEncAdaptiveMode_FrameRate = 2
eAVScenarioInfo = Int32
eAVScenarioInfo_Unknown = 0
eAVScenarioInfo_DisplayRemoting = 1
eAVScenarioInfo_VideoConference = 2
eAVScenarioInfo_Archive = 3
eAVScenarioInfo_LiveStreaming = 4
eAVScenarioInfo_CameraRecord = 5
eAVScenarioInfo_DisplayRemotingWithFeatureMap = 6
eVideoEncoderDisplayContentType = Int32
eVideoEncoderDisplayContent_Unknown = 0
eVideoEncoderDisplayContent_FullScreenVideo = 1
CODECAPI_AVEncVideoSelectLayer = Guid('eb1084f5-6aaa-4914-bb2f-6147227f12e7')
CODECAPI_AVEncVideoTemporalLayerCount = Guid('19caebff-b74d-4cfd-8c27-c2f9d97d5f52')
CODECAPI_AVEncVideoUsage = Guid('1f636849-5dc1-49f1-b1d8-ce3cf62ea385')
CODECAPI_AVEncVideoRateControlParams = Guid('87d43767-7645-44ec-b438-d3322fbca29f')
CODECAPI_AVEncVideoSupportedControls = Guid('d3f40fdd-77b9-473d-8196-061259e69cff')
CODECAPI_AVEncVideoEncodeFrameTypeQP = Guid('aa70b610-e03f-450c-ad07-07314e639ce7')
CODECAPI_AVEncSliceControlMode = Guid('e9e782ef-5f18-44c9-a90b-e9c3c2c17b0b')
CODECAPI_AVEncSliceControlSize = Guid('92f51df3-07a5-4172-aefe-c69ca3b60e35')
CODECAPI_AVEncSliceGenerationMode = Guid('8a6bc67f-9497-4286-b46b-02db8d60edbc')
CODECAPI_AVEncVideoMaxNumRefFrame = Guid('964829ed-94f9-43b4-b74d-ef40944b69a0')
CODECAPI_AVEncVideoMeanAbsoluteDifference = Guid('e5c0c10f-81a4-422d-8c3f-b474a4581336')
CODECAPI_AVEncVideoMaxQP = Guid('3daf6f66-a6a7-45e0-a8e5-f2743f46a3a2')
CODECAPI_AVEncVideoLTRBufferControl = Guid('a4a0e93d-4cbc-444c-89f4-826d310e92a7')
CODECAPI_AVEncVideoMarkLTRFrame = Guid('e42f4748-a06d-4ef9-8cea-3d05fde3bd3b')
CODECAPI_AVEncVideoUseLTRFrame = Guid('00752db8-55f7-4f80-895b-27639195f2ad')
CODECAPI_AVEncVideoROIEnabled = Guid('d74f7f18-44dd-4b85-aba3-05d9f42a8280')
CODECAPI_AVEncVideoDirtyRectEnabled = Guid('8acb8fdd-5e0c-4c66-8729-b8f629ab04fb')
CODECAPI_AVEncMaxFrameRate = Guid('b98e1b31-19fa-4d4f-9931-d6a5b8aab93c')
CODECAPI_AVEncMuxOutputStreamType = Guid('cedd9e8f-34d3-44db-a1d8-f81520254f3e')
eAVEncMuxOutput = Int32
eAVEncMuxOutput_eAVEncMuxOutputAuto = 0
eAVEncMuxOutput_eAVEncMuxOutputPS = 1
eAVEncMuxOutput_eAVEncMuxOutputTS = 2
CODECAPI_AVEncStatVideoOutputFrameRate = Guid('be747849-9ab4-4a63-98fe-f143f04f8ee9')
CODECAPI_AVEncStatVideoCodedFrames = Guid('d47f8d61-6f5a-4a26-bb9f-cd9518462bcd')
CODECAPI_AVEncStatVideoTotalFrames = Guid('fdaa9916-119a-4222-9ad6-3f7cab99cc8b')
CODECAPI_AVEncAudioIntervalToEncode = Guid('866e4b4d-725a-467c-bb01-b496b23b25f9')
CODECAPI_AVEncAudioIntervalToSkip = Guid('88c15f94-c38c-4796-a9e8-96e967983f26')
CODECAPI_AVEncAudioDualMono = Guid('3648126b-a3e8-4329-9b3a-5ce566a43bd3')
eAVEncAudioDualMono = Int32
eAVEncAudioDualMono_SameAsInput = 0
eAVEncAudioDualMono_Off = 1
eAVEncAudioDualMono_On = 2
CODECAPI_AVEncAudioMeanBitRate = Guid('921295bb-4fca-4679-aab8-9e2a1d753384')
CODECAPI_AVEncAudioMapDestChannel0 = Guid('bc5d0b60-df6a-4e16-9803-b82007a30c8d')
CODECAPI_AVEncAudioMapDestChannel1 = Guid('bc5d0b61-df6a-4e16-9803-b82007a30c8d')
CODECAPI_AVEncAudioMapDestChannel2 = Guid('bc5d0b62-df6a-4e16-9803-b82007a30c8d')
CODECAPI_AVEncAudioMapDestChannel3 = Guid('bc5d0b63-df6a-4e16-9803-b82007a30c8d')
CODECAPI_AVEncAudioMapDestChannel4 = Guid('bc5d0b64-df6a-4e16-9803-b82007a30c8d')
CODECAPI_AVEncAudioMapDestChannel5 = Guid('bc5d0b65-df6a-4e16-9803-b82007a30c8d')
CODECAPI_AVEncAudioMapDestChannel6 = Guid('bc5d0b66-df6a-4e16-9803-b82007a30c8d')
CODECAPI_AVEncAudioMapDestChannel7 = Guid('bc5d0b67-df6a-4e16-9803-b82007a30c8d')
CODECAPI_AVEncAudioMapDestChannel8 = Guid('bc5d0b68-df6a-4e16-9803-b82007a30c8d')
CODECAPI_AVEncAudioMapDestChannel9 = Guid('bc5d0b69-df6a-4e16-9803-b82007a30c8d')
CODECAPI_AVEncAudioMapDestChannel10 = Guid('bc5d0b6a-df6a-4e16-9803-b82007a30c8d')
CODECAPI_AVEncAudioMapDestChannel11 = Guid('bc5d0b6b-df6a-4e16-9803-b82007a30c8d')
CODECAPI_AVEncAudioMapDestChannel12 = Guid('bc5d0b6c-df6a-4e16-9803-b82007a30c8d')
CODECAPI_AVEncAudioMapDestChannel13 = Guid('bc5d0b6d-df6a-4e16-9803-b82007a30c8d')
CODECAPI_AVEncAudioMapDestChannel14 = Guid('bc5d0b6e-df6a-4e16-9803-b82007a30c8d')
CODECAPI_AVEncAudioMapDestChannel15 = Guid('bc5d0b6f-df6a-4e16-9803-b82007a30c8d')
CODECAPI_AVEncAudioInputContent = Guid('3e226c2b-60b9-4a39-b00b-a7b40f70d566')
eAVEncAudioInputContent = Int32
AVEncAudioInputContent_Unknown = 0
AVEncAudioInputContent_Voice = 1
AVEncAudioInputContent_Music = 2
CODECAPI_AVEncStatAudioPeakPCMValue = Guid('dce7fd34-dc00-4c16-821b-35d9eb00fb1a')
CODECAPI_AVEncStatAudioAveragePCMValue = Guid('979272f8-d17f-4e32-bb73-4e731c68ba2d')
CODECAPI_AVEncStatAudioAverageBPS = Guid('ca6724db-7059-4351-8b43-f82198826a14')
CODECAPI_AVEncStatAverageBPS = Guid('ca6724db-7059-4351-8b43-f82198826a14')
CODECAPI_AVEncStatHardwareProcessorUtilitization = Guid('995dc027-cb95-49e6-b91b-5967753cdcb8')
CODECAPI_AVEncStatHardwareBandwidthUtilitization = Guid('0124ba9b-dc41-4826-b45f-18ac01b3d5a8')
CODECAPI_AVEncMPVGOPSize = Guid('95f31b26-95a4-41aa-9303-246a7fc6eef1')
CODECAPI_AVEncMPVGOPOpen = Guid('b1d5d4a6-3300-49b1-ae61-a09937ab0e49')
CODECAPI_AVEncMPVDefaultBPictureCount = Guid('8d390aac-dc5c-4200-b57f-814d04babab2')
CODECAPI_AVEncMPVProfile = Guid('dabb534a-1d99-4284-975a-d90e2239baa1')
eAVEncMPVProfile = Int32
eAVEncMPVProfile_unknown = 0
eAVEncMPVProfile_Simple = 1
eAVEncMPVProfile_Main = 2
eAVEncMPVProfile_High = 3
eAVEncMPVProfile_422 = 4
CODECAPI_AVEncMPVLevel = Guid('6ee40c40-a60c-41ef-8f50-37c2249e2cb3')
eAVEncMPVLevel = Int32
eAVEncMPVLevel_Low = 1
eAVEncMPVLevel_Main = 2
eAVEncMPVLevel_High1440 = 3
eAVEncMPVLevel_High = 4
eAVEncH263VProfile = Int32
eAVEncH263VProfile_Base = 0
eAVEncH263VProfile_CompatibilityV2 = 1
eAVEncH263VProfile_CompatibilityV1 = 2
eAVEncH263VProfile_WirelessV2 = 3
eAVEncH263VProfile_WirelessV3 = 4
eAVEncH263VProfile_HighCompression = 5
eAVEncH263VProfile_Internet = 6
eAVEncH263VProfile_Interlace = 7
eAVEncH263VProfile_HighLatency = 8
eAVEncH264VProfile = Int32
eAVEncH264VProfile_unknown = 0
eAVEncH264VProfile_Simple = 66
eAVEncH264VProfile_Base = 66
eAVEncH264VProfile_Main = 77
eAVEncH264VProfile_High = 100
eAVEncH264VProfile_422 = 122
eAVEncH264VProfile_High10 = 110
eAVEncH264VProfile_444 = 244
eAVEncH264VProfile_Extended = 88
eAVEncH264VProfile_ScalableBase = 83
eAVEncH264VProfile_ScalableHigh = 86
eAVEncH264VProfile_MultiviewHigh = 118
eAVEncH264VProfile_StereoHigh = 128
eAVEncH264VProfile_ConstrainedBase = 256
eAVEncH264VProfile_UCConstrainedHigh = 257
eAVEncH264VProfile_UCScalableConstrainedBase = 258
eAVEncH264VProfile_UCScalableConstrainedHigh = 259
eAVEncH265VProfile = Int32
eAVEncH265VProfile_unknown = 0
eAVEncH265VProfile_Main_420_8 = 1
eAVEncH265VProfile_Main_420_10 = 2
eAVEncH265VProfile_Main_420_12 = 3
eAVEncH265VProfile_Main_422_10 = 4
eAVEncH265VProfile_Main_422_12 = 5
eAVEncH265VProfile_Main_444_8 = 6
eAVEncH265VProfile_Main_444_10 = 7
eAVEncH265VProfile_Main_444_12 = 8
eAVEncH265VProfile_Monochrome_12 = 9
eAVEncH265VProfile_Monochrome_16 = 10
eAVEncH265VProfile_MainIntra_420_8 = 11
eAVEncH265VProfile_MainIntra_420_10 = 12
eAVEncH265VProfile_MainIntra_420_12 = 13
eAVEncH265VProfile_MainIntra_422_10 = 14
eAVEncH265VProfile_MainIntra_422_12 = 15
eAVEncH265VProfile_MainIntra_444_8 = 16
eAVEncH265VProfile_MainIntra_444_10 = 17
eAVEncH265VProfile_MainIntra_444_12 = 18
eAVEncH265VProfile_MainIntra_444_16 = 19
eAVEncH265VProfile_MainStill_420_8 = 20
eAVEncH265VProfile_MainStill_444_8 = 21
eAVEncH265VProfile_MainStill_444_16 = 22
eAVEncVP9VProfile = Int32
eAVEncVP9VProfile_unknown = 0
eAVEncVP9VProfile_420_8 = 1
eAVEncVP9VProfile_420_10 = 2
eAVEncVP9VProfile_420_12 = 3
eAVEncH263PictureType = Int32
eAVEncH263PictureType_I = 0
eAVEncH263PictureType_P = 1
eAVEncH263PictureType_B = 2
eAVEncH264PictureType = Int32
eAVEncH264PictureType_IDR = 0
eAVEncH264PictureType_P = 1
eAVEncH264PictureType_B = 2
eAVEncH263VLevel = Int32
eAVEncH263VLevel_eAVEncH263VLevel1 = 10
eAVEncH263VLevel_eAVEncH263VLevel2 = 20
eAVEncH263VLevel_eAVEncH263VLevel3 = 30
eAVEncH263VLevel_eAVEncH263VLevel4 = 40
eAVEncH263VLevel_eAVEncH263VLevel4_5 = 45
eAVEncH263VLevel_eAVEncH263VLevel5 = 50
eAVEncH263VLevel_eAVEncH263VLevel6 = 60
eAVEncH263VLevel_eAVEncH263VLevel7 = 70
eAVEncH264VLevel = Int32
eAVEncH264VLevel_eAVEncH264VLevel1 = 10
eAVEncH264VLevel_eAVEncH264VLevel1_b = 11
eAVEncH264VLevel_eAVEncH264VLevel1_1 = 11
eAVEncH264VLevel_eAVEncH264VLevel1_2 = 12
eAVEncH264VLevel_eAVEncH264VLevel1_3 = 13
eAVEncH264VLevel_eAVEncH264VLevel2 = 20
eAVEncH264VLevel_eAVEncH264VLevel2_1 = 21
eAVEncH264VLevel_eAVEncH264VLevel2_2 = 22
eAVEncH264VLevel_eAVEncH264VLevel3 = 30
eAVEncH264VLevel_eAVEncH264VLevel3_1 = 31
eAVEncH264VLevel_eAVEncH264VLevel3_2 = 32
eAVEncH264VLevel_eAVEncH264VLevel4 = 40
eAVEncH264VLevel_eAVEncH264VLevel4_1 = 41
eAVEncH264VLevel_eAVEncH264VLevel4_2 = 42
eAVEncH264VLevel_eAVEncH264VLevel5 = 50
eAVEncH264VLevel_eAVEncH264VLevel5_1 = 51
eAVEncH264VLevel_eAVEncH264VLevel5_2 = 52
eAVEncH265VLevel = Int32
eAVEncH265VLevel_eAVEncH265VLevel1 = 30
eAVEncH265VLevel_eAVEncH265VLevel2 = 60
eAVEncH265VLevel_eAVEncH265VLevel2_1 = 63
eAVEncH265VLevel_eAVEncH265VLevel3 = 90
eAVEncH265VLevel_eAVEncH265VLevel3_1 = 93
eAVEncH265VLevel_eAVEncH265VLevel4 = 120
eAVEncH265VLevel_eAVEncH265VLevel4_1 = 123
eAVEncH265VLevel_eAVEncH265VLevel5 = 150
eAVEncH265VLevel_eAVEncH265VLevel5_1 = 153
eAVEncH265VLevel_eAVEncH265VLevel5_2 = 156
eAVEncH265VLevel_eAVEncH265VLevel6 = 180
eAVEncH265VLevel_eAVEncH265VLevel6_1 = 183
eAVEncH265VLevel_eAVEncH265VLevel6_2 = 186
CODECAPI_AVEncMPVFrameFieldMode = Guid('acb5de96-7b93-4c2f-8825-b0295fa93bf4')
eAVEncMPVFrameFieldMode = Int32
eAVEncMPVFrameFieldMode_FieldMode = 0
eAVEncMPVFrameFieldMode_FrameMode = 1
CODECAPI_AVEncMPVAddSeqEndCode = Guid('a823178f-57df-4c7a-b8fd-e5ec8887708d')
CODECAPI_AVEncMPVGOPSInSeq = Guid('993410d4-2691-4192-9978-98dc2603669f')
CODECAPI_AVEncMPVUseConcealmentMotionVectors = Guid('ec770cf3-6908-4b4b-aa30-7fb986214fea')
CODECAPI_AVEncMPVSceneDetection = Guid('552799f1-db4c-405b-8a3a-c93f2d0674dc')
eAVEncMPVSceneDetection = Int32
eAVEncMPVSceneDetection_None = 0
eAVEncMPVSceneDetection_InsertIPicture = 1
eAVEncMPVSceneDetection_StartNewGOP = 2
eAVEncMPVSceneDetection_StartNewLocatableGOP = 3
CODECAPI_AVEncMPVGenerateHeaderSeqExt = Guid('d5e78611-082d-4e6b-98af-0f51ab139222')
CODECAPI_AVEncMPVGenerateHeaderSeqDispExt = Guid('6437aa6f-5a3c-4de9-8a16-53d9c4ad326f')
CODECAPI_AVEncMPVGenerateHeaderPicExt = Guid('1b8464ab-944f-45f0-b74e-3a58dad11f37')
CODECAPI_AVEncMPVGenerateHeaderPicDispExt = Guid('c6412f84-c03f-4f40-a00c-4293df8395bb')
CODECAPI_AVEncMPVGenerateHeaderSeqScaleExt = Guid('0722d62f-dd59-4a86-9cd5-644f8e2653d8')
CODECAPI_AVEncMPVScanPattern = Guid('7f8a478e-7bbb-4ae2-b2fc-96d17fc4a2d6')
eAVEncMPVScanPattern = Int32
eAVEncMPVScanPattern_Auto = 0
eAVEncMPVScanPattern_ZigZagScan = 1
eAVEncMPVScanPattern_AlternateScan = 2
CODECAPI_AVEncMPVIntraDCPrecision = Guid('a0116151-cbc8-4af3-97dc-d00cceb82d79')
CODECAPI_AVEncMPVQScaleType = Guid('2b79ebb7-f484-4af7-bb58-a2a188c5cbbe')
eAVEncMPVQScaleType = Int32
eAVEncMPVQScaleType_Auto = 0
eAVEncMPVQScaleType_Linear = 1
eAVEncMPVQScaleType_NonLinear = 2
CODECAPI_AVEncMPVIntraVLCTable = Guid('a2b83ff5-1a99-405a-af95-c5997d558d3a')
eAVEncMPVIntraVLCTable = Int32
eAVEncMPVIntraVLCTable_Auto = 0
eAVEncMPVIntraVLCTable_MPEG1 = 1
eAVEncMPVIntraVLCTable_Alternate = 2
CODECAPI_AVEncMPVQuantMatrixIntra = Guid('9bea04f3-6621-442c-8ba1-3ac378979698')
CODECAPI_AVEncMPVQuantMatrixNonIntra = Guid('87f441d8-0997-4beb-a08e-8573d409cf75')
CODECAPI_AVEncMPVQuantMatrixChromaIntra = Guid('9eb9ecd4-018d-4ffd-8f2d-39e49f07b17a')
CODECAPI_AVEncMPVQuantMatrixChromaNonIntra = Guid('1415b6b1-362a-4338-ba9a-1ef58703c05b')
CODECAPI_AVEncMPALayer = Guid('9d377230-f91b-453d-9ce0-78445414c22d')
eAVEncMPALayer = Int32
eAVEncMPALayer_1 = 1
eAVEncMPALayer_2 = 2
eAVEncMPALayer_3 = 3
CODECAPI_AVEncMPACodingMode = Guid('b16ade03-4b93-43d7-a550-90b4fe224537')
eAVEncMPACodingMode = Int32
eAVEncMPACodingMode_Mono = 0
eAVEncMPACodingMode_Stereo = 1
eAVEncMPACodingMode_DualChannel = 2
eAVEncMPACodingMode_JointStereo = 3
eAVEncMPACodingMode_Surround = 4
CODECAPI_AVEncMPACopyright = Guid('a6ae762a-d0a9-4454-b8ef-f2dbeefdd3bd')
CODECAPI_AVEncMPAOriginalBitstream = Guid('3cfb7855-9cc9-47ff-b829-b36786c92346')
CODECAPI_AVEncMPAEnableRedundancyProtection = Guid('5e54b09e-b2e7-4973-a89b-0b3650a3beda')
CODECAPI_AVEncMPAPrivateUserBit = Guid('afa505ce-c1e3-4e3d-851b-61b700e5e6cc')
CODECAPI_AVEncMPAEmphasisType = Guid('2d59fcda-bf4e-4ed6-b5df-5b03b36b0a1f')
eAVEncMPAEmphasisType = Int32
eAVEncMPAEmphasisType_None = 0
eAVEncMPAEmphasisType_50_15 = 1
eAVEncMPAEmphasisType_Reserved = 2
eAVEncMPAEmphasisType_CCITT_J17 = 3
CODECAPI_AVEncDDService = Guid('d2e1bec7-5172-4d2a-a50e-2f3b82b1ddf8')
eAVEncDDService = Int32
eAVEncDDService_CM = 0
eAVEncDDService_ME = 1
eAVEncDDService_VI = 2
eAVEncDDService_HI = 3
eAVEncDDService_D = 4
eAVEncDDService_C = 5
eAVEncDDService_E = 6
eAVEncDDService_VO = 7
CODECAPI_AVEncDDDialogNormalization = Guid('d7055acf-f125-437d-a704-79c79f0404a8')
CODECAPI_AVEncDDCentreDownMixLevel = Guid('e285072c-c958-4a81-afd2-e5e0daf1b148')
CODECAPI_AVEncDDSurroundDownMixLevel = Guid('7b20d6e5-0bcf-4273-a487-506b047997e9')
CODECAPI_AVEncDDProductionInfoExists = Guid('b0b7fe5f-b6ab-4f40-964d-8d91f17c19e8')
CODECAPI_AVEncDDProductionRoomType = Guid('dad7ad60-23d8-4ab7-a284-556986d8a6fe')
eAVEncDDProductionRoomType = Int32
eAVEncDDProductionRoomType_NotIndicated = 0
eAVEncDDProductionRoomType_Large = 1
eAVEncDDProductionRoomType_Small = 2
CODECAPI_AVEncDDProductionMixLevel = Guid('301d103a-cbf9-4776-8899-7c15b461ab26')
CODECAPI_AVEncDDCopyright = Guid('8694f076-cd75-481d-a5c6-a904dcc828f0')
CODECAPI_AVEncDDOriginalBitstream = Guid('966ae800-5bd3-4ff9-95b9-d30566273856')
CODECAPI_AVEncDDDigitalDeemphasis = Guid('e024a2c2-947c-45ac-87d8-f1030c5c0082')
CODECAPI_AVEncDDDCHighPassFilter = Guid('9565239f-861c-4ac8-bfda-e00cb4db8548')
CODECAPI_AVEncDDChannelBWLowPassFilter = Guid('e197821d-d2e7-43e2-ad2c-00582f518545')
CODECAPI_AVEncDDLFELowPassFilter = Guid('d3b80f6f-9d15-45e5-91be-019c3fab1f01')
CODECAPI_AVEncDDSurround90DegreeePhaseShift = Guid('25ecec9d-3553-42c0-bb56-d25792104f80')
CODECAPI_AVEncDDSurround3dBAttenuation = Guid('4d43b99d-31e2-48b9-bf2e-5cbf1a572784')
CODECAPI_AVEncDDDynamicRangeCompressionControl = Guid('cfc2ff6d-79b8-4b8d-a8aa-a0c9bd1c2940')
eAVEncDDDynamicRangeCompressionControl = Int32
eAVEncDDDynamicRangeCompressionControl_None = 0
eAVEncDDDynamicRangeCompressionControl_FilmStandard = 1
eAVEncDDDynamicRangeCompressionControl_FilmLight = 2
eAVEncDDDynamicRangeCompressionControl_MusicStandard = 3
eAVEncDDDynamicRangeCompressionControl_MusicLight = 4
eAVEncDDDynamicRangeCompressionControl_Speech = 5
CODECAPI_AVEncDDRFPreEmphasisFilter = Guid('21af44c0-244e-4f3d-a2cc-3d3068b2e73f')
CODECAPI_AVEncDDSurroundExMode = Guid('91607cee-dbdd-4eb6-bca2-aadfafa3dd68')
eAVEncDDSurroundExMode = Int32
eAVEncDDSurroundExMode_NotIndicated = 0
eAVEncDDSurroundExMode_No = 1
eAVEncDDSurroundExMode_Yes = 2
CODECAPI_AVEncDDPreferredStereoDownMixMode = Guid('7f4e6b31-9185-403d-b0a2-763743e6f063')
eAVEncDDPreferredStereoDownMixMode = Int32
eAVEncDDPreferredStereoDownMixMode_LtRt = 0
eAVEncDDPreferredStereoDownMixMode_LoRo = 1
CODECAPI_AVEncDDLtRtCenterMixLvl_x10 = Guid('dca128a2-491f-4600-b2da-76e3344b4197')
CODECAPI_AVEncDDLtRtSurroundMixLvl_x10 = Guid('212246c7-3d2c-4dfa-bc21-652a9098690d')
CODECAPI_AVEncDDLoRoCenterMixLvl_x10 = Guid('1cfba222-25b3-4bf4-9bfd-e7111267858c')
CODECAPI_AVEncDDLoRoSurroundMixLvl_x10 = Guid('e725cff6-eb56-40c7-8450-2b9367e91555')
CODECAPI_AVEncDDAtoDConverterType = Guid('719f9612-81a1-47e0-9a05-d94ad5fca948')
eAVEncDDAtoDConverterType = Int32
eAVEncDDAtoDConverterType_Standard = 0
eAVEncDDAtoDConverterType_HDCD = 1
CODECAPI_AVEncDDHeadphoneMode = Guid('4052dbec-52f5-42f5-9b00-d134b1341b9d')
eAVEncDDHeadphoneMode = Int32
eAVEncDDHeadphoneMode_NotIndicated = 0
eAVEncDDHeadphoneMode_NotEncoded = 1
eAVEncDDHeadphoneMode_Encoded = 2
CODECAPI_AVEncWMVKeyFrameDistance = Guid('5569055e-e268-4771-b83e-9555ea28aed3')
CODECAPI_AVEncWMVInterlacedEncoding = Guid('e3d00f8a-c6f5-4e14-a588-0ec87a726f9b')
CODECAPI_AVEncWMVDecoderComplexity = Guid('f32c0dab-f3cb-4217-b79f-8762768b5f67')
CODECAPI_AVEncWMVKeyFrameBufferLevelMarker = Guid('51ff1115-33ac-426c-a1b1-09321bdf96b4')
CODECAPI_AVEncWMVProduceDummyFrames = Guid('d669d001-183c-42e3-a3ca-2f4586d2396c')
CODECAPI_AVEncStatWMVCBAvg = Guid('6aa6229f-d602-4b9d-b68c-c1ad78884bef')
CODECAPI_AVEncStatWMVCBMax = Guid('e976bef8-00fe-44b4-b625-8f238bc03499')
CODECAPI_AVEncStatWMVDecoderComplexityProfile = Guid('89e69fc3-0f9b-436c-974a-df821227c90d')
CODECAPI_AVEncStatMPVSkippedEmptyFrames = Guid('32195fd3-590d-4812-a7ed-6d639a1f9711')
CODECAPI_AVEncMP12PktzSTDBuffer = Guid('0b751bd0-819e-478c-9435-75208926b377')
CODECAPI_AVEncMP12PktzStreamID = Guid('c834d038-f5e8-4408-9b60-88f36493fedf')
CODECAPI_AVEncMP12PktzInitialPTS = Guid('2a4f2065-9a63-4d20-ae22-0a1bc896a315')
CODECAPI_AVEncMP12PktzPacketSize = Guid('ab71347a-1332-4dde-a0e5-ccf7da8a0f22')
CODECAPI_AVEncMP12PktzCopyright = Guid('c8f4b0c1-094c-43c7-8e68-a595405a6ef8')
CODECAPI_AVEncMP12PktzOriginal = Guid('6b178416-31b9-4964-94cb-6bff866cdf83')
CODECAPI_AVEncMP12MuxPacketOverhead = Guid('e40bd720-3955-4453-acf9-b79132a38fa0')
CODECAPI_AVEncMP12MuxNumStreams = Guid('f7164a41-dced-4659-a8f2-fb693f2a4cd0')
CODECAPI_AVEncMP12MuxEarliestPTS = Guid('157232b6-f809-474e-9464-a7f93014a817')
CODECAPI_AVEncMP12MuxLargestPacketSize = Guid('35ceb711-f461-4b92-a4ef-17b6841ed254')
CODECAPI_AVEncMP12MuxInitialSCR = Guid('3433ad21-1b91-4a0b-b190-2b77063b63a4')
CODECAPI_AVEncMP12MuxMuxRate = Guid('ee047c72-4bdb-4a9d-8e21-41926c823da7')
CODECAPI_AVEncMP12MuxPackSize = Guid('f916053a-1ce8-4faf-aa0b-ba31c80034b8')
CODECAPI_AVEncMP12MuxSysSTDBufferBound = Guid('35746903-b545-43e7-bb35-c5e0a7d5093c')
CODECAPI_AVEncMP12MuxSysRateBound = Guid('05f0428a-ee30-489d-ae28-205c72446710')
CODECAPI_AVEncMP12MuxTargetPacketizer = Guid('d862212a-2015-45dd-9a32-1b3aa88205a0')
CODECAPI_AVEncMP12MuxSysFixed = Guid('cefb987e-894f-452e-8f89-a4ef8cec063a')
CODECAPI_AVEncMP12MuxSysCSPS = Guid('7952ff45-9c0d-4822-bc82-8ad772e02993')
CODECAPI_AVEncMP12MuxSysVideoLock = Guid('b8296408-2430-4d37-a2a1-95b3e435a91d')
CODECAPI_AVEncMP12MuxSysAudioLock = Guid('0fbb5752-1d43-47bf-bd79-f2293d8ce337')
CODECAPI_AVEncMP12MuxDVDNavPacks = Guid('c7607ced-8cf1-4a99-83a1-ee5461be3574')
CODECAPI_AVDecCommonInputFormat = Guid('e5005239-bd89-4be3-9c0f-5dde317988cc')
CODECAPI_AVDecCommonOutputFormat = Guid('3c790028-c0ce-4256-b1a2-1b0fc8b1dcdc')
CODECAPI_AVDecCommonMeanBitRate = Guid('59488217-007a-4f7a-8e41-5c48b1eac5c6')
CODECAPI_AVDecCommonMeanBitRateInterval = Guid('0ee437c6-38a7-4c5c-944c-68ab42116b85')
CODECAPI_GUID_AVDecAudioOutputFormat_PCM_Stereo_MatrixEncoded = Guid('696e1d30-548f-4036-825f-7026c60011bd')
CODECAPI_GUID_AVDecAudioOutputFormat_PCM = Guid('696e1d31-548f-4036-825f-7026c60011bd')
CODECAPI_GUID_AVDecAudioOutputFormat_SPDIF_PCM = Guid('696e1d32-548f-4036-825f-7026c60011bd')
CODECAPI_GUID_AVDecAudioOutputFormat_SPDIF_Bitstream = Guid('696e1d33-548f-4036-825f-7026c60011bd')
CODECAPI_GUID_AVDecAudioOutputFormat_PCM_Headphones = Guid('696e1d34-548f-4036-825f-7026c60011bd')
CODECAPI_GUID_AVDecAudioOutputFormat_PCM_Stereo_Auto = Guid('696e1d35-548f-4036-825f-7026c60011bd')
CODECAPI_AVDecVideoImageSize = Guid('5ee5747c-6801-4cab-aaf1-6248fa841ba4')
CODECAPI_AVDecVideoPixelAspectRatio = Guid('b0cf8245-f32d-41df-b02c-87bd304d12ab')
CODECAPI_AVDecVideoInputScanType = Guid('38477e1f-0ea7-42cd-8cd1-130ced57c580')
eAVDecVideoInputScanType = Int32
eAVDecVideoInputScan_Unknown = 0
eAVDecVideoInputScan_Progressive = 1
eAVDecVideoInputScan_Interlaced_UpperFieldFirst = 2
eAVDecVideoInputScan_Interlaced_LowerFieldFirst = 3
CODECAPI_AVDecVideoSWPowerLevel = Guid('fb5d2347-4dd8-4509-aed0-db5fa9aa93f4')
eAVDecVideoSWPowerLevel = Int32
eAVDecVideoSWPowerLevel_BatteryLife = 0
eAVDecVideoSWPowerLevel_Balanced = 50
eAVDecVideoSWPowerLevel_VideoQuality = 100
CODECAPI_GUID_AVDecAudioInputWMA = Guid('c95e8dcf-4058-4204-8c42-cb24d91e4b9b')
CODECAPI_GUID_AVDecAudioInputWMAPro = Guid('0128b7c7-da72-4fe3-bef8-5c52e3557704')
CODECAPI_GUID_AVDecAudioInputDolby = Guid('8e4228a0-f000-4e0b-8f54-ab8d24ad61a2')
CODECAPI_GUID_AVDecAudioInputDTS = Guid('600bc0ca-6a1f-4e91-b241-1bbeb1cb19e0')
CODECAPI_GUID_AVDecAudioInputPCM = Guid('f2421da5-bbb4-4cd5-a996-933c6b5d1347')
CODECAPI_GUID_AVDecAudioInputMPEG = Guid('91106f36-02c5-4f75-9719-3b7abf75e1f6')
CODECAPI_GUID_AVDecAudioInputAAC = Guid('97df7828-b94a-47e2-a4bc-51194db22a4d')
CODECAPI_GUID_AVDecAudioInputHEAAC = Guid('16efb4aa-330e-4f5c-98a8-cf6ac55cbe60')
CODECAPI_GUID_AVDecAudioInputDolbyDigitalPlus = Guid('0803e185-8f5d-47f5-9908-19a5bbc9fe34')
CODECAPI_AVDecAACDownmixMode = Guid('01274475-f6bb-4017-b084-81a763c942d4')
eAVDecAACDownmixMode = Int32
eAVDecAACDownmixMode_eAVDecAACUseISODownmix = 0
eAVDecAACDownmixMode_eAVDecAACUseARIBDownmix = 1
CODECAPI_AVDecHEAACDynamicRangeControl = Guid('287c8abe-69a4-4d39-8080-d3d9712178a0')
eAVDecHEAACDynamicRangeControl = Int32
eAVDecHEAACDynamicRangeControl_OFF = 0
eAVDecHEAACDynamicRangeControl_ON = 1
CODECAPI_AVDecAudioDualMono = Guid('4a52cda8-30f8-4216-be0f-ba0b2025921d')
eAVDecAudioDualMono = Int32
eAVDecAudioDualMono_IsNotDualMono = 0
eAVDecAudioDualMono_IsDualMono = 1
eAVDecAudioDualMono_UnSpecified = 2
CODECAPI_AVDecAudioDualMonoReproMode = Guid('a5106186-cc94-4bc9-8cd9-aa2f61f6807e')
eAVDecAudioDualMonoReproMode = Int32
eAVDecAudioDualMonoReproMode_STEREO = 0
eAVDecAudioDualMonoReproMode_LEFT_MONO = 1
eAVDecAudioDualMonoReproMode_RIGHT_MONO = 2
eAVDecAudioDualMonoReproMode_MIX_MONO = 3
CODECAPI_AVAudioChannelCount = Guid('1d3583c4-1583-474e-b71a-5ee463c198e4')
CODECAPI_AVAudioChannelConfig = Guid('17f89cb3-c38d-4368-9ede-63b94d177f9f')
eAVAudioChannelConfig = Int32
eAVAudioChannelConfig_FRONT_LEFT = 1
eAVAudioChannelConfig_FRONT_RIGHT = 2
eAVAudioChannelConfig_FRONT_CENTER = 4
eAVAudioChannelConfig_LOW_FREQUENCY = 8
eAVAudioChannelConfig_BACK_LEFT = 16
eAVAudioChannelConfig_BACK_RIGHT = 32
eAVAudioChannelConfig_FRONT_LEFT_OF_CENTER = 64
eAVAudioChannelConfig_FRONT_RIGHT_OF_CENTER = 128
eAVAudioChannelConfig_BACK_CENTER = 256
eAVAudioChannelConfig_SIDE_LEFT = 512
eAVAudioChannelConfig_SIDE_RIGHT = 1024
eAVAudioChannelConfig_TOP_CENTER = 2048
eAVAudioChannelConfig_TOP_FRONT_LEFT = 4096
eAVAudioChannelConfig_TOP_FRONT_CENTER = 8192
eAVAudioChannelConfig_TOP_FRONT_RIGHT = 16384
eAVAudioChannelConfig_TOP_BACK_LEFT = 32768
eAVAudioChannelConfig_TOP_BACK_CENTER = 65536
eAVAudioChannelConfig_TOP_BACK_RIGHT = 131072
CODECAPI_AVAudioSampleRate = Guid('971d2723-1acb-42e7-855c-520a4b70a5f2')
CODECAPI_AVDDSurroundMode = Guid('99f2f386-98d1-4452-a163-abc78a6eb770')
eAVDDSurroundMode = Int32
eAVDDSurroundMode_NotIndicated = 0
eAVDDSurroundMode_No = 1
eAVDDSurroundMode_Yes = 2
CODECAPI_AVDecDDOperationalMode = Guid('d6d6c6d1-064e-4fdd-a40e-3ecbfcb7ebd0')
eAVDecDDOperationalMode = Int32
eAVDecDDOperationalMode_NONE = 0
eAVDecDDOperationalMode_LINE = 1
eAVDecDDOperationalMode_RF = 2
eAVDecDDOperationalMode_CUSTOM0 = 3
eAVDecDDOperationalMode_CUSTOM1 = 4
eAVDecDDOperationalMode_PORTABLE8 = 5
eAVDecDDOperationalMode_PORTABLE11 = 6
eAVDecDDOperationalMode_PORTABLE14 = 7
CODECAPI_AVDecDDMatrixDecodingMode = Guid('ddc811a5-04ed-4bf3-a0ca-d00449f9355f')
eAVDecDDMatrixDecodingMode = Int32
eAVDecDDMatrixDecodingMode_OFF = 0
eAVDecDDMatrixDecodingMode_ON = 1
eAVDecDDMatrixDecodingMode_AUTO = 2
CODECAPI_AVDecDDDynamicRangeScaleHigh = Guid('50196c21-1f33-4af5-b296-11426d6c8789')
CODECAPI_AVDecDDDynamicRangeScaleLow = Guid('044e62e4-11a5-42d5-a3b2-3bb2c7c2d7cf')
CODECAPI_AVDecDDStereoDownMixMode = Guid('6ce4122c-3ee9-4182-b4ae-c10fc088649d')
eAVDecDDStereoDownMixMode = Int32
eAVDecDDStereoDownMixMode_Auto = 0
eAVDecDDStereoDownMixMode_LtRt = 1
eAVDecDDStereoDownMixMode_LoRo = 2
CODECAPI_AVDSPLoudnessEqualization = Guid('8afd1a15-1812-4cbf-9319-433a5b2a3b27')
eAVDSPLoudnessEqualization = Int32
eAVDSPLoudnessEqualization_OFF = 0
eAVDSPLoudnessEqualization_ON = 1
eAVDSPLoudnessEqualization_AUTO = 2
CODECAPI_AVDSPSpeakerFill = Guid('5612bca1-56da-4582-8da1-ca8090f92768')
eAVDSPSpeakerFill = Int32
eAVDSPSpeakerFill_OFF = 0
eAVDSPSpeakerFill_ON = 1
eAVDSPSpeakerFill_AUTO = 2
CODECAPI_AVPriorityControl = Guid('54ba3dc8-bdde-4329-b187-2018bc5c2ba1')
CODECAPI_AVRealtimeControl = Guid('6f440632-c4ad-4bf7-9e52-456942b454b0')
CODECAPI_AVEncNoInputCopy = Guid('d2b46a2a-e8ee-4ec5-869e-449b6c62c81a')
eAVEncChromaEncodeMode = Int32
eAVEncChromaEncodeMode_420 = 0
eAVEncChromaEncodeMode_444 = 1
eAVEncChromaEncodeMode_444_v2 = 2
CODECAPI_AVEncChromaEncodeMode = Guid('8a47ab5a-4798-4c93-b5a5-554f9a3b9f50')
CODECAPI_AVEncProgressiveUpdateTime = Guid('649faf66-afc6-4828-8fdc-0771cd9ab17d')
CODECAPI_AVEncChromaUpdateTime = Guid('4b4fd998-4274-40bb-8ee4-07553e7e2d3a')
DXVAHD_FRAME_FORMAT = Int32
DXVAHD_FRAME_FORMAT_PROGRESSIVE = 0
DXVAHD_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST = 1
DXVAHD_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST = 2
DXVAHD_DEVICE_USAGE = Int32
DXVAHD_DEVICE_USAGE_PLAYBACK_NORMAL = 0
DXVAHD_DEVICE_USAGE_OPTIMAL_SPEED = 1
DXVAHD_DEVICE_USAGE_OPTIMAL_QUALITY = 2
DXVAHD_SURFACE_TYPE = Int32
DXVAHD_SURFACE_TYPE_VIDEO_INPUT = 0
DXVAHD_SURFACE_TYPE_VIDEO_INPUT_PRIVATE = 1
DXVAHD_SURFACE_TYPE_VIDEO_OUTPUT = 2
DXVAHD_DEVICE_TYPE = Int32
DXVAHD_DEVICE_TYPE_HARDWARE = 0
DXVAHD_DEVICE_TYPE_SOFTWARE = 1
DXVAHD_DEVICE_TYPE_REFERENCE = 2
DXVAHD_DEVICE_TYPE_OTHER = 3
DXVAHD_DEVICE_CAPS = Int32
DXVAHD_DEVICE_CAPS_LINEAR_SPACE = 1
DXVAHD_DEVICE_CAPS_xvYCC = 2
DXVAHD_DEVICE_CAPS_RGB_RANGE_CONVERSION = 4
DXVAHD_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION = 8
DXVAHD_FEATURE_CAPS = Int32
DXVAHD_FEATURE_CAPS_ALPHA_FILL = 1
DXVAHD_FEATURE_CAPS_CONSTRICTION = 2
DXVAHD_FEATURE_CAPS_LUMA_KEY = 4
DXVAHD_FEATURE_CAPS_ALPHA_PALETTE = 8
DXVAHD_FILTER_CAPS = Int32
DXVAHD_FILTER_CAPS_BRIGHTNESS = 1
DXVAHD_FILTER_CAPS_CONTRAST = 2
DXVAHD_FILTER_CAPS_HUE = 4
DXVAHD_FILTER_CAPS_SATURATION = 8
DXVAHD_FILTER_CAPS_NOISE_REDUCTION = 16
DXVAHD_FILTER_CAPS_EDGE_ENHANCEMENT = 32
DXVAHD_FILTER_CAPS_ANAMORPHIC_SCALING = 64
DXVAHD_INPUT_FORMAT_CAPS = Int32
DXVAHD_INPUT_FORMAT_CAPS_RGB_INTERLACED = 1
DXVAHD_INPUT_FORMAT_CAPS_RGB_PROCAMP = 2
DXVAHD_INPUT_FORMAT_CAPS_RGB_LUMA_KEY = 4
DXVAHD_INPUT_FORMAT_CAPS_PALETTE_INTERLACED = 8
DXVAHD_PROCESSOR_CAPS = Int32
DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BLEND = 1
DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BOB = 2
DXVAHD_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE = 4
DXVAHD_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION = 8
DXVAHD_PROCESSOR_CAPS_INVERSE_TELECINE = 16
DXVAHD_PROCESSOR_CAPS_FRAME_RATE_CONVERSION = 32
DXVAHD_ITELECINE_CAPS = Int32
DXVAHD_ITELECINE_CAPS_32 = 1
DXVAHD_ITELECINE_CAPS_22 = 2
DXVAHD_ITELECINE_CAPS_2224 = 4
DXVAHD_ITELECINE_CAPS_2332 = 8
DXVAHD_ITELECINE_CAPS_32322 = 16
DXVAHD_ITELECINE_CAPS_55 = 32
DXVAHD_ITELECINE_CAPS_64 = 64
DXVAHD_ITELECINE_CAPS_87 = 128
DXVAHD_ITELECINE_CAPS_222222222223 = 256
DXVAHD_ITELECINE_CAPS_OTHER = -2147483648
DXVAHD_FILTER = Int32
DXVAHD_FILTER_BRIGHTNESS = 0
DXVAHD_FILTER_CONTRAST = 1
DXVAHD_FILTER_HUE = 2
DXVAHD_FILTER_SATURATION = 3
DXVAHD_FILTER_NOISE_REDUCTION = 4
DXVAHD_FILTER_EDGE_ENHANCEMENT = 5
DXVAHD_FILTER_ANAMORPHIC_SCALING = 6
DXVAHD_BLT_STATE = Int32
DXVAHD_BLT_STATE_TARGET_RECT = 0
DXVAHD_BLT_STATE_BACKGROUND_COLOR = 1
DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE = 2
DXVAHD_BLT_STATE_ALPHA_FILL = 3
DXVAHD_BLT_STATE_CONSTRICTION = 4
DXVAHD_BLT_STATE_PRIVATE = 1000
DXVAHD_ALPHA_FILL_MODE = Int32
DXVAHD_ALPHA_FILL_MODE_OPAQUE = 0
DXVAHD_ALPHA_FILL_MODE_BACKGROUND = 1
DXVAHD_ALPHA_FILL_MODE_DESTINATION = 2
DXVAHD_ALPHA_FILL_MODE_SOURCE_STREAM = 3
DXVAHD_STREAM_STATE = Int32
DXVAHD_STREAM_STATE_D3DFORMAT = 0
DXVAHD_STREAM_STATE_FRAME_FORMAT = 1
DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE = 2
DXVAHD_STREAM_STATE_OUTPUT_RATE = 3
DXVAHD_STREAM_STATE_SOURCE_RECT = 4
DXVAHD_STREAM_STATE_DESTINATION_RECT = 5
DXVAHD_STREAM_STATE_ALPHA = 6
DXVAHD_STREAM_STATE_PALETTE = 7
DXVAHD_STREAM_STATE_LUMA_KEY = 8
DXVAHD_STREAM_STATE_ASPECT_RATIO = 9
DXVAHD_STREAM_STATE_FILTER_BRIGHTNESS = 100
DXVAHD_STREAM_STATE_FILTER_CONTRAST = 101
DXVAHD_STREAM_STATE_FILTER_HUE = 102
DXVAHD_STREAM_STATE_FILTER_SATURATION = 103
DXVAHD_STREAM_STATE_FILTER_NOISE_REDUCTION = 104
DXVAHD_STREAM_STATE_FILTER_EDGE_ENHANCEMENT = 105
DXVAHD_STREAM_STATE_FILTER_ANAMORPHIC_SCALING = 106
DXVAHD_STREAM_STATE_PRIVATE = 1000
DXVAHD_OUTPUT_RATE = Int32
DXVAHD_OUTPUT_RATE_NORMAL = 0
DXVAHD_OUTPUT_RATE_HALF = 1
DXVAHD_OUTPUT_RATE_CUSTOM = 2
def _define_DXVAHD_RATIONAL_head():
    class DXVAHD_RATIONAL(Structure):
        pass
    return DXVAHD_RATIONAL
def _define_DXVAHD_RATIONAL():
    DXVAHD_RATIONAL = win32more.Media.MediaFoundation.DXVAHD_RATIONAL_head
    DXVAHD_RATIONAL._fields_ = [
        ("Numerator", UInt32),
        ("Denominator", UInt32),
    ]
    return DXVAHD_RATIONAL
def _define_DXVAHD_COLOR_RGBA_head():
    class DXVAHD_COLOR_RGBA(Structure):
        pass
    return DXVAHD_COLOR_RGBA
def _define_DXVAHD_COLOR_RGBA():
    DXVAHD_COLOR_RGBA = win32more.Media.MediaFoundation.DXVAHD_COLOR_RGBA_head
    DXVAHD_COLOR_RGBA._fields_ = [
        ("R", Single),
        ("G", Single),
        ("B", Single),
        ("A", Single),
    ]
    return DXVAHD_COLOR_RGBA
def _define_DXVAHD_COLOR_YCbCrA_head():
    class DXVAHD_COLOR_YCbCrA(Structure):
        pass
    return DXVAHD_COLOR_YCbCrA
def _define_DXVAHD_COLOR_YCbCrA():
    DXVAHD_COLOR_YCbCrA = win32more.Media.MediaFoundation.DXVAHD_COLOR_YCbCrA_head
    DXVAHD_COLOR_YCbCrA._fields_ = [
        ("Y", Single),
        ("Cb", Single),
        ("Cr", Single),
        ("A", Single),
    ]
    return DXVAHD_COLOR_YCbCrA
def _define_DXVAHD_COLOR_head():
    class DXVAHD_COLOR(Union):
        pass
    return DXVAHD_COLOR
def _define_DXVAHD_COLOR():
    DXVAHD_COLOR = win32more.Media.MediaFoundation.DXVAHD_COLOR_head
    DXVAHD_COLOR._fields_ = [
        ("RGB", win32more.Media.MediaFoundation.DXVAHD_COLOR_RGBA),
        ("YCbCr", win32more.Media.MediaFoundation.DXVAHD_COLOR_YCbCrA),
    ]
    return DXVAHD_COLOR
def _define_DXVAHD_CONTENT_DESC_head():
    class DXVAHD_CONTENT_DESC(Structure):
        pass
    return DXVAHD_CONTENT_DESC
def _define_DXVAHD_CONTENT_DESC():
    DXVAHD_CONTENT_DESC = win32more.Media.MediaFoundation.DXVAHD_CONTENT_DESC_head
    DXVAHD_CONTENT_DESC._fields_ = [
        ("InputFrameFormat", win32more.Media.MediaFoundation.DXVAHD_FRAME_FORMAT),
        ("InputFrameRate", win32more.Media.MediaFoundation.DXVAHD_RATIONAL),
        ("InputWidth", UInt32),
        ("InputHeight", UInt32),
        ("OutputFrameRate", win32more.Media.MediaFoundation.DXVAHD_RATIONAL),
        ("OutputWidth", UInt32),
        ("OutputHeight", UInt32),
    ]
    return DXVAHD_CONTENT_DESC
def _define_DXVAHD_VPDEVCAPS_head():
    class DXVAHD_VPDEVCAPS(Structure):
        pass
    return DXVAHD_VPDEVCAPS
def _define_DXVAHD_VPDEVCAPS():
    DXVAHD_VPDEVCAPS = win32more.Media.MediaFoundation.DXVAHD_VPDEVCAPS_head
    DXVAHD_VPDEVCAPS._fields_ = [
        ("DeviceType", win32more.Media.MediaFoundation.DXVAHD_DEVICE_TYPE),
        ("DeviceCaps", UInt32),
        ("FeatureCaps", UInt32),
        ("FilterCaps", UInt32),
        ("InputFormatCaps", UInt32),
        ("InputPool", win32more.Graphics.Direct3D9.D3DPOOL),
        ("OutputFormatCount", UInt32),
        ("InputFormatCount", UInt32),
        ("VideoProcessorCount", UInt32),
        ("MaxInputStreams", UInt32),
        ("MaxStreamStates", UInt32),
    ]
    return DXVAHD_VPDEVCAPS
def _define_DXVAHD_VPCAPS_head():
    class DXVAHD_VPCAPS(Structure):
        pass
    return DXVAHD_VPCAPS
def _define_DXVAHD_VPCAPS():
    DXVAHD_VPCAPS = win32more.Media.MediaFoundation.DXVAHD_VPCAPS_head
    DXVAHD_VPCAPS._fields_ = [
        ("VPGuid", Guid),
        ("PastFrames", UInt32),
        ("FutureFrames", UInt32),
        ("ProcessorCaps", UInt32),
        ("ITelecineCaps", UInt32),
        ("CustomRateCount", UInt32),
    ]
    return DXVAHD_VPCAPS
def _define_DXVAHD_CUSTOM_RATE_DATA_head():
    class DXVAHD_CUSTOM_RATE_DATA(Structure):
        pass
    return DXVAHD_CUSTOM_RATE_DATA
def _define_DXVAHD_CUSTOM_RATE_DATA():
    DXVAHD_CUSTOM_RATE_DATA = win32more.Media.MediaFoundation.DXVAHD_CUSTOM_RATE_DATA_head
    DXVAHD_CUSTOM_RATE_DATA._fields_ = [
        ("CustomRate", win32more.Media.MediaFoundation.DXVAHD_RATIONAL),
        ("OutputFrames", UInt32),
        ("InputInterlaced", win32more.Foundation.BOOL),
        ("InputFramesOrFields", UInt32),
    ]
    return DXVAHD_CUSTOM_RATE_DATA
def _define_DXVAHD_FILTER_RANGE_DATA_head():
    class DXVAHD_FILTER_RANGE_DATA(Structure):
        pass
    return DXVAHD_FILTER_RANGE_DATA
def _define_DXVAHD_FILTER_RANGE_DATA():
    DXVAHD_FILTER_RANGE_DATA = win32more.Media.MediaFoundation.DXVAHD_FILTER_RANGE_DATA_head
    DXVAHD_FILTER_RANGE_DATA._fields_ = [
        ("Minimum", Int32),
        ("Maximum", Int32),
        ("Default", Int32),
        ("Multiplier", Single),
    ]
    return DXVAHD_FILTER_RANGE_DATA
def _define_DXVAHD_BLT_STATE_TARGET_RECT_DATA_head():
    class DXVAHD_BLT_STATE_TARGET_RECT_DATA(Structure):
        pass
    return DXVAHD_BLT_STATE_TARGET_RECT_DATA
def _define_DXVAHD_BLT_STATE_TARGET_RECT_DATA():
    DXVAHD_BLT_STATE_TARGET_RECT_DATA = win32more.Media.MediaFoundation.DXVAHD_BLT_STATE_TARGET_RECT_DATA_head
    DXVAHD_BLT_STATE_TARGET_RECT_DATA._fields_ = [
        ("Enable", win32more.Foundation.BOOL),
        ("TargetRect", win32more.Foundation.RECT),
    ]
    return DXVAHD_BLT_STATE_TARGET_RECT_DATA
def _define_DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA_head():
    class DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA(Structure):
        pass
    return DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA
def _define_DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA():
    DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA = win32more.Media.MediaFoundation.DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA_head
    DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA._fields_ = [
        ("YCbCr", win32more.Foundation.BOOL),
        ("BackgroundColor", win32more.Media.MediaFoundation.DXVAHD_COLOR),
    ]
    return DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA
def _define_DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA_head():
    class DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA(Structure):
        pass
    return DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA
def _define_DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA():
    DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA = win32more.Media.MediaFoundation.DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA_head
    class DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA__Anonymous_e__Union(Union):
        pass
    class DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA__Anonymous_e__Union__Anonymous_e__Struct(Structure):
        pass
    DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA__Anonymous_e__Union__Anonymous_e__Struct._fields_ = [
        ("_bitfield", UInt32),
    ]
    DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA__Anonymous_e__Union._anonymous_ = [
        'Anonymous',
    ]
    DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA__Anonymous_e__Union._fields_ = [
        ("Anonymous", DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA__Anonymous_e__Union__Anonymous_e__Struct),
        ("Value", UInt32),
    ]
    DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA._anonymous_ = [
        'Anonymous',
    ]
    DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA._fields_ = [
        ("Anonymous", DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA__Anonymous_e__Union),
    ]
    return DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA
def _define_DXVAHD_BLT_STATE_ALPHA_FILL_DATA_head():
    class DXVAHD_BLT_STATE_ALPHA_FILL_DATA(Structure):
        pass
    return DXVAHD_BLT_STATE_ALPHA_FILL_DATA
def _define_DXVAHD_BLT_STATE_ALPHA_FILL_DATA():
    DXVAHD_BLT_STATE_ALPHA_FILL_DATA = win32more.Media.MediaFoundation.DXVAHD_BLT_STATE_ALPHA_FILL_DATA_head
    DXVAHD_BLT_STATE_ALPHA_FILL_DATA._fields_ = [
        ("Mode", win32more.Media.MediaFoundation.DXVAHD_ALPHA_FILL_MODE),
        ("StreamNumber", UInt32),
    ]
    return DXVAHD_BLT_STATE_ALPHA_FILL_DATA
def _define_DXVAHD_BLT_STATE_CONSTRICTION_DATA_head():
    class DXVAHD_BLT_STATE_CONSTRICTION_DATA(Structure):
        pass
    return DXVAHD_BLT_STATE_CONSTRICTION_DATA
def _define_DXVAHD_BLT_STATE_CONSTRICTION_DATA():
    DXVAHD_BLT_STATE_CONSTRICTION_DATA = win32more.Media.MediaFoundation.DXVAHD_BLT_STATE_CONSTRICTION_DATA_head
    DXVAHD_BLT_STATE_CONSTRICTION_DATA._fields_ = [
        ("Enable", win32more.Foundation.BOOL),
        ("Size", win32more.Foundation.SIZE),
    ]
    return DXVAHD_BLT_STATE_CONSTRICTION_DATA
def _define_DXVAHD_BLT_STATE_PRIVATE_DATA_head():
    class DXVAHD_BLT_STATE_PRIVATE_DATA(Structure):
        pass
    return DXVAHD_BLT_STATE_PRIVATE_DATA
def _define_DXVAHD_BLT_STATE_PRIVATE_DATA():
    DXVAHD_BLT_STATE_PRIVATE_DATA = win32more.Media.MediaFoundation.DXVAHD_BLT_STATE_PRIVATE_DATA_head
    DXVAHD_BLT_STATE_PRIVATE_DATA._fields_ = [
        ("Guid", Guid),
        ("DataSize", UInt32),
        ("pData", c_void_p),
    ]
    return DXVAHD_BLT_STATE_PRIVATE_DATA
def _define_DXVAHD_STREAM_STATE_D3DFORMAT_DATA_head():
    class DXVAHD_STREAM_STATE_D3DFORMAT_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_D3DFORMAT_DATA
def _define_DXVAHD_STREAM_STATE_D3DFORMAT_DATA():
    DXVAHD_STREAM_STATE_D3DFORMAT_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_D3DFORMAT_DATA_head
    DXVAHD_STREAM_STATE_D3DFORMAT_DATA._fields_ = [
        ("Format", win32more.Graphics.Direct3D9.D3DFORMAT),
    ]
    return DXVAHD_STREAM_STATE_D3DFORMAT_DATA
def _define_DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA_head():
    class DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA
def _define_DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA():
    DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA_head
    DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA._fields_ = [
        ("FrameFormat", win32more.Media.MediaFoundation.DXVAHD_FRAME_FORMAT),
    ]
    return DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA
def _define_DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA_head():
    class DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA
def _define_DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA():
    DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA_head
    class DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA__Anonymous_e__Union(Union):
        pass
    class DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA__Anonymous_e__Union__Anonymous_e__Struct(Structure):
        pass
    DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA__Anonymous_e__Union__Anonymous_e__Struct._fields_ = [
        ("_bitfield", UInt32),
    ]
    DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA__Anonymous_e__Union._anonymous_ = [
        'Anonymous',
    ]
    DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA__Anonymous_e__Union._fields_ = [
        ("Anonymous", DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA__Anonymous_e__Union__Anonymous_e__Struct),
        ("Value", UInt32),
    ]
    DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA._anonymous_ = [
        'Anonymous',
    ]
    DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA._fields_ = [
        ("Anonymous", DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA__Anonymous_e__Union),
    ]
    return DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA
def _define_DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA_head():
    class DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA
def _define_DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA():
    DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA_head
    DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA._fields_ = [
        ("RepeatFrame", win32more.Foundation.BOOL),
        ("OutputRate", win32more.Media.MediaFoundation.DXVAHD_OUTPUT_RATE),
        ("CustomRate", win32more.Media.MediaFoundation.DXVAHD_RATIONAL),
    ]
    return DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA
def _define_DXVAHD_STREAM_STATE_SOURCE_RECT_DATA_head():
    class DXVAHD_STREAM_STATE_SOURCE_RECT_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_SOURCE_RECT_DATA
def _define_DXVAHD_STREAM_STATE_SOURCE_RECT_DATA():
    DXVAHD_STREAM_STATE_SOURCE_RECT_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_SOURCE_RECT_DATA_head
    DXVAHD_STREAM_STATE_SOURCE_RECT_DATA._fields_ = [
        ("Enable", win32more.Foundation.BOOL),
        ("SourceRect", win32more.Foundation.RECT),
    ]
    return DXVAHD_STREAM_STATE_SOURCE_RECT_DATA
def _define_DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA_head():
    class DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA
def _define_DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA():
    DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA_head
    DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA._fields_ = [
        ("Enable", win32more.Foundation.BOOL),
        ("DestinationRect", win32more.Foundation.RECT),
    ]
    return DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA
def _define_DXVAHD_STREAM_STATE_ALPHA_DATA_head():
    class DXVAHD_STREAM_STATE_ALPHA_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_ALPHA_DATA
def _define_DXVAHD_STREAM_STATE_ALPHA_DATA():
    DXVAHD_STREAM_STATE_ALPHA_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_ALPHA_DATA_head
    DXVAHD_STREAM_STATE_ALPHA_DATA._fields_ = [
        ("Enable", win32more.Foundation.BOOL),
        ("Alpha", Single),
    ]
    return DXVAHD_STREAM_STATE_ALPHA_DATA
def _define_DXVAHD_STREAM_STATE_PALETTE_DATA_head():
    class DXVAHD_STREAM_STATE_PALETTE_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_PALETTE_DATA
def _define_DXVAHD_STREAM_STATE_PALETTE_DATA():
    DXVAHD_STREAM_STATE_PALETTE_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_PALETTE_DATA_head
    DXVAHD_STREAM_STATE_PALETTE_DATA._fields_ = [
        ("Count", UInt32),
        ("pEntries", POINTER(UInt32)),
    ]
    return DXVAHD_STREAM_STATE_PALETTE_DATA
def _define_DXVAHD_STREAM_STATE_LUMA_KEY_DATA_head():
    class DXVAHD_STREAM_STATE_LUMA_KEY_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_LUMA_KEY_DATA
def _define_DXVAHD_STREAM_STATE_LUMA_KEY_DATA():
    DXVAHD_STREAM_STATE_LUMA_KEY_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_LUMA_KEY_DATA_head
    DXVAHD_STREAM_STATE_LUMA_KEY_DATA._fields_ = [
        ("Enable", win32more.Foundation.BOOL),
        ("Lower", Single),
        ("Upper", Single),
    ]
    return DXVAHD_STREAM_STATE_LUMA_KEY_DATA
def _define_DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA_head():
    class DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA
def _define_DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA():
    DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA_head
    DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA._fields_ = [
        ("Enable", win32more.Foundation.BOOL),
        ("SourceAspectRatio", win32more.Media.MediaFoundation.DXVAHD_RATIONAL),
        ("DestinationAspectRatio", win32more.Media.MediaFoundation.DXVAHD_RATIONAL),
    ]
    return DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA
def _define_DXVAHD_STREAM_STATE_FILTER_DATA_head():
    class DXVAHD_STREAM_STATE_FILTER_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_FILTER_DATA
def _define_DXVAHD_STREAM_STATE_FILTER_DATA():
    DXVAHD_STREAM_STATE_FILTER_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_FILTER_DATA_head
    DXVAHD_STREAM_STATE_FILTER_DATA._fields_ = [
        ("Enable", win32more.Foundation.BOOL),
        ("Level", Int32),
    ]
    return DXVAHD_STREAM_STATE_FILTER_DATA
def _define_DXVAHD_STREAM_STATE_PRIVATE_DATA_head():
    class DXVAHD_STREAM_STATE_PRIVATE_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_PRIVATE_DATA
def _define_DXVAHD_STREAM_STATE_PRIVATE_DATA():
    DXVAHD_STREAM_STATE_PRIVATE_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_PRIVATE_DATA_head
    DXVAHD_STREAM_STATE_PRIVATE_DATA._fields_ = [
        ("Guid", Guid),
        ("DataSize", UInt32),
        ("pData", c_void_p),
    ]
    return DXVAHD_STREAM_STATE_PRIVATE_DATA
def _define_DXVAHD_STREAM_DATA_head():
    class DXVAHD_STREAM_DATA(Structure):
        pass
    return DXVAHD_STREAM_DATA
def _define_DXVAHD_STREAM_DATA():
    DXVAHD_STREAM_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_DATA_head
    DXVAHD_STREAM_DATA._fields_ = [
        ("Enable", win32more.Foundation.BOOL),
        ("OutputIndex", UInt32),
        ("InputFrameOrField", UInt32),
        ("PastFrames", UInt32),
        ("FutureFrames", UInt32),
        ("ppPastSurfaces", POINTER(win32more.Graphics.Direct3D9.IDirect3DSurface9_head)),
        ("pInputSurface", win32more.Graphics.Direct3D9.IDirect3DSurface9_head),
        ("ppFutureSurfaces", POINTER(win32more.Graphics.Direct3D9.IDirect3DSurface9_head)),
    ]
    return DXVAHD_STREAM_DATA
def _define_DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA_head():
    class DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA
def _define_DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA():
    DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA_head
    DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA._fields_ = [
        ("Enable", win32more.Foundation.BOOL),
        ("ITelecineFlags", UInt32),
        ("Frames", UInt32),
        ("InputField", UInt32),
    ]
    return DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA
def _define_IDXVAHD_Device_head():
    class IDXVAHD_Device(win32more.System.Com.IUnknown_head):
        Guid = Guid('95f12dfd-d77e-49be-815f-57d579634d6d')
    return IDXVAHD_Device
def _define_IDXVAHD_Device():
    IDXVAHD_Device = win32more.Media.MediaFoundation.IDXVAHD_Device_head
    IDXVAHD_Device.CreateVideoSurface = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,win32more.Graphics.Direct3D9.D3DFORMAT,win32more.Graphics.Direct3D9.D3DPOOL,UInt32,win32more.Media.MediaFoundation.DXVAHD_SURFACE_TYPE,UInt32,POINTER(win32more.Graphics.Direct3D9.IDirect3DSurface9_head),POINTER(win32more.Foundation.HANDLE), use_last_error=False)(3, 'CreateVideoSurface', ((1, 'Width'),(1, 'Height'),(1, 'Format'),(1, 'Pool'),(1, 'Usage'),(1, 'Type'),(1, 'NumSurfaces'),(1, 'ppSurfaces'),(1, 'pSharedHandle'),)))
    IDXVAHD_Device.GetVideoProcessorDeviceCaps = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.DXVAHD_VPDEVCAPS_head), use_last_error=False)(4, 'GetVideoProcessorDeviceCaps', ((1, 'pCaps'),)))
    IDXVAHD_Device.GetVideoProcessorOutputFormats = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Graphics.Direct3D9.D3DFORMAT), use_last_error=False)(5, 'GetVideoProcessorOutputFormats', ((1, 'Count'),(1, 'pFormats'),)))
    IDXVAHD_Device.GetVideoProcessorInputFormats = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Graphics.Direct3D9.D3DFORMAT), use_last_error=False)(6, 'GetVideoProcessorInputFormats', ((1, 'Count'),(1, 'pFormats'),)))
    IDXVAHD_Device.GetVideoProcessorCaps = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.DXVAHD_VPCAPS), use_last_error=False)(7, 'GetVideoProcessorCaps', ((1, 'Count'),(1, 'pCaps'),)))
    IDXVAHD_Device.GetVideoProcessorCustomRates = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),UInt32,POINTER(win32more.Media.MediaFoundation.DXVAHD_CUSTOM_RATE_DATA), use_last_error=False)(8, 'GetVideoProcessorCustomRates', ((1, 'pVPGuid'),(1, 'Count'),(1, 'pRates'),)))
    IDXVAHD_Device.GetVideoProcessorFilterRange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.DXVAHD_FILTER,POINTER(win32more.Media.MediaFoundation.DXVAHD_FILTER_RANGE_DATA_head), use_last_error=False)(9, 'GetVideoProcessorFilterRange', ((1, 'Filter'),(1, 'pRange'),)))
    IDXVAHD_Device.CreateVideoProcessor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.IDXVAHD_VideoProcessor_head), use_last_error=False)(10, 'CreateVideoProcessor', ((1, 'pVPGuid'),(1, 'ppVideoProcessor'),)))
    win32more.System.Com.IUnknown
    return IDXVAHD_Device
def _define_IDXVAHD_VideoProcessor_head():
    class IDXVAHD_VideoProcessor(win32more.System.Com.IUnknown_head):
        Guid = Guid('95f4edf4-6e03-4cd7-be1b-3075d665aa52')
    return IDXVAHD_VideoProcessor
def _define_IDXVAHD_VideoProcessor():
    IDXVAHD_VideoProcessor = win32more.Media.MediaFoundation.IDXVAHD_VideoProcessor_head
    IDXVAHD_VideoProcessor.SetVideoProcessBltState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.DXVAHD_BLT_STATE,UInt32,c_void_p, use_last_error=False)(3, 'SetVideoProcessBltState', ((1, 'State'),(1, 'DataSize'),(1, 'pData'),)))
    IDXVAHD_VideoProcessor.GetVideoProcessBltState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.DXVAHD_BLT_STATE,UInt32,c_void_p, use_last_error=False)(4, 'GetVideoProcessBltState', ((1, 'State'),(1, 'DataSize'),(1, 'pData'),)))
    IDXVAHD_VideoProcessor.SetVideoProcessStreamState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE,UInt32,c_void_p, use_last_error=False)(5, 'SetVideoProcessStreamState', ((1, 'StreamNumber'),(1, 'State'),(1, 'DataSize'),(1, 'pData'),)))
    IDXVAHD_VideoProcessor.GetVideoProcessStreamState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE,UInt32,c_void_p, use_last_error=False)(6, 'GetVideoProcessStreamState', ((1, 'StreamNumber'),(1, 'State'),(1, 'DataSize'),(1, 'pData'),)))
    IDXVAHD_VideoProcessor.VideoProcessBltHD = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.IDirect3DSurface9_head,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.DXVAHD_STREAM_DATA), use_last_error=False)(7, 'VideoProcessBltHD', ((1, 'pOutputSurface'),(1, 'OutputFrame'),(1, 'StreamCount'),(1, 'pStreams'),)))
    win32more.System.Com.IUnknown
    return IDXVAHD_VideoProcessor
def _define_PDXVAHDSW_CreateDevice():
    return CFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.IDirect3DDevice9Ex_head,POINTER(win32more.Foundation.HANDLE), use_last_error=False)
def _define_PDXVAHDSW_ProposeVideoPrivateFormat():
    return CFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,POINTER(win32more.Graphics.Direct3D9.D3DFORMAT), use_last_error=False)
def _define_PDXVAHDSW_GetVideoProcessorDeviceCaps():
    return CFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,POINTER(win32more.Media.MediaFoundation.DXVAHD_CONTENT_DESC_head),win32more.Media.MediaFoundation.DXVAHD_DEVICE_USAGE,POINTER(win32more.Media.MediaFoundation.DXVAHD_VPDEVCAPS_head), use_last_error=False)
def _define_PDXVAHDSW_GetVideoProcessorOutputFormats():
    return CFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,POINTER(win32more.Media.MediaFoundation.DXVAHD_CONTENT_DESC_head),win32more.Media.MediaFoundation.DXVAHD_DEVICE_USAGE,UInt32,POINTER(win32more.Graphics.Direct3D9.D3DFORMAT), use_last_error=False)
def _define_PDXVAHDSW_GetVideoProcessorInputFormats():
    return CFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,POINTER(win32more.Media.MediaFoundation.DXVAHD_CONTENT_DESC_head),win32more.Media.MediaFoundation.DXVAHD_DEVICE_USAGE,UInt32,POINTER(win32more.Graphics.Direct3D9.D3DFORMAT), use_last_error=False)
def _define_PDXVAHDSW_GetVideoProcessorCaps():
    return CFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,POINTER(win32more.Media.MediaFoundation.DXVAHD_CONTENT_DESC_head),win32more.Media.MediaFoundation.DXVAHD_DEVICE_USAGE,UInt32,POINTER(win32more.Media.MediaFoundation.DXVAHD_VPCAPS), use_last_error=False)
def _define_PDXVAHDSW_GetVideoProcessorCustomRates():
    return CFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,POINTER(Guid),UInt32,POINTER(win32more.Media.MediaFoundation.DXVAHD_CUSTOM_RATE_DATA), use_last_error=False)
def _define_PDXVAHDSW_GetVideoProcessorFilterRange():
    return CFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,win32more.Media.MediaFoundation.DXVAHD_FILTER,POINTER(win32more.Media.MediaFoundation.DXVAHD_FILTER_RANGE_DATA_head), use_last_error=False)
def _define_PDXVAHDSW_DestroyDevice():
    return CFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE, use_last_error=False)
def _define_PDXVAHDSW_CreateVideoProcessor():
    return CFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,POINTER(Guid),POINTER(win32more.Foundation.HANDLE), use_last_error=False)
def _define_PDXVAHDSW_SetVideoProcessBltState():
    return CFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,win32more.Media.MediaFoundation.DXVAHD_BLT_STATE,UInt32,c_void_p, use_last_error=False)
def _define_PDXVAHDSW_GetVideoProcessBltStatePrivate():
    return CFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,POINTER(win32more.Media.MediaFoundation.DXVAHD_BLT_STATE_PRIVATE_DATA_head), use_last_error=False)
def _define_PDXVAHDSW_SetVideoProcessStreamState():
    return CFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,UInt32,win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE,UInt32,c_void_p, use_last_error=False)
def _define_PDXVAHDSW_GetVideoProcessStreamStatePrivate():
    return CFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,UInt32,POINTER(win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_PRIVATE_DATA_head), use_last_error=False)
def _define_PDXVAHDSW_VideoProcessBltHD():
    return CFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,win32more.Graphics.Direct3D9.IDirect3DSurface9_head,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.DXVAHD_STREAM_DATA), use_last_error=False)
def _define_PDXVAHDSW_DestroyVideoProcessor():
    return CFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE, use_last_error=False)
def _define_DXVAHDSW_CALLBACKS_head():
    class DXVAHDSW_CALLBACKS(Structure):
        pass
    return DXVAHDSW_CALLBACKS
def _define_DXVAHDSW_CALLBACKS():
    DXVAHDSW_CALLBACKS = win32more.Media.MediaFoundation.DXVAHDSW_CALLBACKS_head
    DXVAHDSW_CALLBACKS._fields_ = [
        ("CreateDevice", win32more.Media.MediaFoundation.PDXVAHDSW_CreateDevice),
        ("ProposeVideoPrivateFormat", win32more.Media.MediaFoundation.PDXVAHDSW_ProposeVideoPrivateFormat),
        ("GetVideoProcessorDeviceCaps", win32more.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessorDeviceCaps),
        ("GetVideoProcessorOutputFormats", win32more.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessorOutputFormats),
        ("GetVideoProcessorInputFormats", win32more.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessorInputFormats),
        ("GetVideoProcessorCaps", win32more.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessorCaps),
        ("GetVideoProcessorCustomRates", win32more.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessorCustomRates),
        ("GetVideoProcessorFilterRange", win32more.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessorFilterRange),
        ("DestroyDevice", win32more.Media.MediaFoundation.PDXVAHDSW_DestroyDevice),
        ("CreateVideoProcessor", win32more.Media.MediaFoundation.PDXVAHDSW_CreateVideoProcessor),
        ("SetVideoProcessBltState", win32more.Media.MediaFoundation.PDXVAHDSW_SetVideoProcessBltState),
        ("GetVideoProcessBltStatePrivate", win32more.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessBltStatePrivate),
        ("SetVideoProcessStreamState", win32more.Media.MediaFoundation.PDXVAHDSW_SetVideoProcessStreamState),
        ("GetVideoProcessStreamStatePrivate", win32more.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessStreamStatePrivate),
        ("VideoProcessBltHD", win32more.Media.MediaFoundation.PDXVAHDSW_VideoProcessBltHD),
        ("DestroyVideoProcessor", win32more.Media.MediaFoundation.PDXVAHDSW_DestroyVideoProcessor),
    ]
    return DXVAHDSW_CALLBACKS
def _define_PDXVAHDSW_Plugin():
    return CFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_void_p, use_last_error=False)
def _define_DXVAHDETW_CREATEVIDEOPROCESSOR_head():
    class DXVAHDETW_CREATEVIDEOPROCESSOR(Structure):
        pass
    return DXVAHDETW_CREATEVIDEOPROCESSOR
def _define_DXVAHDETW_CREATEVIDEOPROCESSOR():
    DXVAHDETW_CREATEVIDEOPROCESSOR = win32more.Media.MediaFoundation.DXVAHDETW_CREATEVIDEOPROCESSOR_head
    DXVAHDETW_CREATEVIDEOPROCESSOR._fields_ = [
        ("pObject", UInt64),
        ("pD3D9Ex", UInt64),
        ("VPGuid", Guid),
    ]
    return DXVAHDETW_CREATEVIDEOPROCESSOR
def _define_DXVAHDETW_VIDEOPROCESSBLTSTATE_head():
    class DXVAHDETW_VIDEOPROCESSBLTSTATE(Structure):
        pass
    return DXVAHDETW_VIDEOPROCESSBLTSTATE
def _define_DXVAHDETW_VIDEOPROCESSBLTSTATE():
    DXVAHDETW_VIDEOPROCESSBLTSTATE = win32more.Media.MediaFoundation.DXVAHDETW_VIDEOPROCESSBLTSTATE_head
    DXVAHDETW_VIDEOPROCESSBLTSTATE._fields_ = [
        ("pObject", UInt64),
        ("State", win32more.Media.MediaFoundation.DXVAHD_BLT_STATE),
        ("DataSize", UInt32),
        ("SetState", win32more.Foundation.BOOL),
    ]
    return DXVAHDETW_VIDEOPROCESSBLTSTATE
def _define_DXVAHDETW_VIDEOPROCESSSTREAMSTATE_head():
    class DXVAHDETW_VIDEOPROCESSSTREAMSTATE(Structure):
        pass
    return DXVAHDETW_VIDEOPROCESSSTREAMSTATE
def _define_DXVAHDETW_VIDEOPROCESSSTREAMSTATE():
    DXVAHDETW_VIDEOPROCESSSTREAMSTATE = win32more.Media.MediaFoundation.DXVAHDETW_VIDEOPROCESSSTREAMSTATE_head
    DXVAHDETW_VIDEOPROCESSSTREAMSTATE._fields_ = [
        ("pObject", UInt64),
        ("StreamNumber", UInt32),
        ("State", win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE),
        ("DataSize", UInt32),
        ("SetState", win32more.Foundation.BOOL),
    ]
    return DXVAHDETW_VIDEOPROCESSSTREAMSTATE
def _define_DXVAHDETW_VIDEOPROCESSBLTHD_head():
    class DXVAHDETW_VIDEOPROCESSBLTHD(Structure):
        pass
    return DXVAHDETW_VIDEOPROCESSBLTHD
def _define_DXVAHDETW_VIDEOPROCESSBLTHD():
    DXVAHDETW_VIDEOPROCESSBLTHD = win32more.Media.MediaFoundation.DXVAHDETW_VIDEOPROCESSBLTHD_head
    DXVAHDETW_VIDEOPROCESSBLTHD._fields_ = [
        ("pObject", UInt64),
        ("pOutputSurface", UInt64),
        ("TargetRect", win32more.Foundation.RECT),
        ("OutputFormat", win32more.Graphics.Direct3D9.D3DFORMAT),
        ("ColorSpace", UInt32),
        ("OutputFrame", UInt32),
        ("StreamCount", UInt32),
        ("Enter", win32more.Foundation.BOOL),
    ]
    return DXVAHDETW_VIDEOPROCESSBLTHD
def _define_DXVAHDETW_VIDEOPROCESSBLTHD_STREAM_head():
    class DXVAHDETW_VIDEOPROCESSBLTHD_STREAM(Structure):
        pass
    return DXVAHDETW_VIDEOPROCESSBLTHD_STREAM
def _define_DXVAHDETW_VIDEOPROCESSBLTHD_STREAM():
    DXVAHDETW_VIDEOPROCESSBLTHD_STREAM = win32more.Media.MediaFoundation.DXVAHDETW_VIDEOPROCESSBLTHD_STREAM_head
    DXVAHDETW_VIDEOPROCESSBLTHD_STREAM._fields_ = [
        ("pObject", UInt64),
        ("pInputSurface", UInt64),
        ("SourceRect", win32more.Foundation.RECT),
        ("DestinationRect", win32more.Foundation.RECT),
        ("InputFormat", win32more.Graphics.Direct3D9.D3DFORMAT),
        ("FrameFormat", win32more.Media.MediaFoundation.DXVAHD_FRAME_FORMAT),
        ("ColorSpace", UInt32),
        ("StreamNumber", UInt32),
        ("OutputIndex", UInt32),
        ("InputFrameOrField", UInt32),
        ("PastFrames", UInt32),
        ("FutureFrames", UInt32),
    ]
    return DXVAHDETW_VIDEOPROCESSBLTHD_STREAM
def _define_DXVAHDETW_DESTROYVIDEOPROCESSOR_head():
    class DXVAHDETW_DESTROYVIDEOPROCESSOR(Structure):
        pass
    return DXVAHDETW_DESTROYVIDEOPROCESSOR
def _define_DXVAHDETW_DESTROYVIDEOPROCESSOR():
    DXVAHDETW_DESTROYVIDEOPROCESSOR = win32more.Media.MediaFoundation.DXVAHDETW_DESTROYVIDEOPROCESSOR_head
    DXVAHDETW_DESTROYVIDEOPROCESSOR._fields_ = [
        ("pObject", UInt64),
    ]
    return DXVAHDETW_DESTROYVIDEOPROCESSOR
def _define_PDXVAHD_CreateDevice():
    return CFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.IDirect3DDevice9Ex_head,POINTER(win32more.Media.MediaFoundation.DXVAHD_CONTENT_DESC_head),win32more.Media.MediaFoundation.DXVAHD_DEVICE_USAGE,win32more.Media.MediaFoundation.PDXVAHDSW_Plugin,POINTER(win32more.Media.MediaFoundation.IDXVAHD_Device_head), use_last_error=False)
def _define_DXVA2_ExtendedFormat_head():
    class DXVA2_ExtendedFormat(Structure):
        pass
    return DXVA2_ExtendedFormat
def _define_DXVA2_ExtendedFormat():
    DXVA2_ExtendedFormat = win32more.Media.MediaFoundation.DXVA2_ExtendedFormat_head
    class DXVA2_ExtendedFormat__Anonymous_e__Union(Union):
        pass
    class DXVA2_ExtendedFormat__Anonymous_e__Union__Anonymous_e__Struct(Structure):
        pass
    DXVA2_ExtendedFormat__Anonymous_e__Union__Anonymous_e__Struct._fields_ = [
        ("_bitfield", UInt32),
    ]
    DXVA2_ExtendedFormat__Anonymous_e__Union._anonymous_ = [
        'Anonymous',
    ]
    DXVA2_ExtendedFormat__Anonymous_e__Union._fields_ = [
        ("Anonymous", DXVA2_ExtendedFormat__Anonymous_e__Union__Anonymous_e__Struct),
        ("value", UInt32),
    ]
    DXVA2_ExtendedFormat._anonymous_ = [
        'Anonymous',
    ]
    DXVA2_ExtendedFormat._fields_ = [
        ("Anonymous", DXVA2_ExtendedFormat__Anonymous_e__Union),
    ]
    return DXVA2_ExtendedFormat
DXVA2_SampleFormat = Int32
DXVA2_SampleFormatMask = 255
DXVA2_SampleUnknown = 0
DXVA2_SampleProgressiveFrame = 2
DXVA2_SampleFieldInterleavedEvenFirst = 3
DXVA2_SampleFieldInterleavedOddFirst = 4
DXVA2_SampleFieldSingleEven = 5
DXVA2_SampleFieldSingleOdd = 6
DXVA2_SampleSubStream = 7
DXVA2_VideoChromaSubSampling = Int32
DXVA2_VideoChromaSubsamplingMask = 15
DXVA2_VideoChromaSubsampling_Unknown = 0
DXVA2_VideoChromaSubsampling_ProgressiveChroma = 8
DXVA2_VideoChromaSubsampling_Horizontally_Cosited = 4
DXVA2_VideoChromaSubsampling_Vertically_Cosited = 2
DXVA2_VideoChromaSubsampling_Vertically_AlignedChromaPlanes = 1
DXVA2_VideoChromaSubsampling_MPEG2 = 5
DXVA2_VideoChromaSubsampling_MPEG1 = 1
DXVA2_VideoChromaSubsampling_DV_PAL = 6
DXVA2_VideoChromaSubsampling_Cosited = 7
DXVA2_NominalRange = Int32
DXVA2_NominalRangeMask = 7
DXVA2_NominalRange_Unknown = 0
DXVA2_NominalRange_Normal = 1
DXVA2_NominalRange_Wide = 2
DXVA2_NominalRange_0_255 = 1
DXVA2_NominalRange_16_235 = 2
DXVA2_NominalRange_48_208 = 3
DXVA2_VideoTransferMatrix = Int32
DXVA2_VideoTransferMatrixMask = 7
DXVA2_VideoTransferMatrix_Unknown = 0
DXVA2_VideoTransferMatrix_BT709 = 1
DXVA2_VideoTransferMatrix_BT601 = 2
DXVA2_VideoTransferMatrix_SMPTE240M = 3
DXVA2_VideoLighting = Int32
DXVA2_VideoLightingMask = 15
DXVA2_VideoLighting_Unknown = 0
DXVA2_VideoLighting_bright = 1
DXVA2_VideoLighting_office = 2
DXVA2_VideoLighting_dim = 3
DXVA2_VideoLighting_dark = 4
DXVA2_VideoPrimaries = Int32
DXVA2_VideoPrimariesMask = 31
DXVA2_VideoPrimaries_Unknown = 0
DXVA2_VideoPrimaries_reserved = 1
DXVA2_VideoPrimaries_BT709 = 2
DXVA2_VideoPrimaries_BT470_2_SysM = 3
DXVA2_VideoPrimaries_BT470_2_SysBG = 4
DXVA2_VideoPrimaries_SMPTE170M = 5
DXVA2_VideoPrimaries_SMPTE240M = 6
DXVA2_VideoPrimaries_EBU3213 = 7
DXVA2_VideoPrimaries_SMPTE_C = 8
DXVA2_VideoTransferFunction = Int32
DXVA2_VideoTransFuncMask = 31
DXVA2_VideoTransFunc_Unknown = 0
DXVA2_VideoTransFunc_10 = 1
DXVA2_VideoTransFunc_18 = 2
DXVA2_VideoTransFunc_20 = 3
DXVA2_VideoTransFunc_22 = 4
DXVA2_VideoTransFunc_709 = 5
DXVA2_VideoTransFunc_240M = 6
DXVA2_VideoTransFunc_sRGB = 7
DXVA2_VideoTransFunc_28 = 8
def _define_DXVA2_Frequency_head():
    class DXVA2_Frequency(Structure):
        pass
    return DXVA2_Frequency
def _define_DXVA2_Frequency():
    DXVA2_Frequency = win32more.Media.MediaFoundation.DXVA2_Frequency_head
    DXVA2_Frequency._fields_ = [
        ("Numerator", UInt32),
        ("Denominator", UInt32),
    ]
    return DXVA2_Frequency
def _define_DXVA2_VideoDesc_head():
    class DXVA2_VideoDesc(Structure):
        pass
    return DXVA2_VideoDesc
def _define_DXVA2_VideoDesc():
    DXVA2_VideoDesc = win32more.Media.MediaFoundation.DXVA2_VideoDesc_head
    DXVA2_VideoDesc._fields_ = [
        ("SampleWidth", UInt32),
        ("SampleHeight", UInt32),
        ("SampleFormat", win32more.Media.MediaFoundation.DXVA2_ExtendedFormat),
        ("Format", win32more.Graphics.Direct3D9.D3DFORMAT),
        ("InputSampleFreq", win32more.Media.MediaFoundation.DXVA2_Frequency),
        ("OutputFrameFreq", win32more.Media.MediaFoundation.DXVA2_Frequency),
        ("UABProtectionLevel", UInt32),
        ("Reserved", UInt32),
    ]
    return DXVA2_VideoDesc
DXVA2_DeinterlaceTech = Int32
DXVA2_DeinterlaceTech_Unknown = 0
DXVA2_DeinterlaceTech_BOBLineReplicate = 1
DXVA2_DeinterlaceTech_BOBVerticalStretch = 2
DXVA2_DeinterlaceTech_BOBVerticalStretch4Tap = 4
DXVA2_DeinterlaceTech_MedianFiltering = 8
DXVA2_DeinterlaceTech_EdgeFiltering = 16
DXVA2_DeinterlaceTech_FieldAdaptive = 32
DXVA2_DeinterlaceTech_PixelAdaptive = 64
DXVA2_DeinterlaceTech_MotionVectorSteered = 128
DXVA2_DeinterlaceTech_InverseTelecine = 256
DXVA2_DeinterlaceTech_Mask = 511
DXVA2_FilterType = Int32
DXVA2_NoiseFilterLumaLevel = 1
DXVA2_NoiseFilterLumaThreshold = 2
DXVA2_NoiseFilterLumaRadius = 3
DXVA2_NoiseFilterChromaLevel = 4
DXVA2_NoiseFilterChromaThreshold = 5
DXVA2_NoiseFilterChromaRadius = 6
DXVA2_DetailFilterLumaLevel = 7
DXVA2_DetailFilterLumaThreshold = 8
DXVA2_DetailFilterLumaRadius = 9
DXVA2_DetailFilterChromaLevel = 10
DXVA2_DetailFilterChromaThreshold = 11
DXVA2_DetailFilterChromaRadius = 12
DXVA2_NoiseFilterTech = Int32
DXVA2_NoiseFilterTech_Unsupported = 0
DXVA2_NoiseFilterTech_Unknown = 1
DXVA2_NoiseFilterTech_Median = 2
DXVA2_NoiseFilterTech_Temporal = 4
DXVA2_NoiseFilterTech_BlockNoise = 8
DXVA2_NoiseFilterTech_MosquitoNoise = 16
DXVA2_NoiseFilterTech_Mask = 31
DXVA2_DetailFilterTech = Int32
DXVA2_DetailFilterTech_Unsupported = 0
DXVA2_DetailFilterTech_Unknown = 1
DXVA2_DetailFilterTech_Edge = 2
DXVA2_DetailFilterTech_Sharpening = 4
DXVA2_DetailFilterTech_Mask = 7
DXVA2_ProcAmp = Int32
DXVA2_ProcAmp_None = 0
DXVA2_ProcAmp_Brightness = 1
DXVA2_ProcAmp_Contrast = 2
DXVA2_ProcAmp_Hue = 4
DXVA2_ProcAmp_Saturation = 8
DXVA2_ProcAmp_Mask = 15
DXVA2_VideoProcess = Int32
DXVA2_VideoProcess_None = 0
DXVA2_VideoProcess_YUV2RGB = 1
DXVA2_VideoProcess_StretchX = 2
DXVA2_VideoProcess_StretchY = 4
DXVA2_VideoProcess_AlphaBlend = 8
DXVA2_VideoProcess_SubRects = 16
DXVA2_VideoProcess_SubStreams = 32
DXVA2_VideoProcess_SubStreamsExtended = 64
DXVA2_VideoProcess_YUV2RGBExtended = 128
DXVA2_VideoProcess_AlphaBlendExtended = 256
DXVA2_VideoProcess_Constriction = 512
DXVA2_VideoProcess_NoiseFilter = 1024
DXVA2_VideoProcess_DetailFilter = 2048
DXVA2_VideoProcess_PlanarAlpha = 4096
DXVA2_VideoProcess_LinearScaling = 8192
DXVA2_VideoProcess_GammaCompensated = 16384
DXVA2_VideoProcess_MaintainsOriginalFieldData = 32768
DXVA2_VideoProcess_Mask = 65535
DXVA2_VPDev = Int32
DXVA2_VPDev_HardwareDevice = 1
DXVA2_VPDev_EmulatedDXVA1 = 2
DXVA2_VPDev_SoftwareDevice = 4
DXVA2_VPDev_Mask = 7
DXVA2_SampleData = Int32
DXVA2_SampleData_RFF = 1
DXVA2_SampleData_TFF = 2
DXVA2_SampleData_RFF_TFF_Present = 4
DXVA2_SampleData_Mask = 65535
DXVA2_DestData = Int32
DXVA2_DestData_RFF = 1
DXVA2_DestData_TFF = 2
DXVA2_DestData_RFF_TFF_Present = 4
DXVA2_DestData_Mask = 65535
def _define_DXVA2_VideoProcessorCaps_head():
    class DXVA2_VideoProcessorCaps(Structure):
        pass
    return DXVA2_VideoProcessorCaps
def _define_DXVA2_VideoProcessorCaps():
    DXVA2_VideoProcessorCaps = win32more.Media.MediaFoundation.DXVA2_VideoProcessorCaps_head
    DXVA2_VideoProcessorCaps._fields_ = [
        ("DeviceCaps", UInt32),
        ("InputPool", win32more.Graphics.Direct3D9.D3DPOOL),
        ("NumForwardRefSamples", UInt32),
        ("NumBackwardRefSamples", UInt32),
        ("Reserved", UInt32),
        ("DeinterlaceTechnology", UInt32),
        ("ProcAmpControlCaps", UInt32),
        ("VideoProcessorOperations", UInt32),
        ("NoiseFilterTechnology", UInt32),
        ("DetailFilterTechnology", UInt32),
    ]
    return DXVA2_VideoProcessorCaps
def _define_DXVA2_Fixed32_head():
    class DXVA2_Fixed32(Structure):
        pass
    return DXVA2_Fixed32
def _define_DXVA2_Fixed32():
    DXVA2_Fixed32 = win32more.Media.MediaFoundation.DXVA2_Fixed32_head
    class DXVA2_Fixed32__Anonymous_e__Union(Union):
        pass
    class DXVA2_Fixed32__Anonymous_e__Union__Anonymous_e__Struct(Structure):
        pass
    DXVA2_Fixed32__Anonymous_e__Union__Anonymous_e__Struct._fields_ = [
        ("Fraction", UInt16),
        ("Value", Int16),
    ]
    DXVA2_Fixed32__Anonymous_e__Union._anonymous_ = [
        'Anonymous',
    ]
    DXVA2_Fixed32__Anonymous_e__Union._fields_ = [
        ("Anonymous", DXVA2_Fixed32__Anonymous_e__Union__Anonymous_e__Struct),
        ("ll", Int32),
    ]
    DXVA2_Fixed32._anonymous_ = [
        'Anonymous',
    ]
    DXVA2_Fixed32._fields_ = [
        ("Anonymous", DXVA2_Fixed32__Anonymous_e__Union),
    ]
    return DXVA2_Fixed32
def _define_DXVA2_AYUVSample8_head():
    class DXVA2_AYUVSample8(Structure):
        pass
    return DXVA2_AYUVSample8
def _define_DXVA2_AYUVSample8():
    DXVA2_AYUVSample8 = win32more.Media.MediaFoundation.DXVA2_AYUVSample8_head
    DXVA2_AYUVSample8._fields_ = [
        ("Cr", Byte),
        ("Cb", Byte),
        ("Y", Byte),
        ("Alpha", Byte),
    ]
    return DXVA2_AYUVSample8
def _define_DXVA2_AYUVSample16_head():
    class DXVA2_AYUVSample16(Structure):
        pass
    return DXVA2_AYUVSample16
def _define_DXVA2_AYUVSample16():
    DXVA2_AYUVSample16 = win32more.Media.MediaFoundation.DXVA2_AYUVSample16_head
    DXVA2_AYUVSample16._fields_ = [
        ("Cr", UInt16),
        ("Cb", UInt16),
        ("Y", UInt16),
        ("Alpha", UInt16),
    ]
    return DXVA2_AYUVSample16
def _define_DXVA2_VideoSample_head():
    class DXVA2_VideoSample(Structure):
        pass
    return DXVA2_VideoSample
def _define_DXVA2_VideoSample():
    DXVA2_VideoSample = win32more.Media.MediaFoundation.DXVA2_VideoSample_head
    DXVA2_VideoSample._fields_ = [
        ("Start", Int64),
        ("End", Int64),
        ("SampleFormat", win32more.Media.MediaFoundation.DXVA2_ExtendedFormat),
        ("SrcSurface", win32more.Graphics.Direct3D9.IDirect3DSurface9_head),
        ("SrcRect", win32more.Foundation.RECT),
        ("DstRect", win32more.Foundation.RECT),
        ("Pal", win32more.Media.MediaFoundation.DXVA2_AYUVSample8 * 16),
        ("PlanarAlpha", win32more.Media.MediaFoundation.DXVA2_Fixed32),
        ("SampleData", UInt32),
    ]
    return DXVA2_VideoSample
def _define_DXVA2_ValueRange_head():
    class DXVA2_ValueRange(Structure):
        pass
    return DXVA2_ValueRange
def _define_DXVA2_ValueRange():
    DXVA2_ValueRange = win32more.Media.MediaFoundation.DXVA2_ValueRange_head
    DXVA2_ValueRange._fields_ = [
        ("MinValue", win32more.Media.MediaFoundation.DXVA2_Fixed32),
        ("MaxValue", win32more.Media.MediaFoundation.DXVA2_Fixed32),
        ("DefaultValue", win32more.Media.MediaFoundation.DXVA2_Fixed32),
        ("StepSize", win32more.Media.MediaFoundation.DXVA2_Fixed32),
    ]
    return DXVA2_ValueRange
def _define_DXVA2_ProcAmpValues_head():
    class DXVA2_ProcAmpValues(Structure):
        pass
    return DXVA2_ProcAmpValues
def _define_DXVA2_ProcAmpValues():
    DXVA2_ProcAmpValues = win32more.Media.MediaFoundation.DXVA2_ProcAmpValues_head
    DXVA2_ProcAmpValues._fields_ = [
        ("Brightness", win32more.Media.MediaFoundation.DXVA2_Fixed32),
        ("Contrast", win32more.Media.MediaFoundation.DXVA2_Fixed32),
        ("Hue", win32more.Media.MediaFoundation.DXVA2_Fixed32),
        ("Saturation", win32more.Media.MediaFoundation.DXVA2_Fixed32),
    ]
    return DXVA2_ProcAmpValues
def _define_DXVA2_FilterValues_head():
    class DXVA2_FilterValues(Structure):
        pass
    return DXVA2_FilterValues
def _define_DXVA2_FilterValues():
    DXVA2_FilterValues = win32more.Media.MediaFoundation.DXVA2_FilterValues_head
    DXVA2_FilterValues._fields_ = [
        ("Level", win32more.Media.MediaFoundation.DXVA2_Fixed32),
        ("Threshold", win32more.Media.MediaFoundation.DXVA2_Fixed32),
        ("Radius", win32more.Media.MediaFoundation.DXVA2_Fixed32),
    ]
    return DXVA2_FilterValues
def _define_DXVA2_VideoProcessBltParams_head():
    class DXVA2_VideoProcessBltParams(Structure):
        pass
    return DXVA2_VideoProcessBltParams
def _define_DXVA2_VideoProcessBltParams():
    DXVA2_VideoProcessBltParams = win32more.Media.MediaFoundation.DXVA2_VideoProcessBltParams_head
    DXVA2_VideoProcessBltParams._fields_ = [
        ("TargetFrame", Int64),
        ("TargetRect", win32more.Foundation.RECT),
        ("ConstrictionSize", win32more.Foundation.SIZE),
        ("StreamingFlags", UInt32),
        ("BackgroundColor", win32more.Media.MediaFoundation.DXVA2_AYUVSample16),
        ("DestFormat", win32more.Media.MediaFoundation.DXVA2_ExtendedFormat),
        ("ProcAmpValues", win32more.Media.MediaFoundation.DXVA2_ProcAmpValues),
        ("Alpha", win32more.Media.MediaFoundation.DXVA2_Fixed32),
        ("NoiseFilterLuma", win32more.Media.MediaFoundation.DXVA2_FilterValues),
        ("NoiseFilterChroma", win32more.Media.MediaFoundation.DXVA2_FilterValues),
        ("DetailFilterLuma", win32more.Media.MediaFoundation.DXVA2_FilterValues),
        ("DetailFilterChroma", win32more.Media.MediaFoundation.DXVA2_FilterValues),
        ("DestData", UInt32),
    ]
    return DXVA2_VideoProcessBltParams
DXVA2_BufferfType = Int32
DXVA2_PictureParametersBufferType = 0
DXVA2_MacroBlockControlBufferType = 1
DXVA2_ResidualDifferenceBufferType = 2
DXVA2_DeblockingControlBufferType = 3
DXVA2_InverseQuantizationMatrixBufferType = 4
DXVA2_SliceControlBufferType = 5
DXVA2_BitStreamDateBufferType = 6
DXVA2_MotionVectorBuffer = 7
DXVA2_FilmGrainBuffer = 8
DXVA2_VideoRenderTargetType = Int32
DXVA2_VideoDecoderRenderTarget = 0
DXVA2_VideoProcessorRenderTarget = 1
DXVA2_VideoSoftwareRenderTarget = 2
def _define_DXVA2_ConfigPictureDecode_head():
    class DXVA2_ConfigPictureDecode(Structure):
        pass
    return DXVA2_ConfigPictureDecode
def _define_DXVA2_ConfigPictureDecode():
    DXVA2_ConfigPictureDecode = win32more.Media.MediaFoundation.DXVA2_ConfigPictureDecode_head
    DXVA2_ConfigPictureDecode._fields_ = [
        ("guidConfigBitstreamEncryption", Guid),
        ("guidConfigMBcontrolEncryption", Guid),
        ("guidConfigResidDiffEncryption", Guid),
        ("ConfigBitstreamRaw", UInt32),
        ("ConfigMBcontrolRasterOrder", UInt32),
        ("ConfigResidDiffHost", UInt32),
        ("ConfigSpatialResid8", UInt32),
        ("ConfigResid8Subtraction", UInt32),
        ("ConfigSpatialHost8or9Clipping", UInt32),
        ("ConfigSpatialResidInterleaved", UInt32),
        ("ConfigIntraResidUnsigned", UInt32),
        ("ConfigResidDiffAccelerator", UInt32),
        ("ConfigHostInverseScan", UInt32),
        ("ConfigSpecificIDCT", UInt32),
        ("Config4GroupedCoefs", UInt32),
        ("ConfigMinRenderTargetBuffCount", UInt16),
        ("ConfigDecoderSpecific", UInt16),
    ]
    return DXVA2_ConfigPictureDecode
def _define_DXVA2_DecodeBufferDesc_head():
    class DXVA2_DecodeBufferDesc(Structure):
        pass
    return DXVA2_DecodeBufferDesc
def _define_DXVA2_DecodeBufferDesc():
    DXVA2_DecodeBufferDesc = win32more.Media.MediaFoundation.DXVA2_DecodeBufferDesc_head
    DXVA2_DecodeBufferDesc._fields_ = [
        ("CompressedBufferType", win32more.Media.MediaFoundation.DXVA2_BufferfType),
        ("BufferIndex", UInt32),
        ("DataOffset", UInt32),
        ("DataSize", UInt32),
        ("FirstMBaddress", UInt32),
        ("NumMBsInBuffer", UInt32),
        ("Width", UInt32),
        ("Height", UInt32),
        ("Stride", UInt32),
        ("ReservedBits", UInt32),
        ("pvPVPState", c_void_p),
    ]
    return DXVA2_DecodeBufferDesc
def _define_DXVA2_AES_CTR_IV_head():
    class DXVA2_AES_CTR_IV(Structure):
        pass
    return DXVA2_AES_CTR_IV
def _define_DXVA2_AES_CTR_IV():
    DXVA2_AES_CTR_IV = win32more.Media.MediaFoundation.DXVA2_AES_CTR_IV_head
    DXVA2_AES_CTR_IV._fields_ = [
        ("IV", UInt64),
        ("Count", UInt64),
    ]
    return DXVA2_AES_CTR_IV
def _define_DXVA2_DecodeExtensionData_head():
    class DXVA2_DecodeExtensionData(Structure):
        pass
    return DXVA2_DecodeExtensionData
def _define_DXVA2_DecodeExtensionData():
    DXVA2_DecodeExtensionData = win32more.Media.MediaFoundation.DXVA2_DecodeExtensionData_head
    DXVA2_DecodeExtensionData._fields_ = [
        ("Function", UInt32),
        ("pPrivateInputData", c_void_p),
        ("PrivateInputDataSize", UInt32),
        ("pPrivateOutputData", c_void_p),
        ("PrivateOutputDataSize", UInt32),
    ]
    return DXVA2_DecodeExtensionData
def _define_DXVA2_DecodeExecuteParams_head():
    class DXVA2_DecodeExecuteParams(Structure):
        pass
    return DXVA2_DecodeExecuteParams
def _define_DXVA2_DecodeExecuteParams():
    DXVA2_DecodeExecuteParams = win32more.Media.MediaFoundation.DXVA2_DecodeExecuteParams_head
    DXVA2_DecodeExecuteParams._fields_ = [
        ("NumCompBuffers", UInt32),
        ("pCompressedBuffers", POINTER(win32more.Media.MediaFoundation.DXVA2_DecodeBufferDesc_head)),
        ("pExtensionData", POINTER(win32more.Media.MediaFoundation.DXVA2_DecodeExtensionData_head)),
    ]
    return DXVA2_DecodeExecuteParams
def _define_IDirect3DDeviceManager9_head():
    class IDirect3DDeviceManager9(win32more.System.Com.IUnknown_head):
        Guid = Guid('a0cade0f-06d5-4cf4-a1c7-f3cdd725aa75')
    return IDirect3DDeviceManager9
def _define_IDirect3DDeviceManager9():
    IDirect3DDeviceManager9 = win32more.Media.MediaFoundation.IDirect3DDeviceManager9_head
    IDirect3DDeviceManager9.ResetDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.IDirect3DDevice9_head,UInt32, use_last_error=False)(3, 'ResetDevice', ((1, 'pDevice'),(1, 'resetToken'),)))
    IDirect3DDeviceManager9.OpenDeviceHandle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.HANDLE), use_last_error=False)(4, 'OpenDeviceHandle', ((1, 'phDevice'),)))
    IDirect3DDeviceManager9.CloseDeviceHandle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE, use_last_error=False)(5, 'CloseDeviceHandle', ((1, 'hDevice'),)))
    IDirect3DDeviceManager9.TestDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE, use_last_error=False)(6, 'TestDevice', ((1, 'hDevice'),)))
    IDirect3DDeviceManager9.LockDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,POINTER(win32more.Graphics.Direct3D9.IDirect3DDevice9_head),win32more.Foundation.BOOL, use_last_error=False)(7, 'LockDevice', ((1, 'hDevice'),(1, 'ppDevice'),(1, 'fBlock'),)))
    IDirect3DDeviceManager9.UnlockDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,win32more.Foundation.BOOL, use_last_error=False)(8, 'UnlockDevice', ((1, 'hDevice'),(1, 'fSaveState'),)))
    IDirect3DDeviceManager9.GetVideoService = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(9, 'GetVideoService', ((1, 'hDevice'),(1, 'riid'),(1, 'ppService'),)))
    win32more.System.Com.IUnknown
    return IDirect3DDeviceManager9
def _define_IDirectXVideoAccelerationService_head():
    class IDirectXVideoAccelerationService(win32more.System.Com.IUnknown_head):
        Guid = Guid('fc51a550-d5e7-11d9-af55-00054e43ff02')
    return IDirectXVideoAccelerationService
def _define_IDirectXVideoAccelerationService():
    IDirectXVideoAccelerationService = win32more.Media.MediaFoundation.IDirectXVideoAccelerationService_head
    IDirectXVideoAccelerationService.CreateSurface = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,UInt32,win32more.Graphics.Direct3D9.D3DFORMAT,win32more.Graphics.Direct3D9.D3DPOOL,UInt32,win32more.Media.MediaFoundation.DXVA2_VideoRenderTargetType,POINTER(win32more.Graphics.Direct3D9.IDirect3DSurface9_head),POINTER(win32more.Foundation.HANDLE), use_last_error=False)(3, 'CreateSurface', ((1, 'Width'),(1, 'Height'),(1, 'BackBuffers'),(1, 'Format'),(1, 'Pool'),(1, 'Usage'),(1, 'DxvaType'),(1, 'ppSurface'),(1, 'pSharedHandle'),)))
    win32more.System.Com.IUnknown
    return IDirectXVideoAccelerationService
def _define_IDirectXVideoDecoderService_head():
    class IDirectXVideoDecoderService(win32more.Media.MediaFoundation.IDirectXVideoAccelerationService_head):
        Guid = Guid('fc51a551-d5e7-11d9-af55-00054e43ff02')
    return IDirectXVideoDecoderService
def _define_IDirectXVideoDecoderService():
    IDirectXVideoDecoderService = win32more.Media.MediaFoundation.IDirectXVideoDecoderService_head
    IDirectXVideoDecoderService.GetDecoderDeviceGuids = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(POINTER(Guid)), use_last_error=False)(4, 'GetDecoderDeviceGuids', ((1, 'pCount'),(1, 'pGuids'),)))
    IDirectXVideoDecoderService.GetDecoderRenderTargets = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(UInt32),POINTER(POINTER(win32more.Graphics.Direct3D9.D3DFORMAT)), use_last_error=False)(5, 'GetDecoderRenderTargets', ((1, 'Guid'),(1, 'pCount'),(1, 'pFormats'),)))
    IDirectXVideoDecoderService.GetDecoderConfigurations = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.DXVA2_VideoDesc_head),c_void_p,POINTER(UInt32),POINTER(POINTER(win32more.Media.MediaFoundation.DXVA2_ConfigPictureDecode_head)), use_last_error=False)(6, 'GetDecoderConfigurations', ((1, 'Guid'),(1, 'pVideoDesc'),(1, 'pReserved'),(1, 'pCount'),(1, 'ppConfigs'),)))
    IDirectXVideoDecoderService.CreateVideoDecoder = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.DXVA2_VideoDesc_head),POINTER(win32more.Media.MediaFoundation.DXVA2_ConfigPictureDecode_head),POINTER(win32more.Graphics.Direct3D9.IDirect3DSurface9_head),UInt32,POINTER(win32more.Media.MediaFoundation.IDirectXVideoDecoder_head), use_last_error=False)(7, 'CreateVideoDecoder', ((1, 'Guid'),(1, 'pVideoDesc'),(1, 'pConfig'),(1, 'ppDecoderRenderTargets'),(1, 'NumRenderTargets'),(1, 'ppDecode'),)))
    win32more.Media.MediaFoundation.IDirectXVideoAccelerationService
    return IDirectXVideoDecoderService
def _define_IDirectXVideoProcessorService_head():
    class IDirectXVideoProcessorService(win32more.Media.MediaFoundation.IDirectXVideoAccelerationService_head):
        Guid = Guid('fc51a552-d5e7-11d9-af55-00054e43ff02')
    return IDirectXVideoProcessorService
def _define_IDirectXVideoProcessorService():
    IDirectXVideoProcessorService = win32more.Media.MediaFoundation.IDirectXVideoProcessorService_head
    IDirectXVideoProcessorService.RegisterVideoProcessorSoftwareDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_void_p, use_last_error=False)(4, 'RegisterVideoProcessorSoftwareDevice', ((1, 'pCallbacks'),)))
    IDirectXVideoProcessorService.GetVideoProcessorDeviceGuids = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.DXVA2_VideoDesc_head),POINTER(UInt32),POINTER(POINTER(Guid)), use_last_error=False)(5, 'GetVideoProcessorDeviceGuids', ((1, 'pVideoDesc'),(1, 'pCount'),(1, 'pGuids'),)))
    IDirectXVideoProcessorService.GetVideoProcessorRenderTargets = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.DXVA2_VideoDesc_head),POINTER(UInt32),POINTER(POINTER(win32more.Graphics.Direct3D9.D3DFORMAT)), use_last_error=False)(6, 'GetVideoProcessorRenderTargets', ((1, 'VideoProcDeviceGuid'),(1, 'pVideoDesc'),(1, 'pCount'),(1, 'pFormats'),)))
    IDirectXVideoProcessorService.GetVideoProcessorSubStreamFormats = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.DXVA2_VideoDesc_head),win32more.Graphics.Direct3D9.D3DFORMAT,POINTER(UInt32),POINTER(POINTER(win32more.Graphics.Direct3D9.D3DFORMAT)), use_last_error=False)(7, 'GetVideoProcessorSubStreamFormats', ((1, 'VideoProcDeviceGuid'),(1, 'pVideoDesc'),(1, 'RenderTargetFormat'),(1, 'pCount'),(1, 'pFormats'),)))
    IDirectXVideoProcessorService.GetVideoProcessorCaps = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.DXVA2_VideoDesc_head),win32more.Graphics.Direct3D9.D3DFORMAT,POINTER(win32more.Media.MediaFoundation.DXVA2_VideoProcessorCaps_head), use_last_error=False)(8, 'GetVideoProcessorCaps', ((1, 'VideoProcDeviceGuid'),(1, 'pVideoDesc'),(1, 'RenderTargetFormat'),(1, 'pCaps'),)))
    IDirectXVideoProcessorService.GetProcAmpRange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.DXVA2_VideoDesc_head),win32more.Graphics.Direct3D9.D3DFORMAT,UInt32,POINTER(win32more.Media.MediaFoundation.DXVA2_ValueRange_head), use_last_error=False)(9, 'GetProcAmpRange', ((1, 'VideoProcDeviceGuid'),(1, 'pVideoDesc'),(1, 'RenderTargetFormat'),(1, 'ProcAmpCap'),(1, 'pRange'),)))
    IDirectXVideoProcessorService.GetFilterPropertyRange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.DXVA2_VideoDesc_head),win32more.Graphics.Direct3D9.D3DFORMAT,UInt32,POINTER(win32more.Media.MediaFoundation.DXVA2_ValueRange_head), use_last_error=False)(10, 'GetFilterPropertyRange', ((1, 'VideoProcDeviceGuid'),(1, 'pVideoDesc'),(1, 'RenderTargetFormat'),(1, 'FilterSetting'),(1, 'pRange'),)))
    IDirectXVideoProcessorService.CreateVideoProcessor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.DXVA2_VideoDesc_head),win32more.Graphics.Direct3D9.D3DFORMAT,UInt32,POINTER(win32more.Media.MediaFoundation.IDirectXVideoProcessor_head), use_last_error=False)(11, 'CreateVideoProcessor', ((1, 'VideoProcDeviceGuid'),(1, 'pVideoDesc'),(1, 'RenderTargetFormat'),(1, 'MaxNumSubStreams'),(1, 'ppVidProcess'),)))
    win32more.Media.MediaFoundation.IDirectXVideoAccelerationService
    return IDirectXVideoProcessorService
def _define_IDirectXVideoDecoder_head():
    class IDirectXVideoDecoder(win32more.System.Com.IUnknown_head):
        Guid = Guid('f2b0810a-fd00-43c9-918c-df94e2d8ef7d')
    return IDirectXVideoDecoder
def _define_IDirectXVideoDecoder():
    IDirectXVideoDecoder = win32more.Media.MediaFoundation.IDirectXVideoDecoder_head
    IDirectXVideoDecoder.GetVideoDecoderService = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IDirectXVideoDecoderService_head), use_last_error=False)(3, 'GetVideoDecoderService', ((1, 'ppService'),)))
    IDirectXVideoDecoder.GetCreationParameters = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.DXVA2_VideoDesc_head),POINTER(win32more.Media.MediaFoundation.DXVA2_ConfigPictureDecode_head),POINTER(POINTER(win32more.Graphics.Direct3D9.IDirect3DSurface9_head)),POINTER(UInt32), use_last_error=False)(4, 'GetCreationParameters', ((1, 'pDeviceGuid'),(1, 'pVideoDesc'),(1, 'pConfig'),(1, 'pDecoderRenderTargets'),(1, 'pNumSurfaces'),)))
    IDirectXVideoDecoder.GetBuffer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.DXVA2_BufferfType,POINTER(c_void_p),POINTER(UInt32), use_last_error=False)(5, 'GetBuffer', ((1, 'BufferType'),(1, 'ppBuffer'),(1, 'pBufferSize'),)))
    IDirectXVideoDecoder.ReleaseBuffer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(6, 'ReleaseBuffer', ((1, 'BufferType'),)))
    IDirectXVideoDecoder.BeginFrame = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.IDirect3DSurface9_head,c_void_p, use_last_error=False)(7, 'BeginFrame', ((1, 'pRenderTarget'),(1, 'pvPVPData'),)))
    IDirectXVideoDecoder.EndFrame = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.HANDLE), use_last_error=False)(8, 'EndFrame', ((1, 'pHandleComplete'),)))
    IDirectXVideoDecoder.Execute = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.DXVA2_DecodeExecuteParams_head), use_last_error=False)(9, 'Execute', ((1, 'pExecuteParams'),)))
    win32more.System.Com.IUnknown
    return IDirectXVideoDecoder
def _define_IDirectXVideoProcessor_head():
    class IDirectXVideoProcessor(win32more.System.Com.IUnknown_head):
        Guid = Guid('8c3a39f0-916e-4690-804f-4c8001355d25')
    return IDirectXVideoProcessor
def _define_IDirectXVideoProcessor():
    IDirectXVideoProcessor = win32more.Media.MediaFoundation.IDirectXVideoProcessor_head
    IDirectXVideoProcessor.GetVideoProcessorService = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IDirectXVideoProcessorService_head), use_last_error=False)(3, 'GetVideoProcessorService', ((1, 'ppService'),)))
    IDirectXVideoProcessor.GetCreationParameters = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.DXVA2_VideoDesc_head),POINTER(win32more.Graphics.Direct3D9.D3DFORMAT),POINTER(UInt32), use_last_error=False)(4, 'GetCreationParameters', ((1, 'pDeviceGuid'),(1, 'pVideoDesc'),(1, 'pRenderTargetFormat'),(1, 'pMaxNumSubStreams'),)))
    IDirectXVideoProcessor.GetVideoProcessorCaps = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.DXVA2_VideoProcessorCaps_head), use_last_error=False)(5, 'GetVideoProcessorCaps', ((1, 'pCaps'),)))
    IDirectXVideoProcessor.GetProcAmpRange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.DXVA2_ValueRange_head), use_last_error=False)(6, 'GetProcAmpRange', ((1, 'ProcAmpCap'),(1, 'pRange'),)))
    IDirectXVideoProcessor.GetFilterPropertyRange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.DXVA2_ValueRange_head), use_last_error=False)(7, 'GetFilterPropertyRange', ((1, 'FilterSetting'),(1, 'pRange'),)))
    IDirectXVideoProcessor.VideoProcessBlt = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.IDirect3DSurface9_head,POINTER(win32more.Media.MediaFoundation.DXVA2_VideoProcessBltParams_head),POINTER(win32more.Media.MediaFoundation.DXVA2_VideoSample),UInt32,POINTER(win32more.Foundation.HANDLE), use_last_error=False)(8, 'VideoProcessBlt', ((1, 'pRenderTarget'),(1, 'pBltParams'),(1, 'pSamples'),(1, 'NumSamples'),(1, 'pHandleComplete'),)))
    win32more.System.Com.IUnknown
    return IDirectXVideoProcessor
DXVA2_SurfaceType = Int32
DXVA2_SurfaceType_DecoderRenderTarget = 0
DXVA2_SurfaceType_ProcessorRenderTarget = 1
DXVA2_SurfaceType_D3DRenderTargetTexture = 2
def _define_IDirectXVideoMemoryConfiguration_head():
    class IDirectXVideoMemoryConfiguration(win32more.System.Com.IUnknown_head):
        Guid = Guid('b7f916dd-db3b-49c1-84d7-e45ef99ec726')
    return IDirectXVideoMemoryConfiguration
def _define_IDirectXVideoMemoryConfiguration():
    IDirectXVideoMemoryConfiguration = win32more.Media.MediaFoundation.IDirectXVideoMemoryConfiguration_head
    IDirectXVideoMemoryConfiguration.GetAvailableSurfaceTypeByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.DXVA2_SurfaceType), use_last_error=False)(3, 'GetAvailableSurfaceTypeByIndex', ((1, 'dwTypeIndex'),(1, 'pdwType'),)))
    IDirectXVideoMemoryConfiguration.SetSurfaceType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.DXVA2_SurfaceType, use_last_error=False)(4, 'SetSurfaceType', ((1, 'dwType'),)))
    win32more.System.Com.IUnknown
    return IDirectXVideoMemoryConfiguration
OPM_TYPE = Int32
OPM_OMAC_SIZE = 16
OPM_128_BIT_RANDOM_NUMBER_SIZE = 16
OPM_ENCRYPTED_INITIALIZATION_PARAMETERS_SIZE = 256
OPM_CONFIGURE_SETTING_DATA_SIZE = 4056
OPM_GET_INFORMATION_PARAMETERS_SIZE = 4056
OPM_REQUESTED_INFORMATION_SIZE = 4076
OPM_HDCP_KEY_SELECTION_VECTOR_SIZE = 5
OPM_PROTECTION_TYPE_SIZE = 4
OPM_BUS_TYPE_MASK = 65535
OPM_BUS_IMPLEMENTATION_MODIFIER_MASK = 32767
OPM_VIDEO_OUTPUT_SEMANTICS = Int32
OPM_VOS_COPP_SEMANTICS = 0
OPM_VOS_OPM_SEMANTICS = 1
OPM_VOS_OPM_INDIRECT_DISPLAY = 2
OPM_HDCP_FLAGS = UInt32
OPM_HDCP_FLAG_NONE = 0
OPM_HDCP_FLAG_REPEATER = 1
OPM_STATUS = Int32
OPM_STATUS_NORMAL = 0
OPM_STATUS_LINK_LOST = 1
OPM_STATUS_RENEGOTIATION_REQUIRED = 2
OPM_STATUS_TAMPERING_DETECTED = 4
OPM_STATUS_REVOKED_HDCP_DEVICE_ATTACHED = 8
PM_CONNECTOR_TYPE = Int32
OPM_CONNECTOR_TYPE_OTHER = -1
OPM_CONNECTOR_TYPE_VGA = 0
OPM_CONNECTOR_TYPE_SVIDEO = 1
OPM_CONNECTOR_TYPE_COMPOSITE_VIDEO = 2
OPM_CONNECTOR_TYPE_COMPONENT_VIDEO = 3
OPM_CONNECTOR_TYPE_DVI = 4
OPM_CONNECTOR_TYPE_HDMI = 5
OPM_CONNECTOR_TYPE_LVDS = 6
OPM_CONNECTOR_TYPE_D_JPN = 8
OPM_CONNECTOR_TYPE_SDI = 9
OPM_CONNECTOR_TYPE_DISPLAYPORT_EXTERNAL = 10
OPM_CONNECTOR_TYPE_DISPLAYPORT_EMBEDDED = 11
OPM_CONNECTOR_TYPE_UDI_EXTERNAL = 12
OPM_CONNECTOR_TYPE_UDI_EMBEDDED = 13
OPM_CONNECTOR_TYPE_RESERVED = 14
OPM_CONNECTOR_TYPE_MIRACAST = 15
OPM_CONNECTOR_TYPE_TRANSPORT_AGNOSTIC_DIGITAL_MODE_A = 16
OPM_CONNECTOR_TYPE_TRANSPORT_AGNOSTIC_DIGITAL_MODE_B = 17
OPM_COPP_COMPATIBLE_CONNECTOR_TYPE_INTERNAL = -2147483648
OPM_DVI_CHARACTERISTIC = Int32
OPM_DVI_CHARACTERISTIC_1_0 = 1
OPM_DVI_CHARACTERISTIC_1_1_OR_ABOVE = 2
OPM_OUTPUT_HARDWARE_PROTECTION = Int32
OPM_OUTPUT_HARDWARE_PROTECTION_NOT_SUPPORTED = 0
OPM_OUTPUT_HARDWARE_PROTECTION_SUPPORTED = 1
OPM_BUS_TYPE = Int32
OPM_BUS_TYPE_OTHER = 0
OPM_BUS_TYPE_PCI = 1
OPM_BUS_TYPE_PCIX = 2
OPM_BUS_TYPE_PCIEXPRESS = 3
OPM_BUS_TYPE_AGP = 4
OPM_BUS_IMPLEMENTATION_MODIFIER_INSIDE_OF_CHIPSET = 65536
OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 131072
OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 196608
OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 262144
OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 327680
OPM_BUS_IMPLEMENTATION_MODIFIER_NON_STANDARD = -2147483648
OPM_COPP_COMPATIBLE_BUS_TYPE_INTEGRATED = -2147483648
OPM_DPCP_PROTECTION_LEVEL = Int32
OPM_DPCP_OFF = 0
OPM_DPCP_ON = 1
OPM_DPCP_FORCE_ULONG = 2147483647
OPM_HDCP_PROTECTION_LEVEL = Int32
OPM_HDCP_OFF = 0
OPM_HDCP_ON = 1
OPM_HDCP_FORCE_ULONG = 2147483647
OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL = Int32
OPM_TYPE_ENFORCEMENT_HDCP_OFF = 0
OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_NO_TYPE_RESTRICTION = 1
OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_TYPE1_RESTRICTION = 2
OPM_TYPE_ENFORCEMENT_HDCP_FORCE_ULONG = 2147483647
OPM_CGMSA = Int32
OPM_CGMSA_OFF = 0
OPM_CGMSA_COPY_FREELY = 1
OPM_CGMSA_COPY_NO_MORE = 2
OPM_CGMSA_COPY_ONE_GENERATION = 3
OPM_CGMSA_COPY_NEVER = 4
OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED = 8
OPM_ACP_PROTECTION_LEVEL = Int32
OPM_ACP_OFF = 0
OPM_ACP_LEVEL_ONE = 1
OPM_ACP_LEVEL_TWO = 2
OPM_ACP_LEVEL_THREE = 3
OPM_ACP_FORCE_ULONG = 2147483647
OPM_PROTECTION_TYPE = Int32
OPM_PROTECTION_TYPE_OTHER = -2147483648
OPM_PROTECTION_TYPE_NONE = 0
OPM_PROTECTION_TYPE_COPP_COMPATIBLE_HDCP = 1
OPM_PROTECTION_TYPE_ACP = 2
OPM_PROTECTION_TYPE_CGMSA = 4
OPM_PROTECTION_TYPE_HDCP = 8
OPM_PROTECTION_TYPE_DPCP = 16
OPM_PROTECTION_TYPE_TYPE_ENFORCEMENT_HDCP = 32
OPM_PROTECTION_STANDARD_TYPE = UInt32
OPM_PROTECTION_STANDARD_OTHER = 2147483648
OPM_PROTECTION_STANDARD_NONE = 0
OPM_PROTECTION_STANDARD_IEC61880_525I = 1
OPM_PROTECTION_STANDARD_IEC61880_2_525I = 2
OPM_PROTECTION_STANDARD_IEC62375_625P = 4
OPM_PROTECTION_STANDARD_EIA608B_525 = 8
OPM_PROTECTION_STANDARD_EN300294_625I = 16
OPM_PROTECTION_STANDARD_CEA805A_TYPEA_525P = 32
OPM_PROTECTION_STANDARD_CEA805A_TYPEA_750P = 64
OPM_PROTECTION_STANDARD_CEA805A_TYPEA_1125I = 128
OPM_PROTECTION_STANDARD_CEA805A_TYPEB_525P = 256
OPM_PROTECTION_STANDARD_CEA805A_TYPEB_750P = 512
OPM_PROTECTION_STANDARD_CEA805A_TYPEB_1125I = 1024
OPM_PROTECTION_STANDARD_ARIBTRB15_525I = 2048
OPM_PROTECTION_STANDARD_ARIBTRB15_525P = 4096
OPM_PROTECTION_STANDARD_ARIBTRB15_750P = 8192
OPM_PROTECTION_STANDARD_ARIBTRB15_1125I = 16384
OPM_IMAGE_ASPECT_RATIO_EN300294 = Int32
OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_4_BY_3 = 0
OPM_ASPECT_RATIO_EN300294_BOX_14_BY_9_CENTER = 1
OPM_ASPECT_RATIO_EN300294_BOX_14_BY_9_TOP = 2
OPM_ASPECT_RATIO_EN300294_BOX_16_BY_9_CENTER = 3
OPM_ASPECT_RATIO_EN300294_BOX_16_BY_9_TOP = 4
OPM_ASPECT_RATIO_EN300294_BOX_GT_16_BY_9_CENTER = 5
OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_4_BY_3_PROTECTED_CENTER = 6
OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_16_BY_9_ANAMORPHIC = 7
OPM_ASPECT_RATIO_FORCE_ULONG = 2147483647
def _define_OPM_RANDOM_NUMBER_head():
    class OPM_RANDOM_NUMBER(Structure):
        pass
    return OPM_RANDOM_NUMBER
def _define_OPM_RANDOM_NUMBER():
    OPM_RANDOM_NUMBER = win32more.Media.MediaFoundation.OPM_RANDOM_NUMBER_head
    OPM_RANDOM_NUMBER._fields_ = [
        ("abRandomNumber", Byte * 16),
    ]
    return OPM_RANDOM_NUMBER
def _define_OPM_OMAC_head():
    class OPM_OMAC(Structure):
        pass
    return OPM_OMAC
def _define_OPM_OMAC():
    OPM_OMAC = win32more.Media.MediaFoundation.OPM_OMAC_head
    OPM_OMAC._fields_ = [
        ("abOMAC", Byte * 16),
    ]
    return OPM_OMAC
def _define_OPM_ENCRYPTED_INITIALIZATION_PARAMETERS_head():
    class OPM_ENCRYPTED_INITIALIZATION_PARAMETERS(Structure):
        pass
    return OPM_ENCRYPTED_INITIALIZATION_PARAMETERS
def _define_OPM_ENCRYPTED_INITIALIZATION_PARAMETERS():
    OPM_ENCRYPTED_INITIALIZATION_PARAMETERS = win32more.Media.MediaFoundation.OPM_ENCRYPTED_INITIALIZATION_PARAMETERS_head
    OPM_ENCRYPTED_INITIALIZATION_PARAMETERS._fields_ = [
        ("abEncryptedInitializationParameters", Byte * 256),
    ]
    return OPM_ENCRYPTED_INITIALIZATION_PARAMETERS
def _define_OPM_GET_INFO_PARAMETERS_head():
    class OPM_GET_INFO_PARAMETERS(Structure):
        pass
    return OPM_GET_INFO_PARAMETERS
def _define_OPM_GET_INFO_PARAMETERS():
    OPM_GET_INFO_PARAMETERS = win32more.Media.MediaFoundation.OPM_GET_INFO_PARAMETERS_head
    OPM_GET_INFO_PARAMETERS._pack_ = 1
    OPM_GET_INFO_PARAMETERS._fields_ = [
        ("omac", win32more.Media.MediaFoundation.OPM_OMAC),
        ("rnRandomNumber", win32more.Media.MediaFoundation.OPM_RANDOM_NUMBER),
        ("guidInformation", Guid),
        ("ulSequenceNumber", UInt32),
        ("cbParametersSize", UInt32),
        ("abParameters", Byte * 4056),
    ]
    return OPM_GET_INFO_PARAMETERS
def _define_OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS_head():
    class OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS(Structure):
        pass
    return OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS
def _define_OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS():
    OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS = win32more.Media.MediaFoundation.OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS_head
    OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS._pack_ = 1
    OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS._fields_ = [
        ("rnRandomNumber", win32more.Media.MediaFoundation.OPM_RANDOM_NUMBER),
        ("guidInformation", Guid),
        ("ulSequenceNumber", UInt32),
        ("cbParametersSize", UInt32),
        ("abParameters", Byte * 4056),
    ]
    return OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS
def _define_OPM_HDCP_KEY_SELECTION_VECTOR_head():
    class OPM_HDCP_KEY_SELECTION_VECTOR(Structure):
        pass
    return OPM_HDCP_KEY_SELECTION_VECTOR
def _define_OPM_HDCP_KEY_SELECTION_VECTOR():
    OPM_HDCP_KEY_SELECTION_VECTOR = win32more.Media.MediaFoundation.OPM_HDCP_KEY_SELECTION_VECTOR_head
    OPM_HDCP_KEY_SELECTION_VECTOR._fields_ = [
        ("abKeySelectionVector", Byte * 5),
    ]
    return OPM_HDCP_KEY_SELECTION_VECTOR
def _define_OPM_CONNECTED_HDCP_DEVICE_INFORMATION_head():
    class OPM_CONNECTED_HDCP_DEVICE_INFORMATION(Structure):
        pass
    return OPM_CONNECTED_HDCP_DEVICE_INFORMATION
def _define_OPM_CONNECTED_HDCP_DEVICE_INFORMATION():
    OPM_CONNECTED_HDCP_DEVICE_INFORMATION = win32more.Media.MediaFoundation.OPM_CONNECTED_HDCP_DEVICE_INFORMATION_head
    OPM_CONNECTED_HDCP_DEVICE_INFORMATION._pack_ = 1
    OPM_CONNECTED_HDCP_DEVICE_INFORMATION._fields_ = [
        ("rnRandomNumber", win32more.Media.MediaFoundation.OPM_RANDOM_NUMBER),
        ("ulStatusFlags", UInt32),
        ("ulHDCPFlags", UInt32),
        ("ksvB", win32more.Media.MediaFoundation.OPM_HDCP_KEY_SELECTION_VECTOR),
        ("Reserved", Byte * 11),
        ("Reserved2", Byte * 16),
        ("Reserved3", Byte * 16),
    ]
    return OPM_CONNECTED_HDCP_DEVICE_INFORMATION
def _define_OPM_REQUESTED_INFORMATION_head():
    class OPM_REQUESTED_INFORMATION(Structure):
        pass
    return OPM_REQUESTED_INFORMATION
def _define_OPM_REQUESTED_INFORMATION():
    OPM_REQUESTED_INFORMATION = win32more.Media.MediaFoundation.OPM_REQUESTED_INFORMATION_head
    OPM_REQUESTED_INFORMATION._pack_ = 1
    OPM_REQUESTED_INFORMATION._fields_ = [
        ("omac", win32more.Media.MediaFoundation.OPM_OMAC),
        ("cbRequestedInformationSize", UInt32),
        ("abRequestedInformation", Byte * 4076),
    ]
    return OPM_REQUESTED_INFORMATION
def _define_OPM_STANDARD_INFORMATION_head():
    class OPM_STANDARD_INFORMATION(Structure):
        pass
    return OPM_STANDARD_INFORMATION
def _define_OPM_STANDARD_INFORMATION():
    OPM_STANDARD_INFORMATION = win32more.Media.MediaFoundation.OPM_STANDARD_INFORMATION_head
    OPM_STANDARD_INFORMATION._pack_ = 1
    OPM_STANDARD_INFORMATION._fields_ = [
        ("rnRandomNumber", win32more.Media.MediaFoundation.OPM_RANDOM_NUMBER),
        ("ulStatusFlags", UInt32),
        ("ulInformation", UInt32),
        ("ulReserved", UInt32),
        ("ulReserved2", UInt32),
    ]
    return OPM_STANDARD_INFORMATION
def _define_OPM_ACTUAL_OUTPUT_FORMAT_head():
    class OPM_ACTUAL_OUTPUT_FORMAT(Structure):
        pass
    return OPM_ACTUAL_OUTPUT_FORMAT
def _define_OPM_ACTUAL_OUTPUT_FORMAT():
    OPM_ACTUAL_OUTPUT_FORMAT = win32more.Media.MediaFoundation.OPM_ACTUAL_OUTPUT_FORMAT_head
    OPM_ACTUAL_OUTPUT_FORMAT._pack_ = 1
    OPM_ACTUAL_OUTPUT_FORMAT._fields_ = [
        ("rnRandomNumber", win32more.Media.MediaFoundation.OPM_RANDOM_NUMBER),
        ("ulStatusFlags", UInt32),
        ("ulDisplayWidth", UInt32),
        ("ulDisplayHeight", UInt32),
        ("dsfSampleInterleaveFormat", win32more.Media.MediaFoundation.DXVA2_SampleFormat),
        ("d3dFormat", win32more.Graphics.Direct3D9.D3DFORMAT),
        ("ulFrequencyNumerator", UInt32),
        ("ulFrequencyDenominator", UInt32),
    ]
    return OPM_ACTUAL_OUTPUT_FORMAT
def _define_OPM_ACP_AND_CGMSA_SIGNALING_head():
    class OPM_ACP_AND_CGMSA_SIGNALING(Structure):
        pass
    return OPM_ACP_AND_CGMSA_SIGNALING
def _define_OPM_ACP_AND_CGMSA_SIGNALING():
    OPM_ACP_AND_CGMSA_SIGNALING = win32more.Media.MediaFoundation.OPM_ACP_AND_CGMSA_SIGNALING_head
    OPM_ACP_AND_CGMSA_SIGNALING._pack_ = 1
    OPM_ACP_AND_CGMSA_SIGNALING._fields_ = [
        ("rnRandomNumber", win32more.Media.MediaFoundation.OPM_RANDOM_NUMBER),
        ("ulStatusFlags", UInt32),
        ("ulAvailableTVProtectionStandards", UInt32),
        ("ulActiveTVProtectionStandard", UInt32),
        ("ulReserved", UInt32),
        ("ulAspectRatioValidMask1", UInt32),
        ("ulAspectRatioData1", UInt32),
        ("ulAspectRatioValidMask2", UInt32),
        ("ulAspectRatioData2", UInt32),
        ("ulAspectRatioValidMask3", UInt32),
        ("ulAspectRatioData3", UInt32),
        ("ulReserved2", UInt32 * 4),
        ("ulReserved3", UInt32 * 4),
    ]
    return OPM_ACP_AND_CGMSA_SIGNALING
def _define_OPM_OUTPUT_ID_DATA_head():
    class OPM_OUTPUT_ID_DATA(Structure):
        pass
    return OPM_OUTPUT_ID_DATA
def _define_OPM_OUTPUT_ID_DATA():
    OPM_OUTPUT_ID_DATA = win32more.Media.MediaFoundation.OPM_OUTPUT_ID_DATA_head
    OPM_OUTPUT_ID_DATA._pack_ = 1
    OPM_OUTPUT_ID_DATA._fields_ = [
        ("rnRandomNumber", win32more.Media.MediaFoundation.OPM_RANDOM_NUMBER),
        ("ulStatusFlags", UInt32),
        ("OutputId", UInt64),
    ]
    return OPM_OUTPUT_ID_DATA
def _define_OPM_CONFIGURE_PARAMETERS_head():
    class OPM_CONFIGURE_PARAMETERS(Structure):
        pass
    return OPM_CONFIGURE_PARAMETERS
def _define_OPM_CONFIGURE_PARAMETERS():
    OPM_CONFIGURE_PARAMETERS = win32more.Media.MediaFoundation.OPM_CONFIGURE_PARAMETERS_head
    OPM_CONFIGURE_PARAMETERS._pack_ = 1
    OPM_CONFIGURE_PARAMETERS._fields_ = [
        ("omac", win32more.Media.MediaFoundation.OPM_OMAC),
        ("guidSetting", Guid),
        ("ulSequenceNumber", UInt32),
        ("cbParametersSize", UInt32),
        ("abParameters", Byte * 4056),
    ]
    return OPM_CONFIGURE_PARAMETERS
def _define_OPM_SET_PROTECTION_LEVEL_PARAMETERS_head():
    class OPM_SET_PROTECTION_LEVEL_PARAMETERS(Structure):
        pass
    return OPM_SET_PROTECTION_LEVEL_PARAMETERS
def _define_OPM_SET_PROTECTION_LEVEL_PARAMETERS():
    OPM_SET_PROTECTION_LEVEL_PARAMETERS = win32more.Media.MediaFoundation.OPM_SET_PROTECTION_LEVEL_PARAMETERS_head
    OPM_SET_PROTECTION_LEVEL_PARAMETERS._pack_ = 1
    OPM_SET_PROTECTION_LEVEL_PARAMETERS._fields_ = [
        ("ulProtectionType", UInt32),
        ("ulProtectionLevel", UInt32),
        ("Reserved", UInt32),
        ("Reserved2", UInt32),
    ]
    return OPM_SET_PROTECTION_LEVEL_PARAMETERS
def _define_OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS_head():
    class OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS(Structure):
        pass
    return OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS
def _define_OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS():
    OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS = win32more.Media.MediaFoundation.OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS_head
    OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS._pack_ = 1
    OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS._fields_ = [
        ("ulNewTVProtectionStandard", UInt32),
        ("ulAspectRatioChangeMask1", UInt32),
        ("ulAspectRatioData1", UInt32),
        ("ulAspectRatioChangeMask2", UInt32),
        ("ulAspectRatioData2", UInt32),
        ("ulAspectRatioChangeMask3", UInt32),
        ("ulAspectRatioData3", UInt32),
        ("ulReserved", UInt32 * 4),
        ("ulReserved2", UInt32 * 4),
        ("ulReserved3", UInt32),
    ]
    return OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS
def _define_OPM_SET_HDCP_SRM_PARAMETERS_head():
    class OPM_SET_HDCP_SRM_PARAMETERS(Structure):
        pass
    return OPM_SET_HDCP_SRM_PARAMETERS
def _define_OPM_SET_HDCP_SRM_PARAMETERS():
    OPM_SET_HDCP_SRM_PARAMETERS = win32more.Media.MediaFoundation.OPM_SET_HDCP_SRM_PARAMETERS_head
    OPM_SET_HDCP_SRM_PARAMETERS._pack_ = 1
    OPM_SET_HDCP_SRM_PARAMETERS._fields_ = [
        ("ulSRMVersion", UInt32),
    ]
    return OPM_SET_HDCP_SRM_PARAMETERS
def _define_OPM_GET_CODEC_INFO_PARAMETERS_head():
    class OPM_GET_CODEC_INFO_PARAMETERS(Structure):
        pass
    return OPM_GET_CODEC_INFO_PARAMETERS
def _define_OPM_GET_CODEC_INFO_PARAMETERS():
    OPM_GET_CODEC_INFO_PARAMETERS = win32more.Media.MediaFoundation.OPM_GET_CODEC_INFO_PARAMETERS_head
    OPM_GET_CODEC_INFO_PARAMETERS._pack_ = 1
    OPM_GET_CODEC_INFO_PARAMETERS._fields_ = [
        ("cbVerifier", UInt32),
        ("Verifier", Byte * 4052),
    ]
    return OPM_GET_CODEC_INFO_PARAMETERS
def _define_OPM_GET_CODEC_INFO_INFORMATION_head():
    class OPM_GET_CODEC_INFO_INFORMATION(Structure):
        pass
    return OPM_GET_CODEC_INFO_INFORMATION
def _define_OPM_GET_CODEC_INFO_INFORMATION():
    OPM_GET_CODEC_INFO_INFORMATION = win32more.Media.MediaFoundation.OPM_GET_CODEC_INFO_INFORMATION_head
    OPM_GET_CODEC_INFO_INFORMATION._pack_ = 1
    OPM_GET_CODEC_INFO_INFORMATION._fields_ = [
        ("rnRandomNumber", win32more.Media.MediaFoundation.OPM_RANDOM_NUMBER),
        ("Merit", UInt32),
    ]
    return OPM_GET_CODEC_INFO_INFORMATION
def _define_IOPMVideoOutput_head():
    class IOPMVideoOutput(win32more.System.Com.IUnknown_head):
        Guid = Guid('0a15159d-41c7-4456-93e1-284cd61d4e8d')
    return IOPMVideoOutput
def _define_IOPMVideoOutput():
    IOPMVideoOutput = win32more.Media.MediaFoundation.IOPMVideoOutput_head
    IOPMVideoOutput.StartInitialization = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.OPM_RANDOM_NUMBER_head),POINTER(c_char_p_no),POINTER(UInt32), use_last_error=False)(3, 'StartInitialization', ((1, 'prnRandomNumber'),(1, 'ppbCertificate'),(1, 'pulCertificateLength'),)))
    IOPMVideoOutput.FinishInitialization = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.OPM_ENCRYPTED_INITIALIZATION_PARAMETERS_head), use_last_error=False)(4, 'FinishInitialization', ((1, 'pParameters'),)))
    IOPMVideoOutput.GetInformation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.OPM_GET_INFO_PARAMETERS_head),POINTER(win32more.Media.MediaFoundation.OPM_REQUESTED_INFORMATION_head), use_last_error=False)(5, 'GetInformation', ((1, 'pParameters'),(1, 'pRequestedInformation'),)))
    IOPMVideoOutput.COPPCompatibleGetInformation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS_head),POINTER(win32more.Media.MediaFoundation.OPM_REQUESTED_INFORMATION_head), use_last_error=False)(6, 'COPPCompatibleGetInformation', ((1, 'pParameters'),(1, 'pRequestedInformation'),)))
    IOPMVideoOutput.Configure = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.OPM_CONFIGURE_PARAMETERS_head),UInt32,c_char_p_no, use_last_error=False)(7, 'Configure', ((1, 'pParameters'),(1, 'ulAdditionalParametersSize'),(1, 'pbAdditionalParameters'),)))
    win32more.System.Com.IUnknown
    return IOPMVideoOutput
KSPROPSETID_OPMVideoOutput = Guid('06f414bb-f43a-4fe2-a566-774b4c81f0db')
KSMETHOD_OPMVIDEOOUTPUT = Int32
KSMETHOD_OPMVIDEOOUTPUT_STARTINITIALIZATION = 0
KSMETHOD_OPMVIDEOOUTPUT_FINISHINITIALIZATION = 1
KSMETHOD_OPMVIDEOOUTPUT_GETINFORMATION = 2
MF_ATTRIBUTE_TYPE = Int32
MF_ATTRIBUTE_UINT32 = 19
MF_ATTRIBUTE_UINT64 = 21
MF_ATTRIBUTE_DOUBLE = 5
MF_ATTRIBUTE_GUID = 72
MF_ATTRIBUTE_STRING = 31
MF_ATTRIBUTE_BLOB = 4113
MF_ATTRIBUTE_IUNKNOWN = 13
MF_ATTRIBUTES_MATCH_TYPE = Int32
MF_ATTRIBUTES_MATCH_OUR_ITEMS = 0
MF_ATTRIBUTES_MATCH_THEIR_ITEMS = 1
MF_ATTRIBUTES_MATCH_ALL_ITEMS = 2
MF_ATTRIBUTES_MATCH_INTERSECTION = 3
MF_ATTRIBUTES_MATCH_SMALLER = 4
def _define_IMFAttributes_head():
    class IMFAttributes(win32more.System.Com.IUnknown_head):
        Guid = Guid('2cd2d921-c447-44a7-a13c-4adabfc247e3')
    return IMFAttributes
def _define_IMFAttributes():
    IMFAttributes = win32more.Media.MediaFoundation.IMFAttributes_head
    IMFAttributes.GetItem = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(3, 'GetItem', ((1, 'guidKey'),(1, 'pValue'),)))
    IMFAttributes.GetItemType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.MF_ATTRIBUTE_TYPE), use_last_error=False)(4, 'GetItemType', ((1, 'guidKey'),(1, 'pType'),)))
    IMFAttributes.CompareItem = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head),POINTER(win32more.Foundation.BOOL), use_last_error=False)(5, 'CompareItem', ((1, 'guidKey'),(1, 'Value'),(1, 'pbResult'),)))
    IMFAttributes.Compare = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head,win32more.Media.MediaFoundation.MF_ATTRIBUTES_MATCH_TYPE,POINTER(win32more.Foundation.BOOL), use_last_error=False)(6, 'Compare', ((1, 'pTheirs'),(1, 'MatchType'),(1, 'pbResult'),)))
    IMFAttributes.GetUINT32 = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(UInt32), use_last_error=False)(7, 'GetUINT32', ((1, 'guidKey'),(1, 'punValue'),)))
    IMFAttributes.GetUINT64 = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(UInt64), use_last_error=False)(8, 'GetUINT64', ((1, 'guidKey'),(1, 'punValue'),)))
    IMFAttributes.GetDouble = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Double), use_last_error=False)(9, 'GetDouble', ((1, 'guidKey'),(1, 'pfValue'),)))
    IMFAttributes.GetGUID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Guid), use_last_error=False)(10, 'GetGUID', ((1, 'guidKey'),(1, 'pguidValue'),)))
    IMFAttributes.GetStringLength = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(UInt32), use_last_error=False)(11, 'GetStringLength', ((1, 'guidKey'),(1, 'pcchLength'),)))
    IMFAttributes.GetString = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Char),UInt32,POINTER(UInt32), use_last_error=False)(12, 'GetString', ((1, 'guidKey'),(1, 'pwszValue'),(1, 'cchBufSize'),(1, 'pcchLength'),)))
    IMFAttributes.GetAllocatedString = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Foundation.PWSTR),POINTER(UInt32), use_last_error=False)(13, 'GetAllocatedString', ((1, 'guidKey'),(1, 'ppwszValue'),(1, 'pcchLength'),)))
    IMFAttributes.GetBlobSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(UInt32), use_last_error=False)(14, 'GetBlobSize', ((1, 'guidKey'),(1, 'pcbBlobSize'),)))
    IMFAttributes.GetBlob = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Byte),UInt32,POINTER(UInt32), use_last_error=False)(15, 'GetBlob', ((1, 'guidKey'),(1, 'pBuf'),(1, 'cbBufSize'),(1, 'pcbBlobSize'),)))
    IMFAttributes.GetAllocatedBlob = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_char_p_no),POINTER(UInt32), use_last_error=False)(16, 'GetAllocatedBlob', ((1, 'guidKey'),(1, 'ppBuf'),(1, 'pcbSize'),)))
    IMFAttributes.GetUnknown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Guid),POINTER(c_void_p), use_last_error=False)(17, 'GetUnknown', ((1, 'guidKey'),(1, 'riid'),(1, 'ppv'),)))
    IMFAttributes.SetItem = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(18, 'SetItem', ((1, 'guidKey'),(1, 'Value'),)))
    IMFAttributes.DeleteItem = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid), use_last_error=False)(19, 'DeleteItem', ((1, 'guidKey'),)))
    IMFAttributes.DeleteAllItems = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(20, 'DeleteAllItems', ()))
    IMFAttributes.SetUINT32 = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),UInt32, use_last_error=False)(21, 'SetUINT32', ((1, 'guidKey'),(1, 'unValue'),)))
    IMFAttributes.SetUINT64 = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),UInt64, use_last_error=False)(22, 'SetUINT64', ((1, 'guidKey'),(1, 'unValue'),)))
    IMFAttributes.SetDouble = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),Double, use_last_error=False)(23, 'SetDouble', ((1, 'guidKey'),(1, 'fValue'),)))
    IMFAttributes.SetGUID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Guid), use_last_error=False)(24, 'SetGUID', ((1, 'guidKey'),(1, 'guidValue'),)))
    IMFAttributes.SetString = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),win32more.Foundation.PWSTR, use_last_error=False)(25, 'SetString', ((1, 'guidKey'),(1, 'wszValue'),)))
    IMFAttributes.SetBlob = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Byte),UInt32, use_last_error=False)(26, 'SetBlob', ((1, 'guidKey'),(1, 'pBuf'),(1, 'cbBufSize'),)))
    IMFAttributes.SetUnknown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),win32more.System.Com.IUnknown_head, use_last_error=False)(27, 'SetUnknown', ((1, 'guidKey'),(1, 'pUnknown'),)))
    IMFAttributes.LockStore = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(28, 'LockStore', ()))
    IMFAttributes.UnlockStore = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(29, 'UnlockStore', ()))
    IMFAttributes.GetCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(30, 'GetCount', ((1, 'pcItems'),)))
    IMFAttributes.GetItemByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(31, 'GetItemByIndex', ((1, 'unIndex'),(1, 'pguidKey'),(1, 'pValue'),)))
    IMFAttributes.CopyAllItems = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head, use_last_error=False)(32, 'CopyAllItems', ((1, 'pDest'),)))
    win32more.System.Com.IUnknown
    return IMFAttributes
MF_ATTRIBUTE_SERIALIZE_OPTIONS = Int32
MF_ATTRIBUTE_SERIALIZE_UNKNOWN_BYREF = 1
def _define_IMFMediaBuffer_head():
    class IMFMediaBuffer(win32more.System.Com.IUnknown_head):
        Guid = Guid('045fa593-8799-42b8-bc8d-8968c6453507')
    return IMFMediaBuffer
def _define_IMFMediaBuffer():
    IMFMediaBuffer = win32more.Media.MediaFoundation.IMFMediaBuffer_head
    IMFMediaBuffer.Lock = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(c_char_p_no),POINTER(UInt32),POINTER(UInt32), use_last_error=False)(3, 'Lock', ((1, 'ppbBuffer'),(1, 'pcbMaxLength'),(1, 'pcbCurrentLength'),)))
    IMFMediaBuffer.Unlock = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(4, 'Unlock', ()))
    IMFMediaBuffer.GetCurrentLength = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(5, 'GetCurrentLength', ((1, 'pcbCurrentLength'),)))
    IMFMediaBuffer.SetCurrentLength = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(6, 'SetCurrentLength', ((1, 'cbCurrentLength'),)))
    IMFMediaBuffer.GetMaxLength = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(7, 'GetMaxLength', ((1, 'pcbMaxLength'),)))
    win32more.System.Com.IUnknown
    return IMFMediaBuffer
def _define_IMFSample_head():
    class IMFSample(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('c40a00f2-b93a-4d80-ae8c-5a1c634f58e4')
    return IMFSample
def _define_IMFSample():
    IMFSample = win32more.Media.MediaFoundation.IMFSample_head
    IMFSample.GetSampleFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(33, 'GetSampleFlags', ((1, 'pdwSampleFlags'),)))
    IMFSample.SetSampleFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(34, 'SetSampleFlags', ((1, 'dwSampleFlags'),)))
    IMFSample.GetSampleTime = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int64), use_last_error=False)(35, 'GetSampleTime', ((1, 'phnsSampleTime'),)))
    IMFSample.SetSampleTime = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int64, use_last_error=False)(36, 'SetSampleTime', ((1, 'hnsSampleTime'),)))
    IMFSample.GetSampleDuration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int64), use_last_error=False)(37, 'GetSampleDuration', ((1, 'phnsSampleDuration'),)))
    IMFSample.SetSampleDuration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int64, use_last_error=False)(38, 'SetSampleDuration', ((1, 'hnsSampleDuration'),)))
    IMFSample.GetBufferCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(39, 'GetBufferCount', ((1, 'pdwBufferCount'),)))
    IMFSample.GetBufferByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaBuffer_head), use_last_error=False)(40, 'GetBufferByIndex', ((1, 'dwIndex'),(1, 'ppBuffer'),)))
    IMFSample.ConvertToContiguousBuffer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaBuffer_head), use_last_error=False)(41, 'ConvertToContiguousBuffer', ((1, 'ppBuffer'),)))
    IMFSample.AddBuffer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaBuffer_head, use_last_error=False)(42, 'AddBuffer', ((1, 'pBuffer'),)))
    IMFSample.RemoveBufferByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(43, 'RemoveBufferByIndex', ((1, 'dwIndex'),)))
    IMFSample.RemoveAllBuffers = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(44, 'RemoveAllBuffers', ()))
    IMFSample.GetTotalLength = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(45, 'GetTotalLength', ((1, 'pcbTotalLength'),)))
    IMFSample.CopyToBuffer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaBuffer_head, use_last_error=False)(46, 'CopyToBuffer', ((1, 'pBuffer'),)))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFSample
def _define_IMF2DBuffer_head():
    class IMF2DBuffer(win32more.System.Com.IUnknown_head):
        Guid = Guid('7dc9d5f9-9ed9-44ec-9bbf-0600bb589fbb')
    return IMF2DBuffer
def _define_IMF2DBuffer():
    IMF2DBuffer = win32more.Media.MediaFoundation.IMF2DBuffer_head
    IMF2DBuffer.Lock2D = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(c_char_p_no),POINTER(Int32), use_last_error=False)(3, 'Lock2D', ((1, 'ppbScanline0'),(1, 'plPitch'),)))
    IMF2DBuffer.Unlock2D = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(4, 'Unlock2D', ()))
    IMF2DBuffer.GetScanline0AndPitch = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(c_char_p_no),POINTER(Int32), use_last_error=False)(5, 'GetScanline0AndPitch', ((1, 'pbScanline0'),(1, 'plPitch'),)))
    IMF2DBuffer.IsContiguousFormat = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(6, 'IsContiguousFormat', ((1, 'pfIsContiguous'),)))
    IMF2DBuffer.GetContiguousLength = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(7, 'GetContiguousLength', ((1, 'pcbLength'),)))
    IMF2DBuffer.ContiguousCopyTo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32, use_last_error=False)(8, 'ContiguousCopyTo', ((1, 'pbDestBuffer'),(1, 'cbDestBuffer'),)))
    IMF2DBuffer.ContiguousCopyFrom = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32, use_last_error=False)(9, 'ContiguousCopyFrom', ((1, 'pbSrcBuffer'),(1, 'cbSrcBuffer'),)))
    win32more.System.Com.IUnknown
    return IMF2DBuffer
MF2DBuffer_LockFlags = Int32
MF2DBuffer_LockFlags_LockTypeMask = 3
MF2DBuffer_LockFlags_Read = 1
MF2DBuffer_LockFlags_Write = 2
MF2DBuffer_LockFlags_ReadWrite = 3
MF2DBuffer_LockFlags_ForceDWORD = 2147483647
def _define_IMF2DBuffer2_head():
    class IMF2DBuffer2(win32more.Media.MediaFoundation.IMF2DBuffer_head):
        Guid = Guid('33ae5ea6-4316-436f-8ddd-d73d22f829ec')
    return IMF2DBuffer2
def _define_IMF2DBuffer2():
    IMF2DBuffer2 = win32more.Media.MediaFoundation.IMF2DBuffer2_head
    IMF2DBuffer2.Lock2DSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF2DBuffer_LockFlags,POINTER(c_char_p_no),POINTER(Int32),POINTER(c_char_p_no),POINTER(UInt32), use_last_error=False)(10, 'Lock2DSize', ((1, 'lockFlags'),(1, 'ppbScanline0'),(1, 'plPitch'),(1, 'ppbBufferStart'),(1, 'pcbBufferLength'),)))
    IMF2DBuffer2.Copy2DTo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMF2DBuffer2_head, use_last_error=False)(11, 'Copy2DTo', ((1, 'pDestBuffer'),)))
    win32more.Media.MediaFoundation.IMF2DBuffer
    return IMF2DBuffer2
def _define_IMFDXGIBuffer_head():
    class IMFDXGIBuffer(win32more.System.Com.IUnknown_head):
        Guid = Guid('e7174cfa-1c9e-48b1-8866-626226bfc258')
    return IMFDXGIBuffer
def _define_IMFDXGIBuffer():
    IMFDXGIBuffer = win32more.Media.MediaFoundation.IMFDXGIBuffer_head
    IMFDXGIBuffer.GetResource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(3, 'GetResource', ((1, 'riid'),(1, 'ppvObject'),)))
    IMFDXGIBuffer.GetSubresourceIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(4, 'GetSubresourceIndex', ((1, 'puSubresource'),)))
    IMFDXGIBuffer.GetUnknown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Guid),POINTER(c_void_p), use_last_error=False)(5, 'GetUnknown', ((1, 'guid'),(1, 'riid'),(1, 'ppvObject'),)))
    IMFDXGIBuffer.SetUnknown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),win32more.System.Com.IUnknown_head, use_last_error=False)(6, 'SetUnknown', ((1, 'guid'),(1, 'pUnkData'),)))
    win32more.System.Com.IUnknown
    return IMFDXGIBuffer
def _define_IMFMediaType_head():
    class IMFMediaType(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('44ae0fa8-ea31-4109-8d2e-4cae4997c555')
    return IMFMediaType
def _define_IMFMediaType():
    IMFMediaType = win32more.Media.MediaFoundation.IMFMediaType_head
    IMFMediaType.GetMajorType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid), use_last_error=False)(33, 'GetMajorType', ((1, 'pguidMajorType'),)))
    IMFMediaType.IsCompressedFormat = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(34, 'IsCompressedFormat', ((1, 'pfCompressed'),)))
    IMFMediaType.IsEqual = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(UInt32), use_last_error=False)(35, 'IsEqual', ((1, 'pIMediaType'),(1, 'pdwFlags'),)))
    IMFMediaType.GetRepresentation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,POINTER(c_void_p), use_last_error=False)(36, 'GetRepresentation', ((1, 'guidRepresentation'),(1, 'ppvRepresentation'),)))
    IMFMediaType.FreeRepresentation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,c_void_p, use_last_error=False)(37, 'FreeRepresentation', ((1, 'guidRepresentation'),(1, 'pvRepresentation'),)))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFMediaType
def _define_IMFAudioMediaType_head():
    class IMFAudioMediaType(win32more.Media.MediaFoundation.IMFMediaType_head):
        Guid = Guid('26a0adc3-ce26-4672-9304-69552edd3faf')
    return IMFAudioMediaType
def _define_IMFAudioMediaType():
    IMFAudioMediaType = win32more.Media.MediaFoundation.IMFAudioMediaType_head
    IMFAudioMediaType.GetAudioFormat = COMMETHOD(WINFUNCTYPE(POINTER(win32more.Media.Audio.WAVEFORMATEX_head), use_last_error=False)(38, 'GetAudioFormat', ()))
    win32more.Media.MediaFoundation.IMFMediaType
    return IMFAudioMediaType
def _define_MFT_REGISTER_TYPE_INFO_head():
    class MFT_REGISTER_TYPE_INFO(Structure):
        pass
    return MFT_REGISTER_TYPE_INFO
def _define_MFT_REGISTER_TYPE_INFO():
    MFT_REGISTER_TYPE_INFO = win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head
    MFT_REGISTER_TYPE_INFO._fields_ = [
        ("guidMajorType", Guid),
        ("guidSubtype", Guid),
    ]
    return MFT_REGISTER_TYPE_INFO
MFVideoInterlaceMode = Int32
MFVideoInterlace_Unknown = 0
MFVideoInterlace_Progressive = 2
MFVideoInterlace_FieldInterleavedUpperFirst = 3
MFVideoInterlace_FieldInterleavedLowerFirst = 4
MFVideoInterlace_FieldSingleUpper = 5
MFVideoInterlace_FieldSingleLower = 6
MFVideoInterlace_MixedInterlaceOrProgressive = 7
MFVideoInterlace_Last = 8
MFVideoInterlace_ForceDWORD = 2147483647
MFVideoTransferFunction = Int32
MFVideoTransFunc_Unknown = 0
MFVideoTransFunc_10 = 1
MFVideoTransFunc_18 = 2
MFVideoTransFunc_20 = 3
MFVideoTransFunc_22 = 4
MFVideoTransFunc_709 = 5
MFVideoTransFunc_240M = 6
MFVideoTransFunc_sRGB = 7
MFVideoTransFunc_28 = 8
MFVideoTransFunc_Log_100 = 9
MFVideoTransFunc_Log_316 = 10
MFVideoTransFunc_709_sym = 11
MFVideoTransFunc_2020_const = 12
MFVideoTransFunc_2020 = 13
MFVideoTransFunc_26 = 14
MFVideoTransFunc_2084 = 15
MFVideoTransFunc_HLG = 16
MFVideoTransFunc_10_rel = 17
MFVideoTransFunc_Last = 18
MFVideoTransFunc_ForceDWORD = 2147483647
MFVideoPrimaries = Int32
MFVideoPrimaries_Unknown = 0
MFVideoPrimaries_reserved = 1
MFVideoPrimaries_BT709 = 2
MFVideoPrimaries_BT470_2_SysM = 3
MFVideoPrimaries_BT470_2_SysBG = 4
MFVideoPrimaries_SMPTE170M = 5
MFVideoPrimaries_SMPTE240M = 6
MFVideoPrimaries_EBU3213 = 7
MFVideoPrimaries_SMPTE_C = 8
MFVideoPrimaries_BT2020 = 9
MFVideoPrimaries_XYZ = 10
MFVideoPrimaries_DCI_P3 = 11
MFVideoPrimaries_ACES = 12
MFVideoPrimaries_Last = 13
MFVideoPrimaries_ForceDWORD = 2147483647
MFVideoLighting = Int32
MFVideoLighting_Unknown = 0
MFVideoLighting_bright = 1
MFVideoLighting_office = 2
MFVideoLighting_dim = 3
MFVideoLighting_dark = 4
MFVideoLighting_Last = 5
MFVideoLighting_ForceDWORD = 2147483647
MFVideoTransferMatrix = Int32
MFVideoTransferMatrix_Unknown = 0
MFVideoTransferMatrix_BT709 = 1
MFVideoTransferMatrix_BT601 = 2
MFVideoTransferMatrix_SMPTE240M = 3
MFVideoTransferMatrix_BT2020_10 = 4
MFVideoTransferMatrix_BT2020_12 = 5
MFVideoTransferMatrix_Last = 6
MFVideoTransferMatrix_ForceDWORD = 2147483647
MFVideoChromaSubsampling = Int32
MFVideoChromaSubsampling_Unknown = 0
MFVideoChromaSubsampling_ProgressiveChroma = 8
MFVideoChromaSubsampling_Horizontally_Cosited = 4
MFVideoChromaSubsampling_Vertically_Cosited = 2
MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes = 1
MFVideoChromaSubsampling_MPEG2 = 5
MFVideoChromaSubsampling_MPEG1 = 1
MFVideoChromaSubsampling_DV_PAL = 6
MFVideoChromaSubsampling_Cosited = 7
MFVideoChromaSubsampling_Last = 8
MFVideoChromaSubsampling_ForceDWORD = 2147483647
MFNominalRange = Int32
MFNominalRange_Unknown = 0
MFNominalRange_Normal = 1
MFNominalRange_Wide = 2
MFNominalRange_0_255 = 1
MFNominalRange_16_235 = 2
MFNominalRange_48_208 = 3
MFNominalRange_64_127 = 4
MFNominalRange_Last = 5
MFNominalRange_ForceDWORD = 2147483647
MFVideoFlags = Int32
MFVideoFlag_PAD_TO_Mask = 3
MFVideoFlag_PAD_TO_None = 0
MFVideoFlag_PAD_TO_4x3 = 1
MFVideoFlag_PAD_TO_16x9 = 2
MFVideoFlag_SrcContentHintMask = 28
MFVideoFlag_SrcContentHintNone = 0
MFVideoFlag_SrcContentHint16x9 = 4
MFVideoFlag_SrcContentHint235_1 = 8
MFVideoFlag_AnalogProtected = 32
MFVideoFlag_DigitallyProtected = 64
MFVideoFlag_ProgressiveContent = 128
MFVideoFlag_FieldRepeatCountMask = 1792
MFVideoFlag_FieldRepeatCountShift = 8
MFVideoFlag_ProgressiveSeqReset = 2048
MFVideoFlag_PanScanEnabled = 131072
MFVideoFlag_LowerFieldFirst = 262144
MFVideoFlag_BottomUpLinearRep = 524288
MFVideoFlags_DXVASurface = 1048576
MFVideoFlags_RenderTargetSurface = 4194304
MFVideoFlags_ForceQWORD = 2147483647
def _define_MFRatio_head():
    class MFRatio(Structure):
        pass
    return MFRatio
def _define_MFRatio():
    MFRatio = win32more.Media.MediaFoundation.MFRatio_head
    MFRatio._fields_ = [
        ("Numerator", UInt32),
        ("Denominator", UInt32),
    ]
    return MFRatio
def _define_MFOffset_head():
    class MFOffset(Structure):
        pass
    return MFOffset
def _define_MFOffset():
    MFOffset = win32more.Media.MediaFoundation.MFOffset_head
    MFOffset._fields_ = [
        ("fract", UInt16),
        ("value", Int16),
    ]
    return MFOffset
def _define_MFVideoArea_head():
    class MFVideoArea(Structure):
        pass
    return MFVideoArea
def _define_MFVideoArea():
    MFVideoArea = win32more.Media.MediaFoundation.MFVideoArea_head
    MFVideoArea._fields_ = [
        ("OffsetX", win32more.Media.MediaFoundation.MFOffset),
        ("OffsetY", win32more.Media.MediaFoundation.MFOffset),
        ("Area", win32more.Foundation.SIZE),
    ]
    return MFVideoArea
def _define_MFVideoInfo_head():
    class MFVideoInfo(Structure):
        pass
    return MFVideoInfo
def _define_MFVideoInfo():
    MFVideoInfo = win32more.Media.MediaFoundation.MFVideoInfo_head
    MFVideoInfo._fields_ = [
        ("dwWidth", UInt32),
        ("dwHeight", UInt32),
        ("PixelAspectRatio", win32more.Media.MediaFoundation.MFRatio),
        ("SourceChromaSubsampling", win32more.Media.MediaFoundation.MFVideoChromaSubsampling),
        ("InterlaceMode", win32more.Media.MediaFoundation.MFVideoInterlaceMode),
        ("TransferFunction", win32more.Media.MediaFoundation.MFVideoTransferFunction),
        ("ColorPrimaries", win32more.Media.MediaFoundation.MFVideoPrimaries),
        ("TransferMatrix", win32more.Media.MediaFoundation.MFVideoTransferMatrix),
        ("SourceLighting", win32more.Media.MediaFoundation.MFVideoLighting),
        ("FramesPerSecond", win32more.Media.MediaFoundation.MFRatio),
        ("NominalRange", win32more.Media.MediaFoundation.MFNominalRange),
        ("GeometricAperture", win32more.Media.MediaFoundation.MFVideoArea),
        ("MinimumDisplayAperture", win32more.Media.MediaFoundation.MFVideoArea),
        ("PanScanAperture", win32more.Media.MediaFoundation.MFVideoArea),
        ("VideoFlags", UInt64),
    ]
    return MFVideoInfo
def _define_MFAYUVSample_head():
    class MFAYUVSample(Structure):
        pass
    return MFAYUVSample
def _define_MFAYUVSample():
    MFAYUVSample = win32more.Media.MediaFoundation.MFAYUVSample_head
    MFAYUVSample._fields_ = [
        ("bCrValue", Byte),
        ("bCbValue", Byte),
        ("bYValue", Byte),
        ("bSampleAlpha8", Byte),
    ]
    return MFAYUVSample
def _define_MFARGB_head():
    class MFARGB(Structure):
        pass
    return MFARGB
def _define_MFARGB():
    MFARGB = win32more.Media.MediaFoundation.MFARGB_head
    MFARGB._fields_ = [
        ("rgbBlue", Byte),
        ("rgbGreen", Byte),
        ("rgbRed", Byte),
        ("rgbAlpha", Byte),
    ]
    return MFARGB
def _define_MFPaletteEntry_head():
    class MFPaletteEntry(Union):
        pass
    return MFPaletteEntry
def _define_MFPaletteEntry():
    MFPaletteEntry = win32more.Media.MediaFoundation.MFPaletteEntry_head
    MFPaletteEntry._fields_ = [
        ("ARGB", win32more.Media.MediaFoundation.MFARGB),
        ("AYCbCr", win32more.Media.MediaFoundation.MFAYUVSample),
    ]
    return MFPaletteEntry
def _define_MFVideoSurfaceInfo_head():
    class MFVideoSurfaceInfo(Structure):
        pass
    return MFVideoSurfaceInfo
def _define_MFVideoSurfaceInfo():
    MFVideoSurfaceInfo = win32more.Media.MediaFoundation.MFVideoSurfaceInfo_head
    MFVideoSurfaceInfo._fields_ = [
        ("Format", UInt32),
        ("PaletteEntries", UInt32),
        ("Palette", win32more.Media.MediaFoundation.MFPaletteEntry * 0),
    ]
    return MFVideoSurfaceInfo
def _define_MFVideoCompressedInfo_head():
    class MFVideoCompressedInfo(Structure):
        pass
    return MFVideoCompressedInfo
def _define_MFVideoCompressedInfo():
    MFVideoCompressedInfo = win32more.Media.MediaFoundation.MFVideoCompressedInfo_head
    MFVideoCompressedInfo._fields_ = [
        ("AvgBitrate", Int64),
        ("AvgBitErrorRate", Int64),
        ("MaxKeyFrameSpacing", UInt32),
    ]
    return MFVideoCompressedInfo
def _define_MFVIDEOFORMAT_head():
    class MFVIDEOFORMAT(Structure):
        pass
    return MFVIDEOFORMAT
def _define_MFVIDEOFORMAT():
    MFVIDEOFORMAT = win32more.Media.MediaFoundation.MFVIDEOFORMAT_head
    MFVIDEOFORMAT._fields_ = [
        ("dwSize", UInt32),
        ("videoInfo", win32more.Media.MediaFoundation.MFVideoInfo),
        ("guidFormat", Guid),
        ("compressedInfo", win32more.Media.MediaFoundation.MFVideoCompressedInfo),
        ("surfaceInfo", win32more.Media.MediaFoundation.MFVideoSurfaceInfo),
    ]
    return MFVIDEOFORMAT
MFStandardVideoFormat = Int32
MFStdVideoFormat_reserved = 0
MFStdVideoFormat_NTSC = 1
MFStdVideoFormat_PAL = 2
MFStdVideoFormat_DVD_NTSC = 3
MFStdVideoFormat_DVD_PAL = 4
MFStdVideoFormat_DV_PAL = 5
MFStdVideoFormat_DV_NTSC = 6
MFStdVideoFormat_ATSC_SD480i = 7
MFStdVideoFormat_ATSC_HD1080i = 8
MFStdVideoFormat_ATSC_HD720p = 9
def _define_IMFVideoMediaType_head():
    class IMFVideoMediaType(win32more.Media.MediaFoundation.IMFMediaType_head):
        Guid = Guid('b99f381f-a8f9-47a2-a5af-ca3a225a3890')
    return IMFVideoMediaType
def _define_IMFVideoMediaType():
    IMFVideoMediaType = win32more.Media.MediaFoundation.IMFVideoMediaType_head
    IMFVideoMediaType.GetVideoFormat = COMMETHOD(WINFUNCTYPE(POINTER(win32more.Media.MediaFoundation.MFVIDEOFORMAT_head), use_last_error=False)(38, 'GetVideoFormat', ()))
    IMFVideoMediaType.GetVideoRepresentation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,POINTER(c_void_p),Int32, use_last_error=False)(39, 'GetVideoRepresentation', ((1, 'guidRepresentation'),(1, 'ppvRepresentation'),(1, 'lStride'),)))
    win32more.Media.MediaFoundation.IMFMediaType
    return IMFVideoMediaType
def _define_IMFAsyncResult_head():
    class IMFAsyncResult(win32more.System.Com.IUnknown_head):
        Guid = Guid('ac6b7889-0740-4d51-8619-905994a55cc6')
    return IMFAsyncResult
def _define_IMFAsyncResult():
    IMFAsyncResult = win32more.Media.MediaFoundation.IMFAsyncResult_head
    IMFAsyncResult.GetState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.IUnknown_head), use_last_error=False)(3, 'GetState', ((1, 'ppunkState'),)))
    IMFAsyncResult.GetStatus = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(4, 'GetStatus', ()))
    IMFAsyncResult.SetStatus = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HRESULT, use_last_error=False)(5, 'SetStatus', ((1, 'hrStatus'),)))
    IMFAsyncResult.GetObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.IUnknown_head), use_last_error=False)(6, 'GetObject', ((1, 'ppObject'),)))
    IMFAsyncResult.GetStateNoAddRef = COMMETHOD(WINFUNCTYPE(win32more.System.Com.IUnknown_head, use_last_error=False)(7, 'GetStateNoAddRef', ()))
    win32more.System.Com.IUnknown
    return IMFAsyncResult
def _define_IMFAsyncCallback_head():
    class IMFAsyncCallback(win32more.System.Com.IUnknown_head):
        Guid = Guid('a27003cf-2354-4f2a-8d6a-ab7cff15437e')
    return IMFAsyncCallback
def _define_IMFAsyncCallback():
    IMFAsyncCallback = win32more.Media.MediaFoundation.IMFAsyncCallback_head
    IMFAsyncCallback.GetParameters = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(UInt32), use_last_error=False)(3, 'GetParameters', ((1, 'pdwFlags'),(1, 'pdwQueue'),)))
    IMFAsyncCallback.Invoke = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head, use_last_error=False)(4, 'Invoke', ((1, 'pAsyncResult'),)))
    win32more.System.Com.IUnknown
    return IMFAsyncCallback
def _define_IMFAsyncCallbackLogging_head():
    class IMFAsyncCallbackLogging(win32more.Media.MediaFoundation.IMFAsyncCallback_head):
        Guid = Guid('c7a4dca1-f5f0-47b6-b92b-bf0106d25791')
    return IMFAsyncCallbackLogging
def _define_IMFAsyncCallbackLogging():
    IMFAsyncCallbackLogging = win32more.Media.MediaFoundation.IMFAsyncCallbackLogging_head
    IMFAsyncCallbackLogging.GetObjectPointer = COMMETHOD(WINFUNCTYPE(c_void_p, use_last_error=False)(5, 'GetObjectPointer', ()))
    IMFAsyncCallbackLogging.GetObjectTag = COMMETHOD(WINFUNCTYPE(UInt32, use_last_error=False)(6, 'GetObjectTag', ()))
    win32more.Media.MediaFoundation.IMFAsyncCallback
    return IMFAsyncCallbackLogging
MF_EVENT_TYPE = Int32
MF_EVENT_TYPE_MEUnknown = 0
MF_EVENT_TYPE_MEError = 1
MF_EVENT_TYPE_MEExtendedType = 2
MF_EVENT_TYPE_MENonFatalError = 3
MF_EVENT_TYPE_MEGenericV1Anchor = 3
MF_EVENT_TYPE_MESessionUnknown = 100
MF_EVENT_TYPE_MESessionTopologySet = 101
MF_EVENT_TYPE_MESessionTopologiesCleared = 102
MF_EVENT_TYPE_MESessionStarted = 103
MF_EVENT_TYPE_MESessionPaused = 104
MF_EVENT_TYPE_MESessionStopped = 105
MF_EVENT_TYPE_MESessionClosed = 106
MF_EVENT_TYPE_MESessionEnded = 107
MF_EVENT_TYPE_MESessionRateChanged = 108
MF_EVENT_TYPE_MESessionScrubSampleComplete = 109
MF_EVENT_TYPE_MESessionCapabilitiesChanged = 110
MF_EVENT_TYPE_MESessionTopologyStatus = 111
MF_EVENT_TYPE_MESessionNotifyPresentationTime = 112
MF_EVENT_TYPE_MENewPresentation = 113
MF_EVENT_TYPE_MELicenseAcquisitionStart = 114
MF_EVENT_TYPE_MELicenseAcquisitionCompleted = 115
MF_EVENT_TYPE_MEIndividualizationStart = 116
MF_EVENT_TYPE_MEIndividualizationCompleted = 117
MF_EVENT_TYPE_MEEnablerProgress = 118
MF_EVENT_TYPE_MEEnablerCompleted = 119
MF_EVENT_TYPE_MEPolicyError = 120
MF_EVENT_TYPE_MEPolicyReport = 121
MF_EVENT_TYPE_MEBufferingStarted = 122
MF_EVENT_TYPE_MEBufferingStopped = 123
MF_EVENT_TYPE_MEConnectStart = 124
MF_EVENT_TYPE_MEConnectEnd = 125
MF_EVENT_TYPE_MEReconnectStart = 126
MF_EVENT_TYPE_MEReconnectEnd = 127
MF_EVENT_TYPE_MERendererEvent = 128
MF_EVENT_TYPE_MESessionStreamSinkFormatChanged = 129
MF_EVENT_TYPE_MESessionV1Anchor = 129
MF_EVENT_TYPE_MESourceUnknown = 200
MF_EVENT_TYPE_MESourceStarted = 201
MF_EVENT_TYPE_MEStreamStarted = 202
MF_EVENT_TYPE_MESourceSeeked = 203
MF_EVENT_TYPE_MEStreamSeeked = 204
MF_EVENT_TYPE_MENewStream = 205
MF_EVENT_TYPE_MEUpdatedStream = 206
MF_EVENT_TYPE_MESourceStopped = 207
MF_EVENT_TYPE_MEStreamStopped = 208
MF_EVENT_TYPE_MESourcePaused = 209
MF_EVENT_TYPE_MEStreamPaused = 210
MF_EVENT_TYPE_MEEndOfPresentation = 211
MF_EVENT_TYPE_MEEndOfStream = 212
MF_EVENT_TYPE_MEMediaSample = 213
MF_EVENT_TYPE_MEStreamTick = 214
MF_EVENT_TYPE_MEStreamThinMode = 215
MF_EVENT_TYPE_MEStreamFormatChanged = 216
MF_EVENT_TYPE_MESourceRateChanged = 217
MF_EVENT_TYPE_MEEndOfPresentationSegment = 218
MF_EVENT_TYPE_MESourceCharacteristicsChanged = 219
MF_EVENT_TYPE_MESourceRateChangeRequested = 220
MF_EVENT_TYPE_MESourceMetadataChanged = 221
MF_EVENT_TYPE_MESequencerSourceTopologyUpdated = 222
MF_EVENT_TYPE_MESourceV1Anchor = 222
MF_EVENT_TYPE_MESinkUnknown = 300
MF_EVENT_TYPE_MEStreamSinkStarted = 301
MF_EVENT_TYPE_MEStreamSinkStopped = 302
MF_EVENT_TYPE_MEStreamSinkPaused = 303
MF_EVENT_TYPE_MEStreamSinkRateChanged = 304
MF_EVENT_TYPE_MEStreamSinkRequestSample = 305
MF_EVENT_TYPE_MEStreamSinkMarker = 306
MF_EVENT_TYPE_MEStreamSinkPrerolled = 307
MF_EVENT_TYPE_MEStreamSinkScrubSampleComplete = 308
MF_EVENT_TYPE_MEStreamSinkFormatChanged = 309
MF_EVENT_TYPE_MEStreamSinkDeviceChanged = 310
MF_EVENT_TYPE_MEQualityNotify = 311
MF_EVENT_TYPE_MESinkInvalidated = 312
MF_EVENT_TYPE_MEAudioSessionNameChanged = 313
MF_EVENT_TYPE_MEAudioSessionVolumeChanged = 314
MF_EVENT_TYPE_MEAudioSessionDeviceRemoved = 315
MF_EVENT_TYPE_MEAudioSessionServerShutdown = 316
MF_EVENT_TYPE_MEAudioSessionGroupingParamChanged = 317
MF_EVENT_TYPE_MEAudioSessionIconChanged = 318
MF_EVENT_TYPE_MEAudioSessionFormatChanged = 319
MF_EVENT_TYPE_MEAudioSessionDisconnected = 320
MF_EVENT_TYPE_MEAudioSessionExclusiveModeOverride = 321
MF_EVENT_TYPE_MESinkV1Anchor = 321
MF_EVENT_TYPE_MECaptureAudioSessionVolumeChanged = 322
MF_EVENT_TYPE_MECaptureAudioSessionDeviceRemoved = 323
MF_EVENT_TYPE_MECaptureAudioSessionFormatChanged = 324
MF_EVENT_TYPE_MECaptureAudioSessionDisconnected = 325
MF_EVENT_TYPE_MECaptureAudioSessionExclusiveModeOverride = 326
MF_EVENT_TYPE_MECaptureAudioSessionServerShutdown = 327
MF_EVENT_TYPE_MESinkV2Anchor = 327
MF_EVENT_TYPE_METrustUnknown = 400
MF_EVENT_TYPE_MEPolicyChanged = 401
MF_EVENT_TYPE_MEContentProtectionMessage = 402
MF_EVENT_TYPE_MEPolicySet = 403
MF_EVENT_TYPE_METrustV1Anchor = 403
MF_EVENT_TYPE_MEWMDRMLicenseBackupCompleted = 500
MF_EVENT_TYPE_MEWMDRMLicenseBackupProgress = 501
MF_EVENT_TYPE_MEWMDRMLicenseRestoreCompleted = 502
MF_EVENT_TYPE_MEWMDRMLicenseRestoreProgress = 503
MF_EVENT_TYPE_MEWMDRMLicenseAcquisitionCompleted = 506
MF_EVENT_TYPE_MEWMDRMIndividualizationCompleted = 508
MF_EVENT_TYPE_MEWMDRMIndividualizationProgress = 513
MF_EVENT_TYPE_MEWMDRMProximityCompleted = 514
MF_EVENT_TYPE_MEWMDRMLicenseStoreCleaned = 515
MF_EVENT_TYPE_MEWMDRMRevocationDownloadCompleted = 516
MF_EVENT_TYPE_MEWMDRMV1Anchor = 516
MF_EVENT_TYPE_METransformUnknown = 600
MF_EVENT_TYPE_METransformNeedInput = 601
MF_EVENT_TYPE_METransformHaveOutput = 602
MF_EVENT_TYPE_METransformDrainComplete = 603
MF_EVENT_TYPE_METransformMarker = 604
MF_EVENT_TYPE_METransformInputStreamStateChanged = 605
MF_EVENT_TYPE_MEByteStreamCharacteristicsChanged = 700
MF_EVENT_TYPE_MEVideoCaptureDeviceRemoved = 800
MF_EVENT_TYPE_MEVideoCaptureDevicePreempted = 801
MF_EVENT_TYPE_MEStreamSinkFormatInvalidated = 802
MF_EVENT_TYPE_MEEncodingParameters = 803
MF_EVENT_TYPE_MEContentProtectionMetadata = 900
MF_EVENT_TYPE_MEDeviceThermalStateChanged = 950
MF_EVENT_TYPE_MEReservedMax = 10000
def _define_IMFMediaEvent_head():
    class IMFMediaEvent(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('df598932-f10c-4e39-bba2-c308f101daa3')
    return IMFMediaEvent
def _define_IMFMediaEvent():
    IMFMediaEvent = win32more.Media.MediaFoundation.IMFMediaEvent_head
    IMFMediaEvent.GetType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(33, 'GetType', ((1, 'pmet'),)))
    IMFMediaEvent.GetExtendedType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid), use_last_error=False)(34, 'GetExtendedType', ((1, 'pguidExtendedType'),)))
    IMFMediaEvent.GetStatus = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.HRESULT), use_last_error=False)(35, 'GetStatus', ((1, 'phrStatus'),)))
    IMFMediaEvent.GetValue = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(36, 'GetValue', ((1, 'pvValue'),)))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFMediaEvent
def _define_IMFMediaEventGenerator_head():
    class IMFMediaEventGenerator(win32more.System.Com.IUnknown_head):
        Guid = Guid('2cd0bd52-bcd5-4b89-b62c-eadc0c031e7d')
    return IMFMediaEventGenerator
def _define_IMFMediaEventGenerator():
    IMFMediaEventGenerator = win32more.Media.MediaFoundation.IMFMediaEventGenerator_head
    IMFMediaEventGenerator.GetEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS,POINTER(win32more.Media.MediaFoundation.IMFMediaEvent_head), use_last_error=False)(3, 'GetEvent', ((1, 'dwFlags'),(1, 'ppEvent'),)))
    IMFMediaEventGenerator.BeginGetEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(4, 'BeginGetEvent', ((1, 'pCallback'),(1, 'punkState'),)))
    IMFMediaEventGenerator.EndGetEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(win32more.Media.MediaFoundation.IMFMediaEvent_head), use_last_error=False)(5, 'EndGetEvent', ((1, 'pResult'),(1, 'ppEvent'),)))
    IMFMediaEventGenerator.QueueEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),win32more.Foundation.HRESULT,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(6, 'QueueEvent', ((1, 'met'),(1, 'guidExtendedType'),(1, 'hrStatus'),(1, 'pvValue'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEventGenerator
def _define_IMFRemoteAsyncCallback_head():
    class IMFRemoteAsyncCallback(win32more.System.Com.IUnknown_head):
        Guid = Guid('a27003d0-2354-4f2a-8d6a-ab7cff15437e')
    return IMFRemoteAsyncCallback
def _define_IMFRemoteAsyncCallback():
    IMFRemoteAsyncCallback = win32more.Media.MediaFoundation.IMFRemoteAsyncCallback_head
    IMFRemoteAsyncCallback.Invoke = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head, use_last_error=False)(3, 'Invoke', ((1, 'hr'),(1, 'pRemoteResult'),)))
    win32more.System.Com.IUnknown
    return IMFRemoteAsyncCallback
MFBYTESTREAM_SEEK_ORIGIN = Int32
MFBYTESTREAM_SEEK_ORIGIN_msoBegin = 0
MFBYTESTREAM_SEEK_ORIGIN_msoCurrent = 1
def _define_IMFByteStream_head():
    class IMFByteStream(win32more.System.Com.IUnknown_head):
        Guid = Guid('ad4c1b00-4bf7-422f-9175-756693d9130d')
    return IMFByteStream
def _define_IMFByteStream():
    IMFByteStream = win32more.Media.MediaFoundation.IMFByteStream_head
    IMFByteStream.GetCapabilities = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(3, 'GetCapabilities', ((1, 'pdwCapabilities'),)))
    IMFByteStream.GetLength = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64), use_last_error=False)(4, 'GetLength', ((1, 'pqwLength'),)))
    IMFByteStream.SetLength = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64, use_last_error=False)(5, 'SetLength', ((1, 'qwLength'),)))
    IMFByteStream.GetCurrentPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64), use_last_error=False)(6, 'GetCurrentPosition', ((1, 'pqwPosition'),)))
    IMFByteStream.SetCurrentPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64, use_last_error=False)(7, 'SetCurrentPosition', ((1, 'qwPosition'),)))
    IMFByteStream.IsEndOfStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(8, 'IsEndOfStream', ((1, 'pfEndOfStream'),)))
    IMFByteStream.Read = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Byte),UInt32,POINTER(UInt32), use_last_error=False)(9, 'Read', ((1, 'pb'),(1, 'cb'),(1, 'pcbRead'),)))
    IMFByteStream.BeginRead = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(10, 'BeginRead', ((1, 'pb'),(1, 'cb'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFByteStream.EndRead = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(UInt32), use_last_error=False)(11, 'EndRead', ((1, 'pResult'),(1, 'pcbRead'),)))
    IMFByteStream.Write = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Byte),UInt32,POINTER(UInt32), use_last_error=False)(12, 'Write', ((1, 'pb'),(1, 'cb'),(1, 'pcbWritten'),)))
    IMFByteStream.BeginWrite = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(13, 'BeginWrite', ((1, 'pb'),(1, 'cb'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFByteStream.EndWrite = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(UInt32), use_last_error=False)(14, 'EndWrite', ((1, 'pResult'),(1, 'pcbWritten'),)))
    IMFByteStream.Seek = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFBYTESTREAM_SEEK_ORIGIN,Int64,UInt32,POINTER(UInt64), use_last_error=False)(15, 'Seek', ((1, 'SeekOrigin'),(1, 'llSeekOffset'),(1, 'dwSeekFlags'),(1, 'pqwCurrentPosition'),)))
    IMFByteStream.Flush = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(16, 'Flush', ()))
    IMFByteStream.Close = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(17, 'Close', ()))
    win32more.System.Com.IUnknown
    return IMFByteStream
def _define_IMFByteStreamProxyClassFactory_head():
    class IMFByteStreamProxyClassFactory(win32more.System.Com.IUnknown_head):
        Guid = Guid('a6b43f84-5c0a-42e8-a44d-b1857a76992f')
    return IMFByteStreamProxyClassFactory
def _define_IMFByteStreamProxyClassFactory():
    IMFByteStreamProxyClassFactory = win32more.Media.MediaFoundation.IMFByteStreamProxyClassFactory_head
    IMFByteStreamProxyClassFactory.CreateByteStreamProxy = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(3, 'CreateByteStreamProxy', ((1, 'pByteStream'),(1, 'pAttributes'),(1, 'riid'),(1, 'ppvObject'),)))
    win32more.System.Com.IUnknown
    return IMFByteStreamProxyClassFactory
MF_FILE_ACCESSMODE = Int32
MF_ACCESSMODE_READ = 1
MF_ACCESSMODE_WRITE = 2
MF_ACCESSMODE_READWRITE = 3
MF_FILE_OPENMODE = Int32
MF_OPENMODE_FAIL_IF_NOT_EXIST = 0
MF_OPENMODE_FAIL_IF_EXIST = 1
MF_OPENMODE_RESET_IF_EXIST = 2
MF_OPENMODE_APPEND_IF_EXIST = 3
MF_OPENMODE_DELETE_IF_EXIST = 4
MF_FILE_FLAGS = Int32
MF_FILEFLAGS_NONE = 0
MF_FILEFLAGS_NOBUFFERING = 1
MF_FILEFLAGS_ALLOW_WRITE_SHARING = 2
def _define_IMFSampleOutputStream_head():
    class IMFSampleOutputStream(win32more.System.Com.IUnknown_head):
        Guid = Guid('8feed468-6f7e-440d-869a-49bdd283ad0d')
    return IMFSampleOutputStream
def _define_IMFSampleOutputStream():
    IMFSampleOutputStream = win32more.Media.MediaFoundation.IMFSampleOutputStream_head
    IMFSampleOutputStream.BeginWriteSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSample_head,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(3, 'BeginWriteSample', ((1, 'pSample'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFSampleOutputStream.EndWriteSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head, use_last_error=False)(4, 'EndWriteSample', ((1, 'pResult'),)))
    IMFSampleOutputStream.Close = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(5, 'Close', ()))
    win32more.System.Com.IUnknown
    return IMFSampleOutputStream
def _define_IMFCollection_head():
    class IMFCollection(win32more.System.Com.IUnknown_head):
        Guid = Guid('5bc8a76b-869a-46a3-9b03-fa218a66aebe')
    return IMFCollection
def _define_IMFCollection():
    IMFCollection = win32more.Media.MediaFoundation.IMFCollection_head
    IMFCollection.GetElementCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(3, 'GetElementCount', ((1, 'pcElements'),)))
    IMFCollection.GetElement = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.System.Com.IUnknown_head), use_last_error=False)(4, 'GetElement', ((1, 'dwElementIndex'),(1, 'ppUnkElement'),)))
    IMFCollection.AddElement = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head, use_last_error=False)(5, 'AddElement', ((1, 'pUnkElement'),)))
    IMFCollection.RemoveElement = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.System.Com.IUnknown_head), use_last_error=False)(6, 'RemoveElement', ((1, 'dwElementIndex'),(1, 'ppUnkElement'),)))
    IMFCollection.InsertElementAt = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.System.Com.IUnknown_head, use_last_error=False)(7, 'InsertElementAt', ((1, 'dwIndex'),(1, 'pUnknown'),)))
    IMFCollection.RemoveAllElements = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(8, 'RemoveAllElements', ()))
    win32more.System.Com.IUnknown
    return IMFCollection
def _define_IMFMediaEventQueue_head():
    class IMFMediaEventQueue(win32more.System.Com.IUnknown_head):
        Guid = Guid('36f846fc-2256-48b6-b58e-e2b638316581')
    return IMFMediaEventQueue
def _define_IMFMediaEventQueue():
    IMFMediaEventQueue = win32more.Media.MediaFoundation.IMFMediaEventQueue_head
    IMFMediaEventQueue.GetEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaEvent_head), use_last_error=False)(3, 'GetEvent', ((1, 'dwFlags'),(1, 'ppEvent'),)))
    IMFMediaEventQueue.BeginGetEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(4, 'BeginGetEvent', ((1, 'pCallback'),(1, 'punkState'),)))
    IMFMediaEventQueue.EndGetEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(win32more.Media.MediaFoundation.IMFMediaEvent_head), use_last_error=False)(5, 'EndGetEvent', ((1, 'pResult'),(1, 'ppEvent'),)))
    IMFMediaEventQueue.QueueEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaEvent_head, use_last_error=False)(6, 'QueueEvent', ((1, 'pEvent'),)))
    IMFMediaEventQueue.QueueEventParamVar = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),win32more.Foundation.HRESULT,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(7, 'QueueEventParamVar', ((1, 'met'),(1, 'guidExtendedType'),(1, 'hrStatus'),(1, 'pvValue'),)))
    IMFMediaEventQueue.QueueEventParamUnk = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head, use_last_error=False)(8, 'QueueEventParamUnk', ((1, 'met'),(1, 'guidExtendedType'),(1, 'hrStatus'),(1, 'pUnk'),)))
    IMFMediaEventQueue.Shutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(9, 'Shutdown', ()))
    win32more.System.Com.IUnknown
    return IMFMediaEventQueue
def _define_IMFActivate_head():
    class IMFActivate(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('7fee9e9a-4a89-47a6-899c-b6a53a70fb67')
    return IMFActivate
def _define_IMFActivate():
    IMFActivate = win32more.Media.MediaFoundation.IMFActivate_head
    IMFActivate.ActivateObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(33, 'ActivateObject', ((1, 'riid'),(1, 'ppv'),)))
    IMFActivate.ShutdownObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(34, 'ShutdownObject', ()))
    IMFActivate.DetachObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(35, 'DetachObject', ()))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFActivate
def _define_IMFPluginControl_head():
    class IMFPluginControl(win32more.System.Com.IUnknown_head):
        Guid = Guid('5c6c44bf-1db6-435b-9249-e8cd10fdec96')
    return IMFPluginControl
def _define_IMFPluginControl():
    IMFPluginControl = win32more.Media.MediaFoundation.IMFPluginControl_head
    IMFPluginControl.GetPreferredClsid = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.PWSTR,POINTER(Guid), use_last_error=False)(3, 'GetPreferredClsid', ((1, 'pluginType'),(1, 'selector'),(1, 'clsid'),)))
    IMFPluginControl.GetPreferredClsidByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(win32more.Foundation.PWSTR),POINTER(Guid), use_last_error=False)(4, 'GetPreferredClsidByIndex', ((1, 'pluginType'),(1, 'index'),(1, 'selector'),(1, 'clsid'),)))
    IMFPluginControl.SetPreferredClsid = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.PWSTR,POINTER(Guid), use_last_error=False)(5, 'SetPreferredClsid', ((1, 'pluginType'),(1, 'selector'),(1, 'clsid'),)))
    IMFPluginControl.IsDisabled = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid), use_last_error=False)(6, 'IsDisabled', ((1, 'pluginType'),(1, 'clsid'),)))
    IMFPluginControl.GetDisabledByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(Guid), use_last_error=False)(7, 'GetDisabledByIndex', ((1, 'pluginType'),(1, 'index'),(1, 'clsid'),)))
    IMFPluginControl.SetDisabled = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),win32more.Foundation.BOOL, use_last_error=False)(8, 'SetDisabled', ((1, 'pluginType'),(1, 'clsid'),(1, 'disabled'),)))
    win32more.System.Com.IUnknown
    return IMFPluginControl
MF_PLUGIN_CONTROL_POLICY = Int32
MF_PLUGIN_CONTROL_POLICY_USE_ALL_PLUGINS = 0
MF_PLUGIN_CONTROL_POLICY_USE_APPROVED_PLUGINS = 1
MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS = 2
MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS_EDGEMODE = 3
def _define_IMFPluginControl2_head():
    class IMFPluginControl2(win32more.Media.MediaFoundation.IMFPluginControl_head):
        Guid = Guid('c6982083-3ddc-45cb-af5e-0f7a8ce4de77')
    return IMFPluginControl2
def _define_IMFPluginControl2():
    IMFPluginControl2 = win32more.Media.MediaFoundation.IMFPluginControl2_head
    IMFPluginControl2.SetPolicy = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_PLUGIN_CONTROL_POLICY, use_last_error=False)(9, 'SetPolicy', ((1, 'policy'),)))
    win32more.Media.MediaFoundation.IMFPluginControl
    return IMFPluginControl2
def _define_IMFDXGIDeviceManager_head():
    class IMFDXGIDeviceManager(win32more.System.Com.IUnknown_head):
        Guid = Guid('eb533d5d-2db6-40f8-97a9-494692014f07')
    return IMFDXGIDeviceManager
def _define_IMFDXGIDeviceManager():
    IMFDXGIDeviceManager = win32more.Media.MediaFoundation.IMFDXGIDeviceManager_head
    IMFDXGIDeviceManager.CloseDeviceHandle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE, use_last_error=False)(3, 'CloseDeviceHandle', ((1, 'hDevice'),)))
    IMFDXGIDeviceManager.GetVideoService = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(4, 'GetVideoService', ((1, 'hDevice'),(1, 'riid'),(1, 'ppService'),)))
    IMFDXGIDeviceManager.LockDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,POINTER(Guid),POINTER(c_void_p),win32more.Foundation.BOOL, use_last_error=False)(5, 'LockDevice', ((1, 'hDevice'),(1, 'riid'),(1, 'ppUnkDevice'),(1, 'fBlock'),)))
    IMFDXGIDeviceManager.OpenDeviceHandle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.HANDLE), use_last_error=False)(6, 'OpenDeviceHandle', ((1, 'phDevice'),)))
    IMFDXGIDeviceManager.ResetDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,UInt32, use_last_error=False)(7, 'ResetDevice', ((1, 'pUnkDevice'),(1, 'resetToken'),)))
    IMFDXGIDeviceManager.TestDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE, use_last_error=False)(8, 'TestDevice', ((1, 'hDevice'),)))
    IMFDXGIDeviceManager.UnlockDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,win32more.Foundation.BOOL, use_last_error=False)(9, 'UnlockDevice', ((1, 'hDevice'),(1, 'fSaveState'),)))
    win32more.System.Com.IUnknown
    return IMFDXGIDeviceManager
MF_STREAM_STATE = Int32
MF_STREAM_STATE_STOPPED = 0
MF_STREAM_STATE_PAUSED = 1
MF_STREAM_STATE_RUNNING = 2
def _define_IMFMuxStreamAttributesManager_head():
    class IMFMuxStreamAttributesManager(win32more.System.Com.IUnknown_head):
        Guid = Guid('ce8bd576-e440-43b3-be34-1e53f565f7e8')
    return IMFMuxStreamAttributesManager
def _define_IMFMuxStreamAttributesManager():
    IMFMuxStreamAttributesManager = win32more.Media.MediaFoundation.IMFMuxStreamAttributesManager_head
    IMFMuxStreamAttributesManager.GetStreamCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(3, 'GetStreamCount', ((1, 'pdwMuxStreamCount'),)))
    IMFMuxStreamAttributesManager.GetAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head), use_last_error=False)(4, 'GetAttributes', ((1, 'dwMuxStreamIndex'),(1, 'ppStreamAttributes'),)))
    win32more.System.Com.IUnknown
    return IMFMuxStreamAttributesManager
def _define_IMFMuxStreamMediaTypeManager_head():
    class IMFMuxStreamMediaTypeManager(win32more.System.Com.IUnknown_head):
        Guid = Guid('505a2c72-42f7-4690-aeab-8f513d0ffdb8')
    return IMFMuxStreamMediaTypeManager
def _define_IMFMuxStreamMediaTypeManager():
    IMFMuxStreamMediaTypeManager = win32more.Media.MediaFoundation.IMFMuxStreamMediaTypeManager_head
    IMFMuxStreamMediaTypeManager.GetStreamCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(3, 'GetStreamCount', ((1, 'pdwMuxStreamCount'),)))
    IMFMuxStreamMediaTypeManager.GetMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head), use_last_error=False)(4, 'GetMediaType', ((1, 'dwMuxStreamIndex'),(1, 'ppMediaType'),)))
    IMFMuxStreamMediaTypeManager.GetStreamConfigurationCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(5, 'GetStreamConfigurationCount', ((1, 'pdwCount'),)))
    IMFMuxStreamMediaTypeManager.AddStreamConfiguration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64, use_last_error=False)(6, 'AddStreamConfiguration', ((1, 'ullStreamMask'),)))
    IMFMuxStreamMediaTypeManager.RemoveStreamConfiguration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64, use_last_error=False)(7, 'RemoveStreamConfiguration', ((1, 'ullStreamMask'),)))
    IMFMuxStreamMediaTypeManager.GetStreamConfiguration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt64), use_last_error=False)(8, 'GetStreamConfiguration', ((1, 'ulIndex'),(1, 'pullStreamMask'),)))
    win32more.System.Com.IUnknown
    return IMFMuxStreamMediaTypeManager
def _define_IMFMuxStreamSampleManager_head():
    class IMFMuxStreamSampleManager(win32more.System.Com.IUnknown_head):
        Guid = Guid('74abbc19-b1cc-4e41-bb8b-9d9b86a8f6ca')
    return IMFMuxStreamSampleManager
def _define_IMFMuxStreamSampleManager():
    IMFMuxStreamSampleManager = win32more.Media.MediaFoundation.IMFMuxStreamSampleManager_head
    IMFMuxStreamSampleManager.GetStreamCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(3, 'GetStreamCount', ((1, 'pdwMuxStreamCount'),)))
    IMFMuxStreamSampleManager.GetSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFSample_head), use_last_error=False)(4, 'GetSample', ((1, 'dwMuxStreamIndex'),(1, 'ppSample'),)))
    IMFMuxStreamSampleManager.GetStreamConfiguration = COMMETHOD(WINFUNCTYPE(UInt64, use_last_error=False)(5, 'GetStreamConfiguration', ()))
    win32more.System.Com.IUnknown
    return IMFMuxStreamSampleManager
def _define_IMFSecureBuffer_head():
    class IMFSecureBuffer(win32more.System.Com.IUnknown_head):
        Guid = Guid('c1209904-e584-4752-a2d6-7f21693f8b21')
    return IMFSecureBuffer
def _define_IMFSecureBuffer():
    IMFSecureBuffer = win32more.Media.MediaFoundation.IMFSecureBuffer_head
    IMFSecureBuffer.GetIdentifier = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid), use_last_error=False)(3, 'GetIdentifier', ((1, 'pGuidIdentifier'),)))
    win32more.System.Com.IUnknown
    return IMFSecureBuffer
_MFT_INPUT_DATA_BUFFER_FLAGS = Int32
MFT_INPUT_DATA_BUFFER_PLACEHOLDER = -1
_MFT_OUTPUT_DATA_BUFFER_FLAGS = Int32
MFT_OUTPUT_DATA_BUFFER_INCOMPLETE = 16777216
MFT_OUTPUT_DATA_BUFFER_FORMAT_CHANGE = 256
MFT_OUTPUT_DATA_BUFFER_STREAM_END = 512
MFT_OUTPUT_DATA_BUFFER_NO_SAMPLE = 768
_MFT_INPUT_STATUS_FLAGS = Int32
MFT_INPUT_STATUS_ACCEPT_DATA = 1
_MFT_OUTPUT_STATUS_FLAGS = Int32
MFT_OUTPUT_STATUS_SAMPLE_READY = 1
_MFT_INPUT_STREAM_INFO_FLAGS = Int32
MFT_INPUT_STREAM_WHOLE_SAMPLES = 1
MFT_INPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER = 2
MFT_INPUT_STREAM_FIXED_SAMPLE_SIZE = 4
MFT_INPUT_STREAM_HOLDS_BUFFERS = 8
MFT_INPUT_STREAM_DOES_NOT_ADDREF = 256
MFT_INPUT_STREAM_REMOVABLE = 512
MFT_INPUT_STREAM_OPTIONAL = 1024
MFT_INPUT_STREAM_PROCESSES_IN_PLACE = 2048
_MFT_OUTPUT_STREAM_INFO_FLAGS = Int32
MFT_OUTPUT_STREAM_WHOLE_SAMPLES = 1
MFT_OUTPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER = 2
MFT_OUTPUT_STREAM_FIXED_SAMPLE_SIZE = 4
MFT_OUTPUT_STREAM_DISCARDABLE = 8
MFT_OUTPUT_STREAM_OPTIONAL = 16
MFT_OUTPUT_STREAM_PROVIDES_SAMPLES = 256
MFT_OUTPUT_STREAM_CAN_PROVIDE_SAMPLES = 512
MFT_OUTPUT_STREAM_LAZY_READ = 1024
MFT_OUTPUT_STREAM_REMOVABLE = 2048
_MFT_SET_TYPE_FLAGS = Int32
MFT_SET_TYPE_TEST_ONLY = 1
_MFT_PROCESS_OUTPUT_FLAGS = Int32
MFT_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER = 1
MFT_PROCESS_OUTPUT_REGENERATE_LAST_OUTPUT = 2
_MFT_PROCESS_OUTPUT_STATUS = Int32
MFT_PROCESS_OUTPUT_STATUS_NEW_STREAMS = 256
MFT_DRAIN_TYPE = Int32
MFT_DRAIN_PRODUCE_TAILS = 0
MFT_DRAIN_NO_TAILS = 1
MFT_MESSAGE_TYPE = Int32
MFT_MESSAGE_COMMAND_FLUSH = 0
MFT_MESSAGE_COMMAND_DRAIN = 1
MFT_MESSAGE_SET_D3D_MANAGER = 2
MFT_MESSAGE_DROP_SAMPLES = 3
MFT_MESSAGE_COMMAND_TICK = 4
MFT_MESSAGE_NOTIFY_BEGIN_STREAMING = 268435456
MFT_MESSAGE_NOTIFY_END_STREAMING = 268435457
MFT_MESSAGE_NOTIFY_END_OF_STREAM = 268435458
MFT_MESSAGE_NOTIFY_START_OF_STREAM = 268435459
MFT_MESSAGE_NOTIFY_RELEASE_RESOURCES = 268435460
MFT_MESSAGE_NOTIFY_REACQUIRE_RESOURCES = 268435461
MFT_MESSAGE_NOTIFY_EVENT = 268435462
MFT_MESSAGE_COMMAND_SET_OUTPUT_STREAM_STATE = 268435463
MFT_MESSAGE_COMMAND_FLUSH_OUTPUT_STREAM = 268435464
MFT_MESSAGE_COMMAND_MARKER = 536870912
def _define_MFT_INPUT_STREAM_INFO_head():
    class MFT_INPUT_STREAM_INFO(Structure):
        pass
    return MFT_INPUT_STREAM_INFO
def _define_MFT_INPUT_STREAM_INFO():
    MFT_INPUT_STREAM_INFO = win32more.Media.MediaFoundation.MFT_INPUT_STREAM_INFO_head
    MFT_INPUT_STREAM_INFO._fields_ = [
        ("hnsMaxLatency", Int64),
        ("dwFlags", UInt32),
        ("cbSize", UInt32),
        ("cbMaxLookahead", UInt32),
        ("cbAlignment", UInt32),
    ]
    return MFT_INPUT_STREAM_INFO
def _define_MFT_OUTPUT_STREAM_INFO_head():
    class MFT_OUTPUT_STREAM_INFO(Structure):
        pass
    return MFT_OUTPUT_STREAM_INFO
def _define_MFT_OUTPUT_STREAM_INFO():
    MFT_OUTPUT_STREAM_INFO = win32more.Media.MediaFoundation.MFT_OUTPUT_STREAM_INFO_head
    MFT_OUTPUT_STREAM_INFO._fields_ = [
        ("dwFlags", UInt32),
        ("cbSize", UInt32),
        ("cbAlignment", UInt32),
    ]
    return MFT_OUTPUT_STREAM_INFO
def _define_MFT_OUTPUT_DATA_BUFFER_head():
    class MFT_OUTPUT_DATA_BUFFER(Structure):
        pass
    return MFT_OUTPUT_DATA_BUFFER
def _define_MFT_OUTPUT_DATA_BUFFER():
    MFT_OUTPUT_DATA_BUFFER = win32more.Media.MediaFoundation.MFT_OUTPUT_DATA_BUFFER_head
    MFT_OUTPUT_DATA_BUFFER._fields_ = [
        ("dwStreamID", UInt32),
        ("pSample", win32more.Media.MediaFoundation.IMFSample_head),
        ("dwStatus", UInt32),
        ("pEvents", win32more.Media.MediaFoundation.IMFCollection_head),
    ]
    return MFT_OUTPUT_DATA_BUFFER
def _define_IMFTransform_head():
    class IMFTransform(win32more.System.Com.IUnknown_head):
        Guid = Guid('bf94c121-5b05-4e6f-8000-ba598961414d')
    return IMFTransform
def _define_IMFTransform():
    IMFTransform = win32more.Media.MediaFoundation.IMFTransform_head
    IMFTransform.GetStreamLimits = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(UInt32),POINTER(UInt32),POINTER(UInt32), use_last_error=False)(3, 'GetStreamLimits', ((1, 'pdwInputMinimum'),(1, 'pdwInputMaximum'),(1, 'pdwOutputMinimum'),(1, 'pdwOutputMaximum'),)))
    IMFTransform.GetStreamCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(UInt32), use_last_error=False)(4, 'GetStreamCount', ((1, 'pcInputStreams'),(1, 'pcOutputStreams'),)))
    IMFTransform.GetStreamIDs = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32),UInt32,POINTER(UInt32), use_last_error=False)(5, 'GetStreamIDs', ((1, 'dwInputIDArraySize'),(1, 'pdwInputIDs'),(1, 'dwOutputIDArraySize'),(1, 'pdwOutputIDs'),)))
    IMFTransform.GetInputStreamInfo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.MFT_INPUT_STREAM_INFO_head), use_last_error=False)(6, 'GetInputStreamInfo', ((1, 'dwInputStreamID'),(1, 'pStreamInfo'),)))
    IMFTransform.GetOutputStreamInfo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.MFT_OUTPUT_STREAM_INFO_head), use_last_error=False)(7, 'GetOutputStreamInfo', ((1, 'dwOutputStreamID'),(1, 'pStreamInfo'),)))
    IMFTransform.GetAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head), use_last_error=False)(8, 'GetAttributes', ((1, 'pAttributes'),)))
    IMFTransform.GetInputStreamAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head), use_last_error=False)(9, 'GetInputStreamAttributes', ((1, 'dwInputStreamID'),(1, 'pAttributes'),)))
    IMFTransform.GetOutputStreamAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head), use_last_error=False)(10, 'GetOutputStreamAttributes', ((1, 'dwOutputStreamID'),(1, 'pAttributes'),)))
    IMFTransform.DeleteInputStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(11, 'DeleteInputStream', ((1, 'dwStreamID'),)))
    IMFTransform.AddInputStreams = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32), use_last_error=False)(12, 'AddInputStreams', ((1, 'cStreams'),(1, 'adwStreamIDs'),)))
    IMFTransform.GetInputAvailableType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head), use_last_error=False)(13, 'GetInputAvailableType', ((1, 'dwInputStreamID'),(1, 'dwTypeIndex'),(1, 'ppType'),)))
    IMFTransform.GetOutputAvailableType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head), use_last_error=False)(14, 'GetOutputAvailableType', ((1, 'dwOutputStreamID'),(1, 'dwTypeIndex'),(1, 'ppType'),)))
    IMFTransform.SetInputType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head,UInt32, use_last_error=False)(15, 'SetInputType', ((1, 'dwInputStreamID'),(1, 'pType'),(1, 'dwFlags'),)))
    IMFTransform.SetOutputType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head,UInt32, use_last_error=False)(16, 'SetOutputType', ((1, 'dwOutputStreamID'),(1, 'pType'),(1, 'dwFlags'),)))
    IMFTransform.GetInputCurrentType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head), use_last_error=False)(17, 'GetInputCurrentType', ((1, 'dwInputStreamID'),(1, 'ppType'),)))
    IMFTransform.GetOutputCurrentType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head), use_last_error=False)(18, 'GetOutputCurrentType', ((1, 'dwOutputStreamID'),(1, 'ppType'),)))
    IMFTransform.GetInputStatus = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32), use_last_error=False)(19, 'GetInputStatus', ((1, 'dwInputStreamID'),(1, 'pdwFlags'),)))
    IMFTransform.GetOutputStatus = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(20, 'GetOutputStatus', ((1, 'pdwFlags'),)))
    IMFTransform.SetOutputBounds = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int64,Int64, use_last_error=False)(21, 'SetOutputBounds', ((1, 'hnsLowerBound'),(1, 'hnsUpperBound'),)))
    IMFTransform.ProcessEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaEvent_head, use_last_error=False)(22, 'ProcessEvent', ((1, 'dwInputStreamID'),(1, 'pEvent'),)))
    IMFTransform.ProcessMessage = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFT_MESSAGE_TYPE,UIntPtr, use_last_error=False)(23, 'ProcessMessage', ((1, 'eMessage'),(1, 'ulParam'),)))
    IMFTransform.ProcessInput = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFSample_head,UInt32, use_last_error=False)(24, 'ProcessInput', ((1, 'dwInputStreamID'),(1, 'pSample'),(1, 'dwFlags'),)))
    IMFTransform.ProcessOutput = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.MFT_OUTPUT_DATA_BUFFER),POINTER(UInt32), use_last_error=False)(25, 'ProcessOutput', ((1, 'dwFlags'),(1, 'cOutputBufferCount'),(1, 'pOutputSamples'),(1, 'pdwStatus'),)))
    win32more.System.Com.IUnknown
    return IMFTransform
DeviceStreamState = Int32
DeviceStreamState_Stop = 0
DeviceStreamState_Pause = 1
DeviceStreamState_Run = 2
DeviceStreamState_Disabled = 3
def _define_STREAM_MEDIUM_head():
    class STREAM_MEDIUM(Structure):
        pass
    return STREAM_MEDIUM
def _define_STREAM_MEDIUM():
    STREAM_MEDIUM = win32more.Media.MediaFoundation.STREAM_MEDIUM_head
    STREAM_MEDIUM._fields_ = [
        ("gidMedium", Guid),
        ("unMediumInstance", UInt32),
    ]
    return STREAM_MEDIUM
MF3DVideoOutputType = Int32
MF3DVideoOutputType_BaseView = 0
MF3DVideoOutputType_Stereo = 1
MFT_AUDIO_DECODER_DEGRADATION_REASON = Int32
MFT_AUDIO_DECODER_DEGRADATION_REASON_NONE = 0
MFT_AUDIO_DECODER_DEGRADATION_REASON_LICENSING_REQUIREMENT = 1
MFT_AUDIO_DECODER_DEGRADATION_TYPE = Int32
MFT_AUDIO_DECODER_DEGRADATION_TYPE_NONE = 0
MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX2CHANNEL = 1
MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX6CHANNEL = 2
MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX8CHANNEL = 3
def _define_MFAudioDecoderDegradationInfo_head():
    class MFAudioDecoderDegradationInfo(Structure):
        pass
    return MFAudioDecoderDegradationInfo
def _define_MFAudioDecoderDegradationInfo():
    MFAudioDecoderDegradationInfo = win32more.Media.MediaFoundation.MFAudioDecoderDegradationInfo_head
    MFAudioDecoderDegradationInfo._fields_ = [
        ("eDegradationReason", win32more.Media.MediaFoundation.MFT_AUDIO_DECODER_DEGRADATION_REASON),
        ("eType", win32more.Media.MediaFoundation.MFT_AUDIO_DECODER_DEGRADATION_TYPE),
    ]
    return MFAudioDecoderDegradationInfo
def _define_MFT_STREAM_STATE_PARAM_head():
    class MFT_STREAM_STATE_PARAM(Structure):
        pass
    return MFT_STREAM_STATE_PARAM
def _define_MFT_STREAM_STATE_PARAM():
    MFT_STREAM_STATE_PARAM = win32more.Media.MediaFoundation.MFT_STREAM_STATE_PARAM_head
    MFT_STREAM_STATE_PARAM._fields_ = [
        ("StreamId", UInt32),
        ("State", win32more.Media.MediaFoundation.MF_STREAM_STATE),
    ]
    return MFT_STREAM_STATE_PARAM
MFSESSION_SETTOPOLOGY_FLAGS = Int32
MFSESSION_SETTOPOLOGY_IMMEDIATE = 1
MFSESSION_SETTOPOLOGY_NORESOLUTION = 2
MFSESSION_SETTOPOLOGY_CLEAR_CURRENT = 4
MFSESSION_GETFULLTOPOLOGY_FLAGS = Int32
MFSESSION_GETFULLTOPOLOGY_CURRENT = 1
MFPMPSESSION_CREATION_FLAGS = Int32
MFPMPSESSION_UNPROTECTED_PROCESS = 1
MFPMPSESSION_IN_PROCESS = 2
def _define_IMFMediaSession_head():
    class IMFMediaSession(win32more.Media.MediaFoundation.IMFMediaEventGenerator_head):
        Guid = Guid('90377834-21d0-4dee-8214-ba2e3e6c1127')
    return IMFMediaSession
def _define_IMFMediaSession():
    IMFMediaSession = win32more.Media.MediaFoundation.IMFMediaSession_head
    IMFMediaSession.SetTopology = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFTopology_head, use_last_error=False)(7, 'SetTopology', ((1, 'dwSetTopologyFlags'),(1, 'pTopology'),)))
    IMFMediaSession.ClearTopologies = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(8, 'ClearTopologies', ()))
    IMFMediaSession.Start = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(9, 'Start', ((1, 'pguidTimeFormat'),(1, 'pvarStartPosition'),)))
    IMFMediaSession.Pause = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(10, 'Pause', ()))
    IMFMediaSession.Stop = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(11, 'Stop', ()))
    IMFMediaSession.Close = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(12, 'Close', ()))
    IMFMediaSession.Shutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(13, 'Shutdown', ()))
    IMFMediaSession.GetClock = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFClock_head), use_last_error=False)(14, 'GetClock', ((1, 'ppClock'),)))
    IMFMediaSession.GetSessionCapabilities = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(15, 'GetSessionCapabilities', ((1, 'pdwCaps'),)))
    IMFMediaSession.GetFullTopology = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt64,POINTER(win32more.Media.MediaFoundation.IMFTopology_head), use_last_error=False)(16, 'GetFullTopology', ((1, 'dwGetFullTopologyFlags'),(1, 'TopoId'),(1, 'ppFullTopology'),)))
    win32more.Media.MediaFoundation.IMFMediaEventGenerator
    return IMFMediaSession
MF_OBJECT_TYPE = Int32
MF_OBJECT_MEDIASOURCE = 0
MF_OBJECT_BYTESTREAM = 1
MF_OBJECT_INVALID = 2
MF_RESOLUTION_FLAGS = UInt32
MF_RESOLUTION_MEDIASOURCE = 1
MF_RESOLUTION_BYTESTREAM = 2
MF_RESOLUTION_CONTENT_DOES_NOT_HAVE_TO_MATCH_EXTENSION_OR_MIME_TYPE = 16
MF_RESOLUTION_KEEP_BYTE_STREAM_ALIVE_ON_FAIL = 32
MF_RESOLUTION_DISABLE_LOCAL_PLUGINS = 64
MF_RESOLUTION_PLUGIN_CONTROL_POLICY_APPROVED_ONLY = 128
MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY = 256
MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY_EDGEMODE = 512
MF_RESOLUTION_ENABLE_STORE_PLUGINS = 1024
MF_RESOLUTION_READ = 65536
MF_RESOLUTION_WRITE = 131072
MF_CONNECT_METHOD = Int32
MF_CONNECT_DIRECT = 0
MF_CONNECT_ALLOW_CONVERTER = 1
MF_CONNECT_ALLOW_DECODER = 3
MF_CONNECT_RESOLVE_INDEPENDENT_OUTPUTTYPES = 4
MF_CONNECT_AS_OPTIONAL = 65536
MF_CONNECT_AS_OPTIONAL_BRANCH = 131072
MF_TOPOLOGY_RESOLUTION_STATUS_FLAGS = Int32
MF_TOPOLOGY_RESOLUTION_SUCCEEDED = 0
MF_OPTIONAL_NODE_REJECTED_MEDIA_TYPE = 1
MF_OPTIONAL_NODE_REJECTED_PROTECTED_PROCESS = 2
def _define_IMFSourceResolver_head():
    class IMFSourceResolver(win32more.System.Com.IUnknown_head):
        Guid = Guid('fbe5a32d-a497-4b61-bb85-97b1a848a6e3')
    return IMFSourceResolver
def _define_IMFSourceResolver():
    IMFSourceResolver = win32more.Media.MediaFoundation.IMFSourceResolver_head
    IMFSourceResolver.CreateObjectFromURL = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,UInt32,win32more.UI.Shell.PropertiesSystem.IPropertyStore_head,POINTER(win32more.Media.MediaFoundation.MF_OBJECT_TYPE),POINTER(win32more.System.Com.IUnknown_head), use_last_error=False)(3, 'CreateObjectFromURL', ((1, 'pwszURL'),(1, 'dwFlags'),(1, 'pProps'),(1, 'pObjectType'),(1, 'ppObject'),)))
    IMFSourceResolver.CreateObjectFromByteStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Foundation.PWSTR,UInt32,win32more.UI.Shell.PropertiesSystem.IPropertyStore_head,POINTER(win32more.Media.MediaFoundation.MF_OBJECT_TYPE),POINTER(win32more.System.Com.IUnknown_head), use_last_error=False)(4, 'CreateObjectFromByteStream', ((1, 'pByteStream'),(1, 'pwszURL'),(1, 'dwFlags'),(1, 'pProps'),(1, 'pObjectType'),(1, 'ppObject'),)))
    IMFSourceResolver.BeginCreateObjectFromURL = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,UInt32,win32more.UI.Shell.PropertiesSystem.IPropertyStore_head,POINTER(win32more.System.Com.IUnknown_head),win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(5, 'BeginCreateObjectFromURL', ((1, 'pwszURL'),(1, 'dwFlags'),(1, 'pProps'),(1, 'ppIUnknownCancelCookie'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFSourceResolver.EndCreateObjectFromURL = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(win32more.Media.MediaFoundation.MF_OBJECT_TYPE),POINTER(win32more.System.Com.IUnknown_head), use_last_error=False)(6, 'EndCreateObjectFromURL', ((1, 'pResult'),(1, 'pObjectType'),(1, 'ppObject'),)))
    IMFSourceResolver.BeginCreateObjectFromByteStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Foundation.PWSTR,UInt32,win32more.UI.Shell.PropertiesSystem.IPropertyStore_head,POINTER(win32more.System.Com.IUnknown_head),win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(7, 'BeginCreateObjectFromByteStream', ((1, 'pByteStream'),(1, 'pwszURL'),(1, 'dwFlags'),(1, 'pProps'),(1, 'ppIUnknownCancelCookie'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFSourceResolver.EndCreateObjectFromByteStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(win32more.Media.MediaFoundation.MF_OBJECT_TYPE),POINTER(win32more.System.Com.IUnknown_head), use_last_error=False)(8, 'EndCreateObjectFromByteStream', ((1, 'pResult'),(1, 'pObjectType'),(1, 'ppObject'),)))
    IMFSourceResolver.CancelObjectCreation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head, use_last_error=False)(9, 'CancelObjectCreation', ((1, 'pIUnknownCancelCookie'),)))
    win32more.System.Com.IUnknown
    return IMFSourceResolver
MFMEDIASOURCE_CHARACTERISTICS = Int32
MFMEDIASOURCE_IS_LIVE = 1
MFMEDIASOURCE_CAN_SEEK = 2
MFMEDIASOURCE_CAN_PAUSE = 4
MFMEDIASOURCE_HAS_SLOW_SEEK = 8
MFMEDIASOURCE_HAS_MULTIPLE_PRESENTATIONS = 16
MFMEDIASOURCE_CAN_SKIPFORWARD = 32
MFMEDIASOURCE_CAN_SKIPBACKWARD = 64
MFMEDIASOURCE_DOES_NOT_USE_NETWORK = 128
def _define_IMFMediaSource_head():
    class IMFMediaSource(win32more.Media.MediaFoundation.IMFMediaEventGenerator_head):
        Guid = Guid('279a808d-aec7-40c8-9c6b-a6b492c78a66')
    return IMFMediaSource
def _define_IMFMediaSource():
    IMFMediaSource = win32more.Media.MediaFoundation.IMFMediaSource_head
    IMFMediaSource.GetCharacteristics = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(7, 'GetCharacteristics', ((1, 'pdwCharacteristics'),)))
    IMFMediaSource.CreatePresentationDescriptor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFPresentationDescriptor_head), use_last_error=False)(8, 'CreatePresentationDescriptor', ((1, 'ppPresentationDescriptor'),)))
    IMFMediaSource.Start = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationDescriptor_head,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(9, 'Start', ((1, 'pPresentationDescriptor'),(1, 'pguidTimeFormat'),(1, 'pvarStartPosition'),)))
    IMFMediaSource.Stop = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(10, 'Stop', ()))
    IMFMediaSource.Pause = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(11, 'Pause', ()))
    IMFMediaSource.Shutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(12, 'Shutdown', ()))
    win32more.Media.MediaFoundation.IMFMediaEventGenerator
    return IMFMediaSource
def _define_IMFMediaSourceEx_head():
    class IMFMediaSourceEx(win32more.Media.MediaFoundation.IMFMediaSource_head):
        Guid = Guid('3c9b2eb9-86d5-4514-a394-f56664f9f0d8')
    return IMFMediaSourceEx
def _define_IMFMediaSourceEx():
    IMFMediaSourceEx = win32more.Media.MediaFoundation.IMFMediaSourceEx_head
    IMFMediaSourceEx.GetSourceAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head), use_last_error=False)(13, 'GetSourceAttributes', ((1, 'ppAttributes'),)))
    IMFMediaSourceEx.GetStreamAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head), use_last_error=False)(14, 'GetStreamAttributes', ((1, 'dwStreamIdentifier'),(1, 'ppAttributes'),)))
    IMFMediaSourceEx.SetD3DManager = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head, use_last_error=False)(15, 'SetD3DManager', ((1, 'pManager'),)))
    win32more.Media.MediaFoundation.IMFMediaSource
    return IMFMediaSourceEx
def _define_IMFClockConsumer_head():
    class IMFClockConsumer(win32more.System.Com.IUnknown_head):
        Guid = Guid('6ef2a662-47c0-4666-b13d-cbb717f2fa2c')
    return IMFClockConsumer
def _define_IMFClockConsumer():
    IMFClockConsumer = win32more.Media.MediaFoundation.IMFClockConsumer_head
    IMFClockConsumer.SetPresentationClock = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationClock_head, use_last_error=False)(3, 'SetPresentationClock', ((1, 'pPresentationClock'),)))
    IMFClockConsumer.GetPresentationClock = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFPresentationClock_head), use_last_error=False)(4, 'GetPresentationClock', ((1, 'ppPresentationClock'),)))
    win32more.System.Com.IUnknown
    return IMFClockConsumer
def _define_IMFMediaStream_head():
    class IMFMediaStream(win32more.Media.MediaFoundation.IMFMediaEventGenerator_head):
        Guid = Guid('d182108f-4ec6-443f-aa42-a71106ec825f')
    return IMFMediaStream
def _define_IMFMediaStream():
    IMFMediaStream = win32more.Media.MediaFoundation.IMFMediaStream_head
    IMFMediaStream.GetMediaSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaSource_head), use_last_error=False)(7, 'GetMediaSource', ((1, 'ppMediaSource'),)))
    IMFMediaStream.GetStreamDescriptor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFStreamDescriptor_head), use_last_error=False)(8, 'GetStreamDescriptor', ((1, 'ppStreamDescriptor'),)))
    IMFMediaStream.RequestSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head, use_last_error=False)(9, 'RequestSample', ((1, 'pToken'),)))
    win32more.Media.MediaFoundation.IMFMediaEventGenerator
    return IMFMediaStream
def _define_IMFMediaSink_head():
    class IMFMediaSink(win32more.System.Com.IUnknown_head):
        Guid = Guid('6ef2a660-47c0-4666-b13d-cbb717f2fa2c')
    return IMFMediaSink
def _define_IMFMediaSink():
    IMFMediaSink = win32more.Media.MediaFoundation.IMFMediaSink_head
    IMFMediaSink.GetCharacteristics = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(3, 'GetCharacteristics', ((1, 'pdwCharacteristics'),)))
    IMFMediaSink.AddStreamSink = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.IMFStreamSink_head), use_last_error=False)(4, 'AddStreamSink', ((1, 'dwStreamSinkIdentifier'),(1, 'pMediaType'),(1, 'ppStreamSink'),)))
    IMFMediaSink.RemoveStreamSink = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(5, 'RemoveStreamSink', ((1, 'dwStreamSinkIdentifier'),)))
    IMFMediaSink.GetStreamSinkCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(6, 'GetStreamSinkCount', ((1, 'pcStreamSinkCount'),)))
    IMFMediaSink.GetStreamSinkByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFStreamSink_head), use_last_error=False)(7, 'GetStreamSinkByIndex', ((1, 'dwIndex'),(1, 'ppStreamSink'),)))
    IMFMediaSink.GetStreamSinkById = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFStreamSink_head), use_last_error=False)(8, 'GetStreamSinkById', ((1, 'dwStreamSinkIdentifier'),(1, 'ppStreamSink'),)))
    IMFMediaSink.SetPresentationClock = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationClock_head, use_last_error=False)(9, 'SetPresentationClock', ((1, 'pPresentationClock'),)))
    IMFMediaSink.GetPresentationClock = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFPresentationClock_head), use_last_error=False)(10, 'GetPresentationClock', ((1, 'ppPresentationClock'),)))
    IMFMediaSink.Shutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(11, 'Shutdown', ()))
    win32more.System.Com.IUnknown
    return IMFMediaSink
MFSTREAMSINK_MARKER_TYPE = Int32
MFSTREAMSINK_MARKER_DEFAULT = 0
MFSTREAMSINK_MARKER_ENDOFSEGMENT = 1
MFSTREAMSINK_MARKER_TICK = 2
MFSTREAMSINK_MARKER_EVENT = 3
def _define_IMFStreamSink_head():
    class IMFStreamSink(win32more.Media.MediaFoundation.IMFMediaEventGenerator_head):
        Guid = Guid('0a97b3cf-8e7c-4a3d-8f8c-0c843dc247fb')
    return IMFStreamSink
def _define_IMFStreamSink():
    IMFStreamSink = win32more.Media.MediaFoundation.IMFStreamSink_head
    IMFStreamSink.GetMediaSink = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head), use_last_error=False)(7, 'GetMediaSink', ((1, 'ppMediaSink'),)))
    IMFStreamSink.GetIdentifier = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(8, 'GetIdentifier', ((1, 'pdwIdentifier'),)))
    IMFStreamSink.GetMediaTypeHandler = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaTypeHandler_head), use_last_error=False)(9, 'GetMediaTypeHandler', ((1, 'ppHandler'),)))
    IMFStreamSink.ProcessSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSample_head, use_last_error=False)(10, 'ProcessSample', ((1, 'pSample'),)))
    IMFStreamSink.PlaceMarker = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFSTREAMSINK_MARKER_TYPE,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(11, 'PlaceMarker', ((1, 'eMarkerType'),(1, 'pvarMarkerValue'),(1, 'pvarContextValue'),)))
    IMFStreamSink.Flush = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(12, 'Flush', ()))
    win32more.Media.MediaFoundation.IMFMediaEventGenerator
    return IMFStreamSink
def _define_IMFVideoSampleAllocator_head():
    class IMFVideoSampleAllocator(win32more.System.Com.IUnknown_head):
        Guid = Guid('86cbc910-e533-4751-8e3b-f19b5b806a03')
    return IMFVideoSampleAllocator
def _define_IMFVideoSampleAllocator():
    IMFVideoSampleAllocator = win32more.Media.MediaFoundation.IMFVideoSampleAllocator_head
    IMFVideoSampleAllocator.SetDirectXManager = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head, use_last_error=False)(3, 'SetDirectXManager', ((1, 'pManager'),)))
    IMFVideoSampleAllocator.UninitializeSampleAllocator = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(4, 'UninitializeSampleAllocator', ()))
    IMFVideoSampleAllocator.InitializeSampleAllocator = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head, use_last_error=False)(5, 'InitializeSampleAllocator', ((1, 'cRequestedFrames'),(1, 'pMediaType'),)))
    IMFVideoSampleAllocator.AllocateSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFSample_head), use_last_error=False)(6, 'AllocateSample', ((1, 'ppSample'),)))
    win32more.System.Com.IUnknown
    return IMFVideoSampleAllocator
def _define_IMFVideoSampleAllocatorNotify_head():
    class IMFVideoSampleAllocatorNotify(win32more.System.Com.IUnknown_head):
        Guid = Guid('a792cdbe-c374-4e89-8335-278e7b9956a4')
    return IMFVideoSampleAllocatorNotify
def _define_IMFVideoSampleAllocatorNotify():
    IMFVideoSampleAllocatorNotify = win32more.Media.MediaFoundation.IMFVideoSampleAllocatorNotify_head
    IMFVideoSampleAllocatorNotify.NotifyRelease = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(3, 'NotifyRelease', ()))
    win32more.System.Com.IUnknown
    return IMFVideoSampleAllocatorNotify
def _define_IMFVideoSampleAllocatorNotifyEx_head():
    class IMFVideoSampleAllocatorNotifyEx(win32more.Media.MediaFoundation.IMFVideoSampleAllocatorNotify_head):
        Guid = Guid('3978aa1a-6d5b-4b7f-a340-90899189ae34')
    return IMFVideoSampleAllocatorNotifyEx
def _define_IMFVideoSampleAllocatorNotifyEx():
    IMFVideoSampleAllocatorNotifyEx = win32more.Media.MediaFoundation.IMFVideoSampleAllocatorNotifyEx_head
    IMFVideoSampleAllocatorNotifyEx.NotifyPrune = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSample_head, use_last_error=False)(4, 'NotifyPrune', ((1, '__MIDL__IMFVideoSampleAllocatorNotifyEx0000'),)))
    win32more.Media.MediaFoundation.IMFVideoSampleAllocatorNotify
    return IMFVideoSampleAllocatorNotifyEx
def _define_IMFVideoSampleAllocatorCallback_head():
    class IMFVideoSampleAllocatorCallback(win32more.System.Com.IUnknown_head):
        Guid = Guid('992388b4-3372-4f67-8b6f-c84c071f4751')
    return IMFVideoSampleAllocatorCallback
def _define_IMFVideoSampleAllocatorCallback():
    IMFVideoSampleAllocatorCallback = win32more.Media.MediaFoundation.IMFVideoSampleAllocatorCallback_head
    IMFVideoSampleAllocatorCallback.SetCallback = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFVideoSampleAllocatorNotify_head, use_last_error=False)(3, 'SetCallback', ((1, 'pNotify'),)))
    IMFVideoSampleAllocatorCallback.GetFreeSampleCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int32), use_last_error=False)(4, 'GetFreeSampleCount', ((1, 'plSamples'),)))
    win32more.System.Com.IUnknown
    return IMFVideoSampleAllocatorCallback
def _define_IMFVideoSampleAllocatorEx_head():
    class IMFVideoSampleAllocatorEx(win32more.Media.MediaFoundation.IMFVideoSampleAllocator_head):
        Guid = Guid('545b3a48-3283-4f62-866f-a62d8f598f9f')
    return IMFVideoSampleAllocatorEx
def _define_IMFVideoSampleAllocatorEx():
    IMFVideoSampleAllocatorEx = win32more.Media.MediaFoundation.IMFVideoSampleAllocatorEx_head
    IMFVideoSampleAllocatorEx.InitializeSampleAllocatorEx = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,win32more.Media.MediaFoundation.IMFAttributes_head,win32more.Media.MediaFoundation.IMFMediaType_head, use_last_error=False)(7, 'InitializeSampleAllocatorEx', ((1, 'cInitialSamples'),(1, 'cMaximumSamples'),(1, 'pAttributes'),(1, 'pMediaType'),)))
    win32more.Media.MediaFoundation.IMFVideoSampleAllocator
    return IMFVideoSampleAllocatorEx
def _define_IMFDXGIDeviceManagerSource_head():
    class IMFDXGIDeviceManagerSource(win32more.System.Com.IUnknown_head):
        Guid = Guid('20bc074b-7a8d-4609-8c3b-64a0a3b5d7ce')
    return IMFDXGIDeviceManagerSource
def _define_IMFDXGIDeviceManagerSource():
    IMFDXGIDeviceManagerSource = win32more.Media.MediaFoundation.IMFDXGIDeviceManagerSource_head
    IMFDXGIDeviceManagerSource.GetManager = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFDXGIDeviceManager_head), use_last_error=False)(3, 'GetManager', ((1, 'ppManager'),)))
    win32more.System.Com.IUnknown
    return IMFDXGIDeviceManagerSource
MF_VIDEO_PROCESSOR_ROTATION = Int32
ROTATION_NONE = 0
ROTATION_NORMAL = 1
MF_VIDEO_PROCESSOR_MIRROR = Int32
MIRROR_NONE = 0
MIRROR_HORIZONTAL = 1
MIRROR_VERTICAL = 2
def _define_IMFVideoProcessorControl_head():
    class IMFVideoProcessorControl(win32more.System.Com.IUnknown_head):
        Guid = Guid('a3f675d5-6119-4f7f-a100-1d8b280f0efb')
    return IMFVideoProcessorControl
def _define_IMFVideoProcessorControl():
    IMFVideoProcessorControl = win32more.Media.MediaFoundation.IMFVideoProcessorControl_head
    IMFVideoProcessorControl.SetBorderColor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFARGB_head), use_last_error=False)(3, 'SetBorderColor', ((1, 'pBorderColor'),)))
    IMFVideoProcessorControl.SetSourceRectangle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.RECT_head), use_last_error=False)(4, 'SetSourceRectangle', ((1, 'pSrcRect'),)))
    IMFVideoProcessorControl.SetDestinationRectangle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.RECT_head), use_last_error=False)(5, 'SetDestinationRectangle', ((1, 'pDstRect'),)))
    IMFVideoProcessorControl.SetMirror = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_VIDEO_PROCESSOR_MIRROR, use_last_error=False)(6, 'SetMirror', ((1, 'eMirror'),)))
    IMFVideoProcessorControl.SetRotation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_VIDEO_PROCESSOR_ROTATION, use_last_error=False)(7, 'SetRotation', ((1, 'eRotation'),)))
    IMFVideoProcessorControl.SetConstrictionSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.SIZE_head), use_last_error=False)(8, 'SetConstrictionSize', ((1, 'pConstrictionSize'),)))
    win32more.System.Com.IUnknown
    return IMFVideoProcessorControl
def _define_IMFVideoProcessorControl2_head():
    class IMFVideoProcessorControl2(win32more.Media.MediaFoundation.IMFVideoProcessorControl_head):
        Guid = Guid('bde633d3-e1dc-4a7f-a693-bbae399c4a20')
    return IMFVideoProcessorControl2
def _define_IMFVideoProcessorControl2():
    IMFVideoProcessorControl2 = win32more.Media.MediaFoundation.IMFVideoProcessorControl2_head
    IMFVideoProcessorControl2.SetRotationOverride = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(9, 'SetRotationOverride', ((1, 'uiRotation'),)))
    IMFVideoProcessorControl2.EnableHardwareEffects = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL, use_last_error=False)(10, 'EnableHardwareEffects', ((1, 'fEnabled'),)))
    IMFVideoProcessorControl2.GetSupportedHardwareEffects = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(11, 'GetSupportedHardwareEffects', ((1, 'puiSupport'),)))
    win32more.Media.MediaFoundation.IMFVideoProcessorControl
    return IMFVideoProcessorControl2
MFVideoSphericalFormat = Int32
MFVideoSphericalFormat_Unsupported = 0
MFVideoSphericalFormat_Equirectangular = 1
MFVideoSphericalFormat_CubeMap = 2
MFVideoSphericalFormat_3DMesh = 3
MFVideoSphericalProjectionMode = Int32
MFVideoSphericalProjectionMode_Spherical = 0
MFVideoSphericalProjectionMode_Flat = 1
def _define_IMFVideoProcessorControl3_head():
    class IMFVideoProcessorControl3(win32more.Media.MediaFoundation.IMFVideoProcessorControl2_head):
        Guid = Guid('2424b3f2-eb23-40f1-91aa-74bddeea0883')
    return IMFVideoProcessorControl3
def _define_IMFVideoProcessorControl3():
    IMFVideoProcessorControl3 = win32more.Media.MediaFoundation.IMFVideoProcessorControl3_head
    IMFVideoProcessorControl3.GetNaturalOutputType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head), use_last_error=False)(12, 'GetNaturalOutputType', ((1, 'ppType'),)))
    IMFVideoProcessorControl3.EnableSphericalVideoProcessing = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL,win32more.Media.MediaFoundation.MFVideoSphericalFormat,win32more.Media.MediaFoundation.MFVideoSphericalProjectionMode, use_last_error=False)(13, 'EnableSphericalVideoProcessing', ((1, 'fEnable'),(1, 'eFormat'),(1, 'eProjectionMode'),)))
    IMFVideoProcessorControl3.SetSphericalVideoProperties = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Single,Single,Single,Single,Single, use_last_error=False)(14, 'SetSphericalVideoProperties', ((1, 'X'),(1, 'Y'),(1, 'Z'),(1, 'W'),(1, 'fieldOfView'),)))
    IMFVideoProcessorControl3.SetOutputDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head, use_last_error=False)(15, 'SetOutputDevice', ((1, 'pOutputDevice'),)))
    win32more.Media.MediaFoundation.IMFVideoProcessorControl2
    return IMFVideoProcessorControl3
def _define_IMFVideoRendererEffectControl_head():
    class IMFVideoRendererEffectControl(win32more.System.Com.IUnknown_head):
        Guid = Guid('604d33d7-cf23-41d5-8224-5bbbb1a87475')
    return IMFVideoRendererEffectControl
def _define_IMFVideoRendererEffectControl():
    IMFVideoRendererEffectControl = win32more.Media.MediaFoundation.IMFVideoRendererEffectControl_head
    IMFVideoRendererEffectControl.OnAppServiceConnectionEstablished = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head, use_last_error=False)(3, 'OnAppServiceConnectionEstablished', ((1, 'pAppServiceConnection'),)))
    win32more.System.Com.IUnknown
    return IMFVideoRendererEffectControl
def _define_IMFTopology_head():
    class IMFTopology(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('83cf873a-f6da-4bc8-823f-bacfd55dc433')
    return IMFTopology
def _define_IMFTopology():
    IMFTopology = win32more.Media.MediaFoundation.IMFTopology_head
    IMFTopology.GetTopologyID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64), use_last_error=False)(33, 'GetTopologyID', ((1, 'pID'),)))
    IMFTopology.AddNode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTopologyNode_head, use_last_error=False)(34, 'AddNode', ((1, 'pNode'),)))
    IMFTopology.RemoveNode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTopologyNode_head, use_last_error=False)(35, 'RemoveNode', ((1, 'pNode'),)))
    IMFTopology.GetNodeCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt16), use_last_error=False)(36, 'GetNodeCount', ((1, 'pwNodes'),)))
    IMFTopology.GetNode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16,POINTER(win32more.Media.MediaFoundation.IMFTopologyNode_head), use_last_error=False)(37, 'GetNode', ((1, 'wIndex'),(1, 'ppNode'),)))
    IMFTopology.Clear = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(38, 'Clear', ()))
    IMFTopology.CloneFrom = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTopology_head, use_last_error=False)(39, 'CloneFrom', ((1, 'pTopology'),)))
    IMFTopology.GetNodeByID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64,POINTER(win32more.Media.MediaFoundation.IMFTopologyNode_head), use_last_error=False)(40, 'GetNodeByID', ((1, 'qwTopoNodeID'),(1, 'ppNode'),)))
    IMFTopology.GetSourceNodeCollection = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFCollection_head), use_last_error=False)(41, 'GetSourceNodeCollection', ((1, 'ppCollection'),)))
    IMFTopology.GetOutputNodeCollection = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFCollection_head), use_last_error=False)(42, 'GetOutputNodeCollection', ((1, 'ppCollection'),)))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFTopology
MFTOPOLOGY_DXVA_MODE = Int32
MFTOPOLOGY_DXVA_DEFAULT = 0
MFTOPOLOGY_DXVA_NONE = 1
MFTOPOLOGY_DXVA_FULL = 2
MFTOPOLOGY_HARDWARE_MODE = Int32
MFTOPOLOGY_HWMODE_SOFTWARE_ONLY = 0
MFTOPOLOGY_HWMODE_USE_HARDWARE = 1
MFTOPOLOGY_HWMODE_USE_ONLY_HARDWARE = 2
MF_TOPOLOGY_TYPE = Int32
MF_TOPOLOGY_OUTPUT_NODE = 0
MF_TOPOLOGY_SOURCESTREAM_NODE = 1
MF_TOPOLOGY_TRANSFORM_NODE = 2
MF_TOPOLOGY_TEE_NODE = 3
MF_TOPOLOGY_MAX = -1
def _define_IMFTopologyNode_head():
    class IMFTopologyNode(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('83cf873a-f6da-4bc8-823f-bacfd55dc430')
    return IMFTopologyNode
def _define_IMFTopologyNode():
    IMFTopologyNode = win32more.Media.MediaFoundation.IMFTopologyNode_head
    IMFTopologyNode.SetObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head, use_last_error=False)(33, 'SetObject', ((1, 'pObject'),)))
    IMFTopologyNode.GetObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.IUnknown_head), use_last_error=False)(34, 'GetObject', ((1, 'ppObject'),)))
    IMFTopologyNode.GetNodeType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_TOPOLOGY_TYPE), use_last_error=False)(35, 'GetNodeType', ((1, 'pType'),)))
    IMFTopologyNode.GetTopoNodeID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64), use_last_error=False)(36, 'GetTopoNodeID', ((1, 'pID'),)))
    IMFTopologyNode.SetTopoNodeID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64, use_last_error=False)(37, 'SetTopoNodeID', ((1, 'ullTopoID'),)))
    IMFTopologyNode.GetInputCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(38, 'GetInputCount', ((1, 'pcInputs'),)))
    IMFTopologyNode.GetOutputCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(39, 'GetOutputCount', ((1, 'pcOutputs'),)))
    IMFTopologyNode.ConnectOutput = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFTopologyNode_head,UInt32, use_last_error=False)(40, 'ConnectOutput', ((1, 'dwOutputIndex'),(1, 'pDownstreamNode'),(1, 'dwInputIndexOnDownstreamNode'),)))
    IMFTopologyNode.DisconnectOutput = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(41, 'DisconnectOutput', ((1, 'dwOutputIndex'),)))
    IMFTopologyNode.GetInput = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFTopologyNode_head),POINTER(UInt32), use_last_error=False)(42, 'GetInput', ((1, 'dwInputIndex'),(1, 'ppUpstreamNode'),(1, 'pdwOutputIndexOnUpstreamNode'),)))
    IMFTopologyNode.GetOutput = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFTopologyNode_head),POINTER(UInt32), use_last_error=False)(43, 'GetOutput', ((1, 'dwOutputIndex'),(1, 'ppDownstreamNode'),(1, 'pdwInputIndexOnDownstreamNode'),)))
    IMFTopologyNode.SetOutputPrefType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head, use_last_error=False)(44, 'SetOutputPrefType', ((1, 'dwOutputIndex'),(1, 'pType'),)))
    IMFTopologyNode.GetOutputPrefType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head), use_last_error=False)(45, 'GetOutputPrefType', ((1, 'dwOutputIndex'),(1, 'ppType'),)))
    IMFTopologyNode.SetInputPrefType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head, use_last_error=False)(46, 'SetInputPrefType', ((1, 'dwInputIndex'),(1, 'pType'),)))
    IMFTopologyNode.GetInputPrefType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head), use_last_error=False)(47, 'GetInputPrefType', ((1, 'dwInputIndex'),(1, 'ppType'),)))
    IMFTopologyNode.CloneFrom = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTopologyNode_head, use_last_error=False)(48, 'CloneFrom', ((1, 'pNode'),)))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFTopologyNode
MF_TOPONODE_FLUSH_MODE = Int32
MF_TOPONODE_FLUSH_ALWAYS = 0
MF_TOPONODE_FLUSH_SEEK = 1
MF_TOPONODE_FLUSH_NEVER = 2
MF_TOPONODE_DRAIN_MODE = Int32
MF_TOPONODE_DRAIN_DEFAULT = 0
MF_TOPONODE_DRAIN_ALWAYS = 1
MF_TOPONODE_DRAIN_NEVER = 2
def _define_IMFGetService_head():
    class IMFGetService(win32more.System.Com.IUnknown_head):
        Guid = Guid('fa993888-4383-415a-a930-dd472a8cf6f7')
    return IMFGetService
def _define_IMFGetService():
    IMFGetService = win32more.Media.MediaFoundation.IMFGetService_head
    IMFGetService.GetService = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Guid),POINTER(c_void_p), use_last_error=False)(3, 'GetService', ((1, 'guidService'),(1, 'riid'),(1, 'ppvObject'),)))
    win32more.System.Com.IUnknown
    return IMFGetService
MFCLOCK_CHARACTERISTICS_FLAGS = Int32
MFCLOCK_CHARACTERISTICS_FLAG_FREQUENCY_10MHZ = 2
MFCLOCK_CHARACTERISTICS_FLAG_ALWAYS_RUNNING = 4
MFCLOCK_CHARACTERISTICS_FLAG_IS_SYSTEM_CLOCK = 8
MFCLOCK_STATE = Int32
MFCLOCK_STATE_INVALID = 0
MFCLOCK_STATE_RUNNING = 1
MFCLOCK_STATE_STOPPED = 2
MFCLOCK_STATE_PAUSED = 3
MFCLOCK_RELATIONAL_FLAGS = Int32
MFCLOCK_RELATIONAL_FLAG_JITTER_NEVER_AHEAD = 1
def _define_MFCLOCK_PROPERTIES_head():
    class MFCLOCK_PROPERTIES(Structure):
        pass
    return MFCLOCK_PROPERTIES
def _define_MFCLOCK_PROPERTIES():
    MFCLOCK_PROPERTIES = win32more.Media.MediaFoundation.MFCLOCK_PROPERTIES_head
    MFCLOCK_PROPERTIES._fields_ = [
        ("qwCorrelationRate", UInt64),
        ("guidClockId", Guid),
        ("dwClockFlags", UInt32),
        ("qwClockFrequency", UInt64),
        ("dwClockTolerance", UInt32),
        ("dwClockJitter", UInt32),
    ]
    return MFCLOCK_PROPERTIES
def _define_IMFClock_head():
    class IMFClock(win32more.System.Com.IUnknown_head):
        Guid = Guid('2eb1e945-18b8-4139-9b1a-d5d584818530')
    return IMFClock
def _define_IMFClock():
    IMFClock = win32more.Media.MediaFoundation.IMFClock_head
    IMFClock.GetClockCharacteristics = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(3, 'GetClockCharacteristics', ((1, 'pdwCharacteristics'),)))
    IMFClock.GetCorrelatedTime = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Int64),POINTER(Int64), use_last_error=False)(4, 'GetCorrelatedTime', ((1, 'dwReserved'),(1, 'pllClockTime'),(1, 'phnsSystemTime'),)))
    IMFClock.GetContinuityKey = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(5, 'GetContinuityKey', ((1, 'pdwContinuityKey'),)))
    IMFClock.GetState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.MFCLOCK_STATE), use_last_error=False)(6, 'GetState', ((1, 'dwReserved'),(1, 'peClockState'),)))
    IMFClock.GetProperties = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFCLOCK_PROPERTIES_head), use_last_error=False)(7, 'GetProperties', ((1, 'pClockProperties'),)))
    win32more.System.Com.IUnknown
    return IMFClock
def _define_IMFPresentationClock_head():
    class IMFPresentationClock(win32more.Media.MediaFoundation.IMFClock_head):
        Guid = Guid('868ce85c-8ea9-4f55-ab82-b009a910a805')
    return IMFPresentationClock
def _define_IMFPresentationClock():
    IMFPresentationClock = win32more.Media.MediaFoundation.IMFPresentationClock_head
    IMFPresentationClock.SetTimeSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationTimeSource_head, use_last_error=False)(8, 'SetTimeSource', ((1, 'pTimeSource'),)))
    IMFPresentationClock.GetTimeSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFPresentationTimeSource_head), use_last_error=False)(9, 'GetTimeSource', ((1, 'ppTimeSource'),)))
    IMFPresentationClock.GetTime = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int64), use_last_error=False)(10, 'GetTime', ((1, 'phnsClockTime'),)))
    IMFPresentationClock.AddClockStateSink = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFClockStateSink_head, use_last_error=False)(11, 'AddClockStateSink', ((1, 'pStateSink'),)))
    IMFPresentationClock.RemoveClockStateSink = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFClockStateSink_head, use_last_error=False)(12, 'RemoveClockStateSink', ((1, 'pStateSink'),)))
    IMFPresentationClock.Start = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int64, use_last_error=False)(13, 'Start', ((1, 'llClockStartOffset'),)))
    IMFPresentationClock.Stop = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(14, 'Stop', ()))
    IMFPresentationClock.Pause = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(15, 'Pause', ()))
    win32more.Media.MediaFoundation.IMFClock
    return IMFPresentationClock
def _define_IMFPresentationTimeSource_head():
    class IMFPresentationTimeSource(win32more.Media.MediaFoundation.IMFClock_head):
        Guid = Guid('7ff12cce-f76f-41c2-863b-1666c8e5e139')
    return IMFPresentationTimeSource
def _define_IMFPresentationTimeSource():
    IMFPresentationTimeSource = win32more.Media.MediaFoundation.IMFPresentationTimeSource_head
    IMFPresentationTimeSource.GetUnderlyingClock = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFClock_head), use_last_error=False)(8, 'GetUnderlyingClock', ((1, 'ppClock'),)))
    win32more.Media.MediaFoundation.IMFClock
    return IMFPresentationTimeSource
def _define_IMFClockStateSink_head():
    class IMFClockStateSink(win32more.System.Com.IUnknown_head):
        Guid = Guid('f6696e82-74f7-4f3d-a178-8a5e09c3659f')
    return IMFClockStateSink
def _define_IMFClockStateSink():
    IMFClockStateSink = win32more.Media.MediaFoundation.IMFClockStateSink_head
    IMFClockStateSink.OnClockStart = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int64,Int64, use_last_error=False)(3, 'OnClockStart', ((1, 'hnsSystemTime'),(1, 'llClockStartOffset'),)))
    IMFClockStateSink.OnClockStop = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int64, use_last_error=False)(4, 'OnClockStop', ((1, 'hnsSystemTime'),)))
    IMFClockStateSink.OnClockPause = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int64, use_last_error=False)(5, 'OnClockPause', ((1, 'hnsSystemTime'),)))
    IMFClockStateSink.OnClockRestart = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int64, use_last_error=False)(6, 'OnClockRestart', ((1, 'hnsSystemTime'),)))
    IMFClockStateSink.OnClockSetRate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int64,Single, use_last_error=False)(7, 'OnClockSetRate', ((1, 'hnsSystemTime'),(1, 'flRate'),)))
    win32more.System.Com.IUnknown
    return IMFClockStateSink
def _define_IMFPresentationDescriptor_head():
    class IMFPresentationDescriptor(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('03cb2711-24d7-4db6-a17f-f3a7a479a536')
    return IMFPresentationDescriptor
def _define_IMFPresentationDescriptor():
    IMFPresentationDescriptor = win32more.Media.MediaFoundation.IMFPresentationDescriptor_head
    IMFPresentationDescriptor.GetStreamDescriptorCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(33, 'GetStreamDescriptorCount', ((1, 'pdwDescriptorCount'),)))
    IMFPresentationDescriptor.GetStreamDescriptorByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Foundation.BOOL),POINTER(win32more.Media.MediaFoundation.IMFStreamDescriptor_head), use_last_error=False)(34, 'GetStreamDescriptorByIndex', ((1, 'dwIndex'),(1, 'pfSelected'),(1, 'ppDescriptor'),)))
    IMFPresentationDescriptor.SelectStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(35, 'SelectStream', ((1, 'dwDescriptorIndex'),)))
    IMFPresentationDescriptor.DeselectStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(36, 'DeselectStream', ((1, 'dwDescriptorIndex'),)))
    IMFPresentationDescriptor.Clone = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFPresentationDescriptor_head), use_last_error=False)(37, 'Clone', ((1, 'ppPresentationDescriptor'),)))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFPresentationDescriptor
def _define_IMFStreamDescriptor_head():
    class IMFStreamDescriptor(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('56c03d9c-9dbb-45f5-ab4b-d80f47c05938')
    return IMFStreamDescriptor
def _define_IMFStreamDescriptor():
    IMFStreamDescriptor = win32more.Media.MediaFoundation.IMFStreamDescriptor_head
    IMFStreamDescriptor.GetStreamIdentifier = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(33, 'GetStreamIdentifier', ((1, 'pdwStreamIdentifier'),)))
    IMFStreamDescriptor.GetMediaTypeHandler = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaTypeHandler_head), use_last_error=False)(34, 'GetMediaTypeHandler', ((1, 'ppMediaTypeHandler'),)))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFStreamDescriptor
def _define_IMFMediaTypeHandler_head():
    class IMFMediaTypeHandler(win32more.System.Com.IUnknown_head):
        Guid = Guid('e93dcf6c-4b07-4e1e-8123-aa16ed6eadf5')
    return IMFMediaTypeHandler
def _define_IMFMediaTypeHandler():
    IMFMediaTypeHandler = win32more.Media.MediaFoundation.IMFMediaTypeHandler_head
    IMFMediaTypeHandler.IsMediaTypeSupported = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head), use_last_error=False)(3, 'IsMediaTypeSupported', ((1, 'pMediaType'),(1, 'ppMediaType'),)))
    IMFMediaTypeHandler.GetMediaTypeCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(4, 'GetMediaTypeCount', ((1, 'pdwTypeCount'),)))
    IMFMediaTypeHandler.GetMediaTypeByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head), use_last_error=False)(5, 'GetMediaTypeByIndex', ((1, 'dwIndex'),(1, 'ppType'),)))
    IMFMediaTypeHandler.SetCurrentMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head, use_last_error=False)(6, 'SetCurrentMediaType', ((1, 'pMediaType'),)))
    IMFMediaTypeHandler.GetCurrentMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head), use_last_error=False)(7, 'GetCurrentMediaType', ((1, 'ppMediaType'),)))
    IMFMediaTypeHandler.GetMajorType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid), use_last_error=False)(8, 'GetMajorType', ((1, 'pguidMajorType'),)))
    win32more.System.Com.IUnknown
    return IMFMediaTypeHandler
MFTIMER_FLAGS = Int32
MFTIMER_RELATIVE = 1
def _define_IMFTimer_head():
    class IMFTimer(win32more.System.Com.IUnknown_head):
        Guid = Guid('e56e4cbd-8f70-49d8-a0f8-edb3d6ab9bf2')
    return IMFTimer
def _define_IMFTimer():
    IMFTimer = win32more.Media.MediaFoundation.IMFTimer_head
    IMFTimer.SetTimer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,Int64,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head,POINTER(win32more.System.Com.IUnknown_head), use_last_error=False)(3, 'SetTimer', ((1, 'dwFlags'),(1, 'llClockTime'),(1, 'pCallback'),(1, 'punkState'),(1, 'ppunkKey'),)))
    IMFTimer.CancelTimer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head, use_last_error=False)(4, 'CancelTimer', ((1, 'punkKey'),)))
    win32more.System.Com.IUnknown
    return IMFTimer
MF_ACTIVATE_CUSTOM_MIXER = Int32
MF_ACTIVATE_CUSTOM_MIXER_ALLOWFAIL = 1
MF_ACTIVATE_CUSTOM_PRESENTER = Int32
MF_ACTIVATE_CUSTOM_PRESENTER_ALLOWFAIL = 1
MFSHUTDOWN_STATUS = Int32
MFSHUTDOWN_INITIATED = 0
MFSHUTDOWN_COMPLETED = 1
def _define_IMFShutdown_head():
    class IMFShutdown(win32more.System.Com.IUnknown_head):
        Guid = Guid('97ec2ea4-0e42-4937-97ac-9d6d328824e1')
    return IMFShutdown
def _define_IMFShutdown():
    IMFShutdown = win32more.Media.MediaFoundation.IMFShutdown_head
    IMFShutdown.Shutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(3, 'Shutdown', ()))
    IMFShutdown.GetShutdownStatus = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFSHUTDOWN_STATUS), use_last_error=False)(4, 'GetShutdownStatus', ((1, 'pStatus'),)))
    win32more.System.Com.IUnknown
    return IMFShutdown
def _define_IMFTopoLoader_head():
    class IMFTopoLoader(win32more.System.Com.IUnknown_head):
        Guid = Guid('de9a6157-f660-4643-b56a-df9f7998c7cd')
    return IMFTopoLoader
def _define_IMFTopoLoader():
    IMFTopoLoader = win32more.Media.MediaFoundation.IMFTopoLoader_head
    IMFTopoLoader.Load = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTopology_head,POINTER(win32more.Media.MediaFoundation.IMFTopology_head),win32more.Media.MediaFoundation.IMFTopology_head, use_last_error=False)(3, 'Load', ((1, 'pInputTopo'),(1, 'ppOutputTopo'),(1, 'pCurrentTopo'),)))
    win32more.System.Com.IUnknown
    return IMFTopoLoader
def _define_IMFContentProtectionManager_head():
    class IMFContentProtectionManager(win32more.System.Com.IUnknown_head):
        Guid = Guid('acf92459-6a61-42bd-b57c-b43e51203cb0')
    return IMFContentProtectionManager
def _define_IMFContentProtectionManager():
    IMFContentProtectionManager = win32more.Media.MediaFoundation.IMFContentProtectionManager_head
    IMFContentProtectionManager.BeginEnableContent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFActivate_head,win32more.Media.MediaFoundation.IMFTopology_head,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(3, 'BeginEnableContent', ((1, 'pEnablerActivate'),(1, 'pTopo'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFContentProtectionManager.EndEnableContent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head, use_last_error=False)(4, 'EndEnableContent', ((1, 'pResult'),)))
    win32more.System.Com.IUnknown
    return IMFContentProtectionManager
MF_URL_TRUST_STATUS = Int32
MF_LICENSE_URL_UNTRUSTED = 0
MF_LICENSE_URL_TRUSTED = 1
MF_LICENSE_URL_TAMPERED = 2
def _define_IMFContentEnabler_head():
    class IMFContentEnabler(win32more.System.Com.IUnknown_head):
        Guid = Guid('d3c4ef59-49ce-4381-9071-d5bcd044c770')
    return IMFContentEnabler
def _define_IMFContentEnabler():
    IMFContentEnabler = win32more.Media.MediaFoundation.IMFContentEnabler_head
    IMFContentEnabler.GetEnableType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid), use_last_error=False)(3, 'GetEnableType', ((1, 'pType'),)))
    IMFContentEnabler.GetEnableURL = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR),POINTER(UInt32),POINTER(win32more.Media.MediaFoundation.MF_URL_TRUST_STATUS), use_last_error=False)(4, 'GetEnableURL', ((1, 'ppwszURL'),(1, 'pcchURL'),(1, 'pTrustStatus'),)))
    IMFContentEnabler.GetEnableData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(c_char_p_no),POINTER(UInt32), use_last_error=False)(5, 'GetEnableData', ((1, 'ppbData'),(1, 'pcbData'),)))
    IMFContentEnabler.IsAutomaticSupported = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(6, 'IsAutomaticSupported', ((1, 'pfAutomatic'),)))
    IMFContentEnabler.AutomaticEnable = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(7, 'AutomaticEnable', ()))
    IMFContentEnabler.MonitorEnable = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(8, 'MonitorEnable', ()))
    IMFContentEnabler.Cancel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(9, 'Cancel', ()))
    win32more.System.Com.IUnknown
    return IMFContentEnabler
def _define_MFRR_COMPONENT_HASH_INFO_head():
    class MFRR_COMPONENT_HASH_INFO(Structure):
        pass
    return MFRR_COMPONENT_HASH_INFO
def _define_MFRR_COMPONENT_HASH_INFO():
    MFRR_COMPONENT_HASH_INFO = win32more.Media.MediaFoundation.MFRR_COMPONENT_HASH_INFO_head
    MFRR_COMPONENT_HASH_INFO._fields_ = [
        ("ulReason", UInt32),
        ("rgHeaderHash", Char * 43),
        ("rgPublicKeyHash", Char * 43),
        ("wszName", Char * 260),
    ]
    return MFRR_COMPONENT_HASH_INFO
def _define_MFRR_COMPONENTS_head():
    class MFRR_COMPONENTS(Structure):
        pass
    return MFRR_COMPONENTS
def _define_MFRR_COMPONENTS():
    MFRR_COMPONENTS = win32more.Media.MediaFoundation.MFRR_COMPONENTS_head
    MFRR_COMPONENTS._fields_ = [
        ("dwRRInfoVersion", UInt32),
        ("dwRRComponents", UInt32),
        ("pRRComponents", POINTER(win32more.Media.MediaFoundation.MFRR_COMPONENT_HASH_INFO_head)),
    ]
    return MFRR_COMPONENTS
def _define_ASF_FLAT_PICTURE_head():
    class ASF_FLAT_PICTURE(Structure):
        pass
    return ASF_FLAT_PICTURE
def _define_ASF_FLAT_PICTURE():
    ASF_FLAT_PICTURE = win32more.Media.MediaFoundation.ASF_FLAT_PICTURE_head
    ASF_FLAT_PICTURE._pack_ = 1
    ASF_FLAT_PICTURE._fields_ = [
        ("bPictureType", Byte),
        ("dwDataLen", UInt32),
    ]
    return ASF_FLAT_PICTURE
def _define_ASF_FLAT_SYNCHRONISED_LYRICS_head():
    class ASF_FLAT_SYNCHRONISED_LYRICS(Structure):
        pass
    return ASF_FLAT_SYNCHRONISED_LYRICS
def _define_ASF_FLAT_SYNCHRONISED_LYRICS():
    ASF_FLAT_SYNCHRONISED_LYRICS = win32more.Media.MediaFoundation.ASF_FLAT_SYNCHRONISED_LYRICS_head
    ASF_FLAT_SYNCHRONISED_LYRICS._pack_ = 1
    ASF_FLAT_SYNCHRONISED_LYRICS._fields_ = [
        ("bTimeStampFormat", Byte),
        ("bContentType", Byte),
        ("dwLyricsLen", UInt32),
    ]
    return ASF_FLAT_SYNCHRONISED_LYRICS
def _define_IMFMetadata_head():
    class IMFMetadata(win32more.System.Com.IUnknown_head):
        Guid = Guid('f88cfb8c-ef16-4991-b450-cb8c69e51704')
    return IMFMetadata
def _define_IMFMetadata():
    IMFMetadata = win32more.Media.MediaFoundation.IMFMetadata_head
    IMFMetadata.SetLanguage = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR, use_last_error=False)(3, 'SetLanguage', ((1, 'pwszRFC1766'),)))
    IMFMetadata.GetLanguage = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR), use_last_error=False)(4, 'GetLanguage', ((1, 'ppwszRFC1766'),)))
    IMFMetadata.GetAllLanguages = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(5, 'GetAllLanguages', ((1, 'ppvLanguages'),)))
    IMFMetadata.SetProperty = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(6, 'SetProperty', ((1, 'pwszName'),(1, 'ppvValue'),)))
    IMFMetadata.GetProperty = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(7, 'GetProperty', ((1, 'pwszName'),(1, 'ppvValue'),)))
    IMFMetadata.DeleteProperty = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR, use_last_error=False)(8, 'DeleteProperty', ((1, 'pwszName'),)))
    IMFMetadata.GetAllPropertyNames = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(9, 'GetAllPropertyNames', ((1, 'ppvNames'),)))
    win32more.System.Com.IUnknown
    return IMFMetadata
def _define_IMFMetadataProvider_head():
    class IMFMetadataProvider(win32more.System.Com.IUnknown_head):
        Guid = Guid('56181d2d-e221-4adb-b1c8-3cee6a53f76f')
    return IMFMetadataProvider
def _define_IMFMetadataProvider():
    IMFMetadataProvider = win32more.Media.MediaFoundation.IMFMetadataProvider_head
    IMFMetadataProvider.GetMFMetadata = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationDescriptor_head,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMetadata_head), use_last_error=False)(3, 'GetMFMetadata', ((1, 'pPresentationDescriptor'),(1, 'dwStreamIdentifier'),(1, 'dwFlags'),(1, 'ppMFMetadata'),)))
    win32more.System.Com.IUnknown
    return IMFMetadataProvider
MFRATE_DIRECTION = Int32
MFRATE_FORWARD = 0
MFRATE_REVERSE = 1
def _define_IMFRateSupport_head():
    class IMFRateSupport(win32more.System.Com.IUnknown_head):
        Guid = Guid('0a9ccdbc-d797-4563-9667-94ec5d79292d')
    return IMFRateSupport
def _define_IMFRateSupport():
    IMFRateSupport = win32more.Media.MediaFoundation.IMFRateSupport_head
    IMFRateSupport.GetSlowestRate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFRATE_DIRECTION,win32more.Foundation.BOOL,POINTER(Single), use_last_error=False)(3, 'GetSlowestRate', ((1, 'eDirection'),(1, 'fThin'),(1, 'pflRate'),)))
    IMFRateSupport.GetFastestRate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFRATE_DIRECTION,win32more.Foundation.BOOL,POINTER(Single), use_last_error=False)(4, 'GetFastestRate', ((1, 'eDirection'),(1, 'fThin'),(1, 'pflRate'),)))
    IMFRateSupport.IsRateSupported = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL,Single,POINTER(Single), use_last_error=False)(5, 'IsRateSupported', ((1, 'fThin'),(1, 'flRate'),(1, 'pflNearestSupportedRate'),)))
    win32more.System.Com.IUnknown
    return IMFRateSupport
def _define_IMFRateControl_head():
    class IMFRateControl(win32more.System.Com.IUnknown_head):
        Guid = Guid('88ddcd21-03c3-4275-91ed-55ee3929328f')
    return IMFRateControl
def _define_IMFRateControl():
    IMFRateControl = win32more.Media.MediaFoundation.IMFRateControl_head
    IMFRateControl.SetRate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL,Single, use_last_error=False)(3, 'SetRate', ((1, 'fThin'),(1, 'flRate'),)))
    IMFRateControl.GetRate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL),POINTER(Single), use_last_error=False)(4, 'GetRate', ((1, 'pfThin'),(1, 'pflRate'),)))
    win32more.System.Com.IUnknown
    return IMFRateControl
def _define_IMFTimecodeTranslate_head():
    class IMFTimecodeTranslate(win32more.System.Com.IUnknown_head):
        Guid = Guid('ab9d8661-f7e8-4ef4-9861-89f334f94e74')
    return IMFTimecodeTranslate
def _define_IMFTimecodeTranslate():
    IMFTimecodeTranslate = win32more.Media.MediaFoundation.IMFTimecodeTranslate_head
    IMFTimecodeTranslate.BeginConvertTimecodeToHNS = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head),win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(3, 'BeginConvertTimecodeToHNS', ((1, 'pPropVarTimecode'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFTimecodeTranslate.EndConvertTimecodeToHNS = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(Int64), use_last_error=False)(4, 'EndConvertTimecodeToHNS', ((1, 'pResult'),(1, 'phnsTime'),)))
    IMFTimecodeTranslate.BeginConvertHNSToTimecode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int64,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(5, 'BeginConvertHNSToTimecode', ((1, 'hnsTime'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFTimecodeTranslate.EndConvertHNSToTimecode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(6, 'EndConvertHNSToTimecode', ((1, 'pResult'),(1, 'pPropVarTimecode'),)))
    win32more.System.Com.IUnknown
    return IMFTimecodeTranslate
def _define_IMFSeekInfo_head():
    class IMFSeekInfo(win32more.System.Com.IUnknown_head):
        Guid = Guid('26afea53-d9ed-42b5-ab80-e64f9ee34779')
    return IMFSeekInfo
def _define_IMFSeekInfo():
    IMFSeekInfo = win32more.Media.MediaFoundation.IMFSeekInfo_head
    IMFSeekInfo.GetNearestKeyFrames = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(3, 'GetNearestKeyFrames', ((1, 'pguidTimeFormat'),(1, 'pvarStartPosition'),(1, 'pvarPreviousKeyFrame'),(1, 'pvarNextKeyFrame'),)))
    win32more.System.Com.IUnknown
    return IMFSeekInfo
def _define_IMFSimpleAudioVolume_head():
    class IMFSimpleAudioVolume(win32more.System.Com.IUnknown_head):
        Guid = Guid('089edf13-cf71-4338-8d13-9e569dbdc319')
    return IMFSimpleAudioVolume
def _define_IMFSimpleAudioVolume():
    IMFSimpleAudioVolume = win32more.Media.MediaFoundation.IMFSimpleAudioVolume_head
    IMFSimpleAudioVolume.SetMasterVolume = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Single, use_last_error=False)(3, 'SetMasterVolume', ((1, 'fLevel'),)))
    IMFSimpleAudioVolume.GetMasterVolume = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Single), use_last_error=False)(4, 'GetMasterVolume', ((1, 'pfLevel'),)))
    IMFSimpleAudioVolume.SetMute = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL, use_last_error=False)(5, 'SetMute', ((1, 'bMute'),)))
    IMFSimpleAudioVolume.GetMute = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(6, 'GetMute', ((1, 'pbMute'),)))
    win32more.System.Com.IUnknown
    return IMFSimpleAudioVolume
def _define_IMFAudioStreamVolume_head():
    class IMFAudioStreamVolume(win32more.System.Com.IUnknown_head):
        Guid = Guid('76b1bbdb-4ec8-4f36-b106-70a9316df593')
    return IMFAudioStreamVolume
def _define_IMFAudioStreamVolume():
    IMFAudioStreamVolume = win32more.Media.MediaFoundation.IMFAudioStreamVolume_head
    IMFAudioStreamVolume.GetChannelCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(3, 'GetChannelCount', ((1, 'pdwCount'),)))
    IMFAudioStreamVolume.SetChannelVolume = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,Single, use_last_error=False)(4, 'SetChannelVolume', ((1, 'dwIndex'),(1, 'fLevel'),)))
    IMFAudioStreamVolume.GetChannelVolume = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Single), use_last_error=False)(5, 'GetChannelVolume', ((1, 'dwIndex'),(1, 'pfLevel'),)))
    IMFAudioStreamVolume.SetAllVolumes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Single), use_last_error=False)(6, 'SetAllVolumes', ((1, 'dwCount'),(1, 'pfVolumes'),)))
    IMFAudioStreamVolume.GetAllVolumes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Single), use_last_error=False)(7, 'GetAllVolumes', ((1, 'dwCount'),(1, 'pfVolumes'),)))
    win32more.System.Com.IUnknown
    return IMFAudioStreamVolume
def _define_IMFAudioPolicy_head():
    class IMFAudioPolicy(win32more.System.Com.IUnknown_head):
        Guid = Guid('a0638c2b-6465-4395-9ae7-a321a9fd2856')
    return IMFAudioPolicy
def _define_IMFAudioPolicy():
    IMFAudioPolicy = win32more.Media.MediaFoundation.IMFAudioPolicy_head
    IMFAudioPolicy.SetGroupingParam = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid), use_last_error=False)(3, 'SetGroupingParam', ((1, 'rguidClass'),)))
    IMFAudioPolicy.GetGroupingParam = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid), use_last_error=False)(4, 'GetGroupingParam', ((1, 'pguidClass'),)))
    IMFAudioPolicy.SetDisplayName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR, use_last_error=False)(5, 'SetDisplayName', ((1, 'pszName'),)))
    IMFAudioPolicy.GetDisplayName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR), use_last_error=False)(6, 'GetDisplayName', ((1, 'pszName'),)))
    IMFAudioPolicy.SetIconPath = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR, use_last_error=False)(7, 'SetIconPath', ((1, 'pszPath'),)))
    IMFAudioPolicy.GetIconPath = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR), use_last_error=False)(8, 'GetIconPath', ((1, 'pszPath'),)))
    win32more.System.Com.IUnknown
    return IMFAudioPolicy
def _define_IMFSampleGrabberSinkCallback_head():
    class IMFSampleGrabberSinkCallback(win32more.Media.MediaFoundation.IMFClockStateSink_head):
        Guid = Guid('8c7b80bf-ee42-4b59-b1df-55668e1bdca8')
    return IMFSampleGrabberSinkCallback
def _define_IMFSampleGrabberSinkCallback():
    IMFSampleGrabberSinkCallback = win32more.Media.MediaFoundation.IMFSampleGrabberSinkCallback_head
    IMFSampleGrabberSinkCallback.OnSetPresentationClock = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationClock_head, use_last_error=False)(8, 'OnSetPresentationClock', ((1, 'pPresentationClock'),)))
    IMFSampleGrabberSinkCallback.OnProcessSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),UInt32,Int64,Int64,c_char_p_no,UInt32, use_last_error=False)(9, 'OnProcessSample', ((1, 'guidMajorMediaType'),(1, 'dwSampleFlags'),(1, 'llSampleTime'),(1, 'llSampleDuration'),(1, 'pSampleBuffer'),(1, 'dwSampleSize'),)))
    IMFSampleGrabberSinkCallback.OnShutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(10, 'OnShutdown', ()))
    win32more.Media.MediaFoundation.IMFClockStateSink
    return IMFSampleGrabberSinkCallback
def _define_IMFSampleGrabberSinkCallback2_head():
    class IMFSampleGrabberSinkCallback2(win32more.Media.MediaFoundation.IMFSampleGrabberSinkCallback_head):
        Guid = Guid('ca86aa50-c46e-429e-ab27-16d6ac6844cb')
    return IMFSampleGrabberSinkCallback2
def _define_IMFSampleGrabberSinkCallback2():
    IMFSampleGrabberSinkCallback2 = win32more.Media.MediaFoundation.IMFSampleGrabberSinkCallback2_head
    IMFSampleGrabberSinkCallback2.OnProcessSampleEx = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),UInt32,Int64,Int64,c_char_p_no,UInt32,win32more.Media.MediaFoundation.IMFAttributes_head, use_last_error=False)(11, 'OnProcessSampleEx', ((1, 'guidMajorMediaType'),(1, 'dwSampleFlags'),(1, 'llSampleTime'),(1, 'llSampleDuration'),(1, 'pSampleBuffer'),(1, 'dwSampleSize'),(1, 'pAttributes'),)))
    win32more.Media.MediaFoundation.IMFSampleGrabberSinkCallback
    return IMFSampleGrabberSinkCallback2
def _define_IMFWorkQueueServices_head():
    class IMFWorkQueueServices(win32more.System.Com.IUnknown_head):
        Guid = Guid('35fe1bb8-a3a9-40fe-bbec-eb569c9ccca3')
    return IMFWorkQueueServices
def _define_IMFWorkQueueServices():
    IMFWorkQueueServices = win32more.Media.MediaFoundation.IMFWorkQueueServices_head
    IMFWorkQueueServices.BeginRegisterTopologyWorkQueuesWithMMCSS = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(3, 'BeginRegisterTopologyWorkQueuesWithMMCSS', ((1, 'pCallback'),(1, 'pState'),)))
    IMFWorkQueueServices.EndRegisterTopologyWorkQueuesWithMMCSS = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head, use_last_error=False)(4, 'EndRegisterTopologyWorkQueuesWithMMCSS', ((1, 'pResult'),)))
    IMFWorkQueueServices.BeginUnregisterTopologyWorkQueuesWithMMCSS = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(5, 'BeginUnregisterTopologyWorkQueuesWithMMCSS', ((1, 'pCallback'),(1, 'pState'),)))
    IMFWorkQueueServices.EndUnregisterTopologyWorkQueuesWithMMCSS = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head, use_last_error=False)(6, 'EndUnregisterTopologyWorkQueuesWithMMCSS', ((1, 'pResult'),)))
    IMFWorkQueueServices.GetTopologyWorkQueueMMCSSClass = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Char),POINTER(UInt32), use_last_error=False)(7, 'GetTopologyWorkQueueMMCSSClass', ((1, 'dwTopologyWorkQueueId'),(1, 'pwszClass'),(1, 'pcchClass'),)))
    IMFWorkQueueServices.GetTopologyWorkQueueMMCSSTaskId = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32), use_last_error=False)(8, 'GetTopologyWorkQueueMMCSSTaskId', ((1, 'dwTopologyWorkQueueId'),(1, 'pdwTaskId'),)))
    IMFWorkQueueServices.BeginRegisterPlatformWorkQueueWithMMCSS = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.PWSTR,UInt32,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(9, 'BeginRegisterPlatformWorkQueueWithMMCSS', ((1, 'dwPlatformWorkQueue'),(1, 'wszClass'),(1, 'dwTaskId'),(1, 'pCallback'),(1, 'pState'),)))
    IMFWorkQueueServices.EndRegisterPlatformWorkQueueWithMMCSS = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(UInt32), use_last_error=False)(10, 'EndRegisterPlatformWorkQueueWithMMCSS', ((1, 'pResult'),(1, 'pdwTaskId'),)))
    IMFWorkQueueServices.BeginUnregisterPlatformWorkQueueWithMMCSS = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(11, 'BeginUnregisterPlatformWorkQueueWithMMCSS', ((1, 'dwPlatformWorkQueue'),(1, 'pCallback'),(1, 'pState'),)))
    IMFWorkQueueServices.EndUnregisterPlatformWorkQueueWithMMCSS = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head, use_last_error=False)(12, 'EndUnregisterPlatformWorkQueueWithMMCSS', ((1, 'pResult'),)))
    IMFWorkQueueServices.GetPlaftormWorkQueueMMCSSClass = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Char),POINTER(UInt32), use_last_error=False)(13, 'GetPlaftormWorkQueueMMCSSClass', ((1, 'dwPlatformWorkQueueId'),(1, 'pwszClass'),(1, 'pcchClass'),)))
    IMFWorkQueueServices.GetPlatformWorkQueueMMCSSTaskId = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32), use_last_error=False)(14, 'GetPlatformWorkQueueMMCSSTaskId', ((1, 'dwPlatformWorkQueueId'),(1, 'pdwTaskId'),)))
    win32more.System.Com.IUnknown
    return IMFWorkQueueServices
def _define_IMFWorkQueueServicesEx_head():
    class IMFWorkQueueServicesEx(win32more.Media.MediaFoundation.IMFWorkQueueServices_head):
        Guid = Guid('96bf961b-40fe-42f1-ba9d-320238b49700')
    return IMFWorkQueueServicesEx
def _define_IMFWorkQueueServicesEx():
    IMFWorkQueueServicesEx = win32more.Media.MediaFoundation.IMFWorkQueueServicesEx_head
    IMFWorkQueueServicesEx.GetTopologyWorkQueueMMCSSPriority = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Int32), use_last_error=False)(15, 'GetTopologyWorkQueueMMCSSPriority', ((1, 'dwTopologyWorkQueueId'),(1, 'plPriority'),)))
    IMFWorkQueueServicesEx.BeginRegisterPlatformWorkQueueWithMMCSSEx = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.PWSTR,UInt32,Int32,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(16, 'BeginRegisterPlatformWorkQueueWithMMCSSEx', ((1, 'dwPlatformWorkQueue'),(1, 'wszClass'),(1, 'dwTaskId'),(1, 'lPriority'),(1, 'pCallback'),(1, 'pState'),)))
    IMFWorkQueueServicesEx.GetPlatformWorkQueueMMCSSPriority = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Int32), use_last_error=False)(17, 'GetPlatformWorkQueueMMCSSPriority', ((1, 'dwPlatformWorkQueueId'),(1, 'plPriority'),)))
    win32more.Media.MediaFoundation.IMFWorkQueueServices
    return IMFWorkQueueServicesEx
MF_QUALITY_DROP_MODE = Int32
MF_DROP_MODE_NONE = 0
MF_DROP_MODE_1 = 1
MF_DROP_MODE_2 = 2
MF_DROP_MODE_3 = 3
MF_DROP_MODE_4 = 4
MF_DROP_MODE_5 = 5
MF_NUM_DROP_MODES = 6
MF_QUALITY_LEVEL = Int32
MF_QUALITY_NORMAL = 0
MF_QUALITY_NORMAL_MINUS_1 = 1
MF_QUALITY_NORMAL_MINUS_2 = 2
MF_QUALITY_NORMAL_MINUS_3 = 3
MF_QUALITY_NORMAL_MINUS_4 = 4
MF_QUALITY_NORMAL_MINUS_5 = 5
MF_NUM_QUALITY_LEVELS = 6
MF_QUALITY_ADVISE_FLAGS = Int32
MF_QUALITY_CANNOT_KEEP_UP = 1
def _define_IMFQualityManager_head():
    class IMFQualityManager(win32more.System.Com.IUnknown_head):
        Guid = Guid('8d009d86-5b9f-4115-b1fc-9f80d52ab8ab')
    return IMFQualityManager
def _define_IMFQualityManager():
    IMFQualityManager = win32more.Media.MediaFoundation.IMFQualityManager_head
    IMFQualityManager.NotifyTopology = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTopology_head, use_last_error=False)(3, 'NotifyTopology', ((1, 'pTopology'),)))
    IMFQualityManager.NotifyPresentationClock = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationClock_head, use_last_error=False)(4, 'NotifyPresentationClock', ((1, 'pClock'),)))
    IMFQualityManager.NotifyProcessInput = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTopologyNode_head,Int32,win32more.Media.MediaFoundation.IMFSample_head, use_last_error=False)(5, 'NotifyProcessInput', ((1, 'pNode'),(1, 'lInputIndex'),(1, 'pSample'),)))
    IMFQualityManager.NotifyProcessOutput = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTopologyNode_head,Int32,win32more.Media.MediaFoundation.IMFSample_head, use_last_error=False)(6, 'NotifyProcessOutput', ((1, 'pNode'),(1, 'lOutputIndex'),(1, 'pSample'),)))
    IMFQualityManager.NotifyQualityEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,win32more.Media.MediaFoundation.IMFMediaEvent_head, use_last_error=False)(7, 'NotifyQualityEvent', ((1, 'pObject'),(1, 'pEvent'),)))
    IMFQualityManager.Shutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(8, 'Shutdown', ()))
    win32more.System.Com.IUnknown
    return IMFQualityManager
def _define_IMFQualityAdvise_head():
    class IMFQualityAdvise(win32more.System.Com.IUnknown_head):
        Guid = Guid('ec15e2e9-e36b-4f7c-8758-77d452ef4ce7')
    return IMFQualityAdvise
def _define_IMFQualityAdvise():
    IMFQualityAdvise = win32more.Media.MediaFoundation.IMFQualityAdvise_head
    IMFQualityAdvise.SetDropMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_QUALITY_DROP_MODE, use_last_error=False)(3, 'SetDropMode', ((1, 'eDropMode'),)))
    IMFQualityAdvise.SetQualityLevel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_QUALITY_LEVEL, use_last_error=False)(4, 'SetQualityLevel', ((1, 'eQualityLevel'),)))
    IMFQualityAdvise.GetDropMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_QUALITY_DROP_MODE), use_last_error=False)(5, 'GetDropMode', ((1, 'peDropMode'),)))
    IMFQualityAdvise.GetQualityLevel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_QUALITY_LEVEL), use_last_error=False)(6, 'GetQualityLevel', ((1, 'peQualityLevel'),)))
    IMFQualityAdvise.DropTime = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int64, use_last_error=False)(7, 'DropTime', ((1, 'hnsAmountToDrop'),)))
    win32more.System.Com.IUnknown
    return IMFQualityAdvise
def _define_IMFQualityAdvise2_head():
    class IMFQualityAdvise2(win32more.Media.MediaFoundation.IMFQualityAdvise_head):
        Guid = Guid('f3706f0d-8ea2-4886-8000-7155e9ec2eae')
    return IMFQualityAdvise2
def _define_IMFQualityAdvise2():
    IMFQualityAdvise2 = win32more.Media.MediaFoundation.IMFQualityAdvise2_head
    IMFQualityAdvise2.NotifyQualityEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaEvent_head,POINTER(UInt32), use_last_error=False)(8, 'NotifyQualityEvent', ((1, 'pEvent'),(1, 'pdwFlags'),)))
    win32more.Media.MediaFoundation.IMFQualityAdvise
    return IMFQualityAdvise2
def _define_IMFQualityAdviseLimits_head():
    class IMFQualityAdviseLimits(win32more.System.Com.IUnknown_head):
        Guid = Guid('dfcd8e4d-30b5-4567-acaa-8eb5b7853dc9')
    return IMFQualityAdviseLimits
def _define_IMFQualityAdviseLimits():
    IMFQualityAdviseLimits = win32more.Media.MediaFoundation.IMFQualityAdviseLimits_head
    IMFQualityAdviseLimits.GetMaximumDropMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_QUALITY_DROP_MODE), use_last_error=False)(3, 'GetMaximumDropMode', ((1, 'peDropMode'),)))
    IMFQualityAdviseLimits.GetMinimumQualityLevel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_QUALITY_LEVEL), use_last_error=False)(4, 'GetMinimumQualityLevel', ((1, 'peQualityLevel'),)))
    win32more.System.Com.IUnknown
    return IMFQualityAdviseLimits
def _define_IMFRealTimeClient_head():
    class IMFRealTimeClient(win32more.System.Com.IUnknown_head):
        Guid = Guid('2347d60b-3fb5-480c-8803-8df3adcd3ef0')
    return IMFRealTimeClient
def _define_IMFRealTimeClient():
    IMFRealTimeClient = win32more.Media.MediaFoundation.IMFRealTimeClient_head
    IMFRealTimeClient.RegisterThreads = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.PWSTR, use_last_error=False)(3, 'RegisterThreads', ((1, 'dwTaskIndex'),(1, 'wszClass'),)))
    IMFRealTimeClient.UnregisterThreads = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(4, 'UnregisterThreads', ()))
    IMFRealTimeClient.SetWorkQueue = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(5, 'SetWorkQueue', ((1, 'dwWorkQueueId'),)))
    win32more.System.Com.IUnknown
    return IMFRealTimeClient
def _define_IMFRealTimeClientEx_head():
    class IMFRealTimeClientEx(win32more.System.Com.IUnknown_head):
        Guid = Guid('03910848-ab16-4611-b100-17b88ae2f248')
    return IMFRealTimeClientEx
def _define_IMFRealTimeClientEx():
    IMFRealTimeClientEx = win32more.Media.MediaFoundation.IMFRealTimeClientEx_head
    IMFRealTimeClientEx.RegisterThreadsEx = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),win32more.Foundation.PWSTR,Int32, use_last_error=False)(3, 'RegisterThreadsEx', ((1, 'pdwTaskIndex'),(1, 'wszClassName'),(1, 'lBasePriority'),)))
    IMFRealTimeClientEx.UnregisterThreads = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(4, 'UnregisterThreads', ()))
    IMFRealTimeClientEx.SetWorkQueueEx = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,Int32, use_last_error=False)(5, 'SetWorkQueueEx', ((1, 'dwMultithreadedWorkQueueId'),(1, 'lWorkItemBasePriority'),)))
    win32more.System.Com.IUnknown
    return IMFRealTimeClientEx
MFSequencerTopologyFlags = Int32
SequencerTopologyFlags_Last = 1
def _define_IMFSequencerSource_head():
    class IMFSequencerSource(win32more.System.Com.IUnknown_head):
        Guid = Guid('197cd219-19cb-4de1-a64c-acf2edcbe59e')
    return IMFSequencerSource
def _define_IMFSequencerSource():
    IMFSequencerSource = win32more.Media.MediaFoundation.IMFSequencerSource_head
    IMFSequencerSource.AppendTopology = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTopology_head,UInt32,POINTER(UInt32), use_last_error=False)(3, 'AppendTopology', ((1, 'pTopology'),(1, 'dwFlags'),(1, 'pdwId'),)))
    IMFSequencerSource.DeleteTopology = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(4, 'DeleteTopology', ((1, 'dwId'),)))
    IMFSequencerSource.GetPresentationContext = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationDescriptor_head,POINTER(UInt32),POINTER(win32more.Media.MediaFoundation.IMFTopology_head), use_last_error=False)(5, 'GetPresentationContext', ((1, 'pPD'),(1, 'pId'),(1, 'ppTopology'),)))
    IMFSequencerSource.UpdateTopology = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFTopology_head, use_last_error=False)(6, 'UpdateTopology', ((1, 'dwId'),(1, 'pTopology'),)))
    IMFSequencerSource.UpdateTopologyFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32, use_last_error=False)(7, 'UpdateTopologyFlags', ((1, 'dwId'),(1, 'dwFlags'),)))
    win32more.System.Com.IUnknown
    return IMFSequencerSource
def _define_IMFMediaSourceTopologyProvider_head():
    class IMFMediaSourceTopologyProvider(win32more.System.Com.IUnknown_head):
        Guid = Guid('0e1d6009-c9f3-442d-8c51-a42d2d49452f')
    return IMFMediaSourceTopologyProvider
def _define_IMFMediaSourceTopologyProvider():
    IMFMediaSourceTopologyProvider = win32more.Media.MediaFoundation.IMFMediaSourceTopologyProvider_head
    IMFMediaSourceTopologyProvider.GetMediaSourceTopology = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationDescriptor_head,POINTER(win32more.Media.MediaFoundation.IMFTopology_head), use_last_error=False)(3, 'GetMediaSourceTopology', ((1, 'pPresentationDescriptor'),(1, 'ppTopology'),)))
    win32more.System.Com.IUnknown
    return IMFMediaSourceTopologyProvider
def _define_IMFMediaSourcePresentationProvider_head():
    class IMFMediaSourcePresentationProvider(win32more.System.Com.IUnknown_head):
        Guid = Guid('0e1d600a-c9f3-442d-8c51-a42d2d49452f')
    return IMFMediaSourcePresentationProvider
def _define_IMFMediaSourcePresentationProvider():
    IMFMediaSourcePresentationProvider = win32more.Media.MediaFoundation.IMFMediaSourcePresentationProvider_head
    IMFMediaSourcePresentationProvider.ForceEndOfPresentation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationDescriptor_head, use_last_error=False)(3, 'ForceEndOfPresentation', ((1, 'pPresentationDescriptor'),)))
    win32more.System.Com.IUnknown
    return IMFMediaSourcePresentationProvider
def _define_MFTOPONODE_ATTRIBUTE_UPDATE_head():
    class MFTOPONODE_ATTRIBUTE_UPDATE(Structure):
        pass
    return MFTOPONODE_ATTRIBUTE_UPDATE
def _define_MFTOPONODE_ATTRIBUTE_UPDATE():
    MFTOPONODE_ATTRIBUTE_UPDATE = win32more.Media.MediaFoundation.MFTOPONODE_ATTRIBUTE_UPDATE_head
    class MFTOPONODE_ATTRIBUTE_UPDATE__Anonymous_e__Union(Union):
        pass
    MFTOPONODE_ATTRIBUTE_UPDATE__Anonymous_e__Union._fields_ = [
        ("u32", UInt32),
        ("u64", UInt64),
        ("d", Double),
    ]
    MFTOPONODE_ATTRIBUTE_UPDATE._anonymous_ = [
        'Anonymous',
    ]
    MFTOPONODE_ATTRIBUTE_UPDATE._fields_ = [
        ("NodeId", UInt64),
        ("guidAttributeKey", Guid),
        ("attrType", win32more.Media.MediaFoundation.MF_ATTRIBUTE_TYPE),
        ("Anonymous", MFTOPONODE_ATTRIBUTE_UPDATE__Anonymous_e__Union),
    ]
    return MFTOPONODE_ATTRIBUTE_UPDATE
def _define_IMFTopologyNodeAttributeEditor_head():
    class IMFTopologyNodeAttributeEditor(win32more.System.Com.IUnknown_head):
        Guid = Guid('676aa6dd-238a-410d-bb99-65668d01605a')
    return IMFTopologyNodeAttributeEditor
def _define_IMFTopologyNodeAttributeEditor():
    IMFTopologyNodeAttributeEditor = win32more.Media.MediaFoundation.IMFTopologyNodeAttributeEditor_head
    IMFTopologyNodeAttributeEditor.UpdateNodeAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64,UInt32,POINTER(win32more.Media.MediaFoundation.MFTOPONODE_ATTRIBUTE_UPDATE), use_last_error=False)(3, 'UpdateNodeAttributes', ((1, 'TopoId'),(1, 'cUpdates'),(1, 'pUpdates'),)))
    win32more.System.Com.IUnknown
    return IMFTopologyNodeAttributeEditor
def _define_MF_LEAKY_BUCKET_PAIR_head():
    class MF_LEAKY_BUCKET_PAIR(Structure):
        pass
    return MF_LEAKY_BUCKET_PAIR
def _define_MF_LEAKY_BUCKET_PAIR():
    MF_LEAKY_BUCKET_PAIR = win32more.Media.MediaFoundation.MF_LEAKY_BUCKET_PAIR_head
    MF_LEAKY_BUCKET_PAIR._fields_ = [
        ("dwBitrate", UInt32),
        ("msBufferWindow", UInt32),
    ]
    return MF_LEAKY_BUCKET_PAIR
def _define_MFBYTESTREAM_BUFFERING_PARAMS_head():
    class MFBYTESTREAM_BUFFERING_PARAMS(Structure):
        pass
    return MFBYTESTREAM_BUFFERING_PARAMS
def _define_MFBYTESTREAM_BUFFERING_PARAMS():
    MFBYTESTREAM_BUFFERING_PARAMS = win32more.Media.MediaFoundation.MFBYTESTREAM_BUFFERING_PARAMS_head
    MFBYTESTREAM_BUFFERING_PARAMS._fields_ = [
        ("cbTotalFileSize", UInt64),
        ("cbPlayableDataSize", UInt64),
        ("prgBuckets", POINTER(win32more.Media.MediaFoundation.MF_LEAKY_BUCKET_PAIR_head)),
        ("cBuckets", UInt32),
        ("qwNetBufferingTime", UInt64),
        ("qwExtraBufferingTimeDuringSeek", UInt64),
        ("qwPlayDuration", UInt64),
        ("dRate", Single),
    ]
    return MFBYTESTREAM_BUFFERING_PARAMS
def _define_IMFByteStreamBuffering_head():
    class IMFByteStreamBuffering(win32more.System.Com.IUnknown_head):
        Guid = Guid('6d66d782-1d4f-4db7-8c63-cb8c77f1ef5e')
    return IMFByteStreamBuffering
def _define_IMFByteStreamBuffering():
    IMFByteStreamBuffering = win32more.Media.MediaFoundation.IMFByteStreamBuffering_head
    IMFByteStreamBuffering.SetBufferingParams = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFBYTESTREAM_BUFFERING_PARAMS_head), use_last_error=False)(3, 'SetBufferingParams', ((1, 'pParams'),)))
    IMFByteStreamBuffering.EnableBuffering = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL, use_last_error=False)(4, 'EnableBuffering', ((1, 'fEnable'),)))
    IMFByteStreamBuffering.StopBuffering = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(5, 'StopBuffering', ()))
    win32more.System.Com.IUnknown
    return IMFByteStreamBuffering
def _define_IMFByteStreamCacheControl_head():
    class IMFByteStreamCacheControl(win32more.System.Com.IUnknown_head):
        Guid = Guid('f5042ea4-7a96-4a75-aa7b-2be1ef7f88d5')
    return IMFByteStreamCacheControl
def _define_IMFByteStreamCacheControl():
    IMFByteStreamCacheControl = win32more.Media.MediaFoundation.IMFByteStreamCacheControl_head
    IMFByteStreamCacheControl.StopBackgroundTransfer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(3, 'StopBackgroundTransfer', ()))
    win32more.System.Com.IUnknown
    return IMFByteStreamCacheControl
def _define_IMFByteStreamTimeSeek_head():
    class IMFByteStreamTimeSeek(win32more.System.Com.IUnknown_head):
        Guid = Guid('64976bfa-fb61-4041-9069-8c9a5f659beb')
    return IMFByteStreamTimeSeek
def _define_IMFByteStreamTimeSeek():
    IMFByteStreamTimeSeek = win32more.Media.MediaFoundation.IMFByteStreamTimeSeek_head
    IMFByteStreamTimeSeek.IsTimeSeekSupported = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(3, 'IsTimeSeekSupported', ((1, 'pfTimeSeekIsSupported'),)))
    IMFByteStreamTimeSeek.TimeSeek = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64, use_last_error=False)(4, 'TimeSeek', ((1, 'qwTimePosition'),)))
    IMFByteStreamTimeSeek.GetTimeSeekResult = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64),POINTER(UInt64),POINTER(UInt64), use_last_error=False)(5, 'GetTimeSeekResult', ((1, 'pqwStartTime'),(1, 'pqwStopTime'),(1, 'pqwDuration'),)))
    win32more.System.Com.IUnknown
    return IMFByteStreamTimeSeek
def _define_MF_BYTE_STREAM_CACHE_RANGE_head():
    class MF_BYTE_STREAM_CACHE_RANGE(Structure):
        pass
    return MF_BYTE_STREAM_CACHE_RANGE
def _define_MF_BYTE_STREAM_CACHE_RANGE():
    MF_BYTE_STREAM_CACHE_RANGE = win32more.Media.MediaFoundation.MF_BYTE_STREAM_CACHE_RANGE_head
    MF_BYTE_STREAM_CACHE_RANGE._fields_ = [
        ("qwStartOffset", UInt64),
        ("qwEndOffset", UInt64),
    ]
    return MF_BYTE_STREAM_CACHE_RANGE
def _define_IMFByteStreamCacheControl2_head():
    class IMFByteStreamCacheControl2(win32more.Media.MediaFoundation.IMFByteStreamCacheControl_head):
        Guid = Guid('71ce469c-f34b-49ea-a56b-2d2a10e51149')
    return IMFByteStreamCacheControl2
def _define_IMFByteStreamCacheControl2():
    IMFByteStreamCacheControl2 = win32more.Media.MediaFoundation.IMFByteStreamCacheControl2_head
    IMFByteStreamCacheControl2.GetByteRanges = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(POINTER(win32more.Media.MediaFoundation.MF_BYTE_STREAM_CACHE_RANGE_head)), use_last_error=False)(4, 'GetByteRanges', ((1, 'pcRanges'),(1, 'ppRanges'),)))
    IMFByteStreamCacheControl2.SetCacheLimit = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64, use_last_error=False)(5, 'SetCacheLimit', ((1, 'qwBytes'),)))
    IMFByteStreamCacheControl2.IsBackgroundTransferActive = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(6, 'IsBackgroundTransferActive', ((1, 'pfActive'),)))
    win32more.Media.MediaFoundation.IMFByteStreamCacheControl
    return IMFByteStreamCacheControl2
def _define_IMFNetCredential_head():
    class IMFNetCredential(win32more.System.Com.IUnknown_head):
        Guid = Guid('5b87ef6a-7ed8-434f-ba0e-184fac1628d1')
    return IMFNetCredential
def _define_IMFNetCredential():
    IMFNetCredential = win32more.Media.MediaFoundation.IMFNetCredential_head
    IMFNetCredential.SetUser = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32,win32more.Foundation.BOOL, use_last_error=False)(3, 'SetUser', ((1, 'pbData'),(1, 'cbData'),(1, 'fDataIsEncrypted'),)))
    IMFNetCredential.SetPassword = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32,win32more.Foundation.BOOL, use_last_error=False)(4, 'SetPassword', ((1, 'pbData'),(1, 'cbData'),(1, 'fDataIsEncrypted'),)))
    IMFNetCredential.GetUser = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Byte),POINTER(UInt32),win32more.Foundation.BOOL, use_last_error=False)(5, 'GetUser', ((1, 'pbData'),(1, 'pcbData'),(1, 'fEncryptData'),)))
    IMFNetCredential.GetPassword = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Byte),POINTER(UInt32),win32more.Foundation.BOOL, use_last_error=False)(6, 'GetPassword', ((1, 'pbData'),(1, 'pcbData'),(1, 'fEncryptData'),)))
    IMFNetCredential.LoggedOnUser = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(7, 'LoggedOnUser', ((1, 'pfLoggedOnUser'),)))
    win32more.System.Com.IUnknown
    return IMFNetCredential
def _define_MFNetCredentialManagerGetParam_head():
    class MFNetCredentialManagerGetParam(Structure):
        pass
    return MFNetCredentialManagerGetParam
def _define_MFNetCredentialManagerGetParam():
    MFNetCredentialManagerGetParam = win32more.Media.MediaFoundation.MFNetCredentialManagerGetParam_head
    MFNetCredentialManagerGetParam._fields_ = [
        ("hrOp", win32more.Foundation.HRESULT),
        ("fAllowLoggedOnUser", win32more.Foundation.BOOL),
        ("fClearTextPackage", win32more.Foundation.BOOL),
        ("pszUrl", win32more.Foundation.PWSTR),
        ("pszSite", win32more.Foundation.PWSTR),
        ("pszRealm", win32more.Foundation.PWSTR),
        ("pszPackage", win32more.Foundation.PWSTR),
        ("nRetries", Int32),
    ]
    return MFNetCredentialManagerGetParam
def _define_IMFNetCredentialManager_head():
    class IMFNetCredentialManager(win32more.System.Com.IUnknown_head):
        Guid = Guid('5b87ef6b-7ed8-434f-ba0e-184fac1628d1')
    return IMFNetCredentialManager
def _define_IMFNetCredentialManager():
    IMFNetCredentialManager = win32more.Media.MediaFoundation.IMFNetCredentialManager_head
    IMFNetCredentialManager.BeginGetCredentials = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFNetCredentialManagerGetParam_head),win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(3, 'BeginGetCredentials', ((1, 'pParam'),(1, 'pCallback'),(1, 'pState'),)))
    IMFNetCredentialManager.EndGetCredentials = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(win32more.Media.MediaFoundation.IMFNetCredential_head), use_last_error=False)(4, 'EndGetCredentials', ((1, 'pResult'),(1, 'ppCred'),)))
    IMFNetCredentialManager.SetGood = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFNetCredential_head,win32more.Foundation.BOOL, use_last_error=False)(5, 'SetGood', ((1, 'pCred'),(1, 'fGood'),)))
    win32more.System.Com.IUnknown
    return IMFNetCredentialManager
MFNetCredentialRequirements = Int32
REQUIRE_PROMPT = 1
REQUIRE_SAVE_SELECTED = 2
MFNetCredentialOptions = Int32
MFNET_CREDENTIAL_SAVE = 1
MFNET_CREDENTIAL_DONT_CACHE = 2
MFNET_CREDENTIAL_ALLOW_CLEAR_TEXT = 4
MFNetAuthenticationFlags = Int32
MFNET_AUTHENTICATION_PROXY = 1
MFNET_AUTHENTICATION_CLEAR_TEXT = 2
MFNET_AUTHENTICATION_LOGGED_ON_USER = 4
def _define_IMFNetCredentialCache_head():
    class IMFNetCredentialCache(win32more.System.Com.IUnknown_head):
        Guid = Guid('5b87ef6c-7ed8-434f-ba0e-184fac1628d1')
    return IMFNetCredentialCache
def _define_IMFNetCredentialCache():
    IMFNetCredentialCache = win32more.Media.MediaFoundation.IMFNetCredentialCache_head
    IMFNetCredentialCache.GetCredential = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,POINTER(win32more.Media.MediaFoundation.IMFNetCredential_head),POINTER(UInt32), use_last_error=False)(3, 'GetCredential', ((1, 'pszUrl'),(1, 'pszRealm'),(1, 'dwAuthenticationFlags'),(1, 'ppCred'),(1, 'pdwRequirementsFlags'),)))
    IMFNetCredentialCache.SetGood = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFNetCredential_head,win32more.Foundation.BOOL, use_last_error=False)(4, 'SetGood', ((1, 'pCred'),(1, 'fGood'),)))
    IMFNetCredentialCache.SetUserOptions = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFNetCredential_head,UInt32, use_last_error=False)(5, 'SetUserOptions', ((1, 'pCred'),(1, 'dwOptionsFlags'),)))
    win32more.System.Com.IUnknown
    return IMFNetCredentialCache
def _define_IMFSSLCertificateManager_head():
    class IMFSSLCertificateManager(win32more.System.Com.IUnknown_head):
        Guid = Guid('61f7d887-1230-4a8b-aeba-8ad434d1a64d')
    return IMFSSLCertificateManager
def _define_IMFSSLCertificateManager():
    IMFSSLCertificateManager = win32more.Media.MediaFoundation.IMFSSLCertificateManager_head
    IMFSSLCertificateManager.GetClientCertificate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(c_char_p_no),POINTER(UInt32), use_last_error=False)(3, 'GetClientCertificate', ((1, 'pszURL'),(1, 'ppbData'),(1, 'pcbData'),)))
    IMFSSLCertificateManager.BeginGetClientCertificate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(4, 'BeginGetClientCertificate', ((1, 'pszURL'),(1, 'pCallback'),(1, 'pState'),)))
    IMFSSLCertificateManager.EndGetClientCertificate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(c_char_p_no),POINTER(UInt32), use_last_error=False)(5, 'EndGetClientCertificate', ((1, 'pResult'),(1, 'ppbData'),(1, 'pcbData'),)))
    IMFSSLCertificateManager.GetCertificatePolicy = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Foundation.BOOL),POINTER(win32more.Foundation.BOOL), use_last_error=False)(6, 'GetCertificatePolicy', ((1, 'pszURL'),(1, 'pfOverrideAutomaticCheck'),(1, 'pfClientCertificateAvailable'),)))
    IMFSSLCertificateManager.OnServerCertificate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,c_char_p_no,UInt32,POINTER(win32more.Foundation.BOOL), use_last_error=False)(7, 'OnServerCertificate', ((1, 'pszURL'),(1, 'pbData'),(1, 'cbData'),(1, 'pfIsGood'),)))
    win32more.System.Com.IUnknown
    return IMFSSLCertificateManager
def _define_IMFNetResourceFilter_head():
    class IMFNetResourceFilter(win32more.System.Com.IUnknown_head):
        Guid = Guid('091878a3-bf11-4a5c-bc9f-33995b06ef2d')
    return IMFNetResourceFilter
def _define_IMFNetResourceFilter():
    IMFNetResourceFilter = win32more.Media.MediaFoundation.IMFNetResourceFilter_head
    IMFNetResourceFilter.OnRedirect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(Int16), use_last_error=False)(3, 'OnRedirect', ((1, 'pszUrl'),(1, 'pvbCancel'),)))
    IMFNetResourceFilter.OnSendingRequest = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR, use_last_error=False)(4, 'OnSendingRequest', ((1, 'pszUrl'),)))
    win32more.System.Com.IUnknown
    return IMFNetResourceFilter
def _define_IMFSourceOpenMonitor_head():
    class IMFSourceOpenMonitor(win32more.System.Com.IUnknown_head):
        Guid = Guid('059054b3-027c-494c-a27d-9113291cf87f')
    return IMFSourceOpenMonitor
def _define_IMFSourceOpenMonitor():
    IMFSourceOpenMonitor = win32more.Media.MediaFoundation.IMFSourceOpenMonitor_head
    IMFSourceOpenMonitor.OnSourceEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaEvent_head, use_last_error=False)(3, 'OnSourceEvent', ((1, 'pEvent'),)))
    win32more.System.Com.IUnknown
    return IMFSourceOpenMonitor
def _define_IMFNetProxyLocator_head():
    class IMFNetProxyLocator(win32more.System.Com.IUnknown_head):
        Guid = Guid('e9cd0383-a268-4bb4-82de-658d53574d41')
    return IMFNetProxyLocator
def _define_IMFNetProxyLocator():
    IMFNetProxyLocator = win32more.Media.MediaFoundation.IMFNetProxyLocator_head
    IMFNetProxyLocator.FindFirstProxy = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.BOOL, use_last_error=False)(3, 'FindFirstProxy', ((1, 'pszHost'),(1, 'pszUrl'),(1, 'fReserved'),)))
    IMFNetProxyLocator.FindNextProxy = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(4, 'FindNextProxy', ()))
    IMFNetProxyLocator.RegisterProxyResult = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HRESULT, use_last_error=False)(5, 'RegisterProxyResult', ((1, 'hrOp'),)))
    IMFNetProxyLocator.GetCurrentProxy = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Char),POINTER(UInt32), use_last_error=False)(6, 'GetCurrentProxy', ((1, 'pszStr'),(1, 'pcchStr'),)))
    IMFNetProxyLocator.Clone = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFNetProxyLocator_head), use_last_error=False)(7, 'Clone', ((1, 'ppProxyLocator'),)))
    win32more.System.Com.IUnknown
    return IMFNetProxyLocator
def _define_IMFNetProxyLocatorFactory_head():
    class IMFNetProxyLocatorFactory(win32more.System.Com.IUnknown_head):
        Guid = Guid('e9cd0384-a268-4bb4-82de-658d53574d41')
    return IMFNetProxyLocatorFactory
def _define_IMFNetProxyLocatorFactory():
    IMFNetProxyLocatorFactory = win32more.Media.MediaFoundation.IMFNetProxyLocatorFactory_head
    IMFNetProxyLocatorFactory.CreateProxyLocator = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.IMFNetProxyLocator_head), use_last_error=False)(3, 'CreateProxyLocator', ((1, 'pszProtocol'),(1, 'ppProxyLocator'),)))
    win32more.System.Com.IUnknown
    return IMFNetProxyLocatorFactory
def _define_IMFSaveJob_head():
    class IMFSaveJob(win32more.System.Com.IUnknown_head):
        Guid = Guid('e9931663-80bf-4c6e-98af-5dcf58747d1f')
    return IMFSaveJob
def _define_IMFSaveJob():
    IMFSaveJob = win32more.Media.MediaFoundation.IMFSaveJob_head
    IMFSaveJob.BeginSave = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(3, 'BeginSave', ((1, 'pStream'),(1, 'pCallback'),(1, 'pState'),)))
    IMFSaveJob.EndSave = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head, use_last_error=False)(4, 'EndSave', ((1, 'pResult'),)))
    IMFSaveJob.CancelSave = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(5, 'CancelSave', ()))
    IMFSaveJob.GetProgress = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(6, 'GetProgress', ((1, 'pdwPercentComplete'),)))
    win32more.System.Com.IUnknown
    return IMFSaveJob
MFNETSOURCE_PROTOCOL_TYPE = Int32
MFNETSOURCE_UNDEFINED = 0
MFNETSOURCE_HTTP = 1
MFNETSOURCE_RTSP = 2
MFNETSOURCE_FILE = 3
MFNETSOURCE_MULTICAST = 4
def _define_IMFNetSchemeHandlerConfig_head():
    class IMFNetSchemeHandlerConfig(win32more.System.Com.IUnknown_head):
        Guid = Guid('7be19e73-c9bf-468a-ac5a-a5e8653bec87')
    return IMFNetSchemeHandlerConfig
def _define_IMFNetSchemeHandlerConfig():
    IMFNetSchemeHandlerConfig = win32more.Media.MediaFoundation.IMFNetSchemeHandlerConfig_head
    IMFNetSchemeHandlerConfig.GetNumberOfSupportedProtocols = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(3, 'GetNumberOfSupportedProtocols', ((1, 'pcProtocols'),)))
    IMFNetSchemeHandlerConfig.GetSupportedProtocolType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.MFNETSOURCE_PROTOCOL_TYPE), use_last_error=False)(4, 'GetSupportedProtocolType', ((1, 'nProtocolIndex'),(1, 'pnProtocolType'),)))
    IMFNetSchemeHandlerConfig.ResetProtocolRolloverSettings = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(5, 'ResetProtocolRolloverSettings', ()))
    win32more.System.Com.IUnknown
    return IMFNetSchemeHandlerConfig
MFNETSOURCE_TRANSPORT_TYPE = Int32
MFNETSOURCE_UDP = 0
MFNETSOURCE_TCP = 1
MFNETSOURCE_CACHE_STATE = Int32
MFNETSOURCE_CACHE_UNAVAILABLE = 0
MFNETSOURCE_CACHE_ACTIVE_WRITING = 1
MFNETSOURCE_CACHE_ACTIVE_COMPLETE = 2
MFNETSOURCE_STATISTICS_IDS = Int32
MFNETSOURCE_RECVPACKETS_ID = 0
MFNETSOURCE_LOSTPACKETS_ID = 1
MFNETSOURCE_RESENDSREQUESTED_ID = 2
MFNETSOURCE_RESENDSRECEIVED_ID = 3
MFNETSOURCE_RECOVEREDBYECCPACKETS_ID = 4
MFNETSOURCE_RECOVEREDBYRTXPACKETS_ID = 5
MFNETSOURCE_OUTPACKETS_ID = 6
MFNETSOURCE_RECVRATE_ID = 7
MFNETSOURCE_AVGBANDWIDTHBPS_ID = 8
MFNETSOURCE_BYTESRECEIVED_ID = 9
MFNETSOURCE_PROTOCOL_ID = 10
MFNETSOURCE_TRANSPORT_ID = 11
MFNETSOURCE_CACHE_STATE_ID = 12
MFNETSOURCE_LINKBANDWIDTH_ID = 13
MFNETSOURCE_CONTENTBITRATE_ID = 14
MFNETSOURCE_SPEEDFACTOR_ID = 15
MFNETSOURCE_BUFFERSIZE_ID = 16
MFNETSOURCE_BUFFERPROGRESS_ID = 17
MFNETSOURCE_LASTBWSWITCHTS_ID = 18
MFNETSOURCE_SEEKRANGESTART_ID = 19
MFNETSOURCE_SEEKRANGEEND_ID = 20
MFNETSOURCE_BUFFERINGCOUNT_ID = 21
MFNETSOURCE_INCORRECTLYSIGNEDPACKETS_ID = 22
MFNETSOURCE_SIGNEDSESSION_ID = 23
MFNETSOURCE_MAXBITRATE_ID = 24
MFNETSOURCE_RECEPTION_QUALITY_ID = 25
MFNETSOURCE_RECOVEREDPACKETS_ID = 26
MFNETSOURCE_VBR_ID = 27
MFNETSOURCE_DOWNLOADPROGRESS_ID = 28
MFNETSOURCE_UNPREDEFINEDPROTOCOLNAME_ID = 29
MFNET_PROXYSETTINGS = Int32
MFNET_PROXYSETTING_NONE = 0
MFNET_PROXYSETTING_MANUAL = 1
MFNET_PROXYSETTING_AUTO = 2
MFNET_PROXYSETTING_BROWSER = 3
def _define_IMFSchemeHandler_head():
    class IMFSchemeHandler(win32more.System.Com.IUnknown_head):
        Guid = Guid('6d4c7b74-52a0-4bb7-b0db-55f29f47a668')
    return IMFSchemeHandler
def _define_IMFSchemeHandler():
    IMFSchemeHandler = win32more.Media.MediaFoundation.IMFSchemeHandler_head
    IMFSchemeHandler.BeginCreateObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,UInt32,win32more.UI.Shell.PropertiesSystem.IPropertyStore_head,POINTER(win32more.System.Com.IUnknown_head),win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(3, 'BeginCreateObject', ((1, 'pwszURL'),(1, 'dwFlags'),(1, 'pProps'),(1, 'ppIUnknownCancelCookie'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFSchemeHandler.EndCreateObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(win32more.Media.MediaFoundation.MF_OBJECT_TYPE),POINTER(win32more.System.Com.IUnknown_head), use_last_error=False)(4, 'EndCreateObject', ((1, 'pResult'),(1, 'pObjectType'),(1, 'ppObject'),)))
    IMFSchemeHandler.CancelObjectCreation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head, use_last_error=False)(5, 'CancelObjectCreation', ((1, 'pIUnknownCancelCookie'),)))
    win32more.System.Com.IUnknown
    return IMFSchemeHandler
def _define_IMFByteStreamHandler_head():
    class IMFByteStreamHandler(win32more.System.Com.IUnknown_head):
        Guid = Guid('bb420aa4-765b-4a1f-91fe-d6a8a143924c')
    return IMFByteStreamHandler
def _define_IMFByteStreamHandler():
    IMFByteStreamHandler = win32more.Media.MediaFoundation.IMFByteStreamHandler_head
    IMFByteStreamHandler.BeginCreateObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Foundation.PWSTR,UInt32,win32more.UI.Shell.PropertiesSystem.IPropertyStore_head,POINTER(win32more.System.Com.IUnknown_head),win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(3, 'BeginCreateObject', ((1, 'pByteStream'),(1, 'pwszURL'),(1, 'dwFlags'),(1, 'pProps'),(1, 'ppIUnknownCancelCookie'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFByteStreamHandler.EndCreateObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(win32more.Media.MediaFoundation.MF_OBJECT_TYPE),POINTER(win32more.System.Com.IUnknown_head), use_last_error=False)(4, 'EndCreateObject', ((1, 'pResult'),(1, 'pObjectType'),(1, 'ppObject'),)))
    IMFByteStreamHandler.CancelObjectCreation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head, use_last_error=False)(5, 'CancelObjectCreation', ((1, 'pIUnknownCancelCookie'),)))
    IMFByteStreamHandler.GetMaxNumberOfBytesRequiredForResolution = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64), use_last_error=False)(6, 'GetMaxNumberOfBytesRequiredForResolution', ((1, 'pqwBytes'),)))
    win32more.System.Com.IUnknown
    return IMFByteStreamHandler
def _define_IMFTrustedInput_head():
    class IMFTrustedInput(win32more.System.Com.IUnknown_head):
        Guid = Guid('542612c4-a1b8-4632-b521-de11ea64a0b0')
    return IMFTrustedInput
def _define_IMFTrustedInput():
    IMFTrustedInput = win32more.Media.MediaFoundation.IMFTrustedInput_head
    IMFTrustedInput.GetInputTrustAuthority = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),POINTER(win32more.System.Com.IUnknown_head), use_last_error=False)(3, 'GetInputTrustAuthority', ((1, 'dwStreamID'),(1, 'riid'),(1, 'ppunkObject'),)))
    win32more.System.Com.IUnknown
    return IMFTrustedInput
MFPOLICYMANAGER_ACTION = Int32
PEACTION_NO = 0
PEACTION_PLAY = 1
PEACTION_COPY = 2
PEACTION_EXPORT = 3
PEACTION_EXTRACT = 4
PEACTION_RESERVED1 = 5
PEACTION_RESERVED2 = 6
PEACTION_RESERVED3 = 7
PEACTION_LAST = 7
def _define_MFINPUTTRUSTAUTHORITY_ACCESS_ACTION_head():
    class MFINPUTTRUSTAUTHORITY_ACCESS_ACTION(Structure):
        pass
    return MFINPUTTRUSTAUTHORITY_ACCESS_ACTION
def _define_MFINPUTTRUSTAUTHORITY_ACCESS_ACTION():
    MFINPUTTRUSTAUTHORITY_ACCESS_ACTION = win32more.Media.MediaFoundation.MFINPUTTRUSTAUTHORITY_ACCESS_ACTION_head
    MFINPUTTRUSTAUTHORITY_ACCESS_ACTION._fields_ = [
        ("Action", win32more.Media.MediaFoundation.MFPOLICYMANAGER_ACTION),
        ("pbTicket", c_char_p_no),
        ("cbTicket", UInt32),
    ]
    return MFINPUTTRUSTAUTHORITY_ACCESS_ACTION
def _define_MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS_head():
    class MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS(Structure):
        pass
    return MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS
def _define_MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS():
    MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS = win32more.Media.MediaFoundation.MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS_head
    MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS._fields_ = [
        ("dwSize", UInt32),
        ("dwVer", UInt32),
        ("cbSignatureOffset", UInt32),
        ("cbSignatureSize", UInt32),
        ("cbExtensionOffset", UInt32),
        ("cbExtensionSize", UInt32),
        ("cActions", UInt32),
        ("rgOutputActions", win32more.Media.MediaFoundation.MFINPUTTRUSTAUTHORITY_ACCESS_ACTION * 0),
    ]
    return MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS
def _define_IMFInputTrustAuthority_head():
    class IMFInputTrustAuthority(win32more.System.Com.IUnknown_head):
        Guid = Guid('d19f8e98-b126-4446-890c-5dcb7ad71453')
    return IMFInputTrustAuthority
def _define_IMFInputTrustAuthority():
    IMFInputTrustAuthority = win32more.Media.MediaFoundation.IMFInputTrustAuthority_head
    IMFInputTrustAuthority.GetDecrypter = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(3, 'GetDecrypter', ((1, 'riid'),(1, 'ppv'),)))
    IMFInputTrustAuthority.RequestAccess = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFPOLICYMANAGER_ACTION,POINTER(win32more.Media.MediaFoundation.IMFActivate_head), use_last_error=False)(4, 'RequestAccess', ((1, 'Action'),(1, 'ppContentEnablerActivate'),)))
    IMFInputTrustAuthority.GetPolicy = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFPOLICYMANAGER_ACTION,POINTER(win32more.Media.MediaFoundation.IMFOutputPolicy_head), use_last_error=False)(5, 'GetPolicy', ((1, 'Action'),(1, 'ppPolicy'),)))
    IMFInputTrustAuthority.BindAccess = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS_head), use_last_error=False)(6, 'BindAccess', ((1, 'pParam'),)))
    IMFInputTrustAuthority.UpdateAccess = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS_head), use_last_error=False)(7, 'UpdateAccess', ((1, 'pParam'),)))
    IMFInputTrustAuthority.Reset = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(8, 'Reset', ()))
    win32more.System.Com.IUnknown
    return IMFInputTrustAuthority
def _define_IMFTrustedOutput_head():
    class IMFTrustedOutput(win32more.System.Com.IUnknown_head):
        Guid = Guid('d19f8e95-b126-4446-890c-5dcb7ad71453')
    return IMFTrustedOutput
def _define_IMFTrustedOutput():
    IMFTrustedOutput = win32more.Media.MediaFoundation.IMFTrustedOutput_head
    IMFTrustedOutput.GetOutputTrustAuthorityCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(3, 'GetOutputTrustAuthorityCount', ((1, 'pcOutputTrustAuthorities'),)))
    IMFTrustedOutput.GetOutputTrustAuthorityByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFOutputTrustAuthority_head), use_last_error=False)(4, 'GetOutputTrustAuthorityByIndex', ((1, 'dwIndex'),(1, 'ppauthority'),)))
    IMFTrustedOutput.IsFinal = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(5, 'IsFinal', ((1, 'pfIsFinal'),)))
    win32more.System.Com.IUnknown
    return IMFTrustedOutput
def _define_IMFOutputTrustAuthority_head():
    class IMFOutputTrustAuthority(win32more.System.Com.IUnknown_head):
        Guid = Guid('d19f8e94-b126-4446-890c-5dcb7ad71453')
    return IMFOutputTrustAuthority
def _define_IMFOutputTrustAuthority():
    IMFOutputTrustAuthority = win32more.Media.MediaFoundation.IMFOutputTrustAuthority_head
    IMFOutputTrustAuthority.GetAction = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFPOLICYMANAGER_ACTION), use_last_error=False)(3, 'GetAction', ((1, 'pAction'),)))
    IMFOutputTrustAuthority.SetPolicy = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFOutputPolicy_head),UInt32,POINTER(c_char_p_no),POINTER(UInt32), use_last_error=False)(4, 'SetPolicy', ((1, 'ppPolicy'),(1, 'nPolicy'),(1, 'ppbTicket'),(1, 'pcbTicket'),)))
    win32more.System.Com.IUnknown
    return IMFOutputTrustAuthority
def _define_IMFOutputPolicy_head():
    class IMFOutputPolicy(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('7f00f10a-daed-41af-ab26-5fdfa4dfba3c')
    return IMFOutputPolicy
def _define_IMFOutputPolicy():
    IMFOutputPolicy = win32more.Media.MediaFoundation.IMFOutputPolicy_head
    IMFOutputPolicy.GenerateRequiredSchemas = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,Guid,POINTER(Guid),UInt32,POINTER(win32more.Media.MediaFoundation.IMFCollection_head), use_last_error=False)(33, 'GenerateRequiredSchemas', ((1, 'dwAttributes'),(1, 'guidOutputSubType'),(1, 'rgGuidProtectionSchemasSupported'),(1, 'cProtectionSchemasSupported'),(1, 'ppRequiredProtectionSchemas'),)))
    IMFOutputPolicy.GetOriginatorID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid), use_last_error=False)(34, 'GetOriginatorID', ((1, 'pguidOriginatorID'),)))
    IMFOutputPolicy.GetMinimumGRLVersion = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(35, 'GetMinimumGRLVersion', ((1, 'pdwMinimumGRLVersion'),)))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFOutputPolicy
def _define_IMFOutputSchema_head():
    class IMFOutputSchema(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('7be0fc5b-abd9-44fb-a5c8-f50136e71599')
    return IMFOutputSchema
def _define_IMFOutputSchema():
    IMFOutputSchema = win32more.Media.MediaFoundation.IMFOutputSchema_head
    IMFOutputSchema.GetSchemaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid), use_last_error=False)(33, 'GetSchemaType', ((1, 'pguidSchemaType'),)))
    IMFOutputSchema.GetConfigurationData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(34, 'GetConfigurationData', ((1, 'pdwVal'),)))
    IMFOutputSchema.GetOriginatorID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid), use_last_error=False)(35, 'GetOriginatorID', ((1, 'pguidOriginatorID'),)))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFOutputSchema
MF_OPM_CGMSA_PROTECTION_LEVEL = Int32
MF_OPM_CGMSA_OFF = 0
MF_OPM_CGMSA_COPY_FREELY = 1
MF_OPM_CGMSA_COPY_NO_MORE = 2
MF_OPM_CGMSA_COPY_ONE_GENERATION = 3
MF_OPM_CGMSA_COPY_NEVER = 4
MF_OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED = 8
MF_OPM_ACP_PROTECTION_LEVEL = Int32
MF_OPM_ACP_OFF = 0
MF_OPM_ACP_LEVEL_ONE = 1
MF_OPM_ACP_LEVEL_TWO = 2
MF_OPM_ACP_LEVEL_THREE = 3
MF_OPM_ACP_FORCE_ULONG = 2147483647
MFAudioConstriction = Int32
MFAudioConstriction_MFaudioConstrictionOff = 0
MFAudioConstriction_MFaudioConstriction48_16 = 1
MFAudioConstriction_MFaudioConstriction44_16 = 2
MFAudioConstriction_MFaudioConstriction14_14 = 3
MFAudioConstriction_MFaudioConstrictionMute = 4
def _define_IMFSecureChannel_head():
    class IMFSecureChannel(win32more.System.Com.IUnknown_head):
        Guid = Guid('d0ae555d-3b12-4d97-b060-0990bc5aeb67')
    return IMFSecureChannel
def _define_IMFSecureChannel():
    IMFSecureChannel = win32more.Media.MediaFoundation.IMFSecureChannel_head
    IMFSecureChannel.GetCertificate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(c_char_p_no),POINTER(UInt32), use_last_error=False)(3, 'GetCertificate', ((1, 'ppCert'),(1, 'pcbCert'),)))
    IMFSecureChannel.SetupSession = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32, use_last_error=False)(4, 'SetupSession', ((1, 'pbEncryptedSessionKey'),(1, 'cbSessionKey'),)))
    win32more.System.Com.IUnknown
    return IMFSecureChannel
SAMPLE_PROTECTION_VERSION = Int32
SAMPLE_PROTECTION_VERSION_NO = 0
SAMPLE_PROTECTION_VERSION_BASIC_LOKI = 1
SAMPLE_PROTECTION_VERSION_SCATTER = 2
SAMPLE_PROTECTION_VERSION_RC4 = 3
SAMPLE_PROTECTION_VERSION_AES128CTR = 4
def _define_IMFSampleProtection_head():
    class IMFSampleProtection(win32more.System.Com.IUnknown_head):
        Guid = Guid('8e36395f-c7b9-43c4-a54d-512b4af63c95')
    return IMFSampleProtection
def _define_IMFSampleProtection():
    IMFSampleProtection = win32more.Media.MediaFoundation.IMFSampleProtection_head
    IMFSampleProtection.GetInputProtectionVersion = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(3, 'GetInputProtectionVersion', ((1, 'pdwVersion'),)))
    IMFSampleProtection.GetOutputProtectionVersion = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(4, 'GetOutputProtectionVersion', ((1, 'pdwVersion'),)))
    IMFSampleProtection.GetProtectionCertificate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(c_char_p_no),POINTER(UInt32), use_last_error=False)(5, 'GetProtectionCertificate', ((1, 'dwVersion'),(1, 'ppCert'),(1, 'pcbCert'),)))
    IMFSampleProtection.InitOutputProtection = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,c_char_p_no,UInt32,POINTER(c_char_p_no),POINTER(UInt32), use_last_error=False)(6, 'InitOutputProtection', ((1, 'dwVersion'),(1, 'dwOutputId'),(1, 'pbCert'),(1, 'cbCert'),(1, 'ppbSeed'),(1, 'pcbSeed'),)))
    IMFSampleProtection.InitInputProtection = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,c_char_p_no,UInt32, use_last_error=False)(7, 'InitInputProtection', ((1, 'dwVersion'),(1, 'dwInputId'),(1, 'pbSeed'),(1, 'cbSeed'),)))
    win32more.System.Com.IUnknown
    return IMFSampleProtection
def _define_IMFMediaSinkPreroll_head():
    class IMFMediaSinkPreroll(win32more.System.Com.IUnknown_head):
        Guid = Guid('5dfd4b2a-7674-4110-a4e6-8a68fd5f3688')
    return IMFMediaSinkPreroll
def _define_IMFMediaSinkPreroll():
    IMFMediaSinkPreroll = win32more.Media.MediaFoundation.IMFMediaSinkPreroll_head
    IMFMediaSinkPreroll.NotifyPreroll = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int64, use_last_error=False)(3, 'NotifyPreroll', ((1, 'hnsUpcomingStartTime'),)))
    win32more.System.Com.IUnknown
    return IMFMediaSinkPreroll
def _define_IMFFinalizableMediaSink_head():
    class IMFFinalizableMediaSink(win32more.Media.MediaFoundation.IMFMediaSink_head):
        Guid = Guid('eaecb74a-9a50-42ce-9541-6a7f57aa4ad7')
    return IMFFinalizableMediaSink
def _define_IMFFinalizableMediaSink():
    IMFFinalizableMediaSink = win32more.Media.MediaFoundation.IMFFinalizableMediaSink_head
    IMFFinalizableMediaSink.BeginFinalize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(12, 'BeginFinalize', ((1, 'pCallback'),(1, 'punkState'),)))
    IMFFinalizableMediaSink.EndFinalize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head, use_last_error=False)(13, 'EndFinalize', ((1, 'pResult'),)))
    win32more.Media.MediaFoundation.IMFMediaSink
    return IMFFinalizableMediaSink
def _define_IMFStreamingSinkConfig_head():
    class IMFStreamingSinkConfig(win32more.System.Com.IUnknown_head):
        Guid = Guid('9db7aa41-3cc5-40d4-8509-555804ad34cc')
    return IMFStreamingSinkConfig
def _define_IMFStreamingSinkConfig():
    IMFStreamingSinkConfig = win32more.Media.MediaFoundation.IMFStreamingSinkConfig_head
    IMFStreamingSinkConfig.StartStreaming = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL,UInt64, use_last_error=False)(3, 'StartStreaming', ((1, 'fSeekOffsetIsByteOffset'),(1, 'qwSeekOffset'),)))
    win32more.System.Com.IUnknown
    return IMFStreamingSinkConfig
def _define_IMFRemoteProxy_head():
    class IMFRemoteProxy(win32more.System.Com.IUnknown_head):
        Guid = Guid('994e23ad-1cc2-493c-b9fa-46f1cb040fa4')
    return IMFRemoteProxy
def _define_IMFRemoteProxy():
    IMFRemoteProxy = win32more.Media.MediaFoundation.IMFRemoteProxy_head
    IMFRemoteProxy.GetRemoteObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(3, 'GetRemoteObject', ((1, 'riid'),(1, 'ppv'),)))
    IMFRemoteProxy.GetRemoteHost = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(4, 'GetRemoteHost', ((1, 'riid'),(1, 'ppv'),)))
    win32more.System.Com.IUnknown
    return IMFRemoteProxy
def _define_IMFObjectReferenceStream_head():
    class IMFObjectReferenceStream(win32more.System.Com.IUnknown_head):
        Guid = Guid('09ef5be3-c8a7-469e-8b70-73bf25bb193f')
    return IMFObjectReferenceStream
def _define_IMFObjectReferenceStream():
    IMFObjectReferenceStream = win32more.Media.MediaFoundation.IMFObjectReferenceStream_head
    IMFObjectReferenceStream.SaveReference = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),win32more.System.Com.IUnknown_head, use_last_error=False)(3, 'SaveReference', ((1, 'riid'),(1, 'pUnk'),)))
    IMFObjectReferenceStream.LoadReference = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(4, 'LoadReference', ((1, 'riid'),(1, 'ppv'),)))
    win32more.System.Com.IUnknown
    return IMFObjectReferenceStream
def _define_IMFPMPHost_head():
    class IMFPMPHost(win32more.System.Com.IUnknown_head):
        Guid = Guid('f70ca1a9-fdc7-4782-b994-adffb1c98606')
    return IMFPMPHost
def _define_IMFPMPHost():
    IMFPMPHost = win32more.Media.MediaFoundation.IMFPMPHost_head
    IMFPMPHost.LockProcess = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(3, 'LockProcess', ()))
    IMFPMPHost.UnlockProcess = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(4, 'UnlockProcess', ()))
    IMFPMPHost.CreateObjectByCLSID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),win32more.System.Com.IStream_head,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(5, 'CreateObjectByCLSID', ((1, 'clsid'),(1, 'pStream'),(1, 'riid'),(1, 'ppv'),)))
    win32more.System.Com.IUnknown
    return IMFPMPHost
def _define_IMFPMPClient_head():
    class IMFPMPClient(win32more.System.Com.IUnknown_head):
        Guid = Guid('6c4e655d-ead8-4421-b6b9-54dcdbbdf820')
    return IMFPMPClient
def _define_IMFPMPClient():
    IMFPMPClient = win32more.Media.MediaFoundation.IMFPMPClient_head
    IMFPMPClient.SetPMPHost = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPMPHost_head, use_last_error=False)(3, 'SetPMPHost', ((1, 'pPMPHost'),)))
    win32more.System.Com.IUnknown
    return IMFPMPClient
def _define_IMFPMPServer_head():
    class IMFPMPServer(win32more.System.Com.IUnknown_head):
        Guid = Guid('994e23af-1cc2-493c-b9fa-46f1cb040fa4')
    return IMFPMPServer
def _define_IMFPMPServer():
    IMFPMPServer = win32more.Media.MediaFoundation.IMFPMPServer_head
    IMFPMPServer.LockProcess = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(3, 'LockProcess', ()))
    IMFPMPServer.UnlockProcess = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(4, 'UnlockProcess', ()))
    IMFPMPServer.CreateObjectByCLSID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Guid),POINTER(c_void_p), use_last_error=False)(5, 'CreateObjectByCLSID', ((1, 'clsid'),(1, 'riid'),(1, 'ppObject'),)))
    win32more.System.Com.IUnknown
    return IMFPMPServer
def _define_IMFRemoteDesktopPlugin_head():
    class IMFRemoteDesktopPlugin(win32more.System.Com.IUnknown_head):
        Guid = Guid('1cde6309-cae0-4940-907e-c1ec9c3d1d4a')
    return IMFRemoteDesktopPlugin
def _define_IMFRemoteDesktopPlugin():
    IMFRemoteDesktopPlugin = win32more.Media.MediaFoundation.IMFRemoteDesktopPlugin_head
    IMFRemoteDesktopPlugin.UpdateTopology = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTopology_head, use_last_error=False)(3, 'UpdateTopology', ((1, 'pTopology'),)))
    win32more.System.Com.IUnknown
    return IMFRemoteDesktopPlugin
def _define_IMFSAMIStyle_head():
    class IMFSAMIStyle(win32more.System.Com.IUnknown_head):
        Guid = Guid('a7e025dd-5303-4a62-89d6-e747e1efac73')
    return IMFSAMIStyle
def _define_IMFSAMIStyle():
    IMFSAMIStyle = win32more.Media.MediaFoundation.IMFSAMIStyle_head
    IMFSAMIStyle.GetStyleCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(3, 'GetStyleCount', ((1, 'pdwCount'),)))
    IMFSAMIStyle.GetStyles = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(4, 'GetStyles', ((1, 'pPropVarStyleArray'),)))
    IMFSAMIStyle.SetSelectedStyle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR, use_last_error=False)(5, 'SetSelectedStyle', ((1, 'pwszStyle'),)))
    IMFSAMIStyle.GetSelectedStyle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR), use_last_error=False)(6, 'GetSelectedStyle', ((1, 'ppwszStyle'),)))
    win32more.System.Com.IUnknown
    return IMFSAMIStyle
def _define_IMFTranscodeProfile_head():
    class IMFTranscodeProfile(win32more.System.Com.IUnknown_head):
        Guid = Guid('4adfdba3-7ab0-4953-a62b-461e7ff3da1e')
    return IMFTranscodeProfile
def _define_IMFTranscodeProfile():
    IMFTranscodeProfile = win32more.Media.MediaFoundation.IMFTranscodeProfile_head
    IMFTranscodeProfile.SetAudioAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head, use_last_error=False)(3, 'SetAudioAttributes', ((1, 'pAttrs'),)))
    IMFTranscodeProfile.GetAudioAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head), use_last_error=False)(4, 'GetAudioAttributes', ((1, 'ppAttrs'),)))
    IMFTranscodeProfile.SetVideoAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head, use_last_error=False)(5, 'SetVideoAttributes', ((1, 'pAttrs'),)))
    IMFTranscodeProfile.GetVideoAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head), use_last_error=False)(6, 'GetVideoAttributes', ((1, 'ppAttrs'),)))
    IMFTranscodeProfile.SetContainerAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head, use_last_error=False)(7, 'SetContainerAttributes', ((1, 'pAttrs'),)))
    IMFTranscodeProfile.GetContainerAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head), use_last_error=False)(8, 'GetContainerAttributes', ((1, 'ppAttrs'),)))
    win32more.System.Com.IUnknown
    return IMFTranscodeProfile
MF_TRANSCODE_TOPOLOGYMODE_FLAGS = Int32
MF_TRANSCODE_TOPOLOGYMODE_SOFTWARE_ONLY = 0
MF_TRANSCODE_TOPOLOGYMODE_HARDWARE_ALLOWED = 1
MF_TRANSCODE_ADJUST_PROFILE_FLAGS = Int32
MF_TRANSCODE_ADJUST_PROFILE_DEFAULT = 0
MF_TRANSCODE_ADJUST_PROFILE_USE_SOURCE_ATTRIBUTES = 1
MF_VIDEO_PROCESSOR_ALGORITHM_TYPE = Int32
MF_VIDEO_PROCESSOR_ALGORITHM_DEFAULT = 0
MF_VIDEO_PROCESSOR_ALGORITHM_MRF_CRF_444 = 1
def _define_MF_TRANSCODE_SINK_INFO_head():
    class MF_TRANSCODE_SINK_INFO(Structure):
        pass
    return MF_TRANSCODE_SINK_INFO
def _define_MF_TRANSCODE_SINK_INFO():
    MF_TRANSCODE_SINK_INFO = win32more.Media.MediaFoundation.MF_TRANSCODE_SINK_INFO_head
    MF_TRANSCODE_SINK_INFO._fields_ = [
        ("dwVideoStreamID", UInt32),
        ("pVideoMediaType", win32more.Media.MediaFoundation.IMFMediaType_head),
        ("dwAudioStreamID", UInt32),
        ("pAudioMediaType", win32more.Media.MediaFoundation.IMFMediaType_head),
    ]
    return MF_TRANSCODE_SINK_INFO
def _define_IMFTranscodeSinkInfoProvider_head():
    class IMFTranscodeSinkInfoProvider(win32more.System.Com.IUnknown_head):
        Guid = Guid('8cffcd2e-5a03-4a3a-aff7-edcd107c620e')
    return IMFTranscodeSinkInfoProvider
def _define_IMFTranscodeSinkInfoProvider():
    IMFTranscodeSinkInfoProvider = win32more.Media.MediaFoundation.IMFTranscodeSinkInfoProvider_head
    IMFTranscodeSinkInfoProvider.SetOutputFile = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR, use_last_error=False)(3, 'SetOutputFile', ((1, 'pwszFileName'),)))
    IMFTranscodeSinkInfoProvider.SetOutputByteStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFActivate_head, use_last_error=False)(4, 'SetOutputByteStream', ((1, 'pByteStreamActivate'),)))
    IMFTranscodeSinkInfoProvider.SetProfile = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTranscodeProfile_head, use_last_error=False)(5, 'SetProfile', ((1, 'pProfile'),)))
    IMFTranscodeSinkInfoProvider.GetSinkInfo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_TRANSCODE_SINK_INFO_head), use_last_error=False)(6, 'GetSinkInfo', ((1, 'pSinkInfo'),)))
    win32more.System.Com.IUnknown
    return IMFTranscodeSinkInfoProvider
def _define_IMFFieldOfUseMFTUnlock_head():
    class IMFFieldOfUseMFTUnlock(win32more.System.Com.IUnknown_head):
        Guid = Guid('508e71d3-ec66-4fc3-8775-b4b9ed6ba847')
    return IMFFieldOfUseMFTUnlock
def _define_IMFFieldOfUseMFTUnlock():
    IMFFieldOfUseMFTUnlock = win32more.Media.MediaFoundation.IMFFieldOfUseMFTUnlock_head
    IMFFieldOfUseMFTUnlock.Unlock = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head, use_last_error=False)(3, 'Unlock', ((1, 'pUnkMFT'),)))
    win32more.System.Com.IUnknown
    return IMFFieldOfUseMFTUnlock
def _define_MFT_REGISTRATION_INFO_head():
    class MFT_REGISTRATION_INFO(Structure):
        pass
    return MFT_REGISTRATION_INFO
def _define_MFT_REGISTRATION_INFO():
    MFT_REGISTRATION_INFO = win32more.Media.MediaFoundation.MFT_REGISTRATION_INFO_head
    MFT_REGISTRATION_INFO._fields_ = [
        ("clsid", Guid),
        ("guidCategory", Guid),
        ("uiFlags", UInt32),
        ("pszName", win32more.Foundation.PWSTR),
        ("cInTypes", UInt32),
        ("pInTypes", POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head)),
        ("cOutTypes", UInt32),
        ("pOutTypes", POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head)),
    ]
    return MFT_REGISTRATION_INFO
def _define_IMFLocalMFTRegistration_head():
    class IMFLocalMFTRegistration(win32more.System.Com.IUnknown_head):
        Guid = Guid('149c4d73-b4be-4f8d-8b87-079e926b6add')
    return IMFLocalMFTRegistration
def _define_IMFLocalMFTRegistration():
    IMFLocalMFTRegistration = win32more.Media.MediaFoundation.IMFLocalMFTRegistration_head
    IMFLocalMFTRegistration.RegisterMFTs = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFT_REGISTRATION_INFO),UInt32, use_last_error=False)(3, 'RegisterMFTs', ((1, 'pMFTs'),(1, 'cMFTs'),)))
    win32more.System.Com.IUnknown
    return IMFLocalMFTRegistration
def _define_IMFCapturePhotoConfirmation_head():
    class IMFCapturePhotoConfirmation(win32more.System.Com.IUnknown_head):
        Guid = Guid('19f68549-ca8a-4706-a4ef-481dbc95e12c')
    return IMFCapturePhotoConfirmation
def _define_IMFCapturePhotoConfirmation():
    IMFCapturePhotoConfirmation = win32more.Media.MediaFoundation.IMFCapturePhotoConfirmation_head
    IMFCapturePhotoConfirmation.SetPhotoConfirmationCallback = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncCallback_head, use_last_error=False)(3, 'SetPhotoConfirmationCallback', ((1, 'pNotificationCallback'),)))
    IMFCapturePhotoConfirmation.SetPixelFormat = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Guid, use_last_error=False)(4, 'SetPixelFormat', ((1, 'subtype'),)))
    IMFCapturePhotoConfirmation.GetPixelFormat = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid), use_last_error=False)(5, 'GetPixelFormat', ((1, 'subtype'),)))
    win32more.System.Com.IUnknown
    return IMFCapturePhotoConfirmation
def _define_IMFPMPHostApp_head():
    class IMFPMPHostApp(win32more.System.Com.IUnknown_head):
        Guid = Guid('84d2054a-3aa1-4728-a3b0-440a418cf49c')
    return IMFPMPHostApp
def _define_IMFPMPHostApp():
    IMFPMPHostApp = win32more.Media.MediaFoundation.IMFPMPHostApp_head
    IMFPMPHostApp.LockProcess = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(3, 'LockProcess', ()))
    IMFPMPHostApp.UnlockProcess = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(4, 'UnlockProcess', ()))
    IMFPMPHostApp.ActivateClassById = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.System.Com.IStream_head,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(5, 'ActivateClassById', ((1, 'id'),(1, 'pStream'),(1, 'riid'),(1, 'ppv'),)))
    win32more.System.Com.IUnknown
    return IMFPMPHostApp
def _define_IMFPMPClientApp_head():
    class IMFPMPClientApp(win32more.System.Com.IUnknown_head):
        Guid = Guid('c004f646-be2c-48f3-93a2-a0983eba1108')
    return IMFPMPClientApp
def _define_IMFPMPClientApp():
    IMFPMPClientApp = win32more.Media.MediaFoundation.IMFPMPClientApp_head
    IMFPMPClientApp.SetPMPHost = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPMPHostApp_head, use_last_error=False)(3, 'SetPMPHost', ((1, 'pPMPHost'),)))
    win32more.System.Com.IUnknown
    return IMFPMPClientApp
def _define_IMFMediaStreamSourceSampleRequest_head():
    class IMFMediaStreamSourceSampleRequest(win32more.System.Com.IUnknown_head):
        Guid = Guid('380b9af9-a85b-4e78-a2af-ea5ce645c6b4')
    return IMFMediaStreamSourceSampleRequest
def _define_IMFMediaStreamSourceSampleRequest():
    IMFMediaStreamSourceSampleRequest = win32more.Media.MediaFoundation.IMFMediaStreamSourceSampleRequest_head
    IMFMediaStreamSourceSampleRequest.SetSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSample_head, use_last_error=False)(3, 'SetSample', ((1, 'value'),)))
    win32more.System.Com.IUnknown
    return IMFMediaStreamSourceSampleRequest
def _define_IMFTrackedSample_head():
    class IMFTrackedSample(win32more.System.Com.IUnknown_head):
        Guid = Guid('245bf8e9-0755-40f7-88a5-ae0f18d55e17')
    return IMFTrackedSample
def _define_IMFTrackedSample():
    IMFTrackedSample = win32more.Media.MediaFoundation.IMFTrackedSample_head
    IMFTrackedSample.SetAllocator = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(3, 'SetAllocator', ((1, 'pSampleAllocator'),(1, 'pUnkState'),)))
    win32more.System.Com.IUnknown
    return IMFTrackedSample
def _define_IMFProtectedEnvironmentAccess_head():
    class IMFProtectedEnvironmentAccess(win32more.System.Com.IUnknown_head):
        Guid = Guid('ef5dc845-f0d9-4ec9-b00c-cb5183d38434')
    return IMFProtectedEnvironmentAccess
def _define_IMFProtectedEnvironmentAccess():
    IMFProtectedEnvironmentAccess = win32more.Media.MediaFoundation.IMFProtectedEnvironmentAccess_head
    IMFProtectedEnvironmentAccess.Call = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_char_p_no,UInt32,c_char_p_no, use_last_error=False)(3, 'Call', ((1, 'inputLength'),(1, 'input'),(1, 'outputLength'),(1, 'output'),)))
    IMFProtectedEnvironmentAccess.ReadGRL = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(c_char_p_no), use_last_error=False)(4, 'ReadGRL', ((1, 'outputLength'),(1, 'output'),)))
    win32more.System.Com.IUnknown
    return IMFProtectedEnvironmentAccess
def _define_IMFSignedLibrary_head():
    class IMFSignedLibrary(win32more.System.Com.IUnknown_head):
        Guid = Guid('4a724bca-ff6a-4c07-8e0d-7a358421cf06')
    return IMFSignedLibrary
def _define_IMFSignedLibrary():
    IMFSignedLibrary = win32more.Media.MediaFoundation.IMFSignedLibrary_head
    IMFSignedLibrary.GetProcedureAddress = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PSTR,POINTER(c_void_p), use_last_error=False)(3, 'GetProcedureAddress', ((1, 'name'),(1, 'address'),)))
    win32more.System.Com.IUnknown
    return IMFSignedLibrary
def _define_IMFSystemId_head():
    class IMFSystemId(win32more.System.Com.IUnknown_head):
        Guid = Guid('fff4af3a-1fc1-4ef9-a29b-d26c49e2f31a')
    return IMFSystemId
def _define_IMFSystemId():
    IMFSystemId = win32more.Media.MediaFoundation.IMFSystemId_head
    IMFSystemId.GetData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(c_char_p_no), use_last_error=False)(3, 'GetData', ((1, 'size'),(1, 'data'),)))
    IMFSystemId.Setup = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,c_char_p_no,POINTER(UInt32),POINTER(c_char_p_no), use_last_error=False)(4, 'Setup', ((1, 'stage'),(1, 'cbIn'),(1, 'pbIn'),(1, 'pcbOut'),(1, 'ppbOut'),)))
    win32more.System.Com.IUnknown
    return IMFSystemId
def _define_MFCONTENTPROTECTIONDEVICE_INPUT_DATA_head():
    class MFCONTENTPROTECTIONDEVICE_INPUT_DATA(Structure):
        pass
    return MFCONTENTPROTECTIONDEVICE_INPUT_DATA
def _define_MFCONTENTPROTECTIONDEVICE_INPUT_DATA():
    MFCONTENTPROTECTIONDEVICE_INPUT_DATA = win32more.Media.MediaFoundation.MFCONTENTPROTECTIONDEVICE_INPUT_DATA_head
    MFCONTENTPROTECTIONDEVICE_INPUT_DATA._fields_ = [
        ("HWProtectionFunctionID", UInt32),
        ("PrivateDataByteCount", UInt32),
        ("HWProtectionDataByteCount", UInt32),
        ("Reserved", UInt32),
        ("InputData", Byte * 4),
    ]
    return MFCONTENTPROTECTIONDEVICE_INPUT_DATA
def _define_MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA_head():
    class MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA(Structure):
        pass
    return MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA
def _define_MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA():
    MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA = win32more.Media.MediaFoundation.MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA_head
    MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA._fields_ = [
        ("PrivateDataByteCount", UInt32),
        ("MaxHWProtectionDataByteCount", UInt32),
        ("HWProtectionDataByteCount", UInt32),
        ("Status", win32more.Foundation.HRESULT),
        ("TransportTimeInHundredsOfNanoseconds", Int64),
        ("ExecutionTimeInHundredsOfNanoseconds", Int64),
        ("OutputData", Byte * 4),
    ]
    return MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA
def _define_MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA_head():
    class MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA(Structure):
        pass
    return MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA
def _define_MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA():
    MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA = win32more.Media.MediaFoundation.MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA_head
    MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA._fields_ = [
        ("TaskIndex", UInt32),
        ("ClassName", Char * 260),
        ("BasePriority", Int32),
    ]
    return MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA
def _define_IMFContentProtectionDevice_head():
    class IMFContentProtectionDevice(win32more.System.Com.IUnknown_head):
        Guid = Guid('e6257174-a060-4c9a-a088-3b1b471cad28')
    return IMFContentProtectionDevice
def _define_IMFContentProtectionDevice():
    IMFContentProtectionDevice = win32more.Media.MediaFoundation.IMFContentProtectionDevice_head
    IMFContentProtectionDevice.InvokeFunction = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,c_char_p_no,POINTER(UInt32),c_char_p_no, use_last_error=False)(3, 'InvokeFunction', ((1, 'FunctionId'),(1, 'InputBufferByteCount'),(1, 'InputBuffer'),(1, 'OutputBufferByteCount'),(1, 'OutputBuffer'),)))
    IMFContentProtectionDevice.GetPrivateDataByteCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(UInt32), use_last_error=False)(4, 'GetPrivateDataByteCount', ((1, 'PrivateInputByteCount'),(1, 'PrivateOutputByteCount'),)))
    win32more.System.Com.IUnknown
    return IMFContentProtectionDevice
def _define_IMFContentDecryptorContext_head():
    class IMFContentDecryptorContext(win32more.System.Com.IUnknown_head):
        Guid = Guid('7ec4b1bd-43fb-4763-85d2-64fcb5c5f4cb')
    return IMFContentDecryptorContext
def _define_IMFContentDecryptorContext():
    IMFContentDecryptorContext = win32more.Media.MediaFoundation.IMFContentDecryptorContext_head
    IMFContentDecryptorContext.InitializeHardwareKey = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Void),POINTER(UInt64), use_last_error=False)(3, 'InitializeHardwareKey', ((1, 'InputPrivateDataByteCount'),(1, 'InputPrivateData'),(1, 'OutputPrivateData'),)))
    win32more.System.Com.IUnknown
    return IMFContentDecryptorContext
MF_MEDIAKEYSESSION_TYPE = Int32
MF_MEDIAKEYSESSION_TYPE_TEMPORARY = 0
MF_MEDIAKEYSESSION_TYPE_PERSISTENT_LICENSE = 1
MF_MEDIAKEYSESSION_TYPE_PERSISTENT_RELEASE_MESSAGE = 2
MF_MEDIAKEYSESSION_TYPE_PERSISTENT_USAGE_RECORD = 3
MF_MEDIAKEY_STATUS = Int32
MF_MEDIAKEY_STATUS_USABLE = 0
MF_MEDIAKEY_STATUS_EXPIRED = 1
MF_MEDIAKEY_STATUS_OUTPUT_DOWNSCALED = 2
MF_MEDIAKEY_STATUS_OUTPUT_NOT_ALLOWED = 3
MF_MEDIAKEY_STATUS_STATUS_PENDING = 4
MF_MEDIAKEY_STATUS_INTERNAL_ERROR = 5
MF_MEDIAKEY_STATUS_RELEASED = 6
MF_MEDIAKEY_STATUS_OUTPUT_RESTRICTED = 7
def _define_MFMediaKeyStatus_head():
    class MFMediaKeyStatus(Structure):
        pass
    return MFMediaKeyStatus
def _define_MFMediaKeyStatus():
    MFMediaKeyStatus = win32more.Media.MediaFoundation.MFMediaKeyStatus_head
    MFMediaKeyStatus._fields_ = [
        ("pbKeyId", c_char_p_no),
        ("cbKeyId", UInt32),
        ("eMediaKeyStatus", win32more.Media.MediaFoundation.MF_MEDIAKEY_STATUS),
    ]
    return MFMediaKeyStatus
MF_MEDIAKEYSESSION_MESSAGETYPE = Int32
MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_REQUEST = 0
MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RENEWAL = 1
MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RELEASE = 2
MF_MEDIAKEYSESSION_MESSAGETYPE_INDIVIDUALIZATION_REQUEST = 3
MF_CROSS_ORIGIN_POLICY = Int32
MF_CROSS_ORIGIN_POLICY_NONE = 0
MF_CROSS_ORIGIN_POLICY_ANONYMOUS = 1
MF_CROSS_ORIGIN_POLICY_USE_CREDENTIALS = 2
def _define_IMFNetCrossOriginSupport_head():
    class IMFNetCrossOriginSupport(win32more.System.Com.IUnknown_head):
        Guid = Guid('bc2b7d44-a72d-49d5-8376-1480dee58b22')
    return IMFNetCrossOriginSupport
def _define_IMFNetCrossOriginSupport():
    IMFNetCrossOriginSupport = win32more.Media.MediaFoundation.IMFNetCrossOriginSupport_head
    IMFNetCrossOriginSupport.GetCrossOriginPolicy = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_CROSS_ORIGIN_POLICY), use_last_error=False)(3, 'GetCrossOriginPolicy', ((1, 'pPolicy'),)))
    IMFNetCrossOriginSupport.GetSourceOrigin = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR), use_last_error=False)(4, 'GetSourceOrigin', ((1, 'wszSourceOrigin'),)))
    IMFNetCrossOriginSupport.IsSameOrigin = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Foundation.BOOL), use_last_error=False)(5, 'IsSameOrigin', ((1, 'wszURL'),(1, 'pfIsSameOrigin'),)))
    win32more.System.Com.IUnknown
    return IMFNetCrossOriginSupport
def _define_IMFHttpDownloadRequest_head():
    class IMFHttpDownloadRequest(win32more.System.Com.IUnknown_head):
        Guid = Guid('f779fddf-26e7-4270-8a8b-b983d1859de0')
    return IMFHttpDownloadRequest
def _define_IMFHttpDownloadRequest():
    IMFHttpDownloadRequest = win32more.Media.MediaFoundation.IMFHttpDownloadRequest_head
    IMFHttpDownloadRequest.AddHeader = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR, use_last_error=False)(3, 'AddHeader', ((1, 'szHeader'),)))
    IMFHttpDownloadRequest.BeginSendRequest = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Byte),UInt32,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(4, 'BeginSendRequest', ((1, 'pbPayload'),(1, 'cbPayload'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFHttpDownloadRequest.EndSendRequest = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head, use_last_error=False)(5, 'EndSendRequest', ((1, 'pResult'),)))
    IMFHttpDownloadRequest.BeginReceiveResponse = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(6, 'BeginReceiveResponse', ((1, 'pCallback'),(1, 'punkState'),)))
    IMFHttpDownloadRequest.EndReceiveResponse = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head, use_last_error=False)(7, 'EndReceiveResponse', ((1, 'pResult'),)))
    IMFHttpDownloadRequest.BeginReadPayload = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Byte),UInt32,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(8, 'BeginReadPayload', ((1, 'pb'),(1, 'cb'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFHttpDownloadRequest.EndReadPayload = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(UInt64),POINTER(UInt32), use_last_error=False)(9, 'EndReadPayload', ((1, 'pResult'),(1, 'pqwOffset'),(1, 'pcbRead'),)))
    IMFHttpDownloadRequest.QueryHeader = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,UInt32,POINTER(win32more.Foundation.PWSTR), use_last_error=False)(10, 'QueryHeader', ((1, 'szHeaderName'),(1, 'dwIndex'),(1, 'ppszHeaderValue'),)))
    IMFHttpDownloadRequest.GetURL = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR), use_last_error=False)(11, 'GetURL', ((1, 'ppszURL'),)))
    IMFHttpDownloadRequest.HasNullSourceOrigin = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(12, 'HasNullSourceOrigin', ((1, 'pfNullSourceOrigin'),)))
    IMFHttpDownloadRequest.GetTimeSeekResult = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64),POINTER(UInt64),POINTER(UInt64), use_last_error=False)(13, 'GetTimeSeekResult', ((1, 'pqwStartTime'),(1, 'pqwStopTime'),(1, 'pqwDuration'),)))
    IMFHttpDownloadRequest.GetHttpStatus = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(14, 'GetHttpStatus', ((1, 'pdwHttpStatus'),)))
    IMFHttpDownloadRequest.GetAtEndOfPayload = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(15, 'GetAtEndOfPayload', ((1, 'pfAtEndOfPayload'),)))
    IMFHttpDownloadRequest.GetTotalLength = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64), use_last_error=False)(16, 'GetTotalLength', ((1, 'pqwTotalLength'),)))
    IMFHttpDownloadRequest.GetRangeEndOffset = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64), use_last_error=False)(17, 'GetRangeEndOffset', ((1, 'pqwRangeEnd'),)))
    IMFHttpDownloadRequest.Close = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(18, 'Close', ()))
    win32more.System.Com.IUnknown
    return IMFHttpDownloadRequest
def _define_IMFHttpDownloadSession_head():
    class IMFHttpDownloadSession(win32more.System.Com.IUnknown_head):
        Guid = Guid('71fa9a2c-53ce-4662-a132-1a7e8cbf62db')
    return IMFHttpDownloadSession
def _define_IMFHttpDownloadSession():
    IMFHttpDownloadSession = win32more.Media.MediaFoundation.IMFHttpDownloadSession_head
    IMFHttpDownloadSession.SetServer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,UInt32, use_last_error=False)(3, 'SetServer', ((1, 'szServerName'),(1, 'nPort'),)))
    IMFHttpDownloadSession.CreateRequest = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.BOOL,win32more.Foundation.BOOL,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.IMFHttpDownloadRequest_head), use_last_error=False)(4, 'CreateRequest', ((1, 'szObjectName'),(1, 'fBypassProxyCache'),(1, 'fSecure'),(1, 'szVerb'),(1, 'szReferrer'),(1, 'ppRequest'),)))
    IMFHttpDownloadSession.Close = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(5, 'Close', ()))
    win32more.System.Com.IUnknown
    return IMFHttpDownloadSession
def _define_IMFHttpDownloadSessionProvider_head():
    class IMFHttpDownloadSessionProvider(win32more.System.Com.IUnknown_head):
        Guid = Guid('1b4cf4b9-3a16-4115-839d-03cc5c99df01')
    return IMFHttpDownloadSessionProvider
def _define_IMFHttpDownloadSessionProvider():
    IMFHttpDownloadSessionProvider = win32more.Media.MediaFoundation.IMFHttpDownloadSessionProvider_head
    IMFHttpDownloadSessionProvider.CreateHttpDownloadSession = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.IMFHttpDownloadSession_head), use_last_error=False)(3, 'CreateHttpDownloadSession', ((1, 'wszScheme'),(1, 'ppDownloadSession'),)))
    win32more.System.Com.IUnknown
    return IMFHttpDownloadSessionProvider
def _define_MF_VIDEO_SPHERICAL_VIEWDIRECTION_head():
    class MF_VIDEO_SPHERICAL_VIEWDIRECTION(Structure):
        pass
    return MF_VIDEO_SPHERICAL_VIEWDIRECTION
def _define_MF_VIDEO_SPHERICAL_VIEWDIRECTION():
    MF_VIDEO_SPHERICAL_VIEWDIRECTION = win32more.Media.MediaFoundation.MF_VIDEO_SPHERICAL_VIEWDIRECTION_head
    MF_VIDEO_SPHERICAL_VIEWDIRECTION._fields_ = [
        ("iHeading", Int32),
        ("iPitch", Int32),
        ("iRoll", Int32),
    ]
    return MF_VIDEO_SPHERICAL_VIEWDIRECTION
def _define_IMFMediaSource2_head():
    class IMFMediaSource2(win32more.Media.MediaFoundation.IMFMediaSourceEx_head):
        Guid = Guid('fbb03414-d13b-4786-8319-5ac51fc0a136')
    return IMFMediaSource2
def _define_IMFMediaSource2():
    IMFMediaSource2 = win32more.Media.MediaFoundation.IMFMediaSource2_head
    IMFMediaSource2.SetMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head, use_last_error=False)(16, 'SetMediaType', ((1, 'dwStreamID'),(1, 'pMediaType'),)))
    win32more.Media.MediaFoundation.IMFMediaSourceEx
    return IMFMediaSource2
def _define_IMFMediaStream2_head():
    class IMFMediaStream2(win32more.Media.MediaFoundation.IMFMediaStream_head):
        Guid = Guid('c5bc37d6-75c7-46a1-a132-81b5f723c20f')
    return IMFMediaStream2
def _define_IMFMediaStream2():
    IMFMediaStream2 = win32more.Media.MediaFoundation.IMFMediaStream2_head
    IMFMediaStream2.SetStreamState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_STREAM_STATE, use_last_error=False)(10, 'SetStreamState', ((1, 'value'),)))
    IMFMediaStream2.GetStreamState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_STREAM_STATE), use_last_error=False)(11, 'GetStreamState', ((1, 'value'),)))
    win32more.Media.MediaFoundation.IMFMediaStream
    return IMFMediaStream2
MFSensorDeviceType = Int32
MFSensorDeviceType_Unknown = 0
MFSensorDeviceType_Device = 1
MFSensorDeviceType_MediaSource = 2
MFSensorDeviceType_FrameProvider = 3
MFSensorDeviceType_SensorTransform = 4
MFSensorStreamType = Int32
MFSensorStreamType_Unknown = 0
MFSensorStreamType_Input = 1
MFSensorStreamType_Output = 2
MFSensorDeviceMode = Int32
MFSensorDeviceMode_Controller = 0
MFSensorDeviceMode_Shared = 1
def _define_IMFSensorDevice_head():
    class IMFSensorDevice(win32more.System.Com.IUnknown_head):
        Guid = Guid('fb9f48f2-2a18-4e28-9730-786f30f04dc4')
    return IMFSensorDevice
def _define_IMFSensorDevice():
    IMFSensorDevice = win32more.Media.MediaFoundation.IMFSensorDevice_head
    IMFSensorDevice.GetDeviceId = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64), use_last_error=False)(3, 'GetDeviceId', ((1, 'pDeviceId'),)))
    IMFSensorDevice.GetDeviceType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFSensorDeviceType), use_last_error=False)(4, 'GetDeviceType', ((1, 'pType'),)))
    IMFSensorDevice.GetFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64), use_last_error=False)(5, 'GetFlags', ((1, 'pFlags'),)))
    IMFSensorDevice.GetSymbolicLink = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Char),Int32,POINTER(Int32), use_last_error=False)(6, 'GetSymbolicLink', ((1, 'SymbolicLink'),(1, 'cchSymbolicLink'),(1, 'pcchWritten'),)))
    IMFSensorDevice.GetDeviceAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head), use_last_error=False)(7, 'GetDeviceAttributes', ((1, 'ppAttributes'),)))
    IMFSensorDevice.GetStreamAttributesCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFSensorStreamType,POINTER(UInt32), use_last_error=False)(8, 'GetStreamAttributesCount', ((1, 'eType'),(1, 'pdwCount'),)))
    IMFSensorDevice.GetStreamAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFSensorStreamType,UInt32,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head), use_last_error=False)(9, 'GetStreamAttributes', ((1, 'eType'),(1, 'dwIndex'),(1, 'ppAttributes'),)))
    IMFSensorDevice.SetSensorDeviceMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFSensorDeviceMode, use_last_error=False)(10, 'SetSensorDeviceMode', ((1, 'eMode'),)))
    IMFSensorDevice.GetSensorDeviceMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFSensorDeviceMode), use_last_error=False)(11, 'GetSensorDeviceMode', ((1, 'peMode'),)))
    win32more.System.Com.IUnknown
    return IMFSensorDevice
def _define_IMFSensorGroup_head():
    class IMFSensorGroup(win32more.System.Com.IUnknown_head):
        Guid = Guid('4110243a-9757-461f-89f1-f22345bcab4e')
    return IMFSensorGroup
def _define_IMFSensorGroup():
    IMFSensorGroup = win32more.Media.MediaFoundation.IMFSensorGroup_head
    IMFSensorGroup.GetSymbolicLink = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Char),Int32,POINTER(Int32), use_last_error=False)(3, 'GetSymbolicLink', ((1, 'SymbolicLink'),(1, 'cchSymbolicLink'),(1, 'pcchWritten'),)))
    IMFSensorGroup.GetFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64), use_last_error=False)(4, 'GetFlags', ((1, 'pFlags'),)))
    IMFSensorGroup.GetSensorGroupAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head), use_last_error=False)(5, 'GetSensorGroupAttributes', ((1, 'ppAttributes'),)))
    IMFSensorGroup.GetSensorDeviceCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(6, 'GetSensorDeviceCount', ((1, 'pdwCount'),)))
    IMFSensorGroup.GetSensorDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFSensorDevice_head), use_last_error=False)(7, 'GetSensorDevice', ((1, 'dwIndex'),(1, 'ppDevice'),)))
    IMFSensorGroup.SetDefaultSensorDeviceIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(8, 'SetDefaultSensorDeviceIndex', ((1, 'dwIndex'),)))
    IMFSensorGroup.GetDefaultSensorDeviceIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(9, 'GetDefaultSensorDeviceIndex', ((1, 'pdwIndex'),)))
    IMFSensorGroup.CreateMediaSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaSource_head), use_last_error=False)(10, 'CreateMediaSource', ((1, 'ppSource'),)))
    win32more.System.Com.IUnknown
    return IMFSensorGroup
def _define_IMFSensorStream_head():
    class IMFSensorStream(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('e9a42171-c56e-498a-8b39-eda5a070b7fc')
    return IMFSensorStream
def _define_IMFSensorStream():
    IMFSensorStream = win32more.Media.MediaFoundation.IMFSensorStream_head
    IMFSensorStream.GetMediaTypeCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(33, 'GetMediaTypeCount', ((1, 'pdwCount'),)))
    IMFSensorStream.GetMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head), use_last_error=False)(34, 'GetMediaType', ((1, 'dwIndex'),(1, 'ppMediaType'),)))
    IMFSensorStream.CloneSensorStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFSensorStream_head), use_last_error=False)(35, 'CloneSensorStream', ((1, 'ppStream'),)))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFSensorStream
def _define_IMFSensorTransformFactory_head():
    class IMFSensorTransformFactory(win32more.System.Com.IUnknown_head):
        Guid = Guid('eed9c2ee-66b4-4f18-a697-ac7d3960215c')
    return IMFSensorTransformFactory
def _define_IMFSensorTransformFactory():
    IMFSensorTransformFactory = win32more.Media.MediaFoundation.IMFSensorTransformFactory_head
    IMFSensorTransformFactory.GetFactoryAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head), use_last_error=False)(3, 'GetFactoryAttributes', ((1, 'ppAttributes'),)))
    IMFSensorTransformFactory.InitializeFactory = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFCollection_head,win32more.Media.MediaFoundation.IMFAttributes_head, use_last_error=False)(4, 'InitializeFactory', ((1, 'dwMaxTransformCount'),(1, 'pSensorDevices'),(1, 'pAttributes'),)))
    IMFSensorTransformFactory.GetTransformCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(5, 'GetTransformCount', ((1, 'pdwCount'),)))
    IMFSensorTransformFactory.GetTransformInformation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.IMFAttributes_head),POINTER(win32more.Media.MediaFoundation.IMFCollection_head), use_last_error=False)(6, 'GetTransformInformation', ((1, 'TransformIndex'),(1, 'pguidTransformId'),(1, 'ppAttributes'),(1, 'ppStreamInformation'),)))
    IMFSensorTransformFactory.CreateTransform = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.Streaming.IMFDeviceTransform_head), use_last_error=False)(7, 'CreateTransform', ((1, 'guidSensorTransformID'),(1, 'pAttributes'),(1, 'ppDeviceMFT'),)))
    win32more.System.Com.IUnknown
    return IMFSensorTransformFactory
def _define_SENSORPROFILEID_head():
    class SENSORPROFILEID(Structure):
        pass
    return SENSORPROFILEID
def _define_SENSORPROFILEID():
    SENSORPROFILEID = win32more.Media.MediaFoundation.SENSORPROFILEID_head
    SENSORPROFILEID._fields_ = [
        ("Type", Guid),
        ("Index", UInt32),
        ("Unused", UInt32),
    ]
    return SENSORPROFILEID
def _define_IMFSensorProfile_head():
    class IMFSensorProfile(win32more.System.Com.IUnknown_head):
        Guid = Guid('22f765d1-8dab-4107-846d-56baf72215e7')
    return IMFSensorProfile
def _define_IMFSensorProfile():
    IMFSensorProfile = win32more.Media.MediaFoundation.IMFSensorProfile_head
    IMFSensorProfile.GetProfileId = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.SENSORPROFILEID_head), use_last_error=False)(3, 'GetProfileId', ((1, 'pId'),)))
    IMFSensorProfile.AddProfileFilter = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.PWSTR, use_last_error=False)(4, 'AddProfileFilter', ((1, 'StreamId'),(1, 'wzFilterSetString'),)))
    IMFSensorProfile.IsMediaTypeSupported = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Foundation.BOOL), use_last_error=False)(5, 'IsMediaTypeSupported', ((1, 'StreamId'),(1, 'pMediaType'),(1, 'pfSupported'),)))
    IMFSensorProfile.AddBlockedControl = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR, use_last_error=False)(6, 'AddBlockedControl', ((1, 'wzBlockedControl'),)))
    win32more.System.Com.IUnknown
    return IMFSensorProfile
def _define_IMFSensorProfileCollection_head():
    class IMFSensorProfileCollection(win32more.System.Com.IUnknown_head):
        Guid = Guid('c95ea55b-0187-48be-9353-8d2507662351')
    return IMFSensorProfileCollection
def _define_IMFSensorProfileCollection():
    IMFSensorProfileCollection = win32more.Media.MediaFoundation.IMFSensorProfileCollection_head
    IMFSensorProfileCollection.GetProfileCount = COMMETHOD(WINFUNCTYPE(UInt32, use_last_error=False)(3, 'GetProfileCount', ()))
    IMFSensorProfileCollection.GetProfile = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFSensorProfile_head), use_last_error=False)(4, 'GetProfile', ((1, 'Index'),(1, 'ppProfile'),)))
    IMFSensorProfileCollection.AddProfile = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSensorProfile_head, use_last_error=False)(5, 'AddProfile', ((1, 'pProfile'),)))
    IMFSensorProfileCollection.FindProfile = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.SENSORPROFILEID_head),POINTER(win32more.Media.MediaFoundation.IMFSensorProfile_head), use_last_error=False)(6, 'FindProfile', ((1, 'ProfileId'),(1, 'ppProfile'),)))
    IMFSensorProfileCollection.RemoveProfileByIndex = COMMETHOD(WINFUNCTYPE(Void,UInt32, use_last_error=False)(7, 'RemoveProfileByIndex', ((1, 'Index'),)))
    IMFSensorProfileCollection.RemoveProfile = COMMETHOD(WINFUNCTYPE(Void,POINTER(win32more.Media.MediaFoundation.SENSORPROFILEID_head), use_last_error=False)(8, 'RemoveProfile', ((1, 'ProfileId'),)))
    win32more.System.Com.IUnknown
    return IMFSensorProfileCollection
def _define_IMFSensorProcessActivity_head():
    class IMFSensorProcessActivity(win32more.System.Com.IUnknown_head):
        Guid = Guid('39dc7f4a-b141-4719-813c-a7f46162a2b8')
    return IMFSensorProcessActivity
def _define_IMFSensorProcessActivity():
    IMFSensorProcessActivity = win32more.Media.MediaFoundation.IMFSensorProcessActivity_head
    IMFSensorProcessActivity.GetProcessId = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(3, 'GetProcessId', ((1, 'pPID'),)))
    IMFSensorProcessActivity.GetStreamingState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(4, 'GetStreamingState', ((1, 'pfStreaming'),)))
    IMFSensorProcessActivity.GetStreamingMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFSensorDeviceMode), use_last_error=False)(5, 'GetStreamingMode', ((1, 'pMode'),)))
    IMFSensorProcessActivity.GetReportTime = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.FILETIME_head), use_last_error=False)(6, 'GetReportTime', ((1, 'pft'),)))
    win32more.System.Com.IUnknown
    return IMFSensorProcessActivity
def _define_IMFSensorActivityReport_head():
    class IMFSensorActivityReport(win32more.System.Com.IUnknown_head):
        Guid = Guid('3e8c4be1-a8c2-4528-90de-2851bde5fead')
    return IMFSensorActivityReport
def _define_IMFSensorActivityReport():
    IMFSensorActivityReport = win32more.Media.MediaFoundation.IMFSensorActivityReport_head
    IMFSensorActivityReport.GetFriendlyName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Char),UInt32,POINTER(UInt32), use_last_error=False)(3, 'GetFriendlyName', ((1, 'FriendlyName'),(1, 'cchFriendlyName'),(1, 'pcchWritten'),)))
    IMFSensorActivityReport.GetSymbolicLink = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Char),UInt32,POINTER(UInt32), use_last_error=False)(4, 'GetSymbolicLink', ((1, 'SymbolicLink'),(1, 'cchSymbolicLink'),(1, 'pcchWritten'),)))
    IMFSensorActivityReport.GetProcessCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(5, 'GetProcessCount', ((1, 'pcCount'),)))
    IMFSensorActivityReport.GetProcessActivity = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFSensorProcessActivity_head), use_last_error=False)(6, 'GetProcessActivity', ((1, 'Index'),(1, 'ppProcessActivity'),)))
    win32more.System.Com.IUnknown
    return IMFSensorActivityReport
def _define_IMFSensorActivitiesReport_head():
    class IMFSensorActivitiesReport(win32more.System.Com.IUnknown_head):
        Guid = Guid('683f7a5e-4a19-43cd-b1a9-dbf4ab3f7777')
    return IMFSensorActivitiesReport
def _define_IMFSensorActivitiesReport():
    IMFSensorActivitiesReport = win32more.Media.MediaFoundation.IMFSensorActivitiesReport_head
    IMFSensorActivitiesReport.GetCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(3, 'GetCount', ((1, 'pcCount'),)))
    IMFSensorActivitiesReport.GetActivityReport = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFSensorActivityReport_head), use_last_error=False)(4, 'GetActivityReport', ((1, 'Index'),(1, 'sensorActivityReport'),)))
    IMFSensorActivitiesReport.GetActivityReportByDeviceName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.IMFSensorActivityReport_head), use_last_error=False)(5, 'GetActivityReportByDeviceName', ((1, 'SymbolicName'),(1, 'sensorActivityReport'),)))
    win32more.System.Com.IUnknown
    return IMFSensorActivitiesReport
def _define_IMFSensorActivitiesReportCallback_head():
    class IMFSensorActivitiesReportCallback(win32more.System.Com.IUnknown_head):
        Guid = Guid('de5072ee-dbe3-46dc-8a87-b6f631194751')
    return IMFSensorActivitiesReportCallback
def _define_IMFSensorActivitiesReportCallback():
    IMFSensorActivitiesReportCallback = win32more.Media.MediaFoundation.IMFSensorActivitiesReportCallback_head
    IMFSensorActivitiesReportCallback.OnActivitiesReport = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSensorActivitiesReport_head, use_last_error=False)(3, 'OnActivitiesReport', ((1, 'sensorActivitiesReport'),)))
    win32more.System.Com.IUnknown
    return IMFSensorActivitiesReportCallback
def _define_IMFSensorActivityMonitor_head():
    class IMFSensorActivityMonitor(win32more.System.Com.IUnknown_head):
        Guid = Guid('d0cef145-b3f4-4340-a2e5-7a5080ca05cb')
    return IMFSensorActivityMonitor
def _define_IMFSensorActivityMonitor():
    IMFSensorActivityMonitor = win32more.Media.MediaFoundation.IMFSensorActivityMonitor_head
    IMFSensorActivityMonitor.Start = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(3, 'Start', ()))
    IMFSensorActivityMonitor.Stop = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(4, 'Stop', ()))
    win32more.System.Com.IUnknown
    return IMFSensorActivityMonitor
def _define_MFCameraIntrinsic_CameraModel_head():
    class MFCameraIntrinsic_CameraModel(Structure):
        pass
    return MFCameraIntrinsic_CameraModel
def _define_MFCameraIntrinsic_CameraModel():
    MFCameraIntrinsic_CameraModel = win32more.Media.MediaFoundation.MFCameraIntrinsic_CameraModel_head
    MFCameraIntrinsic_CameraModel._fields_ = [
        ("FocalLength_x", Single),
        ("FocalLength_y", Single),
        ("PrincipalPoint_x", Single),
        ("PrincipalPoint_y", Single),
    ]
    return MFCameraIntrinsic_CameraModel
def _define_MFCameraIntrinsic_DistortionModel6KT_head():
    class MFCameraIntrinsic_DistortionModel6KT(Structure):
        pass
    return MFCameraIntrinsic_DistortionModel6KT
def _define_MFCameraIntrinsic_DistortionModel6KT():
    MFCameraIntrinsic_DistortionModel6KT = win32more.Media.MediaFoundation.MFCameraIntrinsic_DistortionModel6KT_head
    MFCameraIntrinsic_DistortionModel6KT._fields_ = [
        ("Radial_k1", Single),
        ("Radial_k2", Single),
        ("Radial_k3", Single),
        ("Radial_k4", Single),
        ("Radial_k5", Single),
        ("Radial_k6", Single),
        ("Tangential_p1", Single),
        ("Tangential_p2", Single),
    ]
    return MFCameraIntrinsic_DistortionModel6KT
def _define_MFCameraIntrinsic_DistortionModelArcTan_head():
    class MFCameraIntrinsic_DistortionModelArcTan(Structure):
        pass
    return MFCameraIntrinsic_DistortionModelArcTan
def _define_MFCameraIntrinsic_DistortionModelArcTan():
    MFCameraIntrinsic_DistortionModelArcTan = win32more.Media.MediaFoundation.MFCameraIntrinsic_DistortionModelArcTan_head
    MFCameraIntrinsic_DistortionModelArcTan._fields_ = [
        ("Radial_k0", Single),
        ("DistortionCenter_x", Single),
        ("DistortionCenter_y", Single),
        ("Tangential_x", Single),
        ("Tangential_y", Single),
    ]
    return MFCameraIntrinsic_DistortionModelArcTan
MFCameraIntrinsic_DistortionModelType = Int32
MFCameraIntrinsic_DistortionModelType_6KT = 0
MFCameraIntrinsic_DistortionModelType_ArcTan = 1
def _define_MFExtendedCameraIntrinsic_IntrinsicModel_head():
    class MFExtendedCameraIntrinsic_IntrinsicModel(Structure):
        pass
    return MFExtendedCameraIntrinsic_IntrinsicModel
def _define_MFExtendedCameraIntrinsic_IntrinsicModel():
    MFExtendedCameraIntrinsic_IntrinsicModel = win32more.Media.MediaFoundation.MFExtendedCameraIntrinsic_IntrinsicModel_head
    MFExtendedCameraIntrinsic_IntrinsicModel._fields_ = [
        ("Width", UInt32),
        ("Height", UInt32),
        ("SplitFrameId", UInt32),
        ("CameraModel", win32more.Media.MediaFoundation.MFCameraIntrinsic_CameraModel),
    ]
    return MFExtendedCameraIntrinsic_IntrinsicModel
def _define_IMFExtendedCameraIntrinsicModel_head():
    class IMFExtendedCameraIntrinsicModel(win32more.System.Com.IUnknown_head):
        Guid = Guid('5c595e64-4630-4231-855a-12842f733245')
    return IMFExtendedCameraIntrinsicModel
def _define_IMFExtendedCameraIntrinsicModel():
    IMFExtendedCameraIntrinsicModel = win32more.Media.MediaFoundation.IMFExtendedCameraIntrinsicModel_head
    IMFExtendedCameraIntrinsicModel.GetModel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFExtendedCameraIntrinsic_IntrinsicModel_head), use_last_error=False)(3, 'GetModel', ((1, 'pIntrinsicModel'),)))
    IMFExtendedCameraIntrinsicModel.SetModel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFExtendedCameraIntrinsic_IntrinsicModel_head), use_last_error=False)(4, 'SetModel', ((1, 'pIntrinsicModel'),)))
    IMFExtendedCameraIntrinsicModel.GetDistortionModelType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFCameraIntrinsic_DistortionModelType), use_last_error=False)(5, 'GetDistortionModelType', ((1, 'pDistortionModelType'),)))
    win32more.System.Com.IUnknown
    return IMFExtendedCameraIntrinsicModel
def _define_IMFExtendedCameraIntrinsicsDistortionModel6KT_head():
    class IMFExtendedCameraIntrinsicsDistortionModel6KT(win32more.System.Com.IUnknown_head):
        Guid = Guid('74c2653b-5f55-4eb1-9f0f-18b8f68b7d3d')
    return IMFExtendedCameraIntrinsicsDistortionModel6KT
def _define_IMFExtendedCameraIntrinsicsDistortionModel6KT():
    IMFExtendedCameraIntrinsicsDistortionModel6KT = win32more.Media.MediaFoundation.IMFExtendedCameraIntrinsicsDistortionModel6KT_head
    IMFExtendedCameraIntrinsicsDistortionModel6KT.GetDistortionModel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFCameraIntrinsic_DistortionModel6KT_head), use_last_error=False)(3, 'GetDistortionModel', ((1, 'pDistortionModel'),)))
    IMFExtendedCameraIntrinsicsDistortionModel6KT.SetDistortionModel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFCameraIntrinsic_DistortionModel6KT_head), use_last_error=False)(4, 'SetDistortionModel', ((1, 'pDistortionModel'),)))
    win32more.System.Com.IUnknown
    return IMFExtendedCameraIntrinsicsDistortionModel6KT
def _define_IMFExtendedCameraIntrinsicsDistortionModelArcTan_head():
    class IMFExtendedCameraIntrinsicsDistortionModelArcTan(win32more.System.Com.IUnknown_head):
        Guid = Guid('812d5f95-b572-45dc-bafc-ae24199ddda8')
    return IMFExtendedCameraIntrinsicsDistortionModelArcTan
def _define_IMFExtendedCameraIntrinsicsDistortionModelArcTan():
    IMFExtendedCameraIntrinsicsDistortionModelArcTan = win32more.Media.MediaFoundation.IMFExtendedCameraIntrinsicsDistortionModelArcTan_head
    IMFExtendedCameraIntrinsicsDistortionModelArcTan.GetDistortionModel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFCameraIntrinsic_DistortionModelArcTan_head), use_last_error=False)(3, 'GetDistortionModel', ((1, 'pDistortionModel'),)))
    IMFExtendedCameraIntrinsicsDistortionModelArcTan.SetDistortionModel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFCameraIntrinsic_DistortionModelArcTan_head), use_last_error=False)(4, 'SetDistortionModel', ((1, 'pDistortionModel'),)))
    win32more.System.Com.IUnknown
    return IMFExtendedCameraIntrinsicsDistortionModelArcTan
def _define_IMFExtendedCameraIntrinsics_head():
    class IMFExtendedCameraIntrinsics(win32more.System.Com.IUnknown_head):
        Guid = Guid('687f6dac-6987-4750-a16a-734d1e7a10fe')
    return IMFExtendedCameraIntrinsics
def _define_IMFExtendedCameraIntrinsics():
    IMFExtendedCameraIntrinsics = win32more.Media.MediaFoundation.IMFExtendedCameraIntrinsics_head
    IMFExtendedCameraIntrinsics.InitializeFromBuffer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32, use_last_error=False)(3, 'InitializeFromBuffer', ((1, 'pbBuffer'),(1, 'dwBufferSize'),)))
    IMFExtendedCameraIntrinsics.GetBufferSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(4, 'GetBufferSize', ((1, 'pdwBufferSize'),)))
    IMFExtendedCameraIntrinsics.SerializeToBuffer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,POINTER(UInt32), use_last_error=False)(5, 'SerializeToBuffer', ((1, 'pbBuffer'),(1, 'pdwBufferSize'),)))
    IMFExtendedCameraIntrinsics.GetIntrinsicModelCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(6, 'GetIntrinsicModelCount', ((1, 'pdwCount'),)))
    IMFExtendedCameraIntrinsics.GetIntrinsicModelByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFExtendedCameraIntrinsicModel_head), use_last_error=False)(7, 'GetIntrinsicModelByIndex', ((1, 'dwIndex'),(1, 'ppIntrinsicModel'),)))
    IMFExtendedCameraIntrinsics.AddIntrinsicModel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFExtendedCameraIntrinsicModel_head, use_last_error=False)(8, 'AddIntrinsicModel', ((1, 'pIntrinsicModel'),)))
    win32more.System.Com.IUnknown
    return IMFExtendedCameraIntrinsics
def _define_IMFExtendedCameraControl_head():
    class IMFExtendedCameraControl(win32more.System.Com.IUnknown_head):
        Guid = Guid('38e33520-fca1-4845-a27a-68b7c6ab3789')
    return IMFExtendedCameraControl
def _define_IMFExtendedCameraControl():
    IMFExtendedCameraControl = win32more.Media.MediaFoundation.IMFExtendedCameraControl_head
    IMFExtendedCameraControl.GetCapabilities = COMMETHOD(WINFUNCTYPE(UInt64, use_last_error=False)(3, 'GetCapabilities', ()))
    IMFExtendedCameraControl.SetFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64, use_last_error=False)(4, 'SetFlags', ((1, 'ulFlags'),)))
    IMFExtendedCameraControl.GetFlags = COMMETHOD(WINFUNCTYPE(UInt64, use_last_error=False)(5, 'GetFlags', ()))
    IMFExtendedCameraControl.LockPayload = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(c_char_p_no),POINTER(UInt32), use_last_error=False)(6, 'LockPayload', ((1, 'ppPayload'),(1, 'pulPayload'),)))
    IMFExtendedCameraControl.UnlockPayload = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(7, 'UnlockPayload', ()))
    IMFExtendedCameraControl.CommitSettings = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(8, 'CommitSettings', ()))
    win32more.System.Com.IUnknown
    return IMFExtendedCameraControl
def _define_IMFExtendedCameraController_head():
    class IMFExtendedCameraController(win32more.System.Com.IUnknown_head):
        Guid = Guid('b91ebfee-ca03-4af4-8a82-a31752f4a0fc')
    return IMFExtendedCameraController
def _define_IMFExtendedCameraController():
    IMFExtendedCameraController = win32more.Media.MediaFoundation.IMFExtendedCameraController_head
    IMFExtendedCameraController.GetExtendedCameraControl = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.IMFExtendedCameraControl_head), use_last_error=False)(3, 'GetExtendedCameraControl', ((1, 'dwStreamIndex'),(1, 'ulPropertyId'),(1, 'ppControl'),)))
    win32more.System.Com.IUnknown
    return IMFExtendedCameraController
def _define_IMFRelativePanelReport_head():
    class IMFRelativePanelReport(win32more.System.Com.IUnknown_head):
        Guid = Guid('f25362ea-2c0e-447f-81e2-755914cdc0c3')
    return IMFRelativePanelReport
def _define_IMFRelativePanelReport():
    IMFRelativePanelReport = win32more.Media.MediaFoundation.IMFRelativePanelReport_head
    IMFRelativePanelReport.GetRelativePanel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(3, 'GetRelativePanel', ((1, 'panel'),)))
    win32more.System.Com.IUnknown
    return IMFRelativePanelReport
def _define_IMFRelativePanelWatcher_head():
    class IMFRelativePanelWatcher(win32more.Media.MediaFoundation.IMFShutdown_head):
        Guid = Guid('421af7f6-573e-4ad0-8fda-2e57cedb18c6')
    return IMFRelativePanelWatcher
def _define_IMFRelativePanelWatcher():
    IMFRelativePanelWatcher = win32more.Media.MediaFoundation.IMFRelativePanelWatcher_head
    IMFRelativePanelWatcher.BeginGetReport = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(5, 'BeginGetReport', ((1, 'pCallback'),(1, 'pState'),)))
    IMFRelativePanelWatcher.EndGetReport = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(win32more.Media.MediaFoundation.IMFRelativePanelReport_head), use_last_error=False)(6, 'EndGetReport', ((1, 'pResult'),(1, 'ppRelativePanelReport'),)))
    IMFRelativePanelWatcher.GetReport = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFRelativePanelReport_head), use_last_error=False)(7, 'GetReport', ((1, 'ppRelativePanelReport'),)))
    win32more.Media.MediaFoundation.IMFShutdown
    return IMFRelativePanelWatcher
MFCameraOcclusionState = Int32
MFCameraOcclusionState_Open = 0
MFCameraOcclusionState_OccludedByLid = 1
MFCameraOcclusionState_OccludedByCameraHardware = 2
def _define_IMFCameraOcclusionStateReport_head():
    class IMFCameraOcclusionStateReport(win32more.System.Com.IUnknown_head):
        Guid = Guid('1640b2cf-74da-4462-a43b-b76d3bdc1434')
    return IMFCameraOcclusionStateReport
def _define_IMFCameraOcclusionStateReport():
    IMFCameraOcclusionStateReport = win32more.Media.MediaFoundation.IMFCameraOcclusionStateReport_head
    IMFCameraOcclusionStateReport.GetOcclusionState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(3, 'GetOcclusionState', ((1, 'occlusionState'),)))
    win32more.System.Com.IUnknown
    return IMFCameraOcclusionStateReport
def _define_IMFCameraOcclusionStateReportCallback_head():
    class IMFCameraOcclusionStateReportCallback(win32more.System.Com.IUnknown_head):
        Guid = Guid('6e5841c7-3889-4019-9035-783fb19b5948')
    return IMFCameraOcclusionStateReportCallback
def _define_IMFCameraOcclusionStateReportCallback():
    IMFCameraOcclusionStateReportCallback = win32more.Media.MediaFoundation.IMFCameraOcclusionStateReportCallback_head
    IMFCameraOcclusionStateReportCallback.OnOcclusionStateReport = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFCameraOcclusionStateReport_head, use_last_error=False)(3, 'OnOcclusionStateReport', ((1, 'occlusionStateReport'),)))
    win32more.System.Com.IUnknown
    return IMFCameraOcclusionStateReportCallback
def _define_IMFCameraOcclusionStateMonitor_head():
    class IMFCameraOcclusionStateMonitor(win32more.System.Com.IUnknown_head):
        Guid = Guid('cc692f46-c697-47e2-a72d-7b064617749b')
    return IMFCameraOcclusionStateMonitor
def _define_IMFCameraOcclusionStateMonitor():
    IMFCameraOcclusionStateMonitor = win32more.Media.MediaFoundation.IMFCameraOcclusionStateMonitor_head
    IMFCameraOcclusionStateMonitor.Start = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(3, 'Start', ()))
    IMFCameraOcclusionStateMonitor.Stop = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(4, 'Stop', ()))
    IMFCameraOcclusionStateMonitor.GetSupportedStates = COMMETHOD(WINFUNCTYPE(UInt32, use_last_error=False)(5, 'GetSupportedStates', ()))
    win32more.System.Com.IUnknown
    return IMFCameraOcclusionStateMonitor
def _define_IMFVideoCaptureSampleAllocator_head():
    class IMFVideoCaptureSampleAllocator(win32more.Media.MediaFoundation.IMFVideoSampleAllocator_head):
        Guid = Guid('725b77c7-ca9f-4fe5-9d72-9946bf9b3c70')
    return IMFVideoCaptureSampleAllocator
def _define_IMFVideoCaptureSampleAllocator():
    IMFVideoCaptureSampleAllocator = win32more.Media.MediaFoundation.IMFVideoCaptureSampleAllocator_head
    IMFVideoCaptureSampleAllocator.InitializeCaptureSampleAllocator = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,UInt32,UInt32,win32more.Media.MediaFoundation.IMFAttributes_head,win32more.Media.MediaFoundation.IMFMediaType_head, use_last_error=False)(7, 'InitializeCaptureSampleAllocator', ((1, 'cbSampleSize'),(1, 'cbCaptureMetadataSize'),(1, 'cbAlignment'),(1, 'cMinimumSamples'),(1, 'pAttributes'),(1, 'pMediaType'),)))
    win32more.Media.MediaFoundation.IMFVideoSampleAllocator
    return IMFVideoCaptureSampleAllocator
MFSampleAllocatorUsage = Int32
MFSampleAllocatorUsage_UsesProvidedAllocator = 0
MFSampleAllocatorUsage_UsesCustomAllocator = 1
MFSampleAllocatorUsage_DoesNotAllocate = 2
def _define_IMFSampleAllocatorControl_head():
    class IMFSampleAllocatorControl(win32more.System.Com.IUnknown_head):
        Guid = Guid('da62b958-3a38-4a97-bd27-149c640c0771')
    return IMFSampleAllocatorControl
def _define_IMFSampleAllocatorControl():
    IMFSampleAllocatorControl = win32more.Media.MediaFoundation.IMFSampleAllocatorControl_head
    IMFSampleAllocatorControl.SetDefaultAllocator = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.System.Com.IUnknown_head, use_last_error=False)(3, 'SetDefaultAllocator', ((1, 'dwOutputStreamID'),(1, 'pAllocator'),)))
    IMFSampleAllocatorControl.GetAllocatorUsage = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32),POINTER(win32more.Media.MediaFoundation.MFSampleAllocatorUsage), use_last_error=False)(4, 'GetAllocatorUsage', ((1, 'dwOutputStreamID'),(1, 'pdwInputStreamID'),(1, 'peUsage'),)))
    win32more.System.Com.IUnknown
    return IMFSampleAllocatorControl
def _define_IMFASFContentInfo_head():
    class IMFASFContentInfo(win32more.System.Com.IUnknown_head):
        Guid = Guid('b1dca5cd-d5da-4451-8e9e-db5c59914ead')
    return IMFASFContentInfo
def _define_IMFASFContentInfo():
    IMFASFContentInfo = win32more.Media.MediaFoundation.IMFASFContentInfo_head
    IMFASFContentInfo.GetHeaderSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaBuffer_head,POINTER(UInt64), use_last_error=False)(3, 'GetHeaderSize', ((1, 'pIStartOfContent'),(1, 'cbHeaderSize'),)))
    IMFASFContentInfo.ParseHeader = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaBuffer_head,UInt64, use_last_error=False)(4, 'ParseHeader', ((1, 'pIHeaderBuffer'),(1, 'cbOffsetWithinHeader'),)))
    IMFASFContentInfo.GenerateHeader = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaBuffer_head,POINTER(UInt32), use_last_error=False)(5, 'GenerateHeader', ((1, 'pIHeader'),(1, 'pcbHeader'),)))
    IMFASFContentInfo.GetProfile = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFProfile_head), use_last_error=False)(6, 'GetProfile', ((1, 'ppIProfile'),)))
    IMFASFContentInfo.SetProfile = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFASFProfile_head, use_last_error=False)(7, 'SetProfile', ((1, 'pIProfile'),)))
    IMFASFContentInfo.GeneratePresentationDescriptor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFPresentationDescriptor_head), use_last_error=False)(8, 'GeneratePresentationDescriptor', ((1, 'ppIPresentationDescriptor'),)))
    IMFASFContentInfo.GetEncodingConfigurationPropertyStore = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16,POINTER(win32more.UI.Shell.PropertiesSystem.IPropertyStore_head), use_last_error=False)(9, 'GetEncodingConfigurationPropertyStore', ((1, 'wStreamNumber'),(1, 'ppIStore'),)))
    win32more.System.Com.IUnknown
    return IMFASFContentInfo
def _define_IMFASFProfile_head():
    class IMFASFProfile(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('d267bf6a-028b-4e0d-903d-43f0ef82d0d4')
    return IMFASFProfile
def _define_IMFASFProfile():
    IMFASFProfile = win32more.Media.MediaFoundation.IMFASFProfile_head
    IMFASFProfile.GetStreamCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(33, 'GetStreamCount', ((1, 'pcStreams'),)))
    IMFASFProfile.GetStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt16),POINTER(win32more.Media.MediaFoundation.IMFASFStreamConfig_head), use_last_error=False)(34, 'GetStream', ((1, 'dwStreamIndex'),(1, 'pwStreamNumber'),(1, 'ppIStream'),)))
    IMFASFProfile.GetStreamByNumber = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16,POINTER(win32more.Media.MediaFoundation.IMFASFStreamConfig_head), use_last_error=False)(35, 'GetStreamByNumber', ((1, 'wStreamNumber'),(1, 'ppIStream'),)))
    IMFASFProfile.SetStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFASFStreamConfig_head, use_last_error=False)(36, 'SetStream', ((1, 'pIStream'),)))
    IMFASFProfile.RemoveStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16, use_last_error=False)(37, 'RemoveStream', ((1, 'wStreamNumber'),)))
    IMFASFProfile.CreateStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.IMFASFStreamConfig_head), use_last_error=False)(38, 'CreateStream', ((1, 'pIMediaType'),(1, 'ppIStream'),)))
    IMFASFProfile.GetMutualExclusionCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(39, 'GetMutualExclusionCount', ((1, 'pcMutexs'),)))
    IMFASFProfile.GetMutualExclusion = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFASFMutualExclusion_head), use_last_error=False)(40, 'GetMutualExclusion', ((1, 'dwMutexIndex'),(1, 'ppIMutex'),)))
    IMFASFProfile.AddMutualExclusion = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFASFMutualExclusion_head, use_last_error=False)(41, 'AddMutualExclusion', ((1, 'pIMutex'),)))
    IMFASFProfile.RemoveMutualExclusion = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(42, 'RemoveMutualExclusion', ((1, 'dwMutexIndex'),)))
    IMFASFProfile.CreateMutualExclusion = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFMutualExclusion_head), use_last_error=False)(43, 'CreateMutualExclusion', ((1, 'ppIMutex'),)))
    IMFASFProfile.GetStreamPrioritization = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFStreamPrioritization_head), use_last_error=False)(44, 'GetStreamPrioritization', ((1, 'ppIStreamPrioritization'),)))
    IMFASFProfile.AddStreamPrioritization = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFASFStreamPrioritization_head, use_last_error=False)(45, 'AddStreamPrioritization', ((1, 'pIStreamPrioritization'),)))
    IMFASFProfile.RemoveStreamPrioritization = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(46, 'RemoveStreamPrioritization', ()))
    IMFASFProfile.CreateStreamPrioritization = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFStreamPrioritization_head), use_last_error=False)(47, 'CreateStreamPrioritization', ((1, 'ppIStreamPrioritization'),)))
    IMFASFProfile.Clone = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFProfile_head), use_last_error=False)(48, 'Clone', ((1, 'ppIProfile'),)))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFASFProfile
def _define_IMFASFStreamConfig_head():
    class IMFASFStreamConfig(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('9e8ae8d2-dbbd-4200-9aca-06e6df484913')
    return IMFASFStreamConfig
def _define_IMFASFStreamConfig():
    IMFASFStreamConfig = win32more.Media.MediaFoundation.IMFASFStreamConfig_head
    IMFASFStreamConfig.GetStreamType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid), use_last_error=False)(33, 'GetStreamType', ((1, 'pguidStreamType'),)))
    IMFASFStreamConfig.GetStreamNumber = COMMETHOD(WINFUNCTYPE(UInt16, use_last_error=False)(34, 'GetStreamNumber', ()))
    IMFASFStreamConfig.SetStreamNumber = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16, use_last_error=False)(35, 'SetStreamNumber', ((1, 'wStreamNum'),)))
    IMFASFStreamConfig.GetMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head), use_last_error=False)(36, 'GetMediaType', ((1, 'ppIMediaType'),)))
    IMFASFStreamConfig.SetMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head, use_last_error=False)(37, 'SetMediaType', ((1, 'pIMediaType'),)))
    IMFASFStreamConfig.GetPayloadExtensionCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt16), use_last_error=False)(38, 'GetPayloadExtensionCount', ((1, 'pcPayloadExtensions'),)))
    IMFASFStreamConfig.GetPayloadExtension = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16,POINTER(Guid),POINTER(UInt16),c_char_p_no,POINTER(UInt32), use_last_error=False)(39, 'GetPayloadExtension', ((1, 'wPayloadExtensionNumber'),(1, 'pguidExtensionSystemID'),(1, 'pcbExtensionDataSize'),(1, 'pbExtensionSystemInfo'),(1, 'pcbExtensionSystemInfo'),)))
    IMFASFStreamConfig.AddPayloadExtension = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,UInt16,POINTER(Byte),UInt32, use_last_error=False)(40, 'AddPayloadExtension', ((1, 'guidExtensionSystemID'),(1, 'cbExtensionDataSize'),(1, 'pbExtensionSystemInfo'),(1, 'cbExtensionSystemInfo'),)))
    IMFASFStreamConfig.RemoveAllPayloadExtensions = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(41, 'RemoveAllPayloadExtensions', ()))
    IMFASFStreamConfig.Clone = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFStreamConfig_head), use_last_error=False)(42, 'Clone', ((1, 'ppIStreamConfig'),)))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFASFStreamConfig
def _define_IMFASFMutualExclusion_head():
    class IMFASFMutualExclusion(win32more.System.Com.IUnknown_head):
        Guid = Guid('12558291-e399-11d5-bc2a-00b0d0f3f4ab')
    return IMFASFMutualExclusion
def _define_IMFASFMutualExclusion():
    IMFASFMutualExclusion = win32more.Media.MediaFoundation.IMFASFMutualExclusion_head
    IMFASFMutualExclusion.GetType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid), use_last_error=False)(3, 'GetType', ((1, 'pguidType'),)))
    IMFASFMutualExclusion.SetType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid), use_last_error=False)(4, 'SetType', ((1, 'guidType'),)))
    IMFASFMutualExclusion.GetRecordCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(5, 'GetRecordCount', ((1, 'pdwRecordCount'),)))
    IMFASFMutualExclusion.GetStreamsForRecord = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt16),POINTER(UInt32), use_last_error=False)(6, 'GetStreamsForRecord', ((1, 'dwRecordNumber'),(1, 'pwStreamNumArray'),(1, 'pcStreams'),)))
    IMFASFMutualExclusion.AddStreamForRecord = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt16, use_last_error=False)(7, 'AddStreamForRecord', ((1, 'dwRecordNumber'),(1, 'wStreamNumber'),)))
    IMFASFMutualExclusion.RemoveStreamFromRecord = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt16, use_last_error=False)(8, 'RemoveStreamFromRecord', ((1, 'dwRecordNumber'),(1, 'wStreamNumber'),)))
    IMFASFMutualExclusion.RemoveRecord = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(9, 'RemoveRecord', ((1, 'dwRecordNumber'),)))
    IMFASFMutualExclusion.AddRecord = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(10, 'AddRecord', ((1, 'pdwRecordNumber'),)))
    IMFASFMutualExclusion.Clone = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFMutualExclusion_head), use_last_error=False)(11, 'Clone', ((1, 'ppIMutex'),)))
    win32more.System.Com.IUnknown
    return IMFASFMutualExclusion
def _define_IMFASFStreamPrioritization_head():
    class IMFASFStreamPrioritization(win32more.System.Com.IUnknown_head):
        Guid = Guid('699bdc27-bbaf-49ff-8e38-9c39c9b5e088')
    return IMFASFStreamPrioritization
def _define_IMFASFStreamPrioritization():
    IMFASFStreamPrioritization = win32more.Media.MediaFoundation.IMFASFStreamPrioritization_head
    IMFASFStreamPrioritization.GetStreamCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(3, 'GetStreamCount', ((1, 'pdwStreamCount'),)))
    IMFASFStreamPrioritization.GetStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt16),POINTER(UInt16), use_last_error=False)(4, 'GetStream', ((1, 'dwStreamIndex'),(1, 'pwStreamNumber'),(1, 'pwStreamFlags'),)))
    IMFASFStreamPrioritization.AddStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16,UInt16, use_last_error=False)(5, 'AddStream', ((1, 'wStreamNumber'),(1, 'wStreamFlags'),)))
    IMFASFStreamPrioritization.RemoveStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(6, 'RemoveStream', ((1, 'dwStreamIndex'),)))
    IMFASFStreamPrioritization.Clone = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFStreamPrioritization_head), use_last_error=False)(7, 'Clone', ((1, 'ppIStreamPrioritization'),)))
    win32more.System.Com.IUnknown
    return IMFASFStreamPrioritization
MFASF_INDEXER_FLAGS = Int32
MFASF_INDEXER_WRITE_NEW_INDEX = 1
MFASF_INDEXER_READ_FOR_REVERSEPLAYBACK = 2
MFASF_INDEXER_WRITE_FOR_LIVEREAD = 4
def _define_ASF_INDEX_IDENTIFIER_head():
    class ASF_INDEX_IDENTIFIER(Structure):
        pass
    return ASF_INDEX_IDENTIFIER
def _define_ASF_INDEX_IDENTIFIER():
    ASF_INDEX_IDENTIFIER = win32more.Media.MediaFoundation.ASF_INDEX_IDENTIFIER_head
    ASF_INDEX_IDENTIFIER._fields_ = [
        ("guidIndexType", Guid),
        ("wStreamNumber", UInt16),
    ]
    return ASF_INDEX_IDENTIFIER
def _define_ASF_INDEX_DESCRIPTOR_head():
    class ASF_INDEX_DESCRIPTOR(Structure):
        pass
    return ASF_INDEX_DESCRIPTOR
def _define_ASF_INDEX_DESCRIPTOR():
    ASF_INDEX_DESCRIPTOR = win32more.Media.MediaFoundation.ASF_INDEX_DESCRIPTOR_head
    ASF_INDEX_DESCRIPTOR._fields_ = [
        ("Identifier", win32more.Media.MediaFoundation.ASF_INDEX_IDENTIFIER),
        ("cPerEntryBytes", UInt16),
        ("szDescription", Char * 32),
        ("dwInterval", UInt32),
    ]
    return ASF_INDEX_DESCRIPTOR
def _define_IMFASFIndexer_head():
    class IMFASFIndexer(win32more.System.Com.IUnknown_head):
        Guid = Guid('53590f48-dc3b-4297-813f-787761ad7b3e')
    return IMFASFIndexer
def _define_IMFASFIndexer():
    IMFASFIndexer = win32more.Media.MediaFoundation.IMFASFIndexer_head
    IMFASFIndexer.SetFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(3, 'SetFlags', ((1, 'dwFlags'),)))
    IMFASFIndexer.GetFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(4, 'GetFlags', ((1, 'pdwFlags'),)))
    IMFASFIndexer.Initialize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFASFContentInfo_head, use_last_error=False)(5, 'Initialize', ((1, 'pIContentInfo'),)))
    IMFASFIndexer.GetIndexPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFASFContentInfo_head,POINTER(UInt64), use_last_error=False)(6, 'GetIndexPosition', ((1, 'pIContentInfo'),(1, 'pcbIndexOffset'),)))
    IMFASFIndexer.SetIndexByteStreams = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFByteStream_head),UInt32, use_last_error=False)(7, 'SetIndexByteStreams', ((1, 'ppIByteStreams'),(1, 'cByteStreams'),)))
    IMFASFIndexer.GetIndexByteStreamCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(8, 'GetIndexByteStreamCount', ((1, 'pcByteStreams'),)))
    IMFASFIndexer.GetIndexStatus = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.ASF_INDEX_IDENTIFIER_head),POINTER(win32more.Foundation.BOOL),c_char_p_no,POINTER(UInt32), use_last_error=False)(9, 'GetIndexStatus', ((1, 'pIndexIdentifier'),(1, 'pfIsIndexed'),(1, 'pbIndexDescriptor'),(1, 'pcbIndexDescriptor'),)))
    IMFASFIndexer.SetIndexStatus = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32,win32more.Foundation.BOOL, use_last_error=False)(10, 'SetIndexStatus', ((1, 'pbIndexDescriptor'),(1, 'cbIndexDescriptor'),(1, 'fGenerateIndex'),)))
    IMFASFIndexer.GetSeekPositionForValue = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head),POINTER(win32more.Media.MediaFoundation.ASF_INDEX_IDENTIFIER_head),POINTER(UInt64),POINTER(Int64),POINTER(UInt32), use_last_error=False)(11, 'GetSeekPositionForValue', ((1, 'pvarValue'),(1, 'pIndexIdentifier'),(1, 'pcbOffsetWithinData'),(1, 'phnsApproxTime'),(1, 'pdwPayloadNumberOfStreamWithinPacket'),)))
    IMFASFIndexer.GenerateIndexEntries = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSample_head, use_last_error=False)(12, 'GenerateIndexEntries', ((1, 'pIASFPacketSample'),)))
    IMFASFIndexer.CommitIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFASFContentInfo_head, use_last_error=False)(13, 'CommitIndex', ((1, 'pIContentInfo'),)))
    IMFASFIndexer.GetIndexWriteSpace = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64), use_last_error=False)(14, 'GetIndexWriteSpace', ((1, 'pcbIndexWriteSpace'),)))
    IMFASFIndexer.GetCompletedIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaBuffer_head,UInt64, use_last_error=False)(15, 'GetCompletedIndex', ((1, 'pIIndexBuffer'),(1, 'cbOffsetWithinIndex'),)))
    win32more.System.Com.IUnknown
    return IMFASFIndexer
def _define_IMFASFSplitter_head():
    class IMFASFSplitter(win32more.System.Com.IUnknown_head):
        Guid = Guid('12558295-e399-11d5-bc2a-00b0d0f3f4ab')
    return IMFASFSplitter
def _define_IMFASFSplitter():
    IMFASFSplitter = win32more.Media.MediaFoundation.IMFASFSplitter_head
    IMFASFSplitter.Initialize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFASFContentInfo_head, use_last_error=False)(3, 'Initialize', ((1, 'pIContentInfo'),)))
    IMFASFSplitter.SetFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(4, 'SetFlags', ((1, 'dwFlags'),)))
    IMFASFSplitter.GetFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(5, 'GetFlags', ((1, 'pdwFlags'),)))
    IMFASFSplitter.SelectStreams = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt16),UInt16, use_last_error=False)(6, 'SelectStreams', ((1, 'pwStreamNumbers'),(1, 'wNumStreams'),)))
    IMFASFSplitter.GetSelectedStreams = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt16),POINTER(UInt16), use_last_error=False)(7, 'GetSelectedStreams', ((1, 'pwStreamNumbers'),(1, 'pwNumStreams'),)))
    IMFASFSplitter.ParseData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaBuffer_head,UInt32,UInt32, use_last_error=False)(8, 'ParseData', ((1, 'pIBuffer'),(1, 'cbBufferOffset'),(1, 'cbLength'),)))
    IMFASFSplitter.GetNextSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.ASF_STATUSFLAGS),POINTER(UInt16),POINTER(win32more.Media.MediaFoundation.IMFSample_head), use_last_error=False)(9, 'GetNextSample', ((1, 'pdwStatusFlags'),(1, 'pwStreamNumber'),(1, 'ppISample'),)))
    IMFASFSplitter.Flush = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(10, 'Flush', ()))
    IMFASFSplitter.GetLastSendTime = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(11, 'GetLastSendTime', ((1, 'pdwLastSendTime'),)))
    win32more.System.Com.IUnknown
    return IMFASFSplitter
MFASF_SPLITTERFLAGS = Int32
MFASF_SPLITTER_REVERSE = 1
MFASF_SPLITTER_WMDRM = 2
ASF_STATUSFLAGS = Int32
ASF_STATUSFLAGS_INCOMPLETE = 1
ASF_STATUSFLAGS_NONFATAL_ERROR = 2
MFASF_MULTIPLEXERFLAGS = Int32
MFASF_MULTIPLEXER_AUTOADJUST_BITRATE = 1
def _define_ASF_MUX_STATISTICS_head():
    class ASF_MUX_STATISTICS(Structure):
        pass
    return ASF_MUX_STATISTICS
def _define_ASF_MUX_STATISTICS():
    ASF_MUX_STATISTICS = win32more.Media.MediaFoundation.ASF_MUX_STATISTICS_head
    ASF_MUX_STATISTICS._fields_ = [
        ("cFramesWritten", UInt32),
        ("cFramesDropped", UInt32),
    ]
    return ASF_MUX_STATISTICS
def _define_IMFASFMultiplexer_head():
    class IMFASFMultiplexer(win32more.System.Com.IUnknown_head):
        Guid = Guid('57bdd80a-9b38-4838-b737-c58f670d7d4f')
    return IMFASFMultiplexer
def _define_IMFASFMultiplexer():
    IMFASFMultiplexer = win32more.Media.MediaFoundation.IMFASFMultiplexer_head
    IMFASFMultiplexer.Initialize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFASFContentInfo_head, use_last_error=False)(3, 'Initialize', ((1, 'pIContentInfo'),)))
    IMFASFMultiplexer.SetFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(4, 'SetFlags', ((1, 'dwFlags'),)))
    IMFASFMultiplexer.GetFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(5, 'GetFlags', ((1, 'pdwFlags'),)))
    IMFASFMultiplexer.ProcessSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16,win32more.Media.MediaFoundation.IMFSample_head,Int64, use_last_error=False)(6, 'ProcessSample', ((1, 'wStreamNumber'),(1, 'pISample'),(1, 'hnsTimestampAdjust'),)))
    IMFASFMultiplexer.GetNextPacket = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(win32more.Media.MediaFoundation.IMFSample_head), use_last_error=False)(7, 'GetNextPacket', ((1, 'pdwStatusFlags'),(1, 'ppIPacket'),)))
    IMFASFMultiplexer.Flush = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(8, 'Flush', ()))
    IMFASFMultiplexer.End = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFASFContentInfo_head, use_last_error=False)(9, 'End', ((1, 'pIContentInfo'),)))
    IMFASFMultiplexer.GetStatistics = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16,POINTER(win32more.Media.MediaFoundation.ASF_MUX_STATISTICS_head), use_last_error=False)(10, 'GetStatistics', ((1, 'wStreamNumber'),(1, 'pMuxStats'),)))
    IMFASFMultiplexer.SetSyncTolerance = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(11, 'SetSyncTolerance', ((1, 'msSyncTolerance'),)))
    win32more.System.Com.IUnknown
    return IMFASFMultiplexer
MFASF_STREAMSELECTOR_FLAGS = Int32
MFASF_STREAMSELECTOR_DISABLE_THINNING = 1
MFASF_STREAMSELECTOR_USE_AVERAGE_BITRATE = 2
ASF_SELECTION_STATUS = Int32
ASF_STATUS_NOTSELECTED = 0
ASF_STATUS_CLEANPOINTSONLY = 1
ASF_STATUS_ALLDATAUNITS = 2
def _define_IMFASFStreamSelector_head():
    class IMFASFStreamSelector(win32more.System.Com.IUnknown_head):
        Guid = Guid('d01bad4a-4fa0-4a60-9349-c27e62da9d41')
    return IMFASFStreamSelector
def _define_IMFASFStreamSelector():
    IMFASFStreamSelector = win32more.Media.MediaFoundation.IMFASFStreamSelector_head
    IMFASFStreamSelector.GetStreamCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(3, 'GetStreamCount', ((1, 'pcStreams'),)))
    IMFASFStreamSelector.GetOutputCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(4, 'GetOutputCount', ((1, 'pcOutputs'),)))
    IMFASFStreamSelector.GetOutputStreamCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32), use_last_error=False)(5, 'GetOutputStreamCount', ((1, 'dwOutputNum'),(1, 'pcStreams'),)))
    IMFASFStreamSelector.GetOutputStreamNumbers = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt16), use_last_error=False)(6, 'GetOutputStreamNumbers', ((1, 'dwOutputNum'),(1, 'rgwStreamNumbers'),)))
    IMFASFStreamSelector.GetOutputFromStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16,POINTER(UInt32), use_last_error=False)(7, 'GetOutputFromStream', ((1, 'wStreamNum'),(1, 'pdwOutput'),)))
    IMFASFStreamSelector.GetOutputOverride = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.ASF_SELECTION_STATUS), use_last_error=False)(8, 'GetOutputOverride', ((1, 'dwOutputNum'),(1, 'pSelection'),)))
    IMFASFStreamSelector.SetOutputOverride = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.ASF_SELECTION_STATUS, use_last_error=False)(9, 'SetOutputOverride', ((1, 'dwOutputNum'),(1, 'Selection'),)))
    IMFASFStreamSelector.GetOutputMutexCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32), use_last_error=False)(10, 'GetOutputMutexCount', ((1, 'dwOutputNum'),(1, 'pcMutexes'),)))
    IMFASFStreamSelector.GetOutputMutex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(win32more.System.Com.IUnknown_head), use_last_error=False)(11, 'GetOutputMutex', ((1, 'dwOutputNum'),(1, 'dwMutexNum'),(1, 'ppMutex'),)))
    IMFASFStreamSelector.SetOutputMutexSelection = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,UInt16, use_last_error=False)(12, 'SetOutputMutexSelection', ((1, 'dwOutputNum'),(1, 'dwMutexNum'),(1, 'wSelectedRecord'),)))
    IMFASFStreamSelector.GetBandwidthStepCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(13, 'GetBandwidthStepCount', ((1, 'pcStepCount'),)))
    IMFASFStreamSelector.GetBandwidthStep = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32),POINTER(UInt16),POINTER(win32more.Media.MediaFoundation.ASF_SELECTION_STATUS), use_last_error=False)(14, 'GetBandwidthStep', ((1, 'dwStepNum'),(1, 'pdwBitrate'),(1, 'rgwStreamNumbers'),(1, 'rgSelections'),)))
    IMFASFStreamSelector.BitrateToStepNumber = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32), use_last_error=False)(15, 'BitrateToStepNumber', ((1, 'dwBitrate'),(1, 'pdwStepNum'),)))
    IMFASFStreamSelector.SetStreamSelectorFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(16, 'SetStreamSelectorFlags', ((1, 'dwStreamSelectorFlags'),)))
    win32more.System.Com.IUnknown
    return IMFASFStreamSelector
MFSINK_WMDRMACTION = Int32
MFSINK_WMDRMACTION_UNDEFINED = 0
MFSINK_WMDRMACTION_ENCODE = 1
MFSINK_WMDRMACTION_TRANSCODE = 2
MFSINK_WMDRMACTION_TRANSCRYPT = 3
MFSINK_WMDRMACTION_LAST = 3
def _define_IMFDRMNetHelper_head():
    class IMFDRMNetHelper(win32more.System.Com.IUnknown_head):
        Guid = Guid('3d1ff0ea-679a-4190-8d46-7fa69e8c7e15')
    return IMFDRMNetHelper
def _define_IMFDRMNetHelper():
    IMFDRMNetHelper = win32more.Media.MediaFoundation.IMFDRMNetHelper_head
    IMFDRMNetHelper.ProcessLicenseRequest = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Byte),UInt32,POINTER(c_char_p_no),POINTER(UInt32),POINTER(win32more.Foundation.BSTR), use_last_error=False)(3, 'ProcessLicenseRequest', ((1, 'pLicenseRequest'),(1, 'cbLicenseRequest'),(1, 'ppLicenseResponse'),(1, 'pcbLicenseResponse'),(1, 'pbstrKID'),)))
    IMFDRMNetHelper.GetChainedLicenseResponse = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(c_char_p_no),POINTER(UInt32), use_last_error=False)(4, 'GetChainedLicenseResponse', ((1, 'ppLicenseResponse'),(1, 'pcbLicenseResponse'),)))
    win32more.System.Com.IUnknown
    return IMFDRMNetHelper
def _define_MFVideoNormalizedRect_head():
    class MFVideoNormalizedRect(Structure):
        pass
    return MFVideoNormalizedRect
def _define_MFVideoNormalizedRect():
    MFVideoNormalizedRect = win32more.Media.MediaFoundation.MFVideoNormalizedRect_head
    MFVideoNormalizedRect._fields_ = [
        ("left", Single),
        ("top", Single),
        ("right", Single),
        ("bottom", Single),
    ]
    return MFVideoNormalizedRect
MF_CAPTURE_ENGINE_DEVICE_TYPE = Int32
MF_CAPTURE_ENGINE_DEVICE_TYPE_AUDIO = 0
MF_CAPTURE_ENGINE_DEVICE_TYPE_VIDEO = 1
MF_CAPTURE_ENGINE_SINK_TYPE = Int32
MF_CAPTURE_ENGINE_SINK_TYPE_RECORD = 0
MF_CAPTURE_ENGINE_SINK_TYPE_PREVIEW = 1
MF_CAPTURE_ENGINE_SINK_TYPE_PHOTO = 2
MF_CAPTURE_ENGINE_SOURCE = UInt32
MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_PREVIEW = 4294967290
MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_RECORD = 4294967289
MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_PHOTO = 4294967288
MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_AUDIO = 4294967287
MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_METADATA = 4294967286
MF_CAPTURE_ENGINE_MEDIASOURCE = 4294967295
MF_CAPTURE_ENGINE_STREAM_CATEGORY = Int32
MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_PREVIEW = 0
MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_CAPTURE = 1
MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_INDEPENDENT = 2
MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_DEPENDENT = 3
MF_CAPTURE_ENGINE_STREAM_CATEGORY_AUDIO = 4
MF_CAPTURE_ENGINE_STREAM_CATEGORY_UNSUPPORTED = 5
MF_CAPTURE_ENGINE_STREAM_CATEGORY_METADATA = 6
MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE = Int32
MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_OTHER = 0
MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_COMMUNICATIONS = 1
MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_MEDIA = 2
MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_GAMECHAT = 3
MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_SPEECH = 4
MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_FARFIELDSPEECH = 5
MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_UNIFORMSPEECH = 6
MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_VOICETYPING = 7
MF_CAPTURE_ENGINE_AUDIO_PROCESSING_MODE = Int32
MF_CAPTURE_ENGINE_AUDIO_PROCESSING_DEFAULT = 0
MF_CAPTURE_ENGINE_AUDIO_PROCESSING_RAW = 1
def _define_IMFCaptureEngineOnEventCallback_head():
    class IMFCaptureEngineOnEventCallback(win32more.System.Com.IUnknown_head):
        Guid = Guid('aeda51c0-9025-4983-9012-de597b88b089')
    return IMFCaptureEngineOnEventCallback
def _define_IMFCaptureEngineOnEventCallback():
    IMFCaptureEngineOnEventCallback = win32more.Media.MediaFoundation.IMFCaptureEngineOnEventCallback_head
    IMFCaptureEngineOnEventCallback.OnEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaEvent_head, use_last_error=False)(3, 'OnEvent', ((1, 'pEvent'),)))
    win32more.System.Com.IUnknown
    return IMFCaptureEngineOnEventCallback
def _define_IMFCaptureEngineOnSampleCallback_head():
    class IMFCaptureEngineOnSampleCallback(win32more.System.Com.IUnknown_head):
        Guid = Guid('52150b82-ab39-4467-980f-e48bf0822ecd')
    return IMFCaptureEngineOnSampleCallback
def _define_IMFCaptureEngineOnSampleCallback():
    IMFCaptureEngineOnSampleCallback = win32more.Media.MediaFoundation.IMFCaptureEngineOnSampleCallback_head
    IMFCaptureEngineOnSampleCallback.OnSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSample_head, use_last_error=False)(3, 'OnSample', ((1, 'pSample'),)))
    win32more.System.Com.IUnknown
    return IMFCaptureEngineOnSampleCallback
def _define_IMFCaptureSink_head():
    class IMFCaptureSink(win32more.System.Com.IUnknown_head):
        Guid = Guid('72d6135b-35e9-412c-b926-fd5265f2a885')
    return IMFCaptureSink
def _define_IMFCaptureSink():
    IMFCaptureSink = win32more.Media.MediaFoundation.IMFCaptureSink_head
    IMFCaptureSink.GetOutputMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head), use_last_error=False)(3, 'GetOutputMediaType', ((1, 'dwSinkStreamIndex'),(1, 'ppMediaType'),)))
    IMFCaptureSink.GetService = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),POINTER(Guid),POINTER(win32more.System.Com.IUnknown_head), use_last_error=False)(4, 'GetService', ((1, 'dwSinkStreamIndex'),(1, 'rguidService'),(1, 'riid'),(1, 'ppUnknown'),)))
    IMFCaptureSink.AddStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(UInt32), use_last_error=False)(5, 'AddStream', ((1, 'dwSourceStreamIndex'),(1, 'pMediaType'),(1, 'pAttributes'),(1, 'pdwSinkStreamIndex'),)))
    IMFCaptureSink.Prepare = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(6, 'Prepare', ()))
    IMFCaptureSink.RemoveAllStreams = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(7, 'RemoveAllStreams', ()))
    win32more.System.Com.IUnknown
    return IMFCaptureSink
def _define_IMFCaptureRecordSink_head():
    class IMFCaptureRecordSink(win32more.Media.MediaFoundation.IMFCaptureSink_head):
        Guid = Guid('3323b55a-f92a-4fe2-8edc-e9bfc0634d77')
    return IMFCaptureRecordSink
def _define_IMFCaptureRecordSink():
    IMFCaptureRecordSink = win32more.Media.MediaFoundation.IMFCaptureRecordSink_head
    IMFCaptureRecordSink.SetOutputByteStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,POINTER(Guid), use_last_error=False)(8, 'SetOutputByteStream', ((1, 'pByteStream'),(1, 'guidContainerType'),)))
    IMFCaptureRecordSink.SetOutputFileName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR, use_last_error=False)(9, 'SetOutputFileName', ((1, 'fileName'),)))
    IMFCaptureRecordSink.SetSampleCallback = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFCaptureEngineOnSampleCallback_head, use_last_error=False)(10, 'SetSampleCallback', ((1, 'dwStreamSinkIndex'),(1, 'pCallback'),)))
    IMFCaptureRecordSink.SetCustomSink = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaSink_head, use_last_error=False)(11, 'SetCustomSink', ((1, 'pMediaSink'),)))
    IMFCaptureRecordSink.GetRotation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32), use_last_error=False)(12, 'GetRotation', ((1, 'dwStreamIndex'),(1, 'pdwRotationValue'),)))
    IMFCaptureRecordSink.SetRotation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32, use_last_error=False)(13, 'SetRotation', ((1, 'dwStreamIndex'),(1, 'dwRotationValue'),)))
    win32more.Media.MediaFoundation.IMFCaptureSink
    return IMFCaptureRecordSink
def _define_IMFCapturePreviewSink_head():
    class IMFCapturePreviewSink(win32more.Media.MediaFoundation.IMFCaptureSink_head):
        Guid = Guid('77346cfd-5b49-4d73-ace0-5b52a859f2e0')
    return IMFCapturePreviewSink
def _define_IMFCapturePreviewSink():
    IMFCapturePreviewSink = win32more.Media.MediaFoundation.IMFCapturePreviewSink_head
    IMFCapturePreviewSink.SetRenderHandle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE, use_last_error=False)(8, 'SetRenderHandle', ((1, 'handle'),)))
    IMFCapturePreviewSink.SetRenderSurface = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head, use_last_error=False)(9, 'SetRenderSurface', ((1, 'pSurface'),)))
    IMFCapturePreviewSink.UpdateVideo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVideoNormalizedRect_head),POINTER(win32more.Foundation.RECT_head),POINTER(UInt32), use_last_error=False)(10, 'UpdateVideo', ((1, 'pSrc'),(1, 'pDst'),(1, 'pBorderClr'),)))
    IMFCapturePreviewSink.SetSampleCallback = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFCaptureEngineOnSampleCallback_head, use_last_error=False)(11, 'SetSampleCallback', ((1, 'dwStreamSinkIndex'),(1, 'pCallback'),)))
    IMFCapturePreviewSink.GetMirrorState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(12, 'GetMirrorState', ((1, 'pfMirrorState'),)))
    IMFCapturePreviewSink.SetMirrorState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL, use_last_error=False)(13, 'SetMirrorState', ((1, 'fMirrorState'),)))
    IMFCapturePreviewSink.GetRotation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32), use_last_error=False)(14, 'GetRotation', ((1, 'dwStreamIndex'),(1, 'pdwRotationValue'),)))
    IMFCapturePreviewSink.SetRotation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32, use_last_error=False)(15, 'SetRotation', ((1, 'dwStreamIndex'),(1, 'dwRotationValue'),)))
    IMFCapturePreviewSink.SetCustomSink = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaSink_head, use_last_error=False)(16, 'SetCustomSink', ((1, 'pMediaSink'),)))
    win32more.Media.MediaFoundation.IMFCaptureSink
    return IMFCapturePreviewSink
def _define_IMFCapturePhotoSink_head():
    class IMFCapturePhotoSink(win32more.Media.MediaFoundation.IMFCaptureSink_head):
        Guid = Guid('d2d43cc8-48bb-4aa7-95db-10c06977e777')
    return IMFCapturePhotoSink
def _define_IMFCapturePhotoSink():
    IMFCapturePhotoSink = win32more.Media.MediaFoundation.IMFCapturePhotoSink_head
    IMFCapturePhotoSink.SetOutputFileName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR, use_last_error=False)(8, 'SetOutputFileName', ((1, 'fileName'),)))
    IMFCapturePhotoSink.SetSampleCallback = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFCaptureEngineOnSampleCallback_head, use_last_error=False)(9, 'SetSampleCallback', ((1, 'pCallback'),)))
    IMFCapturePhotoSink.SetOutputByteStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head, use_last_error=False)(10, 'SetOutputByteStream', ((1, 'pByteStream'),)))
    win32more.Media.MediaFoundation.IMFCaptureSink
    return IMFCapturePhotoSink
def _define_IMFCaptureSource_head():
    class IMFCaptureSource(win32more.System.Com.IUnknown_head):
        Guid = Guid('439a42a8-0d2c-4505-be83-f79b2a05d5c4')
    return IMFCaptureSource
def _define_IMFCaptureSource():
    IMFCaptureSource = win32more.Media.MediaFoundation.IMFCaptureSource_head
    IMFCaptureSource.GetCaptureDeviceSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_CAPTURE_ENGINE_DEVICE_TYPE,POINTER(win32more.Media.MediaFoundation.IMFMediaSource_head), use_last_error=False)(3, 'GetCaptureDeviceSource', ((1, 'mfCaptureEngineDeviceType'),(1, 'ppMediaSource'),)))
    IMFCaptureSource.GetCaptureDeviceActivate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_CAPTURE_ENGINE_DEVICE_TYPE,POINTER(win32more.Media.MediaFoundation.IMFActivate_head), use_last_error=False)(4, 'GetCaptureDeviceActivate', ((1, 'mfCaptureEngineDeviceType'),(1, 'ppActivate'),)))
    IMFCaptureSource.GetService = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Guid),POINTER(win32more.System.Com.IUnknown_head), use_last_error=False)(5, 'GetService', ((1, 'rguidService'),(1, 'riid'),(1, 'ppUnknown'),)))
    IMFCaptureSource.AddEffect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.System.Com.IUnknown_head, use_last_error=False)(6, 'AddEffect', ((1, 'dwSourceStreamIndex'),(1, 'pUnknown'),)))
    IMFCaptureSource.RemoveEffect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.System.Com.IUnknown_head, use_last_error=False)(7, 'RemoveEffect', ((1, 'dwSourceStreamIndex'),(1, 'pUnknown'),)))
    IMFCaptureSource.RemoveAllEffects = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(8, 'RemoveAllEffects', ((1, 'dwSourceStreamIndex'),)))
    IMFCaptureSource.GetAvailableDeviceMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head), use_last_error=False)(9, 'GetAvailableDeviceMediaType', ((1, 'dwSourceStreamIndex'),(1, 'dwMediaTypeIndex'),(1, 'ppMediaType'),)))
    IMFCaptureSource.SetCurrentDeviceMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head, use_last_error=False)(10, 'SetCurrentDeviceMediaType', ((1, 'dwSourceStreamIndex'),(1, 'pMediaType'),)))
    IMFCaptureSource.GetCurrentDeviceMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head), use_last_error=False)(11, 'GetCurrentDeviceMediaType', ((1, 'dwSourceStreamIndex'),(1, 'ppMediaType'),)))
    IMFCaptureSource.GetDeviceStreamCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(12, 'GetDeviceStreamCount', ((1, 'pdwStreamCount'),)))
    IMFCaptureSource.GetDeviceStreamCategory = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.MF_CAPTURE_ENGINE_STREAM_CATEGORY), use_last_error=False)(13, 'GetDeviceStreamCategory', ((1, 'dwSourceStreamIndex'),(1, 'pStreamCategory'),)))
    IMFCaptureSource.GetMirrorState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Foundation.BOOL), use_last_error=False)(14, 'GetMirrorState', ((1, 'dwStreamIndex'),(1, 'pfMirrorState'),)))
    IMFCaptureSource.SetMirrorState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.BOOL, use_last_error=False)(15, 'SetMirrorState', ((1, 'dwStreamIndex'),(1, 'fMirrorState'),)))
    IMFCaptureSource.GetStreamIndexFromFriendlyName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32), use_last_error=False)(16, 'GetStreamIndexFromFriendlyName', ((1, 'uifriendlyName'),(1, 'pdwActualStreamIndex'),)))
    win32more.System.Com.IUnknown
    return IMFCaptureSource
def _define_IMFCaptureEngine_head():
    class IMFCaptureEngine(win32more.System.Com.IUnknown_head):
        Guid = Guid('a6bba433-176b-48b2-b375-53aa03473207')
    return IMFCaptureEngine
def _define_IMFCaptureEngine():
    IMFCaptureEngine = win32more.Media.MediaFoundation.IMFCaptureEngine_head
    IMFCaptureEngine.Initialize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFCaptureEngineOnEventCallback_head,win32more.Media.MediaFoundation.IMFAttributes_head,win32more.System.Com.IUnknown_head,win32more.System.Com.IUnknown_head, use_last_error=False)(3, 'Initialize', ((1, 'pEventCallback'),(1, 'pAttributes'),(1, 'pAudioSource'),(1, 'pVideoSource'),)))
    IMFCaptureEngine.StartPreview = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(4, 'StartPreview', ()))
    IMFCaptureEngine.StopPreview = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(5, 'StopPreview', ()))
    IMFCaptureEngine.StartRecord = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(6, 'StartRecord', ()))
    IMFCaptureEngine.StopRecord = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL,win32more.Foundation.BOOL, use_last_error=False)(7, 'StopRecord', ((1, 'bFinalize'),(1, 'bFlushUnprocessedSamples'),)))
    IMFCaptureEngine.TakePhoto = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(8, 'TakePhoto', ()))
    IMFCaptureEngine.GetSink = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_CAPTURE_ENGINE_SINK_TYPE,POINTER(win32more.Media.MediaFoundation.IMFCaptureSink_head), use_last_error=False)(9, 'GetSink', ((1, 'mfCaptureEngineSinkType'),(1, 'ppSink'),)))
    IMFCaptureEngine.GetSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFCaptureSource_head), use_last_error=False)(10, 'GetSource', ((1, 'ppSource'),)))
    win32more.System.Com.IUnknown
    return IMFCaptureEngine
def _define_IMFCaptureEngineClassFactory_head():
    class IMFCaptureEngineClassFactory(win32more.System.Com.IUnknown_head):
        Guid = Guid('8f02d140-56fc-4302-a705-3a97c78be779')
    return IMFCaptureEngineClassFactory
def _define_IMFCaptureEngineClassFactory():
    IMFCaptureEngineClassFactory = win32more.Media.MediaFoundation.IMFCaptureEngineClassFactory_head
    IMFCaptureEngineClassFactory.CreateInstance = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Guid),POINTER(c_void_p), use_last_error=False)(3, 'CreateInstance', ((1, 'clsid'),(1, 'riid'),(1, 'ppvObject'),)))
    win32more.System.Com.IUnknown
    return IMFCaptureEngineClassFactory
def _define_IMFCaptureEngineOnSampleCallback2_head():
    class IMFCaptureEngineOnSampleCallback2(win32more.Media.MediaFoundation.IMFCaptureEngineOnSampleCallback_head):
        Guid = Guid('e37ceed7-340f-4514-9f4d-9c2ae026100b')
    return IMFCaptureEngineOnSampleCallback2
def _define_IMFCaptureEngineOnSampleCallback2():
    IMFCaptureEngineOnSampleCallback2 = win32more.Media.MediaFoundation.IMFCaptureEngineOnSampleCallback2_head
    IMFCaptureEngineOnSampleCallback2.OnSynchronizedEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaEvent_head, use_last_error=False)(4, 'OnSynchronizedEvent', ((1, 'pEvent'),)))
    win32more.Media.MediaFoundation.IMFCaptureEngineOnSampleCallback
    return IMFCaptureEngineOnSampleCallback2
def _define_IMFCaptureSink2_head():
    class IMFCaptureSink2(win32more.Media.MediaFoundation.IMFCaptureSink_head):
        Guid = Guid('f9e4219e-6197-4b5e-b888-bee310ab2c59')
    return IMFCaptureSink2
def _define_IMFCaptureSink2():
    IMFCaptureSink2 = win32more.Media.MediaFoundation.IMFCaptureSink2_head
    IMFCaptureSink2.SetOutputMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.Media.MediaFoundation.IMFAttributes_head, use_last_error=False)(8, 'SetOutputMediaType', ((1, 'dwStreamIndex'),(1, 'pMediaType'),(1, 'pEncodingAttributes'),)))
    win32more.Media.MediaFoundation.IMFCaptureSink
    return IMFCaptureSink2
def _define_IMFD3D12SynchronizationObjectCommands_head():
    class IMFD3D12SynchronizationObjectCommands(win32more.System.Com.IUnknown_head):
        Guid = Guid('09d0f835-92ff-4e53-8efa-40faa551f233')
    return IMFD3D12SynchronizationObjectCommands
def _define_IMFD3D12SynchronizationObjectCommands():
    IMFD3D12SynchronizationObjectCommands = win32more.Media.MediaFoundation.IMFD3D12SynchronizationObjectCommands_head
    IMFD3D12SynchronizationObjectCommands.EnqueueResourceReady = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D12.ID3D12CommandQueue_head, use_last_error=False)(3, 'EnqueueResourceReady', ((1, 'pProducerCommandQueue'),)))
    IMFD3D12SynchronizationObjectCommands.EnqueueResourceReadyWait = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D12.ID3D12CommandQueue_head, use_last_error=False)(4, 'EnqueueResourceReadyWait', ((1, 'pConsumerCommandQueue'),)))
    IMFD3D12SynchronizationObjectCommands.SignalEventOnResourceReady = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE, use_last_error=False)(5, 'SignalEventOnResourceReady', ((1, 'hEvent'),)))
    IMFD3D12SynchronizationObjectCommands.EnqueueResourceRelease = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D12.ID3D12CommandQueue_head, use_last_error=False)(6, 'EnqueueResourceRelease', ((1, 'pConsumerCommandQueue'),)))
    win32more.System.Com.IUnknown
    return IMFD3D12SynchronizationObjectCommands
def _define_IMFD3D12SynchronizationObject_head():
    class IMFD3D12SynchronizationObject(win32more.System.Com.IUnknown_head):
        Guid = Guid('802302b0-82de-45e1-b421-f19ee5bdaf23')
    return IMFD3D12SynchronizationObject
def _define_IMFD3D12SynchronizationObject():
    IMFD3D12SynchronizationObject = win32more.Media.MediaFoundation.IMFD3D12SynchronizationObject_head
    IMFD3D12SynchronizationObject.SignalEventOnFinalResourceRelease = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE, use_last_error=False)(3, 'SignalEventOnFinalResourceRelease', ((1, 'hEvent'),)))
    IMFD3D12SynchronizationObject.Reset = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(4, 'Reset', ()))
    win32more.System.Com.IUnknown
    return IMFD3D12SynchronizationObject
MF_MT_D3D_RESOURCE_VERSION_ENUM = Int32
MF_D3D11_RESOURCE = 0
MF_D3D12_RESOURCE = 1
def _define_MFPERIODICCALLBACK():
    return CFUNCTYPE(Void,win32more.System.Com.IUnknown_head, use_last_error=False)
MFASYNC_WORKQUEUE_TYPE = Int32
MF_STANDARD_WORKQUEUE = 0
MF_WINDOW_WORKQUEUE = 1
MF_MULTITHREADED_WORKQUEUE = 2
def _define_MFASYNCRESULT_head():
    class MFASYNCRESULT(win32more.Media.MediaFoundation.IMFAsyncResult_head):
        Guid = Guid(None)
    return MFASYNCRESULT
def _define_MFASYNCRESULT():
    MFASYNCRESULT = win32more.Media.MediaFoundation.MFASYNCRESULT_head
    win32more.Media.MediaFoundation.IMFAsyncResult
    return MFASYNCRESULT
MF_TOPOSTATUS = Int32
MF_TOPOSTATUS_INVALID = 0
MF_TOPOSTATUS_READY = 100
MF_TOPOSTATUS_STARTED_SOURCE = 200
MF_TOPOSTATUS_DYNAMIC_CHANGED = 210
MF_TOPOSTATUS_SINK_SWITCHED = 300
MF_TOPOSTATUS_ENDED = 400
MFSampleEncryptionProtectionScheme = Int32
MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_NONE = 0
MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_AES_CTR = 1
MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_AES_CBC = 2
def _define_MOVE_RECT_head():
    class MOVE_RECT(Structure):
        pass
    return MOVE_RECT
def _define_MOVE_RECT():
    MOVE_RECT = win32more.Media.MediaFoundation.MOVE_RECT_head
    MOVE_RECT._fields_ = [
        ("SourcePoint", win32more.Foundation.POINT),
        ("DestRect", win32more.Foundation.RECT),
    ]
    return MOVE_RECT
def _define_DIRTYRECT_INFO_head():
    class DIRTYRECT_INFO(Structure):
        pass
    return DIRTYRECT_INFO
def _define_DIRTYRECT_INFO():
    DIRTYRECT_INFO = win32more.Media.MediaFoundation.DIRTYRECT_INFO_head
    DIRTYRECT_INFO._fields_ = [
        ("FrameNumber", UInt32),
        ("NumDirtyRects", UInt32),
        ("DirtyRects", win32more.Foundation.RECT * 0),
    ]
    return DIRTYRECT_INFO
def _define_MOVEREGION_INFO_head():
    class MOVEREGION_INFO(Structure):
        pass
    return MOVEREGION_INFO
def _define_MOVEREGION_INFO():
    MOVEREGION_INFO = win32more.Media.MediaFoundation.MOVEREGION_INFO_head
    MOVEREGION_INFO._fields_ = [
        ("FrameNumber", UInt32),
        ("NumMoveRegions", UInt32),
        ("MoveRegions", win32more.Media.MediaFoundation.MOVE_RECT * 0),
    ]
    return MOVEREGION_INFO
def _define_ROI_AREA_head():
    class ROI_AREA(Structure):
        pass
    return ROI_AREA
def _define_ROI_AREA():
    ROI_AREA = win32more.Media.MediaFoundation.ROI_AREA_head
    ROI_AREA._fields_ = [
        ("rect", win32more.Foundation.RECT),
        ("QPDelta", Int32),
    ]
    return ROI_AREA
def _define_MACROBLOCK_DATA_head():
    class MACROBLOCK_DATA(Structure):
        pass
    return MACROBLOCK_DATA
def _define_MACROBLOCK_DATA():
    MACROBLOCK_DATA = win32more.Media.MediaFoundation.MACROBLOCK_DATA_head
    MACROBLOCK_DATA._fields_ = [
        ("flags", UInt32),
        ("motionVectorX", Int16),
        ("motionVectorY", Int16),
        ("QPDelta", Int32),
    ]
    return MACROBLOCK_DATA
def _define_DigitalWindowSetting_head():
    class DigitalWindowSetting(Structure):
        pass
    return DigitalWindowSetting
def _define_DigitalWindowSetting():
    DigitalWindowSetting = win32more.Media.MediaFoundation.DigitalWindowSetting_head
    DigitalWindowSetting._fields_ = [
        ("OriginX", Double),
        ("OriginY", Double),
        ("WindowSize", Double),
    ]
    return DigitalWindowSetting
_MFT_ENUM_FLAG = Int32
MFT_ENUM_FLAG_SYNCMFT = 1
MFT_ENUM_FLAG_ASYNCMFT = 2
MFT_ENUM_FLAG_HARDWARE = 4
MFT_ENUM_FLAG_FIELDOFUSE = 8
MFT_ENUM_FLAG_LOCALMFT = 16
MFT_ENUM_FLAG_TRANSCODE_ONLY = 32
MFT_ENUM_FLAG_SORTANDFILTER = 64
MFT_ENUM_FLAG_SORTANDFILTER_APPROVED_ONLY = 192
MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY = 320
MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY_EDGEMODE = 576
MFT_ENUM_FLAG_UNTRUSTED_STOREMFT = 1024
MFT_ENUM_FLAG_ALL = 63
MFFrameSourceTypes = Int32
MFFrameSourceTypes_Color = 1
MFFrameSourceTypes_Infrared = 2
MFFrameSourceTypes_Depth = 4
MFFrameSourceTypes_Image = 8
MFFrameSourceTypes_Custom = 128
MFVideo3DFormat = Int32
MFVideo3DSampleFormat_BaseView = 0
MFVideo3DSampleFormat_MultiView = 1
MFVideo3DSampleFormat_Packed_LeftRight = 2
MFVideo3DSampleFormat_Packed_TopBottom = 3
MFVideo3DSampleFormat = Int32
MFSampleExtension_3DVideo_MultiView = 1
MFSampleExtension_3DVideo_Packed = 0
MFVideoRotationFormat = Int32
MFVideoRotationFormat_0 = 0
MFVideoRotationFormat_90 = 90
MFVideoRotationFormat_180 = 180
MFVideoRotationFormat_270 = 270
MFDepthMeasurement = Int32
MFDepthMeasurement_DistanceToFocalPlane = 0
MFDepthMeasurement_DistanceToOpticalCenter = 1
MF_CUSTOM_DECODE_UNIT_TYPE = Int32
MF_DECODE_UNIT_NAL = 0
MF_DECODE_UNIT_SEI = 1
def _define_MFFOLDDOWN_MATRIX_head():
    class MFFOLDDOWN_MATRIX(Structure):
        pass
    return MFFOLDDOWN_MATRIX
def _define_MFFOLDDOWN_MATRIX():
    MFFOLDDOWN_MATRIX = win32more.Media.MediaFoundation.MFFOLDDOWN_MATRIX_head
    MFFOLDDOWN_MATRIX._fields_ = [
        ("cbSize", UInt32),
        ("cSrcChannels", UInt32),
        ("cDstChannels", UInt32),
        ("dwChannelMask", UInt32),
        ("Coeff", Int32 * 64),
    ]
    return MFFOLDDOWN_MATRIX
MFVideoDRMFlags = Int32
MFVideoDRMFlag_None = 0
MFVideoDRMFlag_AnalogProtected = 1
MFVideoDRMFlag_DigitallyProtected = 2
MFVideoPadFlags = Int32
MFVideoPadFlag_PAD_TO_None = 0
MFVideoPadFlag_PAD_TO_4x3 = 1
MFVideoPadFlag_PAD_TO_16x9 = 2
MFVideoSrcContentHintFlags = Int32
MFVideoSrcContentHintFlag_None = 0
MFVideoSrcContentHintFlag_16x9 = 1
MFVideoSrcContentHintFlag_235_1 = 2
def _define_MT_CUSTOM_VIDEO_PRIMARIES_head():
    class MT_CUSTOM_VIDEO_PRIMARIES(Structure):
        pass
    return MT_CUSTOM_VIDEO_PRIMARIES
def _define_MT_CUSTOM_VIDEO_PRIMARIES():
    MT_CUSTOM_VIDEO_PRIMARIES = win32more.Media.MediaFoundation.MT_CUSTOM_VIDEO_PRIMARIES_head
    MT_CUSTOM_VIDEO_PRIMARIES._fields_ = [
        ("fRx", Single),
        ("fRy", Single),
        ("fGx", Single),
        ("fGy", Single),
        ("fBx", Single),
        ("fBy", Single),
        ("fWx", Single),
        ("fWy", Single),
    ]
    return MT_CUSTOM_VIDEO_PRIMARIES
def _define_MT_ARBITRARY_HEADER_head():
    class MT_ARBITRARY_HEADER(Structure):
        pass
    return MT_ARBITRARY_HEADER
def _define_MT_ARBITRARY_HEADER():
    MT_ARBITRARY_HEADER = win32more.Media.MediaFoundation.MT_ARBITRARY_HEADER_head
    MT_ARBITRARY_HEADER._fields_ = [
        ("majortype", Guid),
        ("subtype", Guid),
        ("bFixedSizeSamples", win32more.Foundation.BOOL),
        ("bTemporalCompression", win32more.Foundation.BOOL),
        ("lSampleSize", UInt32),
        ("formattype", Guid),
    ]
    return MT_ARBITRARY_HEADER
def _define_MF_FLOAT2_head():
    class MF_FLOAT2(Structure):
        pass
    return MF_FLOAT2
def _define_MF_FLOAT2():
    MF_FLOAT2 = win32more.Media.MediaFoundation.MF_FLOAT2_head
    MF_FLOAT2._fields_ = [
        ("x", Single),
        ("y", Single),
    ]
    return MF_FLOAT2
def _define_MF_FLOAT3_head():
    class MF_FLOAT3(Structure):
        pass
    return MF_FLOAT3
def _define_MF_FLOAT3():
    MF_FLOAT3 = win32more.Media.MediaFoundation.MF_FLOAT3_head
    MF_FLOAT3._fields_ = [
        ("x", Single),
        ("y", Single),
        ("z", Single),
    ]
    return MF_FLOAT3
def _define_MF_QUATERNION_head():
    class MF_QUATERNION(Structure):
        pass
    return MF_QUATERNION
def _define_MF_QUATERNION():
    MF_QUATERNION = win32more.Media.MediaFoundation.MF_QUATERNION_head
    MF_QUATERNION._fields_ = [
        ("x", Single),
        ("y", Single),
        ("z", Single),
        ("w", Single),
    ]
    return MF_QUATERNION
def _define_MFCameraExtrinsic_CalibratedTransform_head():
    class MFCameraExtrinsic_CalibratedTransform(Structure):
        pass
    return MFCameraExtrinsic_CalibratedTransform
def _define_MFCameraExtrinsic_CalibratedTransform():
    MFCameraExtrinsic_CalibratedTransform = win32more.Media.MediaFoundation.MFCameraExtrinsic_CalibratedTransform_head
    MFCameraExtrinsic_CalibratedTransform._fields_ = [
        ("CalibrationId", Guid),
        ("Position", win32more.Media.MediaFoundation.MF_FLOAT3),
        ("Orientation", win32more.Media.MediaFoundation.MF_QUATERNION),
    ]
    return MFCameraExtrinsic_CalibratedTransform
def _define_MFCameraExtrinsics_head():
    class MFCameraExtrinsics(Structure):
        pass
    return MFCameraExtrinsics
def _define_MFCameraExtrinsics():
    MFCameraExtrinsics = win32more.Media.MediaFoundation.MFCameraExtrinsics_head
    MFCameraExtrinsics._fields_ = [
        ("TransformCount", UInt32),
        ("CalibratedTransforms", win32more.Media.MediaFoundation.MFCameraExtrinsic_CalibratedTransform * 0),
    ]
    return MFCameraExtrinsics
def _define_MFCameraIntrinsic_PinholeCameraModel_head():
    class MFCameraIntrinsic_PinholeCameraModel(Structure):
        pass
    return MFCameraIntrinsic_PinholeCameraModel
def _define_MFCameraIntrinsic_PinholeCameraModel():
    MFCameraIntrinsic_PinholeCameraModel = win32more.Media.MediaFoundation.MFCameraIntrinsic_PinholeCameraModel_head
    MFCameraIntrinsic_PinholeCameraModel._fields_ = [
        ("FocalLength", win32more.Media.MediaFoundation.MF_FLOAT2),
        ("PrincipalPoint", win32more.Media.MediaFoundation.MF_FLOAT2),
    ]
    return MFCameraIntrinsic_PinholeCameraModel
def _define_MFCameraIntrinsic_DistortionModel_head():
    class MFCameraIntrinsic_DistortionModel(Structure):
        pass
    return MFCameraIntrinsic_DistortionModel
def _define_MFCameraIntrinsic_DistortionModel():
    MFCameraIntrinsic_DistortionModel = win32more.Media.MediaFoundation.MFCameraIntrinsic_DistortionModel_head
    MFCameraIntrinsic_DistortionModel._fields_ = [
        ("Radial_k1", Single),
        ("Radial_k2", Single),
        ("Radial_k3", Single),
        ("Tangential_p1", Single),
        ("Tangential_p2", Single),
    ]
    return MFCameraIntrinsic_DistortionModel
def _define_MFPinholeCameraIntrinsic_IntrinsicModel_head():
    class MFPinholeCameraIntrinsic_IntrinsicModel(Structure):
        pass
    return MFPinholeCameraIntrinsic_IntrinsicModel
def _define_MFPinholeCameraIntrinsic_IntrinsicModel():
    MFPinholeCameraIntrinsic_IntrinsicModel = win32more.Media.MediaFoundation.MFPinholeCameraIntrinsic_IntrinsicModel_head
    MFPinholeCameraIntrinsic_IntrinsicModel._fields_ = [
        ("Width", UInt32),
        ("Height", UInt32),
        ("CameraModel", win32more.Media.MediaFoundation.MFCameraIntrinsic_PinholeCameraModel),
        ("DistortionModel", win32more.Media.MediaFoundation.MFCameraIntrinsic_DistortionModel),
    ]
    return MFPinholeCameraIntrinsic_IntrinsicModel
def _define_MFPinholeCameraIntrinsics_head():
    class MFPinholeCameraIntrinsics(Structure):
        pass
    return MFPinholeCameraIntrinsics
def _define_MFPinholeCameraIntrinsics():
    MFPinholeCameraIntrinsics = win32more.Media.MediaFoundation.MFPinholeCameraIntrinsics_head
    MFPinholeCameraIntrinsics._fields_ = [
        ("IntrinsicModelCount", UInt32),
        ("IntrinsicModels", win32more.Media.MediaFoundation.MFPinholeCameraIntrinsic_IntrinsicModel * 0),
    ]
    return MFPinholeCameraIntrinsics
MFWaveFormatExConvertFlags = Int32
MFWaveFormatExConvertFlag_Normal = 0
MFWaveFormatExConvertFlag_ForceExtensible = 1
EAllocationType = Int32
EAllocationType_eAllocationTypeDynamic = 0
EAllocationType_eAllocationTypeRT = 1
EAllocationType_eAllocationTypePageable = 2
EAllocationType_eAllocationTypeIgnore = 3
MF_MEDIA_ENGINE_ERR = Int32
MF_MEDIA_ENGINE_ERR_NOERROR = 0
MF_MEDIA_ENGINE_ERR_ABORTED = 1
MF_MEDIA_ENGINE_ERR_NETWORK = 2
MF_MEDIA_ENGINE_ERR_DECODE = 3
MF_MEDIA_ENGINE_ERR_SRC_NOT_SUPPORTED = 4
MF_MEDIA_ENGINE_ERR_ENCRYPTED = 5
def _define_IMFMediaError_head():
    class IMFMediaError(win32more.System.Com.IUnknown_head):
        Guid = Guid('fc0e10d2-ab2a-4501-a951-06bb1075184c')
    return IMFMediaError
def _define_IMFMediaError():
    IMFMediaError = win32more.Media.MediaFoundation.IMFMediaError_head
    IMFMediaError.GetErrorCode = COMMETHOD(WINFUNCTYPE(UInt16, use_last_error=False)(3, 'GetErrorCode', ()))
    IMFMediaError.GetExtendedErrorCode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(4, 'GetExtendedErrorCode', ()))
    IMFMediaError.SetErrorCode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_MEDIA_ENGINE_ERR, use_last_error=False)(5, 'SetErrorCode', ((1, 'error'),)))
    IMFMediaError.SetExtendedErrorCode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HRESULT, use_last_error=False)(6, 'SetExtendedErrorCode', ((1, 'error'),)))
    win32more.System.Com.IUnknown
    return IMFMediaError
def _define_IMFMediaTimeRange_head():
    class IMFMediaTimeRange(win32more.System.Com.IUnknown_head):
        Guid = Guid('db71a2fc-078a-414e-9df9-8c2531b0aa6c')
    return IMFMediaTimeRange
def _define_IMFMediaTimeRange():
    IMFMediaTimeRange = win32more.Media.MediaFoundation.IMFMediaTimeRange_head
    IMFMediaTimeRange.GetLength = COMMETHOD(WINFUNCTYPE(UInt32, use_last_error=False)(3, 'GetLength', ()))
    IMFMediaTimeRange.GetStart = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Double), use_last_error=False)(4, 'GetStart', ((1, 'index'),(1, 'pStart'),)))
    IMFMediaTimeRange.GetEnd = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Double), use_last_error=False)(5, 'GetEnd', ((1, 'index'),(1, 'pEnd'),)))
    IMFMediaTimeRange.ContainsTime = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL,Double, use_last_error=False)(6, 'ContainsTime', ((1, 'time'),)))
    IMFMediaTimeRange.AddRange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double,Double, use_last_error=False)(7, 'AddRange', ((1, 'startTime'),(1, 'endTime'),)))
    IMFMediaTimeRange.Clear = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(8, 'Clear', ()))
    win32more.System.Com.IUnknown
    return IMFMediaTimeRange
MF_MEDIA_ENGINE_EVENT = Int32
MF_MEDIA_ENGINE_EVENT_LOADSTART = 1
MF_MEDIA_ENGINE_EVENT_PROGRESS = 2
MF_MEDIA_ENGINE_EVENT_SUSPEND = 3
MF_MEDIA_ENGINE_EVENT_ABORT = 4
MF_MEDIA_ENGINE_EVENT_ERROR = 5
MF_MEDIA_ENGINE_EVENT_EMPTIED = 6
MF_MEDIA_ENGINE_EVENT_STALLED = 7
MF_MEDIA_ENGINE_EVENT_PLAY = 8
MF_MEDIA_ENGINE_EVENT_PAUSE = 9
MF_MEDIA_ENGINE_EVENT_LOADEDMETADATA = 10
MF_MEDIA_ENGINE_EVENT_LOADEDDATA = 11
MF_MEDIA_ENGINE_EVENT_WAITING = 12
MF_MEDIA_ENGINE_EVENT_PLAYING = 13
MF_MEDIA_ENGINE_EVENT_CANPLAY = 14
MF_MEDIA_ENGINE_EVENT_CANPLAYTHROUGH = 15
MF_MEDIA_ENGINE_EVENT_SEEKING = 16
MF_MEDIA_ENGINE_EVENT_SEEKED = 17
MF_MEDIA_ENGINE_EVENT_TIMEUPDATE = 18
MF_MEDIA_ENGINE_EVENT_ENDED = 19
MF_MEDIA_ENGINE_EVENT_RATECHANGE = 20
MF_MEDIA_ENGINE_EVENT_DURATIONCHANGE = 21
MF_MEDIA_ENGINE_EVENT_VOLUMECHANGE = 22
MF_MEDIA_ENGINE_EVENT_FORMATCHANGE = 1000
MF_MEDIA_ENGINE_EVENT_PURGEQUEUEDEVENTS = 1001
MF_MEDIA_ENGINE_EVENT_TIMELINE_MARKER = 1002
MF_MEDIA_ENGINE_EVENT_BALANCECHANGE = 1003
MF_MEDIA_ENGINE_EVENT_DOWNLOADCOMPLETE = 1004
MF_MEDIA_ENGINE_EVENT_BUFFERINGSTARTED = 1005
MF_MEDIA_ENGINE_EVENT_BUFFERINGENDED = 1006
MF_MEDIA_ENGINE_EVENT_FRAMESTEPCOMPLETED = 1007
MF_MEDIA_ENGINE_EVENT_NOTIFYSTABLESTATE = 1008
MF_MEDIA_ENGINE_EVENT_FIRSTFRAMEREADY = 1009
MF_MEDIA_ENGINE_EVENT_TRACKSCHANGE = 1010
MF_MEDIA_ENGINE_EVENT_OPMINFO = 1011
MF_MEDIA_ENGINE_EVENT_RESOURCELOST = 1012
MF_MEDIA_ENGINE_EVENT_DELAYLOADEVENT_CHANGED = 1013
MF_MEDIA_ENGINE_EVENT_STREAMRENDERINGERROR = 1014
MF_MEDIA_ENGINE_EVENT_SUPPORTEDRATES_CHANGED = 1015
MF_MEDIA_ENGINE_EVENT_AUDIOENDPOINTCHANGE = 1016
def _define_IMFMediaEngineNotify_head():
    class IMFMediaEngineNotify(win32more.System.Com.IUnknown_head):
        Guid = Guid('fee7c112-e776-42b5-9bbf-0048524e2bd5')
    return IMFMediaEngineNotify
def _define_IMFMediaEngineNotify():
    IMFMediaEngineNotify = win32more.Media.MediaFoundation.IMFMediaEngineNotify_head
    IMFMediaEngineNotify.EventNotify = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UIntPtr,UInt32, use_last_error=False)(3, 'EventNotify', ((1, 'event'),(1, 'param1'),(1, 'param2'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineNotify
def _define_IMFMediaEngineSrcElements_head():
    class IMFMediaEngineSrcElements(win32more.System.Com.IUnknown_head):
        Guid = Guid('7a5e5354-b114-4c72-b991-3131d75032ea')
    return IMFMediaEngineSrcElements
def _define_IMFMediaEngineSrcElements():
    IMFMediaEngineSrcElements = win32more.Media.MediaFoundation.IMFMediaEngineSrcElements_head
    IMFMediaEngineSrcElements.GetLength = COMMETHOD(WINFUNCTYPE(UInt32, use_last_error=False)(3, 'GetLength', ()))
    IMFMediaEngineSrcElements.GetURL = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Foundation.BSTR), use_last_error=False)(4, 'GetURL', ((1, 'index'),(1, 'pURL'),)))
    IMFMediaEngineSrcElements.GetType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Foundation.BSTR), use_last_error=False)(5, 'GetType', ((1, 'index'),(1, 'pType'),)))
    IMFMediaEngineSrcElements.GetMedia = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Foundation.BSTR), use_last_error=False)(6, 'GetMedia', ((1, 'index'),(1, 'pMedia'),)))
    IMFMediaEngineSrcElements.AddElement = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,win32more.Foundation.BSTR,win32more.Foundation.BSTR, use_last_error=False)(7, 'AddElement', ((1, 'pURL'),(1, 'pType'),(1, 'pMedia'),)))
    IMFMediaEngineSrcElements.RemoveAllElements = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(8, 'RemoveAllElements', ()))
    win32more.System.Com.IUnknown
    return IMFMediaEngineSrcElements
MF_MEDIA_ENGINE_NETWORK = Int32
MF_MEDIA_ENGINE_NETWORK_EMPTY = 0
MF_MEDIA_ENGINE_NETWORK_IDLE = 1
MF_MEDIA_ENGINE_NETWORK_LOADING = 2
MF_MEDIA_ENGINE_NETWORK_NO_SOURCE = 3
MF_MEDIA_ENGINE_READY = Int32
MF_MEDIA_ENGINE_READY_HAVE_NOTHING = 0
MF_MEDIA_ENGINE_READY_HAVE_METADATA = 1
MF_MEDIA_ENGINE_READY_HAVE_CURRENT_DATA = 2
MF_MEDIA_ENGINE_READY_HAVE_FUTURE_DATA = 3
MF_MEDIA_ENGINE_READY_HAVE_ENOUGH_DATA = 4
MF_MEDIA_ENGINE_CANPLAY = Int32
MF_MEDIA_ENGINE_CANPLAY_NOT_SUPPORTED = 0
MF_MEDIA_ENGINE_CANPLAY_MAYBE = 1
MF_MEDIA_ENGINE_CANPLAY_PROBABLY = 2
MF_MEDIA_ENGINE_PRELOAD = Int32
MF_MEDIA_ENGINE_PRELOAD_MISSING = 0
MF_MEDIA_ENGINE_PRELOAD_EMPTY = 1
MF_MEDIA_ENGINE_PRELOAD_NONE = 2
MF_MEDIA_ENGINE_PRELOAD_METADATA = 3
MF_MEDIA_ENGINE_PRELOAD_AUTOMATIC = 4
def _define_IMFMediaEngine_head():
    class IMFMediaEngine(win32more.System.Com.IUnknown_head):
        Guid = Guid('98a1b0bb-03eb-4935-ae7c-93c1fa0e1c93')
    return IMFMediaEngine
def _define_IMFMediaEngine():
    IMFMediaEngine = win32more.Media.MediaFoundation.IMFMediaEngine_head
    IMFMediaEngine.GetError = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaError_head), use_last_error=False)(3, 'GetError', ((1, 'ppError'),)))
    IMFMediaEngine.SetErrorCode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_MEDIA_ENGINE_ERR, use_last_error=False)(4, 'SetErrorCode', ((1, 'error'),)))
    IMFMediaEngine.SetSourceElements = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaEngineSrcElements_head, use_last_error=False)(5, 'SetSourceElements', ((1, 'pSrcElements'),)))
    IMFMediaEngine.SetSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR, use_last_error=False)(6, 'SetSource', ((1, 'pUrl'),)))
    IMFMediaEngine.GetCurrentSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BSTR), use_last_error=False)(7, 'GetCurrentSource', ((1, 'ppUrl'),)))
    IMFMediaEngine.GetNetworkState = COMMETHOD(WINFUNCTYPE(UInt16, use_last_error=False)(8, 'GetNetworkState', ()))
    IMFMediaEngine.GetPreload = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.MF_MEDIA_ENGINE_PRELOAD, use_last_error=False)(9, 'GetPreload', ()))
    IMFMediaEngine.SetPreload = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_MEDIA_ENGINE_PRELOAD, use_last_error=False)(10, 'SetPreload', ((1, 'Preload'),)))
    IMFMediaEngine.GetBuffered = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaTimeRange_head), use_last_error=False)(11, 'GetBuffered', ((1, 'ppBuffered'),)))
    IMFMediaEngine.Load = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(12, 'Load', ()))
    IMFMediaEngine.CanPlayType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,POINTER(win32more.Media.MediaFoundation.MF_MEDIA_ENGINE_CANPLAY), use_last_error=False)(13, 'CanPlayType', ((1, 'type'),(1, 'pAnswer'),)))
    IMFMediaEngine.GetReadyState = COMMETHOD(WINFUNCTYPE(UInt16, use_last_error=False)(14, 'GetReadyState', ()))
    IMFMediaEngine.IsSeeking = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=False)(15, 'IsSeeking', ()))
    IMFMediaEngine.GetCurrentTime = COMMETHOD(WINFUNCTYPE(Double, use_last_error=False)(16, 'GetCurrentTime', ()))
    IMFMediaEngine.SetCurrentTime = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double, use_last_error=False)(17, 'SetCurrentTime', ((1, 'seekTime'),)))
    IMFMediaEngine.GetStartTime = COMMETHOD(WINFUNCTYPE(Double, use_last_error=False)(18, 'GetStartTime', ()))
    IMFMediaEngine.GetDuration = COMMETHOD(WINFUNCTYPE(Double, use_last_error=False)(19, 'GetDuration', ()))
    IMFMediaEngine.IsPaused = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=False)(20, 'IsPaused', ()))
    IMFMediaEngine.GetDefaultPlaybackRate = COMMETHOD(WINFUNCTYPE(Double, use_last_error=False)(21, 'GetDefaultPlaybackRate', ()))
    IMFMediaEngine.SetDefaultPlaybackRate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double, use_last_error=False)(22, 'SetDefaultPlaybackRate', ((1, 'Rate'),)))
    IMFMediaEngine.GetPlaybackRate = COMMETHOD(WINFUNCTYPE(Double, use_last_error=False)(23, 'GetPlaybackRate', ()))
    IMFMediaEngine.SetPlaybackRate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double, use_last_error=False)(24, 'SetPlaybackRate', ((1, 'Rate'),)))
    IMFMediaEngine.GetPlayed = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaTimeRange_head), use_last_error=False)(25, 'GetPlayed', ((1, 'ppPlayed'),)))
    IMFMediaEngine.GetSeekable = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaTimeRange_head), use_last_error=False)(26, 'GetSeekable', ((1, 'ppSeekable'),)))
    IMFMediaEngine.IsEnded = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=False)(27, 'IsEnded', ()))
    IMFMediaEngine.GetAutoPlay = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=False)(28, 'GetAutoPlay', ()))
    IMFMediaEngine.SetAutoPlay = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL, use_last_error=False)(29, 'SetAutoPlay', ((1, 'AutoPlay'),)))
    IMFMediaEngine.GetLoop = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=False)(30, 'GetLoop', ()))
    IMFMediaEngine.SetLoop = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL, use_last_error=False)(31, 'SetLoop', ((1, 'Loop'),)))
    IMFMediaEngine.Play = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(32, 'Play', ()))
    IMFMediaEngine.Pause = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(33, 'Pause', ()))
    IMFMediaEngine.GetMuted = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=False)(34, 'GetMuted', ()))
    IMFMediaEngine.SetMuted = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL, use_last_error=False)(35, 'SetMuted', ((1, 'Muted'),)))
    IMFMediaEngine.GetVolume = COMMETHOD(WINFUNCTYPE(Double, use_last_error=False)(36, 'GetVolume', ()))
    IMFMediaEngine.SetVolume = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double, use_last_error=False)(37, 'SetVolume', ((1, 'Volume'),)))
    IMFMediaEngine.HasVideo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=False)(38, 'HasVideo', ()))
    IMFMediaEngine.HasAudio = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=False)(39, 'HasAudio', ()))
    IMFMediaEngine.GetNativeVideoSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(UInt32), use_last_error=False)(40, 'GetNativeVideoSize', ((1, 'cx'),(1, 'cy'),)))
    IMFMediaEngine.GetVideoAspectRatio = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(UInt32), use_last_error=False)(41, 'GetVideoAspectRatio', ((1, 'cx'),(1, 'cy'),)))
    IMFMediaEngine.Shutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(42, 'Shutdown', ()))
    IMFMediaEngine.TransferVideoFrame = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,POINTER(win32more.Media.MediaFoundation.MFVideoNormalizedRect_head),POINTER(win32more.Foundation.RECT_head),POINTER(win32more.Media.MediaFoundation.MFARGB_head), use_last_error=False)(43, 'TransferVideoFrame', ((1, 'pDstSurf'),(1, 'pSrc'),(1, 'pDst'),(1, 'pBorderClr'),)))
    IMFMediaEngine.OnVideoStreamTick = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int64), use_last_error=False)(44, 'OnVideoStreamTick', ((1, 'pPts'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngine
MF_MEDIA_ENGINE_S3D_PACKING_MODE = Int32
MF_MEDIA_ENGINE_S3D_PACKING_MODE_NONE = 0
MF_MEDIA_ENGINE_S3D_PACKING_MODE_SIDE_BY_SIDE = 1
MF_MEDIA_ENGINE_S3D_PACKING_MODE_TOP_BOTTOM = 2
MF_MEDIA_ENGINE_STATISTIC = Int32
MF_MEDIA_ENGINE_STATISTIC_FRAMES_RENDERED = 0
MF_MEDIA_ENGINE_STATISTIC_FRAMES_DROPPED = 1
MF_MEDIA_ENGINE_STATISTIC_BYTES_DOWNLOADED = 2
MF_MEDIA_ENGINE_STATISTIC_BUFFER_PROGRESS = 3
MF_MEDIA_ENGINE_STATISTIC_FRAMES_PER_SECOND = 4
MF_MEDIA_ENGINE_STATISTIC_PLAYBACK_JITTER = 5
MF_MEDIA_ENGINE_STATISTIC_FRAMES_CORRUPTED = 6
MF_MEDIA_ENGINE_STATISTIC_TOTAL_FRAME_DELAY = 7
MF_MEDIA_ENGINE_SEEK_MODE = Int32
MF_MEDIA_ENGINE_SEEK_MODE_NORMAL = 0
MF_MEDIA_ENGINE_SEEK_MODE_APPROXIMATE = 1
def _define_IMFMediaEngineEx_head():
    class IMFMediaEngineEx(win32more.Media.MediaFoundation.IMFMediaEngine_head):
        Guid = Guid('83015ead-b1e6-40d0-a98a-37145ffe1ad1')
    return IMFMediaEngineEx
def _define_IMFMediaEngineEx():
    IMFMediaEngineEx = win32more.Media.MediaFoundation.IMFMediaEngineEx_head
    IMFMediaEngineEx.SetSourceFromByteStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Foundation.BSTR, use_last_error=False)(45, 'SetSourceFromByteStream', ((1, 'pByteStream'),(1, 'pURL'),)))
    IMFMediaEngineEx.GetStatistics = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_MEDIA_ENGINE_STATISTIC,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(46, 'GetStatistics', ((1, 'StatisticID'),(1, 'pStatistic'),)))
    IMFMediaEngineEx.UpdateVideoStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVideoNormalizedRect_head),POINTER(win32more.Foundation.RECT_head),POINTER(win32more.Media.MediaFoundation.MFARGB_head), use_last_error=False)(47, 'UpdateVideoStream', ((1, 'pSrc'),(1, 'pDst'),(1, 'pBorderClr'),)))
    IMFMediaEngineEx.GetBalance = COMMETHOD(WINFUNCTYPE(Double, use_last_error=False)(48, 'GetBalance', ()))
    IMFMediaEngineEx.SetBalance = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double, use_last_error=False)(49, 'SetBalance', ((1, 'balance'),)))
    IMFMediaEngineEx.IsPlaybackRateSupported = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL,Double, use_last_error=False)(50, 'IsPlaybackRateSupported', ((1, 'rate'),)))
    IMFMediaEngineEx.FrameStep = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL, use_last_error=False)(51, 'FrameStep', ((1, 'Forward'),)))
    IMFMediaEngineEx.GetResourceCharacteristics = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(52, 'GetResourceCharacteristics', ((1, 'pCharacteristics'),)))
    IMFMediaEngineEx.GetPresentationAttribute = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(53, 'GetPresentationAttribute', ((1, 'guidMFAttribute'),(1, 'pvValue'),)))
    IMFMediaEngineEx.GetNumberOfStreams = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(54, 'GetNumberOfStreams', ((1, 'pdwStreamCount'),)))
    IMFMediaEngineEx.GetStreamAttribute = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(55, 'GetStreamAttribute', ((1, 'dwStreamIndex'),(1, 'guidMFAttribute'),(1, 'pvValue'),)))
    IMFMediaEngineEx.GetStreamSelection = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Foundation.BOOL), use_last_error=False)(56, 'GetStreamSelection', ((1, 'dwStreamIndex'),(1, 'pEnabled'),)))
    IMFMediaEngineEx.SetStreamSelection = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.BOOL, use_last_error=False)(57, 'SetStreamSelection', ((1, 'dwStreamIndex'),(1, 'Enabled'),)))
    IMFMediaEngineEx.ApplyStreamSelections = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(58, 'ApplyStreamSelections', ()))
    IMFMediaEngineEx.IsProtected = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(59, 'IsProtected', ((1, 'pProtected'),)))
    IMFMediaEngineEx.InsertVideoEffect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,win32more.Foundation.BOOL, use_last_error=False)(60, 'InsertVideoEffect', ((1, 'pEffect'),(1, 'fOptional'),)))
    IMFMediaEngineEx.InsertAudioEffect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,win32more.Foundation.BOOL, use_last_error=False)(61, 'InsertAudioEffect', ((1, 'pEffect'),(1, 'fOptional'),)))
    IMFMediaEngineEx.RemoveAllEffects = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(62, 'RemoveAllEffects', ()))
    IMFMediaEngineEx.SetTimelineMarkerTimer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double, use_last_error=False)(63, 'SetTimelineMarkerTimer', ((1, 'timeToFire'),)))
    IMFMediaEngineEx.GetTimelineMarkerTimer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Double), use_last_error=False)(64, 'GetTimelineMarkerTimer', ((1, 'pTimeToFire'),)))
    IMFMediaEngineEx.CancelTimelineMarkerTimer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(65, 'CancelTimelineMarkerTimer', ()))
    IMFMediaEngineEx.IsStereo3D = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=False)(66, 'IsStereo3D', ()))
    IMFMediaEngineEx.GetStereo3DFramePackingMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_MEDIA_ENGINE_S3D_PACKING_MODE), use_last_error=False)(67, 'GetStereo3DFramePackingMode', ((1, 'packMode'),)))
    IMFMediaEngineEx.SetStereo3DFramePackingMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_MEDIA_ENGINE_S3D_PACKING_MODE, use_last_error=False)(68, 'SetStereo3DFramePackingMode', ((1, 'packMode'),)))
    IMFMediaEngineEx.GetStereo3DRenderMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF3DVideoOutputType), use_last_error=False)(69, 'GetStereo3DRenderMode', ((1, 'outputType'),)))
    IMFMediaEngineEx.SetStereo3DRenderMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF3DVideoOutputType, use_last_error=False)(70, 'SetStereo3DRenderMode', ((1, 'outputType'),)))
    IMFMediaEngineEx.EnableWindowlessSwapchainMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL, use_last_error=False)(71, 'EnableWindowlessSwapchainMode', ((1, 'fEnable'),)))
    IMFMediaEngineEx.GetVideoSwapchainHandle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.HANDLE), use_last_error=False)(72, 'GetVideoSwapchainHandle', ((1, 'phSwapchain'),)))
    IMFMediaEngineEx.EnableHorizontalMirrorMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL, use_last_error=False)(73, 'EnableHorizontalMirrorMode', ((1, 'fEnable'),)))
    IMFMediaEngineEx.GetAudioStreamCategory = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(74, 'GetAudioStreamCategory', ((1, 'pCategory'),)))
    IMFMediaEngineEx.SetAudioStreamCategory = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(75, 'SetAudioStreamCategory', ((1, 'category'),)))
    IMFMediaEngineEx.GetAudioEndpointRole = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(76, 'GetAudioEndpointRole', ((1, 'pRole'),)))
    IMFMediaEngineEx.SetAudioEndpointRole = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(77, 'SetAudioEndpointRole', ((1, 'role'),)))
    IMFMediaEngineEx.GetRealTimeMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(78, 'GetRealTimeMode', ((1, 'pfEnabled'),)))
    IMFMediaEngineEx.SetRealTimeMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL, use_last_error=False)(79, 'SetRealTimeMode', ((1, 'fEnable'),)))
    IMFMediaEngineEx.SetCurrentTimeEx = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double,win32more.Media.MediaFoundation.MF_MEDIA_ENGINE_SEEK_MODE, use_last_error=False)(80, 'SetCurrentTimeEx', ((1, 'seekTime'),(1, 'seekMode'),)))
    IMFMediaEngineEx.EnableTimeUpdateTimer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL, use_last_error=False)(81, 'EnableTimeUpdateTimer', ((1, 'fEnableTimer'),)))
    win32more.Media.MediaFoundation.IMFMediaEngine
    return IMFMediaEngineEx
def _define_IMFMediaEngineAudioEndpointId_head():
    class IMFMediaEngineAudioEndpointId(win32more.System.Com.IUnknown_head):
        Guid = Guid('7a3bac98-0e76-49fb-8c20-8a86fd98eaf2')
    return IMFMediaEngineAudioEndpointId
def _define_IMFMediaEngineAudioEndpointId():
    IMFMediaEngineAudioEndpointId = win32more.Media.MediaFoundation.IMFMediaEngineAudioEndpointId_head
    IMFMediaEngineAudioEndpointId.SetAudioEndpointId = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR, use_last_error=False)(3, 'SetAudioEndpointId', ((1, 'pszEndpointId'),)))
    IMFMediaEngineAudioEndpointId.GetAudioEndpointId = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR), use_last_error=False)(4, 'GetAudioEndpointId', ((1, 'ppszEndpointId'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineAudioEndpointId
MF_MEDIA_ENGINE_EXTENSION_TYPE = Int32
MF_MEDIA_ENGINE_EXTENSION_TYPE_MEDIASOURCE = 0
MF_MEDIA_ENGINE_EXTENSION_TYPE_BYTESTREAM = 1
def _define_IMFMediaEngineExtension_head():
    class IMFMediaEngineExtension(win32more.System.Com.IUnknown_head):
        Guid = Guid('2f69d622-20b5-41e9-afdf-89ced1dda04e')
    return IMFMediaEngineExtension
def _define_IMFMediaEngineExtension():
    IMFMediaEngineExtension = win32more.Media.MediaFoundation.IMFMediaEngineExtension_head
    IMFMediaEngineExtension.CanPlayType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL,win32more.Foundation.BSTR,POINTER(win32more.Media.MediaFoundation.MF_MEDIA_ENGINE_CANPLAY), use_last_error=False)(3, 'CanPlayType', ((1, 'AudioOnly'),(1, 'MimeType'),(1, 'pAnswer'),)))
    IMFMediaEngineExtension.BeginCreateObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.MF_OBJECT_TYPE,POINTER(win32more.System.Com.IUnknown_head),win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(4, 'BeginCreateObject', ((1, 'bstrURL'),(1, 'pByteStream'),(1, 'type'),(1, 'ppIUnknownCancelCookie'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFMediaEngineExtension.CancelObjectCreation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head, use_last_error=False)(5, 'CancelObjectCreation', ((1, 'pIUnknownCancelCookie'),)))
    IMFMediaEngineExtension.EndCreateObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(win32more.System.Com.IUnknown_head), use_last_error=False)(6, 'EndCreateObject', ((1, 'pResult'),(1, 'ppObject'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineExtension
MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAGS = Int32
MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_PROTECTED = 1
MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_SURFACE_PROTECTION = 2
MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_ANTI_SCREEN_SCRAPE_PROTECTION = 4
def _define_IMFMediaEngineProtectedContent_head():
    class IMFMediaEngineProtectedContent(win32more.System.Com.IUnknown_head):
        Guid = Guid('9f8021e8-9c8c-487e-bb5c-79aa4779938c')
    return IMFMediaEngineProtectedContent
def _define_IMFMediaEngineProtectedContent():
    IMFMediaEngineProtectedContent = win32more.Media.MediaFoundation.IMFMediaEngineProtectedContent_head
    IMFMediaEngineProtectedContent.ShareResources = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head, use_last_error=False)(3, 'ShareResources', ((1, 'pUnkDeviceContext'),)))
    IMFMediaEngineProtectedContent.GetRequiredProtections = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(4, 'GetRequiredProtections', ((1, 'pFrameProtectionFlags'),)))
    IMFMediaEngineProtectedContent.SetOPMWindow = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HWND, use_last_error=False)(5, 'SetOPMWindow', ((1, 'hwnd'),)))
    IMFMediaEngineProtectedContent.TransferVideoFrame = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,POINTER(win32more.Media.MediaFoundation.MFVideoNormalizedRect_head),POINTER(win32more.Foundation.RECT_head),POINTER(win32more.Media.MediaFoundation.MFARGB_head),POINTER(UInt32), use_last_error=False)(6, 'TransferVideoFrame', ((1, 'pDstSurf'),(1, 'pSrc'),(1, 'pDst'),(1, 'pBorderClr'),(1, 'pFrameProtectionFlags'),)))
    IMFMediaEngineProtectedContent.SetContentProtectionManager = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFContentProtectionManager_head, use_last_error=False)(7, 'SetContentProtectionManager', ((1, 'pCPM'),)))
    IMFMediaEngineProtectedContent.SetApplicationCertificate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32, use_last_error=False)(8, 'SetApplicationCertificate', ((1, 'pbBlob'),(1, 'cbBlob'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineProtectedContent
def _define_IAudioSourceProvider_head():
    class IAudioSourceProvider(win32more.System.Com.IUnknown_head):
        Guid = Guid('ebbaf249-afc2-4582-91c6-b60df2e84954')
    return IAudioSourceProvider
def _define_IAudioSourceProvider():
    IAudioSourceProvider = win32more.Media.MediaFoundation.IAudioSourceProvider_head
    IAudioSourceProvider.ProvideInput = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32),POINTER(Single), use_last_error=False)(3, 'ProvideInput', ((1, 'dwSampleCount'),(1, 'pdwChannelCount'),(1, 'pInterleavedAudioData'),)))
    win32more.System.Com.IUnknown
    return IAudioSourceProvider
def _define_IMFMediaEngineWebSupport_head():
    class IMFMediaEngineWebSupport(win32more.System.Com.IUnknown_head):
        Guid = Guid('ba2743a1-07e0-48ef-84b6-9a2ed023ca6c')
    return IMFMediaEngineWebSupport
def _define_IMFMediaEngineWebSupport():
    IMFMediaEngineWebSupport = win32more.Media.MediaFoundation.IMFMediaEngineWebSupport_head
    IMFMediaEngineWebSupport.ShouldDelayTheLoadEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=False)(3, 'ShouldDelayTheLoadEvent', ()))
    IMFMediaEngineWebSupport.ConnectWebAudio = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IAudioSourceProvider_head), use_last_error=False)(4, 'ConnectWebAudio', ((1, 'dwSampleRate'),(1, 'ppSourceProvider'),)))
    IMFMediaEngineWebSupport.DisconnectWebAudio = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(5, 'DisconnectWebAudio', ()))
    win32more.System.Com.IUnknown
    return IMFMediaEngineWebSupport
MF_MSE_VP9_SUPPORT_TYPE = Int32
MF_MSE_VP9_SUPPORT_DEFAULT = 0
MF_MSE_VP9_SUPPORT_ON = 1
MF_MSE_VP9_SUPPORT_OFF = 2
MF_MSE_OPUS_SUPPORT_TYPE = Int32
MF_MSE_OPUS_SUPPORT_ON = 0
MF_MSE_OPUS_SUPPORT_OFF = 1
def _define_IMFMediaSourceExtensionNotify_head():
    class IMFMediaSourceExtensionNotify(win32more.System.Com.IUnknown_head):
        Guid = Guid('a7901327-05dd-4469-a7b7-0e01979e361d')
    return IMFMediaSourceExtensionNotify
def _define_IMFMediaSourceExtensionNotify():
    IMFMediaSourceExtensionNotify = win32more.Media.MediaFoundation.IMFMediaSourceExtensionNotify_head
    IMFMediaSourceExtensionNotify.OnSourceOpen = COMMETHOD(WINFUNCTYPE(Void, use_last_error=False)(3, 'OnSourceOpen', ()))
    IMFMediaSourceExtensionNotify.OnSourceEnded = COMMETHOD(WINFUNCTYPE(Void, use_last_error=False)(4, 'OnSourceEnded', ()))
    IMFMediaSourceExtensionNotify.OnSourceClose = COMMETHOD(WINFUNCTYPE(Void, use_last_error=False)(5, 'OnSourceClose', ()))
    win32more.System.Com.IUnknown
    return IMFMediaSourceExtensionNotify
def _define_IMFBufferListNotify_head():
    class IMFBufferListNotify(win32more.System.Com.IUnknown_head):
        Guid = Guid('24cd47f7-81d8-4785-adb2-af697a963cd2')
    return IMFBufferListNotify
def _define_IMFBufferListNotify():
    IMFBufferListNotify = win32more.Media.MediaFoundation.IMFBufferListNotify_head
    IMFBufferListNotify.OnAddSourceBuffer = COMMETHOD(WINFUNCTYPE(Void, use_last_error=False)(3, 'OnAddSourceBuffer', ()))
    IMFBufferListNotify.OnRemoveSourceBuffer = COMMETHOD(WINFUNCTYPE(Void, use_last_error=False)(4, 'OnRemoveSourceBuffer', ()))
    win32more.System.Com.IUnknown
    return IMFBufferListNotify
def _define_IMFSourceBufferNotify_head():
    class IMFSourceBufferNotify(win32more.System.Com.IUnknown_head):
        Guid = Guid('87e47623-2ceb-45d6-9b88-d8520c4dcbbc')
    return IMFSourceBufferNotify
def _define_IMFSourceBufferNotify():
    IMFSourceBufferNotify = win32more.Media.MediaFoundation.IMFSourceBufferNotify_head
    IMFSourceBufferNotify.OnUpdateStart = COMMETHOD(WINFUNCTYPE(Void, use_last_error=False)(3, 'OnUpdateStart', ()))
    IMFSourceBufferNotify.OnAbort = COMMETHOD(WINFUNCTYPE(Void, use_last_error=False)(4, 'OnAbort', ()))
    IMFSourceBufferNotify.OnError = COMMETHOD(WINFUNCTYPE(Void,win32more.Foundation.HRESULT, use_last_error=False)(5, 'OnError', ((1, 'hr'),)))
    IMFSourceBufferNotify.OnUpdate = COMMETHOD(WINFUNCTYPE(Void, use_last_error=False)(6, 'OnUpdate', ()))
    IMFSourceBufferNotify.OnUpdateEnd = COMMETHOD(WINFUNCTYPE(Void, use_last_error=False)(7, 'OnUpdateEnd', ()))
    win32more.System.Com.IUnknown
    return IMFSourceBufferNotify
def _define_IMFSourceBuffer_head():
    class IMFSourceBuffer(win32more.System.Com.IUnknown_head):
        Guid = Guid('e2cd3a4b-af25-4d3d-9110-da0e6f8ee877')
    return IMFSourceBuffer
def _define_IMFSourceBuffer():
    IMFSourceBuffer = win32more.Media.MediaFoundation.IMFSourceBuffer_head
    IMFSourceBuffer.GetUpdating = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=False)(3, 'GetUpdating', ()))
    IMFSourceBuffer.GetBuffered = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaTimeRange_head), use_last_error=False)(4, 'GetBuffered', ((1, 'ppBuffered'),)))
    IMFSourceBuffer.GetTimeStampOffset = COMMETHOD(WINFUNCTYPE(Double, use_last_error=False)(5, 'GetTimeStampOffset', ()))
    IMFSourceBuffer.SetTimeStampOffset = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double, use_last_error=False)(6, 'SetTimeStampOffset', ((1, 'offset'),)))
    IMFSourceBuffer.GetAppendWindowStart = COMMETHOD(WINFUNCTYPE(Double, use_last_error=False)(7, 'GetAppendWindowStart', ()))
    IMFSourceBuffer.SetAppendWindowStart = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double, use_last_error=False)(8, 'SetAppendWindowStart', ((1, 'time'),)))
    IMFSourceBuffer.GetAppendWindowEnd = COMMETHOD(WINFUNCTYPE(Double, use_last_error=False)(9, 'GetAppendWindowEnd', ()))
    IMFSourceBuffer.SetAppendWindowEnd = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double, use_last_error=False)(10, 'SetAppendWindowEnd', ((1, 'time'),)))
    IMFSourceBuffer.Append = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32, use_last_error=False)(11, 'Append', ((1, 'pData'),(1, 'len'),)))
    IMFSourceBuffer.AppendByteStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,POINTER(UInt64), use_last_error=False)(12, 'AppendByteStream', ((1, 'pStream'),(1, 'pMaxLen'),)))
    IMFSourceBuffer.Abort = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(13, 'Abort', ()))
    IMFSourceBuffer.Remove = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double,Double, use_last_error=False)(14, 'Remove', ((1, 'start'),(1, 'end'),)))
    win32more.System.Com.IUnknown
    return IMFSourceBuffer
MF_MSE_APPEND_MODE = Int32
MF_MSE_APPEND_MODE_SEGMENTS = 0
MF_MSE_APPEND_MODE_SEQUENCE = 1
def _define_IMFSourceBufferAppendMode_head():
    class IMFSourceBufferAppendMode(win32more.System.Com.IUnknown_head):
        Guid = Guid('19666fb4-babe-4c55-bc03-0a074da37e2a')
    return IMFSourceBufferAppendMode
def _define_IMFSourceBufferAppendMode():
    IMFSourceBufferAppendMode = win32more.Media.MediaFoundation.IMFSourceBufferAppendMode_head
    IMFSourceBufferAppendMode.GetAppendMode = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.MF_MSE_APPEND_MODE, use_last_error=False)(3, 'GetAppendMode', ()))
    IMFSourceBufferAppendMode.SetAppendMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_MSE_APPEND_MODE, use_last_error=False)(4, 'SetAppendMode', ((1, 'mode'),)))
    win32more.System.Com.IUnknown
    return IMFSourceBufferAppendMode
def _define_IMFSourceBufferList_head():
    class IMFSourceBufferList(win32more.System.Com.IUnknown_head):
        Guid = Guid('249981f8-8325-41f3-b80c-3b9e3aad0cbe')
    return IMFSourceBufferList
def _define_IMFSourceBufferList():
    IMFSourceBufferList = win32more.Media.MediaFoundation.IMFSourceBufferList_head
    IMFSourceBufferList.GetLength = COMMETHOD(WINFUNCTYPE(UInt32, use_last_error=False)(3, 'GetLength', ()))
    IMFSourceBufferList.GetSourceBuffer = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.IMFSourceBuffer_head,UInt32, use_last_error=False)(4, 'GetSourceBuffer', ((1, 'index'),)))
    win32more.System.Com.IUnknown
    return IMFSourceBufferList
MF_MSE_READY = Int32
MF_MSE_READY_CLOSED = 1
MF_MSE_READY_OPEN = 2
MF_MSE_READY_ENDED = 3
MF_MSE_ERROR = Int32
MF_MSE_ERROR_NOERROR = 0
MF_MSE_ERROR_NETWORK = 1
MF_MSE_ERROR_DECODE = 2
MF_MSE_ERROR_UNKNOWN_ERROR = 3
def _define_IMFMediaSourceExtension_head():
    class IMFMediaSourceExtension(win32more.System.Com.IUnknown_head):
        Guid = Guid('e467b94e-a713-4562-a802-816a42e9008a')
    return IMFMediaSourceExtension
def _define_IMFMediaSourceExtension():
    IMFMediaSourceExtension = win32more.Media.MediaFoundation.IMFMediaSourceExtension_head
    IMFMediaSourceExtension.GetSourceBuffers = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.IMFSourceBufferList_head, use_last_error=False)(3, 'GetSourceBuffers', ()))
    IMFMediaSourceExtension.GetActiveSourceBuffers = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.IMFSourceBufferList_head, use_last_error=False)(4, 'GetActiveSourceBuffers', ()))
    IMFMediaSourceExtension.GetReadyState = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.MF_MSE_READY, use_last_error=False)(5, 'GetReadyState', ()))
    IMFMediaSourceExtension.GetDuration = COMMETHOD(WINFUNCTYPE(Double, use_last_error=False)(6, 'GetDuration', ()))
    IMFMediaSourceExtension.SetDuration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double, use_last_error=False)(7, 'SetDuration', ((1, 'duration'),)))
    IMFMediaSourceExtension.AddSourceBuffer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,win32more.Media.MediaFoundation.IMFSourceBufferNotify_head,POINTER(win32more.Media.MediaFoundation.IMFSourceBuffer_head), use_last_error=False)(8, 'AddSourceBuffer', ((1, 'type'),(1, 'pNotify'),(1, 'ppSourceBuffer'),)))
    IMFMediaSourceExtension.RemoveSourceBuffer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSourceBuffer_head, use_last_error=False)(9, 'RemoveSourceBuffer', ((1, 'pSourceBuffer'),)))
    IMFMediaSourceExtension.SetEndOfStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_MSE_ERROR, use_last_error=False)(10, 'SetEndOfStream', ((1, 'error'),)))
    IMFMediaSourceExtension.IsTypeSupported = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.BSTR, use_last_error=False)(11, 'IsTypeSupported', ((1, 'type'),)))
    IMFMediaSourceExtension.GetSourceBuffer = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.IMFSourceBuffer_head,UInt32, use_last_error=False)(12, 'GetSourceBuffer', ((1, 'dwStreamIndex'),)))
    win32more.System.Com.IUnknown
    return IMFMediaSourceExtension
def _define_IMFMediaSourceExtensionLiveSeekableRange_head():
    class IMFMediaSourceExtensionLiveSeekableRange(win32more.System.Com.IUnknown_head):
        Guid = Guid('5d1abfd6-450a-4d92-9efc-d6b6cbc1f4da')
    return IMFMediaSourceExtensionLiveSeekableRange
def _define_IMFMediaSourceExtensionLiveSeekableRange():
    IMFMediaSourceExtensionLiveSeekableRange = win32more.Media.MediaFoundation.IMFMediaSourceExtensionLiveSeekableRange_head
    IMFMediaSourceExtensionLiveSeekableRange.SetLiveSeekableRange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double,Double, use_last_error=False)(3, 'SetLiveSeekableRange', ((1, 'start'),(1, 'end'),)))
    IMFMediaSourceExtensionLiveSeekableRange.ClearLiveSeekableRange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(4, 'ClearLiveSeekableRange', ()))
    win32more.System.Com.IUnknown
    return IMFMediaSourceExtensionLiveSeekableRange
def _define_IMFMediaEngineEME_head():
    class IMFMediaEngineEME(win32more.System.Com.IUnknown_head):
        Guid = Guid('50dc93e4-ba4f-4275-ae66-83e836e57469')
    return IMFMediaEngineEME
def _define_IMFMediaEngineEME():
    IMFMediaEngineEME = win32more.Media.MediaFoundation.IMFMediaEngineEME_head
    IMFMediaEngineEME.get_Keys = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaKeys_head), use_last_error=False)(3, 'get_Keys', ((1, 'keys'),)))
    IMFMediaEngineEME.SetMediaKeys = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaKeys_head, use_last_error=False)(4, 'SetMediaKeys', ((1, 'keys'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineEME
def _define_IMFMediaEngineSrcElementsEx_head():
    class IMFMediaEngineSrcElementsEx(win32more.Media.MediaFoundation.IMFMediaEngineSrcElements_head):
        Guid = Guid('654a6bb3-e1a3-424a-9908-53a43a0dfda0')
    return IMFMediaEngineSrcElementsEx
def _define_IMFMediaEngineSrcElementsEx():
    IMFMediaEngineSrcElementsEx = win32more.Media.MediaFoundation.IMFMediaEngineSrcElementsEx_head
    IMFMediaEngineSrcElementsEx.AddElementEx = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,win32more.Foundation.BSTR,win32more.Foundation.BSTR,win32more.Foundation.BSTR, use_last_error=False)(9, 'AddElementEx', ((1, 'pURL'),(1, 'pType'),(1, 'pMedia'),(1, 'keySystem'),)))
    IMFMediaEngineSrcElementsEx.GetKeySystem = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Foundation.BSTR), use_last_error=False)(10, 'GetKeySystem', ((1, 'index'),(1, 'pType'),)))
    win32more.Media.MediaFoundation.IMFMediaEngineSrcElements
    return IMFMediaEngineSrcElementsEx
def _define_IMFMediaEngineNeedKeyNotify_head():
    class IMFMediaEngineNeedKeyNotify(win32more.System.Com.IUnknown_head):
        Guid = Guid('46a30204-a696-4b18-8804-246b8f031bb1')
    return IMFMediaEngineNeedKeyNotify
def _define_IMFMediaEngineNeedKeyNotify():
    IMFMediaEngineNeedKeyNotify = win32more.Media.MediaFoundation.IMFMediaEngineNeedKeyNotify_head
    IMFMediaEngineNeedKeyNotify.NeedKey = COMMETHOD(WINFUNCTYPE(Void,c_char_p_no,UInt32, use_last_error=False)(3, 'NeedKey', ((1, 'initData'),(1, 'cb'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineNeedKeyNotify
def _define_IMFMediaKeys_head():
    class IMFMediaKeys(win32more.System.Com.IUnknown_head):
        Guid = Guid('5cb31c05-61ff-418f-afda-caaf41421a38')
    return IMFMediaKeys
def _define_IMFMediaKeys():
    IMFMediaKeys = win32more.Media.MediaFoundation.IMFMediaKeys_head
    IMFMediaKeys.CreateSession = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,c_char_p_no,UInt32,c_char_p_no,UInt32,win32more.Media.MediaFoundation.IMFMediaKeySessionNotify_head,POINTER(win32more.Media.MediaFoundation.IMFMediaKeySession_head), use_last_error=False)(3, 'CreateSession', ((1, 'mimeType'),(1, 'initData'),(1, 'cb'),(1, 'customData'),(1, 'cbCustomData'),(1, 'notify'),(1, 'ppSession'),)))
    IMFMediaKeys.get_KeySystem = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BSTR), use_last_error=False)(4, 'get_KeySystem', ((1, 'keySystem'),)))
    IMFMediaKeys.Shutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(5, 'Shutdown', ()))
    IMFMediaKeys.GetSuspendNotify = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFCdmSuspendNotify_head), use_last_error=False)(6, 'GetSuspendNotify', ((1, 'notify'),)))
    win32more.System.Com.IUnknown
    return IMFMediaKeys
MF_MEDIA_ENGINE_KEYERR = Int32
MF_MEDIAENGINE_KEYERR_UNKNOWN = 1
MF_MEDIAENGINE_KEYERR_CLIENT = 2
MF_MEDIAENGINE_KEYERR_SERVICE = 3
MF_MEDIAENGINE_KEYERR_OUTPUT = 4
MF_MEDIAENGINE_KEYERR_HARDWARECHANGE = 5
MF_MEDIAENGINE_KEYERR_DOMAIN = 6
def _define_IMFMediaKeySession_head():
    class IMFMediaKeySession(win32more.System.Com.IUnknown_head):
        Guid = Guid('24fa67d5-d1d0-4dc5-995c-c0efdc191fb5')
    return IMFMediaKeySession
def _define_IMFMediaKeySession():
    IMFMediaKeySession = win32more.Media.MediaFoundation.IMFMediaKeySession_head
    IMFMediaKeySession.GetError = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt16),POINTER(UInt32), use_last_error=False)(3, 'GetError', ((1, 'code'),(1, 'systemCode'),)))
    IMFMediaKeySession.get_KeySystem = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BSTR), use_last_error=False)(4, 'get_KeySystem', ((1, 'keySystem'),)))
    IMFMediaKeySession.get_SessionId = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BSTR), use_last_error=False)(5, 'get_SessionId', ((1, 'sessionId'),)))
    IMFMediaKeySession.Update = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32, use_last_error=False)(6, 'Update', ((1, 'key'),(1, 'cb'),)))
    IMFMediaKeySession.Close = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(7, 'Close', ()))
    win32more.System.Com.IUnknown
    return IMFMediaKeySession
def _define_IMFMediaKeySessionNotify_head():
    class IMFMediaKeySessionNotify(win32more.System.Com.IUnknown_head):
        Guid = Guid('6a0083f9-8947-4c1d-9ce0-cdee22b23135')
    return IMFMediaKeySessionNotify
def _define_IMFMediaKeySessionNotify():
    IMFMediaKeySessionNotify = win32more.Media.MediaFoundation.IMFMediaKeySessionNotify_head
    IMFMediaKeySessionNotify.KeyMessage = COMMETHOD(WINFUNCTYPE(Void,win32more.Foundation.BSTR,c_char_p_no,UInt32, use_last_error=False)(3, 'KeyMessage', ((1, 'destinationURL'),(1, 'message'),(1, 'cb'),)))
    IMFMediaKeySessionNotify.KeyAdded = COMMETHOD(WINFUNCTYPE(Void, use_last_error=False)(4, 'KeyAdded', ()))
    IMFMediaKeySessionNotify.KeyError = COMMETHOD(WINFUNCTYPE(Void,UInt16,UInt32, use_last_error=False)(5, 'KeyError', ((1, 'code'),(1, 'systemCode'),)))
    win32more.System.Com.IUnknown
    return IMFMediaKeySessionNotify
def _define_IMFCdmSuspendNotify_head():
    class IMFCdmSuspendNotify(win32more.System.Com.IUnknown_head):
        Guid = Guid('7a5645d2-43bd-47fd-87b7-dcd24cc7d692')
    return IMFCdmSuspendNotify
def _define_IMFCdmSuspendNotify():
    IMFCdmSuspendNotify = win32more.Media.MediaFoundation.IMFCdmSuspendNotify_head
    IMFCdmSuspendNotify.Begin = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(3, 'Begin', ()))
    IMFCdmSuspendNotify.End = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(4, 'End', ()))
    win32more.System.Com.IUnknown
    return IMFCdmSuspendNotify
MF_HDCP_STATUS = Int32
MF_HDCP_STATUS_ON = 0
MF_HDCP_STATUS_OFF = 1
MF_HDCP_STATUS_ON_WITH_TYPE_ENFORCEMENT = 2
def _define_IMFHDCPStatus_head():
    class IMFHDCPStatus(win32more.System.Com.IUnknown_head):
        Guid = Guid('de400f54-5bf1-40cf-8964-0bea136b1e3d')
    return IMFHDCPStatus
def _define_IMFHDCPStatus():
    IMFHDCPStatus = win32more.Media.MediaFoundation.IMFHDCPStatus_head
    IMFHDCPStatus.Query = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_HDCP_STATUS),POINTER(win32more.Foundation.BOOL), use_last_error=False)(3, 'Query', ((1, 'pStatus'),(1, 'pfStatus'),)))
    IMFHDCPStatus.Set = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_HDCP_STATUS, use_last_error=False)(4, 'Set', ((1, 'status'),)))
    win32more.System.Com.IUnknown
    return IMFHDCPStatus
MF_MEDIA_ENGINE_OPM_STATUS = Int32
MF_MEDIA_ENGINE_OPM_NOT_REQUESTED = 0
MF_MEDIA_ENGINE_OPM_ESTABLISHED = 1
MF_MEDIA_ENGINE_OPM_FAILED_VM = 2
MF_MEDIA_ENGINE_OPM_FAILED_BDA = 3
MF_MEDIA_ENGINE_OPM_FAILED_UNSIGNED_DRIVER = 4
MF_MEDIA_ENGINE_OPM_FAILED = 5
def _define_IMFMediaEngineOPMInfo_head():
    class IMFMediaEngineOPMInfo(win32more.System.Com.IUnknown_head):
        Guid = Guid('765763e6-6c01-4b01-bb0f-b829f60ed28c')
    return IMFMediaEngineOPMInfo
def _define_IMFMediaEngineOPMInfo():
    IMFMediaEngineOPMInfo = win32more.Media.MediaFoundation.IMFMediaEngineOPMInfo_head
    IMFMediaEngineOPMInfo.GetOPMInfo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_MEDIA_ENGINE_OPM_STATUS),POINTER(win32more.Foundation.BOOL), use_last_error=False)(3, 'GetOPMInfo', ((1, 'pStatus'),(1, 'pConstricted'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineOPMInfo
MF_MEDIA_ENGINE_CREATEFLAGS = Int32
MF_MEDIA_ENGINE_AUDIOONLY = 1
MF_MEDIA_ENGINE_WAITFORSTABLE_STATE = 2
MF_MEDIA_ENGINE_FORCEMUTE = 4
MF_MEDIA_ENGINE_REAL_TIME_MODE = 8
MF_MEDIA_ENGINE_DISABLE_LOCAL_PLUGINS = 16
MF_MEDIA_ENGINE_CREATEFLAGS_MASK = 31
MF_MEDIA_ENGINE_PROTECTION_FLAGS = Int32
MF_MEDIA_ENGINE_ENABLE_PROTECTED_CONTENT = 1
MF_MEDIA_ENGINE_USE_PMP_FOR_ALL_CONTENT = 2
MF_MEDIA_ENGINE_USE_UNPROTECTED_PMP = 4
def _define_IMFMediaEngineClassFactory_head():
    class IMFMediaEngineClassFactory(win32more.System.Com.IUnknown_head):
        Guid = Guid('4d645ace-26aa-4688-9be1-df3516990b93')
    return IMFMediaEngineClassFactory
def _define_IMFMediaEngineClassFactory():
    IMFMediaEngineClassFactory = win32more.Media.MediaFoundation.IMFMediaEngineClassFactory_head
    IMFMediaEngineClassFactory.CreateInstance = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFMediaEngine_head), use_last_error=False)(3, 'CreateInstance', ((1, 'dwFlags'),(1, 'pAttr'),(1, 'ppPlayer'),)))
    IMFMediaEngineClassFactory.CreateTimeRange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaTimeRange_head), use_last_error=False)(4, 'CreateTimeRange', ((1, 'ppTimeRange'),)))
    IMFMediaEngineClassFactory.CreateError = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaError_head), use_last_error=False)(5, 'CreateError', ((1, 'ppError'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineClassFactory
def _define_IMFMediaEngineClassFactoryEx_head():
    class IMFMediaEngineClassFactoryEx(win32more.Media.MediaFoundation.IMFMediaEngineClassFactory_head):
        Guid = Guid('c56156c6-ea5b-48a5-9df8-fbe035d0929e')
    return IMFMediaEngineClassFactoryEx
def _define_IMFMediaEngineClassFactoryEx():
    IMFMediaEngineClassFactoryEx = win32more.Media.MediaFoundation.IMFMediaEngineClassFactoryEx_head
    IMFMediaEngineClassFactoryEx.CreateMediaSourceExtension = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSourceExtension_head), use_last_error=False)(6, 'CreateMediaSourceExtension', ((1, 'dwFlags'),(1, 'pAttr'),(1, 'ppMSE'),)))
    IMFMediaEngineClassFactoryEx.CreateMediaKeys = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,win32more.Foundation.BSTR,POINTER(win32more.Media.MediaFoundation.IMFMediaKeys_head), use_last_error=False)(7, 'CreateMediaKeys', ((1, 'keySystem'),(1, 'cdmStorePath'),(1, 'ppKeys'),)))
    IMFMediaEngineClassFactoryEx.IsTypeSupported = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,win32more.Foundation.BSTR,POINTER(win32more.Foundation.BOOL), use_last_error=False)(8, 'IsTypeSupported', ((1, 'type'),(1, 'keySystem'),(1, 'isSupported'),)))
    win32more.Media.MediaFoundation.IMFMediaEngineClassFactory
    return IMFMediaEngineClassFactoryEx
def _define_IMFMediaEngineClassFactory2_head():
    class IMFMediaEngineClassFactory2(win32more.System.Com.IUnknown_head):
        Guid = Guid('09083cef-867f-4bf6-8776-dee3a7b42fca')
    return IMFMediaEngineClassFactory2
def _define_IMFMediaEngineClassFactory2():
    IMFMediaEngineClassFactory2 = win32more.Media.MediaFoundation.IMFMediaEngineClassFactory2_head
    IMFMediaEngineClassFactory2.CreateMediaKeys2 = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,win32more.Foundation.BSTR,win32more.Foundation.BSTR,POINTER(win32more.Media.MediaFoundation.IMFMediaKeys_head), use_last_error=False)(3, 'CreateMediaKeys2', ((1, 'keySystem'),(1, 'defaultCdmStorePath'),(1, 'inprivateCdmStorePath'),(1, 'ppKeys'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineClassFactory2
def _define_IMFExtendedDRMTypeSupport_head():
    class IMFExtendedDRMTypeSupport(win32more.System.Com.IUnknown_head):
        Guid = Guid('332ec562-3758-468d-a784-e38f23552128')
    return IMFExtendedDRMTypeSupport
def _define_IMFExtendedDRMTypeSupport():
    IMFExtendedDRMTypeSupport = win32more.Media.MediaFoundation.IMFExtendedDRMTypeSupport_head
    IMFExtendedDRMTypeSupport.IsTypeSupportedEx = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,win32more.Foundation.BSTR,POINTER(win32more.Media.MediaFoundation.MF_MEDIA_ENGINE_CANPLAY), use_last_error=False)(3, 'IsTypeSupportedEx', ((1, 'type'),(1, 'keySystem'),(1, 'pAnswer'),)))
    win32more.System.Com.IUnknown
    return IMFExtendedDRMTypeSupport
def _define_IMFMediaEngineSupportsSourceTransfer_head():
    class IMFMediaEngineSupportsSourceTransfer(win32more.System.Com.IUnknown_head):
        Guid = Guid('a724b056-1b2e-4642-a6f3-db9420c52908')
    return IMFMediaEngineSupportsSourceTransfer
def _define_IMFMediaEngineSupportsSourceTransfer():
    IMFMediaEngineSupportsSourceTransfer = win32more.Media.MediaFoundation.IMFMediaEngineSupportsSourceTransfer_head
    IMFMediaEngineSupportsSourceTransfer.ShouldTransferSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(3, 'ShouldTransferSource', ((1, 'pfShouldTransfer'),)))
    IMFMediaEngineSupportsSourceTransfer.DetachMediaSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFByteStream_head),POINTER(win32more.Media.MediaFoundation.IMFMediaSource_head),POINTER(win32more.Media.MediaFoundation.IMFMediaSourceExtension_head), use_last_error=False)(4, 'DetachMediaSource', ((1, 'ppByteStream'),(1, 'ppMediaSource'),(1, 'ppMSE'),)))
    IMFMediaEngineSupportsSourceTransfer.AttachMediaSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFMediaSource_head,win32more.Media.MediaFoundation.IMFMediaSourceExtension_head, use_last_error=False)(5, 'AttachMediaSource', ((1, 'pByteStream'),(1, 'pMediaSource'),(1, 'pMSE'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineSupportsSourceTransfer
def _define_IMFMediaEngineTransferSource_head():
    class IMFMediaEngineTransferSource(win32more.System.Com.IUnknown_head):
        Guid = Guid('24230452-fe54-40cc-94f3-fcc394c340d6')
    return IMFMediaEngineTransferSource
def _define_IMFMediaEngineTransferSource():
    IMFMediaEngineTransferSource = win32more.Media.MediaFoundation.IMFMediaEngineTransferSource_head
    IMFMediaEngineTransferSource.TransferSourceToMediaEngine = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaEngine_head, use_last_error=False)(3, 'TransferSourceToMediaEngine', ((1, 'destination'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineTransferSource
MF_TIMED_TEXT_TRACK_KIND = Int32
MF_TIMED_TEXT_TRACK_KIND_UNKNOWN = 0
MF_TIMED_TEXT_TRACK_KIND_SUBTITLES = 1
MF_TIMED_TEXT_TRACK_KIND_CAPTIONS = 2
MF_TIMED_TEXT_TRACK_KIND_METADATA = 3
MF_TIMED_TEXT_UNIT_TYPE = Int32
MF_TIMED_TEXT_UNIT_TYPE_PIXELS = 0
MF_TIMED_TEXT_UNIT_TYPE_PERCENTAGE = 1
MF_TIMED_TEXT_FONT_STYLE = Int32
MF_TIMED_TEXT_FONT_STYLE_NORMAL = 0
MF_TIMED_TEXT_FONT_STYLE_OBLIQUE = 1
MF_TIMED_TEXT_FONT_STYLE_ITALIC = 2
MF_TIMED_TEXT_ALIGNMENT = Int32
MF_TIMED_TEXT_ALIGNMENT_START = 0
MF_TIMED_TEXT_ALIGNMENT_END = 1
MF_TIMED_TEXT_ALIGNMENT_CENTER = 2
MF_TIMED_TEXT_DISPLAY_ALIGNMENT = Int32
MF_TIMED_TEXT_DISPLAY_ALIGNMENT_BEFORE = 0
MF_TIMED_TEXT_DISPLAY_ALIGNMENT_AFTER = 1
MF_TIMED_TEXT_DISPLAY_ALIGNMENT_CENTER = 2
MF_TIMED_TEXT_DECORATION = Int32
MF_TIMED_TEXT_DECORATION_NONE = 0
MF_TIMED_TEXT_DECORATION_UNDERLINE = 1
MF_TIMED_TEXT_DECORATION_LINE_THROUGH = 2
MF_TIMED_TEXT_DECORATION_OVERLINE = 4
MF_TIMED_TEXT_WRITING_MODE = Int32
MF_TIMED_TEXT_WRITING_MODE_LRTB = 0
MF_TIMED_TEXT_WRITING_MODE_RLTB = 1
MF_TIMED_TEXT_WRITING_MODE_TBRL = 2
MF_TIMED_TEXT_WRITING_MODE_TBLR = 3
MF_TIMED_TEXT_WRITING_MODE_LR = 4
MF_TIMED_TEXT_WRITING_MODE_RL = 5
MF_TIMED_TEXT_WRITING_MODE_TB = 6
MF_TIMED_TEXT_SCROLL_MODE = Int32
MF_TIMED_TEXT_SCROLL_MODE_POP_ON = 0
MF_TIMED_TEXT_SCROLL_MODE_ROLL_UP = 1
MF_TIMED_TEXT_ERROR_CODE = Int32
MF_TIMED_TEXT_ERROR_CODE_NOERROR = 0
MF_TIMED_TEXT_ERROR_CODE_FATAL = 1
MF_TIMED_TEXT_ERROR_CODE_DATA_FORMAT = 2
MF_TIMED_TEXT_ERROR_CODE_NETWORK = 3
MF_TIMED_TEXT_ERROR_CODE_INTERNAL = 4
MF_TIMED_TEXT_CUE_EVENT = Int32
MF_TIMED_TEXT_CUE_EVENT_ACTIVE = 0
MF_TIMED_TEXT_CUE_EVENT_INACTIVE = 1
MF_TIMED_TEXT_CUE_EVENT_CLEAR = 2
MF_TIMED_TEXT_TRACK_READY_STATE = Int32
MF_TIMED_TEXT_TRACK_READY_STATE_NONE = 0
MF_TIMED_TEXT_TRACK_READY_STATE_LOADING = 1
MF_TIMED_TEXT_TRACK_READY_STATE_LOADED = 2
MF_TIMED_TEXT_TRACK_READY_STATE_ERROR = 3
MF_TIMED_TEXT_RUBY_POSITION = Int32
MF_TIMED_TEXT_RUBY_POSITION_BEFORE = 0
MF_TIMED_TEXT_RUBY_POSITION_AFTER = 1
MF_TIMED_TEXT_RUBY_POSITION_OUTSIDE = 2
MF_TIMED_TEXT_RUBY_ALIGN = Int32
MF_TIMED_TEXT_RUBY_ALIGN_CENTER = 0
MF_TIMED_TEXT_RUBY_ALIGN_START = 1
MF_TIMED_TEXT_RUBY_ALIGN_END = 2
MF_TIMED_TEXT_RUBY_ALIGN_SPACEAROUND = 3
MF_TIMED_TEXT_RUBY_ALIGN_SPACEBETWEEN = 4
MF_TIMED_TEXT_RUBY_ALIGN_WITHBASE = 5
MF_TIMED_TEXT_RUBY_RESERVE = Int32
MF_TIMED_TEXT_RUBY_RESERVE_NONE = 0
MF_TIMED_TEXT_RUBY_RESERVE_BEFORE = 1
MF_TIMED_TEXT_RUBY_RESERVE_AFTER = 2
MF_TIMED_TEXT_RUBY_RESERVE_BOTH = 3
MF_TIMED_TEXT_RUBY_RESERVE_OUTSIDE = 4
MF_TIMED_TEXT_BOUTEN_TYPE = Int32
MF_TIMED_TEXT_BOUTEN_TYPE_NONE = 0
MF_TIMED_TEXT_BOUTEN_TYPE_AUTO = 1
MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDCIRCLE = 2
MF_TIMED_TEXT_BOUTEN_TYPE_OPENCIRCLE = 3
MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDDOT = 4
MF_TIMED_TEXT_BOUTEN_TYPE_OPENDOT = 5
MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDSESAME = 6
MF_TIMED_TEXT_BOUTEN_TYPE_OPENSESAME = 7
MF_TIMED_TEXT_BOUTEN_POSITION = Int32
MF_TIMED_TEXT_BOUTEN_POSITION_BEFORE = 0
MF_TIMED_TEXT_BOUTEN_POSITION_AFTER = 1
MF_TIMED_TEXT_BOUTEN_POSITION_OUTSIDE = 2
def _define_IMFTimedText_head():
    class IMFTimedText(win32more.System.Com.IUnknown_head):
        Guid = Guid('1f2a94c9-a3df-430d-9d0f-acd85ddc29af')
    return IMFTimedText
def _define_IMFTimedText():
    IMFTimedText = win32more.Media.MediaFoundation.IMFTimedText_head
    IMFTimedText.RegisterNotifications = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTimedTextNotify_head, use_last_error=False)(3, 'RegisterNotifications', ((1, 'notify'),)))
    IMFTimedText.SelectTrack = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.BOOL, use_last_error=False)(4, 'SelectTrack', ((1, 'trackId'),(1, 'selected'),)))
    IMFTimedText.AddDataSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.MF_TIMED_TEXT_TRACK_KIND,win32more.Foundation.BOOL,POINTER(UInt32), use_last_error=False)(5, 'AddDataSource', ((1, 'byteStream'),(1, 'label'),(1, 'language'),(1, 'kind'),(1, 'isDefault'),(1, 'trackId'),)))
    IMFTimedText.AddDataSourceFromUrl = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.MF_TIMED_TEXT_TRACK_KIND,win32more.Foundation.BOOL,POINTER(UInt32), use_last_error=False)(6, 'AddDataSourceFromUrl', ((1, 'url'),(1, 'label'),(1, 'language'),(1, 'kind'),(1, 'isDefault'),(1, 'trackId'),)))
    IMFTimedText.AddTrack = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.MF_TIMED_TEXT_TRACK_KIND,POINTER(win32more.Media.MediaFoundation.IMFTimedTextTrack_head), use_last_error=False)(7, 'AddTrack', ((1, 'label'),(1, 'language'),(1, 'kind'),(1, 'track'),)))
    IMFTimedText.RemoveTrack = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTimedTextTrack_head, use_last_error=False)(8, 'RemoveTrack', ((1, 'track'),)))
    IMFTimedText.GetCueTimeOffset = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Double), use_last_error=False)(9, 'GetCueTimeOffset', ((1, 'offset'),)))
    IMFTimedText.SetCueTimeOffset = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double, use_last_error=False)(10, 'SetCueTimeOffset', ((1, 'offset'),)))
    IMFTimedText.GetTracks = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTimedTextTrackList_head), use_last_error=False)(11, 'GetTracks', ((1, 'tracks'),)))
    IMFTimedText.GetActiveTracks = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTimedTextTrackList_head), use_last_error=False)(12, 'GetActiveTracks', ((1, 'activeTracks'),)))
    IMFTimedText.GetTextTracks = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTimedTextTrackList_head), use_last_error=False)(13, 'GetTextTracks', ((1, 'textTracks'),)))
    IMFTimedText.GetMetadataTracks = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTimedTextTrackList_head), use_last_error=False)(14, 'GetMetadataTracks', ((1, 'metadataTracks'),)))
    IMFTimedText.SetInBandEnabled = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL, use_last_error=False)(15, 'SetInBandEnabled', ((1, 'enabled'),)))
    IMFTimedText.IsInBandEnabled = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=False)(16, 'IsInBandEnabled', ()))
    win32more.System.Com.IUnknown
    return IMFTimedText
def _define_IMFTimedTextNotify_head():
    class IMFTimedTextNotify(win32more.System.Com.IUnknown_head):
        Guid = Guid('df6b87b6-ce12-45db-aba7-432fe054e57d')
    return IMFTimedTextNotify
def _define_IMFTimedTextNotify():
    IMFTimedTextNotify = win32more.Media.MediaFoundation.IMFTimedTextNotify_head
    IMFTimedTextNotify.TrackAdded = COMMETHOD(WINFUNCTYPE(Void,UInt32, use_last_error=False)(3, 'TrackAdded', ((1, 'trackId'),)))
    IMFTimedTextNotify.TrackRemoved = COMMETHOD(WINFUNCTYPE(Void,UInt32, use_last_error=False)(4, 'TrackRemoved', ((1, 'trackId'),)))
    IMFTimedTextNotify.TrackSelected = COMMETHOD(WINFUNCTYPE(Void,UInt32,win32more.Foundation.BOOL, use_last_error=False)(5, 'TrackSelected', ((1, 'trackId'),(1, 'selected'),)))
    IMFTimedTextNotify.TrackReadyStateChanged = COMMETHOD(WINFUNCTYPE(Void,UInt32, use_last_error=False)(6, 'TrackReadyStateChanged', ((1, 'trackId'),)))
    IMFTimedTextNotify.Error = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.MF_TIMED_TEXT_ERROR_CODE,win32more.Foundation.HRESULT,UInt32, use_last_error=False)(7, 'Error', ((1, 'errorCode'),(1, 'extendedErrorCode'),(1, 'sourceTrackId'),)))
    IMFTimedTextNotify.Cue = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.MF_TIMED_TEXT_CUE_EVENT,Double,win32more.Media.MediaFoundation.IMFTimedTextCue_head, use_last_error=False)(8, 'Cue', ((1, 'cueEvent'),(1, 'currentTime'),(1, 'cue'),)))
    IMFTimedTextNotify.Reset = COMMETHOD(WINFUNCTYPE(Void, use_last_error=False)(9, 'Reset', ()))
    win32more.System.Com.IUnknown
    return IMFTimedTextNotify
def _define_IMFTimedTextTrack_head():
    class IMFTimedTextTrack(win32more.System.Com.IUnknown_head):
        Guid = Guid('8822c32d-654e-4233-bf21-d7f2e67d30d4')
    return IMFTimedTextTrack
def _define_IMFTimedTextTrack():
    IMFTimedTextTrack = win32more.Media.MediaFoundation.IMFTimedTextTrack_head
    IMFTimedTextTrack.GetId = COMMETHOD(WINFUNCTYPE(UInt32, use_last_error=False)(3, 'GetId', ()))
    IMFTimedTextTrack.GetLabel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR), use_last_error=False)(4, 'GetLabel', ((1, 'label'),)))
    IMFTimedTextTrack.SetLabel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR, use_last_error=False)(5, 'SetLabel', ((1, 'label'),)))
    IMFTimedTextTrack.GetLanguage = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR), use_last_error=False)(6, 'GetLanguage', ((1, 'language'),)))
    IMFTimedTextTrack.GetTrackKind = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.MF_TIMED_TEXT_TRACK_KIND, use_last_error=False)(7, 'GetTrackKind', ()))
    IMFTimedTextTrack.IsInBand = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=False)(8, 'IsInBand', ()))
    IMFTimedTextTrack.GetInBandMetadataTrackDispatchType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR), use_last_error=False)(9, 'GetInBandMetadataTrackDispatchType', ((1, 'dispatchType'),)))
    IMFTimedTextTrack.IsActive = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=False)(10, 'IsActive', ()))
    IMFTimedTextTrack.GetErrorCode = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.MF_TIMED_TEXT_ERROR_CODE, use_last_error=False)(11, 'GetErrorCode', ()))
    IMFTimedTextTrack.GetExtendedErrorCode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(12, 'GetExtendedErrorCode', ()))
    IMFTimedTextTrack.GetDataFormat = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid), use_last_error=False)(13, 'GetDataFormat', ((1, 'format'),)))
    IMFTimedTextTrack.GetReadyState = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.MF_TIMED_TEXT_TRACK_READY_STATE, use_last_error=False)(14, 'GetReadyState', ()))
    IMFTimedTextTrack.GetCueList = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTimedTextCueList_head), use_last_error=False)(15, 'GetCueList', ((1, 'cues'),)))
    win32more.System.Com.IUnknown
    return IMFTimedTextTrack
def _define_IMFTimedTextTrackList_head():
    class IMFTimedTextTrackList(win32more.System.Com.IUnknown_head):
        Guid = Guid('23ff334c-442c-445f-bccc-edc438aa11e2')
    return IMFTimedTextTrackList
def _define_IMFTimedTextTrackList():
    IMFTimedTextTrackList = win32more.Media.MediaFoundation.IMFTimedTextTrackList_head
    IMFTimedTextTrackList.GetLength = COMMETHOD(WINFUNCTYPE(UInt32, use_last_error=False)(3, 'GetLength', ()))
    IMFTimedTextTrackList.GetTrack = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFTimedTextTrack_head), use_last_error=False)(4, 'GetTrack', ((1, 'index'),(1, 'track'),)))
    IMFTimedTextTrackList.GetTrackById = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFTimedTextTrack_head), use_last_error=False)(5, 'GetTrackById', ((1, 'trackId'),(1, 'track'),)))
    win32more.System.Com.IUnknown
    return IMFTimedTextTrackList
def _define_IMFTimedTextCue_head():
    class IMFTimedTextCue(win32more.System.Com.IUnknown_head):
        Guid = Guid('1e560447-9a2b-43e1-a94c-b0aaabfbfbc9')
    return IMFTimedTextCue
def _define_IMFTimedTextCue():
    IMFTimedTextCue = win32more.Media.MediaFoundation.IMFTimedTextCue_head
    IMFTimedTextCue.GetId = COMMETHOD(WINFUNCTYPE(UInt32, use_last_error=False)(3, 'GetId', ()))
    IMFTimedTextCue.GetOriginalId = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR), use_last_error=False)(4, 'GetOriginalId', ((1, 'originalId'),)))
    IMFTimedTextCue.GetCueKind = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.MF_TIMED_TEXT_TRACK_KIND, use_last_error=False)(5, 'GetCueKind', ()))
    IMFTimedTextCue.GetStartTime = COMMETHOD(WINFUNCTYPE(Double, use_last_error=False)(6, 'GetStartTime', ()))
    IMFTimedTextCue.GetDuration = COMMETHOD(WINFUNCTYPE(Double, use_last_error=False)(7, 'GetDuration', ()))
    IMFTimedTextCue.GetTrackId = COMMETHOD(WINFUNCTYPE(UInt32, use_last_error=False)(8, 'GetTrackId', ()))
    IMFTimedTextCue.GetData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTimedTextBinary_head), use_last_error=False)(9, 'GetData', ((1, 'data'),)))
    IMFTimedTextCue.GetRegion = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTimedTextRegion_head), use_last_error=False)(10, 'GetRegion', ((1, 'region'),)))
    IMFTimedTextCue.GetStyle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTimedTextStyle_head), use_last_error=False)(11, 'GetStyle', ((1, 'style'),)))
    IMFTimedTextCue.GetLineCount = COMMETHOD(WINFUNCTYPE(UInt32, use_last_error=False)(12, 'GetLineCount', ()))
    IMFTimedTextCue.GetLine = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFTimedTextFormattedText_head), use_last_error=False)(13, 'GetLine', ((1, 'index'),(1, 'line'),)))
    win32more.System.Com.IUnknown
    return IMFTimedTextCue
def _define_IMFTimedTextFormattedText_head():
    class IMFTimedTextFormattedText(win32more.System.Com.IUnknown_head):
        Guid = Guid('e13af3c1-4d47-4354-b1f5-e83ae0ecae60')
    return IMFTimedTextFormattedText
def _define_IMFTimedTextFormattedText():
    IMFTimedTextFormattedText = win32more.Media.MediaFoundation.IMFTimedTextFormattedText_head
    IMFTimedTextFormattedText.GetText = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR), use_last_error=False)(3, 'GetText', ((1, 'text'),)))
    IMFTimedTextFormattedText.GetSubformattingCount = COMMETHOD(WINFUNCTYPE(UInt32, use_last_error=False)(4, 'GetSubformattingCount', ()))
    IMFTimedTextFormattedText.GetSubformatting = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32),POINTER(UInt32),POINTER(win32more.Media.MediaFoundation.IMFTimedTextStyle_head), use_last_error=False)(5, 'GetSubformatting', ((1, 'index'),(1, 'firstChar'),(1, 'charLength'),(1, 'style'),)))
    win32more.System.Com.IUnknown
    return IMFTimedTextFormattedText
def _define_IMFTimedTextStyle_head():
    class IMFTimedTextStyle(win32more.System.Com.IUnknown_head):
        Guid = Guid('09b2455d-b834-4f01-a347-9052e21c450e')
    return IMFTimedTextStyle
def _define_IMFTimedTextStyle():
    IMFTimedTextStyle = win32more.Media.MediaFoundation.IMFTimedTextStyle_head
    IMFTimedTextStyle.GetName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR), use_last_error=False)(3, 'GetName', ((1, 'name'),)))
    IMFTimedTextStyle.IsExternal = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=False)(4, 'IsExternal', ()))
    IMFTimedTextStyle.GetFontFamily = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR), use_last_error=False)(5, 'GetFontFamily', ((1, 'fontFamily'),)))
    IMFTimedTextStyle.GetFontSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Double),POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_UNIT_TYPE), use_last_error=False)(6, 'GetFontSize', ((1, 'fontSize'),(1, 'unitType'),)))
    IMFTimedTextStyle.GetColor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFARGB_head), use_last_error=False)(7, 'GetColor', ((1, 'color'),)))
    IMFTimedTextStyle.GetBackgroundColor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFARGB_head), use_last_error=False)(8, 'GetBackgroundColor', ((1, 'bgColor'),)))
    IMFTimedTextStyle.GetShowBackgroundAlways = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(9, 'GetShowBackgroundAlways', ((1, 'showBackgroundAlways'),)))
    IMFTimedTextStyle.GetFontStyle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_FONT_STYLE), use_last_error=False)(10, 'GetFontStyle', ((1, 'fontStyle'),)))
    IMFTimedTextStyle.GetBold = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(11, 'GetBold', ((1, 'bold'),)))
    IMFTimedTextStyle.GetRightToLeft = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(12, 'GetRightToLeft', ((1, 'rightToLeft'),)))
    IMFTimedTextStyle.GetTextAlignment = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_ALIGNMENT), use_last_error=False)(13, 'GetTextAlignment', ((1, 'textAlign'),)))
    IMFTimedTextStyle.GetTextDecoration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(14, 'GetTextDecoration', ((1, 'textDecoration'),)))
    IMFTimedTextStyle.GetTextOutline = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFARGB_head),POINTER(Double),POINTER(Double),POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_UNIT_TYPE), use_last_error=False)(15, 'GetTextOutline', ((1, 'color'),(1, 'thickness'),(1, 'blurRadius'),(1, 'unitType'),)))
    win32more.System.Com.IUnknown
    return IMFTimedTextStyle
def _define_IMFTimedTextRegion_head():
    class IMFTimedTextRegion(win32more.System.Com.IUnknown_head):
        Guid = Guid('c8d22afc-bc47-4bdf-9b04-787e49ce3f58')
    return IMFTimedTextRegion
def _define_IMFTimedTextRegion():
    IMFTimedTextRegion = win32more.Media.MediaFoundation.IMFTimedTextRegion_head
    IMFTimedTextRegion.GetName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR), use_last_error=False)(3, 'GetName', ((1, 'name'),)))
    IMFTimedTextRegion.GetPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Double),POINTER(Double),POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_UNIT_TYPE), use_last_error=False)(4, 'GetPosition', ((1, 'pX'),(1, 'pY'),(1, 'unitType'),)))
    IMFTimedTextRegion.GetExtent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Double),POINTER(Double),POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_UNIT_TYPE), use_last_error=False)(5, 'GetExtent', ((1, 'pWidth'),(1, 'pHeight'),(1, 'unitType'),)))
    IMFTimedTextRegion.GetBackgroundColor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFARGB_head), use_last_error=False)(6, 'GetBackgroundColor', ((1, 'bgColor'),)))
    IMFTimedTextRegion.GetWritingMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_WRITING_MODE), use_last_error=False)(7, 'GetWritingMode', ((1, 'writingMode'),)))
    IMFTimedTextRegion.GetDisplayAlignment = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_DISPLAY_ALIGNMENT), use_last_error=False)(8, 'GetDisplayAlignment', ((1, 'displayAlign'),)))
    IMFTimedTextRegion.GetLineHeight = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Double),POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_UNIT_TYPE), use_last_error=False)(9, 'GetLineHeight', ((1, 'pLineHeight'),(1, 'unitType'),)))
    IMFTimedTextRegion.GetClipOverflow = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(10, 'GetClipOverflow', ((1, 'clipOverflow'),)))
    IMFTimedTextRegion.GetPadding = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Double),POINTER(Double),POINTER(Double),POINTER(Double),POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_UNIT_TYPE), use_last_error=False)(11, 'GetPadding', ((1, 'before'),(1, 'start'),(1, 'after'),(1, 'end'),(1, 'unitType'),)))
    IMFTimedTextRegion.GetWrap = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(12, 'GetWrap', ((1, 'wrap'),)))
    IMFTimedTextRegion.GetZIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int32), use_last_error=False)(13, 'GetZIndex', ((1, 'zIndex'),)))
    IMFTimedTextRegion.GetScrollMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_SCROLL_MODE), use_last_error=False)(14, 'GetScrollMode', ((1, 'scrollMode'),)))
    win32more.System.Com.IUnknown
    return IMFTimedTextRegion
def _define_IMFTimedTextBinary_head():
    class IMFTimedTextBinary(win32more.System.Com.IUnknown_head):
        Guid = Guid('4ae3a412-0545-43c4-bf6f-6b97a5c6c432')
    return IMFTimedTextBinary
def _define_IMFTimedTextBinary():
    IMFTimedTextBinary = win32more.Media.MediaFoundation.IMFTimedTextBinary_head
    IMFTimedTextBinary.GetData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(c_char_p_no),POINTER(UInt32), use_last_error=False)(3, 'GetData', ((1, 'data'),(1, 'length'),)))
    win32more.System.Com.IUnknown
    return IMFTimedTextBinary
def _define_IMFTimedTextCueList_head():
    class IMFTimedTextCueList(win32more.System.Com.IUnknown_head):
        Guid = Guid('ad128745-211b-40a0-9981-fe65f166d0fd')
    return IMFTimedTextCueList
def _define_IMFTimedTextCueList():
    IMFTimedTextCueList = win32more.Media.MediaFoundation.IMFTimedTextCueList_head
    IMFTimedTextCueList.GetLength = COMMETHOD(WINFUNCTYPE(UInt32, use_last_error=False)(3, 'GetLength', ()))
    IMFTimedTextCueList.GetCueByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFTimedTextCue_head), use_last_error=False)(4, 'GetCueByIndex', ((1, 'index'),(1, 'cue'),)))
    IMFTimedTextCueList.GetCueById = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFTimedTextCue_head), use_last_error=False)(5, 'GetCueById', ((1, 'id'),(1, 'cue'),)))
    IMFTimedTextCueList.GetCueByOriginalId = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.IMFTimedTextCue_head), use_last_error=False)(6, 'GetCueByOriginalId', ((1, 'originalId'),(1, 'cue'),)))
    IMFTimedTextCueList.AddTextCue = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double,Double,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.IMFTimedTextCue_head), use_last_error=False)(7, 'AddTextCue', ((1, 'start'),(1, 'duration'),(1, 'text'),(1, 'cue'),)))
    IMFTimedTextCueList.AddDataCue = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double,Double,c_char_p_no,UInt32,POINTER(win32more.Media.MediaFoundation.IMFTimedTextCue_head), use_last_error=False)(8, 'AddDataCue', ((1, 'start'),(1, 'duration'),(1, 'data'),(1, 'dataSize'),(1, 'cue'),)))
    IMFTimedTextCueList.RemoveCue = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTimedTextCue_head, use_last_error=False)(9, 'RemoveCue', ((1, 'cue'),)))
    win32more.System.Com.IUnknown
    return IMFTimedTextCueList
def _define_IMFTimedTextRuby_head():
    class IMFTimedTextRuby(win32more.System.Com.IUnknown_head):
        Guid = Guid('76c6a6f5-4955-4de5-b27b-14b734cc14b4')
    return IMFTimedTextRuby
def _define_IMFTimedTextRuby():
    IMFTimedTextRuby = win32more.Media.MediaFoundation.IMFTimedTextRuby_head
    IMFTimedTextRuby.GetRubyText = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR), use_last_error=False)(3, 'GetRubyText', ((1, 'rubyText'),)))
    IMFTimedTextRuby.GetRubyPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_RUBY_POSITION), use_last_error=False)(4, 'GetRubyPosition', ((1, 'value'),)))
    IMFTimedTextRuby.GetRubyAlign = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_RUBY_ALIGN), use_last_error=False)(5, 'GetRubyAlign', ((1, 'value'),)))
    IMFTimedTextRuby.GetRubyReserve = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_RUBY_RESERVE), use_last_error=False)(6, 'GetRubyReserve', ((1, 'value'),)))
    win32more.System.Com.IUnknown
    return IMFTimedTextRuby
def _define_IMFTimedTextBouten_head():
    class IMFTimedTextBouten(win32more.System.Com.IUnknown_head):
        Guid = Guid('3c5f3e8a-90c0-464e-8136-898d2975f847')
    return IMFTimedTextBouten
def _define_IMFTimedTextBouten():
    IMFTimedTextBouten = win32more.Media.MediaFoundation.IMFTimedTextBouten_head
    IMFTimedTextBouten.GetBoutenType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_BOUTEN_TYPE), use_last_error=False)(3, 'GetBoutenType', ((1, 'value'),)))
    IMFTimedTextBouten.GetBoutenColor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFARGB_head), use_last_error=False)(4, 'GetBoutenColor', ((1, 'value'),)))
    IMFTimedTextBouten.GetBoutenPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_BOUTEN_POSITION), use_last_error=False)(5, 'GetBoutenPosition', ((1, 'value'),)))
    win32more.System.Com.IUnknown
    return IMFTimedTextBouten
def _define_IMFTimedTextStyle2_head():
    class IMFTimedTextStyle2(win32more.System.Com.IUnknown_head):
        Guid = Guid('db639199-c809-4c89-bfca-d0bbb9729d6e')
    return IMFTimedTextStyle2
def _define_IMFTimedTextStyle2():
    IMFTimedTextStyle2 = win32more.Media.MediaFoundation.IMFTimedTextStyle2_head
    IMFTimedTextStyle2.GetRuby = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTimedTextRuby_head), use_last_error=False)(3, 'GetRuby', ((1, 'ruby'),)))
    IMFTimedTextStyle2.GetBouten = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTimedTextBouten_head), use_last_error=False)(4, 'GetBouten', ((1, 'bouten'),)))
    IMFTimedTextStyle2.IsTextCombined = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(5, 'IsTextCombined', ((1, 'value'),)))
    IMFTimedTextStyle2.GetFontAngleInDegrees = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Double), use_last_error=False)(6, 'GetFontAngleInDegrees', ((1, 'value'),)))
    win32more.System.Com.IUnknown
    return IMFTimedTextStyle2
MF_MEDIA_ENGINE_STREAMTYPE_FAILED = Int32
MF_MEDIA_ENGINE_STREAMTYPE_FAILED_UNKNOWN = 0
MF_MEDIA_ENGINE_STREAMTYPE_FAILED_AUDIO = 1
MF_MEDIA_ENGINE_STREAMTYPE_FAILED_VIDEO = 2
def _define_IMFMediaEngineEMENotify_head():
    class IMFMediaEngineEMENotify(win32more.System.Com.IUnknown_head):
        Guid = Guid('9e184d15-cdb7-4f86-b49e-566689f4a601')
    return IMFMediaEngineEMENotify
def _define_IMFMediaEngineEMENotify():
    IMFMediaEngineEMENotify = win32more.Media.MediaFoundation.IMFMediaEngineEMENotify_head
    IMFMediaEngineEMENotify.Encrypted = COMMETHOD(WINFUNCTYPE(Void,c_char_p_no,UInt32,win32more.Foundation.BSTR, use_last_error=False)(3, 'Encrypted', ((1, 'pbInitData'),(1, 'cb'),(1, 'bstrInitDataType'),)))
    IMFMediaEngineEMENotify.WaitingForKey = COMMETHOD(WINFUNCTYPE(Void, use_last_error=False)(4, 'WaitingForKey', ()))
    win32more.System.Com.IUnknown
    return IMFMediaEngineEMENotify
MF_MEDIAKEYS_REQUIREMENT = Int32
MF_MEDIAKEYS_REQUIREMENT_REQUIRED = 1
MF_MEDIAKEYS_REQUIREMENT_OPTIONAL = 2
MF_MEDIAKEYS_REQUIREMENT_NOT_ALLOWED = 3
def _define_IMFMediaKeySessionNotify2_head():
    class IMFMediaKeySessionNotify2(win32more.Media.MediaFoundation.IMFMediaKeySessionNotify_head):
        Guid = Guid('c3a9e92a-da88-46b0-a110-6cf953026cb9')
    return IMFMediaKeySessionNotify2
def _define_IMFMediaKeySessionNotify2():
    IMFMediaKeySessionNotify2 = win32more.Media.MediaFoundation.IMFMediaKeySessionNotify2_head
    IMFMediaKeySessionNotify2.KeyMessage2 = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.MF_MEDIAKEYSESSION_MESSAGETYPE,win32more.Foundation.BSTR,c_char_p_no,UInt32, use_last_error=False)(6, 'KeyMessage2', ((1, 'eMessageType'),(1, 'destinationURL'),(1, 'pbMessage'),(1, 'cbMessage'),)))
    IMFMediaKeySessionNotify2.KeyStatusChange = COMMETHOD(WINFUNCTYPE(Void, use_last_error=False)(7, 'KeyStatusChange', ()))
    win32more.Media.MediaFoundation.IMFMediaKeySessionNotify
    return IMFMediaKeySessionNotify2
def _define_IMFMediaKeySystemAccess_head():
    class IMFMediaKeySystemAccess(win32more.System.Com.IUnknown_head):
        Guid = Guid('aec63fda-7a97-4944-b35c-6c6df8085cc3')
    return IMFMediaKeySystemAccess
def _define_IMFMediaKeySystemAccess():
    IMFMediaKeySystemAccess = win32more.Media.MediaFoundation.IMFMediaKeySystemAccess_head
    IMFMediaKeySystemAccess.CreateMediaKeys = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.UI.Shell.PropertiesSystem.IPropertyStore_head,POINTER(win32more.Media.MediaFoundation.IMFMediaKeys2_head), use_last_error=False)(3, 'CreateMediaKeys', ((1, 'pCdmCustomConfig'),(1, 'ppKeys'),)))
    IMFMediaKeySystemAccess.get_SupportedConfiguration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.UI.Shell.PropertiesSystem.IPropertyStore_head), use_last_error=False)(4, 'get_SupportedConfiguration', ((1, 'ppSupportedConfiguration'),)))
    IMFMediaKeySystemAccess.get_KeySystem = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BSTR), use_last_error=False)(5, 'get_KeySystem', ((1, 'pKeySystem'),)))
    win32more.System.Com.IUnknown
    return IMFMediaKeySystemAccess
def _define_IMFMediaEngineClassFactory3_head():
    class IMFMediaEngineClassFactory3(win32more.System.Com.IUnknown_head):
        Guid = Guid('3787614f-65f7-4003-b673-ead8293a0e60')
    return IMFMediaEngineClassFactory3
def _define_IMFMediaEngineClassFactory3():
    IMFMediaEngineClassFactory3 = win32more.Media.MediaFoundation.IMFMediaEngineClassFactory3_head
    IMFMediaEngineClassFactory3.CreateMediaKeySystemAccess = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,POINTER(win32more.UI.Shell.PropertiesSystem.IPropertyStore_head),UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaKeySystemAccess_head), use_last_error=False)(3, 'CreateMediaKeySystemAccess', ((1, 'keySystem'),(1, 'ppSupportedConfigurationsArray'),(1, 'uSize'),(1, 'ppKeyAccess'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineClassFactory3
def _define_IMFMediaKeys2_head():
    class IMFMediaKeys2(win32more.Media.MediaFoundation.IMFMediaKeys_head):
        Guid = Guid('45892507-ad66-4de2-83a2-acbb13cd8d43')
    return IMFMediaKeys2
def _define_IMFMediaKeys2():
    IMFMediaKeys2 = win32more.Media.MediaFoundation.IMFMediaKeys2_head
    IMFMediaKeys2.CreateSession2 = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_MEDIAKEYSESSION_TYPE,win32more.Media.MediaFoundation.IMFMediaKeySessionNotify2_head,POINTER(win32more.Media.MediaFoundation.IMFMediaKeySession2_head), use_last_error=False)(7, 'CreateSession2', ((1, 'eSessionType'),(1, 'pMFMediaKeySessionNotify2'),(1, 'ppSession'),)))
    IMFMediaKeys2.SetServerCertificate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32, use_last_error=False)(8, 'SetServerCertificate', ((1, 'pbServerCertificate'),(1, 'cb'),)))
    IMFMediaKeys2.GetDOMException = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HRESULT,POINTER(win32more.Foundation.HRESULT), use_last_error=False)(9, 'GetDOMException', ((1, 'systemCode'),(1, 'code'),)))
    win32more.Media.MediaFoundation.IMFMediaKeys
    return IMFMediaKeys2
def _define_IMFMediaKeySession2_head():
    class IMFMediaKeySession2(win32more.Media.MediaFoundation.IMFMediaKeySession_head):
        Guid = Guid('e9707e05-6d55-4636-b185-3de21210bd75')
    return IMFMediaKeySession2
def _define_IMFMediaKeySession2():
    IMFMediaKeySession2 = win32more.Media.MediaFoundation.IMFMediaKeySession2_head
    IMFMediaKeySession2.get_KeyStatuses = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(POINTER(win32more.Media.MediaFoundation.MFMediaKeyStatus_head)),POINTER(UInt32), use_last_error=False)(8, 'get_KeyStatuses', ((1, 'pKeyStatusesArray'),(1, 'puSize'),)))
    IMFMediaKeySession2.Load = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,POINTER(win32more.Foundation.BOOL), use_last_error=False)(9, 'Load', ((1, 'bstrSessionId'),(1, 'pfLoaded'),)))
    IMFMediaKeySession2.GenerateRequest = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,c_char_p_no,UInt32, use_last_error=False)(10, 'GenerateRequest', ((1, 'initDataType'),(1, 'pbInitData'),(1, 'cb'),)))
    IMFMediaKeySession2.get_Expiration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Double), use_last_error=False)(11, 'get_Expiration', ((1, 'dblExpiration'),)))
    IMFMediaKeySession2.Remove = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(12, 'Remove', ()))
    IMFMediaKeySession2.Shutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(13, 'Shutdown', ()))
    win32more.Media.MediaFoundation.IMFMediaKeySession
    return IMFMediaKeySession2
def _define_IMFMediaEngineClassFactory4_head():
    class IMFMediaEngineClassFactory4(win32more.System.Com.IUnknown_head):
        Guid = Guid('fbe256c1-43cf-4a9b-8cb8-ce8632a34186')
    return IMFMediaEngineClassFactory4
def _define_IMFMediaEngineClassFactory4():
    IMFMediaEngineClassFactory4 = win32more.Media.MediaFoundation.IMFMediaEngineClassFactory4_head
    IMFMediaEngineClassFactory4.CreateContentDecryptionModuleFactory = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(3, 'CreateContentDecryptionModuleFactory', ((1, 'keySystem'),(1, 'riid'),(1, 'ppvObject'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineClassFactory4
def _define_IMFDLNASinkInit_head():
    class IMFDLNASinkInit(win32more.System.Com.IUnknown_head):
        Guid = Guid('0c012799-1b61-4c10-bda9-04445be5f561')
    return IMFDLNASinkInit
def _define_IMFDLNASinkInit():
    IMFDLNASinkInit = win32more.Media.MediaFoundation.IMFDLNASinkInit_head
    IMFDLNASinkInit.Initialize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Foundation.BOOL, use_last_error=False)(3, 'Initialize', ((1, 'pByteStream'),(1, 'fPal'),)))
    win32more.System.Com.IUnknown
    return IMFDLNASinkInit
def _define_MFMPEG2DLNASINKSTATS_head():
    class MFMPEG2DLNASINKSTATS(Structure):
        pass
    return MFMPEG2DLNASINKSTATS
def _define_MFMPEG2DLNASINKSTATS():
    MFMPEG2DLNASINKSTATS = win32more.Media.MediaFoundation.MFMPEG2DLNASINKSTATS_head
    MFMPEG2DLNASINKSTATS._fields_ = [
        ("cBytesWritten", UInt64),
        ("fPAL", win32more.Foundation.BOOL),
        ("fccVideo", UInt32),
        ("dwVideoWidth", UInt32),
        ("dwVideoHeight", UInt32),
        ("cVideoFramesReceived", UInt64),
        ("cVideoFramesEncoded", UInt64),
        ("cVideoFramesSkipped", UInt64),
        ("cBlackVideoFramesEncoded", UInt64),
        ("cVideoFramesDuplicated", UInt64),
        ("cAudioSamplesPerSec", UInt32),
        ("cAudioChannels", UInt32),
        ("cAudioBytesReceived", UInt64),
        ("cAudioFramesEncoded", UInt64),
    ]
    return MFMPEG2DLNASINKSTATS
def _define_IMFReadWriteClassFactory_head():
    class IMFReadWriteClassFactory(win32more.System.Com.IUnknown_head):
        Guid = Guid('e7fe2e12-661c-40da-92f9-4f002ab67627')
    return IMFReadWriteClassFactory
def _define_IMFReadWriteClassFactory():
    IMFReadWriteClassFactory = win32more.Media.MediaFoundation.IMFReadWriteClassFactory_head
    IMFReadWriteClassFactory.CreateInstanceFromURL = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(3, 'CreateInstanceFromURL', ((1, 'clsid'),(1, 'pwszURL'),(1, 'pAttributes'),(1, 'riid'),(1, 'ppvObject'),)))
    IMFReadWriteClassFactory.CreateInstanceFromObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),win32more.System.Com.IUnknown_head,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(4, 'CreateInstanceFromObject', ((1, 'clsid'),(1, 'punkObject'),(1, 'pAttributes'),(1, 'riid'),(1, 'ppvObject'),)))
    win32more.System.Com.IUnknown
    return IMFReadWriteClassFactory
MF_SOURCE_READER_FLAG = Int32
MF_SOURCE_READERF_ERROR = 1
MF_SOURCE_READERF_ENDOFSTREAM = 2
MF_SOURCE_READERF_NEWSTREAM = 4
MF_SOURCE_READERF_NATIVEMEDIATYPECHANGED = 16
MF_SOURCE_READERF_CURRENTMEDIATYPECHANGED = 32
MF_SOURCE_READERF_STREAMTICK = 256
MF_SOURCE_READERF_ALLEFFECTSREMOVED = 512
MF_SOURCE_READER_CONTROL_FLAG = Int32
MF_SOURCE_READER_CONTROLF_DRAIN = 1
MF_SOURCE_READER_CONSTANTS = Int32
MF_SOURCE_READER_INVALID_STREAM_INDEX = -1
MF_SOURCE_READER_ALL_STREAMS = -2
MF_SOURCE_READER_ANY_STREAM = -2
MF_SOURCE_READER_FIRST_AUDIO_STREAM = -3
MF_SOURCE_READER_FIRST_VIDEO_STREAM = -4
MF_SOURCE_READER_MEDIASOURCE = -1
MF_SOURCE_READER_CURRENT_TYPE_CONSTANTS = Int32
MF_SOURCE_READER_CURRENT_TYPE_INDEX = -1
def _define_IMFSourceReader_head():
    class IMFSourceReader(win32more.System.Com.IUnknown_head):
        Guid = Guid('70ae66f2-c809-4e4f-8915-bdcb406b7993')
    return IMFSourceReader
def _define_IMFSourceReader():
    IMFSourceReader = win32more.Media.MediaFoundation.IMFSourceReader_head
    IMFSourceReader.GetStreamSelection = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Foundation.BOOL), use_last_error=False)(3, 'GetStreamSelection', ((1, 'dwStreamIndex'),(1, 'pfSelected'),)))
    IMFSourceReader.SetStreamSelection = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.BOOL, use_last_error=False)(4, 'SetStreamSelection', ((1, 'dwStreamIndex'),(1, 'fSelected'),)))
    IMFSourceReader.GetNativeMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head), use_last_error=False)(5, 'GetNativeMediaType', ((1, 'dwStreamIndex'),(1, 'dwMediaTypeIndex'),(1, 'ppMediaType'),)))
    IMFSourceReader.GetCurrentMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head), use_last_error=False)(6, 'GetCurrentMediaType', ((1, 'dwStreamIndex'),(1, 'ppMediaType'),)))
    IMFSourceReader.SetCurrentMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32),win32more.Media.MediaFoundation.IMFMediaType_head, use_last_error=False)(7, 'SetCurrentMediaType', ((1, 'dwStreamIndex'),(1, 'pdwReserved'),(1, 'pMediaType'),)))
    IMFSourceReader.SetCurrentPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(8, 'SetCurrentPosition', ((1, 'guidTimeFormat'),(1, 'varPosition'),)))
    IMFSourceReader.ReadSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(UInt32),POINTER(UInt32),POINTER(Int64),POINTER(win32more.Media.MediaFoundation.IMFSample_head), use_last_error=False)(9, 'ReadSample', ((1, 'dwStreamIndex'),(1, 'dwControlFlags'),(1, 'pdwActualStreamIndex'),(1, 'pdwStreamFlags'),(1, 'pllTimestamp'),(1, 'ppSample'),)))
    IMFSourceReader.Flush = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(10, 'Flush', ((1, 'dwStreamIndex'),)))
    IMFSourceReader.GetServiceForStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),POINTER(Guid),POINTER(c_void_p), use_last_error=False)(11, 'GetServiceForStream', ((1, 'dwStreamIndex'),(1, 'guidService'),(1, 'riid'),(1, 'ppvObject'),)))
    IMFSourceReader.GetPresentationAttribute = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(12, 'GetPresentationAttribute', ((1, 'dwStreamIndex'),(1, 'guidAttribute'),(1, 'pvarAttribute'),)))
    win32more.System.Com.IUnknown
    return IMFSourceReader
def _define_IMFSourceReaderEx_head():
    class IMFSourceReaderEx(win32more.Media.MediaFoundation.IMFSourceReader_head):
        Guid = Guid('7b981cf0-560e-4116-9875-b099895f23d7')
    return IMFSourceReaderEx
def _define_IMFSourceReaderEx():
    IMFSourceReaderEx = win32more.Media.MediaFoundation.IMFSourceReaderEx_head
    IMFSourceReaderEx.SetNativeMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(UInt32), use_last_error=False)(13, 'SetNativeMediaType', ((1, 'dwStreamIndex'),(1, 'pMediaType'),(1, 'pdwStreamFlags'),)))
    IMFSourceReaderEx.AddTransformForStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.System.Com.IUnknown_head, use_last_error=False)(14, 'AddTransformForStream', ((1, 'dwStreamIndex'),(1, 'pTransformOrActivate'),)))
    IMFSourceReaderEx.RemoveAllTransformsForStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(15, 'RemoveAllTransformsForStream', ((1, 'dwStreamIndex'),)))
    IMFSourceReaderEx.GetTransformForStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.IMFTransform_head), use_last_error=False)(16, 'GetTransformForStream', ((1, 'dwStreamIndex'),(1, 'dwTransformIndex'),(1, 'pGuidCategory'),(1, 'ppTransform'),)))
    win32more.Media.MediaFoundation.IMFSourceReader
    return IMFSourceReaderEx
def _define_IMFSourceReaderCallback_head():
    class IMFSourceReaderCallback(win32more.System.Com.IUnknown_head):
        Guid = Guid('deec8d99-fa1d-4d82-84c2-2c8969944867')
    return IMFSourceReaderCallback
def _define_IMFSourceReaderCallback():
    IMFSourceReaderCallback = win32more.Media.MediaFoundation.IMFSourceReaderCallback_head
    IMFSourceReaderCallback.OnReadSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HRESULT,UInt32,UInt32,Int64,win32more.Media.MediaFoundation.IMFSample_head, use_last_error=False)(3, 'OnReadSample', ((1, 'hrStatus'),(1, 'dwStreamIndex'),(1, 'dwStreamFlags'),(1, 'llTimestamp'),(1, 'pSample'),)))
    IMFSourceReaderCallback.OnFlush = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(4, 'OnFlush', ((1, 'dwStreamIndex'),)))
    IMFSourceReaderCallback.OnEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaEvent_head, use_last_error=False)(5, 'OnEvent', ((1, 'dwStreamIndex'),(1, 'pEvent'),)))
    win32more.System.Com.IUnknown
    return IMFSourceReaderCallback
def _define_IMFSourceReaderCallback2_head():
    class IMFSourceReaderCallback2(win32more.Media.MediaFoundation.IMFSourceReaderCallback_head):
        Guid = Guid('cf839fe6-8c2a-4dd2-b6ea-c22d6961af05')
    return IMFSourceReaderCallback2
def _define_IMFSourceReaderCallback2():
    IMFSourceReaderCallback2 = win32more.Media.MediaFoundation.IMFSourceReaderCallback2_head
    IMFSourceReaderCallback2.OnTransformChange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(6, 'OnTransformChange', ()))
    IMFSourceReaderCallback2.OnStreamError = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.HRESULT, use_last_error=False)(7, 'OnStreamError', ((1, 'dwStreamIndex'),(1, 'hrStatus'),)))
    win32more.Media.MediaFoundation.IMFSourceReaderCallback
    return IMFSourceReaderCallback2
MF_SINK_WRITER_CONSTANTS = UInt32
MF_SINK_WRITER_INVALID_STREAM_INDEX = 4294967295
MF_SINK_WRITER_ALL_STREAMS = 4294967294
MF_SINK_WRITER_MEDIASINK = 4294967295
def _define_MF_SINK_WRITER_STATISTICS_head():
    class MF_SINK_WRITER_STATISTICS(Structure):
        pass
    return MF_SINK_WRITER_STATISTICS
def _define_MF_SINK_WRITER_STATISTICS():
    MF_SINK_WRITER_STATISTICS = win32more.Media.MediaFoundation.MF_SINK_WRITER_STATISTICS_head
    MF_SINK_WRITER_STATISTICS._fields_ = [
        ("cb", UInt32),
        ("llLastTimestampReceived", Int64),
        ("llLastTimestampEncoded", Int64),
        ("llLastTimestampProcessed", Int64),
        ("llLastStreamTickReceived", Int64),
        ("llLastSinkSampleRequest", Int64),
        ("qwNumSamplesReceived", UInt64),
        ("qwNumSamplesEncoded", UInt64),
        ("qwNumSamplesProcessed", UInt64),
        ("qwNumStreamTicksReceived", UInt64),
        ("dwByteCountQueued", UInt32),
        ("qwByteCountProcessed", UInt64),
        ("dwNumOutstandingSinkSampleRequests", UInt32),
        ("dwAverageSampleRateReceived", UInt32),
        ("dwAverageSampleRateEncoded", UInt32),
        ("dwAverageSampleRateProcessed", UInt32),
    ]
    return MF_SINK_WRITER_STATISTICS
def _define_IMFSinkWriter_head():
    class IMFSinkWriter(win32more.System.Com.IUnknown_head):
        Guid = Guid('3137f1cd-fe5e-4805-a5d8-fb477448cb3d')
    return IMFSinkWriter
def _define_IMFSinkWriter():
    IMFSinkWriter = win32more.Media.MediaFoundation.IMFSinkWriter_head
    IMFSinkWriter.AddStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(UInt32), use_last_error=False)(3, 'AddStream', ((1, 'pTargetMediaType'),(1, 'pdwStreamIndex'),)))
    IMFSinkWriter.SetInputMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.Media.MediaFoundation.IMFAttributes_head, use_last_error=False)(4, 'SetInputMediaType', ((1, 'dwStreamIndex'),(1, 'pInputMediaType'),(1, 'pEncodingParameters'),)))
    IMFSinkWriter.BeginWriting = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(5, 'BeginWriting', ()))
    IMFSinkWriter.WriteSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFSample_head, use_last_error=False)(6, 'WriteSample', ((1, 'dwStreamIndex'),(1, 'pSample'),)))
    IMFSinkWriter.SendStreamTick = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,Int64, use_last_error=False)(7, 'SendStreamTick', ((1, 'dwStreamIndex'),(1, 'llTimestamp'),)))
    IMFSinkWriter.PlaceMarker = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_void_p, use_last_error=False)(8, 'PlaceMarker', ((1, 'dwStreamIndex'),(1, 'pvContext'),)))
    IMFSinkWriter.NotifyEndOfSegment = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(9, 'NotifyEndOfSegment', ((1, 'dwStreamIndex'),)))
    IMFSinkWriter.Flush = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(10, 'Flush', ((1, 'dwStreamIndex'),)))
    IMFSinkWriter.Finalize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(11, 'Finalize', ()))
    IMFSinkWriter.GetServiceForStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),POINTER(Guid),POINTER(c_void_p), use_last_error=False)(12, 'GetServiceForStream', ((1, 'dwStreamIndex'),(1, 'guidService'),(1, 'riid'),(1, 'ppvObject'),)))
    IMFSinkWriter.GetStatistics = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.MF_SINK_WRITER_STATISTICS_head), use_last_error=False)(13, 'GetStatistics', ((1, 'dwStreamIndex'),(1, 'pStats'),)))
    win32more.System.Com.IUnknown
    return IMFSinkWriter
def _define_IMFSinkWriterEx_head():
    class IMFSinkWriterEx(win32more.Media.MediaFoundation.IMFSinkWriter_head):
        Guid = Guid('588d72ab-5bc1-496a-8714-b70617141b25')
    return IMFSinkWriterEx
def _define_IMFSinkWriterEx():
    IMFSinkWriterEx = win32more.Media.MediaFoundation.IMFSinkWriterEx_head
    IMFSinkWriterEx.GetTransformForStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.IMFTransform_head), use_last_error=False)(14, 'GetTransformForStream', ((1, 'dwStreamIndex'),(1, 'dwTransformIndex'),(1, 'pGuidCategory'),(1, 'ppTransform'),)))
    win32more.Media.MediaFoundation.IMFSinkWriter
    return IMFSinkWriterEx
def _define_IMFSinkWriterEncoderConfig_head():
    class IMFSinkWriterEncoderConfig(win32more.System.Com.IUnknown_head):
        Guid = Guid('17c3779e-3cde-4ede-8c60-3899f5f53ad6')
    return IMFSinkWriterEncoderConfig
def _define_IMFSinkWriterEncoderConfig():
    IMFSinkWriterEncoderConfig = win32more.Media.MediaFoundation.IMFSinkWriterEncoderConfig_head
    IMFSinkWriterEncoderConfig.SetTargetMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.Media.MediaFoundation.IMFAttributes_head, use_last_error=False)(3, 'SetTargetMediaType', ((1, 'dwStreamIndex'),(1, 'pTargetMediaType'),(1, 'pEncodingParameters'),)))
    IMFSinkWriterEncoderConfig.PlaceEncodingParameters = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFAttributes_head, use_last_error=False)(4, 'PlaceEncodingParameters', ((1, 'dwStreamIndex'),(1, 'pEncodingParameters'),)))
    win32more.System.Com.IUnknown
    return IMFSinkWriterEncoderConfig
def _define_IMFSinkWriterCallback_head():
    class IMFSinkWriterCallback(win32more.System.Com.IUnknown_head):
        Guid = Guid('666f76de-33d2-41b9-a458-29ed0a972c58')
    return IMFSinkWriterCallback
def _define_IMFSinkWriterCallback():
    IMFSinkWriterCallback = win32more.Media.MediaFoundation.IMFSinkWriterCallback_head
    IMFSinkWriterCallback.OnFinalize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HRESULT, use_last_error=False)(3, 'OnFinalize', ((1, 'hrStatus'),)))
    IMFSinkWriterCallback.OnMarker = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_void_p, use_last_error=False)(4, 'OnMarker', ((1, 'dwStreamIndex'),(1, 'pvContext'),)))
    win32more.System.Com.IUnknown
    return IMFSinkWriterCallback
def _define_IMFSinkWriterCallback2_head():
    class IMFSinkWriterCallback2(win32more.Media.MediaFoundation.IMFSinkWriterCallback_head):
        Guid = Guid('2456bd58-c067-4513-84fe-8d0c88ffdc61')
    return IMFSinkWriterCallback2
def _define_IMFSinkWriterCallback2():
    IMFSinkWriterCallback2 = win32more.Media.MediaFoundation.IMFSinkWriterCallback2_head
    IMFSinkWriterCallback2.OnTransformChange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(5, 'OnTransformChange', ()))
    IMFSinkWriterCallback2.OnStreamError = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.HRESULT, use_last_error=False)(6, 'OnStreamError', ((1, 'dwStreamIndex'),(1, 'hrStatus'),)))
    win32more.Media.MediaFoundation.IMFSinkWriterCallback
    return IMFSinkWriterCallback2
def _define_IMFVideoPositionMapper_head():
    class IMFVideoPositionMapper(win32more.System.Com.IUnknown_head):
        Guid = Guid('1f6a9f17-e70b-4e24-8ae4-0b2c3ba7a4ae')
    return IMFVideoPositionMapper
def _define_IMFVideoPositionMapper():
    IMFVideoPositionMapper = win32more.Media.MediaFoundation.IMFVideoPositionMapper_head
    IMFVideoPositionMapper.MapOutputCoordinateToInputStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Single,Single,UInt32,UInt32,POINTER(Single),POINTER(Single), use_last_error=False)(3, 'MapOutputCoordinateToInputStream', ((1, 'xOut'),(1, 'yOut'),(1, 'dwOutputStreamIndex'),(1, 'dwInputStreamIndex'),(1, 'pxIn'),(1, 'pyIn'),)))
    win32more.System.Com.IUnknown
    return IMFVideoPositionMapper
def _define_IMFVideoDeviceID_head():
    class IMFVideoDeviceID(win32more.System.Com.IUnknown_head):
        Guid = Guid('a38d9567-5a9c-4f3c-b293-8eb415b279ba')
    return IMFVideoDeviceID
def _define_IMFVideoDeviceID():
    IMFVideoDeviceID = win32more.Media.MediaFoundation.IMFVideoDeviceID_head
    IMFVideoDeviceID.GetDeviceID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid), use_last_error=False)(3, 'GetDeviceID', ((1, 'pDeviceID'),)))
    win32more.System.Com.IUnknown
    return IMFVideoDeviceID
MFVideoAspectRatioMode = Int32
MFVideoARMode_None = 0
MFVideoARMode_PreservePicture = 1
MFVideoARMode_PreservePixel = 2
MFVideoARMode_NonLinearStretch = 4
MFVideoARMode_Mask = 7
MFVideoRenderPrefs = Int32
MFVideoRenderPrefs_DoNotRenderBorder = 1
MFVideoRenderPrefs_DoNotClipToDevice = 2
MFVideoRenderPrefs_AllowOutputThrottling = 4
MFVideoRenderPrefs_ForceOutputThrottling = 8
MFVideoRenderPrefs_ForceBatching = 16
MFVideoRenderPrefs_AllowBatching = 32
MFVideoRenderPrefs_ForceScaling = 64
MFVideoRenderPrefs_AllowScaling = 128
MFVideoRenderPrefs_DoNotRepaintOnStop = 256
MFVideoRenderPrefs_Mask = 511
def _define_IMFVideoDisplayControl_head():
    class IMFVideoDisplayControl(win32more.System.Com.IUnknown_head):
        Guid = Guid('a490b1e4-ab84-4d31-a1b2-181e03b1077a')
    return IMFVideoDisplayControl
def _define_IMFVideoDisplayControl():
    IMFVideoDisplayControl = win32more.Media.MediaFoundation.IMFVideoDisplayControl_head
    IMFVideoDisplayControl.GetNativeVideoSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.SIZE_head),POINTER(win32more.Foundation.SIZE_head), use_last_error=False)(3, 'GetNativeVideoSize', ((1, 'pszVideo'),(1, 'pszARVideo'),)))
    IMFVideoDisplayControl.GetIdealVideoSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.SIZE_head),POINTER(win32more.Foundation.SIZE_head), use_last_error=False)(4, 'GetIdealVideoSize', ((1, 'pszMin'),(1, 'pszMax'),)))
    IMFVideoDisplayControl.SetVideoPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVideoNormalizedRect_head),POINTER(win32more.Foundation.RECT_head), use_last_error=False)(5, 'SetVideoPosition', ((1, 'pnrcSource'),(1, 'prcDest'),)))
    IMFVideoDisplayControl.GetVideoPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVideoNormalizedRect_head),POINTER(win32more.Foundation.RECT_head), use_last_error=False)(6, 'GetVideoPosition', ((1, 'pnrcSource'),(1, 'prcDest'),)))
    IMFVideoDisplayControl.SetAspectRatioMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(7, 'SetAspectRatioMode', ((1, 'dwAspectRatioMode'),)))
    IMFVideoDisplayControl.GetAspectRatioMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(8, 'GetAspectRatioMode', ((1, 'pdwAspectRatioMode'),)))
    IMFVideoDisplayControl.SetVideoWindow = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HWND, use_last_error=False)(9, 'SetVideoWindow', ((1, 'hwndVideo'),)))
    IMFVideoDisplayControl.GetVideoWindow = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.HWND), use_last_error=False)(10, 'GetVideoWindow', ((1, 'phwndVideo'),)))
    IMFVideoDisplayControl.RepaintVideo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(11, 'RepaintVideo', ()))
    IMFVideoDisplayControl.GetCurrentImage = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head),POINTER(c_char_p_no),POINTER(UInt32),POINTER(Int64), use_last_error=False)(12, 'GetCurrentImage', ((1, 'pBih'),(1, 'pDib'),(1, 'pcbDib'),(1, 'pTimeStamp'),)))
    IMFVideoDisplayControl.SetBorderColor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(13, 'SetBorderColor', ((1, 'Clr'),)))
    IMFVideoDisplayControl.GetBorderColor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(14, 'GetBorderColor', ((1, 'pClr'),)))
    IMFVideoDisplayControl.SetRenderingPrefs = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(15, 'SetRenderingPrefs', ((1, 'dwRenderFlags'),)))
    IMFVideoDisplayControl.GetRenderingPrefs = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(16, 'GetRenderingPrefs', ((1, 'pdwRenderFlags'),)))
    IMFVideoDisplayControl.SetFullscreen = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL, use_last_error=False)(17, 'SetFullscreen', ((1, 'fFullscreen'),)))
    IMFVideoDisplayControl.GetFullscreen = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(18, 'GetFullscreen', ((1, 'pfFullscreen'),)))
    win32more.System.Com.IUnknown
    return IMFVideoDisplayControl
MFVP_MESSAGE_TYPE = Int32
MFVP_MESSAGE_FLUSH = 0
MFVP_MESSAGE_INVALIDATEMEDIATYPE = 1
MFVP_MESSAGE_PROCESSINPUTNOTIFY = 2
MFVP_MESSAGE_BEGINSTREAMING = 3
MFVP_MESSAGE_ENDSTREAMING = 4
MFVP_MESSAGE_ENDOFSTREAM = 5
MFVP_MESSAGE_STEP = 6
MFVP_MESSAGE_CANCELSTEP = 7
def _define_IMFVideoPresenter_head():
    class IMFVideoPresenter(win32more.Media.MediaFoundation.IMFClockStateSink_head):
        Guid = Guid('29aff080-182a-4a5d-af3b-448f3a6346cb')
    return IMFVideoPresenter
def _define_IMFVideoPresenter():
    IMFVideoPresenter = win32more.Media.MediaFoundation.IMFVideoPresenter_head
    IMFVideoPresenter.ProcessMessage = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFVP_MESSAGE_TYPE,UIntPtr, use_last_error=False)(8, 'ProcessMessage', ((1, 'eMessage'),(1, 'ulParam'),)))
    IMFVideoPresenter.GetCurrentMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFVideoMediaType_head), use_last_error=False)(9, 'GetCurrentMediaType', ((1, 'ppMediaType'),)))
    win32more.Media.MediaFoundation.IMFClockStateSink
    return IMFVideoPresenter
def _define_IMFDesiredSample_head():
    class IMFDesiredSample(win32more.System.Com.IUnknown_head):
        Guid = Guid('56c294d0-753e-4260-8d61-a3d8820b1d54')
    return IMFDesiredSample
def _define_IMFDesiredSample():
    IMFDesiredSample = win32more.Media.MediaFoundation.IMFDesiredSample_head
    IMFDesiredSample.GetDesiredSampleTimeAndDuration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int64),POINTER(Int64), use_last_error=False)(3, 'GetDesiredSampleTimeAndDuration', ((1, 'phnsSampleTime'),(1, 'phnsSampleDuration'),)))
    IMFDesiredSample.SetDesiredSampleTimeAndDuration = COMMETHOD(WINFUNCTYPE(Void,Int64,Int64, use_last_error=False)(4, 'SetDesiredSampleTimeAndDuration', ((1, 'hnsSampleTime'),(1, 'hnsSampleDuration'),)))
    IMFDesiredSample.Clear = COMMETHOD(WINFUNCTYPE(Void, use_last_error=False)(5, 'Clear', ()))
    win32more.System.Com.IUnknown
    return IMFDesiredSample
def _define_IMFVideoMixerControl_head():
    class IMFVideoMixerControl(win32more.System.Com.IUnknown_head):
        Guid = Guid('a5c6c53f-c202-4aa5-9695-175ba8c508a5')
    return IMFVideoMixerControl
def _define_IMFVideoMixerControl():
    IMFVideoMixerControl = win32more.Media.MediaFoundation.IMFVideoMixerControl_head
    IMFVideoMixerControl.SetStreamZOrder = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32, use_last_error=False)(3, 'SetStreamZOrder', ((1, 'dwStreamID'),(1, 'dwZ'),)))
    IMFVideoMixerControl.GetStreamZOrder = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32), use_last_error=False)(4, 'GetStreamZOrder', ((1, 'dwStreamID'),(1, 'pdwZ'),)))
    IMFVideoMixerControl.SetStreamOutputRect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.MFVideoNormalizedRect_head), use_last_error=False)(5, 'SetStreamOutputRect', ((1, 'dwStreamID'),(1, 'pnrcOutput'),)))
    IMFVideoMixerControl.GetStreamOutputRect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.MFVideoNormalizedRect_head), use_last_error=False)(6, 'GetStreamOutputRect', ((1, 'dwStreamID'),(1, 'pnrcOutput'),)))
    win32more.System.Com.IUnknown
    return IMFVideoMixerControl
MFVideoMixPrefs = Int32
MFVideoMixPrefs_ForceHalfInterlace = 1
MFVideoMixPrefs_AllowDropToHalfInterlace = 2
MFVideoMixPrefs_AllowDropToBob = 4
MFVideoMixPrefs_ForceBob = 8
MFVideoMixPrefs_EnableRotation = 16
MFVideoMixPrefs_Mask = 31
def _define_IMFVideoMixerControl2_head():
    class IMFVideoMixerControl2(win32more.Media.MediaFoundation.IMFVideoMixerControl_head):
        Guid = Guid('8459616d-966e-4930-b658-54fa7e5a16d3')
    return IMFVideoMixerControl2
def _define_IMFVideoMixerControl2():
    IMFVideoMixerControl2 = win32more.Media.MediaFoundation.IMFVideoMixerControl2_head
    IMFVideoMixerControl2.SetMixingPrefs = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(7, 'SetMixingPrefs', ((1, 'dwMixFlags'),)))
    IMFVideoMixerControl2.GetMixingPrefs = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(8, 'GetMixingPrefs', ((1, 'pdwMixFlags'),)))
    win32more.Media.MediaFoundation.IMFVideoMixerControl
    return IMFVideoMixerControl2
def _define_IMFVideoRenderer_head():
    class IMFVideoRenderer(win32more.System.Com.IUnknown_head):
        Guid = Guid('dfdfd197-a9ca-43d8-b341-6af3503792cd')
    return IMFVideoRenderer
def _define_IMFVideoRenderer():
    IMFVideoRenderer = win32more.Media.MediaFoundation.IMFVideoRenderer_head
    IMFVideoRenderer.InitializeRenderer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTransform_head,win32more.Media.MediaFoundation.IMFVideoPresenter_head, use_last_error=False)(3, 'InitializeRenderer', ((1, 'pVideoMixer'),(1, 'pVideoPresenter'),)))
    win32more.System.Com.IUnknown
    return IMFVideoRenderer
def _define_IEVRFilterConfig_head():
    class IEVRFilterConfig(win32more.System.Com.IUnknown_head):
        Guid = Guid('83e91e85-82c1-4ea7-801d-85dc50b75086')
    return IEVRFilterConfig
def _define_IEVRFilterConfig():
    IEVRFilterConfig = win32more.Media.MediaFoundation.IEVRFilterConfig_head
    IEVRFilterConfig.SetNumberOfStreams = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(3, 'SetNumberOfStreams', ((1, 'dwMaxStreams'),)))
    IEVRFilterConfig.GetNumberOfStreams = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(4, 'GetNumberOfStreams', ((1, 'pdwMaxStreams'),)))
    win32more.System.Com.IUnknown
    return IEVRFilterConfig
EVRFilterConfigPrefs = Int32
EVRFilterConfigPrefs_EnableQoS = 1
EVRFilterConfigPrefs_Mask = 1
def _define_IEVRFilterConfigEx_head():
    class IEVRFilterConfigEx(win32more.Media.MediaFoundation.IEVRFilterConfig_head):
        Guid = Guid('aea36028-796d-454f-beee-b48071e24304')
    return IEVRFilterConfigEx
def _define_IEVRFilterConfigEx():
    IEVRFilterConfigEx = win32more.Media.MediaFoundation.IEVRFilterConfigEx_head
    IEVRFilterConfigEx.SetConfigPrefs = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(5, 'SetConfigPrefs', ((1, 'dwConfigFlags'),)))
    IEVRFilterConfigEx.GetConfigPrefs = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(6, 'GetConfigPrefs', ((1, 'pdwConfigFlags'),)))
    win32more.Media.MediaFoundation.IEVRFilterConfig
    return IEVRFilterConfigEx
MF_SERVICE_LOOKUP_TYPE = Int32
MF_SERVICE_LOOKUP_UPSTREAM = 0
MF_SERVICE_LOOKUP_UPSTREAM_DIRECT = 1
MF_SERVICE_LOOKUP_DOWNSTREAM = 2
MF_SERVICE_LOOKUP_DOWNSTREAM_DIRECT = 3
MF_SERVICE_LOOKUP_ALL = 4
MF_SERVICE_LOOKUP_GLOBAL = 5
def _define_IMFTopologyServiceLookup_head():
    class IMFTopologyServiceLookup(win32more.System.Com.IUnknown_head):
        Guid = Guid('fa993889-4383-415a-a930-dd472a8cf6f7')
    return IMFTopologyServiceLookup
def _define_IMFTopologyServiceLookup():
    IMFTopologyServiceLookup = win32more.Media.MediaFoundation.IMFTopologyServiceLookup_head
    IMFTopologyServiceLookup.LookupService = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_SERVICE_LOOKUP_TYPE,UInt32,POINTER(Guid),POINTER(Guid),POINTER(c_void_p),POINTER(UInt32), use_last_error=False)(3, 'LookupService', ((1, 'Type'),(1, 'dwIndex'),(1, 'guidService'),(1, 'riid'),(1, 'ppvObjects'),(1, 'pnObjects'),)))
    win32more.System.Com.IUnknown
    return IMFTopologyServiceLookup
def _define_IMFTopologyServiceLookupClient_head():
    class IMFTopologyServiceLookupClient(win32more.System.Com.IUnknown_head):
        Guid = Guid('fa99388a-4383-415a-a930-dd472a8cf6f7')
    return IMFTopologyServiceLookupClient
def _define_IMFTopologyServiceLookupClient():
    IMFTopologyServiceLookupClient = win32more.Media.MediaFoundation.IMFTopologyServiceLookupClient_head
    IMFTopologyServiceLookupClient.InitServicePointers = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTopologyServiceLookup_head, use_last_error=False)(3, 'InitServicePointers', ((1, 'pLookup'),)))
    IMFTopologyServiceLookupClient.ReleaseServicePointers = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(4, 'ReleaseServicePointers', ()))
    win32more.System.Com.IUnknown
    return IMFTopologyServiceLookupClient
def _define_IEVRTrustedVideoPlugin_head():
    class IEVRTrustedVideoPlugin(win32more.System.Com.IUnknown_head):
        Guid = Guid('83a4ce40-7710-494b-a893-a472049af630')
    return IEVRTrustedVideoPlugin
def _define_IEVRTrustedVideoPlugin():
    IEVRTrustedVideoPlugin = win32more.Media.MediaFoundation.IEVRTrustedVideoPlugin_head
    IEVRTrustedVideoPlugin.IsInTrustedVideoMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(3, 'IsInTrustedVideoMode', ((1, 'pYes'),)))
    IEVRTrustedVideoPlugin.CanConstrict = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(4, 'CanConstrict', ((1, 'pYes'),)))
    IEVRTrustedVideoPlugin.SetConstriction = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(5, 'SetConstriction', ((1, 'dwKPix'),)))
    IEVRTrustedVideoPlugin.DisableImageExport = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL, use_last_error=False)(6, 'DisableImageExport', ((1, 'bDisable'),)))
    win32more.System.Com.IUnknown
    return IEVRTrustedVideoPlugin
MFP_CREATION_OPTIONS = Int32
MFP_OPTION_NONE = 0
MFP_OPTION_FREE_THREADED_CALLBACK = 1
MFP_OPTION_NO_MMCSS = 2
MFP_OPTION_NO_REMOTE_DESKTOP_OPTIMIZATION = 4
MFP_MEDIAPLAYER_STATE = Int32
MFP_MEDIAPLAYER_STATE_EMPTY = 0
MFP_MEDIAPLAYER_STATE_STOPPED = 1
MFP_MEDIAPLAYER_STATE_PLAYING = 2
MFP_MEDIAPLAYER_STATE_PAUSED = 3
MFP_MEDIAPLAYER_STATE_SHUTDOWN = 4
_MFP_MEDIAITEM_CHARACTERISTICS = Int32
MFP_MEDIAITEM_IS_LIVE = 1
MFP_MEDIAITEM_CAN_SEEK = 2
MFP_MEDIAITEM_CAN_PAUSE = 4
MFP_MEDIAITEM_HAS_SLOW_SEEK = 8
_MFP_CREDENTIAL_FLAGS = Int32
MFP_CREDENTIAL_PROMPT = 1
MFP_CREDENTIAL_SAVE = 2
MFP_CREDENTIAL_DO_NOT_CACHE = 4
MFP_CREDENTIAL_CLEAR_TEXT = 8
MFP_CREDENTIAL_PROXY = 16
MFP_CREDENTIAL_LOGGED_ON_USER = 32
def _define_IMFPMediaPlayer_head():
    class IMFPMediaPlayer(win32more.System.Com.IUnknown_head):
        Guid = Guid('a714590a-58af-430a-85bf-44f5ec838d85')
    return IMFPMediaPlayer
def _define_IMFPMediaPlayer():
    IMFPMediaPlayer = win32more.Media.MediaFoundation.IMFPMediaPlayer_head
    IMFPMediaPlayer.Play = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(3, 'Play', ()))
    IMFPMediaPlayer.Pause = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(4, 'Pause', ()))
    IMFPMediaPlayer.Stop = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(5, 'Stop', ()))
    IMFPMediaPlayer.FrameStep = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(6, 'FrameStep', ()))
    IMFPMediaPlayer.SetPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(7, 'SetPosition', ((1, 'guidPositionType'),(1, 'pvPositionValue'),)))
    IMFPMediaPlayer.GetPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(8, 'GetPosition', ((1, 'guidPositionType'),(1, 'pvPositionValue'),)))
    IMFPMediaPlayer.GetDuration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(9, 'GetDuration', ((1, 'guidPositionType'),(1, 'pvDurationValue'),)))
    IMFPMediaPlayer.SetRate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Single, use_last_error=False)(10, 'SetRate', ((1, 'flRate'),)))
    IMFPMediaPlayer.GetRate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Single), use_last_error=False)(11, 'GetRate', ((1, 'pflRate'),)))
    IMFPMediaPlayer.GetSupportedRates = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL,POINTER(Single),POINTER(Single), use_last_error=False)(12, 'GetSupportedRates', ((1, 'fForwardDirection'),(1, 'pflSlowestRate'),(1, 'pflFastestRate'),)))
    IMFPMediaPlayer.GetState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFP_MEDIAPLAYER_STATE), use_last_error=False)(13, 'GetState', ((1, 'peState'),)))
    IMFPMediaPlayer.CreateMediaItemFromURL = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.BOOL,UIntPtr,POINTER(win32more.Media.MediaFoundation.IMFPMediaItem_head), use_last_error=False)(14, 'CreateMediaItemFromURL', ((1, 'pwszURL'),(1, 'fSync'),(1, 'dwUserData'),(1, 'ppMediaItem'),)))
    IMFPMediaPlayer.CreateMediaItemFromObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,win32more.Foundation.BOOL,UIntPtr,POINTER(win32more.Media.MediaFoundation.IMFPMediaItem_head), use_last_error=False)(15, 'CreateMediaItemFromObject', ((1, 'pIUnknownObj'),(1, 'fSync'),(1, 'dwUserData'),(1, 'ppMediaItem'),)))
    IMFPMediaPlayer.SetMediaItem = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPMediaItem_head, use_last_error=False)(16, 'SetMediaItem', ((1, 'pIMFPMediaItem'),)))
    IMFPMediaPlayer.ClearMediaItem = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(17, 'ClearMediaItem', ()))
    IMFPMediaPlayer.GetMediaItem = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFPMediaItem_head), use_last_error=False)(18, 'GetMediaItem', ((1, 'ppIMFPMediaItem'),)))
    IMFPMediaPlayer.GetVolume = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Single), use_last_error=False)(19, 'GetVolume', ((1, 'pflVolume'),)))
    IMFPMediaPlayer.SetVolume = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Single, use_last_error=False)(20, 'SetVolume', ((1, 'flVolume'),)))
    IMFPMediaPlayer.GetBalance = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Single), use_last_error=False)(21, 'GetBalance', ((1, 'pflBalance'),)))
    IMFPMediaPlayer.SetBalance = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Single, use_last_error=False)(22, 'SetBalance', ((1, 'flBalance'),)))
    IMFPMediaPlayer.GetMute = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(23, 'GetMute', ((1, 'pfMute'),)))
    IMFPMediaPlayer.SetMute = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL, use_last_error=False)(24, 'SetMute', ((1, 'fMute'),)))
    IMFPMediaPlayer.GetNativeVideoSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.SIZE_head),POINTER(win32more.Foundation.SIZE_head), use_last_error=False)(25, 'GetNativeVideoSize', ((1, 'pszVideo'),(1, 'pszARVideo'),)))
    IMFPMediaPlayer.GetIdealVideoSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.SIZE_head),POINTER(win32more.Foundation.SIZE_head), use_last_error=False)(26, 'GetIdealVideoSize', ((1, 'pszMin'),(1, 'pszMax'),)))
    IMFPMediaPlayer.SetVideoSourceRect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVideoNormalizedRect_head), use_last_error=False)(27, 'SetVideoSourceRect', ((1, 'pnrcSource'),)))
    IMFPMediaPlayer.GetVideoSourceRect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVideoNormalizedRect_head), use_last_error=False)(28, 'GetVideoSourceRect', ((1, 'pnrcSource'),)))
    IMFPMediaPlayer.SetAspectRatioMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(29, 'SetAspectRatioMode', ((1, 'dwAspectRatioMode'),)))
    IMFPMediaPlayer.GetAspectRatioMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(30, 'GetAspectRatioMode', ((1, 'pdwAspectRatioMode'),)))
    IMFPMediaPlayer.GetVideoWindow = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.HWND), use_last_error=False)(31, 'GetVideoWindow', ((1, 'phwndVideo'),)))
    IMFPMediaPlayer.UpdateVideo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(32, 'UpdateVideo', ()))
    IMFPMediaPlayer.SetBorderColor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(33, 'SetBorderColor', ((1, 'Clr'),)))
    IMFPMediaPlayer.GetBorderColor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(34, 'GetBorderColor', ((1, 'pClr'),)))
    IMFPMediaPlayer.InsertEffect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,win32more.Foundation.BOOL, use_last_error=False)(35, 'InsertEffect', ((1, 'pEffect'),(1, 'fOptional'),)))
    IMFPMediaPlayer.RemoveEffect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head, use_last_error=False)(36, 'RemoveEffect', ((1, 'pEffect'),)))
    IMFPMediaPlayer.RemoveAllEffects = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(37, 'RemoveAllEffects', ()))
    IMFPMediaPlayer.Shutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(38, 'Shutdown', ()))
    win32more.System.Com.IUnknown
    return IMFPMediaPlayer
def _define_IMFPMediaItem_head():
    class IMFPMediaItem(win32more.System.Com.IUnknown_head):
        Guid = Guid('90eb3e6b-ecbf-45cc-b1da-c6fe3ea70d57')
    return IMFPMediaItem
def _define_IMFPMediaItem():
    IMFPMediaItem = win32more.Media.MediaFoundation.IMFPMediaItem_head
    IMFPMediaItem.GetMediaPlayer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFPMediaPlayer_head), use_last_error=False)(3, 'GetMediaPlayer', ((1, 'ppMediaPlayer'),)))
    IMFPMediaItem.GetURL = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR), use_last_error=False)(4, 'GetURL', ((1, 'ppwszURL'),)))
    IMFPMediaItem.GetObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.IUnknown_head), use_last_error=False)(5, 'GetObject', ((1, 'ppIUnknown'),)))
    IMFPMediaItem.GetUserData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UIntPtr), use_last_error=False)(6, 'GetUserData', ((1, 'pdwUserData'),)))
    IMFPMediaItem.SetUserData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UIntPtr, use_last_error=False)(7, 'SetUserData', ((1, 'dwUserData'),)))
    IMFPMediaItem.GetStartStopPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head),POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(8, 'GetStartStopPosition', ((1, 'pguidStartPositionType'),(1, 'pvStartValue'),(1, 'pguidStopPositionType'),(1, 'pvStopValue'),)))
    IMFPMediaItem.SetStartStopPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head),POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(9, 'SetStartStopPosition', ((1, 'pguidStartPositionType'),(1, 'pvStartValue'),(1, 'pguidStopPositionType'),(1, 'pvStopValue'),)))
    IMFPMediaItem.HasVideo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL),POINTER(win32more.Foundation.BOOL), use_last_error=False)(10, 'HasVideo', ((1, 'pfHasVideo'),(1, 'pfSelected'),)))
    IMFPMediaItem.HasAudio = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL),POINTER(win32more.Foundation.BOOL), use_last_error=False)(11, 'HasAudio', ((1, 'pfHasAudio'),(1, 'pfSelected'),)))
    IMFPMediaItem.IsProtected = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(12, 'IsProtected', ((1, 'pfProtected'),)))
    IMFPMediaItem.GetDuration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(13, 'GetDuration', ((1, 'guidPositionType'),(1, 'pvDurationValue'),)))
    IMFPMediaItem.GetNumberOfStreams = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(14, 'GetNumberOfStreams', ((1, 'pdwStreamCount'),)))
    IMFPMediaItem.GetStreamSelection = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Foundation.BOOL), use_last_error=False)(15, 'GetStreamSelection', ((1, 'dwStreamIndex'),(1, 'pfEnabled'),)))
    IMFPMediaItem.SetStreamSelection = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.BOOL, use_last_error=False)(16, 'SetStreamSelection', ((1, 'dwStreamIndex'),(1, 'fEnabled'),)))
    IMFPMediaItem.GetStreamAttribute = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(17, 'GetStreamAttribute', ((1, 'dwStreamIndex'),(1, 'guidMFAttribute'),(1, 'pvValue'),)))
    IMFPMediaItem.GetPresentationAttribute = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(18, 'GetPresentationAttribute', ((1, 'guidMFAttribute'),(1, 'pvValue'),)))
    IMFPMediaItem.GetCharacteristics = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(19, 'GetCharacteristics', ((1, 'pCharacteristics'),)))
    IMFPMediaItem.SetStreamSink = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.System.Com.IUnknown_head, use_last_error=False)(20, 'SetStreamSink', ((1, 'dwStreamIndex'),(1, 'pMediaSink'),)))
    IMFPMediaItem.GetMetadata = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.UI.Shell.PropertiesSystem.IPropertyStore_head), use_last_error=False)(21, 'GetMetadata', ((1, 'ppMetadataStore'),)))
    win32more.System.Com.IUnknown
    return IMFPMediaItem
MFP_EVENT_TYPE = Int32
MFP_EVENT_TYPE_PLAY = 0
MFP_EVENT_TYPE_PAUSE = 1
MFP_EVENT_TYPE_STOP = 2
MFP_EVENT_TYPE_POSITION_SET = 3
MFP_EVENT_TYPE_RATE_SET = 4
MFP_EVENT_TYPE_MEDIAITEM_CREATED = 5
MFP_EVENT_TYPE_MEDIAITEM_SET = 6
MFP_EVENT_TYPE_FRAME_STEP = 7
MFP_EVENT_TYPE_MEDIAITEM_CLEARED = 8
MFP_EVENT_TYPE_MF = 9
MFP_EVENT_TYPE_ERROR = 10
MFP_EVENT_TYPE_PLAYBACK_ENDED = 11
MFP_EVENT_TYPE_ACQUIRE_USER_CREDENTIAL = 12
def _define_MFP_EVENT_HEADER_head():
    class MFP_EVENT_HEADER(Structure):
        pass
    return MFP_EVENT_HEADER
def _define_MFP_EVENT_HEADER():
    MFP_EVENT_HEADER = win32more.Media.MediaFoundation.MFP_EVENT_HEADER_head
    MFP_EVENT_HEADER._fields_ = [
        ("eEventType", win32more.Media.MediaFoundation.MFP_EVENT_TYPE),
        ("hrEvent", win32more.Foundation.HRESULT),
        ("pMediaPlayer", win32more.Media.MediaFoundation.IMFPMediaPlayer_head),
        ("eState", win32more.Media.MediaFoundation.MFP_MEDIAPLAYER_STATE),
        ("pPropertyStore", win32more.UI.Shell.PropertiesSystem.IPropertyStore_head),
    ]
    return MFP_EVENT_HEADER
def _define_MFP_PLAY_EVENT_head():
    class MFP_PLAY_EVENT(Structure):
        pass
    return MFP_PLAY_EVENT
def _define_MFP_PLAY_EVENT():
    MFP_PLAY_EVENT = win32more.Media.MediaFoundation.MFP_PLAY_EVENT_head
    MFP_PLAY_EVENT._fields_ = [
        ("header", win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
        ("pMediaItem", win32more.Media.MediaFoundation.IMFPMediaItem_head),
    ]
    return MFP_PLAY_EVENT
def _define_MFP_PAUSE_EVENT_head():
    class MFP_PAUSE_EVENT(Structure):
        pass
    return MFP_PAUSE_EVENT
def _define_MFP_PAUSE_EVENT():
    MFP_PAUSE_EVENT = win32more.Media.MediaFoundation.MFP_PAUSE_EVENT_head
    MFP_PAUSE_EVENT._fields_ = [
        ("header", win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
        ("pMediaItem", win32more.Media.MediaFoundation.IMFPMediaItem_head),
    ]
    return MFP_PAUSE_EVENT
def _define_MFP_STOP_EVENT_head():
    class MFP_STOP_EVENT(Structure):
        pass
    return MFP_STOP_EVENT
def _define_MFP_STOP_EVENT():
    MFP_STOP_EVENT = win32more.Media.MediaFoundation.MFP_STOP_EVENT_head
    MFP_STOP_EVENT._fields_ = [
        ("header", win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
        ("pMediaItem", win32more.Media.MediaFoundation.IMFPMediaItem_head),
    ]
    return MFP_STOP_EVENT
def _define_MFP_POSITION_SET_EVENT_head():
    class MFP_POSITION_SET_EVENT(Structure):
        pass
    return MFP_POSITION_SET_EVENT
def _define_MFP_POSITION_SET_EVENT():
    MFP_POSITION_SET_EVENT = win32more.Media.MediaFoundation.MFP_POSITION_SET_EVENT_head
    MFP_POSITION_SET_EVENT._fields_ = [
        ("header", win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
        ("pMediaItem", win32more.Media.MediaFoundation.IMFPMediaItem_head),
    ]
    return MFP_POSITION_SET_EVENT
def _define_MFP_RATE_SET_EVENT_head():
    class MFP_RATE_SET_EVENT(Structure):
        pass
    return MFP_RATE_SET_EVENT
def _define_MFP_RATE_SET_EVENT():
    MFP_RATE_SET_EVENT = win32more.Media.MediaFoundation.MFP_RATE_SET_EVENT_head
    MFP_RATE_SET_EVENT._fields_ = [
        ("header", win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
        ("pMediaItem", win32more.Media.MediaFoundation.IMFPMediaItem_head),
        ("flRate", Single),
    ]
    return MFP_RATE_SET_EVENT
def _define_MFP_MEDIAITEM_CREATED_EVENT_head():
    class MFP_MEDIAITEM_CREATED_EVENT(Structure):
        pass
    return MFP_MEDIAITEM_CREATED_EVENT
def _define_MFP_MEDIAITEM_CREATED_EVENT():
    MFP_MEDIAITEM_CREATED_EVENT = win32more.Media.MediaFoundation.MFP_MEDIAITEM_CREATED_EVENT_head
    MFP_MEDIAITEM_CREATED_EVENT._fields_ = [
        ("header", win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
        ("pMediaItem", win32more.Media.MediaFoundation.IMFPMediaItem_head),
        ("dwUserData", UIntPtr),
    ]
    return MFP_MEDIAITEM_CREATED_EVENT
def _define_MFP_MEDIAITEM_SET_EVENT_head():
    class MFP_MEDIAITEM_SET_EVENT(Structure):
        pass
    return MFP_MEDIAITEM_SET_EVENT
def _define_MFP_MEDIAITEM_SET_EVENT():
    MFP_MEDIAITEM_SET_EVENT = win32more.Media.MediaFoundation.MFP_MEDIAITEM_SET_EVENT_head
    MFP_MEDIAITEM_SET_EVENT._fields_ = [
        ("header", win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
        ("pMediaItem", win32more.Media.MediaFoundation.IMFPMediaItem_head),
    ]
    return MFP_MEDIAITEM_SET_EVENT
def _define_MFP_FRAME_STEP_EVENT_head():
    class MFP_FRAME_STEP_EVENT(Structure):
        pass
    return MFP_FRAME_STEP_EVENT
def _define_MFP_FRAME_STEP_EVENT():
    MFP_FRAME_STEP_EVENT = win32more.Media.MediaFoundation.MFP_FRAME_STEP_EVENT_head
    MFP_FRAME_STEP_EVENT._fields_ = [
        ("header", win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
        ("pMediaItem", win32more.Media.MediaFoundation.IMFPMediaItem_head),
    ]
    return MFP_FRAME_STEP_EVENT
def _define_MFP_MEDIAITEM_CLEARED_EVENT_head():
    class MFP_MEDIAITEM_CLEARED_EVENT(Structure):
        pass
    return MFP_MEDIAITEM_CLEARED_EVENT
def _define_MFP_MEDIAITEM_CLEARED_EVENT():
    MFP_MEDIAITEM_CLEARED_EVENT = win32more.Media.MediaFoundation.MFP_MEDIAITEM_CLEARED_EVENT_head
    MFP_MEDIAITEM_CLEARED_EVENT._fields_ = [
        ("header", win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
        ("pMediaItem", win32more.Media.MediaFoundation.IMFPMediaItem_head),
    ]
    return MFP_MEDIAITEM_CLEARED_EVENT
def _define_MFP_MF_EVENT_head():
    class MFP_MF_EVENT(Structure):
        pass
    return MFP_MF_EVENT
def _define_MFP_MF_EVENT():
    MFP_MF_EVENT = win32more.Media.MediaFoundation.MFP_MF_EVENT_head
    MFP_MF_EVENT._fields_ = [
        ("header", win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
        ("MFEventType", UInt32),
        ("pMFMediaEvent", win32more.Media.MediaFoundation.IMFMediaEvent_head),
        ("pMediaItem", win32more.Media.MediaFoundation.IMFPMediaItem_head),
    ]
    return MFP_MF_EVENT
def _define_MFP_ERROR_EVENT_head():
    class MFP_ERROR_EVENT(Structure):
        pass
    return MFP_ERROR_EVENT
def _define_MFP_ERROR_EVENT():
    MFP_ERROR_EVENT = win32more.Media.MediaFoundation.MFP_ERROR_EVENT_head
    MFP_ERROR_EVENT._fields_ = [
        ("header", win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
    ]
    return MFP_ERROR_EVENT
def _define_MFP_PLAYBACK_ENDED_EVENT_head():
    class MFP_PLAYBACK_ENDED_EVENT(Structure):
        pass
    return MFP_PLAYBACK_ENDED_EVENT
def _define_MFP_PLAYBACK_ENDED_EVENT():
    MFP_PLAYBACK_ENDED_EVENT = win32more.Media.MediaFoundation.MFP_PLAYBACK_ENDED_EVENT_head
    MFP_PLAYBACK_ENDED_EVENT._fields_ = [
        ("header", win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
        ("pMediaItem", win32more.Media.MediaFoundation.IMFPMediaItem_head),
    ]
    return MFP_PLAYBACK_ENDED_EVENT
def _define_MFP_ACQUIRE_USER_CREDENTIAL_EVENT_head():
    class MFP_ACQUIRE_USER_CREDENTIAL_EVENT(Structure):
        pass
    return MFP_ACQUIRE_USER_CREDENTIAL_EVENT
def _define_MFP_ACQUIRE_USER_CREDENTIAL_EVENT():
    MFP_ACQUIRE_USER_CREDENTIAL_EVENT = win32more.Media.MediaFoundation.MFP_ACQUIRE_USER_CREDENTIAL_EVENT_head
    MFP_ACQUIRE_USER_CREDENTIAL_EVENT._fields_ = [
        ("header", win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
        ("dwUserData", UIntPtr),
        ("fProceedWithAuthentication", win32more.Foundation.BOOL),
        ("hrAuthenticationStatus", win32more.Foundation.HRESULT),
        ("pwszURL", win32more.Foundation.PWSTR),
        ("pwszSite", win32more.Foundation.PWSTR),
        ("pwszRealm", win32more.Foundation.PWSTR),
        ("pwszPackage", win32more.Foundation.PWSTR),
        ("nRetries", Int32),
        ("flags", UInt32),
        ("pCredential", win32more.Media.MediaFoundation.IMFNetCredential_head),
    ]
    return MFP_ACQUIRE_USER_CREDENTIAL_EVENT
def _define_IMFPMediaPlayerCallback_head():
    class IMFPMediaPlayerCallback(win32more.System.Com.IUnknown_head):
        Guid = Guid('766c8ffb-5fdb-4fea-a28d-b912996f51bd')
    return IMFPMediaPlayerCallback
def _define_IMFPMediaPlayerCallback():
    IMFPMediaPlayerCallback = win32more.Media.MediaFoundation.IMFPMediaPlayerCallback_head
    IMFPMediaPlayerCallback.OnMediaPlayerEvent = COMMETHOD(WINFUNCTYPE(Void,POINTER(win32more.Media.MediaFoundation.MFP_EVENT_HEADER_head), use_last_error=False)(3, 'OnMediaPlayerEvent', ((1, 'pEventHeader'),)))
    win32more.System.Com.IUnknown
    return IMFPMediaPlayerCallback
def _define_DEVICE_INFO_head():
    class DEVICE_INFO(Structure):
        pass
    return DEVICE_INFO
def _define_DEVICE_INFO():
    DEVICE_INFO = win32more.Media.MediaFoundation.DEVICE_INFO_head
    DEVICE_INFO._fields_ = [
        ("pFriendlyDeviceName", win32more.Foundation.BSTR),
        ("pUniqueDeviceName", win32more.Foundation.BSTR),
        ("pManufacturerName", win32more.Foundation.BSTR),
        ("pModelName", win32more.Foundation.BSTR),
        ("pIconURL", win32more.Foundation.BSTR),
    ]
    return DEVICE_INFO
MF_SHARING_ENGINE_EVENT = Int32
MF_SHARING_ENGINE_EVENT_DISCONNECT = 2000
MF_SHARING_ENGINE_EVENT_LOCALRENDERINGSTARTED = 2001
MF_SHARING_ENGINE_EVENT_LOCALRENDERINGENDED = 2002
MF_SHARING_ENGINE_EVENT_STOPPED = 2003
MF_SHARING_ENGINE_EVENT_ERROR = 2501
MF_MEDIA_SHARING_ENGINE_EVENT = Int32
MF_MEDIA_SHARING_ENGINE_EVENT_DISCONNECT = 2000
def _define_IMFSharingEngineClassFactory_head():
    class IMFSharingEngineClassFactory(win32more.System.Com.IUnknown_head):
        Guid = Guid('2ba61f92-8305-413b-9733-faf15f259384')
    return IMFSharingEngineClassFactory
def _define_IMFSharingEngineClassFactory():
    IMFSharingEngineClassFactory = win32more.Media.MediaFoundation.IMFSharingEngineClassFactory_head
    IMFSharingEngineClassFactory.CreateInstance = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.System.Com.IUnknown_head), use_last_error=False)(3, 'CreateInstance', ((1, 'dwFlags'),(1, 'pAttr'),(1, 'ppEngine'),)))
    win32more.System.Com.IUnknown
    return IMFSharingEngineClassFactory
def _define_IMFMediaSharingEngine_head():
    class IMFMediaSharingEngine(win32more.Media.MediaFoundation.IMFMediaEngine_head):
        Guid = Guid('8d3ce1bf-2367-40e0-9eee-40d377cc1b46')
    return IMFMediaSharingEngine
def _define_IMFMediaSharingEngine():
    IMFMediaSharingEngine = win32more.Media.MediaFoundation.IMFMediaSharingEngine_head
    IMFMediaSharingEngine.GetDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.DEVICE_INFO_head), use_last_error=False)(45, 'GetDevice', ((1, 'pDevice'),)))
    win32more.Media.MediaFoundation.IMFMediaEngine
    return IMFMediaSharingEngine
def _define_IMFMediaSharingEngineClassFactory_head():
    class IMFMediaSharingEngineClassFactory(win32more.System.Com.IUnknown_head):
        Guid = Guid('524d2bc4-b2b1-4fe5-8fac-fa4e4512b4e0')
    return IMFMediaSharingEngineClassFactory
def _define_IMFMediaSharingEngineClassFactory():
    IMFMediaSharingEngineClassFactory = win32more.Media.MediaFoundation.IMFMediaSharingEngineClassFactory_head
    IMFMediaSharingEngineClassFactory.CreateInstance = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSharingEngine_head), use_last_error=False)(3, 'CreateInstance', ((1, 'dwFlags'),(1, 'pAttr'),(1, 'ppEngine'),)))
    win32more.System.Com.IUnknown
    return IMFMediaSharingEngineClassFactory
def _define_IMFImageSharingEngine_head():
    class IMFImageSharingEngine(win32more.System.Com.IUnknown_head):
        Guid = Guid('cfa0ae8e-7e1c-44d2-ae68-fc4c148a6354')
    return IMFImageSharingEngine
def _define_IMFImageSharingEngine():
    IMFImageSharingEngine = win32more.Media.MediaFoundation.IMFImageSharingEngine_head
    IMFImageSharingEngine.SetSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head, use_last_error=False)(3, 'SetSource', ((1, 'pStream'),)))
    IMFImageSharingEngine.GetDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.DEVICE_INFO_head), use_last_error=False)(4, 'GetDevice', ((1, 'pDevice'),)))
    IMFImageSharingEngine.Shutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(5, 'Shutdown', ()))
    win32more.System.Com.IUnknown
    return IMFImageSharingEngine
def _define_IMFImageSharingEngineClassFactory_head():
    class IMFImageSharingEngineClassFactory(win32more.System.Com.IUnknown_head):
        Guid = Guid('1fc55727-a7fb-4fc8-83ae-8af024990af1')
    return IMFImageSharingEngineClassFactory
def _define_IMFImageSharingEngineClassFactory():
    IMFImageSharingEngineClassFactory = win32more.Media.MediaFoundation.IMFImageSharingEngineClassFactory_head
    IMFImageSharingEngineClassFactory.CreateInstanceFromUDN = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,POINTER(win32more.Media.MediaFoundation.IMFImageSharingEngine_head), use_last_error=False)(3, 'CreateInstanceFromUDN', ((1, 'pUniqueDeviceName'),(1, 'ppEngine'),)))
    win32more.System.Com.IUnknown
    return IMFImageSharingEngineClassFactory
PLAYTO_SOURCE_CREATEFLAGS = Int32
PLAYTO_SOURCE_NONE = 0
PLAYTO_SOURCE_IMAGE = 1
PLAYTO_SOURCE_AUDIO = 2
PLAYTO_SOURCE_VIDEO = 4
PLAYTO_SOURCE_PROTECTED = 8
def _define_IPlayToControl_head():
    class IPlayToControl(win32more.System.Com.IUnknown_head):
        Guid = Guid('607574eb-f4b6-45c1-b08c-cb715122901d')
    return IPlayToControl
def _define_IPlayToControl():
    IPlayToControl = win32more.Media.MediaFoundation.IPlayToControl_head
    IPlayToControl.Connect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSharingEngineClassFactory_head, use_last_error=False)(3, 'Connect', ((1, 'pFactory'),)))
    IPlayToControl.Disconnect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(4, 'Disconnect', ()))
    win32more.System.Com.IUnknown
    return IPlayToControl
def _define_IPlayToControlWithCapabilities_head():
    class IPlayToControlWithCapabilities(win32more.Media.MediaFoundation.IPlayToControl_head):
        Guid = Guid('aa9dd80f-c50a-4220-91c1-332287f82a34')
    return IPlayToControlWithCapabilities
def _define_IPlayToControlWithCapabilities():
    IPlayToControlWithCapabilities = win32more.Media.MediaFoundation.IPlayToControlWithCapabilities_head
    IPlayToControlWithCapabilities.GetCapabilities = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.PLAYTO_SOURCE_CREATEFLAGS), use_last_error=False)(5, 'GetCapabilities', ((1, 'pCapabilities'),)))
    win32more.Media.MediaFoundation.IPlayToControl
    return IPlayToControlWithCapabilities
def _define_IPlayToSourceClassFactory_head():
    class IPlayToSourceClassFactory(win32more.System.Com.IUnknown_head):
        Guid = Guid('842b32a3-9b9b-4d1c-b3f3-49193248a554')
    return IPlayToSourceClassFactory
def _define_IPlayToSourceClassFactory():
    IPlayToSourceClassFactory = win32more.Media.MediaFoundation.IPlayToSourceClassFactory_head
    IPlayToSourceClassFactory.CreateInstance = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IPlayToControl_head,POINTER(win32more.System.WinRT.IInspectable_head), use_last_error=False)(3, 'CreateInstance', ((1, 'dwFlags'),(1, 'pControl'),(1, 'ppSource'),)))
    win32more.System.Com.IUnknown
    return IPlayToSourceClassFactory
def _define_IEVRVideoStreamControl_head():
    class IEVRVideoStreamControl(win32more.System.Com.IUnknown_head):
        Guid = Guid('d0cfe38b-93e7-4772-8957-0400c49a4485')
    return IEVRVideoStreamControl
def _define_IEVRVideoStreamControl():
    IEVRVideoStreamControl = win32more.Media.MediaFoundation.IEVRVideoStreamControl_head
    IEVRVideoStreamControl.SetStreamActiveState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL, use_last_error=False)(3, 'SetStreamActiveState', ((1, 'fActive'),)))
    IEVRVideoStreamControl.GetStreamActiveState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL), use_last_error=False)(4, 'GetStreamActiveState', ((1, 'lpfActive'),)))
    win32more.System.Com.IUnknown
    return IEVRVideoStreamControl
def _define_IMFVideoProcessor_head():
    class IMFVideoProcessor(win32more.System.Com.IUnknown_head):
        Guid = Guid('6ab0000c-fece-4d1f-a2ac-a9573530656e')
    return IMFVideoProcessor
def _define_IMFVideoProcessor():
    IMFVideoProcessor = win32more.Media.MediaFoundation.IMFVideoProcessor_head
    IMFVideoProcessor.GetAvailableVideoProcessorModes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(POINTER(Guid)), use_last_error=False)(3, 'GetAvailableVideoProcessorModes', ((1, 'lpdwNumProcessingModes'),(1, 'ppVideoProcessingModes'),)))
    IMFVideoProcessor.GetVideoProcessorCaps = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.DXVA2_VideoProcessorCaps_head), use_last_error=False)(4, 'GetVideoProcessorCaps', ((1, 'lpVideoProcessorMode'),(1, 'lpVideoProcessorCaps'),)))
    IMFVideoProcessor.GetVideoProcessorMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid), use_last_error=False)(5, 'GetVideoProcessorMode', ((1, 'lpMode'),)))
    IMFVideoProcessor.SetVideoProcessorMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid), use_last_error=False)(6, 'SetVideoProcessorMode', ((1, 'lpMode'),)))
    IMFVideoProcessor.GetProcAmpRange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.DXVA2_ValueRange_head), use_last_error=False)(7, 'GetProcAmpRange', ((1, 'dwProperty'),(1, 'pPropRange'),)))
    IMFVideoProcessor.GetProcAmpValues = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.DXVA2_ProcAmpValues_head), use_last_error=False)(8, 'GetProcAmpValues', ((1, 'dwFlags'),(1, 'Values'),)))
    IMFVideoProcessor.SetProcAmpValues = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.DXVA2_ProcAmpValues_head), use_last_error=False)(9, 'SetProcAmpValues', ((1, 'dwFlags'),(1, 'pValues'),)))
    IMFVideoProcessor.GetFilteringRange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.DXVA2_ValueRange_head), use_last_error=False)(10, 'GetFilteringRange', ((1, 'dwProperty'),(1, 'pPropRange'),)))
    IMFVideoProcessor.GetFilteringValue = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.DXVA2_Fixed32_head), use_last_error=False)(11, 'GetFilteringValue', ((1, 'dwProperty'),(1, 'pValue'),)))
    IMFVideoProcessor.SetFilteringValue = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.DXVA2_Fixed32_head), use_last_error=False)(12, 'SetFilteringValue', ((1, 'dwProperty'),(1, 'pValue'),)))
    IMFVideoProcessor.GetBackgroundColor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(13, 'GetBackgroundColor', ((1, 'lpClrBkg'),)))
    IMFVideoProcessor.SetBackgroundColor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(14, 'SetBackgroundColor', ((1, 'ClrBkg'),)))
    win32more.System.Com.IUnknown
    return IMFVideoProcessor
def _define_MFVideoAlphaBitmapParams_head():
    class MFVideoAlphaBitmapParams(Structure):
        pass
    return MFVideoAlphaBitmapParams
def _define_MFVideoAlphaBitmapParams():
    MFVideoAlphaBitmapParams = win32more.Media.MediaFoundation.MFVideoAlphaBitmapParams_head
    MFVideoAlphaBitmapParams._fields_ = [
        ("dwFlags", UInt32),
        ("clrSrcKey", UInt32),
        ("rcSrc", win32more.Foundation.RECT),
        ("nrcDest", win32more.Media.MediaFoundation.MFVideoNormalizedRect),
        ("fAlpha", Single),
        ("dwFilterMode", UInt32),
    ]
    return MFVideoAlphaBitmapParams
def _define_MFVideoAlphaBitmap_head():
    class MFVideoAlphaBitmap(Structure):
        pass
    return MFVideoAlphaBitmap
def _define_MFVideoAlphaBitmap():
    MFVideoAlphaBitmap = win32more.Media.MediaFoundation.MFVideoAlphaBitmap_head
    class MFVideoAlphaBitmap__bitmap_e__Union(Union):
        pass
    MFVideoAlphaBitmap__bitmap_e__Union._fields_ = [
        ("hdc", win32more.Graphics.Gdi.HDC),
        ("pDDS", win32more.Graphics.Direct3D9.IDirect3DSurface9_head),
    ]
    MFVideoAlphaBitmap._fields_ = [
        ("GetBitmapFromDC", win32more.Foundation.BOOL),
        ("bitmap", MFVideoAlphaBitmap__bitmap_e__Union),
        ("params", win32more.Media.MediaFoundation.MFVideoAlphaBitmapParams),
    ]
    return MFVideoAlphaBitmap
MFVideoAlphaBitmapFlags = Int32
MFVideoAlphaBitmap_EntireDDS = 1
MFVideoAlphaBitmap_SrcColorKey = 2
MFVideoAlphaBitmap_SrcRect = 4
MFVideoAlphaBitmap_DestRect = 8
MFVideoAlphaBitmap_FilterMode = 16
MFVideoAlphaBitmap_Alpha = 32
MFVideoAlphaBitmap_BitMask = 63
def _define_IMFVideoMixerBitmap_head():
    class IMFVideoMixerBitmap(win32more.System.Com.IUnknown_head):
        Guid = Guid('814c7b20-0fdb-4eec-af8f-f957c8f69edc')
    return IMFVideoMixerBitmap
def _define_IMFVideoMixerBitmap():
    IMFVideoMixerBitmap = win32more.Media.MediaFoundation.IMFVideoMixerBitmap_head
    IMFVideoMixerBitmap.SetAlphaBitmap = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVideoAlphaBitmap_head), use_last_error=False)(3, 'SetAlphaBitmap', ((1, 'pBmpParms'),)))
    IMFVideoMixerBitmap.ClearAlphaBitmap = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(4, 'ClearAlphaBitmap', ()))
    IMFVideoMixerBitmap.UpdateAlphaBitmapParameters = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVideoAlphaBitmapParams_head), use_last_error=False)(5, 'UpdateAlphaBitmapParameters', ((1, 'pBmpParms'),)))
    IMFVideoMixerBitmap.GetAlphaBitmapParameters = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVideoAlphaBitmapParams_head), use_last_error=False)(6, 'GetAlphaBitmapParameters', ((1, 'pBmpParms'),)))
    win32more.System.Com.IUnknown
    return IMFVideoMixerBitmap
def _define_IAdvancedMediaCaptureInitializationSettings_head():
    class IAdvancedMediaCaptureInitializationSettings(win32more.System.Com.IUnknown_head):
        Guid = Guid('3de21209-8ba6-4f2a-a577-2819b56ff14d')
    return IAdvancedMediaCaptureInitializationSettings
def _define_IAdvancedMediaCaptureInitializationSettings():
    IAdvancedMediaCaptureInitializationSettings = win32more.Media.MediaFoundation.IAdvancedMediaCaptureInitializationSettings_head
    IAdvancedMediaCaptureInitializationSettings.SetDirectxDeviceManager = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFDXGIDeviceManager_head, use_last_error=False)(3, 'SetDirectxDeviceManager', ((1, 'value'),)))
    win32more.System.Com.IUnknown
    return IAdvancedMediaCaptureInitializationSettings
def _define_IAdvancedMediaCaptureSettings_head():
    class IAdvancedMediaCaptureSettings(win32more.System.Com.IUnknown_head):
        Guid = Guid('24e0485f-a33e-4aa1-b564-6019b1d14f65')
    return IAdvancedMediaCaptureSettings
def _define_IAdvancedMediaCaptureSettings():
    IAdvancedMediaCaptureSettings = win32more.Media.MediaFoundation.IAdvancedMediaCaptureSettings_head
    IAdvancedMediaCaptureSettings.GetDirectxDeviceManager = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFDXGIDeviceManager_head), use_last_error=False)(3, 'GetDirectxDeviceManager', ((1, 'value'),)))
    win32more.System.Com.IUnknown
    return IAdvancedMediaCaptureSettings
def _define_IAdvancedMediaCapture_head():
    class IAdvancedMediaCapture(win32more.System.Com.IUnknown_head):
        Guid = Guid('d0751585-d216-4344-b5bf-463b68f977bb')
    return IAdvancedMediaCapture
def _define_IAdvancedMediaCapture():
    IAdvancedMediaCapture = win32more.Media.MediaFoundation.IAdvancedMediaCapture_head
    IAdvancedMediaCapture.GetAdvancedMediaCaptureSettings = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IAdvancedMediaCaptureSettings_head), use_last_error=False)(3, 'GetAdvancedMediaCaptureSettings', ((1, 'value'),)))
    win32more.System.Com.IUnknown
    return IAdvancedMediaCapture
def _define_IMFSpatialAudioObjectBuffer_head():
    class IMFSpatialAudioObjectBuffer(win32more.Media.MediaFoundation.IMFMediaBuffer_head):
        Guid = Guid('d396ec8c-605e-4249-978d-72ad1c312872')
    return IMFSpatialAudioObjectBuffer
def _define_IMFSpatialAudioObjectBuffer():
    IMFSpatialAudioObjectBuffer = win32more.Media.MediaFoundation.IMFSpatialAudioObjectBuffer_head
    IMFSpatialAudioObjectBuffer.SetID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(8, 'SetID', ((1, 'u32ID'),)))
    IMFSpatialAudioObjectBuffer.GetID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(9, 'GetID', ((1, 'pu32ID'),)))
    IMFSpatialAudioObjectBuffer.SetType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Audio.AudioObjectType, use_last_error=False)(10, 'SetType', ((1, 'type'),)))
    IMFSpatialAudioObjectBuffer.GetType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.Audio.AudioObjectType), use_last_error=False)(11, 'GetType', ((1, 'pType'),)))
    IMFSpatialAudioObjectBuffer.GetMetadataItems = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.Audio.ISpatialAudioMetadataItems_head), use_last_error=False)(12, 'GetMetadataItems', ((1, 'ppMetadataItems'),)))
    win32more.Media.MediaFoundation.IMFMediaBuffer
    return IMFSpatialAudioObjectBuffer
def _define_IMFSpatialAudioSample_head():
    class IMFSpatialAudioSample(win32more.Media.MediaFoundation.IMFSample_head):
        Guid = Guid('abf28a9b-3393-4290-ba79-5ffc46d986b2')
    return IMFSpatialAudioSample
def _define_IMFSpatialAudioSample():
    IMFSpatialAudioSample = win32more.Media.MediaFoundation.IMFSpatialAudioSample_head
    IMFSpatialAudioSample.GetObjectCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(47, 'GetObjectCount', ((1, 'pdwObjectCount'),)))
    IMFSpatialAudioSample.AddSpatialAudioObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSpatialAudioObjectBuffer_head, use_last_error=False)(48, 'AddSpatialAudioObject', ((1, 'pAudioObjBuffer'),)))
    IMFSpatialAudioSample.GetSpatialAudioObjectByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFSpatialAudioObjectBuffer_head), use_last_error=False)(49, 'GetSpatialAudioObjectByIndex', ((1, 'dwIndex'),(1, 'ppAudioObjBuffer'),)))
    win32more.Media.MediaFoundation.IMFSample
    return IMFSpatialAudioSample
def _define_IMFContentDecryptionModuleSession_head():
    class IMFContentDecryptionModuleSession(win32more.System.Com.IUnknown_head):
        Guid = Guid('4e233efd-1dd2-49e8-b577-d63eee4c0d33')
    return IMFContentDecryptionModuleSession
def _define_IMFContentDecryptionModuleSession():
    IMFContentDecryptionModuleSession = win32more.Media.MediaFoundation.IMFContentDecryptionModuleSession_head
    IMFContentDecryptionModuleSession.GetSessionId = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR), use_last_error=False)(3, 'GetSessionId', ((1, 'sessionId'),)))
    IMFContentDecryptionModuleSession.GetExpiration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Double), use_last_error=False)(4, 'GetExpiration', ((1, 'expiration'),)))
    IMFContentDecryptionModuleSession.GetKeyStatuses = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(POINTER(win32more.Media.MediaFoundation.MFMediaKeyStatus_head)),POINTER(UInt32), use_last_error=False)(5, 'GetKeyStatuses', ((1, 'keyStatuses'),(1, 'numKeyStatuses'),)))
    IMFContentDecryptionModuleSession.Load = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Foundation.BOOL), use_last_error=False)(6, 'Load', ((1, 'sessionId'),(1, 'loaded'),)))
    IMFContentDecryptionModuleSession.GenerateRequest = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(Byte),UInt32, use_last_error=False)(7, 'GenerateRequest', ((1, 'initDataType'),(1, 'initData'),(1, 'initDataSize'),)))
    IMFContentDecryptionModuleSession.Update = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Byte),UInt32, use_last_error=False)(8, 'Update', ((1, 'response'),(1, 'responseSize'),)))
    IMFContentDecryptionModuleSession.Close = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(9, 'Close', ()))
    IMFContentDecryptionModuleSession.Remove = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(10, 'Remove', ()))
    win32more.System.Com.IUnknown
    return IMFContentDecryptionModuleSession
def _define_IMFContentDecryptionModuleSessionCallbacks_head():
    class IMFContentDecryptionModuleSessionCallbacks(win32more.System.Com.IUnknown_head):
        Guid = Guid('3f96ee40-ad81-4096-8470-59a4b770f89a')
    return IMFContentDecryptionModuleSessionCallbacks
def _define_IMFContentDecryptionModuleSessionCallbacks():
    IMFContentDecryptionModuleSessionCallbacks = win32more.Media.MediaFoundation.IMFContentDecryptionModuleSessionCallbacks_head
    IMFContentDecryptionModuleSessionCallbacks.KeyMessage = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_MEDIAKEYSESSION_MESSAGETYPE,POINTER(Byte),UInt32,win32more.Foundation.PWSTR, use_last_error=False)(3, 'KeyMessage', ((1, 'messageType'),(1, 'message'),(1, 'messageSize'),(1, 'destinationURL'),)))
    IMFContentDecryptionModuleSessionCallbacks.KeyStatusChanged = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(4, 'KeyStatusChanged', ()))
    win32more.System.Com.IUnknown
    return IMFContentDecryptionModuleSessionCallbacks
def _define_IMFContentDecryptionModule_head():
    class IMFContentDecryptionModule(win32more.System.Com.IUnknown_head):
        Guid = Guid('87be986c-10be-4943-bf48-4b54ce1983a2')
    return IMFContentDecryptionModule
def _define_IMFContentDecryptionModule():
    IMFContentDecryptionModule = win32more.Media.MediaFoundation.IMFContentDecryptionModule_head
    IMFContentDecryptionModule.SetContentEnabler = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFContentEnabler_head,win32more.Media.MediaFoundation.IMFAsyncResult_head, use_last_error=False)(3, 'SetContentEnabler', ((1, 'contentEnabler'),(1, 'result'),)))
    IMFContentDecryptionModule.GetSuspendNotify = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFCdmSuspendNotify_head), use_last_error=False)(4, 'GetSuspendNotify', ((1, 'notify'),)))
    IMFContentDecryptionModule.SetPMPHostApp = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPMPHostApp_head, use_last_error=False)(5, 'SetPMPHostApp', ((1, 'pmpHostApp'),)))
    IMFContentDecryptionModule.CreateSession = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_MEDIAKEYSESSION_TYPE,win32more.Media.MediaFoundation.IMFContentDecryptionModuleSessionCallbacks_head,POINTER(win32more.Media.MediaFoundation.IMFContentDecryptionModuleSession_head), use_last_error=False)(6, 'CreateSession', ((1, 'sessionType'),(1, 'callbacks'),(1, 'session'),)))
    IMFContentDecryptionModule.SetServerCertificate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Byte),UInt32, use_last_error=False)(7, 'SetServerCertificate', ((1, 'certificate'),(1, 'certificateSize'),)))
    IMFContentDecryptionModule.CreateTrustedInput = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Byte),UInt32,POINTER(win32more.Media.MediaFoundation.IMFTrustedInput_head), use_last_error=False)(8, 'CreateTrustedInput', ((1, 'contentInitData'),(1, 'contentInitDataSize'),(1, 'trustedInput'),)))
    IMFContentDecryptionModule.GetProtectionSystemIds = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(POINTER(Guid)),POINTER(UInt32), use_last_error=False)(9, 'GetProtectionSystemIds', ((1, 'systemIds'),(1, 'count'),)))
    win32more.System.Com.IUnknown
    return IMFContentDecryptionModule
def _define_IMFContentDecryptionModuleAccess_head():
    class IMFContentDecryptionModuleAccess(win32more.System.Com.IUnknown_head):
        Guid = Guid('a853d1f4-e2a0-4303-9edc-f1a68ee43136')
    return IMFContentDecryptionModuleAccess
def _define_IMFContentDecryptionModuleAccess():
    IMFContentDecryptionModuleAccess = win32more.Media.MediaFoundation.IMFContentDecryptionModuleAccess_head
    IMFContentDecryptionModuleAccess.CreateContentDecryptionModule = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.UI.Shell.PropertiesSystem.IPropertyStore_head,POINTER(win32more.Media.MediaFoundation.IMFContentDecryptionModule_head), use_last_error=False)(3, 'CreateContentDecryptionModule', ((1, 'contentDecryptionModuleProperties'),(1, 'contentDecryptionModule'),)))
    IMFContentDecryptionModuleAccess.GetConfiguration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.UI.Shell.PropertiesSystem.IPropertyStore_head), use_last_error=False)(4, 'GetConfiguration', ((1, 'configuration'),)))
    IMFContentDecryptionModuleAccess.GetKeySystem = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR), use_last_error=False)(5, 'GetKeySystem', ((1, 'keySystem'),)))
    win32more.System.Com.IUnknown
    return IMFContentDecryptionModuleAccess
def _define_IMFContentDecryptionModuleFactory_head():
    class IMFContentDecryptionModuleFactory(win32more.System.Com.IUnknown_head):
        Guid = Guid('7d5abf16-4cbb-4e08-b977-9ba59049943e')
    return IMFContentDecryptionModuleFactory
def _define_IMFContentDecryptionModuleFactory():
    IMFContentDecryptionModuleFactory = win32more.Media.MediaFoundation.IMFContentDecryptionModuleFactory_head
    IMFContentDecryptionModuleFactory.IsTypeSupported = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR, use_last_error=False)(3, 'IsTypeSupported', ((1, 'keySystem'),(1, 'contentType'),)))
    IMFContentDecryptionModuleFactory.CreateContentDecryptionModuleAccess = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.UI.Shell.PropertiesSystem.IPropertyStore_head),UInt32,POINTER(win32more.Media.MediaFoundation.IMFContentDecryptionModuleAccess_head), use_last_error=False)(4, 'CreateContentDecryptionModuleAccess', ((1, 'keySystem'),(1, 'configurations'),(1, 'numConfigurations'),(1, 'contentDecryptionModuleAccess'),)))
    win32more.System.Com.IUnknown
    return IMFContentDecryptionModuleFactory
__MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0001 = Int32
MFVirtualCameraType_SoftwareCameraSource = 0
__MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0002 = Int32
MFVirtualCameraLifetime_Session = 0
MFVirtualCameraLifetime_System = 1
__MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0003 = Int32
MFVirtualCameraAccess_CurrentUser = 0
MFVirtualCameraAccess_AllUsers = 1
def _define_IMFCameraSyncObject_head():
    class IMFCameraSyncObject(win32more.System.Com.IUnknown_head):
        Guid = Guid('6338b23a-3042-49d2-a3ea-ec0fed815407')
    return IMFCameraSyncObject
def _define_IMFCameraSyncObject():
    IMFCameraSyncObject = win32more.Media.MediaFoundation.IMFCameraSyncObject_head
    IMFCameraSyncObject.WaitOnSignal = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(3, 'WaitOnSignal', ((1, 'timeOutInMs'),)))
    IMFCameraSyncObject.Shutdown = COMMETHOD(WINFUNCTYPE(Void, use_last_error=False)(4, 'Shutdown', ()))
    win32more.System.Com.IUnknown
    return IMFCameraSyncObject
def _define_IMFVirtualCamera_head():
    class IMFVirtualCamera(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('1c08a864-ef6c-4c75-af59-5f2d68da9563')
    return IMFVirtualCamera
def _define_IMFVirtualCamera():
    IMFVirtualCamera = win32more.Media.MediaFoundation.IMFVirtualCamera_head
    IMFVirtualCamera.AddDeviceSourceInfo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR, use_last_error=False)(33, 'AddDeviceSourceInfo', ((1, 'DeviceSourceInfo'),)))
    IMFVirtualCamera.AddProperty = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,c_char_p_no,UInt32, use_last_error=False)(34, 'AddProperty', ((1, 'pKey'),(1, 'Type'),(1, 'pbData'),(1, 'cbData'),)))
    IMFVirtualCamera.AddRegistryEntry = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,c_char_p_no,UInt32, use_last_error=False)(35, 'AddRegistryEntry', ((1, 'EntryName'),(1, 'SubkeyPath'),(1, 'dwRegType'),(1, 'pbData'),(1, 'cbData'),)))
    IMFVirtualCamera.Start = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncCallback_head, use_last_error=False)(36, 'Start', ((1, 'pCallback'),)))
    IMFVirtualCamera.Stop = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(37, 'Stop', ()))
    IMFVirtualCamera.Remove = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(38, 'Remove', ()))
    IMFVirtualCamera.GetMediaSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaSource_head), use_last_error=False)(39, 'GetMediaSource', ((1, 'ppMediaSource'),)))
    IMFVirtualCamera.SendCameraProperty = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),UInt32,UInt32,c_void_p,UInt32,c_void_p,UInt32,POINTER(UInt32), use_last_error=False)(40, 'SendCameraProperty', ((1, 'propertySet'),(1, 'propertyId'),(1, 'propertyFlags'),(1, 'propertyPayload'),(1, 'propertyPayloadLength'),(1, 'data'),(1, 'dataLength'),(1, 'dataWritten'),)))
    IMFVirtualCamera.CreateSyncEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),UInt32,UInt32,win32more.Foundation.HANDLE,POINTER(win32more.Media.MediaFoundation.IMFCameraSyncObject_head), use_last_error=False)(41, 'CreateSyncEvent', ((1, 'kseventSet'),(1, 'kseventId'),(1, 'kseventFlags'),(1, 'eventHandle'),(1, 'cameraSyncObject'),)))
    IMFVirtualCamera.CreateSyncSemaphore = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),UInt32,UInt32,win32more.Foundation.HANDLE,Int32,POINTER(win32more.Media.MediaFoundation.IMFCameraSyncObject_head), use_last_error=False)(42, 'CreateSyncSemaphore', ((1, 'kseventSet'),(1, 'kseventId'),(1, 'kseventFlags'),(1, 'semaphoreHandle'),(1, 'semaphoreAdjustment'),(1, 'cameraSyncObject'),)))
    IMFVirtualCamera.Shutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(43, 'Shutdown', ()))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFVirtualCamera
OPM_HDCP_TYPE = Int32
OPM_HDCP_TYPE_0 = 0
OPM_HDCP_TYPE_1 = 1
OPM_HDCP_STATUS = Int32
OPM_HDCP_STATUS_ON = 0
OPM_HDCP_STATUS_OFF = 1
def _define_DXVAHD_CreateDevice():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.IDirect3DDevice9Ex_head,POINTER(win32more.Media.MediaFoundation.DXVAHD_CONTENT_DESC_head),win32more.Media.MediaFoundation.DXVAHD_DEVICE_USAGE,win32more.Media.MediaFoundation.PDXVAHDSW_Plugin,POINTER(win32more.Media.MediaFoundation.IDXVAHD_Device_head), use_last_error=False)(("DXVAHD_CreateDevice", windll["dxva2"]), ((1, 'pD3DDevice'),(1, 'pContentDesc'),(1, 'Usage'),(1, 'pPlugin'),(1, 'ppDevice'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DXVA2CreateDirect3DDeviceManager9():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(win32more.Media.MediaFoundation.IDirect3DDeviceManager9_head), use_last_error=False)(("DXVA2CreateDirect3DDeviceManager9", windll["dxva2"]), ((1, 'pResetToken'),(1, 'ppDeviceManager'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DXVA2CreateVideoService():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.IDirect3DDevice9_head,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(("DXVA2CreateVideoService", windll["dxva2"]), ((1, 'pDD'),(1, 'riid'),(1, 'ppService'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_OPMGetVideoOutputsFromHMONITOR():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Gdi.HMONITOR,win32more.Media.MediaFoundation.OPM_VIDEO_OUTPUT_SEMANTICS,POINTER(UInt32),POINTER(POINTER(win32more.Media.MediaFoundation.IOPMVideoOutput_head)), use_last_error=False)(("OPMGetVideoOutputsFromHMONITOR", windll["dxva2"]), ((1, 'hMonitor'),(1, 'vos'),(1, 'pulNumVideoOutputs'),(1, 'pppOPMVideoOutputArray'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_OPMGetVideoOutputForTarget():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.LUID_head),UInt32,win32more.Media.MediaFoundation.OPM_VIDEO_OUTPUT_SEMANTICS,POINTER(win32more.Media.MediaFoundation.IOPMVideoOutput_head), use_last_error=False)(("OPMGetVideoOutputForTarget", windll["dxva2"]), ((1, 'pAdapterLuid'),(1, 'VidPnTarget'),(1, 'vos'),(1, 'ppOPMVideoOutput'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_OPMGetVideoOutputsFromIDirect3DDevice9Object():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.IDirect3DDevice9_head,win32more.Media.MediaFoundation.OPM_VIDEO_OUTPUT_SEMANTICS,POINTER(UInt32),POINTER(POINTER(win32more.Media.MediaFoundation.IOPMVideoOutput_head)), use_last_error=False)(("OPMGetVideoOutputsFromIDirect3DDevice9Object", windll["dxva2"]), ((1, 'pDirect3DDevice9'),(1, 'vos'),(1, 'pulNumVideoOutputs'),(1, 'pppOPMVideoOutputArray'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFSerializeAttributesToStream():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head,UInt32,win32more.System.Com.IStream_head, use_last_error=False)(("MFSerializeAttributesToStream", windll["MFPlat"]), ((1, 'pAttr'),(1, 'dwOptions'),(1, 'pStm'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFDeserializeAttributesFromStream():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head,UInt32,win32more.System.Com.IStream_head, use_last_error=False)(("MFDeserializeAttributesFromStream", windll["MFPlat"]), ((1, 'pAttr'),(1, 'dwOptions'),(1, 'pStm'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateTransformActivate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFActivate_head), use_last_error=False)(("MFCreateTransformActivate", windll["MFPlat"]), ((1, 'ppActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMediaSession():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSession_head), use_last_error=False)(("MFCreateMediaSession", windll["MF"]), ((1, 'pConfiguration'),(1, 'ppMediaSession'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreatePMPMediaSession():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSession_head),POINTER(win32more.Media.MediaFoundation.IMFActivate_head), use_last_error=False)(("MFCreatePMPMediaSession", windll["MF"]), ((1, 'dwCreationFlags'),(1, 'pConfiguration'),(1, 'ppMediaSession'),(1, 'ppEnablerActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSourceResolver():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFSourceResolver_head), use_last_error=False)(("MFCreateSourceResolver", windll["MFPlat"]), ((1, 'ppISourceResolver'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CreatePropertyStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.UI.Shell.PropertiesSystem.IPropertyStore_head), use_last_error=False)(("CreatePropertyStore", windll["MFPlat"]), ((1, 'ppStore'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetSupportedSchemes():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(("MFGetSupportedSchemes", windll["MFPlat"]), ((1, 'pPropVarSchemeArray'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetSupportedMimeTypes():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(("MFGetSupportedMimeTypes", windll["MFPlat"]), ((1, 'pPropVarMimeTypeArray'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateTopology():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTopology_head), use_last_error=False)(("MFCreateTopology", windll["MF"]), ((1, 'ppTopo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateTopologyNode():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_TOPOLOGY_TYPE,POINTER(win32more.Media.MediaFoundation.IMFTopologyNode_head), use_last_error=False)(("MFCreateTopologyNode", windll["MF"]), ((1, 'NodeType'),(1, 'ppNode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetTopoNodeCurrentType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTopologyNode_head,UInt32,win32more.Foundation.BOOL,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head), use_last_error=False)(("MFGetTopoNodeCurrentType", windll["MF"]), ((1, 'pNode'),(1, 'dwStreamIndex'),(1, 'fOutput'),(1, 'ppType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetService():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,POINTER(Guid),POINTER(Guid),POINTER(c_void_p), use_last_error=False)(("MFGetService", windll["MF"]), ((1, 'punkObject'),(1, 'guidService'),(1, 'riid'),(1, 'ppvObject'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetSystemTime():
    try:
        return WINFUNCTYPE(Int64, use_last_error=False)(("MFGetSystemTime", windll["MFPlat"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreatePresentationClock():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFPresentationClock_head), use_last_error=False)(("MFCreatePresentationClock", windll["MF"]), ((1, 'ppPresentationClock'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSystemTimeSource():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFPresentationTimeSource_head), use_last_error=False)(("MFCreateSystemTimeSource", windll["MFPlat"]), ((1, 'ppSystemTimeSource'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreatePresentationDescriptor():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFStreamDescriptor_head),POINTER(win32more.Media.MediaFoundation.IMFPresentationDescriptor_head), use_last_error=False)(("MFCreatePresentationDescriptor", windll["MFPlat"]), ((1, 'cStreamDescriptors'),(1, 'apStreamDescriptors'),(1, 'ppPresentationDescriptor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFRequireProtectedEnvironment():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationDescriptor_head, use_last_error=False)(("MFRequireProtectedEnvironment", windll["MF"]), ((1, 'pPresentationDescriptor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFSerializePresentationDescriptor():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationDescriptor_head,POINTER(UInt32),POINTER(c_char_p_no), use_last_error=False)(("MFSerializePresentationDescriptor", windll["MFPlat"]), ((1, 'pPD'),(1, 'pcbData'),(1, 'ppbData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFDeserializePresentationDescriptor():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Byte),POINTER(win32more.Media.MediaFoundation.IMFPresentationDescriptor_head), use_last_error=False)(("MFDeserializePresentationDescriptor", windll["MFPlat"]), ((1, 'cbData'),(1, 'pbData'),(1, 'ppPD'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateStreamDescriptor():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head),POINTER(win32more.Media.MediaFoundation.IMFStreamDescriptor_head), use_last_error=False)(("MFCreateStreamDescriptor", windll["MFPlat"]), ((1, 'dwStreamIdentifier'),(1, 'cMediaTypes'),(1, 'apMediaTypes'),(1, 'ppDescriptor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSimpleTypeHandler():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaTypeHandler_head), use_last_error=False)(("MFCreateSimpleTypeHandler", windll["MF"]), ((1, 'ppHandler'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFShutdownObject():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head, use_last_error=False)(("MFShutdownObject", windll["MF"]), ((1, 'pUnk'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateAudioRenderer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head), use_last_error=False)(("MFCreateAudioRenderer", windll["MF"]), ((1, 'pAudioAttributes'),(1, 'ppSink'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateAudioRendererActivate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFActivate_head), use_last_error=False)(("MFCreateAudioRendererActivate", windll["MF"]), ((1, 'ppActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVideoRendererActivate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HWND,POINTER(win32more.Media.MediaFoundation.IMFActivate_head), use_last_error=False)(("MFCreateVideoRendererActivate", windll["MF"]), ((1, 'hwndVideo'),(1, 'ppActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMPEG4MediaSink():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head), use_last_error=False)(("MFCreateMPEG4MediaSink", windll["MF"]), ((1, 'pIByteStream'),(1, 'pVideoMediaType'),(1, 'pAudioMediaType'),(1, 'ppIMediaSink'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreate3GPMediaSink():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head), use_last_error=False)(("MFCreate3GPMediaSink", windll["MF"]), ((1, 'pIByteStream'),(1, 'pVideoMediaType'),(1, 'pAudioMediaType'),(1, 'ppIMediaSink'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMP3MediaSink():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head), use_last_error=False)(("MFCreateMP3MediaSink", windll["MF"]), ((1, 'pTargetByteStream'),(1, 'ppMediaSink'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateAC3MediaSink():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head), use_last_error=False)(("MFCreateAC3MediaSink", windll["MF"]), ((1, 'pTargetByteStream'),(1, 'pAudioMediaType'),(1, 'ppMediaSink'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateADTSMediaSink():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head), use_last_error=False)(("MFCreateADTSMediaSink", windll["MF"]), ((1, 'pTargetByteStream'),(1, 'pAudioMediaType'),(1, 'ppMediaSink'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMuxSink():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,win32more.Media.MediaFoundation.IMFAttributes_head,win32more.Media.MediaFoundation.IMFByteStream_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head), use_last_error=False)(("MFCreateMuxSink", windll["MF"]), ((1, 'guidOutputSubType'),(1, 'pOutputAttributes'),(1, 'pOutputByteStream'),(1, 'ppMuxSink'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateFMPEG4MediaSink():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head), use_last_error=False)(("MFCreateFMPEG4MediaSink", windll["MF"]), ((1, 'pIByteStream'),(1, 'pVideoMediaType'),(1, 'pAudioMediaType'),(1, 'ppIMediaSink'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateAVIMediaSink():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head), use_last_error=False)(("MFCreateAVIMediaSink", windll["mfsrcsnk"]), ((1, 'pIByteStream'),(1, 'pVideoMediaType'),(1, 'pAudioMediaType'),(1, 'ppIMediaSink'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateWAVEMediaSink():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head), use_last_error=False)(("MFCreateWAVEMediaSink", windll["mfsrcsnk"]), ((1, 'pTargetByteStream'),(1, 'pAudioMediaType'),(1, 'ppMediaSink'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateTopoLoader():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTopoLoader_head), use_last_error=False)(("MFCreateTopoLoader", windll["MF"]), ((1, 'ppObj'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSampleGrabberSinkActivate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.Media.MediaFoundation.IMFSampleGrabberSinkCallback_head,POINTER(win32more.Media.MediaFoundation.IMFActivate_head), use_last_error=False)(("MFCreateSampleGrabberSinkActivate", windll["MF"]), ((1, 'pIMFMediaType'),(1, 'pIMFSampleGrabberSinkCallback'),(1, 'ppIActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateStandardQualityManager():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFQualityManager_head), use_last_error=False)(("MFCreateStandardQualityManager", windll["MF"]), ((1, 'ppQualityManager'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSequencerSource():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,POINTER(win32more.Media.MediaFoundation.IMFSequencerSource_head), use_last_error=False)(("MFCreateSequencerSource", windll["MF"]), ((1, 'pReserved'),(1, 'ppSequencerSource'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSequencerSegmentOffset():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,Int64,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head), use_last_error=False)(("MFCreateSequencerSegmentOffset", windll["MF"]), ((1, 'dwId'),(1, 'hnsOffset'),(1, 'pvarSegmentOffset'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateAggregateSource():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFCollection_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSource_head), use_last_error=False)(("MFCreateAggregateSource", windll["MF"]), ((1, 'pSourceCollection'),(1, 'ppAggSource'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateCredentialCache():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFNetCredentialCache_head), use_last_error=False)(("MFCreateCredentialCache", windll["MF"]), ((1, 'ppCache'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateProxyLocator():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.UI.Shell.PropertiesSystem.IPropertyStore_head,POINTER(win32more.Media.MediaFoundation.IMFNetProxyLocator_head), use_last_error=False)(("MFCreateProxyLocator", windll["MF"]), ((1, 'pszProtocol'),(1, 'pProxyConfig'),(1, 'ppProxyLocator'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateNetSchemePlugin():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(("MFCreateNetSchemePlugin", windll["MF"]), ((1, 'riid'),(1, 'ppvHandler'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreatePMPServer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFPMPServer_head), use_last_error=False)(("MFCreatePMPServer", windll["MF"]), ((1, 'dwCreationFlags'),(1, 'ppPMPServer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateRemoteDesktopPlugin():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFRemoteDesktopPlugin_head), use_last_error=False)(("MFCreateRemoteDesktopPlugin", windll["MF"]), ((1, 'ppPlugin'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CreateNamedPropertyStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.UI.Shell.PropertiesSystem.INamedPropertyStore_head), use_last_error=False)(("CreateNamedPropertyStore", windll["MF"]), ((1, 'ppStore'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSampleCopierMFT():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTransform_head), use_last_error=False)(("MFCreateSampleCopierMFT", windll["MF"]), ((1, 'ppCopierMFT'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateTranscodeProfile():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTranscodeProfile_head), use_last_error=False)(("MFCreateTranscodeProfile", windll["MF"]), ((1, 'ppTranscodeProfile'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateTranscodeTopology():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaSource_head,win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.IMFTranscodeProfile_head,POINTER(win32more.Media.MediaFoundation.IMFTopology_head), use_last_error=False)(("MFCreateTranscodeTopology", windll["MF"]), ((1, 'pSrc'),(1, 'pwszOutputFilePath'),(1, 'pProfile'),(1, 'ppTranscodeTopo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateTranscodeTopologyFromByteStream():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaSource_head,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFTranscodeProfile_head,POINTER(win32more.Media.MediaFoundation.IMFTopology_head), use_last_error=False)(("MFCreateTranscodeTopologyFromByteStream", windll["MF"]), ((1, 'pSrc'),(1, 'pOutputStream'),(1, 'pProfile'),(1, 'ppTranscodeTopo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFTranscodeGetAudioOutputAvailableTypes():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),UInt32,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFCollection_head), use_last_error=False)(("MFTranscodeGetAudioOutputAvailableTypes", windll["MF"]), ((1, 'guidSubType'),(1, 'dwMFTFlags'),(1, 'pCodecConfig'),(1, 'ppAvailableTypes'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateTranscodeSinkActivate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFActivate_head), use_last_error=False)(("MFCreateTranscodeSinkActivate", windll["MF"]), ((1, 'ppActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateTrackedSample():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTrackedSample_head), use_last_error=False)(("MFCreateTrackedSample", windll["MFPlat"]), ((1, 'ppMFSample'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMFByteStreamOnStream():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IStream_head,POINTER(win32more.Media.MediaFoundation.IMFByteStream_head), use_last_error=False)(("MFCreateMFByteStreamOnStream", windll["MFPlat"]), ((1, 'pStream'),(1, 'ppByteStream'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateStreamOnMFByteStream():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,POINTER(win32more.System.Com.IStream_head), use_last_error=False)(("MFCreateStreamOnMFByteStream", windll["MFPlat"]), ((1, 'pByteStream'),(1, 'ppStream'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMFByteStreamOnStreamEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,POINTER(win32more.Media.MediaFoundation.IMFByteStream_head), use_last_error=False)(("MFCreateMFByteStreamOnStreamEx", windll["MFPlat"]), ((1, 'punkStream'),(1, 'ppByteStream'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateStreamOnMFByteStreamEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(("MFCreateStreamOnMFByteStreamEx", windll["MFPlat"]), ((1, 'pByteStream'),(1, 'riid'),(1, 'ppv'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMediaTypeFromProperties():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head), use_last_error=False)(("MFCreateMediaTypeFromProperties", windll["MFPlat"]), ((1, 'punkStream'),(1, 'ppMediaType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreatePropertiesFromMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(("MFCreatePropertiesFromMediaType", windll["MFPlat"]), ((1, 'pMediaType'),(1, 'riid'),(1, 'ppv'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFEnumDeviceSources():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(POINTER(win32more.Media.MediaFoundation.IMFActivate_head)),POINTER(UInt32), use_last_error=False)(("MFEnumDeviceSources", windll["MF"]), ((1, 'pAttributes'),(1, 'pppSourceActivate'),(1, 'pcSourceActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateDeviceSource():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSource_head), use_last_error=False)(("MFCreateDeviceSource", windll["MF"]), ((1, 'pAttributes'),(1, 'ppSource'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateDeviceSourceActivate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFActivate_head), use_last_error=False)(("MFCreateDeviceSourceActivate", windll["MF"]), ((1, 'pAttributes'),(1, 'ppActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateProtectedEnvironmentAccess():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFProtectedEnvironmentAccess_head), use_last_error=False)(("MFCreateProtectedEnvironmentAccess", windll["MF"]), ((1, 'ppAccess'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFLoadSignedLibrary():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.IMFSignedLibrary_head), use_last_error=False)(("MFLoadSignedLibrary", windll["MF"]), ((1, 'pszName'),(1, 'ppLib'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetSystemId():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFSystemId_head), use_last_error=False)(("MFGetSystemId", windll["MF"]), ((1, 'ppId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetLocalId():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32,POINTER(win32more.Foundation.PWSTR), use_last_error=False)(("MFGetLocalId", windll["MF"]), ((1, 'verifier'),(1, 'size'),(1, 'id'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateContentProtectionDevice():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.IMFContentProtectionDevice_head), use_last_error=False)(("MFCreateContentProtectionDevice", windll["MFPlat"]), ((1, 'ProtectionSystemId'),(1, 'ContentProtectionDevice'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFIsContentProtectionDeviceSupported():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Foundation.BOOL), use_last_error=False)(("MFIsContentProtectionDeviceSupported", windll["MFPlat"]), ((1, 'ProtectionSystemId'),(1, 'isSupported'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateContentDecryptorContext():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),win32more.Media.MediaFoundation.IMFDXGIDeviceManager_head,win32more.Media.MediaFoundation.IMFContentProtectionDevice_head,POINTER(win32more.Media.MediaFoundation.IMFContentDecryptorContext_head), use_last_error=False)(("MFCreateContentDecryptorContext", windll["MFPlat"]), ((1, 'guidMediaProtectionSystemId'),(1, 'pD3DManager'),(1, 'pContentProtectionDevice'),(1, 'ppContentDecryptorContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSensorGroup():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.IMFSensorGroup_head), use_last_error=False)(("MFCreateSensorGroup", windll["MFSENSORGROUP"]), ((1, 'SensorGroupSymbolicLink'),(1, 'ppSensorGroup'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSensorStream():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFAttributes_head,win32more.Media.MediaFoundation.IMFCollection_head,POINTER(win32more.Media.MediaFoundation.IMFSensorStream_head), use_last_error=False)(("MFCreateSensorStream", windll["MFSENSORGROUP"]), ((1, 'StreamId'),(1, 'pAttributes'),(1, 'pMediaTypeCollection'),(1, 'ppStream'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSensorProfile():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),UInt32,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.IMFSensorProfile_head), use_last_error=False)(("MFCreateSensorProfile", windll["MFSENSORGROUP"]), ((1, 'ProfileType'),(1, 'ProfileIndex'),(1, 'Constraints'),(1, 'ppProfile'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSensorProfileCollection():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFSensorProfileCollection_head), use_last_error=False)(("MFCreateSensorProfileCollection", windll["MFSENSORGROUP"]), ((1, 'ppSensorProfile'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSensorActivityMonitor():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSensorActivitiesReportCallback_head,POINTER(win32more.Media.MediaFoundation.IMFSensorActivityMonitor_head), use_last_error=False)(("MFCreateSensorActivityMonitor", windll["MFSENSORGROUP"]), ((1, 'pCallback'),(1, 'ppActivityMonitor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateExtendedCameraIntrinsics():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFExtendedCameraIntrinsics_head), use_last_error=False)(("MFCreateExtendedCameraIntrinsics", windll["MFCORE"]), ((1, 'ppExtendedCameraIntrinsics'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateExtendedCameraIntrinsicModel():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFCameraIntrinsic_DistortionModelType,POINTER(win32more.Media.MediaFoundation.IMFExtendedCameraIntrinsicModel_head), use_last_error=False)(("MFCreateExtendedCameraIntrinsicModel", windll["MFCORE"]), ((1, 'distortionModelType'),(1, 'ppExtendedCameraIntrinsicModel'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateRelativePanelWatcher():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.IMFRelativePanelWatcher_head), use_last_error=False)(("MFCreateRelativePanelWatcher", windll["MFSENSORGROUP"]), ((1, 'videoDeviceId'),(1, 'displayMonitorDeviceId'),(1, 'ppRelativePanelWatcher'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateCameraOcclusionStateMonitor():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.IMFCameraOcclusionStateReportCallback_head,POINTER(win32more.Media.MediaFoundation.IMFCameraOcclusionStateMonitor_head), use_last_error=False)(("MFCreateCameraOcclusionStateMonitor", windll["MFSENSORGROUP"]), ((1, 'symbolicLink'),(1, 'callback'),(1, 'occlusionStateMonitor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateASFContentInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFContentInfo_head), use_last_error=False)(("MFCreateASFContentInfo", windll["MF"]), ((1, 'ppIContentInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateASFIndexer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFIndexer_head), use_last_error=False)(("MFCreateASFIndexer", windll["MF"]), ((1, 'ppIIndexer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateASFIndexerByteStream():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,UInt64,POINTER(win32more.Media.MediaFoundation.IMFByteStream_head), use_last_error=False)(("MFCreateASFIndexerByteStream", windll["MF"]), ((1, 'pIContentByteStream'),(1, 'cbIndexStartOffset'),(1, 'pIIndexByteStream'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateASFSplitter():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFSplitter_head), use_last_error=False)(("MFCreateASFSplitter", windll["MF"]), ((1, 'ppISplitter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateASFProfile():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFProfile_head), use_last_error=False)(("MFCreateASFProfile", windll["MF"]), ((1, 'ppIProfile'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateASFProfileFromPresentationDescriptor():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationDescriptor_head,POINTER(win32more.Media.MediaFoundation.IMFASFProfile_head), use_last_error=False)(("MFCreateASFProfileFromPresentationDescriptor", windll["MF"]), ((1, 'pIPD'),(1, 'ppIProfile'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreatePresentationDescriptorFromASFProfile():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFASFProfile_head,POINTER(win32more.Media.MediaFoundation.IMFPresentationDescriptor_head), use_last_error=False)(("MFCreatePresentationDescriptorFromASFProfile", windll["MF"]), ((1, 'pIProfile'),(1, 'ppIPD'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateASFMultiplexer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFMultiplexer_head), use_last_error=False)(("MFCreateASFMultiplexer", windll["MF"]), ((1, 'ppIMultiplexer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateASFStreamSelector():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFASFProfile_head,POINTER(win32more.Media.MediaFoundation.IMFASFStreamSelector_head), use_last_error=False)(("MFCreateASFStreamSelector", windll["MF"]), ((1, 'pIASFProfile'),(1, 'ppSelector'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateASFMediaSink():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head), use_last_error=False)(("MFCreateASFMediaSink", windll["MF"]), ((1, 'pIByteStream'),(1, 'ppIMediaSink'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateASFMediaSinkActivate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.IMFASFContentInfo_head,POINTER(win32more.Media.MediaFoundation.IMFActivate_head), use_last_error=False)(("MFCreateASFMediaSinkActivate", windll["MF"]), ((1, 'pwszFileName'),(1, 'pContentInfo'),(1, 'ppIActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateWMVEncoderActivate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.UI.Shell.PropertiesSystem.IPropertyStore_head,POINTER(win32more.Media.MediaFoundation.IMFActivate_head), use_last_error=False)(("MFCreateWMVEncoderActivate", windll["MF"]), ((1, 'pMediaType'),(1, 'pEncodingConfigurationProperties'),(1, 'ppActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateWMAEncoderActivate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.UI.Shell.PropertiesSystem.IPropertyStore_head,POINTER(win32more.Media.MediaFoundation.IMFActivate_head), use_last_error=False)(("MFCreateWMAEncoderActivate", windll["MF"]), ((1, 'pMediaType'),(1, 'pEncodingConfigurationProperties'),(1, 'ppActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateASFStreamingMediaSink():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head), use_last_error=False)(("MFCreateASFStreamingMediaSink", windll["MF"]), ((1, 'pIByteStream'),(1, 'ppIMediaSink'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateASFStreamingMediaSinkActivate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFActivate_head,win32more.Media.MediaFoundation.IMFASFContentInfo_head,POINTER(win32more.Media.MediaFoundation.IMFActivate_head), use_last_error=False)(("MFCreateASFStreamingMediaSinkActivate", windll["MF"]), ((1, 'pByteStreamActivate'),(1, 'pContentInfo'),(1, 'ppIActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateD3D12SynchronizationObject():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D12.ID3D12Device_head,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(("MFCreateD3D12SynchronizationObject", windll["MFPlat"]), ((1, 'pDevice'),(1, 'riid'),(1, 'ppvSyncObject'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFStartup():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32, use_last_error=False)(("MFStartup", windll["MFPlat"]), ((1, 'Version'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFShutdown():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(("MFShutdown", windll["MFPlat"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFLockPlatform():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(("MFLockPlatform", windll["MFPlat"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFUnlockPlatform():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(("MFUnlockPlatform", windll["MFPlat"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFPutWorkItem():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(("MFPutWorkItem", windll["MFPlat"]), ((1, 'dwQueue'),(1, 'pCallback'),(1, 'pState'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFPutWorkItem2():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,Int32,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(("MFPutWorkItem2", windll["MFPlat"]), ((1, 'dwQueue'),(1, 'Priority'),(1, 'pCallback'),(1, 'pState'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFPutWorkItemEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFAsyncResult_head, use_last_error=False)(("MFPutWorkItemEx", windll["MFPlat"]), ((1, 'dwQueue'),(1, 'pResult'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFPutWorkItemEx2():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,Int32,win32more.Media.MediaFoundation.IMFAsyncResult_head, use_last_error=False)(("MFPutWorkItemEx2", windll["MFPlat"]), ((1, 'dwQueue'),(1, 'Priority'),(1, 'pResult'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFPutWaitingWorkItem():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,Int32,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(UInt64), use_last_error=False)(("MFPutWaitingWorkItem", windll["MFPlat"]), ((1, 'hEvent'),(1, 'Priority'),(1, 'pResult'),(1, 'pKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFAllocateSerialWorkQueue():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32), use_last_error=False)(("MFAllocateSerialWorkQueue", windll["MFPlat"]), ((1, 'dwWorkQueue'),(1, 'pdwWorkQueue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFScheduleWorkItemEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,Int64,POINTER(UInt64), use_last_error=False)(("MFScheduleWorkItemEx", windll["MFPlat"]), ((1, 'pResult'),(1, 'Timeout'),(1, 'pKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFScheduleWorkItem():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head,Int64,POINTER(UInt64), use_last_error=False)(("MFScheduleWorkItem", windll["MFPlat"]), ((1, 'pCallback'),(1, 'pState'),(1, 'Timeout'),(1, 'pKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCancelWorkItem():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64, use_last_error=False)(("MFCancelWorkItem", windll["MFPlat"]), ((1, 'Key'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetTimerPeriodicity():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(("MFGetTimerPeriodicity", windll["MFPlat"]), ((1, 'Periodicity'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFAddPeriodicCallback():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFPERIODICCALLBACK,win32more.System.Com.IUnknown_head,POINTER(UInt32), use_last_error=False)(("MFAddPeriodicCallback", windll["MFPlat"]), ((1, 'Callback'),(1, 'pContext'),(1, 'pdwKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFRemovePeriodicCallback():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(("MFRemovePeriodicCallback", windll["MFPlat"]), ((1, 'dwKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFAllocateWorkQueueEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFASYNC_WORKQUEUE_TYPE,POINTER(UInt32), use_last_error=False)(("MFAllocateWorkQueueEx", windll["MFPlat"]), ((1, 'WorkQueueType'),(1, 'pdwWorkQueue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFAllocateWorkQueue():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32), use_last_error=False)(("MFAllocateWorkQueue", windll["MFPlat"]), ((1, 'pdwWorkQueue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFLockWorkQueue():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(("MFLockWorkQueue", windll["MFPlat"]), ((1, 'dwWorkQueue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFUnlockWorkQueue():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32, use_last_error=False)(("MFUnlockWorkQueue", windll["MFPlat"]), ((1, 'dwWorkQueue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFBeginRegisterWorkQueueWithMMCSS():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.PWSTR,UInt32,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(("MFBeginRegisterWorkQueueWithMMCSS", windll["MFPlat"]), ((1, 'dwWorkQueueId'),(1, 'wszClass'),(1, 'dwTaskId'),(1, 'pDoneCallback'),(1, 'pDoneState'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFBeginRegisterWorkQueueWithMMCSSEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.PWSTR,UInt32,Int32,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(("MFBeginRegisterWorkQueueWithMMCSSEx", windll["MFPlat"]), ((1, 'dwWorkQueueId'),(1, 'wszClass'),(1, 'dwTaskId'),(1, 'lPriority'),(1, 'pDoneCallback'),(1, 'pDoneState'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFEndRegisterWorkQueueWithMMCSS():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(UInt32), use_last_error=False)(("MFEndRegisterWorkQueueWithMMCSS", windll["MFPlat"]), ((1, 'pResult'),(1, 'pdwTaskId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFBeginUnregisterWorkQueueWithMMCSS():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head, use_last_error=False)(("MFBeginUnregisterWorkQueueWithMMCSS", windll["MFPlat"]), ((1, 'dwWorkQueueId'),(1, 'pDoneCallback'),(1, 'pDoneState'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFEndUnregisterWorkQueueWithMMCSS():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head, use_last_error=False)(("MFEndUnregisterWorkQueueWithMMCSS", windll["MFPlat"]), ((1, 'pResult'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetWorkQueueMMCSSClass():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Char),POINTER(UInt32), use_last_error=False)(("MFGetWorkQueueMMCSSClass", windll["MFPlat"]), ((1, 'dwWorkQueueId'),(1, 'pwszClass'),(1, 'pcchClass'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetWorkQueueMMCSSTaskId():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32), use_last_error=False)(("MFGetWorkQueueMMCSSTaskId", windll["MFPlat"]), ((1, 'dwWorkQueueId'),(1, 'pdwTaskId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFRegisterPlatformWithMMCSS():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(UInt32),Int32, use_last_error=False)(("MFRegisterPlatformWithMMCSS", windll["MFPlat"]), ((1, 'wszClass'),(1, 'pdwTaskId'),(1, 'lPriority'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFUnregisterPlatformFromMMCSS():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(("MFUnregisterPlatformFromMMCSS", windll["MFPlat"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFLockSharedWorkQueue():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,Int32,POINTER(UInt32),POINTER(UInt32), use_last_error=False)(("MFLockSharedWorkQueue", windll["MFPlat"]), ((1, 'wszClass'),(1, 'BasePriority'),(1, 'pdwTaskId'),(1, 'pID'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetWorkQueueMMCSSPriority():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Int32), use_last_error=False)(("MFGetWorkQueueMMCSSPriority", windll["MFPlat"]), ((1, 'dwWorkQueueId'),(1, 'lPriority'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateAsyncResult():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head,POINTER(win32more.Media.MediaFoundation.IMFAsyncResult_head), use_last_error=False)(("MFCreateAsyncResult", windll["MFPlat"]), ((1, 'punkObject'),(1, 'pCallback'),(1, 'punkState'),(1, 'ppAsyncResult'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFInvokeCallback():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head, use_last_error=False)(("MFInvokeCallback", windll["MFPlat"]), ((1, 'pAsyncResult'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateFile():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_FILE_ACCESSMODE,win32more.Media.MediaFoundation.MF_FILE_OPENMODE,win32more.Media.MediaFoundation.MF_FILE_FLAGS,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.IMFByteStream_head), use_last_error=False)(("MFCreateFile", windll["MFPlat"]), ((1, 'AccessMode'),(1, 'OpenMode'),(1, 'fFlags'),(1, 'pwszFileURL'),(1, 'ppIByteStream'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateTempFile():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_FILE_ACCESSMODE,win32more.Media.MediaFoundation.MF_FILE_OPENMODE,win32more.Media.MediaFoundation.MF_FILE_FLAGS,POINTER(win32more.Media.MediaFoundation.IMFByteStream_head), use_last_error=False)(("MFCreateTempFile", windll["MFPlat"]), ((1, 'AccessMode'),(1, 'OpenMode'),(1, 'fFlags'),(1, 'ppIByteStream'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFBeginCreateFile():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_FILE_ACCESSMODE,win32more.Media.MediaFoundation.MF_FILE_OPENMODE,win32more.Media.MediaFoundation.MF_FILE_FLAGS,win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head,POINTER(win32more.System.Com.IUnknown_head), use_last_error=False)(("MFBeginCreateFile", windll["MFPlat"]), ((1, 'AccessMode'),(1, 'OpenMode'),(1, 'fFlags'),(1, 'pwszFilePath'),(1, 'pCallback'),(1, 'pState'),(1, 'ppCancelCookie'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFEndCreateFile():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(win32more.Media.MediaFoundation.IMFByteStream_head), use_last_error=False)(("MFEndCreateFile", windll["MFPlat"]), ((1, 'pResult'),(1, 'ppFile'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCancelCreateFile():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head, use_last_error=False)(("MFCancelCreateFile", windll["MFPlat"]), ((1, 'pCancelCookie'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMemoryBuffer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaBuffer_head), use_last_error=False)(("MFCreateMemoryBuffer", windll["MFPlat"]), ((1, 'cbMaxLength'),(1, 'ppBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMediaBufferWrapper():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaBuffer_head,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaBuffer_head), use_last_error=False)(("MFCreateMediaBufferWrapper", windll["MFPlat"]), ((1, 'pBuffer'),(1, 'cbOffset'),(1, 'dwLength'),(1, 'ppBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateLegacyMediaBufferOnMFMediaBuffer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSample_head,win32more.Media.MediaFoundation.IMFMediaBuffer_head,UInt32,POINTER(win32more.Media.DxMediaObjects.IMediaBuffer_head), use_last_error=False)(("MFCreateLegacyMediaBufferOnMFMediaBuffer", windll["MFPlat"]), ((1, 'pSample'),(1, 'pMFMediaBuffer'),(1, 'cbOffset'),(1, 'ppMediaBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFMapDX9FormatToDXGIFormat():
    try:
        return WINFUNCTYPE(win32more.Graphics.Dxgi.Common.DXGI_FORMAT,UInt32, use_last_error=False)(("MFMapDX9FormatToDXGIFormat", windll["MFPlat"]), ((1, 'dx9'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFMapDXGIFormatToDX9Format():
    try:
        return WINFUNCTYPE(UInt32,win32more.Graphics.Dxgi.Common.DXGI_FORMAT, use_last_error=False)(("MFMapDXGIFormatToDX9Format", windll["MFPlat"]), ((1, 'dx11'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFLockDXGIDeviceManager():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(win32more.Media.MediaFoundation.IMFDXGIDeviceManager_head), use_last_error=False)(("MFLockDXGIDeviceManager", windll["MFPlat"]), ((1, 'pResetToken'),(1, 'ppManager'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFUnlockDXGIDeviceManager():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(("MFUnlockDXGIDeviceManager", windll["MFPlat"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateDXSurfaceBuffer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),win32more.System.Com.IUnknown_head,win32more.Foundation.BOOL,POINTER(win32more.Media.MediaFoundation.IMFMediaBuffer_head), use_last_error=False)(("MFCreateDXSurfaceBuffer", windll["MFPlat"]), ((1, 'riid'),(1, 'punkSurface'),(1, 'fBottomUpWhenLinear'),(1, 'ppBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateWICBitmapBuffer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),win32more.System.Com.IUnknown_head,POINTER(win32more.Media.MediaFoundation.IMFMediaBuffer_head), use_last_error=False)(("MFCreateWICBitmapBuffer", windll["MFPlat"]), ((1, 'riid'),(1, 'punkSurface'),(1, 'ppBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateDXGISurfaceBuffer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),win32more.System.Com.IUnknown_head,UInt32,win32more.Foundation.BOOL,POINTER(win32more.Media.MediaFoundation.IMFMediaBuffer_head), use_last_error=False)(("MFCreateDXGISurfaceBuffer", windll["MFPlat"]), ((1, 'riid'),(1, 'punkSurface'),(1, 'uSubresourceIndex'),(1, 'fBottomUpWhenLinear'),(1, 'ppBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVideoSampleAllocatorEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(("MFCreateVideoSampleAllocatorEx", windll["MFPlat"]), ((1, 'riid'),(1, 'ppSampleAllocator'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateDXGIDeviceManager():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(win32more.Media.MediaFoundation.IMFDXGIDeviceManager_head), use_last_error=False)(("MFCreateDXGIDeviceManager", windll["MFPlat"]), ((1, 'resetToken'),(1, 'ppDeviceManager'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateAlignedMemoryBuffer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaBuffer_head), use_last_error=False)(("MFCreateAlignedMemoryBuffer", windll["MFPlat"]), ((1, 'cbMaxLength'),(1, 'cbAligment'),(1, 'ppBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMediaEvent():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),win32more.Foundation.HRESULT,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head),POINTER(win32more.Media.MediaFoundation.IMFMediaEvent_head), use_last_error=False)(("MFCreateMediaEvent", windll["MFPlat"]), ((1, 'met'),(1, 'guidExtendedType'),(1, 'hrStatus'),(1, 'pvValue'),(1, 'ppEvent'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateEventQueue():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaEventQueue_head), use_last_error=False)(("MFCreateEventQueue", windll["MFPlat"]), ((1, 'ppMediaEventQueue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSample():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFSample_head), use_last_error=False)(("MFCreateSample", windll["MFPlat"]), ((1, 'ppIMFSample'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateAttributes():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head),UInt32, use_last_error=False)(("MFCreateAttributes", windll["MFPlat"]), ((1, 'ppMFAttributes'),(1, 'cInitialSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFInitAttributesFromBlob():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head,c_char_p_no,UInt32, use_last_error=False)(("MFInitAttributesFromBlob", windll["MFPlat"]), ((1, 'pAttributes'),(1, 'pBuf'),(1, 'cbBufSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetAttributesAsBlobSize():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(UInt32), use_last_error=False)(("MFGetAttributesAsBlobSize", windll["MFPlat"]), ((1, 'pAttributes'),(1, 'pcbBufSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetAttributesAsBlob():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head,c_char_p_no,UInt32, use_last_error=False)(("MFGetAttributesAsBlob", windll["MFPlat"]), ((1, 'pAttributes'),(1, 'pBuf'),(1, 'cbBufSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFTRegister():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,Guid,win32more.Foundation.PWSTR,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO),UInt32,POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO),win32more.Media.MediaFoundation.IMFAttributes_head, use_last_error=False)(("MFTRegister", windll["MFPlat"]), ((1, 'clsidMFT'),(1, 'guidCategory'),(1, 'pszName'),(1, 'Flags'),(1, 'cInputTypes'),(1, 'pInputTypes'),(1, 'cOutputTypes'),(1, 'pOutputTypes'),(1, 'pAttributes'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFTUnregister():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,Guid, use_last_error=False)(("MFTUnregister", windll["MFPlat"]), ((1, 'clsidMFT'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFTRegisterLocal():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IClassFactory_head,POINTER(Guid),win32more.Foundation.PWSTR,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO),UInt32,POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO), use_last_error=False)(("MFTRegisterLocal", windll["MFPlat"]), ((1, 'pClassFactory'),(1, 'guidCategory'),(1, 'pszName'),(1, 'Flags'),(1, 'cInputTypes'),(1, 'pInputTypes'),(1, 'cOutputTypes'),(1, 'pOutputTypes'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFTUnregisterLocal():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IClassFactory_head, use_last_error=False)(("MFTUnregisterLocal", windll["MFPlat"]), ((1, 'pClassFactory'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFTRegisterLocalByCLSID():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Guid),win32more.Foundation.PWSTR,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO),UInt32,POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO), use_last_error=False)(("MFTRegisterLocalByCLSID", windll["MFPlat"]), ((1, 'clisdMFT'),(1, 'guidCategory'),(1, 'pszName'),(1, 'Flags'),(1, 'cInputTypes'),(1, 'pInputTypes'),(1, 'cOutputTypes'),(1, 'pOutputTypes'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFTUnregisterLocalByCLSID():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,Guid, use_last_error=False)(("MFTUnregisterLocalByCLSID", windll["MFPlat"]), ((1, 'clsidMFT'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFTEnum():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,UInt32,POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head),POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head),win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(POINTER(Guid)),POINTER(UInt32), use_last_error=False)(("MFTEnum", windll["MFPlat"]), ((1, 'guidCategory'),(1, 'Flags'),(1, 'pInputType'),(1, 'pOutputType'),(1, 'pAttributes'),(1, 'ppclsidMFT'),(1, 'pcMFTs'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFTEnumEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,UInt32,POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head),POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head),POINTER(POINTER(win32more.Media.MediaFoundation.IMFActivate_head)),POINTER(UInt32), use_last_error=False)(("MFTEnumEx", windll["MFPlat"]), ((1, 'guidCategory'),(1, 'Flags'),(1, 'pInputType'),(1, 'pOutputType'),(1, 'pppMFTActivate'),(1, 'pnumMFTActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFTEnum2():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,UInt32,POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head),POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head),win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(POINTER(win32more.Media.MediaFoundation.IMFActivate_head)),POINTER(UInt32), use_last_error=False)(("MFTEnum2", windll["MFPlat"]), ((1, 'guidCategory'),(1, 'Flags'),(1, 'pInputType'),(1, 'pOutputType'),(1, 'pAttributes'),(1, 'pppMFTActivate'),(1, 'pnumMFTActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFTGetInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,POINTER(win32more.Foundation.PWSTR),POINTER(POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head)),POINTER(UInt32),POINTER(POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head)),POINTER(UInt32),POINTER(win32more.Media.MediaFoundation.IMFAttributes_head), use_last_error=False)(("MFTGetInfo", windll["MFPlat"]), ((1, 'clsidMFT'),(1, 'pszName'),(1, 'ppInputTypes'),(1, 'pcInputTypes'),(1, 'ppOutputTypes'),(1, 'pcOutputTypes'),(1, 'ppAttributes'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetPluginControl():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFPluginControl_head), use_last_error=False)(("MFGetPluginControl", windll["MFPlat"]), ((1, 'ppPluginControl'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetMFTMerit():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,UInt32,c_char_p_no,POINTER(UInt32), use_last_error=False)(("MFGetMFTMerit", windll["MFPlat"]), ((1, 'pMFT'),(1, 'cbVerifier'),(1, 'verifier'),(1, 'merit'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFRegisterLocalSchemeHandler():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.IMFActivate_head, use_last_error=False)(("MFRegisterLocalSchemeHandler", windll["MFPlat"]), ((1, 'szScheme'),(1, 'pActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFRegisterLocalByteStreamHandler():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.IMFActivate_head, use_last_error=False)(("MFRegisterLocalByteStreamHandler", windll["MFPlat"]), ((1, 'szFileExtension'),(1, 'szMimeType'),(1, 'pActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMFByteStreamWrapper():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,POINTER(win32more.Media.MediaFoundation.IMFByteStream_head), use_last_error=False)(("MFCreateMFByteStreamWrapper", windll["MFPlat"]), ((1, 'pStream'),(1, 'ppStreamWrapper'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMediaExtensionActivate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.System.Com.IUnknown_head,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(("MFCreateMediaExtensionActivate", windll["MFPlat"]), ((1, 'szActivatableClassId'),(1, 'pConfiguration'),(1, 'riid'),(1, 'ppvObject'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMuxStreamAttributes():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFCollection_head,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head), use_last_error=False)(("MFCreateMuxStreamAttributes", windll["MFPlat"]), ((1, 'pAttributesToMux'),(1, 'ppMuxAttribs'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMuxStreamMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFCollection_head,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head), use_last_error=False)(("MFCreateMuxStreamMediaType", windll["MFPlat"]), ((1, 'pMediaTypesToMux'),(1, 'ppMuxMediaType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMuxStreamSample():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFCollection_head,POINTER(win32more.Media.MediaFoundation.IMFSample_head), use_last_error=False)(("MFCreateMuxStreamSample", windll["MFPlat"]), ((1, 'pSamplesToMux'),(1, 'ppMuxSample'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFValidateMediaTypeSize():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,c_char_p_no,UInt32, use_last_error=False)(("MFValidateMediaTypeSize", windll["MFPlat"]), ((1, 'FormatType'),(1, 'pBlock'),(1, 'cbSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head), use_last_error=False)(("MFCreateMediaType", windll["MFPlat"]), ((1, 'ppMFType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMFVideoFormatFromMFMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(POINTER(win32more.Media.MediaFoundation.MFVIDEOFORMAT_head)),POINTER(UInt32), use_last_error=False)(("MFCreateMFVideoFormatFromMFMediaType", windll["MFPlat"]), ((1, 'pMFType'),(1, 'ppMFVF'),(1, 'pcbSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateWaveFormatExFromMFMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(POINTER(win32more.Media.Audio.WAVEFORMATEX_head)),POINTER(UInt32),UInt32, use_last_error=False)(("MFCreateWaveFormatExFromMFMediaType", windll["MFPlat"]), ((1, 'pMFType'),(1, 'ppWF'),(1, 'pcbSize'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFInitMediaTypeFromVideoInfoHeader():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.DirectShow.VIDEOINFOHEADER_head),UInt32,POINTER(Guid), use_last_error=False)(("MFInitMediaTypeFromVideoInfoHeader", windll["MFPlat"]), ((1, 'pMFType'),(1, 'pVIH'),(1, 'cbBufSize'),(1, 'pSubtype'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFInitMediaTypeFromVideoInfoHeader2():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.DirectShow.VIDEOINFOHEADER2_head),UInt32,POINTER(Guid), use_last_error=False)(("MFInitMediaTypeFromVideoInfoHeader2", windll["MFPlat"]), ((1, 'pMFType'),(1, 'pVIH2'),(1, 'cbBufSize'),(1, 'pSubtype'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFInitMediaTypeFromMPEG1VideoInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.DirectShow.MPEG1VIDEOINFO_head),UInt32,POINTER(Guid), use_last_error=False)(("MFInitMediaTypeFromMPEG1VideoInfo", windll["MFPlat"]), ((1, 'pMFType'),(1, 'pMP1VI'),(1, 'cbBufSize'),(1, 'pSubtype'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFInitMediaTypeFromMPEG2VideoInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.DirectShow.MPEG2VIDEOINFO_head),UInt32,POINTER(Guid), use_last_error=False)(("MFInitMediaTypeFromMPEG2VideoInfo", windll["MFPlat"]), ((1, 'pMFType'),(1, 'pMP2VI'),(1, 'cbBufSize'),(1, 'pSubtype'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCalculateBitmapImageSize():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head),UInt32,POINTER(UInt32),POINTER(win32more.Foundation.BOOL), use_last_error=False)(("MFCalculateBitmapImageSize", windll["MFPlat"]), ((1, 'pBMIH'),(1, 'cbBufSize'),(1, 'pcbImageSize'),(1, 'pbKnown'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCalculateImageSize():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),UInt32,UInt32,POINTER(UInt32), use_last_error=False)(("MFCalculateImageSize", windll["MFPlat"]), ((1, 'guidSubtype'),(1, 'unWidth'),(1, 'unHeight'),(1, 'pcbImageSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFFrameRateToAverageTimePerFrame():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(UInt64), use_last_error=False)(("MFFrameRateToAverageTimePerFrame", windll["MFPlat"]), ((1, 'unNumerator'),(1, 'unDenominator'),(1, 'punAverageTimePerFrame'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFAverageTimePerFrameToFrameRate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64,POINTER(UInt32),POINTER(UInt32), use_last_error=False)(("MFAverageTimePerFrameToFrameRate", windll["MFPlat"]), ((1, 'unAverageTimePerFrame'),(1, 'punNumerator'),(1, 'punDenominator'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFInitMediaTypeFromMFVideoFormat():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.MFVIDEOFORMAT_head),UInt32, use_last_error=False)(("MFInitMediaTypeFromMFVideoFormat", windll["MFPlat"]), ((1, 'pMFType'),(1, 'pMFVF'),(1, 'cbBufSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFInitMediaTypeFromWaveFormatEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.Audio.WAVEFORMATEX_head),UInt32, use_last_error=False)(("MFInitMediaTypeFromWaveFormatEx", windll["MFPlat"]), ((1, 'pMFType'),(1, 'pWaveFormat'),(1, 'cbBufSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFInitMediaTypeFromAMMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.DirectShow.AM_MEDIA_TYPE_head), use_last_error=False)(("MFInitMediaTypeFromAMMediaType", windll["MFPlat"]), ((1, 'pMFType'),(1, 'pAMType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFInitAMMediaTypeFromMFMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,Guid,POINTER(win32more.Media.DirectShow.AM_MEDIA_TYPE_head), use_last_error=False)(("MFInitAMMediaTypeFromMFMediaType", windll["MFPlat"]), ((1, 'pMFType'),(1, 'guidFormatBlockType'),(1, 'pAMType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateAMMediaTypeFromMFMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,Guid,POINTER(POINTER(win32more.Media.DirectShow.AM_MEDIA_TYPE_head)), use_last_error=False)(("MFCreateAMMediaTypeFromMFMediaType", windll["MFPlat"]), ((1, 'pMFType'),(1, 'guidFormatBlockType'),(1, 'ppAMType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCompareFullToPartialMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.Media.MediaFoundation.IMFMediaType_head, use_last_error=False)(("MFCompareFullToPartialMediaType", windll["MFPlat"]), ((1, 'pMFTypeFull'),(1, 'pMFTypePartial'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFWrapMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(Guid),POINTER(Guid),POINTER(win32more.Media.MediaFoundation.IMFMediaType_head), use_last_error=False)(("MFWrapMediaType", windll["MFPlat"]), ((1, 'pOrig'),(1, 'MajorType'),(1, 'SubType'),(1, 'ppWrap'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFUnwrapMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head), use_last_error=False)(("MFUnwrapMediaType", windll["MFPlat"]), ((1, 'pWrap'),(1, 'ppOrig'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVideoMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVIDEOFORMAT_head),POINTER(win32more.Media.MediaFoundation.IMFVideoMediaType_head), use_last_error=False)(("MFCreateVideoMediaType", windll["MFPlat"]), ((1, 'pVideoFormat'),(1, 'ppIVideoMediaType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVideoMediaTypeFromSubtype():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.IMFVideoMediaType_head), use_last_error=False)(("MFCreateVideoMediaTypeFromSubtype", windll["MFPlat"]), ((1, 'pAMSubtype'),(1, 'ppIVideoMediaType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFIsFormatYUV():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32, use_last_error=False)(("MFIsFormatYUV", windll["EVR"]), ((1, 'Format'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVideoMediaTypeFromBitMapInfoHeader():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head),UInt32,UInt32,win32more.Media.MediaFoundation.MFVideoInterlaceMode,UInt64,UInt64,UInt64,UInt32,POINTER(win32more.Media.MediaFoundation.IMFVideoMediaType_head), use_last_error=False)(("MFCreateVideoMediaTypeFromBitMapInfoHeader", windll["MFPlat"]), ((1, 'pbmihBitMapInfoHeader'),(1, 'dwPixelAspectRatioX'),(1, 'dwPixelAspectRatioY'),(1, 'InterlaceMode'),(1, 'VideoFlags'),(1, 'qwFramesPerSecondNumerator'),(1, 'qwFramesPerSecondDenominator'),(1, 'dwMaxBitRate'),(1, 'ppIVideoMediaType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetStrideForBitmapInfoHeader():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(Int32), use_last_error=False)(("MFGetStrideForBitmapInfoHeader", windll["MFPlat"]), ((1, 'format'),(1, 'dwWidth'),(1, 'pStride'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetPlaneSize():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,UInt32,POINTER(UInt32), use_last_error=False)(("MFGetPlaneSize", windll["EVR"]), ((1, 'format'),(1, 'dwWidth'),(1, 'dwHeight'),(1, 'pdwPlaneSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVideoMediaTypeFromBitMapInfoHeaderEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head),UInt32,UInt32,UInt32,win32more.Media.MediaFoundation.MFVideoInterlaceMode,UInt64,UInt32,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.IMFVideoMediaType_head), use_last_error=False)(("MFCreateVideoMediaTypeFromBitMapInfoHeaderEx", windll["MFPlat"]), ((1, 'pbmihBitMapInfoHeader'),(1, 'cbBitMapInfoHeader'),(1, 'dwPixelAspectRatioX'),(1, 'dwPixelAspectRatioY'),(1, 'InterlaceMode'),(1, 'VideoFlags'),(1, 'dwFramesPerSecondNumerator'),(1, 'dwFramesPerSecondDenominator'),(1, 'dwMaxBitRate'),(1, 'ppIVideoMediaType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMediaTypeFromRepresentation():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,c_void_p,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head), use_last_error=False)(("MFCreateMediaTypeFromRepresentation", windll["MFPlat"]), ((1, 'guidRepresentation'),(1, 'pvRepresentation'),(1, 'ppIMediaType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateAudioMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.Audio.WAVEFORMATEX_head),POINTER(win32more.Media.MediaFoundation.IMFAudioMediaType_head), use_last_error=False)(("MFCreateAudioMediaType", windll["MFPlat"]), ((1, 'pAudioFormat'),(1, 'ppIAudioMediaType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetUncompressedVideoFormat():
    try:
        return WINFUNCTYPE(UInt32,POINTER(win32more.Media.MediaFoundation.MFVIDEOFORMAT_head), use_last_error=False)(("MFGetUncompressedVideoFormat", windll["MFPlat"]), ((1, 'pVideoFormat'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFInitVideoFormat():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVIDEOFORMAT_head),win32more.Media.MediaFoundation.MFStandardVideoFormat, use_last_error=False)(("MFInitVideoFormat", windll["MFPlat"]), ((1, 'pVideoFormat'),(1, 'type'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFInitVideoFormat_RGB():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVIDEOFORMAT_head),UInt32,UInt32,UInt32, use_last_error=False)(("MFInitVideoFormat_RGB", windll["MFPlat"]), ((1, 'pVideoFormat'),(1, 'dwWidth'),(1, 'dwHeight'),(1, 'D3Dfmt'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFConvertColorInfoToDXVA():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(win32more.Media.MediaFoundation.MFVIDEOFORMAT_head), use_last_error=False)(("MFConvertColorInfoToDXVA", windll["MFPlat"]), ((1, 'pdwToDXVA'),(1, 'pFromFormat'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFConvertColorInfoFromDXVA():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVIDEOFORMAT_head),UInt32, use_last_error=False)(("MFConvertColorInfoFromDXVA", windll["MFPlat"]), ((1, 'pToFormat'),(1, 'dwFromDXVA'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCopyImage():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,Int32,c_char_p_no,Int32,UInt32,UInt32, use_last_error=False)(("MFCopyImage", windll["MFPlat"]), ((1, 'pDest'),(1, 'lDestStride'),(1, 'pSrc'),(1, 'lSrcStride'),(1, 'dwWidthInBytes'),(1, 'dwLines'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFConvertFromFP16Array():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Single),POINTER(UInt16),UInt32, use_last_error=False)(("MFConvertFromFP16Array", windll["MFPlat"]), ((1, 'pDest'),(1, 'pSrc'),(1, 'dwCount'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFConvertToFP16Array():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt16),POINTER(Single),UInt32, use_last_error=False)(("MFConvertToFP16Array", windll["MFPlat"]), ((1, 'pDest'),(1, 'pSrc'),(1, 'dwCount'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreate2DMediaBuffer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,UInt32,win32more.Foundation.BOOL,POINTER(win32more.Media.MediaFoundation.IMFMediaBuffer_head), use_last_error=False)(("MFCreate2DMediaBuffer", windll["MFPlat"]), ((1, 'dwWidth'),(1, 'dwHeight'),(1, 'dwFourCC'),(1, 'fBottomUp'),(1, 'ppBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMediaBufferFromMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,Int64,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaBuffer_head), use_last_error=False)(("MFCreateMediaBufferFromMediaType", windll["MFPlat"]), ((1, 'pMediaType'),(1, 'llDuration'),(1, 'dwMinLength'),(1, 'dwMinAlignment'),(1, 'ppBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateCollection():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFCollection_head), use_last_error=False)(("MFCreateCollection", windll["MFPlat"]), ((1, 'ppIMFCollection'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFHeapAlloc():
    try:
        return WINFUNCTYPE(c_void_p,UIntPtr,UInt32,win32more.Foundation.PSTR,Int32,win32more.Media.MediaFoundation.EAllocationType, use_last_error=False)(("MFHeapAlloc", windll["MFPlat"]), ((1, 'nSize'),(1, 'dwFlags'),(1, 'pszFile'),(1, 'line'),(1, 'eat'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFHeapFree():
    try:
        return WINFUNCTYPE(Void,c_void_p, use_last_error=False)(("MFHeapFree", windll["MFPlat"]), ((1, 'pv'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFllMulDiv():
    try:
        return WINFUNCTYPE(Int64,Int64,Int64,Int64,Int64, use_last_error=False)(("MFllMulDiv", windll["MFPlat"]), ((1, 'a'),(1, 'b'),(1, 'c'),(1, 'd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetContentProtectionSystemCLSID():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Guid), use_last_error=False)(("MFGetContentProtectionSystemCLSID", windll["MFPlat"]), ((1, 'guidProtectionSystemID'),(1, 'pclsid'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCombineSamples():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSample_head,win32more.Media.MediaFoundation.IMFSample_head,UInt32,POINTER(win32more.Foundation.BOOL), use_last_error=False)(("MFCombineSamples", windll["MFPlat"]), ((1, 'pSample'),(1, 'pSampleToAdd'),(1, 'dwMaxMergedDurationInMS'),(1, 'pMerged'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFSplitSample():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSample_head,POINTER(win32more.Media.MediaFoundation.IMFSample_head),UInt32,POINTER(UInt32), use_last_error=False)(("MFSplitSample", windll["MFPlat"]), ((1, 'pSample'),(1, 'pOutputSamples'),(1, 'dwOutputSampleMaxCount'),(1, 'pdwOutputSampleCount'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSourceReaderFromURL():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFSourceReader_head), use_last_error=False)(("MFCreateSourceReaderFromURL", windll["MFReadWrite"]), ((1, 'pwszURL'),(1, 'pAttributes'),(1, 'ppSourceReader'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSourceReaderFromByteStream():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFSourceReader_head), use_last_error=False)(("MFCreateSourceReaderFromByteStream", windll["MFReadWrite"]), ((1, 'pByteStream'),(1, 'pAttributes'),(1, 'ppSourceReader'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSourceReaderFromMediaSource():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaSource_head,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFSourceReader_head), use_last_error=False)(("MFCreateSourceReaderFromMediaSource", windll["MFReadWrite"]), ((1, 'pMediaSource'),(1, 'pAttributes'),(1, 'ppSourceReader'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSinkWriterFromURL():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFSinkWriter_head), use_last_error=False)(("MFCreateSinkWriterFromURL", windll["MFReadWrite"]), ((1, 'pwszOutputURL'),(1, 'pByteStream'),(1, 'pAttributes'),(1, 'ppSinkWriter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSinkWriterFromMediaSink():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaSink_head,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFSinkWriter_head), use_last_error=False)(("MFCreateSinkWriterFromMediaSink", windll["MFReadWrite"]), ((1, 'pMediaSink'),(1, 'pAttributes'),(1, 'ppSinkWriter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVideoPresenter():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,POINTER(Guid),POINTER(Guid),POINTER(c_void_p), use_last_error=False)(("MFCreateVideoPresenter", windll["EVR"]), ((1, 'pOwner'),(1, 'riidDevice'),(1, 'riid'),(1, 'ppVideoPresenter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVideoMixer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,POINTER(Guid),POINTER(Guid),POINTER(c_void_p), use_last_error=False)(("MFCreateVideoMixer", windll["EVR"]), ((1, 'pOwner'),(1, 'riidDevice'),(1, 'riid'),(1, 'ppv'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVideoMixerAndPresenter():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,win32more.System.Com.IUnknown_head,POINTER(Guid),POINTER(c_void_p),POINTER(Guid),POINTER(c_void_p), use_last_error=False)(("MFCreateVideoMixerAndPresenter", windll["EVR"]), ((1, 'pMixerOwner'),(1, 'pPresenterOwner'),(1, 'riidMixer'),(1, 'ppvVideoMixer'),(1, 'riidPresenter'),(1, 'ppvVideoPresenter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVideoRenderer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(("MFCreateVideoRenderer", windll["MF"]), ((1, 'riidRenderer'),(1, 'ppVideoRenderer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVideoSampleFromSurface():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,POINTER(win32more.Media.MediaFoundation.IMFSample_head), use_last_error=False)(("MFCreateVideoSampleFromSurface", windll["EVR"]), ((1, 'pUnkSurface'),(1, 'ppSample'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVideoSampleAllocator():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p), use_last_error=False)(("MFCreateVideoSampleAllocator", windll["EVR"]), ((1, 'riid'),(1, 'ppSampleAllocator'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFPCreateMediaPlayer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.BOOL,win32more.Media.MediaFoundation.MFP_CREATION_OPTIONS,win32more.Media.MediaFoundation.IMFPMediaPlayerCallback_head,win32more.Foundation.HWND,POINTER(win32more.Media.MediaFoundation.IMFPMediaPlayer_head), use_last_error=False)(("MFPCreateMediaPlayer", windll["MFPlay"]), ((1, 'pwszURL'),(1, 'fStartPlayback'),(1, 'creationOptions'),(1, 'pCallback'),(1, 'hWnd'),(1, 'ppMediaPlayer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateEncryptedMediaExtensionsStoreActivate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPMPHostApp_head,win32more.System.Com.IStream_head,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.IMFActivate_head), use_last_error=False)(("MFCreateEncryptedMediaExtensionsStoreActivate", windll["MF"]), ((1, 'pmpHost'),(1, 'objectStream'),(1, 'classId'),(1, 'activate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVirtualCamera():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.__MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0001,win32more.Media.MediaFoundation.__MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0002,win32more.Media.MediaFoundation.__MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0003,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,POINTER(Guid),UInt32,POINTER(win32more.Media.MediaFoundation.IMFVirtualCamera_head), use_last_error=False)(("MFCreateVirtualCamera", windll["MFSENSORGROUP"]), ((1, 'type'),(1, 'lifetime'),(1, 'access'),(1, 'friendlyName'),(1, 'sourceId'),(1, 'categories'),(1, 'categoryCount'),(1, 'virtualCamera'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFIsVirtualCameraTypeSupported():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.__MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0001,POINTER(win32more.Foundation.BOOL), use_last_error=False)(("MFIsVirtualCameraTypeSupported", windll["MFSENSORGROUP"]), ((1, 'type'),(1, 'supported'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_OPMXboxEnableHDCP():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.OPM_HDCP_TYPE, use_last_error=False)(("OPMXboxEnableHDCP", windll["OPMXbox"]), ((1, 'HDCPType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_OPMXboxGetHDCPStatus():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.OPM_HDCP_STATUS), use_last_error=False)(("OPMXboxGetHDCPStatus", windll["OPMXbox"]), ((1, 'pHDCPStatus'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_OPMXboxGetHDCPStatusAndType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.OPM_HDCP_STATUS),POINTER(win32more.Media.MediaFoundation.OPM_HDCP_TYPE), use_last_error=False)(("OPMXboxGetHDCPStatusAndType", windll["OPMXbox"]), ((1, 'pHDCPStatus'),(1, 'pHDCPType'),))
    except (FileNotFoundError, AttributeError):
        return None
__all__ = [
    "MEDIASUBTYPE_None",
    "AVENC_H263V_LEVELCOUNT",
    "AVENC_H264V_LEVELCOUNT",
    "AVENC_H264V_MAX_MBBITS",
    "D3D12_VIDEO_DECODE_PROFILE_MPEG2",
    "D3D12_VIDEO_DECODE_PROFILE_MPEG1_AND_MPEG2",
    "D3D12_VIDEO_DECODE_PROFILE_H264",
    "D3D12_VIDEO_DECODE_PROFILE_H264_STEREO_PROGRESSIVE",
    "D3D12_VIDEO_DECODE_PROFILE_H264_STEREO",
    "D3D12_VIDEO_DECODE_PROFILE_H264_MULTIVIEW",
    "D3D12_VIDEO_DECODE_PROFILE_VC1",
    "D3D12_VIDEO_DECODE_PROFILE_VC1_D2010",
    "D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_SIMPLE",
    "D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_ADVSIMPLE_NOGMC",
    "D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN",
    "D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN10",
    "D3D12_VIDEO_DECODE_PROFILE_VP9",
    "D3D12_VIDEO_DECODE_PROFILE_VP9_10BIT_PROFILE2",
    "D3D12_VIDEO_DECODE_PROFILE_VP8",
    "D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE0",
    "D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE1",
    "D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE2",
    "D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2",
    "D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2_420",
    "DXVA2_ModeMPEG2_MoComp",
    "DXVA2_ModeMPEG2_IDCT",
    "DXVA2_ModeMPEG2_VLD",
    "DXVA2_ModeMPEG1_VLD",
    "DXVA2_ModeMPEG2and1_VLD",
    "DXVA2_ModeH264_A",
    "DXVA2_ModeH264_B",
    "DXVA2_ModeH264_C",
    "DXVA2_ModeH264_D",
    "DXVA2_ModeH264_E",
    "DXVA2_ModeH264_F",
    "DXVA2_ModeH264_VLD_WithFMOASO_NoFGT",
    "DXVA2_ModeH264_VLD_Stereo_Progressive_NoFGT",
    "DXVA2_ModeH264_VLD_Stereo_NoFGT",
    "DXVA2_ModeH264_VLD_Multiview_NoFGT",
    "DXVA2_ModeWMV8_A",
    "DXVA2_ModeWMV8_B",
    "DXVA2_ModeWMV9_A",
    "DXVA2_ModeWMV9_B",
    "DXVA2_ModeWMV9_C",
    "DXVA2_ModeVC1_A",
    "DXVA2_ModeVC1_B",
    "DXVA2_ModeVC1_C",
    "DXVA2_ModeVC1_D",
    "DXVA2_ModeVC1_D2010",
    "DXVA2_NoEncrypt",
    "DXVA2_VideoProcProgressiveDevice",
    "DXVA2_VideoProcBobDevice",
    "DXVA2_VideoProcSoftwareDevice",
    "DXVA2_ModeMPEG4pt2_VLD_Simple",
    "DXVA2_ModeMPEG4pt2_VLD_AdvSimple_NoGMC",
    "DXVA2_ModeMPEG4pt2_VLD_AdvSimple_GMC",
    "DXVA2_ModeHEVC_VLD_Main",
    "DXVA2_ModeHEVC_VLD_Main10",
    "DXVA2_ModeVP9_VLD_Profile0",
    "DXVA2_ModeVP9_VLD_10bit_Profile2",
    "DXVA2_ModeVP8_VLD",
    "DXVA2_E_NOT_INITIALIZED",
    "DXVA2_E_NEW_VIDEO_DEVICE",
    "DXVA2_E_VIDEO_DEVICE_LOCKED",
    "DXVA2_E_NOT_AVAILABLE",
    "MAX_SUBSTREAMS",
    "DXVA2_DECODE_GET_DRIVER_HANDLE",
    "DXVA2_DECODE_SPECIFY_ENCRYPTED_BLOCKS",
    "DXVAp_ModeMPEG2_A",
    "DXVAp_ModeMPEG2_C",
    "DXVAp_NoEncrypt",
    "DXVAp_DeinterlaceBobDevice",
    "DXVAp_DeinterlaceContainerDevice",
    "DXVAHD_STREAM_STATE_PRIVATE_IVTC",
    "DXVAHDControlGuid",
    "DXVAHDETWGUID_CREATEVIDEOPROCESSOR",
    "DXVAHDETWGUID_VIDEOPROCESSBLTSTATE",
    "DXVAHDETWGUID_VIDEOPROCESSSTREAMSTATE",
    "DXVAHDETWGUID_VIDEOPROCESSBLTHD",
    "DXVAHDETWGUID_VIDEOPROCESSBLTHD_STREAM",
    "DXVAHDETWGUID_DESTROYVIDEOPROCESSOR",
    "MR_VIDEO_RENDER_SERVICE",
    "MR_VIDEO_MIXER_SERVICE",
    "MR_VIDEO_ACCELERATION_SERVICE",
    "MR_BUFFER_SERVICE",
    "VIDEO_ZOOM_RECT",
    "MFEVRDLL",
    "MF_SDK_VERSION",
    "MF_API_VERSION",
    "MFSTARTUP_NOSOCKET",
    "MFSTARTUP_LITE",
    "MFSTARTUP_FULL",
    "MF_E_DXGI_DEVICE_NOT_INITIALIZED",
    "MF_E_DXGI_NEW_VIDEO_DEVICE",
    "MF_E_DXGI_VIDEO_DEVICE_LOCKED",
    "MF_1_BYTE_ALIGNMENT",
    "MF_2_BYTE_ALIGNMENT",
    "MF_4_BYTE_ALIGNMENT",
    "MF_8_BYTE_ALIGNMENT",
    "MF_16_BYTE_ALIGNMENT",
    "MF_32_BYTE_ALIGNMENT",
    "MF_64_BYTE_ALIGNMENT",
    "MF_128_BYTE_ALIGNMENT",
    "MF_256_BYTE_ALIGNMENT",
    "MF_512_BYTE_ALIGNMENT",
    "MF_1024_BYTE_ALIGNMENT",
    "MF_2048_BYTE_ALIGNMENT",
    "MF_4096_BYTE_ALIGNMENT",
    "MF_8192_BYTE_ALIGNMENT",
    "MF_EVENT_SESSIONCAPS",
    "MF_EVENT_SESSIONCAPS_DELTA",
    "MFSESSIONCAP_START",
    "MFSESSIONCAP_SEEK",
    "MFSESSIONCAP_PAUSE",
    "MFSESSIONCAP_RATE_FORWARD",
    "MFSESSIONCAP_RATE_REVERSE",
    "MFSESSIONCAP_DOES_NOT_USE_NETWORK",
    "MF_EVENT_TOPOLOGY_STATUS",
    "MF_EVENT_START_PRESENTATION_TIME",
    "MF_EVENT_PRESENTATION_TIME_OFFSET",
    "MF_EVENT_START_PRESENTATION_TIME_AT_OUTPUT",
    "MF_EVENT_SOURCE_FAKE_START",
    "MF_EVENT_SOURCE_PROJECTSTART",
    "MF_EVENT_SOURCE_ACTUAL_START",
    "MF_EVENT_SOURCE_TOPOLOGY_CANCELED",
    "MF_EVENT_SOURCE_CHARACTERISTICS",
    "MF_EVENT_SOURCE_CHARACTERISTICS_OLD",
    "MF_EVENT_DO_THINNING",
    "MF_EVENT_SCRUBSAMPLE_TIME",
    "MF_EVENT_OUTPUT_NODE",
    "MF_EVENT_MFT_INPUT_STREAM_ID",
    "MF_EVENT_MFT_CONTEXT",
    "MF_EVENT_STREAM_METADATA_KEYDATA",
    "MF_EVENT_STREAM_METADATA_CONTENT_KEYIDS",
    "MF_EVENT_STREAM_METADATA_SYSTEMID",
    "MFSampleExtension_MaxDecodeFrameSize",
    "MFSampleExtension_AccumulatedNonRefPicPercent",
    "MFSampleExtension_Encryption_ProtectionScheme",
    "MFSampleExtension_Encryption_CryptByteBlock",
    "MFSampleExtension_Encryption_SkipByteBlock",
    "MFSampleExtension_Encryption_SubSample_Mapping",
    "MFSampleExtension_Encryption_ClearSliceHeaderData",
    "MFSampleExtension_Encryption_HardwareProtection_KeyInfoID",
    "MFSampleExtension_Encryption_HardwareProtection_KeyInfo",
    "MFSampleExtension_Encryption_HardwareProtection_VideoDecryptorContext",
    "MFSampleExtension_Encryption_Opaque_Data",
    "MFSampleExtension_NALULengthInfo",
    "MFSampleExtension_Encryption_ResumeVideoOutput",
    "MFSampleExtension_Encryption_NALUTypes",
    "MFSampleExtension_Encryption_SPSPPSData",
    "MFSampleExtension_Encryption_SEIData",
    "MFSampleExtension_Encryption_HardwareProtection",
    "MFSampleExtension_CleanPoint",
    "MFSampleExtension_Discontinuity",
    "MFSampleExtension_Token",
    "MFSampleExtension_ClosedCaption_CEA708",
    "MFSampleExtension_ClosedCaption_CEA708_MAX_SIZE",
    "MFSampleExtension_DecodeTimestamp",
    "MFSampleExtension_VideoEncodeQP",
    "MFSampleExtension_VideoEncodePictureType",
    "MFSampleExtension_FrameCorruption",
    "MFSampleExtension_DirtyRects",
    "MFSampleExtension_MoveRegions",
    "MFSampleExtension_HDCP_OptionalHeader",
    "MFSampleExtension_HDCP_FrameCounter",
    "MFSampleExtension_HDCP_StreamID",
    "MFSampleExtension_Timestamp",
    "MFSampleExtension_RepeatFrame",
    "MFT_ENCODER_ERROR",
    "MFT_GFX_DRIVER_VERSION_ID_Attribute",
    "MFSampleExtension_DescrambleData",
    "MFSampleExtension_SampleKeyID",
    "MFSampleExtension_GenKeyFunc",
    "MFSampleExtension_GenKeyCtx",
    "MFSampleExtension_PacketCrossOffsets",
    "MFSampleExtension_Encryption_SampleID",
    "MFSampleExtension_Encryption_KeyID",
    "MFSampleExtension_Content_KeyID",
    "MFSampleExtension_Encryption_SubSampleMappingSplit",
    "MFSampleExtension_Interlaced",
    "MFSampleExtension_BottomFieldFirst",
    "MFSampleExtension_RepeatFirstField",
    "MFSampleExtension_SingleField",
    "MFSampleExtension_DerivedFromTopField",
    "MFSampleExtension_MeanAbsoluteDifference",
    "MFSampleExtension_LongTermReferenceFrameInfo",
    "MFSampleExtension_ROIRectangle",
    "MFSampleExtension_LastSlice",
    "MACROBLOCK_FLAG_SKIP",
    "MACROBLOCK_FLAG_DIRTY",
    "MACROBLOCK_FLAG_MOTION",
    "MACROBLOCK_FLAG_VIDEO",
    "MACROBLOCK_FLAG_HAS_MOTION_VECTOR",
    "MACROBLOCK_FLAG_HAS_QP",
    "MFSampleExtension_FeatureMap",
    "MFSampleExtension_ChromaOnly",
    "MFSampleExtension_PhotoThumbnail",
    "MFSampleExtension_PhotoThumbnailMediaType",
    "MFSampleExtension_CaptureMetadata",
    "MFSampleExtension_MDLCacheCookie",
    "MF_CAPTURE_METADATA_PHOTO_FRAME_FLASH",
    "MF_CAPTURE_METADATA_FRAME_RAWSTREAM",
    "MF_CAPTURE_METADATA_FOCUSSTATE",
    "MF_CAPTURE_METADATA_REQUESTED_FRAME_SETTING_ID",
    "MF_CAPTURE_METADATA_EXPOSURE_TIME",
    "MF_CAPTURE_METADATA_EXPOSURE_COMPENSATION",
    "MF_CAPTURE_METADATA_ISO_SPEED",
    "MF_CAPTURE_METADATA_LENS_POSITION",
    "MF_CAPTURE_METADATA_SCENE_MODE",
    "MF_CAPTURE_METADATA_FLASH",
    "MF_CAPTURE_METADATA_FLASH_POWER",
    "MF_CAPTURE_METADATA_WHITEBALANCE",
    "MF_CAPTURE_METADATA_ZOOMFACTOR",
    "MF_CAPTURE_METADATA_FACEROIS",
    "MF_CAPTURE_METADATA_FACEROITIMESTAMPS",
    "MF_CAPTURE_METADATA_FACEROICHARACTERIZATIONS",
    "MF_CAPTURE_METADATA_ISO_GAINS",
    "MF_CAPTURE_METADATA_SENSORFRAMERATE",
    "MF_CAPTURE_METADATA_WHITEBALANCE_GAINS",
    "MF_CAPTURE_METADATA_HISTOGRAM",
    "MF_CAPTURE_METADATA_EXIF",
    "MF_CAPTURE_METADATA_FRAME_ILLUMINATION",
    "MF_CAPTURE_METADATA_UVC_PAYLOADHEADER",
    "MFSampleExtension_Depth_MinReliableDepth",
    "MFSampleExtension_Depth_MaxReliableDepth",
    "MF_CAPTURE_METADATA_FIRST_SCANLINE_START_TIME_QPC",
    "MF_CAPTURE_METADATA_LAST_SCANLINE_END_TIME_QPC",
    "MF_CAPTURE_METADATA_SCANLINE_TIME_QPC_ACCURACY",
    "MF_CAPTURE_METADATA_SCANLINE_DIRECTION",
    "MFCAPTURE_METADATA_SCAN_RIGHT_LEFT",
    "MFCAPTURE_METADATA_SCAN_BOTTOM_TOP",
    "MFCAPTURE_METADATA_SCANLINE_VERTICAL",
    "MF_CAPTURE_METADATA_DIGITALWINDOW",
    "MF_CAPTURE_METADATA_FRAME_BACKGROUND_MASK",
    "MF_METADATAFACIALEXPRESSION_SMILE",
    "MF_METADATATIMESTAMPS_DEVICE",
    "MF_METADATATIMESTAMPS_PRESENTATION",
    "MF_HISTOGRAM_CHANNEL_Y",
    "MF_HISTOGRAM_CHANNEL_R",
    "MF_HISTOGRAM_CHANNEL_G",
    "MF_HISTOGRAM_CHANNEL_B",
    "MF_HISTOGRAM_CHANNEL_Cb",
    "MF_HISTOGRAM_CHANNEL_Cr",
    "MFT_CATEGORY_VIDEO_DECODER",
    "MFT_CATEGORY_VIDEO_ENCODER",
    "MFT_CATEGORY_VIDEO_EFFECT",
    "MFT_CATEGORY_MULTIPLEXER",
    "MFT_CATEGORY_DEMULTIPLEXER",
    "MFT_CATEGORY_AUDIO_DECODER",
    "MFT_CATEGORY_AUDIO_ENCODER",
    "MFT_CATEGORY_AUDIO_EFFECT",
    "MFT_CATEGORY_VIDEO_PROCESSOR",
    "MFT_CATEGORY_OTHER",
    "MFT_CATEGORY_ENCRYPTOR",
    "MFT_CATEGORY_VIDEO_RENDERER_EFFECT",
    "MFT_ENUM_VIDEO_RENDERER_EXTENSION_PROFILE",
    "MFT_ENUM_ADAPTER_LUID",
    "MFT_SUPPORT_DYNAMIC_FORMAT_CHANGE",
    "LOCAL_D3DFMT_DEFINES",
    "MFVideoFormat_Base",
    "MFVideoFormat_RGB32",
    "MFVideoFormat_ARGB32",
    "MFVideoFormat_RGB24",
    "MFVideoFormat_RGB555",
    "MFVideoFormat_RGB565",
    "MFVideoFormat_RGB8",
    "MFVideoFormat_L8",
    "MFVideoFormat_L16",
    "MFVideoFormat_D16",
    "MFVideoFormat_AI44",
    "MFVideoFormat_AYUV",
    "MFVideoFormat_YUY2",
    "MFVideoFormat_YVYU",
    "MFVideoFormat_YVU9",
    "MFVideoFormat_UYVY",
    "MFVideoFormat_NV11",
    "MFVideoFormat_NV12",
    "MFVideoFormat_NV21",
    "MFVideoFormat_YV12",
    "MFVideoFormat_I420",
    "MFVideoFormat_IYUV",
    "MFVideoFormat_Y210",
    "MFVideoFormat_Y216",
    "MFVideoFormat_Y410",
    "MFVideoFormat_Y416",
    "MFVideoFormat_Y41P",
    "MFVideoFormat_Y41T",
    "MFVideoFormat_Y42T",
    "MFVideoFormat_P210",
    "MFVideoFormat_P216",
    "MFVideoFormat_P010",
    "MFVideoFormat_P016",
    "MFVideoFormat_v210",
    "MFVideoFormat_v216",
    "MFVideoFormat_v410",
    "MFVideoFormat_MP43",
    "MFVideoFormat_MP4S",
    "MFVideoFormat_M4S2",
    "MFVideoFormat_MP4V",
    "MFVideoFormat_WMV1",
    "MFVideoFormat_WMV2",
    "MFVideoFormat_WMV3",
    "MFVideoFormat_WVC1",
    "MFVideoFormat_MSS1",
    "MFVideoFormat_MSS2",
    "MFVideoFormat_MPG1",
    "MFVideoFormat_DVSL",
    "MFVideoFormat_DVSD",
    "MFVideoFormat_DVHD",
    "MFVideoFormat_DV25",
    "MFVideoFormat_DV50",
    "MFVideoFormat_DVH1",
    "MFVideoFormat_H264",
    "MFVideoFormat_H265",
    "MFVideoFormat_MJPG",
    "MFVideoFormat_420O",
    "MFVideoFormat_HEVC",
    "MFVideoFormat_HEVC_ES",
    "MFVideoFormat_VP80",
    "MFVideoFormat_VP90",
    "MFVideoFormat_ORAW",
    "MFVideoFormat_H263",
    "MFVideoFormat_A2R10G10B10",
    "MFVideoFormat_A16B16G16R16F",
    "MFVideoFormat_VP10",
    "MFVideoFormat_AV1",
    "MFVideoFormat_Theora",
    "MFVideoFormat_H264_ES",
    "MFVideoFormat_MPEG2",
    "MFAudioFormat_Base",
    "MFAudioFormat_PCM",
    "MFAudioFormat_Float",
    "MFAudioFormat_DTS",
    "MFAudioFormat_Dolby_AC3_SPDIF",
    "MFAudioFormat_DRM",
    "MFAudioFormat_WMAudioV8",
    "MFAudioFormat_WMAudioV9",
    "MFAudioFormat_WMAudio_Lossless",
    "MFAudioFormat_WMASPDIF",
    "MFAudioFormat_MSP1",
    "MFAudioFormat_MP3",
    "MFAudioFormat_MPEG",
    "MFAudioFormat_AAC",
    "MFAudioFormat_ADTS",
    "MFAudioFormat_AMR_NB",
    "MFAudioFormat_AMR_WB",
    "MFAudioFormat_AMR_WP",
    "MFAudioFormat_FLAC",
    "MFAudioFormat_ALAC",
    "MFAudioFormat_Opus",
    "MFAudioFormat_Dolby_AC4",
    "MFAudioFormat_Dolby_AC3",
    "MFAudioFormat_Dolby_DDPlus",
    "MFAudioFormat_Dolby_AC4_V1",
    "MFAudioFormat_Dolby_AC4_V2",
    "MFAudioFormat_Dolby_AC4_V1_ES",
    "MFAudioFormat_Dolby_AC4_V2_ES",
    "MFAudioFormat_Vorbis",
    "MFAudioFormat_DTS_RAW",
    "MFAudioFormat_DTS_HD",
    "MFAudioFormat_DTS_XLL",
    "MFAudioFormat_DTS_LBR",
    "MFAudioFormat_DTS_UHD",
    "MFAudioFormat_DTS_UHDY",
    "MFAudioFormat_Float_SpatialObjects",
    "MFAudioFormat_LPCM",
    "MFAudioFormat_PCM_HDCP",
    "MFAudioFormat_Dolby_AC3_HDCP",
    "MFAudioFormat_AAC_HDCP",
    "MFAudioFormat_ADTS_HDCP",
    "MFAudioFormat_Base_HDCP",
    "MFVideoFormat_H264_HDCP",
    "MFVideoFormat_HEVC_HDCP",
    "MFVideoFormat_Base_HDCP",
    "MFMPEG4Format_Base",
    "MFSubtitleFormat_XML",
    "MFSubtitleFormat_TTML",
    "MFSubtitleFormat_ATSC",
    "MFSubtitleFormat_WebVTT",
    "MFSubtitleFormat_SRT",
    "MFSubtitleFormat_SSA",
    "MFSubtitleFormat_CustomUserData",
    "MFSubtitleFormat_PGS",
    "MFSubtitleFormat_VobSub",
    "MF_MT_MAJOR_TYPE",
    "MF_MT_SUBTYPE",
    "MF_MT_ALL_SAMPLES_INDEPENDENT",
    "MF_MT_FIXED_SIZE_SAMPLES",
    "MF_MT_COMPRESSED",
    "MF_MT_SAMPLE_SIZE",
    "MF_MT_WRAPPED_TYPE",
    "MF_MT_VIDEO_3D",
    "MF_MT_VIDEO_3D_FORMAT",
    "MF_MT_VIDEO_3D_NUM_VIEWS",
    "MF_MT_VIDEO_3D_LEFT_IS_BASE",
    "MF_MT_VIDEO_3D_FIRST_IS_LEFT",
    "MFSampleExtension_3DVideo",
    "MFSampleExtension_3DVideo_SampleFormat",
    "MF_MT_VIDEO_ROTATION",
    "MF_DEVICESTREAM_MULTIPLEXED_MANAGER",
    "MF_MEDIATYPE_MULTIPLEXED_MANAGER",
    "MFSampleExtension_MULTIPLEXED_MANAGER",
    "MF_MT_SECURE",
    "MF_DEVICESTREAM_ATTRIBUTE_FRAMESOURCE_TYPES",
    "MF_MT_ALPHA_MODE",
    "MF_MT_DEPTH_MEASUREMENT",
    "MF_MT_DEPTH_VALUE_UNIT",
    "MF_MT_VIDEO_NO_FRAME_ORDERING",
    "MF_MT_VIDEO_H264_NO_FMOASO",
    "MFSampleExtension_ForwardedDecodeUnits",
    "MFSampleExtension_TargetGlobalLuminance",
    "MFSampleExtension_ForwardedDecodeUnitType",
    "MF_MT_FORWARD_CUSTOM_NALU",
    "MF_MT_FORWARD_CUSTOM_SEI",
    "MF_MT_VIDEO_RENDERER_EXTENSION_PROFILE",
    "MF_DECODER_FWD_CUSTOM_SEI_DECODE_ORDER",
    "MF_VIDEO_RENDERER_EFFECT_APP_SERVICE_NAME",
    "MF_MT_AUDIO_NUM_CHANNELS",
    "MF_MT_AUDIO_SAMPLES_PER_SECOND",
    "MF_MT_AUDIO_FLOAT_SAMPLES_PER_SECOND",
    "MF_MT_AUDIO_AVG_BYTES_PER_SECOND",
    "MF_MT_AUDIO_BLOCK_ALIGNMENT",
    "MF_MT_AUDIO_BITS_PER_SAMPLE",
    "MF_MT_AUDIO_VALID_BITS_PER_SAMPLE",
    "MF_MT_AUDIO_SAMPLES_PER_BLOCK",
    "MF_MT_AUDIO_CHANNEL_MASK",
    "MF_MT_AUDIO_FOLDDOWN_MATRIX",
    "MF_MT_AUDIO_WMADRC_PEAKREF",
    "MF_MT_AUDIO_WMADRC_PEAKTARGET",
    "MF_MT_AUDIO_WMADRC_AVGREF",
    "MF_MT_AUDIO_WMADRC_AVGTARGET",
    "MF_MT_AUDIO_PREFER_WAVEFORMATEX",
    "MF_MT_AAC_PAYLOAD_TYPE",
    "MF_MT_AAC_AUDIO_PROFILE_LEVEL_INDICATION",
    "MF_MT_AUDIO_FLAC_MAX_BLOCK_SIZE",
    "MF_MT_SPATIAL_AUDIO_MAX_DYNAMIC_OBJECTS",
    "MF_MT_SPATIAL_AUDIO_OBJECT_METADATA_FORMAT_ID",
    "MF_MT_SPATIAL_AUDIO_OBJECT_METADATA_LENGTH",
    "MF_MT_SPATIAL_AUDIO_MAX_METADATA_ITEMS",
    "MF_MT_SPATIAL_AUDIO_MIN_METADATA_ITEM_OFFSET_SPACING",
    "MF_MT_SPATIAL_AUDIO_DATA_PRESENT",
    "MF_MT_FRAME_SIZE",
    "MF_MT_FRAME_RATE",
    "MF_MT_PIXEL_ASPECT_RATIO",
    "MF_MT_DRM_FLAGS",
    "MF_MT_TIMESTAMP_CAN_BE_DTS",
    "MF_MT_PAD_CONTROL_FLAGS",
    "MF_MT_SOURCE_CONTENT_HINT",
    "MF_MT_VIDEO_CHROMA_SITING",
    "MF_MT_INTERLACE_MODE",
    "MF_MT_TRANSFER_FUNCTION",
    "MF_MT_VIDEO_PRIMARIES",
    "MF_MT_MAX_LUMINANCE_LEVEL",
    "MF_MT_MAX_FRAME_AVERAGE_LUMINANCE_LEVEL",
    "MF_MT_MAX_MASTERING_LUMINANCE",
    "MF_MT_MIN_MASTERING_LUMINANCE",
    "MF_MT_DECODER_USE_MAX_RESOLUTION",
    "MF_MT_DECODER_MAX_DPB_COUNT",
    "MF_MT_CUSTOM_VIDEO_PRIMARIES",
    "MF_MT_YUV_MATRIX",
    "MF_MT_VIDEO_LIGHTING",
    "MF_MT_VIDEO_NOMINAL_RANGE",
    "MF_MT_GEOMETRIC_APERTURE",
    "MF_MT_MINIMUM_DISPLAY_APERTURE",
    "MF_MT_PAN_SCAN_APERTURE",
    "MF_MT_PAN_SCAN_ENABLED",
    "MF_MT_AVG_BITRATE",
    "MF_MT_AVG_BIT_ERROR_RATE",
    "MF_MT_MAX_KEYFRAME_SPACING",
    "MF_MT_USER_DATA",
    "MF_MT_OUTPUT_BUFFER_NUM",
    "MF_MT_REALTIME_CONTENT",
    "MF_MT_DEFAULT_STRIDE",
    "MF_MT_PALETTE",
    "MF_MT_AM_FORMAT_TYPE",
    "MF_MT_VIDEO_PROFILE",
    "MF_MT_VIDEO_LEVEL",
    "MF_MT_MPEG_START_TIME_CODE",
    "MF_MT_MPEG2_PROFILE",
    "MF_MT_MPEG2_LEVEL",
    "MF_MT_MPEG2_FLAGS",
    "MF_MT_MPEG_SEQUENCE_HEADER",
    "MF_MT_MPEG2_STANDARD",
    "MF_MT_MPEG2_TIMECODE",
    "MF_MT_MPEG2_CONTENT_PACKET",
    "MF_MT_MPEG2_ONE_FRAME_PER_PACKET",
    "MF_MT_MPEG2_HDCP",
    "MF_MT_H264_MAX_CODEC_CONFIG_DELAY",
    "MF_MT_H264_SUPPORTED_SLICE_MODES",
    "MF_MT_H264_SUPPORTED_SYNC_FRAME_TYPES",
    "MF_MT_H264_RESOLUTION_SCALING",
    "MF_MT_H264_SIMULCAST_SUPPORT",
    "MF_MT_H264_SUPPORTED_RATE_CONTROL_MODES",
    "MF_MT_H264_MAX_MB_PER_SEC",
    "MF_MT_H264_SUPPORTED_USAGES",
    "MF_MT_H264_CAPABILITIES",
    "MF_MT_H264_SVC_CAPABILITIES",
    "MF_MT_H264_USAGE",
    "MF_MT_H264_RATE_CONTROL_MODES",
    "MF_MT_H264_LAYOUT_PER_STREAM",
    "MF_MT_IN_BAND_PARAMETER_SET",
    "MF_MT_MPEG4_TRACK_TYPE",
    "MF_MT_CONTAINER_RATE_SCALING",
    "MF_MT_DV_AAUX_SRC_PACK_0",
    "MF_MT_DV_AAUX_CTRL_PACK_0",
    "MF_MT_DV_AAUX_SRC_PACK_1",
    "MF_MT_DV_AAUX_CTRL_PACK_1",
    "MF_MT_DV_VAUX_SRC_PACK",
    "MF_MT_DV_VAUX_CTRL_PACK",
    "MF_MT_ARBITRARY_HEADER",
    "MF_MT_ARBITRARY_FORMAT",
    "MF_MT_IMAGE_LOSS_TOLERANT",
    "MF_MT_MPEG4_SAMPLE_DESCRIPTION",
    "MF_MT_MPEG4_CURRENT_SAMPLE_ENTRY",
    "MF_SD_AMBISONICS_SAMPLE3D_DESCRIPTION",
    "MF_MT_ORIGINAL_4CC",
    "MF_MT_ORIGINAL_WAVE_FORMAT_TAG",
    "MF_MT_FRAME_RATE_RANGE_MIN",
    "MF_MT_FRAME_RATE_RANGE_MAX",
    "MF_LOW_LATENCY",
    "MF_VIDEO_MAX_MB_PER_SEC",
    "MF_DISABLE_FRAME_CORRUPTION_INFO",
    "MFStreamExtension_CameraExtrinsics",
    "MFSampleExtension_CameraExtrinsics",
    "MFStreamExtension_PinholeCameraIntrinsics",
    "MFSampleExtension_PinholeCameraIntrinsics",
    "MFMediaType_Default",
    "MFMediaType_Audio",
    "MFMediaType_Video",
    "MFMediaType_Protected",
    "MFMediaType_SAMI",
    "MFMediaType_Script",
    "MFMediaType_Image",
    "MFMediaType_HTML",
    "MFMediaType_Binary",
    "MFMediaType_FileTransfer",
    "MFMediaType_Stream",
    "MFMediaType_MultiplexedFrames",
    "MFMediaType_Subtitle",
    "MFMediaType_Perception",
    "MFImageFormat_JPEG",
    "MFImageFormat_RGB32",
    "MFStreamFormat_MPEG2Transport",
    "MFStreamFormat_MPEG2Program",
    "AM_MEDIA_TYPE_REPRESENTATION",
    "FORMAT_MFVideoFormat",
    "MFMediaType_Metadata",
    "CLSID_MFSourceResolver",
    "MF_DEVICESTREAM_ATTRIBUTE_FACEAUTH_CAPABILITY",
    "MF_DEVICESTREAM_ATTRIBUTE_SECURE_CAPABILITY",
    "MEDIASINK_FIXED_STREAMS",
    "MEDIASINK_CANNOT_MATCH_CLOCK",
    "MEDIASINK_RATELESS",
    "MEDIASINK_CLOCK_REQUIRED",
    "MEDIASINK_CAN_PREROLL",
    "MEDIASINK_REQUIRE_REFERENCE_MEDIATYPE",
    "MFCLOCK_FREQUENCY_HNS",
    "MFCLOCK_TOLERANCE_UNKNOWN",
    "MFCLOCK_JITTER_ISR",
    "MFCLOCK_JITTER_DPC",
    "MFCLOCK_JITTER_PASSIVE",
    "PRESENTATION_CURRENT_POSITION",
    "MF_PD_ADAPTIVE_STREAMING",
    "MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_CROSSPROCESS",
    "MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_NOPERSIST",
    "MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_DONT_ALLOW_FORMAT_CHANGES",
    "MFRR_INFO_VERSION",
    "MF_USER_MODE_COMPONENT_LOAD",
    "MF_KERNEL_MODE_COMPONENT_LOAD",
    "MF_GRL_LOAD_FAILED",
    "MF_INVALID_GRL_SIGNATURE",
    "MF_GRL_ABSENT",
    "MF_COMPONENT_REVOKED",
    "MF_COMPONENT_INVALID_EKU",
    "MF_COMPONENT_CERT_REVOKED",
    "MF_COMPONENT_INVALID_ROOT",
    "MF_COMPONENT_HS_CERT_REVOKED",
    "MF_COMPONENT_LS_CERT_REVOKED",
    "MF_BOOT_DRIVER_VERIFICATION_FAILED",
    "MF_TEST_SIGNED_COMPONENT_LOADING",
    "MF_MINCRYPT_FAILURE",
    "SHA_HASH_LEN",
    "MFSEQUENCER_INVALID_ELEMENT_ID",
    "MF_WRAPPED_BUFFER_SERVICE",
    "CLSID_MPEG2ByteStreamPlugin",
    "MFCONTENTPROTECTIONDEVICE_FUNCTIONID_START",
    "MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA_FUNCTIONID",
    "MF_UNKNOWN_DURATION",
    "MFStreamExtension_ExtendedCameraIntrinsics",
    "MFSampleExtension_ExtendedCameraIntrinsics",
    "MF_INVALID_PRESENTATION_TIME",
    "MF_MEDIATYPE_EQUAL_MAJOR_TYPES",
    "MF_MEDIATYPE_EQUAL_FORMAT_TYPES",
    "MF_MEDIATYPE_EQUAL_FORMAT_DATA",
    "MF_MEDIATYPE_EQUAL_FORMAT_USER_DATA",
    "MFASYNC_FAST_IO_PROCESSING_CALLBACK",
    "MFASYNC_SIGNAL_CALLBACK",
    "MFASYNC_BLOCKING_CALLBACK",
    "MFASYNC_REPLY_CALLBACK",
    "MFASYNC_LOCALIZE_REMOTE_CALLBACK",
    "MFASYNC_CALLBACK_QUEUE_UNDEFINED",
    "MFASYNC_CALLBACK_QUEUE_STANDARD",
    "MFASYNC_CALLBACK_QUEUE_RT",
    "MFASYNC_CALLBACK_QUEUE_IO",
    "MFASYNC_CALLBACK_QUEUE_TIMER",
    "MFASYNC_CALLBACK_QUEUE_MULTITHREADED",
    "MFASYNC_CALLBACK_QUEUE_LONG_FUNCTION",
    "MFASYNC_CALLBACK_QUEUE_PRIVATE_MASK",
    "MFASYNC_CALLBACK_QUEUE_ALL",
    "MFBYTESTREAM_IS_READABLE",
    "MFBYTESTREAM_IS_WRITABLE",
    "MFBYTESTREAM_IS_SEEKABLE",
    "MFBYTESTREAM_IS_REMOTE",
    "MFBYTESTREAM_IS_DIRECTORY",
    "MFBYTESTREAM_HAS_SLOW_SEEK",
    "MFBYTESTREAM_IS_PARTIALLY_DOWNLOADED",
    "MFBYTESTREAM_SHARE_WRITE",
    "MFBYTESTREAM_DOES_NOT_USE_NETWORK",
    "MFBYTESTREAM_SEEK_FLAG_CANCEL_PENDING_IO",
    "MF_MEDIA_SHARING_ENGINE_INITIAL_SEEK_TIME",
    "MF_SHUTDOWN_RENDERER_ON_ENGINE_SHUTDOWN",
    "MF_PREFERRED_SOURCE_URI",
    "MF_SHARING_ENGINE_SHAREDRENDERER",
    "MF_SHARING_ENGINE_CALLBACK",
    "MFT_STREAMS_UNLIMITED",
    "MFT_OUTPUT_BOUND_UPPER_UNBOUNDED",
    "OPM_GET_CURRENT_HDCP_SRM_VERSION",
    "OPM_GET_CONNECTED_HDCP_DEVICE_INFORMATION",
    "OPM_GET_ACP_AND_CGMSA_SIGNALING",
    "OPM_GET_CONNECTOR_TYPE",
    "OPM_GET_SUPPORTED_PROTECTION_TYPES",
    "OPM_GET_VIRTUAL_PROTECTION_LEVEL",
    "OPM_GET_ACTUAL_PROTECTION_LEVEL",
    "OPM_GET_ACTUAL_OUTPUT_FORMAT",
    "OPM_GET_ADAPTER_BUS_TYPE",
    "OPM_GET_OUTPUT_ID",
    "OPM_GET_DVI_CHARACTERISTICS",
    "OPM_GET_CODEC_INFO",
    "OPM_GET_OUTPUT_HARDWARE_PROTECTION_SUPPORT",
    "OPM_SET_PROTECTION_LEVEL",
    "OPM_SET_ACP_AND_CGMSA_SIGNALING",
    "OPM_SET_HDCP_SRM",
    "OPM_SET_PROTECTION_LEVEL_ACCORDING_TO_CSS_DVD",
    "WM_CODEC_ONEPASS_CBR",
    "WM_CODEC_ONEPASS_VBR",
    "WM_CODEC_TWOPASS_CBR",
    "WM_CODEC_TWOPASS_VBR_UNCONSTRAINED",
    "WM_CODEC_TWOPASS_VBR_PEAKCONSTRAINED",
    "SYSFXUI_DONOTSHOW_LOUDNESSEQUALIZATION",
    "SYSFXUI_DONOTSHOW_ROOMCORRECTION",
    "SYSFXUI_DONOTSHOW_BASSMANAGEMENT",
    "SYSFXUI_DONOTSHOW_BASSBOOST",
    "SYSFXUI_DONOTSHOW_HEADPHONEVIRTUALIZATION",
    "SYSFXUI_DONOTSHOW_VIRTUALSURROUND",
    "SYSFXUI_DONOTSHOW_SPEAKERFILLING",
    "SYSFXUI_DONOTSHOW_CHANNELPHANTOMING",
    "AEC_MAX_SYSTEM_MODES",
    "WMAAECMA_E_NO_ACTIVE_RENDER_STREAM",
    "MEDIASUBTYPE_Y41T",
    "MEDIASUBTYPE_Y42T",
    "MEDIASUBTYPE_NV11",
    "MEDIASUBTYPE_V216",
    "MEDIASUBTYPE_V410",
    "MEDIASUBTYPE_v210",
    "MEDIASUBTYPE_I420",
    "MEDIASUBTYPE_WVC1",
    "MEDIASUBTYPE_wvc1",
    "MEDIASUBTYPE_WMVA",
    "MEDIASUBTYPE_wmva",
    "MEDIASUBTYPE_WMVB",
    "MEDIASUBTYPE_wmvb",
    "MEDIASUBTYPE_WMVR",
    "MEDIASUBTYPE_wmvr",
    "MEDIASUBTYPE_WMVP",
    "MEDIASUBTYPE_wmvp",
    "MEDIASUBTYPE_WVP2",
    "MEDIASUBTYPE_wvp2",
    "MEDIASUBTYPE_WMV3",
    "MEDIASUBTYPE_wmv3",
    "MEDIASUBTYPE_WMV2",
    "MEDIASUBTYPE_wmv2",
    "MEDIASUBTYPE_WMV1",
    "MEDIASUBTYPE_wmv1",
    "MEDIASUBTYPE_MPG4",
    "MEDIASUBTYPE_mpg4",
    "MEDIASUBTYPE_MP42",
    "MEDIASUBTYPE_mp42",
    "MEDIASUBTYPE_MP43",
    "MEDIASUBTYPE_mp43",
    "MEDIASUBTYPE_MP4S",
    "MEDIASUBTYPE_mp4s",
    "MEDIASUBTYPE_M4S2",
    "MEDIASUBTYPE_m4s2",
    "MEDIASUBTYPE_MSS1",
    "MEDIASUBTYPE_MSS2",
    "MEDIASUBTYPE_MSAUDIO1",
    "MEDIASUBTYPE_WMAUDIO2",
    "MEDIASUBTYPE_WMAUDIO3",
    "MEDIASUBTYPE_WMAUDIO_LOSSLESS",
    "MEDIASUBTYPE_WMASPDIF",
    "MEDIASUBTYPE_WMAUDIO4",
    "MEDIASUBTYPE_MPEG_ADTS_AAC",
    "MEDIASUBTYPE_MPEG_RAW_AAC",
    "MEDIASUBTYPE_MPEG_LOAS",
    "MEDIASUBTYPE_NOKIA_MPEG_ADTS_AAC",
    "MEDIASUBTYPE_NOKIA_MPEG_RAW_AAC",
    "MEDIASUBTYPE_VODAFONE_MPEG_ADTS_AAC",
    "MEDIASUBTYPE_VODAFONE_MPEG_RAW_AAC",
    "MEDIASUBTYPE_MPEG_HEAAC",
    "MEDIASUBTYPE_RAW_AAC1",
    "MEDIASUBTYPE_DVM",
    "MEDIASUBTYPE_DTS2",
    "MEDIASUBTYPE_DOLBY_DDPLUS",
    "MEDIASUBTYPE_DOLBY_TRUEHD",
    "MEDIASUBTYPE_DTS_HD",
    "MEDIASUBTYPE_DTS_HD_HRA",
    "MEDIASUBTYPE_h264",
    "MEDIASUBTYPE_AVC1",
    "MEDIASUBTYPE_X264",
    "MEDIASUBTYPE_x264",
    "MF_VIDEODSP_MODE",
    "MFSampleExtension_VideoDSPMode",
    "CLSID_CTocEntry",
    "CLSID_CTocEntryList",
    "CLSID_CToc",
    "CLSID_CTocCollection",
    "CLSID_CTocParser",
    "CLSID_CAsfTocParser",
    "CLSID_CAviTocParser",
    "CLSID_CFileIo",
    "CLSID_CFileClient",
    "CLSID_CClusterDetectorEx",
    "E_TOCPARSER_INVALIDASFFILE",
    "E_TOCPARSER_INVALIDRIFFFILE",
    "TOC_MAX_DESCRIPTION_SIZE",
    "TOC_ENTRY_MAX_TITLE_SIZE",
    "MFASFINDEXER_PER_ENTRY_BYTES_DYNAMIC",
    "MFASFINDEXER_NO_FIXED_INTERVAL",
    "MFASFINDEXER_READ_FOR_REVERSEPLAYBACK_OUTOFDATASEGMENT",
    "MFASFINDEXER_APPROX_SEEK_TIME_UNKNOWN",
    "MFASF_MAX_STREAM_NUMBER",
    "MFASF_INVALID_STREAM_NUMBER",
    "MFASF_PAYLOADEXTENSION_MAX_SIZE",
    "MFASF_PAYLOADEXTENSION_VARIABLE_SIZE",
    "MFASF_DEFAULT_BUFFER_WINDOW_MS",
    "FACILITY_MF",
    "FACILITY_MF_WIN32",
    "MF_E_PLATFORM_NOT_INITIALIZED",
    "MF_E_BUFFERTOOSMALL",
    "MF_E_INVALIDREQUEST",
    "MF_E_INVALIDSTREAMNUMBER",
    "MF_E_INVALIDMEDIATYPE",
    "MF_E_NOTACCEPTING",
    "MF_E_NOT_INITIALIZED",
    "MF_E_UNSUPPORTED_REPRESENTATION",
    "MF_E_NO_MORE_TYPES",
    "MF_E_UNSUPPORTED_SERVICE",
    "MF_E_UNEXPECTED",
    "MF_E_INVALIDNAME",
    "MF_E_INVALIDTYPE",
    "MF_E_INVALID_FILE_FORMAT",
    "MF_E_INVALIDINDEX",
    "MF_E_INVALID_TIMESTAMP",
    "MF_E_UNSUPPORTED_SCHEME",
    "MF_E_UNSUPPORTED_BYTESTREAM_TYPE",
    "MF_E_UNSUPPORTED_TIME_FORMAT",
    "MF_E_NO_SAMPLE_TIMESTAMP",
    "MF_E_NO_SAMPLE_DURATION",
    "MF_E_INVALID_STREAM_DATA",
    "MF_E_RT_UNAVAILABLE",
    "MF_E_UNSUPPORTED_RATE",
    "MF_E_THINNING_UNSUPPORTED",
    "MF_E_REVERSE_UNSUPPORTED",
    "MF_E_UNSUPPORTED_RATE_TRANSITION",
    "MF_E_RATE_CHANGE_PREEMPTED",
    "MF_E_NOT_FOUND",
    "MF_E_NOT_AVAILABLE",
    "MF_E_NO_CLOCK",
    "MF_S_MULTIPLE_BEGIN",
    "MF_E_MULTIPLE_BEGIN",
    "MF_E_MULTIPLE_SUBSCRIBERS",
    "MF_E_TIMER_ORPHANED",
    "MF_E_STATE_TRANSITION_PENDING",
    "MF_E_UNSUPPORTED_STATE_TRANSITION",
    "MF_E_UNRECOVERABLE_ERROR_OCCURRED",
    "MF_E_SAMPLE_HAS_TOO_MANY_BUFFERS",
    "MF_E_SAMPLE_NOT_WRITABLE",
    "MF_E_INVALID_KEY",
    "MF_E_BAD_STARTUP_VERSION",
    "MF_E_UNSUPPORTED_CAPTION",
    "MF_E_INVALID_POSITION",
    "MF_E_ATTRIBUTENOTFOUND",
    "MF_E_PROPERTY_TYPE_NOT_ALLOWED",
    "MF_E_PROPERTY_TYPE_NOT_SUPPORTED",
    "MF_E_PROPERTY_EMPTY",
    "MF_E_PROPERTY_NOT_EMPTY",
    "MF_E_PROPERTY_VECTOR_NOT_ALLOWED",
    "MF_E_PROPERTY_VECTOR_REQUIRED",
    "MF_E_OPERATION_CANCELLED",
    "MF_E_BYTESTREAM_NOT_SEEKABLE",
    "MF_E_DISABLED_IN_SAFEMODE",
    "MF_E_CANNOT_PARSE_BYTESTREAM",
    "MF_E_SOURCERESOLVER_MUTUALLY_EXCLUSIVE_FLAGS",
    "MF_E_MEDIAPROC_WRONGSTATE",
    "MF_E_RT_THROUGHPUT_NOT_AVAILABLE",
    "MF_E_RT_TOO_MANY_CLASSES",
    "MF_E_RT_WOULDBLOCK",
    "MF_E_NO_BITPUMP",
    "MF_E_RT_OUTOFMEMORY",
    "MF_E_RT_WORKQUEUE_CLASS_NOT_SPECIFIED",
    "MF_E_INSUFFICIENT_BUFFER",
    "MF_E_CANNOT_CREATE_SINK",
    "MF_E_BYTESTREAM_UNKNOWN_LENGTH",
    "MF_E_SESSION_PAUSEWHILESTOPPED",
    "MF_S_ACTIVATE_REPLACED",
    "MF_E_FORMAT_CHANGE_NOT_SUPPORTED",
    "MF_E_INVALID_WORKQUEUE",
    "MF_E_DRM_UNSUPPORTED",
    "MF_E_UNAUTHORIZED",
    "MF_E_OUT_OF_RANGE",
    "MF_E_INVALID_CODEC_MERIT",
    "MF_E_HW_MFT_FAILED_START_STREAMING",
    "MF_E_OPERATION_IN_PROGRESS",
    "MF_E_HARDWARE_DRM_UNSUPPORTED",
    "MF_E_DURATION_TOO_LONG",
    "MF_E_OPERATION_UNSUPPORTED_AT_D3D_FEATURE_LEVEL",
    "MF_E_UNSUPPORTED_MEDIATYPE_AT_D3D_FEATURE_LEVEL",
    "MF_S_ASF_PARSEINPROGRESS",
    "MF_E_ASF_PARSINGINCOMPLETE",
    "MF_E_ASF_MISSINGDATA",
    "MF_E_ASF_INVALIDDATA",
    "MF_E_ASF_OPAQUEPACKET",
    "MF_E_ASF_NOINDEX",
    "MF_E_ASF_OUTOFRANGE",
    "MF_E_ASF_INDEXNOTLOADED",
    "MF_E_ASF_TOO_MANY_PAYLOADS",
    "MF_E_ASF_UNSUPPORTED_STREAM_TYPE",
    "MF_E_ASF_DROPPED_PACKET",
    "MF_E_NO_EVENTS_AVAILABLE",
    "MF_E_INVALID_STATE_TRANSITION",
    "MF_E_END_OF_STREAM",
    "MF_E_SHUTDOWN",
    "MF_E_MP3_NOTFOUND",
    "MF_E_MP3_OUTOFDATA",
    "MF_E_MP3_NOTMP3",
    "MF_E_MP3_NOTSUPPORTED",
    "MF_E_NO_DURATION",
    "MF_E_INVALID_FORMAT",
    "MF_E_PROPERTY_NOT_FOUND",
    "MF_E_PROPERTY_READ_ONLY",
    "MF_E_PROPERTY_NOT_ALLOWED",
    "MF_E_MEDIA_SOURCE_NOT_STARTED",
    "MF_E_UNSUPPORTED_FORMAT",
    "MF_E_MP3_BAD_CRC",
    "MF_E_NOT_PROTECTED",
    "MF_E_MEDIA_SOURCE_WRONGSTATE",
    "MF_E_MEDIA_SOURCE_NO_STREAMS_SELECTED",
    "MF_E_CANNOT_FIND_KEYFRAME_SAMPLE",
    "MF_E_UNSUPPORTED_CHARACTERISTICS",
    "MF_E_NO_AUDIO_RECORDING_DEVICE",
    "MF_E_AUDIO_RECORDING_DEVICE_IN_USE",
    "MF_E_AUDIO_RECORDING_DEVICE_INVALIDATED",
    "MF_E_VIDEO_RECORDING_DEVICE_INVALIDATED",
    "MF_E_VIDEO_RECORDING_DEVICE_PREEMPTED",
    "MF_E_NETWORK_RESOURCE_FAILURE",
    "MF_E_NET_WRITE",
    "MF_E_NET_READ",
    "MF_E_NET_REQUIRE_NETWORK",
    "MF_E_NET_REQUIRE_ASYNC",
    "MF_E_NET_BWLEVEL_NOT_SUPPORTED",
    "MF_E_NET_STREAMGROUPS_NOT_SUPPORTED",
    "MF_E_NET_MANUALSS_NOT_SUPPORTED",
    "MF_E_NET_INVALID_PRESENTATION_DESCRIPTOR",
    "MF_E_NET_CACHESTREAM_NOT_FOUND",
    "MF_I_MANUAL_PROXY",
    "MF_E_NET_REQUIRE_INPUT",
    "MF_E_NET_REDIRECT",
    "MF_E_NET_REDIRECT_TO_PROXY",
    "MF_E_NET_TOO_MANY_REDIRECTS",
    "MF_E_NET_TIMEOUT",
    "MF_E_NET_CLIENT_CLOSE",
    "MF_E_NET_BAD_CONTROL_DATA",
    "MF_E_NET_INCOMPATIBLE_SERVER",
    "MF_E_NET_UNSAFE_URL",
    "MF_E_NET_CACHE_NO_DATA",
    "MF_E_NET_EOL",
    "MF_E_NET_BAD_REQUEST",
    "MF_E_NET_INTERNAL_SERVER_ERROR",
    "MF_E_NET_SESSION_NOT_FOUND",
    "MF_E_NET_NOCONNECTION",
    "MF_E_NET_CONNECTION_FAILURE",
    "MF_E_NET_INCOMPATIBLE_PUSHSERVER",
    "MF_E_NET_SERVER_ACCESSDENIED",
    "MF_E_NET_PROXY_ACCESSDENIED",
    "MF_E_NET_CANNOTCONNECT",
    "MF_E_NET_INVALID_PUSH_TEMPLATE",
    "MF_E_NET_INVALID_PUSH_PUBLISHING_POINT",
    "MF_E_NET_BUSY",
    "MF_E_NET_RESOURCE_GONE",
    "MF_E_NET_ERROR_FROM_PROXY",
    "MF_E_NET_PROXY_TIMEOUT",
    "MF_E_NET_SERVER_UNAVAILABLE",
    "MF_E_NET_TOO_MUCH_DATA",
    "MF_E_NET_SESSION_INVALID",
    "MF_E_OFFLINE_MODE",
    "MF_E_NET_UDP_BLOCKED",
    "MF_E_NET_UNSUPPORTED_CONFIGURATION",
    "MF_E_NET_PROTOCOL_DISABLED",
    "MF_E_NET_COMPANION_DRIVER_DISCONNECT",
    "MF_E_ALREADY_INITIALIZED",
    "MF_E_BANDWIDTH_OVERRUN",
    "MF_E_LATE_SAMPLE",
    "MF_E_FLUSH_NEEDED",
    "MF_E_INVALID_PROFILE",
    "MF_E_INDEX_NOT_COMMITTED",
    "MF_E_NO_INDEX",
    "MF_E_CANNOT_INDEX_IN_PLACE",
    "MF_E_MISSING_ASF_LEAKYBUCKET",
    "MF_E_INVALID_ASF_STREAMID",
    "MF_E_STREAMSINK_REMOVED",
    "MF_E_STREAMSINKS_OUT_OF_SYNC",
    "MF_E_STREAMSINKS_FIXED",
    "MF_E_STREAMSINK_EXISTS",
    "MF_E_SAMPLEALLOCATOR_CANCELED",
    "MF_E_SAMPLEALLOCATOR_EMPTY",
    "MF_E_SINK_ALREADYSTOPPED",
    "MF_E_ASF_FILESINK_BITRATE_UNKNOWN",
    "MF_E_SINK_NO_STREAMS",
    "MF_S_SINK_NOT_FINALIZED",
    "MF_E_METADATA_TOO_LONG",
    "MF_E_SINK_NO_SAMPLES_PROCESSED",
    "MF_E_SINK_HEADERS_NOT_FOUND",
    "MF_E_VIDEO_REN_NO_PROCAMP_HW",
    "MF_E_VIDEO_REN_NO_DEINTERLACE_HW",
    "MF_E_VIDEO_REN_COPYPROT_FAILED",
    "MF_E_VIDEO_REN_SURFACE_NOT_SHARED",
    "MF_E_VIDEO_DEVICE_LOCKED",
    "MF_E_NEW_VIDEO_DEVICE",
    "MF_E_NO_VIDEO_SAMPLE_AVAILABLE",
    "MF_E_NO_AUDIO_PLAYBACK_DEVICE",
    "MF_E_AUDIO_PLAYBACK_DEVICE_IN_USE",
    "MF_E_AUDIO_PLAYBACK_DEVICE_INVALIDATED",
    "MF_E_AUDIO_SERVICE_NOT_RUNNING",
    "MF_E_AUDIO_BUFFER_SIZE_ERROR",
    "MF_E_AUDIO_CLIENT_WRAPPER_SPOOF_ERROR",
    "MF_E_TOPO_INVALID_OPTIONAL_NODE",
    "MF_E_TOPO_CANNOT_FIND_DECRYPTOR",
    "MF_E_TOPO_CODEC_NOT_FOUND",
    "MF_E_TOPO_CANNOT_CONNECT",
    "MF_E_TOPO_UNSUPPORTED",
    "MF_E_TOPO_INVALID_TIME_ATTRIBUTES",
    "MF_E_TOPO_LOOPS_IN_TOPOLOGY",
    "MF_E_TOPO_MISSING_PRESENTATION_DESCRIPTOR",
    "MF_E_TOPO_MISSING_STREAM_DESCRIPTOR",
    "MF_E_TOPO_STREAM_DESCRIPTOR_NOT_SELECTED",
    "MF_E_TOPO_MISSING_SOURCE",
    "MF_E_TOPO_SINK_ACTIVATES_UNSUPPORTED",
    "MF_E_SEQUENCER_UNKNOWN_SEGMENT_ID",
    "MF_S_SEQUENCER_CONTEXT_CANCELED",
    "MF_E_NO_SOURCE_IN_CACHE",
    "MF_S_SEQUENCER_SEGMENT_AT_END_OF_STREAM",
    "MF_E_TRANSFORM_TYPE_NOT_SET",
    "MF_E_TRANSFORM_STREAM_CHANGE",
    "MF_E_TRANSFORM_INPUT_REMAINING",
    "MF_E_TRANSFORM_PROFILE_MISSING",
    "MF_E_TRANSFORM_PROFILE_INVALID_OR_CORRUPT",
    "MF_E_TRANSFORM_PROFILE_TRUNCATED",
    "MF_E_TRANSFORM_PROPERTY_PID_NOT_RECOGNIZED",
    "MF_E_TRANSFORM_PROPERTY_VARIANT_TYPE_WRONG",
    "MF_E_TRANSFORM_PROPERTY_NOT_WRITEABLE",
    "MF_E_TRANSFORM_PROPERTY_ARRAY_VALUE_WRONG_NUM_DIM",
    "MF_E_TRANSFORM_PROPERTY_VALUE_SIZE_WRONG",
    "MF_E_TRANSFORM_PROPERTY_VALUE_OUT_OF_RANGE",
    "MF_E_TRANSFORM_PROPERTY_VALUE_INCOMPATIBLE",
    "MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_OUTPUT_MEDIATYPE",
    "MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_INPUT_MEDIATYPE",
    "MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_MEDIATYPE_COMBINATION",
    "MF_E_TRANSFORM_CONFLICTS_WITH_OTHER_CURRENTLY_ENABLED_FEATURES",
    "MF_E_TRANSFORM_NEED_MORE_INPUT",
    "MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_SPKR_CONFIG",
    "MF_E_TRANSFORM_CANNOT_CHANGE_MEDIATYPE_WHILE_PROCESSING",
    "MF_S_TRANSFORM_DO_NOT_PROPAGATE_EVENT",
    "MF_E_UNSUPPORTED_D3D_TYPE",
    "MF_E_TRANSFORM_ASYNC_LOCKED",
    "MF_E_TRANSFORM_CANNOT_INITIALIZE_ACM_DRIVER",
    "MF_E_TRANSFORM_STREAM_INVALID_RESOLUTION",
    "MF_E_TRANSFORM_ASYNC_MFT_NOT_SUPPORTED",
    "MF_E_TRANSFORM_EXATTRIBUTE_NOT_SUPPORTED",
    "MF_E_LICENSE_INCORRECT_RIGHTS",
    "MF_E_LICENSE_OUTOFDATE",
    "MF_E_LICENSE_REQUIRED",
    "MF_E_DRM_HARDWARE_INCONSISTENT",
    "MF_E_NO_CONTENT_PROTECTION_MANAGER",
    "MF_E_LICENSE_RESTORE_NO_RIGHTS",
    "MF_E_BACKUP_RESTRICTED_LICENSE",
    "MF_E_LICENSE_RESTORE_NEEDS_INDIVIDUALIZATION",
    "MF_S_PROTECTION_NOT_REQUIRED",
    "MF_E_COMPONENT_REVOKED",
    "MF_E_TRUST_DISABLED",
    "MF_E_WMDRMOTA_NO_ACTION",
    "MF_E_WMDRMOTA_ACTION_ALREADY_SET",
    "MF_E_WMDRMOTA_DRM_HEADER_NOT_AVAILABLE",
    "MF_E_WMDRMOTA_DRM_ENCRYPTION_SCHEME_NOT_SUPPORTED",
    "MF_E_WMDRMOTA_ACTION_MISMATCH",
    "MF_E_WMDRMOTA_INVALID_POLICY",
    "MF_E_POLICY_UNSUPPORTED",
    "MF_E_OPL_NOT_SUPPORTED",
    "MF_E_TOPOLOGY_VERIFICATION_FAILED",
    "MF_E_SIGNATURE_VERIFICATION_FAILED",
    "MF_E_DEBUGGING_NOT_ALLOWED",
    "MF_E_CODE_EXPIRED",
    "MF_E_GRL_VERSION_TOO_LOW",
    "MF_E_GRL_RENEWAL_NOT_FOUND",
    "MF_E_GRL_EXTENSIBLE_ENTRY_NOT_FOUND",
    "MF_E_KERNEL_UNTRUSTED",
    "MF_E_PEAUTH_UNTRUSTED",
    "MF_E_NON_PE_PROCESS",
    "MF_E_REBOOT_REQUIRED",
    "MF_S_WAIT_FOR_POLICY_SET",
    "MF_S_VIDEO_DISABLED_WITH_UNKNOWN_SOFTWARE_OUTPUT",
    "MF_E_GRL_INVALID_FORMAT",
    "MF_E_GRL_UNRECOGNIZED_FORMAT",
    "MF_E_ALL_PROCESS_RESTART_REQUIRED",
    "MF_E_PROCESS_RESTART_REQUIRED",
    "MF_E_USERMODE_UNTRUSTED",
    "MF_E_PEAUTH_SESSION_NOT_STARTED",
    "MF_E_PEAUTH_PUBLICKEY_REVOKED",
    "MF_E_GRL_ABSENT",
    "MF_S_PE_TRUSTED",
    "MF_E_PE_UNTRUSTED",
    "MF_E_PEAUTH_NOT_STARTED",
    "MF_E_INCOMPATIBLE_SAMPLE_PROTECTION",
    "MF_E_PE_SESSIONS_MAXED",
    "MF_E_HIGH_SECURITY_LEVEL_CONTENT_NOT_ALLOWED",
    "MF_E_TEST_SIGNED_COMPONENTS_NOT_ALLOWED",
    "MF_E_ITA_UNSUPPORTED_ACTION",
    "MF_E_ITA_ERROR_PARSING_SAP_PARAMETERS",
    "MF_E_POLICY_MGR_ACTION_OUTOFBOUNDS",
    "MF_E_BAD_OPL_STRUCTURE_FORMAT",
    "MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_PROTECTION_GUID",
    "MF_E_NO_PMP_HOST",
    "MF_E_ITA_OPL_DATA_NOT_INITIALIZED",
    "MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_OUTPUT",
    "MF_E_ITA_UNRECOGNIZED_DIGITAL_VIDEO_OUTPUT",
    "MF_E_RESOLUTION_REQUIRES_PMP_CREATION_CALLBACK",
    "MF_E_INVALID_AKE_CHANNEL_PARAMETERS",
    "MF_E_CONTENT_PROTECTION_SYSTEM_NOT_ENABLED",
    "MF_E_UNSUPPORTED_CONTENT_PROTECTION_SYSTEM",
    "MF_E_DRM_MIGRATION_NOT_SUPPORTED",
    "MF_E_HDCP_AUTHENTICATION_FAILURE",
    "MF_E_HDCP_LINK_FAILURE",
    "MF_E_CLOCK_INVALID_CONTINUITY_KEY",
    "MF_E_CLOCK_NO_TIME_SOURCE",
    "MF_E_CLOCK_STATE_ALREADY_SET",
    "MF_E_CLOCK_NOT_SIMPLE",
    "MF_S_CLOCK_STOPPED",
    "MF_E_CLOCK_AUDIO_DEVICE_POSITION_UNEXPECTED",
    "MF_E_CLOCK_AUDIO_RENDER_POSITION_UNEXPECTED",
    "MF_E_CLOCK_AUDIO_RENDER_TIME_UNEXPECTED",
    "MF_E_NO_MORE_DROP_MODES",
    "MF_E_NO_MORE_QUALITY_LEVELS",
    "MF_E_DROPTIME_NOT_SUPPORTED",
    "MF_E_QUALITYKNOB_WAIT_LONGER",
    "MF_E_QM_INVALIDSTATE",
    "MF_E_TRANSCODE_NO_CONTAINERTYPE",
    "MF_E_TRANSCODE_PROFILE_NO_MATCHING_STREAMS",
    "MF_E_TRANSCODE_NO_MATCHING_ENCODER",
    "MF_E_TRANSCODE_INVALID_PROFILE",
    "MF_E_ALLOCATOR_NOT_INITIALIZED",
    "MF_E_ALLOCATOR_NOT_COMMITED",
    "MF_E_ALLOCATOR_ALREADY_COMMITED",
    "MF_E_STREAM_ERROR",
    "MF_E_INVALID_STREAM_STATE",
    "MF_E_HW_STREAM_NOT_CONNECTED",
    "MF_E_NO_CAPTURE_DEVICES_AVAILABLE",
    "MF_E_CAPTURE_SINK_OUTPUT_NOT_SET",
    "MF_E_CAPTURE_SINK_MIRROR_ERROR",
    "MF_E_CAPTURE_SINK_ROTATE_ERROR",
    "MF_E_CAPTURE_ENGINE_INVALID_OP",
    "MF_E_CAPTURE_ENGINE_ALL_EFFECTS_REMOVED",
    "MF_E_CAPTURE_SOURCE_NO_INDEPENDENT_PHOTO_STREAM_PRESENT",
    "MF_E_CAPTURE_SOURCE_NO_VIDEO_STREAM_PRESENT",
    "MF_E_CAPTURE_SOURCE_NO_AUDIO_STREAM_PRESENT",
    "MF_E_CAPTURE_SOURCE_DEVICE_EXTENDEDPROP_OP_IN_PROGRESS",
    "MF_E_CAPTURE_PROPERTY_SET_DURING_PHOTO",
    "MF_E_CAPTURE_NO_SAMPLES_IN_QUEUE",
    "MF_E_HW_ACCELERATED_THUMBNAIL_NOT_SUPPORTED",
    "MF_E_UNSUPPORTED_CAPTURE_DEVICE_PRESENT",
    "MF_E_TIMELINECONTROLLER_UNSUPPORTED_SOURCE_TYPE",
    "MF_E_TIMELINECONTROLLER_NOT_ALLOWED",
    "MF_E_TIMELINECONTROLLER_CANNOT_ATTACH",
    "MF_E_MEDIA_EXTENSION_APPSERVICE_CONNECTION_FAILED",
    "MF_E_MEDIA_EXTENSION_APPSERVICE_REQUEST_FAILED",
    "MF_E_MEDIA_EXTENSION_PACKAGE_INTEGRITY_CHECK_FAILED",
    "MF_E_MEDIA_EXTENSION_PACKAGE_LICENSE_INVALID",
    "MF_INDEX_SIZE_ERR",
    "MF_NOT_FOUND_ERR",
    "MF_NOT_SUPPORTED_ERR",
    "MF_INVALID_STATE_ERR",
    "MF_SYNTAX_ERR",
    "MF_INVALID_ACCESS_ERR",
    "MF_QUOTA_EXCEEDED_ERR",
    "MF_PARSE_ERR",
    "MF_TYPE_ERR",
    "DEVPKEY_DeviceInterface_IsVirtualCamera",
    "g_wszSpeechFormatCaps",
    "g_wszWMCPCodecName",
    "g_wszWMCPSupportedVBRModes",
    "g_wszWMCPAudioVBRSupported",
    "g_wszWMCPAudioVBRQuality",
    "g_wszWMCPMaxPasses",
    "g_wszWMCPDefaultCrisp",
    "COPP_ProtectionType_Unknown",
    "COPP_ProtectionType_None",
    "COPP_ProtectionType_HDCP",
    "COPP_ProtectionType_ACP",
    "COPP_ProtectionType_CGMSA",
    "COPP_ProtectionType_Mask",
    "COPP_ProtectionType_Reserved",
    "MF_BYTESTREAM_ORIGIN_NAME",
    "MF_BYTESTREAM_CONTENT_TYPE",
    "MF_BYTESTREAM_DURATION",
    "MF_BYTESTREAM_LAST_MODIFIED_TIME",
    "MF_BYTESTREAM_IFO_FILE_URI",
    "MF_BYTESTREAM_DLNA_PROFILE_ID",
    "MF_BYTESTREAM_EFFECTIVE_URL",
    "MF_BYTESTREAM_TRANSCODED",
    "CLSID_MFByteStreamProxyClassFactory",
    "MEDeviceStreamCreated",
    "MF_SA_D3D_AWARE",
    "MF_SA_REQUIRED_SAMPLE_COUNT",
    "MFT_END_STREAMING_AWARE",
    "MF_SA_AUDIO_ENDPOINT_AWARE",
    "MFT_AUDIO_DECODER_AUDIO_ENDPOINT_ID",
    "MFT_AUDIO_DECODER_SPATIAL_METADATA_CLIENT",
    "MF_DMFT_FRAME_BUFFER_INFO",
    "MF_SA_REQUIRED_SAMPLE_COUNT_PROGRESSIVE",
    "MF_SA_MINIMUM_OUTPUT_SAMPLE_COUNT",
    "MF_SA_MINIMUM_OUTPUT_SAMPLE_COUNT_PROGRESSIVE",
    "MFT_SUPPORT_3DVIDEO",
    "MF_ENABLE_3DVIDEO_OUTPUT",
    "MF_SA_D3D11_BINDFLAGS",
    "MF_SA_D3D11_USAGE",
    "MF_SA_D3D11_AWARE",
    "MF_SA_D3D11_SHARED",
    "MF_SA_D3D11_SHARED_WITHOUT_MUTEX",
    "MF_SA_D3D11_ALLOW_DYNAMIC_YUV_TEXTURE",
    "MF_SA_D3D11_HW_PROTECTED",
    "MF_SA_BUFFERS_PER_SAMPLE",
    "MF_SA_D3D11_ALLOCATE_DISPLAYABLE_RESOURCES",
    "MFT_DECODER_EXPOSE_OUTPUT_TYPES_IN_NATIVE_ORDER",
    "MFT_DECODER_QUALITY_MANAGEMENT_CUSTOM_CONTROL",
    "MFT_DECODER_QUALITY_MANAGEMENT_RECOVERY_WITHOUT_ARTIFACTS",
    "MFT_REMUX_MARK_I_PICTURE_AS_CLEAN_POINT",
    "MFT_DECODER_FINAL_VIDEO_RESOLUTION_HINT",
    "MFT_ENCODER_SUPPORTS_CONFIG_EVENT",
    "MFT_ENUM_HARDWARE_VENDOR_ID_Attribute",
    "MF_TRANSFORM_ASYNC",
    "MF_TRANSFORM_ASYNC_UNLOCK",
    "MF_TRANSFORM_FLAGS_Attribute",
    "MF_TRANSFORM_CATEGORY_Attribute",
    "MFT_TRANSFORM_CLSID_Attribute",
    "MFT_INPUT_TYPES_Attributes",
    "MFT_OUTPUT_TYPES_Attributes",
    "MFT_ENUM_HARDWARE_URL_Attribute",
    "MFT_FRIENDLY_NAME_Attribute",
    "MFT_CONNECTED_STREAM_ATTRIBUTE",
    "MFT_CONNECTED_TO_HW_STREAM",
    "MFT_PREFERRED_OUTPUTTYPE_Attribute",
    "MFT_PROCESS_LOCAL_Attribute",
    "MFT_PREFERRED_ENCODER_PROFILE",
    "MFT_HW_TIMESTAMP_WITH_QPC_Attribute",
    "MFT_FIELDOFUSE_UNLOCK_Attribute",
    "MFT_CODEC_MERIT_Attribute",
    "MFT_ENUM_TRANSCODE_ONLY_ATTRIBUTE",
    "MFT_AUDIO_DECODER_DEGRADATION_INFO_ATTRIBUTE",
    "MFT_POLICY_SET_AWARE",
    "MFT_USING_HARDWARE_DRM",
    "MF_WVC1_PROG_SINGLE_SLICE_CONTENT",
    "MF_PROGRESSIVE_CODING_CONTENT",
    "MF_NALU_LENGTH_SET",
    "MF_NALU_LENGTH_INFORMATION",
    "MF_USER_DATA_PAYLOAD",
    "MF_MPEG4SINK_SPSPPS_PASSTHROUGH",
    "MF_MPEG4SINK_MOOV_BEFORE_MDAT",
    "MF_MPEG4SINK_MINIMUM_PROPERTIES_SIZE",
    "MF_MPEG4SINK_MIN_FRAGMENT_DURATION",
    "MF_MPEG4SINK_MAX_CODED_SEQUENCES_PER_FRAGMENT",
    "MF_SESSION_TOPOLOADER",
    "MF_SESSION_GLOBAL_TIME",
    "MF_SESSION_QUALITY_MANAGER",
    "MF_SESSION_CONTENT_PROTECTION_MANAGER",
    "MF_SESSION_SERVER_CONTEXT",
    "MF_SESSION_REMOTE_SOURCE_MODE",
    "MF_SESSION_APPROX_EVENT_OCCURRENCE_TIME",
    "MF_PMP_SERVER_CONTEXT",
    "MF_TIME_FORMAT_ENTRY_RELATIVE",
    "MF_SOURCE_STREAM_SUPPORTS_HW_CONNECTION",
    "MF_STREAM_SINK_SUPPORTS_HW_CONNECTION",
    "MF_STREAM_SINK_SUPPORTS_ROTATION",
    "MF_SINK_VIDEO_PTS",
    "MF_SINK_VIDEO_NATIVE_WIDTH",
    "MF_SINK_VIDEO_NATIVE_HEIGHT",
    "MF_SINK_VIDEO_DISPLAY_ASPECT_RATIO_NUMERATOR",
    "MF_SINK_VIDEO_DISPLAY_ASPECT_RATIO_DENOMINATOR",
    "MF_BD_MVC_PLANE_OFFSET_METADATA",
    "MF_LUMA_KEY_ENABLE",
    "MF_LUMA_KEY_LOWER",
    "MF_LUMA_KEY_UPPER",
    "MF_USER_EXTENDED_ATTRIBUTES",
    "MF_INDEPENDENT_STILL_IMAGE",
    "MF_XVP_SAMPLE_LOCK_TIMEOUT",
    "MF_TOPOLOGY_PROJECTSTART",
    "MF_TOPOLOGY_PROJECTSTOP",
    "MF_TOPOLOGY_NO_MARKIN_MARKOUT",
    "MF_TOPOLOGY_DXVA_MODE",
    "MF_TOPOLOGY_ENABLE_XVP_FOR_PLAYBACK",
    "MF_TOPOLOGY_STATIC_PLAYBACK_OPTIMIZATIONS",
    "MF_TOPOLOGY_PLAYBACK_MAX_DIMS",
    "MF_TOPOLOGY_HARDWARE_MODE",
    "MF_TOPOLOGY_PLAYBACK_FRAMERATE",
    "MF_TOPOLOGY_DYNAMIC_CHANGE_NOT_ALLOWED",
    "MF_TOPOLOGY_ENUMERATE_SOURCE_TYPES",
    "MF_TOPOLOGY_START_TIME_ON_PRESENTATION_SWITCH",
    "MF_DISABLE_LOCALLY_REGISTERED_PLUGINS",
    "MF_LOCAL_PLUGIN_CONTROL_POLICY",
    "MF_TOPONODE_FLUSH",
    "MF_TOPONODE_DRAIN",
    "MF_TOPONODE_D3DAWARE",
    "MF_TOPOLOGY_RESOLUTION_STATUS",
    "MF_TOPONODE_ERRORCODE",
    "MF_TOPONODE_CONNECT_METHOD",
    "MF_TOPONODE_LOCKED",
    "MF_TOPONODE_WORKQUEUE_ID",
    "MF_TOPONODE_WORKQUEUE_MMCSS_CLASS",
    "MF_TOPONODE_DECRYPTOR",
    "MF_TOPONODE_DISCARDABLE",
    "MF_TOPONODE_ERROR_MAJORTYPE",
    "MF_TOPONODE_ERROR_SUBTYPE",
    "MF_TOPONODE_WORKQUEUE_MMCSS_TASKID",
    "MF_TOPONODE_WORKQUEUE_MMCSS_PRIORITY",
    "MF_TOPONODE_WORKQUEUE_ITEM_PRIORITY",
    "MF_TOPONODE_MARKIN_HERE",
    "MF_TOPONODE_MARKOUT_HERE",
    "MF_TOPONODE_DECODER",
    "MF_TOPONODE_MEDIASTART",
    "MF_TOPONODE_MEDIASTOP",
    "MF_TOPONODE_SOURCE",
    "MF_TOPONODE_PRESENTATION_DESCRIPTOR",
    "MF_TOPONODE_STREAM_DESCRIPTOR",
    "MF_TOPONODE_SEQUENCE_ELEMENTID",
    "MF_TOPONODE_TRANSFORM_OBJECTID",
    "MF_TOPONODE_STREAMID",
    "MF_TOPONODE_NOSHUTDOWN_ON_REMOVE",
    "MF_TOPONODE_RATELESS",
    "MF_TOPONODE_DISABLE_PREROLL",
    "MF_TOPONODE_PRIMARYOUTPUT",
    "MF_PD_PMPHOST_CONTEXT",
    "MF_PD_APP_CONTEXT",
    "MF_PD_DURATION",
    "MF_PD_TOTAL_FILE_SIZE",
    "MF_PD_AUDIO_ENCODING_BITRATE",
    "MF_PD_VIDEO_ENCODING_BITRATE",
    "MF_PD_MIME_TYPE",
    "MF_PD_LAST_MODIFIED_TIME",
    "MF_PD_PLAYBACK_ELEMENT_ID",
    "MF_PD_PREFERRED_LANGUAGE",
    "MF_PD_PLAYBACK_BOUNDARY_TIME",
    "MF_PD_AUDIO_ISVARIABLEBITRATE",
    "MF_SD_LANGUAGE",
    "MF_SD_PROTECTED",
    "MF_SD_STREAM_NAME",
    "MF_SD_MUTUALLY_EXCLUSIVE",
    "MF_ACTIVATE_CUSTOM_VIDEO_MIXER_CLSID",
    "MF_ACTIVATE_CUSTOM_VIDEO_MIXER_ACTIVATE",
    "MF_ACTIVATE_CUSTOM_VIDEO_MIXER_FLAGS",
    "MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_CLSID",
    "MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_ACTIVATE",
    "MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_FLAGS",
    "MF_ACTIVATE_MFT_LOCKED",
    "MF_ACTIVATE_VIDEO_WINDOW",
    "MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS",
    "MF_AUDIO_RENDERER_ATTRIBUTE_SESSION_ID",
    "MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ID",
    "MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ROLE",
    "MF_AUDIO_RENDERER_ATTRIBUTE_STREAM_CATEGORY",
    "MFENABLETYPE_WMDRMV1_LicenseAcquisition",
    "MFENABLETYPE_WMDRMV7_LicenseAcquisition",
    "MFENABLETYPE_WMDRMV7_Individualization",
    "MFENABLETYPE_MF_UpdateRevocationInformation",
    "MFENABLETYPE_MF_UpdateUntrustedComponent",
    "MFENABLETYPE_MF_RebootRequired",
    "MF_METADATA_PROVIDER_SERVICE",
    "MF_PROPERTY_HANDLER_SERVICE",
    "MF_RATE_CONTROL_SERVICE",
    "MF_TIMECODE_SERVICE",
    "MR_POLICY_VOLUME_SERVICE",
    "MR_CAPTURE_POLICY_VOLUME_SERVICE",
    "MR_STREAM_VOLUME_SERVICE",
    "MR_AUDIO_POLICY_SERVICE",
    "MF_SAMPLEGRABBERSINK_SAMPLE_TIME_OFFSET",
    "MF_SAMPLEGRABBERSINK_IGNORE_CLOCK",
    "MF_QUALITY_SERVICES",
    "MF_WORKQUEUE_SERVICES",
    "MF_QUALITY_NOTIFY_PROCESSING_LATENCY",
    "MF_QUALITY_NOTIFY_SAMPLE_LAG",
    "MF_TIME_FORMAT_SEGMENT_OFFSET",
    "MF_SOURCE_PRESENTATION_PROVIDER_SERVICE",
    "MF_TOPONODE_ATTRIBUTE_EDITOR_SERVICE",
    "MFNETSOURCE_SSLCERTIFICATE_MANAGER",
    "MFNETSOURCE_RESOURCE_FILTER",
    "MFNET_SAVEJOB_SERVICE",
    "MFNETSOURCE_STATISTICS_SERVICE",
    "MFNETSOURCE_STATISTICS",
    "MFNETSOURCE_BUFFERINGTIME",
    "MFNETSOURCE_ACCELERATEDSTREAMINGDURATION",
    "MFNETSOURCE_MAXUDPACCELERATEDSTREAMINGDURATION",
    "MFNETSOURCE_MAXBUFFERTIMEMS",
    "MFNETSOURCE_CONNECTIONBANDWIDTH",
    "MFNETSOURCE_CACHEENABLED",
    "MFNETSOURCE_AUTORECONNECTLIMIT",
    "MFNETSOURCE_RESENDSENABLED",
    "MFNETSOURCE_THINNINGENABLED",
    "MFNETSOURCE_PROTOCOL",
    "MFNETSOURCE_TRANSPORT",
    "MFNETSOURCE_PREVIEWMODEENABLED",
    "MFNETSOURCE_CREDENTIAL_MANAGER",
    "MFNETSOURCE_PPBANDWIDTH",
    "MFNETSOURCE_AUTORECONNECTPROGRESS",
    "MFNETSOURCE_PROXYLOCATORFACTORY",
    "MFNETSOURCE_BROWSERUSERAGENT",
    "MFNETSOURCE_BROWSERWEBPAGE",
    "MFNETSOURCE_PLAYERVERSION",
    "MFNETSOURCE_PLAYERID",
    "MFNETSOURCE_HOSTEXE",
    "MFNETSOURCE_HOSTVERSION",
    "MFNETSOURCE_PLAYERUSERAGENT",
    "MFNETSOURCE_CLIENTGUID",
    "MFNETSOURCE_LOGURL",
    "MFNETSOURCE_ENABLE_UDP",
    "MFNETSOURCE_ENABLE_TCP",
    "MFNETSOURCE_ENABLE_MSB",
    "MFNETSOURCE_ENABLE_RTSP",
    "MFNETSOURCE_ENABLE_HTTP",
    "MFNETSOURCE_ENABLE_STREAMING",
    "MFNETSOURCE_ENABLE_DOWNLOAD",
    "MFNETSOURCE_ENABLE_PRIVATEMODE",
    "MFNETSOURCE_UDP_PORT_RANGE",
    "MFNETSOURCE_PROXYINFO",
    "MFNETSOURCE_DRMNET_LICENSE_REPRESENTATION",
    "MFNETSOURCE_PROXYSETTINGS",
    "MFNETSOURCE_PROXYHOSTNAME",
    "MFNETSOURCE_PROXYPORT",
    "MFNETSOURCE_PROXYEXCEPTIONLIST",
    "MFNETSOURCE_PROXYBYPASSFORLOCAL",
    "MFNETSOURCE_PROXYRERUNAUTODETECTION",
    "MFNETSOURCE_STREAM_LANGUAGE",
    "MFNETSOURCE_LOGPARAMS",
    "MFNETSOURCE_PEERMANAGER",
    "MFNETSOURCE_FRIENDLYNAME",
    "MF_BYTESTREAMHANDLER_ACCEPTS_SHARE_WRITE",
    "MF_BYTESTREAM_SERVICE",
    "MF_MEDIA_PROTECTION_MANAGER_PROPERTIES",
    "MFCONNECTOR_SPDIF",
    "MFCONNECTOR_UNKNOWN",
    "MFCONNECTOR_PCI",
    "MFCONNECTOR_PCIX",
    "MFCONNECTOR_PCI_Express",
    "MFCONNECTOR_AGP",
    "MFCONNECTOR_VGA",
    "MFCONNECTOR_SVIDEO",
    "MFCONNECTOR_COMPOSITE",
    "MFCONNECTOR_COMPONENT",
    "MFCONNECTOR_DVI",
    "MFCONNECTOR_HDMI",
    "MFCONNECTOR_LVDS",
    "MFCONNECTOR_D_JPN",
    "MFCONNECTOR_SDI",
    "MFCONNECTOR_DISPLAYPORT_EXTERNAL",
    "MFCONNECTOR_DISPLAYPORT_EMBEDDED",
    "MFCONNECTOR_UDI_EXTERNAL",
    "MFCONNECTOR_UDI_EMBEDDED",
    "MFCONNECTOR_MIRACAST",
    "MFCONNECTOR_TRANSPORT_AGNOSTIC_DIGITAL_MODE_A",
    "MFCONNECTOR_TRANSPORT_AGNOSTIC_DIGITAL_MODE_B",
    "MF_POLICY_ID",
    "MFPROTECTION_DISABLE",
    "MFPROTECTION_CONSTRICTVIDEO",
    "MFPROTECTION_CONSTRICTVIDEO_NOOPM",
    "MFPROTECTION_CONSTRICTAUDIO",
    "MFPROTECTION_TRUSTEDAUDIODRIVERS",
    "MFPROTECTION_HDCP",
    "MFPROTECTION_CGMSA",
    "MFPROTECTION_ACP",
    "MFPROTECTION_WMDRMOTA",
    "MFPROTECTION_FFT",
    "MFPROTECTION_PROTECTED_SURFACE",
    "MFPROTECTION_DISABLE_SCREEN_SCRAPE",
    "MFPROTECTION_VIDEO_FRAMES",
    "MFPROTECTION_HARDWARE",
    "MFPROTECTION_HDCP_WITH_TYPE_ENFORCEMENT",
    "MFPROTECTIONATTRIBUTE_BEST_EFFORT",
    "MFPROTECTIONATTRIBUTE_FAIL_OVER",
    "MFPROTECTION_GRAPHICS_TRANSFER_AES_ENCRYPTION",
    "MFPROTECTIONATTRIBUTE_CONSTRICTVIDEO_IMAGESIZE",
    "MFPROTECTIONATTRIBUTE_HDCP_SRM",
    "MF_SampleProtectionSalt",
    "MF_REMOTE_PROXY",
    "CLSID_CreateMediaExtensionObject",
    "MF_SAMI_SERVICE",
    "MF_PD_SAMI_STYLELIST",
    "MF_SD_SAMI_LANGUAGE",
    "MF_TRANSCODE_CONTAINERTYPE",
    "MFTranscodeContainerType_ASF",
    "MFTranscodeContainerType_MPEG4",
    "MFTranscodeContainerType_MP3",
    "MFTranscodeContainerType_FLAC",
    "MFTranscodeContainerType_3GP",
    "MFTranscodeContainerType_AC3",
    "MFTranscodeContainerType_ADTS",
    "MFTranscodeContainerType_MPEG2",
    "MFTranscodeContainerType_WAVE",
    "MFTranscodeContainerType_AVI",
    "MFTranscodeContainerType_FMPEG4",
    "MFTranscodeContainerType_AMR",
    "MF_TRANSCODE_SKIP_METADATA_TRANSFER",
    "MF_TRANSCODE_TOPOLOGYMODE",
    "MF_TRANSCODE_ADJUST_PROFILE",
    "MF_TRANSCODE_ENCODINGPROFILE",
    "MF_TRANSCODE_QUALITYVSSPEED",
    "MF_TRANSCODE_DONOT_INSERT_ENCODER",
    "MF_VIDEO_PROCESSOR_ALGORITHM",
    "MF_XVP_DISABLE_FRC",
    "MF_XVP_CALLER_ALLOCATES_OUTPUT",
    "MF_LOCAL_MFT_REGISTRATION_SERVICE",
    "MF_WRAPPED_SAMPLE_SERVICE",
    "MF_WRAPPED_OBJECT",
    "CLSID_HttpSchemePlugin",
    "CLSID_UrlmonSchemePlugin",
    "CLSID_NetSchemePlugin",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_HW_SOURCE",
    "MF_DEVSOURCE_ATTRIBUTE_FRIENDLY_NAME",
    "MF_DEVSOURCE_ATTRIBUTE_MEDIA_TYPE",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_CATEGORY",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_SYMBOLIC_LINK",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_SYMBOLIC_LINK",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_MAX_BUFFERS",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ENDPOINT_ID",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ROLE",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_PROVIDER_DEVICE_ID",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_XADDRESS",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_STREAM_URL",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_USERNAME",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_PASSWORD",
    "CLSID_FrameServerNetworkCameraSource",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_GUID",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_GUID",
    "MF_DEVICESTREAM_IMAGE_STREAM",
    "MF_DEVICESTREAM_INDEPENDENT_IMAGE_STREAM",
    "MF_DEVICESTREAM_STREAM_ID",
    "MF_DEVICESTREAM_STREAM_CATEGORY",
    "MF_DEVICESTREAM_FRAMESERVER_SHARED",
    "MF_DEVICESTREAM_TRANSFORM_STREAM_ID",
    "MF_DEVICESTREAM_EXTENSION_PLUGIN_CLSID",
    "MF_DEVICEMFT_EXTENSION_PLUGIN_CLSID",
    "MF_DEVICESTREAM_EXTENSION_PLUGIN_CONNECTION_POINT",
    "MF_DEVICESTREAM_TAKEPHOTO_TRIGGER",
    "MF_DEVICESTREAM_MAX_FRAME_BUFFERS",
    "MF_DEVICEMFT_CONNECTED_FILTER_KSCONTROL",
    "MF_DEVICEMFT_CONNECTED_PIN_KSCONTROL",
    "MF_DEVICE_THERMAL_STATE_CHANGED",
    "MFSampleExtension_DeviceTimestamp",
    "MFSampleExtension_Spatial_CameraViewTransform",
    "MFSampleExtension_Spatial_CameraCoordinateSystem",
    "MFSampleExtension_Spatial_CameraProjectionTransform",
    "MF_MEDIASOURCE_SERVICE",
    "MF_ACCESS_CONTROLLED_MEDIASOURCE_SERVICE",
    "MF_CONTENT_DECRYPTOR_SERVICE",
    "MF_CONTENT_PROTECTION_DEVICE_SERVICE",
    "MF_SD_AUDIO_ENCODER_DELAY",
    "MF_SD_AUDIO_ENCODER_PADDING",
    "CLSID_MSH264DecoderMFT",
    "CLSID_MSH264EncoderMFT",
    "CLSID_MSDDPlusDecMFT",
    "CLSID_MP3DecMediaObject",
    "CLSID_MSAACDecMFT",
    "CLSID_MSH265DecoderMFT",
    "CLSID_WMVDecoderMFT",
    "CLSID_WMADecMediaObject",
    "CLSID_MSMPEGAudDecMFT",
    "CLSID_MSMPEGDecoderMFT",
    "CLSID_AudioResamplerMediaObject",
    "CLSID_MSVPxDecoder",
    "CLSID_MSOpusDecoder",
    "CLSID_VideoProcessorMFT",
    "MFNETSOURCE_CROSS_ORIGIN_SUPPORT",
    "MFNETSOURCE_HTTP_DOWNLOAD_SESSION_PROVIDER",
    "MF_SD_MEDIASOURCE_STATUS",
    "MF_SD_VIDEO_SPHERICAL",
    "MF_SD_VIDEO_SPHERICAL_FORMAT",
    "MF_SD_VIDEO_SPHERICAL_INITIAL_VIEWDIRECTION",
    "MF_MEDIASOURCE_EXPOSE_ALL_STREAMS",
    "MF_ST_MEDIASOURCE_COLLECTION",
    "MF_DEVICESTREAM_FILTER_KSCONTROL",
    "MF_DEVICESTREAM_PIN_KSCONTROL",
    "MF_DEVICESTREAM_SOURCE_ATTRIBUTES",
    "MF_DEVICESTREAM_FRAMESERVER_HIDDEN",
    "MF_STF_VERSION_INFO",
    "MF_STF_VERSION_DATE",
    "MF_DEVICESTREAM_REQUIRED_CAPABILITIES",
    "MF_DEVICESTREAM_REQUIRED_SDDL",
    "MF_DEVICEMFT_SENSORPROFILE_COLLECTION",
    "MF_DEVICESTREAM_SENSORSTREAM_ID",
    "MF_PD_ASF_FILEPROPERTIES_FILE_ID",
    "MF_PD_ASF_FILEPROPERTIES_CREATION_TIME",
    "MF_PD_ASF_FILEPROPERTIES_PACKETS",
    "MF_PD_ASF_FILEPROPERTIES_PLAY_DURATION",
    "MF_PD_ASF_FILEPROPERTIES_SEND_DURATION",
    "MF_PD_ASF_FILEPROPERTIES_PREROLL",
    "MF_PD_ASF_FILEPROPERTIES_FLAGS",
    "MF_PD_ASF_FILEPROPERTIES_MIN_PACKET_SIZE",
    "MF_PD_ASF_FILEPROPERTIES_MAX_PACKET_SIZE",
    "MF_PD_ASF_FILEPROPERTIES_MAX_BITRATE",
    "CLSID_WMDRMSystemID",
    "MF_PD_ASF_CONTENTENCRYPTION_TYPE",
    "MF_PD_ASF_CONTENTENCRYPTION_KEYID",
    "MF_PD_ASF_CONTENTENCRYPTION_SECRET_DATA",
    "MF_PD_ASF_CONTENTENCRYPTION_LICENSE_URL",
    "MF_PD_ASF_CONTENTENCRYPTIONEX_ENCRYPTION_DATA",
    "MF_PD_ASF_LANGLIST",
    "MF_PD_ASF_LANGLIST_LEGACYORDER",
    "MF_PD_ASF_MARKER",
    "MF_PD_ASF_SCRIPT",
    "MF_PD_ASF_CODECLIST",
    "MF_PD_ASF_METADATA_IS_VBR",
    "MF_PD_ASF_METADATA_V8_VBRPEAK",
    "MF_PD_ASF_METADATA_V8_BUFFERAVERAGE",
    "MF_PD_ASF_METADATA_LEAKY_BUCKET_PAIRS",
    "MF_PD_ASF_DATA_START_OFFSET",
    "MF_PD_ASF_DATA_LENGTH",
    "MF_SD_ASF_EXTSTRMPROP_LANGUAGE_ID_INDEX",
    "MF_SD_ASF_EXTSTRMPROP_AVG_DATA_BITRATE",
    "MF_SD_ASF_EXTSTRMPROP_AVG_BUFFERSIZE",
    "MF_SD_ASF_EXTSTRMPROP_MAX_DATA_BITRATE",
    "MF_SD_ASF_EXTSTRMPROP_MAX_BUFFERSIZE",
    "MF_SD_ASF_STREAMBITRATES_BITRATE",
    "MF_SD_ASF_METADATA_DEVICE_CONFORMANCE_TEMPLATE",
    "MF_PD_ASF_INFO_HAS_AUDIO",
    "MF_PD_ASF_INFO_HAS_VIDEO",
    "MF_PD_ASF_INFO_HAS_NON_AUDIO_VIDEO",
    "MF_ASFPROFILE_MINPACKETSIZE",
    "MF_ASFPROFILE_MAXPACKETSIZE",
    "MF_ASFSTREAMCONFIG_LEAKYBUCKET1",
    "MF_ASFSTREAMCONFIG_LEAKYBUCKET2",
    "MFASFSampleExtension_SampleDuration",
    "MFASFSampleExtension_OutputCleanPoint",
    "MFASFSampleExtension_SMPTE",
    "MFASFSampleExtension_FileName",
    "MFASFSampleExtension_ContentType",
    "MFASFSampleExtension_PixelAspectRatio",
    "MFASFSampleExtension_Encryption_SampleID",
    "MFASFSampleExtension_Encryption_KeyID",
    "MFASFMutexType_Language",
    "MFASFMutexType_Bitrate",
    "MFASFMutexType_Presentation",
    "MFASFMutexType_Unknown",
    "MFASFSPLITTER_PACKET_BOUNDARY",
    "MFASFINDEXER_TYPE_TIMECODE",
    "MF_CAPTURE_ENGINE_INITIALIZED",
    "MF_CAPTURE_ENGINE_PREVIEW_STARTED",
    "MF_CAPTURE_ENGINE_PREVIEW_STOPPED",
    "MF_CAPTURE_ENGINE_RECORD_STARTED",
    "MF_CAPTURE_ENGINE_RECORD_STOPPED",
    "MF_CAPTURE_ENGINE_PHOTO_TAKEN",
    "MF_CAPTURE_SOURCE_CURRENT_DEVICE_MEDIA_TYPE_SET",
    "MF_CAPTURE_ENGINE_ERROR",
    "MF_CAPTURE_ENGINE_EFFECT_ADDED",
    "MF_CAPTURE_ENGINE_EFFECT_REMOVED",
    "MF_CAPTURE_ENGINE_ALL_EFFECTS_REMOVED",
    "MF_CAPTURE_SINK_PREPARED",
    "MF_CAPTURE_ENGINE_OUTPUT_MEDIA_TYPE_SET",
    "MF_CAPTURE_ENGINE_CAMERA_STREAM_BLOCKED",
    "MF_CAPTURE_ENGINE_CAMERA_STREAM_UNBLOCKED",
    "MF_CAPTURE_ENGINE_D3D_MANAGER",
    "MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_UNPROCESSED_SAMPLES",
    "MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_UNPROCESSED_SAMPLES",
    "MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_PROCESSED_SAMPLES",
    "MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_PROCESSED_SAMPLES",
    "MF_CAPTURE_ENGINE_USE_AUDIO_DEVICE_ONLY",
    "MF_CAPTURE_ENGINE_USE_VIDEO_DEVICE_ONLY",
    "MF_CAPTURE_ENGINE_DISABLE_HARDWARE_TRANSFORMS",
    "MF_CAPTURE_ENGINE_DISABLE_DXVA",
    "MF_CAPTURE_ENGINE_MEDIASOURCE_CONFIG",
    "MF_CAPTURE_ENGINE_DECODER_MFT_FIELDOFUSE_UNLOCK_Attribute",
    "MF_CAPTURE_ENGINE_ENCODER_MFT_FIELDOFUSE_UNLOCK_Attribute",
    "MF_CAPTURE_ENGINE_ENABLE_CAMERA_STREAMSTATE_NOTIFICATION",
    "MF_CAPTURE_ENGINE_MEDIA_CATEGORY",
    "MF_CAPTURE_ENGINE_AUDIO_PROCESSING",
    "MF_CAPTURE_ENGINE_EVENT_GENERATOR_GUID",
    "MF_CAPTURE_ENGINE_EVENT_STREAM_INDEX",
    "MF_CAPTURE_ENGINE_SELECTEDCAMERAPROFILE",
    "MF_CAPTURE_ENGINE_SELECTEDCAMERAPROFILE_INDEX",
    "CLSID_MFCaptureEngine",
    "CLSID_MFCaptureEngineClassFactory",
    "MFSampleExtension_DeviceReferenceSystemTime",
    "MF_D3D12_SYNCHRONIZATION_OBJECT",
    "MF_MT_D3D_RESOURCE_VERSION",
    "MF_MT_D3D12_CPU_READBACK",
    "MF_MT_D3D12_TEXTURE_LAYOUT",
    "MF_MT_D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET",
    "MF_MT_D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL",
    "MF_MT_D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS",
    "MF_MT_D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE",
    "MF_MT_D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER",
    "MF_MT_D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS",
    "MF_SA_D3D12_HEAP_FLAGS",
    "MF_SA_D3D12_HEAP_TYPE",
    "MF_SA_D3D12_CLEAR_VALUE",
    "MF_MSE_CALLBACK",
    "MF_MSE_ACTIVELIST_CALLBACK",
    "MF_MSE_BUFFERLIST_CALLBACK",
    "MF_MSE_VP9_SUPPORT",
    "MF_MSE_OPUS_SUPPORT",
    "MF_MEDIA_ENGINE_NEEDKEY_CALLBACK",
    "MF_MEDIA_ENGINE_CALLBACK",
    "MF_MEDIA_ENGINE_DXGI_MANAGER",
    "MF_MEDIA_ENGINE_EXTENSION",
    "MF_MEDIA_ENGINE_PLAYBACK_HWND",
    "MF_MEDIA_ENGINE_OPM_HWND",
    "MF_MEDIA_ENGINE_PLAYBACK_VISUAL",
    "MF_MEDIA_ENGINE_COREWINDOW",
    "MF_MEDIA_ENGINE_VIDEO_OUTPUT_FORMAT",
    "MF_MEDIA_ENGINE_CONTENT_PROTECTION_FLAGS",
    "MF_MEDIA_ENGINE_CONTENT_PROTECTION_MANAGER",
    "MF_MEDIA_ENGINE_AUDIO_ENDPOINT_ROLE",
    "MF_MEDIA_ENGINE_AUDIO_CATEGORY",
    "MF_MEDIA_ENGINE_STREAM_CONTAINS_ALPHA_CHANNEL",
    "MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE",
    "MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE9",
    "MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE10",
    "MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE11",
    "MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE_EDGE",
    "MF_MEDIA_ENGINE_COMPATIBILITY_MODE",
    "MF_MEDIA_ENGINE_COMPATIBILITY_MODE_WWA_EDGE",
    "MF_MEDIA_ENGINE_COMPATIBILITY_MODE_WIN10",
    "MF_MEDIA_ENGINE_SOURCE_RESOLVER_CONFIG_STORE",
    "MF_MEDIA_ENGINE_TRACK_ID",
    "MF_MEDIA_ENGINE_TELEMETRY_APPLICATION_ID",
    "MF_MEDIA_ENGINE_SYNCHRONOUS_CLOSE",
    "MF_MEDIA_ENGINE_MEDIA_PLAYER_MODE",
    "CLSID_MFMediaEngineClassFactory",
    "MF_MEDIA_ENGINE_TIMEDTEXT",
    "MF_MEDIA_ENGINE_CONTINUE_ON_CODEC_ERROR",
    "MF_MEDIA_ENGINE_EME_CALLBACK",
    "CLSID_MPEG2DLNASink",
    "MF_MP2DLNA_USE_MMCSS",
    "MF_MP2DLNA_VIDEO_BIT_RATE",
    "MF_MP2DLNA_AUDIO_BIT_RATE",
    "MF_MP2DLNA_ENCODE_QUALITY",
    "MF_MP2DLNA_STATISTICS",
    "CLSID_MFReadWriteClassFactory",
    "CLSID_MFSourceReader",
    "MF_SOURCE_READER_ASYNC_CALLBACK",
    "MF_SOURCE_READER_D3D_MANAGER",
    "MF_SOURCE_READER_DISABLE_DXVA",
    "MF_SOURCE_READER_MEDIASOURCE_CONFIG",
    "MF_SOURCE_READER_MEDIASOURCE_CHARACTERISTICS",
    "MF_SOURCE_READER_ENABLE_VIDEO_PROCESSING",
    "MF_SOURCE_READER_ENABLE_ADVANCED_VIDEO_PROCESSING",
    "MF_SOURCE_READER_DISABLE_CAMERA_PLUGINS",
    "MF_SOURCE_READER_DISCONNECT_MEDIASOURCE_ON_SHUTDOWN",
    "MF_SOURCE_READER_ENABLE_TRANSCODE_ONLY_TRANSFORMS",
    "MF_SOURCE_READER_D3D11_BIND_FLAGS",
    "CLSID_MFSinkWriter",
    "MF_SINK_WRITER_ASYNC_CALLBACK",
    "MF_SINK_WRITER_DISABLE_THROTTLING",
    "MF_SINK_WRITER_D3D_MANAGER",
    "MF_SINK_WRITER_ENCODER_CONFIG",
    "MF_READWRITE_DISABLE_CONVERTERS",
    "MF_READWRITE_ENABLE_HARDWARE_TRANSFORMS",
    "MF_READWRITE_MMCSS_CLASS",
    "MF_READWRITE_MMCSS_PRIORITY",
    "MF_READWRITE_MMCSS_CLASS_AUDIO",
    "MF_READWRITE_MMCSS_PRIORITY_AUDIO",
    "MF_READWRITE_D3D_OPTIONAL",
    "MF_MEDIASINK_AUTOFINALIZE_SUPPORTED",
    "MF_MEDIASINK_ENABLE_AUTOFINALIZE",
    "MF_READWRITE_ENABLE_AUTOFINALIZE",
    "MFP_POSITIONTYPE_100NS",
    "MF_MEDIA_SHARING_ENGINE_DEVICE_NAME",
    "MF_MEDIA_SHARING_ENGINE_DEVICE",
    "CLSID_MFMediaSharingEngineClassFactory",
    "CLSID_MFImageSharingEngineClassFactory",
    "CLSID_PlayToSourceClassFactory",
    "GUID_PlayToService",
    "GUID_NativeDeviceService",
    "MF_CONTENTDECRYPTIONMODULE_SERVICE",
    "MF_VIRTUALCAMERA_CONFIGURATION_APP_PACKAGE_FAMILY_NAME",
    "MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_INITIALIZE",
    "MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_START",
    "MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_STOP",
    "MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_UNINITIALIZE",
    "MF_FRAMESERVER_VCAMEVENT_EXTENDED_PIPELINE_SHUTDOWN",
    "MF_FRAMESERVER_VCAMEVENT_EXTENDED_CUSTOM_EVENT",
    "MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS",
    "MF_EVENT_FLAG_NONE",
    "MF_EVENT_FLAG_NO_WAIT",
    "MF_Plugin_Type",
    "MF_Plugin_Type_MFT",
    "MF_Plugin_Type_MediaSource",
    "MF_Plugin_Type_MFT_MatchOutputType",
    "MF_Plugin_Type_Other",
    "CodecAPIEventData",
    "ICodecAPI",
    "D3DOVERLAYCAPS",
    "D3DCONTENTPROTECTIONCAPS",
    "IDirect3D9ExOverlayExtension",
    "IDirect3DDevice9Video",
    "IDirect3DAuthenticatedChannel9",
    "IDirect3DCryptoSession9",
    "D3D12_VIDEO_FIELD_TYPE",
    "D3D12_VIDEO_FIELD_TYPE_NONE",
    "D3D12_VIDEO_FIELD_TYPE_INTERLACED_TOP_FIELD_FIRST",
    "D3D12_VIDEO_FIELD_TYPE_INTERLACED_BOTTOM_FIELD_FIRST",
    "D3D12_VIDEO_FRAME_STEREO_FORMAT",
    "D3D12_VIDEO_FRAME_STEREO_FORMAT_NONE",
    "D3D12_VIDEO_FRAME_STEREO_FORMAT_MONO",
    "D3D12_VIDEO_FRAME_STEREO_FORMAT_HORIZONTAL",
    "D3D12_VIDEO_FRAME_STEREO_FORMAT_VERTICAL",
    "D3D12_VIDEO_FRAME_STEREO_FORMAT_SEPARATE",
    "D3D12_VIDEO_FORMAT",
    "D3D12_VIDEO_SAMPLE",
    "D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE",
    "D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_NONE",
    "D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_FIELD_BASED",
    "D3D12_FEATURE_VIDEO",
    "D3D12_FEATURE_VIDEO_DECODE_SUPPORT",
    "D3D12_FEATURE_VIDEO_DECODE_PROFILES",
    "D3D12_FEATURE_VIDEO_DECODE_FORMATS",
    "D3D12_FEATURE_VIDEO_DECODE_CONVERSION_SUPPORT",
    "D3D12_FEATURE_VIDEO_PROCESS_SUPPORT",
    "D3D12_FEATURE_VIDEO_PROCESS_MAX_INPUT_STREAMS",
    "D3D12_FEATURE_VIDEO_PROCESS_REFERENCE_INFO",
    "D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE",
    "D3D12_FEATURE_VIDEO_PROCESSOR_SIZE",
    "D3D12_FEATURE_VIDEO_DECODE_PROFILE_COUNT",
    "D3D12_FEATURE_VIDEO_DECODE_FORMAT_COUNT",
    "D3D12_FEATURE_VIDEO_ARCHITECTURE",
    "D3D12_FEATURE_VIDEO_DECODE_HISTOGRAM",
    "D3D12_FEATURE_VIDEO_FEATURE_AREA_SUPPORT",
    "D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR",
    "D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_SIZE",
    "D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_COUNT",
    "D3D12_FEATURE_VIDEO_EXTENSION_COMMANDS",
    "D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT",
    "D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETERS",
    "D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SUPPORT",
    "D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SIZE",
    "D3D12_FEATURE_VIDEO_DECODE_PROTECTED_RESOURCES",
    "D3D12_FEATURE_VIDEO_PROCESS_PROTECTED_RESOURCES",
    "D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES",
    "D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE1",
    "D3D12_FEATURE_VIDEO_PROCESSOR_SIZE1",
    "D3D12_BITSTREAM_ENCRYPTION_TYPE",
    "D3D12_BITSTREAM_ENCRYPTION_TYPE_NONE",
    "D3D12_VIDEO_DECODE_CONFIGURATION",
    "D3D12_VIDEO_DECODER_DESC",
    "D3D12_VIDEO_DECODER_HEAP_DESC",
    "D3D12_VIDEO_SIZE_RANGE",
    "D3D12_VIDEO_PROCESS_FILTER",
    "D3D12_VIDEO_PROCESS_FILTER_BRIGHTNESS",
    "D3D12_VIDEO_PROCESS_FILTER_CONTRAST",
    "D3D12_VIDEO_PROCESS_FILTER_HUE",
    "D3D12_VIDEO_PROCESS_FILTER_SATURATION",
    "D3D12_VIDEO_PROCESS_FILTER_NOISE_REDUCTION",
    "D3D12_VIDEO_PROCESS_FILTER_EDGE_ENHANCEMENT",
    "D3D12_VIDEO_PROCESS_FILTER_ANAMORPHIC_SCALING",
    "D3D12_VIDEO_PROCESS_FILTER_STEREO_ADJUSTMENT",
    "D3D12_VIDEO_PROCESS_FILTER_FLAGS",
    "D3D12_VIDEO_PROCESS_FILTER_FLAG_NONE",
    "D3D12_VIDEO_PROCESS_FILTER_FLAG_BRIGHTNESS",
    "D3D12_VIDEO_PROCESS_FILTER_FLAG_CONTRAST",
    "D3D12_VIDEO_PROCESS_FILTER_FLAG_HUE",
    "D3D12_VIDEO_PROCESS_FILTER_FLAG_SATURATION",
    "D3D12_VIDEO_PROCESS_FILTER_FLAG_NOISE_REDUCTION",
    "D3D12_VIDEO_PROCESS_FILTER_FLAG_EDGE_ENHANCEMENT",
    "D3D12_VIDEO_PROCESS_FILTER_FLAG_ANAMORPHIC_SCALING",
    "D3D12_VIDEO_PROCESS_FILTER_FLAG_STEREO_ADJUSTMENT",
    "D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS",
    "D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_NONE",
    "D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_BOB",
    "D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_CUSTOM",
    "D3D12_VIDEO_PROCESS_ALPHA_BLENDING",
    "D3D12_VIDEO_PROCESS_LUMA_KEY",
    "D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC",
    "D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE",
    "D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_OPAQUE",
    "D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_BACKGROUND",
    "D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_DESTINATION",
    "D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_SOURCE_STREAM",
    "D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC",
    "ID3D12VideoDecoderHeap",
    "ID3D12VideoDevice",
    "ID3D12VideoDecoder",
    "D3D12_VIDEO_DECODE_TIER",
    "D3D12_VIDEO_DECODE_TIER_NOT_SUPPORTED",
    "D3D12_VIDEO_DECODE_TIER_1",
    "D3D12_VIDEO_DECODE_TIER_2",
    "D3D12_VIDEO_DECODE_TIER_3",
    "D3D12_VIDEO_DECODE_SUPPORT_FLAGS",
    "D3D12_VIDEO_DECODE_SUPPORT_FLAG_NONE",
    "D3D12_VIDEO_DECODE_SUPPORT_FLAG_SUPPORTED",
    "D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS",
    "D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_NONE",
    "D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_HEIGHT_ALIGNMENT_MULTIPLE_32_REQUIRED",
    "D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_POST_PROCESSING_SUPPORTED",
    "D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_REFERENCE_ONLY_ALLOCATIONS_REQUIRED",
    "D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_ALLOW_RESOLUTION_CHANGE_ON_NON_KEY_FRAME",
    "D3D12_VIDEO_DECODE_STATUS",
    "D3D12_VIDEO_DECODE_STATUS_OK",
    "D3D12_VIDEO_DECODE_STATUS_CONTINUE",
    "D3D12_VIDEO_DECODE_STATUS_CONTINUE_SKIP_DISPLAY",
    "D3D12_VIDEO_DECODE_STATUS_RESTART",
    "D3D12_VIDEO_DECODE_STATUS_RATE_EXCEEDED",
    "D3D12_VIDEO_DECODE_ARGUMENT_TYPE",
    "D3D12_VIDEO_DECODE_ARGUMENT_TYPE_PICTURE_PARAMETERS",
    "D3D12_VIDEO_DECODE_ARGUMENT_TYPE_INVERSE_QUANTIZATION_MATRIX",
    "D3D12_VIDEO_DECODE_ARGUMENT_TYPE_SLICE_CONTROL",
    "D3D12_VIDEO_DECODE_ARGUMENT_TYPE_MAX_VALID",
    "D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT",
    "D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT",
    "D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES",
    "D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT",
    "D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS",
    "D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_Y",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_U",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_V",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_R",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_G",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_B",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_A",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_NONE",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_Y",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_U",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_V",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_R",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_G",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_B",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_A",
    "D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM",
    "D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS",
    "D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_NONE",
    "D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_SUPPORTED",
    "D3D12_VIDEO_SCALE_SUPPORT_FLAGS",
    "D3D12_VIDEO_SCALE_SUPPORT_FLAG_NONE",
    "D3D12_VIDEO_SCALE_SUPPORT_FLAG_POW2_ONLY",
    "D3D12_VIDEO_SCALE_SUPPORT_FLAG_EVEN_DIMENSIONS_ONLY",
    "D3D12_VIDEO_SCALE_SUPPORT",
    "D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT",
    "D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE",
    "D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE",
    "D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS",
    "D3D12_VIDEO_DECODE_FRAME_ARGUMENT",
    "D3D12_VIDEO_DECODE_REFERENCE_FRAMES",
    "D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM",
    "D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS",
    "D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS",
    "D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS",
    "ID3D12VideoProcessor",
    "D3D12_VIDEO_PROCESS_FEATURE_FLAGS",
    "D3D12_VIDEO_PROCESS_FEATURE_FLAG_NONE",
    "D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_FILL",
    "D3D12_VIDEO_PROCESS_FEATURE_FLAG_LUMA_KEY",
    "D3D12_VIDEO_PROCESS_FEATURE_FLAG_STEREO",
    "D3D12_VIDEO_PROCESS_FEATURE_FLAG_ROTATION",
    "D3D12_VIDEO_PROCESS_FEATURE_FLAG_FLIP",
    "D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_BLENDING",
    "D3D12_VIDEO_PROCESS_FEATURE_FLAG_PIXEL_ASPECT_RATIO",
    "D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS",
    "D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_NONE",
    "D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DENOISE",
    "D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DERINGING",
    "D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_EDGE_ENHANCEMENT",
    "D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_COLOR_CORRECTION",
    "D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_FLESH_TONE_MAPPING",
    "D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_IMAGE_STABILIZATION",
    "D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_SUPER_RESOLUTION",
    "D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_ANAMORPHIC_SCALING",
    "D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_CUSTOM",
    "D3D12_VIDEO_PROCESS_ORIENTATION",
    "D3D12_VIDEO_PROCESS_ORIENTATION_DEFAULT",
    "D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_HORIZONTAL",
    "D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90",
    "D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90_FLIP_HORIZONTAL",
    "D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_180",
    "D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_VERTICAL",
    "D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270",
    "D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270_FLIP_HORIZONTAL",
    "D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS",
    "D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_NONE",
    "D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_DISCONTINUITY",
    "D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_REPEAT",
    "D3D12_VIDEO_PROCESS_FILTER_RANGE",
    "D3D12_VIDEO_PROCESS_SUPPORT_FLAGS",
    "D3D12_VIDEO_PROCESS_SUPPORT_FLAG_NONE",
    "D3D12_VIDEO_PROCESS_SUPPORT_FLAG_SUPPORTED",
    "D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT",
    "D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS",
    "D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO",
    "D3D12_VIDEO_PROCESS_REFERENCE_SET",
    "D3D12_VIDEO_PROCESS_TRANSFORM",
    "D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE",
    "D3D12_VIDEO_PROCESS_INPUT_STREAM",
    "D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS",
    "D3D12_VIDEO_PROCESS_OUTPUT_STREAM",
    "D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS",
    "ID3D12VideoDecodeCommandList",
    "ID3D12VideoProcessCommandList",
    "D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM",
    "D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1",
    "D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1",
    "ID3D12VideoDecodeCommandList1",
    "D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1",
    "ID3D12VideoProcessCommandList1",
    "D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE",
    "D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_8X8",
    "D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_16X16",
    "D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS",
    "D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_NONE",
    "D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_8X8",
    "D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_16X16",
    "D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION",
    "D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_QUARTER_PEL",
    "D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS",
    "D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_NONE",
    "D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_QUARTER_PEL",
    "D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT",
    "D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR",
    "D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE",
    "D3D12_VIDEO_MOTION_ESTIMATOR_DESC",
    "ID3D12VideoMotionEstimator",
    "D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC",
    "ID3D12VideoMotionVectorHeap",
    "ID3D12VideoDevice1",
    "D3D12_RESOURCE_COORDINATE",
    "D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT",
    "D3D12_VIDEO_MOTION_ESTIMATOR_INPUT",
    "D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT",
    "D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT",
    "ID3D12VideoEncodeCommandList",
    "D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS",
    "D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_NONE",
    "D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_SUPPORTED",
    "D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES",
    "D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES",
    "D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES",
    "D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1",
    "D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CREATION",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_INITIALIZATION",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_EXECUTION",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_INPUT",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_OUTPUT",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_INPUT",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_OUTPUT",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT8",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT16",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT32",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT64",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT8",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT16",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT32",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT64",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_FLOAT",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_DOUBLE",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_RESOURCE",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_NONE",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_READ",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_WRITE",
    "D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT",
    "D3D12_VIDEO_EXTENSION_COMMAND_INFO",
    "D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS",
    "D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO",
    "D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS",
    "D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT",
    "D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE",
    "D3D12_VIDEO_EXTENSION_COMMAND_DESC",
    "ID3D12VideoDecoder1",
    "ID3D12VideoDecoderHeap1",
    "ID3D12VideoProcessor1",
    "ID3D12VideoExtensionCommand",
    "ID3D12VideoDevice2",
    "ID3D12VideoDecodeCommandList2",
    "ID3D12VideoProcessCommandList2",
    "ID3D12VideoEncodeCommandList1",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_ABSOLUTE_QP_MAP",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CQP",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CBR",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_VBR",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_QVBR",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_DELTA_QP",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_FRAME_ANALYSIS",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_QP_RANGE",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_INITIAL_QP",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_MAX_FRAME_SIZE",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_VBV_SIZES",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL",
    "D3D12_VIDEO_ENCODER_CODEC",
    "D3D12_VIDEO_ENCODER_CODEC_H264",
    "D3D12_VIDEO_ENCODER_CODEC_HEVC",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC",
    "D3D12_VIDEO_ENCODER_PROFILE_H264",
    "D3D12_VIDEO_ENCODER_PROFILE_H264_MAIN",
    "D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH",
    "D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH_10",
    "D3D12_VIDEO_ENCODER_PROFILE_HEVC",
    "D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN",
    "D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN10",
    "D3D12_VIDEO_ENCODER_PROFILE_DESC",
    "D3D12_VIDEO_ENCODER_LEVELS_H264",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_1",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_1b",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_11",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_12",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_13",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_2",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_21",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_22",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_3",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_31",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_32",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_4",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_41",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_42",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_5",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_51",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_52",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_6",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_61",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_62",
    "D3D12_VIDEO_ENCODER_TIER_HEVC",
    "D3D12_VIDEO_ENCODER_TIER_HEVC_MAIN",
    "D3D12_VIDEO_ENCODER_TIER_HEVC_HIGH",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_1",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_2",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_21",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_3",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_31",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_4",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_41",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_5",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_51",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_52",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_6",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_61",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_62",
    "D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC",
    "D3D12_VIDEO_ENCODER_LEVEL_SETTING",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL",
    "D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC",
    "D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE",
    "D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE",
    "D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_NONE",
    "D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_ROW_BASED",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE",
    "D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE",
    "D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_FULL_FRAME",
    "D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_BYTES_PER_SUBREGION",
    "D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_SQUARE_UNITS_PER_SUBREGION_ROW_UNALIGNED",
    "D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_ROWS_PER_SUBREGION",
    "D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_SUBREGIONS_PER_FRAME",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE",
    "D3D12_VIDEO_ENCODER_HEAP_FLAGS",
    "D3D12_VIDEO_ENCODER_HEAP_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_HEAP_DESC",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CABAC_ENCODING_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_BFRAME_LTR_COMBINED_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_ADAPTIVE_8x8_TRANSFORM_ENCODING_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_SPATIAL_ENCODING_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_TEMPORAL_ENCODING_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_1_DISABLE_ALL_SLICE_BLOCK_EDGES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_2_DISABLE_SLICE_BOUNDARIES_BLOCKS",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_3_USE_TWO_STAGE_DEBLOCKING",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_4_DISABLE_CHROMA_BLOCK_EDGES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_1_DISABLE_ALL_SLICE_BLOCK_EDGES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_2_DISABLE_SLICE_BOUNDARIES_BLOCKS",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_3_USE_TWO_STAGE_DEBLOCKING",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_4_DISABLE_CHROMA_BLOCK_EDGES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_BFRAME_LTR_COMBINED_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_SAO_FILTER_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_REQUIRED",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_TRANSFORM_SKIP_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_DISABLING_LOOP_FILTER_ACROSS_SLICES_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_P_FRAMES_IMPLEMENTED_AS_LOW_DELAY_B_FRAMES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_8x8",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_16x16",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_32x32",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_64x64",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_4x4",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_8x8",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_16x16",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_32x32",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264",
    "D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC",
    "D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAGS",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_GENERAL_SUPPORT_OK",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_RECONFIGURATION_AVAILABLE",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RESOLUTION_RECONFIGURATION_AVAILABLE",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_VBV_SIZE_CONFIG_AVAILABLE",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_FRAME_ANALYSIS_AVAILABLE",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RECONSTRUCTED_FRAMES_REQUIRE_TEXTURE_ARRAYS",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_DELTA_QP_AVAILABLE",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SUBREGION_LAYOUT_RECONFIGURATION_AVAILABLE",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_ADJUSTABLE_QP_RANGE_AVAILABLE",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_INITIAL_QP_AVAILABLE",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_MAX_FRAME_SIZE_AVAILABLE",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SEQUENCE_GOP_RECONFIGURATION_AVAILABLE",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_MOTION_ESTIMATION_PRECISION_MODE_LIMIT_AVAILABLE",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_CONSTRAINED_INTRAPREDICTION",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_ADAPTIVE_8x8_TRANSFORM",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ENABLE_CABAC_ENCODING",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_DISABLED",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_TEMPORAL",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_SPATIAL",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_DISABLE_LOOP_FILTER_ACROSS_SLICES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_SAO_FILTER",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_LONG_TERM_REFERENCES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_ASYMETRIC_MOTION_PARTITION",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_TRANSFORM_SKIPPING",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_CONSTRAINED_INTRAPREDICTION",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION",
    "D3D12_VIDEO_ENCODER_INTRA_REFRESH",
    "D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE",
    "D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_MAXIMUM",
    "D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_FULL_PIXEL",
    "D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_HALF_PIXEL",
    "D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_QUARTER_PIXEL",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS",
    "D3D12_VIDEO_ENCODER_VALIDATION_FLAGS",
    "D3D12_VIDEO_ENCODER_VALIDATION_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_NOT_SUPPORTED",
    "D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INPUT_FORMAT_NOT_SUPPORTED",
    "D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_CONFIGURATION_NOT_SUPPORTED",
    "D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_MODE_NOT_SUPPORTED",
    "D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_CONFIGURATION_NOT_SUPPORTED",
    "D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INTRA_REFRESH_MODE_NOT_SUPPORTED",
    "D3D12_VIDEO_ENCODER_VALIDATION_FLAG_SUBREGION_LAYOUT_MODE_NOT_SUPPORTED",
    "D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RESOLUTION_NOT_SUPPORTED_IN_LIST",
    "D3D12_VIDEO_ENCODER_VALIDATION_FLAG_GOP_STRUCTURE_NOT_SUPPORTED",
    "D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264",
    "D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC",
    "D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS",
    "D3D12_VIDEO_ENCODER_FLAGS",
    "D3D12_VIDEO_ENCODER_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_DESC",
    "ID3D12VideoEncoder",
    "ID3D12VideoEncoderHeap",
    "ID3D12VideoDevice3",
    "D3D12_VIDEO_ENCODER_FRAME_TYPE_H264",
    "D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_I_FRAME",
    "D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_P_FRAME",
    "D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_B_FRAME",
    "D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_IDR_FRAME",
    "D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264",
    "D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC",
    "D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_I_FRAME",
    "D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_P_FRAME",
    "D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_B_FRAME",
    "D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_IDR_FRAME",
    "D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA",
    "D3D12_VIDEO_ENCODE_REFERENCE_FRAMES",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_USED_AS_REFERENCE_PICTURE",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC",
    "D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS",
    "D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RESOLUTION_CHANGE",
    "D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RATE_CONTROL_CHANGE",
    "D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_SUBREGION_LAYOUT_CHANGE",
    "D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_REQUEST_INTRA_REFRESH",
    "D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_GOP_SEQUENCE_CHANGE",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA",
    "D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC",
    "D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS",
    "D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM",
    "D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE",
    "D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA",
    "D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS",
    "D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_NO_ERROR",
    "D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_CODEC_PICTURE_CONTROL_NOT_SUPPORTED",
    "D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_SUBREGION_LAYOUT_CONFIGURATION_NOT_SUPPORTED",
    "D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_REFERENCE_PICTURES",
    "D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_RECONFIGURATION_REQUEST_NOT_SUPPORTED",
    "D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_METADATA_BUFFER_SOURCE",
    "D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS",
    "D3D12_VIDEO_ENCODER_OUTPUT_METADATA",
    "D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER",
    "D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS",
    "D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS",
    "D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS",
    "ID3D12VideoEncodeCommandList2",
    "CMpeg4DecMediaObject",
    "CMpeg43DecMediaObject",
    "CMpeg4sDecMediaObject",
    "CMpeg4sDecMFT",
    "CZuneM4S2DecMediaObject",
    "CMpeg4EncMediaObject",
    "CMpeg4sEncMediaObject",
    "CMSSCDecMediaObject",
    "CMSSCEncMediaObject",
    "CMSSCEncMediaObject2",
    "CWMADecMediaObject",
    "CWMAEncMediaObject",
    "CWMATransMediaObject",
    "CWMSPDecMediaObject",
    "CWMSPEncMediaObject",
    "CWMSPEncMediaObject2",
    "CWMTDecMediaObject",
    "CWMTEncMediaObject",
    "CWMVDecMediaObject",
    "CWMVEncMediaObject2",
    "CWMVXEncMediaObject",
    "CWMV9EncMediaObject",
    "CWVC1DecMediaObject",
    "CWVC1EncMediaObject",
    "CDeColorConvMediaObject",
    "CDVDecoderMediaObject",
    "CDVEncoderMediaObject",
    "CMpeg2DecMediaObject",
    "CPK_DS_MPEG2Decoder",
    "CAC3DecMediaObject",
    "CPK_DS_AC3Decoder",
    "CMP3DecMediaObject",
    "CResamplerMediaObject",
    "CResizerMediaObject",
    "CInterlaceMediaObject",
    "CWMAudioLFXAPO",
    "CWMAudioGFXAPO",
    "CWMAudioCAPXLFXAPO",
    "CWMAudioCAPXGFXAPO",
    "CWMAudioSpdTxDMO",
    "CWMAudioAEC",
    "CClusterDetectorDmo",
    "CColorControlDmo",
    "CColorConvertDMO",
    "CColorLegalizerDmo",
    "CFrameInterpDMO",
    "CFrameRateConvertDmo",
    "CResizerDMO",
    "CShotDetectorDmo",
    "CSmpteTransformsDmo",
    "CThumbnailGeneratorDmo",
    "CTocGeneratorDmo",
    "CMPEGAACDecMediaObject",
    "CNokiaAACDecMediaObject",
    "CVodafoneAACDecMediaObject",
    "CZuneAACCCDecMediaObject",
    "CNokiaAACCCDecMediaObject",
    "CVodafoneAACCCDecMediaObject",
    "CMPEG2EncoderDS",
    "CMPEG2EncoderVideoDS",
    "CMPEG2EncoderAudioDS",
    "CMPEG2AudDecoderDS",
    "CMPEG2VidDecoderDS",
    "CDTVAudDecoderDS",
    "CDTVVidDecoderDS",
    "CMSAC3Enc",
    "CMSH264DecoderMFT",
    "CMSH263EncoderMFT",
    "CMSH264EncoderMFT",
    "CMSH265EncoderMFT",
    "CMSVPXEncoderMFT",
    "CMSH264RemuxMFT",
    "CMSAACDecMFT",
    "AACMFTEncoder",
    "CMSDDPlusDecMFT",
    "CMPEG2VideoEncoderMFT",
    "CMPEG2AudioEncoderMFT",
    "CMSMPEGDecoderMFT",
    "CMSMPEGAudDecMFT",
    "CMSDolbyDigitalEncMFT",
    "MP3ACMCodecWrapper",
    "ALawCodecWrapper",
    "MULawCodecWrapper",
    "CMSVideoDSPMFT",
    "VorbisDecoderMFT",
    "CMSFLACDecMFT",
    "CMSFLACEncMFT",
    "MFFLACBytestreamHandler",
    "MFFLACSinkClassFactory",
    "CMSALACDecMFT",
    "CMSALACEncMFT",
    "CMSOpusDecMFT",
    "MSAMRNBDecoder",
    "MSAMRNBEncoder",
    "MFAMRNBByteStreamHandler",
    "MFAMRNBSinkClassFactory",
    "WMT_PROP_DATATYPE",
    "WMT_PROP_TYPE_DWORD",
    "WMT_PROP_TYPE_STRING",
    "WMT_PROP_TYPE_BINARY",
    "WMT_PROP_TYPE_BOOL",
    "WMT_PROP_TYPE_QWORD",
    "WMT_PROP_TYPE_WORD",
    "WMT_PROP_TYPE_GUID",
    "IWMValidate",
    "IValidateBinding",
    "IWMVideoDecoderHurryup",
    "IWMVideoForceKeyFrame",
    "IWMCodecStrings",
    "IWMCodecProps",
    "IWMCodecLeakyBucket",
    "IWMCodecOutputTimestamp",
    "IWMVideoDecoderReconBuffer",
    "IWMCodecPrivateData",
    "IWMSampleExtensionSupport",
    "IWMResamplerProps",
    "IWMResizerProps",
    "IWMColorLegalizerProps",
    "IWMInterlaceProps",
    "IWMFrameInterpProps",
    "IWMColorConvProps",
    "WMV_DYNAMIC_FLAGS",
    "WMV_DYNAMIC_BITRATE",
    "WMV_DYNAMIC_RESOLUTION",
    "WMV_DYNAMIC_COMPLEXITY",
    "MF_AUVRHP_ROOMMODEL",
    "VRHP_SMALLROOM",
    "VRHP_MEDIUMROOM",
    "VRHP_BIGROOM",
    "VRHP_CUSTUMIZEDROOM",
    "AEC_SYSTEM_MODE",
    "SINGLE_CHANNEL_AEC",
    "ADAPTIVE_ARRAY_ONLY",
    "OPTIBEAM_ARRAY_ONLY",
    "ADAPTIVE_ARRAY_AND_AEC",
    "OPTIBEAM_ARRAY_AND_AEC",
    "SINGLE_CHANNEL_NSAGC",
    "MODE_NOT_SET",
    "AecQualityMetrics_Struct",
    "AEC_VAD_MODE",
    "AEC_VAD_DISABLED",
    "AEC_VAD_NORMAL",
    "AEC_VAD_FOR_AGC",
    "AEC_VAD_FOR_SILENCE_SUPPRESSION",
    "AEC_INPUT_STREAM",
    "AEC_CAPTURE_STREAM",
    "AEC_REFERENCE_STREAM",
    "MIC_ARRAY_MODE",
    "MICARRAY_SINGLE_CHAN",
    "MICARRAY_SIMPLE_SUM",
    "MICARRAY_SINGLE_BEAM",
    "MICARRAY_FIXED_BEAM",
    "MICARRAY_EXTERN_BEAM",
    "MFVideoDSPMode",
    "MFVideoDSPMode_Passthrough",
    "MFVideoDSPMode_Stabilization",
    "TOC_DESCRIPTOR",
    "TOC_ENTRY_DESCRIPTOR",
    "TOC_POS_TYPE",
    "TOC_POS_INHEADER",
    "TOC_POS_TOPLEVELOBJECT",
    "ITocEntry",
    "ITocEntryList",
    "IToc",
    "ITocCollection",
    "ITocParser",
    "FILE_OPENMODE",
    "OPENMODE_FAIL_IF_NOT_EXIST",
    "OPENMODE_FAIL_IF_EXIST",
    "OPENMODE_RESET_IF_EXIST",
    "OPENMODE_APPEND_IF_EXIST",
    "OPENMODE_DELETE_IF_EXIST",
    "SEEK_ORIGIN",
    "_msoBegin",
    "_msoCurrent",
    "FILE_ACCESSMODE",
    "ACCESSMODE_READ",
    "ACCESSMODE_WRITE",
    "ACCESSMODE_READWRITE",
    "ACCESSMODE_WRITE_EXCLUSIVE",
    "IFileIo",
    "IFileClient",
    "IClusterDetector",
    "DXVA_AYUVsample2",
    "DXVA_BufferDescription",
    "DXVA_ConfigPictureDecode",
    "DXVA_PictureParameters",
    "DXVAUncompDataInfo",
    "DXVACompBufferInfo",
    "DXVABufferInfo",
    "DXVA_SampleFormat",
    "DXVA_SampleFormatMask",
    "DXVA_SampleUnknown",
    "DXVA_SamplePreviousFrame",
    "DXVA_SampleProgressiveFrame",
    "DXVA_SampleFieldInterleavedEvenFirst",
    "DXVA_SampleFieldInterleavedOddFirst",
    "DXVA_SampleFieldSingleEven",
    "DXVA_SampleFieldSingleOdd",
    "DXVA_SampleSubStream",
    "DXVA_VideoTransferFunction",
    "DXVA_VideoTransFuncShift",
    "DXVA_VideoTransFuncMask",
    "DXVA_VideoTransFunc_Unknown",
    "DXVA_VideoTransFunc_10",
    "DXVA_VideoTransFunc_18",
    "DXVA_VideoTransFunc_20",
    "DXVA_VideoTransFunc_22",
    "DXVA_VideoTransFunc_22_709",
    "DXVA_VideoTransFunc_22_240M",
    "DXVA_VideoTransFunc_22_8bit_sRGB",
    "DXVA_VideoTransFunc_28",
    "DXVA_VideoPrimaries",
    "DXVA_VideoPrimariesShift",
    "DXVA_VideoPrimariesMask",
    "DXVA_VideoPrimaries_Unknown",
    "DXVA_VideoPrimaries_reserved",
    "DXVA_VideoPrimaries_BT709",
    "DXVA_VideoPrimaries_BT470_2_SysM",
    "DXVA_VideoPrimaries_BT470_2_SysBG",
    "DXVA_VideoPrimaries_SMPTE170M",
    "DXVA_VideoPrimaries_SMPTE240M",
    "DXVA_VideoPrimaries_EBU3213",
    "DXVA_VideoPrimaries_SMPTE_C",
    "DXVA_VideoLighting",
    "DXVA_VideoLightingShift",
    "DXVA_VideoLightingMask",
    "DXVA_VideoLighting_Unknown",
    "DXVA_VideoLighting_bright",
    "DXVA_VideoLighting_office",
    "DXVA_VideoLighting_dim",
    "DXVA_VideoLighting_dark",
    "DXVA_VideoTransferMatrix",
    "DXVA_VideoTransferMatrixShift",
    "DXVA_VideoTransferMatrixMask",
    "DXVA_VideoTransferMatrix_Unknown",
    "DXVA_VideoTransferMatrix_BT709",
    "DXVA_VideoTransferMatrix_BT601",
    "DXVA_VideoTransferMatrix_SMPTE240M",
    "DXVA_NominalRange",
    "DXVA_NominalRangeShift",
    "DXVA_NominalRangeMask",
    "DXVA_NominalRange_Unknown",
    "DXVA_NominalRange_Normal",
    "DXVA_NominalRange_Wide",
    "DXVA_NominalRange_0_255",
    "DXVA_NominalRange_16_235",
    "DXVA_NominalRange_48_208",
    "DXVA_VideoChromaSubsampling",
    "DXVA_VideoChromaSubsamplingShift",
    "DXVA_VideoChromaSubsamplingMask",
    "DXVA_VideoChromaSubsampling_Unknown",
    "DXVA_VideoChromaSubsampling_ProgressiveChroma",
    "DXVA_VideoChromaSubsampling_Horizontally_Cosited",
    "DXVA_VideoChromaSubsampling_Vertically_Cosited",
    "DXVA_VideoChromaSubsampling_Vertically_AlignedChromaPlanes",
    "DXVA_VideoChromaSubsampling_MPEG2",
    "DXVA_VideoChromaSubsampling_MPEG1",
    "DXVA_VideoChromaSubsampling_DV_PAL",
    "DXVA_VideoChromaSubsampling_Cosited",
    "DXVA_ExtendedFormat",
    "DXVA_Frequency",
    "DXVA_VideoDesc",
    "DXVA_VideoProcessCaps",
    "DXVA_VideoProcess_None",
    "DXVA_VideoProcess_YUV2RGB",
    "DXVA_VideoProcess_StretchX",
    "DXVA_VideoProcess_StretchY",
    "DXVA_VideoProcess_AlphaBlend",
    "DXVA_VideoProcess_SubRects",
    "DXVA_VideoProcess_SubStreams",
    "DXVA_VideoProcess_SubStreamsExtended",
    "DXVA_VideoProcess_YUV2RGBExtended",
    "DXVA_VideoProcess_AlphaBlendExtended",
    "DXVA_DeinterlaceTech",
    "DXVA_DeinterlaceTech_Unknown",
    "DXVA_DeinterlaceTech_BOBLineReplicate",
    "DXVA_DeinterlaceTech_BOBVerticalStretch",
    "DXVA_DeinterlaceTech_BOBVerticalStretch4Tap",
    "DXVA_DeinterlaceTech_MedianFiltering",
    "DXVA_DeinterlaceTech_EdgeFiltering",
    "DXVA_DeinterlaceTech_FieldAdaptive",
    "DXVA_DeinterlaceTech_PixelAdaptive",
    "DXVA_DeinterlaceTech_MotionVectorSteered",
    "DXVA_VideoSample",
    "DXVA_SampleFlags",
    "DXVA_SampleFlagsMask",
    "DXVA_SampleFlag_Palette_Changed",
    "DXVA_SampleFlag_SrcRect_Changed",
    "DXVA_SampleFlag_DstRect_Changed",
    "DXVA_SampleFlag_ColorData_Changed",
    "DXVA_DestinationFlags",
    "DXVA_DestinationFlagMask",
    "DXVA_DestinationFlag_Background_Changed",
    "DXVA_DestinationFlag_TargetRect_Changed",
    "DXVA_DestinationFlag_ColorData_Changed",
    "DXVA_DestinationFlag_Alpha_Changed",
    "DXVA_VideoSample2",
    "DXVA_DeinterlaceCaps",
    "DXVA_VideoSample32",
    "DXVA_DeinterlaceBltEx32",
    "DXVA_DeinterlaceBlt",
    "DXVA_DeinterlaceBltEx",
    "DXVA_DeinterlaceQueryAvailableModes",
    "DXVA_DeinterlaceQueryModeCaps",
    "DXVA_ProcAmpControlProp",
    "DXVA_ProcAmp_None",
    "DXVA_ProcAmp_Brightness",
    "DXVA_ProcAmp_Contrast",
    "DXVA_ProcAmp_Hue",
    "DXVA_ProcAmp_Saturation",
    "DXVA_ProcAmpControlCaps",
    "DXVA_ProcAmpControlQueryRange",
    "DXVA_VideoPropertyRange",
    "DXVA_ProcAmpControlBlt",
    "DXVA_COPPSignature",
    "DXVA_COPPCommand",
    "DXVA_COPPStatusInput",
    "DXVA_COPPStatusOutput",
    "CODECAPI_AVEncCommonFormatConstraint",
    "CODECAPI_GUID_AVEncCommonFormatUnSpecified",
    "CODECAPI_GUID_AVEncCommonFormatDVD_V",
    "CODECAPI_GUID_AVEncCommonFormatDVD_DashVR",
    "CODECAPI_GUID_AVEncCommonFormatDVD_PlusVR",
    "CODECAPI_GUID_AVEncCommonFormatVCD",
    "CODECAPI_GUID_AVEncCommonFormatSVCD",
    "CODECAPI_GUID_AVEncCommonFormatATSC",
    "CODECAPI_GUID_AVEncCommonFormatDVB",
    "CODECAPI_GUID_AVEncCommonFormatMP3",
    "CODECAPI_GUID_AVEncCommonFormatHighMAT",
    "CODECAPI_GUID_AVEncCommonFormatHighMPV",
    "CODECAPI_AVEncCodecType",
    "CODECAPI_GUID_AVEncMPEG1Video",
    "CODECAPI_GUID_AVEncMPEG2Video",
    "CODECAPI_GUID_AVEncMPEG1Audio",
    "CODECAPI_GUID_AVEncMPEG2Audio",
    "CODECAPI_GUID_AVEncWMV",
    "CODECAPI_GUID_AVEndMPEG4Video",
    "CODECAPI_GUID_AVEncH264Video",
    "CODECAPI_GUID_AVEncDV",
    "CODECAPI_GUID_AVEncWMAPro",
    "CODECAPI_GUID_AVEncWMALossless",
    "CODECAPI_GUID_AVEncWMAVoice",
    "CODECAPI_GUID_AVEncDolbyDigitalPro",
    "CODECAPI_GUID_AVEncDolbyDigitalConsumer",
    "CODECAPI_GUID_AVEncDolbyDigitalPlus",
    "CODECAPI_GUID_AVEncDTSHD",
    "CODECAPI_GUID_AVEncDTS",
    "CODECAPI_GUID_AVEncMLP",
    "CODECAPI_GUID_AVEncPCM",
    "CODECAPI_GUID_AVEncSDDS",
    "CODECAPI_AVEncCommonRateControlMode",
    "eAVEncCommonRateControlMode",
    "eAVEncCommonRateControlMode_CBR",
    "eAVEncCommonRateControlMode_PeakConstrainedVBR",
    "eAVEncCommonRateControlMode_UnconstrainedVBR",
    "eAVEncCommonRateControlMode_Quality",
    "eAVEncCommonRateControlMode_LowDelayVBR",
    "eAVEncCommonRateControlMode_GlobalVBR",
    "eAVEncCommonRateControlMode_GlobalLowDelayVBR",
    "CODECAPI_AVEncCommonLowLatency",
    "CODECAPI_AVEncCommonMultipassMode",
    "CODECAPI_AVEncCommonPassStart",
    "CODECAPI_AVEncCommonPassEnd",
    "CODECAPI_AVEncCommonRealTime",
    "CODECAPI_AVEncCommonQuality",
    "CODECAPI_AVEncCommonQualityVsSpeed",
    "CODECAPI_AVEncCommonTranscodeEncodingProfile",
    "CODECAPI_AVEncCommonMeanBitRate",
    "CODECAPI_AVEncCommonMeanBitRateInterval",
    "CODECAPI_AVEncCommonMaxBitRate",
    "CODECAPI_AVEncCommonMinBitRate",
    "CODECAPI_AVEncCommonBufferSize",
    "CODECAPI_AVEncCommonBufferInLevel",
    "CODECAPI_AVEncCommonBufferOutLevel",
    "CODECAPI_AVEncCommonStreamEndHandling",
    "eAVEncCommonStreamEndHandling",
    "eAVEncCommonStreamEndHandling_DiscardPartial",
    "eAVEncCommonStreamEndHandling_EnsureComplete",
    "CODECAPI_AVEncStatCommonCompletedPasses",
    "CODECAPI_AVEncVideoOutputFrameRate",
    "CODECAPI_AVEncVideoOutputFrameRateConversion",
    "eAVEncVideoOutputFrameRateConversion",
    "eAVEncVideoOutputFrameRateConversion_Disable",
    "eAVEncVideoOutputFrameRateConversion_Enable",
    "eAVEncVideoOutputFrameRateConversion_Alias",
    "CODECAPI_AVEncVideoPixelAspectRatio",
    "CODECAPI_AVDecVideoAcceleration_MPEG2",
    "CODECAPI_AVDecVideoAcceleration_H264",
    "CODECAPI_AVDecVideoAcceleration_VC1",
    "CODECAPI_AVDecVideoProcDeinterlaceCSC",
    "CODECAPI_AVDecVideoThumbnailGenerationMode",
    "CODECAPI_AVDecVideoMaxCodedWidth",
    "CODECAPI_AVDecVideoMaxCodedHeight",
    "CODECAPI_AVDecNumWorkerThreads",
    "CODECAPI_AVDecSoftwareDynamicFormatChange",
    "CODECAPI_AVDecDisableVideoPostProcessing",
    "CODECAPI_AVDecVideoDropPicWithMissingRef",
    "CODECAPI_AVDecVideoSoftwareDeinterlaceMode",
    "eAVDecVideoSoftwareDeinterlaceMode",
    "eAVDecVideoSoftwareDeinterlaceMode_NoDeinterlacing",
    "eAVDecVideoSoftwareDeinterlaceMode_ProgressiveDeinterlacing",
    "eAVDecVideoSoftwareDeinterlaceMode_BOBDeinterlacing",
    "eAVDecVideoSoftwareDeinterlaceMode_SmartBOBDeinterlacing",
    "CODECAPI_AVDecVideoFastDecodeMode",
    "eAVFastDecodeMode",
    "eAVFastDecodeMode_eVideoDecodeCompliant",
    "eAVFastDecodeMode_eVideoDecodeOptimalLF",
    "eAVFastDecodeMode_eVideoDecodeDisableLF",
    "eAVFastDecodeMode_eVideoDecodeFastest",
    "CODECAPI_AVLowLatencyMode",
    "CODECAPI_AVDecVideoH264ErrorConcealment",
    "eAVDecVideoH264ErrorConcealment",
    "eAVDecVideoH264ErrorConcealment_eErrorConcealmentTypeDrop",
    "eAVDecVideoH264ErrorConcealment_eErrorConcealmentTypeBasic",
    "eAVDecVideoH264ErrorConcealment_eErrorConcealmentTypeAdvanced",
    "eAVDecVideoH264ErrorConcealment_eErrorConcealmentTypeDXVASetBlack",
    "CODECAPI_AVDecVideoMPEG2ErrorConcealment",
    "eAVDecVideoMPEG2ErrorConcealment",
    "eAVDecVideoMPEG2ErrorConcealment_eErrorConcealmentOff",
    "eAVDecVideoMPEG2ErrorConcealment_eErrorConcealmentOn",
    "CODECAPI_AVDecVideoCodecType",
    "eAVDecVideoCodecType",
    "eAVDecVideoCodecType_NOTPLAYING",
    "eAVDecVideoCodecType_MPEG2",
    "eAVDecVideoCodecType_H264",
    "CODECAPI_AVDecVideoDXVAMode",
    "eAVDecVideoDXVAMode",
    "eAVDecVideoDXVAMode_NOTPLAYING",
    "eAVDecVideoDXVAMode_SW",
    "eAVDecVideoDXVAMode_MC",
    "eAVDecVideoDXVAMode_IDCT",
    "eAVDecVideoDXVAMode_VLD",
    "CODECAPI_AVDecVideoDXVABusEncryption",
    "eAVDecVideoDXVABusEncryption",
    "eAVDecVideoDXVABusEncryption_NONE",
    "eAVDecVideoDXVABusEncryption_PRIVATE",
    "eAVDecVideoDXVABusEncryption_AES",
    "CODECAPI_AVEncVideoForceSourceScanType",
    "eAVEncVideoSourceScanType",
    "eAVEncVideoSourceScan_Automatic",
    "eAVEncVideoSourceScan_Interlaced",
    "eAVEncVideoSourceScan_Progressive",
    "CODECAPI_AVEncVideoNoOfFieldsToEncode",
    "CODECAPI_AVEncVideoNoOfFieldsToSkip",
    "CODECAPI_AVEncVideoEncodeDimension",
    "CODECAPI_AVEncVideoEncodeOffsetOrigin",
    "CODECAPI_AVEncVideoDisplayDimension",
    "CODECAPI_AVEncVideoOutputScanType",
    "eAVEncVideoOutputScanType",
    "eAVEncVideoOutputScan_Progressive",
    "eAVEncVideoOutputScan_Interlaced",
    "eAVEncVideoOutputScan_SameAsInput",
    "eAVEncVideoOutputScan_Automatic",
    "CODECAPI_AVEncVideoInverseTelecineEnable",
    "CODECAPI_AVEncVideoInverseTelecineThreshold",
    "CODECAPI_AVEncVideoSourceFilmContent",
    "eAVEncVideoFilmContent",
    "eAVEncVideoFilmContent_VideoOnly",
    "eAVEncVideoFilmContent_FilmOnly",
    "eAVEncVideoFilmContent_Mixed",
    "CODECAPI_AVEncVideoSourceIsBW",
    "CODECAPI_AVEncVideoFieldSwap",
    "CODECAPI_AVEncVideoInputChromaResolution",
    "CODECAPI_AVEncVideoOutputChromaResolution",
    "eAVEncVideoChromaResolution",
    "eAVEncVideoChromaResolution_SameAsSource",
    "eAVEncVideoChromaResolution_444",
    "eAVEncVideoChromaResolution_422",
    "eAVEncVideoChromaResolution_420",
    "eAVEncVideoChromaResolution_411",
    "CODECAPI_AVEncVideoInputChromaSubsampling",
    "CODECAPI_AVEncVideoOutputChromaSubsampling",
    "eAVEncVideoChromaSubsampling",
    "eAVEncVideoChromaSubsamplingFormat_SameAsSource",
    "eAVEncVideoChromaSubsamplingFormat_ProgressiveChroma",
    "eAVEncVideoChromaSubsamplingFormat_Horizontally_Cosited",
    "eAVEncVideoChromaSubsamplingFormat_Vertically_Cosited",
    "eAVEncVideoChromaSubsamplingFormat_Vertically_AlignedChromaPlanes",
    "CODECAPI_AVEncVideoInputColorPrimaries",
    "CODECAPI_AVEncVideoOutputColorPrimaries",
    "eAVEncVideoColorPrimaries",
    "eAVEncVideoColorPrimaries_SameAsSource",
    "eAVEncVideoColorPrimaries_Reserved",
    "eAVEncVideoColorPrimaries_BT709",
    "eAVEncVideoColorPrimaries_BT470_2_SysM",
    "eAVEncVideoColorPrimaries_BT470_2_SysBG",
    "eAVEncVideoColorPrimaries_SMPTE170M",
    "eAVEncVideoColorPrimaries_SMPTE240M",
    "eAVEncVideoColorPrimaries_EBU3231",
    "eAVEncVideoColorPrimaries_SMPTE_C",
    "CODECAPI_AVEncVideoInputColorTransferFunction",
    "CODECAPI_AVEncVideoOutputColorTransferFunction",
    "eAVEncVideoColorTransferFunction",
    "eAVEncVideoColorTransferFunction_SameAsSource",
    "eAVEncVideoColorTransferFunction_10",
    "eAVEncVideoColorTransferFunction_18",
    "eAVEncVideoColorTransferFunction_20",
    "eAVEncVideoColorTransferFunction_22",
    "eAVEncVideoColorTransferFunction_22_709",
    "eAVEncVideoColorTransferFunction_22_240M",
    "eAVEncVideoColorTransferFunction_22_8bit_sRGB",
    "eAVEncVideoColorTransferFunction_28",
    "CODECAPI_AVEncVideoInputColorTransferMatrix",
    "CODECAPI_AVEncVideoOutputColorTransferMatrix",
    "eAVEncVideoColorTransferMatrix",
    "eAVEncVideoColorTransferMatrix_SameAsSource",
    "eAVEncVideoColorTransferMatrix_BT709",
    "eAVEncVideoColorTransferMatrix_BT601",
    "eAVEncVideoColorTransferMatrix_SMPTE240M",
    "CODECAPI_AVEncVideoInputColorLighting",
    "CODECAPI_AVEncVideoOutputColorLighting",
    "eAVEncVideoColorLighting",
    "eAVEncVideoColorLighting_SameAsSource",
    "eAVEncVideoColorLighting_Unknown",
    "eAVEncVideoColorLighting_Bright",
    "eAVEncVideoColorLighting_Office",
    "eAVEncVideoColorLighting_Dim",
    "eAVEncVideoColorLighting_Dark",
    "CODECAPI_AVEncVideoInputColorNominalRange",
    "CODECAPI_AVEncVideoOutputColorNominalRange",
    "eAVEncVideoColorNominalRange",
    "eAVEncVideoColorNominalRange_SameAsSource",
    "eAVEncVideoColorNominalRange_0_255",
    "eAVEncVideoColorNominalRange_16_235",
    "eAVEncVideoColorNominalRange_48_208",
    "CODECAPI_AVEncInputVideoSystem",
    "eAVEncInputVideoSystem",
    "eAVEncInputVideoSystem_Unspecified",
    "eAVEncInputVideoSystem_PAL",
    "eAVEncInputVideoSystem_NTSC",
    "eAVEncInputVideoSystem_SECAM",
    "eAVEncInputVideoSystem_MAC",
    "eAVEncInputVideoSystem_HDV",
    "eAVEncInputVideoSystem_Component",
    "CODECAPI_AVEncVideoHeaderDropFrame",
    "CODECAPI_AVEncVideoHeaderHours",
    "CODECAPI_AVEncVideoHeaderMinutes",
    "CODECAPI_AVEncVideoHeaderSeconds",
    "CODECAPI_AVEncVideoHeaderFrames",
    "CODECAPI_AVEncVideoDefaultUpperFieldDominant",
    "CODECAPI_AVEncVideoCBRMotionTradeoff",
    "CODECAPI_AVEncVideoCodedVideoAccessUnitSize",
    "CODECAPI_AVEncVideoMaxKeyframeDistance",
    "CODECAPI_AVEncH264CABACEnable",
    "CODECAPI_AVEncVideoContentType",
    "eAVEncVideoContentType",
    "eAVEncVideoContentType_Unknown",
    "eAVEncVideoContentType_FixedCameraAngle",
    "CODECAPI_AVEncNumWorkerThreads",
    "CODECAPI_AVEncVideoEncodeQP",
    "CODECAPI_AVEncVideoMinQP",
    "CODECAPI_AVEncVideoForceKeyFrame",
    "CODECAPI_AVEncH264SPSID",
    "CODECAPI_AVEncH264PPSID",
    "CODECAPI_AVEncAdaptiveMode",
    "CODECAPI_AVScenarioInfo",
    "CODECAPI_AVEncMPVGOPSizeMin",
    "CODECAPI_AVEncMPVGOPSizeMax",
    "CODECAPI_AVEncVideoMaxCTBSize",
    "CODECAPI_AVEncVideoCTBSize",
    "CODECAPI_VideoEncoderDisplayContentType",
    "CODECAPI_AVEncEnableVideoProcessing",
    "CODECAPI_AVEncVideoGradualIntraRefresh",
    "CODECAPI_GetOPMContext",
    "CODECAPI_SetHDCPManagerContext",
    "CODECAPI_AVEncVideoMaxTemporalLayers",
    "CODECAPI_AVEncVideoNumGOPsPerIDR",
    "CODECAPI_AVEncCommonAllowFrameDrops",
    "CODECAPI_AVEncVideoIntraLayerPrediction",
    "CODECAPI_AVEncVideoInstantTemporalUpSwitching",
    "CODECAPI_AVEncLowPowerEncoder",
    "CODECAPI_AVEnableInLoopDeblockFilter",
    "eAVEncAdaptiveMode",
    "eAVEncAdaptiveMode_None",
    "eAVEncAdaptiveMode_Resolution",
    "eAVEncAdaptiveMode_FrameRate",
    "eAVScenarioInfo",
    "eAVScenarioInfo_Unknown",
    "eAVScenarioInfo_DisplayRemoting",
    "eAVScenarioInfo_VideoConference",
    "eAVScenarioInfo_Archive",
    "eAVScenarioInfo_LiveStreaming",
    "eAVScenarioInfo_CameraRecord",
    "eAVScenarioInfo_DisplayRemotingWithFeatureMap",
    "eVideoEncoderDisplayContentType",
    "eVideoEncoderDisplayContent_Unknown",
    "eVideoEncoderDisplayContent_FullScreenVideo",
    "CODECAPI_AVEncVideoSelectLayer",
    "CODECAPI_AVEncVideoTemporalLayerCount",
    "CODECAPI_AVEncVideoUsage",
    "CODECAPI_AVEncVideoRateControlParams",
    "CODECAPI_AVEncVideoSupportedControls",
    "CODECAPI_AVEncVideoEncodeFrameTypeQP",
    "CODECAPI_AVEncSliceControlMode",
    "CODECAPI_AVEncSliceControlSize",
    "CODECAPI_AVEncSliceGenerationMode",
    "CODECAPI_AVEncVideoMaxNumRefFrame",
    "CODECAPI_AVEncVideoMeanAbsoluteDifference",
    "CODECAPI_AVEncVideoMaxQP",
    "CODECAPI_AVEncVideoLTRBufferControl",
    "CODECAPI_AVEncVideoMarkLTRFrame",
    "CODECAPI_AVEncVideoUseLTRFrame",
    "CODECAPI_AVEncVideoROIEnabled",
    "CODECAPI_AVEncVideoDirtyRectEnabled",
    "CODECAPI_AVEncMaxFrameRate",
    "CODECAPI_AVEncMuxOutputStreamType",
    "eAVEncMuxOutput",
    "eAVEncMuxOutput_eAVEncMuxOutputAuto",
    "eAVEncMuxOutput_eAVEncMuxOutputPS",
    "eAVEncMuxOutput_eAVEncMuxOutputTS",
    "CODECAPI_AVEncStatVideoOutputFrameRate",
    "CODECAPI_AVEncStatVideoCodedFrames",
    "CODECAPI_AVEncStatVideoTotalFrames",
    "CODECAPI_AVEncAudioIntervalToEncode",
    "CODECAPI_AVEncAudioIntervalToSkip",
    "CODECAPI_AVEncAudioDualMono",
    "eAVEncAudioDualMono",
    "eAVEncAudioDualMono_SameAsInput",
    "eAVEncAudioDualMono_Off",
    "eAVEncAudioDualMono_On",
    "CODECAPI_AVEncAudioMeanBitRate",
    "CODECAPI_AVEncAudioMapDestChannel0",
    "CODECAPI_AVEncAudioMapDestChannel1",
    "CODECAPI_AVEncAudioMapDestChannel2",
    "CODECAPI_AVEncAudioMapDestChannel3",
    "CODECAPI_AVEncAudioMapDestChannel4",
    "CODECAPI_AVEncAudioMapDestChannel5",
    "CODECAPI_AVEncAudioMapDestChannel6",
    "CODECAPI_AVEncAudioMapDestChannel7",
    "CODECAPI_AVEncAudioMapDestChannel8",
    "CODECAPI_AVEncAudioMapDestChannel9",
    "CODECAPI_AVEncAudioMapDestChannel10",
    "CODECAPI_AVEncAudioMapDestChannel11",
    "CODECAPI_AVEncAudioMapDestChannel12",
    "CODECAPI_AVEncAudioMapDestChannel13",
    "CODECAPI_AVEncAudioMapDestChannel14",
    "CODECAPI_AVEncAudioMapDestChannel15",
    "CODECAPI_AVEncAudioInputContent",
    "eAVEncAudioInputContent",
    "AVEncAudioInputContent_Unknown",
    "AVEncAudioInputContent_Voice",
    "AVEncAudioInputContent_Music",
    "CODECAPI_AVEncStatAudioPeakPCMValue",
    "CODECAPI_AVEncStatAudioAveragePCMValue",
    "CODECAPI_AVEncStatAudioAverageBPS",
    "CODECAPI_AVEncStatAverageBPS",
    "CODECAPI_AVEncStatHardwareProcessorUtilitization",
    "CODECAPI_AVEncStatHardwareBandwidthUtilitization",
    "CODECAPI_AVEncMPVGOPSize",
    "CODECAPI_AVEncMPVGOPOpen",
    "CODECAPI_AVEncMPVDefaultBPictureCount",
    "CODECAPI_AVEncMPVProfile",
    "eAVEncMPVProfile",
    "eAVEncMPVProfile_unknown",
    "eAVEncMPVProfile_Simple",
    "eAVEncMPVProfile_Main",
    "eAVEncMPVProfile_High",
    "eAVEncMPVProfile_422",
    "CODECAPI_AVEncMPVLevel",
    "eAVEncMPVLevel",
    "eAVEncMPVLevel_Low",
    "eAVEncMPVLevel_Main",
    "eAVEncMPVLevel_High1440",
    "eAVEncMPVLevel_High",
    "eAVEncH263VProfile",
    "eAVEncH263VProfile_Base",
    "eAVEncH263VProfile_CompatibilityV2",
    "eAVEncH263VProfile_CompatibilityV1",
    "eAVEncH263VProfile_WirelessV2",
    "eAVEncH263VProfile_WirelessV3",
    "eAVEncH263VProfile_HighCompression",
    "eAVEncH263VProfile_Internet",
    "eAVEncH263VProfile_Interlace",
    "eAVEncH263VProfile_HighLatency",
    "eAVEncH264VProfile",
    "eAVEncH264VProfile_unknown",
    "eAVEncH264VProfile_Simple",
    "eAVEncH264VProfile_Base",
    "eAVEncH264VProfile_Main",
    "eAVEncH264VProfile_High",
    "eAVEncH264VProfile_422",
    "eAVEncH264VProfile_High10",
    "eAVEncH264VProfile_444",
    "eAVEncH264VProfile_Extended",
    "eAVEncH264VProfile_ScalableBase",
    "eAVEncH264VProfile_ScalableHigh",
    "eAVEncH264VProfile_MultiviewHigh",
    "eAVEncH264VProfile_StereoHigh",
    "eAVEncH264VProfile_ConstrainedBase",
    "eAVEncH264VProfile_UCConstrainedHigh",
    "eAVEncH264VProfile_UCScalableConstrainedBase",
    "eAVEncH264VProfile_UCScalableConstrainedHigh",
    "eAVEncH265VProfile",
    "eAVEncH265VProfile_unknown",
    "eAVEncH265VProfile_Main_420_8",
    "eAVEncH265VProfile_Main_420_10",
    "eAVEncH265VProfile_Main_420_12",
    "eAVEncH265VProfile_Main_422_10",
    "eAVEncH265VProfile_Main_422_12",
    "eAVEncH265VProfile_Main_444_8",
    "eAVEncH265VProfile_Main_444_10",
    "eAVEncH265VProfile_Main_444_12",
    "eAVEncH265VProfile_Monochrome_12",
    "eAVEncH265VProfile_Monochrome_16",
    "eAVEncH265VProfile_MainIntra_420_8",
    "eAVEncH265VProfile_MainIntra_420_10",
    "eAVEncH265VProfile_MainIntra_420_12",
    "eAVEncH265VProfile_MainIntra_422_10",
    "eAVEncH265VProfile_MainIntra_422_12",
    "eAVEncH265VProfile_MainIntra_444_8",
    "eAVEncH265VProfile_MainIntra_444_10",
    "eAVEncH265VProfile_MainIntra_444_12",
    "eAVEncH265VProfile_MainIntra_444_16",
    "eAVEncH265VProfile_MainStill_420_8",
    "eAVEncH265VProfile_MainStill_444_8",
    "eAVEncH265VProfile_MainStill_444_16",
    "eAVEncVP9VProfile",
    "eAVEncVP9VProfile_unknown",
    "eAVEncVP9VProfile_420_8",
    "eAVEncVP9VProfile_420_10",
    "eAVEncVP9VProfile_420_12",
    "eAVEncH263PictureType",
    "eAVEncH263PictureType_I",
    "eAVEncH263PictureType_P",
    "eAVEncH263PictureType_B",
    "eAVEncH264PictureType",
    "eAVEncH264PictureType_IDR",
    "eAVEncH264PictureType_P",
    "eAVEncH264PictureType_B",
    "eAVEncH263VLevel",
    "eAVEncH263VLevel_eAVEncH263VLevel1",
    "eAVEncH263VLevel_eAVEncH263VLevel2",
    "eAVEncH263VLevel_eAVEncH263VLevel3",
    "eAVEncH263VLevel_eAVEncH263VLevel4",
    "eAVEncH263VLevel_eAVEncH263VLevel4_5",
    "eAVEncH263VLevel_eAVEncH263VLevel5",
    "eAVEncH263VLevel_eAVEncH263VLevel6",
    "eAVEncH263VLevel_eAVEncH263VLevel7",
    "eAVEncH264VLevel",
    "eAVEncH264VLevel_eAVEncH264VLevel1",
    "eAVEncH264VLevel_eAVEncH264VLevel1_b",
    "eAVEncH264VLevel_eAVEncH264VLevel1_1",
    "eAVEncH264VLevel_eAVEncH264VLevel1_2",
    "eAVEncH264VLevel_eAVEncH264VLevel1_3",
    "eAVEncH264VLevel_eAVEncH264VLevel2",
    "eAVEncH264VLevel_eAVEncH264VLevel2_1",
    "eAVEncH264VLevel_eAVEncH264VLevel2_2",
    "eAVEncH264VLevel_eAVEncH264VLevel3",
    "eAVEncH264VLevel_eAVEncH264VLevel3_1",
    "eAVEncH264VLevel_eAVEncH264VLevel3_2",
    "eAVEncH264VLevel_eAVEncH264VLevel4",
    "eAVEncH264VLevel_eAVEncH264VLevel4_1",
    "eAVEncH264VLevel_eAVEncH264VLevel4_2",
    "eAVEncH264VLevel_eAVEncH264VLevel5",
    "eAVEncH264VLevel_eAVEncH264VLevel5_1",
    "eAVEncH264VLevel_eAVEncH264VLevel5_2",
    "eAVEncH265VLevel",
    "eAVEncH265VLevel_eAVEncH265VLevel1",
    "eAVEncH265VLevel_eAVEncH265VLevel2",
    "eAVEncH265VLevel_eAVEncH265VLevel2_1",
    "eAVEncH265VLevel_eAVEncH265VLevel3",
    "eAVEncH265VLevel_eAVEncH265VLevel3_1",
    "eAVEncH265VLevel_eAVEncH265VLevel4",
    "eAVEncH265VLevel_eAVEncH265VLevel4_1",
    "eAVEncH265VLevel_eAVEncH265VLevel5",
    "eAVEncH265VLevel_eAVEncH265VLevel5_1",
    "eAVEncH265VLevel_eAVEncH265VLevel5_2",
    "eAVEncH265VLevel_eAVEncH265VLevel6",
    "eAVEncH265VLevel_eAVEncH265VLevel6_1",
    "eAVEncH265VLevel_eAVEncH265VLevel6_2",
    "CODECAPI_AVEncMPVFrameFieldMode",
    "eAVEncMPVFrameFieldMode",
    "eAVEncMPVFrameFieldMode_FieldMode",
    "eAVEncMPVFrameFieldMode_FrameMode",
    "CODECAPI_AVEncMPVAddSeqEndCode",
    "CODECAPI_AVEncMPVGOPSInSeq",
    "CODECAPI_AVEncMPVUseConcealmentMotionVectors",
    "CODECAPI_AVEncMPVSceneDetection",
    "eAVEncMPVSceneDetection",
    "eAVEncMPVSceneDetection_None",
    "eAVEncMPVSceneDetection_InsertIPicture",
    "eAVEncMPVSceneDetection_StartNewGOP",
    "eAVEncMPVSceneDetection_StartNewLocatableGOP",
    "CODECAPI_AVEncMPVGenerateHeaderSeqExt",
    "CODECAPI_AVEncMPVGenerateHeaderSeqDispExt",
    "CODECAPI_AVEncMPVGenerateHeaderPicExt",
    "CODECAPI_AVEncMPVGenerateHeaderPicDispExt",
    "CODECAPI_AVEncMPVGenerateHeaderSeqScaleExt",
    "CODECAPI_AVEncMPVScanPattern",
    "eAVEncMPVScanPattern",
    "eAVEncMPVScanPattern_Auto",
    "eAVEncMPVScanPattern_ZigZagScan",
    "eAVEncMPVScanPattern_AlternateScan",
    "CODECAPI_AVEncMPVIntraDCPrecision",
    "CODECAPI_AVEncMPVQScaleType",
    "eAVEncMPVQScaleType",
    "eAVEncMPVQScaleType_Auto",
    "eAVEncMPVQScaleType_Linear",
    "eAVEncMPVQScaleType_NonLinear",
    "CODECAPI_AVEncMPVIntraVLCTable",
    "eAVEncMPVIntraVLCTable",
    "eAVEncMPVIntraVLCTable_Auto",
    "eAVEncMPVIntraVLCTable_MPEG1",
    "eAVEncMPVIntraVLCTable_Alternate",
    "CODECAPI_AVEncMPVQuantMatrixIntra",
    "CODECAPI_AVEncMPVQuantMatrixNonIntra",
    "CODECAPI_AVEncMPVQuantMatrixChromaIntra",
    "CODECAPI_AVEncMPVQuantMatrixChromaNonIntra",
    "CODECAPI_AVEncMPALayer",
    "eAVEncMPALayer",
    "eAVEncMPALayer_1",
    "eAVEncMPALayer_2",
    "eAVEncMPALayer_3",
    "CODECAPI_AVEncMPACodingMode",
    "eAVEncMPACodingMode",
    "eAVEncMPACodingMode_Mono",
    "eAVEncMPACodingMode_Stereo",
    "eAVEncMPACodingMode_DualChannel",
    "eAVEncMPACodingMode_JointStereo",
    "eAVEncMPACodingMode_Surround",
    "CODECAPI_AVEncMPACopyright",
    "CODECAPI_AVEncMPAOriginalBitstream",
    "CODECAPI_AVEncMPAEnableRedundancyProtection",
    "CODECAPI_AVEncMPAPrivateUserBit",
    "CODECAPI_AVEncMPAEmphasisType",
    "eAVEncMPAEmphasisType",
    "eAVEncMPAEmphasisType_None",
    "eAVEncMPAEmphasisType_50_15",
    "eAVEncMPAEmphasisType_Reserved",
    "eAVEncMPAEmphasisType_CCITT_J17",
    "CODECAPI_AVEncDDService",
    "eAVEncDDService",
    "eAVEncDDService_CM",
    "eAVEncDDService_ME",
    "eAVEncDDService_VI",
    "eAVEncDDService_HI",
    "eAVEncDDService_D",
    "eAVEncDDService_C",
    "eAVEncDDService_E",
    "eAVEncDDService_VO",
    "CODECAPI_AVEncDDDialogNormalization",
    "CODECAPI_AVEncDDCentreDownMixLevel",
    "CODECAPI_AVEncDDSurroundDownMixLevel",
    "CODECAPI_AVEncDDProductionInfoExists",
    "CODECAPI_AVEncDDProductionRoomType",
    "eAVEncDDProductionRoomType",
    "eAVEncDDProductionRoomType_NotIndicated",
    "eAVEncDDProductionRoomType_Large",
    "eAVEncDDProductionRoomType_Small",
    "CODECAPI_AVEncDDProductionMixLevel",
    "CODECAPI_AVEncDDCopyright",
    "CODECAPI_AVEncDDOriginalBitstream",
    "CODECAPI_AVEncDDDigitalDeemphasis",
    "CODECAPI_AVEncDDDCHighPassFilter",
    "CODECAPI_AVEncDDChannelBWLowPassFilter",
    "CODECAPI_AVEncDDLFELowPassFilter",
    "CODECAPI_AVEncDDSurround90DegreeePhaseShift",
    "CODECAPI_AVEncDDSurround3dBAttenuation",
    "CODECAPI_AVEncDDDynamicRangeCompressionControl",
    "eAVEncDDDynamicRangeCompressionControl",
    "eAVEncDDDynamicRangeCompressionControl_None",
    "eAVEncDDDynamicRangeCompressionControl_FilmStandard",
    "eAVEncDDDynamicRangeCompressionControl_FilmLight",
    "eAVEncDDDynamicRangeCompressionControl_MusicStandard",
    "eAVEncDDDynamicRangeCompressionControl_MusicLight",
    "eAVEncDDDynamicRangeCompressionControl_Speech",
    "CODECAPI_AVEncDDRFPreEmphasisFilter",
    "CODECAPI_AVEncDDSurroundExMode",
    "eAVEncDDSurroundExMode",
    "eAVEncDDSurroundExMode_NotIndicated",
    "eAVEncDDSurroundExMode_No",
    "eAVEncDDSurroundExMode_Yes",
    "CODECAPI_AVEncDDPreferredStereoDownMixMode",
    "eAVEncDDPreferredStereoDownMixMode",
    "eAVEncDDPreferredStereoDownMixMode_LtRt",
    "eAVEncDDPreferredStereoDownMixMode_LoRo",
    "CODECAPI_AVEncDDLtRtCenterMixLvl_x10",
    "CODECAPI_AVEncDDLtRtSurroundMixLvl_x10",
    "CODECAPI_AVEncDDLoRoCenterMixLvl_x10",
    "CODECAPI_AVEncDDLoRoSurroundMixLvl_x10",
    "CODECAPI_AVEncDDAtoDConverterType",
    "eAVEncDDAtoDConverterType",
    "eAVEncDDAtoDConverterType_Standard",
    "eAVEncDDAtoDConverterType_HDCD",
    "CODECAPI_AVEncDDHeadphoneMode",
    "eAVEncDDHeadphoneMode",
    "eAVEncDDHeadphoneMode_NotIndicated",
    "eAVEncDDHeadphoneMode_NotEncoded",
    "eAVEncDDHeadphoneMode_Encoded",
    "CODECAPI_AVEncWMVKeyFrameDistance",
    "CODECAPI_AVEncWMVInterlacedEncoding",
    "CODECAPI_AVEncWMVDecoderComplexity",
    "CODECAPI_AVEncWMVKeyFrameBufferLevelMarker",
    "CODECAPI_AVEncWMVProduceDummyFrames",
    "CODECAPI_AVEncStatWMVCBAvg",
    "CODECAPI_AVEncStatWMVCBMax",
    "CODECAPI_AVEncStatWMVDecoderComplexityProfile",
    "CODECAPI_AVEncStatMPVSkippedEmptyFrames",
    "CODECAPI_AVEncMP12PktzSTDBuffer",
    "CODECAPI_AVEncMP12PktzStreamID",
    "CODECAPI_AVEncMP12PktzInitialPTS",
    "CODECAPI_AVEncMP12PktzPacketSize",
    "CODECAPI_AVEncMP12PktzCopyright",
    "CODECAPI_AVEncMP12PktzOriginal",
    "CODECAPI_AVEncMP12MuxPacketOverhead",
    "CODECAPI_AVEncMP12MuxNumStreams",
    "CODECAPI_AVEncMP12MuxEarliestPTS",
    "CODECAPI_AVEncMP12MuxLargestPacketSize",
    "CODECAPI_AVEncMP12MuxInitialSCR",
    "CODECAPI_AVEncMP12MuxMuxRate",
    "CODECAPI_AVEncMP12MuxPackSize",
    "CODECAPI_AVEncMP12MuxSysSTDBufferBound",
    "CODECAPI_AVEncMP12MuxSysRateBound",
    "CODECAPI_AVEncMP12MuxTargetPacketizer",
    "CODECAPI_AVEncMP12MuxSysFixed",
    "CODECAPI_AVEncMP12MuxSysCSPS",
    "CODECAPI_AVEncMP12MuxSysVideoLock",
    "CODECAPI_AVEncMP12MuxSysAudioLock",
    "CODECAPI_AVEncMP12MuxDVDNavPacks",
    "CODECAPI_AVDecCommonInputFormat",
    "CODECAPI_AVDecCommonOutputFormat",
    "CODECAPI_AVDecCommonMeanBitRate",
    "CODECAPI_AVDecCommonMeanBitRateInterval",
    "CODECAPI_GUID_AVDecAudioOutputFormat_PCM_Stereo_MatrixEncoded",
    "CODECAPI_GUID_AVDecAudioOutputFormat_PCM",
    "CODECAPI_GUID_AVDecAudioOutputFormat_SPDIF_PCM",
    "CODECAPI_GUID_AVDecAudioOutputFormat_SPDIF_Bitstream",
    "CODECAPI_GUID_AVDecAudioOutputFormat_PCM_Headphones",
    "CODECAPI_GUID_AVDecAudioOutputFormat_PCM_Stereo_Auto",
    "CODECAPI_AVDecVideoImageSize",
    "CODECAPI_AVDecVideoPixelAspectRatio",
    "CODECAPI_AVDecVideoInputScanType",
    "eAVDecVideoInputScanType",
    "eAVDecVideoInputScan_Unknown",
    "eAVDecVideoInputScan_Progressive",
    "eAVDecVideoInputScan_Interlaced_UpperFieldFirst",
    "eAVDecVideoInputScan_Interlaced_LowerFieldFirst",
    "CODECAPI_AVDecVideoSWPowerLevel",
    "eAVDecVideoSWPowerLevel",
    "eAVDecVideoSWPowerLevel_BatteryLife",
    "eAVDecVideoSWPowerLevel_Balanced",
    "eAVDecVideoSWPowerLevel_VideoQuality",
    "CODECAPI_GUID_AVDecAudioInputWMA",
    "CODECAPI_GUID_AVDecAudioInputWMAPro",
    "CODECAPI_GUID_AVDecAudioInputDolby",
    "CODECAPI_GUID_AVDecAudioInputDTS",
    "CODECAPI_GUID_AVDecAudioInputPCM",
    "CODECAPI_GUID_AVDecAudioInputMPEG",
    "CODECAPI_GUID_AVDecAudioInputAAC",
    "CODECAPI_GUID_AVDecAudioInputHEAAC",
    "CODECAPI_GUID_AVDecAudioInputDolbyDigitalPlus",
    "CODECAPI_AVDecAACDownmixMode",
    "eAVDecAACDownmixMode",
    "eAVDecAACDownmixMode_eAVDecAACUseISODownmix",
    "eAVDecAACDownmixMode_eAVDecAACUseARIBDownmix",
    "CODECAPI_AVDecHEAACDynamicRangeControl",
    "eAVDecHEAACDynamicRangeControl",
    "eAVDecHEAACDynamicRangeControl_OFF",
    "eAVDecHEAACDynamicRangeControl_ON",
    "CODECAPI_AVDecAudioDualMono",
    "eAVDecAudioDualMono",
    "eAVDecAudioDualMono_IsNotDualMono",
    "eAVDecAudioDualMono_IsDualMono",
    "eAVDecAudioDualMono_UnSpecified",
    "CODECAPI_AVDecAudioDualMonoReproMode",
    "eAVDecAudioDualMonoReproMode",
    "eAVDecAudioDualMonoReproMode_STEREO",
    "eAVDecAudioDualMonoReproMode_LEFT_MONO",
    "eAVDecAudioDualMonoReproMode_RIGHT_MONO",
    "eAVDecAudioDualMonoReproMode_MIX_MONO",
    "CODECAPI_AVAudioChannelCount",
    "CODECAPI_AVAudioChannelConfig",
    "eAVAudioChannelConfig",
    "eAVAudioChannelConfig_FRONT_LEFT",
    "eAVAudioChannelConfig_FRONT_RIGHT",
    "eAVAudioChannelConfig_FRONT_CENTER",
    "eAVAudioChannelConfig_LOW_FREQUENCY",
    "eAVAudioChannelConfig_BACK_LEFT",
    "eAVAudioChannelConfig_BACK_RIGHT",
    "eAVAudioChannelConfig_FRONT_LEFT_OF_CENTER",
    "eAVAudioChannelConfig_FRONT_RIGHT_OF_CENTER",
    "eAVAudioChannelConfig_BACK_CENTER",
    "eAVAudioChannelConfig_SIDE_LEFT",
    "eAVAudioChannelConfig_SIDE_RIGHT",
    "eAVAudioChannelConfig_TOP_CENTER",
    "eAVAudioChannelConfig_TOP_FRONT_LEFT",
    "eAVAudioChannelConfig_TOP_FRONT_CENTER",
    "eAVAudioChannelConfig_TOP_FRONT_RIGHT",
    "eAVAudioChannelConfig_TOP_BACK_LEFT",
    "eAVAudioChannelConfig_TOP_BACK_CENTER",
    "eAVAudioChannelConfig_TOP_BACK_RIGHT",
    "CODECAPI_AVAudioSampleRate",
    "CODECAPI_AVDDSurroundMode",
    "eAVDDSurroundMode",
    "eAVDDSurroundMode_NotIndicated",
    "eAVDDSurroundMode_No",
    "eAVDDSurroundMode_Yes",
    "CODECAPI_AVDecDDOperationalMode",
    "eAVDecDDOperationalMode",
    "eAVDecDDOperationalMode_NONE",
    "eAVDecDDOperationalMode_LINE",
    "eAVDecDDOperationalMode_RF",
    "eAVDecDDOperationalMode_CUSTOM0",
    "eAVDecDDOperationalMode_CUSTOM1",
    "eAVDecDDOperationalMode_PORTABLE8",
    "eAVDecDDOperationalMode_PORTABLE11",
    "eAVDecDDOperationalMode_PORTABLE14",
    "CODECAPI_AVDecDDMatrixDecodingMode",
    "eAVDecDDMatrixDecodingMode",
    "eAVDecDDMatrixDecodingMode_OFF",
    "eAVDecDDMatrixDecodingMode_ON",
    "eAVDecDDMatrixDecodingMode_AUTO",
    "CODECAPI_AVDecDDDynamicRangeScaleHigh",
    "CODECAPI_AVDecDDDynamicRangeScaleLow",
    "CODECAPI_AVDecDDStereoDownMixMode",
    "eAVDecDDStereoDownMixMode",
    "eAVDecDDStereoDownMixMode_Auto",
    "eAVDecDDStereoDownMixMode_LtRt",
    "eAVDecDDStereoDownMixMode_LoRo",
    "CODECAPI_AVDSPLoudnessEqualization",
    "eAVDSPLoudnessEqualization",
    "eAVDSPLoudnessEqualization_OFF",
    "eAVDSPLoudnessEqualization_ON",
    "eAVDSPLoudnessEqualization_AUTO",
    "CODECAPI_AVDSPSpeakerFill",
    "eAVDSPSpeakerFill",
    "eAVDSPSpeakerFill_OFF",
    "eAVDSPSpeakerFill_ON",
    "eAVDSPSpeakerFill_AUTO",
    "CODECAPI_AVPriorityControl",
    "CODECAPI_AVRealtimeControl",
    "CODECAPI_AVEncNoInputCopy",
    "eAVEncChromaEncodeMode",
    "eAVEncChromaEncodeMode_420",
    "eAVEncChromaEncodeMode_444",
    "eAVEncChromaEncodeMode_444_v2",
    "CODECAPI_AVEncChromaEncodeMode",
    "CODECAPI_AVEncProgressiveUpdateTime",
    "CODECAPI_AVEncChromaUpdateTime",
    "DXVAHD_FRAME_FORMAT",
    "DXVAHD_FRAME_FORMAT_PROGRESSIVE",
    "DXVAHD_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST",
    "DXVAHD_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST",
    "DXVAHD_DEVICE_USAGE",
    "DXVAHD_DEVICE_USAGE_PLAYBACK_NORMAL",
    "DXVAHD_DEVICE_USAGE_OPTIMAL_SPEED",
    "DXVAHD_DEVICE_USAGE_OPTIMAL_QUALITY",
    "DXVAHD_SURFACE_TYPE",
    "DXVAHD_SURFACE_TYPE_VIDEO_INPUT",
    "DXVAHD_SURFACE_TYPE_VIDEO_INPUT_PRIVATE",
    "DXVAHD_SURFACE_TYPE_VIDEO_OUTPUT",
    "DXVAHD_DEVICE_TYPE",
    "DXVAHD_DEVICE_TYPE_HARDWARE",
    "DXVAHD_DEVICE_TYPE_SOFTWARE",
    "DXVAHD_DEVICE_TYPE_REFERENCE",
    "DXVAHD_DEVICE_TYPE_OTHER",
    "DXVAHD_DEVICE_CAPS",
    "DXVAHD_DEVICE_CAPS_LINEAR_SPACE",
    "DXVAHD_DEVICE_CAPS_xvYCC",
    "DXVAHD_DEVICE_CAPS_RGB_RANGE_CONVERSION",
    "DXVAHD_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION",
    "DXVAHD_FEATURE_CAPS",
    "DXVAHD_FEATURE_CAPS_ALPHA_FILL",
    "DXVAHD_FEATURE_CAPS_CONSTRICTION",
    "DXVAHD_FEATURE_CAPS_LUMA_KEY",
    "DXVAHD_FEATURE_CAPS_ALPHA_PALETTE",
    "DXVAHD_FILTER_CAPS",
    "DXVAHD_FILTER_CAPS_BRIGHTNESS",
    "DXVAHD_FILTER_CAPS_CONTRAST",
    "DXVAHD_FILTER_CAPS_HUE",
    "DXVAHD_FILTER_CAPS_SATURATION",
    "DXVAHD_FILTER_CAPS_NOISE_REDUCTION",
    "DXVAHD_FILTER_CAPS_EDGE_ENHANCEMENT",
    "DXVAHD_FILTER_CAPS_ANAMORPHIC_SCALING",
    "DXVAHD_INPUT_FORMAT_CAPS",
    "DXVAHD_INPUT_FORMAT_CAPS_RGB_INTERLACED",
    "DXVAHD_INPUT_FORMAT_CAPS_RGB_PROCAMP",
    "DXVAHD_INPUT_FORMAT_CAPS_RGB_LUMA_KEY",
    "DXVAHD_INPUT_FORMAT_CAPS_PALETTE_INTERLACED",
    "DXVAHD_PROCESSOR_CAPS",
    "DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BLEND",
    "DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BOB",
    "DXVAHD_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE",
    "DXVAHD_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION",
    "DXVAHD_PROCESSOR_CAPS_INVERSE_TELECINE",
    "DXVAHD_PROCESSOR_CAPS_FRAME_RATE_CONVERSION",
    "DXVAHD_ITELECINE_CAPS",
    "DXVAHD_ITELECINE_CAPS_32",
    "DXVAHD_ITELECINE_CAPS_22",
    "DXVAHD_ITELECINE_CAPS_2224",
    "DXVAHD_ITELECINE_CAPS_2332",
    "DXVAHD_ITELECINE_CAPS_32322",
    "DXVAHD_ITELECINE_CAPS_55",
    "DXVAHD_ITELECINE_CAPS_64",
    "DXVAHD_ITELECINE_CAPS_87",
    "DXVAHD_ITELECINE_CAPS_222222222223",
    "DXVAHD_ITELECINE_CAPS_OTHER",
    "DXVAHD_FILTER",
    "DXVAHD_FILTER_BRIGHTNESS",
    "DXVAHD_FILTER_CONTRAST",
    "DXVAHD_FILTER_HUE",
    "DXVAHD_FILTER_SATURATION",
    "DXVAHD_FILTER_NOISE_REDUCTION",
    "DXVAHD_FILTER_EDGE_ENHANCEMENT",
    "DXVAHD_FILTER_ANAMORPHIC_SCALING",
    "DXVAHD_BLT_STATE",
    "DXVAHD_BLT_STATE_TARGET_RECT",
    "DXVAHD_BLT_STATE_BACKGROUND_COLOR",
    "DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE",
    "DXVAHD_BLT_STATE_ALPHA_FILL",
    "DXVAHD_BLT_STATE_CONSTRICTION",
    "DXVAHD_BLT_STATE_PRIVATE",
    "DXVAHD_ALPHA_FILL_MODE",
    "DXVAHD_ALPHA_FILL_MODE_OPAQUE",
    "DXVAHD_ALPHA_FILL_MODE_BACKGROUND",
    "DXVAHD_ALPHA_FILL_MODE_DESTINATION",
    "DXVAHD_ALPHA_FILL_MODE_SOURCE_STREAM",
    "DXVAHD_STREAM_STATE",
    "DXVAHD_STREAM_STATE_D3DFORMAT",
    "DXVAHD_STREAM_STATE_FRAME_FORMAT",
    "DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE",
    "DXVAHD_STREAM_STATE_OUTPUT_RATE",
    "DXVAHD_STREAM_STATE_SOURCE_RECT",
    "DXVAHD_STREAM_STATE_DESTINATION_RECT",
    "DXVAHD_STREAM_STATE_ALPHA",
    "DXVAHD_STREAM_STATE_PALETTE",
    "DXVAHD_STREAM_STATE_LUMA_KEY",
    "DXVAHD_STREAM_STATE_ASPECT_RATIO",
    "DXVAHD_STREAM_STATE_FILTER_BRIGHTNESS",
    "DXVAHD_STREAM_STATE_FILTER_CONTRAST",
    "DXVAHD_STREAM_STATE_FILTER_HUE",
    "DXVAHD_STREAM_STATE_FILTER_SATURATION",
    "DXVAHD_STREAM_STATE_FILTER_NOISE_REDUCTION",
    "DXVAHD_STREAM_STATE_FILTER_EDGE_ENHANCEMENT",
    "DXVAHD_STREAM_STATE_FILTER_ANAMORPHIC_SCALING",
    "DXVAHD_STREAM_STATE_PRIVATE",
    "DXVAHD_OUTPUT_RATE",
    "DXVAHD_OUTPUT_RATE_NORMAL",
    "DXVAHD_OUTPUT_RATE_HALF",
    "DXVAHD_OUTPUT_RATE_CUSTOM",
    "DXVAHD_RATIONAL",
    "DXVAHD_COLOR_RGBA",
    "DXVAHD_COLOR_YCbCrA",
    "DXVAHD_COLOR",
    "DXVAHD_CONTENT_DESC",
    "DXVAHD_VPDEVCAPS",
    "DXVAHD_VPCAPS",
    "DXVAHD_CUSTOM_RATE_DATA",
    "DXVAHD_FILTER_RANGE_DATA",
    "DXVAHD_BLT_STATE_TARGET_RECT_DATA",
    "DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA",
    "DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA",
    "DXVAHD_BLT_STATE_ALPHA_FILL_DATA",
    "DXVAHD_BLT_STATE_CONSTRICTION_DATA",
    "DXVAHD_BLT_STATE_PRIVATE_DATA",
    "DXVAHD_STREAM_STATE_D3DFORMAT_DATA",
    "DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA",
    "DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA",
    "DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA",
    "DXVAHD_STREAM_STATE_SOURCE_RECT_DATA",
    "DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA",
    "DXVAHD_STREAM_STATE_ALPHA_DATA",
    "DXVAHD_STREAM_STATE_PALETTE_DATA",
    "DXVAHD_STREAM_STATE_LUMA_KEY_DATA",
    "DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA",
    "DXVAHD_STREAM_STATE_FILTER_DATA",
    "DXVAHD_STREAM_STATE_PRIVATE_DATA",
    "DXVAHD_STREAM_DATA",
    "DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA",
    "IDXVAHD_Device",
    "IDXVAHD_VideoProcessor",
    "PDXVAHDSW_CreateDevice",
    "PDXVAHDSW_ProposeVideoPrivateFormat",
    "PDXVAHDSW_GetVideoProcessorDeviceCaps",
    "PDXVAHDSW_GetVideoProcessorOutputFormats",
    "PDXVAHDSW_GetVideoProcessorInputFormats",
    "PDXVAHDSW_GetVideoProcessorCaps",
    "PDXVAHDSW_GetVideoProcessorCustomRates",
    "PDXVAHDSW_GetVideoProcessorFilterRange",
    "PDXVAHDSW_DestroyDevice",
    "PDXVAHDSW_CreateVideoProcessor",
    "PDXVAHDSW_SetVideoProcessBltState",
    "PDXVAHDSW_GetVideoProcessBltStatePrivate",
    "PDXVAHDSW_SetVideoProcessStreamState",
    "PDXVAHDSW_GetVideoProcessStreamStatePrivate",
    "PDXVAHDSW_VideoProcessBltHD",
    "PDXVAHDSW_DestroyVideoProcessor",
    "DXVAHDSW_CALLBACKS",
    "PDXVAHDSW_Plugin",
    "DXVAHDETW_CREATEVIDEOPROCESSOR",
    "DXVAHDETW_VIDEOPROCESSBLTSTATE",
    "DXVAHDETW_VIDEOPROCESSSTREAMSTATE",
    "DXVAHDETW_VIDEOPROCESSBLTHD",
    "DXVAHDETW_VIDEOPROCESSBLTHD_STREAM",
    "DXVAHDETW_DESTROYVIDEOPROCESSOR",
    "PDXVAHD_CreateDevice",
    "DXVA2_ExtendedFormat",
    "DXVA2_SampleFormat",
    "DXVA2_SampleFormatMask",
    "DXVA2_SampleUnknown",
    "DXVA2_SampleProgressiveFrame",
    "DXVA2_SampleFieldInterleavedEvenFirst",
    "DXVA2_SampleFieldInterleavedOddFirst",
    "DXVA2_SampleFieldSingleEven",
    "DXVA2_SampleFieldSingleOdd",
    "DXVA2_SampleSubStream",
    "DXVA2_VideoChromaSubSampling",
    "DXVA2_VideoChromaSubsamplingMask",
    "DXVA2_VideoChromaSubsampling_Unknown",
    "DXVA2_VideoChromaSubsampling_ProgressiveChroma",
    "DXVA2_VideoChromaSubsampling_Horizontally_Cosited",
    "DXVA2_VideoChromaSubsampling_Vertically_Cosited",
    "DXVA2_VideoChromaSubsampling_Vertically_AlignedChromaPlanes",
    "DXVA2_VideoChromaSubsampling_MPEG2",
    "DXVA2_VideoChromaSubsampling_MPEG1",
    "DXVA2_VideoChromaSubsampling_DV_PAL",
    "DXVA2_VideoChromaSubsampling_Cosited",
    "DXVA2_NominalRange",
    "DXVA2_NominalRangeMask",
    "DXVA2_NominalRange_Unknown",
    "DXVA2_NominalRange_Normal",
    "DXVA2_NominalRange_Wide",
    "DXVA2_NominalRange_0_255",
    "DXVA2_NominalRange_16_235",
    "DXVA2_NominalRange_48_208",
    "DXVA2_VideoTransferMatrix",
    "DXVA2_VideoTransferMatrixMask",
    "DXVA2_VideoTransferMatrix_Unknown",
    "DXVA2_VideoTransferMatrix_BT709",
    "DXVA2_VideoTransferMatrix_BT601",
    "DXVA2_VideoTransferMatrix_SMPTE240M",
    "DXVA2_VideoLighting",
    "DXVA2_VideoLightingMask",
    "DXVA2_VideoLighting_Unknown",
    "DXVA2_VideoLighting_bright",
    "DXVA2_VideoLighting_office",
    "DXVA2_VideoLighting_dim",
    "DXVA2_VideoLighting_dark",
    "DXVA2_VideoPrimaries",
    "DXVA2_VideoPrimariesMask",
    "DXVA2_VideoPrimaries_Unknown",
    "DXVA2_VideoPrimaries_reserved",
    "DXVA2_VideoPrimaries_BT709",
    "DXVA2_VideoPrimaries_BT470_2_SysM",
    "DXVA2_VideoPrimaries_BT470_2_SysBG",
    "DXVA2_VideoPrimaries_SMPTE170M",
    "DXVA2_VideoPrimaries_SMPTE240M",
    "DXVA2_VideoPrimaries_EBU3213",
    "DXVA2_VideoPrimaries_SMPTE_C",
    "DXVA2_VideoTransferFunction",
    "DXVA2_VideoTransFuncMask",
    "DXVA2_VideoTransFunc_Unknown",
    "DXVA2_VideoTransFunc_10",
    "DXVA2_VideoTransFunc_18",
    "DXVA2_VideoTransFunc_20",
    "DXVA2_VideoTransFunc_22",
    "DXVA2_VideoTransFunc_709",
    "DXVA2_VideoTransFunc_240M",
    "DXVA2_VideoTransFunc_sRGB",
    "DXVA2_VideoTransFunc_28",
    "DXVA2_Frequency",
    "DXVA2_VideoDesc",
    "DXVA2_DeinterlaceTech",
    "DXVA2_DeinterlaceTech_Unknown",
    "DXVA2_DeinterlaceTech_BOBLineReplicate",
    "DXVA2_DeinterlaceTech_BOBVerticalStretch",
    "DXVA2_DeinterlaceTech_BOBVerticalStretch4Tap",
    "DXVA2_DeinterlaceTech_MedianFiltering",
    "DXVA2_DeinterlaceTech_EdgeFiltering",
    "DXVA2_DeinterlaceTech_FieldAdaptive",
    "DXVA2_DeinterlaceTech_PixelAdaptive",
    "DXVA2_DeinterlaceTech_MotionVectorSteered",
    "DXVA2_DeinterlaceTech_InverseTelecine",
    "DXVA2_DeinterlaceTech_Mask",
    "DXVA2_FilterType",
    "DXVA2_NoiseFilterLumaLevel",
    "DXVA2_NoiseFilterLumaThreshold",
    "DXVA2_NoiseFilterLumaRadius",
    "DXVA2_NoiseFilterChromaLevel",
    "DXVA2_NoiseFilterChromaThreshold",
    "DXVA2_NoiseFilterChromaRadius",
    "DXVA2_DetailFilterLumaLevel",
    "DXVA2_DetailFilterLumaThreshold",
    "DXVA2_DetailFilterLumaRadius",
    "DXVA2_DetailFilterChromaLevel",
    "DXVA2_DetailFilterChromaThreshold",
    "DXVA2_DetailFilterChromaRadius",
    "DXVA2_NoiseFilterTech",
    "DXVA2_NoiseFilterTech_Unsupported",
    "DXVA2_NoiseFilterTech_Unknown",
    "DXVA2_NoiseFilterTech_Median",
    "DXVA2_NoiseFilterTech_Temporal",
    "DXVA2_NoiseFilterTech_BlockNoise",
    "DXVA2_NoiseFilterTech_MosquitoNoise",
    "DXVA2_NoiseFilterTech_Mask",
    "DXVA2_DetailFilterTech",
    "DXVA2_DetailFilterTech_Unsupported",
    "DXVA2_DetailFilterTech_Unknown",
    "DXVA2_DetailFilterTech_Edge",
    "DXVA2_DetailFilterTech_Sharpening",
    "DXVA2_DetailFilterTech_Mask",
    "DXVA2_ProcAmp",
    "DXVA2_ProcAmp_None",
    "DXVA2_ProcAmp_Brightness",
    "DXVA2_ProcAmp_Contrast",
    "DXVA2_ProcAmp_Hue",
    "DXVA2_ProcAmp_Saturation",
    "DXVA2_ProcAmp_Mask",
    "DXVA2_VideoProcess",
    "DXVA2_VideoProcess_None",
    "DXVA2_VideoProcess_YUV2RGB",
    "DXVA2_VideoProcess_StretchX",
    "DXVA2_VideoProcess_StretchY",
    "DXVA2_VideoProcess_AlphaBlend",
    "DXVA2_VideoProcess_SubRects",
    "DXVA2_VideoProcess_SubStreams",
    "DXVA2_VideoProcess_SubStreamsExtended",
    "DXVA2_VideoProcess_YUV2RGBExtended",
    "DXVA2_VideoProcess_AlphaBlendExtended",
    "DXVA2_VideoProcess_Constriction",
    "DXVA2_VideoProcess_NoiseFilter",
    "DXVA2_VideoProcess_DetailFilter",
    "DXVA2_VideoProcess_PlanarAlpha",
    "DXVA2_VideoProcess_LinearScaling",
    "DXVA2_VideoProcess_GammaCompensated",
    "DXVA2_VideoProcess_MaintainsOriginalFieldData",
    "DXVA2_VideoProcess_Mask",
    "DXVA2_VPDev",
    "DXVA2_VPDev_HardwareDevice",
    "DXVA2_VPDev_EmulatedDXVA1",
    "DXVA2_VPDev_SoftwareDevice",
    "DXVA2_VPDev_Mask",
    "DXVA2_SampleData",
    "DXVA2_SampleData_RFF",
    "DXVA2_SampleData_TFF",
    "DXVA2_SampleData_RFF_TFF_Present",
    "DXVA2_SampleData_Mask",
    "DXVA2_DestData",
    "DXVA2_DestData_RFF",
    "DXVA2_DestData_TFF",
    "DXVA2_DestData_RFF_TFF_Present",
    "DXVA2_DestData_Mask",
    "DXVA2_VideoProcessorCaps",
    "DXVA2_Fixed32",
    "DXVA2_AYUVSample8",
    "DXVA2_AYUVSample16",
    "DXVA2_VideoSample",
    "DXVA2_ValueRange",
    "DXVA2_ProcAmpValues",
    "DXVA2_FilterValues",
    "DXVA2_VideoProcessBltParams",
    "DXVA2_BufferfType",
    "DXVA2_PictureParametersBufferType",
    "DXVA2_MacroBlockControlBufferType",
    "DXVA2_ResidualDifferenceBufferType",
    "DXVA2_DeblockingControlBufferType",
    "DXVA2_InverseQuantizationMatrixBufferType",
    "DXVA2_SliceControlBufferType",
    "DXVA2_BitStreamDateBufferType",
    "DXVA2_MotionVectorBuffer",
    "DXVA2_FilmGrainBuffer",
    "DXVA2_VideoRenderTargetType",
    "DXVA2_VideoDecoderRenderTarget",
    "DXVA2_VideoProcessorRenderTarget",
    "DXVA2_VideoSoftwareRenderTarget",
    "DXVA2_ConfigPictureDecode",
    "DXVA2_DecodeBufferDesc",
    "DXVA2_AES_CTR_IV",
    "DXVA2_DecodeExtensionData",
    "DXVA2_DecodeExecuteParams",
    "IDirect3DDeviceManager9",
    "IDirectXVideoAccelerationService",
    "IDirectXVideoDecoderService",
    "IDirectXVideoProcessorService",
    "IDirectXVideoDecoder",
    "IDirectXVideoProcessor",
    "DXVA2_SurfaceType",
    "DXVA2_SurfaceType_DecoderRenderTarget",
    "DXVA2_SurfaceType_ProcessorRenderTarget",
    "DXVA2_SurfaceType_D3DRenderTargetTexture",
    "IDirectXVideoMemoryConfiguration",
    "OPM_TYPE",
    "OPM_OMAC_SIZE",
    "OPM_128_BIT_RANDOM_NUMBER_SIZE",
    "OPM_ENCRYPTED_INITIALIZATION_PARAMETERS_SIZE",
    "OPM_CONFIGURE_SETTING_DATA_SIZE",
    "OPM_GET_INFORMATION_PARAMETERS_SIZE",
    "OPM_REQUESTED_INFORMATION_SIZE",
    "OPM_HDCP_KEY_SELECTION_VECTOR_SIZE",
    "OPM_PROTECTION_TYPE_SIZE",
    "OPM_BUS_TYPE_MASK",
    "OPM_BUS_IMPLEMENTATION_MODIFIER_MASK",
    "OPM_VIDEO_OUTPUT_SEMANTICS",
    "OPM_VOS_COPP_SEMANTICS",
    "OPM_VOS_OPM_SEMANTICS",
    "OPM_VOS_OPM_INDIRECT_DISPLAY",
    "OPM_HDCP_FLAGS",
    "OPM_HDCP_FLAG_NONE",
    "OPM_HDCP_FLAG_REPEATER",
    "OPM_STATUS",
    "OPM_STATUS_NORMAL",
    "OPM_STATUS_LINK_LOST",
    "OPM_STATUS_RENEGOTIATION_REQUIRED",
    "OPM_STATUS_TAMPERING_DETECTED",
    "OPM_STATUS_REVOKED_HDCP_DEVICE_ATTACHED",
    "PM_CONNECTOR_TYPE",
    "OPM_CONNECTOR_TYPE_OTHER",
    "OPM_CONNECTOR_TYPE_VGA",
    "OPM_CONNECTOR_TYPE_SVIDEO",
    "OPM_CONNECTOR_TYPE_COMPOSITE_VIDEO",
    "OPM_CONNECTOR_TYPE_COMPONENT_VIDEO",
    "OPM_CONNECTOR_TYPE_DVI",
    "OPM_CONNECTOR_TYPE_HDMI",
    "OPM_CONNECTOR_TYPE_LVDS",
    "OPM_CONNECTOR_TYPE_D_JPN",
    "OPM_CONNECTOR_TYPE_SDI",
    "OPM_CONNECTOR_TYPE_DISPLAYPORT_EXTERNAL",
    "OPM_CONNECTOR_TYPE_DISPLAYPORT_EMBEDDED",
    "OPM_CONNECTOR_TYPE_UDI_EXTERNAL",
    "OPM_CONNECTOR_TYPE_UDI_EMBEDDED",
    "OPM_CONNECTOR_TYPE_RESERVED",
    "OPM_CONNECTOR_TYPE_MIRACAST",
    "OPM_CONNECTOR_TYPE_TRANSPORT_AGNOSTIC_DIGITAL_MODE_A",
    "OPM_CONNECTOR_TYPE_TRANSPORT_AGNOSTIC_DIGITAL_MODE_B",
    "OPM_COPP_COMPATIBLE_CONNECTOR_TYPE_INTERNAL",
    "OPM_DVI_CHARACTERISTIC",
    "OPM_DVI_CHARACTERISTIC_1_0",
    "OPM_DVI_CHARACTERISTIC_1_1_OR_ABOVE",
    "OPM_OUTPUT_HARDWARE_PROTECTION",
    "OPM_OUTPUT_HARDWARE_PROTECTION_NOT_SUPPORTED",
    "OPM_OUTPUT_HARDWARE_PROTECTION_SUPPORTED",
    "OPM_BUS_TYPE",
    "OPM_BUS_TYPE_OTHER",
    "OPM_BUS_TYPE_PCI",
    "OPM_BUS_TYPE_PCIX",
    "OPM_BUS_TYPE_PCIEXPRESS",
    "OPM_BUS_TYPE_AGP",
    "OPM_BUS_IMPLEMENTATION_MODIFIER_INSIDE_OF_CHIPSET",
    "OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP",
    "OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET",
    "OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR",
    "OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE",
    "OPM_BUS_IMPLEMENTATION_MODIFIER_NON_STANDARD",
    "OPM_COPP_COMPATIBLE_BUS_TYPE_INTEGRATED",
    "OPM_DPCP_PROTECTION_LEVEL",
    "OPM_DPCP_OFF",
    "OPM_DPCP_ON",
    "OPM_DPCP_FORCE_ULONG",
    "OPM_HDCP_PROTECTION_LEVEL",
    "OPM_HDCP_OFF",
    "OPM_HDCP_ON",
    "OPM_HDCP_FORCE_ULONG",
    "OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL",
    "OPM_TYPE_ENFORCEMENT_HDCP_OFF",
    "OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_NO_TYPE_RESTRICTION",
    "OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_TYPE1_RESTRICTION",
    "OPM_TYPE_ENFORCEMENT_HDCP_FORCE_ULONG",
    "OPM_CGMSA",
    "OPM_CGMSA_OFF",
    "OPM_CGMSA_COPY_FREELY",
    "OPM_CGMSA_COPY_NO_MORE",
    "OPM_CGMSA_COPY_ONE_GENERATION",
    "OPM_CGMSA_COPY_NEVER",
    "OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED",
    "OPM_ACP_PROTECTION_LEVEL",
    "OPM_ACP_OFF",
    "OPM_ACP_LEVEL_ONE",
    "OPM_ACP_LEVEL_TWO",
    "OPM_ACP_LEVEL_THREE",
    "OPM_ACP_FORCE_ULONG",
    "OPM_PROTECTION_TYPE",
    "OPM_PROTECTION_TYPE_OTHER",
    "OPM_PROTECTION_TYPE_NONE",
    "OPM_PROTECTION_TYPE_COPP_COMPATIBLE_HDCP",
    "OPM_PROTECTION_TYPE_ACP",
    "OPM_PROTECTION_TYPE_CGMSA",
    "OPM_PROTECTION_TYPE_HDCP",
    "OPM_PROTECTION_TYPE_DPCP",
    "OPM_PROTECTION_TYPE_TYPE_ENFORCEMENT_HDCP",
    "OPM_PROTECTION_STANDARD_TYPE",
    "OPM_PROTECTION_STANDARD_OTHER",
    "OPM_PROTECTION_STANDARD_NONE",
    "OPM_PROTECTION_STANDARD_IEC61880_525I",
    "OPM_PROTECTION_STANDARD_IEC61880_2_525I",
    "OPM_PROTECTION_STANDARD_IEC62375_625P",
    "OPM_PROTECTION_STANDARD_EIA608B_525",
    "OPM_PROTECTION_STANDARD_EN300294_625I",
    "OPM_PROTECTION_STANDARD_CEA805A_TYPEA_525P",
    "OPM_PROTECTION_STANDARD_CEA805A_TYPEA_750P",
    "OPM_PROTECTION_STANDARD_CEA805A_TYPEA_1125I",
    "OPM_PROTECTION_STANDARD_CEA805A_TYPEB_525P",
    "OPM_PROTECTION_STANDARD_CEA805A_TYPEB_750P",
    "OPM_PROTECTION_STANDARD_CEA805A_TYPEB_1125I",
    "OPM_PROTECTION_STANDARD_ARIBTRB15_525I",
    "OPM_PROTECTION_STANDARD_ARIBTRB15_525P",
    "OPM_PROTECTION_STANDARD_ARIBTRB15_750P",
    "OPM_PROTECTION_STANDARD_ARIBTRB15_1125I",
    "OPM_IMAGE_ASPECT_RATIO_EN300294",
    "OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_4_BY_3",
    "OPM_ASPECT_RATIO_EN300294_BOX_14_BY_9_CENTER",
    "OPM_ASPECT_RATIO_EN300294_BOX_14_BY_9_TOP",
    "OPM_ASPECT_RATIO_EN300294_BOX_16_BY_9_CENTER",
    "OPM_ASPECT_RATIO_EN300294_BOX_16_BY_9_TOP",
    "OPM_ASPECT_RATIO_EN300294_BOX_GT_16_BY_9_CENTER",
    "OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_4_BY_3_PROTECTED_CENTER",
    "OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_16_BY_9_ANAMORPHIC",
    "OPM_ASPECT_RATIO_FORCE_ULONG",
    "OPM_RANDOM_NUMBER",
    "OPM_OMAC",
    "OPM_ENCRYPTED_INITIALIZATION_PARAMETERS",
    "OPM_GET_INFO_PARAMETERS",
    "OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS",
    "OPM_HDCP_KEY_SELECTION_VECTOR",
    "OPM_CONNECTED_HDCP_DEVICE_INFORMATION",
    "OPM_REQUESTED_INFORMATION",
    "OPM_STANDARD_INFORMATION",
    "OPM_ACTUAL_OUTPUT_FORMAT",
    "OPM_ACP_AND_CGMSA_SIGNALING",
    "OPM_OUTPUT_ID_DATA",
    "OPM_CONFIGURE_PARAMETERS",
    "OPM_SET_PROTECTION_LEVEL_PARAMETERS",
    "OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS",
    "OPM_SET_HDCP_SRM_PARAMETERS",
    "OPM_GET_CODEC_INFO_PARAMETERS",
    "OPM_GET_CODEC_INFO_INFORMATION",
    "IOPMVideoOutput",
    "KSPROPSETID_OPMVideoOutput",
    "KSMETHOD_OPMVIDEOOUTPUT",
    "KSMETHOD_OPMVIDEOOUTPUT_STARTINITIALIZATION",
    "KSMETHOD_OPMVIDEOOUTPUT_FINISHINITIALIZATION",
    "KSMETHOD_OPMVIDEOOUTPUT_GETINFORMATION",
    "MF_ATTRIBUTE_TYPE",
    "MF_ATTRIBUTE_UINT32",
    "MF_ATTRIBUTE_UINT64",
    "MF_ATTRIBUTE_DOUBLE",
    "MF_ATTRIBUTE_GUID",
    "MF_ATTRIBUTE_STRING",
    "MF_ATTRIBUTE_BLOB",
    "MF_ATTRIBUTE_IUNKNOWN",
    "MF_ATTRIBUTES_MATCH_TYPE",
    "MF_ATTRIBUTES_MATCH_OUR_ITEMS",
    "MF_ATTRIBUTES_MATCH_THEIR_ITEMS",
    "MF_ATTRIBUTES_MATCH_ALL_ITEMS",
    "MF_ATTRIBUTES_MATCH_INTERSECTION",
    "MF_ATTRIBUTES_MATCH_SMALLER",
    "IMFAttributes",
    "MF_ATTRIBUTE_SERIALIZE_OPTIONS",
    "MF_ATTRIBUTE_SERIALIZE_UNKNOWN_BYREF",
    "IMFMediaBuffer",
    "IMFSample",
    "IMF2DBuffer",
    "MF2DBuffer_LockFlags",
    "MF2DBuffer_LockFlags_LockTypeMask",
    "MF2DBuffer_LockFlags_Read",
    "MF2DBuffer_LockFlags_Write",
    "MF2DBuffer_LockFlags_ReadWrite",
    "MF2DBuffer_LockFlags_ForceDWORD",
    "IMF2DBuffer2",
    "IMFDXGIBuffer",
    "IMFMediaType",
    "IMFAudioMediaType",
    "MFT_REGISTER_TYPE_INFO",
    "MFVideoInterlaceMode",
    "MFVideoInterlace_Unknown",
    "MFVideoInterlace_Progressive",
    "MFVideoInterlace_FieldInterleavedUpperFirst",
    "MFVideoInterlace_FieldInterleavedLowerFirst",
    "MFVideoInterlace_FieldSingleUpper",
    "MFVideoInterlace_FieldSingleLower",
    "MFVideoInterlace_MixedInterlaceOrProgressive",
    "MFVideoInterlace_Last",
    "MFVideoInterlace_ForceDWORD",
    "MFVideoTransferFunction",
    "MFVideoTransFunc_Unknown",
    "MFVideoTransFunc_10",
    "MFVideoTransFunc_18",
    "MFVideoTransFunc_20",
    "MFVideoTransFunc_22",
    "MFVideoTransFunc_709",
    "MFVideoTransFunc_240M",
    "MFVideoTransFunc_sRGB",
    "MFVideoTransFunc_28",
    "MFVideoTransFunc_Log_100",
    "MFVideoTransFunc_Log_316",
    "MFVideoTransFunc_709_sym",
    "MFVideoTransFunc_2020_const",
    "MFVideoTransFunc_2020",
    "MFVideoTransFunc_26",
    "MFVideoTransFunc_2084",
    "MFVideoTransFunc_HLG",
    "MFVideoTransFunc_10_rel",
    "MFVideoTransFunc_Last",
    "MFVideoTransFunc_ForceDWORD",
    "MFVideoPrimaries",
    "MFVideoPrimaries_Unknown",
    "MFVideoPrimaries_reserved",
    "MFVideoPrimaries_BT709",
    "MFVideoPrimaries_BT470_2_SysM",
    "MFVideoPrimaries_BT470_2_SysBG",
    "MFVideoPrimaries_SMPTE170M",
    "MFVideoPrimaries_SMPTE240M",
    "MFVideoPrimaries_EBU3213",
    "MFVideoPrimaries_SMPTE_C",
    "MFVideoPrimaries_BT2020",
    "MFVideoPrimaries_XYZ",
    "MFVideoPrimaries_DCI_P3",
    "MFVideoPrimaries_ACES",
    "MFVideoPrimaries_Last",
    "MFVideoPrimaries_ForceDWORD",
    "MFVideoLighting",
    "MFVideoLighting_Unknown",
    "MFVideoLighting_bright",
    "MFVideoLighting_office",
    "MFVideoLighting_dim",
    "MFVideoLighting_dark",
    "MFVideoLighting_Last",
    "MFVideoLighting_ForceDWORD",
    "MFVideoTransferMatrix",
    "MFVideoTransferMatrix_Unknown",
    "MFVideoTransferMatrix_BT709",
    "MFVideoTransferMatrix_BT601",
    "MFVideoTransferMatrix_SMPTE240M",
    "MFVideoTransferMatrix_BT2020_10",
    "MFVideoTransferMatrix_BT2020_12",
    "MFVideoTransferMatrix_Last",
    "MFVideoTransferMatrix_ForceDWORD",
    "MFVideoChromaSubsampling",
    "MFVideoChromaSubsampling_Unknown",
    "MFVideoChromaSubsampling_ProgressiveChroma",
    "MFVideoChromaSubsampling_Horizontally_Cosited",
    "MFVideoChromaSubsampling_Vertically_Cosited",
    "MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes",
    "MFVideoChromaSubsampling_MPEG2",
    "MFVideoChromaSubsampling_MPEG1",
    "MFVideoChromaSubsampling_DV_PAL",
    "MFVideoChromaSubsampling_Cosited",
    "MFVideoChromaSubsampling_Last",
    "MFVideoChromaSubsampling_ForceDWORD",
    "MFNominalRange",
    "MFNominalRange_Unknown",
    "MFNominalRange_Normal",
    "MFNominalRange_Wide",
    "MFNominalRange_0_255",
    "MFNominalRange_16_235",
    "MFNominalRange_48_208",
    "MFNominalRange_64_127",
    "MFNominalRange_Last",
    "MFNominalRange_ForceDWORD",
    "MFVideoFlags",
    "MFVideoFlag_PAD_TO_Mask",
    "MFVideoFlag_PAD_TO_None",
    "MFVideoFlag_PAD_TO_4x3",
    "MFVideoFlag_PAD_TO_16x9",
    "MFVideoFlag_SrcContentHintMask",
    "MFVideoFlag_SrcContentHintNone",
    "MFVideoFlag_SrcContentHint16x9",
    "MFVideoFlag_SrcContentHint235_1",
    "MFVideoFlag_AnalogProtected",
    "MFVideoFlag_DigitallyProtected",
    "MFVideoFlag_ProgressiveContent",
    "MFVideoFlag_FieldRepeatCountMask",
    "MFVideoFlag_FieldRepeatCountShift",
    "MFVideoFlag_ProgressiveSeqReset",
    "MFVideoFlag_PanScanEnabled",
    "MFVideoFlag_LowerFieldFirst",
    "MFVideoFlag_BottomUpLinearRep",
    "MFVideoFlags_DXVASurface",
    "MFVideoFlags_RenderTargetSurface",
    "MFVideoFlags_ForceQWORD",
    "MFRatio",
    "MFOffset",
    "MFVideoArea",
    "MFVideoInfo",
    "MFAYUVSample",
    "MFARGB",
    "MFPaletteEntry",
    "MFVideoSurfaceInfo",
    "MFVideoCompressedInfo",
    "MFVIDEOFORMAT",
    "MFStandardVideoFormat",
    "MFStdVideoFormat_reserved",
    "MFStdVideoFormat_NTSC",
    "MFStdVideoFormat_PAL",
    "MFStdVideoFormat_DVD_NTSC",
    "MFStdVideoFormat_DVD_PAL",
    "MFStdVideoFormat_DV_PAL",
    "MFStdVideoFormat_DV_NTSC",
    "MFStdVideoFormat_ATSC_SD480i",
    "MFStdVideoFormat_ATSC_HD1080i",
    "MFStdVideoFormat_ATSC_HD720p",
    "IMFVideoMediaType",
    "IMFAsyncResult",
    "IMFAsyncCallback",
    "IMFAsyncCallbackLogging",
    "MF_EVENT_TYPE",
    "MF_EVENT_TYPE_MEUnknown",
    "MF_EVENT_TYPE_MEError",
    "MF_EVENT_TYPE_MEExtendedType",
    "MF_EVENT_TYPE_MENonFatalError",
    "MF_EVENT_TYPE_MEGenericV1Anchor",
    "MF_EVENT_TYPE_MESessionUnknown",
    "MF_EVENT_TYPE_MESessionTopologySet",
    "MF_EVENT_TYPE_MESessionTopologiesCleared",
    "MF_EVENT_TYPE_MESessionStarted",
    "MF_EVENT_TYPE_MESessionPaused",
    "MF_EVENT_TYPE_MESessionStopped",
    "MF_EVENT_TYPE_MESessionClosed",
    "MF_EVENT_TYPE_MESessionEnded",
    "MF_EVENT_TYPE_MESessionRateChanged",
    "MF_EVENT_TYPE_MESessionScrubSampleComplete",
    "MF_EVENT_TYPE_MESessionCapabilitiesChanged",
    "MF_EVENT_TYPE_MESessionTopologyStatus",
    "MF_EVENT_TYPE_MESessionNotifyPresentationTime",
    "MF_EVENT_TYPE_MENewPresentation",
    "MF_EVENT_TYPE_MELicenseAcquisitionStart",
    "MF_EVENT_TYPE_MELicenseAcquisitionCompleted",
    "MF_EVENT_TYPE_MEIndividualizationStart",
    "MF_EVENT_TYPE_MEIndividualizationCompleted",
    "MF_EVENT_TYPE_MEEnablerProgress",
    "MF_EVENT_TYPE_MEEnablerCompleted",
    "MF_EVENT_TYPE_MEPolicyError",
    "MF_EVENT_TYPE_MEPolicyReport",
    "MF_EVENT_TYPE_MEBufferingStarted",
    "MF_EVENT_TYPE_MEBufferingStopped",
    "MF_EVENT_TYPE_MEConnectStart",
    "MF_EVENT_TYPE_MEConnectEnd",
    "MF_EVENT_TYPE_MEReconnectStart",
    "MF_EVENT_TYPE_MEReconnectEnd",
    "MF_EVENT_TYPE_MERendererEvent",
    "MF_EVENT_TYPE_MESessionStreamSinkFormatChanged",
    "MF_EVENT_TYPE_MESessionV1Anchor",
    "MF_EVENT_TYPE_MESourceUnknown",
    "MF_EVENT_TYPE_MESourceStarted",
    "MF_EVENT_TYPE_MEStreamStarted",
    "MF_EVENT_TYPE_MESourceSeeked",
    "MF_EVENT_TYPE_MEStreamSeeked",
    "MF_EVENT_TYPE_MENewStream",
    "MF_EVENT_TYPE_MEUpdatedStream",
    "MF_EVENT_TYPE_MESourceStopped",
    "MF_EVENT_TYPE_MEStreamStopped",
    "MF_EVENT_TYPE_MESourcePaused",
    "MF_EVENT_TYPE_MEStreamPaused",
    "MF_EVENT_TYPE_MEEndOfPresentation",
    "MF_EVENT_TYPE_MEEndOfStream",
    "MF_EVENT_TYPE_MEMediaSample",
    "MF_EVENT_TYPE_MEStreamTick",
    "MF_EVENT_TYPE_MEStreamThinMode",
    "MF_EVENT_TYPE_MEStreamFormatChanged",
    "MF_EVENT_TYPE_MESourceRateChanged",
    "MF_EVENT_TYPE_MEEndOfPresentationSegment",
    "MF_EVENT_TYPE_MESourceCharacteristicsChanged",
    "MF_EVENT_TYPE_MESourceRateChangeRequested",
    "MF_EVENT_TYPE_MESourceMetadataChanged",
    "MF_EVENT_TYPE_MESequencerSourceTopologyUpdated",
    "MF_EVENT_TYPE_MESourceV1Anchor",
    "MF_EVENT_TYPE_MESinkUnknown",
    "MF_EVENT_TYPE_MEStreamSinkStarted",
    "MF_EVENT_TYPE_MEStreamSinkStopped",
    "MF_EVENT_TYPE_MEStreamSinkPaused",
    "MF_EVENT_TYPE_MEStreamSinkRateChanged",
    "MF_EVENT_TYPE_MEStreamSinkRequestSample",
    "MF_EVENT_TYPE_MEStreamSinkMarker",
    "MF_EVENT_TYPE_MEStreamSinkPrerolled",
    "MF_EVENT_TYPE_MEStreamSinkScrubSampleComplete",
    "MF_EVENT_TYPE_MEStreamSinkFormatChanged",
    "MF_EVENT_TYPE_MEStreamSinkDeviceChanged",
    "MF_EVENT_TYPE_MEQualityNotify",
    "MF_EVENT_TYPE_MESinkInvalidated",
    "MF_EVENT_TYPE_MEAudioSessionNameChanged",
    "MF_EVENT_TYPE_MEAudioSessionVolumeChanged",
    "MF_EVENT_TYPE_MEAudioSessionDeviceRemoved",
    "MF_EVENT_TYPE_MEAudioSessionServerShutdown",
    "MF_EVENT_TYPE_MEAudioSessionGroupingParamChanged",
    "MF_EVENT_TYPE_MEAudioSessionIconChanged",
    "MF_EVENT_TYPE_MEAudioSessionFormatChanged",
    "MF_EVENT_TYPE_MEAudioSessionDisconnected",
    "MF_EVENT_TYPE_MEAudioSessionExclusiveModeOverride",
    "MF_EVENT_TYPE_MESinkV1Anchor",
    "MF_EVENT_TYPE_MECaptureAudioSessionVolumeChanged",
    "MF_EVENT_TYPE_MECaptureAudioSessionDeviceRemoved",
    "MF_EVENT_TYPE_MECaptureAudioSessionFormatChanged",
    "MF_EVENT_TYPE_MECaptureAudioSessionDisconnected",
    "MF_EVENT_TYPE_MECaptureAudioSessionExclusiveModeOverride",
    "MF_EVENT_TYPE_MECaptureAudioSessionServerShutdown",
    "MF_EVENT_TYPE_MESinkV2Anchor",
    "MF_EVENT_TYPE_METrustUnknown",
    "MF_EVENT_TYPE_MEPolicyChanged",
    "MF_EVENT_TYPE_MEContentProtectionMessage",
    "MF_EVENT_TYPE_MEPolicySet",
    "MF_EVENT_TYPE_METrustV1Anchor",
    "MF_EVENT_TYPE_MEWMDRMLicenseBackupCompleted",
    "MF_EVENT_TYPE_MEWMDRMLicenseBackupProgress",
    "MF_EVENT_TYPE_MEWMDRMLicenseRestoreCompleted",
    "MF_EVENT_TYPE_MEWMDRMLicenseRestoreProgress",
    "MF_EVENT_TYPE_MEWMDRMLicenseAcquisitionCompleted",
    "MF_EVENT_TYPE_MEWMDRMIndividualizationCompleted",
    "MF_EVENT_TYPE_MEWMDRMIndividualizationProgress",
    "MF_EVENT_TYPE_MEWMDRMProximityCompleted",
    "MF_EVENT_TYPE_MEWMDRMLicenseStoreCleaned",
    "MF_EVENT_TYPE_MEWMDRMRevocationDownloadCompleted",
    "MF_EVENT_TYPE_MEWMDRMV1Anchor",
    "MF_EVENT_TYPE_METransformUnknown",
    "MF_EVENT_TYPE_METransformNeedInput",
    "MF_EVENT_TYPE_METransformHaveOutput",
    "MF_EVENT_TYPE_METransformDrainComplete",
    "MF_EVENT_TYPE_METransformMarker",
    "MF_EVENT_TYPE_METransformInputStreamStateChanged",
    "MF_EVENT_TYPE_MEByteStreamCharacteristicsChanged",
    "MF_EVENT_TYPE_MEVideoCaptureDeviceRemoved",
    "MF_EVENT_TYPE_MEVideoCaptureDevicePreempted",
    "MF_EVENT_TYPE_MEStreamSinkFormatInvalidated",
    "MF_EVENT_TYPE_MEEncodingParameters",
    "MF_EVENT_TYPE_MEContentProtectionMetadata",
    "MF_EVENT_TYPE_MEDeviceThermalStateChanged",
    "MF_EVENT_TYPE_MEReservedMax",
    "IMFMediaEvent",
    "IMFMediaEventGenerator",
    "IMFRemoteAsyncCallback",
    "MFBYTESTREAM_SEEK_ORIGIN",
    "MFBYTESTREAM_SEEK_ORIGIN_msoBegin",
    "MFBYTESTREAM_SEEK_ORIGIN_msoCurrent",
    "IMFByteStream",
    "IMFByteStreamProxyClassFactory",
    "MF_FILE_ACCESSMODE",
    "MF_ACCESSMODE_READ",
    "MF_ACCESSMODE_WRITE",
    "MF_ACCESSMODE_READWRITE",
    "MF_FILE_OPENMODE",
    "MF_OPENMODE_FAIL_IF_NOT_EXIST",
    "MF_OPENMODE_FAIL_IF_EXIST",
    "MF_OPENMODE_RESET_IF_EXIST",
    "MF_OPENMODE_APPEND_IF_EXIST",
    "MF_OPENMODE_DELETE_IF_EXIST",
    "MF_FILE_FLAGS",
    "MF_FILEFLAGS_NONE",
    "MF_FILEFLAGS_NOBUFFERING",
    "MF_FILEFLAGS_ALLOW_WRITE_SHARING",
    "IMFSampleOutputStream",
    "IMFCollection",
    "IMFMediaEventQueue",
    "IMFActivate",
    "IMFPluginControl",
    "MF_PLUGIN_CONTROL_POLICY",
    "MF_PLUGIN_CONTROL_POLICY_USE_ALL_PLUGINS",
    "MF_PLUGIN_CONTROL_POLICY_USE_APPROVED_PLUGINS",
    "MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS",
    "MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS_EDGEMODE",
    "IMFPluginControl2",
    "IMFDXGIDeviceManager",
    "MF_STREAM_STATE",
    "MF_STREAM_STATE_STOPPED",
    "MF_STREAM_STATE_PAUSED",
    "MF_STREAM_STATE_RUNNING",
    "IMFMuxStreamAttributesManager",
    "IMFMuxStreamMediaTypeManager",
    "IMFMuxStreamSampleManager",
    "IMFSecureBuffer",
    "_MFT_INPUT_DATA_BUFFER_FLAGS",
    "MFT_INPUT_DATA_BUFFER_PLACEHOLDER",
    "_MFT_OUTPUT_DATA_BUFFER_FLAGS",
    "MFT_OUTPUT_DATA_BUFFER_INCOMPLETE",
    "MFT_OUTPUT_DATA_BUFFER_FORMAT_CHANGE",
    "MFT_OUTPUT_DATA_BUFFER_STREAM_END",
    "MFT_OUTPUT_DATA_BUFFER_NO_SAMPLE",
    "_MFT_INPUT_STATUS_FLAGS",
    "MFT_INPUT_STATUS_ACCEPT_DATA",
    "_MFT_OUTPUT_STATUS_FLAGS",
    "MFT_OUTPUT_STATUS_SAMPLE_READY",
    "_MFT_INPUT_STREAM_INFO_FLAGS",
    "MFT_INPUT_STREAM_WHOLE_SAMPLES",
    "MFT_INPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER",
    "MFT_INPUT_STREAM_FIXED_SAMPLE_SIZE",
    "MFT_INPUT_STREAM_HOLDS_BUFFERS",
    "MFT_INPUT_STREAM_DOES_NOT_ADDREF",
    "MFT_INPUT_STREAM_REMOVABLE",
    "MFT_INPUT_STREAM_OPTIONAL",
    "MFT_INPUT_STREAM_PROCESSES_IN_PLACE",
    "_MFT_OUTPUT_STREAM_INFO_FLAGS",
    "MFT_OUTPUT_STREAM_WHOLE_SAMPLES",
    "MFT_OUTPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER",
    "MFT_OUTPUT_STREAM_FIXED_SAMPLE_SIZE",
    "MFT_OUTPUT_STREAM_DISCARDABLE",
    "MFT_OUTPUT_STREAM_OPTIONAL",
    "MFT_OUTPUT_STREAM_PROVIDES_SAMPLES",
    "MFT_OUTPUT_STREAM_CAN_PROVIDE_SAMPLES",
    "MFT_OUTPUT_STREAM_LAZY_READ",
    "MFT_OUTPUT_STREAM_REMOVABLE",
    "_MFT_SET_TYPE_FLAGS",
    "MFT_SET_TYPE_TEST_ONLY",
    "_MFT_PROCESS_OUTPUT_FLAGS",
    "MFT_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER",
    "MFT_PROCESS_OUTPUT_REGENERATE_LAST_OUTPUT",
    "_MFT_PROCESS_OUTPUT_STATUS",
    "MFT_PROCESS_OUTPUT_STATUS_NEW_STREAMS",
    "MFT_DRAIN_TYPE",
    "MFT_DRAIN_PRODUCE_TAILS",
    "MFT_DRAIN_NO_TAILS",
    "MFT_MESSAGE_TYPE",
    "MFT_MESSAGE_COMMAND_FLUSH",
    "MFT_MESSAGE_COMMAND_DRAIN",
    "MFT_MESSAGE_SET_D3D_MANAGER",
    "MFT_MESSAGE_DROP_SAMPLES",
    "MFT_MESSAGE_COMMAND_TICK",
    "MFT_MESSAGE_NOTIFY_BEGIN_STREAMING",
    "MFT_MESSAGE_NOTIFY_END_STREAMING",
    "MFT_MESSAGE_NOTIFY_END_OF_STREAM",
    "MFT_MESSAGE_NOTIFY_START_OF_STREAM",
    "MFT_MESSAGE_NOTIFY_RELEASE_RESOURCES",
    "MFT_MESSAGE_NOTIFY_REACQUIRE_RESOURCES",
    "MFT_MESSAGE_NOTIFY_EVENT",
    "MFT_MESSAGE_COMMAND_SET_OUTPUT_STREAM_STATE",
    "MFT_MESSAGE_COMMAND_FLUSH_OUTPUT_STREAM",
    "MFT_MESSAGE_COMMAND_MARKER",
    "MFT_INPUT_STREAM_INFO",
    "MFT_OUTPUT_STREAM_INFO",
    "MFT_OUTPUT_DATA_BUFFER",
    "IMFTransform",
    "DeviceStreamState",
    "DeviceStreamState_Stop",
    "DeviceStreamState_Pause",
    "DeviceStreamState_Run",
    "DeviceStreamState_Disabled",
    "STREAM_MEDIUM",
    "MF3DVideoOutputType",
    "MF3DVideoOutputType_BaseView",
    "MF3DVideoOutputType_Stereo",
    "MFT_AUDIO_DECODER_DEGRADATION_REASON",
    "MFT_AUDIO_DECODER_DEGRADATION_REASON_NONE",
    "MFT_AUDIO_DECODER_DEGRADATION_REASON_LICENSING_REQUIREMENT",
    "MFT_AUDIO_DECODER_DEGRADATION_TYPE",
    "MFT_AUDIO_DECODER_DEGRADATION_TYPE_NONE",
    "MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX2CHANNEL",
    "MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX6CHANNEL",
    "MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX8CHANNEL",
    "MFAudioDecoderDegradationInfo",
    "MFT_STREAM_STATE_PARAM",
    "MFSESSION_SETTOPOLOGY_FLAGS",
    "MFSESSION_SETTOPOLOGY_IMMEDIATE",
    "MFSESSION_SETTOPOLOGY_NORESOLUTION",
    "MFSESSION_SETTOPOLOGY_CLEAR_CURRENT",
    "MFSESSION_GETFULLTOPOLOGY_FLAGS",
    "MFSESSION_GETFULLTOPOLOGY_CURRENT",
    "MFPMPSESSION_CREATION_FLAGS",
    "MFPMPSESSION_UNPROTECTED_PROCESS",
    "MFPMPSESSION_IN_PROCESS",
    "IMFMediaSession",
    "MF_OBJECT_TYPE",
    "MF_OBJECT_MEDIASOURCE",
    "MF_OBJECT_BYTESTREAM",
    "MF_OBJECT_INVALID",
    "MF_RESOLUTION_FLAGS",
    "MF_RESOLUTION_MEDIASOURCE",
    "MF_RESOLUTION_BYTESTREAM",
    "MF_RESOLUTION_CONTENT_DOES_NOT_HAVE_TO_MATCH_EXTENSION_OR_MIME_TYPE",
    "MF_RESOLUTION_KEEP_BYTE_STREAM_ALIVE_ON_FAIL",
    "MF_RESOLUTION_DISABLE_LOCAL_PLUGINS",
    "MF_RESOLUTION_PLUGIN_CONTROL_POLICY_APPROVED_ONLY",
    "MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY",
    "MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY_EDGEMODE",
    "MF_RESOLUTION_ENABLE_STORE_PLUGINS",
    "MF_RESOLUTION_READ",
    "MF_RESOLUTION_WRITE",
    "MF_CONNECT_METHOD",
    "MF_CONNECT_DIRECT",
    "MF_CONNECT_ALLOW_CONVERTER",
    "MF_CONNECT_ALLOW_DECODER",
    "MF_CONNECT_RESOLVE_INDEPENDENT_OUTPUTTYPES",
    "MF_CONNECT_AS_OPTIONAL",
    "MF_CONNECT_AS_OPTIONAL_BRANCH",
    "MF_TOPOLOGY_RESOLUTION_STATUS_FLAGS",
    "MF_TOPOLOGY_RESOLUTION_SUCCEEDED",
    "MF_OPTIONAL_NODE_REJECTED_MEDIA_TYPE",
    "MF_OPTIONAL_NODE_REJECTED_PROTECTED_PROCESS",
    "IMFSourceResolver",
    "MFMEDIASOURCE_CHARACTERISTICS",
    "MFMEDIASOURCE_IS_LIVE",
    "MFMEDIASOURCE_CAN_SEEK",
    "MFMEDIASOURCE_CAN_PAUSE",
    "MFMEDIASOURCE_HAS_SLOW_SEEK",
    "MFMEDIASOURCE_HAS_MULTIPLE_PRESENTATIONS",
    "MFMEDIASOURCE_CAN_SKIPFORWARD",
    "MFMEDIASOURCE_CAN_SKIPBACKWARD",
    "MFMEDIASOURCE_DOES_NOT_USE_NETWORK",
    "IMFMediaSource",
    "IMFMediaSourceEx",
    "IMFClockConsumer",
    "IMFMediaStream",
    "IMFMediaSink",
    "MFSTREAMSINK_MARKER_TYPE",
    "MFSTREAMSINK_MARKER_DEFAULT",
    "MFSTREAMSINK_MARKER_ENDOFSEGMENT",
    "MFSTREAMSINK_MARKER_TICK",
    "MFSTREAMSINK_MARKER_EVENT",
    "IMFStreamSink",
    "IMFVideoSampleAllocator",
    "IMFVideoSampleAllocatorNotify",
    "IMFVideoSampleAllocatorNotifyEx",
    "IMFVideoSampleAllocatorCallback",
    "IMFVideoSampleAllocatorEx",
    "IMFDXGIDeviceManagerSource",
    "MF_VIDEO_PROCESSOR_ROTATION",
    "ROTATION_NONE",
    "ROTATION_NORMAL",
    "MF_VIDEO_PROCESSOR_MIRROR",
    "MIRROR_NONE",
    "MIRROR_HORIZONTAL",
    "MIRROR_VERTICAL",
    "IMFVideoProcessorControl",
    "IMFVideoProcessorControl2",
    "MFVideoSphericalFormat",
    "MFVideoSphericalFormat_Unsupported",
    "MFVideoSphericalFormat_Equirectangular",
    "MFVideoSphericalFormat_CubeMap",
    "MFVideoSphericalFormat_3DMesh",
    "MFVideoSphericalProjectionMode",
    "MFVideoSphericalProjectionMode_Spherical",
    "MFVideoSphericalProjectionMode_Flat",
    "IMFVideoProcessorControl3",
    "IMFVideoRendererEffectControl",
    "IMFTopology",
    "MFTOPOLOGY_DXVA_MODE",
    "MFTOPOLOGY_DXVA_DEFAULT",
    "MFTOPOLOGY_DXVA_NONE",
    "MFTOPOLOGY_DXVA_FULL",
    "MFTOPOLOGY_HARDWARE_MODE",
    "MFTOPOLOGY_HWMODE_SOFTWARE_ONLY",
    "MFTOPOLOGY_HWMODE_USE_HARDWARE",
    "MFTOPOLOGY_HWMODE_USE_ONLY_HARDWARE",
    "MF_TOPOLOGY_TYPE",
    "MF_TOPOLOGY_OUTPUT_NODE",
    "MF_TOPOLOGY_SOURCESTREAM_NODE",
    "MF_TOPOLOGY_TRANSFORM_NODE",
    "MF_TOPOLOGY_TEE_NODE",
    "MF_TOPOLOGY_MAX",
    "IMFTopologyNode",
    "MF_TOPONODE_FLUSH_MODE",
    "MF_TOPONODE_FLUSH_ALWAYS",
    "MF_TOPONODE_FLUSH_SEEK",
    "MF_TOPONODE_FLUSH_NEVER",
    "MF_TOPONODE_DRAIN_MODE",
    "MF_TOPONODE_DRAIN_DEFAULT",
    "MF_TOPONODE_DRAIN_ALWAYS",
    "MF_TOPONODE_DRAIN_NEVER",
    "IMFGetService",
    "MFCLOCK_CHARACTERISTICS_FLAGS",
    "MFCLOCK_CHARACTERISTICS_FLAG_FREQUENCY_10MHZ",
    "MFCLOCK_CHARACTERISTICS_FLAG_ALWAYS_RUNNING",
    "MFCLOCK_CHARACTERISTICS_FLAG_IS_SYSTEM_CLOCK",
    "MFCLOCK_STATE",
    "MFCLOCK_STATE_INVALID",
    "MFCLOCK_STATE_RUNNING",
    "MFCLOCK_STATE_STOPPED",
    "MFCLOCK_STATE_PAUSED",
    "MFCLOCK_RELATIONAL_FLAGS",
    "MFCLOCK_RELATIONAL_FLAG_JITTER_NEVER_AHEAD",
    "MFCLOCK_PROPERTIES",
    "IMFClock",
    "IMFPresentationClock",
    "IMFPresentationTimeSource",
    "IMFClockStateSink",
    "IMFPresentationDescriptor",
    "IMFStreamDescriptor",
    "IMFMediaTypeHandler",
    "MFTIMER_FLAGS",
    "MFTIMER_RELATIVE",
    "IMFTimer",
    "MF_ACTIVATE_CUSTOM_MIXER",
    "MF_ACTIVATE_CUSTOM_MIXER_ALLOWFAIL",
    "MF_ACTIVATE_CUSTOM_PRESENTER",
    "MF_ACTIVATE_CUSTOM_PRESENTER_ALLOWFAIL",
    "MFSHUTDOWN_STATUS",
    "MFSHUTDOWN_INITIATED",
    "MFSHUTDOWN_COMPLETED",
    "IMFShutdown",
    "IMFTopoLoader",
    "IMFContentProtectionManager",
    "MF_URL_TRUST_STATUS",
    "MF_LICENSE_URL_UNTRUSTED",
    "MF_LICENSE_URL_TRUSTED",
    "MF_LICENSE_URL_TAMPERED",
    "IMFContentEnabler",
    "MFRR_COMPONENT_HASH_INFO",
    "MFRR_COMPONENTS",
    "ASF_FLAT_PICTURE",
    "ASF_FLAT_SYNCHRONISED_LYRICS",
    "IMFMetadata",
    "IMFMetadataProvider",
    "MFRATE_DIRECTION",
    "MFRATE_FORWARD",
    "MFRATE_REVERSE",
    "IMFRateSupport",
    "IMFRateControl",
    "IMFTimecodeTranslate",
    "IMFSeekInfo",
    "IMFSimpleAudioVolume",
    "IMFAudioStreamVolume",
    "IMFAudioPolicy",
    "IMFSampleGrabberSinkCallback",
    "IMFSampleGrabberSinkCallback2",
    "IMFWorkQueueServices",
    "IMFWorkQueueServicesEx",
    "MF_QUALITY_DROP_MODE",
    "MF_DROP_MODE_NONE",
    "MF_DROP_MODE_1",
    "MF_DROP_MODE_2",
    "MF_DROP_MODE_3",
    "MF_DROP_MODE_4",
    "MF_DROP_MODE_5",
    "MF_NUM_DROP_MODES",
    "MF_QUALITY_LEVEL",
    "MF_QUALITY_NORMAL",
    "MF_QUALITY_NORMAL_MINUS_1",
    "MF_QUALITY_NORMAL_MINUS_2",
    "MF_QUALITY_NORMAL_MINUS_3",
    "MF_QUALITY_NORMAL_MINUS_4",
    "MF_QUALITY_NORMAL_MINUS_5",
    "MF_NUM_QUALITY_LEVELS",
    "MF_QUALITY_ADVISE_FLAGS",
    "MF_QUALITY_CANNOT_KEEP_UP",
    "IMFQualityManager",
    "IMFQualityAdvise",
    "IMFQualityAdvise2",
    "IMFQualityAdviseLimits",
    "IMFRealTimeClient",
    "IMFRealTimeClientEx",
    "MFSequencerTopologyFlags",
    "SequencerTopologyFlags_Last",
    "IMFSequencerSource",
    "IMFMediaSourceTopologyProvider",
    "IMFMediaSourcePresentationProvider",
    "MFTOPONODE_ATTRIBUTE_UPDATE",
    "IMFTopologyNodeAttributeEditor",
    "MF_LEAKY_BUCKET_PAIR",
    "MFBYTESTREAM_BUFFERING_PARAMS",
    "IMFByteStreamBuffering",
    "IMFByteStreamCacheControl",
    "IMFByteStreamTimeSeek",
    "MF_BYTE_STREAM_CACHE_RANGE",
    "IMFByteStreamCacheControl2",
    "IMFNetCredential",
    "MFNetCredentialManagerGetParam",
    "IMFNetCredentialManager",
    "MFNetCredentialRequirements",
    "REQUIRE_PROMPT",
    "REQUIRE_SAVE_SELECTED",
    "MFNetCredentialOptions",
    "MFNET_CREDENTIAL_SAVE",
    "MFNET_CREDENTIAL_DONT_CACHE",
    "MFNET_CREDENTIAL_ALLOW_CLEAR_TEXT",
    "MFNetAuthenticationFlags",
    "MFNET_AUTHENTICATION_PROXY",
    "MFNET_AUTHENTICATION_CLEAR_TEXT",
    "MFNET_AUTHENTICATION_LOGGED_ON_USER",
    "IMFNetCredentialCache",
    "IMFSSLCertificateManager",
    "IMFNetResourceFilter",
    "IMFSourceOpenMonitor",
    "IMFNetProxyLocator",
    "IMFNetProxyLocatorFactory",
    "IMFSaveJob",
    "MFNETSOURCE_PROTOCOL_TYPE",
    "MFNETSOURCE_UNDEFINED",
    "MFNETSOURCE_HTTP",
    "MFNETSOURCE_RTSP",
    "MFNETSOURCE_FILE",
    "MFNETSOURCE_MULTICAST",
    "IMFNetSchemeHandlerConfig",
    "MFNETSOURCE_TRANSPORT_TYPE",
    "MFNETSOURCE_UDP",
    "MFNETSOURCE_TCP",
    "MFNETSOURCE_CACHE_STATE",
    "MFNETSOURCE_CACHE_UNAVAILABLE",
    "MFNETSOURCE_CACHE_ACTIVE_WRITING",
    "MFNETSOURCE_CACHE_ACTIVE_COMPLETE",
    "MFNETSOURCE_STATISTICS_IDS",
    "MFNETSOURCE_RECVPACKETS_ID",
    "MFNETSOURCE_LOSTPACKETS_ID",
    "MFNETSOURCE_RESENDSREQUESTED_ID",
    "MFNETSOURCE_RESENDSRECEIVED_ID",
    "MFNETSOURCE_RECOVEREDBYECCPACKETS_ID",
    "MFNETSOURCE_RECOVEREDBYRTXPACKETS_ID",
    "MFNETSOURCE_OUTPACKETS_ID",
    "MFNETSOURCE_RECVRATE_ID",
    "MFNETSOURCE_AVGBANDWIDTHBPS_ID",
    "MFNETSOURCE_BYTESRECEIVED_ID",
    "MFNETSOURCE_PROTOCOL_ID",
    "MFNETSOURCE_TRANSPORT_ID",
    "MFNETSOURCE_CACHE_STATE_ID",
    "MFNETSOURCE_LINKBANDWIDTH_ID",
    "MFNETSOURCE_CONTENTBITRATE_ID",
    "MFNETSOURCE_SPEEDFACTOR_ID",
    "MFNETSOURCE_BUFFERSIZE_ID",
    "MFNETSOURCE_BUFFERPROGRESS_ID",
    "MFNETSOURCE_LASTBWSWITCHTS_ID",
    "MFNETSOURCE_SEEKRANGESTART_ID",
    "MFNETSOURCE_SEEKRANGEEND_ID",
    "MFNETSOURCE_BUFFERINGCOUNT_ID",
    "MFNETSOURCE_INCORRECTLYSIGNEDPACKETS_ID",
    "MFNETSOURCE_SIGNEDSESSION_ID",
    "MFNETSOURCE_MAXBITRATE_ID",
    "MFNETSOURCE_RECEPTION_QUALITY_ID",
    "MFNETSOURCE_RECOVEREDPACKETS_ID",
    "MFNETSOURCE_VBR_ID",
    "MFNETSOURCE_DOWNLOADPROGRESS_ID",
    "MFNETSOURCE_UNPREDEFINEDPROTOCOLNAME_ID",
    "MFNET_PROXYSETTINGS",
    "MFNET_PROXYSETTING_NONE",
    "MFNET_PROXYSETTING_MANUAL",
    "MFNET_PROXYSETTING_AUTO",
    "MFNET_PROXYSETTING_BROWSER",
    "IMFSchemeHandler",
    "IMFByteStreamHandler",
    "IMFTrustedInput",
    "MFPOLICYMANAGER_ACTION",
    "PEACTION_NO",
    "PEACTION_PLAY",
    "PEACTION_COPY",
    "PEACTION_EXPORT",
    "PEACTION_EXTRACT",
    "PEACTION_RESERVED1",
    "PEACTION_RESERVED2",
    "PEACTION_RESERVED3",
    "PEACTION_LAST",
    "MFINPUTTRUSTAUTHORITY_ACCESS_ACTION",
    "MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS",
    "IMFInputTrustAuthority",
    "IMFTrustedOutput",
    "IMFOutputTrustAuthority",
    "IMFOutputPolicy",
    "IMFOutputSchema",
    "MF_OPM_CGMSA_PROTECTION_LEVEL",
    "MF_OPM_CGMSA_OFF",
    "MF_OPM_CGMSA_COPY_FREELY",
    "MF_OPM_CGMSA_COPY_NO_MORE",
    "MF_OPM_CGMSA_COPY_ONE_GENERATION",
    "MF_OPM_CGMSA_COPY_NEVER",
    "MF_OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED",
    "MF_OPM_ACP_PROTECTION_LEVEL",
    "MF_OPM_ACP_OFF",
    "MF_OPM_ACP_LEVEL_ONE",
    "MF_OPM_ACP_LEVEL_TWO",
    "MF_OPM_ACP_LEVEL_THREE",
    "MF_OPM_ACP_FORCE_ULONG",
    "MFAudioConstriction",
    "MFAudioConstriction_MFaudioConstrictionOff",
    "MFAudioConstriction_MFaudioConstriction48_16",
    "MFAudioConstriction_MFaudioConstriction44_16",
    "MFAudioConstriction_MFaudioConstriction14_14",
    "MFAudioConstriction_MFaudioConstrictionMute",
    "IMFSecureChannel",
    "SAMPLE_PROTECTION_VERSION",
    "SAMPLE_PROTECTION_VERSION_NO",
    "SAMPLE_PROTECTION_VERSION_BASIC_LOKI",
    "SAMPLE_PROTECTION_VERSION_SCATTER",
    "SAMPLE_PROTECTION_VERSION_RC4",
    "SAMPLE_PROTECTION_VERSION_AES128CTR",
    "IMFSampleProtection",
    "IMFMediaSinkPreroll",
    "IMFFinalizableMediaSink",
    "IMFStreamingSinkConfig",
    "IMFRemoteProxy",
    "IMFObjectReferenceStream",
    "IMFPMPHost",
    "IMFPMPClient",
    "IMFPMPServer",
    "IMFRemoteDesktopPlugin",
    "IMFSAMIStyle",
    "IMFTranscodeProfile",
    "MF_TRANSCODE_TOPOLOGYMODE_FLAGS",
    "MF_TRANSCODE_TOPOLOGYMODE_SOFTWARE_ONLY",
    "MF_TRANSCODE_TOPOLOGYMODE_HARDWARE_ALLOWED",
    "MF_TRANSCODE_ADJUST_PROFILE_FLAGS",
    "MF_TRANSCODE_ADJUST_PROFILE_DEFAULT",
    "MF_TRANSCODE_ADJUST_PROFILE_USE_SOURCE_ATTRIBUTES",
    "MF_VIDEO_PROCESSOR_ALGORITHM_TYPE",
    "MF_VIDEO_PROCESSOR_ALGORITHM_DEFAULT",
    "MF_VIDEO_PROCESSOR_ALGORITHM_MRF_CRF_444",
    "MF_TRANSCODE_SINK_INFO",
    "IMFTranscodeSinkInfoProvider",
    "IMFFieldOfUseMFTUnlock",
    "MFT_REGISTRATION_INFO",
    "IMFLocalMFTRegistration",
    "IMFCapturePhotoConfirmation",
    "IMFPMPHostApp",
    "IMFPMPClientApp",
    "IMFMediaStreamSourceSampleRequest",
    "IMFTrackedSample",
    "IMFProtectedEnvironmentAccess",
    "IMFSignedLibrary",
    "IMFSystemId",
    "MFCONTENTPROTECTIONDEVICE_INPUT_DATA",
    "MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA",
    "MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA",
    "IMFContentProtectionDevice",
    "IMFContentDecryptorContext",
    "MF_MEDIAKEYSESSION_TYPE",
    "MF_MEDIAKEYSESSION_TYPE_TEMPORARY",
    "MF_MEDIAKEYSESSION_TYPE_PERSISTENT_LICENSE",
    "MF_MEDIAKEYSESSION_TYPE_PERSISTENT_RELEASE_MESSAGE",
    "MF_MEDIAKEYSESSION_TYPE_PERSISTENT_USAGE_RECORD",
    "MF_MEDIAKEY_STATUS",
    "MF_MEDIAKEY_STATUS_USABLE",
    "MF_MEDIAKEY_STATUS_EXPIRED",
    "MF_MEDIAKEY_STATUS_OUTPUT_DOWNSCALED",
    "MF_MEDIAKEY_STATUS_OUTPUT_NOT_ALLOWED",
    "MF_MEDIAKEY_STATUS_STATUS_PENDING",
    "MF_MEDIAKEY_STATUS_INTERNAL_ERROR",
    "MF_MEDIAKEY_STATUS_RELEASED",
    "MF_MEDIAKEY_STATUS_OUTPUT_RESTRICTED",
    "MFMediaKeyStatus",
    "MF_MEDIAKEYSESSION_MESSAGETYPE",
    "MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_REQUEST",
    "MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RENEWAL",
    "MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RELEASE",
    "MF_MEDIAKEYSESSION_MESSAGETYPE_INDIVIDUALIZATION_REQUEST",
    "MF_CROSS_ORIGIN_POLICY",
    "MF_CROSS_ORIGIN_POLICY_NONE",
    "MF_CROSS_ORIGIN_POLICY_ANONYMOUS",
    "MF_CROSS_ORIGIN_POLICY_USE_CREDENTIALS",
    "IMFNetCrossOriginSupport",
    "IMFHttpDownloadRequest",
    "IMFHttpDownloadSession",
    "IMFHttpDownloadSessionProvider",
    "MF_VIDEO_SPHERICAL_VIEWDIRECTION",
    "IMFMediaSource2",
    "IMFMediaStream2",
    "MFSensorDeviceType",
    "MFSensorDeviceType_Unknown",
    "MFSensorDeviceType_Device",
    "MFSensorDeviceType_MediaSource",
    "MFSensorDeviceType_FrameProvider",
    "MFSensorDeviceType_SensorTransform",
    "MFSensorStreamType",
    "MFSensorStreamType_Unknown",
    "MFSensorStreamType_Input",
    "MFSensorStreamType_Output",
    "MFSensorDeviceMode",
    "MFSensorDeviceMode_Controller",
    "MFSensorDeviceMode_Shared",
    "IMFSensorDevice",
    "IMFSensorGroup",
    "IMFSensorStream",
    "IMFSensorTransformFactory",
    "SENSORPROFILEID",
    "IMFSensorProfile",
    "IMFSensorProfileCollection",
    "IMFSensorProcessActivity",
    "IMFSensorActivityReport",
    "IMFSensorActivitiesReport",
    "IMFSensorActivitiesReportCallback",
    "IMFSensorActivityMonitor",
    "MFCameraIntrinsic_CameraModel",
    "MFCameraIntrinsic_DistortionModel6KT",
    "MFCameraIntrinsic_DistortionModelArcTan",
    "MFCameraIntrinsic_DistortionModelType",
    "MFCameraIntrinsic_DistortionModelType_6KT",
    "MFCameraIntrinsic_DistortionModelType_ArcTan",
    "MFExtendedCameraIntrinsic_IntrinsicModel",
    "IMFExtendedCameraIntrinsicModel",
    "IMFExtendedCameraIntrinsicsDistortionModel6KT",
    "IMFExtendedCameraIntrinsicsDistortionModelArcTan",
    "IMFExtendedCameraIntrinsics",
    "IMFExtendedCameraControl",
    "IMFExtendedCameraController",
    "IMFRelativePanelReport",
    "IMFRelativePanelWatcher",
    "MFCameraOcclusionState",
    "MFCameraOcclusionState_Open",
    "MFCameraOcclusionState_OccludedByLid",
    "MFCameraOcclusionState_OccludedByCameraHardware",
    "IMFCameraOcclusionStateReport",
    "IMFCameraOcclusionStateReportCallback",
    "IMFCameraOcclusionStateMonitor",
    "IMFVideoCaptureSampleAllocator",
    "MFSampleAllocatorUsage",
    "MFSampleAllocatorUsage_UsesProvidedAllocator",
    "MFSampleAllocatorUsage_UsesCustomAllocator",
    "MFSampleAllocatorUsage_DoesNotAllocate",
    "IMFSampleAllocatorControl",
    "IMFASFContentInfo",
    "IMFASFProfile",
    "IMFASFStreamConfig",
    "IMFASFMutualExclusion",
    "IMFASFStreamPrioritization",
    "MFASF_INDEXER_FLAGS",
    "MFASF_INDEXER_WRITE_NEW_INDEX",
    "MFASF_INDEXER_READ_FOR_REVERSEPLAYBACK",
    "MFASF_INDEXER_WRITE_FOR_LIVEREAD",
    "ASF_INDEX_IDENTIFIER",
    "ASF_INDEX_DESCRIPTOR",
    "IMFASFIndexer",
    "IMFASFSplitter",
    "MFASF_SPLITTERFLAGS",
    "MFASF_SPLITTER_REVERSE",
    "MFASF_SPLITTER_WMDRM",
    "ASF_STATUSFLAGS",
    "ASF_STATUSFLAGS_INCOMPLETE",
    "ASF_STATUSFLAGS_NONFATAL_ERROR",
    "MFASF_MULTIPLEXERFLAGS",
    "MFASF_MULTIPLEXER_AUTOADJUST_BITRATE",
    "ASF_MUX_STATISTICS",
    "IMFASFMultiplexer",
    "MFASF_STREAMSELECTOR_FLAGS",
    "MFASF_STREAMSELECTOR_DISABLE_THINNING",
    "MFASF_STREAMSELECTOR_USE_AVERAGE_BITRATE",
    "ASF_SELECTION_STATUS",
    "ASF_STATUS_NOTSELECTED",
    "ASF_STATUS_CLEANPOINTSONLY",
    "ASF_STATUS_ALLDATAUNITS",
    "IMFASFStreamSelector",
    "MFSINK_WMDRMACTION",
    "MFSINK_WMDRMACTION_UNDEFINED",
    "MFSINK_WMDRMACTION_ENCODE",
    "MFSINK_WMDRMACTION_TRANSCODE",
    "MFSINK_WMDRMACTION_TRANSCRYPT",
    "MFSINK_WMDRMACTION_LAST",
    "IMFDRMNetHelper",
    "MFVideoNormalizedRect",
    "MF_CAPTURE_ENGINE_DEVICE_TYPE",
    "MF_CAPTURE_ENGINE_DEVICE_TYPE_AUDIO",
    "MF_CAPTURE_ENGINE_DEVICE_TYPE_VIDEO",
    "MF_CAPTURE_ENGINE_SINK_TYPE",
    "MF_CAPTURE_ENGINE_SINK_TYPE_RECORD",
    "MF_CAPTURE_ENGINE_SINK_TYPE_PREVIEW",
    "MF_CAPTURE_ENGINE_SINK_TYPE_PHOTO",
    "MF_CAPTURE_ENGINE_SOURCE",
    "MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_PREVIEW",
    "MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_RECORD",
    "MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_PHOTO",
    "MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_AUDIO",
    "MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_METADATA",
    "MF_CAPTURE_ENGINE_MEDIASOURCE",
    "MF_CAPTURE_ENGINE_STREAM_CATEGORY",
    "MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_PREVIEW",
    "MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_CAPTURE",
    "MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_INDEPENDENT",
    "MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_DEPENDENT",
    "MF_CAPTURE_ENGINE_STREAM_CATEGORY_AUDIO",
    "MF_CAPTURE_ENGINE_STREAM_CATEGORY_UNSUPPORTED",
    "MF_CAPTURE_ENGINE_STREAM_CATEGORY_METADATA",
    "MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE",
    "MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_OTHER",
    "MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_COMMUNICATIONS",
    "MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_MEDIA",
    "MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_GAMECHAT",
    "MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_SPEECH",
    "MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_FARFIELDSPEECH",
    "MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_UNIFORMSPEECH",
    "MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_VOICETYPING",
    "MF_CAPTURE_ENGINE_AUDIO_PROCESSING_MODE",
    "MF_CAPTURE_ENGINE_AUDIO_PROCESSING_DEFAULT",
    "MF_CAPTURE_ENGINE_AUDIO_PROCESSING_RAW",
    "IMFCaptureEngineOnEventCallback",
    "IMFCaptureEngineOnSampleCallback",
    "IMFCaptureSink",
    "IMFCaptureRecordSink",
    "IMFCapturePreviewSink",
    "IMFCapturePhotoSink",
    "IMFCaptureSource",
    "IMFCaptureEngine",
    "IMFCaptureEngineClassFactory",
    "IMFCaptureEngineOnSampleCallback2",
    "IMFCaptureSink2",
    "IMFD3D12SynchronizationObjectCommands",
    "IMFD3D12SynchronizationObject",
    "MF_MT_D3D_RESOURCE_VERSION_ENUM",
    "MF_D3D11_RESOURCE",
    "MF_D3D12_RESOURCE",
    "MFPERIODICCALLBACK",
    "MFASYNC_WORKQUEUE_TYPE",
    "MF_STANDARD_WORKQUEUE",
    "MF_WINDOW_WORKQUEUE",
    "MF_MULTITHREADED_WORKQUEUE",
    "MFASYNCRESULT",
    "MF_TOPOSTATUS",
    "MF_TOPOSTATUS_INVALID",
    "MF_TOPOSTATUS_READY",
    "MF_TOPOSTATUS_STARTED_SOURCE",
    "MF_TOPOSTATUS_DYNAMIC_CHANGED",
    "MF_TOPOSTATUS_SINK_SWITCHED",
    "MF_TOPOSTATUS_ENDED",
    "MFSampleEncryptionProtectionScheme",
    "MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_NONE",
    "MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_AES_CTR",
    "MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_AES_CBC",
    "MOVE_RECT",
    "DIRTYRECT_INFO",
    "MOVEREGION_INFO",
    "ROI_AREA",
    "MACROBLOCK_DATA",
    "DigitalWindowSetting",
    "_MFT_ENUM_FLAG",
    "MFT_ENUM_FLAG_SYNCMFT",
    "MFT_ENUM_FLAG_ASYNCMFT",
    "MFT_ENUM_FLAG_HARDWARE",
    "MFT_ENUM_FLAG_FIELDOFUSE",
    "MFT_ENUM_FLAG_LOCALMFT",
    "MFT_ENUM_FLAG_TRANSCODE_ONLY",
    "MFT_ENUM_FLAG_SORTANDFILTER",
    "MFT_ENUM_FLAG_SORTANDFILTER_APPROVED_ONLY",
    "MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY",
    "MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY_EDGEMODE",
    "MFT_ENUM_FLAG_UNTRUSTED_STOREMFT",
    "MFT_ENUM_FLAG_ALL",
    "MFFrameSourceTypes",
    "MFFrameSourceTypes_Color",
    "MFFrameSourceTypes_Infrared",
    "MFFrameSourceTypes_Depth",
    "MFFrameSourceTypes_Image",
    "MFFrameSourceTypes_Custom",
    "MFVideo3DFormat",
    "MFVideo3DSampleFormat_BaseView",
    "MFVideo3DSampleFormat_MultiView",
    "MFVideo3DSampleFormat_Packed_LeftRight",
    "MFVideo3DSampleFormat_Packed_TopBottom",
    "MFVideo3DSampleFormat",
    "MFSampleExtension_3DVideo_MultiView",
    "MFSampleExtension_3DVideo_Packed",
    "MFVideoRotationFormat",
    "MFVideoRotationFormat_0",
    "MFVideoRotationFormat_90",
    "MFVideoRotationFormat_180",
    "MFVideoRotationFormat_270",
    "MFDepthMeasurement",
    "MFDepthMeasurement_DistanceToFocalPlane",
    "MFDepthMeasurement_DistanceToOpticalCenter",
    "MF_CUSTOM_DECODE_UNIT_TYPE",
    "MF_DECODE_UNIT_NAL",
    "MF_DECODE_UNIT_SEI",
    "MFFOLDDOWN_MATRIX",
    "MFVideoDRMFlags",
    "MFVideoDRMFlag_None",
    "MFVideoDRMFlag_AnalogProtected",
    "MFVideoDRMFlag_DigitallyProtected",
    "MFVideoPadFlags",
    "MFVideoPadFlag_PAD_TO_None",
    "MFVideoPadFlag_PAD_TO_4x3",
    "MFVideoPadFlag_PAD_TO_16x9",
    "MFVideoSrcContentHintFlags",
    "MFVideoSrcContentHintFlag_None",
    "MFVideoSrcContentHintFlag_16x9",
    "MFVideoSrcContentHintFlag_235_1",
    "MT_CUSTOM_VIDEO_PRIMARIES",
    "MT_ARBITRARY_HEADER",
    "MF_FLOAT2",
    "MF_FLOAT3",
    "MF_QUATERNION",
    "MFCameraExtrinsic_CalibratedTransform",
    "MFCameraExtrinsics",
    "MFCameraIntrinsic_PinholeCameraModel",
    "MFCameraIntrinsic_DistortionModel",
    "MFPinholeCameraIntrinsic_IntrinsicModel",
    "MFPinholeCameraIntrinsics",
    "MFWaveFormatExConvertFlags",
    "MFWaveFormatExConvertFlag_Normal",
    "MFWaveFormatExConvertFlag_ForceExtensible",
    "EAllocationType",
    "EAllocationType_eAllocationTypeDynamic",
    "EAllocationType_eAllocationTypeRT",
    "EAllocationType_eAllocationTypePageable",
    "EAllocationType_eAllocationTypeIgnore",
    "MF_MEDIA_ENGINE_ERR",
    "MF_MEDIA_ENGINE_ERR_NOERROR",
    "MF_MEDIA_ENGINE_ERR_ABORTED",
    "MF_MEDIA_ENGINE_ERR_NETWORK",
    "MF_MEDIA_ENGINE_ERR_DECODE",
    "MF_MEDIA_ENGINE_ERR_SRC_NOT_SUPPORTED",
    "MF_MEDIA_ENGINE_ERR_ENCRYPTED",
    "IMFMediaError",
    "IMFMediaTimeRange",
    "MF_MEDIA_ENGINE_EVENT",
    "MF_MEDIA_ENGINE_EVENT_LOADSTART",
    "MF_MEDIA_ENGINE_EVENT_PROGRESS",
    "MF_MEDIA_ENGINE_EVENT_SUSPEND",
    "MF_MEDIA_ENGINE_EVENT_ABORT",
    "MF_MEDIA_ENGINE_EVENT_ERROR",
    "MF_MEDIA_ENGINE_EVENT_EMPTIED",
    "MF_MEDIA_ENGINE_EVENT_STALLED",
    "MF_MEDIA_ENGINE_EVENT_PLAY",
    "MF_MEDIA_ENGINE_EVENT_PAUSE",
    "MF_MEDIA_ENGINE_EVENT_LOADEDMETADATA",
    "MF_MEDIA_ENGINE_EVENT_LOADEDDATA",
    "MF_MEDIA_ENGINE_EVENT_WAITING",
    "MF_MEDIA_ENGINE_EVENT_PLAYING",
    "MF_MEDIA_ENGINE_EVENT_CANPLAY",
    "MF_MEDIA_ENGINE_EVENT_CANPLAYTHROUGH",
    "MF_MEDIA_ENGINE_EVENT_SEEKING",
    "MF_MEDIA_ENGINE_EVENT_SEEKED",
    "MF_MEDIA_ENGINE_EVENT_TIMEUPDATE",
    "MF_MEDIA_ENGINE_EVENT_ENDED",
    "MF_MEDIA_ENGINE_EVENT_RATECHANGE",
    "MF_MEDIA_ENGINE_EVENT_DURATIONCHANGE",
    "MF_MEDIA_ENGINE_EVENT_VOLUMECHANGE",
    "MF_MEDIA_ENGINE_EVENT_FORMATCHANGE",
    "MF_MEDIA_ENGINE_EVENT_PURGEQUEUEDEVENTS",
    "MF_MEDIA_ENGINE_EVENT_TIMELINE_MARKER",
    "MF_MEDIA_ENGINE_EVENT_BALANCECHANGE",
    "MF_MEDIA_ENGINE_EVENT_DOWNLOADCOMPLETE",
    "MF_MEDIA_ENGINE_EVENT_BUFFERINGSTARTED",
    "MF_MEDIA_ENGINE_EVENT_BUFFERINGENDED",
    "MF_MEDIA_ENGINE_EVENT_FRAMESTEPCOMPLETED",
    "MF_MEDIA_ENGINE_EVENT_NOTIFYSTABLESTATE",
    "MF_MEDIA_ENGINE_EVENT_FIRSTFRAMEREADY",
    "MF_MEDIA_ENGINE_EVENT_TRACKSCHANGE",
    "MF_MEDIA_ENGINE_EVENT_OPMINFO",
    "MF_MEDIA_ENGINE_EVENT_RESOURCELOST",
    "MF_MEDIA_ENGINE_EVENT_DELAYLOADEVENT_CHANGED",
    "MF_MEDIA_ENGINE_EVENT_STREAMRENDERINGERROR",
    "MF_MEDIA_ENGINE_EVENT_SUPPORTEDRATES_CHANGED",
    "MF_MEDIA_ENGINE_EVENT_AUDIOENDPOINTCHANGE",
    "IMFMediaEngineNotify",
    "IMFMediaEngineSrcElements",
    "MF_MEDIA_ENGINE_NETWORK",
    "MF_MEDIA_ENGINE_NETWORK_EMPTY",
    "MF_MEDIA_ENGINE_NETWORK_IDLE",
    "MF_MEDIA_ENGINE_NETWORK_LOADING",
    "MF_MEDIA_ENGINE_NETWORK_NO_SOURCE",
    "MF_MEDIA_ENGINE_READY",
    "MF_MEDIA_ENGINE_READY_HAVE_NOTHING",
    "MF_MEDIA_ENGINE_READY_HAVE_METADATA",
    "MF_MEDIA_ENGINE_READY_HAVE_CURRENT_DATA",
    "MF_MEDIA_ENGINE_READY_HAVE_FUTURE_DATA",
    "MF_MEDIA_ENGINE_READY_HAVE_ENOUGH_DATA",
    "MF_MEDIA_ENGINE_CANPLAY",
    "MF_MEDIA_ENGINE_CANPLAY_NOT_SUPPORTED",
    "MF_MEDIA_ENGINE_CANPLAY_MAYBE",
    "MF_MEDIA_ENGINE_CANPLAY_PROBABLY",
    "MF_MEDIA_ENGINE_PRELOAD",
    "MF_MEDIA_ENGINE_PRELOAD_MISSING",
    "MF_MEDIA_ENGINE_PRELOAD_EMPTY",
    "MF_MEDIA_ENGINE_PRELOAD_NONE",
    "MF_MEDIA_ENGINE_PRELOAD_METADATA",
    "MF_MEDIA_ENGINE_PRELOAD_AUTOMATIC",
    "IMFMediaEngine",
    "MF_MEDIA_ENGINE_S3D_PACKING_MODE",
    "MF_MEDIA_ENGINE_S3D_PACKING_MODE_NONE",
    "MF_MEDIA_ENGINE_S3D_PACKING_MODE_SIDE_BY_SIDE",
    "MF_MEDIA_ENGINE_S3D_PACKING_MODE_TOP_BOTTOM",
    "MF_MEDIA_ENGINE_STATISTIC",
    "MF_MEDIA_ENGINE_STATISTIC_FRAMES_RENDERED",
    "MF_MEDIA_ENGINE_STATISTIC_FRAMES_DROPPED",
    "MF_MEDIA_ENGINE_STATISTIC_BYTES_DOWNLOADED",
    "MF_MEDIA_ENGINE_STATISTIC_BUFFER_PROGRESS",
    "MF_MEDIA_ENGINE_STATISTIC_FRAMES_PER_SECOND",
    "MF_MEDIA_ENGINE_STATISTIC_PLAYBACK_JITTER",
    "MF_MEDIA_ENGINE_STATISTIC_FRAMES_CORRUPTED",
    "MF_MEDIA_ENGINE_STATISTIC_TOTAL_FRAME_DELAY",
    "MF_MEDIA_ENGINE_SEEK_MODE",
    "MF_MEDIA_ENGINE_SEEK_MODE_NORMAL",
    "MF_MEDIA_ENGINE_SEEK_MODE_APPROXIMATE",
    "IMFMediaEngineEx",
    "IMFMediaEngineAudioEndpointId",
    "MF_MEDIA_ENGINE_EXTENSION_TYPE",
    "MF_MEDIA_ENGINE_EXTENSION_TYPE_MEDIASOURCE",
    "MF_MEDIA_ENGINE_EXTENSION_TYPE_BYTESTREAM",
    "IMFMediaEngineExtension",
    "MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAGS",
    "MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_PROTECTED",
    "MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_SURFACE_PROTECTION",
    "MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_ANTI_SCREEN_SCRAPE_PROTECTION",
    "IMFMediaEngineProtectedContent",
    "IAudioSourceProvider",
    "IMFMediaEngineWebSupport",
    "MF_MSE_VP9_SUPPORT_TYPE",
    "MF_MSE_VP9_SUPPORT_DEFAULT",
    "MF_MSE_VP9_SUPPORT_ON",
    "MF_MSE_VP9_SUPPORT_OFF",
    "MF_MSE_OPUS_SUPPORT_TYPE",
    "MF_MSE_OPUS_SUPPORT_ON",
    "MF_MSE_OPUS_SUPPORT_OFF",
    "IMFMediaSourceExtensionNotify",
    "IMFBufferListNotify",
    "IMFSourceBufferNotify",
    "IMFSourceBuffer",
    "MF_MSE_APPEND_MODE",
    "MF_MSE_APPEND_MODE_SEGMENTS",
    "MF_MSE_APPEND_MODE_SEQUENCE",
    "IMFSourceBufferAppendMode",
    "IMFSourceBufferList",
    "MF_MSE_READY",
    "MF_MSE_READY_CLOSED",
    "MF_MSE_READY_OPEN",
    "MF_MSE_READY_ENDED",
    "MF_MSE_ERROR",
    "MF_MSE_ERROR_NOERROR",
    "MF_MSE_ERROR_NETWORK",
    "MF_MSE_ERROR_DECODE",
    "MF_MSE_ERROR_UNKNOWN_ERROR",
    "IMFMediaSourceExtension",
    "IMFMediaSourceExtensionLiveSeekableRange",
    "IMFMediaEngineEME",
    "IMFMediaEngineSrcElementsEx",
    "IMFMediaEngineNeedKeyNotify",
    "IMFMediaKeys",
    "MF_MEDIA_ENGINE_KEYERR",
    "MF_MEDIAENGINE_KEYERR_UNKNOWN",
    "MF_MEDIAENGINE_KEYERR_CLIENT",
    "MF_MEDIAENGINE_KEYERR_SERVICE",
    "MF_MEDIAENGINE_KEYERR_OUTPUT",
    "MF_MEDIAENGINE_KEYERR_HARDWARECHANGE",
    "MF_MEDIAENGINE_KEYERR_DOMAIN",
    "IMFMediaKeySession",
    "IMFMediaKeySessionNotify",
    "IMFCdmSuspendNotify",
    "MF_HDCP_STATUS",
    "MF_HDCP_STATUS_ON",
    "MF_HDCP_STATUS_OFF",
    "MF_HDCP_STATUS_ON_WITH_TYPE_ENFORCEMENT",
    "IMFHDCPStatus",
    "MF_MEDIA_ENGINE_OPM_STATUS",
    "MF_MEDIA_ENGINE_OPM_NOT_REQUESTED",
    "MF_MEDIA_ENGINE_OPM_ESTABLISHED",
    "MF_MEDIA_ENGINE_OPM_FAILED_VM",
    "MF_MEDIA_ENGINE_OPM_FAILED_BDA",
    "MF_MEDIA_ENGINE_OPM_FAILED_UNSIGNED_DRIVER",
    "MF_MEDIA_ENGINE_OPM_FAILED",
    "IMFMediaEngineOPMInfo",
    "MF_MEDIA_ENGINE_CREATEFLAGS",
    "MF_MEDIA_ENGINE_AUDIOONLY",
    "MF_MEDIA_ENGINE_WAITFORSTABLE_STATE",
    "MF_MEDIA_ENGINE_FORCEMUTE",
    "MF_MEDIA_ENGINE_REAL_TIME_MODE",
    "MF_MEDIA_ENGINE_DISABLE_LOCAL_PLUGINS",
    "MF_MEDIA_ENGINE_CREATEFLAGS_MASK",
    "MF_MEDIA_ENGINE_PROTECTION_FLAGS",
    "MF_MEDIA_ENGINE_ENABLE_PROTECTED_CONTENT",
    "MF_MEDIA_ENGINE_USE_PMP_FOR_ALL_CONTENT",
    "MF_MEDIA_ENGINE_USE_UNPROTECTED_PMP",
    "IMFMediaEngineClassFactory",
    "IMFMediaEngineClassFactoryEx",
    "IMFMediaEngineClassFactory2",
    "IMFExtendedDRMTypeSupport",
    "IMFMediaEngineSupportsSourceTransfer",
    "IMFMediaEngineTransferSource",
    "MF_TIMED_TEXT_TRACK_KIND",
    "MF_TIMED_TEXT_TRACK_KIND_UNKNOWN",
    "MF_TIMED_TEXT_TRACK_KIND_SUBTITLES",
    "MF_TIMED_TEXT_TRACK_KIND_CAPTIONS",
    "MF_TIMED_TEXT_TRACK_KIND_METADATA",
    "MF_TIMED_TEXT_UNIT_TYPE",
    "MF_TIMED_TEXT_UNIT_TYPE_PIXELS",
    "MF_TIMED_TEXT_UNIT_TYPE_PERCENTAGE",
    "MF_TIMED_TEXT_FONT_STYLE",
    "MF_TIMED_TEXT_FONT_STYLE_NORMAL",
    "MF_TIMED_TEXT_FONT_STYLE_OBLIQUE",
    "MF_TIMED_TEXT_FONT_STYLE_ITALIC",
    "MF_TIMED_TEXT_ALIGNMENT",
    "MF_TIMED_TEXT_ALIGNMENT_START",
    "MF_TIMED_TEXT_ALIGNMENT_END",
    "MF_TIMED_TEXT_ALIGNMENT_CENTER",
    "MF_TIMED_TEXT_DISPLAY_ALIGNMENT",
    "MF_TIMED_TEXT_DISPLAY_ALIGNMENT_BEFORE",
    "MF_TIMED_TEXT_DISPLAY_ALIGNMENT_AFTER",
    "MF_TIMED_TEXT_DISPLAY_ALIGNMENT_CENTER",
    "MF_TIMED_TEXT_DECORATION",
    "MF_TIMED_TEXT_DECORATION_NONE",
    "MF_TIMED_TEXT_DECORATION_UNDERLINE",
    "MF_TIMED_TEXT_DECORATION_LINE_THROUGH",
    "MF_TIMED_TEXT_DECORATION_OVERLINE",
    "MF_TIMED_TEXT_WRITING_MODE",
    "MF_TIMED_TEXT_WRITING_MODE_LRTB",
    "MF_TIMED_TEXT_WRITING_MODE_RLTB",
    "MF_TIMED_TEXT_WRITING_MODE_TBRL",
    "MF_TIMED_TEXT_WRITING_MODE_TBLR",
    "MF_TIMED_TEXT_WRITING_MODE_LR",
    "MF_TIMED_TEXT_WRITING_MODE_RL",
    "MF_TIMED_TEXT_WRITING_MODE_TB",
    "MF_TIMED_TEXT_SCROLL_MODE",
    "MF_TIMED_TEXT_SCROLL_MODE_POP_ON",
    "MF_TIMED_TEXT_SCROLL_MODE_ROLL_UP",
    "MF_TIMED_TEXT_ERROR_CODE",
    "MF_TIMED_TEXT_ERROR_CODE_NOERROR",
    "MF_TIMED_TEXT_ERROR_CODE_FATAL",
    "MF_TIMED_TEXT_ERROR_CODE_DATA_FORMAT",
    "MF_TIMED_TEXT_ERROR_CODE_NETWORK",
    "MF_TIMED_TEXT_ERROR_CODE_INTERNAL",
    "MF_TIMED_TEXT_CUE_EVENT",
    "MF_TIMED_TEXT_CUE_EVENT_ACTIVE",
    "MF_TIMED_TEXT_CUE_EVENT_INACTIVE",
    "MF_TIMED_TEXT_CUE_EVENT_CLEAR",
    "MF_TIMED_TEXT_TRACK_READY_STATE",
    "MF_TIMED_TEXT_TRACK_READY_STATE_NONE",
    "MF_TIMED_TEXT_TRACK_READY_STATE_LOADING",
    "MF_TIMED_TEXT_TRACK_READY_STATE_LOADED",
    "MF_TIMED_TEXT_TRACK_READY_STATE_ERROR",
    "MF_TIMED_TEXT_RUBY_POSITION",
    "MF_TIMED_TEXT_RUBY_POSITION_BEFORE",
    "MF_TIMED_TEXT_RUBY_POSITION_AFTER",
    "MF_TIMED_TEXT_RUBY_POSITION_OUTSIDE",
    "MF_TIMED_TEXT_RUBY_ALIGN",
    "MF_TIMED_TEXT_RUBY_ALIGN_CENTER",
    "MF_TIMED_TEXT_RUBY_ALIGN_START",
    "MF_TIMED_TEXT_RUBY_ALIGN_END",
    "MF_TIMED_TEXT_RUBY_ALIGN_SPACEAROUND",
    "MF_TIMED_TEXT_RUBY_ALIGN_SPACEBETWEEN",
    "MF_TIMED_TEXT_RUBY_ALIGN_WITHBASE",
    "MF_TIMED_TEXT_RUBY_RESERVE",
    "MF_TIMED_TEXT_RUBY_RESERVE_NONE",
    "MF_TIMED_TEXT_RUBY_RESERVE_BEFORE",
    "MF_TIMED_TEXT_RUBY_RESERVE_AFTER",
    "MF_TIMED_TEXT_RUBY_RESERVE_BOTH",
    "MF_TIMED_TEXT_RUBY_RESERVE_OUTSIDE",
    "MF_TIMED_TEXT_BOUTEN_TYPE",
    "MF_TIMED_TEXT_BOUTEN_TYPE_NONE",
    "MF_TIMED_TEXT_BOUTEN_TYPE_AUTO",
    "MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDCIRCLE",
    "MF_TIMED_TEXT_BOUTEN_TYPE_OPENCIRCLE",
    "MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDDOT",
    "MF_TIMED_TEXT_BOUTEN_TYPE_OPENDOT",
    "MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDSESAME",
    "MF_TIMED_TEXT_BOUTEN_TYPE_OPENSESAME",
    "MF_TIMED_TEXT_BOUTEN_POSITION",
    "MF_TIMED_TEXT_BOUTEN_POSITION_BEFORE",
    "MF_TIMED_TEXT_BOUTEN_POSITION_AFTER",
    "MF_TIMED_TEXT_BOUTEN_POSITION_OUTSIDE",
    "IMFTimedText",
    "IMFTimedTextNotify",
    "IMFTimedTextTrack",
    "IMFTimedTextTrackList",
    "IMFTimedTextCue",
    "IMFTimedTextFormattedText",
    "IMFTimedTextStyle",
    "IMFTimedTextRegion",
    "IMFTimedTextBinary",
    "IMFTimedTextCueList",
    "IMFTimedTextRuby",
    "IMFTimedTextBouten",
    "IMFTimedTextStyle2",
    "MF_MEDIA_ENGINE_STREAMTYPE_FAILED",
    "MF_MEDIA_ENGINE_STREAMTYPE_FAILED_UNKNOWN",
    "MF_MEDIA_ENGINE_STREAMTYPE_FAILED_AUDIO",
    "MF_MEDIA_ENGINE_STREAMTYPE_FAILED_VIDEO",
    "IMFMediaEngineEMENotify",
    "MF_MEDIAKEYS_REQUIREMENT",
    "MF_MEDIAKEYS_REQUIREMENT_REQUIRED",
    "MF_MEDIAKEYS_REQUIREMENT_OPTIONAL",
    "MF_MEDIAKEYS_REQUIREMENT_NOT_ALLOWED",
    "IMFMediaKeySessionNotify2",
    "IMFMediaKeySystemAccess",
    "IMFMediaEngineClassFactory3",
    "IMFMediaKeys2",
    "IMFMediaKeySession2",
    "IMFMediaEngineClassFactory4",
    "IMFDLNASinkInit",
    "MFMPEG2DLNASINKSTATS",
    "IMFReadWriteClassFactory",
    "MF_SOURCE_READER_FLAG",
    "MF_SOURCE_READERF_ERROR",
    "MF_SOURCE_READERF_ENDOFSTREAM",
    "MF_SOURCE_READERF_NEWSTREAM",
    "MF_SOURCE_READERF_NATIVEMEDIATYPECHANGED",
    "MF_SOURCE_READERF_CURRENTMEDIATYPECHANGED",
    "MF_SOURCE_READERF_STREAMTICK",
    "MF_SOURCE_READERF_ALLEFFECTSREMOVED",
    "MF_SOURCE_READER_CONTROL_FLAG",
    "MF_SOURCE_READER_CONTROLF_DRAIN",
    "MF_SOURCE_READER_CONSTANTS",
    "MF_SOURCE_READER_INVALID_STREAM_INDEX",
    "MF_SOURCE_READER_ALL_STREAMS",
    "MF_SOURCE_READER_ANY_STREAM",
    "MF_SOURCE_READER_FIRST_AUDIO_STREAM",
    "MF_SOURCE_READER_FIRST_VIDEO_STREAM",
    "MF_SOURCE_READER_MEDIASOURCE",
    "MF_SOURCE_READER_CURRENT_TYPE_CONSTANTS",
    "MF_SOURCE_READER_CURRENT_TYPE_INDEX",
    "IMFSourceReader",
    "IMFSourceReaderEx",
    "IMFSourceReaderCallback",
    "IMFSourceReaderCallback2",
    "MF_SINK_WRITER_CONSTANTS",
    "MF_SINK_WRITER_INVALID_STREAM_INDEX",
    "MF_SINK_WRITER_ALL_STREAMS",
    "MF_SINK_WRITER_MEDIASINK",
    "MF_SINK_WRITER_STATISTICS",
    "IMFSinkWriter",
    "IMFSinkWriterEx",
    "IMFSinkWriterEncoderConfig",
    "IMFSinkWriterCallback",
    "IMFSinkWriterCallback2",
    "IMFVideoPositionMapper",
    "IMFVideoDeviceID",
    "MFVideoAspectRatioMode",
    "MFVideoARMode_None",
    "MFVideoARMode_PreservePicture",
    "MFVideoARMode_PreservePixel",
    "MFVideoARMode_NonLinearStretch",
    "MFVideoARMode_Mask",
    "MFVideoRenderPrefs",
    "MFVideoRenderPrefs_DoNotRenderBorder",
    "MFVideoRenderPrefs_DoNotClipToDevice",
    "MFVideoRenderPrefs_AllowOutputThrottling",
    "MFVideoRenderPrefs_ForceOutputThrottling",
    "MFVideoRenderPrefs_ForceBatching",
    "MFVideoRenderPrefs_AllowBatching",
    "MFVideoRenderPrefs_ForceScaling",
    "MFVideoRenderPrefs_AllowScaling",
    "MFVideoRenderPrefs_DoNotRepaintOnStop",
    "MFVideoRenderPrefs_Mask",
    "IMFVideoDisplayControl",
    "MFVP_MESSAGE_TYPE",
    "MFVP_MESSAGE_FLUSH",
    "MFVP_MESSAGE_INVALIDATEMEDIATYPE",
    "MFVP_MESSAGE_PROCESSINPUTNOTIFY",
    "MFVP_MESSAGE_BEGINSTREAMING",
    "MFVP_MESSAGE_ENDSTREAMING",
    "MFVP_MESSAGE_ENDOFSTREAM",
    "MFVP_MESSAGE_STEP",
    "MFVP_MESSAGE_CANCELSTEP",
    "IMFVideoPresenter",
    "IMFDesiredSample",
    "IMFVideoMixerControl",
    "MFVideoMixPrefs",
    "MFVideoMixPrefs_ForceHalfInterlace",
    "MFVideoMixPrefs_AllowDropToHalfInterlace",
    "MFVideoMixPrefs_AllowDropToBob",
    "MFVideoMixPrefs_ForceBob",
    "MFVideoMixPrefs_EnableRotation",
    "MFVideoMixPrefs_Mask",
    "IMFVideoMixerControl2",
    "IMFVideoRenderer",
    "IEVRFilterConfig",
    "EVRFilterConfigPrefs",
    "EVRFilterConfigPrefs_EnableQoS",
    "EVRFilterConfigPrefs_Mask",
    "IEVRFilterConfigEx",
    "MF_SERVICE_LOOKUP_TYPE",
    "MF_SERVICE_LOOKUP_UPSTREAM",
    "MF_SERVICE_LOOKUP_UPSTREAM_DIRECT",
    "MF_SERVICE_LOOKUP_DOWNSTREAM",
    "MF_SERVICE_LOOKUP_DOWNSTREAM_DIRECT",
    "MF_SERVICE_LOOKUP_ALL",
    "MF_SERVICE_LOOKUP_GLOBAL",
    "IMFTopologyServiceLookup",
    "IMFTopologyServiceLookupClient",
    "IEVRTrustedVideoPlugin",
    "MFP_CREATION_OPTIONS",
    "MFP_OPTION_NONE",
    "MFP_OPTION_FREE_THREADED_CALLBACK",
    "MFP_OPTION_NO_MMCSS",
    "MFP_OPTION_NO_REMOTE_DESKTOP_OPTIMIZATION",
    "MFP_MEDIAPLAYER_STATE",
    "MFP_MEDIAPLAYER_STATE_EMPTY",
    "MFP_MEDIAPLAYER_STATE_STOPPED",
    "MFP_MEDIAPLAYER_STATE_PLAYING",
    "MFP_MEDIAPLAYER_STATE_PAUSED",
    "MFP_MEDIAPLAYER_STATE_SHUTDOWN",
    "_MFP_MEDIAITEM_CHARACTERISTICS",
    "MFP_MEDIAITEM_IS_LIVE",
    "MFP_MEDIAITEM_CAN_SEEK",
    "MFP_MEDIAITEM_CAN_PAUSE",
    "MFP_MEDIAITEM_HAS_SLOW_SEEK",
    "_MFP_CREDENTIAL_FLAGS",
    "MFP_CREDENTIAL_PROMPT",
    "MFP_CREDENTIAL_SAVE",
    "MFP_CREDENTIAL_DO_NOT_CACHE",
    "MFP_CREDENTIAL_CLEAR_TEXT",
    "MFP_CREDENTIAL_PROXY",
    "MFP_CREDENTIAL_LOGGED_ON_USER",
    "IMFPMediaPlayer",
    "IMFPMediaItem",
    "MFP_EVENT_TYPE",
    "MFP_EVENT_TYPE_PLAY",
    "MFP_EVENT_TYPE_PAUSE",
    "MFP_EVENT_TYPE_STOP",
    "MFP_EVENT_TYPE_POSITION_SET",
    "MFP_EVENT_TYPE_RATE_SET",
    "MFP_EVENT_TYPE_MEDIAITEM_CREATED",
    "MFP_EVENT_TYPE_MEDIAITEM_SET",
    "MFP_EVENT_TYPE_FRAME_STEP",
    "MFP_EVENT_TYPE_MEDIAITEM_CLEARED",
    "MFP_EVENT_TYPE_MF",
    "MFP_EVENT_TYPE_ERROR",
    "MFP_EVENT_TYPE_PLAYBACK_ENDED",
    "MFP_EVENT_TYPE_ACQUIRE_USER_CREDENTIAL",
    "MFP_EVENT_HEADER",
    "MFP_PLAY_EVENT",
    "MFP_PAUSE_EVENT",
    "MFP_STOP_EVENT",
    "MFP_POSITION_SET_EVENT",
    "MFP_RATE_SET_EVENT",
    "MFP_MEDIAITEM_CREATED_EVENT",
    "MFP_MEDIAITEM_SET_EVENT",
    "MFP_FRAME_STEP_EVENT",
    "MFP_MEDIAITEM_CLEARED_EVENT",
    "MFP_MF_EVENT",
    "MFP_ERROR_EVENT",
    "MFP_PLAYBACK_ENDED_EVENT",
    "MFP_ACQUIRE_USER_CREDENTIAL_EVENT",
    "IMFPMediaPlayerCallback",
    "DEVICE_INFO",
    "MF_SHARING_ENGINE_EVENT",
    "MF_SHARING_ENGINE_EVENT_DISCONNECT",
    "MF_SHARING_ENGINE_EVENT_LOCALRENDERINGSTARTED",
    "MF_SHARING_ENGINE_EVENT_LOCALRENDERINGENDED",
    "MF_SHARING_ENGINE_EVENT_STOPPED",
    "MF_SHARING_ENGINE_EVENT_ERROR",
    "MF_MEDIA_SHARING_ENGINE_EVENT",
    "MF_MEDIA_SHARING_ENGINE_EVENT_DISCONNECT",
    "IMFSharingEngineClassFactory",
    "IMFMediaSharingEngine",
    "IMFMediaSharingEngineClassFactory",
    "IMFImageSharingEngine",
    "IMFImageSharingEngineClassFactory",
    "PLAYTO_SOURCE_CREATEFLAGS",
    "PLAYTO_SOURCE_NONE",
    "PLAYTO_SOURCE_IMAGE",
    "PLAYTO_SOURCE_AUDIO",
    "PLAYTO_SOURCE_VIDEO",
    "PLAYTO_SOURCE_PROTECTED",
    "IPlayToControl",
    "IPlayToControlWithCapabilities",
    "IPlayToSourceClassFactory",
    "IEVRVideoStreamControl",
    "IMFVideoProcessor",
    "MFVideoAlphaBitmapParams",
    "MFVideoAlphaBitmap",
    "MFVideoAlphaBitmapFlags",
    "MFVideoAlphaBitmap_EntireDDS",
    "MFVideoAlphaBitmap_SrcColorKey",
    "MFVideoAlphaBitmap_SrcRect",
    "MFVideoAlphaBitmap_DestRect",
    "MFVideoAlphaBitmap_FilterMode",
    "MFVideoAlphaBitmap_Alpha",
    "MFVideoAlphaBitmap_BitMask",
    "IMFVideoMixerBitmap",
    "IAdvancedMediaCaptureInitializationSettings",
    "IAdvancedMediaCaptureSettings",
    "IAdvancedMediaCapture",
    "IMFSpatialAudioObjectBuffer",
    "IMFSpatialAudioSample",
    "IMFContentDecryptionModuleSession",
    "IMFContentDecryptionModuleSessionCallbacks",
    "IMFContentDecryptionModule",
    "IMFContentDecryptionModuleAccess",
    "IMFContentDecryptionModuleFactory",
    "__MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0001",
    "MFVirtualCameraType_SoftwareCameraSource",
    "__MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0002",
    "MFVirtualCameraLifetime_Session",
    "MFVirtualCameraLifetime_System",
    "__MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0003",
    "MFVirtualCameraAccess_CurrentUser",
    "MFVirtualCameraAccess_AllUsers",
    "IMFCameraSyncObject",
    "IMFVirtualCamera",
    "OPM_HDCP_TYPE",
    "OPM_HDCP_TYPE_0",
    "OPM_HDCP_TYPE_1",
    "OPM_HDCP_STATUS",
    "OPM_HDCP_STATUS_ON",
    "OPM_HDCP_STATUS_OFF",
    "DXVAHD_CreateDevice",
    "DXVA2CreateDirect3DDeviceManager9",
    "DXVA2CreateVideoService",
    "OPMGetVideoOutputsFromHMONITOR",
    "OPMGetVideoOutputForTarget",
    "OPMGetVideoOutputsFromIDirect3DDevice9Object",
    "MFSerializeAttributesToStream",
    "MFDeserializeAttributesFromStream",
    "MFCreateTransformActivate",
    "MFCreateMediaSession",
    "MFCreatePMPMediaSession",
    "MFCreateSourceResolver",
    "CreatePropertyStore",
    "MFGetSupportedSchemes",
    "MFGetSupportedMimeTypes",
    "MFCreateTopology",
    "MFCreateTopologyNode",
    "MFGetTopoNodeCurrentType",
    "MFGetService",
    "MFGetSystemTime",
    "MFCreatePresentationClock",
    "MFCreateSystemTimeSource",
    "MFCreatePresentationDescriptor",
    "MFRequireProtectedEnvironment",
    "MFSerializePresentationDescriptor",
    "MFDeserializePresentationDescriptor",
    "MFCreateStreamDescriptor",
    "MFCreateSimpleTypeHandler",
    "MFShutdownObject",
    "MFCreateAudioRenderer",
    "MFCreateAudioRendererActivate",
    "MFCreateVideoRendererActivate",
    "MFCreateMPEG4MediaSink",
    "MFCreate3GPMediaSink",
    "MFCreateMP3MediaSink",
    "MFCreateAC3MediaSink",
    "MFCreateADTSMediaSink",
    "MFCreateMuxSink",
    "MFCreateFMPEG4MediaSink",
    "MFCreateAVIMediaSink",
    "MFCreateWAVEMediaSink",
    "MFCreateTopoLoader",
    "MFCreateSampleGrabberSinkActivate",
    "MFCreateStandardQualityManager",
    "MFCreateSequencerSource",
    "MFCreateSequencerSegmentOffset",
    "MFCreateAggregateSource",
    "MFCreateCredentialCache",
    "MFCreateProxyLocator",
    "MFCreateNetSchemePlugin",
    "MFCreatePMPServer",
    "MFCreateRemoteDesktopPlugin",
    "CreateNamedPropertyStore",
    "MFCreateSampleCopierMFT",
    "MFCreateTranscodeProfile",
    "MFCreateTranscodeTopology",
    "MFCreateTranscodeTopologyFromByteStream",
    "MFTranscodeGetAudioOutputAvailableTypes",
    "MFCreateTranscodeSinkActivate",
    "MFCreateTrackedSample",
    "MFCreateMFByteStreamOnStream",
    "MFCreateStreamOnMFByteStream",
    "MFCreateMFByteStreamOnStreamEx",
    "MFCreateStreamOnMFByteStreamEx",
    "MFCreateMediaTypeFromProperties",
    "MFCreatePropertiesFromMediaType",
    "MFEnumDeviceSources",
    "MFCreateDeviceSource",
    "MFCreateDeviceSourceActivate",
    "MFCreateProtectedEnvironmentAccess",
    "MFLoadSignedLibrary",
    "MFGetSystemId",
    "MFGetLocalId",
    "MFCreateContentProtectionDevice",
    "MFIsContentProtectionDeviceSupported",
    "MFCreateContentDecryptorContext",
    "MFCreateSensorGroup",
    "MFCreateSensorStream",
    "MFCreateSensorProfile",
    "MFCreateSensorProfileCollection",
    "MFCreateSensorActivityMonitor",
    "MFCreateExtendedCameraIntrinsics",
    "MFCreateExtendedCameraIntrinsicModel",
    "MFCreateRelativePanelWatcher",
    "MFCreateCameraOcclusionStateMonitor",
    "MFCreateASFContentInfo",
    "MFCreateASFIndexer",
    "MFCreateASFIndexerByteStream",
    "MFCreateASFSplitter",
    "MFCreateASFProfile",
    "MFCreateASFProfileFromPresentationDescriptor",
    "MFCreatePresentationDescriptorFromASFProfile",
    "MFCreateASFMultiplexer",
    "MFCreateASFStreamSelector",
    "MFCreateASFMediaSink",
    "MFCreateASFMediaSinkActivate",
    "MFCreateWMVEncoderActivate",
    "MFCreateWMAEncoderActivate",
    "MFCreateASFStreamingMediaSink",
    "MFCreateASFStreamingMediaSinkActivate",
    "MFCreateD3D12SynchronizationObject",
    "MFStartup",
    "MFShutdown",
    "MFLockPlatform",
    "MFUnlockPlatform",
    "MFPutWorkItem",
    "MFPutWorkItem2",
    "MFPutWorkItemEx",
    "MFPutWorkItemEx2",
    "MFPutWaitingWorkItem",
    "MFAllocateSerialWorkQueue",
    "MFScheduleWorkItemEx",
    "MFScheduleWorkItem",
    "MFCancelWorkItem",
    "MFGetTimerPeriodicity",
    "MFAddPeriodicCallback",
    "MFRemovePeriodicCallback",
    "MFAllocateWorkQueueEx",
    "MFAllocateWorkQueue",
    "MFLockWorkQueue",
    "MFUnlockWorkQueue",
    "MFBeginRegisterWorkQueueWithMMCSS",
    "MFBeginRegisterWorkQueueWithMMCSSEx",
    "MFEndRegisterWorkQueueWithMMCSS",
    "MFBeginUnregisterWorkQueueWithMMCSS",
    "MFEndUnregisterWorkQueueWithMMCSS",
    "MFGetWorkQueueMMCSSClass",
    "MFGetWorkQueueMMCSSTaskId",
    "MFRegisterPlatformWithMMCSS",
    "MFUnregisterPlatformFromMMCSS",
    "MFLockSharedWorkQueue",
    "MFGetWorkQueueMMCSSPriority",
    "MFCreateAsyncResult",
    "MFInvokeCallback",
    "MFCreateFile",
    "MFCreateTempFile",
    "MFBeginCreateFile",
    "MFEndCreateFile",
    "MFCancelCreateFile",
    "MFCreateMemoryBuffer",
    "MFCreateMediaBufferWrapper",
    "MFCreateLegacyMediaBufferOnMFMediaBuffer",
    "MFMapDX9FormatToDXGIFormat",
    "MFMapDXGIFormatToDX9Format",
    "MFLockDXGIDeviceManager",
    "MFUnlockDXGIDeviceManager",
    "MFCreateDXSurfaceBuffer",
    "MFCreateWICBitmapBuffer",
    "MFCreateDXGISurfaceBuffer",
    "MFCreateVideoSampleAllocatorEx",
    "MFCreateDXGIDeviceManager",
    "MFCreateAlignedMemoryBuffer",
    "MFCreateMediaEvent",
    "MFCreateEventQueue",
    "MFCreateSample",
    "MFCreateAttributes",
    "MFInitAttributesFromBlob",
    "MFGetAttributesAsBlobSize",
    "MFGetAttributesAsBlob",
    "MFTRegister",
    "MFTUnregister",
    "MFTRegisterLocal",
    "MFTUnregisterLocal",
    "MFTRegisterLocalByCLSID",
    "MFTUnregisterLocalByCLSID",
    "MFTEnum",
    "MFTEnumEx",
    "MFTEnum2",
    "MFTGetInfo",
    "MFGetPluginControl",
    "MFGetMFTMerit",
    "MFRegisterLocalSchemeHandler",
    "MFRegisterLocalByteStreamHandler",
    "MFCreateMFByteStreamWrapper",
    "MFCreateMediaExtensionActivate",
    "MFCreateMuxStreamAttributes",
    "MFCreateMuxStreamMediaType",
    "MFCreateMuxStreamSample",
    "MFValidateMediaTypeSize",
    "MFCreateMediaType",
    "MFCreateMFVideoFormatFromMFMediaType",
    "MFCreateWaveFormatExFromMFMediaType",
    "MFInitMediaTypeFromVideoInfoHeader",
    "MFInitMediaTypeFromVideoInfoHeader2",
    "MFInitMediaTypeFromMPEG1VideoInfo",
    "MFInitMediaTypeFromMPEG2VideoInfo",
    "MFCalculateBitmapImageSize",
    "MFCalculateImageSize",
    "MFFrameRateToAverageTimePerFrame",
    "MFAverageTimePerFrameToFrameRate",
    "MFInitMediaTypeFromMFVideoFormat",
    "MFInitMediaTypeFromWaveFormatEx",
    "MFInitMediaTypeFromAMMediaType",
    "MFInitAMMediaTypeFromMFMediaType",
    "MFCreateAMMediaTypeFromMFMediaType",
    "MFCompareFullToPartialMediaType",
    "MFWrapMediaType",
    "MFUnwrapMediaType",
    "MFCreateVideoMediaType",
    "MFCreateVideoMediaTypeFromSubtype",
    "MFIsFormatYUV",
    "MFCreateVideoMediaTypeFromBitMapInfoHeader",
    "MFGetStrideForBitmapInfoHeader",
    "MFGetPlaneSize",
    "MFCreateVideoMediaTypeFromBitMapInfoHeaderEx",
    "MFCreateMediaTypeFromRepresentation",
    "MFCreateAudioMediaType",
    "MFGetUncompressedVideoFormat",
    "MFInitVideoFormat",
    "MFInitVideoFormat_RGB",
    "MFConvertColorInfoToDXVA",
    "MFConvertColorInfoFromDXVA",
    "MFCopyImage",
    "MFConvertFromFP16Array",
    "MFConvertToFP16Array",
    "MFCreate2DMediaBuffer",
    "MFCreateMediaBufferFromMediaType",
    "MFCreateCollection",
    "MFHeapAlloc",
    "MFHeapFree",
    "MFllMulDiv",
    "MFGetContentProtectionSystemCLSID",
    "MFCombineSamples",
    "MFSplitSample",
    "MFCreateSourceReaderFromURL",
    "MFCreateSourceReaderFromByteStream",
    "MFCreateSourceReaderFromMediaSource",
    "MFCreateSinkWriterFromURL",
    "MFCreateSinkWriterFromMediaSink",
    "MFCreateVideoPresenter",
    "MFCreateVideoMixer",
    "MFCreateVideoMixerAndPresenter",
    "MFCreateVideoRenderer",
    "MFCreateVideoSampleFromSurface",
    "MFCreateVideoSampleAllocator",
    "MFPCreateMediaPlayer",
    "MFCreateEncryptedMediaExtensionsStoreActivate",
    "MFCreateVirtualCamera",
    "MFIsVirtualCameraTypeSupported",
    "OPMXboxEnableHDCP",
    "OPMXboxGetHDCPStatus",
    "OPMXboxGetHDCPStatusAndType",
]
