from ctypes import c_void_p, Structure, Union, POINTER, CFUNCTYPE, WINFUNCTYPE, cdll, windll
from win32more.base import MissingType, c_char_p_no, c_wchar_p_no, Byte, SByte, Char, Int16, UInt16, Int32, UInt32, Int64, UInt64, IntPtr, UIntPtr, Single, Double, String, Boolean, Void, Guid, COMMETHOD, SUCCEEDED, FAILED
import win32more.Devices.Properties
import win32more.Foundation
import win32more.Graphics.Direct3D12
import win32more.Graphics.Direct3D9
import win32more.Graphics.Dxgi.Common
import win32more.Graphics.Gdi
import win32more.Media.Audio
import win32more.Media.DxMediaObjects
import win32more.Media.MediaFoundation
import win32more.System.Com
import win32more.System.Com.StructuredStorage
import win32more.System.WinRT
import win32more.UI.Shell.PropertiesSystem
import sys
_module = sys.modules[__name__]
def __getattr__(name):
    try:
        f = globals()[f'_define_{name}']
    except KeyError:
        raise AttributeError(f"module '{__name__}' has no attribute '{name}'") from None
    setattr(_module, name, f())
    return getattr(_module, name)
def __dir__():
    return __all__
_MFP_CREDENTIAL_FLAGS = Int32
MFP_CREDENTIAL_PROMPT = 1
MFP_CREDENTIAL_SAVE = 2
MFP_CREDENTIAL_DO_NOT_CACHE = 4
MFP_CREDENTIAL_CLEAR_TEXT = 8
MFP_CREDENTIAL_PROXY = 16
MFP_CREDENTIAL_LOGGED_ON_USER = 32
_MFP_MEDIAITEM_CHARACTERISTICS = Int32
MFP_MEDIAITEM_IS_LIVE = 1
MFP_MEDIAITEM_CAN_SEEK = 2
MFP_MEDIAITEM_CAN_PAUSE = 4
MFP_MEDIAITEM_HAS_SLOW_SEEK = 8
_MFT_INPUT_DATA_BUFFER_FLAGS = Int32
MFT_INPUT_DATA_BUFFER_PLACEHOLDER = -1
_MFT_INPUT_STATUS_FLAGS = Int32
MFT_INPUT_STATUS_ACCEPT_DATA = 1
_MFT_INPUT_STREAM_INFO_FLAGS = Int32
MFT_INPUT_STREAM_WHOLE_SAMPLES = 1
MFT_INPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER = 2
MFT_INPUT_STREAM_FIXED_SAMPLE_SIZE = 4
MFT_INPUT_STREAM_HOLDS_BUFFERS = 8
MFT_INPUT_STREAM_DOES_NOT_ADDREF = 256
MFT_INPUT_STREAM_REMOVABLE = 512
MFT_INPUT_STREAM_OPTIONAL = 1024
MFT_INPUT_STREAM_PROCESSES_IN_PLACE = 2048
_MFT_OUTPUT_DATA_BUFFER_FLAGS = Int32
MFT_OUTPUT_DATA_BUFFER_INCOMPLETE = 16777216
MFT_OUTPUT_DATA_BUFFER_FORMAT_CHANGE = 256
MFT_OUTPUT_DATA_BUFFER_STREAM_END = 512
MFT_OUTPUT_DATA_BUFFER_NO_SAMPLE = 768
_MFT_OUTPUT_STATUS_FLAGS = Int32
MFT_OUTPUT_STATUS_SAMPLE_READY = 1
_MFT_OUTPUT_STREAM_INFO_FLAGS = Int32
MFT_OUTPUT_STREAM_WHOLE_SAMPLES = 1
MFT_OUTPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER = 2
MFT_OUTPUT_STREAM_FIXED_SAMPLE_SIZE = 4
MFT_OUTPUT_STREAM_DISCARDABLE = 8
MFT_OUTPUT_STREAM_OPTIONAL = 16
MFT_OUTPUT_STREAM_PROVIDES_SAMPLES = 256
MFT_OUTPUT_STREAM_CAN_PROVIDE_SAMPLES = 512
MFT_OUTPUT_STREAM_LAZY_READ = 1024
MFT_OUTPUT_STREAM_REMOVABLE = 2048
_MFT_PROCESS_OUTPUT_FLAGS = Int32
MFT_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER = 1
MFT_PROCESS_OUTPUT_REGENERATE_LAST_OUTPUT = 2
_MFT_PROCESS_OUTPUT_STATUS = Int32
MFT_PROCESS_OUTPUT_STATUS_NEW_STREAMS = 256
_MFT_SET_TYPE_FLAGS = Int32
MFT_SET_TYPE_TEST_ONLY = 1
AACMFTEncoder = Guid('93af0c51-2275-45d2-a3-5b-f2-ba-21-ca-ed-00')
AEC_INPUT_STREAM = Int32
AEC_CAPTURE_STREAM = 0
AEC_REFERENCE_STREAM = 1
AEC_SYSTEM_MODE = Int32
SINGLE_CHANNEL_AEC = 0
ADAPTIVE_ARRAY_ONLY = 1
OPTIBEAM_ARRAY_ONLY = 2
ADAPTIVE_ARRAY_AND_AEC = 3
OPTIBEAM_ARRAY_AND_AEC = 4
SINGLE_CHANNEL_NSAGC = 5
MODE_NOT_SET = 6
AEC_VAD_MODE = Int32
AEC_VAD_DISABLED = 0
AEC_VAD_NORMAL = 1
AEC_VAD_FOR_AGC = 2
AEC_VAD_FOR_SILENCE_SUPPRESSION = 3
def _define_AecQualityMetrics_Struct_head():
    class AecQualityMetrics_Struct(Structure):
        pass
    return AecQualityMetrics_Struct
def _define_AecQualityMetrics_Struct():
    AecQualityMetrics_Struct = win32more.Media.MediaFoundation.AecQualityMetrics_Struct_head
    AecQualityMetrics_Struct._fields_ = [
        ('i64Timestamp', Int64),
        ('ConvergenceFlag', Byte),
        ('MicClippedFlag', Byte),
        ('MicSilenceFlag', Byte),
        ('PstvFeadbackFlag', Byte),
        ('SpkClippedFlag', Byte),
        ('SpkMuteFlag', Byte),
        ('GlitchFlag', Byte),
        ('DoubleTalkFlag', Byte),
        ('uGlitchCount', UInt32),
        ('uMicClipCount', UInt32),
        ('fDuration', Single),
        ('fTSVariance', Single),
        ('fTSDriftRate', Single),
        ('fVoiceLevel', Single),
        ('fNoiseLevel', Single),
        ('fERLE', Single),
        ('fAvgERLE', Single),
        ('dwReserved', UInt32),
    ]
    return AecQualityMetrics_Struct
ALawCodecWrapper = Guid('36cb6e0c-78c1-42b2-99-43-84-62-62-f3-17-86')
def _define_AM_MEDIA_TYPE_head():
    class AM_MEDIA_TYPE(Structure):
        pass
    return AM_MEDIA_TYPE
def _define_AM_MEDIA_TYPE():
    AM_MEDIA_TYPE = win32more.Media.MediaFoundation.AM_MEDIA_TYPE_head
    AM_MEDIA_TYPE._fields_ = [
        ('majortype', Guid),
        ('subtype', Guid),
        ('bFixedSizeSamples', win32more.Foundation.BOOL),
        ('bTemporalCompression', win32more.Foundation.BOOL),
        ('lSampleSize', UInt32),
        ('formattype', Guid),
        ('pUnk', win32more.System.Com.IUnknown_head),
        ('cbFormat', UInt32),
        ('pbFormat', c_char_p_no),
    ]
    return AM_MEDIA_TYPE
def _define_MEDIASUBTYPE_None():
    return Guid('e436eb8e-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_MEDIATYPE_Video():
    return Guid('73646976-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIATYPE_Audio():
    return Guid('73647561-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIATYPE_Text():
    return Guid('73747874-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIATYPE_Midi():
    return Guid('7364696d-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIATYPE_Stream():
    return Guid('e436eb83-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_MEDIATYPE_Interleaved():
    return Guid('73766169-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIATYPE_File():
    return Guid('656c6966-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIATYPE_ScriptCommand():
    return Guid('73636d64-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIATYPE_AUXLine21Data():
    return Guid('670aea80-3a82-11d0-b7-9b-00-aa-00-37-67-a7')
def _define_MEDIATYPE_AUXTeletextPage():
    return Guid('11264acb-37de-4eba-8c-35-7f-04-a1-a6-83-32')
def _define_MEDIATYPE_CC_CONTAINER():
    return Guid('aeb312e9-3357-43ca-b7-01-97-ec-19-8e-2b-62')
def _define_MEDIATYPE_DTVCCData():
    return Guid('fb77e152-53b2-499c-b4-6b-50-9f-c3-3e-df-d7')
def _define_MEDIATYPE_MSTVCaption():
    return Guid('b88b8a89-b049-4c80-ad-cf-58-98-98-5e-22-c1')
def _define_MEDIATYPE_VBI():
    return Guid('f72a76e1-eb0a-11d0-ac-e4-00-00-c0-cc-16-ba')
def _define_MEDIASUBTYPE_DVB_SUBTITLES():
    return Guid('34ffcbc3-d5b3-4171-90-02-d4-c6-03-01-69-7f')
def _define_MEDIASUBTYPE_ISDB_CAPTIONS():
    return Guid('059dd67d-2e55-4d41-8d-1b-01-f5-e4-f5-06-07')
def _define_MEDIASUBTYPE_ISDB_SUPERIMPOSE():
    return Guid('36dc6d28-f1a6-4216-90-48-9c-fc-ef-eb-5e-ba')
def _define_MEDIATYPE_Timecode():
    return Guid('0482dee3-7817-11cf-8a-03-00-aa-00-6e-cb-65')
def _define_MEDIATYPE_LMRT():
    return Guid('74726c6d-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIATYPE_URL_STREAM():
    return Guid('736c7275-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_CLPL():
    return Guid('4c504c43-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_YUYV():
    return Guid('56595559-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_IYUV():
    return Guid('56555949-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_YVU9():
    return Guid('39555659-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_Y411():
    return Guid('31313459-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_Y41P():
    return Guid('50313459-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_YUY2():
    return Guid('32595559-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_YVYU():
    return Guid('55595659-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_UYVY():
    return Guid('59565955-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_Y211():
    return Guid('31313259-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_CLJR():
    return Guid('524a4c43-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_IF09():
    return Guid('39304649-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_CPLA():
    return Guid('414c5043-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_MJPG():
    return Guid('47504a4d-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_TVMJ():
    return Guid('4a4d5654-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_WAKE():
    return Guid('454b4157-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_CFCC():
    return Guid('43434643-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_IJPG():
    return Guid('47504a49-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_Plum():
    return Guid('6d756c50-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_DVCS():
    return Guid('53435644-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_H264():
    return Guid('34363248-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_DVSD():
    return Guid('44535644-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_MDVF():
    return Guid('4656444d-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_RGB1():
    return Guid('e436eb78-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_MEDIASUBTYPE_RGB4():
    return Guid('e436eb79-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_MEDIASUBTYPE_RGB8():
    return Guid('e436eb7a-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_MEDIASUBTYPE_RGB565():
    return Guid('e436eb7b-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_MEDIASUBTYPE_RGB555():
    return Guid('e436eb7c-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_MEDIASUBTYPE_RGB24():
    return Guid('e436eb7d-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_MEDIASUBTYPE_RGB32():
    return Guid('e436eb7e-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_MEDIASUBTYPE_ARGB1555():
    return Guid('297c55af-e209-4cb3-b7-57-c7-6d-6b-9c-88-a8')
def _define_MEDIASUBTYPE_ARGB4444():
    return Guid('6e6415e6-5c24-425f-93-cd-80-10-2b-3d-1c-ca')
def _define_MEDIASUBTYPE_ARGB32():
    return Guid('773c9ac0-3274-11d0-b7-24-00-aa-00-6c-1a-01')
def _define_MEDIASUBTYPE_A2R10G10B10():
    return Guid('2f8bb76d-b644-4550-ac-f3-d3-0c-aa-65-d5-c5')
def _define_MEDIASUBTYPE_A2B10G10R10():
    return Guid('576f7893-bdf6-48c4-87-5f-ae-7b-81-83-45-67')
def _define_MEDIASUBTYPE_AYUV():
    return Guid('56555941-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_AI44():
    return Guid('34344941-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_IA44():
    return Guid('34344149-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_RGB32_D3D_DX7_RT():
    return Guid('32335237-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_RGB16_D3D_DX7_RT():
    return Guid('36315237-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_ARGB32_D3D_DX7_RT():
    return Guid('38384137-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_ARGB4444_D3D_DX7_RT():
    return Guid('34344137-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_ARGB1555_D3D_DX7_RT():
    return Guid('35314137-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_RGB32_D3D_DX9_RT():
    return Guid('32335239-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_RGB16_D3D_DX9_RT():
    return Guid('36315239-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_ARGB32_D3D_DX9_RT():
    return Guid('38384139-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_ARGB4444_D3D_DX9_RT():
    return Guid('34344139-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_ARGB1555_D3D_DX9_RT():
    return Guid('35314139-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_YV12():
    return Guid('32315659-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_NV12():
    return Guid('3231564e-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_NV11():
    return Guid('3131564e-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_P208():
    return Guid('38303250-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_P210():
    return Guid('30313250-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_P216():
    return Guid('36313250-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_P010():
    return Guid('30313050-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_P016():
    return Guid('36313050-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_Y210():
    return Guid('30313259-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_Y216():
    return Guid('36313259-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_P408():
    return Guid('38303450-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_NV24():
    return Guid('3432564e-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_420O():
    return Guid('4f303234-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_IMC1():
    return Guid('31434d49-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_IMC2():
    return Guid('32434d49-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_IMC3():
    return Guid('33434d49-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_IMC4():
    return Guid('34434d49-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_S340():
    return Guid('30343353-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_S342():
    return Guid('32343353-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_Overlay():
    return Guid('e436eb7f-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_MEDIASUBTYPE_MPEG1Packet():
    return Guid('e436eb80-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_MEDIASUBTYPE_MPEG1Payload():
    return Guid('e436eb81-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_MEDIASUBTYPE_MPEG1AudioPayload():
    return Guid('00000050-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIATYPE_MPEG1SystemStream():
    return Guid('e436eb82-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_MEDIASUBTYPE_MPEG1System():
    return Guid('e436eb84-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_MEDIASUBTYPE_MPEG1VideoCD():
    return Guid('e436eb85-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_MEDIASUBTYPE_MPEG1Video():
    return Guid('e436eb86-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_MEDIASUBTYPE_MPEG1Audio():
    return Guid('e436eb87-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_MEDIASUBTYPE_Avi():
    return Guid('e436eb88-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_MEDIASUBTYPE_Asf():
    return Guid('3db80f90-9412-11d1-ad-ed-00-00-f8-75-4b-99')
def _define_MEDIASUBTYPE_QTMovie():
    return Guid('e436eb89-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_MEDIASUBTYPE_QTRpza():
    return Guid('617a7072-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_QTSmc():
    return Guid('20636d73-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_QTRle():
    return Guid('20656c72-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_QTJpeg():
    return Guid('6765706a-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_PCMAudio_Obsolete():
    return Guid('e436eb8a-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_MEDIASUBTYPE_PCM():
    return Guid('00000001-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_WAVE():
    return Guid('e436eb8b-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_MEDIASUBTYPE_AU():
    return Guid('e436eb8c-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_MEDIASUBTYPE_AIFF():
    return Guid('e436eb8d-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_MEDIASUBTYPE_dvsd():
    return Guid('64737664-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_dvhd():
    return Guid('64687664-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_dvsl():
    return Guid('6c737664-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_dv25():
    return Guid('35327664-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_dv50():
    return Guid('30357664-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_dvh1():
    return Guid('31687664-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_Line21_BytePair():
    return Guid('6e8d4a22-310c-11d0-b7-9a-00-aa-00-37-67-a7')
def _define_MEDIASUBTYPE_Line21_GOPPacket():
    return Guid('6e8d4a23-310c-11d0-b7-9a-00-aa-00-37-67-a7')
def _define_MEDIASUBTYPE_Line21_VBIRawData():
    return Guid('6e8d4a24-310c-11d0-b7-9a-00-aa-00-37-67-a7')
def _define_MEDIASUBTYPE_708_608Data():
    return Guid('0af414bc-4ed2-445e-98-39-8f-09-55-68-ab-3c')
def _define_MEDIASUBTYPE_DtvCcData():
    return Guid('f52addaa-36f0-43f5-95-ea-6d-86-64-84-26-2a')
def _define_MEDIASUBTYPE_CC_CONTAINER():
    return Guid('7ea626db-54da-437b-be-9f-f7-30-73-ad-fa-3c')
def _define_MEDIASUBTYPE_TELETEXT():
    return Guid('f72a76e3-eb0a-11d0-ac-e4-00-00-c0-cc-16-ba')
def _define_MEDIASUBTYPE_VBI():
    return Guid('663da43c-03e8-4e9a-9c-d5-bf-11-ed-0d-ef-76')
def _define_MEDIASUBTYPE_WSS():
    return Guid('2791d576-8e7a-466f-9e-90-5d-3f-30-83-73-8b')
def _define_MEDIASUBTYPE_XDS():
    return Guid('01ca73e3-dce6-4575-af-e1-2b-f1-c9-02-ca-f3')
def _define_MEDIASUBTYPE_VPS():
    return Guid('a1b3f620-9792-4d8d-81-a4-86-af-25-77-20-90')
def _define_MEDIASUBTYPE_DRM_Audio():
    return Guid('00000009-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_IEEE_FLOAT():
    return Guid('00000003-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_DOLBY_AC3_SPDIF():
    return Guid('00000092-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_RAW_SPORT():
    return Guid('00000240-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_SPDIF_TAG_241h():
    return Guid('00000241-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_DssVideo():
    return Guid('a0af4f81-e163-11d0-ba-d9-00-60-97-44-11-1a')
def _define_MEDIASUBTYPE_DssAudio():
    return Guid('a0af4f82-e163-11d0-ba-d9-00-60-97-44-11-1a')
def _define_MEDIASUBTYPE_VPVideo():
    return Guid('5a9b6a40-1a22-11d1-ba-d9-00-60-97-44-11-1a')
def _define_MEDIASUBTYPE_VPVBI():
    return Guid('5a9b6a41-1a22-11d1-ba-d9-00-60-97-44-11-1a')
def _define_CLSID_CaptureGraphBuilder():
    return Guid('bf87b6e0-8c27-11d0-b3-f0-00-aa-00-37-61-c5')
def _define_CLSID_CaptureGraphBuilder2():
    return Guid('bf87b6e1-8c27-11d0-b3-f0-00-aa-00-37-61-c5')
def _define_CLSID_ProtoFilterGraph():
    return Guid('e436ebb0-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_CLSID_SystemClock():
    return Guid('e436ebb1-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_CLSID_FilterMapper():
    return Guid('e436ebb2-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_CLSID_FilterGraph():
    return Guid('e436ebb3-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_CLSID_FilterGraphNoThread():
    return Guid('e436ebb8-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_CLSID_FilterGraphPrivateThread():
    return Guid('a3ecbc41-581a-4476-b6-93-a6-33-40-46-2d-8b')
def _define_CLSID_MPEG1Doc():
    return Guid('e4bbd160-4269-11ce-83-8d-00-aa-00-55-59-5a')
def _define_CLSID_FileSource():
    return Guid('701722e0-8ae3-11ce-a8-5c-00-aa-00-2f-ea-b5')
def _define_CLSID_MPEG1PacketPlayer():
    return Guid('26c25940-4ca9-11ce-a8-28-00-aa-00-2f-ea-b5')
def _define_CLSID_MPEG1Splitter():
    return Guid('336475d0-942a-11ce-a8-70-00-aa-00-2f-ea-b5')
def _define_CLSID_CMpegVideoCodec():
    return Guid('feb50740-7bef-11ce-9b-d9-00-00-e2-02-59-9c')
def _define_CLSID_CMpegAudioCodec():
    return Guid('4a2286e0-7bef-11ce-9b-d9-00-00-e2-02-59-9c')
def _define_CLSID_TextRender():
    return Guid('e30629d3-27e5-11ce-87-5d-00-60-8c-b7-80-66')
def _define_CLSID_InfTee():
    return Guid('f8388a40-d5bb-11d0-be-5a-00-80-c7-06-56-8e')
def _define_CLSID_AviSplitter():
    return Guid('1b544c20-fd0b-11ce-8c-63-00-aa-00-44-b5-1e')
def _define_CLSID_AviReader():
    return Guid('1b544c21-fd0b-11ce-8c-63-00-aa-00-44-b5-1e')
def _define_CLSID_VfwCapture():
    return Guid('1b544c22-fd0b-11ce-8c-63-00-aa-00-44-b5-1e')
def _define_CLSID_CaptureProperties():
    return Guid('1b544c22-fd0b-11ce-8c-63-00-aa-00-44-b5-1f')
def _define_CLSID_FGControl():
    return Guid('e436ebb4-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_CLSID_MOVReader():
    return Guid('44584800-f8ee-11ce-b2-d4-00-dd-01-10-1b-85')
def _define_CLSID_QuickTimeParser():
    return Guid('d51bd5a0-7548-11cf-a5-20-00-80-c7-7e-f5-8a')
def _define_CLSID_QTDec():
    return Guid('fdfe9681-74a3-11d0-af-a7-00-aa-00-b6-7a-42')
def _define_CLSID_AVIDoc():
    return Guid('d3588ab0-0781-11ce-b0-3a-00-20-af-0b-a7-70')
def _define_CLSID_VideoRenderer():
    return Guid('70e102b0-5556-11ce-97-c0-00-aa-00-55-59-5a')
def _define_CLSID_Colour():
    return Guid('1643e180-90f5-11ce-97-d5-00-aa-00-55-59-5a')
def _define_CLSID_Dither():
    return Guid('1da08500-9edc-11cf-bc-10-00-aa-00-ac-74-f6')
def _define_CLSID_ModexRenderer():
    return Guid('07167665-5011-11cf-bf-33-00-aa-00-55-59-5a')
def _define_CLSID_AudioRender():
    return Guid('e30629d1-27e5-11ce-87-5d-00-60-8c-b7-80-66')
def _define_CLSID_AudioProperties():
    return Guid('05589faf-c356-11ce-bf-01-00-aa-00-55-59-5a')
def _define_CLSID_DSoundRender():
    return Guid('79376820-07d0-11cf-a2-4d-00-20-af-d7-97-67')
def _define_CLSID_AudioRecord():
    return Guid('e30629d2-27e5-11ce-87-5d-00-60-8c-b7-80-66')
def _define_CLSID_AudioInputMixerProperties():
    return Guid('2ca8ca52-3c3f-11d2-b7-3d-00-c0-4f-b6-bd-3d')
def _define_CLSID_AVIDec():
    return Guid('cf49d4e0-1115-11ce-b0-3a-00-20-af-0b-a7-70')
def _define_CLSID_AVIDraw():
    return Guid('a888df60-1e90-11cf-ac-98-00-aa-00-4c-0f-a9')
def _define_CLSID_ACMWrapper():
    return Guid('6a08cf80-0e18-11cf-a2-4d-00-20-af-d7-97-67')
def _define_CLSID_AsyncReader():
    return Guid('e436ebb5-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_CLSID_URLReader():
    return Guid('e436ebb6-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_CLSID_PersistMonikerPID():
    return Guid('e436ebb7-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_CLSID_AVICo():
    return Guid('d76e2820-1563-11cf-ac-98-00-aa-00-4c-0f-a9')
def _define_CLSID_FileWriter():
    return Guid('8596e5f0-0da5-11d0-bd-21-00-a0-c9-11-ce-86')
def _define_CLSID_AviDest():
    return Guid('e2510970-f137-11ce-8b-67-00-aa-00-a3-f1-a6')
def _define_CLSID_AviMuxProptyPage():
    return Guid('c647b5c0-157c-11d0-bd-23-00-a0-c9-11-ce-86')
def _define_CLSID_AviMuxProptyPage1():
    return Guid('0a9ae910-85c0-11d0-bd-42-00-a0-c9-11-ce-86')
def _define_CLSID_AVIMIDIRender():
    return Guid('07b65360-c445-11ce-af-de-00-aa-00-6c-14-f4')
def _define_CLSID_WMAsfReader():
    return Guid('187463a0-5bb7-11d3-ac-be-00-80-c7-5e-24-6e')
def _define_CLSID_WMAsfWriter():
    return Guid('7c23220e-55bb-11d3-8b-16-00-c0-4f-b6-bd-3d')
def _define_CLSID_MPEG2Demultiplexer():
    return Guid('afb6c280-2c41-11d3-8a-60-00-00-f8-1e-0e-4a')
def _define_CLSID_MPEG2Demultiplexer_NoClock():
    return Guid('687d3367-3644-467a-ad-fe-6c-d7-a8-5c-4a-2c')
def _define_CLSID_MMSPLITTER():
    return Guid('3ae86b20-7be8-11d1-ab-e6-00-a0-c9-05-f3-75')
def _define_CLSID_StreamBufferSink():
    return Guid('2db47ae5-cf39-43c2-b4-d6-0c-d8-d9-09-46-f4')
def _define_CLSID_SBE2Sink():
    return Guid('e2448508-95da-4205-9a-27-7e-c8-1e-72-3b-1a')
def _define_CLSID_StreamBufferSource():
    return Guid('c9f5fe02-f851-4eb5-99-ee-ad-60-2a-f1-e6-19')
def _define_CLSID_StreamBufferConfig():
    return Guid('fa8a68b2-c864-4ba2-ad-53-d3-87-6a-87-49-4b')
def _define_CLSID_StreamBufferPropertyHandler():
    return Guid('e37a73f8-fb01-43dc-91-4e-aa-ee-76-09-5a-b9')
def _define_CLSID_StreamBufferThumbnailHandler():
    return Guid('713790ee-5ee1-45ba-80-70-a1-33-7d-27-62-fa')
def _define_CLSID_Mpeg2VideoStreamAnalyzer():
    return Guid('6cfad761-735d-4aa5-8a-fc-af-91-a7-d6-1e-ba')
def _define_CLSID_StreamBufferRecordingAttributes():
    return Guid('ccaa63ac-1057-4778-ae-92-12-06-ab-9a-ce-e6')
def _define_CLSID_StreamBufferComposeRecording():
    return Guid('d682c4ba-a90a-42fe-b9-e1-03-10-98-49-c4-23')
def _define_CLSID_SBE2File():
    return Guid('93a094d7-51e8-485b-90-4a-8d-6b-97-dc-6b-39')
def _define_CLSID_DVVideoCodec():
    return Guid('b1b77c00-c3e4-11cf-af-79-00-aa-00-b6-7a-42')
def _define_CLSID_DVVideoEnc():
    return Guid('13aa3650-bb6f-11d0-af-b9-00-aa-00-b6-7a-42')
def _define_CLSID_DVSplitter():
    return Guid('4eb31670-9fc6-11cf-af-6e-00-aa-00-b6-7a-42')
def _define_CLSID_DVMux():
    return Guid('129d7e40-c10d-11d0-af-b9-00-aa-00-b6-7a-42')
def _define_CLSID_SeekingPassThru():
    return Guid('060af76c-68dd-11d0-8f-c1-00-c0-4f-d9-18-9d')
def _define_CLSID_Line21Decoder():
    return Guid('6e8d4a20-310c-11d0-b7-9a-00-aa-00-37-67-a7')
def _define_CLSID_Line21Decoder2():
    return Guid('e4206432-01a1-4bee-b3-e1-37-02-c8-ed-c5-74')
def _define_CLSID_CCAFilter():
    return Guid('3d07a539-35ca-447c-9b-05-8d-85-ce-92-4f-9e')
def _define_CLSID_OverlayMixer():
    return Guid('cd8743a1-3736-11d0-9e-69-00-c0-4f-d7-c1-5b')
def _define_CLSID_VBISurfaces():
    return Guid('814b9800-1c88-11d1-ba-d9-00-60-97-44-11-1a')
def _define_CLSID_WSTDecoder():
    return Guid('70bc06e0-5666-11d3-a1-84-00-10-5a-ef-9f-33')
def _define_CLSID_MjpegDec():
    return Guid('301056d0-6dff-11d2-9e-eb-00-60-08-03-9e-37')
def _define_CLSID_MJPGEnc():
    return Guid('b80ab0a0-7416-11d2-9e-eb-00-60-08-03-9e-37')
def _define_CLSID_SystemDeviceEnum():
    return Guid('62be5d10-60eb-11d0-bd-3b-00-a0-c9-11-ce-86')
def _define_CLSID_CDeviceMoniker():
    return Guid('4315d437-5b8c-11d0-bd-3b-00-a0-c9-11-ce-86')
def _define_CLSID_VideoInputDeviceCategory():
    return Guid('860bb310-5d01-11d0-bd-3b-00-a0-c9-11-ce-86')
def _define_CLSID_CVidCapClassManager():
    return Guid('860bb310-5d01-11d0-bd-3b-00-a0-c9-11-ce-86')
def _define_CLSID_LegacyAmFilterCategory():
    return Guid('083863f1-70de-11d0-bd-40-00-a0-c9-11-ce-86')
def _define_CLSID_CQzFilterClassManager():
    return Guid('083863f1-70de-11d0-bd-40-00-a0-c9-11-ce-86')
def _define_CLSID_VideoCompressorCategory():
    return Guid('33d9a760-90c8-11d0-bd-43-00-a0-c9-11-ce-86')
def _define_CLSID_CIcmCoClassManager():
    return Guid('33d9a760-90c8-11d0-bd-43-00-a0-c9-11-ce-86')
def _define_CLSID_AudioCompressorCategory():
    return Guid('33d9a761-90c8-11d0-bd-43-00-a0-c9-11-ce-86')
def _define_CLSID_CAcmCoClassManager():
    return Guid('33d9a761-90c8-11d0-bd-43-00-a0-c9-11-ce-86')
def _define_CLSID_AudioInputDeviceCategory():
    return Guid('33d9a762-90c8-11d0-bd-43-00-a0-c9-11-ce-86')
def _define_CLSID_CWaveinClassManager():
    return Guid('33d9a762-90c8-11d0-bd-43-00-a0-c9-11-ce-86')
def _define_CLSID_AudioRendererCategory():
    return Guid('e0f158e1-cb04-11d0-bd-4e-00-a0-c9-11-ce-86')
def _define_CLSID_CWaveOutClassManager():
    return Guid('e0f158e1-cb04-11d0-bd-4e-00-a0-c9-11-ce-86')
def _define_CLSID_MidiRendererCategory():
    return Guid('4efe2452-168a-11d1-bc-76-00-c0-4f-b9-45-3b')
def _define_CLSID_CMidiOutClassManager():
    return Guid('4efe2452-168a-11d1-bc-76-00-c0-4f-b9-45-3b')
def _define_CLSID_TransmitCategory():
    return Guid('cc7bfb41-f175-11d1-a3-92-00-e0-29-1f-39-59')
def _define_CLSID_DeviceControlCategory():
    return Guid('cc7bfb46-f175-11d1-a3-92-00-e0-29-1f-39-59')
def _define_CLSID_ActiveMovieCategories():
    return Guid('da4e3da0-d07d-11d0-bd-50-00-a0-c9-11-ce-86')
def _define_CLSID_DVDHWDecodersCategory():
    return Guid('2721ae20-7e70-11d0-a5-d6-28-db-04-c1-00-00')
def _define_CLSID_MediaEncoderCategory():
    return Guid('7d22e920-5ca9-4787-8c-2b-a6-77-9b-d1-17-81')
def _define_CLSID_MediaMultiplexerCategory():
    return Guid('236c9559-adce-4736-bf-72-ba-b3-4e-39-21-96')
def _define_CLSID_FilterMapper2():
    return Guid('cda42200-bd88-11d0-bd-4e-00-a0-c9-11-ce-86')
def _define_CLSID_MemoryAllocator():
    return Guid('1e651cc0-b199-11d0-82-12-00-c0-4f-c3-2c-45')
def _define_CLSID_MediaPropertyBag():
    return Guid('cdbd8d00-c193-11d0-bd-4e-00-a0-c9-11-ce-86')
def _define_CLSID_DvdGraphBuilder():
    return Guid('fcc152b7-f372-11d0-8e-00-00-c0-4f-d7-c0-8b')
def _define_CLSID_DVDNavigator():
    return Guid('9b8c4620-2c1a-11d0-84-93-00-a0-24-38-ad-48')
def _define_CLSID_DVDState():
    return Guid('f963c5cf-a659-4a93-96-38-ca-f3-cd-27-7d-13')
def _define_CLSID_SmartTee():
    return Guid('cc58e280-8aa1-11d1-b3-f1-00-aa-00-37-61-c5')
def _define_CLSID_DtvCcFilter():
    return Guid('fb056ba0-2502-45b9-8e-86-2b-40-de-84-ad-29')
def _define_CLSID_CaptionsFilter():
    return Guid('2f7ee4b6-6ff5-4eb4-b2-4a-2b-fc-41-11-71-71')
def _define_CLSID_SubtitlesFilter():
    return Guid('9f22cfea-ce07-41ab-8b-a0-c7-36-4a-f9-0a-f9')
def _define_CLSID_DirectShowPluginControl():
    return Guid('8670c736-f614-427b-8a-da-bb-ad-c5-87-19-4b')
def _define_FORMAT_None():
    return Guid('0f6417d6-c318-11d0-a4-3f-00-a0-c9-22-31-96')
def _define_FORMAT_VideoInfo():
    return Guid('05589f80-c356-11ce-bf-01-00-aa-00-55-59-5a')
def _define_FORMAT_VideoInfo2():
    return Guid('f72a76a0-eb0a-11d0-ac-e4-00-00-c0-cc-16-ba')
def _define_FORMAT_WaveFormatEx():
    return Guid('05589f81-c356-11ce-bf-01-00-aa-00-55-59-5a')
def _define_FORMAT_MPEGVideo():
    return Guid('05589f82-c356-11ce-bf-01-00-aa-00-55-59-5a')
def _define_FORMAT_MPEGStreams():
    return Guid('05589f83-c356-11ce-bf-01-00-aa-00-55-59-5a')
def _define_FORMAT_DvInfo():
    return Guid('05589f84-c356-11ce-bf-01-00-aa-00-55-59-5a')
def _define_FORMAT_525WSS():
    return Guid('c7ecf04d-4582-4869-9a-bb-bf-b5-23-b6-2e-df')
def _define_CLSID_DirectDrawProperties():
    return Guid('944d4c00-dd52-11ce-bf-0e-00-aa-00-55-59-5a')
def _define_CLSID_PerformanceProperties():
    return Guid('59ce6880-acf8-11cf-b5-6e-00-80-c7-c4-b6-8a')
def _define_CLSID_QualityProperties():
    return Guid('418afb70-f8b8-11ce-aa-c6-00-20-af-0b-99-a3')
def _define_CLSID_VPObject():
    return Guid('ce292861-fc88-11d0-9e-69-00-c0-4f-d7-c1-5b')
def _define_CLSID_VPVBIObject():
    return Guid('814b9801-1c88-11d1-ba-d9-00-60-97-44-11-1a')
def _define_CLSID_DVDecPropertiesPage():
    return Guid('101193c0-0bfe-11d0-af-91-00-aa-00-b6-7a-42')
def _define_CLSID_DVEncPropertiesPage():
    return Guid('4150f050-bb6f-11d0-af-b9-00-aa-00-b6-7a-42')
def _define_CLSID_DVMuxPropertyPage():
    return Guid('4db880e0-c10d-11d0-af-b9-00-aa-00-b6-7a-42')
def _define_CLSID_WstDecoderPropertyPage():
    return Guid('04e27f80-91e4-11d3-a1-84-00-10-5a-ef-9f-33')
def _define_FORMAT_AnalogVideo():
    return Guid('0482dde0-7817-11cf-8a-03-00-aa-00-6e-cb-65')
def _define_MEDIATYPE_AnalogVideo():
    return Guid('0482dde1-7817-11cf-8a-03-00-aa-00-6e-cb-65')
def _define_MEDIASUBTYPE_AnalogVideo_NTSC_M():
    return Guid('0482dde2-7817-11cf-8a-03-00-aa-00-6e-cb-65')
def _define_MEDIASUBTYPE_AnalogVideo_PAL_B():
    return Guid('0482dde5-7817-11cf-8a-03-00-aa-00-6e-cb-65')
def _define_MEDIASUBTYPE_AnalogVideo_PAL_D():
    return Guid('0482dde6-7817-11cf-8a-03-00-aa-00-6e-cb-65')
def _define_MEDIASUBTYPE_AnalogVideo_PAL_G():
    return Guid('0482dde7-7817-11cf-8a-03-00-aa-00-6e-cb-65')
def _define_MEDIASUBTYPE_AnalogVideo_PAL_H():
    return Guid('0482dde8-7817-11cf-8a-03-00-aa-00-6e-cb-65')
def _define_MEDIASUBTYPE_AnalogVideo_PAL_I():
    return Guid('0482dde9-7817-11cf-8a-03-00-aa-00-6e-cb-65')
def _define_MEDIASUBTYPE_AnalogVideo_PAL_M():
    return Guid('0482ddea-7817-11cf-8a-03-00-aa-00-6e-cb-65')
def _define_MEDIASUBTYPE_AnalogVideo_PAL_N():
    return Guid('0482ddeb-7817-11cf-8a-03-00-aa-00-6e-cb-65')
def _define_MEDIASUBTYPE_AnalogVideo_PAL_N_COMBO():
    return Guid('0482ddec-7817-11cf-8a-03-00-aa-00-6e-cb-65')
def _define_MEDIASUBTYPE_AnalogVideo_SECAM_B():
    return Guid('0482ddf0-7817-11cf-8a-03-00-aa-00-6e-cb-65')
def _define_MEDIASUBTYPE_AnalogVideo_SECAM_D():
    return Guid('0482ddf1-7817-11cf-8a-03-00-aa-00-6e-cb-65')
def _define_MEDIASUBTYPE_AnalogVideo_SECAM_G():
    return Guid('0482ddf2-7817-11cf-8a-03-00-aa-00-6e-cb-65')
def _define_MEDIASUBTYPE_AnalogVideo_SECAM_H():
    return Guid('0482ddf3-7817-11cf-8a-03-00-aa-00-6e-cb-65')
def _define_MEDIASUBTYPE_AnalogVideo_SECAM_K():
    return Guid('0482ddf4-7817-11cf-8a-03-00-aa-00-6e-cb-65')
def _define_MEDIASUBTYPE_AnalogVideo_SECAM_K1():
    return Guid('0482ddf5-7817-11cf-8a-03-00-aa-00-6e-cb-65')
def _define_MEDIASUBTYPE_AnalogVideo_SECAM_L():
    return Guid('0482ddf6-7817-11cf-8a-03-00-aa-00-6e-cb-65')
def _define_MEDIATYPE_AnalogAudio():
    return Guid('0482dee1-7817-11cf-8a-03-00-aa-00-6e-cb-65')
def _define_FORMAT_CAPTIONED_H264VIDEO():
    return Guid('a4efc024-873e-4da3-89-8b-47-4d-db-d7-9f-d0')
def _define_FORMAT_CC_CONTAINER():
    return Guid('50997a4a-e508-4054-a2-b2-10-ff-0a-c1-a6-9a')
def _define_CAPTION_FORMAT_ATSC():
    return Guid('3ed9cb31-fd10-4ade-bc-cc-fb-91-05-d2-f3-ef')
def _define_CAPTION_FORMAT_DVB():
    return Guid('12230db4-ff2a-447e-bb-88-68-41-c4-16-d0-68')
def _define_CAPTION_FORMAT_DIRECTV():
    return Guid('e9ca1ce7-915e-47be-9b-b9-bf-1d-8a-13-a5-ec')
def _define_CAPTION_FORMAT_ECHOSTAR():
    return Guid('ebb1a262-1158-4b99-ae-80-92-ac-77-69-52-c4')
def _define_FORMAT_CAPTIONED_MPEG2VIDEO():
    return Guid('7ab2ada2-81b6-4f14-b3-c8-d0-c4-86-39-3b-67')
def _define_TIME_FORMAT_NONE():
    return Guid('00000000-0000-0000-00-00-00-00-00-00-00-00')
def _define_TIME_FORMAT_FRAME():
    return Guid('7b785570-8c82-11cf-bc-0c-00-aa-00-ac-74-f6')
def _define_TIME_FORMAT_BYTE():
    return Guid('7b785571-8c82-11cf-bc-0c-00-aa-00-ac-74-f6')
def _define_TIME_FORMAT_SAMPLE():
    return Guid('7b785572-8c82-11cf-bc-0c-00-aa-00-ac-74-f6')
def _define_TIME_FORMAT_FIELD():
    return Guid('7b785573-8c82-11cf-bc-0c-00-aa-00-ac-74-f6')
def _define_TIME_FORMAT_MEDIA_TIME():
    return Guid('7b785574-8c82-11cf-bc-0c-00-aa-00-ac-74-f6')
def _define_AMPROPSETID_Pin():
    return Guid('9b00f101-1567-11d1-b3-f1-00-aa-00-37-61-c5')
def _define_PIN_CATEGORY_CAPTURE():
    return Guid('fb6c4281-0353-11d1-90-5f-00-00-c0-cc-16-ba')
def _define_PIN_CATEGORY_PREVIEW():
    return Guid('fb6c4282-0353-11d1-90-5f-00-00-c0-cc-16-ba')
def _define_PIN_CATEGORY_ANALOGVIDEOIN():
    return Guid('fb6c4283-0353-11d1-90-5f-00-00-c0-cc-16-ba')
def _define_PIN_CATEGORY_VBI():
    return Guid('fb6c4284-0353-11d1-90-5f-00-00-c0-cc-16-ba')
def _define_PIN_CATEGORY_VIDEOPORT():
    return Guid('fb6c4285-0353-11d1-90-5f-00-00-c0-cc-16-ba')
def _define_PIN_CATEGORY_NABTS():
    return Guid('fb6c4286-0353-11d1-90-5f-00-00-c0-cc-16-ba')
def _define_PIN_CATEGORY_EDS():
    return Guid('fb6c4287-0353-11d1-90-5f-00-00-c0-cc-16-ba')
def _define_PIN_CATEGORY_TELETEXT():
    return Guid('fb6c4288-0353-11d1-90-5f-00-00-c0-cc-16-ba')
def _define_PIN_CATEGORY_CC():
    return Guid('fb6c4289-0353-11d1-90-5f-00-00-c0-cc-16-ba')
def _define_PIN_CATEGORY_STILL():
    return Guid('fb6c428a-0353-11d1-90-5f-00-00-c0-cc-16-ba')
def _define_PIN_CATEGORY_TIMECODE():
    return Guid('fb6c428b-0353-11d1-90-5f-00-00-c0-cc-16-ba')
def _define_PIN_CATEGORY_VIDEOPORT_VBI():
    return Guid('fb6c428c-0353-11d1-90-5f-00-00-c0-cc-16-ba')
def _define_LOOK_UPSTREAM_ONLY():
    return Guid('ac798be0-98e3-11d1-b3-f1-00-aa-00-37-61-c5')
def _define_LOOK_DOWNSTREAM_ONLY():
    return Guid('ac798be1-98e3-11d1-b3-f1-00-aa-00-37-61-c5')
def _define_CLSID_TVTunerFilterPropertyPage():
    return Guid('266eee41-6c63-11cf-8a-03-00-aa-00-6e-cb-65')
def _define_CLSID_CrossbarFilterPropertyPage():
    return Guid('71f96461-78f3-11d0-a1-8c-00-a0-c9-11-89-56')
def _define_CLSID_TVAudioFilterPropertyPage():
    return Guid('71f96463-78f3-11d0-a1-8c-00-a0-c9-11-89-56')
def _define_CLSID_VideoProcAmpPropertyPage():
    return Guid('71f96464-78f3-11d0-a1-8c-00-a0-c9-11-89-56')
def _define_CLSID_CameraControlPropertyPage():
    return Guid('71f96465-78f3-11d0-a1-8c-00-a0-c9-11-89-56')
def _define_CLSID_AnalogVideoDecoderPropertyPage():
    return Guid('71f96466-78f3-11d0-a1-8c-00-a0-c9-11-89-56')
def _define_CLSID_VideoStreamConfigPropertyPage():
    return Guid('71f96467-78f3-11d0-a1-8c-00-a0-c9-11-89-56')
def _define_CLSID_AudioRendererAdvancedProperties():
    return Guid('37e92a92-d9aa-11d2-bf-84-8e-f2-b1-55-5a-ed')
def _define_CLSID_VideoMixingRenderer():
    return Guid('b87beb7b-8d29-423f-ae-4d-65-82-c1-01-75-ac')
def _define_CLSID_VideoRendererDefault():
    return Guid('6bc1cffa-8fc1-4261-ac-22-cf-b4-cc-38-db-50')
def _define_CLSID_AllocPresenter():
    return Guid('99d54f63-1a69-41ae-aa-4d-c9-76-eb-3f-07-13')
def _define_CLSID_AllocPresenterDDXclMode():
    return Guid('4444ac9e-242e-471b-a3-c7-45-dc-d4-63-52-bc')
def _define_CLSID_VideoPortManager():
    return Guid('6f26a6cd-967b-47fd-87-4a-7a-ed-2c-9d-25-a2')
def _define_CLSID_VideoMixingRenderer9():
    return Guid('51b4abf3-748f-4e3b-a2-76-c8-28-33-0e-92-6a')
def _define_CLSID_EnhancedVideoRenderer():
    return Guid('fa10746c-9b63-4b6c-bc-49-fc-30-0e-a5-f2-56')
def _define_CLSID_MFVideoMixer9():
    return Guid('e474e05a-ab65-4f6a-82-7c-21-8b-1b-aa-f3-1f')
def _define_CLSID_MFVideoPresenter9():
    return Guid('98455561-5136-4d28-ab-08-4c-ee-40-ea-27-81')
def _define_CLSID_EVRTearlessWindowPresenter9():
    return Guid('a0a7a57b-59b2-4919-a6-94-ad-d0-a5-26-c3-73')
def _define_CLSID_EVRPlaybackPipelineOptimizer():
    return Guid('62079164-233b-41f8-a8-0f-f0-17-05-f5-14-a8')
def _define_EVRConfig_ForceBob():
    return Guid('e447df01-10ca-4d17-b1-7e-6a-84-0f-8a-3a-4c')
def _define_EVRConfig_ForceThrottle():
    return Guid('e447df03-10ca-4d17-b1-7e-6a-84-0f-8a-3a-4c')
def _define_EVRConfig_ForceHalfInterlace():
    return Guid('e447df05-10ca-4d17-b1-7e-6a-84-0f-8a-3a-4c')
def _define_EVRConfig_ForceScaling():
    return Guid('e447df07-10ca-4d17-b1-7e-6a-84-0f-8a-3a-4c')
def _define_EVRConfig_ForceBatching():
    return Guid('e447df09-10ca-4d17-b1-7e-6a-84-0f-8a-3a-4c')
def _define_CLSID_NetworkProvider():
    return Guid('b2f3a67c-29da-4c78-88-31-09-1e-d5-09-a4-75')
def _define_CLSID_ATSCNetworkProvider():
    return Guid('0dad2fdd-5fd7-11d3-8f-50-00-c0-4f-79-71-e2')
def _define_CLSID_ATSCNetworkPropertyPage():
    return Guid('e3444d16-5ac4-4386-88-df-13-fd-23-0e-1d-da')
def _define_CLSID_DVBSNetworkProvider():
    return Guid('fa4b375a-45b4-4d45-84-40-26-39-57-b1-16-23')
def _define_CLSID_DVBTNetworkProvider():
    return Guid('216c62df-6d7f-4e9a-85-71-05-f1-4e-db-76-6a')
def _define_CLSID_DVBCNetworkProvider():
    return Guid('dc0c0fe7-0485-4266-b9-3f-68-fb-f8-0e-d8-34')
def _define_DSATTRIB_UDCRTag():
    return Guid('eb7836ca-14ff-4919-bc-e7-3a-f1-23-19-e5-0c')
def _define_DSATTRIB_PicSampleSeq():
    return Guid('2f5bae02-7b8f-4f60-82-d6-e4-ea-2f-1f-4c-99')
def _define_DSATTRIB_OptionalVideoAttributes():
    return Guid('5a5f08ca-55c2-4033-92-ab-55-db-8f-78-12-26')
def _define_DSATTRIB_CC_CONTAINER_INFO():
    return Guid('e7e050fb-dd5d-40dd-99-15-35-dc-b8-1b-dc-8a')
def _define_DSATTRIB_TRANSPORT_PROPERTIES():
    return Guid('b622f612-47ad-4671-ad-6c-05-a9-8e-65-de-3a')
def _define_DSATTRIB_PBDATAG_ATTRIBUTE():
    return Guid('e0b56679-12b9-43cc-b7-df-57-8c-aa-5a-7b-63')
def _define_DSATTRIB_CAPTURE_STREAMTIME():
    return Guid('0c1a5614-30cd-4f40-bc-bf-d0-3e-52-30-62-07')
def _define_DSATTRIB_DSHOW_STREAM_DESC():
    return Guid('5fb5673b-0a2a-4565-82-7b-68-53-fd-75-e6-11')
def _define_DSATTRIB_SAMPLE_LIVE_STREAM_TIME():
    return Guid('892cd111-72f3-411d-8b-91-a9-e9-12-3a-c2-9a')
def _define_UUID_UdriTagTables():
    return Guid('e1b98d74-9778-4878-b6-64-eb-20-20-36-4d-88')
def _define_UUID_WMDRMTagTables():
    return Guid('5dcd1101-9263-45bb-a4-d5-c4-15-ab-8c-58-9c')
def _define_CLSID_DShowTVEFilter():
    return Guid('05500280-faa5-4df9-82-46-bf-c2-3a-c5-ce-a8')
def _define_CLSID_TVEFilterTuneProperties():
    return Guid('05500281-faa5-4df9-82-46-bf-c2-3a-c5-ce-a8')
def _define_CLSID_TVEFilterCCProperties():
    return Guid('05500282-faa5-4df9-82-46-bf-c2-3a-c5-ce-a8')
def _define_CLSID_TVEFilterStatsProperties():
    return Guid('05500283-faa5-4df9-82-46-bf-c2-3a-c5-ce-a8')
def _define_CLSID_IVideoEncoderProxy():
    return Guid('b43c4eec-8c32-4791-91-02-50-8a-da-5e-e8-e7')
def _define_CLSID_ICodecAPIProxy():
    return Guid('7ff0997a-1999-4286-a7-3c-62-2b-88-14-e7-eb')
def _define_CLSID_IVideoEncoderCodecAPIProxy():
    return Guid('b05dabd9-56e5-4fdc-af-a4-8a-47-e9-1f-1c-9c')
def _define_ENCAPIPARAM_BITRATE():
    return Guid('49cc4c43-ca83-4ad4-a9-af-f3-69-6a-f6-66-df')
def _define_ENCAPIPARAM_PEAK_BITRATE():
    return Guid('703f16a9-3d48-44a1-b0-77-01-8d-ff-91-5d-19')
def _define_ENCAPIPARAM_BITRATE_MODE():
    return Guid('ee5fb25c-c713-40d1-9d-58-c0-d7-24-1e-25-0f')
def _define_ENCAPIPARAM_SAP_MODE():
    return Guid('0c0171db-fefc-4af7-99-91-a5-65-7c-19-1c-d1')
def _define_CODECAPI_CHANGELISTS():
    return Guid('62b12acf-f6b0-47d9-94-56-96-f2-2c-4e-0b-9d')
def _define_CODECAPI_VIDEO_ENCODER():
    return Guid('7112e8e1-3d03-47ef-8e-60-03-f1-cf-53-73-01')
def _define_CODECAPI_AUDIO_ENCODER():
    return Guid('b9d19a3e-f897-429c-bc-46-81-38-b7-27-2b-2d')
def _define_CODECAPI_SETALLDEFAULTS():
    return Guid('6c5e6a7c-acf8-4f55-a9-99-1a-62-81-09-05-1b')
def _define_CODECAPI_ALLSETTINGS():
    return Guid('6a577e92-83e1-4113-ad-c2-4f-ce-c3-2f-83-a1')
def _define_CODECAPI_SUPPORTSEVENTS():
    return Guid('0581af97-7693-4dbd-9d-ca-3f-9e-bd-65-85-a1')
def _define_CODECAPI_CURRENTCHANGELIST():
    return Guid('1cb14e83-7d72-4657-83-fd-47-a2-c5-b9-d1-3d')
def _define_CLSID_SBE2MediaTypeProfile():
    return Guid('1f26a602-2b5c-4b63-b8-e8-9e-a5-c1-a7-dc-2e')
def _define_CLSID_SBE2FileScan():
    return Guid('3e458037-0ca6-41aa-a5-94-2a-a6-c0-2d-70-9b')
def _define_CODECAPI_AVDecMmcssClass():
    return Guid('e0ad4828-df66-4893-9f-33-78-8a-a4-ec-40-82')
AVENC_H263V_LEVELCOUNT = 8
AVENC_H264V_LEVELCOUNT = 16
AVENC_H264V_MAX_MBBITS = 3200
def _define_D3D12_VIDEO_DECODE_PROFILE_MPEG2():
    return Guid('ee27417f-5e28-4e65-be-ea-1d-26-b5-08-ad-c9')
def _define_D3D12_VIDEO_DECODE_PROFILE_MPEG1_AND_MPEG2():
    return Guid('86695f12-340e-4f04-9f-d3-92-53-dd-32-74-60')
def _define_D3D12_VIDEO_DECODE_PROFILE_H264():
    return Guid('1b81be68-a0c7-11d3-b9-84-00-c0-4f-2e-73-c5')
def _define_D3D12_VIDEO_DECODE_PROFILE_H264_STEREO_PROGRESSIVE():
    return Guid('d79be8da-0cf1-4c81-b8-2a-69-a4-e2-36-f4-3d')
def _define_D3D12_VIDEO_DECODE_PROFILE_H264_STEREO():
    return Guid('f9aaccbb-c2b6-4cfc-87-79-57-07-b1-76-05-52')
def _define_D3D12_VIDEO_DECODE_PROFILE_H264_MULTIVIEW():
    return Guid('705b9d82-76cf-49d6-b7-e6-ac-88-72-db-01-3c')
def _define_D3D12_VIDEO_DECODE_PROFILE_VC1():
    return Guid('1b81bea3-a0c7-11d3-b9-84-00-c0-4f-2e-73-c5')
def _define_D3D12_VIDEO_DECODE_PROFILE_VC1_D2010():
    return Guid('1b81bea4-a0c7-11d3-b9-84-00-c0-4f-2e-73-c5')
def _define_D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_SIMPLE():
    return Guid('efd64d74-c9e8-41d7-a5-e9-e9-b0-e3-9f-a3-19')
def _define_D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_ADVSIMPLE_NOGMC():
    return Guid('ed418a9f-010d-4eda-9a-e3-9a-65-35-8d-8d-2e')
def _define_D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN():
    return Guid('5b11d51b-2f4c-4452-bc-c3-09-f2-a1-16-0c-c0')
def _define_D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN10():
    return Guid('107af0e0-ef1a-4d19-ab-a8-67-a1-63-07-3d-13')
def _define_D3D12_VIDEO_DECODE_PROFILE_VP9():
    return Guid('463707f8-a1d0-4585-87-6d-83-aa-6d-60-b8-9e')
def _define_D3D12_VIDEO_DECODE_PROFILE_VP9_10BIT_PROFILE2():
    return Guid('a4c749ef-6ecf-48aa-84-48-50-a7-a1-16-5f-f7')
def _define_D3D12_VIDEO_DECODE_PROFILE_VP8():
    return Guid('90b899ea-3a62-4705-88-b3-8d-f0-4b-27-44-e7')
def _define_D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE0():
    return Guid('b8be4ccb-cf53-46ba-8d-59-d6-b8-a6-da-5d-2a')
def _define_D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE1():
    return Guid('6936ff0f-45b1-4163-9c-c1-64-6e-f6-94-61-08')
def _define_D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE2():
    return Guid('0c5f2aa1-e541-4089-bb-7b-98-11-0a-19-d7-c8')
def _define_D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2():
    return Guid('17127009-a00f-4ce1-99-4e-bf-40-81-f6-f3-f0')
def _define_D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2_420():
    return Guid('2d80bed6-9cac-4835-9e-91-32-7b-bc-4f-9e-e8')
def _define_DXVA2_ModeMPEG2_MoComp():
    return Guid('e6a9f44b-61b0-4563-9e-a4-63-d2-a3-c6-fe-66')
def _define_DXVA2_ModeMPEG2_IDCT():
    return Guid('bf22ad00-03ea-4690-80-77-47-33-46-20-9b-7e')
def _define_DXVA2_ModeMPEG2_VLD():
    return Guid('ee27417f-5e28-4e65-be-ea-1d-26-b5-08-ad-c9')
def _define_DXVA2_ModeMPEG1_VLD():
    return Guid('6f3ec719-3735-42cc-80-63-65-cc-3c-b3-66-16')
def _define_DXVA2_ModeMPEG2and1_VLD():
    return Guid('86695f12-340e-4f04-9f-d3-92-53-dd-32-74-60')
def _define_DXVA2_ModeH264_A():
    return Guid('1b81be64-a0c7-11d3-b9-84-00-c0-4f-2e-73-c5')
def _define_DXVA2_ModeH264_B():
    return Guid('1b81be65-a0c7-11d3-b9-84-00-c0-4f-2e-73-c5')
def _define_DXVA2_ModeH264_C():
    return Guid('1b81be66-a0c7-11d3-b9-84-00-c0-4f-2e-73-c5')
def _define_DXVA2_ModeH264_D():
    return Guid('1b81be67-a0c7-11d3-b9-84-00-c0-4f-2e-73-c5')
def _define_DXVA2_ModeH264_E():
    return Guid('1b81be68-a0c7-11d3-b9-84-00-c0-4f-2e-73-c5')
def _define_DXVA2_ModeH264_F():
    return Guid('1b81be69-a0c7-11d3-b9-84-00-c0-4f-2e-73-c5')
def _define_DXVA2_ModeH264_VLD_WithFMOASO_NoFGT():
    return Guid('d5f04ff9-3418-45d8-95-61-32-a7-6a-ae-2d-dd')
def _define_DXVA2_ModeH264_VLD_Stereo_Progressive_NoFGT():
    return Guid('d79be8da-0cf1-4c81-b8-2a-69-a4-e2-36-f4-3d')
def _define_DXVA2_ModeH264_VLD_Stereo_NoFGT():
    return Guid('f9aaccbb-c2b6-4cfc-87-79-57-07-b1-76-05-52')
def _define_DXVA2_ModeH264_VLD_Multiview_NoFGT():
    return Guid('705b9d82-76cf-49d6-b7-e6-ac-88-72-db-01-3c')
def _define_DXVA2_ModeWMV8_A():
    return Guid('1b81be80-a0c7-11d3-b9-84-00-c0-4f-2e-73-c5')
def _define_DXVA2_ModeWMV8_B():
    return Guid('1b81be81-a0c7-11d3-b9-84-00-c0-4f-2e-73-c5')
def _define_DXVA2_ModeWMV9_A():
    return Guid('1b81be90-a0c7-11d3-b9-84-00-c0-4f-2e-73-c5')
def _define_DXVA2_ModeWMV9_B():
    return Guid('1b81be91-a0c7-11d3-b9-84-00-c0-4f-2e-73-c5')
def _define_DXVA2_ModeWMV9_C():
    return Guid('1b81be94-a0c7-11d3-b9-84-00-c0-4f-2e-73-c5')
def _define_DXVA2_ModeVC1_A():
    return Guid('1b81bea0-a0c7-11d3-b9-84-00-c0-4f-2e-73-c5')
def _define_DXVA2_ModeVC1_B():
    return Guid('1b81bea1-a0c7-11d3-b9-84-00-c0-4f-2e-73-c5')
def _define_DXVA2_ModeVC1_C():
    return Guid('1b81bea2-a0c7-11d3-b9-84-00-c0-4f-2e-73-c5')
def _define_DXVA2_ModeVC1_D():
    return Guid('1b81bea3-a0c7-11d3-b9-84-00-c0-4f-2e-73-c5')
def _define_DXVA2_ModeVC1_D2010():
    return Guid('1b81bea4-a0c7-11d3-b9-84-00-c0-4f-2e-73-c5')
def _define_DXVA2_NoEncrypt():
    return Guid('1b81bed0-a0c7-11d3-b9-84-00-c0-4f-2e-73-c5')
def _define_DXVA2_VideoProcProgressiveDevice():
    return Guid('5a54a0c9-c7ec-4bd9-8e-de-f3-c7-5d-c4-39-3b')
def _define_DXVA2_VideoProcBobDevice():
    return Guid('335aa36e-7884-43a4-9c-91-7f-87-fa-f3-e3-7e')
def _define_DXVA2_VideoProcSoftwareDevice():
    return Guid('4553d47f-ee7e-4e3f-94-75-db-f1-37-6c-48-10')
def _define_DXVA2_ModeMPEG4pt2_VLD_Simple():
    return Guid('efd64d74-c9e8-41d7-a5-e9-e9-b0-e3-9f-a3-19')
def _define_DXVA2_ModeMPEG4pt2_VLD_AdvSimple_NoGMC():
    return Guid('ed418a9f-010d-4eda-9a-e3-9a-65-35-8d-8d-2e')
def _define_DXVA2_ModeMPEG4pt2_VLD_AdvSimple_GMC():
    return Guid('ab998b5b-4258-44a9-9f-eb-94-e5-97-a6-ba-ae')
def _define_DXVA2_ModeHEVC_VLD_Main():
    return Guid('5b11d51b-2f4c-4452-bc-c3-09-f2-a1-16-0c-c0')
def _define_DXVA2_ModeHEVC_VLD_Main10():
    return Guid('107af0e0-ef1a-4d19-ab-a8-67-a1-63-07-3d-13')
def _define_DXVA2_ModeVP9_VLD_Profile0():
    return Guid('463707f8-a1d0-4585-87-6d-83-aa-6d-60-b8-9e')
def _define_DXVA2_ModeVP9_VLD_10bit_Profile2():
    return Guid('a4c749ef-6ecf-48aa-84-48-50-a7-a1-16-5f-f7')
def _define_DXVA2_ModeVP8_VLD():
    return Guid('90b899ea-3a62-4705-88-b3-8d-f0-4b-27-44-e7')
DXVA2_E_NOT_INITIALIZED = -2147217408
DXVA2_E_NEW_VIDEO_DEVICE = -2147217407
DXVA2_E_VIDEO_DEVICE_LOCKED = -2147217406
DXVA2_E_NOT_AVAILABLE = -2147217405
MAX_SUBSTREAMS = 15
DXVA2_DECODE_GET_DRIVER_HANDLE = 1829
DXVA2_DECODE_SPECIFY_ENCRYPTED_BLOCKS = 1828
def _define_DXVAp_ModeMPEG2_A():
    return Guid('1b81be0a-a0c7-11d3-b9-84-00-c0-4f-2e-73-c5')
def _define_DXVAp_ModeMPEG2_C():
    return Guid('1b81be0c-a0c7-11d3-b9-84-00-c0-4f-2e-73-c5')
def _define_DXVAp_NoEncrypt():
    return Guid('1b81bed0-a0c7-11d3-b9-84-00-c0-4f-2e-73-c5')
def _define_DXVAp_DeinterlaceBobDevice():
    return Guid('335aa36e-7884-43a4-9c-91-7f-87-fa-f3-e3-7e')
def _define_DXVAp_DeinterlaceContainerDevice():
    return Guid('0e85cb93-3046-4ff0-ae-cc-d5-8c-b5-f0-35-fd')
def _define_DXVAHD_STREAM_STATE_PRIVATE_IVTC():
    return Guid('9c601e3c-0f33-414c-a7-39-99-54-0e-e4-2d-a5')
def _define_DXVAHDControlGuid():
    return Guid('a0386e75-f70c-464c-a9-ce-33-c4-4e-09-16-23')
def _define_DXVAHDETWGUID_CREATEVIDEOPROCESSOR():
    return Guid('681e3d1e-5674-4fb3-a5-03-2f-20-55-e9-1f-60')
def _define_DXVAHDETWGUID_VIDEOPROCESSBLTSTATE():
    return Guid('76c94b5a-193f-4692-94-84-a4-d9-99-da-81-a8')
def _define_DXVAHDETWGUID_VIDEOPROCESSSTREAMSTATE():
    return Guid('262c0b02-209d-47ed-94-d8-82-ae-02-b8-4a-a7')
def _define_DXVAHDETWGUID_VIDEOPROCESSBLTHD():
    return Guid('bef3d435-78c7-4de3-97-07-cd-1b-08-3b-16-0a')
def _define_DXVAHDETWGUID_VIDEOPROCESSBLTHD_STREAM():
    return Guid('27ae473e-a5fc-4be5-b4-e3-f2-49-94-d3-c4-95')
def _define_DXVAHDETWGUID_DESTROYVIDEOPROCESSOR():
    return Guid('f943f0a0-3f16-43e0-80-93-10-5a-98-6a-a5-f1')
def _define_MR_VIDEO_RENDER_SERVICE():
    return Guid('1092a86c-ab1a-459a-a3-36-83-1f-bc-4d-11-ff')
def _define_MR_VIDEO_MIXER_SERVICE():
    return Guid('073cd2fc-6cf4-40b7-88-59-e8-95-52-c8-41-f8')
def _define_MR_VIDEO_ACCELERATION_SERVICE():
    return Guid('efef5175-5c7d-4ce2-bb-bd-34-ff-8b-ca-65-54')
def _define_MR_BUFFER_SERVICE():
    return Guid('a562248c-9ac6-4ffc-9f-ba-3a-f8-f8-ad-1a-4d')
def _define_VIDEO_ZOOM_RECT():
    return Guid('7aaa1638-1b7f-4c93-bd-89-5b-9c-9f-b6-fc-f0')
MFEVRDLL = 0
MF_SDK_VERSION = 2
MF_API_VERSION = 112
MFSTARTUP_NOSOCKET = 1
MFSTARTUP_LITE = 1
MFSTARTUP_FULL = 0
MF_E_DXGI_DEVICE_NOT_INITIALIZED = -2147217408
MF_E_DXGI_NEW_VIDEO_DEVICE = -2147217407
MF_E_DXGI_VIDEO_DEVICE_LOCKED = -2147217406
MF_1_BYTE_ALIGNMENT = 0
MF_2_BYTE_ALIGNMENT = 1
MF_4_BYTE_ALIGNMENT = 3
MF_8_BYTE_ALIGNMENT = 7
MF_16_BYTE_ALIGNMENT = 15
MF_32_BYTE_ALIGNMENT = 31
MF_64_BYTE_ALIGNMENT = 63
MF_128_BYTE_ALIGNMENT = 127
MF_256_BYTE_ALIGNMENT = 255
MF_512_BYTE_ALIGNMENT = 511
MF_1024_BYTE_ALIGNMENT = 1023
MF_2048_BYTE_ALIGNMENT = 2047
MF_4096_BYTE_ALIGNMENT = 4095
MF_8192_BYTE_ALIGNMENT = 8191
def _define_MF_EVENT_SESSIONCAPS():
    return Guid('7e5ebcd0-11b8-4abe-af-ad-10-f6-59-9a-7f-42')
def _define_MF_EVENT_SESSIONCAPS_DELTA():
    return Guid('7e5ebcd1-11b8-4abe-af-ad-10-f6-59-9a-7f-42')
MFSESSIONCAP_START = 1
MFSESSIONCAP_SEEK = 2
MFSESSIONCAP_PAUSE = 4
MFSESSIONCAP_RATE_FORWARD = 16
MFSESSIONCAP_RATE_REVERSE = 32
MFSESSIONCAP_DOES_NOT_USE_NETWORK = 64
def _define_MF_EVENT_TOPOLOGY_STATUS():
    return Guid('30c5018d-9a53-454b-ad-9e-6d-5f-8f-a7-c4-3b')
def _define_MF_EVENT_START_PRESENTATION_TIME():
    return Guid('5ad914d0-9b45-4a8d-a2-c0-81-d1-e5-0b-fb-07')
def _define_MF_EVENT_PRESENTATION_TIME_OFFSET():
    return Guid('5ad914d1-9b45-4a8d-a2-c0-81-d1-e5-0b-fb-07')
def _define_MF_EVENT_START_PRESENTATION_TIME_AT_OUTPUT():
    return Guid('5ad914d2-9b45-4a8d-a2-c0-81-d1-e5-0b-fb-07')
def _define_MF_EVENT_SOURCE_FAKE_START():
    return Guid('a8cc55a7-6b31-419f-84-5d-ff-b3-51-a2-43-4b')
def _define_MF_EVENT_SOURCE_PROJECTSTART():
    return Guid('a8cc55a8-6b31-419f-84-5d-ff-b3-51-a2-43-4b')
def _define_MF_EVENT_SOURCE_ACTUAL_START():
    return Guid('a8cc55a9-6b31-419f-84-5d-ff-b3-51-a2-43-4b')
def _define_MF_EVENT_SOURCE_TOPOLOGY_CANCELED():
    return Guid('db62f650-9a5e-4704-ac-f3-56-3b-c6-a7-33-64')
def _define_MF_EVENT_SOURCE_CHARACTERISTICS():
    return Guid('47db8490-8b22-4f52-af-da-9c-e1-b2-d3-cf-a8')
def _define_MF_EVENT_SOURCE_CHARACTERISTICS_OLD():
    return Guid('47db8491-8b22-4f52-af-da-9c-e1-b2-d3-cf-a8')
def _define_MF_EVENT_DO_THINNING():
    return Guid('321ea6fb-dad9-46e4-b3-1d-d2-ea-e7-09-0e-30')
def _define_MF_EVENT_SCRUBSAMPLE_TIME():
    return Guid('9ac712b3-dcb8-44d5-8d-0c-37-45-5a-27-82-e3')
def _define_MF_EVENT_OUTPUT_NODE():
    return Guid('830f1a8b-c060-46dd-a8-01-1c-95-de-c9-b1-07')
def _define_MF_EVENT_MFT_INPUT_STREAM_ID():
    return Guid('f29c2cca-7ae6-42d2-b2-84-bf-83-7c-c8-74-e2')
def _define_MF_EVENT_MFT_CONTEXT():
    return Guid('b7cd31f1-899e-4b41-80-c9-26-a8-96-d3-29-77')
def _define_MF_EVENT_STREAM_METADATA_KEYDATA():
    return Guid('cd59a4a1-4a3b-4bbd-86-65-72-a4-0f-be-a7-76')
def _define_MF_EVENT_STREAM_METADATA_CONTENT_KEYIDS():
    return Guid('5063449d-cc29-4fc6-a7-5a-d2-47-b3-5a-f8-5c')
def _define_MF_EVENT_STREAM_METADATA_SYSTEMID():
    return Guid('1ea2ef64-ba16-4a36-87-19-fe-75-60-ba-32-ad')
def _define_MFSampleExtension_MaxDecodeFrameSize():
    return Guid('d3cc654f-f9f3-4a13-88-9f-f0-4e-b2-b5-b9-57')
def _define_MFSampleExtension_AccumulatedNonRefPicPercent():
    return Guid('79ea74df-a740-445b-bc-98-c9-ed-1f-26-0e-ee')
def _define_MFSampleExtension_Encryption_ProtectionScheme():
    return Guid('d054d096-28bb-45da-87-ec-74-f3-51-87-14-06')
def _define_MFSampleExtension_Encryption_CryptByteBlock():
    return Guid('9d84289b-0c7f-4713-ab-95-10-8a-b4-2a-d8-01')
def _define_MFSampleExtension_Encryption_SkipByteBlock():
    return Guid('0d550548-8317-4ab1-84-5f-d0-63-06-e2-93-e3')
def _define_MFSampleExtension_Encryption_SubSample_Mapping():
    return Guid('8444f27a-69a1-48da-bd-08-11-ce-f3-68-30-d2')
def _define_MFSampleExtension_Encryption_ClearSliceHeaderData():
    return Guid('5509a4f4-320d-4e6c-8d-1a-94-c6-6d-d2-0c-b0')
def _define_MFSampleExtension_Encryption_HardwareProtection_KeyInfoID():
    return Guid('8cbfcceb-94a5-4de1-82-31-a8-5e-47-cf-81-e7')
def _define_MFSampleExtension_Encryption_HardwareProtection_KeyInfo():
    return Guid('b2372080-455b-4dd7-99-89-1a-95-57-84-b7-54')
def _define_MFSampleExtension_Encryption_HardwareProtection_VideoDecryptorContext():
    return Guid('693470c8-e837-47a0-88-cb-53-5b-90-5e-35-82')
def _define_MFSampleExtension_Encryption_Opaque_Data():
    return Guid('224d77e5-1391-4ffb-9f-41-b4-32-f6-8c-61-1d')
def _define_MFSampleExtension_NALULengthInfo():
    return Guid('19124e7c-ad4b-465f-bb-18-20-18-62-87-b6-af')
def _define_MFSampleExtension_Encryption_ResumeVideoOutput():
    return Guid('a435aba5-afde-4cf5-bc-1c-f6-ac-af-13-94-9d')
def _define_MFSampleExtension_Encryption_NALUTypes():
    return Guid('b0f067c7-714c-416c-8d-59-5f-4d-df-89-13-b6')
def _define_MFSampleExtension_Encryption_SPSPPSData():
    return Guid('aede0fa2-0e0c-453c-b7-f3-de-86-93-36-4d-11')
def _define_MFSampleExtension_Encryption_SEIData():
    return Guid('3cf0e972-4542-4687-99-99-58-5f-56-5f-ba-7d')
def _define_MFSampleExtension_Encryption_HardwareProtection():
    return Guid('9a2b2d2b-8270-43e3-84-48-99-4f-42-6e-88-86')
def _define_MFSampleExtension_CleanPoint():
    return Guid('9cdf01d8-a0f0-43ba-b0-77-ea-a0-6c-bd-72-8a')
def _define_MFSampleExtension_Discontinuity():
    return Guid('9cdf01d9-a0f0-43ba-b0-77-ea-a0-6c-bd-72-8a')
def _define_MFSampleExtension_Token():
    return Guid('8294da66-f328-4805-b5-51-00-de-b4-c5-7a-61')
def _define_MFSampleExtension_ClosedCaption_CEA708():
    return Guid('26f09068-e744-47dc-aa-03-db-f2-04-03-bd-e6')
MFSampleExtension_ClosedCaption_CEA708_MAX_SIZE = 256
def _define_MFSampleExtension_DecodeTimestamp():
    return Guid('73a954d4-09e2-4861-be-fc-94-bd-97-c0-8e-6e')
def _define_MFSampleExtension_VideoEncodeQP():
    return Guid('b2efe478-f979-4c66-b9-5e-ee-2b-82-c8-2f-36')
def _define_MFSampleExtension_VideoEncodePictureType():
    return Guid('973704e6-cd14-483c-8f-20-c9-fc-09-28-ba-d5')
def _define_MFSampleExtension_FrameCorruption():
    return Guid('b4dd4a8c-0beb-44c4-8b-75-b0-2b-91-3b-04-f0')
def _define_MFSampleExtension_DirtyRects():
    return Guid('9ba70225-b342-4e97-91-26-0b-56-6a-b7-ea-7e')
def _define_MFSampleExtension_MoveRegions():
    return Guid('e2a6c693-3a8b-4b8d-95-d0-f6-02-81-a1-2f-b7')
def _define_MFSampleExtension_HDCP_OptionalHeader():
    return Guid('9a2e7390-121f-455f-83-76-c9-74-28-e0-b5-40')
def _define_MFSampleExtension_HDCP_FrameCounter():
    return Guid('9d389c60-f507-4aa6-a4-0a-71-02-7a-02-f3-de')
def _define_MFSampleExtension_HDCP_StreamID():
    return Guid('177e5d74-c370-4a7a-95-a2-36-83-3c-01-d0-af')
def _define_MFSampleExtension_Timestamp():
    return Guid('1e436999-69be-4c7a-93-69-70-06-8c-02-60-cb')
def _define_MFSampleExtension_RepeatFrame():
    return Guid('88be738f-0711-4f42-b4-58-34-4a-ed-42-ec-2f')
def _define_MFT_ENCODER_ERROR():
    return Guid('c8d1eda4-98e4-41d5-92-97-44-f5-38-52-f9-0e')
def _define_MFT_GFX_DRIVER_VERSION_ID_Attribute():
    return Guid('f34b9093-05e0-4b16-99-3d-3e-2a-2c-de-6a-d3')
def _define_MFSampleExtension_DescrambleData():
    return Guid('43483be6-4903-4314-b0-32-29-51-36-59-36-fc')
def _define_MFSampleExtension_SampleKeyID():
    return Guid('9ed713c8-9b87-4b26-82-97-a9-3b-0c-5a-8a-cc')
def _define_MFSampleExtension_GenKeyFunc():
    return Guid('441ca1ee-6b1f-4501-90-3a-de-87-df-42-f6-ed')
def _define_MFSampleExtension_GenKeyCtx():
    return Guid('188120cb-d7da-4b59-9b-3e-92-52-fd-37-30-1c')
def _define_MFSampleExtension_PacketCrossOffsets():
    return Guid('2789671d-389f-40bb-90-d9-c2-82-f7-7f-9a-bd')
def _define_MFSampleExtension_Encryption_SampleID():
    return Guid('6698b84e-0afa-4330-ae-b2-1c-0a-98-d7-a4-4d')
def _define_MFSampleExtension_Encryption_KeyID():
    return Guid('76376591-795f-4da1-86-ed-9d-46-ec-a1-09-a9')
def _define_MFSampleExtension_Content_KeyID():
    return Guid('c6c7f5b0-acca-415b-87-d9-10-44-14-69-ef-c6')
def _define_MFSampleExtension_Encryption_SubSampleMappingSplit():
    return Guid('fe0254b9-2aa5-4edc-99-f7-17-e8-9d-bf-91-74')
def _define_MFSampleExtension_Interlaced():
    return Guid('b1d5830a-deb8-40e3-90-fa-38-99-43-71-64-61')
def _define_MFSampleExtension_BottomFieldFirst():
    return Guid('941ce0a3-6ae3-4dda-9a-08-a6-42-98-34-06-17')
def _define_MFSampleExtension_RepeatFirstField():
    return Guid('304d257c-7493-4fbd-b1-49-92-28-de-8d-9a-99')
def _define_MFSampleExtension_SingleField():
    return Guid('9d85f816-658b-455a-bd-e0-9f-a7-e1-5a-b8-f9')
def _define_MFSampleExtension_DerivedFromTopField():
    return Guid('6852465a-ae1c-4553-8e-9b-c3-42-0f-cb-16-37')
def _define_MFSampleExtension_MeanAbsoluteDifference():
    return Guid('1cdbde11-08b4-4311-a6-dd-0f-9f-37-19-07-aa')
def _define_MFSampleExtension_LongTermReferenceFrameInfo():
    return Guid('9154733f-e1bd-41bf-81-d3-fc-d9-18-f7-13-32')
def _define_MFSampleExtension_ROIRectangle():
    return Guid('3414a438-4998-4d2c-be-82-be-3c-a0-b2-4d-43')
def _define_MFSampleExtension_LastSlice():
    return Guid('2b5d5457-5547-4f07-b8-c8-b4-a3-a9-a1-da-ac')
MACROBLOCK_FLAG_SKIP = 1
MACROBLOCK_FLAG_DIRTY = 2
MACROBLOCK_FLAG_MOTION = 4
MACROBLOCK_FLAG_VIDEO = 8
MACROBLOCK_FLAG_HAS_MOTION_VECTOR = 16
MACROBLOCK_FLAG_HAS_QP = 32
def _define_MFSampleExtension_FeatureMap():
    return Guid('a032d165-46fc-400a-b4-49-49-de-53-e6-2a-6e')
def _define_MFSampleExtension_ChromaOnly():
    return Guid('1eb9179c-a01f-4845-8c-04-0e-65-a2-6e-b0-4f')
def _define_MFSampleExtension_PhotoThumbnail():
    return Guid('74bbc85c-c8bb-42dc-b5-86-da-17-ff-d3-5d-cc')
def _define_MFSampleExtension_PhotoThumbnailMediaType():
    return Guid('61ad5420-ebf8-4143-89-af-6b-f2-5f-67-2d-ef')
def _define_MFSampleExtension_CaptureMetadata():
    return Guid('2ebe23a8-faf5-444a-a6-a2-eb-81-08-80-ab-5d')
def _define_MFSampleExtension_MDLCacheCookie():
    return Guid('5f002af9-d8f9-41a3-b6-c3-a2-ad-43-f6-47-ad')
def _define_MF_CAPTURE_METADATA_PHOTO_FRAME_FLASH():
    return Guid('0f9dd6c6-6003-45d8-bd-59-f1-f5-3e-3d-04-e8')
def _define_MF_CAPTURE_METADATA_FRAME_RAWSTREAM():
    return Guid('9252077b-2680-49b9-ae-02-b1-90-75-97-3b-70')
def _define_MF_CAPTURE_METADATA_FOCUSSTATE():
    return Guid('a87ee154-997f-465d-b9-1f-29-d5-3b-98-2b-88')
def _define_MF_CAPTURE_METADATA_REQUESTED_FRAME_SETTING_ID():
    return Guid('bb3716d9-8a61-47a4-81-97-45-9c-7f-f1-74-d5')
def _define_MF_CAPTURE_METADATA_EXPOSURE_TIME():
    return Guid('16b9ae99-cd84-4063-87-9d-a2-8c-76-33-72-9e')
def _define_MF_CAPTURE_METADATA_EXPOSURE_COMPENSATION():
    return Guid('d198aa75-4b62-4345-ab-f3-3c-31-fa-12-c2-99')
def _define_MF_CAPTURE_METADATA_ISO_SPEED():
    return Guid('e528a68f-b2e3-44fe-8b-65-07-bf-4b-5a-13-ff')
def _define_MF_CAPTURE_METADATA_LENS_POSITION():
    return Guid('b5fc8e86-11d1-4e70-81-9b-72-3a-89-fa-45-20')
def _define_MF_CAPTURE_METADATA_SCENE_MODE():
    return Guid('9cc3b54d-5ed3-4bae-b3-88-76-70-ae-f5-9e-13')
def _define_MF_CAPTURE_METADATA_FLASH():
    return Guid('4a51520b-fb36-446c-9d-f2-68-17-1b-9a-03-89')
def _define_MF_CAPTURE_METADATA_FLASH_POWER():
    return Guid('9c0e0d49-0205-491a-bc-9d-2d-6e-1f-4d-56-84')
def _define_MF_CAPTURE_METADATA_WHITEBALANCE():
    return Guid('c736fd77-0fb9-4e2e-97-a2-fc-d4-90-73-9e-e9')
def _define_MF_CAPTURE_METADATA_ZOOMFACTOR():
    return Guid('e50b0b81-e501-42c2-ab-f2-85-7e-cb-13-fa-5c')
def _define_MF_CAPTURE_METADATA_FACEROIS():
    return Guid('864f25a6-349f-46b1-a3-0e-54-cc-22-92-8a-47')
def _define_MF_CAPTURE_METADATA_FACEROITIMESTAMPS():
    return Guid('e94d50cc-3da0-44d4-bb-34-83-19-8a-74-18-68')
def _define_MF_CAPTURE_METADATA_FACEROICHARACTERIZATIONS():
    return Guid('b927a1a8-18ef-46d3-b3-af-69-37-2f-94-d9-b2')
def _define_MF_CAPTURE_METADATA_ISO_GAINS():
    return Guid('05802ac9-0e1d-41c7-a8-c8-7e-73-69-f8-4e-1e')
def _define_MF_CAPTURE_METADATA_SENSORFRAMERATE():
    return Guid('db51357e-9d3d-4962-b0-6d-07-ce-65-0d-9a-0a')
def _define_MF_CAPTURE_METADATA_WHITEBALANCE_GAINS():
    return Guid('e7570c8f-2dcb-4c7c-aa-ce-22-ec-e7-cc-e6-47')
def _define_MF_CAPTURE_METADATA_HISTOGRAM():
    return Guid('85358432-2ef6-4ba9-a3-fb-06-d8-29-74-b8-95')
def _define_MF_CAPTURE_METADATA_EXIF():
    return Guid('2e9575b8-8c31-4a02-85-75-42-b1-97-b7-15-92')
def _define_MF_CAPTURE_METADATA_FRAME_ILLUMINATION():
    return Guid('6d688ffc-63d3-46fe-ba-da-5b-94-7d-b0-d0-80')
def _define_MF_CAPTURE_METADATA_UVC_PAYLOADHEADER():
    return Guid('f9f88a87-e1dd-441e-95-cb-42-e2-1a-64-f1-d9')
def _define_MFSampleExtension_Depth_MinReliableDepth():
    return Guid('5f8582b2-e36b-47c8-9b-87-fe-e1-ca-72-c5-b0')
def _define_MFSampleExtension_Depth_MaxReliableDepth():
    return Guid('e45545d1-1f0f-4a32-a8-a7-61-01-a2-4e-a8-be')
def _define_MF_CAPTURE_METADATA_FIRST_SCANLINE_START_TIME_QPC():
    return Guid('6a2c49f1-e052-46b6-b2-d9-73-c1-55-87-09-af')
def _define_MF_CAPTURE_METADATA_LAST_SCANLINE_END_TIME_QPC():
    return Guid('dccadecb-c4d4-400d-b4-18-10-e8-85-25-e1-f6')
def _define_MF_CAPTURE_METADATA_SCANLINE_TIME_QPC_ACCURACY():
    return Guid('4cd79c51-f765-4b09-b1-e1-27-d1-f7-eb-ea-09')
def _define_MF_CAPTURE_METADATA_SCANLINE_DIRECTION():
    return Guid('6496a3ba-1907-49e6-b0-c3-12-37-95-f3-80-a9')
MFCAPTURE_METADATA_SCAN_RIGHT_LEFT = 1
MFCAPTURE_METADATA_SCAN_BOTTOM_TOP = 2
MFCAPTURE_METADATA_SCANLINE_VERTICAL = 4
def _define_MF_CAPTURE_METADATA_DIGITALWINDOW():
    return Guid('276f72a2-59c8-4f69-97-b4-06-8b-8c-0e-c0-44')
def _define_MF_CAPTURE_METADATA_FRAME_BACKGROUND_MASK():
    return Guid('03f14dd3-75dd-433a-a8-e2-1e-3f-5f-2a-50-a0')
MF_METADATAFACIALEXPRESSION_SMILE = 1
MF_METADATATIMESTAMPS_DEVICE = 1
MF_METADATATIMESTAMPS_PRESENTATION = 2
MF_HISTOGRAM_CHANNEL_Y = 1
MF_HISTOGRAM_CHANNEL_R = 2
MF_HISTOGRAM_CHANNEL_G = 4
MF_HISTOGRAM_CHANNEL_B = 8
MF_HISTOGRAM_CHANNEL_Cb = 16
MF_HISTOGRAM_CHANNEL_Cr = 32
def _define_MFT_CATEGORY_VIDEO_DECODER():
    return Guid('d6c02d4b-6833-45b4-97-1a-05-a4-b0-4b-ab-91')
def _define_MFT_CATEGORY_VIDEO_ENCODER():
    return Guid('f79eac7d-e545-4387-bd-ee-d6-47-d7-bd-e4-2a')
def _define_MFT_CATEGORY_VIDEO_EFFECT():
    return Guid('12e17c21-532c-4a6e-8a-1c-40-82-5a-73-63-97')
def _define_MFT_CATEGORY_MULTIPLEXER():
    return Guid('059c561e-05ae-4b61-b6-9d-55-b6-1e-e5-4a-7b')
def _define_MFT_CATEGORY_DEMULTIPLEXER():
    return Guid('a8700a7a-939b-44c5-99-d7-76-22-6b-23-b3-f1')
def _define_MFT_CATEGORY_AUDIO_DECODER():
    return Guid('9ea73fb4-ef7a-4559-8d-5d-71-9d-8f-04-26-c7')
def _define_MFT_CATEGORY_AUDIO_ENCODER():
    return Guid('91c64bd0-f91e-4d8c-92-76-db-24-82-79-d9-75')
def _define_MFT_CATEGORY_AUDIO_EFFECT():
    return Guid('11064c48-3648-4ed0-93-2e-05-ce-8a-c8-11-b7')
def _define_MFT_CATEGORY_VIDEO_PROCESSOR():
    return Guid('302ea3fc-aa5f-47f9-9f-7a-c2-18-8b-b1-63-02')
def _define_MFT_CATEGORY_OTHER():
    return Guid('90175d57-b7ea-4901-ae-b3-93-3a-87-47-75-6f')
def _define_MFT_CATEGORY_ENCRYPTOR():
    return Guid('b0c687be-01cd-44b5-b8-b2-7c-1d-7e-05-8b-1f')
def _define_MFT_CATEGORY_VIDEO_RENDERER_EFFECT():
    return Guid('145cd8b4-92f4-4b23-8a-e7-e0-df-06-c2-da-95')
def _define_MFT_ENUM_VIDEO_RENDERER_EXTENSION_PROFILE():
    return Guid('62c56928-9a4e-443b-b9-dc-ca-c8-30-c2-41-00')
def _define_MFT_ENUM_ADAPTER_LUID():
    return Guid('1d39518c-e220-4da8-a0-7f-ba-17-25-52-d6-b1')
def _define_MFT_SUPPORT_DYNAMIC_FORMAT_CHANGE():
    return Guid('53476a11-3f13-49fb-ac-42-ee-27-33-c9-67-41')
LOCAL_D3DFMT_DEFINES = 1
def _define_MFVideoFormat_Base():
    return Guid('00000000-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_RGB32():
    return Guid('00000016-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_ARGB32():
    return Guid('00000015-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_RGB24():
    return Guid('00000014-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_RGB555():
    return Guid('00000018-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_RGB565():
    return Guid('00000017-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_RGB8():
    return Guid('00000029-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_L8():
    return Guid('00000032-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_L16():
    return Guid('00000051-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_D16():
    return Guid('00000050-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_AI44():
    return Guid('34344941-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_AYUV():
    return Guid('56555941-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_YUY2():
    return Guid('32595559-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_YVYU():
    return Guid('55595659-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_YVU9():
    return Guid('39555659-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_UYVY():
    return Guid('59565955-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_NV11():
    return Guid('3131564e-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_NV12():
    return Guid('3231564e-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_NV21():
    return Guid('3132564e-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_YV12():
    return Guid('32315659-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_I420():
    return Guid('30323449-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_IYUV():
    return Guid('56555949-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_Y210():
    return Guid('30313259-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_Y216():
    return Guid('36313259-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_Y410():
    return Guid('30313459-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_Y416():
    return Guid('36313459-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_Y41P():
    return Guid('50313459-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_Y41T():
    return Guid('54313459-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_Y42T():
    return Guid('54323459-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_P210():
    return Guid('30313250-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_P216():
    return Guid('36313250-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_P010():
    return Guid('30313050-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_P016():
    return Guid('36313050-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_v210():
    return Guid('30313276-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_v216():
    return Guid('36313276-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_v410():
    return Guid('30313476-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_MP43():
    return Guid('3334504d-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_MP4S():
    return Guid('5334504d-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_M4S2():
    return Guid('3253344d-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_MP4V():
    return Guid('5634504d-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_WMV1():
    return Guid('31564d57-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_WMV2():
    return Guid('32564d57-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_WMV3():
    return Guid('33564d57-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_WVC1():
    return Guid('31435657-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_MSS1():
    return Guid('3153534d-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_MSS2():
    return Guid('3253534d-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_MPG1():
    return Guid('3147504d-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_DVSL():
    return Guid('6c737664-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_DVSD():
    return Guid('64737664-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_DVHD():
    return Guid('64687664-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_DV25():
    return Guid('35327664-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_DV50():
    return Guid('30357664-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_DVH1():
    return Guid('31687664-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_H264():
    return Guid('34363248-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_H265():
    return Guid('35363248-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_MJPG():
    return Guid('47504a4d-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_420O():
    return Guid('4f303234-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_HEVC():
    return Guid('43564548-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_HEVC_ES():
    return Guid('53564548-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_VP80():
    return Guid('30385056-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_VP90():
    return Guid('30395056-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_ORAW():
    return Guid('5741524f-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_H263():
    return Guid('33363248-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_A2R10G10B10():
    return Guid('0000001f-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_A16B16G16R16F():
    return Guid('00000071-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_VP10():
    return Guid('30315056-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_AV1():
    return Guid('31305641-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_Theora():
    return Guid('6f656874-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFVideoFormat_H264_ES():
    return Guid('3f40f4f0-5622-4ff8-b6-d8-a1-7a-58-4b-ee-5e')
def _define_MFVideoFormat_MPEG2():
    return Guid('e06d8026-db46-11cf-b4-d1-00-80-5f-6c-bb-ea')
def _define_MFAudioFormat_Base():
    return Guid('00000000-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFAudioFormat_PCM():
    return Guid('00000001-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFAudioFormat_Float():
    return Guid('00000003-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFAudioFormat_DTS():
    return Guid('00000008-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFAudioFormat_Dolby_AC3_SPDIF():
    return Guid('00000092-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFAudioFormat_DRM():
    return Guid('00000009-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFAudioFormat_WMAudioV8():
    return Guid('00000161-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFAudioFormat_WMAudioV9():
    return Guid('00000162-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFAudioFormat_WMAudio_Lossless():
    return Guid('00000163-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFAudioFormat_WMASPDIF():
    return Guid('00000164-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFAudioFormat_MSP1():
    return Guid('0000000a-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFAudioFormat_MP3():
    return Guid('00000055-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFAudioFormat_MPEG():
    return Guid('00000050-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFAudioFormat_AAC():
    return Guid('00001610-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFAudioFormat_ADTS():
    return Guid('00001600-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFAudioFormat_AMR_NB():
    return Guid('00007361-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFAudioFormat_AMR_WB():
    return Guid('00007362-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFAudioFormat_AMR_WP():
    return Guid('00007363-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFAudioFormat_FLAC():
    return Guid('0000f1ac-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFAudioFormat_ALAC():
    return Guid('00006c61-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFAudioFormat_Opus():
    return Guid('0000704f-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFAudioFormat_Dolby_AC4():
    return Guid('0000ac40-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFAudioFormat_Dolby_AC3():
    return Guid('e06d802c-db46-11cf-b4-d1-00-80-5f-6c-bb-ea')
def _define_MFAudioFormat_Dolby_DDPlus():
    return Guid('a7fb87af-2d02-42fb-a4-d4-05-cd-93-84-3b-dd')
def _define_MFAudioFormat_Dolby_AC4_V1():
    return Guid('36b7927c-3d87-4a2a-91-96-a2-1a-d9-e9-35-e6')
def _define_MFAudioFormat_Dolby_AC4_V2():
    return Guid('7998b2a0-17dd-49b6-8d-fa-9b-27-85-52-a2-ac')
def _define_MFAudioFormat_Dolby_AC4_V1_ES():
    return Guid('9d8dccc6-d156-4fb8-97-9c-a8-5b-e7-d2-1d-fa')
def _define_MFAudioFormat_Dolby_AC4_V2_ES():
    return Guid('7e58c9f9-b070-45f4-8c-cd-a9-9a-04-17-c1-ac')
def _define_MFAudioFormat_Vorbis():
    return Guid('8d2fd10b-5841-4a6b-89-05-58-8f-ec-1a-de-d9')
def _define_MFAudioFormat_DTS_RAW():
    return Guid('e06d8033-db46-11cf-b4-d1-00-80-5f-6c-bb-ea')
def _define_MFAudioFormat_DTS_HD():
    return Guid('a2e58eb7-0fa9-48bb-a4-0c-fa-0e-15-6d-06-45')
def _define_MFAudioFormat_DTS_XLL():
    return Guid('45b37c1b-8c70-4e59-a7-be-a1-e4-2c-81-c8-0d')
def _define_MFAudioFormat_DTS_LBR():
    return Guid('c2fe6f0a-4e3c-4df1-9b-60-50-86-30-91-e4-b9')
def _define_MFAudioFormat_DTS_UHD():
    return Guid('87020117-ace3-42de-b7-3e-c6-56-70-62-63-f8')
def _define_MFAudioFormat_DTS_UHDY():
    return Guid('9b9cca00-91b9-4ccc-88-3a-8f-78-7a-c3-cc-86')
def _define_MFAudioFormat_Float_SpatialObjects():
    return Guid('fa39cd94-bc64-4ab1-9b-71-dc-d0-9d-5a-7e-7a')
def _define_MFAudioFormat_LPCM():
    return Guid('e06d8032-db46-11cf-b4-d1-00-80-5f-6c-bb-ea')
def _define_MFAudioFormat_PCM_HDCP():
    return Guid('a5e7ff01-8411-4acc-a8-65-5f-49-41-28-8d-80')
def _define_MFAudioFormat_Dolby_AC3_HDCP():
    return Guid('97663a80-8ffb-4445-a6-ba-79-2d-90-8f-49-7f')
def _define_MFAudioFormat_AAC_HDCP():
    return Guid('419bce76-8b72-400f-ad-eb-84-b5-7d-63-48-4d')
def _define_MFAudioFormat_ADTS_HDCP():
    return Guid('da4963a3-14d8-4dcf-92-b7-19-3e-b8-43-63-db')
def _define_MFAudioFormat_Base_HDCP():
    return Guid('3884b5bc-e277-43fd-98-3d-03-8a-a8-d9-b6-05')
def _define_MFVideoFormat_H264_HDCP():
    return Guid('5d0ce9dd-9817-49da-bd-fd-f5-f5-b9-8f-18-a6')
def _define_MFVideoFormat_HEVC_HDCP():
    return Guid('3cfe0fe6-05c4-47dc-9d-70-4b-db-29-59-72-0f')
def _define_MFVideoFormat_Base_HDCP():
    return Guid('eac3b9d5-bd14-4237-8f-1f-ba-b4-28-e4-93-12')
def _define_MFMPEG4Format_Base():
    return Guid('00000000-767a-494d-b4-78-f2-9d-25-dc-90-37')
def _define_MFSubtitleFormat_XML():
    return Guid('2006f94f-29ca-4195-b8-db-00-de-d8-ff-0c-97')
def _define_MFSubtitleFormat_TTML():
    return Guid('73e73992-9a10-4356-95-57-71-94-e9-1e-3e-54')
def _define_MFSubtitleFormat_ATSC():
    return Guid('7fa7faa3-feae-4e16-ae-df-36-b9-ac-fb-b0-99')
def _define_MFSubtitleFormat_WebVTT():
    return Guid('c886d215-f485-40bb-8d-b6-fa-db-c6-19-a4-5d')
def _define_MFSubtitleFormat_SRT():
    return Guid('5e467f2e-77ca-4ca5-83-91-d1-42-ed-4b-76-c8')
def _define_MFSubtitleFormat_SSA():
    return Guid('57176a1b-1a9e-4eea-ab-ef-c6-17-60-19-8a-c4')
def _define_MFSubtitleFormat_CustomUserData():
    return Guid('1bb3d849-6614-4d80-88-82-ed-24-aa-82-da-92')
def _define_MFSubtitleFormat_PGS():
    return Guid('71f40e4a-1278-4442-b3-0d-39-dd-1d-77-22-bc')
def _define_MFSubtitleFormat_VobSub():
    return Guid('6b8e40f4-8d2c-4ced-ad-91-59-60-e4-5b-44-33')
def _define_MF_MT_MAJOR_TYPE():
    return Guid('48eba18e-f8c9-4687-bf-11-0a-74-c9-f9-6a-8f')
def _define_MF_MT_SUBTYPE():
    return Guid('f7e34c9a-42e8-4714-b7-4b-cb-29-d7-2c-35-e5')
def _define_MF_MT_ALL_SAMPLES_INDEPENDENT():
    return Guid('c9173739-5e56-461c-b7-13-46-fb-99-5c-b9-5f')
def _define_MF_MT_FIXED_SIZE_SAMPLES():
    return Guid('b8ebefaf-b718-4e04-b0-a9-11-67-75-e3-32-1b')
def _define_MF_MT_COMPRESSED():
    return Guid('3afd0cee-18f2-4ba5-a1-10-8b-ea-50-2e-1f-92')
def _define_MF_MT_SAMPLE_SIZE():
    return Guid('dad3ab78-1990-408b-bc-e2-eb-a6-73-da-cc-10')
def _define_MF_MT_WRAPPED_TYPE():
    return Guid('4d3f7b23-d02f-4e6c-9b-ee-e4-bf-2c-6c-69-5d')
def _define_MF_MT_VIDEO_3D():
    return Guid('cb5e88cf-7b5b-476b-85-aa-1c-a5-ae-18-75-55')
def _define_MF_MT_VIDEO_3D_FORMAT():
    return Guid('5315d8a0-87c5-4697-b7-93-66-06-c6-7c-04-9b')
def _define_MF_MT_VIDEO_3D_NUM_VIEWS():
    return Guid('bb077e8a-dcbf-42eb-af-60-41-8d-f9-8a-a4-95')
def _define_MF_MT_VIDEO_3D_LEFT_IS_BASE():
    return Guid('6d4b7bff-5629-4404-94-8c-c6-34-f4-ce-26-d4')
def _define_MF_MT_VIDEO_3D_FIRST_IS_LEFT():
    return Guid('ec298493-0ada-4ea1-a4-fe-cb-bd-36-ce-93-31')
def _define_MFSampleExtension_3DVideo():
    return Guid('f86f97a4-dd54-4e2e-9a-5e-55-fc-2d-74-a0-05')
def _define_MFSampleExtension_3DVideo_SampleFormat():
    return Guid('08671772-e36f-4cff-97-b3-d7-2e-20-98-7a-48')
def _define_MF_MT_VIDEO_ROTATION():
    return Guid('c380465d-2271-428c-9b-83-ec-ea-3b-4a-85-c1')
def _define_MF_DEVICESTREAM_MULTIPLEXED_MANAGER():
    return Guid('6ea542b0-281f-4231-a4-64-fe-2f-50-22-50-1c')
def _define_MF_MEDIATYPE_MULTIPLEXED_MANAGER():
    return Guid('13c78fb5-f275-4ea0-bb-5f-02-49-83-2b-0d-6e')
def _define_MFSampleExtension_MULTIPLEXED_MANAGER():
    return Guid('8dcdee79-6b5a-4c45-8d-b9-20-b3-95-f0-2f-cf')
def _define_MF_MT_SECURE():
    return Guid('c5acc4fd-0304-4ecf-80-9f-47-bc-97-ff-63-bd')
def _define_MF_DEVICESTREAM_ATTRIBUTE_FRAMESOURCE_TYPES():
    return Guid('17145fd1-1b2b-423c-80-01-2b-68-33-ed-35-88')
def _define_MF_MT_ALPHA_MODE():
    return Guid('5d959b0d-4cbf-4d04-91-9f-3f-5f-7f-28-42-11')
def _define_MF_MT_DEPTH_MEASUREMENT():
    return Guid('fd5ac489-0917-4bb6-9d-54-31-22-bf-70-14-4b')
def _define_MF_MT_DEPTH_VALUE_UNIT():
    return Guid('21a800f5-3189-4797-be-ba-f1-3c-d9-a3-1a-5e')
def _define_MF_MT_VIDEO_NO_FRAME_ORDERING():
    return Guid('3f5b106f-6bc2-4ee3-b7-ed-89-02-c1-8f-53-51')
def _define_MF_MT_VIDEO_H264_NO_FMOASO():
    return Guid('ed461cd6-ec9f-416a-a8-a3-26-d7-d3-10-18-d7')
def _define_MFSampleExtension_ForwardedDecodeUnits():
    return Guid('424c754c-97c8-48d6-87-77-fc-41-f7-b6-08-79')
def _define_MFSampleExtension_TargetGlobalLuminance():
    return Guid('3f60ef36-31ef-4daf-83-60-94-03-97-e4-1e-f3')
def _define_MFSampleExtension_ForwardedDecodeUnitType():
    return Guid('089e57c7-47d3-4a26-bf-9c-4b-64-fa-fb-5d-1e')
def _define_MF_MT_FORWARD_CUSTOM_NALU():
    return Guid('ed336efd-244f-428d-91-53-28-f3-99-45-88-90')
def _define_MF_MT_FORWARD_CUSTOM_SEI():
    return Guid('e27362f1-b136-41d1-95-94-3a-7e-4f-eb-f2-d1')
def _define_MF_MT_VIDEO_RENDERER_EXTENSION_PROFILE():
    return Guid('8437d4b9-d448-4fcd-9b-6b-83-9b-f9-6c-77-98')
def _define_MF_DECODER_FWD_CUSTOM_SEI_DECODE_ORDER():
    return Guid('f13bbe3c-36d4-410a-b9-85-7a-95-1a-1e-62-94')
def _define_MF_VIDEO_RENDERER_EFFECT_APP_SERVICE_NAME():
    return Guid('c6052a80-6d9c-40a3-9d-b8-f0-27-a2-5c-9a-b9')
def _define_MF_MT_AUDIO_NUM_CHANNELS():
    return Guid('37e48bf5-645e-4c5b-89-de-ad-a9-e2-9b-69-6a')
def _define_MF_MT_AUDIO_SAMPLES_PER_SECOND():
    return Guid('5faeeae7-0290-4c31-9e-8a-c5-34-f6-8d-9d-ba')
def _define_MF_MT_AUDIO_FLOAT_SAMPLES_PER_SECOND():
    return Guid('fb3b724a-cfb5-4319-ae-fe-6e-42-b2-40-61-32')
def _define_MF_MT_AUDIO_AVG_BYTES_PER_SECOND():
    return Guid('1aab75c8-cfef-451c-ab-95-ac-03-4b-8e-17-31')
def _define_MF_MT_AUDIO_BLOCK_ALIGNMENT():
    return Guid('322de230-9eeb-43bd-ab-7a-ff-41-22-51-54-1d')
def _define_MF_MT_AUDIO_BITS_PER_SAMPLE():
    return Guid('f2deb57f-40fa-4764-aa-33-ed-4f-2d-1f-f6-69')
def _define_MF_MT_AUDIO_VALID_BITS_PER_SAMPLE():
    return Guid('d9bf8d6a-9530-4b7c-9d-df-ff-6f-d5-8b-bd-06')
def _define_MF_MT_AUDIO_SAMPLES_PER_BLOCK():
    return Guid('aab15aac-e13a-4995-92-22-50-1e-a1-5c-68-77')
def _define_MF_MT_AUDIO_CHANNEL_MASK():
    return Guid('55fb5765-644a-4caf-84-79-93-89-83-bb-15-88')
def _define_MF_MT_AUDIO_FOLDDOWN_MATRIX():
    return Guid('9d62927c-36be-4cf2-b5-c4-a3-92-6e-3e-87-11')
def _define_MF_MT_AUDIO_WMADRC_PEAKREF():
    return Guid('9d62927d-36be-4cf2-b5-c4-a3-92-6e-3e-87-11')
def _define_MF_MT_AUDIO_WMADRC_PEAKTARGET():
    return Guid('9d62927e-36be-4cf2-b5-c4-a3-92-6e-3e-87-11')
def _define_MF_MT_AUDIO_WMADRC_AVGREF():
    return Guid('9d62927f-36be-4cf2-b5-c4-a3-92-6e-3e-87-11')
def _define_MF_MT_AUDIO_WMADRC_AVGTARGET():
    return Guid('9d629280-36be-4cf2-b5-c4-a3-92-6e-3e-87-11')
def _define_MF_MT_AUDIO_PREFER_WAVEFORMATEX():
    return Guid('a901aaba-e037-458a-bd-f6-54-5b-e2-07-40-42')
def _define_MF_MT_AAC_PAYLOAD_TYPE():
    return Guid('bfbabe79-7434-4d1c-94-f0-72-a3-b9-e1-71-88')
def _define_MF_MT_AAC_AUDIO_PROFILE_LEVEL_INDICATION():
    return Guid('7632f0e6-9538-4d61-ac-da-ea-29-c8-c1-44-56')
def _define_MF_MT_AUDIO_FLAC_MAX_BLOCK_SIZE():
    return Guid('8b81adae-4b5a-4d40-80-22-f3-8d-09-ca-3c-5c')
def _define_MF_MT_SPATIAL_AUDIO_MAX_DYNAMIC_OBJECTS():
    return Guid('dcfba24a-2609-4240-a7-21-3f-ae-a7-6a-4d-f9')
def _define_MF_MT_SPATIAL_AUDIO_OBJECT_METADATA_FORMAT_ID():
    return Guid('2ab71bc0-6223-4ba7-ad-64-7b-94-b4-7a-e7-92')
def _define_MF_MT_SPATIAL_AUDIO_OBJECT_METADATA_LENGTH():
    return Guid('094ba8be-d723-489f-92-fa-76-67-77-b3-47-26')
def _define_MF_MT_SPATIAL_AUDIO_MAX_METADATA_ITEMS():
    return Guid('11aa80b4-e0da-47c6-80-60-96-c1-25-9a-e5-0d')
def _define_MF_MT_SPATIAL_AUDIO_MIN_METADATA_ITEM_OFFSET_SPACING():
    return Guid('83e96ec9-1184-417e-82-54-9f-26-91-58-fc-06')
def _define_MF_MT_SPATIAL_AUDIO_DATA_PRESENT():
    return Guid('6842f6e7-d43e-4ebb-9c-9c-c9-6f-41-78-48-63')
def _define_MF_MT_FRAME_SIZE():
    return Guid('1652c33d-d6b2-4012-b8-34-72-03-08-49-a3-7d')
def _define_MF_MT_FRAME_RATE():
    return Guid('c459a2e8-3d2c-4e44-b1-32-fe-e5-15-6c-7b-b0')
def _define_MF_MT_PIXEL_ASPECT_RATIO():
    return Guid('c6376a1e-8d0a-4027-be-45-6d-9a-0a-d3-9b-b6')
def _define_MF_MT_DRM_FLAGS():
    return Guid('8772f323-355a-4cc7-bb-78-6d-61-a0-48-ae-82')
def _define_MF_MT_TIMESTAMP_CAN_BE_DTS():
    return Guid('24974215-1b7b-41e4-86-25-ac-46-9f-2d-ed-aa')
def _define_MF_MT_PAD_CONTROL_FLAGS():
    return Guid('4d0e73e5-80ea-4354-a9-d0-11-76-ce-b0-28-ea')
def _define_MF_MT_SOURCE_CONTENT_HINT():
    return Guid('68aca3cc-22d0-44e6-85-f8-28-16-71-97-fa-38')
def _define_MF_MT_VIDEO_CHROMA_SITING():
    return Guid('65df2370-c773-4c33-aa-64-84-3e-06-8e-fb-0c')
def _define_MF_MT_INTERLACE_MODE():
    return Guid('e2724bb8-e676-4806-b4-b2-a8-d6-ef-b4-4c-cd')
def _define_MF_MT_TRANSFER_FUNCTION():
    return Guid('5fb0fce9-be5c-4935-a8-11-ec-83-8f-8e-ed-93')
def _define_MF_MT_VIDEO_PRIMARIES():
    return Guid('dbfbe4d7-0740-4ee0-81-92-85-0a-b0-e2-19-35')
def _define_MF_MT_MAX_LUMINANCE_LEVEL():
    return Guid('50253128-c110-4de4-98-ae-46-a3-24-fa-e6-da')
def _define_MF_MT_MAX_FRAME_AVERAGE_LUMINANCE_LEVEL():
    return Guid('58d4bf57-6f52-4733-a1-95-a9-e2-9e-cf-9e-27')
def _define_MF_MT_MAX_MASTERING_LUMINANCE():
    return Guid('d6c6b997-272f-4ca1-8d-00-80-42-11-1a-0f-f6')
def _define_MF_MT_MIN_MASTERING_LUMINANCE():
    return Guid('839a4460-4e7e-4b4f-ae-79-cc-08-90-5c-7b-27')
def _define_MF_MT_DECODER_USE_MAX_RESOLUTION():
    return Guid('4c547c24-af9a-4f38-96-ad-97-87-73-cf-53-e7')
def _define_MF_MT_DECODER_MAX_DPB_COUNT():
    return Guid('67be144c-88b7-4ca9-96-28-c8-08-d5-26-22-17')
def _define_MF_MT_CUSTOM_VIDEO_PRIMARIES():
    return Guid('47537213-8cfb-4722-aa-34-fb-c9-e2-4d-77-b8')
def _define_MF_MT_YUV_MATRIX():
    return Guid('3e23d450-2c75-4d25-a0-0e-b9-16-70-d1-23-27')
def _define_MF_MT_VIDEO_LIGHTING():
    return Guid('53a0529c-890b-4216-8b-f9-59-93-67-ad-6d-20')
def _define_MF_MT_VIDEO_NOMINAL_RANGE():
    return Guid('c21b8ee5-b956-4071-8d-af-32-5e-df-5c-ab-11')
def _define_MF_MT_GEOMETRIC_APERTURE():
    return Guid('66758743-7e5f-400d-98-0a-aa-85-96-c8-56-96')
def _define_MF_MT_MINIMUM_DISPLAY_APERTURE():
    return Guid('d7388766-18fe-48c6-a1-77-ee-89-48-67-c8-c4')
def _define_MF_MT_PAN_SCAN_APERTURE():
    return Guid('79614dde-9187-48fb-b8-c7-4d-52-68-9d-e6-49')
def _define_MF_MT_PAN_SCAN_ENABLED():
    return Guid('4b7f6bc3-8b13-40b2-a9-93-ab-f6-30-b8-20-4e')
def _define_MF_MT_AVG_BITRATE():
    return Guid('20332624-fb0d-4d9e-bd-0d-cb-f6-78-6c-10-2e')
def _define_MF_MT_AVG_BIT_ERROR_RATE():
    return Guid('799cabd6-3508-4db4-a3-c7-56-9c-d5-33-de-b1')
def _define_MF_MT_MAX_KEYFRAME_SPACING():
    return Guid('c16eb52b-73a1-476f-8d-62-83-9d-6a-02-06-52')
def _define_MF_MT_USER_DATA():
    return Guid('b6bc765f-4c3b-40a4-bd-51-25-35-b6-6f-e0-9d')
def _define_MF_MT_OUTPUT_BUFFER_NUM():
    return Guid('a505d3ac-f930-436e-8e-de-93-a5-09-ce-23-b2')
def _define_MF_MT_REALTIME_CONTENT():
    return Guid('bb12d222-2bdb-425e-91-ec-23-08-e1-89-a5-8f')
def _define_MF_MT_DEFAULT_STRIDE():
    return Guid('644b4e48-1e02-4516-b0-eb-c0-1c-a9-d4-9a-c6')
def _define_MF_MT_PALETTE():
    return Guid('6d283f42-9846-4410-af-d9-65-4d-50-3b-1a-54')
def _define_MF_MT_AM_FORMAT_TYPE():
    return Guid('73d1072d-1870-4174-a0-63-29-ff-4f-f6-c1-1e')
def _define_MF_MT_VIDEO_PROFILE():
    return Guid('ad76a80b-2d5c-4e0b-b3-75-64-e5-20-13-70-36')
def _define_MF_MT_VIDEO_LEVEL():
    return Guid('96f66574-11c5-4015-86-66-bf-f5-16-43-6d-a7')
def _define_MF_MT_MPEG_START_TIME_CODE():
    return Guid('91f67885-4333-4280-97-cd-bd-5a-6c-03-a0-6e')
def _define_MF_MT_MPEG2_PROFILE():
    return Guid('ad76a80b-2d5c-4e0b-b3-75-64-e5-20-13-70-36')
def _define_MF_MT_MPEG2_LEVEL():
    return Guid('96f66574-11c5-4015-86-66-bf-f5-16-43-6d-a7')
def _define_MF_MT_MPEG2_FLAGS():
    return Guid('31e3991d-f701-4b2f-b4-26-8a-e3-bd-a9-e0-4b')
def _define_MF_MT_MPEG_SEQUENCE_HEADER():
    return Guid('3c036de7-3ad0-4c9e-92-16-ee-6d-6a-c2-1c-b3')
def _define_MF_MT_MPEG2_STANDARD():
    return Guid('a20af9e8-928a-4b26-aa-a9-f0-5c-74-ca-c4-7c')
def _define_MF_MT_MPEG2_TIMECODE():
    return Guid('5229ba10-e29d-4f80-a5-9c-df-4f-18-02-07-d2')
def _define_MF_MT_MPEG2_CONTENT_PACKET():
    return Guid('825d55e4-4f12-4197-9e-b3-59-b6-e4-71-0f-06')
def _define_MF_MT_MPEG2_ONE_FRAME_PER_PACKET():
    return Guid('91a49eb5-1d20-4b42-ac-e8-80-42-69-bf-95-ed')
def _define_MF_MT_MPEG2_HDCP():
    return Guid('168f1b4a-3e91-450f-ae-a7-e4-ba-ea-da-e5-ba')
def _define_MF_MT_H264_MAX_CODEC_CONFIG_DELAY():
    return Guid('f5929986-4c45-4fbb-bb-49-6c-c5-34-d0-5b-9b')
def _define_MF_MT_H264_SUPPORTED_SLICE_MODES():
    return Guid('c8be1937-4d64-4549-83-43-a8-08-6c-0b-fd-a5')
def _define_MF_MT_H264_SUPPORTED_SYNC_FRAME_TYPES():
    return Guid('89a52c01-f282-48d2-b5-22-22-e6-ae-63-31-99')
def _define_MF_MT_H264_RESOLUTION_SCALING():
    return Guid('e3854272-f715-4757-ba-90-1b-69-6c-77-34-57')
def _define_MF_MT_H264_SIMULCAST_SUPPORT():
    return Guid('9ea2d63d-53f0-4a34-b9-4e-9d-e4-9a-07-8c-b3')
def _define_MF_MT_H264_SUPPORTED_RATE_CONTROL_MODES():
    return Guid('6a8ac47e-519c-4f18-9b-b3-7e-ea-ae-a5-59-4d')
def _define_MF_MT_H264_MAX_MB_PER_SEC():
    return Guid('45256d30-7215-4576-93-36-b0-f1-bc-d5-9b-b2')
def _define_MF_MT_H264_SUPPORTED_USAGES():
    return Guid('60b1a998-dc01-40ce-97-36-ab-a8-45-a2-db-dc')
def _define_MF_MT_H264_CAPABILITIES():
    return Guid('bb3bd508-490a-11e0-99-e4-13-16-df-d7-20-85')
def _define_MF_MT_H264_SVC_CAPABILITIES():
    return Guid('f8993abe-d937-4a8f-bb-ca-69-66-fe-9e-11-52')
def _define_MF_MT_H264_USAGE():
    return Guid('359ce3a5-af00-49ca-a2-f4-2a-c9-4c-a8-2b-61')
def _define_MF_MT_H264_RATE_CONTROL_MODES():
    return Guid('705177d8-45cb-11e0-ac-7d-b9-1c-e0-d7-20-85')
def _define_MF_MT_H264_LAYOUT_PER_STREAM():
    return Guid('85e299b2-90e3-4fe8-b2-f5-c0-67-e0-bf-e5-7a')
def _define_MF_MT_IN_BAND_PARAMETER_SET():
    return Guid('75da5090-910b-4a03-89-6c-7b-89-8f-ee-a5-af')
def _define_MF_MT_MPEG4_TRACK_TYPE():
    return Guid('54f486dd-9327-4f6d-80-ab-6f-70-9e-bb-4c-ce')
def _define_MF_MT_CONTAINER_RATE_SCALING():
    return Guid('83877f5e-0444-4e28-84-79-6d-b0-98-9b-8c-09')
def _define_MF_MT_DV_AAUX_SRC_PACK_0():
    return Guid('84bd5d88-0fb8-4ac8-be-4b-a8-84-8b-ef-98-f3')
def _define_MF_MT_DV_AAUX_CTRL_PACK_0():
    return Guid('f731004e-1dd1-4515-aa-be-f0-c0-6a-a5-36-ac')
def _define_MF_MT_DV_AAUX_SRC_PACK_1():
    return Guid('720e6544-0225-4003-a6-51-01-96-56-3a-95-8e')
def _define_MF_MT_DV_AAUX_CTRL_PACK_1():
    return Guid('cd1f470d-1f04-4fe0-bf-b9-d0-7a-e0-38-6a-d8')
def _define_MF_MT_DV_VAUX_SRC_PACK():
    return Guid('41402d9d-7b57-43c6-b1-29-2c-b9-97-f1-50-09')
def _define_MF_MT_DV_VAUX_CTRL_PACK():
    return Guid('2f84e1c4-0da1-4788-93-8e-0d-fb-fb-b3-4b-48')
def _define_MF_MT_ARBITRARY_HEADER():
    return Guid('9e6bd6f5-0109-4f95-84-ac-93-09-15-3a-19-fc')
def _define_MF_MT_ARBITRARY_FORMAT():
    return Guid('5a75b249-0d7d-49a1-a1-c3-e0-d8-7f-0c-ad-e5')
def _define_MF_MT_IMAGE_LOSS_TOLERANT():
    return Guid('ed062cf4-e34e-4922-be-99-93-40-32-13-3d-7c')
def _define_MF_MT_MPEG4_SAMPLE_DESCRIPTION():
    return Guid('261e9d83-9529-4b8f-a1-11-8b-9c-95-0a-81-a9')
def _define_MF_MT_MPEG4_CURRENT_SAMPLE_ENTRY():
    return Guid('9aa7e155-b64a-4c1d-a5-00-45-5d-60-0b-65-60')
def _define_MF_SD_AMBISONICS_SAMPLE3D_DESCRIPTION():
    return Guid('f715cf3e-a964-4c3f-94-ae-9d-6b-a7-26-46-41')
def _define_MF_MT_ORIGINAL_4CC():
    return Guid('d7be3fe0-2bc7-492d-b8-43-61-a1-91-9b-70-c3')
def _define_MF_MT_ORIGINAL_WAVE_FORMAT_TAG():
    return Guid('8cbbc843-9fd9-49c2-88-2f-a7-25-86-c4-08-ad')
def _define_MF_MT_FRAME_RATE_RANGE_MIN():
    return Guid('d2e7558c-dc1f-403f-9a-72-d2-8b-b1-eb-3b-5e')
def _define_MF_MT_FRAME_RATE_RANGE_MAX():
    return Guid('e3371d41-b4cf-4a05-bd-4e-20-b8-8b-b2-c4-d6')
def _define_MF_LOW_LATENCY():
    return Guid('9c27891a-ed7a-40e1-88-e8-b2-27-27-a0-24-ee')
def _define_MF_VIDEO_MAX_MB_PER_SEC():
    return Guid('e3f2e203-d445-4b8c-92-11-ae-39-0d-3b-a0-17')
def _define_MF_DISABLE_FRAME_CORRUPTION_INFO():
    return Guid('7086e16c-49c5-4201-88-2a-85-38-f3-8c-f1-3a')
def _define_MFStreamExtension_CameraExtrinsics():
    return Guid('686196d0-13e2-41d9-96-38-ef-03-2c-27-2a-52')
def _define_MFSampleExtension_CameraExtrinsics():
    return Guid('6b761658-b7ec-4c3b-82-25-86-23-ca-be-c3-1d')
def _define_MFStreamExtension_PinholeCameraIntrinsics():
    return Guid('dbac0455-0ec8-4aef-9c-32-7a-3e-e3-45-6f-53')
def _define_MFSampleExtension_PinholeCameraIntrinsics():
    return Guid('4ee3b6c5-6a15-4e72-97-61-70-c1-db-8b-9f-e3')
def _define_MFMediaType_Default():
    return Guid('81a412e6-8103-4b06-85-7f-18-62-78-10-24-ac')
def _define_MFMediaType_Audio():
    return Guid('73647561-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFMediaType_Video():
    return Guid('73646976-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFMediaType_Protected():
    return Guid('7b4b6fe6-9d04-4494-be-14-7e-0b-d0-76-c8-e4')
def _define_MFMediaType_SAMI():
    return Guid('e69669a0-3dcd-40cb-9e-2e-37-08-38-7c-06-16')
def _define_MFMediaType_Script():
    return Guid('72178c22-e45b-11d5-bc-2a-00-b0-d0-f3-f4-ab')
def _define_MFMediaType_Image():
    return Guid('72178c23-e45b-11d5-bc-2a-00-b0-d0-f3-f4-ab')
def _define_MFMediaType_HTML():
    return Guid('72178c24-e45b-11d5-bc-2a-00-b0-d0-f3-f4-ab')
def _define_MFMediaType_Binary():
    return Guid('72178c25-e45b-11d5-bc-2a-00-b0-d0-f3-f4-ab')
def _define_MFMediaType_FileTransfer():
    return Guid('72178c26-e45b-11d5-bc-2a-00-b0-d0-f3-f4-ab')
def _define_MFMediaType_Stream():
    return Guid('e436eb83-524f-11ce-9f-53-00-20-af-0b-a7-70')
def _define_MFMediaType_MultiplexedFrames():
    return Guid('6ea542b0-281f-4231-a4-64-fe-2f-50-22-50-1c')
def _define_MFMediaType_Subtitle():
    return Guid('a6d13581-ed50-4e65-ae-08-26-06-55-76-aa-cc')
def _define_MFMediaType_Perception():
    return Guid('597ff6f9-6ea2-4670-85-b4-ea-84-07-3f-e9-40')
def _define_MFImageFormat_JPEG():
    return Guid('19e4a5aa-5662-4fc5-a0-c0-17-58-02-8e-10-57')
def _define_MFImageFormat_RGB32():
    return Guid('00000016-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MFStreamFormat_MPEG2Transport():
    return Guid('e06d8023-db46-11cf-b4-d1-00-80-5f-6c-bb-ea')
def _define_MFStreamFormat_MPEG2Program():
    return Guid('263067d1-d330-45dc-b6-69-34-d9-86-e4-e3-e1')
def _define_AM_MEDIA_TYPE_REPRESENTATION():
    return Guid('e2e42ad2-132c-491e-a2-68-3c-7c-2d-ca-18-1f')
def _define_FORMAT_MFVideoFormat():
    return Guid('aed4ab2d-7326-43cb-94-64-c8-79-ca-b9-c4-3d')
def _define_MFMediaType_Metadata():
    return Guid('2c8fa20c-82bb-4782-90-a0-98-a2-a5-bd-8e-f8')
def _define_CLSID_MFSourceResolver():
    return Guid('90eab60f-e43a-4188-bc-c4-e4-7f-df-04-86-8c')
def _define_MF_DEVICESTREAM_ATTRIBUTE_FACEAUTH_CAPABILITY():
    return Guid('cb6fd12a-2248-4e41-ad-46-e7-8b-b9-0a-b9-fc')
def _define_MF_DEVICESTREAM_ATTRIBUTE_SECURE_CAPABILITY():
    return Guid('940fd626-ea6e-4684-98-40-36-bd-6e-c9-fb-ef')
MEDIASINK_FIXED_STREAMS = 1
MEDIASINK_CANNOT_MATCH_CLOCK = 2
MEDIASINK_RATELESS = 4
MEDIASINK_CLOCK_REQUIRED = 8
MEDIASINK_CAN_PREROLL = 16
MEDIASINK_REQUIRE_REFERENCE_MEDIATYPE = 32
MFCLOCK_FREQUENCY_HNS = 10000000
MFCLOCK_TOLERANCE_UNKNOWN = 50000
MFCLOCK_JITTER_ISR = 1000
MFCLOCK_JITTER_DPC = 4000
MFCLOCK_JITTER_PASSIVE = 10000
PRESENTATION_CURRENT_POSITION = 9223372036854775807
def _define_MF_PD_ADAPTIVE_STREAMING():
    return Guid('ea0d5d97-29f9-488b-ae-6b-7d-6b-41-36-11-2b')
MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_CROSSPROCESS = 1
MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_NOPERSIST = 2
MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_DONT_ALLOW_FORMAT_CHANGES = 4
MFRR_INFO_VERSION = 0
MF_USER_MODE_COMPONENT_LOAD = 1
MF_KERNEL_MODE_COMPONENT_LOAD = 2
MF_GRL_LOAD_FAILED = 16
MF_INVALID_GRL_SIGNATURE = 32
MF_GRL_ABSENT = 4096
MF_COMPONENT_REVOKED = 8192
MF_COMPONENT_INVALID_EKU = 16384
MF_COMPONENT_CERT_REVOKED = 32768
MF_COMPONENT_INVALID_ROOT = 65536
MF_COMPONENT_HS_CERT_REVOKED = 131072
MF_COMPONENT_LS_CERT_REVOKED = 262144
MF_BOOT_DRIVER_VERIFICATION_FAILED = 1048576
MF_TEST_SIGNED_COMPONENT_LOADING = 16777216
MF_MINCRYPT_FAILURE = 268435456
SHA_HASH_LEN = 20
MFSEQUENCER_INVALID_ELEMENT_ID = 4294967295
def _define_MF_WRAPPED_BUFFER_SERVICE():
    return Guid('ab544072-c269-4ebc-a5-52-1c-3b-32-be-d5-ca')
def _define_CLSID_MPEG2ByteStreamPlugin():
    return Guid('40871c59-ab40-471f-8d-c3-1f-25-9d-86-24-79')
MFCONTENTPROTECTIONDEVICE_FUNCTIONID_START = 67108864
MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA_FUNCTIONID = 67108864
MF_UNKNOWN_DURATION = 0
def _define_MFStreamExtension_ExtendedCameraIntrinsics():
    return Guid('aa74b3df-9a2c-48d6-83-93-5b-d1-c1-a8-1e-6e')
def _define_MFSampleExtension_ExtendedCameraIntrinsics():
    return Guid('560bc4a5-4de0-4113-9c-dc-83-2d-b9-74-0f-3d')
MF_INVALID_PRESENTATION_TIME = 9223372036854775808
MF_MEDIATYPE_EQUAL_MAJOR_TYPES = 1
MF_MEDIATYPE_EQUAL_FORMAT_TYPES = 2
MF_MEDIATYPE_EQUAL_FORMAT_DATA = 4
MF_MEDIATYPE_EQUAL_FORMAT_USER_DATA = 8
MFASYNC_FAST_IO_PROCESSING_CALLBACK = 1
MFASYNC_SIGNAL_CALLBACK = 2
MFASYNC_BLOCKING_CALLBACK = 4
MFASYNC_REPLY_CALLBACK = 8
MFASYNC_LOCALIZE_REMOTE_CALLBACK = 16
MFASYNC_CALLBACK_QUEUE_UNDEFINED = 0
MFASYNC_CALLBACK_QUEUE_STANDARD = 1
MFASYNC_CALLBACK_QUEUE_RT = 2
MFASYNC_CALLBACK_QUEUE_IO = 3
MFASYNC_CALLBACK_QUEUE_TIMER = 4
MFASYNC_CALLBACK_QUEUE_MULTITHREADED = 5
MFASYNC_CALLBACK_QUEUE_LONG_FUNCTION = 7
MFASYNC_CALLBACK_QUEUE_PRIVATE_MASK = 4294901760
MFASYNC_CALLBACK_QUEUE_ALL = 4294967295
MFBYTESTREAM_IS_READABLE = 1
MFBYTESTREAM_IS_WRITABLE = 2
MFBYTESTREAM_IS_SEEKABLE = 4
MFBYTESTREAM_IS_REMOTE = 8
MFBYTESTREAM_IS_DIRECTORY = 128
MFBYTESTREAM_HAS_SLOW_SEEK = 256
MFBYTESTREAM_IS_PARTIALLY_DOWNLOADED = 512
MFBYTESTREAM_SHARE_WRITE = 1024
MFBYTESTREAM_DOES_NOT_USE_NETWORK = 2048
MFBYTESTREAM_SEEK_FLAG_CANCEL_PENDING_IO = 1
def _define_MF_MEDIA_SHARING_ENGINE_INITIAL_SEEK_TIME():
    return Guid('6f3497f5-d528-4a4f-8d-d7-db-36-65-7e-c4-c9')
def _define_MF_SHUTDOWN_RENDERER_ON_ENGINE_SHUTDOWN():
    return Guid('c112d94d-6b9c-48f8-b6-f9-79-50-ff-9a-b7-1e')
def _define_MF_PREFERRED_SOURCE_URI():
    return Guid('5fc85488-436a-4db8-90-af-4d-b4-02-ae-5c-57')
def _define_MF_SHARING_ENGINE_SHAREDRENDERER():
    return Guid('efa446a0-73e7-404e-8a-e2-fe-f6-0a-f5-a3-2b')
def _define_MF_SHARING_ENGINE_CALLBACK():
    return Guid('57dc1e95-d252-43fa-9b-bc-18-00-70-ee-fe-6d')
MFT_STREAMS_UNLIMITED = 4294967295
MFT_OUTPUT_BOUND_UPPER_UNBOUNDED = 9223372036854775807
def _define_OPM_GET_CURRENT_HDCP_SRM_VERSION():
    return Guid('99c5ceff-5f1d-4879-81-c1-c5-24-43-c9-48-2b')
def _define_OPM_GET_CONNECTED_HDCP_DEVICE_INFORMATION():
    return Guid('0db59d74-a992-492e-a0-bd-c2-3f-da-56-4e-00')
def _define_OPM_GET_ACP_AND_CGMSA_SIGNALING():
    return Guid('6629a591-3b79-4cf3-92-4a-11-e8-e7-81-16-71')
def _define_OPM_GET_CONNECTOR_TYPE():
    return Guid('81d0bfd5-6afe-48c2-99-c0-95-a0-8f-97-c5-da')
def _define_OPM_GET_SUPPORTED_PROTECTION_TYPES():
    return Guid('38f2a801-9a6c-48bb-91-07-b6-69-6e-6f-17-97')
def _define_OPM_GET_VIRTUAL_PROTECTION_LEVEL():
    return Guid('b2075857-3eda-4d5d-88-db-74-8f-8c-1a-05-49')
def _define_OPM_GET_ACTUAL_PROTECTION_LEVEL():
    return Guid('1957210a-7766-452a-b9-9a-d2-7a-ed-54-f0-3a')
def _define_OPM_GET_ACTUAL_OUTPUT_FORMAT():
    return Guid('d7bf1ba3-ad13-4f8e-af-98-0d-cb-3c-a2-04-cc')
def _define_OPM_GET_ADAPTER_BUS_TYPE():
    return Guid('c6f4d673-6174-4184-8e-35-f6-db-52-00-bc-ba')
def _define_OPM_GET_OUTPUT_ID():
    return Guid('72cb6df3-244f-40ce-b0-9e-20-50-6a-f6-30-2f')
def _define_OPM_GET_DVI_CHARACTERISTICS():
    return Guid('a470b3bb-5dd7-4172-83-9c-3d-37-76-e0-eb-f5')
def _define_OPM_GET_CODEC_INFO():
    return Guid('4f374491-8f5f-4445-9d-ba-95-58-8f-6b-58-b4')
def _define_OPM_GET_OUTPUT_HARDWARE_PROTECTION_SUPPORT():
    return Guid('3b129589-2af8-4ef0-96-a2-70-4a-84-5a-21-8e')
def _define_OPM_SET_PROTECTION_LEVEL():
    return Guid('9bb9327c-4eb5-4727-9f-00-b4-2b-09-19-c0-da')
def _define_OPM_SET_ACP_AND_CGMSA_SIGNALING():
    return Guid('09a631a5-d684-4c60-8e-4d-d3-bb-0f-0b-e3-ee')
def _define_OPM_SET_HDCP_SRM():
    return Guid('8b5ef5d1-c30d-44ff-84-a5-ea-71-dc-e7-8f-13')
def _define_OPM_SET_PROTECTION_LEVEL_ACCORDING_TO_CSS_DVD():
    return Guid('39ce333e-4cc0-44ae-bf-cc-da-50-b5-f8-2e-72')
WM_CODEC_ONEPASS_CBR = 1
WM_CODEC_ONEPASS_VBR = 2
WM_CODEC_TWOPASS_CBR = 4
WM_CODEC_TWOPASS_VBR_UNCONSTRAINED = 8
WM_CODEC_TWOPASS_VBR_PEAKCONSTRAINED = 16
SYSFXUI_DONOTSHOW_LOUDNESSEQUALIZATION = 1
SYSFXUI_DONOTSHOW_ROOMCORRECTION = 2
SYSFXUI_DONOTSHOW_BASSMANAGEMENT = 4
SYSFXUI_DONOTSHOW_BASSBOOST = 8
SYSFXUI_DONOTSHOW_HEADPHONEVIRTUALIZATION = 16
SYSFXUI_DONOTSHOW_VIRTUALSURROUND = 32
SYSFXUI_DONOTSHOW_SPEAKERFILLING = 64
SYSFXUI_DONOTSHOW_CHANNELPHANTOMING = 128
AEC_MAX_SYSTEM_MODES = 6
WMAAECMA_E_NO_ACTIVE_RENDER_STREAM = 2278293514
def _define_MEDIASUBTYPE_Y41T():
    return Guid('54313459-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_Y42T():
    return Guid('54323459-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_V216():
    return Guid('36313256-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_V410():
    return Guid('30313456-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_v210():
    return Guid('30313276-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_I420():
    return Guid('30323449-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_WVC1():
    return Guid('31435657-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_wvc1():
    return Guid('31637677-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_WMVA():
    return Guid('41564d57-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_wmva():
    return Guid('61766d77-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_WMVB():
    return Guid('42564d57-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_wmvb():
    return Guid('62766d77-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_WMVR():
    return Guid('52564d57-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_wmvr():
    return Guid('72766d77-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_WMVP():
    return Guid('50564d57-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_wmvp():
    return Guid('70766d77-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_WVP2():
    return Guid('32505657-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_wvp2():
    return Guid('32707677-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_WMV3():
    return Guid('33564d57-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_wmv3():
    return Guid('33766d77-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_WMV2():
    return Guid('32564d57-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_wmv2():
    return Guid('32766d77-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_WMV1():
    return Guid('31564d57-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_wmv1():
    return Guid('31766d77-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_MPG4():
    return Guid('3447504d-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_mpg4():
    return Guid('3467706d-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_MP42():
    return Guid('3234504d-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_mp42():
    return Guid('3234706d-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_MP43():
    return Guid('3334504d-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_mp43():
    return Guid('3334706d-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_MP4S():
    return Guid('5334504d-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_mp4s():
    return Guid('7334706d-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_M4S2():
    return Guid('3253344d-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_m4s2():
    return Guid('3273346d-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_MSS1():
    return Guid('3153534d-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_MSS2():
    return Guid('3253534d-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_MSAUDIO1():
    return Guid('00000160-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_WMAUDIO2():
    return Guid('00000161-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_WMAUDIO3():
    return Guid('00000162-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_WMAUDIO_LOSSLESS():
    return Guid('00000163-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_WMASPDIF():
    return Guid('00000164-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_WMAUDIO4():
    return Guid('00000168-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_MPEG_ADTS_AAC():
    return Guid('00001600-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_MPEG_RAW_AAC():
    return Guid('00001601-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_MPEG_LOAS():
    return Guid('00001602-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_NOKIA_MPEG_ADTS_AAC():
    return Guid('00001608-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_NOKIA_MPEG_RAW_AAC():
    return Guid('00001609-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_VODAFONE_MPEG_ADTS_AAC():
    return Guid('0000160a-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_VODAFONE_MPEG_RAW_AAC():
    return Guid('0000160b-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_MPEG_HEAAC():
    return Guid('00001610-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_RAW_AAC1():
    return Guid('000000ff-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_DVM():
    return Guid('00002000-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_DTS2():
    return Guid('00002001-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_DOLBY_DDPLUS():
    return Guid('a7fb87af-2d02-42fb-a4-d4-05-cd-93-84-3b-dd')
def _define_MEDIASUBTYPE_DOLBY_TRUEHD():
    return Guid('eb27cec4-163e-4ca3-8b-74-8e-25-f9-1b-51-7e')
def _define_MEDIASUBTYPE_DTS_HD():
    return Guid('a2e58eb7-0fa9-48bb-a4-0c-fa-0e-15-6d-06-45')
def _define_MEDIASUBTYPE_DTS_HD_HRA():
    return Guid('a61ac364-ad0e-4744-89-ff-21-3c-e0-df-88-04')
def _define_MEDIASUBTYPE_h264():
    return Guid('34363268-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_AVC1():
    return Guid('31435641-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_X264():
    return Guid('34363258-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MEDIASUBTYPE_x264():
    return Guid('34363278-0000-0010-80-00-00-aa-00-38-9b-71')
def _define_MF_VIDEODSP_MODE():
    return Guid('16d720f0-768c-11de-8a-39-08-00-20-0c-9a-66')
def _define_MFSampleExtension_VideoDSPMode():
    return Guid('c12d55cb-d7d9-476d-81-f3-69-11-7f-16-3e-a0')
def _define_CLSID_CTocEntry():
    return Guid('f22f5e05-585c-4def-85-23-65-55-cf-bc-0c-b3')
def _define_CLSID_CTocEntryList():
    return Guid('3a8cccbc-0efd-43a3-b8-38-f3-8a-55-2b-a2-37')
def _define_CLSID_CToc():
    return Guid('4fe24495-28ce-4920-a4-c4-e5-56-e1-f0-df-2a')
def _define_CLSID_CTocCollection():
    return Guid('5058292d-a244-4840-ab-44-48-09-75-c4-ff-e4')
def _define_CLSID_CTocParser():
    return Guid('499eaeea-2737-4849-8b-b6-47-f1-07-ea-f3-58')
def _define_CLSID_CAsfTocParser():
    return Guid('9b77c0f2-8735-46c5-b9-0f-5f-0b-30-3e-f6-ab')
def _define_CLSID_CAviTocParser():
    return Guid('3adce5cc-13c8-4573-b3-28-ed-43-8e-b6-94-f9')
def _define_CLSID_CFileIo():
    return Guid('11993195-1244-4840-ab-44-48-09-75-c4-ff-e4')
def _define_CLSID_CFileClient():
    return Guid('bfccd195-1244-4840-ab-44-48-09-75-c4-ff-e4')
def _define_CLSID_CClusterDetectorEx():
    return Guid('47354492-827e-4b8a-b3-18-c8-0e-ba-13-81-f0')
E_TOCPARSER_INVALIDASFFILE = -1728053247
E_TOCPARSER_INVALIDRIFFFILE = -1728053246
TOC_MAX_DESCRIPTION_SIZE = 65535
TOC_ENTRY_MAX_TITLE_SIZE = 65535
MFASFINDEXER_PER_ENTRY_BYTES_DYNAMIC = 65535
MFASFINDEXER_NO_FIXED_INTERVAL = 4294967295
MFASFINDEXER_READ_FOR_REVERSEPLAYBACK_OUTOFDATASEGMENT = 18446744073709551615
MFASFINDEXER_APPROX_SEEK_TIME_UNKNOWN = 18446744073709551615
MFASF_MAX_STREAM_NUMBER = 127
MFASF_INVALID_STREAM_NUMBER = 128
MFASF_PAYLOADEXTENSION_MAX_SIZE = 255
MFASF_PAYLOADEXTENSION_VARIABLE_SIZE = 65535
MFASF_DEFAULT_BUFFER_WINDOW_MS = 3000
FACILITY_MF = 13
FACILITY_MF_WIN32 = 7
MF_E_PLATFORM_NOT_INITIALIZED = -1072875856
MF_E_BUFFERTOOSMALL = -1072875855
MF_E_INVALIDREQUEST = -1072875854
MF_E_INVALIDSTREAMNUMBER = -1072875853
MF_E_INVALIDMEDIATYPE = -1072875852
MF_E_NOTACCEPTING = -1072875851
MF_E_NOT_INITIALIZED = -1072875850
MF_E_UNSUPPORTED_REPRESENTATION = -1072875849
MF_E_NO_MORE_TYPES = -1072875847
MF_E_UNSUPPORTED_SERVICE = -1072875846
MF_E_UNEXPECTED = -1072875845
MF_E_INVALIDNAME = -1072875844
MF_E_INVALIDTYPE = -1072875843
MF_E_INVALID_FILE_FORMAT = -1072875842
MF_E_INVALIDINDEX = -1072875841
MF_E_INVALID_TIMESTAMP = -1072875840
MF_E_UNSUPPORTED_SCHEME = -1072875837
MF_E_UNSUPPORTED_BYTESTREAM_TYPE = -1072875836
MF_E_UNSUPPORTED_TIME_FORMAT = -1072875835
MF_E_NO_SAMPLE_TIMESTAMP = -1072875832
MF_E_NO_SAMPLE_DURATION = -1072875831
MF_E_INVALID_STREAM_DATA = -1072875829
MF_E_RT_UNAVAILABLE = -1072875825
MF_E_UNSUPPORTED_RATE = -1072875824
MF_E_THINNING_UNSUPPORTED = -1072875823
MF_E_REVERSE_UNSUPPORTED = -1072875822
MF_E_UNSUPPORTED_RATE_TRANSITION = -1072875821
MF_E_RATE_CHANGE_PREEMPTED = -1072875820
MF_E_NOT_FOUND = -1072875819
MF_E_NOT_AVAILABLE = -1072875818
MF_E_NO_CLOCK = -1072875817
MF_S_MULTIPLE_BEGIN = 866008
MF_E_MULTIPLE_BEGIN = -1072875815
MF_E_MULTIPLE_SUBSCRIBERS = -1072875814
MF_E_TIMER_ORPHANED = -1072875813
MF_E_STATE_TRANSITION_PENDING = -1072875812
MF_E_UNSUPPORTED_STATE_TRANSITION = -1072875811
MF_E_UNRECOVERABLE_ERROR_OCCURRED = -1072875810
MF_E_SAMPLE_HAS_TOO_MANY_BUFFERS = -1072875809
MF_E_SAMPLE_NOT_WRITABLE = -1072875808
MF_E_INVALID_KEY = -1072875806
MF_E_BAD_STARTUP_VERSION = -1072875805
MF_E_UNSUPPORTED_CAPTION = -1072875804
MF_E_INVALID_POSITION = -1072875803
MF_E_ATTRIBUTENOTFOUND = -1072875802
MF_E_PROPERTY_TYPE_NOT_ALLOWED = -1072875801
MF_E_PROPERTY_TYPE_NOT_SUPPORTED = -1072875800
MF_E_PROPERTY_EMPTY = -1072875799
MF_E_PROPERTY_NOT_EMPTY = -1072875798
MF_E_PROPERTY_VECTOR_NOT_ALLOWED = -1072875797
MF_E_PROPERTY_VECTOR_REQUIRED = -1072875796
MF_E_OPERATION_CANCELLED = -1072875795
MF_E_BYTESTREAM_NOT_SEEKABLE = -1072875794
MF_E_DISABLED_IN_SAFEMODE = -1072875793
MF_E_CANNOT_PARSE_BYTESTREAM = -1072875792
MF_E_SOURCERESOLVER_MUTUALLY_EXCLUSIVE_FLAGS = -1072875791
MF_E_MEDIAPROC_WRONGSTATE = -1072875790
MF_E_RT_THROUGHPUT_NOT_AVAILABLE = -1072875789
MF_E_RT_TOO_MANY_CLASSES = -1072875788
MF_E_RT_WOULDBLOCK = -1072875787
MF_E_NO_BITPUMP = -1072875786
MF_E_RT_OUTOFMEMORY = -1072875785
MF_E_RT_WORKQUEUE_CLASS_NOT_SPECIFIED = -1072875784
MF_E_INSUFFICIENT_BUFFER = -1072860816
MF_E_CANNOT_CREATE_SINK = -1072875782
MF_E_BYTESTREAM_UNKNOWN_LENGTH = -1072875781
MF_E_SESSION_PAUSEWHILESTOPPED = -1072875780
MF_S_ACTIVATE_REPLACED = 866045
MF_E_FORMAT_CHANGE_NOT_SUPPORTED = -1072875778
MF_E_INVALID_WORKQUEUE = -1072875777
MF_E_DRM_UNSUPPORTED = -1072875776
MF_E_UNAUTHORIZED = -1072875775
MF_E_OUT_OF_RANGE = -1072875774
MF_E_INVALID_CODEC_MERIT = -1072875773
MF_E_HW_MFT_FAILED_START_STREAMING = -1072875772
MF_E_OPERATION_IN_PROGRESS = -1072875771
MF_E_HARDWARE_DRM_UNSUPPORTED = -1072875770
MF_E_DURATION_TOO_LONG = -1072875769
MF_E_OPERATION_UNSUPPORTED_AT_D3D_FEATURE_LEVEL = -1072875768
MF_E_UNSUPPORTED_MEDIATYPE_AT_D3D_FEATURE_LEVEL = -1072875767
MF_S_ASF_PARSEINPROGRESS = 1074608792
MF_E_ASF_PARSINGINCOMPLETE = -1072874856
MF_E_ASF_MISSINGDATA = -1072874855
MF_E_ASF_INVALIDDATA = -1072874854
MF_E_ASF_OPAQUEPACKET = -1072874853
MF_E_ASF_NOINDEX = -1072874852
MF_E_ASF_OUTOFRANGE = -1072874851
MF_E_ASF_INDEXNOTLOADED = -1072874850
MF_E_ASF_TOO_MANY_PAYLOADS = -1072874849
MF_E_ASF_UNSUPPORTED_STREAM_TYPE = -1072874848
MF_E_ASF_DROPPED_PACKET = -1072874847
MF_E_NO_EVENTS_AVAILABLE = -1072873856
MF_E_INVALID_STATE_TRANSITION = -1072873854
MF_E_END_OF_STREAM = -1072873852
MF_E_SHUTDOWN = -1072873851
MF_E_MP3_NOTFOUND = -1072873850
MF_E_MP3_OUTOFDATA = -1072873849
MF_E_MP3_NOTMP3 = -1072873848
MF_E_MP3_NOTSUPPORTED = -1072873847
MF_E_NO_DURATION = -1072873846
MF_E_INVALID_FORMAT = -1072873844
MF_E_PROPERTY_NOT_FOUND = -1072873843
MF_E_PROPERTY_READ_ONLY = -1072873842
MF_E_PROPERTY_NOT_ALLOWED = -1072873841
MF_E_MEDIA_SOURCE_NOT_STARTED = -1072873839
MF_E_UNSUPPORTED_FORMAT = -1072873832
MF_E_MP3_BAD_CRC = -1072873831
MF_E_NOT_PROTECTED = -1072873830
MF_E_MEDIA_SOURCE_WRONGSTATE = -1072873829
MF_E_MEDIA_SOURCE_NO_STREAMS_SELECTED = -1072873828
MF_E_CANNOT_FIND_KEYFRAME_SAMPLE = -1072873827
MF_E_UNSUPPORTED_CHARACTERISTICS = -1072873826
MF_E_NO_AUDIO_RECORDING_DEVICE = -1072873825
MF_E_AUDIO_RECORDING_DEVICE_IN_USE = -1072873824
MF_E_AUDIO_RECORDING_DEVICE_INVALIDATED = -1072873823
MF_E_VIDEO_RECORDING_DEVICE_INVALIDATED = -1072873822
MF_E_VIDEO_RECORDING_DEVICE_PREEMPTED = -1072873821
MF_E_NETWORK_RESOURCE_FAILURE = -1072872856
MF_E_NET_WRITE = -1072872855
MF_E_NET_READ = -1072872854
MF_E_NET_REQUIRE_NETWORK = -1072872853
MF_E_NET_REQUIRE_ASYNC = -1072872852
MF_E_NET_BWLEVEL_NOT_SUPPORTED = -1072872851
MF_E_NET_STREAMGROUPS_NOT_SUPPORTED = -1072872850
MF_E_NET_MANUALSS_NOT_SUPPORTED = -1072872849
MF_E_NET_INVALID_PRESENTATION_DESCRIPTOR = -1072872848
MF_E_NET_CACHESTREAM_NOT_FOUND = -1072872847
MF_I_MANUAL_PROXY = 1074610802
MF_E_NET_REQUIRE_INPUT = -1072872844
MF_E_NET_REDIRECT = -1072872843
MF_E_NET_REDIRECT_TO_PROXY = -1072872842
MF_E_NET_TOO_MANY_REDIRECTS = -1072872841
MF_E_NET_TIMEOUT = -1072872840
MF_E_NET_CLIENT_CLOSE = -1072872839
MF_E_NET_BAD_CONTROL_DATA = -1072872838
MF_E_NET_INCOMPATIBLE_SERVER = -1072872837
MF_E_NET_UNSAFE_URL = -1072872836
MF_E_NET_CACHE_NO_DATA = -1072872835
MF_E_NET_EOL = -1072872834
MF_E_NET_BAD_REQUEST = -1072872833
MF_E_NET_INTERNAL_SERVER_ERROR = -1072872832
MF_E_NET_SESSION_NOT_FOUND = -1072872831
MF_E_NET_NOCONNECTION = -1072872830
MF_E_NET_CONNECTION_FAILURE = -1072872829
MF_E_NET_INCOMPATIBLE_PUSHSERVER = -1072872828
MF_E_NET_SERVER_ACCESSDENIED = -1072872827
MF_E_NET_PROXY_ACCESSDENIED = -1072872826
MF_E_NET_CANNOTCONNECT = -1072872825
MF_E_NET_INVALID_PUSH_TEMPLATE = -1072872824
MF_E_NET_INVALID_PUSH_PUBLISHING_POINT = -1072872823
MF_E_NET_BUSY = -1072872822
MF_E_NET_RESOURCE_GONE = -1072872821
MF_E_NET_ERROR_FROM_PROXY = -1072872820
MF_E_NET_PROXY_TIMEOUT = -1072872819
MF_E_NET_SERVER_UNAVAILABLE = -1072872818
MF_E_NET_TOO_MUCH_DATA = -1072872817
MF_E_NET_SESSION_INVALID = -1072872816
MF_E_OFFLINE_MODE = -1072872815
MF_E_NET_UDP_BLOCKED = -1072872814
MF_E_NET_UNSUPPORTED_CONFIGURATION = -1072872813
MF_E_NET_PROTOCOL_DISABLED = -1072872812
MF_E_NET_COMPANION_DRIVER_DISCONNECT = -1072872811
MF_E_ALREADY_INITIALIZED = -1072871856
MF_E_BANDWIDTH_OVERRUN = -1072871855
MF_E_LATE_SAMPLE = -1072871854
MF_E_FLUSH_NEEDED = -1072871853
MF_E_INVALID_PROFILE = -1072871852
MF_E_INDEX_NOT_COMMITTED = -1072871851
MF_E_NO_INDEX = -1072871850
MF_E_CANNOT_INDEX_IN_PLACE = -1072871849
MF_E_MISSING_ASF_LEAKYBUCKET = -1072871848
MF_E_INVALID_ASF_STREAMID = -1072871847
MF_E_STREAMSINK_REMOVED = -1072870856
MF_E_STREAMSINKS_OUT_OF_SYNC = -1072870854
MF_E_STREAMSINKS_FIXED = -1072870853
MF_E_STREAMSINK_EXISTS = -1072870852
MF_E_SAMPLEALLOCATOR_CANCELED = -1072870851
MF_E_SAMPLEALLOCATOR_EMPTY = -1072870850
MF_E_SINK_ALREADYSTOPPED = -1072870849
MF_E_ASF_FILESINK_BITRATE_UNKNOWN = -1072870848
MF_E_SINK_NO_STREAMS = -1072870847
MF_S_SINK_NOT_FINALIZED = 870978
MF_E_METADATA_TOO_LONG = -1072870845
MF_E_SINK_NO_SAMPLES_PROCESSED = -1072870844
MF_E_SINK_HEADERS_NOT_FOUND = -1072870843
MF_E_VIDEO_REN_NO_PROCAMP_HW = -1072869856
MF_E_VIDEO_REN_NO_DEINTERLACE_HW = -1072869855
MF_E_VIDEO_REN_COPYPROT_FAILED = -1072869854
MF_E_VIDEO_REN_SURFACE_NOT_SHARED = -1072869853
MF_E_VIDEO_DEVICE_LOCKED = -1072869852
MF_E_NEW_VIDEO_DEVICE = -1072869851
MF_E_NO_VIDEO_SAMPLE_AVAILABLE = -1072869850
MF_E_NO_AUDIO_PLAYBACK_DEVICE = -1072869756
MF_E_AUDIO_PLAYBACK_DEVICE_IN_USE = -1072869755
MF_E_AUDIO_PLAYBACK_DEVICE_INVALIDATED = -1072869754
MF_E_AUDIO_SERVICE_NOT_RUNNING = -1072869753
MF_E_AUDIO_BUFFER_SIZE_ERROR = -1072869752
MF_E_AUDIO_CLIENT_WRAPPER_SPOOF_ERROR = -1072869751
MF_E_TOPO_INVALID_OPTIONAL_NODE = -1072868850
MF_E_TOPO_CANNOT_FIND_DECRYPTOR = -1072868847
MF_E_TOPO_CODEC_NOT_FOUND = -1072868846
MF_E_TOPO_CANNOT_CONNECT = -1072868845
MF_E_TOPO_UNSUPPORTED = -1072868844
MF_E_TOPO_INVALID_TIME_ATTRIBUTES = -1072868843
MF_E_TOPO_LOOPS_IN_TOPOLOGY = -1072868842
MF_E_TOPO_MISSING_PRESENTATION_DESCRIPTOR = -1072868841
MF_E_TOPO_MISSING_STREAM_DESCRIPTOR = -1072868840
MF_E_TOPO_STREAM_DESCRIPTOR_NOT_SELECTED = -1072868839
MF_E_TOPO_MISSING_SOURCE = -1072868838
MF_E_TOPO_SINK_ACTIVATES_UNSUPPORTED = -1072868837
MF_E_SEQUENCER_UNKNOWN_SEGMENT_ID = -1072864852
MF_S_SEQUENCER_CONTEXT_CANCELED = 876973
MF_E_NO_SOURCE_IN_CACHE = -1072864850
MF_S_SEQUENCER_SEGMENT_AT_END_OF_STREAM = 876975
MF_E_TRANSFORM_TYPE_NOT_SET = -1072861856
MF_E_TRANSFORM_STREAM_CHANGE = -1072861855
MF_E_TRANSFORM_INPUT_REMAINING = -1072861854
MF_E_TRANSFORM_PROFILE_MISSING = -1072861853
MF_E_TRANSFORM_PROFILE_INVALID_OR_CORRUPT = -1072861852
MF_E_TRANSFORM_PROFILE_TRUNCATED = -1072861851
MF_E_TRANSFORM_PROPERTY_PID_NOT_RECOGNIZED = -1072861850
MF_E_TRANSFORM_PROPERTY_VARIANT_TYPE_WRONG = -1072861849
MF_E_TRANSFORM_PROPERTY_NOT_WRITEABLE = -1072861848
MF_E_TRANSFORM_PROPERTY_ARRAY_VALUE_WRONG_NUM_DIM = -1072861847
MF_E_TRANSFORM_PROPERTY_VALUE_SIZE_WRONG = -1072861846
MF_E_TRANSFORM_PROPERTY_VALUE_OUT_OF_RANGE = -1072861845
MF_E_TRANSFORM_PROPERTY_VALUE_INCOMPATIBLE = -1072861844
MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_OUTPUT_MEDIATYPE = -1072861843
MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_INPUT_MEDIATYPE = -1072861842
MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_MEDIATYPE_COMBINATION = -1072861841
MF_E_TRANSFORM_CONFLICTS_WITH_OTHER_CURRENTLY_ENABLED_FEATURES = -1072861840
MF_E_TRANSFORM_NEED_MORE_INPUT = -1072861838
MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_SPKR_CONFIG = -1072861837
MF_E_TRANSFORM_CANNOT_CHANGE_MEDIATYPE_WHILE_PROCESSING = -1072861836
MF_S_TRANSFORM_DO_NOT_PROPAGATE_EVENT = 879989
MF_E_UNSUPPORTED_D3D_TYPE = -1072861834
MF_E_TRANSFORM_ASYNC_LOCKED = -1072861833
MF_E_TRANSFORM_CANNOT_INITIALIZE_ACM_DRIVER = -1072861832
MF_E_TRANSFORM_STREAM_INVALID_RESOLUTION = -1072861831
MF_E_TRANSFORM_ASYNC_MFT_NOT_SUPPORTED = -1072861830
MF_E_TRANSFORM_EXATTRIBUTE_NOT_SUPPORTED = -1072861828
MF_E_LICENSE_INCORRECT_RIGHTS = -1072860856
MF_E_LICENSE_OUTOFDATE = -1072860855
MF_E_LICENSE_REQUIRED = -1072860854
MF_E_DRM_HARDWARE_INCONSISTENT = -1072860853
MF_E_NO_CONTENT_PROTECTION_MANAGER = -1072860852
MF_E_LICENSE_RESTORE_NO_RIGHTS = -1072860851
MF_E_BACKUP_RESTRICTED_LICENSE = -1072860850
MF_E_LICENSE_RESTORE_NEEDS_INDIVIDUALIZATION = -1072860849
MF_S_PROTECTION_NOT_REQUIRED = 880976
MF_E_COMPONENT_REVOKED = -1072860847
MF_E_TRUST_DISABLED = -1072860846
MF_E_WMDRMOTA_NO_ACTION = -1072860845
MF_E_WMDRMOTA_ACTION_ALREADY_SET = -1072860844
MF_E_WMDRMOTA_DRM_HEADER_NOT_AVAILABLE = -1072860843
MF_E_WMDRMOTA_DRM_ENCRYPTION_SCHEME_NOT_SUPPORTED = -1072860842
MF_E_WMDRMOTA_ACTION_MISMATCH = -1072860841
MF_E_WMDRMOTA_INVALID_POLICY = -1072860840
MF_E_POLICY_UNSUPPORTED = -1072860839
MF_E_OPL_NOT_SUPPORTED = -1072860838
MF_E_TOPOLOGY_VERIFICATION_FAILED = -1072860837
MF_E_SIGNATURE_VERIFICATION_FAILED = -1072860836
MF_E_DEBUGGING_NOT_ALLOWED = -1072860835
MF_E_CODE_EXPIRED = -1072860834
MF_E_GRL_VERSION_TOO_LOW = -1072860833
MF_E_GRL_RENEWAL_NOT_FOUND = -1072860832
MF_E_GRL_EXTENSIBLE_ENTRY_NOT_FOUND = -1072860831
MF_E_KERNEL_UNTRUSTED = -1072860830
MF_E_PEAUTH_UNTRUSTED = -1072860829
MF_E_NON_PE_PROCESS = -1072860827
MF_E_REBOOT_REQUIRED = -1072860825
MF_S_WAIT_FOR_POLICY_SET = 881000
MF_S_VIDEO_DISABLED_WITH_UNKNOWN_SOFTWARE_OUTPUT = 881001
MF_E_GRL_INVALID_FORMAT = -1072860822
MF_E_GRL_UNRECOGNIZED_FORMAT = -1072860821
MF_E_ALL_PROCESS_RESTART_REQUIRED = -1072860820
MF_E_PROCESS_RESTART_REQUIRED = -1072860819
MF_E_USERMODE_UNTRUSTED = -1072860818
MF_E_PEAUTH_SESSION_NOT_STARTED = -1072860817
MF_E_PEAUTH_PUBLICKEY_REVOKED = -1072860815
MF_E_GRL_ABSENT = -1072860814
MF_S_PE_TRUSTED = 881011
MF_E_PE_UNTRUSTED = -1072860812
MF_E_PEAUTH_NOT_STARTED = -1072860811
MF_E_INCOMPATIBLE_SAMPLE_PROTECTION = -1072860810
MF_E_PE_SESSIONS_MAXED = -1072860809
MF_E_HIGH_SECURITY_LEVEL_CONTENT_NOT_ALLOWED = -1072860808
MF_E_TEST_SIGNED_COMPONENTS_NOT_ALLOWED = -1072860807
MF_E_ITA_UNSUPPORTED_ACTION = -1072860806
MF_E_ITA_ERROR_PARSING_SAP_PARAMETERS = -1072860805
MF_E_POLICY_MGR_ACTION_OUTOFBOUNDS = -1072860804
MF_E_BAD_OPL_STRUCTURE_FORMAT = -1072860803
MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_PROTECTION_GUID = -1072860802
MF_E_NO_PMP_HOST = -1072860801
MF_E_ITA_OPL_DATA_NOT_INITIALIZED = -1072860800
MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_OUTPUT = -1072860799
MF_E_ITA_UNRECOGNIZED_DIGITAL_VIDEO_OUTPUT = -1072860798
MF_E_RESOLUTION_REQUIRES_PMP_CREATION_CALLBACK = -1072860797
MF_E_INVALID_AKE_CHANNEL_PARAMETERS = -1072860796
MF_E_CONTENT_PROTECTION_SYSTEM_NOT_ENABLED = -1072860795
MF_E_UNSUPPORTED_CONTENT_PROTECTION_SYSTEM = -1072860794
MF_E_DRM_MIGRATION_NOT_SUPPORTED = -1072860793
MF_E_HDCP_AUTHENTICATION_FAILURE = -1072860792
MF_E_HDCP_LINK_FAILURE = -1072860791
MF_E_CLOCK_INVALID_CONTINUITY_KEY = -1072849856
MF_E_CLOCK_NO_TIME_SOURCE = -1072849855
MF_E_CLOCK_STATE_ALREADY_SET = -1072849854
MF_E_CLOCK_NOT_SIMPLE = -1072849853
MF_S_CLOCK_STOPPED = 891972
MF_E_CLOCK_AUDIO_DEVICE_POSITION_UNEXPECTED = 891973
MF_E_CLOCK_AUDIO_RENDER_POSITION_UNEXPECTED = 891974
MF_E_CLOCK_AUDIO_RENDER_TIME_UNEXPECTED = 891975
MF_E_NO_MORE_DROP_MODES = -1072848856
MF_E_NO_MORE_QUALITY_LEVELS = -1072848855
MF_E_DROPTIME_NOT_SUPPORTED = -1072848854
MF_E_QUALITYKNOB_WAIT_LONGER = -1072848853
MF_E_QM_INVALIDSTATE = -1072848852
MF_E_TRANSCODE_NO_CONTAINERTYPE = -1072847856
MF_E_TRANSCODE_PROFILE_NO_MATCHING_STREAMS = -1072847855
MF_E_TRANSCODE_NO_MATCHING_ENCODER = -1072847854
MF_E_TRANSCODE_INVALID_PROFILE = -1072847853
MF_E_ALLOCATOR_NOT_INITIALIZED = -1072846856
MF_E_ALLOCATOR_NOT_COMMITED = -1072846855
MF_E_ALLOCATOR_ALREADY_COMMITED = -1072846854
MF_E_STREAM_ERROR = -1072846853
MF_E_INVALID_STREAM_STATE = -1072846852
MF_E_HW_STREAM_NOT_CONNECTED = -1072846851
MF_E_NO_CAPTURE_DEVICES_AVAILABLE = -1072845856
MF_E_CAPTURE_SINK_OUTPUT_NOT_SET = -1072845855
MF_E_CAPTURE_SINK_MIRROR_ERROR = -1072845854
MF_E_CAPTURE_SINK_ROTATE_ERROR = -1072845853
MF_E_CAPTURE_ENGINE_INVALID_OP = -1072845852
MF_E_CAPTURE_ENGINE_ALL_EFFECTS_REMOVED = -1072845851
MF_E_CAPTURE_SOURCE_NO_INDEPENDENT_PHOTO_STREAM_PRESENT = -1072845850
MF_E_CAPTURE_SOURCE_NO_VIDEO_STREAM_PRESENT = -1072845849
MF_E_CAPTURE_SOURCE_NO_AUDIO_STREAM_PRESENT = -1072845848
MF_E_CAPTURE_SOURCE_DEVICE_EXTENDEDPROP_OP_IN_PROGRESS = -1072845847
MF_E_CAPTURE_PROPERTY_SET_DURING_PHOTO = -1072845846
MF_E_CAPTURE_NO_SAMPLES_IN_QUEUE = -1072845845
MF_E_HW_ACCELERATED_THUMBNAIL_NOT_SUPPORTED = -1072845844
MF_E_UNSUPPORTED_CAPTURE_DEVICE_PRESENT = -1072845843
MF_E_TIMELINECONTROLLER_UNSUPPORTED_SOURCE_TYPE = -1072844856
MF_E_TIMELINECONTROLLER_NOT_ALLOWED = -1072844855
MF_E_TIMELINECONTROLLER_CANNOT_ATTACH = -1072844854
MF_E_MEDIA_EXTENSION_APPSERVICE_CONNECTION_FAILED = -1072843856
MF_E_MEDIA_EXTENSION_APPSERVICE_REQUEST_FAILED = -1072843855
MF_E_MEDIA_EXTENSION_PACKAGE_INTEGRITY_CHECK_FAILED = -1072843854
MF_E_MEDIA_EXTENSION_PACKAGE_LICENSE_INVALID = -1072843853
MF_INDEX_SIZE_ERR = 2154823681
MF_NOT_FOUND_ERR = 2154823688
MF_NOT_SUPPORTED_ERR = 2154823689
MF_INVALID_STATE_ERR = 2154823691
MF_SYNTAX_ERR = 2154823692
MF_INVALID_ACCESS_ERR = 2154823695
MF_QUOTA_EXCEEDED_ERR = 2154823702
MF_PARSE_ERR = 2154823761
MF_TYPE_ERR = 2154840069
def _define_DEVPKEY_DeviceInterface_IsVirtualCamera():
    return win32more.Devices.Properties.DEVPROPKEY(fmtid=Guid('6edc630d-c2e3-43b7-b2-d1-20-52-5a-1a-f1-20'), pid=3)
g_wszSpeechFormatCaps = 'SpeechFormatCap'
g_wszWMCPCodecName = '_CODECNAME'
g_wszWMCPSupportedVBRModes = '_SUPPORTEDVBRMODES'
g_wszWMCPAudioVBRSupported = '_VBRENABLED'
g_wszWMCPAudioVBRQuality = '_VBRQUALITY'
g_wszWMCPMaxPasses = '_PASSESRECOMMENDED'
g_wszWMCPDefaultCrisp = '_DEFAULTCRISP'
COPP_ProtectionType_Unknown = -2147483648
COPP_ProtectionType_None = 0
COPP_ProtectionType_HDCP = 1
COPP_ProtectionType_ACP = 2
COPP_ProtectionType_CGMSA = 4
COPP_ProtectionType_Mask = -2147483641
COPP_ProtectionType_Reserved = 2147483640
def _define_MF_BYTESTREAM_ORIGIN_NAME():
    return Guid('fc358288-3cb6-460c-a4-24-b6-68-12-60-37-5a')
def _define_MF_BYTESTREAM_CONTENT_TYPE():
    return Guid('fc358289-3cb6-460c-a4-24-b6-68-12-60-37-5a')
def _define_MF_BYTESTREAM_DURATION():
    return Guid('fc35828a-3cb6-460c-a4-24-b6-68-12-60-37-5a')
def _define_MF_BYTESTREAM_LAST_MODIFIED_TIME():
    return Guid('fc35828b-3cb6-460c-a4-24-b6-68-12-60-37-5a')
def _define_MF_BYTESTREAM_IFO_FILE_URI():
    return Guid('fc35828c-3cb6-460c-a4-24-b6-68-12-60-37-5a')
def _define_MF_BYTESTREAM_DLNA_PROFILE_ID():
    return Guid('fc35828d-3cb6-460c-a4-24-b6-68-12-60-37-5a')
def _define_MF_BYTESTREAM_EFFECTIVE_URL():
    return Guid('9afa0209-89d1-42af-84-56-1d-e6-b5-62-d6-91')
def _define_MF_BYTESTREAM_TRANSCODED():
    return Guid('b6c5c282-4dc9-4db9-ab-48-cf-3b-6d-8b-c5-e0')
def _define_CLSID_MFByteStreamProxyClassFactory():
    return Guid('770e8e77-4916-441c-a9-a7-b3-42-d0-ee-bc-71')
def _define_MEDeviceStreamCreated():
    return Guid('0252a1cf-3540-43b4-91-64-d7-2e-b4-05-fa-40')
def _define_MF_SA_D3D_AWARE():
    return Guid('eaa35c29-775e-488e-9b-61-b3-28-3e-49-58-3b')
def _define_MF_SA_REQUIRED_SAMPLE_COUNT():
    return Guid('18802c61-324b-4952-ab-d0-17-6f-f5-c6-96-ff')
def _define_MFT_END_STREAMING_AWARE():
    return Guid('70fbc845-b07e-4089-b0-64-39-9d-c6-11-0f-29')
def _define_MF_SA_AUDIO_ENDPOINT_AWARE():
    return Guid('c0381701-805c-42b2-ac-8d-e2-b4-bf-21-f4-f8')
def _define_MFT_AUDIO_DECODER_AUDIO_ENDPOINT_ID():
    return Guid('c7ccdd6e-5398-4695-8b-e7-51-b3-e9-51-11-bd')
def _define_MFT_AUDIO_DECODER_SPATIAL_METADATA_CLIENT():
    return Guid('05987df4-1270-4999-92-5f-8e-93-9a-7c-0a-f7')
def _define_MF_DMFT_FRAME_BUFFER_INFO():
    return Guid('396ce1c9-67a9-454c-87-97-95-a4-57-99-d8-04')
def _define_MF_SA_REQUIRED_SAMPLE_COUNT_PROGRESSIVE():
    return Guid('b172d58e-fa77-4e48-8d-2a-1d-f2-d8-50-ea-c2')
def _define_MF_SA_MINIMUM_OUTPUT_SAMPLE_COUNT():
    return Guid('851745d5-c3d6-476d-95-27-49-8e-f2-d1-0d-18')
def _define_MF_SA_MINIMUM_OUTPUT_SAMPLE_COUNT_PROGRESSIVE():
    return Guid('0f5523a5-1cb2-47c5-a5-50-2e-eb-84-b4-d1-4a')
def _define_MFT_SUPPORT_3DVIDEO():
    return Guid('093f81b1-4f2e-4631-81-68-79-34-03-2a-01-d3')
def _define_MF_ENABLE_3DVIDEO_OUTPUT():
    return Guid('bdad7bca-0e5f-4b10-ab-16-26-de-38-1b-62-93')
def _define_MF_SA_D3D11_BINDFLAGS():
    return Guid('eacf97ad-065c-4408-be-e3-fd-cb-fd-12-8b-e2')
def _define_MF_SA_D3D11_USAGE():
    return Guid('e85fe442-2ca3-486e-a9-c7-10-9d-da-60-98-80')
def _define_MF_SA_D3D11_AWARE():
    return Guid('206b4fc8-fcf9-4c51-af-e3-97-64-36-9e-33-a0')
def _define_MF_SA_D3D11_SHARED():
    return Guid('7b8f32c3-6d96-4b89-92-03-dd-38-b6-14-14-f3')
def _define_MF_SA_D3D11_SHARED_WITHOUT_MUTEX():
    return Guid('39dbd44d-2e44-4931-a4-c8-35-2d-3d-c4-21-15')
def _define_MF_SA_D3D11_ALLOW_DYNAMIC_YUV_TEXTURE():
    return Guid('ce06d49f-0613-4b9d-86-a6-d8-c4-f9-c1-00-75')
def _define_MF_SA_D3D11_HW_PROTECTED():
    return Guid('3a8ba9d9-92ca-4307-a3-91-69-99-db-f3-b6-ce')
def _define_MF_SA_BUFFERS_PER_SAMPLE():
    return Guid('873c5171-1e3d-4e25-98-8d-b4-33-ce-04-19-83')
def _define_MF_SA_D3D11_ALLOCATE_DISPLAYABLE_RESOURCES():
    return Guid('eeface6d-2ea9-4adf-bb-df-7b-bc-48-2a-1b-6d')
def _define_MFT_DECODER_EXPOSE_OUTPUT_TYPES_IN_NATIVE_ORDER():
    return Guid('ef80833f-f8fa-44d9-80-d8-41-ed-62-32-67-0c')
def _define_MFT_DECODER_QUALITY_MANAGEMENT_CUSTOM_CONTROL():
    return Guid('a24e30d7-de25-4558-bb-fb-71-07-0a-2d-33-2e')
def _define_MFT_DECODER_QUALITY_MANAGEMENT_RECOVERY_WITHOUT_ARTIFACTS():
    return Guid('d8980deb-0a48-425f-86-23-61-1d-b4-1d-38-10')
def _define_MFT_REMUX_MARK_I_PICTURE_AS_CLEAN_POINT():
    return Guid('364e8f85-3f2e-436c-b2-a2-44-40-a0-12-a9-e8')
def _define_MFT_DECODER_FINAL_VIDEO_RESOLUTION_HINT():
    return Guid('dc2f8496-15c4-407a-b6-f0-1b-66-ab-5f-bf-53')
def _define_MFT_ENCODER_SUPPORTS_CONFIG_EVENT():
    return Guid('86a355ae-3a77-4ec4-9f-31-01-14-9a-4e-92-de')
def _define_MFT_ENUM_HARDWARE_VENDOR_ID_Attribute():
    return Guid('3aecb0cc-035b-4bcc-81-85-2b-8d-55-1e-f3-af')
def _define_MF_TRANSFORM_ASYNC():
    return Guid('f81a699a-649a-497d-8c-73-29-f8-fe-d6-ad-7a')
def _define_MF_TRANSFORM_ASYNC_UNLOCK():
    return Guid('e5666d6b-3422-4eb6-a4-21-da-7d-b1-f8-e2-07')
def _define_MF_TRANSFORM_FLAGS_Attribute():
    return Guid('9359bb7e-6275-46c4-a0-25-1c-01-e4-5f-1a-86')
def _define_MF_TRANSFORM_CATEGORY_Attribute():
    return Guid('ceabba49-506d-4757-a6-ff-66-c1-84-98-7e-4e')
def _define_MFT_TRANSFORM_CLSID_Attribute():
    return Guid('6821c42b-65a4-4e82-99-bc-9a-88-20-5e-cd-0c')
def _define_MFT_INPUT_TYPES_Attributes():
    return Guid('4276c9b1-759d-4bf3-9c-d0-0d-72-3d-13-8f-96')
def _define_MFT_OUTPUT_TYPES_Attributes():
    return Guid('8eae8cf3-a44f-4306-ba-5c-bf-5d-da-24-28-18')
def _define_MFT_ENUM_HARDWARE_URL_Attribute():
    return Guid('2fb866ac-b078-4942-ab-6c-00-3d-05-cd-a6-74')
def _define_MFT_FRIENDLY_NAME_Attribute():
    return Guid('314ffbae-5b41-4c95-9c-19-4e-7d-58-6f-ac-e3')
def _define_MFT_CONNECTED_STREAM_ATTRIBUTE():
    return Guid('71eeb820-a59f-4de2-bc-ec-38-db-1d-d6-11-a4')
def _define_MFT_CONNECTED_TO_HW_STREAM():
    return Guid('34e6e728-06d6-4491-a5-53-47-95-65-0d-b9-12')
def _define_MFT_PREFERRED_OUTPUTTYPE_Attribute():
    return Guid('7e700499-396a-49ee-b1-b4-f6-28-02-1e-8c-9d')
def _define_MFT_PROCESS_LOCAL_Attribute():
    return Guid('543186e4-4649-4e65-b5-88-4a-a3-52-af-f3-79')
def _define_MFT_PREFERRED_ENCODER_PROFILE():
    return Guid('53004909-1ef5-46d7-a1-8e-5a-75-f8-b5-90-5f')
def _define_MFT_HW_TIMESTAMP_WITH_QPC_Attribute():
    return Guid('8d030fb8-cc43-4258-a2-2e-92-10-be-f8-9b-e4')
def _define_MFT_FIELDOFUSE_UNLOCK_Attribute():
    return Guid('8ec2e9fd-9148-410d-83-1e-70-24-39-46-1a-8e')
def _define_MFT_CODEC_MERIT_Attribute():
    return Guid('88a7cb15-7b07-4a34-91-28-e6-4c-67-03-c4-d3')
def _define_MFT_ENUM_TRANSCODE_ONLY_ATTRIBUTE():
    return Guid('111ea8cd-b62a-4bdb-89-f6-67-ff-cd-c2-45-8b')
def _define_MFT_AUDIO_DECODER_DEGRADATION_INFO_ATTRIBUTE():
    return Guid('6c3386ad-ec20-430d-b2-a5-50-5c-71-78-d9-c4')
def _define_MFT_POLICY_SET_AWARE():
    return Guid('5a633b19-cc39-4fa8-8c-a5-59-98-1b-7a-00-18')
def _define_MFT_USING_HARDWARE_DRM():
    return Guid('34faa77d-d79e-4957-b8-ce-36-2b-26-84-99-6c')
def _define_MF_WVC1_PROG_SINGLE_SLICE_CONTENT():
    return Guid('67ec2559-0f2f-4420-a4-dd-2f-8e-e7-a5-73-8b')
def _define_MF_PROGRESSIVE_CODING_CONTENT():
    return Guid('8f020eea-1508-471f-9d-a6-50-7d-7c-fa-40-db')
def _define_MF_NALU_LENGTH_SET():
    return Guid('a7911d53-12a4-4965-ae-70-6e-ad-d6-ff-05-51')
def _define_MF_NALU_LENGTH_INFORMATION():
    return Guid('19124e7c-ad4b-465f-bb-18-20-18-62-87-b6-af')
def _define_MF_USER_DATA_PAYLOAD():
    return Guid('d1d4985d-dc92-457a-b3-a0-65-1a-33-a3-10-47')
def _define_MF_MPEG4SINK_SPSPPS_PASSTHROUGH():
    return Guid('5601a134-2005-4ad2-b3-7d-22-a6-c5-54-de-b2')
def _define_MF_MPEG4SINK_MOOV_BEFORE_MDAT():
    return Guid('f672e3ac-e1e6-4f10-b5-ec-5f-3b-30-82-88-16')
def _define_MF_MPEG4SINK_MINIMUM_PROPERTIES_SIZE():
    return Guid('dca1ed52-450e-4a22-8c-62-4e-d4-52-f7-a1-87')
def _define_MF_MPEG4SINK_MIN_FRAGMENT_DURATION():
    return Guid('a30b570c-8efd-45e8-94-fe-27-c8-4b-5b-df-f6')
def _define_MF_MPEG4SINK_MAX_CODED_SEQUENCES_PER_FRAGMENT():
    return Guid('fc1b3bd6-692d-4ce5-92-99-73-8a-a5-46-3e-9a')
def _define_MF_SESSION_TOPOLOADER():
    return Guid('1e83d482-1f1c-4571-84-05-88-f4-b2-18-1f-71')
def _define_MF_SESSION_GLOBAL_TIME():
    return Guid('1e83d482-1f1c-4571-84-05-88-f4-b2-18-1f-72')
def _define_MF_SESSION_QUALITY_MANAGER():
    return Guid('1e83d482-1f1c-4571-84-05-88-f4-b2-18-1f-73')
def _define_MF_SESSION_CONTENT_PROTECTION_MANAGER():
    return Guid('1e83d482-1f1c-4571-84-05-88-f4-b2-18-1f-74')
def _define_MF_SESSION_SERVER_CONTEXT():
    return Guid('afe5b291-50fa-46e8-b9-be-0c-0c-3c-e4-b3-a5')
def _define_MF_SESSION_REMOTE_SOURCE_MODE():
    return Guid('f4033ef4-9bb3-4378-94-1f-85-a0-85-6b-c2-44')
def _define_MF_SESSION_APPROX_EVENT_OCCURRENCE_TIME():
    return Guid('190e852f-6238-42d1-b5-af-69-ea-33-8e-f8-50')
def _define_MF_PMP_SERVER_CONTEXT():
    return Guid('2f00c910-d2cf-4278-8b-6a-d0-77-fa-c3-a2-5f')
def _define_MF_TIME_FORMAT_ENTRY_RELATIVE():
    return Guid('4399f178-46d3-4504-af-da-20-d3-2e-9b-a3-60')
def _define_MF_SOURCE_STREAM_SUPPORTS_HW_CONNECTION():
    return Guid('a38253aa-6314-42fd-a3-ce-bb-27-b6-85-99-46')
def _define_MF_STREAM_SINK_SUPPORTS_HW_CONNECTION():
    return Guid('9b465cbf-0597-4f9e-9f-3c-b9-7e-ee-f9-03-59')
def _define_MF_STREAM_SINK_SUPPORTS_ROTATION():
    return Guid('b3e96280-bd05-41a5-97-ad-8a-7f-ee-24-b9-12')
def _define_MF_SINK_VIDEO_PTS():
    return Guid('2162bde7-421e-4b90-9b-33-e5-8f-bf-1d-58-b6')
def _define_MF_SINK_VIDEO_NATIVE_WIDTH():
    return Guid('e6d6a707-1505-4747-9b-10-72-d2-d1-58-cb-3a')
def _define_MF_SINK_VIDEO_NATIVE_HEIGHT():
    return Guid('f0ca6705-490c-43e8-94-1c-c0-b3-20-6b-9a-65')
def _define_MF_SINK_VIDEO_DISPLAY_ASPECT_RATIO_NUMERATOR():
    return Guid('d0f33b22-b78a-4879-b4-55-f0-3e-f3-fa-82-cd')
def _define_MF_SINK_VIDEO_DISPLAY_ASPECT_RATIO_DENOMINATOR():
    return Guid('6ea1eb97-1fe0-4f10-a6-e4-1f-4f-66-15-64-e0')
def _define_MF_BD_MVC_PLANE_OFFSET_METADATA():
    return Guid('62a654e4-b76c-4901-98-23-2c-b6-15-d4-73-18')
def _define_MF_LUMA_KEY_ENABLE():
    return Guid('7369820f-76de-43ca-92-84-47-b8-f3-7e-06-49')
def _define_MF_LUMA_KEY_LOWER():
    return Guid('93d7b8d5-0b81-4715-ae-a0-87-25-87-16-21-e9')
def _define_MF_LUMA_KEY_UPPER():
    return Guid('d09f39bb-4602-4c31-a7-06-a1-21-71-a5-11-0a')
def _define_MF_USER_EXTENDED_ATTRIBUTES():
    return Guid('c02abac6-feb2-4541-92-2f-92-0b-43-70-27-22')
def _define_MF_INDEPENDENT_STILL_IMAGE():
    return Guid('ea12af41-0710-42c9-a1-27-da-a3-e7-84-83-a5')
def _define_MF_XVP_SAMPLE_LOCK_TIMEOUT():
    return Guid('aa4ddb29-5134-4363-ac-72-83-ec-4b-c1-04-26')
def _define_MF_TOPOLOGY_PROJECTSTART():
    return Guid('7ed3f802-86bb-4b3f-b7-e4-7c-b4-3a-fd-4b-80')
def _define_MF_TOPOLOGY_PROJECTSTOP():
    return Guid('7ed3f803-86bb-4b3f-b7-e4-7c-b4-3a-fd-4b-80')
def _define_MF_TOPOLOGY_NO_MARKIN_MARKOUT():
    return Guid('7ed3f804-86bb-4b3f-b7-e4-7c-b4-3a-fd-4b-80')
def _define_MF_TOPOLOGY_DXVA_MODE():
    return Guid('1e8d34f6-f5ab-4e23-bb-88-87-4a-a3-a1-a7-4d')
def _define_MF_TOPOLOGY_ENABLE_XVP_FOR_PLAYBACK():
    return Guid('1967731f-cd78-42fc-b0-26-09-92-a5-6e-56-93')
def _define_MF_TOPOLOGY_STATIC_PLAYBACK_OPTIMIZATIONS():
    return Guid('b86cac42-41a6-4b79-89-7a-1a-b0-e5-2b-4a-1b')
def _define_MF_TOPOLOGY_PLAYBACK_MAX_DIMS():
    return Guid('5715cf19-5768-44aa-ad-6e-87-21-f1-b0-f9-bb')
def _define_MF_TOPOLOGY_HARDWARE_MODE():
    return Guid('d2d362fd-4e4f-4191-a5-79-c6-18-b6-67-06-af')
def _define_MF_TOPOLOGY_PLAYBACK_FRAMERATE():
    return Guid('c164737a-c2b1-4553-83-bb-5a-52-60-72-44-8f')
def _define_MF_TOPOLOGY_DYNAMIC_CHANGE_NOT_ALLOWED():
    return Guid('d529950b-d484-4527-a9-cd-b1-90-95-32-b5-b0')
def _define_MF_TOPOLOGY_ENUMERATE_SOURCE_TYPES():
    return Guid('6248c36d-5d0b-4f40-a0-bb-b0-b3-05-f7-76-98')
def _define_MF_TOPOLOGY_START_TIME_ON_PRESENTATION_SWITCH():
    return Guid('c8cc113f-7951-4548-aa-d6-9e-d6-20-2e-62-b3')
def _define_MF_DISABLE_LOCALLY_REGISTERED_PLUGINS():
    return Guid('66b16da9-add4-47e0-a1-6b-5a-f1-fb-48-36-34')
def _define_MF_LOCAL_PLUGIN_CONTROL_POLICY():
    return Guid('d91b0085-c86d-4f81-88-22-8c-68-e1-d7-fa-04')
def _define_MF_TOPONODE_FLUSH():
    return Guid('494bbce8-b031-4e38-97-c4-d5-42-2d-d6-18-dc')
def _define_MF_TOPONODE_DRAIN():
    return Guid('494bbce9-b031-4e38-97-c4-d5-42-2d-d6-18-dc')
def _define_MF_TOPONODE_D3DAWARE():
    return Guid('494bbced-b031-4e38-97-c4-d5-42-2d-d6-18-dc')
def _define_MF_TOPOLOGY_RESOLUTION_STATUS():
    return Guid('494bbcde-b031-4e38-97-c4-d5-42-2d-d6-18-dc')
def _define_MF_TOPONODE_ERRORCODE():
    return Guid('494bbcee-b031-4e38-97-c4-d5-42-2d-d6-18-dc')
def _define_MF_TOPONODE_CONNECT_METHOD():
    return Guid('494bbcf1-b031-4e38-97-c4-d5-42-2d-d6-18-dc')
def _define_MF_TOPONODE_LOCKED():
    return Guid('494bbcf7-b031-4e38-97-c4-d5-42-2d-d6-18-dc')
def _define_MF_TOPONODE_WORKQUEUE_ID():
    return Guid('494bbcf8-b031-4e38-97-c4-d5-42-2d-d6-18-dc')
def _define_MF_TOPONODE_WORKQUEUE_MMCSS_CLASS():
    return Guid('494bbcf9-b031-4e38-97-c4-d5-42-2d-d6-18-dc')
def _define_MF_TOPONODE_DECRYPTOR():
    return Guid('494bbcfa-b031-4e38-97-c4-d5-42-2d-d6-18-dc')
def _define_MF_TOPONODE_DISCARDABLE():
    return Guid('494bbcfb-b031-4e38-97-c4-d5-42-2d-d6-18-dc')
def _define_MF_TOPONODE_ERROR_MAJORTYPE():
    return Guid('494bbcfd-b031-4e38-97-c4-d5-42-2d-d6-18-dc')
def _define_MF_TOPONODE_ERROR_SUBTYPE():
    return Guid('494bbcfe-b031-4e38-97-c4-d5-42-2d-d6-18-dc')
def _define_MF_TOPONODE_WORKQUEUE_MMCSS_TASKID():
    return Guid('494bbcff-b031-4e38-97-c4-d5-42-2d-d6-18-dc')
def _define_MF_TOPONODE_WORKQUEUE_MMCSS_PRIORITY():
    return Guid('5001f840-2816-48f4-93-64-ad-1e-f6-61-a1-23')
def _define_MF_TOPONODE_WORKQUEUE_ITEM_PRIORITY():
    return Guid('a1ff99be-5e97-4a53-b4-94-56-8c-64-2c-0f-f3')
def _define_MF_TOPONODE_MARKIN_HERE():
    return Guid('494bbd00-b031-4e38-97-c4-d5-42-2d-d6-18-dc')
def _define_MF_TOPONODE_MARKOUT_HERE():
    return Guid('494bbd01-b031-4e38-97-c4-d5-42-2d-d6-18-dc')
def _define_MF_TOPONODE_DECODER():
    return Guid('494bbd02-b031-4e38-97-c4-d5-42-2d-d6-18-dc')
def _define_MF_TOPONODE_MEDIASTART():
    return Guid('835c58ea-e075-4bc7-bc-ba-4d-e0-00-df-9a-e6')
def _define_MF_TOPONODE_MEDIASTOP():
    return Guid('835c58eb-e075-4bc7-bc-ba-4d-e0-00-df-9a-e6')
def _define_MF_TOPONODE_SOURCE():
    return Guid('835c58ec-e075-4bc7-bc-ba-4d-e0-00-df-9a-e6')
def _define_MF_TOPONODE_PRESENTATION_DESCRIPTOR():
    return Guid('835c58ed-e075-4bc7-bc-ba-4d-e0-00-df-9a-e6')
def _define_MF_TOPONODE_STREAM_DESCRIPTOR():
    return Guid('835c58ee-e075-4bc7-bc-ba-4d-e0-00-df-9a-e6')
def _define_MF_TOPONODE_SEQUENCE_ELEMENTID():
    return Guid('835c58ef-e075-4bc7-bc-ba-4d-e0-00-df-9a-e6')
def _define_MF_TOPONODE_TRANSFORM_OBJECTID():
    return Guid('88dcc0c9-293e-4e8b-9a-eb-0a-d6-4c-c0-16-b0')
def _define_MF_TOPONODE_STREAMID():
    return Guid('14932f9b-9087-4bb4-84-12-51-67-14-5c-be-04')
def _define_MF_TOPONODE_NOSHUTDOWN_ON_REMOVE():
    return Guid('14932f9c-9087-4bb4-84-12-51-67-14-5c-be-04')
def _define_MF_TOPONODE_RATELESS():
    return Guid('14932f9d-9087-4bb4-84-12-51-67-14-5c-be-04')
def _define_MF_TOPONODE_DISABLE_PREROLL():
    return Guid('14932f9e-9087-4bb4-84-12-51-67-14-5c-be-04')
def _define_MF_TOPONODE_PRIMARYOUTPUT():
    return Guid('6304ef99-16b2-4ebe-9d-67-e4-c5-39-b3-a2-59')
def _define_MF_PD_PMPHOST_CONTEXT():
    return Guid('6c990d31-bb8e-477a-85-98-0d-5d-96-fc-d8-8a')
def _define_MF_PD_APP_CONTEXT():
    return Guid('6c990d32-bb8e-477a-85-98-0d-5d-96-fc-d8-8a')
def _define_MF_PD_DURATION():
    return Guid('6c990d33-bb8e-477a-85-98-0d-5d-96-fc-d8-8a')
def _define_MF_PD_TOTAL_FILE_SIZE():
    return Guid('6c990d34-bb8e-477a-85-98-0d-5d-96-fc-d8-8a')
def _define_MF_PD_AUDIO_ENCODING_BITRATE():
    return Guid('6c990d35-bb8e-477a-85-98-0d-5d-96-fc-d8-8a')
def _define_MF_PD_VIDEO_ENCODING_BITRATE():
    return Guid('6c990d36-bb8e-477a-85-98-0d-5d-96-fc-d8-8a')
def _define_MF_PD_MIME_TYPE():
    return Guid('6c990d37-bb8e-477a-85-98-0d-5d-96-fc-d8-8a')
def _define_MF_PD_LAST_MODIFIED_TIME():
    return Guid('6c990d38-bb8e-477a-85-98-0d-5d-96-fc-d8-8a')
def _define_MF_PD_PLAYBACK_ELEMENT_ID():
    return Guid('6c990d39-bb8e-477a-85-98-0d-5d-96-fc-d8-8a')
def _define_MF_PD_PREFERRED_LANGUAGE():
    return Guid('6c990d3a-bb8e-477a-85-98-0d-5d-96-fc-d8-8a')
def _define_MF_PD_PLAYBACK_BOUNDARY_TIME():
    return Guid('6c990d3b-bb8e-477a-85-98-0d-5d-96-fc-d8-8a')
def _define_MF_PD_AUDIO_ISVARIABLEBITRATE():
    return Guid('33026ee0-e387-4582-ae-0a-34-a2-ad-3b-aa-18')
def _define_MF_SD_LANGUAGE():
    return Guid('00af2180-bdc2-423c-ab-ca-f5-03-59-3b-c1-21')
def _define_MF_SD_PROTECTED():
    return Guid('00af2181-bdc2-423c-ab-ca-f5-03-59-3b-c1-21')
def _define_MF_SD_STREAM_NAME():
    return Guid('4f1b099d-d314-41e5-a7-81-7f-ef-aa-4c-50-1f')
def _define_MF_SD_MUTUALLY_EXCLUSIVE():
    return Guid('023ef79c-388d-487f-ac-17-69-6c-d6-e3-c6-f5')
def _define_MF_ACTIVATE_CUSTOM_VIDEO_MIXER_CLSID():
    return Guid('ba491360-be50-451e-95-ab-6d-4a-cc-c7-da-d8')
def _define_MF_ACTIVATE_CUSTOM_VIDEO_MIXER_ACTIVATE():
    return Guid('ba491361-be50-451e-95-ab-6d-4a-cc-c7-da-d8')
def _define_MF_ACTIVATE_CUSTOM_VIDEO_MIXER_FLAGS():
    return Guid('ba491362-be50-451e-95-ab-6d-4a-cc-c7-da-d8')
def _define_MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_CLSID():
    return Guid('ba491364-be50-451e-95-ab-6d-4a-cc-c7-da-d8')
def _define_MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_ACTIVATE():
    return Guid('ba491365-be50-451e-95-ab-6d-4a-cc-c7-da-d8')
def _define_MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_FLAGS():
    return Guid('ba491366-be50-451e-95-ab-6d-4a-cc-c7-da-d8')
def _define_MF_ACTIVATE_MFT_LOCKED():
    return Guid('c1f6093c-7f65-4fbd-9e-39-5f-ae-c3-c4-fb-d7')
def _define_MF_ACTIVATE_VIDEO_WINDOW():
    return Guid('9a2dbbdd-f57e-4162-82-b9-68-31-37-76-82-d3')
def _define_MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS():
    return Guid('ede4b5e0-f805-4d6c-99-b3-db-01-bf-95-df-ab')
def _define_MF_AUDIO_RENDERER_ATTRIBUTE_SESSION_ID():
    return Guid('ede4b5e3-f805-4d6c-99-b3-db-01-bf-95-df-ab')
def _define_MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ID():
    return Guid('b10aaec3-ef71-4cc3-b8-73-05-a9-a0-8b-9f-8e')
def _define_MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ROLE():
    return Guid('6ba644ff-27c5-4d02-98-87-c2-86-19-fd-b9-1b')
def _define_MF_AUDIO_RENDERER_ATTRIBUTE_STREAM_CATEGORY():
    return Guid('a9770471-92ec-4df4-94-fe-81-c3-6f-0c-3a-7a')
def _define_MFENABLETYPE_WMDRMV1_LicenseAcquisition():
    return Guid('4ff6eeaf-0b43-4797-9b-85-ab-f3-18-15-e7-b0')
def _define_MFENABLETYPE_WMDRMV7_LicenseAcquisition():
    return Guid('003306df-4a06-4884-a0-97-ef-6d-22-ec-84-a3')
def _define_MFENABLETYPE_WMDRMV7_Individualization():
    return Guid('acd2c84a-b303-4f65-bc-2c-2c-84-8d-01-a9-89')
def _define_MFENABLETYPE_MF_UpdateRevocationInformation():
    return Guid('e558b0b5-b3c4-44a0-92-4c-50-d1-78-93-23-85')
def _define_MFENABLETYPE_MF_UpdateUntrustedComponent():
    return Guid('9879f3d6-cee2-48e6-b5-73-97-67-ab-17-2f-16')
def _define_MFENABLETYPE_MF_RebootRequired():
    return Guid('6d4d3d4b-0ece-4652-8b-3a-f2-d2-42-60-d8-87')
def _define_MF_METADATA_PROVIDER_SERVICE():
    return Guid('db214084-58a4-4d2e-b8-4f-6f-75-5b-2f-7a-0d')
def _define_MF_PROPERTY_HANDLER_SERVICE():
    return Guid('a3face02-32b8-41dd-90-e7-5f-ef-7c-89-91-b5')
def _define_MF_RATE_CONTROL_SERVICE():
    return Guid('866fa297-b802-4bf8-9d-c9-5e-3b-6a-9f-53-c9')
def _define_MF_TIMECODE_SERVICE():
    return Guid('a0d502a7-0eb3-4885-b1-b9-9f-eb-0d-08-34-54')
def _define_MR_POLICY_VOLUME_SERVICE():
    return Guid('1abaa2ac-9d3b-47c6-ab-48-c5-95-06-de-78-4d')
def _define_MR_CAPTURE_POLICY_VOLUME_SERVICE():
    return Guid('24030acd-107a-4265-97-5c-41-4e-33-e6-5f-2a')
def _define_MR_STREAM_VOLUME_SERVICE():
    return Guid('f8b5fa2f-32ef-46f5-b1-72-13-21-21-2f-b2-c4')
def _define_MR_AUDIO_POLICY_SERVICE():
    return Guid('911fd737-6775-4ab0-a6-14-29-78-62-fd-ac-88')
def _define_MF_SAMPLEGRABBERSINK_SAMPLE_TIME_OFFSET():
    return Guid('62e3d776-8100-4e03-a6-e8-bd-38-57-ac-9c-47')
def _define_MF_SAMPLEGRABBERSINK_IGNORE_CLOCK():
    return Guid('0efda2c0-2b69-4e2e-ab-8d-46-dc-bf-f7-d2-5d')
def _define_MF_QUALITY_SERVICES():
    return Guid('b7e2be11-2f96-4640-b5-2c-28-23-65-bd-f1-6c')
def _define_MF_WORKQUEUE_SERVICES():
    return Guid('8e37d489-41e0-413a-90-68-28-7c-88-6d-8d-da')
def _define_MF_QUALITY_NOTIFY_PROCESSING_LATENCY():
    return Guid('f6b44af8-604d-46fe-a9-5d-45-47-9b-10-c9-bc')
def _define_MF_QUALITY_NOTIFY_SAMPLE_LAG():
    return Guid('30d15206-ed2a-4760-be-17-eb-4a-9f-12-29-5c')
def _define_MF_TIME_FORMAT_SEGMENT_OFFSET():
    return Guid('c8b8be77-869c-431d-81-2e-16-96-93-f6-5a-39')
def _define_MF_SOURCE_PRESENTATION_PROVIDER_SERVICE():
    return Guid('e002aadc-f4af-4ee5-98-47-05-3e-df-84-04-26')
def _define_MF_TOPONODE_ATTRIBUTE_EDITOR_SERVICE():
    return Guid('65656e1a-077f-4472-83-ef-31-6f-11-d5-08-7a')
def _define_MFNETSOURCE_SSLCERTIFICATE_MANAGER():
    return Guid('55e6cb27-e69b-4267-94-0c-2d-7e-c5-bb-8a-0f')
def _define_MFNETSOURCE_RESOURCE_FILTER():
    return Guid('815d0ff6-265a-4477-9e-46-7b-80-ad-80-b5-fb')
def _define_MFNET_SAVEJOB_SERVICE():
    return Guid('b85a587f-3d02-4e52-95-65-55-d3-ec-1e-7f-f7')
def _define_MFNETSOURCE_STATISTICS_SERVICE():
    return Guid('3cb1f275-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_STATISTICS():
    return Guid('3cb1f274-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_BUFFERINGTIME():
    return Guid('3cb1f276-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_ACCELERATEDSTREAMINGDURATION():
    return Guid('3cb1f277-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_MAXUDPACCELERATEDSTREAMINGDURATION():
    return Guid('4aab2879-bbe1-4994-9f-f0-54-95-bd-25-01-29')
def _define_MFNETSOURCE_MAXBUFFERTIMEMS():
    return Guid('408b24e6-4038-4401-b5-b2-fe-70-1a-9e-bf-10')
def _define_MFNETSOURCE_CONNECTIONBANDWIDTH():
    return Guid('3cb1f278-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_CACHEENABLED():
    return Guid('3cb1f279-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_AUTORECONNECTLIMIT():
    return Guid('3cb1f27a-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_RESENDSENABLED():
    return Guid('3cb1f27b-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_THINNINGENABLED():
    return Guid('3cb1f27c-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_PROTOCOL():
    return Guid('3cb1f27d-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_TRANSPORT():
    return Guid('3cb1f27e-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_PREVIEWMODEENABLED():
    return Guid('3cb1f27f-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_CREDENTIAL_MANAGER():
    return Guid('3cb1f280-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_PPBANDWIDTH():
    return Guid('3cb1f281-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_AUTORECONNECTPROGRESS():
    return Guid('3cb1f282-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_PROXYLOCATORFACTORY():
    return Guid('3cb1f283-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_BROWSERUSERAGENT():
    return Guid('3cb1f28b-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_BROWSERWEBPAGE():
    return Guid('3cb1f28c-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_PLAYERVERSION():
    return Guid('3cb1f28d-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_PLAYERID():
    return Guid('3cb1f28e-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_HOSTEXE():
    return Guid('3cb1f28f-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_HOSTVERSION():
    return Guid('3cb1f291-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_PLAYERUSERAGENT():
    return Guid('3cb1f292-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_CLIENTGUID():
    return Guid('60a2c4a6-f197-4c14-a5-bf-88-83-0d-24-58-af')
def _define_MFNETSOURCE_LOGURL():
    return Guid('3cb1f293-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_ENABLE_UDP():
    return Guid('3cb1f294-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_ENABLE_TCP():
    return Guid('3cb1f295-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_ENABLE_MSB():
    return Guid('3cb1f296-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_ENABLE_RTSP():
    return Guid('3cb1f298-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_ENABLE_HTTP():
    return Guid('3cb1f299-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_ENABLE_STREAMING():
    return Guid('3cb1f29c-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_ENABLE_DOWNLOAD():
    return Guid('3cb1f29d-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_ENABLE_PRIVATEMODE():
    return Guid('824779d8-f18b-4405-8c-f1-46-4f-b5-aa-8f-71')
def _define_MFNETSOURCE_UDP_PORT_RANGE():
    return Guid('3cb1f29a-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_PROXYINFO():
    return Guid('3cb1f29b-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_DRMNET_LICENSE_REPRESENTATION():
    return Guid('47eae1bd-bdfe-42e2-82-f3-54-a4-8c-17-96-2d')
def _define_MFNETSOURCE_PROXYSETTINGS():
    return Guid('3cb1f287-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_PROXYHOSTNAME():
    return Guid('3cb1f284-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_PROXYPORT():
    return Guid('3cb1f288-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_PROXYEXCEPTIONLIST():
    return Guid('3cb1f285-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_PROXYBYPASSFORLOCAL():
    return Guid('3cb1f286-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_PROXYRERUNAUTODETECTION():
    return Guid('3cb1f289-0505-4c5d-ae-71-0a-55-63-44-ef-a1')
def _define_MFNETSOURCE_STREAM_LANGUAGE():
    return Guid('9ab44318-f7cd-4f2d-8d-6d-fa-35-b4-92-ce-cb')
def _define_MFNETSOURCE_LOGPARAMS():
    return Guid('64936ae8-9418-453a-8c-da-3e-0a-66-8b-35-3b')
def _define_MFNETSOURCE_PEERMANAGER():
    return Guid('48b29adb-febf-45ee-a9-bf-ef-b8-1c-49-2e-fc')
def _define_MFNETSOURCE_FRIENDLYNAME():
    return Guid('5b2a7757-bc6b-447e-aa-06-0d-da-1c-64-6e-2f')
def _define_MF_BYTESTREAMHANDLER_ACCEPTS_SHARE_WRITE():
    return Guid('a6e1f733-3001-4915-81-50-15-58-a2-18-0e-c8')
def _define_MF_BYTESTREAM_SERVICE():
    return Guid('ab025e2b-16d9-4180-a1-27-ba-6c-70-15-61-61')
def _define_MF_MEDIA_PROTECTION_MANAGER_PROPERTIES():
    return Guid('38bd81a9-acea-4c73-89-b2-55-32-c0-ae-ca-79')
def _define_MFCONNECTOR_SPDIF():
    return Guid('0b94a712-ad3e-4cee-83-ce-ce-32-e3-db-65-22')
def _define_MFCONNECTOR_UNKNOWN():
    return Guid('ac3aef5c-ce43-11d9-92-db-00-0b-db-28-ff-98')
def _define_MFCONNECTOR_PCI():
    return Guid('ac3aef5d-ce43-11d9-92-db-00-0b-db-28-ff-98')
def _define_MFCONNECTOR_PCIX():
    return Guid('ac3aef5e-ce43-11d9-92-db-00-0b-db-28-ff-98')
def _define_MFCONNECTOR_PCI_Express():
    return Guid('ac3aef5f-ce43-11d9-92-db-00-0b-db-28-ff-98')
def _define_MFCONNECTOR_AGP():
    return Guid('ac3aef60-ce43-11d9-92-db-00-0b-db-28-ff-98')
def _define_MFCONNECTOR_VGA():
    return Guid('57cd5968-ce47-11d9-92-db-00-0b-db-28-ff-98')
def _define_MFCONNECTOR_SVIDEO():
    return Guid('57cd5969-ce47-11d9-92-db-00-0b-db-28-ff-98')
def _define_MFCONNECTOR_COMPOSITE():
    return Guid('57cd596a-ce47-11d9-92-db-00-0b-db-28-ff-98')
def _define_MFCONNECTOR_COMPONENT():
    return Guid('57cd596b-ce47-11d9-92-db-00-0b-db-28-ff-98')
def _define_MFCONNECTOR_DVI():
    return Guid('57cd596c-ce47-11d9-92-db-00-0b-db-28-ff-98')
def _define_MFCONNECTOR_HDMI():
    return Guid('57cd596d-ce47-11d9-92-db-00-0b-db-28-ff-98')
def _define_MFCONNECTOR_LVDS():
    return Guid('57cd596e-ce47-11d9-92-db-00-0b-db-28-ff-98')
def _define_MFCONNECTOR_D_JPN():
    return Guid('57cd5970-ce47-11d9-92-db-00-0b-db-28-ff-98')
def _define_MFCONNECTOR_SDI():
    return Guid('57cd5971-ce47-11d9-92-db-00-0b-db-28-ff-98')
def _define_MFCONNECTOR_DISPLAYPORT_EXTERNAL():
    return Guid('57cd5972-ce47-11d9-92-db-00-0b-db-28-ff-98')
def _define_MFCONNECTOR_DISPLAYPORT_EMBEDDED():
    return Guid('57cd5973-ce47-11d9-92-db-00-0b-db-28-ff-98')
def _define_MFCONNECTOR_UDI_EXTERNAL():
    return Guid('57cd5974-ce47-11d9-92-db-00-0b-db-28-ff-98')
def _define_MFCONNECTOR_UDI_EMBEDDED():
    return Guid('57cd5975-ce47-11d9-92-db-00-0b-db-28-ff-98')
def _define_MFCONNECTOR_MIRACAST():
    return Guid('57cd5977-ce47-11d9-92-db-00-0b-db-28-ff-98')
def _define_MFCONNECTOR_TRANSPORT_AGNOSTIC_DIGITAL_MODE_A():
    return Guid('57cd5978-ce47-11d9-92-db-00-0b-db-28-ff-98')
def _define_MFCONNECTOR_TRANSPORT_AGNOSTIC_DIGITAL_MODE_B():
    return Guid('57cd5979-ce47-11d9-92-db-00-0b-db-28-ff-98')
def _define_MF_POLICY_ID():
    return Guid('b160c24d-c059-48f1-a9-01-9e-e2-98-a9-a8-c3')
def _define_MFPROTECTION_DISABLE():
    return Guid('8cc6d81b-fec6-4d8f-96-4b-cf-ba-0b-0d-ad-0d')
def _define_MFPROTECTION_CONSTRICTVIDEO():
    return Guid('193370ce-c5e4-4c3a-8a-66-69-59-b4-da-44-42')
def _define_MFPROTECTION_CONSTRICTVIDEO_NOOPM():
    return Guid('a580e8cd-c247-4957-b9-83-3c-2e-eb-d1-ff-59')
def _define_MFPROTECTION_CONSTRICTAUDIO():
    return Guid('ffc99b44-df48-4e16-8e-66-09-68-92-c1-57-8a')
def _define_MFPROTECTION_TRUSTEDAUDIODRIVERS():
    return Guid('65bdf3d2-0168-4816-a5-33-55-d4-7b-02-71-01')
def _define_MFPROTECTION_HDCP():
    return Guid('ae7cc03d-c828-4021-ac-b7-d5-78-d2-7a-af-13')
def _define_MFPROTECTION_CGMSA():
    return Guid('e57e69e9-226b-4d31-b4-e3-d3-db-00-87-36-dd')
def _define_MFPROTECTION_ACP():
    return Guid('c3fd11c6-f8b7-4d20-b0-08-1d-b1-7d-61-f2-da')
def _define_MFPROTECTION_WMDRMOTA():
    return Guid('a267a6a1-362e-47d0-88-05-46-28-59-8a-23-e4')
def _define_MFPROTECTION_FFT():
    return Guid('462a56b2-2866-4bb6-98-0d-6d-8d-9e-db-1a-8c')
def _define_MFPROTECTION_PROTECTED_SURFACE():
    return Guid('4f5d9566-e742-4a25-8d-1f-d2-87-b5-fa-0a-de')
def _define_MFPROTECTION_DISABLE_SCREEN_SCRAPE():
    return Guid('a21179a4-b7cd-40d8-96-14-8e-f2-37-1b-a7-8d')
def _define_MFPROTECTION_VIDEO_FRAMES():
    return Guid('36a59cbc-7401-4a8c-bc-20-46-a7-c9-e5-97-f0')
def _define_MFPROTECTION_HARDWARE():
    return Guid('4ee7f0c1-9ed7-424f-b6-be-99-6b-33-52-88-56')
def _define_MFPROTECTION_HDCP_WITH_TYPE_ENFORCEMENT():
    return Guid('a4a585e8-ed60-442d-81-4d-db-4d-42-20-a0-6d')
def _define_MFPROTECTIONATTRIBUTE_BEST_EFFORT():
    return Guid('c8e06331-75f0-4ec1-8e-77-17-57-8f-77-3b-46')
def _define_MFPROTECTIONATTRIBUTE_FAIL_OVER():
    return Guid('8536abc5-38f1-4151-9c-ce-f5-5d-94-12-29-ac')
def _define_MFPROTECTION_GRAPHICS_TRANSFER_AES_ENCRYPTION():
    return Guid('c873de64-d8a5-49e6-88-bb-fb-96-3f-d3-d4-ce')
def _define_MFPROTECTIONATTRIBUTE_CONSTRICTVIDEO_IMAGESIZE():
    return Guid('008476fc-4b58-4d80-a7-90-e7-29-76-73-16-1d')
def _define_MFPROTECTIONATTRIBUTE_HDCP_SRM():
    return Guid('6f302107-3477-4468-8a-08-ee-f9-db-10-e2-0f')
def _define_MF_SampleProtectionSalt():
    return Guid('5403deee-b9ee-438f-aa-83-38-04-99-7e-56-9d')
def _define_MF_REMOTE_PROXY():
    return Guid('2f00c90e-d2cf-4278-8b-6a-d0-77-fa-c3-a2-5f')
def _define_CLSID_CreateMediaExtensionObject():
    return Guid('ef65a54d-0788-45b8-8b-14-bc-0f-6a-6b-51-37')
def _define_MF_SAMI_SERVICE():
    return Guid('49a89ae7-b4d9-4ef2-aa-5c-f6-5a-3e-05-ae-4e')
def _define_MF_PD_SAMI_STYLELIST():
    return Guid('e0b73c7f-486d-484e-98-72-4d-e5-19-2a-7b-f8')
def _define_MF_SD_SAMI_LANGUAGE():
    return Guid('36fcb98a-6cd0-44cb-ac-b9-a8-f5-60-0d-d0-bb')
def _define_MF_TRANSCODE_CONTAINERTYPE():
    return Guid('150ff23f-4abc-478b-ac-4f-e1-91-6f-ba-1c-ca')
def _define_MFTranscodeContainerType_ASF():
    return Guid('430f6f6e-b6bf-4fc1-a0-bd-9e-e4-6e-ee-2a-fb')
def _define_MFTranscodeContainerType_MPEG4():
    return Guid('dc6cd05d-b9d0-40ef-bd-35-fa-62-2c-1a-b2-8a')
def _define_MFTranscodeContainerType_MP3():
    return Guid('e438b912-83f1-4de6-9e-3a-9f-fb-c6-dd-24-d1')
def _define_MFTranscodeContainerType_FLAC():
    return Guid('31344aa3-05a9-42b5-90-1b-8e-9d-42-57-f7-5e')
def _define_MFTranscodeContainerType_3GP():
    return Guid('34c50167-4472-4f34-9e-a0-c4-9f-ba-cf-03-7d')
def _define_MFTranscodeContainerType_AC3():
    return Guid('6d8d91c3-8c91-4ed1-87-42-8c-34-7d-5b-44-d0')
def _define_MFTranscodeContainerType_ADTS():
    return Guid('132fd27d-0f02-43de-a3-01-38-fb-bb-b3-83-4e')
def _define_MFTranscodeContainerType_MPEG2():
    return Guid('bfc2dbf9-7bb4-4f8f-af-de-e1-12-c4-4b-a8-82')
def _define_MFTranscodeContainerType_WAVE():
    return Guid('64c3453c-0f26-4741-be-63-87-bd-f8-bb-93-5b')
def _define_MFTranscodeContainerType_AVI():
    return Guid('7edfe8af-402f-4d76-a3-3c-61-9f-d1-57-d0-f1')
def _define_MFTranscodeContainerType_FMPEG4():
    return Guid('9ba876f1-419f-4b77-a1-e0-35-95-9d-9d-40-04')
def _define_MFTranscodeContainerType_AMR():
    return Guid('025d5ad3-621a-475b-96-4d-66-b1-c8-24-f0-79')
def _define_MF_TRANSCODE_SKIP_METADATA_TRANSFER():
    return Guid('4e4469ef-b571-4959-8f-83-3d-cf-ba-33-a3-93')
def _define_MF_TRANSCODE_TOPOLOGYMODE():
    return Guid('3e3df610-394a-40b2-9d-ea-3b-ab-65-0b-eb-f2')
def _define_MF_TRANSCODE_ADJUST_PROFILE():
    return Guid('9c37c21b-060f-487c-a6-90-80-d7-f5-0d-1c-72')
def _define_MF_TRANSCODE_ENCODINGPROFILE():
    return Guid('6947787c-f508-4ea9-b1-e9-a1-fe-3a-49-fb-c9')
def _define_MF_TRANSCODE_QUALITYVSSPEED():
    return Guid('98332df8-03cd-476b-89-fa-3f-9e-44-2d-ec-9f')
def _define_MF_TRANSCODE_DONOT_INSERT_ENCODER():
    return Guid('f45aa7ce-ab24-4012-a1-1b-dc-82-20-20-14-10')
def _define_MF_VIDEO_PROCESSOR_ALGORITHM():
    return Guid('4a0a1e1f-272c-4fb6-9e-b1-db-33-0c-bc-97-ca')
def _define_MF_XVP_DISABLE_FRC():
    return Guid('2c0afa19-7a97-4d5a-9e-e8-16-d4-fc-51-8d-8c')
def _define_MF_XVP_CALLER_ALLOCATES_OUTPUT():
    return Guid('04a2cabc-0cab-40b1-a1-b9-75-bc-36-58-f0-00')
def _define_MF_LOCAL_MFT_REGISTRATION_SERVICE():
    return Guid('ddf5cf9c-4506-45aa-ab-f0-6d-5d-94-dd-1b-4a')
def _define_MF_WRAPPED_SAMPLE_SERVICE():
    return Guid('31f52bf2-d03e-4048-80-d0-9c-10-46-d8-7c-61')
def _define_MF_WRAPPED_OBJECT():
    return Guid('2b182c4c-d6ac-49f4-89-15-f7-18-87-db-70-cd')
def _define_CLSID_HttpSchemePlugin():
    return Guid('44cb442b-9da9-49df-b3-fd-02-37-77-b1-6e-50')
def _define_CLSID_UrlmonSchemePlugin():
    return Guid('9ec4b4f9-3029-45ad-94-7b-34-4d-e2-a2-49-e2')
def _define_CLSID_NetSchemePlugin():
    return Guid('e9f4ebab-d97b-463e-a2-b1-c5-4e-e3-f9-41-4d')
def _define_MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE():
    return Guid('c60ac5fe-252a-478f-a0-ef-bc-8f-a5-f7-ca-d3')
def _define_MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_HW_SOURCE():
    return Guid('de7046ba-54d6-4487-a2-a4-ec-7c-0d-1b-d1-63')
def _define_MF_DEVSOURCE_ATTRIBUTE_FRIENDLY_NAME():
    return Guid('60d0e559-52f8-4fa2-bb-ce-ac-db-34-a8-ec-01')
def _define_MF_DEVSOURCE_ATTRIBUTE_MEDIA_TYPE():
    return Guid('56a819ca-0c78-4de4-a0-a7-3d-da-ba-0f-24-d4')
def _define_MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_CATEGORY():
    return Guid('77f0ae69-c3bd-4509-94-1d-46-7e-4d-24-89-9e')
def _define_MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_SYMBOLIC_LINK():
    return Guid('58f0aad8-22bf-4f8a-bb-3d-d2-c4-97-8c-6e-2f')
def _define_MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_SYMBOLIC_LINK():
    return Guid('98d24b5e-5930-4614-b5-a1-f6-00-f9-35-5a-78')
def _define_MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_MAX_BUFFERS():
    return Guid('7dd9b730-4f2d-41d5-8f-95-0c-c9-a9-12-ba-26')
def _define_MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ENDPOINT_ID():
    return Guid('30da9258-feb9-47a7-a4-53-76-3a-7a-8e-1c-5f')
def _define_MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ROLE():
    return Guid('bc9d118e-8c67-4a18-85-d4-12-d3-00-40-05-52')
def _define_MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_PROVIDER_DEVICE_ID():
    return Guid('36689d42-a06c-40ae-84-cf-f5-a0-34-06-7c-c4')
def _define_MF_DEVSOURCE_ATTRIBUTE_SOURCE_XADDRESS():
    return Guid('bca0be52-c327-44c7-9b-7d-7f-a8-d9-b5-bc-da')
def _define_MF_DEVSOURCE_ATTRIBUTE_SOURCE_STREAM_URL():
    return Guid('9d7b40d2-3617-4043-93-e3-8d-6d-a9-bb-34-92')
def _define_MF_DEVSOURCE_ATTRIBUTE_SOURCE_USERNAME():
    return Guid('05d01add-949f-46eb-bc-8e-8b-0d-2b-32-d7-9d')
def _define_MF_DEVSOURCE_ATTRIBUTE_SOURCE_PASSWORD():
    return Guid('a0fd7e16-42d9-49df-84-c0-e8-2c-5e-ab-88-74')
def _define_CLSID_FrameServerNetworkCameraSource():
    return Guid('7a213aa7-866f-414a-8c-1a-27-5c-72-83-a3-95')
def _define_MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_GUID():
    return Guid('14dd9a1c-7cff-41be-b1-b9-ba-1a-c6-ec-b5-71')
def _define_MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_GUID():
    return Guid('8ac3587a-4ae7-42d8-99-e0-0a-60-13-ee-f9-0f')
def _define_MF_DEVICESTREAM_IMAGE_STREAM():
    return Guid('a7ffb865-e7b2-43b0-9f-6f-9a-f2-a0-e5-0f-c0')
def _define_MF_DEVICESTREAM_INDEPENDENT_IMAGE_STREAM():
    return Guid('03eeec7e-d605-4576-8b-29-65-80-b4-90-d7-d3')
def _define_MF_DEVICESTREAM_STREAM_ID():
    return Guid('11bd5120-d124-446b-88-e6-17-06-02-57-ff-f9')
def _define_MF_DEVICESTREAM_STREAM_CATEGORY():
    return Guid('2939e7b8-a62e-4579-b6-74-d4-07-3d-fa-bb-ba')
def _define_MF_DEVICESTREAM_FRAMESERVER_SHARED():
    return Guid('1cb378e9-b279-41d4-af-97-34-a2-43-e6-83-20')
def _define_MF_DEVICESTREAM_TRANSFORM_STREAM_ID():
    return Guid('e63937b7-daaf-4d49-81-5f-d8-26-f8-ad-31-e7')
def _define_MF_DEVICESTREAM_EXTENSION_PLUGIN_CLSID():
    return Guid('048e6558-60c4-4173-bd-5b-6a-3c-a2-89-6a-ee')
def _define_MF_DEVICEMFT_EXTENSION_PLUGIN_CLSID():
    return Guid('0844dbae-34fa-48a0-a7-83-8e-69-6f-b1-c9-a8')
def _define_MF_DEVICESTREAM_EXTENSION_PLUGIN_CONNECTION_POINT():
    return Guid('37f9375c-e664-4ea4-aa-e4-cb-6d-1d-ac-a1-f4')
def _define_MF_DEVICESTREAM_TAKEPHOTO_TRIGGER():
    return Guid('1d180e34-538c-4fbb-a7-5a-85-9a-f7-d2-61-a6')
def _define_MF_DEVICESTREAM_MAX_FRAME_BUFFERS():
    return Guid('1684cebe-3175-4985-88-2c-0e-fd-3e-8a-c1-1e')
def _define_MF_DEVICEMFT_CONNECTED_FILTER_KSCONTROL():
    return Guid('6a2c4fa6-d179-41cd-95-23-82-23-71-ea-40-e5')
def _define_MF_DEVICEMFT_CONNECTED_PIN_KSCONTROL():
    return Guid('e63310f7-b244-4ef8-9a-7d-24-c7-4e-32-eb-d0')
def _define_MF_DEVICE_THERMAL_STATE_CHANGED():
    return Guid('70ccd0af-fc9f-4deb-a8-75-9f-ec-d1-6c-5b-d4')
def _define_MFSampleExtension_DeviceTimestamp():
    return Guid('8f3e35e7-2dcd-4887-86-22-2a-58-ba-a6-52-b0')
def _define_MFSampleExtension_Spatial_CameraViewTransform():
    return Guid('4e251fa4-830f-4770-85-9a-4b-8d-99-aa-80-9b')
def _define_MFSampleExtension_Spatial_CameraCoordinateSystem():
    return Guid('9d13c82f-2199-4e67-91-cd-d1-a4-18-1f-25-34')
def _define_MFSampleExtension_Spatial_CameraProjectionTransform():
    return Guid('47f9fcb5-2a02-4f26-a4-77-79-2f-df-95-88-6a')
def _define_MF_MEDIASOURCE_SERVICE():
    return Guid('f09992f7-9fba-4c4a-a3-7f-8c-47-b4-e1-df-e7')
def _define_MF_ACCESS_CONTROLLED_MEDIASOURCE_SERVICE():
    return Guid('014a5031-2f05-4c6a-9f-9c-7d-0d-c4-ed-a5-f4')
def _define_MF_CONTENT_DECRYPTOR_SERVICE():
    return Guid('68a72927-fc7b-44ee-85-f4-7c-51-bd-55-a6-59')
def _define_MF_CONTENT_PROTECTION_DEVICE_SERVICE():
    return Guid('ff58436f-76a0-41fe-b5-66-10-cc-53-96-2e-dd')
def _define_MF_SD_AUDIO_ENCODER_DELAY():
    return Guid('8e85422c-73de-403f-9a-35-55-0a-d6-e8-b9-51')
def _define_MF_SD_AUDIO_ENCODER_PADDING():
    return Guid('529c7f2c-ac4b-4e3f-bf-c3-09-02-19-49-82-cb')
def _define_CLSID_MSH264DecoderMFT():
    return Guid('62ce7e72-4c71-4d20-b1-5d-45-28-31-a8-7d-9d')
def _define_CLSID_MSH264EncoderMFT():
    return Guid('6ca50344-051a-4ded-97-79-a4-33-05-16-5e-35')
def _define_CLSID_MSDDPlusDecMFT():
    return Guid('177c0afe-900b-48d4-9e-4c-57-ad-d2-50-b3-d4')
def _define_CLSID_MP3DecMediaObject():
    return Guid('bbeea841-0a63-4f52-a7-ab-a9-b3-a8-4e-d3-8a')
def _define_CLSID_MSAACDecMFT():
    return Guid('32d186a7-218f-4c75-88-76-dd-77-27-3a-89-99')
def _define_CLSID_MSH265DecoderMFT():
    return Guid('420a51a3-d605-430c-b4-fc-45-27-4f-a6-c5-62')
def _define_CLSID_WMVDecoderMFT():
    return Guid('82d353df-90bd-4382-8b-c2-3f-61-92-b7-6e-34')
def _define_CLSID_WMADecMediaObject():
    return Guid('2eeb4adf-4578-4d10-bc-a7-bb-95-5f-56-32-0a')
def _define_CLSID_MSMPEGAudDecMFT():
    return Guid('70707b39-b2ca-4015-ab-ea-f8-44-7d-22-d8-8b')
def _define_CLSID_MSMPEGDecoderMFT():
    return Guid('2d709e52-123f-49b5-9c-bc-9a-f5-cd-e2-8f-b9')
def _define_CLSID_AudioResamplerMediaObject():
    return Guid('f447b69e-1884-4a7e-80-55-34-6f-74-d6-ed-b3')
def _define_CLSID_MSVPxDecoder():
    return Guid('e3aaf548-c9a4-4c6e-23-4d-5a-da-37-4b-00-00')
def _define_CLSID_MSOpusDecoder():
    return Guid('63e17c10-2d43-4c42-8f-e3-8d-8b-63-e4-6a-6a')
def _define_CLSID_VideoProcessorMFT():
    return Guid('88753b26-5b24-49bd-b2-e7-0c-44-5c-78-c9-82')
def _define_MFNETSOURCE_CROSS_ORIGIN_SUPPORT():
    return Guid('9842207c-b02c-4271-a2-fc-72-e4-93-08-e5-c2')
def _define_MFNETSOURCE_HTTP_DOWNLOAD_SESSION_PROVIDER():
    return Guid('7d55081e-307d-4d6d-a6-63-a9-3b-e9-7c-4b-5c')
def _define_MF_SD_MEDIASOURCE_STATUS():
    return Guid('1913678b-fc0f-44da-8f-43-1b-a3-b5-26-f4-ae')
def _define_MF_SD_VIDEO_SPHERICAL():
    return Guid('a51da449-3fdc-478c-bc-b5-30-be-76-59-5f-55')
def _define_MF_SD_VIDEO_SPHERICAL_FORMAT():
    return Guid('4a8fc407-6ea1-46c8-b5-67-69-71-d4-a1-39-c3')
def _define_MF_SD_VIDEO_SPHERICAL_INITIAL_VIEWDIRECTION():
    return Guid('11d25a49-bb62-467f-9d-b1-c1-71-65-71-6c-49')
def _define_MF_MEDIASOURCE_EXPOSE_ALL_STREAMS():
    return Guid('e7f250b8-8fd9-4a09-b6-c1-6a-31-5c-7c-72-0e')
def _define_MF_ST_MEDIASOURCE_COLLECTION():
    return Guid('616de972-83ad-4950-81-70-63-0d-19-cb-e3-07')
def _define_MF_DEVICESTREAM_FILTER_KSCONTROL():
    return Guid('46783cca-3df5-4923-a9-ef-36-b7-22-3e-dd-e0')
def _define_MF_DEVICESTREAM_PIN_KSCONTROL():
    return Guid('ef3ef9a7-87f2-48ca-be-02-67-48-78-91-8e-98')
def _define_MF_DEVICESTREAM_SOURCE_ATTRIBUTES():
    return Guid('2f8cb617-361b-434f-85-ea-99-a0-3e-1c-e4-e0')
def _define_MF_DEVICESTREAM_FRAMESERVER_HIDDEN():
    return Guid('f402567b-4d91-4179-96-d1-74-c8-48-0c-20-34')
def _define_MF_STF_VERSION_INFO():
    return Guid('6770bd39-ef82-44ee-a4-9b-93-4b-eb-24-ae-f7')
def _define_MF_STF_VERSION_DATE():
    return Guid('31a165d5-df67-4095-8e-44-88-68-fc-20-db-fd')
def _define_MF_DEVICESTREAM_REQUIRED_CAPABILITIES():
    return Guid('6d8b957e-7cf6-43f4-af-56-9c-0e-1e-4f-cb-e1')
def _define_MF_DEVICESTREAM_REQUIRED_SDDL():
    return Guid('331ae85d-c0d3-49ba-83-ba-82-a1-2d-63-cd-d6')
def _define_MF_DEVICEMFT_SENSORPROFILE_COLLECTION():
    return Guid('36ebdc44-b12c-441b-89-f4-08-b2-f4-1a-9c-fc')
def _define_MF_DEVICESTREAM_SENSORSTREAM_ID():
    return Guid('e35b9fe4-0659-4cad-bb-51-33-16-0b-e7-e4-13')
def _define_MF_PD_ASF_FILEPROPERTIES_FILE_ID():
    return Guid('3de649b4-d76d-4e66-9e-c9-78-12-0f-b4-c7-e3')
def _define_MF_PD_ASF_FILEPROPERTIES_CREATION_TIME():
    return Guid('3de649b6-d76d-4e66-9e-c9-78-12-0f-b4-c7-e3')
def _define_MF_PD_ASF_FILEPROPERTIES_PACKETS():
    return Guid('3de649b7-d76d-4e66-9e-c9-78-12-0f-b4-c7-e3')
def _define_MF_PD_ASF_FILEPROPERTIES_PLAY_DURATION():
    return Guid('3de649b8-d76d-4e66-9e-c9-78-12-0f-b4-c7-e3')
def _define_MF_PD_ASF_FILEPROPERTIES_SEND_DURATION():
    return Guid('3de649b9-d76d-4e66-9e-c9-78-12-0f-b4-c7-e3')
def _define_MF_PD_ASF_FILEPROPERTIES_PREROLL():
    return Guid('3de649ba-d76d-4e66-9e-c9-78-12-0f-b4-c7-e3')
def _define_MF_PD_ASF_FILEPROPERTIES_FLAGS():
    return Guid('3de649bb-d76d-4e66-9e-c9-78-12-0f-b4-c7-e3')
def _define_MF_PD_ASF_FILEPROPERTIES_MIN_PACKET_SIZE():
    return Guid('3de649bc-d76d-4e66-9e-c9-78-12-0f-b4-c7-e3')
def _define_MF_PD_ASF_FILEPROPERTIES_MAX_PACKET_SIZE():
    return Guid('3de649bd-d76d-4e66-9e-c9-78-12-0f-b4-c7-e3')
def _define_MF_PD_ASF_FILEPROPERTIES_MAX_BITRATE():
    return Guid('3de649be-d76d-4e66-9e-c9-78-12-0f-b4-c7-e3')
def _define_CLSID_WMDRMSystemID():
    return Guid('8948bb22-11bd-4796-93-e3-97-4d-1b-57-56-78')
def _define_MF_PD_ASF_CONTENTENCRYPTION_TYPE():
    return Guid('8520fe3d-277e-46ea-99-e4-e3-0a-86-db-12-be')
def _define_MF_PD_ASF_CONTENTENCRYPTION_KEYID():
    return Guid('8520fe3e-277e-46ea-99-e4-e3-0a-86-db-12-be')
def _define_MF_PD_ASF_CONTENTENCRYPTION_SECRET_DATA():
    return Guid('8520fe3f-277e-46ea-99-e4-e3-0a-86-db-12-be')
def _define_MF_PD_ASF_CONTENTENCRYPTION_LICENSE_URL():
    return Guid('8520fe40-277e-46ea-99-e4-e3-0a-86-db-12-be')
def _define_MF_PD_ASF_CONTENTENCRYPTIONEX_ENCRYPTION_DATA():
    return Guid('62508be5-ecdf-4924-a3-59-72-ba-b3-39-7b-9d')
def _define_MF_PD_ASF_LANGLIST():
    return Guid('f23de43c-9977-460d-a6-ec-32-93-7f-16-0f-7d')
def _define_MF_PD_ASF_LANGLIST_LEGACYORDER():
    return Guid('f23de43d-9977-460d-a6-ec-32-93-7f-16-0f-7d')
def _define_MF_PD_ASF_MARKER():
    return Guid('5134330e-83a6-475e-a9-d5-4f-b8-75-fb-2e-31')
def _define_MF_PD_ASF_SCRIPT():
    return Guid('e29cd0d7-d602-4923-a7-fe-73-fd-97-ec-c6-50')
def _define_MF_PD_ASF_CODECLIST():
    return Guid('e4bb3509-c18d-4df1-bb-99-7a-36-b3-cc-41-19')
def _define_MF_PD_ASF_METADATA_IS_VBR():
    return Guid('5fc6947a-ef60-445d-b4-49-44-2e-cc-78-b4-c1')
def _define_MF_PD_ASF_METADATA_V8_VBRPEAK():
    return Guid('5fc6947b-ef60-445d-b4-49-44-2e-cc-78-b4-c1')
def _define_MF_PD_ASF_METADATA_V8_BUFFERAVERAGE():
    return Guid('5fc6947c-ef60-445d-b4-49-44-2e-cc-78-b4-c1')
def _define_MF_PD_ASF_METADATA_LEAKY_BUCKET_PAIRS():
    return Guid('5fc6947d-ef60-445d-b4-49-44-2e-cc-78-b4-c1')
def _define_MF_PD_ASF_DATA_START_OFFSET():
    return Guid('e7d5b3e7-1f29-45d3-88-22-3e-78-fa-e2-72-ed')
def _define_MF_PD_ASF_DATA_LENGTH():
    return Guid('e7d5b3e8-1f29-45d3-88-22-3e-78-fa-e2-72-ed')
def _define_MF_SD_ASF_EXTSTRMPROP_LANGUAGE_ID_INDEX():
    return Guid('48f8a522-305d-422d-85-24-25-02-dd-a3-36-80')
def _define_MF_SD_ASF_EXTSTRMPROP_AVG_DATA_BITRATE():
    return Guid('48f8a523-305d-422d-85-24-25-02-dd-a3-36-80')
def _define_MF_SD_ASF_EXTSTRMPROP_AVG_BUFFERSIZE():
    return Guid('48f8a524-305d-422d-85-24-25-02-dd-a3-36-80')
def _define_MF_SD_ASF_EXTSTRMPROP_MAX_DATA_BITRATE():
    return Guid('48f8a525-305d-422d-85-24-25-02-dd-a3-36-80')
def _define_MF_SD_ASF_EXTSTRMPROP_MAX_BUFFERSIZE():
    return Guid('48f8a526-305d-422d-85-24-25-02-dd-a3-36-80')
def _define_MF_SD_ASF_STREAMBITRATES_BITRATE():
    return Guid('a8e182ed-afc8-43d0-b0-d1-f6-5b-ad-9d-a5-58')
def _define_MF_SD_ASF_METADATA_DEVICE_CONFORMANCE_TEMPLATE():
    return Guid('245e929d-c44e-4f7e-bb-3c-77-d4-df-d2-7f-8a')
def _define_MF_PD_ASF_INFO_HAS_AUDIO():
    return Guid('80e62295-2296-4a44-b3-1c-d1-03-c6-fe-d2-3c')
def _define_MF_PD_ASF_INFO_HAS_VIDEO():
    return Guid('80e62296-2296-4a44-b3-1c-d1-03-c6-fe-d2-3c')
def _define_MF_PD_ASF_INFO_HAS_NON_AUDIO_VIDEO():
    return Guid('80e62297-2296-4a44-b3-1c-d1-03-c6-fe-d2-3c')
def _define_MF_ASFPROFILE_MINPACKETSIZE():
    return Guid('22587626-47de-4168-87-f5-b5-aa-9b-12-a8-f0')
def _define_MF_ASFPROFILE_MAXPACKETSIZE():
    return Guid('22587627-47de-4168-87-f5-b5-aa-9b-12-a8-f0')
def _define_MF_ASFSTREAMCONFIG_LEAKYBUCKET1():
    return Guid('c69b5901-ea1a-4c9b-b6-92-e2-a0-d2-9a-8a-dd')
def _define_MF_ASFSTREAMCONFIG_LEAKYBUCKET2():
    return Guid('c69b5902-ea1a-4c9b-b6-92-e2-a0-d2-9a-8a-dd')
def _define_MFASFSampleExtension_SampleDuration():
    return Guid('c6bd9450-867f-4907-83-a3-c7-79-21-b7-33-ad')
def _define_MFASFSampleExtension_OutputCleanPoint():
    return Guid('f72a3c6f-6eb4-4ebc-b1-92-09-ad-97-59-e8-28')
def _define_MFASFSampleExtension_SMPTE():
    return Guid('399595ec-8667-4e2d-8f-db-98-81-4c-e7-6c-1e')
def _define_MFASFSampleExtension_FileName():
    return Guid('e165ec0e-19ed-45d7-b4-a7-25-cb-d1-e2-8e-9b')
def _define_MFASFSampleExtension_ContentType():
    return Guid('d590dc20-07bc-436c-9c-f7-f3-bb-fb-f1-a4-dc')
def _define_MFASFSampleExtension_PixelAspectRatio():
    return Guid('1b1ee554-f9ea-4bc8-82-1a-37-6b-74-e4-c4-b8')
def _define_MFASFSampleExtension_Encryption_SampleID():
    return Guid('6698b84e-0afa-4330-ae-b2-1c-0a-98-d7-a4-4d')
def _define_MFASFSampleExtension_Encryption_KeyID():
    return Guid('76376591-795f-4da1-86-ed-9d-46-ec-a1-09-a9')
def _define_MFASFMutexType_Language():
    return Guid('72178c2b-e45b-11d5-bc-2a-00-b0-d0-f3-f4-ab')
def _define_MFASFMutexType_Bitrate():
    return Guid('72178c2c-e45b-11d5-bc-2a-00-b0-d0-f3-f4-ab')
def _define_MFASFMutexType_Presentation():
    return Guid('72178c2d-e45b-11d5-bc-2a-00-b0-d0-f3-f4-ab')
def _define_MFASFMutexType_Unknown():
    return Guid('72178c2e-e45b-11d5-bc-2a-00-b0-d0-f3-f4-ab')
def _define_MFASFSPLITTER_PACKET_BOUNDARY():
    return Guid('fe584a05-e8d6-42e3-b1-76-f1-21-17-05-fb-6f')
def _define_MFASFINDEXER_TYPE_TIMECODE():
    return Guid('49815231-6bad-44fd-81-0a-3f-60-98-4e-c7-fd')
def _define_MF_CAPTURE_ENGINE_INITIALIZED():
    return Guid('219992bc-cf92-4531-a1-ae-96-e1-e8-86-c8-f1')
def _define_MF_CAPTURE_ENGINE_PREVIEW_STARTED():
    return Guid('a416df21-f9d3-4a74-99-1b-b8-17-29-89-52-c4')
def _define_MF_CAPTURE_ENGINE_PREVIEW_STOPPED():
    return Guid('13d5143c-1edd-4e50-a2-ef-35-0a-47-67-80-60')
def _define_MF_CAPTURE_ENGINE_RECORD_STARTED():
    return Guid('ac2b027b-ddf9-48a0-89-be-38-ab-35-ef-45-c0')
def _define_MF_CAPTURE_ENGINE_RECORD_STOPPED():
    return Guid('55e5200a-f98f-4c0d-a9-ec-9e-b2-5e-d3-d7-73')
def _define_MF_CAPTURE_ENGINE_PHOTO_TAKEN():
    return Guid('3c50c445-7304-48eb-86-5d-bb-a1-9b-a3-af-5c')
def _define_MF_CAPTURE_SOURCE_CURRENT_DEVICE_MEDIA_TYPE_SET():
    return Guid('e7e75e4c-039c-4410-81-5b-87-41-30-7b-63-aa')
def _define_MF_CAPTURE_ENGINE_ERROR():
    return Guid('46b89fc6-33cc-4399-9d-ad-78-4d-e7-7d-58-7c')
def _define_MF_CAPTURE_ENGINE_EFFECT_ADDED():
    return Guid('aa8dc7b5-a048-4e13-8e-be-f2-3c-46-c8-30-c1')
def _define_MF_CAPTURE_ENGINE_EFFECT_REMOVED():
    return Guid('c6e8db07-fb09-4a48-89-c6-bf-92-a0-42-22-c9')
def _define_MF_CAPTURE_ENGINE_ALL_EFFECTS_REMOVED():
    return Guid('fded7521-8ed8-431a-a9-6b-f3-e2-56-5e-98-1c')
def _define_MF_CAPTURE_SINK_PREPARED():
    return Guid('7bfce257-12b1-4409-8c-34-d4-45-da-ab-75-78')
def _define_MF_CAPTURE_ENGINE_OUTPUT_MEDIA_TYPE_SET():
    return Guid('caaad994-83ec-45e9-a3-0a-1f-20-aa-db-98-31')
def _define_MF_CAPTURE_ENGINE_CAMERA_STREAM_BLOCKED():
    return Guid('a4209417-8d39-46f3-b7-59-59-12-52-8f-42-07')
def _define_MF_CAPTURE_ENGINE_CAMERA_STREAM_UNBLOCKED():
    return Guid('9be9eef0-cdaf-4717-85-64-83-4a-ae-66-41-5c')
def _define_MF_CAPTURE_ENGINE_D3D_MANAGER():
    return Guid('76e25e7b-d595-4283-96-2c-c5-94-af-d7-8d-df')
def _define_MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_UNPROCESSED_SAMPLES():
    return Guid('b467f705-7913-4894-9d-42-a2-15-fe-a2-3d-a9')
def _define_MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_UNPROCESSED_SAMPLES():
    return Guid('1cddb141-a7f4-4d58-98-96-4d-15-a5-3c-4e-fe')
def _define_MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_PROCESSED_SAMPLES():
    return Guid('e7b4a49e-382c-4aef-a9-46-ae-d5-49-0b-71-11')
def _define_MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_PROCESSED_SAMPLES():
    return Guid('9896e12a-f707-4500-b6-bd-db-8e-b8-10-b5-0f')
def _define_MF_CAPTURE_ENGINE_USE_AUDIO_DEVICE_ONLY():
    return Guid('1c8077da-8466-4dc4-8b-8e-27-6b-3f-85-92-3b')
def _define_MF_CAPTURE_ENGINE_USE_VIDEO_DEVICE_ONLY():
    return Guid('7e025171-cf32-4f2e-8f-19-41-05-77-b7-3a-66')
def _define_MF_CAPTURE_ENGINE_DISABLE_HARDWARE_TRANSFORMS():
    return Guid('b7c42a6b-3207-4495-b4-e7-81-f9-c3-5d-59-91')
def _define_MF_CAPTURE_ENGINE_DISABLE_DXVA():
    return Guid('f9818862-179d-433f-a3-2f-74-cb-cf-74-46-6d')
def _define_MF_CAPTURE_ENGINE_MEDIASOURCE_CONFIG():
    return Guid('bc6989d2-0fc1-46e1-a7-4f-ef-d3-6b-c7-88-de')
def _define_MF_CAPTURE_ENGINE_DECODER_MFT_FIELDOFUSE_UNLOCK_Attribute():
    return Guid('2b8ad2e8-7acb-4321-a6-06-32-5c-42-49-f4-fc')
def _define_MF_CAPTURE_ENGINE_ENCODER_MFT_FIELDOFUSE_UNLOCK_Attribute():
    return Guid('54c63a00-78d5-422f-aa-3e-5e-99-ac-64-92-69')
def _define_MF_CAPTURE_ENGINE_ENABLE_CAMERA_STREAMSTATE_NOTIFICATION():
    return Guid('4c808e9d-aaed-4713-90-fb-cb-24-06-4a-b8-da')
def _define_MF_CAPTURE_ENGINE_MEDIA_CATEGORY():
    return Guid('8e3f5bd5-dbbf-42f0-85-42-d0-7a-39-71-76-2a')
def _define_MF_CAPTURE_ENGINE_AUDIO_PROCESSING():
    return Guid('10f1be5e-7e11-410b-97-3d-f4-b6-10-90-00-fe')
def _define_MF_CAPTURE_ENGINE_EVENT_GENERATOR_GUID():
    return Guid('abfa8ad5-fc6d-4911-87-e0-96-19-45-f8-f7-ce')
def _define_MF_CAPTURE_ENGINE_EVENT_STREAM_INDEX():
    return Guid('82697f44-b1cf-42eb-97-53-f8-6d-64-9c-88-65')
def _define_MF_CAPTURE_ENGINE_SELECTEDCAMERAPROFILE():
    return Guid('03160b7e-1c6f-4db2-ad-56-a7-c4-30-f8-23-92')
def _define_MF_CAPTURE_ENGINE_SELECTEDCAMERAPROFILE_INDEX():
    return Guid('3ce88613-2214-46c3-b4-17-82-f8-a3-13-c9-c3')
def _define_CLSID_MFCaptureEngine():
    return Guid('efce38d3-8914-4674-a7-df-ae-1b-3d-65-4b-8a')
def _define_CLSID_MFCaptureEngineClassFactory():
    return Guid('efce38d3-8914-4674-a7-df-ae-1b-3d-65-4b-8a')
def _define_MFSampleExtension_DeviceReferenceSystemTime():
    return Guid('6523775a-ba2d-405f-b2-c5-01-ff-88-e2-e8-f6')
def _define_MF_D3D12_SYNCHRONIZATION_OBJECT():
    return Guid('2a7c8d6a-85a6-494d-a0-46-06-ea-1a-13-8f-4b')
def _define_MF_MT_D3D_RESOURCE_VERSION():
    return Guid('174f1e85-fe26-453d-b5-2e-5b-dd-4e-55-b9-44')
def _define_MF_MT_D3D12_CPU_READBACK():
    return Guid('28ee9fe3-d481-46a6-b9-8a-7f-69-d5-28-0e-82')
def _define_MF_MT_D3D12_TEXTURE_LAYOUT():
    return Guid('97c85caa-0beb-4ee1-97-15-f2-2f-ad-8c-10-f5')
def _define_MF_MT_D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET():
    return Guid('eeac2585-3430-498c-84-a2-77-b1-bb-a5-70-f6')
def _define_MF_MT_D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL():
    return Guid('b1138dc3-01d5-4c14-9b-dc-cd-c9-33-6f-55-b9')
def _define_MF_MT_D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS():
    return Guid('82c85647-5057-4960-95-59-f4-5b-8e-27-14-27')
def _define_MF_MT_D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE():
    return Guid('ba06bfac-ffe3-474a-ab-55-16-1e-e4-41-7a-2e')
def _define_MF_MT_D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER():
    return Guid('a6a1e439-2f96-4ab5-98-dc-ad-f7-49-73-50-5d')
def _define_MF_MT_D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS():
    return Guid('0a4940b2-cfd6-4738-9d-02-98-11-37-34-01-5a')
def _define_MF_SA_D3D12_HEAP_FLAGS():
    return Guid('496b3266-d28f-4f8c-93-a7-4a-59-6b-1a-31-a1')
def _define_MF_SA_D3D12_HEAP_TYPE():
    return Guid('56f26a76-bbc1-4ce0-bb-11-e2-23-68-d8-74-ed')
def _define_MF_SA_D3D12_CLEAR_VALUE():
    return Guid('86ba9a39-0526-495d-9a-b5-54-ec-9f-ad-6f-c3')
def _define_MF_MSE_CALLBACK():
    return Guid('9063a7c0-42c5-4ffd-a8-a8-6f-cf-9e-a3-d0-0c')
def _define_MF_MSE_ACTIVELIST_CALLBACK():
    return Guid('949bda0f-4549-46d5-ad-7f-b8-46-e1-ab-16-52')
def _define_MF_MSE_BUFFERLIST_CALLBACK():
    return Guid('42e669b0-d60e-4afb-a8-5b-d8-e5-fe-6b-da-b5')
def _define_MF_MSE_VP9_SUPPORT():
    return Guid('92d78429-d88b-4ff0-83-22-80-3e-fa-6e-96-26')
def _define_MF_MSE_OPUS_SUPPORT():
    return Guid('4d224cc1-8cc4-48a3-a7-a7-e4-c1-6c-e6-38-8a')
def _define_MF_MEDIA_ENGINE_NEEDKEY_CALLBACK():
    return Guid('7ea80843-b6e4-432c-8e-a4-78-48-ff-e4-22-0e')
def _define_MF_MEDIA_ENGINE_CALLBACK():
    return Guid('c60381b8-83a4-41f8-a3-d0-de-05-07-68-49-a9')
def _define_MF_MEDIA_ENGINE_DXGI_MANAGER():
    return Guid('065702da-1094-486d-86-17-ee-7c-c4-ee-46-48')
def _define_MF_MEDIA_ENGINE_EXTENSION():
    return Guid('3109fd46-060d-4b62-8d-cf-fa-ff-81-13-18-d2')
def _define_MF_MEDIA_ENGINE_PLAYBACK_HWND():
    return Guid('d988879b-67c9-4d92-ba-a7-6e-ad-d4-46-03-9d')
def _define_MF_MEDIA_ENGINE_OPM_HWND():
    return Guid('a0be8ee7-0572-4f2c-a8-01-2a-15-1b-d3-e7-26')
def _define_MF_MEDIA_ENGINE_PLAYBACK_VISUAL():
    return Guid('6debd26f-6ab9-4d7e-b0-ee-c6-1a-73-ff-ad-15')
def _define_MF_MEDIA_ENGINE_COREWINDOW():
    return Guid('fccae4dc-0b7f-41c2-9f-96-46-59-94-8a-cd-dc')
def _define_MF_MEDIA_ENGINE_VIDEO_OUTPUT_FORMAT():
    return Guid('5066893c-8cf9-42bc-8b-8a-47-22-12-e5-27-26')
def _define_MF_MEDIA_ENGINE_CONTENT_PROTECTION_FLAGS():
    return Guid('e0350223-5aaf-4d76-a7-c3-06-de-70-89-4d-b4')
def _define_MF_MEDIA_ENGINE_CONTENT_PROTECTION_MANAGER():
    return Guid('fdd6dfaa-bd85-4af3-9e-0f-a0-1d-53-9d-87-6a')
def _define_MF_MEDIA_ENGINE_AUDIO_ENDPOINT_ROLE():
    return Guid('d2cb93d1-116a-44f2-93-85-f7-d0-fd-a2-fb-46')
def _define_MF_MEDIA_ENGINE_AUDIO_CATEGORY():
    return Guid('c8d4c51d-350e-41f2-ba-46-fa-eb-bb-08-57-f6')
def _define_MF_MEDIA_ENGINE_STREAM_CONTAINS_ALPHA_CHANNEL():
    return Guid('5cbfaf44-d2b2-4cfb-80-a7-d4-29-c7-4c-78-9d')
def _define_MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE():
    return Guid('4e0212e2-e18f-41e1-95-e5-c0-e7-e9-23-5b-c3')
def _define_MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE9():
    return Guid('052c2d39-40c0-4188-ab-86-f8-28-27-3b-75-22')
def _define_MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE10():
    return Guid('11a47afd-6589-4124-b3-12-61-58-ec-51-7f-c3')
def _define_MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE11():
    return Guid('1cf1315f-ce3f-4035-93-91-16-14-2f-77-51-89')
def _define_MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE_EDGE():
    return Guid('a6f3e465-3aca-442c-a3-f0-ad-6d-da-d8-39-ae')
def _define_MF_MEDIA_ENGINE_COMPATIBILITY_MODE():
    return Guid('3ef26ad4-dc54-45de-b9-af-76-c8-c6-6b-fa-8e')
def _define_MF_MEDIA_ENGINE_COMPATIBILITY_MODE_WWA_EDGE():
    return Guid('15b29098-9f01-4e4d-b6-5a-c0-6c-6c-89-da-2a')
def _define_MF_MEDIA_ENGINE_COMPATIBILITY_MODE_WIN10():
    return Guid('5b25e089-6ca7-4139-a2-cb-fc-aa-b3-95-52-a3')
def _define_MF_MEDIA_ENGINE_SOURCE_RESOLVER_CONFIG_STORE():
    return Guid('0ac0c497-b3c4-48c9-9c-de-bb-8c-a2-44-2c-a3')
def _define_MF_MEDIA_ENGINE_TRACK_ID():
    return Guid('65bea312-4043-4815-8e-ab-44-dc-e2-ef-8f-2a')
def _define_MF_MEDIA_ENGINE_TELEMETRY_APPLICATION_ID():
    return Guid('1e7b273b-a7e4-402a-8f-51-c4-8e-88-a2-ca-bc')
def _define_MF_MEDIA_ENGINE_SYNCHRONOUS_CLOSE():
    return Guid('c3c2e12f-7e0e-4e43-b9-1c-dc-99-2c-cd-fa-5e')
def _define_MF_MEDIA_ENGINE_MEDIA_PLAYER_MODE():
    return Guid('3ddd8d45-5aa1-4112-82-e5-36-f6-a2-19-7e-6e')
def _define_CLSID_MFMediaEngineClassFactory():
    return Guid('b44392da-499b-446b-a4-cb-00-5f-ea-d0-e6-d5')
def _define_MF_MEDIA_ENGINE_TIMEDTEXT():
    return Guid('805ea411-92e0-4e59-9b-6e-5c-7d-79-15-e6-4f')
def _define_MF_MEDIA_ENGINE_CONTINUE_ON_CODEC_ERROR():
    return Guid('dbcdb7f9-48e4-4295-b7-0d-d5-18-23-4e-eb-38')
def _define_MF_MEDIA_ENGINE_EME_CALLBACK():
    return Guid('494553a7-a481-4cb7-be-c5-38-09-03-51-37-31')
def _define_CLSID_MPEG2DLNASink():
    return Guid('fa5fe7c5-6a1d-4b11-b4-1f-f9-59-d6-c7-65-00')
def _define_MF_MP2DLNA_USE_MMCSS():
    return Guid('54f3e2ee-a2a2-497d-98-34-97-3a-fd-e5-21-eb')
def _define_MF_MP2DLNA_VIDEO_BIT_RATE():
    return Guid('e88548de-73b4-42d7-9c-75-ad-fa-0a-2a-6e-4c')
def _define_MF_MP2DLNA_AUDIO_BIT_RATE():
    return Guid('2d1c070e-2b5f-4ab3-a7-e6-8d-94-3b-a8-d0-0a')
def _define_MF_MP2DLNA_ENCODE_QUALITY():
    return Guid('b52379d7-1d46-4fb6-a3-17-a4-a5-f6-09-59-f8')
def _define_MF_MP2DLNA_STATISTICS():
    return Guid('75e488a3-d5ad-4898-85-e0-bc-ce-24-a7-22-d7')
def _define_CLSID_MFReadWriteClassFactory():
    return Guid('48e2ed0f-98c2-4a37-be-d5-16-63-12-dd-d8-3f')
def _define_CLSID_MFSourceReader():
    return Guid('1777133c-0881-411b-a5-77-ad-54-5f-07-14-c4')
def _define_MF_SOURCE_READER_ASYNC_CALLBACK():
    return Guid('1e3dbeac-bb43-4c35-b5-07-cd-64-44-64-c9-65')
def _define_MF_SOURCE_READER_D3D_MANAGER():
    return Guid('ec822da2-e1e9-4b29-a0-d8-56-3c-71-9f-52-69')
def _define_MF_SOURCE_READER_DISABLE_DXVA():
    return Guid('aa456cfd-3943-4a1e-a7-7d-18-38-c0-ea-2e-35')
def _define_MF_SOURCE_READER_MEDIASOURCE_CONFIG():
    return Guid('9085abeb-0354-48f9-ab-b5-20-0d-f8-38-c6-8e')
def _define_MF_SOURCE_READER_MEDIASOURCE_CHARACTERISTICS():
    return Guid('6d23f5c8-c5d7-4a9b-99-71-5d-11-f8-bc-a8-80')
def _define_MF_SOURCE_READER_ENABLE_VIDEO_PROCESSING():
    return Guid('fb394f3d-ccf1-42ee-bb-b3-f9-b8-45-d5-68-1d')
def _define_MF_SOURCE_READER_ENABLE_ADVANCED_VIDEO_PROCESSING():
    return Guid('0f81da2c-b537-4672-a8-b2-a6-81-b1-73-07-a3')
def _define_MF_SOURCE_READER_DISABLE_CAMERA_PLUGINS():
    return Guid('9d3365dd-058f-4cfb-9f-97-b3-14-cc-99-c8-ad')
def _define_MF_SOURCE_READER_DISCONNECT_MEDIASOURCE_ON_SHUTDOWN():
    return Guid('56b67165-219e-456d-a2-2e-2d-30-04-c7-fe-56')
def _define_MF_SOURCE_READER_ENABLE_TRANSCODE_ONLY_TRANSFORMS():
    return Guid('dfd4f008-b5fd-4e78-ae-44-62-a1-e6-7b-be-27')
def _define_MF_SOURCE_READER_D3D11_BIND_FLAGS():
    return Guid('33f3197b-f73a-4e14-8d-85-0e-4c-43-68-78-8d')
def _define_CLSID_MFSinkWriter():
    return Guid('a3bbfb17-8273-4e52-9e-0e-97-39-dc-88-79-90')
def _define_MF_SINK_WRITER_ASYNC_CALLBACK():
    return Guid('48cb183e-7b0b-46f4-82-2e-5e-1d-2d-da-43-54')
def _define_MF_SINK_WRITER_DISABLE_THROTTLING():
    return Guid('08b845d8-2b74-4afe-9d-53-be-16-d2-d5-ae-4f')
def _define_MF_SINK_WRITER_D3D_MANAGER():
    return Guid('ec822da2-e1e9-4b29-a0-d8-56-3c-71-9f-52-69')
def _define_MF_SINK_WRITER_ENCODER_CONFIG():
    return Guid('ad91cd04-a7cc-4ac7-99-b6-a5-7b-9a-4a-7c-70')
def _define_MF_READWRITE_DISABLE_CONVERTERS():
    return Guid('98d5b065-1374-4847-8d-5d-31-52-0f-ee-71-56')
def _define_MF_READWRITE_ENABLE_HARDWARE_TRANSFORMS():
    return Guid('a634a91c-822b-41b9-a4-94-4d-e4-64-36-12-b0')
def _define_MF_READWRITE_MMCSS_CLASS():
    return Guid('39384300-d0eb-40b1-87-a0-33-18-87-1b-5a-53')
def _define_MF_READWRITE_MMCSS_PRIORITY():
    return Guid('43ad19ce-f33f-4ba9-a5-80-e4-cd-12-f2-d1-44')
def _define_MF_READWRITE_MMCSS_CLASS_AUDIO():
    return Guid('430847da-0890-4b0e-93-8c-05-43-32-c5-47-e1')
def _define_MF_READWRITE_MMCSS_PRIORITY_AUDIO():
    return Guid('273db885-2de2-4db2-a6-a7-fd-b6-6f-b4-0b-61')
def _define_MF_READWRITE_D3D_OPTIONAL():
    return Guid('216479d9-3071-42ca-bb-6c-4c-22-10-2e-1d-18')
def _define_MF_MEDIASINK_AUTOFINALIZE_SUPPORTED():
    return Guid('48c131be-135a-41cb-82-90-03-65-25-09-c9-99')
def _define_MF_MEDIASINK_ENABLE_AUTOFINALIZE():
    return Guid('34014265-cb7e-4cde-ac-7c-ef-fd-3b-3c-25-30')
def _define_MF_READWRITE_ENABLE_AUTOFINALIZE():
    return Guid('dd7ca129-8cd1-4dc5-9d-de-ce-16-86-75-de-61')
def _define_MFP_POSITIONTYPE_100NS():
    return Guid('00000000-0000-0000-00-00-00-00-00-00-00-00')
def _define_MF_MEDIA_SHARING_ENGINE_DEVICE_NAME():
    return Guid('771e05d1-862f-4299-95-ac-ae-81-fd-14-f3-e7')
def _define_MF_MEDIA_SHARING_ENGINE_DEVICE():
    return Guid('b461c58a-7a08-4b98-99-a8-70-fd-5f-3b-ad-fd')
def _define_CLSID_MFMediaSharingEngineClassFactory():
    return Guid('f8e307fb-6d45-4ad3-99-93-66-cd-5a-52-96-59')
def _define_CLSID_MFImageSharingEngineClassFactory():
    return Guid('b22c3339-87f3-4059-a0-c5-03-7a-a9-70-7e-af')
def _define_CLSID_PlayToSourceClassFactory():
    return Guid('da17539a-3dc3-42c1-a7-49-a1-83-b5-1f-08-5e')
def _define_GUID_PlayToService():
    return Guid('f6a8ff9d-9e14-41c9-bf-0f-12-0a-2b-3c-e1-20')
def _define_GUID_NativeDeviceService():
    return Guid('ef71e53c-52f4-43c5-b8-6a-ad-6c-b2-16-a6-1e')
def _define_MF_CONTENTDECRYPTIONMODULE_SERVICE():
    return Guid('15320c45-ff80-484a-9d-cb-0d-f8-94-e6-9a-01')
def _define_MF_VIRTUALCAMERA_CONFIGURATION_APP_PACKAGE_FAMILY_NAME():
    return Guid('658abe51-8044-462e-97-ea-e6-76-fd-72-05-5f')
def _define_MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_INITIALIZE():
    return Guid('e52c4dff-e46d-4d0b-bc-75-dd-d4-c8-72-3f-96')
def _define_MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_START():
    return Guid('b1eeb989-b456-4f4a-ae-40-07-9c-28-e2-4a-f8')
def _define_MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_STOP():
    return Guid('b7fe7a61-fe91-415e-86-08-d3-7d-ed-b1-a5-8b')
def _define_MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_UNINITIALIZE():
    return Guid('a0ebaba7-a422-4e33-84-01-b3-7d-28-00-aa-67')
def _define_MF_FRAMESERVER_VCAMEVENT_EXTENDED_PIPELINE_SHUTDOWN():
    return Guid('45a81b31-43f8-4e5d-8c-e2-22-dc-e0-26-99-6d')
def _define_MF_FRAMESERVER_VCAMEVENT_EXTENDED_CUSTOM_EVENT():
    return Guid('6e59489c-47d3-4467-83-ef-12-d3-4e-87-16-65')
def _define_DXVAHD_CreateDevice():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.IDirect3DDevice9Ex_head,POINTER(win32more.Media.MediaFoundation.DXVAHD_CONTENT_DESC_head),win32more.Media.MediaFoundation.DXVAHD_DEVICE_USAGE,win32more.Media.MediaFoundation.PDXVAHDSW_Plugin,POINTER(win32more.Media.MediaFoundation.IDXVAHD_Device_head))(('DXVAHD_CreateDevice', windll['dxva2.dll']), ((1, 'pD3DDevice'),(1, 'pContentDesc'),(1, 'Usage'),(1, 'pPlugin'),(1, 'ppDevice'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DXVA2CreateDirect3DDeviceManager9():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(win32more.Media.MediaFoundation.IDirect3DDeviceManager9_head))(('DXVA2CreateDirect3DDeviceManager9', windll['dxva2.dll']), ((1, 'pResetToken'),(1, 'ppDeviceManager'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DXVA2CreateVideoService():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.IDirect3DDevice9_head,POINTER(Guid),POINTER(c_void_p))(('DXVA2CreateVideoService', windll['dxva2.dll']), ((1, 'pDD'),(1, 'riid'),(1, 'ppService'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_OPMGetVideoOutputsFromHMONITOR():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Gdi.HMONITOR,win32more.Media.MediaFoundation.OPM_VIDEO_OUTPUT_SEMANTICS,POINTER(UInt32),POINTER(POINTER(win32more.Media.MediaFoundation.IOPMVideoOutput_head)))(('OPMGetVideoOutputsFromHMONITOR', windll['dxva2.dll']), ((1, 'hMonitor'),(1, 'vos'),(1, 'pulNumVideoOutputs'),(1, 'pppOPMVideoOutputArray'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_OPMGetVideoOutputForTarget():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.LUID_head),UInt32,win32more.Media.MediaFoundation.OPM_VIDEO_OUTPUT_SEMANTICS,POINTER(win32more.Media.MediaFoundation.IOPMVideoOutput_head))(('OPMGetVideoOutputForTarget', windll['dxva2.dll']), ((1, 'pAdapterLuid'),(1, 'VidPnTarget'),(1, 'vos'),(1, 'ppOPMVideoOutput'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_OPMGetVideoOutputsFromIDirect3DDevice9Object():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.IDirect3DDevice9_head,win32more.Media.MediaFoundation.OPM_VIDEO_OUTPUT_SEMANTICS,POINTER(UInt32),POINTER(POINTER(win32more.Media.MediaFoundation.IOPMVideoOutput_head)))(('OPMGetVideoOutputsFromIDirect3DDevice9Object', windll['dxva2.dll']), ((1, 'pDirect3DDevice9'),(1, 'vos'),(1, 'pulNumVideoOutputs'),(1, 'pppOPMVideoOutputArray'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFSerializeAttributesToStream():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head,UInt32,win32more.System.Com.IStream_head)(('MFSerializeAttributesToStream', windll['MFPlat.dll']), ((1, 'pAttr'),(1, 'dwOptions'),(1, 'pStm'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFDeserializeAttributesFromStream():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head,UInt32,win32more.System.Com.IStream_head)(('MFDeserializeAttributesFromStream', windll['MFPlat.dll']), ((1, 'pAttr'),(1, 'dwOptions'),(1, 'pStm'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateTransformActivate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFActivate_head))(('MFCreateTransformActivate', windll['MFPlat.dll']), ((1, 'ppActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMediaSession():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSession_head))(('MFCreateMediaSession', windll['MF.dll']), ((1, 'pConfiguration'),(1, 'ppMediaSession'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreatePMPMediaSession():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSession_head),POINTER(win32more.Media.MediaFoundation.IMFActivate_head))(('MFCreatePMPMediaSession', windll['MF.dll']), ((1, 'dwCreationFlags'),(1, 'pConfiguration'),(1, 'ppMediaSession'),(1, 'ppEnablerActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSourceResolver():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFSourceResolver_head))(('MFCreateSourceResolver', windll['MFPlat.dll']), ((1, 'ppISourceResolver'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CreatePropertyStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.UI.Shell.PropertiesSystem.IPropertyStore_head))(('CreatePropertyStore', windll['MFPlat.dll']), ((1, 'ppStore'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetSupportedSchemes():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(('MFGetSupportedSchemes', windll['MFPlat.dll']), ((1, 'pPropVarSchemeArray'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetSupportedMimeTypes():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(('MFGetSupportedMimeTypes', windll['MFPlat.dll']), ((1, 'pPropVarMimeTypeArray'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateTopology():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTopology_head))(('MFCreateTopology', windll['MF.dll']), ((1, 'ppTopo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateTopologyNode():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_TOPOLOGY_TYPE,POINTER(win32more.Media.MediaFoundation.IMFTopologyNode_head))(('MFCreateTopologyNode', windll['MF.dll']), ((1, 'NodeType'),(1, 'ppNode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetTopoNodeCurrentType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTopologyNode_head,UInt32,win32more.Foundation.BOOL,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(('MFGetTopoNodeCurrentType', windll['MF.dll']), ((1, 'pNode'),(1, 'dwStreamIndex'),(1, 'fOutput'),(1, 'ppType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetService():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,POINTER(Guid),POINTER(Guid),POINTER(c_void_p))(('MFGetService', windll['MF.dll']), ((1, 'punkObject'),(1, 'guidService'),(1, 'riid'),(1, 'ppvObject'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetSystemTime():
    try:
        return WINFUNCTYPE(Int64,)(('MFGetSystemTime', windll['MFPlat.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreatePresentationClock():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFPresentationClock_head))(('MFCreatePresentationClock', windll['MF.dll']), ((1, 'ppPresentationClock'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSystemTimeSource():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFPresentationTimeSource_head))(('MFCreateSystemTimeSource', windll['MFPlat.dll']), ((1, 'ppSystemTimeSource'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreatePresentationDescriptor():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFStreamDescriptor_head),POINTER(win32more.Media.MediaFoundation.IMFPresentationDescriptor_head))(('MFCreatePresentationDescriptor', windll['MFPlat.dll']), ((1, 'cStreamDescriptors'),(1, 'apStreamDescriptors'),(1, 'ppPresentationDescriptor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFRequireProtectedEnvironment():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationDescriptor_head)(('MFRequireProtectedEnvironment', windll['MF.dll']), ((1, 'pPresentationDescriptor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFSerializePresentationDescriptor():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationDescriptor_head,POINTER(UInt32),POINTER(c_char_p_no))(('MFSerializePresentationDescriptor', windll['MFPlat.dll']), ((1, 'pPD'),(1, 'pcbData'),(1, 'ppbData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFDeserializePresentationDescriptor():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_char_p_no,POINTER(win32more.Media.MediaFoundation.IMFPresentationDescriptor_head))(('MFDeserializePresentationDescriptor', windll['MFPlat.dll']), ((1, 'cbData'),(1, 'pbData'),(1, 'ppPD'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateStreamDescriptor():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head),POINTER(win32more.Media.MediaFoundation.IMFStreamDescriptor_head))(('MFCreateStreamDescriptor', windll['MFPlat.dll']), ((1, 'dwStreamIdentifier'),(1, 'cMediaTypes'),(1, 'apMediaTypes'),(1, 'ppDescriptor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSimpleTypeHandler():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaTypeHandler_head))(('MFCreateSimpleTypeHandler', windll['MF.dll']), ((1, 'ppHandler'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFShutdownObject():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head)(('MFShutdownObject', windll['MF.dll']), ((1, 'pUnk'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateAudioRenderer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head))(('MFCreateAudioRenderer', windll['MF.dll']), ((1, 'pAudioAttributes'),(1, 'ppSink'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateAudioRendererActivate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFActivate_head))(('MFCreateAudioRendererActivate', windll['MF.dll']), ((1, 'ppActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVideoRendererActivate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HWND,POINTER(win32more.Media.MediaFoundation.IMFActivate_head))(('MFCreateVideoRendererActivate', windll['MF.dll']), ((1, 'hwndVideo'),(1, 'ppActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMPEG4MediaSink():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head))(('MFCreateMPEG4MediaSink', windll['MF.dll']), ((1, 'pIByteStream'),(1, 'pVideoMediaType'),(1, 'pAudioMediaType'),(1, 'ppIMediaSink'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreate3GPMediaSink():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head))(('MFCreate3GPMediaSink', windll['MF.dll']), ((1, 'pIByteStream'),(1, 'pVideoMediaType'),(1, 'pAudioMediaType'),(1, 'ppIMediaSink'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMP3MediaSink():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head))(('MFCreateMP3MediaSink', windll['MF.dll']), ((1, 'pTargetByteStream'),(1, 'ppMediaSink'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateAC3MediaSink():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head))(('MFCreateAC3MediaSink', windll['MF.dll']), ((1, 'pTargetByteStream'),(1, 'pAudioMediaType'),(1, 'ppMediaSink'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateADTSMediaSink():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head))(('MFCreateADTSMediaSink', windll['MF.dll']), ((1, 'pTargetByteStream'),(1, 'pAudioMediaType'),(1, 'ppMediaSink'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMuxSink():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,win32more.Media.MediaFoundation.IMFAttributes_head,win32more.Media.MediaFoundation.IMFByteStream_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head))(('MFCreateMuxSink', windll['MF.dll']), ((1, 'guidOutputSubType'),(1, 'pOutputAttributes'),(1, 'pOutputByteStream'),(1, 'ppMuxSink'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateFMPEG4MediaSink():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head))(('MFCreateFMPEG4MediaSink', windll['MF.dll']), ((1, 'pIByteStream'),(1, 'pVideoMediaType'),(1, 'pAudioMediaType'),(1, 'ppIMediaSink'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateAVIMediaSink():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head))(('MFCreateAVIMediaSink', windll['mfsrcsnk.dll']), ((1, 'pIByteStream'),(1, 'pVideoMediaType'),(1, 'pAudioMediaType'),(1, 'ppIMediaSink'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateWAVEMediaSink():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head))(('MFCreateWAVEMediaSink', windll['mfsrcsnk.dll']), ((1, 'pTargetByteStream'),(1, 'pAudioMediaType'),(1, 'ppMediaSink'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateTopoLoader():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTopoLoader_head))(('MFCreateTopoLoader', windll['MF.dll']), ((1, 'ppObj'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSampleGrabberSinkActivate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.Media.MediaFoundation.IMFSampleGrabberSinkCallback_head,POINTER(win32more.Media.MediaFoundation.IMFActivate_head))(('MFCreateSampleGrabberSinkActivate', windll['MF.dll']), ((1, 'pIMFMediaType'),(1, 'pIMFSampleGrabberSinkCallback'),(1, 'ppIActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateStandardQualityManager():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFQualityManager_head))(('MFCreateStandardQualityManager', windll['MF.dll']), ((1, 'ppQualityManager'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSequencerSource():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,POINTER(win32more.Media.MediaFoundation.IMFSequencerSource_head))(('MFCreateSequencerSource', windll['MF.dll']), ((1, 'pReserved'),(1, 'ppSequencerSource'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSequencerSegmentOffset():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,Int64,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(('MFCreateSequencerSegmentOffset', windll['MF.dll']), ((1, 'dwId'),(1, 'hnsOffset'),(1, 'pvarSegmentOffset'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateAggregateSource():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFCollection_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSource_head))(('MFCreateAggregateSource', windll['MF.dll']), ((1, 'pSourceCollection'),(1, 'ppAggSource'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateCredentialCache():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFNetCredentialCache_head))(('MFCreateCredentialCache', windll['MF.dll']), ((1, 'ppCache'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateProxyLocator():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.UI.Shell.PropertiesSystem.IPropertyStore_head,POINTER(win32more.Media.MediaFoundation.IMFNetProxyLocator_head))(('MFCreateProxyLocator', windll['MF.dll']), ((1, 'pszProtocol'),(1, 'pProxyConfig'),(1, 'ppProxyLocator'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateNetSchemePlugin():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p))(('MFCreateNetSchemePlugin', windll['MF.dll']), ((1, 'riid'),(1, 'ppvHandler'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreatePMPServer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFPMPServer_head))(('MFCreatePMPServer', windll['MF.dll']), ((1, 'dwCreationFlags'),(1, 'ppPMPServer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateRemoteDesktopPlugin():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFRemoteDesktopPlugin_head))(('MFCreateRemoteDesktopPlugin', windll['MF.dll']), ((1, 'ppPlugin'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CreateNamedPropertyStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.UI.Shell.PropertiesSystem.INamedPropertyStore_head))(('CreateNamedPropertyStore', windll['MF.dll']), ((1, 'ppStore'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSampleCopierMFT():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTransform_head))(('MFCreateSampleCopierMFT', windll['MF.dll']), ((1, 'ppCopierMFT'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateTranscodeProfile():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTranscodeProfile_head))(('MFCreateTranscodeProfile', windll['MF.dll']), ((1, 'ppTranscodeProfile'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateTranscodeTopology():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaSource_head,win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.IMFTranscodeProfile_head,POINTER(win32more.Media.MediaFoundation.IMFTopology_head))(('MFCreateTranscodeTopology', windll['MF.dll']), ((1, 'pSrc'),(1, 'pwszOutputFilePath'),(1, 'pProfile'),(1, 'ppTranscodeTopo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateTranscodeTopologyFromByteStream():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaSource_head,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFTranscodeProfile_head,POINTER(win32more.Media.MediaFoundation.IMFTopology_head))(('MFCreateTranscodeTopologyFromByteStream', windll['MF.dll']), ((1, 'pSrc'),(1, 'pOutputStream'),(1, 'pProfile'),(1, 'ppTranscodeTopo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFTranscodeGetAudioOutputAvailableTypes():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),UInt32,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFCollection_head))(('MFTranscodeGetAudioOutputAvailableTypes', windll['MF.dll']), ((1, 'guidSubType'),(1, 'dwMFTFlags'),(1, 'pCodecConfig'),(1, 'ppAvailableTypes'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateTranscodeSinkActivate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFActivate_head))(('MFCreateTranscodeSinkActivate', windll['MF.dll']), ((1, 'ppActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateTrackedSample():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTrackedSample_head))(('MFCreateTrackedSample', windll['MFPlat.dll']), ((1, 'ppMFSample'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMFByteStreamOnStream():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IStream_head,POINTER(win32more.Media.MediaFoundation.IMFByteStream_head))(('MFCreateMFByteStreamOnStream', windll['MFPlat.dll']), ((1, 'pStream'),(1, 'ppByteStream'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateStreamOnMFByteStream():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,POINTER(win32more.System.Com.IStream_head))(('MFCreateStreamOnMFByteStream', windll['MFPlat.dll']), ((1, 'pByteStream'),(1, 'ppStream'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMFByteStreamOnStreamEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,POINTER(win32more.Media.MediaFoundation.IMFByteStream_head))(('MFCreateMFByteStreamOnStreamEx', windll['MFPlat.dll']), ((1, 'punkStream'),(1, 'ppByteStream'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateStreamOnMFByteStreamEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,POINTER(Guid),POINTER(c_void_p))(('MFCreateStreamOnMFByteStreamEx', windll['MFPlat.dll']), ((1, 'pByteStream'),(1, 'riid'),(1, 'ppv'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMediaTypeFromProperties():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(('MFCreateMediaTypeFromProperties', windll['MFPlat.dll']), ((1, 'punkStream'),(1, 'ppMediaType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreatePropertiesFromMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(Guid),POINTER(c_void_p))(('MFCreatePropertiesFromMediaType', windll['MFPlat.dll']), ((1, 'pMediaType'),(1, 'riid'),(1, 'ppv'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFEnumDeviceSources():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(POINTER(win32more.Media.MediaFoundation.IMFActivate_head)),POINTER(UInt32))(('MFEnumDeviceSources', windll['MF.dll']), ((1, 'pAttributes'),(1, 'pppSourceActivate'),(1, 'pcSourceActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateDeviceSource():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSource_head))(('MFCreateDeviceSource', windll['MF.dll']), ((1, 'pAttributes'),(1, 'ppSource'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateDeviceSourceActivate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFActivate_head))(('MFCreateDeviceSourceActivate', windll['MF.dll']), ((1, 'pAttributes'),(1, 'ppActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateProtectedEnvironmentAccess():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFProtectedEnvironmentAccess_head))(('MFCreateProtectedEnvironmentAccess', windll['MF.dll']), ((1, 'ppAccess'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFLoadSignedLibrary():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.IMFSignedLibrary_head))(('MFLoadSignedLibrary', windll['MF.dll']), ((1, 'pszName'),(1, 'ppLib'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetSystemId():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFSystemId_head))(('MFGetSystemId', windll['MF.dll']), ((1, 'ppId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetLocalId():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32,POINTER(win32more.Foundation.PWSTR))(('MFGetLocalId', windll['MF.dll']), ((1, 'verifier'),(1, 'size'),(1, 'id'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateContentProtectionDevice():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.IMFContentProtectionDevice_head))(('MFCreateContentProtectionDevice', windll['MFPlat.dll']), ((1, 'ProtectionSystemId'),(1, 'ContentProtectionDevice'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFIsContentProtectionDeviceSupported():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Foundation.BOOL))(('MFIsContentProtectionDeviceSupported', windll['MFPlat.dll']), ((1, 'ProtectionSystemId'),(1, 'isSupported'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateContentDecryptorContext():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),win32more.Media.MediaFoundation.IMFDXGIDeviceManager_head,win32more.Media.MediaFoundation.IMFContentProtectionDevice_head,POINTER(win32more.Media.MediaFoundation.IMFContentDecryptorContext_head))(('MFCreateContentDecryptorContext', windll['MFPlat.dll']), ((1, 'guidMediaProtectionSystemId'),(1, 'pD3DManager'),(1, 'pContentProtectionDevice'),(1, 'ppContentDecryptorContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSensorGroup():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.IMFSensorGroup_head))(('MFCreateSensorGroup', windll['MFSENSORGROUP.dll']), ((1, 'SensorGroupSymbolicLink'),(1, 'ppSensorGroup'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSensorStream():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFAttributes_head,win32more.Media.MediaFoundation.IMFCollection_head,POINTER(win32more.Media.MediaFoundation.IMFSensorStream_head))(('MFCreateSensorStream', windll['MFSENSORGROUP.dll']), ((1, 'StreamId'),(1, 'pAttributes'),(1, 'pMediaTypeCollection'),(1, 'ppStream'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSensorProfile():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),UInt32,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.IMFSensorProfile_head))(('MFCreateSensorProfile', windll['MFSENSORGROUP.dll']), ((1, 'ProfileType'),(1, 'ProfileIndex'),(1, 'Constraints'),(1, 'ppProfile'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSensorProfileCollection():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFSensorProfileCollection_head))(('MFCreateSensorProfileCollection', windll['MFSENSORGROUP.dll']), ((1, 'ppSensorProfile'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSensorActivityMonitor():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSensorActivitiesReportCallback_head,POINTER(win32more.Media.MediaFoundation.IMFSensorActivityMonitor_head))(('MFCreateSensorActivityMonitor', windll['MFSENSORGROUP.dll']), ((1, 'pCallback'),(1, 'ppActivityMonitor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateExtendedCameraIntrinsics():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFExtendedCameraIntrinsics_head))(('MFCreateExtendedCameraIntrinsics', windll['MFCORE.dll']), ((1, 'ppExtendedCameraIntrinsics'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateExtendedCameraIntrinsicModel():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFCameraIntrinsic_DistortionModelType,POINTER(win32more.Media.MediaFoundation.IMFExtendedCameraIntrinsicModel_head))(('MFCreateExtendedCameraIntrinsicModel', windll['MFCORE.dll']), ((1, 'distortionModelType'),(1, 'ppExtendedCameraIntrinsicModel'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateRelativePanelWatcher():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.IMFRelativePanelWatcher_head))(('MFCreateRelativePanelWatcher', windll['MFSENSORGROUP.dll']), ((1, 'videoDeviceId'),(1, 'displayMonitorDeviceId'),(1, 'ppRelativePanelWatcher'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateCameraOcclusionStateMonitor():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.IMFCameraOcclusionStateReportCallback_head,POINTER(win32more.Media.MediaFoundation.IMFCameraOcclusionStateMonitor_head))(('MFCreateCameraOcclusionStateMonitor', windll['MFSENSORGROUP.dll']), ((1, 'symbolicLink'),(1, 'callback'),(1, 'occlusionStateMonitor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateASFContentInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFContentInfo_head))(('MFCreateASFContentInfo', windll['MF.dll']), ((1, 'ppIContentInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateASFIndexer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFIndexer_head))(('MFCreateASFIndexer', windll['MF.dll']), ((1, 'ppIIndexer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateASFIndexerByteStream():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,UInt64,POINTER(win32more.Media.MediaFoundation.IMFByteStream_head))(('MFCreateASFIndexerByteStream', windll['MF.dll']), ((1, 'pIContentByteStream'),(1, 'cbIndexStartOffset'),(1, 'pIIndexByteStream'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateASFSplitter():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFSplitter_head))(('MFCreateASFSplitter', windll['MF.dll']), ((1, 'ppISplitter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateASFProfile():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFProfile_head))(('MFCreateASFProfile', windll['MF.dll']), ((1, 'ppIProfile'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateASFProfileFromPresentationDescriptor():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationDescriptor_head,POINTER(win32more.Media.MediaFoundation.IMFASFProfile_head))(('MFCreateASFProfileFromPresentationDescriptor', windll['MF.dll']), ((1, 'pIPD'),(1, 'ppIProfile'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreatePresentationDescriptorFromASFProfile():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFASFProfile_head,POINTER(win32more.Media.MediaFoundation.IMFPresentationDescriptor_head))(('MFCreatePresentationDescriptorFromASFProfile', windll['MF.dll']), ((1, 'pIProfile'),(1, 'ppIPD'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateASFMultiplexer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFMultiplexer_head))(('MFCreateASFMultiplexer', windll['MF.dll']), ((1, 'ppIMultiplexer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateASFStreamSelector():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFASFProfile_head,POINTER(win32more.Media.MediaFoundation.IMFASFStreamSelector_head))(('MFCreateASFStreamSelector', windll['MF.dll']), ((1, 'pIASFProfile'),(1, 'ppSelector'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateASFMediaSink():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head))(('MFCreateASFMediaSink', windll['MF.dll']), ((1, 'pIByteStream'),(1, 'ppIMediaSink'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateASFMediaSinkActivate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.IMFASFContentInfo_head,POINTER(win32more.Media.MediaFoundation.IMFActivate_head))(('MFCreateASFMediaSinkActivate', windll['MF.dll']), ((1, 'pwszFileName'),(1, 'pContentInfo'),(1, 'ppIActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateWMVEncoderActivate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.UI.Shell.PropertiesSystem.IPropertyStore_head,POINTER(win32more.Media.MediaFoundation.IMFActivate_head))(('MFCreateWMVEncoderActivate', windll['MF.dll']), ((1, 'pMediaType'),(1, 'pEncodingConfigurationProperties'),(1, 'ppActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateWMAEncoderActivate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.UI.Shell.PropertiesSystem.IPropertyStore_head,POINTER(win32more.Media.MediaFoundation.IMFActivate_head))(('MFCreateWMAEncoderActivate', windll['MF.dll']), ((1, 'pMediaType'),(1, 'pEncodingConfigurationProperties'),(1, 'ppActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateASFStreamingMediaSink():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head))(('MFCreateASFStreamingMediaSink', windll['MF.dll']), ((1, 'pIByteStream'),(1, 'ppIMediaSink'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateASFStreamingMediaSinkActivate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFActivate_head,win32more.Media.MediaFoundation.IMFASFContentInfo_head,POINTER(win32more.Media.MediaFoundation.IMFActivate_head))(('MFCreateASFStreamingMediaSinkActivate', windll['MF.dll']), ((1, 'pByteStreamActivate'),(1, 'pContentInfo'),(1, 'ppIActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateD3D12SynchronizationObject():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D12.ID3D12Device_head,POINTER(Guid),POINTER(c_void_p))(('MFCreateD3D12SynchronizationObject', windll['MFPlat.dll']), ((1, 'pDevice'),(1, 'riid'),(1, 'ppvSyncObject'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFStartup():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32)(('MFStartup', windll['MFPlat.dll']), ((1, 'Version'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFShutdown():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,)(('MFShutdown', windll['MFPlat.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFLockPlatform():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,)(('MFLockPlatform', windll['MFPlat.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFUnlockPlatform():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,)(('MFUnlockPlatform', windll['MFPlat.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFPutWorkItem():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(('MFPutWorkItem', windll['MFPlat.dll']), ((1, 'dwQueue'),(1, 'pCallback'),(1, 'pState'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFPutWorkItem2():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,Int32,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(('MFPutWorkItem2', windll['MFPlat.dll']), ((1, 'dwQueue'),(1, 'Priority'),(1, 'pCallback'),(1, 'pState'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFPutWorkItemEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFAsyncResult_head)(('MFPutWorkItemEx', windll['MFPlat.dll']), ((1, 'dwQueue'),(1, 'pResult'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFPutWorkItemEx2():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,Int32,win32more.Media.MediaFoundation.IMFAsyncResult_head)(('MFPutWorkItemEx2', windll['MFPlat.dll']), ((1, 'dwQueue'),(1, 'Priority'),(1, 'pResult'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFPutWaitingWorkItem():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,Int32,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(UInt64))(('MFPutWaitingWorkItem', windll['MFPlat.dll']), ((1, 'hEvent'),(1, 'Priority'),(1, 'pResult'),(1, 'pKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFAllocateSerialWorkQueue():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32))(('MFAllocateSerialWorkQueue', windll['MFPlat.dll']), ((1, 'dwWorkQueue'),(1, 'pdwWorkQueue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFScheduleWorkItemEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,Int64,POINTER(UInt64))(('MFScheduleWorkItemEx', windll['MFPlat.dll']), ((1, 'pResult'),(1, 'Timeout'),(1, 'pKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFScheduleWorkItem():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head,Int64,POINTER(UInt64))(('MFScheduleWorkItem', windll['MFPlat.dll']), ((1, 'pCallback'),(1, 'pState'),(1, 'Timeout'),(1, 'pKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCancelWorkItem():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64)(('MFCancelWorkItem', windll['MFPlat.dll']), ((1, 'Key'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetTimerPeriodicity():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(('MFGetTimerPeriodicity', windll['MFPlat.dll']), ((1, 'Periodicity'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFAddPeriodicCallback():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFPERIODICCALLBACK,win32more.System.Com.IUnknown_head,POINTER(UInt32))(('MFAddPeriodicCallback', windll['MFPlat.dll']), ((1, 'Callback'),(1, 'pContext'),(1, 'pdwKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFRemovePeriodicCallback():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(('MFRemovePeriodicCallback', windll['MFPlat.dll']), ((1, 'dwKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFAllocateWorkQueueEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFASYNC_WORKQUEUE_TYPE,POINTER(UInt32))(('MFAllocateWorkQueueEx', windll['MFPlat.dll']), ((1, 'WorkQueueType'),(1, 'pdwWorkQueue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFAllocateWorkQueue():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(('MFAllocateWorkQueue', windll['MFPlat.dll']), ((1, 'pdwWorkQueue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFLockWorkQueue():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(('MFLockWorkQueue', windll['MFPlat.dll']), ((1, 'dwWorkQueue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFUnlockWorkQueue():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(('MFUnlockWorkQueue', windll['MFPlat.dll']), ((1, 'dwWorkQueue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFBeginRegisterWorkQueueWithMMCSS():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.PWSTR,UInt32,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(('MFBeginRegisterWorkQueueWithMMCSS', windll['MFPlat.dll']), ((1, 'dwWorkQueueId'),(1, 'wszClass'),(1, 'dwTaskId'),(1, 'pDoneCallback'),(1, 'pDoneState'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFBeginRegisterWorkQueueWithMMCSSEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.PWSTR,UInt32,Int32,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(('MFBeginRegisterWorkQueueWithMMCSSEx', windll['MFPlat.dll']), ((1, 'dwWorkQueueId'),(1, 'wszClass'),(1, 'dwTaskId'),(1, 'lPriority'),(1, 'pDoneCallback'),(1, 'pDoneState'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFEndRegisterWorkQueueWithMMCSS():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(UInt32))(('MFEndRegisterWorkQueueWithMMCSS', windll['MFPlat.dll']), ((1, 'pResult'),(1, 'pdwTaskId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFBeginUnregisterWorkQueueWithMMCSS():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(('MFBeginUnregisterWorkQueueWithMMCSS', windll['MFPlat.dll']), ((1, 'dwWorkQueueId'),(1, 'pDoneCallback'),(1, 'pDoneState'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFEndUnregisterWorkQueueWithMMCSS():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head)(('MFEndUnregisterWorkQueueWithMMCSS', windll['MFPlat.dll']), ((1, 'pResult'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetWorkQueueMMCSSClass():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.PWSTR,POINTER(UInt32))(('MFGetWorkQueueMMCSSClass', windll['MFPlat.dll']), ((1, 'dwWorkQueueId'),(1, 'pwszClass'),(1, 'pcchClass'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetWorkQueueMMCSSTaskId():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32))(('MFGetWorkQueueMMCSSTaskId', windll['MFPlat.dll']), ((1, 'dwWorkQueueId'),(1, 'pdwTaskId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFRegisterPlatformWithMMCSS():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(UInt32),Int32)(('MFRegisterPlatformWithMMCSS', windll['MFPlat.dll']), ((1, 'wszClass'),(1, 'pdwTaskId'),(1, 'lPriority'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFUnregisterPlatformFromMMCSS():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,)(('MFUnregisterPlatformFromMMCSS', windll['MFPlat.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFLockSharedWorkQueue():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,Int32,POINTER(UInt32),POINTER(UInt32))(('MFLockSharedWorkQueue', windll['MFPlat.dll']), ((1, 'wszClass'),(1, 'BasePriority'),(1, 'pdwTaskId'),(1, 'pID'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetWorkQueueMMCSSPriority():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Int32))(('MFGetWorkQueueMMCSSPriority', windll['MFPlat.dll']), ((1, 'dwWorkQueueId'),(1, 'lPriority'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateAsyncResult():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head,POINTER(win32more.Media.MediaFoundation.IMFAsyncResult_head))(('MFCreateAsyncResult', windll['MFPlat.dll']), ((1, 'punkObject'),(1, 'pCallback'),(1, 'punkState'),(1, 'ppAsyncResult'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFInvokeCallback():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head)(('MFInvokeCallback', windll['MFPlat.dll']), ((1, 'pAsyncResult'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateFile():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_FILE_ACCESSMODE,win32more.Media.MediaFoundation.MF_FILE_OPENMODE,win32more.Media.MediaFoundation.MF_FILE_FLAGS,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.IMFByteStream_head))(('MFCreateFile', windll['MFPlat.dll']), ((1, 'AccessMode'),(1, 'OpenMode'),(1, 'fFlags'),(1, 'pwszFileURL'),(1, 'ppIByteStream'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateTempFile():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_FILE_ACCESSMODE,win32more.Media.MediaFoundation.MF_FILE_OPENMODE,win32more.Media.MediaFoundation.MF_FILE_FLAGS,POINTER(win32more.Media.MediaFoundation.IMFByteStream_head))(('MFCreateTempFile', windll['MFPlat.dll']), ((1, 'AccessMode'),(1, 'OpenMode'),(1, 'fFlags'),(1, 'ppIByteStream'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFBeginCreateFile():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_FILE_ACCESSMODE,win32more.Media.MediaFoundation.MF_FILE_OPENMODE,win32more.Media.MediaFoundation.MF_FILE_FLAGS,win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head,POINTER(win32more.System.Com.IUnknown_head))(('MFBeginCreateFile', windll['MFPlat.dll']), ((1, 'AccessMode'),(1, 'OpenMode'),(1, 'fFlags'),(1, 'pwszFilePath'),(1, 'pCallback'),(1, 'pState'),(1, 'ppCancelCookie'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFEndCreateFile():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(win32more.Media.MediaFoundation.IMFByteStream_head))(('MFEndCreateFile', windll['MFPlat.dll']), ((1, 'pResult'),(1, 'ppFile'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCancelCreateFile():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head)(('MFCancelCreateFile', windll['MFPlat.dll']), ((1, 'pCancelCookie'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMemoryBuffer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaBuffer_head))(('MFCreateMemoryBuffer', windll['MFPlat.dll']), ((1, 'cbMaxLength'),(1, 'ppBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMediaBufferWrapper():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaBuffer_head,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaBuffer_head))(('MFCreateMediaBufferWrapper', windll['MFPlat.dll']), ((1, 'pBuffer'),(1, 'cbOffset'),(1, 'dwLength'),(1, 'ppBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateLegacyMediaBufferOnMFMediaBuffer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSample_head,win32more.Media.MediaFoundation.IMFMediaBuffer_head,UInt32,POINTER(win32more.Media.DxMediaObjects.IMediaBuffer_head))(('MFCreateLegacyMediaBufferOnMFMediaBuffer', windll['MFPlat.dll']), ((1, 'pSample'),(1, 'pMFMediaBuffer'),(1, 'cbOffset'),(1, 'ppMediaBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFMapDX9FormatToDXGIFormat():
    try:
        return WINFUNCTYPE(win32more.Graphics.Dxgi.Common.DXGI_FORMAT,UInt32)(('MFMapDX9FormatToDXGIFormat', windll['MFPlat.dll']), ((1, 'dx9'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFMapDXGIFormatToDX9Format():
    try:
        return WINFUNCTYPE(UInt32,win32more.Graphics.Dxgi.Common.DXGI_FORMAT)(('MFMapDXGIFormatToDX9Format', windll['MFPlat.dll']), ((1, 'dx11'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFLockDXGIDeviceManager():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(win32more.Media.MediaFoundation.IMFDXGIDeviceManager_head))(('MFLockDXGIDeviceManager', windll['MFPlat.dll']), ((1, 'pResetToken'),(1, 'ppManager'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFUnlockDXGIDeviceManager():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,)(('MFUnlockDXGIDeviceManager', windll['MFPlat.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateDXSurfaceBuffer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),win32more.System.Com.IUnknown_head,win32more.Foundation.BOOL,POINTER(win32more.Media.MediaFoundation.IMFMediaBuffer_head))(('MFCreateDXSurfaceBuffer', windll['MFPlat.dll']), ((1, 'riid'),(1, 'punkSurface'),(1, 'fBottomUpWhenLinear'),(1, 'ppBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateWICBitmapBuffer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),win32more.System.Com.IUnknown_head,POINTER(win32more.Media.MediaFoundation.IMFMediaBuffer_head))(('MFCreateWICBitmapBuffer', windll['MFPlat.dll']), ((1, 'riid'),(1, 'punkSurface'),(1, 'ppBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateDXGISurfaceBuffer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),win32more.System.Com.IUnknown_head,UInt32,win32more.Foundation.BOOL,POINTER(win32more.Media.MediaFoundation.IMFMediaBuffer_head))(('MFCreateDXGISurfaceBuffer', windll['MFPlat.dll']), ((1, 'riid'),(1, 'punkSurface'),(1, 'uSubresourceIndex'),(1, 'fBottomUpWhenLinear'),(1, 'ppBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVideoSampleAllocatorEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p))(('MFCreateVideoSampleAllocatorEx', windll['MFPlat.dll']), ((1, 'riid'),(1, 'ppSampleAllocator'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateDXGIDeviceManager():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(win32more.Media.MediaFoundation.IMFDXGIDeviceManager_head))(('MFCreateDXGIDeviceManager', windll['MFPlat.dll']), ((1, 'resetToken'),(1, 'ppDeviceManager'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateAlignedMemoryBuffer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaBuffer_head))(('MFCreateAlignedMemoryBuffer', windll['MFPlat.dll']), ((1, 'cbMaxLength'),(1, 'cbAligment'),(1, 'ppBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMediaEvent():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),win32more.Foundation.HRESULT,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head),POINTER(win32more.Media.MediaFoundation.IMFMediaEvent_head))(('MFCreateMediaEvent', windll['MFPlat.dll']), ((1, 'met'),(1, 'guidExtendedType'),(1, 'hrStatus'),(1, 'pvValue'),(1, 'ppEvent'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateEventQueue():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaEventQueue_head))(('MFCreateEventQueue', windll['MFPlat.dll']), ((1, 'ppMediaEventQueue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSample():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFSample_head))(('MFCreateSample', windll['MFPlat.dll']), ((1, 'ppIMFSample'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateAttributes():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head),UInt32)(('MFCreateAttributes', windll['MFPlat.dll']), ((1, 'ppMFAttributes'),(1, 'cInitialSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFInitAttributesFromBlob():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head,c_char_p_no,UInt32)(('MFInitAttributesFromBlob', windll['MFPlat.dll']), ((1, 'pAttributes'),(1, 'pBuf'),(1, 'cbBufSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetAttributesAsBlobSize():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(UInt32))(('MFGetAttributesAsBlobSize', windll['MFPlat.dll']), ((1, 'pAttributes'),(1, 'pcbBufSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetAttributesAsBlob():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head,c_char_p_no,UInt32)(('MFGetAttributesAsBlob', windll['MFPlat.dll']), ((1, 'pAttributes'),(1, 'pBuf'),(1, 'cbBufSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFTRegister():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,Guid,win32more.Foundation.PWSTR,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head),UInt32,POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head),win32more.Media.MediaFoundation.IMFAttributes_head)(('MFTRegister', windll['MFPlat.dll']), ((1, 'clsidMFT'),(1, 'guidCategory'),(1, 'pszName'),(1, 'Flags'),(1, 'cInputTypes'),(1, 'pInputTypes'),(1, 'cOutputTypes'),(1, 'pOutputTypes'),(1, 'pAttributes'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFTUnregister():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,Guid)(('MFTUnregister', windll['MFPlat.dll']), ((1, 'clsidMFT'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFTRegisterLocal():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IClassFactory_head,POINTER(Guid),win32more.Foundation.PWSTR,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head),UInt32,POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head))(('MFTRegisterLocal', windll['MFPlat.dll']), ((1, 'pClassFactory'),(1, 'guidCategory'),(1, 'pszName'),(1, 'Flags'),(1, 'cInputTypes'),(1, 'pInputTypes'),(1, 'cOutputTypes'),(1, 'pOutputTypes'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFTUnregisterLocal():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IClassFactory_head)(('MFTUnregisterLocal', windll['MFPlat.dll']), ((1, 'pClassFactory'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFTRegisterLocalByCLSID():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Guid),win32more.Foundation.PWSTR,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head),UInt32,POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head))(('MFTRegisterLocalByCLSID', windll['MFPlat.dll']), ((1, 'clisdMFT'),(1, 'guidCategory'),(1, 'pszName'),(1, 'Flags'),(1, 'cInputTypes'),(1, 'pInputTypes'),(1, 'cOutputTypes'),(1, 'pOutputTypes'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFTUnregisterLocalByCLSID():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,Guid)(('MFTUnregisterLocalByCLSID', windll['MFPlat.dll']), ((1, 'clsidMFT'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFTEnum():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,UInt32,POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head),POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head),win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(POINTER(Guid)),POINTER(UInt32))(('MFTEnum', windll['MFPlat.dll']), ((1, 'guidCategory'),(1, 'Flags'),(1, 'pInputType'),(1, 'pOutputType'),(1, 'pAttributes'),(1, 'ppclsidMFT'),(1, 'pcMFTs'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFTEnumEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,win32more.Media.MediaFoundation.MFT_ENUM_FLAG,POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head),POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head),POINTER(POINTER(win32more.Media.MediaFoundation.IMFActivate_head)),POINTER(UInt32))(('MFTEnumEx', windll['MFPlat.dll']), ((1, 'guidCategory'),(1, 'Flags'),(1, 'pInputType'),(1, 'pOutputType'),(1, 'pppMFTActivate'),(1, 'pnumMFTActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFTEnum2():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,win32more.Media.MediaFoundation.MFT_ENUM_FLAG,POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head),POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head),win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(POINTER(win32more.Media.MediaFoundation.IMFActivate_head)),POINTER(UInt32))(('MFTEnum2', windll['MFPlat.dll']), ((1, 'guidCategory'),(1, 'Flags'),(1, 'pInputType'),(1, 'pOutputType'),(1, 'pAttributes'),(1, 'pppMFTActivate'),(1, 'pnumMFTActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFTGetInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,POINTER(win32more.Foundation.PWSTR),POINTER(POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head)),POINTER(UInt32),POINTER(POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head)),POINTER(UInt32),POINTER(win32more.Media.MediaFoundation.IMFAttributes_head))(('MFTGetInfo', windll['MFPlat.dll']), ((1, 'clsidMFT'),(1, 'pszName'),(1, 'ppInputTypes'),(1, 'pcInputTypes'),(1, 'ppOutputTypes'),(1, 'pcOutputTypes'),(1, 'ppAttributes'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetPluginControl():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFPluginControl_head))(('MFGetPluginControl', windll['MFPlat.dll']), ((1, 'ppPluginControl'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetMFTMerit():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,UInt32,c_char_p_no,POINTER(UInt32))(('MFGetMFTMerit', windll['MFPlat.dll']), ((1, 'pMFT'),(1, 'cbVerifier'),(1, 'verifier'),(1, 'merit'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFRegisterLocalSchemeHandler():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.IMFActivate_head)(('MFRegisterLocalSchemeHandler', windll['MFPlat.dll']), ((1, 'szScheme'),(1, 'pActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFRegisterLocalByteStreamHandler():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.IMFActivate_head)(('MFRegisterLocalByteStreamHandler', windll['MFPlat.dll']), ((1, 'szFileExtension'),(1, 'szMimeType'),(1, 'pActivate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMFByteStreamWrapper():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,POINTER(win32more.Media.MediaFoundation.IMFByteStream_head))(('MFCreateMFByteStreamWrapper', windll['MFPlat.dll']), ((1, 'pStream'),(1, 'ppStreamWrapper'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMediaExtensionActivate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.System.Com.IUnknown_head,POINTER(Guid),POINTER(c_void_p))(('MFCreateMediaExtensionActivate', windll['MFPlat.dll']), ((1, 'szActivatableClassId'),(1, 'pConfiguration'),(1, 'riid'),(1, 'ppvObject'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMuxStreamAttributes():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFCollection_head,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head))(('MFCreateMuxStreamAttributes', windll['MFPlat.dll']), ((1, 'pAttributesToMux'),(1, 'ppMuxAttribs'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMuxStreamMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFCollection_head,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(('MFCreateMuxStreamMediaType', windll['MFPlat.dll']), ((1, 'pMediaTypesToMux'),(1, 'ppMuxMediaType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMuxStreamSample():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFCollection_head,POINTER(win32more.Media.MediaFoundation.IMFSample_head))(('MFCreateMuxStreamSample', windll['MFPlat.dll']), ((1, 'pSamplesToMux'),(1, 'ppMuxSample'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFValidateMediaTypeSize():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,c_char_p_no,UInt32)(('MFValidateMediaTypeSize', windll['MFPlat.dll']), ((1, 'FormatType'),(1, 'pBlock'),(1, 'cbSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(('MFCreateMediaType', windll['MFPlat.dll']), ((1, 'ppMFType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMFVideoFormatFromMFMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(POINTER(win32more.Media.MediaFoundation.MFVIDEOFORMAT_head)),POINTER(UInt32))(('MFCreateMFVideoFormatFromMFMediaType', windll['MFPlat.dll']), ((1, 'pMFType'),(1, 'ppMFVF'),(1, 'pcbSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateWaveFormatExFromMFMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(POINTER(win32more.Media.Audio.WAVEFORMATEX_head)),POINTER(UInt32),UInt32)(('MFCreateWaveFormatExFromMFMediaType', windll['MFPlat.dll']), ((1, 'pMFType'),(1, 'ppWF'),(1, 'pcbSize'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFInitMediaTypeFromVideoInfoHeader():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.VIDEOINFOHEADER_head),UInt32,POINTER(Guid))(('MFInitMediaTypeFromVideoInfoHeader', windll['MFPlat.dll']), ((1, 'pMFType'),(1, 'pVIH'),(1, 'cbBufSize'),(1, 'pSubtype'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFInitMediaTypeFromVideoInfoHeader2():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.VIDEOINFOHEADER2_head),UInt32,POINTER(Guid))(('MFInitMediaTypeFromVideoInfoHeader2', windll['MFPlat.dll']), ((1, 'pMFType'),(1, 'pVIH2'),(1, 'cbBufSize'),(1, 'pSubtype'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFInitMediaTypeFromMPEG1VideoInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.MPEG1VIDEOINFO_head),UInt32,POINTER(Guid))(('MFInitMediaTypeFromMPEG1VideoInfo', windll['MFPlat.dll']), ((1, 'pMFType'),(1, 'pMP1VI'),(1, 'cbBufSize'),(1, 'pSubtype'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFInitMediaTypeFromMPEG2VideoInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.MPEG2VIDEOINFO_head),UInt32,POINTER(Guid))(('MFInitMediaTypeFromMPEG2VideoInfo', windll['MFPlat.dll']), ((1, 'pMFType'),(1, 'pMP2VI'),(1, 'cbBufSize'),(1, 'pSubtype'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCalculateBitmapImageSize():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head),UInt32,POINTER(UInt32),POINTER(win32more.Foundation.BOOL))(('MFCalculateBitmapImageSize', windll['MFPlat.dll']), ((1, 'pBMIH'),(1, 'cbBufSize'),(1, 'pcbImageSize'),(1, 'pbKnown'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCalculateImageSize():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),UInt32,UInt32,POINTER(UInt32))(('MFCalculateImageSize', windll['MFPlat.dll']), ((1, 'guidSubtype'),(1, 'unWidth'),(1, 'unHeight'),(1, 'pcbImageSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFFrameRateToAverageTimePerFrame():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(UInt64))(('MFFrameRateToAverageTimePerFrame', windll['MFPlat.dll']), ((1, 'unNumerator'),(1, 'unDenominator'),(1, 'punAverageTimePerFrame'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFAverageTimePerFrameToFrameRate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64,POINTER(UInt32),POINTER(UInt32))(('MFAverageTimePerFrameToFrameRate', windll['MFPlat.dll']), ((1, 'unAverageTimePerFrame'),(1, 'punNumerator'),(1, 'punDenominator'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFInitMediaTypeFromMFVideoFormat():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.MFVIDEOFORMAT_head),UInt32)(('MFInitMediaTypeFromMFVideoFormat', windll['MFPlat.dll']), ((1, 'pMFType'),(1, 'pMFVF'),(1, 'cbBufSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFInitMediaTypeFromWaveFormatEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.Audio.WAVEFORMATEX_head),UInt32)(('MFInitMediaTypeFromWaveFormatEx', windll['MFPlat.dll']), ((1, 'pMFType'),(1, 'pWaveFormat'),(1, 'cbBufSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFInitMediaTypeFromAMMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.AM_MEDIA_TYPE_head))(('MFInitMediaTypeFromAMMediaType', windll['MFPlat.dll']), ((1, 'pMFType'),(1, 'pAMType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFInitAMMediaTypeFromMFMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,Guid,POINTER(win32more.Media.MediaFoundation.AM_MEDIA_TYPE_head))(('MFInitAMMediaTypeFromMFMediaType', windll['MFPlat.dll']), ((1, 'pMFType'),(1, 'guidFormatBlockType'),(1, 'pAMType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateAMMediaTypeFromMFMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,Guid,POINTER(POINTER(win32more.Media.MediaFoundation.AM_MEDIA_TYPE_head)))(('MFCreateAMMediaTypeFromMFMediaType', windll['MFPlat.dll']), ((1, 'pMFType'),(1, 'guidFormatBlockType'),(1, 'ppAMType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCompareFullToPartialMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.Media.MediaFoundation.IMFMediaType_head)(('MFCompareFullToPartialMediaType', windll['MFPlat.dll']), ((1, 'pMFTypeFull'),(1, 'pMFTypePartial'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFWrapMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(Guid),POINTER(Guid),POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(('MFWrapMediaType', windll['MFPlat.dll']), ((1, 'pOrig'),(1, 'MajorType'),(1, 'SubType'),(1, 'ppWrap'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFUnwrapMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(('MFUnwrapMediaType', windll['MFPlat.dll']), ((1, 'pWrap'),(1, 'ppOrig'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVideoMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVIDEOFORMAT_head),POINTER(win32more.Media.MediaFoundation.IMFVideoMediaType_head))(('MFCreateVideoMediaType', windll['MFPlat.dll']), ((1, 'pVideoFormat'),(1, 'ppIVideoMediaType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVideoMediaTypeFromSubtype():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.IMFVideoMediaType_head))(('MFCreateVideoMediaTypeFromSubtype', windll['MFPlat.dll']), ((1, 'pAMSubtype'),(1, 'ppIVideoMediaType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFIsFormatYUV():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32)(('MFIsFormatYUV', windll['EVR.dll']), ((1, 'Format'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVideoMediaTypeFromBitMapInfoHeader():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head),UInt32,UInt32,win32more.Media.MediaFoundation.MFVideoInterlaceMode,UInt64,UInt64,UInt64,UInt32,POINTER(win32more.Media.MediaFoundation.IMFVideoMediaType_head))(('MFCreateVideoMediaTypeFromBitMapInfoHeader', windll['MFPlat.dll']), ((1, 'pbmihBitMapInfoHeader'),(1, 'dwPixelAspectRatioX'),(1, 'dwPixelAspectRatioY'),(1, 'InterlaceMode'),(1, 'VideoFlags'),(1, 'qwFramesPerSecondNumerator'),(1, 'qwFramesPerSecondDenominator'),(1, 'dwMaxBitRate'),(1, 'ppIVideoMediaType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetStrideForBitmapInfoHeader():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(Int32))(('MFGetStrideForBitmapInfoHeader', windll['MFPlat.dll']), ((1, 'format'),(1, 'dwWidth'),(1, 'pStride'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetPlaneSize():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,UInt32,POINTER(UInt32))(('MFGetPlaneSize', windll['EVR.dll']), ((1, 'format'),(1, 'dwWidth'),(1, 'dwHeight'),(1, 'pdwPlaneSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVideoMediaTypeFromBitMapInfoHeaderEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head),UInt32,UInt32,UInt32,win32more.Media.MediaFoundation.MFVideoInterlaceMode,UInt64,UInt32,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.IMFVideoMediaType_head))(('MFCreateVideoMediaTypeFromBitMapInfoHeaderEx', windll['MFPlat.dll']), ((1, 'pbmihBitMapInfoHeader'),(1, 'cbBitMapInfoHeader'),(1, 'dwPixelAspectRatioX'),(1, 'dwPixelAspectRatioY'),(1, 'InterlaceMode'),(1, 'VideoFlags'),(1, 'dwFramesPerSecondNumerator'),(1, 'dwFramesPerSecondDenominator'),(1, 'dwMaxBitRate'),(1, 'ppIVideoMediaType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMediaTypeFromRepresentation():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,c_void_p,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(('MFCreateMediaTypeFromRepresentation', windll['MFPlat.dll']), ((1, 'guidRepresentation'),(1, 'pvRepresentation'),(1, 'ppIMediaType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateAudioMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.Audio.WAVEFORMATEX_head),POINTER(win32more.Media.MediaFoundation.IMFAudioMediaType_head))(('MFCreateAudioMediaType', windll['MFPlat.dll']), ((1, 'pAudioFormat'),(1, 'ppIAudioMediaType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetUncompressedVideoFormat():
    try:
        return WINFUNCTYPE(UInt32,POINTER(win32more.Media.MediaFoundation.MFVIDEOFORMAT_head))(('MFGetUncompressedVideoFormat', windll['MFPlat.dll']), ((1, 'pVideoFormat'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFInitVideoFormat():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVIDEOFORMAT_head),win32more.Media.MediaFoundation.MFStandardVideoFormat)(('MFInitVideoFormat', windll['MFPlat.dll']), ((1, 'pVideoFormat'),(1, 'type'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFInitVideoFormat_RGB():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVIDEOFORMAT_head),UInt32,UInt32,UInt32)(('MFInitVideoFormat_RGB', windll['MFPlat.dll']), ((1, 'pVideoFormat'),(1, 'dwWidth'),(1, 'dwHeight'),(1, 'D3Dfmt'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFConvertColorInfoToDXVA():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(win32more.Media.MediaFoundation.MFVIDEOFORMAT_head))(('MFConvertColorInfoToDXVA', windll['MFPlat.dll']), ((1, 'pdwToDXVA'),(1, 'pFromFormat'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFConvertColorInfoFromDXVA():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVIDEOFORMAT_head),UInt32)(('MFConvertColorInfoFromDXVA', windll['MFPlat.dll']), ((1, 'pToFormat'),(1, 'dwFromDXVA'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCopyImage():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,Int32,c_char_p_no,Int32,UInt32,UInt32)(('MFCopyImage', windll['MFPlat.dll']), ((1, 'pDest'),(1, 'lDestStride'),(1, 'pSrc'),(1, 'lSrcStride'),(1, 'dwWidthInBytes'),(1, 'dwLines'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFConvertFromFP16Array():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Single),POINTER(UInt16),UInt32)(('MFConvertFromFP16Array', windll['MFPlat.dll']), ((1, 'pDest'),(1, 'pSrc'),(1, 'dwCount'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFConvertToFP16Array():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt16),POINTER(Single),UInt32)(('MFConvertToFP16Array', windll['MFPlat.dll']), ((1, 'pDest'),(1, 'pSrc'),(1, 'dwCount'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreate2DMediaBuffer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,UInt32,win32more.Foundation.BOOL,POINTER(win32more.Media.MediaFoundation.IMFMediaBuffer_head))(('MFCreate2DMediaBuffer', windll['MFPlat.dll']), ((1, 'dwWidth'),(1, 'dwHeight'),(1, 'dwFourCC'),(1, 'fBottomUp'),(1, 'ppBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateMediaBufferFromMediaType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,Int64,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaBuffer_head))(('MFCreateMediaBufferFromMediaType', windll['MFPlat.dll']), ((1, 'pMediaType'),(1, 'llDuration'),(1, 'dwMinLength'),(1, 'dwMinAlignment'),(1, 'ppBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateCollection():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFCollection_head))(('MFCreateCollection', windll['MFPlat.dll']), ((1, 'ppIMFCollection'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFHeapAlloc():
    try:
        return WINFUNCTYPE(c_void_p,UIntPtr,UInt32,win32more.Foundation.PSTR,Int32,win32more.Media.MediaFoundation.EAllocationType)(('MFHeapAlloc', windll['MFPlat.dll']), ((1, 'nSize'),(1, 'dwFlags'),(1, 'pszFile'),(1, 'line'),(1, 'eat'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFHeapFree():
    try:
        return WINFUNCTYPE(Void,c_void_p)(('MFHeapFree', windll['MFPlat.dll']), ((1, 'pv'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFllMulDiv():
    try:
        return WINFUNCTYPE(Int64,Int64,Int64,Int64,Int64)(('MFllMulDiv', windll['MFPlat.dll']), ((1, 'a'),(1, 'b'),(1, 'c'),(1, 'd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFGetContentProtectionSystemCLSID():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Guid))(('MFGetContentProtectionSystemCLSID', windll['MFPlat.dll']), ((1, 'guidProtectionSystemID'),(1, 'pclsid'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCombineSamples():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSample_head,win32more.Media.MediaFoundation.IMFSample_head,UInt32,POINTER(win32more.Foundation.BOOL))(('MFCombineSamples', windll['MFPlat.dll']), ((1, 'pSample'),(1, 'pSampleToAdd'),(1, 'dwMaxMergedDurationInMS'),(1, 'pMerged'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFSplitSample():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSample_head,POINTER(win32more.Media.MediaFoundation.IMFSample_head),UInt32,POINTER(UInt32))(('MFSplitSample', windll['MFPlat.dll']), ((1, 'pSample'),(1, 'pOutputSamples'),(1, 'dwOutputSampleMaxCount'),(1, 'pdwOutputSampleCount'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSourceReaderFromURL():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFSourceReader_head))(('MFCreateSourceReaderFromURL', windll['MFReadWrite.dll']), ((1, 'pwszURL'),(1, 'pAttributes'),(1, 'ppSourceReader'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSourceReaderFromByteStream():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFSourceReader_head))(('MFCreateSourceReaderFromByteStream', windll['MFReadWrite.dll']), ((1, 'pByteStream'),(1, 'pAttributes'),(1, 'ppSourceReader'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSourceReaderFromMediaSource():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaSource_head,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFSourceReader_head))(('MFCreateSourceReaderFromMediaSource', windll['MFReadWrite.dll']), ((1, 'pMediaSource'),(1, 'pAttributes'),(1, 'ppSourceReader'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSinkWriterFromURL():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFSinkWriter_head))(('MFCreateSinkWriterFromURL', windll['MFReadWrite.dll']), ((1, 'pwszOutputURL'),(1, 'pByteStream'),(1, 'pAttributes'),(1, 'ppSinkWriter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateSinkWriterFromMediaSink():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaSink_head,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFSinkWriter_head))(('MFCreateSinkWriterFromMediaSink', windll['MFReadWrite.dll']), ((1, 'pMediaSink'),(1, 'pAttributes'),(1, 'ppSinkWriter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVideoPresenter():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,POINTER(Guid),POINTER(Guid),POINTER(c_void_p))(('MFCreateVideoPresenter', windll['EVR.dll']), ((1, 'pOwner'),(1, 'riidDevice'),(1, 'riid'),(1, 'ppVideoPresenter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVideoMixer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,POINTER(Guid),POINTER(Guid),POINTER(c_void_p))(('MFCreateVideoMixer', windll['EVR.dll']), ((1, 'pOwner'),(1, 'riidDevice'),(1, 'riid'),(1, 'ppv'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVideoMixerAndPresenter():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,win32more.System.Com.IUnknown_head,POINTER(Guid),POINTER(c_void_p),POINTER(Guid),POINTER(c_void_p))(('MFCreateVideoMixerAndPresenter', windll['EVR.dll']), ((1, 'pMixerOwner'),(1, 'pPresenterOwner'),(1, 'riidMixer'),(1, 'ppvVideoMixer'),(1, 'riidPresenter'),(1, 'ppvVideoPresenter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVideoRenderer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p))(('MFCreateVideoRenderer', windll['MF.dll']), ((1, 'riidRenderer'),(1, 'ppVideoRenderer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVideoSampleFromSurface():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,POINTER(win32more.Media.MediaFoundation.IMFSample_head))(('MFCreateVideoSampleFromSurface', windll['EVR.dll']), ((1, 'pUnkSurface'),(1, 'ppSample'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVideoSampleAllocator():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p))(('MFCreateVideoSampleAllocator', windll['EVR.dll']), ((1, 'riid'),(1, 'ppSampleAllocator'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFPCreateMediaPlayer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.BOOL,win32more.Media.MediaFoundation.MFP_CREATION_OPTIONS,win32more.Media.MediaFoundation.IMFPMediaPlayerCallback_head,win32more.Foundation.HWND,POINTER(win32more.Media.MediaFoundation.IMFPMediaPlayer_head))(('MFPCreateMediaPlayer', windll['MFPlay.dll']), ((1, 'pwszURL'),(1, 'fStartPlayback'),(1, 'creationOptions'),(1, 'pCallback'),(1, 'hWnd'),(1, 'ppMediaPlayer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateEncryptedMediaExtensionsStoreActivate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPMPHostApp_head,win32more.System.Com.IStream_head,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.IMFActivate_head))(('MFCreateEncryptedMediaExtensionsStoreActivate', windll['MF.dll']), ((1, 'pmpHost'),(1, 'objectStream'),(1, 'classId'),(1, 'activate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFCreateVirtualCamera():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFVirtualCameraType,win32more.Media.MediaFoundation.MFVirtualCameraLifetime,win32more.Media.MediaFoundation.MFVirtualCameraAccess,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,POINTER(Guid),UInt32,POINTER(win32more.Media.MediaFoundation.IMFVirtualCamera_head))(('MFCreateVirtualCamera', windll['MFSENSORGROUP.dll']), ((1, 'type'),(1, 'lifetime'),(1, 'access'),(1, 'friendlyName'),(1, 'sourceId'),(1, 'categories'),(1, 'categoryCount'),(1, 'virtualCamera'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MFIsVirtualCameraTypeSupported():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFVirtualCameraType,POINTER(win32more.Foundation.BOOL))(('MFIsVirtualCameraTypeSupported', windll['MFSENSORGROUP.dll']), ((1, 'type'),(1, 'supported'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_OPMXboxEnableHDCP():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.OPM_HDCP_TYPE)(('OPMXboxEnableHDCP', windll['OPMXbox.dll']), ((1, 'HDCPType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_OPMXboxGetHDCPStatus():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.OPM_HDCP_STATUS))(('OPMXboxGetHDCPStatus', windll['OPMXbox.dll']), ((1, 'pHDCPStatus'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_OPMXboxGetHDCPStatusAndType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.OPM_HDCP_STATUS),POINTER(win32more.Media.MediaFoundation.OPM_HDCP_TYPE))(('OPMXboxGetHDCPStatusAndType', windll['OPMXbox.dll']), ((1, 'pHDCPStatus'),(1, 'pHDCPType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ASF_FLAT_PICTURE_head():
    class ASF_FLAT_PICTURE(Structure):
        pass
    return ASF_FLAT_PICTURE
def _define_ASF_FLAT_PICTURE():
    ASF_FLAT_PICTURE = win32more.Media.MediaFoundation.ASF_FLAT_PICTURE_head
    ASF_FLAT_PICTURE._pack_ = 1
    ASF_FLAT_PICTURE._fields_ = [
        ('bPictureType', Byte),
        ('dwDataLen', UInt32),
    ]
    return ASF_FLAT_PICTURE
def _define_ASF_FLAT_SYNCHRONISED_LYRICS_head():
    class ASF_FLAT_SYNCHRONISED_LYRICS(Structure):
        pass
    return ASF_FLAT_SYNCHRONISED_LYRICS
def _define_ASF_FLAT_SYNCHRONISED_LYRICS():
    ASF_FLAT_SYNCHRONISED_LYRICS = win32more.Media.MediaFoundation.ASF_FLAT_SYNCHRONISED_LYRICS_head
    ASF_FLAT_SYNCHRONISED_LYRICS._pack_ = 1
    ASF_FLAT_SYNCHRONISED_LYRICS._fields_ = [
        ('bTimeStampFormat', Byte),
        ('bContentType', Byte),
        ('dwLyricsLen', UInt32),
    ]
    return ASF_FLAT_SYNCHRONISED_LYRICS
def _define_ASF_INDEX_DESCRIPTOR_head():
    class ASF_INDEX_DESCRIPTOR(Structure):
        pass
    return ASF_INDEX_DESCRIPTOR
def _define_ASF_INDEX_DESCRIPTOR():
    ASF_INDEX_DESCRIPTOR = win32more.Media.MediaFoundation.ASF_INDEX_DESCRIPTOR_head
    ASF_INDEX_DESCRIPTOR._fields_ = [
        ('Identifier', win32more.Media.MediaFoundation.ASF_INDEX_IDENTIFIER),
        ('cPerEntryBytes', UInt16),
        ('szDescription', Char * 32),
        ('dwInterval', UInt32),
    ]
    return ASF_INDEX_DESCRIPTOR
def _define_ASF_INDEX_IDENTIFIER_head():
    class ASF_INDEX_IDENTIFIER(Structure):
        pass
    return ASF_INDEX_IDENTIFIER
def _define_ASF_INDEX_IDENTIFIER():
    ASF_INDEX_IDENTIFIER = win32more.Media.MediaFoundation.ASF_INDEX_IDENTIFIER_head
    ASF_INDEX_IDENTIFIER._fields_ = [
        ('guidIndexType', Guid),
        ('wStreamNumber', UInt16),
    ]
    return ASF_INDEX_IDENTIFIER
def _define_ASF_MUX_STATISTICS_head():
    class ASF_MUX_STATISTICS(Structure):
        pass
    return ASF_MUX_STATISTICS
def _define_ASF_MUX_STATISTICS():
    ASF_MUX_STATISTICS = win32more.Media.MediaFoundation.ASF_MUX_STATISTICS_head
    ASF_MUX_STATISTICS._fields_ = [
        ('cFramesWritten', UInt32),
        ('cFramesDropped', UInt32),
    ]
    return ASF_MUX_STATISTICS
ASF_SELECTION_STATUS = Int32
ASF_STATUS_NOTSELECTED = 0
ASF_STATUS_CLEANPOINTSONLY = 1
ASF_STATUS_ALLDATAUNITS = 2
ASF_STATUSFLAGS = Int32
ASF_STATUSFLAGS_INCOMPLETE = 1
ASF_STATUSFLAGS_NONFATAL_ERROR = 2
CAC3DecMediaObject = Guid('03d7c802-ecfa-47d9-b2-68-5f-b3-e3-10-de-e4')
CClusterDetectorDmo = Guid('36e820c4-165a-4521-86-3c-61-9e-11-60-d4-d4')
CColorControlDmo = Guid('798059f0-89ca-4160-b3-25-ae-b4-8e-fe-4f-9a')
CColorConvertDMO = Guid('98230571-0087-4204-b0-20-32-82-53-8e-57-d3')
CColorLegalizerDmo = Guid('fdfaa753-e48e-4e33-9c-74-98-a2-7f-c6-72-6a')
CDeColorConvMediaObject = Guid('49034c05-f43c-400f-84-c1-90-a6-83-19-5a-3a')
CDTVAudDecoderDS = Guid('8e269032-fe03-4753-9b-17-18-25-3c-21-72-2e')
CDTVVidDecoderDS = Guid('64777dc8-4e24-4beb-9d-19-60-a3-5b-e1-da-af')
CDVDecoderMediaObject = Guid('e54709c5-1e17-4c8d-94-e7-47-89-40-43-35-84')
CDVEncoderMediaObject = Guid('c82ae729-c327-4cce-91-4d-81-71-fe-fe-be-fb')
CFrameInterpDMO = Guid('0a7cfe1b-6ab5-4334-9e-d8-3f-97-cb-37-da-a1')
CFrameRateConvertDmo = Guid('01f36ce2-0907-4d8b-97-9d-f1-51-be-91-c8-83')
CInterlaceMediaObject = Guid('b5a89c80-4901-407b-9a-bc-90-d9-a6-44-bb-46')
CMP3DecMediaObject = Guid('bbeea841-0a63-4f52-a7-ab-a9-b3-a8-4e-d3-8a')
CMPEG2AudDecoderDS = Guid('e1f1a0b8-beee-490d-ba-7c-06-6c-40-b5-e2-b9')
CMPEG2AudioEncoderMFT = Guid('46a4dd5c-73f8-4304-94-df-30-8f-76-09-74-f4')
CMpeg2DecMediaObject = Guid('863d66cd-cdce-4617-b4-7f-c8-92-9c-fc-28-a6')
CMPEG2EncoderAudioDS = Guid('acd453bc-c58a-44d1-bb-f5-bf-b3-25-be-2d-78')
CMPEG2EncoderDS = Guid('5f5aff4a-2f7f-4279-88-c2-cd-88-eb-39-d1-44')
CMPEG2EncoderVideoDS = Guid('42150cd9-ca9a-4ea5-99-39-30-ee-03-7f-6e-74')
CMPEG2VidDecoderDS = Guid('212690fb-83e5-4526-8f-d7-74-47-8b-79-39-cd')
CMPEG2VideoEncoderMFT = Guid('e6335f02-80b7-4dc4-ad-fa-df-e7-21-0d-20-d5')
CMpeg43DecMediaObject = Guid('cba9e78b-49a3-49ea-93-d4-6b-cb-a8-c4-de-07')
CMpeg4DecMediaObject = Guid('f371728a-6052-4d47-82-7c-d0-39-33-5d-fe-0a')
CMpeg4EncMediaObject = Guid('24f258d8-c651-4042-93-e4-ca-65-4a-bb-68-2c')
CMpeg4sDecMediaObject = Guid('2a11bae2-fe6e-4249-86-4b-9e-9e-d6-e8-db-c2')
CMpeg4sDecMFT = Guid('5686a0d9-fe39-409f-9d-ff-3f-db-c8-49-f9-f5')
CMpeg4sEncMediaObject = Guid('6ec5a7be-d81e-4f9e-ad-a3-cd-1b-f2-62-b6-d8')
CMPEGAACDecMediaObject = Guid('8dde1772-edad-41c3-b4-be-1f-30-fb-4e-e0-d6')
CMSAACDecMFT = Guid('32d186a7-218f-4c75-88-76-dd-77-27-3a-89-99')
CMSAC3Enc = Guid('c6b400e2-20a7-4e58-a2-fe-24-61-96-82-ce-6c')
CMSALACDecMFT = Guid('c0cd7d12-31fc-4bbc-b3-63-73-22-ee-3e-18-79')
CMSALACEncMFT = Guid('9ab6a28c-748e-4b6a-bf-ff-cc-44-3b-8e-8f-b4')
CMSDDPlusDecMFT = Guid('177c0afe-900b-48d4-9e-4c-57-ad-d2-50-b3-d4')
CMSDolbyDigitalEncMFT = Guid('ac3315c9-f481-45d7-82-6c-0b-40-6c-1f-64-b8')
CMSFLACDecMFT = Guid('6b0b3e6b-a2c5-4514-80-55-af-e8-a9-52-42-d9')
CMSFLACEncMFT = Guid('128509e9-c44e-45dc-95-e9-c2-55-b8-f4-66-a6')
CMSH263EncoderMFT = Guid('bc47fcfe-98a0-4f27-bb-07-69-8a-f2-4f-2b-38')
CMSH264DecoderMFT = Guid('62ce7e72-4c71-4d20-b1-5d-45-28-31-a8-7d-9d')
CMSH264EncoderMFT = Guid('6ca50344-051a-4ded-97-79-a4-33-05-16-5e-35')
CMSH264RemuxMFT = Guid('05a47ebb-8bf0-4cbf-ad-2f-3b-71-d7-58-66-f5')
CMSH265EncoderMFT = Guid('f2f84074-8bca-40bd-91-59-e8-80-f6-73-dd-3b')
CMSMPEGAudDecMFT = Guid('70707b39-b2ca-4015-ab-ea-f8-44-7d-22-d8-8b')
CMSMPEGDecoderMFT = Guid('2d709e52-123f-49b5-9c-bc-9a-f5-cd-e2-8f-b9')
CMSOpusDecMFT = Guid('63e17c10-2d43-4c42-8f-e3-8d-8b-63-e4-6a-6a')
CMSSCDecMediaObject = Guid('7bafb3b1-d8f4-4279-92-53-27-da-42-31-08-de')
CMSSCEncMediaObject = Guid('8cb9cc06-d139-4ae6-8b-b4-41-e6-12-e1-41-d5')
CMSSCEncMediaObject2 = Guid('f7ffe0a0-a4f5-44b5-94-9e-15-ed-2b-c6-6f-9d')
CMSVideoDSPMFT = Guid('51571744-7fe4-4ff2-a4-98-2d-c3-4f-f7-4f-1b')
CMSVPXEncoderMFT = Guid('aeb6c755-2546-4881-82-cc-e1-5a-e5-eb-ff-3d')
CNokiaAACCCDecMediaObject = Guid('eabf7a6f-ccba-4d60-86-20-b1-52-cc-97-72-63')
CNokiaAACDecMediaObject = Guid('3cb2bde4-4e29-4c44-a7-3e-2d-7c-2c-46-d6-ec')
CODECAPI_AVAudioChannelConfig = Guid('17f89cb3-c38d-4368-9e-de-63-b9-4d-17-7f-9f')
CODECAPI_AVAudioChannelCount = Guid('1d3583c4-1583-474e-b7-1a-5e-e4-63-c1-98-e4')
CODECAPI_AVAudioSampleRate = Guid('971d2723-1acb-42e7-85-5c-52-0a-4b-70-a5-f2')
CODECAPI_AVDDSurroundMode = Guid('99f2f386-98d1-4452-a1-63-ab-c7-8a-6e-b7-70')
CODECAPI_AVDecAACDownmixMode = Guid('01274475-f6bb-4017-b0-84-81-a7-63-c9-42-d4')
CODECAPI_AVDecAudioDualMono = Guid('4a52cda8-30f8-4216-be-0f-ba-0b-20-25-92-1d')
CODECAPI_AVDecAudioDualMonoReproMode = Guid('a5106186-cc94-4bc9-8c-d9-aa-2f-61-f6-80-7e')
CODECAPI_AVDecCommonInputFormat = Guid('e5005239-bd89-4be3-9c-0f-5d-de-31-79-88-cc')
CODECAPI_AVDecCommonMeanBitRate = Guid('59488217-007a-4f7a-8e-41-5c-48-b1-ea-c5-c6')
CODECAPI_AVDecCommonMeanBitRateInterval = Guid('0ee437c6-38a7-4c5c-94-4c-68-ab-42-11-6b-85')
CODECAPI_AVDecCommonOutputFormat = Guid('3c790028-c0ce-4256-b1-a2-1b-0f-c8-b1-dc-dc')
CODECAPI_AVDecDDDynamicRangeScaleHigh = Guid('50196c21-1f33-4af5-b2-96-11-42-6d-6c-87-89')
CODECAPI_AVDecDDDynamicRangeScaleLow = Guid('044e62e4-11a5-42d5-a3-b2-3b-b2-c7-c2-d7-cf')
CODECAPI_AVDecDDMatrixDecodingMode = Guid('ddc811a5-04ed-4bf3-a0-ca-d0-04-49-f9-35-5f')
CODECAPI_AVDecDDOperationalMode = Guid('d6d6c6d1-064e-4fdd-a4-0e-3e-cb-fc-b7-eb-d0')
CODECAPI_AVDecDDStereoDownMixMode = Guid('6ce4122c-3ee9-4182-b4-ae-c1-0f-c0-88-64-9d')
CODECAPI_AVDecDisableVideoPostProcessing = Guid('f8749193-667a-4f2c-a9-e8-5d-4a-f9-24-f0-8f')
CODECAPI_AVDecHEAACDynamicRangeControl = Guid('287c8abe-69a4-4d39-80-80-d3-d9-71-21-78-a0')
CODECAPI_AVDecNumWorkerThreads = Guid('9561c3e8-ea9e-4435-9b-1e-a9-3e-69-18-94-d8')
CODECAPI_AVDecSoftwareDynamicFormatChange = Guid('862e2f0a-507b-47ff-af-47-01-e2-62-42-98-b7')
CODECAPI_AVDecVideoAcceleration_H264 = Guid('f7db8a2f-4f48-4ee8-ae-31-8b-6e-be-55-8a-e2')
CODECAPI_AVDecVideoAcceleration_MPEG2 = Guid('f7db8a2e-4f48-4ee8-ae-31-8b-6e-be-55-8a-e2')
CODECAPI_AVDecVideoAcceleration_VC1 = Guid('f7db8a30-4f48-4ee8-ae-31-8b-6e-be-55-8a-e2')
CODECAPI_AVDecVideoCodecType = Guid('434528e5-21f0-46b6-b6-2c-9b-1b-6b-65-8c-d1')
CODECAPI_AVDecVideoDropPicWithMissingRef = Guid('f8226383-14c2-4567-97-34-50-04-e9-6f-f8-87')
CODECAPI_AVDecVideoDXVABusEncryption = Guid('42153c8b-fd0b-4765-a4-62-dd-d9-e8-bc-c3-88')
CODECAPI_AVDecVideoDXVAMode = Guid('f758f09e-7337-4ae7-83-87-73-dc-2d-54-e6-7d')
CODECAPI_AVDecVideoFastDecodeMode = Guid('6b529f7d-d3b1-49c6-a9-99-9e-c6-91-1b-ed-bf')
CODECAPI_AVDecVideoH264ErrorConcealment = Guid('ececace8-3436-462c-92-94-cd-7b-ac-d7-58-a9')
CODECAPI_AVDecVideoImageSize = Guid('5ee5747c-6801-4cab-aa-f1-62-48-fa-84-1b-a4')
CODECAPI_AVDecVideoInputScanType = Guid('38477e1f-0ea7-42cd-8c-d1-13-0c-ed-57-c5-80')
CODECAPI_AVDecVideoMaxCodedHeight = Guid('7262a16a-d2dc-4e75-9b-a8-65-c0-c6-d3-2b-13')
CODECAPI_AVDecVideoMaxCodedWidth = Guid('5ae557b8-77af-41f5-9f-a6-4d-b2-fe-1d-4b-ca')
CODECAPI_AVDecVideoMPEG2ErrorConcealment = Guid('9d2bfe18-728d-48d2-b3-58-bc-7e-43-6c-66-74')
CODECAPI_AVDecVideoPixelAspectRatio = Guid('b0cf8245-f32d-41df-b0-2c-87-bd-30-4d-12-ab')
CODECAPI_AVDecVideoProcDeinterlaceCSC = Guid('f7db8a31-4f48-4ee8-ae-31-8b-6e-be-55-8a-e2')
CODECAPI_AVDecVideoSoftwareDeinterlaceMode = Guid('0c08d1ce-9ced-4540-ba-e3-ce-b3-80-14-11-09')
CODECAPI_AVDecVideoSWPowerLevel = Guid('fb5d2347-4dd8-4509-ae-d0-db-5f-a9-aa-93-f4')
CODECAPI_AVDecVideoThumbnailGenerationMode = Guid('2efd8eee-1150-4328-9c-f5-66-dc-e9-33-fc-f4')
CODECAPI_AVDSPLoudnessEqualization = Guid('8afd1a15-1812-4cbf-93-19-43-3a-5b-2a-3b-27')
CODECAPI_AVDSPSpeakerFill = Guid('5612bca1-56da-4582-8d-a1-ca-80-90-f9-27-68')
CODECAPI_AVEnableInLoopDeblockFilter = Guid('d2e8e399-0623-4bf3-92-a8-4d-18-18-52-9d-ed')
CODECAPI_AVEncAdaptiveMode = Guid('4419b185-da1f-4f53-bc-76-09-7d-0c-1e-fb-1e')
CODECAPI_AVEncAudioDualMono = Guid('3648126b-a3e8-4329-9b-3a-5c-e5-66-a4-3b-d3')
CODECAPI_AVEncAudioInputContent = Guid('3e226c2b-60b9-4a39-b0-0b-a7-b4-0f-70-d5-66')
CODECAPI_AVEncAudioIntervalToEncode = Guid('866e4b4d-725a-467c-bb-01-b4-96-b2-3b-25-f9')
CODECAPI_AVEncAudioIntervalToSkip = Guid('88c15f94-c38c-4796-a9-e8-96-e9-67-98-3f-26')
CODECAPI_AVEncAudioMapDestChannel0 = Guid('bc5d0b60-df6a-4e16-98-03-b8-20-07-a3-0c-8d')
CODECAPI_AVEncAudioMapDestChannel1 = Guid('bc5d0b61-df6a-4e16-98-03-b8-20-07-a3-0c-8d')
CODECAPI_AVEncAudioMapDestChannel10 = Guid('bc5d0b6a-df6a-4e16-98-03-b8-20-07-a3-0c-8d')
CODECAPI_AVEncAudioMapDestChannel11 = Guid('bc5d0b6b-df6a-4e16-98-03-b8-20-07-a3-0c-8d')
CODECAPI_AVEncAudioMapDestChannel12 = Guid('bc5d0b6c-df6a-4e16-98-03-b8-20-07-a3-0c-8d')
CODECAPI_AVEncAudioMapDestChannel13 = Guid('bc5d0b6d-df6a-4e16-98-03-b8-20-07-a3-0c-8d')
CODECAPI_AVEncAudioMapDestChannel14 = Guid('bc5d0b6e-df6a-4e16-98-03-b8-20-07-a3-0c-8d')
CODECAPI_AVEncAudioMapDestChannel15 = Guid('bc5d0b6f-df6a-4e16-98-03-b8-20-07-a3-0c-8d')
CODECAPI_AVEncAudioMapDestChannel2 = Guid('bc5d0b62-df6a-4e16-98-03-b8-20-07-a3-0c-8d')
CODECAPI_AVEncAudioMapDestChannel3 = Guid('bc5d0b63-df6a-4e16-98-03-b8-20-07-a3-0c-8d')
CODECAPI_AVEncAudioMapDestChannel4 = Guid('bc5d0b64-df6a-4e16-98-03-b8-20-07-a3-0c-8d')
CODECAPI_AVEncAudioMapDestChannel5 = Guid('bc5d0b65-df6a-4e16-98-03-b8-20-07-a3-0c-8d')
CODECAPI_AVEncAudioMapDestChannel6 = Guid('bc5d0b66-df6a-4e16-98-03-b8-20-07-a3-0c-8d')
CODECAPI_AVEncAudioMapDestChannel7 = Guid('bc5d0b67-df6a-4e16-98-03-b8-20-07-a3-0c-8d')
CODECAPI_AVEncAudioMapDestChannel8 = Guid('bc5d0b68-df6a-4e16-98-03-b8-20-07-a3-0c-8d')
CODECAPI_AVEncAudioMapDestChannel9 = Guid('bc5d0b69-df6a-4e16-98-03-b8-20-07-a3-0c-8d')
CODECAPI_AVEncAudioMeanBitRate = Guid('921295bb-4fca-4679-aa-b8-9e-2a-1d-75-33-84')
CODECAPI_AVEncChromaEncodeMode = Guid('8a47ab5a-4798-4c93-b5-a5-55-4f-9a-3b-9f-50')
CODECAPI_AVEncChromaUpdateTime = Guid('4b4fd998-4274-40bb-8e-e4-07-55-3e-7e-2d-3a')
CODECAPI_AVEncCodecType = Guid('08af4ac1-f3f2-4c74-9d-cf-37-f2-ec-79-f8-26')
CODECAPI_AVEncCommonAllowFrameDrops = Guid('d8477dcb-9598-48e3-8d-0c-75-2b-f2-06-09-3e')
CODECAPI_AVEncCommonBufferInLevel = Guid('d9c5c8db-fc74-4064-94-e9-cd-19-f9-47-ed-45')
CODECAPI_AVEncCommonBufferOutLevel = Guid('ccae7f49-d0bc-4e3d-a5-7e-fb-57-40-14-00-69')
CODECAPI_AVEncCommonBufferSize = Guid('0db96574-b6a4-4c8b-81-06-37-73-de-03-10-cd')
CODECAPI_AVEncCommonFormatConstraint = Guid('57cbb9b8-116f-4951-b4-0c-c2-a0-35-ed-8f-17')
CODECAPI_AVEncCommonLowLatency = Guid('9d3ecd55-89e8-490a-97-0a-0c-95-48-d5-a5-6e')
CODECAPI_AVEncCommonMaxBitRate = Guid('9651eae4-39b9-4ebf-85-ef-d7-f4-44-ec-74-65')
CODECAPI_AVEncCommonMeanBitRate = Guid('f7222374-2144-4815-b5-50-a3-7f-8e-12-ee-52')
CODECAPI_AVEncCommonMeanBitRateInterval = Guid('bfaa2f0c-cb82-4bc0-84-74-f0-6a-8a-0d-02-58')
CODECAPI_AVEncCommonMinBitRate = Guid('101405b2-2083-4034-a8-06-ef-be-dd-d7-c9-ff')
CODECAPI_AVEncCommonMultipassMode = Guid('22533d4c-47e1-41b5-93-52-a2-b7-78-0e-7a-c4')
CODECAPI_AVEncCommonPassEnd = Guid('0e3d01bc-c85c-467d-8b-60-c4-10-12-ee-3b-f6')
CODECAPI_AVEncCommonPassStart = Guid('6a67739f-4eb5-4385-99-28-f2-76-a9-39-ef-95')
CODECAPI_AVEncCommonQuality = Guid('fcbf57a3-7ea5-4b0c-96-44-69-b4-0c-39-c3-91')
CODECAPI_AVEncCommonQualityVsSpeed = Guid('98332df8-03cd-476b-89-fa-3f-9e-44-2d-ec-9f')
CODECAPI_AVEncCommonRateControlMode = Guid('1c0608e9-370c-4710-8a-58-cb-61-81-c4-24-23')
CODECAPI_AVEncCommonRealTime = Guid('143a0ff6-a131-43da-b8-1e-98-fb-b8-ec-37-8e')
CODECAPI_AVEncCommonStreamEndHandling = Guid('6aad30af-6ba8-4ccc-8f-ca-18-d1-9b-ea-eb-1c')
CODECAPI_AVEncCommonTranscodeEncodingProfile = Guid('6947787c-f508-4ea9-b1-e9-a1-fe-3a-49-fb-c9')
CODECAPI_AVEncDDAtoDConverterType = Guid('719f9612-81a1-47e0-9a-05-d9-4a-d5-fc-a9-48')
CODECAPI_AVEncDDCentreDownMixLevel = Guid('e285072c-c958-4a81-af-d2-e5-e0-da-f1-b1-48')
CODECAPI_AVEncDDChannelBWLowPassFilter = Guid('e197821d-d2e7-43e2-ad-2c-00-58-2f-51-85-45')
CODECAPI_AVEncDDCopyright = Guid('8694f076-cd75-481d-a5-c6-a9-04-dc-c8-28-f0')
CODECAPI_AVEncDDDCHighPassFilter = Guid('9565239f-861c-4ac8-bf-da-e0-0c-b4-db-85-48')
CODECAPI_AVEncDDDialogNormalization = Guid('d7055acf-f125-437d-a7-04-79-c7-9f-04-04-a8')
CODECAPI_AVEncDDDigitalDeemphasis = Guid('e024a2c2-947c-45ac-87-d8-f1-03-0c-5c-00-82')
CODECAPI_AVEncDDDynamicRangeCompressionControl = Guid('cfc2ff6d-79b8-4b8d-a8-aa-a0-c9-bd-1c-29-40')
CODECAPI_AVEncDDHeadphoneMode = Guid('4052dbec-52f5-42f5-9b-00-d1-34-b1-34-1b-9d')
CODECAPI_AVEncDDLFELowPassFilter = Guid('d3b80f6f-9d15-45e5-91-be-01-9c-3f-ab-1f-01')
CODECAPI_AVEncDDLoRoCenterMixLvl_x10 = Guid('1cfba222-25b3-4bf4-9b-fd-e7-11-12-67-85-8c')
CODECAPI_AVEncDDLoRoSurroundMixLvl_x10 = Guid('e725cff6-eb56-40c7-84-50-2b-93-67-e9-15-55')
CODECAPI_AVEncDDLtRtCenterMixLvl_x10 = Guid('dca128a2-491f-4600-b2-da-76-e3-34-4b-41-97')
CODECAPI_AVEncDDLtRtSurroundMixLvl_x10 = Guid('212246c7-3d2c-4dfa-bc-21-65-2a-90-98-69-0d')
CODECAPI_AVEncDDOriginalBitstream = Guid('966ae800-5bd3-4ff9-95-b9-d3-05-66-27-38-56')
CODECAPI_AVEncDDPreferredStereoDownMixMode = Guid('7f4e6b31-9185-403d-b0-a2-76-37-43-e6-f0-63')
CODECAPI_AVEncDDProductionInfoExists = Guid('b0b7fe5f-b6ab-4f40-96-4d-8d-91-f1-7c-19-e8')
CODECAPI_AVEncDDProductionMixLevel = Guid('301d103a-cbf9-4776-88-99-7c-15-b4-61-ab-26')
CODECAPI_AVEncDDProductionRoomType = Guid('dad7ad60-23d8-4ab7-a2-84-55-69-86-d8-a6-fe')
CODECAPI_AVEncDDRFPreEmphasisFilter = Guid('21af44c0-244e-4f3d-a2-cc-3d-30-68-b2-e7-3f')
CODECAPI_AVEncDDService = Guid('d2e1bec7-5172-4d2a-a5-0e-2f-3b-82-b1-dd-f8')
CODECAPI_AVEncDDSurround3dBAttenuation = Guid('4d43b99d-31e2-48b9-bf-2e-5c-bf-1a-57-27-84')
CODECAPI_AVEncDDSurround90DegreeePhaseShift = Guid('25ecec9d-3553-42c0-bb-56-d2-57-92-10-4f-80')
CODECAPI_AVEncDDSurroundDownMixLevel = Guid('7b20d6e5-0bcf-4273-a4-87-50-6b-04-79-97-e9')
CODECAPI_AVEncDDSurroundExMode = Guid('91607cee-dbdd-4eb6-bc-a2-aa-df-af-a3-dd-68')
CODECAPI_AVEncEnableVideoProcessing = Guid('006f4bf6-0ea3-4d42-87-02-b5-d8-be-0f-7a-92')
CODECAPI_AVEncH264CABACEnable = Guid('ee6cad62-d305-4248-a5-0e-e1-b2-55-f7-ca-f8')
CODECAPI_AVEncH264PPSID = Guid('bfe29ec2-056c-4d68-a3-8d-ae-59-44-c8-58-2e')
CODECAPI_AVEncH264SPSID = Guid('50f38f51-2b79-40e3-b3-9c-7e-9f-a0-77-05-01')
CODECAPI_AVEncInputVideoSystem = Guid('bede146d-b616-4dc7-92-b2-f5-d9-fa-92-98-f7')
CODECAPI_AVEncLowPowerEncoder = Guid('b668d582-8bad-4f6a-91-41-37-5a-95-35-8b-6d')
CODECAPI_AVEncMaxFrameRate = Guid('b98e1b31-19fa-4d4f-99-31-d6-a5-b8-aa-b9-3c')
CODECAPI_AVEncMP12MuxDVDNavPacks = Guid('c7607ced-8cf1-4a99-83-a1-ee-54-61-be-35-74')
CODECAPI_AVEncMP12MuxEarliestPTS = Guid('157232b6-f809-474e-94-64-a7-f9-30-14-a8-17')
CODECAPI_AVEncMP12MuxInitialSCR = Guid('3433ad21-1b91-4a0b-b1-90-2b-77-06-3b-63-a4')
CODECAPI_AVEncMP12MuxLargestPacketSize = Guid('35ceb711-f461-4b92-a4-ef-17-b6-84-1e-d2-54')
CODECAPI_AVEncMP12MuxMuxRate = Guid('ee047c72-4bdb-4a9d-8e-21-41-92-6c-82-3d-a7')
CODECAPI_AVEncMP12MuxNumStreams = Guid('f7164a41-dced-4659-a8-f2-fb-69-3f-2a-4c-d0')
CODECAPI_AVEncMP12MuxPacketOverhead = Guid('e40bd720-3955-4453-ac-f9-b7-91-32-a3-8f-a0')
CODECAPI_AVEncMP12MuxPackSize = Guid('f916053a-1ce8-4faf-aa-0b-ba-31-c8-00-34-b8')
CODECAPI_AVEncMP12MuxSysAudioLock = Guid('0fbb5752-1d43-47bf-bd-79-f2-29-3d-8c-e3-37')
CODECAPI_AVEncMP12MuxSysCSPS = Guid('7952ff45-9c0d-4822-bc-82-8a-d7-72-e0-29-93')
CODECAPI_AVEncMP12MuxSysFixed = Guid('cefb987e-894f-452e-8f-89-a4-ef-8c-ec-06-3a')
CODECAPI_AVEncMP12MuxSysRateBound = Guid('05f0428a-ee30-489d-ae-28-20-5c-72-44-67-10')
CODECAPI_AVEncMP12MuxSysSTDBufferBound = Guid('35746903-b545-43e7-bb-35-c5-e0-a7-d5-09-3c')
CODECAPI_AVEncMP12MuxSysVideoLock = Guid('b8296408-2430-4d37-a2-a1-95-b3-e4-35-a9-1d')
CODECAPI_AVEncMP12MuxTargetPacketizer = Guid('d862212a-2015-45dd-9a-32-1b-3a-a8-82-05-a0')
CODECAPI_AVEncMP12PktzCopyright = Guid('c8f4b0c1-094c-43c7-8e-68-a5-95-40-5a-6e-f8')
CODECAPI_AVEncMP12PktzInitialPTS = Guid('2a4f2065-9a63-4d20-ae-22-0a-1b-c8-96-a3-15')
CODECAPI_AVEncMP12PktzOriginal = Guid('6b178416-31b9-4964-94-cb-6b-ff-86-6c-df-83')
CODECAPI_AVEncMP12PktzPacketSize = Guid('ab71347a-1332-4dde-a0-e5-cc-f7-da-8a-0f-22')
CODECAPI_AVEncMP12PktzSTDBuffer = Guid('0b751bd0-819e-478c-94-35-75-20-89-26-b3-77')
CODECAPI_AVEncMP12PktzStreamID = Guid('c834d038-f5e8-4408-9b-60-88-f3-64-93-fe-df')
CODECAPI_AVEncMPACodingMode = Guid('b16ade03-4b93-43d7-a5-50-90-b4-fe-22-45-37')
CODECAPI_AVEncMPACopyright = Guid('a6ae762a-d0a9-4454-b8-ef-f2-db-ee-fd-d3-bd')
CODECAPI_AVEncMPAEmphasisType = Guid('2d59fcda-bf4e-4ed6-b5-df-5b-03-b3-6b-0a-1f')
CODECAPI_AVEncMPAEnableRedundancyProtection = Guid('5e54b09e-b2e7-4973-a8-9b-0b-36-50-a3-be-da')
CODECAPI_AVEncMPALayer = Guid('9d377230-f91b-453d-9c-e0-78-44-54-14-c2-2d')
CODECAPI_AVEncMPAOriginalBitstream = Guid('3cfb7855-9cc9-47ff-b8-29-b3-67-86-c9-23-46')
CODECAPI_AVEncMPAPrivateUserBit = Guid('afa505ce-c1e3-4e3d-85-1b-61-b7-00-e5-e6-cc')
CODECAPI_AVEncMPVAddSeqEndCode = Guid('a823178f-57df-4c7a-b8-fd-e5-ec-88-87-70-8d')
CODECAPI_AVEncMPVDefaultBPictureCount = Guid('8d390aac-dc5c-4200-b5-7f-81-4d-04-ba-ba-b2')
CODECAPI_AVEncMPVFrameFieldMode = Guid('acb5de96-7b93-4c2f-88-25-b0-29-5f-a9-3b-f4')
CODECAPI_AVEncMPVGenerateHeaderPicDispExt = Guid('c6412f84-c03f-4f40-a0-0c-42-93-df-83-95-bb')
CODECAPI_AVEncMPVGenerateHeaderPicExt = Guid('1b8464ab-944f-45f0-b7-4e-3a-58-da-d1-1f-37')
CODECAPI_AVEncMPVGenerateHeaderSeqDispExt = Guid('6437aa6f-5a3c-4de9-8a-16-53-d9-c4-ad-32-6f')
CODECAPI_AVEncMPVGenerateHeaderSeqExt = Guid('d5e78611-082d-4e6b-98-af-0f-51-ab-13-92-22')
CODECAPI_AVEncMPVGenerateHeaderSeqScaleExt = Guid('0722d62f-dd59-4a86-9c-d5-64-4f-8e-26-53-d8')
CODECAPI_AVEncMPVGOPOpen = Guid('b1d5d4a6-3300-49b1-ae-61-a0-99-37-ab-0e-49')
CODECAPI_AVEncMPVGOPSInSeq = Guid('993410d4-2691-4192-99-78-98-dc-26-03-66-9f')
CODECAPI_AVEncMPVGOPSize = Guid('95f31b26-95a4-41aa-93-03-24-6a-7f-c6-ee-f1')
CODECAPI_AVEncMPVGOPSizeMax = Guid('fe7de4c4-1936-4fe2-bd-f7-1f-18-ca-1d-00-1f')
CODECAPI_AVEncMPVGOPSizeMin = Guid('7155cf20-d440-4852-ad-0f-9c-4a-bf-e3-7a-6a')
CODECAPI_AVEncMPVIntraDCPrecision = Guid('a0116151-cbc8-4af3-97-dc-d0-0c-ce-b8-2d-79')
CODECAPI_AVEncMPVIntraVLCTable = Guid('a2b83ff5-1a99-405a-af-95-c5-99-7d-55-8d-3a')
CODECAPI_AVEncMPVLevel = Guid('6ee40c40-a60c-41ef-8f-50-37-c2-24-9e-2c-b3')
CODECAPI_AVEncMPVProfile = Guid('dabb534a-1d99-4284-97-5a-d9-0e-22-39-ba-a1')
CODECAPI_AVEncMPVQScaleType = Guid('2b79ebb7-f484-4af7-bb-58-a2-a1-88-c5-cb-be')
CODECAPI_AVEncMPVQuantMatrixChromaIntra = Guid('9eb9ecd4-018d-4ffd-8f-2d-39-e4-9f-07-b1-7a')
CODECAPI_AVEncMPVQuantMatrixChromaNonIntra = Guid('1415b6b1-362a-4338-ba-9a-1e-f5-87-03-c0-5b')
CODECAPI_AVEncMPVQuantMatrixIntra = Guid('9bea04f3-6621-442c-8b-a1-3a-c3-78-97-96-98')
CODECAPI_AVEncMPVQuantMatrixNonIntra = Guid('87f441d8-0997-4beb-a0-8e-85-73-d4-09-cf-75')
CODECAPI_AVEncMPVScanPattern = Guid('7f8a478e-7bbb-4ae2-b2-fc-96-d1-7f-c4-a2-d6')
CODECAPI_AVEncMPVSceneDetection = Guid('552799f1-db4c-405b-8a-3a-c9-3f-2d-06-74-dc')
CODECAPI_AVEncMPVUseConcealmentMotionVectors = Guid('ec770cf3-6908-4b4b-aa-30-7f-b9-86-21-4f-ea')
CODECAPI_AVEncMuxOutputStreamType = Guid('cedd9e8f-34d3-44db-a1-d8-f8-15-20-25-4f-3e')
CODECAPI_AVEncNoInputCopy = Guid('d2b46a2a-e8ee-4ec5-86-9e-44-9b-6c-62-c8-1a')
CODECAPI_AVEncNumWorkerThreads = Guid('b0c8bf60-16f7-4951-a3-0b-1d-b1-60-92-93-d6')
CODECAPI_AVEncProgressiveUpdateTime = Guid('649faf66-afc6-4828-8f-dc-07-71-cd-9a-b1-7d')
CODECAPI_AVEncSliceControlMode = Guid('e9e782ef-5f18-44c9-a9-0b-e9-c3-c2-c1-7b-0b')
CODECAPI_AVEncSliceControlSize = Guid('92f51df3-07a5-4172-ae-fe-c6-9c-a3-b6-0e-35')
CODECAPI_AVEncSliceGenerationMode = Guid('8a6bc67f-9497-4286-b4-6b-02-db-8d-60-ed-bc')
CODECAPI_AVEncStatAudioAverageBPS = Guid('ca6724db-7059-4351-8b-43-f8-21-98-82-6a-14')
CODECAPI_AVEncStatAudioAveragePCMValue = Guid('979272f8-d17f-4e32-bb-73-4e-73-1c-68-ba-2d')
CODECAPI_AVEncStatAudioPeakPCMValue = Guid('dce7fd34-dc00-4c16-82-1b-35-d9-eb-00-fb-1a')
CODECAPI_AVEncStatAverageBPS = Guid('ca6724db-7059-4351-8b-43-f8-21-98-82-6a-14')
CODECAPI_AVEncStatCommonCompletedPasses = Guid('3e5de533-9df7-438c-85-4f-9f-7d-d3-68-3d-34')
CODECAPI_AVEncStatHardwareBandwidthUtilitization = Guid('0124ba9b-dc41-4826-b4-5f-18-ac-01-b3-d5-a8')
CODECAPI_AVEncStatHardwareProcessorUtilitization = Guid('995dc027-cb95-49e6-b9-1b-59-67-75-3c-dc-b8')
CODECAPI_AVEncStatMPVSkippedEmptyFrames = Guid('32195fd3-590d-4812-a7-ed-6d-63-9a-1f-97-11')
CODECAPI_AVEncStatVideoCodedFrames = Guid('d47f8d61-6f5a-4a26-bb-9f-cd-95-18-46-2b-cd')
CODECAPI_AVEncStatVideoOutputFrameRate = Guid('be747849-9ab4-4a63-98-fe-f1-43-f0-4f-8e-e9')
CODECAPI_AVEncStatVideoTotalFrames = Guid('fdaa9916-119a-4222-9a-d6-3f-7c-ab-99-cc-8b')
CODECAPI_AVEncStatWMVCBAvg = Guid('6aa6229f-d602-4b9d-b6-8c-c1-ad-78-88-4b-ef')
CODECAPI_AVEncStatWMVCBMax = Guid('e976bef8-00fe-44b4-b6-25-8f-23-8b-c0-34-99')
CODECAPI_AVEncStatWMVDecoderComplexityProfile = Guid('89e69fc3-0f9b-436c-97-4a-df-82-12-27-c9-0d')
CODECAPI_AVEncVideoCBRMotionTradeoff = Guid('0d49451e-18d5-4367-a4-ef-32-40-df-16-93-c4')
CODECAPI_AVEncVideoCodedVideoAccessUnitSize = Guid('b4b10c15-14a7-4ce8-b1-73-dc-90-a0-b4-fc-db')
CODECAPI_AVEncVideoContentType = Guid('66117aca-eb77-459d-93-0c-a4-8d-9d-06-83-fc')
CODECAPI_AVEncVideoCTBSize = Guid('d47db8b2-e73b-4cb9-8c-3e-bd-87-7d-06-d7-7b')
CODECAPI_AVEncVideoDefaultUpperFieldDominant = Guid('810167c4-0bc1-47ca-8f-c2-57-05-5a-14-74-a5')
CODECAPI_AVEncVideoDirtyRectEnabled = Guid('8acb8fdd-5e0c-4c66-87-29-b8-f6-29-ab-04-fb')
CODECAPI_AVEncVideoDisplayDimension = Guid('de053668-f4ec-47a9-86-d0-83-67-70-f0-c1-d5')
CODECAPI_AVEncVideoEncodeDimension = Guid('1074df28-7e0f-47a4-a4-53-cd-d7-38-70-f5-ce')
CODECAPI_AVEncVideoEncodeFrameTypeQP = Guid('aa70b610-e03f-450c-ad-07-07-31-4e-63-9c-e7')
CODECAPI_AVEncVideoEncodeOffsetOrigin = Guid('6bc098fe-a71a-4454-85-2e-4d-2d-de-b2-cd-24')
CODECAPI_AVEncVideoEncodeQP = Guid('2cb5696b-23fb-4ce1-a0-f9-ef-5b-90-fd-55-ca')
CODECAPI_AVEncVideoFieldSwap = Guid('fefd7569-4e0a-49f2-9f-2b-36-0e-a4-8c-19-a2')
CODECAPI_AVEncVideoForceKeyFrame = Guid('398c1b98-8353-475a-9e-f2-8f-26-5d-26-03-45')
CODECAPI_AVEncVideoForceSourceScanType = Guid('1ef2065f-058a-4765-a4-fc-8a-86-4c-10-30-12')
CODECAPI_AVEncVideoGradualIntraRefresh = Guid('8f347dee-cb0d-49ba-b4-62-db-69-27-ee-21-01')
CODECAPI_AVEncVideoHeaderDropFrame = Guid('6ed9e124-7925-43fe-97-1b-e0-19-f6-22-22-b4')
CODECAPI_AVEncVideoHeaderFrames = Guid('afd5f567-5c1b-4adc-bd-af-73-56-10-38-14-36')
CODECAPI_AVEncVideoHeaderHours = Guid('2acc7702-e2da-4158-bf-9b-88-88-01-29-d7-40')
CODECAPI_AVEncVideoHeaderMinutes = Guid('dc1a99ce-0307-408b-88-0b-b8-34-8e-e8-ca-7f')
CODECAPI_AVEncVideoHeaderSeconds = Guid('4a2e1a05-a780-4f58-81-20-9a-44-9d-69-65-6b')
CODECAPI_AVEncVideoInputChromaResolution = Guid('bb0cec33-16f1-47b0-8a-88-37-81-5b-ee-17-39')
CODECAPI_AVEncVideoInputChromaSubsampling = Guid('a8e73a39-4435-4ec3-a6-ea-98-30-0f-4b-36-f7')
CODECAPI_AVEncVideoInputColorLighting = Guid('46a99549-0015-4a45-9c-30-1d-5c-fa-25-83-16')
CODECAPI_AVEncVideoInputColorNominalRange = Guid('16cf25c6-a2a6-48e9-ae-80-21-ae-c4-1d-42-7e')
CODECAPI_AVEncVideoInputColorPrimaries = Guid('c24d783f-7ce6-4278-90-ab-28-a4-f1-e5-f8-6c')
CODECAPI_AVEncVideoInputColorTransferFunction = Guid('8c056111-a9c3-4b08-a0-a0-ce-13-f8-a2-7c-75')
CODECAPI_AVEncVideoInputColorTransferMatrix = Guid('52ed68b9-72d5-4089-95-8d-f5-40-5d-55-08-1c')
CODECAPI_AVEncVideoInstantTemporalUpSwitching = Guid('a3308307-0d96-4ba4-b1-f0-b9-1a-5e-49-df-10')
CODECAPI_AVEncVideoIntraLayerPrediction = Guid('d3af46b8-bf47-44bb-a2-83-69-f0-b0-22-8f-f9')
CODECAPI_AVEncVideoInverseTelecineEnable = Guid('2ea9098b-e76d-4ccd-a0-30-d3-b8-89-c1-b6-4c')
CODECAPI_AVEncVideoInverseTelecineThreshold = Guid('40247d84-e895-497f-b4-4c-b7-45-60-ac-fe-27')
CODECAPI_AVEncVideoLTRBufferControl = Guid('a4a0e93d-4cbc-444c-89-f4-82-6d-31-0e-92-a7')
CODECAPI_AVEncVideoMarkLTRFrame = Guid('e42f4748-a06d-4ef9-8c-ea-3d-05-fd-e3-bd-3b')
CODECAPI_AVEncVideoMaxCTBSize = Guid('822363ff-cec8-43e5-92-fd-e0-97-48-84-85-e9')
CODECAPI_AVEncVideoMaxKeyframeDistance = Guid('2987123a-ba93-4704-b4-89-ec-1e-5f-25-29-2c')
CODECAPI_AVEncVideoMaxNumRefFrame = Guid('964829ed-94f9-43b4-b7-4d-ef-40-94-4b-69-a0')
CODECAPI_AVEncVideoMaxQP = Guid('3daf6f66-a6a7-45e0-a8-e5-f2-74-3f-46-a3-a2')
CODECAPI_AVEncVideoMaxTemporalLayers = Guid('9c668cfe-08e1-424a-93-4e-b7-64-b0-64-80-2a')
CODECAPI_AVEncVideoMeanAbsoluteDifference = Guid('e5c0c10f-81a4-422d-8c-3f-b4-74-a4-58-13-36')
CODECAPI_AVEncVideoMinQP = Guid('0ee22c6a-a37c-4568-b5-f1-9d-4c-2b-3a-b8-86')
CODECAPI_AVEncVideoNoOfFieldsToEncode = Guid('61e4bbe2-4ee0-40e7-80-ab-51-dd-ee-be-62-91')
CODECAPI_AVEncVideoNoOfFieldsToSkip = Guid('a97e1240-1427-4c16-a7-f7-3d-cf-d8-ba-4c-c5')
CODECAPI_AVEncVideoNumGOPsPerIDR = Guid('83bc5bdb-5b89-4521-8f-66-33-15-1c-37-31-76')
CODECAPI_AVEncVideoOutputChromaResolution = Guid('6097b4c9-7c1d-4e64-bf-cc-9e-97-65-31-8a-e7')
CODECAPI_AVEncVideoOutputChromaSubsampling = Guid('fa561c6c-7d17-44f0-83-c9-32-ed-12-e9-63-43')
CODECAPI_AVEncVideoOutputColorLighting = Guid('0e5aaac6-ace6-4c5c-99-8e-1a-8c-9c-6c-0f-89')
CODECAPI_AVEncVideoOutputColorNominalRange = Guid('972835ed-87b5-4e95-95-00-c7-39-58-56-6e-54')
CODECAPI_AVEncVideoOutputColorPrimaries = Guid('be95907c-9d04-4921-89-85-a6-d6-d8-7d-1a-6c')
CODECAPI_AVEncVideoOutputColorTransferFunction = Guid('4a7f884a-ea11-460d-bf-57-b8-8b-c7-59-00-de')
CODECAPI_AVEncVideoOutputColorTransferMatrix = Guid('a9b90444-af40-4310-8f-be-ed-6d-93-3f-89-2b')
CODECAPI_AVEncVideoOutputFrameRate = Guid('ea85e7c3-9567-4d99-87-c4-02-c1-c2-78-ca-7c')
CODECAPI_AVEncVideoOutputFrameRateConversion = Guid('8c068bf4-369a-4ba3-82-fd-b2-51-8f-b3-39-6e')
CODECAPI_AVEncVideoOutputScanType = Guid('460b5576-842e-49ab-a6-2d-b3-6f-73-12-c9-db')
CODECAPI_AVEncVideoPixelAspectRatio = Guid('3cdc718f-b3e9-4eb6-a5-7f-cf-1f-1b-32-1b-87')
CODECAPI_AVEncVideoRateControlParams = Guid('87d43767-7645-44ec-b4-38-d3-32-2f-bc-a2-9f')
CODECAPI_AVEncVideoROIEnabled = Guid('d74f7f18-44dd-4b85-ab-a3-05-d9-f4-2a-82-80')
CODECAPI_AVEncVideoSelectLayer = Guid('eb1084f5-6aaa-4914-bb-2f-61-47-22-7f-12-e7')
CODECAPI_AVEncVideoSourceFilmContent = Guid('1791c64b-ccfc-4827-a0-ed-25-57-79-3b-2b-1c')
CODECAPI_AVEncVideoSourceIsBW = Guid('42ffc49b-1812-4fdc-8d-24-70-54-c5-21-e6-eb')
CODECAPI_AVEncVideoSupportedControls = Guid('d3f40fdd-77b9-473d-81-96-06-12-59-e6-9c-ff')
CODECAPI_AVEncVideoTemporalLayerCount = Guid('19caebff-b74d-4cfd-8c-27-c2-f9-d9-7d-5f-52')
CODECAPI_AVEncVideoUsage = Guid('1f636849-5dc1-49f1-b1-d8-ce-3c-f6-2e-a3-85')
CODECAPI_AVEncVideoUseLTRFrame = Guid('00752db8-55f7-4f80-89-5b-27-63-91-95-f2-ad')
CODECAPI_AVEncWMVDecoderComplexity = Guid('f32c0dab-f3cb-4217-b7-9f-87-62-76-8b-5f-67')
CODECAPI_AVEncWMVInterlacedEncoding = Guid('e3d00f8a-c6f5-4e14-a5-88-0e-c8-7a-72-6f-9b')
CODECAPI_AVEncWMVKeyFrameBufferLevelMarker = Guid('51ff1115-33ac-426c-a1-b1-09-32-1b-df-96-b4')
CODECAPI_AVEncWMVKeyFrameDistance = Guid('5569055e-e268-4771-b8-3e-95-55-ea-28-ae-d3')
CODECAPI_AVEncWMVProduceDummyFrames = Guid('d669d001-183c-42e3-a3-ca-2f-45-86-d2-39-6c')
CODECAPI_AVLowLatencyMode = Guid('9c27891a-ed7a-40e1-88-e8-b2-27-27-a0-24-ee')
CODECAPI_AVPriorityControl = Guid('54ba3dc8-bdde-4329-b1-87-20-18-bc-5c-2b-a1')
CODECAPI_AVRealtimeControl = Guid('6f440632-c4ad-4bf7-9e-52-45-69-42-b4-54-b0')
CODECAPI_AVScenarioInfo = Guid('b28a6e64-3ff9-446a-8a-4b-0d-7a-53-41-32-36')
CODECAPI_GetOPMContext = Guid('2f036c05-4c14-4689-88-39-29-4c-6d-73-e0-53')
CODECAPI_GUID_AVDecAudioInputAAC = Guid('97df7828-b94a-47e2-a4-bc-51-19-4d-b2-2a-4d')
CODECAPI_GUID_AVDecAudioInputDolby = Guid('8e4228a0-f000-4e0b-8f-54-ab-8d-24-ad-61-a2')
CODECAPI_GUID_AVDecAudioInputDolbyDigitalPlus = Guid('0803e185-8f5d-47f5-99-08-19-a5-bb-c9-fe-34')
CODECAPI_GUID_AVDecAudioInputDTS = Guid('600bc0ca-6a1f-4e91-b2-41-1b-be-b1-cb-19-e0')
CODECAPI_GUID_AVDecAudioInputHEAAC = Guid('16efb4aa-330e-4f5c-98-a8-cf-6a-c5-5c-be-60')
CODECAPI_GUID_AVDecAudioInputMPEG = Guid('91106f36-02c5-4f75-97-19-3b-7a-bf-75-e1-f6')
CODECAPI_GUID_AVDecAudioInputPCM = Guid('f2421da5-bbb4-4cd5-a9-96-93-3c-6b-5d-13-47')
CODECAPI_GUID_AVDecAudioInputWMA = Guid('c95e8dcf-4058-4204-8c-42-cb-24-d9-1e-4b-9b')
CODECAPI_GUID_AVDecAudioInputWMAPro = Guid('0128b7c7-da72-4fe3-be-f8-5c-52-e3-55-77-04')
CODECAPI_GUID_AVDecAudioOutputFormat_PCM = Guid('696e1d31-548f-4036-82-5f-70-26-c6-00-11-bd')
CODECAPI_GUID_AVDecAudioOutputFormat_PCM_Headphones = Guid('696e1d34-548f-4036-82-5f-70-26-c6-00-11-bd')
CODECAPI_GUID_AVDecAudioOutputFormat_PCM_Stereo_Auto = Guid('696e1d35-548f-4036-82-5f-70-26-c6-00-11-bd')
CODECAPI_GUID_AVDecAudioOutputFormat_PCM_Stereo_MatrixEncoded = Guid('696e1d30-548f-4036-82-5f-70-26-c6-00-11-bd')
CODECAPI_GUID_AVDecAudioOutputFormat_SPDIF_Bitstream = Guid('696e1d33-548f-4036-82-5f-70-26-c6-00-11-bd')
CODECAPI_GUID_AVDecAudioOutputFormat_SPDIF_PCM = Guid('696e1d32-548f-4036-82-5f-70-26-c6-00-11-bd')
CODECAPI_GUID_AVEncCommonFormatATSC = Guid('8d7b897c-a019-4670-aa-76-2e-dc-ac-7a-c2-96')
CODECAPI_GUID_AVEncCommonFormatDVB = Guid('71830d8f-6c33-430d-84-4b-c2-70-5b-aa-e6-db')
CODECAPI_GUID_AVEncCommonFormatDVD_DashVR = Guid('e55199d6-044c-4dae-a4-88-53-1e-d3-06-23-5b')
CODECAPI_GUID_AVEncCommonFormatDVD_PlusVR = Guid('e74c6f2e-ec37-478d-9a-f4-a5-e1-35-b6-27-1c')
CODECAPI_GUID_AVEncCommonFormatDVD_V = Guid('cc9598c4-e7fe-451d-b1-ca-76-1b-c8-40-b7-f3')
CODECAPI_GUID_AVEncCommonFormatHighMAT = Guid('1eabe760-fb2b-4928-90-d1-78-db-88-ee-e8-89')
CODECAPI_GUID_AVEncCommonFormatHighMPV = Guid('a2d25db8-b8f9-42c2-8b-c7-0b-93-cf-60-47-88')
CODECAPI_GUID_AVEncCommonFormatMP3 = Guid('349733cd-eb08-4dc2-81-97-e4-98-35-ef-82-8b')
CODECAPI_GUID_AVEncCommonFormatSVCD = Guid('51d85818-8220-448c-80-66-d6-9b-ed-16-c9-ad')
CODECAPI_GUID_AVEncCommonFormatUnSpecified = Guid('af46a35a-6024-4525-a4-8a-09-4b-97-f5-b3-c2')
CODECAPI_GUID_AVEncCommonFormatVCD = Guid('95035bf7-9d90-40ff-ad-5c-5c-f8-cf-71-ca-1d')
CODECAPI_GUID_AVEncDolbyDigitalConsumer = Guid('c1a7bf6c-0059-4bfa-94-ef-ef-74-7a-76-8d-52')
CODECAPI_GUID_AVEncDolbyDigitalPlus = Guid('698d1b80-f7dd-415c-97-1c-42-49-2a-20-56-c6')
CODECAPI_GUID_AVEncDolbyDigitalPro = Guid('f5be76cc-0ff8-40eb-9c-b1-bb-a9-40-04-d4-4f')
CODECAPI_GUID_AVEncDTS = Guid('45fbcaa2-5e6e-4ab0-88-93-59-03-be-e9-3a-cf')
CODECAPI_GUID_AVEncDTSHD = Guid('2052e630-469d-4bfb-80-ca-1d-65-6e-7e-91-8f')
CODECAPI_GUID_AVEncDV = Guid('09b769c7-3329-44fb-89-54-fa-30-93-7d-3d-5a')
CODECAPI_GUID_AVEncH264Video = Guid('95044eab-31b3-47de-8e-75-38-a4-2b-b0-3e-28')
CODECAPI_GUID_AVEncMLP = Guid('05f73e29-f0d1-431e-a4-1c-a4-74-32-ec-5a-66')
CODECAPI_GUID_AVEncMPEG1Audio = Guid('d4dd1362-cd4a-4cd6-81-38-b9-4d-b4-54-2b-04')
CODECAPI_GUID_AVEncMPEG1Video = Guid('c8dafefe-da1e-4774-b2-7d-11-83-0c-16-b1-fe')
CODECAPI_GUID_AVEncMPEG2Audio = Guid('ee4cbb1f-9c3f-4770-92-b5-fc-b7-c2-a8-d3-81')
CODECAPI_GUID_AVEncMPEG2Video = Guid('046dc19a-6677-4aaa-a3-1d-c1-ab-71-6f-45-60')
CODECAPI_GUID_AVEncPCM = Guid('844be7f4-26cf-4779-b3-86-cc-05-d1-87-99-0c')
CODECAPI_GUID_AVEncSDDS = Guid('1dc1b82f-11c8-4c71-b7-b6-ee-3e-b9-bc-2b-94')
CODECAPI_GUID_AVEncWMALossless = Guid('55ca7265-23d8-4761-90-31-b7-4f-be-12-f4-c1')
CODECAPI_GUID_AVEncWMAPro = Guid('1955f90c-33f7-4a68-ab-81-53-f5-65-71-25-c4')
CODECAPI_GUID_AVEncWMAVoice = Guid('13ed18cb-50e8-4276-a2-88-a6-aa-22-83-82-d9')
CODECAPI_GUID_AVEncWMV = Guid('4e0fef9b-1d43-41bd-b8-bd-4d-7b-f7-45-7a-2a')
CODECAPI_GUID_AVEndMPEG4Video = Guid('dd37b12a-9503-4f8b-b8-d0-32-4a-00-c0-a1-cf')
CODECAPI_SetHDCPManagerContext = Guid('6d2d1fc8-3dc9-47eb-a1-a2-47-1c-80-cd-60-d0')
CODECAPI_VideoEncoderDisplayContentType = Guid('79b90b27-f4b1-42dc-9d-d7-cd-af-81-35-c4-00')
def _define_CodecAPIEventData_head():
    class CodecAPIEventData(Structure):
        pass
    return CodecAPIEventData
def _define_CodecAPIEventData():
    CodecAPIEventData = win32more.Media.MediaFoundation.CodecAPIEventData_head
    CodecAPIEventData._fields_ = [
        ('guid', Guid),
        ('dataLength', UInt32),
        ('reserved', UInt32 * 3),
    ]
    return CodecAPIEventData
CPK_DS_AC3Decoder = Guid('6c9c69d6-0ffc-4481-af-db-cd-f1-c7-9c-6f-3e')
CPK_DS_MPEG2Decoder = Guid('9910c5cd-95c9-4e06-86-5a-ef-a1-c8-01-6b-f4')
CResamplerMediaObject = Guid('f447b69e-1884-4a7e-80-55-34-6f-74-d6-ed-b3')
CResizerDMO = Guid('1ea1ea14-48f4-4054-ad-1a-e8-ae-e1-0a-c8-05')
CResizerMediaObject = Guid('d3ec8b8b-7728-4fd8-9f-e0-7b-67-d1-9f-73-a3')
CShotDetectorDmo = Guid('56aefacd-110c-4397-92-92-b0-a0-c6-1b-67-50')
CSmpteTransformsDmo = Guid('bde6388b-da25-485d-ba-7f-fa-bc-28-b2-03-18')
CThumbnailGeneratorDmo = Guid('559c6bad-1ea8-4963-a0-87-8a-68-10-f9-21-8b')
CTocGeneratorDmo = Guid('4dda1941-77a0-4fb1-a5-18-e2-18-50-41-d7-0c')
CVodafoneAACCCDecMediaObject = Guid('7e76bf7f-c993-4e26-8f-ab-47-0a-70-c0-d5-9c')
CVodafoneAACDecMediaObject = Guid('7f36f942-dcf3-4d82-92-89-5b-18-20-27-8f-7c')
CWMADecMediaObject = Guid('2eeb4adf-4578-4d10-bc-a7-bb-95-5f-56-32-0a')
CWMAEncMediaObject = Guid('70f598e9-f4ab-495a-99-e2-a7-c4-d3-d8-9a-bf')
CWMATransMediaObject = Guid('edcad9cb-3127-40df-b5-27-01-52-cc-b3-f6-f5')
CWMAudioAEC = Guid('745057c7-f353-4f2d-a7-ee-58-43-44-77-73-0e')
CWMAudioCAPXGFXAPO = Guid('13ab3ebd-137e-4903-9d-89-60-be-82-77-fd-17')
CWMAudioCAPXLFXAPO = Guid('c9453e73-8c5c-4463-99-84-af-8b-ab-2f-54-47')
CWMAudioGFXAPO = Guid('637c490d-eee3-4c0a-97-3f-37-19-58-80-2d-a2')
CWMAudioLFXAPO = Guid('62dc1a93-ae24-464c-a4-3e-45-2f-82-4c-42-50')
CWMAudioSpdTxDMO = Guid('5210f8e4-b0bb-47c3-a8-d9-7b-22-82-cc-79-ed')
CWMSPDecMediaObject = Guid('874131cb-4ecc-443b-89-48-74-6b-89-59-5d-20')
CWMSPEncMediaObject = Guid('67841b03-c689-4188-ad-3f-4c-9e-be-ec-71-0b')
CWMSPEncMediaObject2 = Guid('1f1f4e1a-2252-4063-84-bb-ee-e7-5f-88-56-d5')
CWMTDecMediaObject = Guid('f9dbc64e-2dd0-45dd-9b-52-66-64-2e-f9-44-31')
CWMTEncMediaObject = Guid('60b67652-e46b-4e44-86-09-f7-4b-ff-dc-08-3c')
CWMV9EncMediaObject = Guid('d23b90d0-144f-46bd-84-1d-59-e4-eb-19-dc-59')
CWMVDecMediaObject = Guid('82d353df-90bd-4382-8b-c2-3f-61-92-b7-6e-34')
CWMVEncMediaObject2 = Guid('96b57cdd-8966-410c-bb-1f-c9-7e-ea-76-5c-04')
CWMVXEncMediaObject = Guid('7e320092-596a-41b2-bb-eb-17-5d-10-50-4e-b6')
CWVC1DecMediaObject = Guid('c9bfbccf-e60e-4588-a3-df-5a-03-b1-fd-95-85')
CWVC1EncMediaObject = Guid('44653d0d-8cca-41e7-ba-ca-88-43-37-b7-47-ac')
CZuneAACCCDecMediaObject = Guid('a74e98f2-52d6-4b4e-88-5b-e0-a6-ca-4f-18-7a')
CZuneM4S2DecMediaObject = Guid('c56fc25c-0fc6-404a-95-03-b1-0b-f5-1a-8a-b9')
D3D12_BITSTREAM_ENCRYPTION_TYPE = Int32
D3D12_BITSTREAM_ENCRYPTION_TYPE_NONE = 0
def _define_D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE_head():
    class D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE
def _define_D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE():
    D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE_head
    D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE._fields_ = [
        ('IOCoherent', win32more.Foundation.BOOL),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT_head():
    class D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT():
    D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT_head
    D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT._fields_ = [
        ('NodeIndex', UInt32),
        ('Configuration', win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION),
        ('DecodeSample', win32more.Media.MediaFoundation.D3D12_VIDEO_SAMPLE),
        ('OutputFormat', win32more.Media.MediaFoundation.D3D12_VIDEO_FORMAT),
        ('FrameRate', win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
        ('BitRate', UInt32),
        ('SupportFlags', win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS),
        ('ScaleSupport', win32more.Media.MediaFoundation.D3D12_VIDEO_SCALE_SUPPORT),
    ]
    return D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT_head():
    class D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT():
    D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT_head
    D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT._fields_ = [
        ('NodeIndex', UInt32),
        ('Configuration', win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION),
        ('FormatCount', UInt32),
    ]
    return D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS_head():
    class D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS():
    D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS_head
    D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS._fields_ = [
        ('NodeIndex', UInt32),
        ('Configuration', win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION),
        ('FormatCount', UInt32),
        ('pOutputFormats', POINTER(win32more.Graphics.Dxgi.Common.DXGI_FORMAT)),
    ]
    return D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM_head():
    class D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM():
    D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM_head
    D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM._fields_ = [
        ('NodeIndex', UInt32),
        ('DecodeProfile', Guid),
        ('Width', UInt32),
        ('Height', UInt32),
        ('DecodeFormat', win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ('Components', win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS),
        ('BinCount', UInt32),
        ('CounterBitDepth', UInt32),
    ]
    return D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT_head():
    class D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT():
    D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT_head
    D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT._fields_ = [
        ('NodeIndex', UInt32),
        ('ProfileCount', UInt32),
    ]
    return D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES_head():
    class D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES():
    D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES_head
    D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES._fields_ = [
        ('NodeIndex', UInt32),
        ('ProfileCount', UInt32),
        ('pProfiles', POINTER(Guid)),
    ]
    return D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES_head():
    class D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES():
    D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES_head
    D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES._fields_ = [
        ('NodeIndex', UInt32),
        ('Configuration', win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION),
        ('SupportFlags', win32more.Media.MediaFoundation.D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS),
    ]
    return D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT_head():
    class D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT():
    D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT_head
    D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT._fields_ = [
        ('NodeIndex', UInt32),
        ('Configuration', win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION),
        ('Width', UInt32),
        ('Height', UInt32),
        ('DecodeFormat', win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ('FrameRate', win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
        ('BitRate', UInt32),
        ('SupportFlags', win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_SUPPORT_FLAGS),
        ('ConfigurationFlags', win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS),
        ('DecodeTier', win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_TIER),
    ]
    return D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE_head():
    class D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE
def _define_D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE():
    D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE_head
    D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE._fields_ = [
        ('VideoDecoderHeapDesc', win32more.Media.MediaFoundation.D3D12_VIDEO_DECODER_HEAP_DESC),
        ('MemoryPoolL0Size', UInt64),
        ('MemoryPoolL1Size', UInt64),
    ]
    return D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE
def _define_D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1_head():
    class D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1
def _define_D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1():
    D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1 = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1_head
    D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1._fields_ = [
        ('VideoDecoderHeapDesc', win32more.Media.MediaFoundation.D3D12_VIDEO_DECODER_HEAP_DESC),
        ('Protected', win32more.Foundation.BOOL),
        ('MemoryPoolL0Size', UInt64),
        ('MemoryPoolL1Size', UInt64),
    ]
    return D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC._fields_ = [
        ('NodeIndex', UInt32),
        ('Codec', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ('IsSupported', win32more.Foundation.BOOL),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT._fields_ = [
        ('NodeIndex', UInt32),
        ('Codec', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ('Profile', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC),
        ('IsSupported', win32more.Foundation.BOOL),
        ('CodecSupportLimits', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT._fields_ = [
        ('NodeIndex', UInt32),
        ('Codec', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ('Profile', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC),
        ('IsSupported', win32more.Foundation.BOOL),
        ('PictureSupport', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE._fields_ = [
        ('NodeIndex', UInt32),
        ('Codec', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ('Profile', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC),
        ('Level', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING),
        ('SubregionMode', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE),
        ('IsSupported', win32more.Foundation.BOOL),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE._fields_ = [
        ('HeapDesc', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_HEAP_DESC),
        ('IsSupported', win32more.Foundation.BOOL),
        ('MemoryPoolL0Size', UInt64),
        ('MemoryPoolL1Size', UInt64),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT._fields_ = [
        ('NodeIndex', UInt32),
        ('Codec', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ('Profile', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC),
        ('Format', win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ('IsSupported', win32more.Foundation.BOOL),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE._fields_ = [
        ('NodeIndex', UInt32),
        ('Codec', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ('Profile', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC),
        ('Level', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING),
        ('IntraRefreshMode', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE),
        ('IsSupported', win32more.Foundation.BOOL),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION._fields_ = [
        ('NodeIndex', UInt32),
        ('Codec', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ('ResolutionRatiosCount', UInt32),
        ('IsSupported', win32more.Foundation.BOOL),
        ('MinResolutionSupported', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC),
        ('MaxResolutionSupported', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC),
        ('ResolutionWidthMultipleRequirement', UInt32),
        ('ResolutionHeightMultipleRequirement', UInt32),
        ('pResolutionRatios', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC_head)),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT._fields_ = [
        ('NodeIndex', UInt32),
        ('Codec', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ('ResolutionRatiosCount', UInt32),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL._fields_ = [
        ('NodeIndex', UInt32),
        ('Codec', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ('Profile', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC),
        ('IsSupported', win32more.Foundation.BOOL),
        ('MinSupportedLevel', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING),
        ('MaxSupportedLevel', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE._fields_ = [
        ('NodeIndex', UInt32),
        ('Codec', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ('RateControlMode', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE),
        ('IsSupported', win32more.Foundation.BOOL),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS._fields_ = [
        ('MaxSubregionsNumber', UInt32),
        ('MaxIntraRefreshFrameDuration', UInt32),
        ('SubregionBlockPixelsSize', UInt32),
        ('QPMapRegionPixelsSize', UInt32),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS._fields_ = [
        ('NodeIndex', UInt32),
        ('Codec', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ('Profile', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC),
        ('InputFormat', win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ('PictureTargetResolution', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC),
        ('IsSupported', win32more.Foundation.BOOL),
        ('CompressedBitstreamBufferAccessAlignment', UInt32),
        ('EncoderMetadataBufferAccessAlignment', UInt32),
        ('MaxEncoderOutputMetadataBufferSize', UInt32),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT_head():
    class D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT():
    D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT_head
    D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT._fields_ = [
        ('NodeIndex', UInt32),
        ('Codec', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ('InputFormat', win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ('CodecConfiguration', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION),
        ('CodecGopSequence', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE),
        ('RateControl', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL),
        ('IntraRefresh', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE),
        ('SubregionFrameEncoding', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE),
        ('ResolutionsListCount', UInt32),
        ('pResolutionList', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC_head)),
        ('MaxReferenceFramesInDPB', UInt32),
        ('ValidationFlags', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_VALIDATION_FLAGS),
        ('SupportFlags', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SUPPORT_FLAGS),
        ('SuggestedProfile', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC),
        ('SuggestedLevel', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING),
        ('pResolutionDependentSupport', POINTER(win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS_head)),
    ]
    return D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT_head():
    class D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT
def _define_D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT():
    D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT_head
    D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT._fields_ = [
        ('NodeIndex', UInt32),
        ('CommandCount', UInt32),
    ]
    return D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT
def _define_D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT_head():
    class D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT
def _define_D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT():
    D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT_head
    D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT._fields_ = [
        ('CommandId', Guid),
        ('Stage', win32more.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE),
        ('ParameterCount', UInt32),
        ('ParameterPacking', UInt32),
    ]
    return D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT
def _define_D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS_head():
    class D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS
def _define_D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS():
    D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS_head
    D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS._fields_ = [
        ('CommandId', Guid),
        ('Stage', win32more.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE),
        ('ParameterCount', UInt32),
        ('pParameterInfos', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO_head)),
    ]
    return D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS
def _define_D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE_head():
    class D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE
def _define_D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE():
    D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE_head
    D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE._fields_ = [
        ('NodeIndex', UInt32),
        ('CommandId', Guid),
        ('pCreationParameters', c_void_p),
        ('CreationParametersSizeInBytes', UIntPtr),
        ('MemoryPoolL0Size', UInt64),
        ('MemoryPoolL1Size', UInt64),
    ]
    return D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE
def _define_D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT_head():
    class D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT():
    D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT_head
    D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT._fields_ = [
        ('NodeIndex', UInt32),
        ('CommandId', Guid),
        ('pInputData', c_void_p),
        ('InputDataSizeInBytes', UIntPtr),
        ('pOutputData', c_void_p),
        ('OutputDataSizeInBytes', UIntPtr),
    ]
    return D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS_head():
    class D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS
def _define_D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS():
    D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS_head
    D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS._fields_ = [
        ('NodeIndex', UInt32),
        ('CommandCount', UInt32),
        ('pCommandInfos', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_INFO_head)),
    ]
    return D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS
def _define_D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT_head():
    class D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT():
    D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT_head
    D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT._fields_ = [
        ('NodeIndex', UInt32),
        ('VideoDecodeSupport', win32more.Foundation.BOOL),
        ('VideoProcessSupport', win32more.Foundation.BOOL),
        ('VideoEncodeSupport', win32more.Foundation.BOOL),
    ]
    return D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_head():
    class D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR
def _define_D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR():
    D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_head
    D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR._fields_ = [
        ('NodeIndex', UInt32),
        ('InputFormat', win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ('BlockSizeFlags', win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS),
        ('PrecisionFlags', win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS),
        ('SizeRange', win32more.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE),
    ]
    return D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR
def _define_D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES_head():
    class D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES
def _define_D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES():
    D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES_head
    D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES._fields_ = [
        ('NodeIndex', UInt32),
        ('SupportFlags', win32more.Media.MediaFoundation.D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS),
    ]
    return D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES
def _define_D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE_head():
    class D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE
def _define_D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE():
    D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE_head
    D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE._fields_ = [
        ('NodeIndex', UInt32),
        ('InputFormat', win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ('BlockSize', win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE),
        ('Precision', win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION),
        ('SizeRange', win32more.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE),
        ('Protected', win32more.Foundation.BOOL),
        ('MotionVectorHeapMemoryPoolL0Size', UInt64),
        ('MotionVectorHeapMemoryPoolL1Size', UInt64),
        ('MotionEstimatorMemoryPoolL0Size', UInt64),
        ('MotionEstimatorMemoryPoolL1Size', UInt64),
    ]
    return D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE
def _define_D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS_head():
    class D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS
def _define_D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS():
    D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS_head
    D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS._fields_ = [
        ('NodeIndex', UInt32),
        ('MaxInputStreams', UInt32),
    ]
    return D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS
def _define_D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES_head():
    class D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES
def _define_D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES():
    D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES_head
    D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES._fields_ = [
        ('NodeIndex', UInt32),
        ('SupportFlags', win32more.Media.MediaFoundation.D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS),
    ]
    return D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES
def _define_D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO_head():
    class D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO
def _define_D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO():
    D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO_head
    D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO._fields_ = [
        ('NodeIndex', UInt32),
        ('DeinterlaceMode', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS),
        ('Filters', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FILTER_FLAGS),
        ('FeatureSupport', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FEATURE_FLAGS),
        ('InputFrameRate', win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
        ('OutputFrameRate', win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
        ('EnableAutoProcessing', win32more.Foundation.BOOL),
        ('PastFrames', UInt32),
        ('FutureFrames', UInt32),
    ]
    return D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO
def _define_D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT_head():
    class D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT():
    D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT_head
    D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT._fields_ = [
        ('NodeIndex', UInt32),
        ('InputSample', win32more.Media.MediaFoundation.D3D12_VIDEO_SAMPLE),
        ('InputFieldType', win32more.Media.MediaFoundation.D3D12_VIDEO_FIELD_TYPE),
        ('InputStereoFormat', win32more.Media.MediaFoundation.D3D12_VIDEO_FRAME_STEREO_FORMAT),
        ('InputFrameRate', win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
        ('OutputFormat', win32more.Media.MediaFoundation.D3D12_VIDEO_FORMAT),
        ('OutputStereoFormat', win32more.Media.MediaFoundation.D3D12_VIDEO_FRAME_STEREO_FORMAT),
        ('OutputFrameRate', win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
        ('SupportFlags', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_SUPPORT_FLAGS),
        ('ScaleSupport', win32more.Media.MediaFoundation.D3D12_VIDEO_SCALE_SUPPORT),
        ('FeatureSupport', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FEATURE_FLAGS),
        ('DeinterlaceSupport', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS),
        ('AutoProcessingSupport', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS),
        ('FilterSupport', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FILTER_FLAGS),
        ('FilterRangeSupport', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FILTER_RANGE * 32),
    ]
    return D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT
def _define_D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE_head():
    class D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE
def _define_D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE():
    D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE_head
    D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE._fields_ = [
        ('NodeMask', UInt32),
        ('pOutputStreamDesc', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC_head)),
        ('NumInputStreamDescs', UInt32),
        ('pInputStreamDescs', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC_head)),
        ('MemoryPoolL0Size', UInt64),
        ('MemoryPoolL1Size', UInt64),
    ]
    return D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE
def _define_D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1_head():
    class D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1(Structure):
        pass
    return D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1
def _define_D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1():
    D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1 = win32more.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1_head
    D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1._fields_ = [
        ('NodeMask', UInt32),
        ('pOutputStreamDesc', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC_head)),
        ('NumInputStreamDescs', UInt32),
        ('pInputStreamDescs', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC_head)),
        ('Protected', win32more.Foundation.BOOL),
        ('MemoryPoolL0Size', UInt64),
        ('MemoryPoolL1Size', UInt64),
    ]
    return D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1
D3D12_FEATURE_VIDEO = Int32
D3D12_FEATURE_VIDEO_DECODE_SUPPORT = 0
D3D12_FEATURE_VIDEO_DECODE_PROFILES = 1
D3D12_FEATURE_VIDEO_DECODE_FORMATS = 2
D3D12_FEATURE_VIDEO_DECODE_CONVERSION_SUPPORT = 3
D3D12_FEATURE_VIDEO_PROCESS_SUPPORT = 5
D3D12_FEATURE_VIDEO_PROCESS_MAX_INPUT_STREAMS = 6
D3D12_FEATURE_VIDEO_PROCESS_REFERENCE_INFO = 7
D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE = 8
D3D12_FEATURE_VIDEO_PROCESSOR_SIZE = 9
D3D12_FEATURE_VIDEO_DECODE_PROFILE_COUNT = 10
D3D12_FEATURE_VIDEO_DECODE_FORMAT_COUNT = 11
D3D12_FEATURE_VIDEO_ARCHITECTURE = 17
D3D12_FEATURE_VIDEO_DECODE_HISTOGRAM = 18
D3D12_FEATURE_VIDEO_FEATURE_AREA_SUPPORT = 19
D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR = 20
D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_SIZE = 21
D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_COUNT = 22
D3D12_FEATURE_VIDEO_EXTENSION_COMMANDS = 23
D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT = 24
D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETERS = 25
D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SUPPORT = 26
D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SIZE = 27
D3D12_FEATURE_VIDEO_DECODE_PROTECTED_RESOURCES = 28
D3D12_FEATURE_VIDEO_PROCESS_PROTECTED_RESOURCES = 29
D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES = 30
D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE1 = 31
D3D12_FEATURE_VIDEO_PROCESSOR_SIZE1 = 32
def _define_D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS_head():
    class D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS(Structure):
        pass
    return D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS
def _define_D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS():
    D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS = win32more.Media.MediaFoundation.D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS_head
    D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS._fields_ = [
        ('Status', UInt64),
        ('NumMacroblocksAffected', UInt64),
        ('FrameRate', win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
        ('BitRate', UInt32),
    ]
    return D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS
def _define_D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT_head():
    class D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT(Structure):
        pass
    return D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT
def _define_D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT():
    D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT = win32more.Media.MediaFoundation.D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT_head
    D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT._fields_ = [
        ('pMotionVectorHeap', win32more.Media.MediaFoundation.ID3D12VideoMotionVectorHeap_head),
        ('PixelWidth', UInt32),
        ('PixelHeight', UInt32),
    ]
    return D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT
def _define_D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT_head():
    class D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT(Structure):
        pass
    return D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT
def _define_D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT():
    D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT = win32more.Media.MediaFoundation.D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT_head
    D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT._fields_ = [
        ('pMotionVectorTexture2D', win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ('MotionVectorCoordinate', win32more.Media.MediaFoundation.D3D12_RESOURCE_COORDINATE),
    ]
    return D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT
def _define_D3D12_RESOURCE_COORDINATE_head():
    class D3D12_RESOURCE_COORDINATE(Structure):
        pass
    return D3D12_RESOURCE_COORDINATE
def _define_D3D12_RESOURCE_COORDINATE():
    D3D12_RESOURCE_COORDINATE = win32more.Media.MediaFoundation.D3D12_RESOURCE_COORDINATE_head
    D3D12_RESOURCE_COORDINATE._fields_ = [
        ('X', UInt64),
        ('Y', UInt32),
        ('Z', UInt32),
        ('SubresourceIndex', UInt32),
    ]
    return D3D12_RESOURCE_COORDINATE
D3D12_VIDEO_DECODE_ARGUMENT_TYPE = Int32
D3D12_VIDEO_DECODE_ARGUMENT_TYPE_PICTURE_PARAMETERS = 0
D3D12_VIDEO_DECODE_ARGUMENT_TYPE_INVERSE_QUANTIZATION_MATRIX = 1
D3D12_VIDEO_DECODE_ARGUMENT_TYPE_SLICE_CONTROL = 2
D3D12_VIDEO_DECODE_ARGUMENT_TYPE_MAX_VALID = 3
def _define_D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM_head():
    class D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM(Structure):
        pass
    return D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM
def _define_D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM():
    D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM = win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM_head
    D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM._fields_ = [
        ('pBuffer', win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ('Offset', UInt64),
        ('Size', UInt64),
    ]
    return D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM
def _define_D3D12_VIDEO_DECODE_CONFIGURATION_head():
    class D3D12_VIDEO_DECODE_CONFIGURATION(Structure):
        pass
    return D3D12_VIDEO_DECODE_CONFIGURATION
def _define_D3D12_VIDEO_DECODE_CONFIGURATION():
    D3D12_VIDEO_DECODE_CONFIGURATION = win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION_head
    D3D12_VIDEO_DECODE_CONFIGURATION._fields_ = [
        ('DecodeProfile', Guid),
        ('BitstreamEncryption', win32more.Media.MediaFoundation.D3D12_BITSTREAM_ENCRYPTION_TYPE),
        ('InterlaceType', win32more.Media.MediaFoundation.D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE),
    ]
    return D3D12_VIDEO_DECODE_CONFIGURATION
D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS = UInt32
D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_NONE = 0
D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_HEIGHT_ALIGNMENT_MULTIPLE_32_REQUIRED = 1
D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_POST_PROCESSING_SUPPORTED = 2
D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_REFERENCE_ONLY_ALLOCATIONS_REQUIRED = 4
D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_ALLOW_RESOLUTION_CHANGE_ON_NON_KEY_FRAME = 8
def _define_D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS_head():
    class D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS(Structure):
        pass
    return D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS
def _define_D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS():
    D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS = win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS_head
    D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS._fields_ = [
        ('Enable', win32more.Foundation.BOOL),
        ('pReferenceTexture2D', win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ('ReferenceSubresource', UInt32),
        ('OutputColorSpace', win32more.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE),
        ('DecodeColorSpace', win32more.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE),
    ]
    return D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS
def _define_D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1_head():
    class D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1(Structure):
        pass
    return D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1
def _define_D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1():
    D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1 = win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1_head
    D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1._fields_ = [
        ('Enable', win32more.Foundation.BOOL),
        ('pReferenceTexture2D', win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ('ReferenceSubresource', UInt32),
        ('OutputColorSpace', win32more.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE),
        ('DecodeColorSpace', win32more.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE),
        ('OutputWidth', UInt32),
        ('OutputHeight', UInt32),
    ]
    return D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1
D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS = UInt32
D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_NONE = 0
D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_SUPPORTED = 1
def _define_D3D12_VIDEO_DECODE_FRAME_ARGUMENT_head():
    class D3D12_VIDEO_DECODE_FRAME_ARGUMENT(Structure):
        pass
    return D3D12_VIDEO_DECODE_FRAME_ARGUMENT
def _define_D3D12_VIDEO_DECODE_FRAME_ARGUMENT():
    D3D12_VIDEO_DECODE_FRAME_ARGUMENT = win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_FRAME_ARGUMENT_head
    D3D12_VIDEO_DECODE_FRAME_ARGUMENT._fields_ = [
        ('Type', win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_ARGUMENT_TYPE),
        ('Size', UInt32),
        ('pData', c_void_p),
    ]
    return D3D12_VIDEO_DECODE_FRAME_ARGUMENT
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT = Int32
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_Y = 0
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_U = 1
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_V = 2
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_R = 0
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_G = 1
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_B = 2
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_A = 3
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS = UInt32
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_NONE = 0
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_Y = 1
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_U = 2
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_V = 4
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_R = 1
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_G = 2
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_B = 4
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_A = 8
def _define_D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS_head():
    class D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS(Structure):
        pass
    return D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS
def _define_D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS():
    D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS = win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS_head
    D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS._fields_ = [
        ('NumFrameArguments', UInt32),
        ('FrameArguments', win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_FRAME_ARGUMENT * 10),
        ('ReferenceFrames', win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_REFERENCE_FRAMES),
        ('CompressedBitstream', win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM),
        ('pHeap', win32more.Media.MediaFoundation.ID3D12VideoDecoderHeap_head),
    ]
    return D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS
def _define_D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM_head():
    class D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM(Structure):
        pass
    return D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM
def _define_D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM():
    D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM = win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM_head
    D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM._fields_ = [
        ('Offset', UInt64),
        ('pBuffer', win32more.Graphics.Direct3D12.ID3D12Resource_head),
    ]
    return D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM
def _define_D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS_head():
    class D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS(Structure):
        pass
    return D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS
def _define_D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS():
    D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS = win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS_head
    D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS._fields_ = [
        ('pOutputTexture2D', win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ('OutputSubresource', UInt32),
        ('ConversionArguments', win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS),
    ]
    return D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS
def _define_D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1_head():
    class D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1(Structure):
        pass
    return D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1
def _define_D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1():
    D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1 = win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1_head
    D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1._fields_ = [
        ('pOutputTexture2D', win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ('OutputSubresource', UInt32),
        ('ConversionArguments', win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1),
        ('Histograms', win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM * 4),
    ]
    return D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1
def _define_D3D12_VIDEO_DECODE_REFERENCE_FRAMES_head():
    class D3D12_VIDEO_DECODE_REFERENCE_FRAMES(Structure):
        pass
    return D3D12_VIDEO_DECODE_REFERENCE_FRAMES
def _define_D3D12_VIDEO_DECODE_REFERENCE_FRAMES():
    D3D12_VIDEO_DECODE_REFERENCE_FRAMES = win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_REFERENCE_FRAMES_head
    D3D12_VIDEO_DECODE_REFERENCE_FRAMES._fields_ = [
        ('NumTexture2Ds', UInt32),
        ('ppTexture2Ds', POINTER(win32more.Graphics.Direct3D12.ID3D12Resource_head)),
        ('pSubresources', POINTER(UInt32)),
        ('ppHeaps', POINTER(win32more.Media.MediaFoundation.ID3D12VideoDecoderHeap_head)),
    ]
    return D3D12_VIDEO_DECODE_REFERENCE_FRAMES
D3D12_VIDEO_DECODE_STATUS = Int32
D3D12_VIDEO_DECODE_STATUS_OK = 0
D3D12_VIDEO_DECODE_STATUS_CONTINUE = 1
D3D12_VIDEO_DECODE_STATUS_CONTINUE_SKIP_DISPLAY = 2
D3D12_VIDEO_DECODE_STATUS_RESTART = 3
D3D12_VIDEO_DECODE_STATUS_RATE_EXCEEDED = 4
D3D12_VIDEO_DECODE_SUPPORT_FLAGS = UInt32
D3D12_VIDEO_DECODE_SUPPORT_FLAG_NONE = 0
D3D12_VIDEO_DECODE_SUPPORT_FLAG_SUPPORTED = 1
D3D12_VIDEO_DECODE_TIER = Int32
D3D12_VIDEO_DECODE_TIER_NOT_SUPPORTED = 0
D3D12_VIDEO_DECODE_TIER_1 = 1
D3D12_VIDEO_DECODE_TIER_2 = 2
D3D12_VIDEO_DECODE_TIER_3 = 3
def _define_D3D12_VIDEO_DECODER_DESC_head():
    class D3D12_VIDEO_DECODER_DESC(Structure):
        pass
    return D3D12_VIDEO_DECODER_DESC
def _define_D3D12_VIDEO_DECODER_DESC():
    D3D12_VIDEO_DECODER_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_DECODER_DESC_head
    D3D12_VIDEO_DECODER_DESC._fields_ = [
        ('NodeMask', UInt32),
        ('Configuration', win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION),
    ]
    return D3D12_VIDEO_DECODER_DESC
def _define_D3D12_VIDEO_DECODER_HEAP_DESC_head():
    class D3D12_VIDEO_DECODER_HEAP_DESC(Structure):
        pass
    return D3D12_VIDEO_DECODER_HEAP_DESC
def _define_D3D12_VIDEO_DECODER_HEAP_DESC():
    D3D12_VIDEO_DECODER_HEAP_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_DECODER_HEAP_DESC_head
    D3D12_VIDEO_DECODER_HEAP_DESC._fields_ = [
        ('NodeMask', UInt32),
        ('Configuration', win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION),
        ('DecodeWidth', UInt32),
        ('DecodeHeight', UInt32),
        ('Format', win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ('FrameRate', win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
        ('BitRate', UInt32),
        ('MaxDecodePictureBufferCount', UInt32),
    ]
    return D3D12_VIDEO_DECODER_HEAP_DESC
def _define_D3D12_VIDEO_ENCODE_REFERENCE_FRAMES_head():
    class D3D12_VIDEO_ENCODE_REFERENCE_FRAMES(Structure):
        pass
    return D3D12_VIDEO_ENCODE_REFERENCE_FRAMES
def _define_D3D12_VIDEO_ENCODE_REFERENCE_FRAMES():
    D3D12_VIDEO_ENCODE_REFERENCE_FRAMES = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODE_REFERENCE_FRAMES_head
    D3D12_VIDEO_ENCODE_REFERENCE_FRAMES._fields_ = [
        ('NumTexture2Ds', UInt32),
        ('ppTexture2Ds', POINTER(win32more.Graphics.Direct3D12.ID3D12Resource_head)),
        ('pSubresources', POINTER(UInt32)),
    ]
    return D3D12_VIDEO_ENCODE_REFERENCE_FRAMES
D3D12_VIDEO_ENCODER_CODEC = Int32
D3D12_VIDEO_ENCODER_CODEC_H264 = 0
D3D12_VIDEO_ENCODER_CODEC_HEVC = 1
def _define_D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_head():
    class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION(Structure):
        pass
    return D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION
def _define_D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION():
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_head
    class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION__Anonymous_e__Union(Union):
        pass
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION__Anonymous_e__Union._fields_ = [
        ('pH264Config', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_head)),
        ('pHEVCConfig', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_head)),
    ]
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION._anonymous_ = [
        'Anonymous',
    ]
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION._fields_ = [
        ('DataSize', UInt32),
        ('Anonymous', D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION__Anonymous_e__Union),
    ]
    return D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION
def _define_D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_head():
    class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264(Structure):
        pass
    return D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264
def _define_D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264():
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264 = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_head
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264._fields_ = [
        ('ConfigurationFlags', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS),
        ('DirectModeConfig', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES),
        ('DisableDeblockingFilterConfig', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES),
    ]
    return D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES = Int32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_DISABLED = 0
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_TEMPORAL = 1
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_SPATIAL = 2
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS = UInt32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_NONE = 0
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_CONSTRAINED_INTRAPREDICTION = 1
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_ADAPTIVE_8x8_TRANSFORM = 2
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ENABLE_CABAC_ENCODING = 4
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES = 8
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS = UInt32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_NONE = 0
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED = 1
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_1_DISABLE_ALL_SLICE_BLOCK_EDGES = 2
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_2_DISABLE_SLICE_BOUNDARIES_BLOCKS = 4
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_3_USE_TWO_STAGE_DEBLOCKING = 8
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_4_DISABLE_CHROMA_BLOCK_EDGES = 16
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES = 32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING = 64
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES = Int32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED = 0
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_1_DISABLE_ALL_SLICE_BLOCK_EDGES = 1
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_2_DISABLE_SLICE_BOUNDARIES_BLOCKS = 2
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_3_USE_TWO_STAGE_DEBLOCKING = 3
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_4_DISABLE_CHROMA_BLOCK_EDGES = 4
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES = 5
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING = 6
def _define_D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_head():
    class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC
def _define_D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC():
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_head
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC._fields_ = [
        ('ConfigurationFlags', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS),
        ('MinLumaCodingUnitSize', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE),
        ('MaxLumaCodingUnitSize', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE),
        ('MinLumaTransformUnitSize', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE),
        ('MaxLumaTransformUnitSize', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE),
        ('max_transform_hierarchy_depth_inter', Byte),
        ('max_transform_hierarchy_depth_intra', Byte),
    ]
    return D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE = Int32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_8x8 = 0
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_16x16 = 1
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_32x32 = 2
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_64x64 = 3
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS = UInt32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_NONE = 0
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_DISABLE_LOOP_FILTER_ACROSS_SLICES = 1
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES = 2
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_SAO_FILTER = 4
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_LONG_TERM_REFERENCES = 8
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_ASYMETRIC_MOTION_PARTITION = 16
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_TRANSFORM_SKIPPING = 32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_CONSTRAINED_INTRAPREDICTION = 64
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE = Int32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_4x4 = 0
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_8x8 = 1
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_16x16 = 2
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_32x32 = 3
def _define_D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_head():
    class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT(Structure):
        pass
    return D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT
def _define_D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT():
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_head
    class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT__Anonymous_e__Union(Union):
        pass
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT__Anonymous_e__Union._fields_ = [
        ('pH264Support', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_head)),
        ('pHEVCSupport', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_head)),
    ]
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT._anonymous_ = [
        'Anonymous',
    ]
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT._fields_ = [
        ('DataSize', UInt32),
        ('Anonymous', D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT__Anonymous_e__Union),
    ]
    return D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT
def _define_D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_head():
    class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264(Structure):
        pass
    return D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264
def _define_D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264():
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264 = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_head
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264._fields_ = [
        ('SupportFlags', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS),
        ('DisableDeblockingFilterSupportedModes', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS),
    ]
    return D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS = UInt32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_NONE = 0
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CABAC_ENCODING_SUPPORT = 1
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT = 2
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_BFRAME_LTR_COMBINED_SUPPORT = 4
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_ADAPTIVE_8x8_TRANSFORM_ENCODING_SUPPORT = 8
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_SPATIAL_ENCODING_SUPPORT = 16
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_TEMPORAL_ENCODING_SUPPORT = 32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT = 64
def _define_D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_head():
    class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC
def _define_D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC():
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_head
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC._fields_ = [
        ('SupportFlags', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS),
        ('MinLumaCodingUnitSize', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE),
        ('MaxLumaCodingUnitSize', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE),
        ('MinLumaTransformUnitSize', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE),
        ('MaxLumaTransformUnitSize', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE),
        ('max_transform_hierarchy_depth_inter', Byte),
        ('max_transform_hierarchy_depth_intra', Byte),
    ]
    return D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS = UInt32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_NONE = 0
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_BFRAME_LTR_COMBINED_SUPPORT = 1
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT = 2
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT = 4
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_SAO_FILTER_SUPPORT = 8
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_SUPPORT = 16
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_REQUIRED = 32
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_TRANSFORM_SKIP_SUPPORT = 64
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_DISABLING_LOOP_FILTER_ACROSS_SLICES_SUPPORT = 128
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_P_FRAMES_IMPLEMENTED_AS_LOW_DELAY_B_FRAMES = 256
def _define_D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_head():
    class D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT(Structure):
        pass
    return D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT
def _define_D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT():
    D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_head
    class D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT__Anonymous_e__Union(Union):
        pass
    D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT__Anonymous_e__Union._fields_ = [
        ('pH264Support', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264_head)),
        ('pHEVCSupport', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC_head)),
    ]
    D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT._anonymous_ = [
        'Anonymous',
    ]
    D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT._fields_ = [
        ('DataSize', UInt32),
        ('Anonymous', D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT__Anonymous_e__Union),
    ]
    return D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT
def _define_D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264_head():
    class D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264(Structure):
        pass
    return D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264
def _define_D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264():
    D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264 = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264_head
    D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264._fields_ = [
        ('MaxL0ReferencesForP', UInt32),
        ('MaxL0ReferencesForB', UInt32),
        ('MaxL1ReferencesForB', UInt32),
        ('MaxLongTermReferences', UInt32),
        ('MaxDPBCapacity', UInt32),
    ]
    return D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264
def _define_D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC_head():
    class D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC
def _define_D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC():
    D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC_head
    D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC._fields_ = [
        ('MaxL0ReferencesForP', UInt32),
        ('MaxL0ReferencesForB', UInt32),
        ('MaxL1ReferencesForB', UInt32),
        ('MaxLongTermReferences', UInt32),
        ('MaxDPBCapacity', UInt32),
    ]
    return D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC
def _define_D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM_head():
    class D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM(Structure):
        pass
    return D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM
def _define_D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM():
    D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM_head
    D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM._fields_ = [
        ('pBuffer', win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ('FrameStartOffset', UInt64),
    ]
    return D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM
def _define_D3D12_VIDEO_ENCODER_DESC_head():
    class D3D12_VIDEO_ENCODER_DESC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_DESC
def _define_D3D12_VIDEO_ENCODER_DESC():
    D3D12_VIDEO_ENCODER_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_DESC_head
    D3D12_VIDEO_ENCODER_DESC._fields_ = [
        ('NodeMask', UInt32),
        ('Flags', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FLAGS),
        ('EncodeCodec', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ('EncodeProfile', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC),
        ('InputFormat', win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ('CodecConfiguration', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION),
        ('MaxMotionEstimationPrecision', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE),
    ]
    return D3D12_VIDEO_ENCODER_DESC
D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS = UInt32
D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_NO_ERROR = 0
D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_CODEC_PICTURE_CONTROL_NOT_SUPPORTED = 1
D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_SUBREGION_LAYOUT_CONFIGURATION_NOT_SUPPORTED = 2
D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_REFERENCE_PICTURES = 4
D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_RECONFIGURATION_REQUEST_NOT_SUPPORTED = 8
D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_METADATA_BUFFER_SOURCE = 16
def _define_D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER_head():
    class D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER(Structure):
        pass
    return D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER
def _define_D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER():
    D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER_head
    D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER._fields_ = [
        ('pBuffer', win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ('Offset', UInt64),
    ]
    return D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER
def _define_D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS_head():
    class D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS(Structure):
        pass
    return D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS
def _define_D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS():
    D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS_head
    D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS._fields_ = [
        ('SequenceControlDesc', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC),
        ('PictureControlDesc', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC),
        ('pInputFrame', win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ('InputFrameSubresource', UInt32),
        ('CurrentFrameBitstreamMetadataSize', UInt32),
    ]
    return D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS
def _define_D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS_head():
    class D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS(Structure):
        pass
    return D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS
def _define_D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS():
    D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS_head
    D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS._fields_ = [
        ('Bitstream', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM),
        ('ReconstructedPicture', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE),
        ('EncoderOutputMetadata', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER),
    ]
    return D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS
D3D12_VIDEO_ENCODER_FLAGS = UInt32
D3D12_VIDEO_ENCODER_FLAG_NONE = 0
D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE = Int32
D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_FULL_FRAME = 0
D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_BYTES_PER_SUBREGION = 1
D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_SQUARE_UNITS_PER_SUBREGION_ROW_UNALIGNED = 2
D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_ROWS_PER_SUBREGION = 3
D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_SUBREGIONS_PER_FRAME = 4
def _define_D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA_head():
    class D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA(Structure):
        pass
    return D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA
def _define_D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA():
    D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA_head
    D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA._fields_ = [
        ('bSize', UInt64),
        ('bStartOffset', UInt64),
        ('bHeaderSize', UInt64),
    ]
    return D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA
D3D12_VIDEO_ENCODER_FRAME_TYPE_H264 = Int32
D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_I_FRAME = 0
D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_P_FRAME = 1
D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_B_FRAME = 2
D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_IDR_FRAME = 3
D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC = Int32
D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_I_FRAME = 0
D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_P_FRAME = 1
D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_B_FRAME = 2
D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_IDR_FRAME = 3
def _define_D3D12_VIDEO_ENCODER_HEAP_DESC_head():
    class D3D12_VIDEO_ENCODER_HEAP_DESC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_HEAP_DESC
def _define_D3D12_VIDEO_ENCODER_HEAP_DESC():
    D3D12_VIDEO_ENCODER_HEAP_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_HEAP_DESC_head
    D3D12_VIDEO_ENCODER_HEAP_DESC._fields_ = [
        ('NodeMask', UInt32),
        ('Flags', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_HEAP_FLAGS),
        ('EncodeCodec', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ('EncodeProfile', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC),
        ('EncodeLevel', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING),
        ('ResolutionsListCount', UInt32),
        ('pResolutionList', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC_head)),
    ]
    return D3D12_VIDEO_ENCODER_HEAP_DESC
D3D12_VIDEO_ENCODER_HEAP_FLAGS = UInt32
D3D12_VIDEO_ENCODER_HEAP_FLAG_NONE = 0
def _define_D3D12_VIDEO_ENCODER_INTRA_REFRESH_head():
    class D3D12_VIDEO_ENCODER_INTRA_REFRESH(Structure):
        pass
    return D3D12_VIDEO_ENCODER_INTRA_REFRESH
def _define_D3D12_VIDEO_ENCODER_INTRA_REFRESH():
    D3D12_VIDEO_ENCODER_INTRA_REFRESH = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_INTRA_REFRESH_head
    D3D12_VIDEO_ENCODER_INTRA_REFRESH._fields_ = [
        ('Mode', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE),
        ('IntraRefreshDuration', UInt32),
    ]
    return D3D12_VIDEO_ENCODER_INTRA_REFRESH
D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE = Int32
D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_NONE = 0
D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_ROW_BASED = 1
def _define_D3D12_VIDEO_ENCODER_LEVEL_SETTING_head():
    class D3D12_VIDEO_ENCODER_LEVEL_SETTING(Structure):
        pass
    return D3D12_VIDEO_ENCODER_LEVEL_SETTING
def _define_D3D12_VIDEO_ENCODER_LEVEL_SETTING():
    D3D12_VIDEO_ENCODER_LEVEL_SETTING = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING_head
    class D3D12_VIDEO_ENCODER_LEVEL_SETTING__Anonymous_e__Union(Union):
        pass
    D3D12_VIDEO_ENCODER_LEVEL_SETTING__Anonymous_e__Union._fields_ = [
        ('pH264LevelSetting', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVELS_H264)),
        ('pHEVCLevelSetting', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC_head)),
    ]
    D3D12_VIDEO_ENCODER_LEVEL_SETTING._anonymous_ = [
        'Anonymous',
    ]
    D3D12_VIDEO_ENCODER_LEVEL_SETTING._fields_ = [
        ('DataSize', UInt32),
        ('Anonymous', D3D12_VIDEO_ENCODER_LEVEL_SETTING__Anonymous_e__Union),
    ]
    return D3D12_VIDEO_ENCODER_LEVEL_SETTING
def _define_D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC_head():
    class D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC
def _define_D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC():
    D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC_head
    D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC._fields_ = [
        ('Level', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVELS_HEVC),
        ('Tier', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_TIER_HEVC),
    ]
    return D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC
D3D12_VIDEO_ENCODER_LEVELS_H264 = Int32
D3D12_VIDEO_ENCODER_LEVELS_H264_1 = 0
D3D12_VIDEO_ENCODER_LEVELS_H264_1b = 1
D3D12_VIDEO_ENCODER_LEVELS_H264_11 = 2
D3D12_VIDEO_ENCODER_LEVELS_H264_12 = 3
D3D12_VIDEO_ENCODER_LEVELS_H264_13 = 4
D3D12_VIDEO_ENCODER_LEVELS_H264_2 = 5
D3D12_VIDEO_ENCODER_LEVELS_H264_21 = 6
D3D12_VIDEO_ENCODER_LEVELS_H264_22 = 7
D3D12_VIDEO_ENCODER_LEVELS_H264_3 = 8
D3D12_VIDEO_ENCODER_LEVELS_H264_31 = 9
D3D12_VIDEO_ENCODER_LEVELS_H264_32 = 10
D3D12_VIDEO_ENCODER_LEVELS_H264_4 = 11
D3D12_VIDEO_ENCODER_LEVELS_H264_41 = 12
D3D12_VIDEO_ENCODER_LEVELS_H264_42 = 13
D3D12_VIDEO_ENCODER_LEVELS_H264_5 = 14
D3D12_VIDEO_ENCODER_LEVELS_H264_51 = 15
D3D12_VIDEO_ENCODER_LEVELS_H264_52 = 16
D3D12_VIDEO_ENCODER_LEVELS_H264_6 = 17
D3D12_VIDEO_ENCODER_LEVELS_H264_61 = 18
D3D12_VIDEO_ENCODER_LEVELS_H264_62 = 19
D3D12_VIDEO_ENCODER_LEVELS_HEVC = Int32
D3D12_VIDEO_ENCODER_LEVELS_HEVC_1 = 0
D3D12_VIDEO_ENCODER_LEVELS_HEVC_2 = 1
D3D12_VIDEO_ENCODER_LEVELS_HEVC_21 = 2
D3D12_VIDEO_ENCODER_LEVELS_HEVC_3 = 3
D3D12_VIDEO_ENCODER_LEVELS_HEVC_31 = 4
D3D12_VIDEO_ENCODER_LEVELS_HEVC_4 = 5
D3D12_VIDEO_ENCODER_LEVELS_HEVC_41 = 6
D3D12_VIDEO_ENCODER_LEVELS_HEVC_5 = 7
D3D12_VIDEO_ENCODER_LEVELS_HEVC_51 = 8
D3D12_VIDEO_ENCODER_LEVELS_HEVC_52 = 9
D3D12_VIDEO_ENCODER_LEVELS_HEVC_6 = 10
D3D12_VIDEO_ENCODER_LEVELS_HEVC_61 = 11
D3D12_VIDEO_ENCODER_LEVELS_HEVC_62 = 12
D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE = Int32
D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_MAXIMUM = 0
D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_FULL_PIXEL = 1
D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_HALF_PIXEL = 2
D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_QUARTER_PIXEL = 3
def _define_D3D12_VIDEO_ENCODER_OUTPUT_METADATA_head():
    class D3D12_VIDEO_ENCODER_OUTPUT_METADATA(Structure):
        pass
    return D3D12_VIDEO_ENCODER_OUTPUT_METADATA
def _define_D3D12_VIDEO_ENCODER_OUTPUT_METADATA():
    D3D12_VIDEO_ENCODER_OUTPUT_METADATA = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_OUTPUT_METADATA_head
    D3D12_VIDEO_ENCODER_OUTPUT_METADATA._fields_ = [
        ('EncodeErrorFlags', UInt64),
        ('EncodeStats', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS),
        ('EncodedBitstreamWrittenBytesCount', UInt64),
        ('WrittenSubregionsCount', UInt64),
    ]
    return D3D12_VIDEO_ENCODER_OUTPUT_METADATA
def _define_D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS_head():
    class D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS(Structure):
        pass
    return D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS
def _define_D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS():
    D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS_head
    D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS._fields_ = [
        ('AverageQP', UInt64),
        ('IntraCodingUnitsCount', UInt64),
        ('InterCodingUnitsCount', UInt64),
        ('SkipCodingUnitsCount', UInt64),
        ('AverageMotionEstimationXDirection', UInt64),
        ('AverageMotionEstimationYDirection', UInt64),
    ]
    return D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_head():
    class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA(Structure):
        pass
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA():
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_head
    class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA__Anonymous_e__Union(Union):
        pass
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA__Anonymous_e__Union._fields_ = [
        ('pH264PicData', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_head)),
        ('pHEVCPicData', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_head)),
    ]
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA._anonymous_ = [
        'Anonymous',
    ]
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA._fields_ = [
        ('DataSize', UInt32),
        ('Anonymous', D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA__Anonymous_e__Union),
    ]
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_head():
    class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264(Structure):
        pass
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264():
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264 = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_head
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264._fields_ = [
        ('Flags', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS),
        ('FrameType', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FRAME_TYPE_H264),
        ('pic_parameter_set_id', UInt32),
        ('idr_pic_id', UInt32),
        ('PictureOrderCountNumber', UInt32),
        ('FrameDecodingOrderNumber', UInt32),
        ('TemporalLayerIndex', UInt32),
        ('List0ReferenceFramesCount', UInt32),
        ('pList0ReferenceFrames', POINTER(UInt32)),
        ('List1ReferenceFramesCount', UInt32),
        ('pList1ReferenceFrames', POINTER(UInt32)),
        ('ReferenceFramesReconPictureDescriptorsCount', UInt32),
        ('pReferenceFramesReconPictureDescriptors', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264_head)),
        ('adaptive_ref_pic_marking_mode_flag', Byte),
        ('RefPicMarkingOperationsCommandsCount', UInt32),
        ('pRefPicMarkingOperationsCommands', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION_head)),
        ('List0RefPicModificationsCount', UInt32),
        ('pList0RefPicModifications', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION_head)),
        ('List1RefPicModificationsCount', UInt32),
        ('pList1RefPicModifications', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION_head)),
        ('QPMapValuesCount', UInt32),
        ('pRateControlQPMap', POINTER(SByte)),
    ]
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264
D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS = UInt32
D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_NONE = 0
D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES = 1
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION_head():
    class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION(Structure):
        pass
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION():
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION_head
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION._fields_ = [
        ('modification_of_pic_nums_idc', Byte),
        ('abs_diff_pic_num_minus1', UInt32),
        ('long_term_pic_num', UInt32),
    ]
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION_head():
    class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION(Structure):
        pass
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION():
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION_head
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION._fields_ = [
        ('memory_management_control_operation', Byte),
        ('difference_of_pic_nums_minus1', UInt32),
        ('long_term_pic_num', UInt32),
        ('long_term_frame_idx', UInt32),
        ('max_long_term_frame_idx_plus1', UInt32),
    ]
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_head():
    class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC():
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_head
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC._fields_ = [
        ('Flags', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS),
        ('FrameType', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC),
        ('slice_pic_parameter_set_id', UInt32),
        ('PictureOrderCountNumber', UInt32),
        ('TemporalLayerIndex', UInt32),
        ('List0ReferenceFramesCount', UInt32),
        ('pList0ReferenceFrames', POINTER(UInt32)),
        ('List1ReferenceFramesCount', UInt32),
        ('pList1ReferenceFrames', POINTER(UInt32)),
        ('ReferenceFramesReconPictureDescriptorsCount', UInt32),
        ('pReferenceFramesReconPictureDescriptors', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC_head)),
        ('List0RefPicModificationsCount', UInt32),
        ('pList0RefPicModifications', POINTER(UInt32)),
        ('List1RefPicModificationsCount', UInt32),
        ('pList1RefPicModifications', POINTER(UInt32)),
        ('QPMapValuesCount', UInt32),
        ('pRateControlQPMap', POINTER(SByte)),
    ]
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC
D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS = UInt32
D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_NONE = 0
D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES = 1
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC_head():
    class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC():
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC_head
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC._fields_ = [
        ('IntraRefreshFrameIndex', UInt32),
        ('Flags', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS),
        ('PictureControlCodecData', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA),
        ('ReferenceFrames', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODE_REFERENCE_FRAMES),
    ]
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC
D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS = UInt32
D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_NONE = 0
D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_USED_AS_REFERENCE_PICTURE = 1
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_head():
    class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA(Structure):
        pass
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA():
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_head
    class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA__Anonymous_e__Union(Union):
        pass
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA__Anonymous_e__Union._fields_ = [
        ('pSlicesPartition_H264', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES_head)),
        ('pSlicesPartition_HEVC', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES_head)),
    ]
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA._anonymous_ = [
        'Anonymous',
    ]
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA._fields_ = [
        ('DataSize', UInt32),
        ('Anonymous', D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA__Anonymous_e__Union),
    ]
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES_head():
    class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES(Structure):
        pass
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES
def _define_D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES():
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES_head
    class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES__Anonymous_e__Union(Union):
        pass
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES__Anonymous_e__Union._fields_ = [
        ('MaxBytesPerSlice', UInt32),
        ('NumberOfCodingUnitsPerSlice', UInt32),
        ('NumberOfRowsPerSlice', UInt32),
        ('NumberOfSlicesPerFrame', UInt32),
    ]
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES._anonymous_ = [
        'Anonymous',
    ]
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES._fields_ = [
        ('Anonymous', D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES__Anonymous_e__Union),
    ]
    return D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES
def _define_D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC_head():
    class D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC
def _define_D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC():
    D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC_head
    D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC._fields_ = [
        ('Width', UInt32),
        ('Height', UInt32),
    ]
    return D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC
def _define_D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC_head():
    class D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC
def _define_D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC():
    D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC_head
    D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC._fields_ = [
        ('WidthRatio', UInt32),
        ('HeightRatio', UInt32),
    ]
    return D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC
def _define_D3D12_VIDEO_ENCODER_PROFILE_DESC_head():
    class D3D12_VIDEO_ENCODER_PROFILE_DESC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_PROFILE_DESC
def _define_D3D12_VIDEO_ENCODER_PROFILE_DESC():
    D3D12_VIDEO_ENCODER_PROFILE_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC_head
    class D3D12_VIDEO_ENCODER_PROFILE_DESC__Anonymous_e__Union(Union):
        pass
    D3D12_VIDEO_ENCODER_PROFILE_DESC__Anonymous_e__Union._fields_ = [
        ('pH264Profile', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_H264)),
        ('pHEVCProfile', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_HEVC)),
    ]
    D3D12_VIDEO_ENCODER_PROFILE_DESC._anonymous_ = [
        'Anonymous',
    ]
    D3D12_VIDEO_ENCODER_PROFILE_DESC._fields_ = [
        ('DataSize', UInt32),
        ('Anonymous', D3D12_VIDEO_ENCODER_PROFILE_DESC__Anonymous_e__Union),
    ]
    return D3D12_VIDEO_ENCODER_PROFILE_DESC
D3D12_VIDEO_ENCODER_PROFILE_H264 = Int32
D3D12_VIDEO_ENCODER_PROFILE_H264_MAIN = 0
D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH = 1
D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH_10 = 2
D3D12_VIDEO_ENCODER_PROFILE_HEVC = Int32
D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN = 0
D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN10 = 1
def _define_D3D12_VIDEO_ENCODER_RATE_CONTROL_head():
    class D3D12_VIDEO_ENCODER_RATE_CONTROL(Structure):
        pass
    return D3D12_VIDEO_ENCODER_RATE_CONTROL
def _define_D3D12_VIDEO_ENCODER_RATE_CONTROL():
    D3D12_VIDEO_ENCODER_RATE_CONTROL = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_head
    D3D12_VIDEO_ENCODER_RATE_CONTROL._fields_ = [
        ('Mode', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE),
        ('Flags', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS),
        ('ConfigParams', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS),
        ('TargetFrameRate', win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
    ]
    return D3D12_VIDEO_ENCODER_RATE_CONTROL
def _define_D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR_head():
    class D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR(Structure):
        pass
    return D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR
def _define_D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR():
    D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR_head
    D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR._fields_ = [
        ('InitialQP', UInt32),
        ('MinQP', UInt32),
        ('MaxQP', UInt32),
        ('MaxFrameBitSize', UInt64),
        ('TargetBitRate', UInt64),
        ('VBVCapacity', UInt64),
        ('InitialVBVFullness', UInt64),
    ]
    return D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR
def _define_D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS_head():
    class D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS(Structure):
        pass
    return D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS
def _define_D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS():
    D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS_head
    class D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS__Anonymous_e__Union(Union):
        pass
    D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS__Anonymous_e__Union._fields_ = [
        ('pConfiguration_CQP', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP_head)),
        ('pConfiguration_CBR', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR_head)),
        ('pConfiguration_VBR', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR_head)),
        ('pConfiguration_QVBR', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR_head)),
    ]
    D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS._anonymous_ = [
        'Anonymous',
    ]
    D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS._fields_ = [
        ('DataSize', UInt32),
        ('Anonymous', D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS__Anonymous_e__Union),
    ]
    return D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS
def _define_D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP_head():
    class D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP(Structure):
        pass
    return D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP
def _define_D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP():
    D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP_head
    D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP._fields_ = [
        ('ConstantQP_FullIntracodedFrame', UInt32),
        ('ConstantQP_InterPredictedFrame_PrevRefOnly', UInt32),
        ('ConstantQP_InterPredictedFrame_BiDirectionalRef', UInt32),
    ]
    return D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP
D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS = UInt32
D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_NONE = 0
D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_DELTA_QP = 1
D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_FRAME_ANALYSIS = 2
D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_QP_RANGE = 4
D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_INITIAL_QP = 8
D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_MAX_FRAME_SIZE = 16
D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_VBV_SIZES = 32
D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE = Int32
D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_ABSOLUTE_QP_MAP = 0
D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CQP = 1
D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CBR = 2
D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_VBR = 3
D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_QVBR = 4
def _define_D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR_head():
    class D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR(Structure):
        pass
    return D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR
def _define_D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR():
    D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR_head
    D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR._fields_ = [
        ('InitialQP', UInt32),
        ('MinQP', UInt32),
        ('MaxQP', UInt32),
        ('MaxFrameBitSize', UInt64),
        ('TargetAvgBitRate', UInt64),
        ('PeakBitRate', UInt64),
        ('ConstantQualityTarget', UInt32),
    ]
    return D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR
def _define_D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR_head():
    class D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR(Structure):
        pass
    return D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR
def _define_D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR():
    D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR_head
    D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR._fields_ = [
        ('InitialQP', UInt32),
        ('MinQP', UInt32),
        ('MaxQP', UInt32),
        ('MaxFrameBitSize', UInt64),
        ('TargetAvgBitRate', UInt64),
        ('PeakBitRate', UInt64),
        ('VBVCapacity', UInt64),
        ('InitialVBVFullness', UInt64),
    ]
    return D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR
def _define_D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE_head():
    class D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE(Structure):
        pass
    return D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE
def _define_D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE():
    D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE_head
    D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE._fields_ = [
        ('pReconstructedPicture', win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ('ReconstructedPictureSubresource', UInt32),
    ]
    return D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE
def _define_D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264_head():
    class D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264(Structure):
        pass
    return D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264
def _define_D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264():
    D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264 = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264_head
    D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264._fields_ = [
        ('ReconstructedPictureResourceIndex', UInt32),
        ('IsLongTermReference', win32more.Foundation.BOOL),
        ('LongTermPictureIdx', UInt32),
        ('PictureOrderCountNumber', UInt32),
        ('FrameDecodingOrderNumber', UInt32),
        ('TemporalLayerIndex', UInt32),
    ]
    return D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264
def _define_D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC_head():
    class D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC
def _define_D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC():
    D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC_head
    D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC._fields_ = [
        ('ReconstructedPictureResourceIndex', UInt32),
        ('IsRefUsedByCurrentPic', win32more.Foundation.BOOL),
        ('IsLongTermReference', win32more.Foundation.BOOL),
        ('PictureOrderCountNumber', UInt32),
        ('TemporalLayerIndex', UInt32),
    ]
    return D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC
def _define_D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS_head():
    class D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS(Structure):
        pass
    return D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS
def _define_D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS():
    D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS_head
    D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS._fields_ = [
        ('EncoderCodec', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC),
        ('EncoderProfile', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC),
        ('EncoderInputFormat', win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ('EncodedPictureEffectiveResolution', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC),
        ('HWLayoutMetadata', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER),
    ]
    return D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS
def _define_D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS_head():
    class D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS(Structure):
        pass
    return D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS
def _define_D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS():
    D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS_head
    D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS._fields_ = [
        ('ResolvedLayoutMetadata', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER),
    ]
    return D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS
def _define_D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC_head():
    class D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC
def _define_D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC():
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC_head
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC._fields_ = [
        ('Flags', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS),
        ('IntraRefreshConfig', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_INTRA_REFRESH),
        ('RateControl', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL),
        ('PictureTargetResolution', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC),
        ('SelectedLayoutMode', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE),
        ('FrameSubregionsLayoutData', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA),
        ('CodecGopSequence', win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE),
    ]
    return D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC
D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS = UInt32
D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_NONE = 0
D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RESOLUTION_CHANGE = 1
D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RATE_CONTROL_CHANGE = 2
D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_SUBREGION_LAYOUT_CHANGE = 4
D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_REQUEST_INTRA_REFRESH = 8
D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_GOP_SEQUENCE_CHANGE = 16
def _define_D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_head():
    class D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE(Structure):
        pass
    return D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE
def _define_D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE():
    D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_head
    class D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE__Anonymous_e__Union(Union):
        pass
    D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE__Anonymous_e__Union._fields_ = [
        ('pH264GroupOfPictures', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264_head)),
        ('pHEVCGroupOfPictures', POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC_head)),
    ]
    D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE._anonymous_ = [
        'Anonymous',
    ]
    D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE._fields_ = [
        ('DataSize', UInt32),
        ('Anonymous', D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE__Anonymous_e__Union),
    ]
    return D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE
def _define_D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264_head():
    class D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264(Structure):
        pass
    return D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264
def _define_D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264():
    D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264 = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264_head
    D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264._fields_ = [
        ('GOPLength', UInt32),
        ('PPicturePeriod', UInt32),
        ('pic_order_cnt_type', Byte),
        ('log2_max_frame_num_minus4', Byte),
        ('log2_max_pic_order_cnt_lsb_minus4', Byte),
    ]
    return D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264
def _define_D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC_head():
    class D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC(Structure):
        pass
    return D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC
def _define_D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC():
    D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC = win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC_head
    D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC._fields_ = [
        ('GOPLength', UInt32),
        ('PPicturePeriod', UInt32),
        ('log2_max_pic_order_cnt_lsb_minus4', Byte),
    ]
    return D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC
D3D12_VIDEO_ENCODER_SUPPORT_FLAGS = UInt32
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_NONE = 0
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_GENERAL_SUPPORT_OK = 1
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_RECONFIGURATION_AVAILABLE = 2
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RESOLUTION_RECONFIGURATION_AVAILABLE = 4
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_VBV_SIZE_CONFIG_AVAILABLE = 8
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_FRAME_ANALYSIS_AVAILABLE = 16
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RECONSTRUCTED_FRAMES_REQUIRE_TEXTURE_ARRAYS = 32
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_DELTA_QP_AVAILABLE = 64
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SUBREGION_LAYOUT_RECONFIGURATION_AVAILABLE = 128
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_ADJUSTABLE_QP_RANGE_AVAILABLE = 256
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_INITIAL_QP_AVAILABLE = 512
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_MAX_FRAME_SIZE_AVAILABLE = 1024
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SEQUENCE_GOP_RECONFIGURATION_AVAILABLE = 2048
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_MOTION_ESTIMATION_PRECISION_MODE_LIMIT_AVAILABLE = 4096
D3D12_VIDEO_ENCODER_TIER_HEVC = Int32
D3D12_VIDEO_ENCODER_TIER_HEVC_MAIN = 0
D3D12_VIDEO_ENCODER_TIER_HEVC_HIGH = 1
D3D12_VIDEO_ENCODER_VALIDATION_FLAGS = UInt32
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_NONE = 0
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_NOT_SUPPORTED = 1
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INPUT_FORMAT_NOT_SUPPORTED = 8
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_CONFIGURATION_NOT_SUPPORTED = 16
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_MODE_NOT_SUPPORTED = 32
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_CONFIGURATION_NOT_SUPPORTED = 64
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INTRA_REFRESH_MODE_NOT_SUPPORTED = 128
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_SUBREGION_LAYOUT_MODE_NOT_SUPPORTED = 256
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RESOLUTION_NOT_SUPPORTED_IN_LIST = 512
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_GOP_STRUCTURE_NOT_SUPPORTED = 2048
def _define_D3D12_VIDEO_EXTENSION_COMMAND_DESC_head():
    class D3D12_VIDEO_EXTENSION_COMMAND_DESC(Structure):
        pass
    return D3D12_VIDEO_EXTENSION_COMMAND_DESC
def _define_D3D12_VIDEO_EXTENSION_COMMAND_DESC():
    D3D12_VIDEO_EXTENSION_COMMAND_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_DESC_head
    D3D12_VIDEO_EXTENSION_COMMAND_DESC._fields_ = [
        ('NodeMask', UInt32),
        ('CommandId', Guid),
    ]
    return D3D12_VIDEO_EXTENSION_COMMAND_DESC
def _define_D3D12_VIDEO_EXTENSION_COMMAND_INFO_head():
    class D3D12_VIDEO_EXTENSION_COMMAND_INFO(Structure):
        pass
    return D3D12_VIDEO_EXTENSION_COMMAND_INFO
def _define_D3D12_VIDEO_EXTENSION_COMMAND_INFO():
    D3D12_VIDEO_EXTENSION_COMMAND_INFO = win32more.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_INFO_head
    D3D12_VIDEO_EXTENSION_COMMAND_INFO._fields_ = [
        ('CommandId', Guid),
        ('Name', win32more.Foundation.PWSTR),
        ('CommandListSupportFlags', win32more.Graphics.Direct3D12.D3D12_COMMAND_LIST_SUPPORT_FLAGS),
    ]
    return D3D12_VIDEO_EXTENSION_COMMAND_INFO
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS = UInt32
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_NONE = 0
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_READ = 1
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_WRITE = 2
def _define_D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO_head():
    class D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO(Structure):
        pass
    return D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO
def _define_D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO():
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO = win32more.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO_head
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO._fields_ = [
        ('Name', win32more.Foundation.PWSTR),
        ('Type', win32more.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE),
        ('Flags', win32more.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS),
    ]
    return D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE = Int32
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CREATION = 0
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_INITIALIZATION = 1
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_EXECUTION = 2
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_INPUT = 3
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_OUTPUT = 4
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_INPUT = 5
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_OUTPUT = 6
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE = Int32
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT8 = 0
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT16 = 1
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT32 = 2
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT64 = 3
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT8 = 4
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT16 = 5
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT32 = 6
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT64 = 7
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_FLOAT = 8
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_DOUBLE = 9
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_RESOURCE = 10
D3D12_VIDEO_FIELD_TYPE = Int32
D3D12_VIDEO_FIELD_TYPE_NONE = 0
D3D12_VIDEO_FIELD_TYPE_INTERLACED_TOP_FIELD_FIRST = 1
D3D12_VIDEO_FIELD_TYPE_INTERLACED_BOTTOM_FIELD_FIRST = 2
def _define_D3D12_VIDEO_FORMAT_head():
    class D3D12_VIDEO_FORMAT(Structure):
        pass
    return D3D12_VIDEO_FORMAT
def _define_D3D12_VIDEO_FORMAT():
    D3D12_VIDEO_FORMAT = win32more.Media.MediaFoundation.D3D12_VIDEO_FORMAT_head
    D3D12_VIDEO_FORMAT._fields_ = [
        ('Format', win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ('ColorSpace', win32more.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE),
    ]
    return D3D12_VIDEO_FORMAT
D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE = Int32
D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_NONE = 0
D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_FIELD_BASED = 1
D3D12_VIDEO_FRAME_STEREO_FORMAT = Int32
D3D12_VIDEO_FRAME_STEREO_FORMAT_NONE = 0
D3D12_VIDEO_FRAME_STEREO_FORMAT_MONO = 1
D3D12_VIDEO_FRAME_STEREO_FORMAT_HORIZONTAL = 2
D3D12_VIDEO_FRAME_STEREO_FORMAT_VERTICAL = 3
D3D12_VIDEO_FRAME_STEREO_FORMAT_SEPARATE = 4
def _define_D3D12_VIDEO_MOTION_ESTIMATOR_DESC_head():
    class D3D12_VIDEO_MOTION_ESTIMATOR_DESC(Structure):
        pass
    return D3D12_VIDEO_MOTION_ESTIMATOR_DESC
def _define_D3D12_VIDEO_MOTION_ESTIMATOR_DESC():
    D3D12_VIDEO_MOTION_ESTIMATOR_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_DESC_head
    D3D12_VIDEO_MOTION_ESTIMATOR_DESC._fields_ = [
        ('NodeMask', UInt32),
        ('InputFormat', win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ('BlockSize', win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE),
        ('Precision', win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION),
        ('SizeRange', win32more.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE),
    ]
    return D3D12_VIDEO_MOTION_ESTIMATOR_DESC
def _define_D3D12_VIDEO_MOTION_ESTIMATOR_INPUT_head():
    class D3D12_VIDEO_MOTION_ESTIMATOR_INPUT(Structure):
        pass
    return D3D12_VIDEO_MOTION_ESTIMATOR_INPUT
def _define_D3D12_VIDEO_MOTION_ESTIMATOR_INPUT():
    D3D12_VIDEO_MOTION_ESTIMATOR_INPUT = win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_INPUT_head
    D3D12_VIDEO_MOTION_ESTIMATOR_INPUT._fields_ = [
        ('pInputTexture2D', win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ('InputSubresourceIndex', UInt32),
        ('pReferenceTexture2D', win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ('ReferenceSubresourceIndex', UInt32),
        ('pHintMotionVectorHeap', win32more.Media.MediaFoundation.ID3D12VideoMotionVectorHeap_head),
    ]
    return D3D12_VIDEO_MOTION_ESTIMATOR_INPUT
def _define_D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT_head():
    class D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT(Structure):
        pass
    return D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT
def _define_D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT():
    D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT = win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT_head
    D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT._fields_ = [
        ('pMotionVectorHeap', win32more.Media.MediaFoundation.ID3D12VideoMotionVectorHeap_head),
    ]
    return D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT
D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE = Int32
D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_8X8 = 0
D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_16X16 = 1
D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS = UInt32
D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_NONE = 0
D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_8X8 = 1
D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_16X16 = 2
D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION = Int32
D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_QUARTER_PEL = 0
D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS = UInt32
D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_NONE = 0
D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_QUARTER_PEL = 1
def _define_D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC_head():
    class D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC(Structure):
        pass
    return D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC
def _define_D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC():
    D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC_head
    D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC._fields_ = [
        ('NodeMask', UInt32),
        ('InputFormat', win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ('BlockSize', win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE),
        ('Precision', win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION),
        ('SizeRange', win32more.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE),
    ]
    return D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC
def _define_D3D12_VIDEO_PROCESS_ALPHA_BLENDING_head():
    class D3D12_VIDEO_PROCESS_ALPHA_BLENDING(Structure):
        pass
    return D3D12_VIDEO_PROCESS_ALPHA_BLENDING
def _define_D3D12_VIDEO_PROCESS_ALPHA_BLENDING():
    D3D12_VIDEO_PROCESS_ALPHA_BLENDING = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_ALPHA_BLENDING_head
    D3D12_VIDEO_PROCESS_ALPHA_BLENDING._fields_ = [
        ('Enable', win32more.Foundation.BOOL),
        ('Alpha', Single),
    ]
    return D3D12_VIDEO_PROCESS_ALPHA_BLENDING
D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE = Int32
D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_OPAQUE = 0
D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_BACKGROUND = 1
D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_DESTINATION = 2
D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_SOURCE_STREAM = 3
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS = UInt32
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_NONE = 0
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DENOISE = 1
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DERINGING = 2
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_EDGE_ENHANCEMENT = 4
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_COLOR_CORRECTION = 8
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_FLESH_TONE_MAPPING = 16
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_IMAGE_STABILIZATION = 32
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_SUPER_RESOLUTION = 64
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_ANAMORPHIC_SCALING = 128
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_CUSTOM = 2147483648
D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS = UInt32
D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_NONE = 0
D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_BOB = 1
D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_CUSTOM = 2147483648
D3D12_VIDEO_PROCESS_FEATURE_FLAGS = UInt32
D3D12_VIDEO_PROCESS_FEATURE_FLAG_NONE = 0
D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_FILL = 1
D3D12_VIDEO_PROCESS_FEATURE_FLAG_LUMA_KEY = 2
D3D12_VIDEO_PROCESS_FEATURE_FLAG_STEREO = 4
D3D12_VIDEO_PROCESS_FEATURE_FLAG_ROTATION = 8
D3D12_VIDEO_PROCESS_FEATURE_FLAG_FLIP = 16
D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_BLENDING = 32
D3D12_VIDEO_PROCESS_FEATURE_FLAG_PIXEL_ASPECT_RATIO = 64
D3D12_VIDEO_PROCESS_FILTER = Int32
D3D12_VIDEO_PROCESS_FILTER_BRIGHTNESS = 0
D3D12_VIDEO_PROCESS_FILTER_CONTRAST = 1
D3D12_VIDEO_PROCESS_FILTER_HUE = 2
D3D12_VIDEO_PROCESS_FILTER_SATURATION = 3
D3D12_VIDEO_PROCESS_FILTER_NOISE_REDUCTION = 4
D3D12_VIDEO_PROCESS_FILTER_EDGE_ENHANCEMENT = 5
D3D12_VIDEO_PROCESS_FILTER_ANAMORPHIC_SCALING = 6
D3D12_VIDEO_PROCESS_FILTER_STEREO_ADJUSTMENT = 7
D3D12_VIDEO_PROCESS_FILTER_FLAGS = UInt32
D3D12_VIDEO_PROCESS_FILTER_FLAG_NONE = 0
D3D12_VIDEO_PROCESS_FILTER_FLAG_BRIGHTNESS = 1
D3D12_VIDEO_PROCESS_FILTER_FLAG_CONTRAST = 2
D3D12_VIDEO_PROCESS_FILTER_FLAG_HUE = 4
D3D12_VIDEO_PROCESS_FILTER_FLAG_SATURATION = 8
D3D12_VIDEO_PROCESS_FILTER_FLAG_NOISE_REDUCTION = 16
D3D12_VIDEO_PROCESS_FILTER_FLAG_EDGE_ENHANCEMENT = 32
D3D12_VIDEO_PROCESS_FILTER_FLAG_ANAMORPHIC_SCALING = 64
D3D12_VIDEO_PROCESS_FILTER_FLAG_STEREO_ADJUSTMENT = 128
def _define_D3D12_VIDEO_PROCESS_FILTER_RANGE_head():
    class D3D12_VIDEO_PROCESS_FILTER_RANGE(Structure):
        pass
    return D3D12_VIDEO_PROCESS_FILTER_RANGE
def _define_D3D12_VIDEO_PROCESS_FILTER_RANGE():
    D3D12_VIDEO_PROCESS_FILTER_RANGE = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FILTER_RANGE_head
    D3D12_VIDEO_PROCESS_FILTER_RANGE._fields_ = [
        ('Minimum', Int32),
        ('Maximum', Int32),
        ('Default', Int32),
        ('Multiplier', Single),
    ]
    return D3D12_VIDEO_PROCESS_FILTER_RANGE
def _define_D3D12_VIDEO_PROCESS_INPUT_STREAM_head():
    class D3D12_VIDEO_PROCESS_INPUT_STREAM(Structure):
        pass
    return D3D12_VIDEO_PROCESS_INPUT_STREAM
def _define_D3D12_VIDEO_PROCESS_INPUT_STREAM():
    D3D12_VIDEO_PROCESS_INPUT_STREAM = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_head
    D3D12_VIDEO_PROCESS_INPUT_STREAM._fields_ = [
        ('pTexture2D', win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ('Subresource', UInt32),
        ('ReferenceSet', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_REFERENCE_SET),
    ]
    return D3D12_VIDEO_PROCESS_INPUT_STREAM
def _define_D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS_head():
    class D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS(Structure):
        pass
    return D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS
def _define_D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS():
    D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS_head
    D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS._fields_ = [
        ('InputStream', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM * 2),
        ('Transform', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_TRANSFORM),
        ('Flags', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS),
        ('RateInfo', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE),
        ('FilterLevels', Int32 * 32),
        ('AlphaBlending', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_ALPHA_BLENDING),
    ]
    return D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS
def _define_D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1_head():
    class D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1(Structure):
        pass
    return D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1
def _define_D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1():
    D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1 = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1_head
    D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1._fields_ = [
        ('InputStream', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM * 2),
        ('Transform', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_TRANSFORM),
        ('Flags', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS),
        ('RateInfo', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE),
        ('FilterLevels', Int32 * 32),
        ('AlphaBlending', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_ALPHA_BLENDING),
        ('FieldType', win32more.Media.MediaFoundation.D3D12_VIDEO_FIELD_TYPE),
    ]
    return D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1
def _define_D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC_head():
    class D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC(Structure):
        pass
    return D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC
def _define_D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC():
    D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC_head
    D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC._fields_ = [
        ('Format', win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ('ColorSpace', win32more.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE),
        ('SourceAspectRatio', win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
        ('DestinationAspectRatio', win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
        ('FrameRate', win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
        ('SourceSizeRange', win32more.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE),
        ('DestinationSizeRange', win32more.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE),
        ('EnableOrientation', win32more.Foundation.BOOL),
        ('FilterFlags', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FILTER_FLAGS),
        ('StereoFormat', win32more.Media.MediaFoundation.D3D12_VIDEO_FRAME_STEREO_FORMAT),
        ('FieldType', win32more.Media.MediaFoundation.D3D12_VIDEO_FIELD_TYPE),
        ('DeinterlaceMode', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS),
        ('EnableAlphaBlending', win32more.Foundation.BOOL),
        ('LumaKey', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_LUMA_KEY),
        ('NumPastFrames', UInt32),
        ('NumFutureFrames', UInt32),
        ('EnableAutoProcessing', win32more.Foundation.BOOL),
    ]
    return D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC
D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS = UInt32
D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_NONE = 0
D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_DISCONTINUITY = 1
D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_REPEAT = 2
def _define_D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE_head():
    class D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE(Structure):
        pass
    return D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE
def _define_D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE():
    D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE_head
    D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE._fields_ = [
        ('OutputIndex', UInt32),
        ('InputFrameOrField', UInt32),
    ]
    return D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE
def _define_D3D12_VIDEO_PROCESS_LUMA_KEY_head():
    class D3D12_VIDEO_PROCESS_LUMA_KEY(Structure):
        pass
    return D3D12_VIDEO_PROCESS_LUMA_KEY
def _define_D3D12_VIDEO_PROCESS_LUMA_KEY():
    D3D12_VIDEO_PROCESS_LUMA_KEY = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_LUMA_KEY_head
    D3D12_VIDEO_PROCESS_LUMA_KEY._fields_ = [
        ('Enable', win32more.Foundation.BOOL),
        ('Lower', Single),
        ('Upper', Single),
    ]
    return D3D12_VIDEO_PROCESS_LUMA_KEY
D3D12_VIDEO_PROCESS_ORIENTATION = Int32
D3D12_VIDEO_PROCESS_ORIENTATION_DEFAULT = 0
D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_HORIZONTAL = 1
D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90 = 2
D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90_FLIP_HORIZONTAL = 3
D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_180 = 4
D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_VERTICAL = 5
D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270 = 6
D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270_FLIP_HORIZONTAL = 7
def _define_D3D12_VIDEO_PROCESS_OUTPUT_STREAM_head():
    class D3D12_VIDEO_PROCESS_OUTPUT_STREAM(Structure):
        pass
    return D3D12_VIDEO_PROCESS_OUTPUT_STREAM
def _define_D3D12_VIDEO_PROCESS_OUTPUT_STREAM():
    D3D12_VIDEO_PROCESS_OUTPUT_STREAM = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_head
    D3D12_VIDEO_PROCESS_OUTPUT_STREAM._fields_ = [
        ('pTexture2D', win32more.Graphics.Direct3D12.ID3D12Resource_head),
        ('Subresource', UInt32),
    ]
    return D3D12_VIDEO_PROCESS_OUTPUT_STREAM
def _define_D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS_head():
    class D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS(Structure):
        pass
    return D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS
def _define_D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS():
    D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS_head
    D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS._fields_ = [
        ('OutputStream', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM * 2),
        ('TargetRectangle', win32more.Foundation.RECT),
    ]
    return D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS
def _define_D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC_head():
    class D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC(Structure):
        pass
    return D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC
def _define_D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC():
    D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC_head
    D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC._fields_ = [
        ('Format', win32more.Graphics.Dxgi.Common.DXGI_FORMAT),
        ('ColorSpace', win32more.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE),
        ('AlphaFillMode', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE),
        ('AlphaFillModeSourceStreamIndex', UInt32),
        ('BackgroundColor', Single * 4),
        ('FrameRate', win32more.Graphics.Dxgi.Common.DXGI_RATIONAL),
        ('EnableStereo', win32more.Foundation.BOOL),
    ]
    return D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC
def _define_D3D12_VIDEO_PROCESS_REFERENCE_SET_head():
    class D3D12_VIDEO_PROCESS_REFERENCE_SET(Structure):
        pass
    return D3D12_VIDEO_PROCESS_REFERENCE_SET
def _define_D3D12_VIDEO_PROCESS_REFERENCE_SET():
    D3D12_VIDEO_PROCESS_REFERENCE_SET = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_REFERENCE_SET_head
    D3D12_VIDEO_PROCESS_REFERENCE_SET._fields_ = [
        ('NumPastFrames', UInt32),
        ('ppPastFrames', POINTER(win32more.Graphics.Direct3D12.ID3D12Resource_head)),
        ('pPastSubresources', POINTER(UInt32)),
        ('NumFutureFrames', UInt32),
        ('ppFutureFrames', POINTER(win32more.Graphics.Direct3D12.ID3D12Resource_head)),
        ('pFutureSubresources', POINTER(UInt32)),
    ]
    return D3D12_VIDEO_PROCESS_REFERENCE_SET
D3D12_VIDEO_PROCESS_SUPPORT_FLAGS = UInt32
D3D12_VIDEO_PROCESS_SUPPORT_FLAG_NONE = 0
D3D12_VIDEO_PROCESS_SUPPORT_FLAG_SUPPORTED = 1
def _define_D3D12_VIDEO_PROCESS_TRANSFORM_head():
    class D3D12_VIDEO_PROCESS_TRANSFORM(Structure):
        pass
    return D3D12_VIDEO_PROCESS_TRANSFORM
def _define_D3D12_VIDEO_PROCESS_TRANSFORM():
    D3D12_VIDEO_PROCESS_TRANSFORM = win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_TRANSFORM_head
    D3D12_VIDEO_PROCESS_TRANSFORM._fields_ = [
        ('SourceRectangle', win32more.Foundation.RECT),
        ('DestinationRectangle', win32more.Foundation.RECT),
        ('Orientation', win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_ORIENTATION),
    ]
    return D3D12_VIDEO_PROCESS_TRANSFORM
D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS = UInt32
D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_NONE = 0
D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_SUPPORTED = 1
def _define_D3D12_VIDEO_SAMPLE_head():
    class D3D12_VIDEO_SAMPLE(Structure):
        pass
    return D3D12_VIDEO_SAMPLE
def _define_D3D12_VIDEO_SAMPLE():
    D3D12_VIDEO_SAMPLE = win32more.Media.MediaFoundation.D3D12_VIDEO_SAMPLE_head
    D3D12_VIDEO_SAMPLE._fields_ = [
        ('Width', UInt32),
        ('Height', UInt32),
        ('Format', win32more.Media.MediaFoundation.D3D12_VIDEO_FORMAT),
    ]
    return D3D12_VIDEO_SAMPLE
def _define_D3D12_VIDEO_SCALE_SUPPORT_head():
    class D3D12_VIDEO_SCALE_SUPPORT(Structure):
        pass
    return D3D12_VIDEO_SCALE_SUPPORT
def _define_D3D12_VIDEO_SCALE_SUPPORT():
    D3D12_VIDEO_SCALE_SUPPORT = win32more.Media.MediaFoundation.D3D12_VIDEO_SCALE_SUPPORT_head
    D3D12_VIDEO_SCALE_SUPPORT._fields_ = [
        ('OutputSizeRange', win32more.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE),
        ('Flags', win32more.Media.MediaFoundation.D3D12_VIDEO_SCALE_SUPPORT_FLAGS),
    ]
    return D3D12_VIDEO_SCALE_SUPPORT
D3D12_VIDEO_SCALE_SUPPORT_FLAGS = UInt32
D3D12_VIDEO_SCALE_SUPPORT_FLAG_NONE = 0
D3D12_VIDEO_SCALE_SUPPORT_FLAG_POW2_ONLY = 1
D3D12_VIDEO_SCALE_SUPPORT_FLAG_EVEN_DIMENSIONS_ONLY = 2
def _define_D3D12_VIDEO_SIZE_RANGE_head():
    class D3D12_VIDEO_SIZE_RANGE(Structure):
        pass
    return D3D12_VIDEO_SIZE_RANGE
def _define_D3D12_VIDEO_SIZE_RANGE():
    D3D12_VIDEO_SIZE_RANGE = win32more.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE_head
    D3D12_VIDEO_SIZE_RANGE._fields_ = [
        ('MaxWidth', UInt32),
        ('MaxHeight', UInt32),
        ('MinWidth', UInt32),
        ('MinHeight', UInt32),
    ]
    return D3D12_VIDEO_SIZE_RANGE
def _define_D3DCONTENTPROTECTIONCAPS_head():
    class D3DCONTENTPROTECTIONCAPS(Structure):
        pass
    return D3DCONTENTPROTECTIONCAPS
def _define_D3DCONTENTPROTECTIONCAPS():
    D3DCONTENTPROTECTIONCAPS = win32more.Media.MediaFoundation.D3DCONTENTPROTECTIONCAPS_head
    D3DCONTENTPROTECTIONCAPS._fields_ = [
        ('Caps', UInt32),
        ('KeyExchangeType', Guid),
        ('BufferAlignmentStart', UInt32),
        ('BlockAlignmentSize', UInt32),
        ('ProtectedMemorySize', UInt64),
    ]
    return D3DCONTENTPROTECTIONCAPS
def _define_D3DOVERLAYCAPS_head():
    class D3DOVERLAYCAPS(Structure):
        pass
    return D3DOVERLAYCAPS
def _define_D3DOVERLAYCAPS():
    D3DOVERLAYCAPS = win32more.Media.MediaFoundation.D3DOVERLAYCAPS_head
    D3DOVERLAYCAPS._fields_ = [
        ('Caps', UInt32),
        ('MaxOverlayDisplayWidth', UInt32),
        ('MaxOverlayDisplayHeight', UInt32),
    ]
    return D3DOVERLAYCAPS
def _define_DEVICE_INFO_head():
    class DEVICE_INFO(Structure):
        pass
    return DEVICE_INFO
def _define_DEVICE_INFO():
    DEVICE_INFO = win32more.Media.MediaFoundation.DEVICE_INFO_head
    DEVICE_INFO._fields_ = [
        ('pFriendlyDeviceName', win32more.Foundation.BSTR),
        ('pUniqueDeviceName', win32more.Foundation.BSTR),
        ('pManufacturerName', win32more.Foundation.BSTR),
        ('pModelName', win32more.Foundation.BSTR),
        ('pIconURL', win32more.Foundation.BSTR),
    ]
    return DEVICE_INFO
DeviceStreamState = Int32
DeviceStreamState_Stop = 0
DeviceStreamState_Pause = 1
DeviceStreamState_Run = 2
DeviceStreamState_Disabled = 3
def _define_DigitalWindowSetting_head():
    class DigitalWindowSetting(Structure):
        pass
    return DigitalWindowSetting
def _define_DigitalWindowSetting():
    DigitalWindowSetting = win32more.Media.MediaFoundation.DigitalWindowSetting_head
    DigitalWindowSetting._fields_ = [
        ('OriginX', Double),
        ('OriginY', Double),
        ('WindowSize', Double),
    ]
    return DigitalWindowSetting
def _define_DIRTYRECT_INFO_head():
    class DIRTYRECT_INFO(Structure):
        pass
    return DIRTYRECT_INFO
def _define_DIRTYRECT_INFO():
    DIRTYRECT_INFO = win32more.Media.MediaFoundation.DIRTYRECT_INFO_head
    DIRTYRECT_INFO._fields_ = [
        ('FrameNumber', UInt32),
        ('NumDirtyRects', UInt32),
        ('DirtyRects', win32more.Foundation.RECT * 1),
    ]
    return DIRTYRECT_INFO
def _define_DXVA_AYUVsample2_head():
    class DXVA_AYUVsample2(Structure):
        pass
    return DXVA_AYUVsample2
def _define_DXVA_AYUVsample2():
    DXVA_AYUVsample2 = win32more.Media.MediaFoundation.DXVA_AYUVsample2_head
    DXVA_AYUVsample2._fields_ = [
        ('bCrValue', Byte),
        ('bCbValue', Byte),
        ('bY_Value', Byte),
        ('bSampleAlpha8', Byte),
    ]
    return DXVA_AYUVsample2
def _define_DXVA_BufferDescription_head():
    class DXVA_BufferDescription(Structure):
        pass
    return DXVA_BufferDescription
def _define_DXVA_BufferDescription():
    DXVA_BufferDescription = win32more.Media.MediaFoundation.DXVA_BufferDescription_head
    DXVA_BufferDescription._pack_ = 1
    DXVA_BufferDescription._fields_ = [
        ('dwTypeIndex', UInt32),
        ('dwBufferIndex', UInt32),
        ('dwDataOffset', UInt32),
        ('dwDataSize', UInt32),
        ('dwFirstMBaddress', UInt32),
        ('dwNumMBsInBuffer', UInt32),
        ('dwWidth', UInt32),
        ('dwHeight', UInt32),
        ('dwStride', UInt32),
        ('dwReservedBits', UInt32),
    ]
    return DXVA_BufferDescription
def _define_DXVA_ConfigPictureDecode_head():
    class DXVA_ConfigPictureDecode(Structure):
        pass
    return DXVA_ConfigPictureDecode
def _define_DXVA_ConfigPictureDecode():
    DXVA_ConfigPictureDecode = win32more.Media.MediaFoundation.DXVA_ConfigPictureDecode_head
    DXVA_ConfigPictureDecode._pack_ = 1
    DXVA_ConfigPictureDecode._fields_ = [
        ('dwFunction', UInt32),
        ('dwReservedBits', UInt32 * 3),
        ('guidConfigBitstreamEncryption', Guid),
        ('guidConfigMBcontrolEncryption', Guid),
        ('guidConfigResidDiffEncryption', Guid),
        ('bConfigBitstreamRaw', Byte),
        ('bConfigMBcontrolRasterOrder', Byte),
        ('bConfigResidDiffHost', Byte),
        ('bConfigSpatialResid8', Byte),
        ('bConfigResid8Subtraction', Byte),
        ('bConfigSpatialHost8or9Clipping', Byte),
        ('bConfigSpatialResidInterleaved', Byte),
        ('bConfigIntraResidUnsigned', Byte),
        ('bConfigResidDiffAccelerator', Byte),
        ('bConfigHostInverseScan', Byte),
        ('bConfigSpecificIDCT', Byte),
        ('bConfig4GroupedCoefs', Byte),
    ]
    return DXVA_ConfigPictureDecode
def _define_DXVA_COPPCommand_head():
    class DXVA_COPPCommand(Structure):
        pass
    return DXVA_COPPCommand
def _define_DXVA_COPPCommand():
    DXVA_COPPCommand = win32more.Media.MediaFoundation.DXVA_COPPCommand_head
    DXVA_COPPCommand._fields_ = [
        ('macKDI', Guid),
        ('guidCommandID', Guid),
        ('dwSequence', UInt32),
        ('cbSizeData', UInt32),
        ('CommandData', Byte * 4056),
    ]
    return DXVA_COPPCommand
def _define_DXVA_COPPSignature_head():
    class DXVA_COPPSignature(Structure):
        pass
    return DXVA_COPPSignature
def _define_DXVA_COPPSignature():
    DXVA_COPPSignature = win32more.Media.MediaFoundation.DXVA_COPPSignature_head
    DXVA_COPPSignature._fields_ = [
        ('Signature', Byte * 256),
    ]
    return DXVA_COPPSignature
def _define_DXVA_COPPStatusInput_head():
    class DXVA_COPPStatusInput(Structure):
        pass
    return DXVA_COPPStatusInput
def _define_DXVA_COPPStatusInput():
    DXVA_COPPStatusInput = win32more.Media.MediaFoundation.DXVA_COPPStatusInput_head
    DXVA_COPPStatusInput._fields_ = [
        ('rApp', Guid),
        ('guidStatusRequestID', Guid),
        ('dwSequence', UInt32),
        ('cbSizeData', UInt32),
        ('StatusData', Byte * 4056),
    ]
    return DXVA_COPPStatusInput
def _define_DXVA_COPPStatusOutput_head():
    class DXVA_COPPStatusOutput(Structure):
        pass
    return DXVA_COPPStatusOutput
def _define_DXVA_COPPStatusOutput():
    DXVA_COPPStatusOutput = win32more.Media.MediaFoundation.DXVA_COPPStatusOutput_head
    DXVA_COPPStatusOutput._fields_ = [
        ('macKDI', Guid),
        ('cbSizeData', UInt32),
        ('COPPStatus', Byte * 4076),
    ]
    return DXVA_COPPStatusOutput
def _define_DXVA_DeinterlaceBlt_head():
    class DXVA_DeinterlaceBlt(Structure):
        pass
    return DXVA_DeinterlaceBlt
def _define_DXVA_DeinterlaceBlt():
    DXVA_DeinterlaceBlt = win32more.Media.MediaFoundation.DXVA_DeinterlaceBlt_head
    DXVA_DeinterlaceBlt._fields_ = [
        ('Size', UInt32),
        ('Reserved', UInt32),
        ('rtTarget', Int64),
        ('DstRect', win32more.Foundation.RECT),
        ('SrcRect', win32more.Foundation.RECT),
        ('NumSourceSurfaces', UInt32),
        ('Alpha', Single),
        ('Source', win32more.Media.MediaFoundation.DXVA_VideoSample * 32),
    ]
    return DXVA_DeinterlaceBlt
def _define_DXVA_DeinterlaceBltEx_head():
    class DXVA_DeinterlaceBltEx(Structure):
        pass
    return DXVA_DeinterlaceBltEx
def _define_DXVA_DeinterlaceBltEx():
    DXVA_DeinterlaceBltEx = win32more.Media.MediaFoundation.DXVA_DeinterlaceBltEx_head
    DXVA_DeinterlaceBltEx._fields_ = [
        ('Size', UInt32),
        ('BackgroundColor', win32more.Media.MediaFoundation.DXVA_AYUVsample2),
        ('rcTarget', win32more.Foundation.RECT),
        ('rtTarget', Int64),
        ('NumSourceSurfaces', UInt32),
        ('Alpha', Single),
        ('Source', win32more.Media.MediaFoundation.DXVA_VideoSample2 * 32),
        ('DestinationFormat', UInt32),
        ('DestinationFlags', UInt32),
    ]
    return DXVA_DeinterlaceBltEx
def _define_DXVA_DeinterlaceBltEx32_head():
    class DXVA_DeinterlaceBltEx32(Structure):
        pass
    return DXVA_DeinterlaceBltEx32
def _define_DXVA_DeinterlaceBltEx32():
    DXVA_DeinterlaceBltEx32 = win32more.Media.MediaFoundation.DXVA_DeinterlaceBltEx32_head
    DXVA_DeinterlaceBltEx32._fields_ = [
        ('Size', UInt32),
        ('BackgroundColor', win32more.Media.MediaFoundation.DXVA_AYUVsample2),
        ('rcTarget', win32more.Foundation.RECT),
        ('rtTarget', Int64),
        ('NumSourceSurfaces', UInt32),
        ('Alpha', Single),
        ('Source', win32more.Media.MediaFoundation.DXVA_VideoSample32 * 32),
        ('DestinationFormat', UInt32),
        ('DestinationFlags', UInt32),
    ]
    return DXVA_DeinterlaceBltEx32
def _define_DXVA_DeinterlaceCaps_head():
    class DXVA_DeinterlaceCaps(Structure):
        pass
    return DXVA_DeinterlaceCaps
def _define_DXVA_DeinterlaceCaps():
    DXVA_DeinterlaceCaps = win32more.Media.MediaFoundation.DXVA_DeinterlaceCaps_head
    DXVA_DeinterlaceCaps._fields_ = [
        ('Size', UInt32),
        ('NumPreviousOutputFrames', UInt32),
        ('InputPool', UInt32),
        ('NumForwardRefSamples', UInt32),
        ('NumBackwardRefSamples', UInt32),
        ('d3dOutputFormat', win32more.Graphics.Direct3D9.D3DFORMAT),
        ('VideoProcessingCaps', win32more.Media.MediaFoundation.DXVA_VideoProcessCaps),
        ('DeinterlaceTechnology', win32more.Media.MediaFoundation.DXVA_DeinterlaceTech),
    ]
    return DXVA_DeinterlaceCaps
def _define_DXVA_DeinterlaceQueryAvailableModes_head():
    class DXVA_DeinterlaceQueryAvailableModes(Structure):
        pass
    return DXVA_DeinterlaceQueryAvailableModes
def _define_DXVA_DeinterlaceQueryAvailableModes():
    DXVA_DeinterlaceQueryAvailableModes = win32more.Media.MediaFoundation.DXVA_DeinterlaceQueryAvailableModes_head
    DXVA_DeinterlaceQueryAvailableModes._fields_ = [
        ('Size', UInt32),
        ('NumGuids', UInt32),
        ('Guids', Guid * 32),
    ]
    return DXVA_DeinterlaceQueryAvailableModes
def _define_DXVA_DeinterlaceQueryModeCaps_head():
    class DXVA_DeinterlaceQueryModeCaps(Structure):
        pass
    return DXVA_DeinterlaceQueryModeCaps
def _define_DXVA_DeinterlaceQueryModeCaps():
    DXVA_DeinterlaceQueryModeCaps = win32more.Media.MediaFoundation.DXVA_DeinterlaceQueryModeCaps_head
    DXVA_DeinterlaceQueryModeCaps._fields_ = [
        ('Size', UInt32),
        ('Guid', Guid),
        ('VideoDesc', win32more.Media.MediaFoundation.DXVA_VideoDesc),
    ]
    return DXVA_DeinterlaceQueryModeCaps
DXVA_DeinterlaceTech = Int32
DXVA_DeinterlaceTech_Unknown = 0
DXVA_DeinterlaceTech_BOBLineReplicate = 1
DXVA_DeinterlaceTech_BOBVerticalStretch = 2
DXVA_DeinterlaceTech_BOBVerticalStretch4Tap = 256
DXVA_DeinterlaceTech_MedianFiltering = 4
DXVA_DeinterlaceTech_EdgeFiltering = 16
DXVA_DeinterlaceTech_FieldAdaptive = 32
DXVA_DeinterlaceTech_PixelAdaptive = 64
DXVA_DeinterlaceTech_MotionVectorSteered = 128
DXVA_DestinationFlags = Int32
DXVA_DestinationFlagMask = 15
DXVA_DestinationFlag_Background_Changed = 1
DXVA_DestinationFlag_TargetRect_Changed = 2
DXVA_DestinationFlag_ColorData_Changed = 4
DXVA_DestinationFlag_Alpha_Changed = 8
def _define_DXVA_ExtendedFormat_head():
    class DXVA_ExtendedFormat(Structure):
        pass
    return DXVA_ExtendedFormat
def _define_DXVA_ExtendedFormat():
    DXVA_ExtendedFormat = win32more.Media.MediaFoundation.DXVA_ExtendedFormat_head
    DXVA_ExtendedFormat._fields_ = [
        ('_bitfield', UInt32),
    ]
    return DXVA_ExtendedFormat
def _define_DXVA_Frequency_head():
    class DXVA_Frequency(Structure):
        pass
    return DXVA_Frequency
def _define_DXVA_Frequency():
    DXVA_Frequency = win32more.Media.MediaFoundation.DXVA_Frequency_head
    DXVA_Frequency._fields_ = [
        ('Numerator', UInt32),
        ('Denominator', UInt32),
    ]
    return DXVA_Frequency
DXVA_NominalRange = Int32
DXVA_NominalRangeShift = 12
DXVA_NominalRangeMask = 28672
DXVA_NominalRange_Unknown = 0
DXVA_NominalRange_Normal = 1
DXVA_NominalRange_Wide = 2
DXVA_NominalRange_0_255 = 1
DXVA_NominalRange_16_235 = 2
DXVA_NominalRange_48_208 = 3
def _define_DXVA_PictureParameters_head():
    class DXVA_PictureParameters(Structure):
        pass
    return DXVA_PictureParameters
def _define_DXVA_PictureParameters():
    DXVA_PictureParameters = win32more.Media.MediaFoundation.DXVA_PictureParameters_head
    DXVA_PictureParameters._pack_ = 1
    DXVA_PictureParameters._fields_ = [
        ('wDecodedPictureIndex', UInt16),
        ('wDeblockedPictureIndex', UInt16),
        ('wForwardRefPictureIndex', UInt16),
        ('wBackwardRefPictureIndex', UInt16),
        ('wPicWidthInMBminus1', UInt16),
        ('wPicHeightInMBminus1', UInt16),
        ('bMacroblockWidthMinus1', Byte),
        ('bMacroblockHeightMinus1', Byte),
        ('bBlockWidthMinus1', Byte),
        ('bBlockHeightMinus1', Byte),
        ('bBPPminus1', Byte),
        ('bPicStructure', Byte),
        ('bSecondField', Byte),
        ('bPicIntra', Byte),
        ('bPicBackwardPrediction', Byte),
        ('bBidirectionalAveragingMode', Byte),
        ('bMVprecisionAndChromaRelation', Byte),
        ('bChromaFormat', Byte),
        ('bPicScanFixed', Byte),
        ('bPicScanMethod', Byte),
        ('bPicReadbackRequests', Byte),
        ('bRcontrol', Byte),
        ('bPicSpatialResid8', Byte),
        ('bPicOverflowBlocks', Byte),
        ('bPicExtrapolation', Byte),
        ('bPicDeblocked', Byte),
        ('bPicDeblockConfined', Byte),
        ('bPic4MVallowed', Byte),
        ('bPicOBMC', Byte),
        ('bPicBinPB', Byte),
        ('bMV_RPS', Byte),
        ('bReservedBits', Byte),
        ('wBitstreamFcodes', UInt16),
        ('wBitstreamPCEelements', UInt16),
        ('bBitstreamConcealmentNeed', Byte),
        ('bBitstreamConcealmentMethod', Byte),
    ]
    return DXVA_PictureParameters
def _define_DXVA_ProcAmpControlBlt_head():
    class DXVA_ProcAmpControlBlt(Structure):
        pass
    return DXVA_ProcAmpControlBlt
def _define_DXVA_ProcAmpControlBlt():
    DXVA_ProcAmpControlBlt = win32more.Media.MediaFoundation.DXVA_ProcAmpControlBlt_head
    DXVA_ProcAmpControlBlt._fields_ = [
        ('Size', UInt32),
        ('DstRect', win32more.Foundation.RECT),
        ('SrcRect', win32more.Foundation.RECT),
        ('Alpha', Single),
        ('Brightness', Single),
        ('Contrast', Single),
        ('Hue', Single),
        ('Saturation', Single),
    ]
    return DXVA_ProcAmpControlBlt
def _define_DXVA_ProcAmpControlCaps_head():
    class DXVA_ProcAmpControlCaps(Structure):
        pass
    return DXVA_ProcAmpControlCaps
def _define_DXVA_ProcAmpControlCaps():
    DXVA_ProcAmpControlCaps = win32more.Media.MediaFoundation.DXVA_ProcAmpControlCaps_head
    DXVA_ProcAmpControlCaps._fields_ = [
        ('Size', UInt32),
        ('InputPool', UInt32),
        ('d3dOutputFormat', win32more.Graphics.Direct3D9.D3DFORMAT),
        ('ProcAmpControlProps', UInt32),
        ('VideoProcessingCaps', UInt32),
    ]
    return DXVA_ProcAmpControlCaps
DXVA_ProcAmpControlProp = Int32
DXVA_ProcAmp_None = 0
DXVA_ProcAmp_Brightness = 1
DXVA_ProcAmp_Contrast = 2
DXVA_ProcAmp_Hue = 4
DXVA_ProcAmp_Saturation = 8
def _define_DXVA_ProcAmpControlQueryRange_head():
    class DXVA_ProcAmpControlQueryRange(Structure):
        pass
    return DXVA_ProcAmpControlQueryRange
def _define_DXVA_ProcAmpControlQueryRange():
    DXVA_ProcAmpControlQueryRange = win32more.Media.MediaFoundation.DXVA_ProcAmpControlQueryRange_head
    DXVA_ProcAmpControlQueryRange._fields_ = [
        ('Size', UInt32),
        ('ProcAmpControlProp', win32more.Media.MediaFoundation.DXVA_ProcAmpControlProp),
        ('VideoDesc', win32more.Media.MediaFoundation.DXVA_VideoDesc),
    ]
    return DXVA_ProcAmpControlQueryRange
DXVA_SampleFlags = Int32
DXVA_SampleFlagsMask = 15
DXVA_SampleFlag_Palette_Changed = 1
DXVA_SampleFlag_SrcRect_Changed = 2
DXVA_SampleFlag_DstRect_Changed = 4
DXVA_SampleFlag_ColorData_Changed = 8
DXVA_SampleFormat = Int32
DXVA_SampleFormatMask = 255
DXVA_SampleUnknown = 0
DXVA_SamplePreviousFrame = 1
DXVA_SampleProgressiveFrame = 2
DXVA_SampleFieldInterleavedEvenFirst = 3
DXVA_SampleFieldInterleavedOddFirst = 4
DXVA_SampleFieldSingleEven = 5
DXVA_SampleFieldSingleOdd = 6
DXVA_SampleSubStream = 7
DXVA_VideoChromaSubsampling = Int32
DXVA_VideoChromaSubsamplingShift = 8
DXVA_VideoChromaSubsamplingMask = 3840
DXVA_VideoChromaSubsampling_Unknown = 0
DXVA_VideoChromaSubsampling_ProgressiveChroma = 8
DXVA_VideoChromaSubsampling_Horizontally_Cosited = 4
DXVA_VideoChromaSubsampling_Vertically_Cosited = 2
DXVA_VideoChromaSubsampling_Vertically_AlignedChromaPlanes = 1
DXVA_VideoChromaSubsampling_MPEG2 = 5
DXVA_VideoChromaSubsampling_MPEG1 = 1
DXVA_VideoChromaSubsampling_DV_PAL = 6
DXVA_VideoChromaSubsampling_Cosited = 7
def _define_DXVA_VideoDesc_head():
    class DXVA_VideoDesc(Structure):
        pass
    return DXVA_VideoDesc
def _define_DXVA_VideoDesc():
    DXVA_VideoDesc = win32more.Media.MediaFoundation.DXVA_VideoDesc_head
    DXVA_VideoDesc._fields_ = [
        ('Size', UInt32),
        ('SampleWidth', UInt32),
        ('SampleHeight', UInt32),
        ('SampleFormat', UInt32),
        ('d3dFormat', win32more.Graphics.Direct3D9.D3DFORMAT),
        ('InputSampleFreq', win32more.Media.MediaFoundation.DXVA_Frequency),
        ('OutputFrameFreq', win32more.Media.MediaFoundation.DXVA_Frequency),
    ]
    return DXVA_VideoDesc
DXVA_VideoLighting = Int32
DXVA_VideoLightingShift = 18
DXVA_VideoLightingMask = 3932160
DXVA_VideoLighting_Unknown = 0
DXVA_VideoLighting_bright = 1
DXVA_VideoLighting_office = 2
DXVA_VideoLighting_dim = 3
DXVA_VideoLighting_dark = 4
DXVA_VideoPrimaries = Int32
DXVA_VideoPrimariesShift = 22
DXVA_VideoPrimariesMask = 130023424
DXVA_VideoPrimaries_Unknown = 0
DXVA_VideoPrimaries_reserved = 1
DXVA_VideoPrimaries_BT709 = 2
DXVA_VideoPrimaries_BT470_2_SysM = 3
DXVA_VideoPrimaries_BT470_2_SysBG = 4
DXVA_VideoPrimaries_SMPTE170M = 5
DXVA_VideoPrimaries_SMPTE240M = 6
DXVA_VideoPrimaries_EBU3213 = 7
DXVA_VideoPrimaries_SMPTE_C = 8
DXVA_VideoProcessCaps = Int32
DXVA_VideoProcess_None = 0
DXVA_VideoProcess_YUV2RGB = 1
DXVA_VideoProcess_StretchX = 2
DXVA_VideoProcess_StretchY = 4
DXVA_VideoProcess_AlphaBlend = 8
DXVA_VideoProcess_SubRects = 16
DXVA_VideoProcess_SubStreams = 32
DXVA_VideoProcess_SubStreamsExtended = 64
DXVA_VideoProcess_YUV2RGBExtended = 128
DXVA_VideoProcess_AlphaBlendExtended = 256
def _define_DXVA_VideoPropertyRange_head():
    class DXVA_VideoPropertyRange(Structure):
        pass
    return DXVA_VideoPropertyRange
def _define_DXVA_VideoPropertyRange():
    DXVA_VideoPropertyRange = win32more.Media.MediaFoundation.DXVA_VideoPropertyRange_head
    DXVA_VideoPropertyRange._fields_ = [
        ('MinValue', Single),
        ('MaxValue', Single),
        ('DefaultValue', Single),
        ('StepSize', Single),
    ]
    return DXVA_VideoPropertyRange
def _define_DXVA_VideoSample_head():
    class DXVA_VideoSample(Structure):
        pass
    return DXVA_VideoSample
def _define_DXVA_VideoSample():
    DXVA_VideoSample = win32more.Media.MediaFoundation.DXVA_VideoSample_head
    DXVA_VideoSample._fields_ = [
        ('rtStart', Int64),
        ('rtEnd', Int64),
        ('SampleFormat', win32more.Media.MediaFoundation.DXVA_SampleFormat),
        ('lpDDSSrcSurface', c_void_p),
    ]
    return DXVA_VideoSample
def _define_DXVA_VideoSample2_head():
    class DXVA_VideoSample2(Structure):
        pass
    return DXVA_VideoSample2
def _define_DXVA_VideoSample2():
    DXVA_VideoSample2 = win32more.Media.MediaFoundation.DXVA_VideoSample2_head
    DXVA_VideoSample2._fields_ = [
        ('Size', UInt32),
        ('Reserved', UInt32),
        ('rtStart', Int64),
        ('rtEnd', Int64),
        ('SampleFormat', UInt32),
        ('SampleFlags', UInt32),
        ('lpDDSSrcSurface', c_void_p),
        ('rcSrc', win32more.Foundation.RECT),
        ('rcDst', win32more.Foundation.RECT),
        ('Palette', win32more.Media.MediaFoundation.DXVA_AYUVsample2 * 16),
    ]
    return DXVA_VideoSample2
def _define_DXVA_VideoSample32_head():
    class DXVA_VideoSample32(Structure):
        pass
    return DXVA_VideoSample32
def _define_DXVA_VideoSample32():
    DXVA_VideoSample32 = win32more.Media.MediaFoundation.DXVA_VideoSample32_head
    DXVA_VideoSample32._fields_ = [
        ('rtStart', Int64),
        ('rtEnd', Int64),
        ('SampleFormat', UInt32),
        ('SampleFlags', UInt32),
        ('lpDDSSrcSurface', UInt32),
        ('rcSrc', win32more.Foundation.RECT),
        ('rcDst', win32more.Foundation.RECT),
        ('Palette', win32more.Media.MediaFoundation.DXVA_AYUVsample2 * 16),
    ]
    return DXVA_VideoSample32
DXVA_VideoTransferFunction = Int32
DXVA_VideoTransFuncShift = 27
DXVA_VideoTransFuncMask = -134217728
DXVA_VideoTransFunc_Unknown = 0
DXVA_VideoTransFunc_10 = 1
DXVA_VideoTransFunc_18 = 2
DXVA_VideoTransFunc_20 = 3
DXVA_VideoTransFunc_22 = 4
DXVA_VideoTransFunc_22_709 = 5
DXVA_VideoTransFunc_22_240M = 6
DXVA_VideoTransFunc_22_8bit_sRGB = 7
DXVA_VideoTransFunc_28 = 8
DXVA_VideoTransferMatrix = Int32
DXVA_VideoTransferMatrixShift = 15
DXVA_VideoTransferMatrixMask = 229376
DXVA_VideoTransferMatrix_Unknown = 0
DXVA_VideoTransferMatrix_BT709 = 1
DXVA_VideoTransferMatrix_BT601 = 2
DXVA_VideoTransferMatrix_SMPTE240M = 3
def _define_DXVA2_AES_CTR_IV_head():
    class DXVA2_AES_CTR_IV(Structure):
        pass
    return DXVA2_AES_CTR_IV
def _define_DXVA2_AES_CTR_IV():
    DXVA2_AES_CTR_IV = win32more.Media.MediaFoundation.DXVA2_AES_CTR_IV_head
    DXVA2_AES_CTR_IV._fields_ = [
        ('IV', UInt64),
        ('Count', UInt64),
    ]
    return DXVA2_AES_CTR_IV
def _define_DXVA2_AYUVSample16_head():
    class DXVA2_AYUVSample16(Structure):
        pass
    return DXVA2_AYUVSample16
def _define_DXVA2_AYUVSample16():
    DXVA2_AYUVSample16 = win32more.Media.MediaFoundation.DXVA2_AYUVSample16_head
    DXVA2_AYUVSample16._fields_ = [
        ('Cr', UInt16),
        ('Cb', UInt16),
        ('Y', UInt16),
        ('Alpha', UInt16),
    ]
    return DXVA2_AYUVSample16
def _define_DXVA2_AYUVSample8_head():
    class DXVA2_AYUVSample8(Structure):
        pass
    return DXVA2_AYUVSample8
def _define_DXVA2_AYUVSample8():
    DXVA2_AYUVSample8 = win32more.Media.MediaFoundation.DXVA2_AYUVSample8_head
    DXVA2_AYUVSample8._fields_ = [
        ('Cr', Byte),
        ('Cb', Byte),
        ('Y', Byte),
        ('Alpha', Byte),
    ]
    return DXVA2_AYUVSample8
DXVA2_BufferfType = Int32
DXVA2_PictureParametersBufferType = 0
DXVA2_MacroBlockControlBufferType = 1
DXVA2_ResidualDifferenceBufferType = 2
DXVA2_DeblockingControlBufferType = 3
DXVA2_InverseQuantizationMatrixBufferType = 4
DXVA2_SliceControlBufferType = 5
DXVA2_BitStreamDateBufferType = 6
DXVA2_MotionVectorBuffer = 7
DXVA2_FilmGrainBuffer = 8
def _define_DXVA2_ConfigPictureDecode_head():
    class DXVA2_ConfigPictureDecode(Structure):
        pass
    return DXVA2_ConfigPictureDecode
def _define_DXVA2_ConfigPictureDecode():
    DXVA2_ConfigPictureDecode = win32more.Media.MediaFoundation.DXVA2_ConfigPictureDecode_head
    DXVA2_ConfigPictureDecode._fields_ = [
        ('guidConfigBitstreamEncryption', Guid),
        ('guidConfigMBcontrolEncryption', Guid),
        ('guidConfigResidDiffEncryption', Guid),
        ('ConfigBitstreamRaw', UInt32),
        ('ConfigMBcontrolRasterOrder', UInt32),
        ('ConfigResidDiffHost', UInt32),
        ('ConfigSpatialResid8', UInt32),
        ('ConfigResid8Subtraction', UInt32),
        ('ConfigSpatialHost8or9Clipping', UInt32),
        ('ConfigSpatialResidInterleaved', UInt32),
        ('ConfigIntraResidUnsigned', UInt32),
        ('ConfigResidDiffAccelerator', UInt32),
        ('ConfigHostInverseScan', UInt32),
        ('ConfigSpecificIDCT', UInt32),
        ('Config4GroupedCoefs', UInt32),
        ('ConfigMinRenderTargetBuffCount', UInt16),
        ('ConfigDecoderSpecific', UInt16),
    ]
    return DXVA2_ConfigPictureDecode
def _define_DXVA2_DecodeBufferDesc_head():
    class DXVA2_DecodeBufferDesc(Structure):
        pass
    return DXVA2_DecodeBufferDesc
def _define_DXVA2_DecodeBufferDesc():
    DXVA2_DecodeBufferDesc = win32more.Media.MediaFoundation.DXVA2_DecodeBufferDesc_head
    DXVA2_DecodeBufferDesc._fields_ = [
        ('CompressedBufferType', win32more.Media.MediaFoundation.DXVA2_BufferfType),
        ('BufferIndex', UInt32),
        ('DataOffset', UInt32),
        ('DataSize', UInt32),
        ('FirstMBaddress', UInt32),
        ('NumMBsInBuffer', UInt32),
        ('Width', UInt32),
        ('Height', UInt32),
        ('Stride', UInt32),
        ('ReservedBits', UInt32),
        ('pvPVPState', c_void_p),
    ]
    return DXVA2_DecodeBufferDesc
def _define_DXVA2_DecodeExecuteParams_head():
    class DXVA2_DecodeExecuteParams(Structure):
        pass
    return DXVA2_DecodeExecuteParams
def _define_DXVA2_DecodeExecuteParams():
    DXVA2_DecodeExecuteParams = win32more.Media.MediaFoundation.DXVA2_DecodeExecuteParams_head
    DXVA2_DecodeExecuteParams._fields_ = [
        ('NumCompBuffers', UInt32),
        ('pCompressedBuffers', POINTER(win32more.Media.MediaFoundation.DXVA2_DecodeBufferDesc_head)),
        ('pExtensionData', POINTER(win32more.Media.MediaFoundation.DXVA2_DecodeExtensionData_head)),
    ]
    return DXVA2_DecodeExecuteParams
def _define_DXVA2_DecodeExtensionData_head():
    class DXVA2_DecodeExtensionData(Structure):
        pass
    return DXVA2_DecodeExtensionData
def _define_DXVA2_DecodeExtensionData():
    DXVA2_DecodeExtensionData = win32more.Media.MediaFoundation.DXVA2_DecodeExtensionData_head
    DXVA2_DecodeExtensionData._fields_ = [
        ('Function', UInt32),
        ('pPrivateInputData', c_void_p),
        ('PrivateInputDataSize', UInt32),
        ('pPrivateOutputData', c_void_p),
        ('PrivateOutputDataSize', UInt32),
    ]
    return DXVA2_DecodeExtensionData
DXVA2_DeinterlaceTech = Int32
DXVA2_DeinterlaceTech_Unknown = 0
DXVA2_DeinterlaceTech_BOBLineReplicate = 1
DXVA2_DeinterlaceTech_BOBVerticalStretch = 2
DXVA2_DeinterlaceTech_BOBVerticalStretch4Tap = 4
DXVA2_DeinterlaceTech_MedianFiltering = 8
DXVA2_DeinterlaceTech_EdgeFiltering = 16
DXVA2_DeinterlaceTech_FieldAdaptive = 32
DXVA2_DeinterlaceTech_PixelAdaptive = 64
DXVA2_DeinterlaceTech_MotionVectorSteered = 128
DXVA2_DeinterlaceTech_InverseTelecine = 256
DXVA2_DeinterlaceTech_Mask = 511
DXVA2_DestData = Int32
DXVA2_DestData_RFF = 1
DXVA2_DestData_TFF = 2
DXVA2_DestData_RFF_TFF_Present = 4
DXVA2_DestData_Mask = 65535
DXVA2_DetailFilterTech = Int32
DXVA2_DetailFilterTech_Unsupported = 0
DXVA2_DetailFilterTech_Unknown = 1
DXVA2_DetailFilterTech_Edge = 2
DXVA2_DetailFilterTech_Sharpening = 4
DXVA2_DetailFilterTech_Mask = 7
def _define_DXVA2_ExtendedFormat_head():
    class DXVA2_ExtendedFormat(Structure):
        pass
    return DXVA2_ExtendedFormat
def _define_DXVA2_ExtendedFormat():
    DXVA2_ExtendedFormat = win32more.Media.MediaFoundation.DXVA2_ExtendedFormat_head
    class DXVA2_ExtendedFormat__Anonymous_e__Union(Union):
        pass
    class DXVA2_ExtendedFormat__Anonymous_e__Union__Anonymous_e__Struct(Structure):
        pass
    DXVA2_ExtendedFormat__Anonymous_e__Union__Anonymous_e__Struct._fields_ = [
        ('_bitfield', UInt32),
    ]
    DXVA2_ExtendedFormat__Anonymous_e__Union._anonymous_ = [
        'Anonymous',
    ]
    DXVA2_ExtendedFormat__Anonymous_e__Union._fields_ = [
        ('Anonymous', DXVA2_ExtendedFormat__Anonymous_e__Union__Anonymous_e__Struct),
        ('value', UInt32),
    ]
    DXVA2_ExtendedFormat._anonymous_ = [
        'Anonymous',
    ]
    DXVA2_ExtendedFormat._fields_ = [
        ('Anonymous', DXVA2_ExtendedFormat__Anonymous_e__Union),
    ]
    return DXVA2_ExtendedFormat
DXVA2_FilterType = Int32
DXVA2_NoiseFilterLumaLevel = 1
DXVA2_NoiseFilterLumaThreshold = 2
DXVA2_NoiseFilterLumaRadius = 3
DXVA2_NoiseFilterChromaLevel = 4
DXVA2_NoiseFilterChromaThreshold = 5
DXVA2_NoiseFilterChromaRadius = 6
DXVA2_DetailFilterLumaLevel = 7
DXVA2_DetailFilterLumaThreshold = 8
DXVA2_DetailFilterLumaRadius = 9
DXVA2_DetailFilterChromaLevel = 10
DXVA2_DetailFilterChromaThreshold = 11
DXVA2_DetailFilterChromaRadius = 12
def _define_DXVA2_FilterValues_head():
    class DXVA2_FilterValues(Structure):
        pass
    return DXVA2_FilterValues
def _define_DXVA2_FilterValues():
    DXVA2_FilterValues = win32more.Media.MediaFoundation.DXVA2_FilterValues_head
    DXVA2_FilterValues._fields_ = [
        ('Level', win32more.Media.MediaFoundation.DXVA2_Fixed32),
        ('Threshold', win32more.Media.MediaFoundation.DXVA2_Fixed32),
        ('Radius', win32more.Media.MediaFoundation.DXVA2_Fixed32),
    ]
    return DXVA2_FilterValues
def _define_DXVA2_Fixed32_head():
    class DXVA2_Fixed32(Structure):
        pass
    return DXVA2_Fixed32
def _define_DXVA2_Fixed32():
    DXVA2_Fixed32 = win32more.Media.MediaFoundation.DXVA2_Fixed32_head
    class DXVA2_Fixed32__Anonymous_e__Union(Union):
        pass
    class DXVA2_Fixed32__Anonymous_e__Union__Anonymous_e__Struct(Structure):
        pass
    DXVA2_Fixed32__Anonymous_e__Union__Anonymous_e__Struct._fields_ = [
        ('Fraction', UInt16),
        ('Value', Int16),
    ]
    DXVA2_Fixed32__Anonymous_e__Union._anonymous_ = [
        'Anonymous',
    ]
    DXVA2_Fixed32__Anonymous_e__Union._fields_ = [
        ('Anonymous', DXVA2_Fixed32__Anonymous_e__Union__Anonymous_e__Struct),
        ('ll', Int32),
    ]
    DXVA2_Fixed32._anonymous_ = [
        'Anonymous',
    ]
    DXVA2_Fixed32._fields_ = [
        ('Anonymous', DXVA2_Fixed32__Anonymous_e__Union),
    ]
    return DXVA2_Fixed32
def _define_DXVA2_Frequency_head():
    class DXVA2_Frequency(Structure):
        pass
    return DXVA2_Frequency
def _define_DXVA2_Frequency():
    DXVA2_Frequency = win32more.Media.MediaFoundation.DXVA2_Frequency_head
    DXVA2_Frequency._fields_ = [
        ('Numerator', UInt32),
        ('Denominator', UInt32),
    ]
    return DXVA2_Frequency
DXVA2_NoiseFilterTech = Int32
DXVA2_NoiseFilterTech_Unsupported = 0
DXVA2_NoiseFilterTech_Unknown = 1
DXVA2_NoiseFilterTech_Median = 2
DXVA2_NoiseFilterTech_Temporal = 4
DXVA2_NoiseFilterTech_BlockNoise = 8
DXVA2_NoiseFilterTech_MosquitoNoise = 16
DXVA2_NoiseFilterTech_Mask = 31
DXVA2_NominalRange = Int32
DXVA2_NominalRangeMask = 7
DXVA2_NominalRange_Unknown = 0
DXVA2_NominalRange_Normal = 1
DXVA2_NominalRange_Wide = 2
DXVA2_NominalRange_0_255 = 1
DXVA2_NominalRange_16_235 = 2
DXVA2_NominalRange_48_208 = 3
DXVA2_ProcAmp = Int32
DXVA2_ProcAmp_None = 0
DXVA2_ProcAmp_Brightness = 1
DXVA2_ProcAmp_Contrast = 2
DXVA2_ProcAmp_Hue = 4
DXVA2_ProcAmp_Saturation = 8
DXVA2_ProcAmp_Mask = 15
def _define_DXVA2_ProcAmpValues_head():
    class DXVA2_ProcAmpValues(Structure):
        pass
    return DXVA2_ProcAmpValues
def _define_DXVA2_ProcAmpValues():
    DXVA2_ProcAmpValues = win32more.Media.MediaFoundation.DXVA2_ProcAmpValues_head
    DXVA2_ProcAmpValues._fields_ = [
        ('Brightness', win32more.Media.MediaFoundation.DXVA2_Fixed32),
        ('Contrast', win32more.Media.MediaFoundation.DXVA2_Fixed32),
        ('Hue', win32more.Media.MediaFoundation.DXVA2_Fixed32),
        ('Saturation', win32more.Media.MediaFoundation.DXVA2_Fixed32),
    ]
    return DXVA2_ProcAmpValues
DXVA2_SampleData = Int32
DXVA2_SampleData_RFF = 1
DXVA2_SampleData_TFF = 2
DXVA2_SampleData_RFF_TFF_Present = 4
DXVA2_SampleData_Mask = 65535
DXVA2_SampleFormat = Int32
DXVA2_SampleFormatMask = 255
DXVA2_SampleUnknown = 0
DXVA2_SampleProgressiveFrame = 2
DXVA2_SampleFieldInterleavedEvenFirst = 3
DXVA2_SampleFieldInterleavedOddFirst = 4
DXVA2_SampleFieldSingleEven = 5
DXVA2_SampleFieldSingleOdd = 6
DXVA2_SampleSubStream = 7
DXVA2_SurfaceType = Int32
DXVA2_SurfaceType_DecoderRenderTarget = 0
DXVA2_SurfaceType_ProcessorRenderTarget = 1
DXVA2_SurfaceType_D3DRenderTargetTexture = 2
def _define_DXVA2_ValueRange_head():
    class DXVA2_ValueRange(Structure):
        pass
    return DXVA2_ValueRange
def _define_DXVA2_ValueRange():
    DXVA2_ValueRange = win32more.Media.MediaFoundation.DXVA2_ValueRange_head
    DXVA2_ValueRange._fields_ = [
        ('MinValue', win32more.Media.MediaFoundation.DXVA2_Fixed32),
        ('MaxValue', win32more.Media.MediaFoundation.DXVA2_Fixed32),
        ('DefaultValue', win32more.Media.MediaFoundation.DXVA2_Fixed32),
        ('StepSize', win32more.Media.MediaFoundation.DXVA2_Fixed32),
    ]
    return DXVA2_ValueRange
DXVA2_VideoChromaSubSampling = Int32
DXVA2_VideoChromaSubsamplingMask = 15
DXVA2_VideoChromaSubsampling_Unknown = 0
DXVA2_VideoChromaSubsampling_ProgressiveChroma = 8
DXVA2_VideoChromaSubsampling_Horizontally_Cosited = 4
DXVA2_VideoChromaSubsampling_Vertically_Cosited = 2
DXVA2_VideoChromaSubsampling_Vertically_AlignedChromaPlanes = 1
DXVA2_VideoChromaSubsampling_MPEG2 = 5
DXVA2_VideoChromaSubsampling_MPEG1 = 1
DXVA2_VideoChromaSubsampling_DV_PAL = 6
DXVA2_VideoChromaSubsampling_Cosited = 7
def _define_DXVA2_VideoDesc_head():
    class DXVA2_VideoDesc(Structure):
        pass
    return DXVA2_VideoDesc
def _define_DXVA2_VideoDesc():
    DXVA2_VideoDesc = win32more.Media.MediaFoundation.DXVA2_VideoDesc_head
    DXVA2_VideoDesc._fields_ = [
        ('SampleWidth', UInt32),
        ('SampleHeight', UInt32),
        ('SampleFormat', win32more.Media.MediaFoundation.DXVA2_ExtendedFormat),
        ('Format', win32more.Graphics.Direct3D9.D3DFORMAT),
        ('InputSampleFreq', win32more.Media.MediaFoundation.DXVA2_Frequency),
        ('OutputFrameFreq', win32more.Media.MediaFoundation.DXVA2_Frequency),
        ('UABProtectionLevel', UInt32),
        ('Reserved', UInt32),
    ]
    return DXVA2_VideoDesc
DXVA2_VideoLighting = Int32
DXVA2_VideoLightingMask = 15
DXVA2_VideoLighting_Unknown = 0
DXVA2_VideoLighting_bright = 1
DXVA2_VideoLighting_office = 2
DXVA2_VideoLighting_dim = 3
DXVA2_VideoLighting_dark = 4
DXVA2_VideoPrimaries = Int32
DXVA2_VideoPrimariesMask = 31
DXVA2_VideoPrimaries_Unknown = 0
DXVA2_VideoPrimaries_reserved = 1
DXVA2_VideoPrimaries_BT709 = 2
DXVA2_VideoPrimaries_BT470_2_SysM = 3
DXVA2_VideoPrimaries_BT470_2_SysBG = 4
DXVA2_VideoPrimaries_SMPTE170M = 5
DXVA2_VideoPrimaries_SMPTE240M = 6
DXVA2_VideoPrimaries_EBU3213 = 7
DXVA2_VideoPrimaries_SMPTE_C = 8
DXVA2_VideoProcess = Int32
DXVA2_VideoProcess_None = 0
DXVA2_VideoProcess_YUV2RGB = 1
DXVA2_VideoProcess_StretchX = 2
DXVA2_VideoProcess_StretchY = 4
DXVA2_VideoProcess_AlphaBlend = 8
DXVA2_VideoProcess_SubRects = 16
DXVA2_VideoProcess_SubStreams = 32
DXVA2_VideoProcess_SubStreamsExtended = 64
DXVA2_VideoProcess_YUV2RGBExtended = 128
DXVA2_VideoProcess_AlphaBlendExtended = 256
DXVA2_VideoProcess_Constriction = 512
DXVA2_VideoProcess_NoiseFilter = 1024
DXVA2_VideoProcess_DetailFilter = 2048
DXVA2_VideoProcess_PlanarAlpha = 4096
DXVA2_VideoProcess_LinearScaling = 8192
DXVA2_VideoProcess_GammaCompensated = 16384
DXVA2_VideoProcess_MaintainsOriginalFieldData = 32768
DXVA2_VideoProcess_Mask = 65535
def _define_DXVA2_VideoProcessBltParams_head():
    class DXVA2_VideoProcessBltParams(Structure):
        pass
    return DXVA2_VideoProcessBltParams
def _define_DXVA2_VideoProcessBltParams():
    DXVA2_VideoProcessBltParams = win32more.Media.MediaFoundation.DXVA2_VideoProcessBltParams_head
    DXVA2_VideoProcessBltParams._fields_ = [
        ('TargetFrame', Int64),
        ('TargetRect', win32more.Foundation.RECT),
        ('ConstrictionSize', win32more.Foundation.SIZE),
        ('StreamingFlags', UInt32),
        ('BackgroundColor', win32more.Media.MediaFoundation.DXVA2_AYUVSample16),
        ('DestFormat', win32more.Media.MediaFoundation.DXVA2_ExtendedFormat),
        ('ProcAmpValues', win32more.Media.MediaFoundation.DXVA2_ProcAmpValues),
        ('Alpha', win32more.Media.MediaFoundation.DXVA2_Fixed32),
        ('NoiseFilterLuma', win32more.Media.MediaFoundation.DXVA2_FilterValues),
        ('NoiseFilterChroma', win32more.Media.MediaFoundation.DXVA2_FilterValues),
        ('DetailFilterLuma', win32more.Media.MediaFoundation.DXVA2_FilterValues),
        ('DetailFilterChroma', win32more.Media.MediaFoundation.DXVA2_FilterValues),
        ('DestData', UInt32),
    ]
    return DXVA2_VideoProcessBltParams
def _define_DXVA2_VideoProcessorCaps_head():
    class DXVA2_VideoProcessorCaps(Structure):
        pass
    return DXVA2_VideoProcessorCaps
def _define_DXVA2_VideoProcessorCaps():
    DXVA2_VideoProcessorCaps = win32more.Media.MediaFoundation.DXVA2_VideoProcessorCaps_head
    DXVA2_VideoProcessorCaps._fields_ = [
        ('DeviceCaps', UInt32),
        ('InputPool', win32more.Graphics.Direct3D9.D3DPOOL),
        ('NumForwardRefSamples', UInt32),
        ('NumBackwardRefSamples', UInt32),
        ('Reserved', UInt32),
        ('DeinterlaceTechnology', UInt32),
        ('ProcAmpControlCaps', UInt32),
        ('VideoProcessorOperations', UInt32),
        ('NoiseFilterTechnology', UInt32),
        ('DetailFilterTechnology', UInt32),
    ]
    return DXVA2_VideoProcessorCaps
DXVA2_VideoRenderTargetType = Int32
DXVA2_VideoDecoderRenderTarget = 0
DXVA2_VideoProcessorRenderTarget = 1
DXVA2_VideoSoftwareRenderTarget = 2
def _define_DXVA2_VideoSample_head():
    class DXVA2_VideoSample(Structure):
        pass
    return DXVA2_VideoSample
def _define_DXVA2_VideoSample():
    DXVA2_VideoSample = win32more.Media.MediaFoundation.DXVA2_VideoSample_head
    DXVA2_VideoSample._fields_ = [
        ('Start', Int64),
        ('End', Int64),
        ('SampleFormat', win32more.Media.MediaFoundation.DXVA2_ExtendedFormat),
        ('SrcSurface', win32more.Graphics.Direct3D9.IDirect3DSurface9_head),
        ('SrcRect', win32more.Foundation.RECT),
        ('DstRect', win32more.Foundation.RECT),
        ('Pal', win32more.Media.MediaFoundation.DXVA2_AYUVSample8 * 16),
        ('PlanarAlpha', win32more.Media.MediaFoundation.DXVA2_Fixed32),
        ('SampleData', UInt32),
    ]
    return DXVA2_VideoSample
DXVA2_VideoTransferFunction = Int32
DXVA2_VideoTransFuncMask = 31
DXVA2_VideoTransFunc_Unknown = 0
DXVA2_VideoTransFunc_10 = 1
DXVA2_VideoTransFunc_18 = 2
DXVA2_VideoTransFunc_20 = 3
DXVA2_VideoTransFunc_22 = 4
DXVA2_VideoTransFunc_709 = 5
DXVA2_VideoTransFunc_240M = 6
DXVA2_VideoTransFunc_sRGB = 7
DXVA2_VideoTransFunc_28 = 8
DXVA2_VideoTransferMatrix = Int32
DXVA2_VideoTransferMatrixMask = 7
DXVA2_VideoTransferMatrix_Unknown = 0
DXVA2_VideoTransferMatrix_BT709 = 1
DXVA2_VideoTransferMatrix_BT601 = 2
DXVA2_VideoTransferMatrix_SMPTE240M = 3
DXVA2_VPDev = Int32
DXVA2_VPDev_HardwareDevice = 1
DXVA2_VPDev_EmulatedDXVA1 = 2
DXVA2_VPDev_SoftwareDevice = 4
DXVA2_VPDev_Mask = 7
def _define_DXVABufferInfo_head():
    class DXVABufferInfo(Structure):
        pass
    return DXVABufferInfo
def _define_DXVABufferInfo():
    DXVABufferInfo = win32more.Media.MediaFoundation.DXVABufferInfo_head
    DXVABufferInfo._fields_ = [
        ('pCompSurface', c_void_p),
        ('DataOffset', UInt32),
        ('DataSize', UInt32),
    ]
    return DXVABufferInfo
def _define_DXVACompBufferInfo_head():
    class DXVACompBufferInfo(Structure):
        pass
    return DXVACompBufferInfo
def _define_DXVACompBufferInfo():
    DXVACompBufferInfo = win32more.Media.MediaFoundation.DXVACompBufferInfo_head
    DXVACompBufferInfo._fields_ = [
        ('NumCompBuffers', UInt32),
        ('WidthToCreate', UInt32),
        ('HeightToCreate', UInt32),
        ('BytesToAllocate', UInt32),
        ('Usage', UInt32),
        ('Pool', win32more.Graphics.Direct3D9.D3DPOOL),
        ('Format', win32more.Graphics.Direct3D9.D3DFORMAT),
    ]
    return DXVACompBufferInfo
DXVAHD_ALPHA_FILL_MODE = Int32
DXVAHD_ALPHA_FILL_MODE_OPAQUE = 0
DXVAHD_ALPHA_FILL_MODE_BACKGROUND = 1
DXVAHD_ALPHA_FILL_MODE_DESTINATION = 2
DXVAHD_ALPHA_FILL_MODE_SOURCE_STREAM = 3
DXVAHD_BLT_STATE = Int32
DXVAHD_BLT_STATE_TARGET_RECT = 0
DXVAHD_BLT_STATE_BACKGROUND_COLOR = 1
DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE = 2
DXVAHD_BLT_STATE_ALPHA_FILL = 3
DXVAHD_BLT_STATE_CONSTRICTION = 4
DXVAHD_BLT_STATE_PRIVATE = 1000
def _define_DXVAHD_BLT_STATE_ALPHA_FILL_DATA_head():
    class DXVAHD_BLT_STATE_ALPHA_FILL_DATA(Structure):
        pass
    return DXVAHD_BLT_STATE_ALPHA_FILL_DATA
def _define_DXVAHD_BLT_STATE_ALPHA_FILL_DATA():
    DXVAHD_BLT_STATE_ALPHA_FILL_DATA = win32more.Media.MediaFoundation.DXVAHD_BLT_STATE_ALPHA_FILL_DATA_head
    DXVAHD_BLT_STATE_ALPHA_FILL_DATA._fields_ = [
        ('Mode', win32more.Media.MediaFoundation.DXVAHD_ALPHA_FILL_MODE),
        ('StreamNumber', UInt32),
    ]
    return DXVAHD_BLT_STATE_ALPHA_FILL_DATA
def _define_DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA_head():
    class DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA(Structure):
        pass
    return DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA
def _define_DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA():
    DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA = win32more.Media.MediaFoundation.DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA_head
    DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA._fields_ = [
        ('YCbCr', win32more.Foundation.BOOL),
        ('BackgroundColor', win32more.Media.MediaFoundation.DXVAHD_COLOR),
    ]
    return DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA
def _define_DXVAHD_BLT_STATE_CONSTRICTION_DATA_head():
    class DXVAHD_BLT_STATE_CONSTRICTION_DATA(Structure):
        pass
    return DXVAHD_BLT_STATE_CONSTRICTION_DATA
def _define_DXVAHD_BLT_STATE_CONSTRICTION_DATA():
    DXVAHD_BLT_STATE_CONSTRICTION_DATA = win32more.Media.MediaFoundation.DXVAHD_BLT_STATE_CONSTRICTION_DATA_head
    DXVAHD_BLT_STATE_CONSTRICTION_DATA._fields_ = [
        ('Enable', win32more.Foundation.BOOL),
        ('Size', win32more.Foundation.SIZE),
    ]
    return DXVAHD_BLT_STATE_CONSTRICTION_DATA
def _define_DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA_head():
    class DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA(Structure):
        pass
    return DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA
def _define_DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA():
    DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA = win32more.Media.MediaFoundation.DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA_head
    class DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA__Anonymous_e__Union(Union):
        pass
    class DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA__Anonymous_e__Union__Anonymous_e__Struct(Structure):
        pass
    DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA__Anonymous_e__Union__Anonymous_e__Struct._fields_ = [
        ('_bitfield', UInt32),
    ]
    DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA__Anonymous_e__Union._anonymous_ = [
        'Anonymous',
    ]
    DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA__Anonymous_e__Union._fields_ = [
        ('Anonymous', DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA__Anonymous_e__Union__Anonymous_e__Struct),
        ('Value', UInt32),
    ]
    DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA._anonymous_ = [
        'Anonymous',
    ]
    DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA._fields_ = [
        ('Anonymous', DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA__Anonymous_e__Union),
    ]
    return DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA
def _define_DXVAHD_BLT_STATE_PRIVATE_DATA_head():
    class DXVAHD_BLT_STATE_PRIVATE_DATA(Structure):
        pass
    return DXVAHD_BLT_STATE_PRIVATE_DATA
def _define_DXVAHD_BLT_STATE_PRIVATE_DATA():
    DXVAHD_BLT_STATE_PRIVATE_DATA = win32more.Media.MediaFoundation.DXVAHD_BLT_STATE_PRIVATE_DATA_head
    DXVAHD_BLT_STATE_PRIVATE_DATA._fields_ = [
        ('Guid', Guid),
        ('DataSize', UInt32),
        ('pData', c_void_p),
    ]
    return DXVAHD_BLT_STATE_PRIVATE_DATA
def _define_DXVAHD_BLT_STATE_TARGET_RECT_DATA_head():
    class DXVAHD_BLT_STATE_TARGET_RECT_DATA(Structure):
        pass
    return DXVAHD_BLT_STATE_TARGET_RECT_DATA
def _define_DXVAHD_BLT_STATE_TARGET_RECT_DATA():
    DXVAHD_BLT_STATE_TARGET_RECT_DATA = win32more.Media.MediaFoundation.DXVAHD_BLT_STATE_TARGET_RECT_DATA_head
    DXVAHD_BLT_STATE_TARGET_RECT_DATA._fields_ = [
        ('Enable', win32more.Foundation.BOOL),
        ('TargetRect', win32more.Foundation.RECT),
    ]
    return DXVAHD_BLT_STATE_TARGET_RECT_DATA
def _define_DXVAHD_COLOR_head():
    class DXVAHD_COLOR(Union):
        pass
    return DXVAHD_COLOR
def _define_DXVAHD_COLOR():
    DXVAHD_COLOR = win32more.Media.MediaFoundation.DXVAHD_COLOR_head
    DXVAHD_COLOR._fields_ = [
        ('RGB', win32more.Media.MediaFoundation.DXVAHD_COLOR_RGBA),
        ('YCbCr', win32more.Media.MediaFoundation.DXVAHD_COLOR_YCbCrA),
    ]
    return DXVAHD_COLOR
def _define_DXVAHD_COLOR_RGBA_head():
    class DXVAHD_COLOR_RGBA(Structure):
        pass
    return DXVAHD_COLOR_RGBA
def _define_DXVAHD_COLOR_RGBA():
    DXVAHD_COLOR_RGBA = win32more.Media.MediaFoundation.DXVAHD_COLOR_RGBA_head
    DXVAHD_COLOR_RGBA._fields_ = [
        ('R', Single),
        ('G', Single),
        ('B', Single),
        ('A', Single),
    ]
    return DXVAHD_COLOR_RGBA
def _define_DXVAHD_COLOR_YCbCrA_head():
    class DXVAHD_COLOR_YCbCrA(Structure):
        pass
    return DXVAHD_COLOR_YCbCrA
def _define_DXVAHD_COLOR_YCbCrA():
    DXVAHD_COLOR_YCbCrA = win32more.Media.MediaFoundation.DXVAHD_COLOR_YCbCrA_head
    DXVAHD_COLOR_YCbCrA._fields_ = [
        ('Y', Single),
        ('Cb', Single),
        ('Cr', Single),
        ('A', Single),
    ]
    return DXVAHD_COLOR_YCbCrA
def _define_DXVAHD_CONTENT_DESC_head():
    class DXVAHD_CONTENT_DESC(Structure):
        pass
    return DXVAHD_CONTENT_DESC
def _define_DXVAHD_CONTENT_DESC():
    DXVAHD_CONTENT_DESC = win32more.Media.MediaFoundation.DXVAHD_CONTENT_DESC_head
    DXVAHD_CONTENT_DESC._fields_ = [
        ('InputFrameFormat', win32more.Media.MediaFoundation.DXVAHD_FRAME_FORMAT),
        ('InputFrameRate', win32more.Media.MediaFoundation.DXVAHD_RATIONAL),
        ('InputWidth', UInt32),
        ('InputHeight', UInt32),
        ('OutputFrameRate', win32more.Media.MediaFoundation.DXVAHD_RATIONAL),
        ('OutputWidth', UInt32),
        ('OutputHeight', UInt32),
    ]
    return DXVAHD_CONTENT_DESC
def _define_DXVAHD_CUSTOM_RATE_DATA_head():
    class DXVAHD_CUSTOM_RATE_DATA(Structure):
        pass
    return DXVAHD_CUSTOM_RATE_DATA
def _define_DXVAHD_CUSTOM_RATE_DATA():
    DXVAHD_CUSTOM_RATE_DATA = win32more.Media.MediaFoundation.DXVAHD_CUSTOM_RATE_DATA_head
    DXVAHD_CUSTOM_RATE_DATA._fields_ = [
        ('CustomRate', win32more.Media.MediaFoundation.DXVAHD_RATIONAL),
        ('OutputFrames', UInt32),
        ('InputInterlaced', win32more.Foundation.BOOL),
        ('InputFramesOrFields', UInt32),
    ]
    return DXVAHD_CUSTOM_RATE_DATA
DXVAHD_DEVICE_CAPS = Int32
DXVAHD_DEVICE_CAPS_LINEAR_SPACE = 1
DXVAHD_DEVICE_CAPS_xvYCC = 2
DXVAHD_DEVICE_CAPS_RGB_RANGE_CONVERSION = 4
DXVAHD_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION = 8
DXVAHD_DEVICE_TYPE = Int32
DXVAHD_DEVICE_TYPE_HARDWARE = 0
DXVAHD_DEVICE_TYPE_SOFTWARE = 1
DXVAHD_DEVICE_TYPE_REFERENCE = 2
DXVAHD_DEVICE_TYPE_OTHER = 3
DXVAHD_DEVICE_USAGE = Int32
DXVAHD_DEVICE_USAGE_PLAYBACK_NORMAL = 0
DXVAHD_DEVICE_USAGE_OPTIMAL_SPEED = 1
DXVAHD_DEVICE_USAGE_OPTIMAL_QUALITY = 2
DXVAHD_FEATURE_CAPS = Int32
DXVAHD_FEATURE_CAPS_ALPHA_FILL = 1
DXVAHD_FEATURE_CAPS_CONSTRICTION = 2
DXVAHD_FEATURE_CAPS_LUMA_KEY = 4
DXVAHD_FEATURE_CAPS_ALPHA_PALETTE = 8
DXVAHD_FILTER = Int32
DXVAHD_FILTER_BRIGHTNESS = 0
DXVAHD_FILTER_CONTRAST = 1
DXVAHD_FILTER_HUE = 2
DXVAHD_FILTER_SATURATION = 3
DXVAHD_FILTER_NOISE_REDUCTION = 4
DXVAHD_FILTER_EDGE_ENHANCEMENT = 5
DXVAHD_FILTER_ANAMORPHIC_SCALING = 6
DXVAHD_FILTER_CAPS = Int32
DXVAHD_FILTER_CAPS_BRIGHTNESS = 1
DXVAHD_FILTER_CAPS_CONTRAST = 2
DXVAHD_FILTER_CAPS_HUE = 4
DXVAHD_FILTER_CAPS_SATURATION = 8
DXVAHD_FILTER_CAPS_NOISE_REDUCTION = 16
DXVAHD_FILTER_CAPS_EDGE_ENHANCEMENT = 32
DXVAHD_FILTER_CAPS_ANAMORPHIC_SCALING = 64
def _define_DXVAHD_FILTER_RANGE_DATA_head():
    class DXVAHD_FILTER_RANGE_DATA(Structure):
        pass
    return DXVAHD_FILTER_RANGE_DATA
def _define_DXVAHD_FILTER_RANGE_DATA():
    DXVAHD_FILTER_RANGE_DATA = win32more.Media.MediaFoundation.DXVAHD_FILTER_RANGE_DATA_head
    DXVAHD_FILTER_RANGE_DATA._fields_ = [
        ('Minimum', Int32),
        ('Maximum', Int32),
        ('Default', Int32),
        ('Multiplier', Single),
    ]
    return DXVAHD_FILTER_RANGE_DATA
DXVAHD_FRAME_FORMAT = Int32
DXVAHD_FRAME_FORMAT_PROGRESSIVE = 0
DXVAHD_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST = 1
DXVAHD_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST = 2
DXVAHD_INPUT_FORMAT_CAPS = Int32
DXVAHD_INPUT_FORMAT_CAPS_RGB_INTERLACED = 1
DXVAHD_INPUT_FORMAT_CAPS_RGB_PROCAMP = 2
DXVAHD_INPUT_FORMAT_CAPS_RGB_LUMA_KEY = 4
DXVAHD_INPUT_FORMAT_CAPS_PALETTE_INTERLACED = 8
DXVAHD_ITELECINE_CAPS = Int32
DXVAHD_ITELECINE_CAPS_32 = 1
DXVAHD_ITELECINE_CAPS_22 = 2
DXVAHD_ITELECINE_CAPS_2224 = 4
DXVAHD_ITELECINE_CAPS_2332 = 8
DXVAHD_ITELECINE_CAPS_32322 = 16
DXVAHD_ITELECINE_CAPS_55 = 32
DXVAHD_ITELECINE_CAPS_64 = 64
DXVAHD_ITELECINE_CAPS_87 = 128
DXVAHD_ITELECINE_CAPS_222222222223 = 256
DXVAHD_ITELECINE_CAPS_OTHER = -2147483648
DXVAHD_OUTPUT_RATE = Int32
DXVAHD_OUTPUT_RATE_NORMAL = 0
DXVAHD_OUTPUT_RATE_HALF = 1
DXVAHD_OUTPUT_RATE_CUSTOM = 2
DXVAHD_PROCESSOR_CAPS = Int32
DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BLEND = 1
DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BOB = 2
DXVAHD_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE = 4
DXVAHD_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION = 8
DXVAHD_PROCESSOR_CAPS_INVERSE_TELECINE = 16
DXVAHD_PROCESSOR_CAPS_FRAME_RATE_CONVERSION = 32
def _define_DXVAHD_RATIONAL_head():
    class DXVAHD_RATIONAL(Structure):
        pass
    return DXVAHD_RATIONAL
def _define_DXVAHD_RATIONAL():
    DXVAHD_RATIONAL = win32more.Media.MediaFoundation.DXVAHD_RATIONAL_head
    DXVAHD_RATIONAL._fields_ = [
        ('Numerator', UInt32),
        ('Denominator', UInt32),
    ]
    return DXVAHD_RATIONAL
def _define_DXVAHD_STREAM_DATA_head():
    class DXVAHD_STREAM_DATA(Structure):
        pass
    return DXVAHD_STREAM_DATA
def _define_DXVAHD_STREAM_DATA():
    DXVAHD_STREAM_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_DATA_head
    DXVAHD_STREAM_DATA._fields_ = [
        ('Enable', win32more.Foundation.BOOL),
        ('OutputIndex', UInt32),
        ('InputFrameOrField', UInt32),
        ('PastFrames', UInt32),
        ('FutureFrames', UInt32),
        ('ppPastSurfaces', POINTER(win32more.Graphics.Direct3D9.IDirect3DSurface9_head)),
        ('pInputSurface', win32more.Graphics.Direct3D9.IDirect3DSurface9_head),
        ('ppFutureSurfaces', POINTER(win32more.Graphics.Direct3D9.IDirect3DSurface9_head)),
    ]
    return DXVAHD_STREAM_DATA
DXVAHD_STREAM_STATE = Int32
DXVAHD_STREAM_STATE_D3DFORMAT = 0
DXVAHD_STREAM_STATE_FRAME_FORMAT = 1
DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE = 2
DXVAHD_STREAM_STATE_OUTPUT_RATE = 3
DXVAHD_STREAM_STATE_SOURCE_RECT = 4
DXVAHD_STREAM_STATE_DESTINATION_RECT = 5
DXVAHD_STREAM_STATE_ALPHA = 6
DXVAHD_STREAM_STATE_PALETTE = 7
DXVAHD_STREAM_STATE_LUMA_KEY = 8
DXVAHD_STREAM_STATE_ASPECT_RATIO = 9
DXVAHD_STREAM_STATE_FILTER_BRIGHTNESS = 100
DXVAHD_STREAM_STATE_FILTER_CONTRAST = 101
DXVAHD_STREAM_STATE_FILTER_HUE = 102
DXVAHD_STREAM_STATE_FILTER_SATURATION = 103
DXVAHD_STREAM_STATE_FILTER_NOISE_REDUCTION = 104
DXVAHD_STREAM_STATE_FILTER_EDGE_ENHANCEMENT = 105
DXVAHD_STREAM_STATE_FILTER_ANAMORPHIC_SCALING = 106
DXVAHD_STREAM_STATE_PRIVATE = 1000
def _define_DXVAHD_STREAM_STATE_ALPHA_DATA_head():
    class DXVAHD_STREAM_STATE_ALPHA_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_ALPHA_DATA
def _define_DXVAHD_STREAM_STATE_ALPHA_DATA():
    DXVAHD_STREAM_STATE_ALPHA_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_ALPHA_DATA_head
    DXVAHD_STREAM_STATE_ALPHA_DATA._fields_ = [
        ('Enable', win32more.Foundation.BOOL),
        ('Alpha', Single),
    ]
    return DXVAHD_STREAM_STATE_ALPHA_DATA
def _define_DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA_head():
    class DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA
def _define_DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA():
    DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA_head
    DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA._fields_ = [
        ('Enable', win32more.Foundation.BOOL),
        ('SourceAspectRatio', win32more.Media.MediaFoundation.DXVAHD_RATIONAL),
        ('DestinationAspectRatio', win32more.Media.MediaFoundation.DXVAHD_RATIONAL),
    ]
    return DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA
def _define_DXVAHD_STREAM_STATE_D3DFORMAT_DATA_head():
    class DXVAHD_STREAM_STATE_D3DFORMAT_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_D3DFORMAT_DATA
def _define_DXVAHD_STREAM_STATE_D3DFORMAT_DATA():
    DXVAHD_STREAM_STATE_D3DFORMAT_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_D3DFORMAT_DATA_head
    DXVAHD_STREAM_STATE_D3DFORMAT_DATA._fields_ = [
        ('Format', win32more.Graphics.Direct3D9.D3DFORMAT),
    ]
    return DXVAHD_STREAM_STATE_D3DFORMAT_DATA
def _define_DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA_head():
    class DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA
def _define_DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA():
    DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA_head
    DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA._fields_ = [
        ('Enable', win32more.Foundation.BOOL),
        ('DestinationRect', win32more.Foundation.RECT),
    ]
    return DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA
def _define_DXVAHD_STREAM_STATE_FILTER_DATA_head():
    class DXVAHD_STREAM_STATE_FILTER_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_FILTER_DATA
def _define_DXVAHD_STREAM_STATE_FILTER_DATA():
    DXVAHD_STREAM_STATE_FILTER_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_FILTER_DATA_head
    DXVAHD_STREAM_STATE_FILTER_DATA._fields_ = [
        ('Enable', win32more.Foundation.BOOL),
        ('Level', Int32),
    ]
    return DXVAHD_STREAM_STATE_FILTER_DATA
def _define_DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA_head():
    class DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA
def _define_DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA():
    DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA_head
    DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA._fields_ = [
        ('FrameFormat', win32more.Media.MediaFoundation.DXVAHD_FRAME_FORMAT),
    ]
    return DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA
def _define_DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA_head():
    class DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA
def _define_DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA():
    DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA_head
    class DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA__Anonymous_e__Union(Union):
        pass
    class DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA__Anonymous_e__Union__Anonymous_e__Struct(Structure):
        pass
    DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA__Anonymous_e__Union__Anonymous_e__Struct._fields_ = [
        ('_bitfield', UInt32),
    ]
    DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA__Anonymous_e__Union._anonymous_ = [
        'Anonymous',
    ]
    DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA__Anonymous_e__Union._fields_ = [
        ('Anonymous', DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA__Anonymous_e__Union__Anonymous_e__Struct),
        ('Value', UInt32),
    ]
    DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA._anonymous_ = [
        'Anonymous',
    ]
    DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA._fields_ = [
        ('Anonymous', DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA__Anonymous_e__Union),
    ]
    return DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA
def _define_DXVAHD_STREAM_STATE_LUMA_KEY_DATA_head():
    class DXVAHD_STREAM_STATE_LUMA_KEY_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_LUMA_KEY_DATA
def _define_DXVAHD_STREAM_STATE_LUMA_KEY_DATA():
    DXVAHD_STREAM_STATE_LUMA_KEY_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_LUMA_KEY_DATA_head
    DXVAHD_STREAM_STATE_LUMA_KEY_DATA._fields_ = [
        ('Enable', win32more.Foundation.BOOL),
        ('Lower', Single),
        ('Upper', Single),
    ]
    return DXVAHD_STREAM_STATE_LUMA_KEY_DATA
def _define_DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA_head():
    class DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA
def _define_DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA():
    DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA_head
    DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA._fields_ = [
        ('RepeatFrame', win32more.Foundation.BOOL),
        ('OutputRate', win32more.Media.MediaFoundation.DXVAHD_OUTPUT_RATE),
        ('CustomRate', win32more.Media.MediaFoundation.DXVAHD_RATIONAL),
    ]
    return DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA
def _define_DXVAHD_STREAM_STATE_PALETTE_DATA_head():
    class DXVAHD_STREAM_STATE_PALETTE_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_PALETTE_DATA
def _define_DXVAHD_STREAM_STATE_PALETTE_DATA():
    DXVAHD_STREAM_STATE_PALETTE_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_PALETTE_DATA_head
    DXVAHD_STREAM_STATE_PALETTE_DATA._fields_ = [
        ('Count', UInt32),
        ('pEntries', POINTER(UInt32)),
    ]
    return DXVAHD_STREAM_STATE_PALETTE_DATA
def _define_DXVAHD_STREAM_STATE_PRIVATE_DATA_head():
    class DXVAHD_STREAM_STATE_PRIVATE_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_PRIVATE_DATA
def _define_DXVAHD_STREAM_STATE_PRIVATE_DATA():
    DXVAHD_STREAM_STATE_PRIVATE_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_PRIVATE_DATA_head
    DXVAHD_STREAM_STATE_PRIVATE_DATA._fields_ = [
        ('Guid', Guid),
        ('DataSize', UInt32),
        ('pData', c_void_p),
    ]
    return DXVAHD_STREAM_STATE_PRIVATE_DATA
def _define_DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA_head():
    class DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA
def _define_DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA():
    DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA_head
    DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA._fields_ = [
        ('Enable', win32more.Foundation.BOOL),
        ('ITelecineFlags', UInt32),
        ('Frames', UInt32),
        ('InputField', UInt32),
    ]
    return DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA
def _define_DXVAHD_STREAM_STATE_SOURCE_RECT_DATA_head():
    class DXVAHD_STREAM_STATE_SOURCE_RECT_DATA(Structure):
        pass
    return DXVAHD_STREAM_STATE_SOURCE_RECT_DATA
def _define_DXVAHD_STREAM_STATE_SOURCE_RECT_DATA():
    DXVAHD_STREAM_STATE_SOURCE_RECT_DATA = win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_SOURCE_RECT_DATA_head
    DXVAHD_STREAM_STATE_SOURCE_RECT_DATA._fields_ = [
        ('Enable', win32more.Foundation.BOOL),
        ('SourceRect', win32more.Foundation.RECT),
    ]
    return DXVAHD_STREAM_STATE_SOURCE_RECT_DATA
DXVAHD_SURFACE_TYPE = Int32
DXVAHD_SURFACE_TYPE_VIDEO_INPUT = 0
DXVAHD_SURFACE_TYPE_VIDEO_INPUT_PRIVATE = 1
DXVAHD_SURFACE_TYPE_VIDEO_OUTPUT = 2
def _define_DXVAHD_VPCAPS_head():
    class DXVAHD_VPCAPS(Structure):
        pass
    return DXVAHD_VPCAPS
def _define_DXVAHD_VPCAPS():
    DXVAHD_VPCAPS = win32more.Media.MediaFoundation.DXVAHD_VPCAPS_head
    DXVAHD_VPCAPS._fields_ = [
        ('VPGuid', Guid),
        ('PastFrames', UInt32),
        ('FutureFrames', UInt32),
        ('ProcessorCaps', UInt32),
        ('ITelecineCaps', UInt32),
        ('CustomRateCount', UInt32),
    ]
    return DXVAHD_VPCAPS
def _define_DXVAHD_VPDEVCAPS_head():
    class DXVAHD_VPDEVCAPS(Structure):
        pass
    return DXVAHD_VPDEVCAPS
def _define_DXVAHD_VPDEVCAPS():
    DXVAHD_VPDEVCAPS = win32more.Media.MediaFoundation.DXVAHD_VPDEVCAPS_head
    DXVAHD_VPDEVCAPS._fields_ = [
        ('DeviceType', win32more.Media.MediaFoundation.DXVAHD_DEVICE_TYPE),
        ('DeviceCaps', UInt32),
        ('FeatureCaps', UInt32),
        ('FilterCaps', UInt32),
        ('InputFormatCaps', UInt32),
        ('InputPool', win32more.Graphics.Direct3D9.D3DPOOL),
        ('OutputFormatCount', UInt32),
        ('InputFormatCount', UInt32),
        ('VideoProcessorCount', UInt32),
        ('MaxInputStreams', UInt32),
        ('MaxStreamStates', UInt32),
    ]
    return DXVAHD_VPDEVCAPS
def _define_DXVAHDETW_CREATEVIDEOPROCESSOR_head():
    class DXVAHDETW_CREATEVIDEOPROCESSOR(Structure):
        pass
    return DXVAHDETW_CREATEVIDEOPROCESSOR
def _define_DXVAHDETW_CREATEVIDEOPROCESSOR():
    DXVAHDETW_CREATEVIDEOPROCESSOR = win32more.Media.MediaFoundation.DXVAHDETW_CREATEVIDEOPROCESSOR_head
    DXVAHDETW_CREATEVIDEOPROCESSOR._fields_ = [
        ('pObject', UInt64),
        ('pD3D9Ex', UInt64),
        ('VPGuid', Guid),
    ]
    return DXVAHDETW_CREATEVIDEOPROCESSOR
def _define_DXVAHDETW_DESTROYVIDEOPROCESSOR_head():
    class DXVAHDETW_DESTROYVIDEOPROCESSOR(Structure):
        pass
    return DXVAHDETW_DESTROYVIDEOPROCESSOR
def _define_DXVAHDETW_DESTROYVIDEOPROCESSOR():
    DXVAHDETW_DESTROYVIDEOPROCESSOR = win32more.Media.MediaFoundation.DXVAHDETW_DESTROYVIDEOPROCESSOR_head
    DXVAHDETW_DESTROYVIDEOPROCESSOR._fields_ = [
        ('pObject', UInt64),
    ]
    return DXVAHDETW_DESTROYVIDEOPROCESSOR
def _define_DXVAHDETW_VIDEOPROCESSBLTHD_head():
    class DXVAHDETW_VIDEOPROCESSBLTHD(Structure):
        pass
    return DXVAHDETW_VIDEOPROCESSBLTHD
def _define_DXVAHDETW_VIDEOPROCESSBLTHD():
    DXVAHDETW_VIDEOPROCESSBLTHD = win32more.Media.MediaFoundation.DXVAHDETW_VIDEOPROCESSBLTHD_head
    DXVAHDETW_VIDEOPROCESSBLTHD._fields_ = [
        ('pObject', UInt64),
        ('pOutputSurface', UInt64),
        ('TargetRect', win32more.Foundation.RECT),
        ('OutputFormat', win32more.Graphics.Direct3D9.D3DFORMAT),
        ('ColorSpace', UInt32),
        ('OutputFrame', UInt32),
        ('StreamCount', UInt32),
        ('Enter', win32more.Foundation.BOOL),
    ]
    return DXVAHDETW_VIDEOPROCESSBLTHD
def _define_DXVAHDETW_VIDEOPROCESSBLTHD_STREAM_head():
    class DXVAHDETW_VIDEOPROCESSBLTHD_STREAM(Structure):
        pass
    return DXVAHDETW_VIDEOPROCESSBLTHD_STREAM
def _define_DXVAHDETW_VIDEOPROCESSBLTHD_STREAM():
    DXVAHDETW_VIDEOPROCESSBLTHD_STREAM = win32more.Media.MediaFoundation.DXVAHDETW_VIDEOPROCESSBLTHD_STREAM_head
    DXVAHDETW_VIDEOPROCESSBLTHD_STREAM._fields_ = [
        ('pObject', UInt64),
        ('pInputSurface', UInt64),
        ('SourceRect', win32more.Foundation.RECT),
        ('DestinationRect', win32more.Foundation.RECT),
        ('InputFormat', win32more.Graphics.Direct3D9.D3DFORMAT),
        ('FrameFormat', win32more.Media.MediaFoundation.DXVAHD_FRAME_FORMAT),
        ('ColorSpace', UInt32),
        ('StreamNumber', UInt32),
        ('OutputIndex', UInt32),
        ('InputFrameOrField', UInt32),
        ('PastFrames', UInt32),
        ('FutureFrames', UInt32),
    ]
    return DXVAHDETW_VIDEOPROCESSBLTHD_STREAM
def _define_DXVAHDETW_VIDEOPROCESSBLTSTATE_head():
    class DXVAHDETW_VIDEOPROCESSBLTSTATE(Structure):
        pass
    return DXVAHDETW_VIDEOPROCESSBLTSTATE
def _define_DXVAHDETW_VIDEOPROCESSBLTSTATE():
    DXVAHDETW_VIDEOPROCESSBLTSTATE = win32more.Media.MediaFoundation.DXVAHDETW_VIDEOPROCESSBLTSTATE_head
    DXVAHDETW_VIDEOPROCESSBLTSTATE._fields_ = [
        ('pObject', UInt64),
        ('State', win32more.Media.MediaFoundation.DXVAHD_BLT_STATE),
        ('DataSize', UInt32),
        ('SetState', win32more.Foundation.BOOL),
    ]
    return DXVAHDETW_VIDEOPROCESSBLTSTATE
def _define_DXVAHDETW_VIDEOPROCESSSTREAMSTATE_head():
    class DXVAHDETW_VIDEOPROCESSSTREAMSTATE(Structure):
        pass
    return DXVAHDETW_VIDEOPROCESSSTREAMSTATE
def _define_DXVAHDETW_VIDEOPROCESSSTREAMSTATE():
    DXVAHDETW_VIDEOPROCESSSTREAMSTATE = win32more.Media.MediaFoundation.DXVAHDETW_VIDEOPROCESSSTREAMSTATE_head
    DXVAHDETW_VIDEOPROCESSSTREAMSTATE._fields_ = [
        ('pObject', UInt64),
        ('StreamNumber', UInt32),
        ('State', win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE),
        ('DataSize', UInt32),
        ('SetState', win32more.Foundation.BOOL),
    ]
    return DXVAHDETW_VIDEOPROCESSSTREAMSTATE
def _define_DXVAHDSW_CALLBACKS_head():
    class DXVAHDSW_CALLBACKS(Structure):
        pass
    return DXVAHDSW_CALLBACKS
def _define_DXVAHDSW_CALLBACKS():
    DXVAHDSW_CALLBACKS = win32more.Media.MediaFoundation.DXVAHDSW_CALLBACKS_head
    DXVAHDSW_CALLBACKS._fields_ = [
        ('CreateDevice', win32more.Media.MediaFoundation.PDXVAHDSW_CreateDevice),
        ('ProposeVideoPrivateFormat', win32more.Media.MediaFoundation.PDXVAHDSW_ProposeVideoPrivateFormat),
        ('GetVideoProcessorDeviceCaps', win32more.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessorDeviceCaps),
        ('GetVideoProcessorOutputFormats', win32more.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessorOutputFormats),
        ('GetVideoProcessorInputFormats', win32more.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessorInputFormats),
        ('GetVideoProcessorCaps', win32more.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessorCaps),
        ('GetVideoProcessorCustomRates', win32more.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessorCustomRates),
        ('GetVideoProcessorFilterRange', win32more.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessorFilterRange),
        ('DestroyDevice', win32more.Media.MediaFoundation.PDXVAHDSW_DestroyDevice),
        ('CreateVideoProcessor', win32more.Media.MediaFoundation.PDXVAHDSW_CreateVideoProcessor),
        ('SetVideoProcessBltState', win32more.Media.MediaFoundation.PDXVAHDSW_SetVideoProcessBltState),
        ('GetVideoProcessBltStatePrivate', win32more.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessBltStatePrivate),
        ('SetVideoProcessStreamState', win32more.Media.MediaFoundation.PDXVAHDSW_SetVideoProcessStreamState),
        ('GetVideoProcessStreamStatePrivate', win32more.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessStreamStatePrivate),
        ('VideoProcessBltHD', win32more.Media.MediaFoundation.PDXVAHDSW_VideoProcessBltHD),
        ('DestroyVideoProcessor', win32more.Media.MediaFoundation.PDXVAHDSW_DestroyVideoProcessor),
    ]
    return DXVAHDSW_CALLBACKS
def _define_DXVAUncompDataInfo_head():
    class DXVAUncompDataInfo(Structure):
        pass
    return DXVAUncompDataInfo
def _define_DXVAUncompDataInfo():
    DXVAUncompDataInfo = win32more.Media.MediaFoundation.DXVAUncompDataInfo_head
    DXVAUncompDataInfo._fields_ = [
        ('UncompWidth', UInt32),
        ('UncompHeight', UInt32),
        ('UncompFormat', win32more.Graphics.Direct3D9.D3DFORMAT),
    ]
    return DXVAUncompDataInfo
EAllocationType = Int32
EAllocationType_eAllocationTypeDynamic = 0
EAllocationType_eAllocationTypeRT = 1
EAllocationType_eAllocationTypePageable = 2
EAllocationType_eAllocationTypeIgnore = 3
eAVAudioChannelConfig = Int32
eAVAudioChannelConfig_FRONT_LEFT = 1
eAVAudioChannelConfig_FRONT_RIGHT = 2
eAVAudioChannelConfig_FRONT_CENTER = 4
eAVAudioChannelConfig_LOW_FREQUENCY = 8
eAVAudioChannelConfig_BACK_LEFT = 16
eAVAudioChannelConfig_BACK_RIGHT = 32
eAVAudioChannelConfig_FRONT_LEFT_OF_CENTER = 64
eAVAudioChannelConfig_FRONT_RIGHT_OF_CENTER = 128
eAVAudioChannelConfig_BACK_CENTER = 256
eAVAudioChannelConfig_SIDE_LEFT = 512
eAVAudioChannelConfig_SIDE_RIGHT = 1024
eAVAudioChannelConfig_TOP_CENTER = 2048
eAVAudioChannelConfig_TOP_FRONT_LEFT = 4096
eAVAudioChannelConfig_TOP_FRONT_CENTER = 8192
eAVAudioChannelConfig_TOP_FRONT_RIGHT = 16384
eAVAudioChannelConfig_TOP_BACK_LEFT = 32768
eAVAudioChannelConfig_TOP_BACK_CENTER = 65536
eAVAudioChannelConfig_TOP_BACK_RIGHT = 131072
eAVDDSurroundMode = Int32
eAVDDSurroundMode_NotIndicated = 0
eAVDDSurroundMode_No = 1
eAVDDSurroundMode_Yes = 2
eAVDecAACDownmixMode = Int32
eAVDecAACDownmixMode_eAVDecAACUseISODownmix = 0
eAVDecAACDownmixMode_eAVDecAACUseARIBDownmix = 1
eAVDecAudioDualMono = Int32
eAVDecAudioDualMono_IsNotDualMono = 0
eAVDecAudioDualMono_IsDualMono = 1
eAVDecAudioDualMono_UnSpecified = 2
eAVDecAudioDualMonoReproMode = Int32
eAVDecAudioDualMonoReproMode_STEREO = 0
eAVDecAudioDualMonoReproMode_LEFT_MONO = 1
eAVDecAudioDualMonoReproMode_RIGHT_MONO = 2
eAVDecAudioDualMonoReproMode_MIX_MONO = 3
eAVDecDDMatrixDecodingMode = Int32
eAVDecDDMatrixDecodingMode_OFF = 0
eAVDecDDMatrixDecodingMode_ON = 1
eAVDecDDMatrixDecodingMode_AUTO = 2
eAVDecDDOperationalMode = Int32
eAVDecDDOperationalMode_NONE = 0
eAVDecDDOperationalMode_LINE = 1
eAVDecDDOperationalMode_RF = 2
eAVDecDDOperationalMode_CUSTOM0 = 3
eAVDecDDOperationalMode_CUSTOM1 = 4
eAVDecDDOperationalMode_PORTABLE8 = 5
eAVDecDDOperationalMode_PORTABLE11 = 6
eAVDecDDOperationalMode_PORTABLE14 = 7
eAVDecDDStereoDownMixMode = Int32
eAVDecDDStereoDownMixMode_Auto = 0
eAVDecDDStereoDownMixMode_LtRt = 1
eAVDecDDStereoDownMixMode_LoRo = 2
eAVDecHEAACDynamicRangeControl = Int32
eAVDecHEAACDynamicRangeControl_OFF = 0
eAVDecHEAACDynamicRangeControl_ON = 1
eAVDecVideoCodecType = Int32
eAVDecVideoCodecType_NOTPLAYING = 0
eAVDecVideoCodecType_MPEG2 = 1
eAVDecVideoCodecType_H264 = 2
eAVDecVideoDXVABusEncryption = Int32
eAVDecVideoDXVABusEncryption_NONE = 0
eAVDecVideoDXVABusEncryption_PRIVATE = 1
eAVDecVideoDXVABusEncryption_AES = 2
eAVDecVideoDXVAMode = Int32
eAVDecVideoDXVAMode_NOTPLAYING = 0
eAVDecVideoDXVAMode_SW = 1
eAVDecVideoDXVAMode_MC = 2
eAVDecVideoDXVAMode_IDCT = 3
eAVDecVideoDXVAMode_VLD = 4
eAVDecVideoH264ErrorConcealment = Int32
eAVDecVideoH264ErrorConcealment_eErrorConcealmentTypeDrop = 0
eAVDecVideoH264ErrorConcealment_eErrorConcealmentTypeBasic = 1
eAVDecVideoH264ErrorConcealment_eErrorConcealmentTypeAdvanced = 2
eAVDecVideoH264ErrorConcealment_eErrorConcealmentTypeDXVASetBlack = 3
eAVDecVideoInputScanType = Int32
eAVDecVideoInputScan_Unknown = 0
eAVDecVideoInputScan_Progressive = 1
eAVDecVideoInputScan_Interlaced_UpperFieldFirst = 2
eAVDecVideoInputScan_Interlaced_LowerFieldFirst = 3
eAVDecVideoMPEG2ErrorConcealment = Int32
eAVDecVideoMPEG2ErrorConcealment_eErrorConcealmentOff = 0
eAVDecVideoMPEG2ErrorConcealment_eErrorConcealmentOn = 1
eAVDecVideoSoftwareDeinterlaceMode = Int32
eAVDecVideoSoftwareDeinterlaceMode_NoDeinterlacing = 0
eAVDecVideoSoftwareDeinterlaceMode_ProgressiveDeinterlacing = 1
eAVDecVideoSoftwareDeinterlaceMode_BOBDeinterlacing = 2
eAVDecVideoSoftwareDeinterlaceMode_SmartBOBDeinterlacing = 3
eAVDecVideoSWPowerLevel = Int32
eAVDecVideoSWPowerLevel_BatteryLife = 0
eAVDecVideoSWPowerLevel_Balanced = 50
eAVDecVideoSWPowerLevel_VideoQuality = 100
eAVDSPLoudnessEqualization = Int32
eAVDSPLoudnessEqualization_OFF = 0
eAVDSPLoudnessEqualization_ON = 1
eAVDSPLoudnessEqualization_AUTO = 2
eAVDSPSpeakerFill = Int32
eAVDSPSpeakerFill_OFF = 0
eAVDSPSpeakerFill_ON = 1
eAVDSPSpeakerFill_AUTO = 2
eAVEncAdaptiveMode = Int32
eAVEncAdaptiveMode_None = 0
eAVEncAdaptiveMode_Resolution = 1
eAVEncAdaptiveMode_FrameRate = 2
eAVEncAudioDualMono = Int32
eAVEncAudioDualMono_SameAsInput = 0
eAVEncAudioDualMono_Off = 1
eAVEncAudioDualMono_On = 2
eAVEncAudioInputContent = Int32
AVEncAudioInputContent_Unknown = 0
AVEncAudioInputContent_Voice = 1
AVEncAudioInputContent_Music = 2
eAVEncChromaEncodeMode = Int32
eAVEncChromaEncodeMode_420 = 0
eAVEncChromaEncodeMode_444 = 1
eAVEncChromaEncodeMode_444_v2 = 2
eAVEncCommonRateControlMode = Int32
eAVEncCommonRateControlMode_CBR = 0
eAVEncCommonRateControlMode_PeakConstrainedVBR = 1
eAVEncCommonRateControlMode_UnconstrainedVBR = 2
eAVEncCommonRateControlMode_Quality = 3
eAVEncCommonRateControlMode_LowDelayVBR = 4
eAVEncCommonRateControlMode_GlobalVBR = 5
eAVEncCommonRateControlMode_GlobalLowDelayVBR = 6
eAVEncCommonStreamEndHandling = Int32
eAVEncCommonStreamEndHandling_DiscardPartial = 0
eAVEncCommonStreamEndHandling_EnsureComplete = 1
eAVEncDDAtoDConverterType = Int32
eAVEncDDAtoDConverterType_Standard = 0
eAVEncDDAtoDConverterType_HDCD = 1
eAVEncDDDynamicRangeCompressionControl = Int32
eAVEncDDDynamicRangeCompressionControl_None = 0
eAVEncDDDynamicRangeCompressionControl_FilmStandard = 1
eAVEncDDDynamicRangeCompressionControl_FilmLight = 2
eAVEncDDDynamicRangeCompressionControl_MusicStandard = 3
eAVEncDDDynamicRangeCompressionControl_MusicLight = 4
eAVEncDDDynamicRangeCompressionControl_Speech = 5
eAVEncDDHeadphoneMode = Int32
eAVEncDDHeadphoneMode_NotIndicated = 0
eAVEncDDHeadphoneMode_NotEncoded = 1
eAVEncDDHeadphoneMode_Encoded = 2
eAVEncDDPreferredStereoDownMixMode = Int32
eAVEncDDPreferredStereoDownMixMode_LtRt = 0
eAVEncDDPreferredStereoDownMixMode_LoRo = 1
eAVEncDDProductionRoomType = Int32
eAVEncDDProductionRoomType_NotIndicated = 0
eAVEncDDProductionRoomType_Large = 1
eAVEncDDProductionRoomType_Small = 2
eAVEncDDService = Int32
eAVEncDDService_CM = 0
eAVEncDDService_ME = 1
eAVEncDDService_VI = 2
eAVEncDDService_HI = 3
eAVEncDDService_D = 4
eAVEncDDService_C = 5
eAVEncDDService_E = 6
eAVEncDDService_VO = 7
eAVEncDDSurroundExMode = Int32
eAVEncDDSurroundExMode_NotIndicated = 0
eAVEncDDSurroundExMode_No = 1
eAVEncDDSurroundExMode_Yes = 2
eAVEncH263PictureType = Int32
eAVEncH263PictureType_I = 0
eAVEncH263PictureType_P = 1
eAVEncH263PictureType_B = 2
eAVEncH263VLevel = Int32
eAVEncH263VLevel_eAVEncH263VLevel1 = 10
eAVEncH263VLevel_eAVEncH263VLevel2 = 20
eAVEncH263VLevel_eAVEncH263VLevel3 = 30
eAVEncH263VLevel_eAVEncH263VLevel4 = 40
eAVEncH263VLevel_eAVEncH263VLevel4_5 = 45
eAVEncH263VLevel_eAVEncH263VLevel5 = 50
eAVEncH263VLevel_eAVEncH263VLevel6 = 60
eAVEncH263VLevel_eAVEncH263VLevel7 = 70
eAVEncH263VProfile = Int32
eAVEncH263VProfile_Base = 0
eAVEncH263VProfile_CompatibilityV2 = 1
eAVEncH263VProfile_CompatibilityV1 = 2
eAVEncH263VProfile_WirelessV2 = 3
eAVEncH263VProfile_WirelessV3 = 4
eAVEncH263VProfile_HighCompression = 5
eAVEncH263VProfile_Internet = 6
eAVEncH263VProfile_Interlace = 7
eAVEncH263VProfile_HighLatency = 8
eAVEncH264PictureType = Int32
eAVEncH264PictureType_IDR = 0
eAVEncH264PictureType_P = 1
eAVEncH264PictureType_B = 2
eAVEncH264VLevel = Int32
eAVEncH264VLevel_eAVEncH264VLevel1 = 10
eAVEncH264VLevel_eAVEncH264VLevel1_b = 11
eAVEncH264VLevel_eAVEncH264VLevel1_1 = 11
eAVEncH264VLevel_eAVEncH264VLevel1_2 = 12
eAVEncH264VLevel_eAVEncH264VLevel1_3 = 13
eAVEncH264VLevel_eAVEncH264VLevel2 = 20
eAVEncH264VLevel_eAVEncH264VLevel2_1 = 21
eAVEncH264VLevel_eAVEncH264VLevel2_2 = 22
eAVEncH264VLevel_eAVEncH264VLevel3 = 30
eAVEncH264VLevel_eAVEncH264VLevel3_1 = 31
eAVEncH264VLevel_eAVEncH264VLevel3_2 = 32
eAVEncH264VLevel_eAVEncH264VLevel4 = 40
eAVEncH264VLevel_eAVEncH264VLevel4_1 = 41
eAVEncH264VLevel_eAVEncH264VLevel4_2 = 42
eAVEncH264VLevel_eAVEncH264VLevel5 = 50
eAVEncH264VLevel_eAVEncH264VLevel5_1 = 51
eAVEncH264VLevel_eAVEncH264VLevel5_2 = 52
eAVEncH264VProfile = Int32
eAVEncH264VProfile_unknown = 0
eAVEncH264VProfile_Simple = 66
eAVEncH264VProfile_Base = 66
eAVEncH264VProfile_Main = 77
eAVEncH264VProfile_High = 100
eAVEncH264VProfile_422 = 122
eAVEncH264VProfile_High10 = 110
eAVEncH264VProfile_444 = 244
eAVEncH264VProfile_Extended = 88
eAVEncH264VProfile_ScalableBase = 83
eAVEncH264VProfile_ScalableHigh = 86
eAVEncH264VProfile_MultiviewHigh = 118
eAVEncH264VProfile_StereoHigh = 128
eAVEncH264VProfile_ConstrainedBase = 256
eAVEncH264VProfile_UCConstrainedHigh = 257
eAVEncH264VProfile_UCScalableConstrainedBase = 258
eAVEncH264VProfile_UCScalableConstrainedHigh = 259
eAVEncH265VLevel = Int32
eAVEncH265VLevel_eAVEncH265VLevel1 = 30
eAVEncH265VLevel_eAVEncH265VLevel2 = 60
eAVEncH265VLevel_eAVEncH265VLevel2_1 = 63
eAVEncH265VLevel_eAVEncH265VLevel3 = 90
eAVEncH265VLevel_eAVEncH265VLevel3_1 = 93
eAVEncH265VLevel_eAVEncH265VLevel4 = 120
eAVEncH265VLevel_eAVEncH265VLevel4_1 = 123
eAVEncH265VLevel_eAVEncH265VLevel5 = 150
eAVEncH265VLevel_eAVEncH265VLevel5_1 = 153
eAVEncH265VLevel_eAVEncH265VLevel5_2 = 156
eAVEncH265VLevel_eAVEncH265VLevel6 = 180
eAVEncH265VLevel_eAVEncH265VLevel6_1 = 183
eAVEncH265VLevel_eAVEncH265VLevel6_2 = 186
eAVEncH265VProfile = Int32
eAVEncH265VProfile_unknown = 0
eAVEncH265VProfile_Main_420_8 = 1
eAVEncH265VProfile_Main_420_10 = 2
eAVEncH265VProfile_Main_420_12 = 3
eAVEncH265VProfile_Main_422_10 = 4
eAVEncH265VProfile_Main_422_12 = 5
eAVEncH265VProfile_Main_444_8 = 6
eAVEncH265VProfile_Main_444_10 = 7
eAVEncH265VProfile_Main_444_12 = 8
eAVEncH265VProfile_Monochrome_12 = 9
eAVEncH265VProfile_Monochrome_16 = 10
eAVEncH265VProfile_MainIntra_420_8 = 11
eAVEncH265VProfile_MainIntra_420_10 = 12
eAVEncH265VProfile_MainIntra_420_12 = 13
eAVEncH265VProfile_MainIntra_422_10 = 14
eAVEncH265VProfile_MainIntra_422_12 = 15
eAVEncH265VProfile_MainIntra_444_8 = 16
eAVEncH265VProfile_MainIntra_444_10 = 17
eAVEncH265VProfile_MainIntra_444_12 = 18
eAVEncH265VProfile_MainIntra_444_16 = 19
eAVEncH265VProfile_MainStill_420_8 = 20
eAVEncH265VProfile_MainStill_444_8 = 21
eAVEncH265VProfile_MainStill_444_16 = 22
eAVEncInputVideoSystem = Int32
eAVEncInputVideoSystem_Unspecified = 0
eAVEncInputVideoSystem_PAL = 1
eAVEncInputVideoSystem_NTSC = 2
eAVEncInputVideoSystem_SECAM = 3
eAVEncInputVideoSystem_MAC = 4
eAVEncInputVideoSystem_HDV = 5
eAVEncInputVideoSystem_Component = 6
eAVEncMPACodingMode = Int32
eAVEncMPACodingMode_Mono = 0
eAVEncMPACodingMode_Stereo = 1
eAVEncMPACodingMode_DualChannel = 2
eAVEncMPACodingMode_JointStereo = 3
eAVEncMPACodingMode_Surround = 4
eAVEncMPAEmphasisType = Int32
eAVEncMPAEmphasisType_None = 0
eAVEncMPAEmphasisType_50_15 = 1
eAVEncMPAEmphasisType_Reserved = 2
eAVEncMPAEmphasisType_CCITT_J17 = 3
eAVEncMPALayer = Int32
eAVEncMPALayer_1 = 1
eAVEncMPALayer_2 = 2
eAVEncMPALayer_3 = 3
eAVEncMPVFrameFieldMode = Int32
eAVEncMPVFrameFieldMode_FieldMode = 0
eAVEncMPVFrameFieldMode_FrameMode = 1
eAVEncMPVIntraVLCTable = Int32
eAVEncMPVIntraVLCTable_Auto = 0
eAVEncMPVIntraVLCTable_MPEG1 = 1
eAVEncMPVIntraVLCTable_Alternate = 2
eAVEncMPVLevel = Int32
eAVEncMPVLevel_Low = 1
eAVEncMPVLevel_Main = 2
eAVEncMPVLevel_High1440 = 3
eAVEncMPVLevel_High = 4
eAVEncMPVProfile = Int32
eAVEncMPVProfile_unknown = 0
eAVEncMPVProfile_Simple = 1
eAVEncMPVProfile_Main = 2
eAVEncMPVProfile_High = 3
eAVEncMPVProfile_422 = 4
eAVEncMPVQScaleType = Int32
eAVEncMPVQScaleType_Auto = 0
eAVEncMPVQScaleType_Linear = 1
eAVEncMPVQScaleType_NonLinear = 2
eAVEncMPVScanPattern = Int32
eAVEncMPVScanPattern_Auto = 0
eAVEncMPVScanPattern_ZigZagScan = 1
eAVEncMPVScanPattern_AlternateScan = 2
eAVEncMPVSceneDetection = Int32
eAVEncMPVSceneDetection_None = 0
eAVEncMPVSceneDetection_InsertIPicture = 1
eAVEncMPVSceneDetection_StartNewGOP = 2
eAVEncMPVSceneDetection_StartNewLocatableGOP = 3
eAVEncMuxOutput = Int32
eAVEncMuxOutput_eAVEncMuxOutputAuto = 0
eAVEncMuxOutput_eAVEncMuxOutputPS = 1
eAVEncMuxOutput_eAVEncMuxOutputTS = 2
eAVEncVideoChromaResolution = Int32
eAVEncVideoChromaResolution_SameAsSource = 0
eAVEncVideoChromaResolution_444 = 1
eAVEncVideoChromaResolution_422 = 2
eAVEncVideoChromaResolution_420 = 3
eAVEncVideoChromaResolution_411 = 4
eAVEncVideoChromaSubsampling = Int32
eAVEncVideoChromaSubsamplingFormat_SameAsSource = 0
eAVEncVideoChromaSubsamplingFormat_ProgressiveChroma = 8
eAVEncVideoChromaSubsamplingFormat_Horizontally_Cosited = 4
eAVEncVideoChromaSubsamplingFormat_Vertically_Cosited = 2
eAVEncVideoChromaSubsamplingFormat_Vertically_AlignedChromaPlanes = 1
eAVEncVideoColorLighting = Int32
eAVEncVideoColorLighting_SameAsSource = 0
eAVEncVideoColorLighting_Unknown = 1
eAVEncVideoColorLighting_Bright = 2
eAVEncVideoColorLighting_Office = 3
eAVEncVideoColorLighting_Dim = 4
eAVEncVideoColorLighting_Dark = 5
eAVEncVideoColorNominalRange = Int32
eAVEncVideoColorNominalRange_SameAsSource = 0
eAVEncVideoColorNominalRange_0_255 = 1
eAVEncVideoColorNominalRange_16_235 = 2
eAVEncVideoColorNominalRange_48_208 = 3
eAVEncVideoColorPrimaries = Int32
eAVEncVideoColorPrimaries_SameAsSource = 0
eAVEncVideoColorPrimaries_Reserved = 1
eAVEncVideoColorPrimaries_BT709 = 2
eAVEncVideoColorPrimaries_BT470_2_SysM = 3
eAVEncVideoColorPrimaries_BT470_2_SysBG = 4
eAVEncVideoColorPrimaries_SMPTE170M = 5
eAVEncVideoColorPrimaries_SMPTE240M = 6
eAVEncVideoColorPrimaries_EBU3231 = 7
eAVEncVideoColorPrimaries_SMPTE_C = 8
eAVEncVideoColorTransferFunction = Int32
eAVEncVideoColorTransferFunction_SameAsSource = 0
eAVEncVideoColorTransferFunction_10 = 1
eAVEncVideoColorTransferFunction_18 = 2
eAVEncVideoColorTransferFunction_20 = 3
eAVEncVideoColorTransferFunction_22 = 4
eAVEncVideoColorTransferFunction_22_709 = 5
eAVEncVideoColorTransferFunction_22_240M = 6
eAVEncVideoColorTransferFunction_22_8bit_sRGB = 7
eAVEncVideoColorTransferFunction_28 = 8
eAVEncVideoColorTransferMatrix = Int32
eAVEncVideoColorTransferMatrix_SameAsSource = 0
eAVEncVideoColorTransferMatrix_BT709 = 1
eAVEncVideoColorTransferMatrix_BT601 = 2
eAVEncVideoColorTransferMatrix_SMPTE240M = 3
eAVEncVideoContentType = Int32
eAVEncVideoContentType_Unknown = 0
eAVEncVideoContentType_FixedCameraAngle = 1
eAVEncVideoFilmContent = Int32
eAVEncVideoFilmContent_VideoOnly = 0
eAVEncVideoFilmContent_FilmOnly = 1
eAVEncVideoFilmContent_Mixed = 2
eAVEncVideoOutputFrameRateConversion = Int32
eAVEncVideoOutputFrameRateConversion_Disable = 0
eAVEncVideoOutputFrameRateConversion_Enable = 1
eAVEncVideoOutputFrameRateConversion_Alias = 2
eAVEncVideoOutputScanType = Int32
eAVEncVideoOutputScan_Progressive = 0
eAVEncVideoOutputScan_Interlaced = 1
eAVEncVideoOutputScan_SameAsInput = 2
eAVEncVideoOutputScan_Automatic = 3
eAVEncVideoSourceScanType = Int32
eAVEncVideoSourceScan_Automatic = 0
eAVEncVideoSourceScan_Interlaced = 1
eAVEncVideoSourceScan_Progressive = 2
eAVEncVP9VProfile = Int32
eAVEncVP9VProfile_unknown = 0
eAVEncVP9VProfile_420_8 = 1
eAVEncVP9VProfile_420_10 = 2
eAVEncVP9VProfile_420_12 = 3
eAVFastDecodeMode = Int32
eAVFastDecodeMode_eVideoDecodeCompliant = 0
eAVFastDecodeMode_eVideoDecodeOptimalLF = 1
eAVFastDecodeMode_eVideoDecodeDisableLF = 2
eAVFastDecodeMode_eVideoDecodeFastest = 32
eAVScenarioInfo = Int32
eAVScenarioInfo_Unknown = 0
eAVScenarioInfo_DisplayRemoting = 1
eAVScenarioInfo_VideoConference = 2
eAVScenarioInfo_Archive = 3
eAVScenarioInfo_LiveStreaming = 4
eAVScenarioInfo_CameraRecord = 5
eAVScenarioInfo_DisplayRemotingWithFeatureMap = 6
eVideoEncoderDisplayContentType = Int32
eVideoEncoderDisplayContent_Unknown = 0
eVideoEncoderDisplayContent_FullScreenVideo = 1
EVRFilterConfigPrefs = Int32
EVRFilterConfigPrefs_EnableQoS = 1
EVRFilterConfigPrefs_Mask = 1
FILE_ACCESSMODE = Int32
ACCESSMODE_READ = 1
ACCESSMODE_WRITE = 2
ACCESSMODE_READWRITE = 3
ACCESSMODE_WRITE_EXCLUSIVE = 4
FILE_OPENMODE = Int32
OPENMODE_FAIL_IF_NOT_EXIST = 0
OPENMODE_FAIL_IF_EXIST = 1
OPENMODE_RESET_IF_EXIST = 2
OPENMODE_APPEND_IF_EXIST = 3
OPENMODE_DELETE_IF_EXIST = 4
def _define_IAdvancedMediaCapture_head():
    class IAdvancedMediaCapture(win32more.System.Com.IUnknown_head):
        Guid = Guid('d0751585-d216-4344-b5-bf-46-3b-68-f9-77-bb')
    return IAdvancedMediaCapture
def _define_IAdvancedMediaCapture():
    IAdvancedMediaCapture = win32more.Media.MediaFoundation.IAdvancedMediaCapture_head
    IAdvancedMediaCapture.GetAdvancedMediaCaptureSettings = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IAdvancedMediaCaptureSettings_head))(3, 'GetAdvancedMediaCaptureSettings', ((1, 'value'),)))
    win32more.System.Com.IUnknown
    return IAdvancedMediaCapture
def _define_IAdvancedMediaCaptureInitializationSettings_head():
    class IAdvancedMediaCaptureInitializationSettings(win32more.System.Com.IUnknown_head):
        Guid = Guid('3de21209-8ba6-4f2a-a5-77-28-19-b5-6f-f1-4d')
    return IAdvancedMediaCaptureInitializationSettings
def _define_IAdvancedMediaCaptureInitializationSettings():
    IAdvancedMediaCaptureInitializationSettings = win32more.Media.MediaFoundation.IAdvancedMediaCaptureInitializationSettings_head
    IAdvancedMediaCaptureInitializationSettings.SetDirectxDeviceManager = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFDXGIDeviceManager_head)(3, 'SetDirectxDeviceManager', ((1, 'value'),)))
    win32more.System.Com.IUnknown
    return IAdvancedMediaCaptureInitializationSettings
def _define_IAdvancedMediaCaptureSettings_head():
    class IAdvancedMediaCaptureSettings(win32more.System.Com.IUnknown_head):
        Guid = Guid('24e0485f-a33e-4aa1-b5-64-60-19-b1-d1-4f-65')
    return IAdvancedMediaCaptureSettings
def _define_IAdvancedMediaCaptureSettings():
    IAdvancedMediaCaptureSettings = win32more.Media.MediaFoundation.IAdvancedMediaCaptureSettings_head
    IAdvancedMediaCaptureSettings.GetDirectxDeviceManager = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFDXGIDeviceManager_head))(3, 'GetDirectxDeviceManager', ((1, 'value'),)))
    win32more.System.Com.IUnknown
    return IAdvancedMediaCaptureSettings
def _define_IAudioSourceProvider_head():
    class IAudioSourceProvider(win32more.System.Com.IUnknown_head):
        Guid = Guid('ebbaf249-afc2-4582-91-c6-b6-0d-f2-e8-49-54')
    return IAudioSourceProvider
def _define_IAudioSourceProvider():
    IAudioSourceProvider = win32more.Media.MediaFoundation.IAudioSourceProvider_head
    IAudioSourceProvider.ProvideInput = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32),POINTER(Single))(3, 'ProvideInput', ((1, 'dwSampleCount'),(1, 'pdwChannelCount'),(1, 'pInterleavedAudioData'),)))
    win32more.System.Com.IUnknown
    return IAudioSourceProvider
def _define_IClusterDetector_head():
    class IClusterDetector(win32more.System.Com.IUnknown_head):
        Guid = Guid('3f07f7b7-c680-41d9-94-23-91-51-07-ec-9f-f9')
    return IClusterDetector
def _define_IClusterDetector():
    IClusterDetector = win32more.Media.MediaFoundation.IClusterDetector_head
    IClusterDetector.Initialize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16,UInt16)(3, 'Initialize', ((1, 'wBaseEntryLevel'),(1, 'wClusterEntryLevel'),)))
    IClusterDetector.Detect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,Single,Single,win32more.Media.MediaFoundation.IToc_head,POINTER(win32more.Media.MediaFoundation.IToc_head))(4, 'Detect', ((1, 'dwMaxNumClusters'),(1, 'fMinClusterDuration'),(1, 'fMaxClusterDuration'),(1, 'pSrcToc'),(1, 'ppDstToc'),)))
    win32more.System.Com.IUnknown
    return IClusterDetector
def _define_ICodecAPI_head():
    class ICodecAPI(win32more.System.Com.IUnknown_head):
        Guid = Guid('901db4c7-31ce-41a2-85-dc-8f-a0-bf-41-b8-da')
    return ICodecAPI
def _define_ICodecAPI():
    ICodecAPI = win32more.Media.MediaFoundation.ICodecAPI_head
    ICodecAPI.IsSupported = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid))(3, 'IsSupported', ((1, 'Api'),)))
    ICodecAPI.IsModifiable = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid))(4, 'IsModifiable', ((1, 'Api'),)))
    ICodecAPI.GetParameterRange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.VARIANT_head),POINTER(win32more.System.Com.VARIANT_head),POINTER(win32more.System.Com.VARIANT_head))(5, 'GetParameterRange', ((1, 'Api'),(1, 'ValueMin'),(1, 'ValueMax'),(1, 'SteppingDelta'),)))
    ICodecAPI.GetParameterValues = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(POINTER(win32more.System.Com.VARIANT_head)),POINTER(UInt32))(6, 'GetParameterValues', ((1, 'Api'),(1, 'Values'),(1, 'ValuesCount'),)))
    ICodecAPI.GetDefaultValue = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.VARIANT_head))(7, 'GetDefaultValue', ((1, 'Api'),(1, 'Value'),)))
    ICodecAPI.GetValue = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.VARIANT_head))(8, 'GetValue', ((1, 'Api'),(1, 'Value'),)))
    ICodecAPI.SetValue = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.VARIANT_head))(9, 'SetValue', ((1, 'Api'),(1, 'Value'),)))
    ICodecAPI.RegisterForEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),IntPtr)(10, 'RegisterForEvent', ((1, 'Api'),(1, 'userData'),)))
    ICodecAPI.UnregisterForEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid))(11, 'UnregisterForEvent', ((1, 'Api'),)))
    ICodecAPI.SetAllDefaults = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(12, 'SetAllDefaults', ()))
    ICodecAPI.SetValueWithNotify = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.VARIANT_head),POINTER(POINTER(Guid)),POINTER(UInt32))(13, 'SetValueWithNotify', ((1, 'Api'),(1, 'Value'),(1, 'ChangedParam'),(1, 'ChangedParamCount'),)))
    ICodecAPI.SetAllDefaultsWithNotify = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(POINTER(Guid)),POINTER(UInt32))(14, 'SetAllDefaultsWithNotify', ((1, 'ChangedParam'),(1, 'ChangedParamCount'),)))
    ICodecAPI.GetAllSettings = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IStream_head)(15, 'GetAllSettings', ((1, '__MIDL__ICodecAPI0000'),)))
    ICodecAPI.SetAllSettings = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IStream_head)(16, 'SetAllSettings', ((1, '__MIDL__ICodecAPI0001'),)))
    ICodecAPI.SetAllSettingsWithNotify = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IStream_head,POINTER(POINTER(Guid)),POINTER(UInt32))(17, 'SetAllSettingsWithNotify', ((1, '__MIDL__ICodecAPI0002'),(1, 'ChangedParam'),(1, 'ChangedParamCount'),)))
    win32more.System.Com.IUnknown
    return ICodecAPI
def _define_ID3D12VideoDecodeCommandList_head():
    class ID3D12VideoDecodeCommandList(win32more.Graphics.Direct3D12.ID3D12CommandList_head):
        Guid = Guid('3b60536e-ad29-4e64-a2-69-f8-53-83-7e-5e-53')
    return ID3D12VideoDecodeCommandList
def _define_ID3D12VideoDecodeCommandList():
    ID3D12VideoDecodeCommandList = win32more.Media.MediaFoundation.ID3D12VideoDecodeCommandList_head
    ID3D12VideoDecodeCommandList.Close = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(9, 'Close', ()))
    ID3D12VideoDecodeCommandList.Reset = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D12.ID3D12CommandAllocator_head)(10, 'Reset', ((1, 'pAllocator'),)))
    ID3D12VideoDecodeCommandList.ClearState = COMMETHOD(WINFUNCTYPE(Void,)(11, 'ClearState', ()))
    ID3D12VideoDecodeCommandList.ResourceBarrier = COMMETHOD(WINFUNCTYPE(Void,UInt32,POINTER(win32more.Graphics.Direct3D12.D3D12_RESOURCE_BARRIER_head))(12, 'ResourceBarrier', ((1, 'NumBarriers'),(1, 'pBarriers'),)))
    ID3D12VideoDecodeCommandList.DiscardResource = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12Resource_head,POINTER(win32more.Graphics.Direct3D12.D3D12_DISCARD_REGION_head))(13, 'DiscardResource', ((1, 'pResource'),(1, 'pRegion'),)))
    ID3D12VideoDecodeCommandList.BeginQuery = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12QueryHeap_head,win32more.Graphics.Direct3D12.D3D12_QUERY_TYPE,UInt32)(14, 'BeginQuery', ((1, 'pQueryHeap'),(1, 'Type'),(1, 'Index'),)))
    ID3D12VideoDecodeCommandList.EndQuery = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12QueryHeap_head,win32more.Graphics.Direct3D12.D3D12_QUERY_TYPE,UInt32)(15, 'EndQuery', ((1, 'pQueryHeap'),(1, 'Type'),(1, 'Index'),)))
    ID3D12VideoDecodeCommandList.ResolveQueryData = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12QueryHeap_head,win32more.Graphics.Direct3D12.D3D12_QUERY_TYPE,UInt32,UInt32,win32more.Graphics.Direct3D12.ID3D12Resource_head,UInt64)(16, 'ResolveQueryData', ((1, 'pQueryHeap'),(1, 'Type'),(1, 'StartIndex'),(1, 'NumQueries'),(1, 'pDestinationBuffer'),(1, 'AlignedDestinationBufferOffset'),)))
    ID3D12VideoDecodeCommandList.SetPredication = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12Resource_head,UInt64,win32more.Graphics.Direct3D12.D3D12_PREDICATION_OP)(17, 'SetPredication', ((1, 'pBuffer'),(1, 'AlignedBufferOffset'),(1, 'Operation'),)))
    ID3D12VideoDecodeCommandList.SetMarker = COMMETHOD(WINFUNCTYPE(Void,UInt32,c_void_p,UInt32)(18, 'SetMarker', ((1, 'Metadata'),(1, 'pData'),(1, 'Size'),)))
    ID3D12VideoDecodeCommandList.BeginEvent = COMMETHOD(WINFUNCTYPE(Void,UInt32,c_void_p,UInt32)(19, 'BeginEvent', ((1, 'Metadata'),(1, 'pData'),(1, 'Size'),)))
    ID3D12VideoDecodeCommandList.EndEvent = COMMETHOD(WINFUNCTYPE(Void,)(20, 'EndEvent', ()))
    ID3D12VideoDecodeCommandList.DecodeFrame = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.ID3D12VideoDecoder_head,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS_head),POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS_head))(21, 'DecodeFrame', ((1, 'pDecoder'),(1, 'pOutputArguments'),(1, 'pInputArguments'),)))
    ID3D12VideoDecodeCommandList.WriteBufferImmediate = COMMETHOD(WINFUNCTYPE(Void,UInt32,POINTER(win32more.Graphics.Direct3D12.D3D12_WRITEBUFFERIMMEDIATE_PARAMETER_head),POINTER(win32more.Graphics.Direct3D12.D3D12_WRITEBUFFERIMMEDIATE_MODE))(22, 'WriteBufferImmediate', ((1, 'Count'),(1, 'pParams'),(1, 'pModes'),)))
    win32more.Graphics.Direct3D12.ID3D12CommandList
    return ID3D12VideoDecodeCommandList
def _define_ID3D12VideoDecodeCommandList1_head():
    class ID3D12VideoDecodeCommandList1(win32more.Media.MediaFoundation.ID3D12VideoDecodeCommandList_head):
        Guid = Guid('d52f011b-b56e-453c-a0-5a-a7-f3-11-c8-f4-72')
    return ID3D12VideoDecodeCommandList1
def _define_ID3D12VideoDecodeCommandList1():
    ID3D12VideoDecodeCommandList1 = win32more.Media.MediaFoundation.ID3D12VideoDecodeCommandList1_head
    ID3D12VideoDecodeCommandList1.DecodeFrame1 = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.ID3D12VideoDecoder_head,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1_head),POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS_head))(23, 'DecodeFrame1', ((1, 'pDecoder'),(1, 'pOutputArguments'),(1, 'pInputArguments'),)))
    win32more.Media.MediaFoundation.ID3D12VideoDecodeCommandList
    return ID3D12VideoDecodeCommandList1
def _define_ID3D12VideoDecodeCommandList2_head():
    class ID3D12VideoDecodeCommandList2(win32more.Media.MediaFoundation.ID3D12VideoDecodeCommandList1_head):
        Guid = Guid('6e120880-c114-4153-80-36-d2-47-05-1e-17-29')
    return ID3D12VideoDecodeCommandList2
def _define_ID3D12VideoDecodeCommandList2():
    ID3D12VideoDecodeCommandList2 = win32more.Media.MediaFoundation.ID3D12VideoDecodeCommandList2_head
    ID3D12VideoDecodeCommandList2.SetProtectedResourceSession = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12ProtectedResourceSession_head)(24, 'SetProtectedResourceSession', ((1, 'pProtectedResourceSession'),)))
    ID3D12VideoDecodeCommandList2.InitializeExtensionCommand = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.ID3D12VideoExtensionCommand_head,c_void_p,UIntPtr)(25, 'InitializeExtensionCommand', ((1, 'pExtensionCommand'),(1, 'pInitializationParameters'),(1, 'InitializationParametersSizeInBytes'),)))
    ID3D12VideoDecodeCommandList2.ExecuteExtensionCommand = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.ID3D12VideoExtensionCommand_head,c_void_p,UIntPtr)(26, 'ExecuteExtensionCommand', ((1, 'pExtensionCommand'),(1, 'pExecutionParameters'),(1, 'ExecutionParametersSizeInBytes'),)))
    win32more.Media.MediaFoundation.ID3D12VideoDecodeCommandList1
    return ID3D12VideoDecodeCommandList2
def _define_ID3D12VideoDecoder_head():
    class ID3D12VideoDecoder(win32more.Graphics.Direct3D12.ID3D12Pageable_head):
        Guid = Guid('c59b6bdc-7720-4074-a1-36-17-a1-56-03-74-70')
    return ID3D12VideoDecoder
def _define_ID3D12VideoDecoder():
    ID3D12VideoDecoder = win32more.Media.MediaFoundation.ID3D12VideoDecoder_head
    ID3D12VideoDecoder.GetDesc = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.D3D12_VIDEO_DECODER_DESC,)(8, 'GetDesc', ()))
    win32more.Graphics.Direct3D12.ID3D12Pageable
    return ID3D12VideoDecoder
def _define_ID3D12VideoDecoder1_head():
    class ID3D12VideoDecoder1(win32more.Media.MediaFoundation.ID3D12VideoDecoder_head):
        Guid = Guid('79a2e5fb-ccd2-469a-9f-de-19-5d-10-95-1f-7e')
    return ID3D12VideoDecoder1
def _define_ID3D12VideoDecoder1():
    ID3D12VideoDecoder1 = win32more.Media.MediaFoundation.ID3D12VideoDecoder1_head
    ID3D12VideoDecoder1.GetProtectedResourceSession = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p))(9, 'GetProtectedResourceSession', ((1, 'riid'),(1, 'ppProtectedSession'),)))
    win32more.Media.MediaFoundation.ID3D12VideoDecoder
    return ID3D12VideoDecoder1
def _define_ID3D12VideoDecoderHeap_head():
    class ID3D12VideoDecoderHeap(win32more.Graphics.Direct3D12.ID3D12Pageable_head):
        Guid = Guid('0946b7c9-ebf6-4047-bb-73-86-83-e2-7d-bb-1f')
    return ID3D12VideoDecoderHeap
def _define_ID3D12VideoDecoderHeap():
    ID3D12VideoDecoderHeap = win32more.Media.MediaFoundation.ID3D12VideoDecoderHeap_head
    ID3D12VideoDecoderHeap.GetDesc = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.D3D12_VIDEO_DECODER_HEAP_DESC,)(8, 'GetDesc', ()))
    win32more.Graphics.Direct3D12.ID3D12Pageable
    return ID3D12VideoDecoderHeap
def _define_ID3D12VideoDecoderHeap1_head():
    class ID3D12VideoDecoderHeap1(win32more.Media.MediaFoundation.ID3D12VideoDecoderHeap_head):
        Guid = Guid('da1d98c5-539f-41b2-bf-6b-11-98-a0-3b-6d-26')
    return ID3D12VideoDecoderHeap1
def _define_ID3D12VideoDecoderHeap1():
    ID3D12VideoDecoderHeap1 = win32more.Media.MediaFoundation.ID3D12VideoDecoderHeap1_head
    ID3D12VideoDecoderHeap1.GetProtectedResourceSession = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p))(9, 'GetProtectedResourceSession', ((1, 'riid'),(1, 'ppProtectedSession'),)))
    win32more.Media.MediaFoundation.ID3D12VideoDecoderHeap
    return ID3D12VideoDecoderHeap1
def _define_ID3D12VideoDevice_head():
    class ID3D12VideoDevice(win32more.System.Com.IUnknown_head):
        Guid = Guid('1f052807-0b46-4acc-8a-89-36-4f-79-37-18-a4')
    return ID3D12VideoDevice
def _define_ID3D12VideoDevice():
    ID3D12VideoDevice = win32more.Media.MediaFoundation.ID3D12VideoDevice_head
    ID3D12VideoDevice.CheckFeatureSupport = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.D3D12_FEATURE_VIDEO,c_void_p,UInt32)(3, 'CheckFeatureSupport', ((1, 'FeatureVideo'),(1, 'pFeatureSupportData'),(1, 'FeatureSupportDataSize'),)))
    ID3D12VideoDevice.CreateVideoDecoder = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_DECODER_DESC_head),POINTER(Guid),POINTER(c_void_p))(4, 'CreateVideoDecoder', ((1, 'pDesc'),(1, 'riid'),(1, 'ppVideoDecoder'),)))
    ID3D12VideoDevice.CreateVideoDecoderHeap = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_DECODER_HEAP_DESC_head),POINTER(Guid),POINTER(c_void_p))(5, 'CreateVideoDecoderHeap', ((1, 'pVideoDecoderHeapDesc'),(1, 'riid'),(1, 'ppVideoDecoderHeap'),)))
    ID3D12VideoDevice.CreateVideoProcessor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC_head),UInt32,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC_head),POINTER(Guid),POINTER(c_void_p))(6, 'CreateVideoProcessor', ((1, 'NodeMask'),(1, 'pOutputStreamDesc'),(1, 'NumInputStreamDescs'),(1, 'pInputStreamDescs'),(1, 'riid'),(1, 'ppVideoProcessor'),)))
    win32more.System.Com.IUnknown
    return ID3D12VideoDevice
def _define_ID3D12VideoDevice1_head():
    class ID3D12VideoDevice1(win32more.Media.MediaFoundation.ID3D12VideoDevice_head):
        Guid = Guid('981611ad-a144-4c83-98-90-f3-0e-26-d6-58-ab')
    return ID3D12VideoDevice1
def _define_ID3D12VideoDevice1():
    ID3D12VideoDevice1 = win32more.Media.MediaFoundation.ID3D12VideoDevice1_head
    ID3D12VideoDevice1.CreateVideoMotionEstimator = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_DESC_head),win32more.Graphics.Direct3D12.ID3D12ProtectedResourceSession_head,POINTER(Guid),POINTER(c_void_p))(7, 'CreateVideoMotionEstimator', ((1, 'pDesc'),(1, 'pProtectedResourceSession'),(1, 'riid'),(1, 'ppVideoMotionEstimator'),)))
    ID3D12VideoDevice1.CreateVideoMotionVectorHeap = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC_head),win32more.Graphics.Direct3D12.ID3D12ProtectedResourceSession_head,POINTER(Guid),POINTER(c_void_p))(8, 'CreateVideoMotionVectorHeap', ((1, 'pDesc'),(1, 'pProtectedResourceSession'),(1, 'riid'),(1, 'ppVideoMotionVectorHeap'),)))
    win32more.Media.MediaFoundation.ID3D12VideoDevice
    return ID3D12VideoDevice1
def _define_ID3D12VideoDevice2_head():
    class ID3D12VideoDevice2(win32more.Media.MediaFoundation.ID3D12VideoDevice1_head):
        Guid = Guid('f019ac49-f838-4a95-9b-17-57-94-37-c8-f5-13')
    return ID3D12VideoDevice2
def _define_ID3D12VideoDevice2():
    ID3D12VideoDevice2 = win32more.Media.MediaFoundation.ID3D12VideoDevice2_head
    ID3D12VideoDevice2.CreateVideoDecoder1 = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_DECODER_DESC_head),win32more.Graphics.Direct3D12.ID3D12ProtectedResourceSession_head,POINTER(Guid),POINTER(c_void_p))(9, 'CreateVideoDecoder1', ((1, 'pDesc'),(1, 'pProtectedResourceSession'),(1, 'riid'),(1, 'ppVideoDecoder'),)))
    ID3D12VideoDevice2.CreateVideoDecoderHeap1 = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_DECODER_HEAP_DESC_head),win32more.Graphics.Direct3D12.ID3D12ProtectedResourceSession_head,POINTER(Guid),POINTER(c_void_p))(10, 'CreateVideoDecoderHeap1', ((1, 'pVideoDecoderHeapDesc'),(1, 'pProtectedResourceSession'),(1, 'riid'),(1, 'ppVideoDecoderHeap'),)))
    ID3D12VideoDevice2.CreateVideoProcessor1 = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC_head),UInt32,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC_head),win32more.Graphics.Direct3D12.ID3D12ProtectedResourceSession_head,POINTER(Guid),POINTER(c_void_p))(11, 'CreateVideoProcessor1', ((1, 'NodeMask'),(1, 'pOutputStreamDesc'),(1, 'NumInputStreamDescs'),(1, 'pInputStreamDescs'),(1, 'pProtectedResourceSession'),(1, 'riid'),(1, 'ppVideoProcessor'),)))
    ID3D12VideoDevice2.CreateVideoExtensionCommand = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_DESC_head),c_void_p,UIntPtr,win32more.Graphics.Direct3D12.ID3D12ProtectedResourceSession_head,POINTER(Guid),POINTER(c_void_p))(12, 'CreateVideoExtensionCommand', ((1, 'pDesc'),(1, 'pCreationParameters'),(1, 'CreationParametersDataSizeInBytes'),(1, 'pProtectedResourceSession'),(1, 'riid'),(1, 'ppVideoExtensionCommand'),)))
    ID3D12VideoDevice2.ExecuteExtensionCommand = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.ID3D12VideoExtensionCommand_head,c_void_p,UIntPtr,c_void_p,UIntPtr)(13, 'ExecuteExtensionCommand', ((1, 'pExtensionCommand'),(1, 'pExecutionParameters'),(1, 'ExecutionParametersSizeInBytes'),(1, 'pOutputData'),(1, 'OutputDataSizeInBytes'),)))
    win32more.Media.MediaFoundation.ID3D12VideoDevice1
    return ID3D12VideoDevice2
def _define_ID3D12VideoDevice3_head():
    class ID3D12VideoDevice3(win32more.Media.MediaFoundation.ID3D12VideoDevice2_head):
        Guid = Guid('4243adb4-3a32-4666-97-3c-0c-cc-56-25-dc-44')
    return ID3D12VideoDevice3
def _define_ID3D12VideoDevice3():
    ID3D12VideoDevice3 = win32more.Media.MediaFoundation.ID3D12VideoDevice3_head
    ID3D12VideoDevice3.CreateVideoEncoder = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_DESC_head),POINTER(Guid),POINTER(c_void_p))(14, 'CreateVideoEncoder', ((1, 'pDesc'),(1, 'riid'),(1, 'ppVideoEncoder'),)))
    ID3D12VideoDevice3.CreateVideoEncoderHeap = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_HEAP_DESC_head),POINTER(Guid),POINTER(c_void_p))(15, 'CreateVideoEncoderHeap', ((1, 'pDesc'),(1, 'riid'),(1, 'ppVideoEncoderHeap'),)))
    win32more.Media.MediaFoundation.ID3D12VideoDevice2
    return ID3D12VideoDevice3
def _define_ID3D12VideoEncodeCommandList_head():
    class ID3D12VideoEncodeCommandList(win32more.Graphics.Direct3D12.ID3D12CommandList_head):
        Guid = Guid('8455293a-0cbd-4831-9b-39-fb-db-ab-72-47-23')
    return ID3D12VideoEncodeCommandList
def _define_ID3D12VideoEncodeCommandList():
    ID3D12VideoEncodeCommandList = win32more.Media.MediaFoundation.ID3D12VideoEncodeCommandList_head
    ID3D12VideoEncodeCommandList.Close = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(9, 'Close', ()))
    ID3D12VideoEncodeCommandList.Reset = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D12.ID3D12CommandAllocator_head)(10, 'Reset', ((1, 'pAllocator'),)))
    ID3D12VideoEncodeCommandList.ClearState = COMMETHOD(WINFUNCTYPE(Void,)(11, 'ClearState', ()))
    ID3D12VideoEncodeCommandList.ResourceBarrier = COMMETHOD(WINFUNCTYPE(Void,UInt32,POINTER(win32more.Graphics.Direct3D12.D3D12_RESOURCE_BARRIER_head))(12, 'ResourceBarrier', ((1, 'NumBarriers'),(1, 'pBarriers'),)))
    ID3D12VideoEncodeCommandList.DiscardResource = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12Resource_head,POINTER(win32more.Graphics.Direct3D12.D3D12_DISCARD_REGION_head))(13, 'DiscardResource', ((1, 'pResource'),(1, 'pRegion'),)))
    ID3D12VideoEncodeCommandList.BeginQuery = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12QueryHeap_head,win32more.Graphics.Direct3D12.D3D12_QUERY_TYPE,UInt32)(14, 'BeginQuery', ((1, 'pQueryHeap'),(1, 'Type'),(1, 'Index'),)))
    ID3D12VideoEncodeCommandList.EndQuery = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12QueryHeap_head,win32more.Graphics.Direct3D12.D3D12_QUERY_TYPE,UInt32)(15, 'EndQuery', ((1, 'pQueryHeap'),(1, 'Type'),(1, 'Index'),)))
    ID3D12VideoEncodeCommandList.ResolveQueryData = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12QueryHeap_head,win32more.Graphics.Direct3D12.D3D12_QUERY_TYPE,UInt32,UInt32,win32more.Graphics.Direct3D12.ID3D12Resource_head,UInt64)(16, 'ResolveQueryData', ((1, 'pQueryHeap'),(1, 'Type'),(1, 'StartIndex'),(1, 'NumQueries'),(1, 'pDestinationBuffer'),(1, 'AlignedDestinationBufferOffset'),)))
    ID3D12VideoEncodeCommandList.SetPredication = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12Resource_head,UInt64,win32more.Graphics.Direct3D12.D3D12_PREDICATION_OP)(17, 'SetPredication', ((1, 'pBuffer'),(1, 'AlignedBufferOffset'),(1, 'Operation'),)))
    ID3D12VideoEncodeCommandList.SetMarker = COMMETHOD(WINFUNCTYPE(Void,UInt32,c_void_p,UInt32)(18, 'SetMarker', ((1, 'Metadata'),(1, 'pData'),(1, 'Size'),)))
    ID3D12VideoEncodeCommandList.BeginEvent = COMMETHOD(WINFUNCTYPE(Void,UInt32,c_void_p,UInt32)(19, 'BeginEvent', ((1, 'Metadata'),(1, 'pData'),(1, 'Size'),)))
    ID3D12VideoEncodeCommandList.EndEvent = COMMETHOD(WINFUNCTYPE(Void,)(20, 'EndEvent', ()))
    ID3D12VideoEncodeCommandList.EstimateMotion = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.ID3D12VideoMotionEstimator_head,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT_head),POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_INPUT_head))(21, 'EstimateMotion', ((1, 'pMotionEstimator'),(1, 'pOutputArguments'),(1, 'pInputArguments'),)))
    ID3D12VideoEncodeCommandList.ResolveMotionVectorHeap = COMMETHOD(WINFUNCTYPE(Void,POINTER(win32more.Media.MediaFoundation.D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT_head),POINTER(win32more.Media.MediaFoundation.D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT_head))(22, 'ResolveMotionVectorHeap', ((1, 'pOutputArguments'),(1, 'pInputArguments'),)))
    ID3D12VideoEncodeCommandList.WriteBufferImmediate = COMMETHOD(WINFUNCTYPE(Void,UInt32,POINTER(win32more.Graphics.Direct3D12.D3D12_WRITEBUFFERIMMEDIATE_PARAMETER_head),POINTER(win32more.Graphics.Direct3D12.D3D12_WRITEBUFFERIMMEDIATE_MODE))(23, 'WriteBufferImmediate', ((1, 'Count'),(1, 'pParams'),(1, 'pModes'),)))
    ID3D12VideoEncodeCommandList.SetProtectedResourceSession = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12ProtectedResourceSession_head)(24, 'SetProtectedResourceSession', ((1, 'pProtectedResourceSession'),)))
    win32more.Graphics.Direct3D12.ID3D12CommandList
    return ID3D12VideoEncodeCommandList
def _define_ID3D12VideoEncodeCommandList1_head():
    class ID3D12VideoEncodeCommandList1(win32more.Media.MediaFoundation.ID3D12VideoEncodeCommandList_head):
        Guid = Guid('94971eca-2bdb-4769-88-cf-36-75-ea-75-7e-bc')
    return ID3D12VideoEncodeCommandList1
def _define_ID3D12VideoEncodeCommandList1():
    ID3D12VideoEncodeCommandList1 = win32more.Media.MediaFoundation.ID3D12VideoEncodeCommandList1_head
    ID3D12VideoEncodeCommandList1.InitializeExtensionCommand = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.ID3D12VideoExtensionCommand_head,c_void_p,UIntPtr)(25, 'InitializeExtensionCommand', ((1, 'pExtensionCommand'),(1, 'pInitializationParameters'),(1, 'InitializationParametersSizeInBytes'),)))
    ID3D12VideoEncodeCommandList1.ExecuteExtensionCommand = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.ID3D12VideoExtensionCommand_head,c_void_p,UIntPtr)(26, 'ExecuteExtensionCommand', ((1, 'pExtensionCommand'),(1, 'pExecutionParameters'),(1, 'ExecutionParametersSizeInBytes'),)))
    win32more.Media.MediaFoundation.ID3D12VideoEncodeCommandList
    return ID3D12VideoEncodeCommandList1
def _define_ID3D12VideoEncodeCommandList2_head():
    class ID3D12VideoEncodeCommandList2(win32more.Media.MediaFoundation.ID3D12VideoEncodeCommandList1_head):
        Guid = Guid('895491e2-e701-46a9-9a-1f-8d-34-80-ed-86-7a')
    return ID3D12VideoEncodeCommandList2
def _define_ID3D12VideoEncodeCommandList2():
    ID3D12VideoEncodeCommandList2 = win32more.Media.MediaFoundation.ID3D12VideoEncodeCommandList2_head
    ID3D12VideoEncodeCommandList2.EncodeFrame = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.ID3D12VideoEncoder_head,win32more.Media.MediaFoundation.ID3D12VideoEncoderHeap_head,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS_head),POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS_head))(27, 'EncodeFrame', ((1, 'pEncoder'),(1, 'pHeap'),(1, 'pInputArguments'),(1, 'pOutputArguments'),)))
    ID3D12VideoEncodeCommandList2.ResolveEncoderOutputMetadata = COMMETHOD(WINFUNCTYPE(Void,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS_head),POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS_head))(28, 'ResolveEncoderOutputMetadata', ((1, 'pInputArguments'),(1, 'pOutputArguments'),)))
    win32more.Media.MediaFoundation.ID3D12VideoEncodeCommandList1
    return ID3D12VideoEncodeCommandList2
def _define_ID3D12VideoEncoder_head():
    class ID3D12VideoEncoder(win32more.Graphics.Direct3D12.ID3D12Pageable_head):
        Guid = Guid('2e0d212d-8df9-44a6-a7-70-bb-28-9b-18-27-37')
    return ID3D12VideoEncoder
def _define_ID3D12VideoEncoder():
    ID3D12VideoEncoder = win32more.Media.MediaFoundation.ID3D12VideoEncoder_head
    ID3D12VideoEncoder.GetNodeMask = COMMETHOD(WINFUNCTYPE(UInt32,)(8, 'GetNodeMask', ()))
    ID3D12VideoEncoder.GetEncoderFlags = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FLAGS,)(9, 'GetEncoderFlags', ()))
    ID3D12VideoEncoder.GetCodec = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC,)(10, 'GetCodec', ()))
    ID3D12VideoEncoder.GetCodecProfile = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC)(11, 'GetCodecProfile', ((1, 'dstProfile'),)))
    ID3D12VideoEncoder.GetCodecConfiguration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION)(12, 'GetCodecConfiguration', ((1, 'dstCodecConfig'),)))
    ID3D12VideoEncoder.GetInputFormat = COMMETHOD(WINFUNCTYPE(win32more.Graphics.Dxgi.Common.DXGI_FORMAT,)(13, 'GetInputFormat', ()))
    ID3D12VideoEncoder.GetMaxMotionEstimationPrecision = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE,)(14, 'GetMaxMotionEstimationPrecision', ()))
    win32more.Graphics.Direct3D12.ID3D12Pageable
    return ID3D12VideoEncoder
def _define_ID3D12VideoEncoderHeap_head():
    class ID3D12VideoEncoderHeap(win32more.Graphics.Direct3D12.ID3D12Pageable_head):
        Guid = Guid('22b35d96-876a-44c0-b2-5e-fb-8c-9c-7f-1c-4a')
    return ID3D12VideoEncoderHeap
def _define_ID3D12VideoEncoderHeap():
    ID3D12VideoEncoderHeap = win32more.Media.MediaFoundation.ID3D12VideoEncoderHeap_head
    ID3D12VideoEncoderHeap.GetNodeMask = COMMETHOD(WINFUNCTYPE(UInt32,)(8, 'GetNodeMask', ()))
    ID3D12VideoEncoderHeap.GetEncoderHeapFlags = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_HEAP_FLAGS,)(9, 'GetEncoderHeapFlags', ()))
    ID3D12VideoEncoderHeap.GetCodec = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC,)(10, 'GetCodec', ()))
    ID3D12VideoEncoderHeap.GetCodecProfile = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC)(11, 'GetCodecProfile', ((1, 'dstProfile'),)))
    ID3D12VideoEncoderHeap.GetCodecLevel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING)(12, 'GetCodecLevel', ((1, 'dstLevel'),)))
    ID3D12VideoEncoderHeap.GetResolutionListCount = COMMETHOD(WINFUNCTYPE(UInt32,)(13, 'GetResolutionListCount', ()))
    ID3D12VideoEncoderHeap.GetResolutionList = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC_head))(14, 'GetResolutionList', ((1, 'ResolutionsListCount'),(1, 'pResolutionList'),)))
    win32more.Graphics.Direct3D12.ID3D12Pageable
    return ID3D12VideoEncoderHeap
def _define_ID3D12VideoExtensionCommand_head():
    class ID3D12VideoExtensionCommand(win32more.Graphics.Direct3D12.ID3D12Pageable_head):
        Guid = Guid('554e41e8-ae8e-4a8c-b7-d2-5b-4f-27-4a-30-e4')
    return ID3D12VideoExtensionCommand
def _define_ID3D12VideoExtensionCommand():
    ID3D12VideoExtensionCommand = win32more.Media.MediaFoundation.ID3D12VideoExtensionCommand_head
    ID3D12VideoExtensionCommand.GetDesc = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_DESC,)(8, 'GetDesc', ()))
    ID3D12VideoExtensionCommand.GetProtectedResourceSession = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p))(9, 'GetProtectedResourceSession', ((1, 'riid'),(1, 'ppProtectedSession'),)))
    win32more.Graphics.Direct3D12.ID3D12Pageable
    return ID3D12VideoExtensionCommand
def _define_ID3D12VideoMotionEstimator_head():
    class ID3D12VideoMotionEstimator(win32more.Graphics.Direct3D12.ID3D12Pageable_head):
        Guid = Guid('33fdae0e-098b-428f-87-bb-34-b6-95-de-08-f8')
    return ID3D12VideoMotionEstimator
def _define_ID3D12VideoMotionEstimator():
    ID3D12VideoMotionEstimator = win32more.Media.MediaFoundation.ID3D12VideoMotionEstimator_head
    ID3D12VideoMotionEstimator.GetDesc = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_DESC,)(8, 'GetDesc', ()))
    ID3D12VideoMotionEstimator.GetProtectedResourceSession = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p))(9, 'GetProtectedResourceSession', ((1, 'riid'),(1, 'ppProtectedSession'),)))
    win32more.Graphics.Direct3D12.ID3D12Pageable
    return ID3D12VideoMotionEstimator
def _define_ID3D12VideoMotionVectorHeap_head():
    class ID3D12VideoMotionVectorHeap(win32more.Graphics.Direct3D12.ID3D12Pageable_head):
        Guid = Guid('5be17987-743a-4061-83-4b-23-d2-2d-ae-a5-05')
    return ID3D12VideoMotionVectorHeap
def _define_ID3D12VideoMotionVectorHeap():
    ID3D12VideoMotionVectorHeap = win32more.Media.MediaFoundation.ID3D12VideoMotionVectorHeap_head
    ID3D12VideoMotionVectorHeap.GetDesc = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC,)(8, 'GetDesc', ()))
    ID3D12VideoMotionVectorHeap.GetProtectedResourceSession = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p))(9, 'GetProtectedResourceSession', ((1, 'riid'),(1, 'ppProtectedSession'),)))
    win32more.Graphics.Direct3D12.ID3D12Pageable
    return ID3D12VideoMotionVectorHeap
def _define_ID3D12VideoProcessCommandList_head():
    class ID3D12VideoProcessCommandList(win32more.Graphics.Direct3D12.ID3D12CommandList_head):
        Guid = Guid('aeb2543a-167f-4682-ac-c8-d1-59-ed-4a-62-09')
    return ID3D12VideoProcessCommandList
def _define_ID3D12VideoProcessCommandList():
    ID3D12VideoProcessCommandList = win32more.Media.MediaFoundation.ID3D12VideoProcessCommandList_head
    ID3D12VideoProcessCommandList.Close = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(9, 'Close', ()))
    ID3D12VideoProcessCommandList.Reset = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D12.ID3D12CommandAllocator_head)(10, 'Reset', ((1, 'pAllocator'),)))
    ID3D12VideoProcessCommandList.ClearState = COMMETHOD(WINFUNCTYPE(Void,)(11, 'ClearState', ()))
    ID3D12VideoProcessCommandList.ResourceBarrier = COMMETHOD(WINFUNCTYPE(Void,UInt32,POINTER(win32more.Graphics.Direct3D12.D3D12_RESOURCE_BARRIER_head))(12, 'ResourceBarrier', ((1, 'NumBarriers'),(1, 'pBarriers'),)))
    ID3D12VideoProcessCommandList.DiscardResource = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12Resource_head,POINTER(win32more.Graphics.Direct3D12.D3D12_DISCARD_REGION_head))(13, 'DiscardResource', ((1, 'pResource'),(1, 'pRegion'),)))
    ID3D12VideoProcessCommandList.BeginQuery = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12QueryHeap_head,win32more.Graphics.Direct3D12.D3D12_QUERY_TYPE,UInt32)(14, 'BeginQuery', ((1, 'pQueryHeap'),(1, 'Type'),(1, 'Index'),)))
    ID3D12VideoProcessCommandList.EndQuery = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12QueryHeap_head,win32more.Graphics.Direct3D12.D3D12_QUERY_TYPE,UInt32)(15, 'EndQuery', ((1, 'pQueryHeap'),(1, 'Type'),(1, 'Index'),)))
    ID3D12VideoProcessCommandList.ResolveQueryData = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12QueryHeap_head,win32more.Graphics.Direct3D12.D3D12_QUERY_TYPE,UInt32,UInt32,win32more.Graphics.Direct3D12.ID3D12Resource_head,UInt64)(16, 'ResolveQueryData', ((1, 'pQueryHeap'),(1, 'Type'),(1, 'StartIndex'),(1, 'NumQueries'),(1, 'pDestinationBuffer'),(1, 'AlignedDestinationBufferOffset'),)))
    ID3D12VideoProcessCommandList.SetPredication = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12Resource_head,UInt64,win32more.Graphics.Direct3D12.D3D12_PREDICATION_OP)(17, 'SetPredication', ((1, 'pBuffer'),(1, 'AlignedBufferOffset'),(1, 'Operation'),)))
    ID3D12VideoProcessCommandList.SetMarker = COMMETHOD(WINFUNCTYPE(Void,UInt32,c_void_p,UInt32)(18, 'SetMarker', ((1, 'Metadata'),(1, 'pData'),(1, 'Size'),)))
    ID3D12VideoProcessCommandList.BeginEvent = COMMETHOD(WINFUNCTYPE(Void,UInt32,c_void_p,UInt32)(19, 'BeginEvent', ((1, 'Metadata'),(1, 'pData'),(1, 'Size'),)))
    ID3D12VideoProcessCommandList.EndEvent = COMMETHOD(WINFUNCTYPE(Void,)(20, 'EndEvent', ()))
    ID3D12VideoProcessCommandList.ProcessFrames = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.ID3D12VideoProcessor_head,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS_head),UInt32,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS_head))(21, 'ProcessFrames', ((1, 'pVideoProcessor'),(1, 'pOutputArguments'),(1, 'NumInputStreams'),(1, 'pInputArguments'),)))
    ID3D12VideoProcessCommandList.WriteBufferImmediate = COMMETHOD(WINFUNCTYPE(Void,UInt32,POINTER(win32more.Graphics.Direct3D12.D3D12_WRITEBUFFERIMMEDIATE_PARAMETER_head),POINTER(win32more.Graphics.Direct3D12.D3D12_WRITEBUFFERIMMEDIATE_MODE))(22, 'WriteBufferImmediate', ((1, 'Count'),(1, 'pParams'),(1, 'pModes'),)))
    win32more.Graphics.Direct3D12.ID3D12CommandList
    return ID3D12VideoProcessCommandList
def _define_ID3D12VideoProcessCommandList1_head():
    class ID3D12VideoProcessCommandList1(win32more.Media.MediaFoundation.ID3D12VideoProcessCommandList_head):
        Guid = Guid('542c5c4d-7596-434f-8c-93-4e-fa-67-66-f2-67')
    return ID3D12VideoProcessCommandList1
def _define_ID3D12VideoProcessCommandList1():
    ID3D12VideoProcessCommandList1 = win32more.Media.MediaFoundation.ID3D12VideoProcessCommandList1_head
    ID3D12VideoProcessCommandList1.ProcessFrames1 = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.ID3D12VideoProcessor_head,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS_head),UInt32,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1_head))(23, 'ProcessFrames1', ((1, 'pVideoProcessor'),(1, 'pOutputArguments'),(1, 'NumInputStreams'),(1, 'pInputArguments'),)))
    win32more.Media.MediaFoundation.ID3D12VideoProcessCommandList
    return ID3D12VideoProcessCommandList1
def _define_ID3D12VideoProcessCommandList2_head():
    class ID3D12VideoProcessCommandList2(win32more.Media.MediaFoundation.ID3D12VideoProcessCommandList1_head):
        Guid = Guid('db525ae4-6ad6-473c-ba-a7-59-b2-e3-70-82-e4')
    return ID3D12VideoProcessCommandList2
def _define_ID3D12VideoProcessCommandList2():
    ID3D12VideoProcessCommandList2 = win32more.Media.MediaFoundation.ID3D12VideoProcessCommandList2_head
    ID3D12VideoProcessCommandList2.SetProtectedResourceSession = COMMETHOD(WINFUNCTYPE(Void,win32more.Graphics.Direct3D12.ID3D12ProtectedResourceSession_head)(24, 'SetProtectedResourceSession', ((1, 'pProtectedResourceSession'),)))
    ID3D12VideoProcessCommandList2.InitializeExtensionCommand = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.ID3D12VideoExtensionCommand_head,c_void_p,UIntPtr)(25, 'InitializeExtensionCommand', ((1, 'pExtensionCommand'),(1, 'pInitializationParameters'),(1, 'InitializationParametersSizeInBytes'),)))
    ID3D12VideoProcessCommandList2.ExecuteExtensionCommand = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.ID3D12VideoExtensionCommand_head,c_void_p,UIntPtr)(26, 'ExecuteExtensionCommand', ((1, 'pExtensionCommand'),(1, 'pExecutionParameters'),(1, 'ExecutionParametersSizeInBytes'),)))
    win32more.Media.MediaFoundation.ID3D12VideoProcessCommandList1
    return ID3D12VideoProcessCommandList2
def _define_ID3D12VideoProcessor_head():
    class ID3D12VideoProcessor(win32more.Graphics.Direct3D12.ID3D12Pageable_head):
        Guid = Guid('304fdb32-bede-410a-85-45-94-3a-c6-a4-61-38')
    return ID3D12VideoProcessor
def _define_ID3D12VideoProcessor():
    ID3D12VideoProcessor = win32more.Media.MediaFoundation.ID3D12VideoProcessor_head
    ID3D12VideoProcessor.GetNodeMask = COMMETHOD(WINFUNCTYPE(UInt32,)(8, 'GetNodeMask', ()))
    ID3D12VideoProcessor.GetNumInputStreamDescs = COMMETHOD(WINFUNCTYPE(UInt32,)(9, 'GetNumInputStreamDescs', ()))
    ID3D12VideoProcessor.GetInputStreamDescs = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC_head))(10, 'GetInputStreamDescs', ((1, 'NumInputStreamDescs'),(1, 'pInputStreamDescs'),)))
    ID3D12VideoProcessor.GetOutputStreamDesc = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC,)(11, 'GetOutputStreamDesc', ()))
    win32more.Graphics.Direct3D12.ID3D12Pageable
    return ID3D12VideoProcessor
def _define_ID3D12VideoProcessor1_head():
    class ID3D12VideoProcessor1(win32more.Media.MediaFoundation.ID3D12VideoProcessor_head):
        Guid = Guid('f3cfe615-553f-425c-86-d8-ee-8c-1b-1f-b0-1c')
    return ID3D12VideoProcessor1
def _define_ID3D12VideoProcessor1():
    ID3D12VideoProcessor1 = win32more.Media.MediaFoundation.ID3D12VideoProcessor1_head
    ID3D12VideoProcessor1.GetProtectedResourceSession = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p))(12, 'GetProtectedResourceSession', ((1, 'riid'),(1, 'ppProtectedSession'),)))
    win32more.Media.MediaFoundation.ID3D12VideoProcessor
    return ID3D12VideoProcessor1
def _define_IDirect3D9ExOverlayExtension_head():
    class IDirect3D9ExOverlayExtension(win32more.System.Com.IUnknown_head):
        Guid = Guid('187aeb13-aaf5-4c59-87-6d-e0-59-08-8c-0d-f8')
    return IDirect3D9ExOverlayExtension
def _define_IDirect3D9ExOverlayExtension():
    IDirect3D9ExOverlayExtension = win32more.Media.MediaFoundation.IDirect3D9ExOverlayExtension_head
    IDirect3D9ExOverlayExtension.CheckDeviceOverlayType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Graphics.Direct3D9.D3DDEVTYPE,UInt32,UInt32,win32more.Graphics.Direct3D9.D3DFORMAT,POINTER(win32more.Graphics.Direct3D9.D3DDISPLAYMODEEX_head),win32more.Graphics.Direct3D9.D3DDISPLAYROTATION,POINTER(win32more.Media.MediaFoundation.D3DOVERLAYCAPS_head))(3, 'CheckDeviceOverlayType', ((1, 'Adapter'),(1, 'DevType'),(1, 'OverlayWidth'),(1, 'OverlayHeight'),(1, 'OverlayFormat'),(1, 'pDisplayMode'),(1, 'DisplayRotation'),(1, 'pOverlayCaps'),)))
    win32more.System.Com.IUnknown
    return IDirect3D9ExOverlayExtension
def _define_IDirect3DAuthenticatedChannel9_head():
    class IDirect3DAuthenticatedChannel9(win32more.System.Com.IUnknown_head):
        Guid = Guid('ff24beee-da21-4beb-98-b5-d2-f8-99-f9-8a-f9')
    return IDirect3DAuthenticatedChannel9
def _define_IDirect3DAuthenticatedChannel9():
    IDirect3DAuthenticatedChannel9 = win32more.Media.MediaFoundation.IDirect3DAuthenticatedChannel9_head
    IDirect3DAuthenticatedChannel9.GetCertificateSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'GetCertificateSize', ((1, 'pCertificateSize'),)))
    IDirect3DAuthenticatedChannel9.GetCertificate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_char_p_no)(4, 'GetCertificate', ((1, 'CertifacteSize'),(1, 'ppCertificate'),)))
    IDirect3DAuthenticatedChannel9.NegotiateKeyExchange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_void_p)(5, 'NegotiateKeyExchange', ((1, 'DataSize'),(1, 'pData'),)))
    IDirect3DAuthenticatedChannel9.Query = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_void_p,UInt32,c_void_p)(6, 'Query', ((1, 'InputSize'),(1, 'pInput'),(1, 'OutputSize'),(1, 'pOutput'),)))
    IDirect3DAuthenticatedChannel9.Configure = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_void_p,POINTER(win32more.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT_head))(7, 'Configure', ((1, 'InputSize'),(1, 'pInput'),(1, 'pOutput'),)))
    win32more.System.Com.IUnknown
    return IDirect3DAuthenticatedChannel9
def _define_IDirect3DCryptoSession9_head():
    class IDirect3DCryptoSession9(win32more.System.Com.IUnknown_head):
        Guid = Guid('fa0ab799-7a9c-48ca-8c-5b-23-7e-71-a5-44-34')
    return IDirect3DCryptoSession9
def _define_IDirect3DCryptoSession9():
    IDirect3DCryptoSession9 = win32more.Media.MediaFoundation.IDirect3DCryptoSession9_head
    IDirect3DCryptoSession9.GetCertificateSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'GetCertificateSize', ((1, 'pCertificateSize'),)))
    IDirect3DCryptoSession9.GetCertificate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_char_p_no)(4, 'GetCertificate', ((1, 'CertifacteSize'),(1, 'ppCertificate'),)))
    IDirect3DCryptoSession9.NegotiateKeyExchange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_void_p)(5, 'NegotiateKeyExchange', ((1, 'DataSize'),(1, 'pData'),)))
    IDirect3DCryptoSession9.EncryptionBlt = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.IDirect3DSurface9_head,win32more.Graphics.Direct3D9.IDirect3DSurface9_head,UInt32,c_void_p)(6, 'EncryptionBlt', ((1, 'pSrcSurface'),(1, 'pDstSurface'),(1, 'DstSurfaceSize'),(1, 'pIV'),)))
    IDirect3DCryptoSession9.DecryptionBlt = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.IDirect3DSurface9_head,win32more.Graphics.Direct3D9.IDirect3DSurface9_head,UInt32,POINTER(win32more.Graphics.Direct3D9.D3DENCRYPTED_BLOCK_INFO_head),c_void_p,c_void_p)(7, 'DecryptionBlt', ((1, 'pSrcSurface'),(1, 'pDstSurface'),(1, 'SrcSurfaceSize'),(1, 'pEncryptedBlockInfo'),(1, 'pContentKey'),(1, 'pIV'),)))
    IDirect3DCryptoSession9.GetSurfacePitch = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.IDirect3DSurface9_head,POINTER(UInt32))(8, 'GetSurfacePitch', ((1, 'pSrcSurface'),(1, 'pSurfacePitch'),)))
    IDirect3DCryptoSession9.StartSessionKeyRefresh = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_void_p,UInt32)(9, 'StartSessionKeyRefresh', ((1, 'pRandomNumber'),(1, 'RandomNumberSize'),)))
    IDirect3DCryptoSession9.FinishSessionKeyRefresh = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(10, 'FinishSessionKeyRefresh', ()))
    IDirect3DCryptoSession9.GetEncryptionBltKey = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_void_p,UInt32)(11, 'GetEncryptionBltKey', ((1, 'pReadbackKey'),(1, 'KeySize'),)))
    win32more.System.Com.IUnknown
    return IDirect3DCryptoSession9
def _define_IDirect3DDevice9Video_head():
    class IDirect3DDevice9Video(win32more.System.Com.IUnknown_head):
        Guid = Guid('26dc4561-a1ee-4ae7-96-da-11-8a-36-c0-ec-95')
    return IDirect3DDevice9Video
def _define_IDirect3DDevice9Video():
    IDirect3DDevice9Video = win32more.Media.MediaFoundation.IDirect3DDevice9Video_head
    IDirect3DDevice9Video.GetContentProtectionCaps = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Guid),POINTER(win32more.Media.MediaFoundation.D3DCONTENTPROTECTIONCAPS_head))(3, 'GetContentProtectionCaps', ((1, 'pCryptoType'),(1, 'pDecodeProfile'),(1, 'pCaps'),)))
    IDirect3DDevice9Video.CreateAuthenticatedChannel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNELTYPE,POINTER(win32more.Media.MediaFoundation.IDirect3DAuthenticatedChannel9_head),POINTER(win32more.Foundation.HANDLE))(4, 'CreateAuthenticatedChannel', ((1, 'ChannelType'),(1, 'ppAuthenticatedChannel'),(1, 'pChannelHandle'),)))
    IDirect3DDevice9Video.CreateCryptoSession = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Guid),POINTER(win32more.Media.MediaFoundation.IDirect3DCryptoSession9_head),POINTER(win32more.Foundation.HANDLE))(5, 'CreateCryptoSession', ((1, 'pCryptoType'),(1, 'pDecodeProfile'),(1, 'ppCryptoSession'),(1, 'pCryptoHandle'),)))
    win32more.System.Com.IUnknown
    return IDirect3DDevice9Video
def _define_IDirect3DDeviceManager9_head():
    class IDirect3DDeviceManager9(win32more.System.Com.IUnknown_head):
        Guid = Guid('a0cade0f-06d5-4cf4-a1-c7-f3-cd-d7-25-aa-75')
    return IDirect3DDeviceManager9
def _define_IDirect3DDeviceManager9():
    IDirect3DDeviceManager9 = win32more.Media.MediaFoundation.IDirect3DDeviceManager9_head
    IDirect3DDeviceManager9.ResetDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.IDirect3DDevice9_head,UInt32)(3, 'ResetDevice', ((1, 'pDevice'),(1, 'resetToken'),)))
    IDirect3DDeviceManager9.OpenDeviceHandle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.HANDLE))(4, 'OpenDeviceHandle', ((1, 'phDevice'),)))
    IDirect3DDeviceManager9.CloseDeviceHandle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE)(5, 'CloseDeviceHandle', ((1, 'hDevice'),)))
    IDirect3DDeviceManager9.TestDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE)(6, 'TestDevice', ((1, 'hDevice'),)))
    IDirect3DDeviceManager9.LockDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,POINTER(win32more.Graphics.Direct3D9.IDirect3DDevice9_head),win32more.Foundation.BOOL)(7, 'LockDevice', ((1, 'hDevice'),(1, 'ppDevice'),(1, 'fBlock'),)))
    IDirect3DDeviceManager9.UnlockDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,win32more.Foundation.BOOL)(8, 'UnlockDevice', ((1, 'hDevice'),(1, 'fSaveState'),)))
    IDirect3DDeviceManager9.GetVideoService = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,POINTER(Guid),POINTER(c_void_p))(9, 'GetVideoService', ((1, 'hDevice'),(1, 'riid'),(1, 'ppService'),)))
    win32more.System.Com.IUnknown
    return IDirect3DDeviceManager9
def _define_IDirectXVideoAccelerationService_head():
    class IDirectXVideoAccelerationService(win32more.System.Com.IUnknown_head):
        Guid = Guid('fc51a550-d5e7-11d9-af-55-00-05-4e-43-ff-02')
    return IDirectXVideoAccelerationService
def _define_IDirectXVideoAccelerationService():
    IDirectXVideoAccelerationService = win32more.Media.MediaFoundation.IDirectXVideoAccelerationService_head
    IDirectXVideoAccelerationService.CreateSurface = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,UInt32,win32more.Graphics.Direct3D9.D3DFORMAT,win32more.Graphics.Direct3D9.D3DPOOL,UInt32,win32more.Media.MediaFoundation.DXVA2_VideoRenderTargetType,POINTER(win32more.Graphics.Direct3D9.IDirect3DSurface9_head),POINTER(win32more.Foundation.HANDLE))(3, 'CreateSurface', ((1, 'Width'),(1, 'Height'),(1, 'BackBuffers'),(1, 'Format'),(1, 'Pool'),(1, 'Usage'),(1, 'DxvaType'),(1, 'ppSurface'),(1, 'pSharedHandle'),)))
    win32more.System.Com.IUnknown
    return IDirectXVideoAccelerationService
def _define_IDirectXVideoDecoder_head():
    class IDirectXVideoDecoder(win32more.System.Com.IUnknown_head):
        Guid = Guid('f2b0810a-fd00-43c9-91-8c-df-94-e2-d8-ef-7d')
    return IDirectXVideoDecoder
def _define_IDirectXVideoDecoder():
    IDirectXVideoDecoder = win32more.Media.MediaFoundation.IDirectXVideoDecoder_head
    IDirectXVideoDecoder.GetVideoDecoderService = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IDirectXVideoDecoderService_head))(3, 'GetVideoDecoderService', ((1, 'ppService'),)))
    IDirectXVideoDecoder.GetCreationParameters = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.DXVA2_VideoDesc_head),POINTER(win32more.Media.MediaFoundation.DXVA2_ConfigPictureDecode_head),POINTER(POINTER(win32more.Graphics.Direct3D9.IDirect3DSurface9_head)),POINTER(UInt32))(4, 'GetCreationParameters', ((1, 'pDeviceGuid'),(1, 'pVideoDesc'),(1, 'pConfig'),(1, 'pDecoderRenderTargets'),(1, 'pNumSurfaces'),)))
    IDirectXVideoDecoder.GetBuffer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.DXVA2_BufferfType,POINTER(c_void_p),POINTER(UInt32))(5, 'GetBuffer', ((1, 'BufferType'),(1, 'ppBuffer'),(1, 'pBufferSize'),)))
    IDirectXVideoDecoder.ReleaseBuffer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(6, 'ReleaseBuffer', ((1, 'BufferType'),)))
    IDirectXVideoDecoder.BeginFrame = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.IDirect3DSurface9_head,c_void_p)(7, 'BeginFrame', ((1, 'pRenderTarget'),(1, 'pvPVPData'),)))
    IDirectXVideoDecoder.EndFrame = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.HANDLE))(8, 'EndFrame', ((1, 'pHandleComplete'),)))
    IDirectXVideoDecoder.Execute = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.DXVA2_DecodeExecuteParams_head))(9, 'Execute', ((1, 'pExecuteParams'),)))
    win32more.System.Com.IUnknown
    return IDirectXVideoDecoder
def _define_IDirectXVideoDecoderService_head():
    class IDirectXVideoDecoderService(win32more.Media.MediaFoundation.IDirectXVideoAccelerationService_head):
        Guid = Guid('fc51a551-d5e7-11d9-af-55-00-05-4e-43-ff-02')
    return IDirectXVideoDecoderService
def _define_IDirectXVideoDecoderService():
    IDirectXVideoDecoderService = win32more.Media.MediaFoundation.IDirectXVideoDecoderService_head
    IDirectXVideoDecoderService.GetDecoderDeviceGuids = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(POINTER(Guid)))(4, 'GetDecoderDeviceGuids', ((1, 'pCount'),(1, 'pGuids'),)))
    IDirectXVideoDecoderService.GetDecoderRenderTargets = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(UInt32),POINTER(POINTER(win32more.Graphics.Direct3D9.D3DFORMAT)))(5, 'GetDecoderRenderTargets', ((1, 'Guid'),(1, 'pCount'),(1, 'pFormats'),)))
    IDirectXVideoDecoderService.GetDecoderConfigurations = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.DXVA2_VideoDesc_head),c_void_p,POINTER(UInt32),POINTER(POINTER(win32more.Media.MediaFoundation.DXVA2_ConfigPictureDecode_head)))(6, 'GetDecoderConfigurations', ((1, 'Guid'),(1, 'pVideoDesc'),(1, 'pReserved'),(1, 'pCount'),(1, 'ppConfigs'),)))
    IDirectXVideoDecoderService.CreateVideoDecoder = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.DXVA2_VideoDesc_head),POINTER(win32more.Media.MediaFoundation.DXVA2_ConfigPictureDecode_head),POINTER(win32more.Graphics.Direct3D9.IDirect3DSurface9_head),UInt32,POINTER(win32more.Media.MediaFoundation.IDirectXVideoDecoder_head))(7, 'CreateVideoDecoder', ((1, 'Guid'),(1, 'pVideoDesc'),(1, 'pConfig'),(1, 'ppDecoderRenderTargets'),(1, 'NumRenderTargets'),(1, 'ppDecode'),)))
    win32more.Media.MediaFoundation.IDirectXVideoAccelerationService
    return IDirectXVideoDecoderService
def _define_IDirectXVideoMemoryConfiguration_head():
    class IDirectXVideoMemoryConfiguration(win32more.System.Com.IUnknown_head):
        Guid = Guid('b7f916dd-db3b-49c1-84-d7-e4-5e-f9-9e-c7-26')
    return IDirectXVideoMemoryConfiguration
def _define_IDirectXVideoMemoryConfiguration():
    IDirectXVideoMemoryConfiguration = win32more.Media.MediaFoundation.IDirectXVideoMemoryConfiguration_head
    IDirectXVideoMemoryConfiguration.GetAvailableSurfaceTypeByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.DXVA2_SurfaceType))(3, 'GetAvailableSurfaceTypeByIndex', ((1, 'dwTypeIndex'),(1, 'pdwType'),)))
    IDirectXVideoMemoryConfiguration.SetSurfaceType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.DXVA2_SurfaceType)(4, 'SetSurfaceType', ((1, 'dwType'),)))
    win32more.System.Com.IUnknown
    return IDirectXVideoMemoryConfiguration
def _define_IDirectXVideoProcessor_head():
    class IDirectXVideoProcessor(win32more.System.Com.IUnknown_head):
        Guid = Guid('8c3a39f0-916e-4690-80-4f-4c-80-01-35-5d-25')
    return IDirectXVideoProcessor
def _define_IDirectXVideoProcessor():
    IDirectXVideoProcessor = win32more.Media.MediaFoundation.IDirectXVideoProcessor_head
    IDirectXVideoProcessor.GetVideoProcessorService = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IDirectXVideoProcessorService_head))(3, 'GetVideoProcessorService', ((1, 'ppService'),)))
    IDirectXVideoProcessor.GetCreationParameters = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.DXVA2_VideoDesc_head),POINTER(win32more.Graphics.Direct3D9.D3DFORMAT),POINTER(UInt32))(4, 'GetCreationParameters', ((1, 'pDeviceGuid'),(1, 'pVideoDesc'),(1, 'pRenderTargetFormat'),(1, 'pMaxNumSubStreams'),)))
    IDirectXVideoProcessor.GetVideoProcessorCaps = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.DXVA2_VideoProcessorCaps_head))(5, 'GetVideoProcessorCaps', ((1, 'pCaps'),)))
    IDirectXVideoProcessor.GetProcAmpRange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.DXVA2_ValueRange_head))(6, 'GetProcAmpRange', ((1, 'ProcAmpCap'),(1, 'pRange'),)))
    IDirectXVideoProcessor.GetFilterPropertyRange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.DXVA2_ValueRange_head))(7, 'GetFilterPropertyRange', ((1, 'FilterSetting'),(1, 'pRange'),)))
    IDirectXVideoProcessor.VideoProcessBlt = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.IDirect3DSurface9_head,POINTER(win32more.Media.MediaFoundation.DXVA2_VideoProcessBltParams_head),POINTER(win32more.Media.MediaFoundation.DXVA2_VideoSample_head),UInt32,POINTER(win32more.Foundation.HANDLE))(8, 'VideoProcessBlt', ((1, 'pRenderTarget'),(1, 'pBltParams'),(1, 'pSamples'),(1, 'NumSamples'),(1, 'pHandleComplete'),)))
    win32more.System.Com.IUnknown
    return IDirectXVideoProcessor
def _define_IDirectXVideoProcessorService_head():
    class IDirectXVideoProcessorService(win32more.Media.MediaFoundation.IDirectXVideoAccelerationService_head):
        Guid = Guid('fc51a552-d5e7-11d9-af-55-00-05-4e-43-ff-02')
    return IDirectXVideoProcessorService
def _define_IDirectXVideoProcessorService():
    IDirectXVideoProcessorService = win32more.Media.MediaFoundation.IDirectXVideoProcessorService_head
    IDirectXVideoProcessorService.RegisterVideoProcessorSoftwareDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_void_p)(4, 'RegisterVideoProcessorSoftwareDevice', ((1, 'pCallbacks'),)))
    IDirectXVideoProcessorService.GetVideoProcessorDeviceGuids = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.DXVA2_VideoDesc_head),POINTER(UInt32),POINTER(POINTER(Guid)))(5, 'GetVideoProcessorDeviceGuids', ((1, 'pVideoDesc'),(1, 'pCount'),(1, 'pGuids'),)))
    IDirectXVideoProcessorService.GetVideoProcessorRenderTargets = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.DXVA2_VideoDesc_head),POINTER(UInt32),POINTER(POINTER(win32more.Graphics.Direct3D9.D3DFORMAT)))(6, 'GetVideoProcessorRenderTargets', ((1, 'VideoProcDeviceGuid'),(1, 'pVideoDesc'),(1, 'pCount'),(1, 'pFormats'),)))
    IDirectXVideoProcessorService.GetVideoProcessorSubStreamFormats = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.DXVA2_VideoDesc_head),win32more.Graphics.Direct3D9.D3DFORMAT,POINTER(UInt32),POINTER(POINTER(win32more.Graphics.Direct3D9.D3DFORMAT)))(7, 'GetVideoProcessorSubStreamFormats', ((1, 'VideoProcDeviceGuid'),(1, 'pVideoDesc'),(1, 'RenderTargetFormat'),(1, 'pCount'),(1, 'pFormats'),)))
    IDirectXVideoProcessorService.GetVideoProcessorCaps = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.DXVA2_VideoDesc_head),win32more.Graphics.Direct3D9.D3DFORMAT,POINTER(win32more.Media.MediaFoundation.DXVA2_VideoProcessorCaps_head))(8, 'GetVideoProcessorCaps', ((1, 'VideoProcDeviceGuid'),(1, 'pVideoDesc'),(1, 'RenderTargetFormat'),(1, 'pCaps'),)))
    IDirectXVideoProcessorService.GetProcAmpRange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.DXVA2_VideoDesc_head),win32more.Graphics.Direct3D9.D3DFORMAT,UInt32,POINTER(win32more.Media.MediaFoundation.DXVA2_ValueRange_head))(9, 'GetProcAmpRange', ((1, 'VideoProcDeviceGuid'),(1, 'pVideoDesc'),(1, 'RenderTargetFormat'),(1, 'ProcAmpCap'),(1, 'pRange'),)))
    IDirectXVideoProcessorService.GetFilterPropertyRange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.DXVA2_VideoDesc_head),win32more.Graphics.Direct3D9.D3DFORMAT,UInt32,POINTER(win32more.Media.MediaFoundation.DXVA2_ValueRange_head))(10, 'GetFilterPropertyRange', ((1, 'VideoProcDeviceGuid'),(1, 'pVideoDesc'),(1, 'RenderTargetFormat'),(1, 'FilterSetting'),(1, 'pRange'),)))
    IDirectXVideoProcessorService.CreateVideoProcessor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.DXVA2_VideoDesc_head),win32more.Graphics.Direct3D9.D3DFORMAT,UInt32,POINTER(win32more.Media.MediaFoundation.IDirectXVideoProcessor_head))(11, 'CreateVideoProcessor', ((1, 'VideoProcDeviceGuid'),(1, 'pVideoDesc'),(1, 'RenderTargetFormat'),(1, 'MaxNumSubStreams'),(1, 'ppVidProcess'),)))
    win32more.Media.MediaFoundation.IDirectXVideoAccelerationService
    return IDirectXVideoProcessorService
def _define_IDXVAHD_Device_head():
    class IDXVAHD_Device(win32more.System.Com.IUnknown_head):
        Guid = Guid('95f12dfd-d77e-49be-81-5f-57-d5-79-63-4d-6d')
    return IDXVAHD_Device
def _define_IDXVAHD_Device():
    IDXVAHD_Device = win32more.Media.MediaFoundation.IDXVAHD_Device_head
    IDXVAHD_Device.CreateVideoSurface = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,win32more.Graphics.Direct3D9.D3DFORMAT,win32more.Graphics.Direct3D9.D3DPOOL,UInt32,win32more.Media.MediaFoundation.DXVAHD_SURFACE_TYPE,UInt32,POINTER(win32more.Graphics.Direct3D9.IDirect3DSurface9_head),POINTER(win32more.Foundation.HANDLE))(3, 'CreateVideoSurface', ((1, 'Width'),(1, 'Height'),(1, 'Format'),(1, 'Pool'),(1, 'Usage'),(1, 'Type'),(1, 'NumSurfaces'),(1, 'ppSurfaces'),(1, 'pSharedHandle'),)))
    IDXVAHD_Device.GetVideoProcessorDeviceCaps = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.DXVAHD_VPDEVCAPS_head))(4, 'GetVideoProcessorDeviceCaps', ((1, 'pCaps'),)))
    IDXVAHD_Device.GetVideoProcessorOutputFormats = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Graphics.Direct3D9.D3DFORMAT))(5, 'GetVideoProcessorOutputFormats', ((1, 'Count'),(1, 'pFormats'),)))
    IDXVAHD_Device.GetVideoProcessorInputFormats = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Graphics.Direct3D9.D3DFORMAT))(6, 'GetVideoProcessorInputFormats', ((1, 'Count'),(1, 'pFormats'),)))
    IDXVAHD_Device.GetVideoProcessorCaps = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.DXVAHD_VPCAPS_head))(7, 'GetVideoProcessorCaps', ((1, 'Count'),(1, 'pCaps'),)))
    IDXVAHD_Device.GetVideoProcessorCustomRates = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),UInt32,POINTER(win32more.Media.MediaFoundation.DXVAHD_CUSTOM_RATE_DATA_head))(8, 'GetVideoProcessorCustomRates', ((1, 'pVPGuid'),(1, 'Count'),(1, 'pRates'),)))
    IDXVAHD_Device.GetVideoProcessorFilterRange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.DXVAHD_FILTER,POINTER(win32more.Media.MediaFoundation.DXVAHD_FILTER_RANGE_DATA_head))(9, 'GetVideoProcessorFilterRange', ((1, 'Filter'),(1, 'pRange'),)))
    IDXVAHD_Device.CreateVideoProcessor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.IDXVAHD_VideoProcessor_head))(10, 'CreateVideoProcessor', ((1, 'pVPGuid'),(1, 'ppVideoProcessor'),)))
    win32more.System.Com.IUnknown
    return IDXVAHD_Device
def _define_IDXVAHD_VideoProcessor_head():
    class IDXVAHD_VideoProcessor(win32more.System.Com.IUnknown_head):
        Guid = Guid('95f4edf4-6e03-4cd7-be-1b-30-75-d6-65-aa-52')
    return IDXVAHD_VideoProcessor
def _define_IDXVAHD_VideoProcessor():
    IDXVAHD_VideoProcessor = win32more.Media.MediaFoundation.IDXVAHD_VideoProcessor_head
    IDXVAHD_VideoProcessor.SetVideoProcessBltState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.DXVAHD_BLT_STATE,UInt32,c_void_p)(3, 'SetVideoProcessBltState', ((1, 'State'),(1, 'DataSize'),(1, 'pData'),)))
    IDXVAHD_VideoProcessor.GetVideoProcessBltState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.DXVAHD_BLT_STATE,UInt32,c_void_p)(4, 'GetVideoProcessBltState', ((1, 'State'),(1, 'DataSize'),(1, 'pData'),)))
    IDXVAHD_VideoProcessor.SetVideoProcessStreamState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE,UInt32,c_void_p)(5, 'SetVideoProcessStreamState', ((1, 'StreamNumber'),(1, 'State'),(1, 'DataSize'),(1, 'pData'),)))
    IDXVAHD_VideoProcessor.GetVideoProcessStreamState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE,UInt32,c_void_p)(6, 'GetVideoProcessStreamState', ((1, 'StreamNumber'),(1, 'State'),(1, 'DataSize'),(1, 'pData'),)))
    IDXVAHD_VideoProcessor.VideoProcessBltHD = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.IDirect3DSurface9_head,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.DXVAHD_STREAM_DATA_head))(7, 'VideoProcessBltHD', ((1, 'pOutputSurface'),(1, 'OutputFrame'),(1, 'StreamCount'),(1, 'pStreams'),)))
    win32more.System.Com.IUnknown
    return IDXVAHD_VideoProcessor
def _define_IEVRFilterConfig_head():
    class IEVRFilterConfig(win32more.System.Com.IUnknown_head):
        Guid = Guid('83e91e85-82c1-4ea7-80-1d-85-dc-50-b7-50-86')
    return IEVRFilterConfig
def _define_IEVRFilterConfig():
    IEVRFilterConfig = win32more.Media.MediaFoundation.IEVRFilterConfig_head
    IEVRFilterConfig.SetNumberOfStreams = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(3, 'SetNumberOfStreams', ((1, 'dwMaxStreams'),)))
    IEVRFilterConfig.GetNumberOfStreams = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(4, 'GetNumberOfStreams', ((1, 'pdwMaxStreams'),)))
    win32more.System.Com.IUnknown
    return IEVRFilterConfig
def _define_IEVRFilterConfigEx_head():
    class IEVRFilterConfigEx(win32more.Media.MediaFoundation.IEVRFilterConfig_head):
        Guid = Guid('aea36028-796d-454f-be-ee-b4-80-71-e2-43-04')
    return IEVRFilterConfigEx
def _define_IEVRFilterConfigEx():
    IEVRFilterConfigEx = win32more.Media.MediaFoundation.IEVRFilterConfigEx_head
    IEVRFilterConfigEx.SetConfigPrefs = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(5, 'SetConfigPrefs', ((1, 'dwConfigFlags'),)))
    IEVRFilterConfigEx.GetConfigPrefs = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(6, 'GetConfigPrefs', ((1, 'pdwConfigFlags'),)))
    win32more.Media.MediaFoundation.IEVRFilterConfig
    return IEVRFilterConfigEx
def _define_IEVRTrustedVideoPlugin_head():
    class IEVRTrustedVideoPlugin(win32more.System.Com.IUnknown_head):
        Guid = Guid('83a4ce40-7710-494b-a8-93-a4-72-04-9a-f6-30')
    return IEVRTrustedVideoPlugin
def _define_IEVRTrustedVideoPlugin():
    IEVRTrustedVideoPlugin = win32more.Media.MediaFoundation.IEVRTrustedVideoPlugin_head
    IEVRTrustedVideoPlugin.IsInTrustedVideoMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(3, 'IsInTrustedVideoMode', ((1, 'pYes'),)))
    IEVRTrustedVideoPlugin.CanConstrict = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(4, 'CanConstrict', ((1, 'pYes'),)))
    IEVRTrustedVideoPlugin.SetConstriction = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(5, 'SetConstriction', ((1, 'dwKPix'),)))
    IEVRTrustedVideoPlugin.DisableImageExport = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL)(6, 'DisableImageExport', ((1, 'bDisable'),)))
    win32more.System.Com.IUnknown
    return IEVRTrustedVideoPlugin
def _define_IEVRVideoStreamControl_head():
    class IEVRVideoStreamControl(win32more.System.Com.IUnknown_head):
        Guid = Guid('d0cfe38b-93e7-4772-89-57-04-00-c4-9a-44-85')
    return IEVRVideoStreamControl
def _define_IEVRVideoStreamControl():
    IEVRVideoStreamControl = win32more.Media.MediaFoundation.IEVRVideoStreamControl_head
    IEVRVideoStreamControl.SetStreamActiveState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL)(3, 'SetStreamActiveState', ((1, 'fActive'),)))
    IEVRVideoStreamControl.GetStreamActiveState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(4, 'GetStreamActiveState', ((1, 'lpfActive'),)))
    win32more.System.Com.IUnknown
    return IEVRVideoStreamControl
def _define_IFileClient_head():
    class IFileClient(win32more.System.Com.IUnknown_head):
        Guid = Guid('bfccd196-1244-4840-ab-44-48-09-75-c4-ff-e4')
    return IFileClient
def _define_IFileClient():
    IFileClient = win32more.Media.MediaFoundation.IFileClient_head
    IFileClient.GetObjectDiskSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64))(3, 'GetObjectDiskSize', ((1, 'pqwSize'),)))
    IFileClient.Write = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IFileIo_head)(4, 'Write', ((1, 'pFio'),)))
    IFileClient.Read = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IFileIo_head)(5, 'Read', ((1, 'pFio'),)))
    win32more.System.Com.IUnknown
    return IFileClient
def _define_IFileIo_head():
    class IFileIo(win32more.System.Com.IUnknown_head):
        Guid = Guid('11993196-1244-4840-ab-44-48-09-75-c4-ff-e4')
    return IFileIo
def _define_IFileIo():
    IFileIo = win32more.Media.MediaFoundation.IFileIo_head
    IFileIo.Initialize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.FILE_ACCESSMODE,win32more.Media.MediaFoundation.FILE_OPENMODE,win32more.Foundation.PWSTR)(3, 'Initialize', ((1, 'eAccessMode'),(1, 'eOpenMode'),(1, 'pwszFileName'),)))
    IFileIo.GetLength = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64))(4, 'GetLength', ((1, 'pqwLength'),)))
    IFileIo.SetLength = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64)(5, 'SetLength', ((1, 'qwLength'),)))
    IFileIo.GetCurrentPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64))(6, 'GetCurrentPosition', ((1, 'pqwPosition'),)))
    IFileIo.SetCurrentPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64)(7, 'SetCurrentPosition', ((1, 'qwPosition'),)))
    IFileIo.IsEndOfStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(8, 'IsEndOfStream', ((1, 'pbEndOfStream'),)))
    IFileIo.Read = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32,POINTER(UInt32))(9, 'Read', ((1, 'pbt'),(1, 'ul'),(1, 'pulRead'),)))
    IFileIo.Write = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32,POINTER(UInt32))(10, 'Write', ((1, 'pbt'),(1, 'ul'),(1, 'pulWritten'),)))
    IFileIo.Seek = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.SEEK_ORIGIN,UInt64,UInt32,POINTER(UInt64))(11, 'Seek', ((1, 'eSeekOrigin'),(1, 'qwSeekOffset'),(1, 'dwSeekFlags'),(1, 'pqwCurrentPosition'),)))
    IFileIo.Close = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(12, 'Close', ()))
    win32more.System.Com.IUnknown
    return IFileIo
def _define_IMF2DBuffer_head():
    class IMF2DBuffer(win32more.System.Com.IUnknown_head):
        Guid = Guid('7dc9d5f9-9ed9-44ec-9b-bf-06-00-bb-58-9f-bb')
    return IMF2DBuffer
def _define_IMF2DBuffer():
    IMF2DBuffer = win32more.Media.MediaFoundation.IMF2DBuffer_head
    IMF2DBuffer.Lock2D = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(c_char_p_no),POINTER(Int32))(3, 'Lock2D', ((1, 'ppbScanline0'),(1, 'plPitch'),)))
    IMF2DBuffer.Unlock2D = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(4, 'Unlock2D', ()))
    IMF2DBuffer.GetScanline0AndPitch = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(c_char_p_no),POINTER(Int32))(5, 'GetScanline0AndPitch', ((1, 'pbScanline0'),(1, 'plPitch'),)))
    IMF2DBuffer.IsContiguousFormat = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(6, 'IsContiguousFormat', ((1, 'pfIsContiguous'),)))
    IMF2DBuffer.GetContiguousLength = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(7, 'GetContiguousLength', ((1, 'pcbLength'),)))
    IMF2DBuffer.ContiguousCopyTo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32)(8, 'ContiguousCopyTo', ((1, 'pbDestBuffer'),(1, 'cbDestBuffer'),)))
    IMF2DBuffer.ContiguousCopyFrom = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32)(9, 'ContiguousCopyFrom', ((1, 'pbSrcBuffer'),(1, 'cbSrcBuffer'),)))
    win32more.System.Com.IUnknown
    return IMF2DBuffer
def _define_IMF2DBuffer2_head():
    class IMF2DBuffer2(win32more.Media.MediaFoundation.IMF2DBuffer_head):
        Guid = Guid('33ae5ea6-4316-436f-8d-dd-d7-3d-22-f8-29-ec')
    return IMF2DBuffer2
def _define_IMF2DBuffer2():
    IMF2DBuffer2 = win32more.Media.MediaFoundation.IMF2DBuffer2_head
    IMF2DBuffer2.Lock2DSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF2DBuffer_LockFlags,POINTER(c_char_p_no),POINTER(Int32),POINTER(c_char_p_no),POINTER(UInt32))(10, 'Lock2DSize', ((1, 'lockFlags'),(1, 'ppbScanline0'),(1, 'plPitch'),(1, 'ppbBufferStart'),(1, 'pcbBufferLength'),)))
    IMF2DBuffer2.Copy2DTo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMF2DBuffer2_head)(11, 'Copy2DTo', ((1, 'pDestBuffer'),)))
    win32more.Media.MediaFoundation.IMF2DBuffer
    return IMF2DBuffer2
def _define_IMFActivate_head():
    class IMFActivate(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('7fee9e9a-4a89-47a6-89-9c-b6-a5-3a-70-fb-67')
    return IMFActivate
def _define_IMFActivate():
    IMFActivate = win32more.Media.MediaFoundation.IMFActivate_head
    IMFActivate.ActivateObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p))(33, 'ActivateObject', ((1, 'riid'),(1, 'ppv'),)))
    IMFActivate.ShutdownObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(34, 'ShutdownObject', ()))
    IMFActivate.DetachObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(35, 'DetachObject', ()))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFActivate
def _define_IMFASFContentInfo_head():
    class IMFASFContentInfo(win32more.System.Com.IUnknown_head):
        Guid = Guid('b1dca5cd-d5da-4451-8e-9e-db-5c-59-91-4e-ad')
    return IMFASFContentInfo
def _define_IMFASFContentInfo():
    IMFASFContentInfo = win32more.Media.MediaFoundation.IMFASFContentInfo_head
    IMFASFContentInfo.GetHeaderSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaBuffer_head,POINTER(UInt64))(3, 'GetHeaderSize', ((1, 'pIStartOfContent'),(1, 'cbHeaderSize'),)))
    IMFASFContentInfo.ParseHeader = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaBuffer_head,UInt64)(4, 'ParseHeader', ((1, 'pIHeaderBuffer'),(1, 'cbOffsetWithinHeader'),)))
    IMFASFContentInfo.GenerateHeader = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaBuffer_head,POINTER(UInt32))(5, 'GenerateHeader', ((1, 'pIHeader'),(1, 'pcbHeader'),)))
    IMFASFContentInfo.GetProfile = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFProfile_head))(6, 'GetProfile', ((1, 'ppIProfile'),)))
    IMFASFContentInfo.SetProfile = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFASFProfile_head)(7, 'SetProfile', ((1, 'pIProfile'),)))
    IMFASFContentInfo.GeneratePresentationDescriptor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFPresentationDescriptor_head))(8, 'GeneratePresentationDescriptor', ((1, 'ppIPresentationDescriptor'),)))
    IMFASFContentInfo.GetEncodingConfigurationPropertyStore = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16,POINTER(win32more.UI.Shell.PropertiesSystem.IPropertyStore_head))(9, 'GetEncodingConfigurationPropertyStore', ((1, 'wStreamNumber'),(1, 'ppIStore'),)))
    win32more.System.Com.IUnknown
    return IMFASFContentInfo
def _define_IMFASFIndexer_head():
    class IMFASFIndexer(win32more.System.Com.IUnknown_head):
        Guid = Guid('53590f48-dc3b-4297-81-3f-78-77-61-ad-7b-3e')
    return IMFASFIndexer
def _define_IMFASFIndexer():
    IMFASFIndexer = win32more.Media.MediaFoundation.IMFASFIndexer_head
    IMFASFIndexer.SetFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(3, 'SetFlags', ((1, 'dwFlags'),)))
    IMFASFIndexer.GetFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(4, 'GetFlags', ((1, 'pdwFlags'),)))
    IMFASFIndexer.Initialize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFASFContentInfo_head)(5, 'Initialize', ((1, 'pIContentInfo'),)))
    IMFASFIndexer.GetIndexPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFASFContentInfo_head,POINTER(UInt64))(6, 'GetIndexPosition', ((1, 'pIContentInfo'),(1, 'pcbIndexOffset'),)))
    IMFASFIndexer.SetIndexByteStreams = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFByteStream_head),UInt32)(7, 'SetIndexByteStreams', ((1, 'ppIByteStreams'),(1, 'cByteStreams'),)))
    IMFASFIndexer.GetIndexByteStreamCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(8, 'GetIndexByteStreamCount', ((1, 'pcByteStreams'),)))
    IMFASFIndexer.GetIndexStatus = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.ASF_INDEX_IDENTIFIER_head),POINTER(win32more.Foundation.BOOL),c_char_p_no,POINTER(UInt32))(9, 'GetIndexStatus', ((1, 'pIndexIdentifier'),(1, 'pfIsIndexed'),(1, 'pbIndexDescriptor'),(1, 'pcbIndexDescriptor'),)))
    IMFASFIndexer.SetIndexStatus = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32,win32more.Foundation.BOOL)(10, 'SetIndexStatus', ((1, 'pbIndexDescriptor'),(1, 'cbIndexDescriptor'),(1, 'fGenerateIndex'),)))
    IMFASFIndexer.GetSeekPositionForValue = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head),POINTER(win32more.Media.MediaFoundation.ASF_INDEX_IDENTIFIER_head),POINTER(UInt64),POINTER(Int64),POINTER(UInt32))(11, 'GetSeekPositionForValue', ((1, 'pvarValue'),(1, 'pIndexIdentifier'),(1, 'pcbOffsetWithinData'),(1, 'phnsApproxTime'),(1, 'pdwPayloadNumberOfStreamWithinPacket'),)))
    IMFASFIndexer.GenerateIndexEntries = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSample_head)(12, 'GenerateIndexEntries', ((1, 'pIASFPacketSample'),)))
    IMFASFIndexer.CommitIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFASFContentInfo_head)(13, 'CommitIndex', ((1, 'pIContentInfo'),)))
    IMFASFIndexer.GetIndexWriteSpace = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64))(14, 'GetIndexWriteSpace', ((1, 'pcbIndexWriteSpace'),)))
    IMFASFIndexer.GetCompletedIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaBuffer_head,UInt64)(15, 'GetCompletedIndex', ((1, 'pIIndexBuffer'),(1, 'cbOffsetWithinIndex'),)))
    win32more.System.Com.IUnknown
    return IMFASFIndexer
def _define_IMFASFMultiplexer_head():
    class IMFASFMultiplexer(win32more.System.Com.IUnknown_head):
        Guid = Guid('57bdd80a-9b38-4838-b7-37-c5-8f-67-0d-7d-4f')
    return IMFASFMultiplexer
def _define_IMFASFMultiplexer():
    IMFASFMultiplexer = win32more.Media.MediaFoundation.IMFASFMultiplexer_head
    IMFASFMultiplexer.Initialize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFASFContentInfo_head)(3, 'Initialize', ((1, 'pIContentInfo'),)))
    IMFASFMultiplexer.SetFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(4, 'SetFlags', ((1, 'dwFlags'),)))
    IMFASFMultiplexer.GetFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(5, 'GetFlags', ((1, 'pdwFlags'),)))
    IMFASFMultiplexer.ProcessSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16,win32more.Media.MediaFoundation.IMFSample_head,Int64)(6, 'ProcessSample', ((1, 'wStreamNumber'),(1, 'pISample'),(1, 'hnsTimestampAdjust'),)))
    IMFASFMultiplexer.GetNextPacket = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(win32more.Media.MediaFoundation.IMFSample_head))(7, 'GetNextPacket', ((1, 'pdwStatusFlags'),(1, 'ppIPacket'),)))
    IMFASFMultiplexer.Flush = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(8, 'Flush', ()))
    IMFASFMultiplexer.End = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFASFContentInfo_head)(9, 'End', ((1, 'pIContentInfo'),)))
    IMFASFMultiplexer.GetStatistics = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16,POINTER(win32more.Media.MediaFoundation.ASF_MUX_STATISTICS_head))(10, 'GetStatistics', ((1, 'wStreamNumber'),(1, 'pMuxStats'),)))
    IMFASFMultiplexer.SetSyncTolerance = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(11, 'SetSyncTolerance', ((1, 'msSyncTolerance'),)))
    win32more.System.Com.IUnknown
    return IMFASFMultiplexer
def _define_IMFASFMutualExclusion_head():
    class IMFASFMutualExclusion(win32more.System.Com.IUnknown_head):
        Guid = Guid('12558291-e399-11d5-bc-2a-00-b0-d0-f3-f4-ab')
    return IMFASFMutualExclusion
def _define_IMFASFMutualExclusion():
    IMFASFMutualExclusion = win32more.Media.MediaFoundation.IMFASFMutualExclusion_head
    IMFASFMutualExclusion.GetType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid))(3, 'GetType', ((1, 'pguidType'),)))
    IMFASFMutualExclusion.SetType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid))(4, 'SetType', ((1, 'guidType'),)))
    IMFASFMutualExclusion.GetRecordCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(5, 'GetRecordCount', ((1, 'pdwRecordCount'),)))
    IMFASFMutualExclusion.GetStreamsForRecord = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt16),POINTER(UInt32))(6, 'GetStreamsForRecord', ((1, 'dwRecordNumber'),(1, 'pwStreamNumArray'),(1, 'pcStreams'),)))
    IMFASFMutualExclusion.AddStreamForRecord = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt16)(7, 'AddStreamForRecord', ((1, 'dwRecordNumber'),(1, 'wStreamNumber'),)))
    IMFASFMutualExclusion.RemoveStreamFromRecord = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt16)(8, 'RemoveStreamFromRecord', ((1, 'dwRecordNumber'),(1, 'wStreamNumber'),)))
    IMFASFMutualExclusion.RemoveRecord = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(9, 'RemoveRecord', ((1, 'dwRecordNumber'),)))
    IMFASFMutualExclusion.AddRecord = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(10, 'AddRecord', ((1, 'pdwRecordNumber'),)))
    IMFASFMutualExclusion.Clone = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFMutualExclusion_head))(11, 'Clone', ((1, 'ppIMutex'),)))
    win32more.System.Com.IUnknown
    return IMFASFMutualExclusion
def _define_IMFASFProfile_head():
    class IMFASFProfile(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('d267bf6a-028b-4e0d-90-3d-43-f0-ef-82-d0-d4')
    return IMFASFProfile
def _define_IMFASFProfile():
    IMFASFProfile = win32more.Media.MediaFoundation.IMFASFProfile_head
    IMFASFProfile.GetStreamCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(33, 'GetStreamCount', ((1, 'pcStreams'),)))
    IMFASFProfile.GetStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt16),POINTER(win32more.Media.MediaFoundation.IMFASFStreamConfig_head))(34, 'GetStream', ((1, 'dwStreamIndex'),(1, 'pwStreamNumber'),(1, 'ppIStream'),)))
    IMFASFProfile.GetStreamByNumber = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16,POINTER(win32more.Media.MediaFoundation.IMFASFStreamConfig_head))(35, 'GetStreamByNumber', ((1, 'wStreamNumber'),(1, 'ppIStream'),)))
    IMFASFProfile.SetStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFASFStreamConfig_head)(36, 'SetStream', ((1, 'pIStream'),)))
    IMFASFProfile.RemoveStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16)(37, 'RemoveStream', ((1, 'wStreamNumber'),)))
    IMFASFProfile.CreateStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.IMFASFStreamConfig_head))(38, 'CreateStream', ((1, 'pIMediaType'),(1, 'ppIStream'),)))
    IMFASFProfile.GetMutualExclusionCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(39, 'GetMutualExclusionCount', ((1, 'pcMutexs'),)))
    IMFASFProfile.GetMutualExclusion = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFASFMutualExclusion_head))(40, 'GetMutualExclusion', ((1, 'dwMutexIndex'),(1, 'ppIMutex'),)))
    IMFASFProfile.AddMutualExclusion = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFASFMutualExclusion_head)(41, 'AddMutualExclusion', ((1, 'pIMutex'),)))
    IMFASFProfile.RemoveMutualExclusion = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(42, 'RemoveMutualExclusion', ((1, 'dwMutexIndex'),)))
    IMFASFProfile.CreateMutualExclusion = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFMutualExclusion_head))(43, 'CreateMutualExclusion', ((1, 'ppIMutex'),)))
    IMFASFProfile.GetStreamPrioritization = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFStreamPrioritization_head))(44, 'GetStreamPrioritization', ((1, 'ppIStreamPrioritization'),)))
    IMFASFProfile.AddStreamPrioritization = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFASFStreamPrioritization_head)(45, 'AddStreamPrioritization', ((1, 'pIStreamPrioritization'),)))
    IMFASFProfile.RemoveStreamPrioritization = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(46, 'RemoveStreamPrioritization', ()))
    IMFASFProfile.CreateStreamPrioritization = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFStreamPrioritization_head))(47, 'CreateStreamPrioritization', ((1, 'ppIStreamPrioritization'),)))
    IMFASFProfile.Clone = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFProfile_head))(48, 'Clone', ((1, 'ppIProfile'),)))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFASFProfile
def _define_IMFASFSplitter_head():
    class IMFASFSplitter(win32more.System.Com.IUnknown_head):
        Guid = Guid('12558295-e399-11d5-bc-2a-00-b0-d0-f3-f4-ab')
    return IMFASFSplitter
def _define_IMFASFSplitter():
    IMFASFSplitter = win32more.Media.MediaFoundation.IMFASFSplitter_head
    IMFASFSplitter.Initialize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFASFContentInfo_head)(3, 'Initialize', ((1, 'pIContentInfo'),)))
    IMFASFSplitter.SetFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(4, 'SetFlags', ((1, 'dwFlags'),)))
    IMFASFSplitter.GetFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(5, 'GetFlags', ((1, 'pdwFlags'),)))
    IMFASFSplitter.SelectStreams = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt16),UInt16)(6, 'SelectStreams', ((1, 'pwStreamNumbers'),(1, 'wNumStreams'),)))
    IMFASFSplitter.GetSelectedStreams = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt16),POINTER(UInt16))(7, 'GetSelectedStreams', ((1, 'pwStreamNumbers'),(1, 'pwNumStreams'),)))
    IMFASFSplitter.ParseData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaBuffer_head,UInt32,UInt32)(8, 'ParseData', ((1, 'pIBuffer'),(1, 'cbBufferOffset'),(1, 'cbLength'),)))
    IMFASFSplitter.GetNextSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.ASF_STATUSFLAGS),POINTER(UInt16),POINTER(win32more.Media.MediaFoundation.IMFSample_head))(9, 'GetNextSample', ((1, 'pdwStatusFlags'),(1, 'pwStreamNumber'),(1, 'ppISample'),)))
    IMFASFSplitter.Flush = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(10, 'Flush', ()))
    IMFASFSplitter.GetLastSendTime = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(11, 'GetLastSendTime', ((1, 'pdwLastSendTime'),)))
    win32more.System.Com.IUnknown
    return IMFASFSplitter
def _define_IMFASFStreamConfig_head():
    class IMFASFStreamConfig(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('9e8ae8d2-dbbd-4200-9a-ca-06-e6-df-48-49-13')
    return IMFASFStreamConfig
def _define_IMFASFStreamConfig():
    IMFASFStreamConfig = win32more.Media.MediaFoundation.IMFASFStreamConfig_head
    IMFASFStreamConfig.GetStreamType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid))(33, 'GetStreamType', ((1, 'pguidStreamType'),)))
    IMFASFStreamConfig.GetStreamNumber = COMMETHOD(WINFUNCTYPE(UInt16,)(34, 'GetStreamNumber', ()))
    IMFASFStreamConfig.SetStreamNumber = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16)(35, 'SetStreamNumber', ((1, 'wStreamNum'),)))
    IMFASFStreamConfig.GetMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(36, 'GetMediaType', ((1, 'ppIMediaType'),)))
    IMFASFStreamConfig.SetMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head)(37, 'SetMediaType', ((1, 'pIMediaType'),)))
    IMFASFStreamConfig.GetPayloadExtensionCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt16))(38, 'GetPayloadExtensionCount', ((1, 'pcPayloadExtensions'),)))
    IMFASFStreamConfig.GetPayloadExtension = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16,POINTER(Guid),POINTER(UInt16),c_char_p_no,POINTER(UInt32))(39, 'GetPayloadExtension', ((1, 'wPayloadExtensionNumber'),(1, 'pguidExtensionSystemID'),(1, 'pcbExtensionDataSize'),(1, 'pbExtensionSystemInfo'),(1, 'pcbExtensionSystemInfo'),)))
    IMFASFStreamConfig.AddPayloadExtension = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,UInt16,c_char_p_no,UInt32)(40, 'AddPayloadExtension', ((1, 'guidExtensionSystemID'),(1, 'cbExtensionDataSize'),(1, 'pbExtensionSystemInfo'),(1, 'cbExtensionSystemInfo'),)))
    IMFASFStreamConfig.RemoveAllPayloadExtensions = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(41, 'RemoveAllPayloadExtensions', ()))
    IMFASFStreamConfig.Clone = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFStreamConfig_head))(42, 'Clone', ((1, 'ppIStreamConfig'),)))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFASFStreamConfig
def _define_IMFASFStreamPrioritization_head():
    class IMFASFStreamPrioritization(win32more.System.Com.IUnknown_head):
        Guid = Guid('699bdc27-bbaf-49ff-8e-38-9c-39-c9-b5-e0-88')
    return IMFASFStreamPrioritization
def _define_IMFASFStreamPrioritization():
    IMFASFStreamPrioritization = win32more.Media.MediaFoundation.IMFASFStreamPrioritization_head
    IMFASFStreamPrioritization.GetStreamCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'GetStreamCount', ((1, 'pdwStreamCount'),)))
    IMFASFStreamPrioritization.GetStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt16),POINTER(UInt16))(4, 'GetStream', ((1, 'dwStreamIndex'),(1, 'pwStreamNumber'),(1, 'pwStreamFlags'),)))
    IMFASFStreamPrioritization.AddStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16,UInt16)(5, 'AddStream', ((1, 'wStreamNumber'),(1, 'wStreamFlags'),)))
    IMFASFStreamPrioritization.RemoveStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(6, 'RemoveStream', ((1, 'dwStreamIndex'),)))
    IMFASFStreamPrioritization.Clone = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFASFStreamPrioritization_head))(7, 'Clone', ((1, 'ppIStreamPrioritization'),)))
    win32more.System.Com.IUnknown
    return IMFASFStreamPrioritization
def _define_IMFASFStreamSelector_head():
    class IMFASFStreamSelector(win32more.System.Com.IUnknown_head):
        Guid = Guid('d01bad4a-4fa0-4a60-93-49-c2-7e-62-da-9d-41')
    return IMFASFStreamSelector
def _define_IMFASFStreamSelector():
    IMFASFStreamSelector = win32more.Media.MediaFoundation.IMFASFStreamSelector_head
    IMFASFStreamSelector.GetStreamCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'GetStreamCount', ((1, 'pcStreams'),)))
    IMFASFStreamSelector.GetOutputCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(4, 'GetOutputCount', ((1, 'pcOutputs'),)))
    IMFASFStreamSelector.GetOutputStreamCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32))(5, 'GetOutputStreamCount', ((1, 'dwOutputNum'),(1, 'pcStreams'),)))
    IMFASFStreamSelector.GetOutputStreamNumbers = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt16))(6, 'GetOutputStreamNumbers', ((1, 'dwOutputNum'),(1, 'rgwStreamNumbers'),)))
    IMFASFStreamSelector.GetOutputFromStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16,POINTER(UInt32))(7, 'GetOutputFromStream', ((1, 'wStreamNum'),(1, 'pdwOutput'),)))
    IMFASFStreamSelector.GetOutputOverride = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.ASF_SELECTION_STATUS))(8, 'GetOutputOverride', ((1, 'dwOutputNum'),(1, 'pSelection'),)))
    IMFASFStreamSelector.SetOutputOverride = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.ASF_SELECTION_STATUS)(9, 'SetOutputOverride', ((1, 'dwOutputNum'),(1, 'Selection'),)))
    IMFASFStreamSelector.GetOutputMutexCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32))(10, 'GetOutputMutexCount', ((1, 'dwOutputNum'),(1, 'pcMutexes'),)))
    IMFASFStreamSelector.GetOutputMutex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(win32more.System.Com.IUnknown_head))(11, 'GetOutputMutex', ((1, 'dwOutputNum'),(1, 'dwMutexNum'),(1, 'ppMutex'),)))
    IMFASFStreamSelector.SetOutputMutexSelection = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,UInt16)(12, 'SetOutputMutexSelection', ((1, 'dwOutputNum'),(1, 'dwMutexNum'),(1, 'wSelectedRecord'),)))
    IMFASFStreamSelector.GetBandwidthStepCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(13, 'GetBandwidthStepCount', ((1, 'pcStepCount'),)))
    IMFASFStreamSelector.GetBandwidthStep = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32),POINTER(UInt16),POINTER(win32more.Media.MediaFoundation.ASF_SELECTION_STATUS))(14, 'GetBandwidthStep', ((1, 'dwStepNum'),(1, 'pdwBitrate'),(1, 'rgwStreamNumbers'),(1, 'rgSelections'),)))
    IMFASFStreamSelector.BitrateToStepNumber = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32))(15, 'BitrateToStepNumber', ((1, 'dwBitrate'),(1, 'pdwStepNum'),)))
    IMFASFStreamSelector.SetStreamSelectorFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(16, 'SetStreamSelectorFlags', ((1, 'dwStreamSelectorFlags'),)))
    win32more.System.Com.IUnknown
    return IMFASFStreamSelector
def _define_IMFAsyncCallback_head():
    class IMFAsyncCallback(win32more.System.Com.IUnknown_head):
        Guid = Guid('a27003cf-2354-4f2a-8d-6a-ab-7c-ff-15-43-7e')
    return IMFAsyncCallback
def _define_IMFAsyncCallback():
    IMFAsyncCallback = win32more.Media.MediaFoundation.IMFAsyncCallback_head
    IMFAsyncCallback.GetParameters = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(UInt32))(3, 'GetParameters', ((1, 'pdwFlags'),(1, 'pdwQueue'),)))
    IMFAsyncCallback.Invoke = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head)(4, 'Invoke', ((1, 'pAsyncResult'),)))
    win32more.System.Com.IUnknown
    return IMFAsyncCallback
def _define_IMFAsyncCallbackLogging_head():
    class IMFAsyncCallbackLogging(win32more.Media.MediaFoundation.IMFAsyncCallback_head):
        Guid = Guid('c7a4dca1-f5f0-47b6-b9-2b-bf-01-06-d2-57-91')
    return IMFAsyncCallbackLogging
def _define_IMFAsyncCallbackLogging():
    IMFAsyncCallbackLogging = win32more.Media.MediaFoundation.IMFAsyncCallbackLogging_head
    IMFAsyncCallbackLogging.GetObjectPointer = COMMETHOD(WINFUNCTYPE(c_void_p,)(5, 'GetObjectPointer', ()))
    IMFAsyncCallbackLogging.GetObjectTag = COMMETHOD(WINFUNCTYPE(UInt32,)(6, 'GetObjectTag', ()))
    win32more.Media.MediaFoundation.IMFAsyncCallback
    return IMFAsyncCallbackLogging
def _define_IMFAsyncResult_head():
    class IMFAsyncResult(win32more.System.Com.IUnknown_head):
        Guid = Guid('ac6b7889-0740-4d51-86-19-90-59-94-a5-5c-c6')
    return IMFAsyncResult
def _define_IMFAsyncResult():
    IMFAsyncResult = win32more.Media.MediaFoundation.IMFAsyncResult_head
    IMFAsyncResult.GetState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.IUnknown_head))(3, 'GetState', ((1, 'ppunkState'),)))
    IMFAsyncResult.GetStatus = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(4, 'GetStatus', ()))
    IMFAsyncResult.SetStatus = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HRESULT)(5, 'SetStatus', ((1, 'hrStatus'),)))
    IMFAsyncResult.GetObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.IUnknown_head))(6, 'GetObject', ((1, 'ppObject'),)))
    IMFAsyncResult.GetStateNoAddRef = COMMETHOD(WINFUNCTYPE(win32more.System.Com.IUnknown_head,)(7, 'GetStateNoAddRef', ()))
    win32more.System.Com.IUnknown
    return IMFAsyncResult
def _define_IMFAttributes_head():
    class IMFAttributes(win32more.System.Com.IUnknown_head):
        Guid = Guid('2cd2d921-c447-44a7-a1-3c-4a-da-bf-c2-47-e3')
    return IMFAttributes
def _define_IMFAttributes():
    IMFAttributes = win32more.Media.MediaFoundation.IMFAttributes_head
    IMFAttributes.GetItem = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(3, 'GetItem', ((1, 'guidKey'),(1, 'pValue'),)))
    IMFAttributes.GetItemType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.MF_ATTRIBUTE_TYPE))(4, 'GetItemType', ((1, 'guidKey'),(1, 'pType'),)))
    IMFAttributes.CompareItem = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head),POINTER(win32more.Foundation.BOOL))(5, 'CompareItem', ((1, 'guidKey'),(1, 'Value'),(1, 'pbResult'),)))
    IMFAttributes.Compare = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head,win32more.Media.MediaFoundation.MF_ATTRIBUTES_MATCH_TYPE,POINTER(win32more.Foundation.BOOL))(6, 'Compare', ((1, 'pTheirs'),(1, 'MatchType'),(1, 'pbResult'),)))
    IMFAttributes.GetUINT32 = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(UInt32))(7, 'GetUINT32', ((1, 'guidKey'),(1, 'punValue'),)))
    IMFAttributes.GetUINT64 = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(UInt64))(8, 'GetUINT64', ((1, 'guidKey'),(1, 'punValue'),)))
    IMFAttributes.GetDouble = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Double))(9, 'GetDouble', ((1, 'guidKey'),(1, 'pfValue'),)))
    IMFAttributes.GetGUID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Guid))(10, 'GetGUID', ((1, 'guidKey'),(1, 'pguidValue'),)))
    IMFAttributes.GetStringLength = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(UInt32))(11, 'GetStringLength', ((1, 'guidKey'),(1, 'pcchLength'),)))
    IMFAttributes.GetString = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(12, 'GetString', ((1, 'guidKey'),(1, 'pwszValue'),(1, 'cchBufSize'),(1, 'pcchLength'),)))
    IMFAttributes.GetAllocatedString = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Foundation.PWSTR),POINTER(UInt32))(13, 'GetAllocatedString', ((1, 'guidKey'),(1, 'ppwszValue'),(1, 'pcchLength'),)))
    IMFAttributes.GetBlobSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(UInt32))(14, 'GetBlobSize', ((1, 'guidKey'),(1, 'pcbBlobSize'),)))
    IMFAttributes.GetBlob = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),c_char_p_no,UInt32,POINTER(UInt32))(15, 'GetBlob', ((1, 'guidKey'),(1, 'pBuf'),(1, 'cbBufSize'),(1, 'pcbBlobSize'),)))
    IMFAttributes.GetAllocatedBlob = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_char_p_no),POINTER(UInt32))(16, 'GetAllocatedBlob', ((1, 'guidKey'),(1, 'ppBuf'),(1, 'pcbSize'),)))
    IMFAttributes.GetUnknown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Guid),POINTER(c_void_p))(17, 'GetUnknown', ((1, 'guidKey'),(1, 'riid'),(1, 'ppv'),)))
    IMFAttributes.SetItem = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(18, 'SetItem', ((1, 'guidKey'),(1, 'Value'),)))
    IMFAttributes.DeleteItem = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid))(19, 'DeleteItem', ((1, 'guidKey'),)))
    IMFAttributes.DeleteAllItems = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(20, 'DeleteAllItems', ()))
    IMFAttributes.SetUINT32 = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),UInt32)(21, 'SetUINT32', ((1, 'guidKey'),(1, 'unValue'),)))
    IMFAttributes.SetUINT64 = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),UInt64)(22, 'SetUINT64', ((1, 'guidKey'),(1, 'unValue'),)))
    IMFAttributes.SetDouble = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),Double)(23, 'SetDouble', ((1, 'guidKey'),(1, 'fValue'),)))
    IMFAttributes.SetGUID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Guid))(24, 'SetGUID', ((1, 'guidKey'),(1, 'guidValue'),)))
    IMFAttributes.SetString = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),win32more.Foundation.PWSTR)(25, 'SetString', ((1, 'guidKey'),(1, 'wszValue'),)))
    IMFAttributes.SetBlob = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),c_char_p_no,UInt32)(26, 'SetBlob', ((1, 'guidKey'),(1, 'pBuf'),(1, 'cbBufSize'),)))
    IMFAttributes.SetUnknown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),win32more.System.Com.IUnknown_head)(27, 'SetUnknown', ((1, 'guidKey'),(1, 'pUnknown'),)))
    IMFAttributes.LockStore = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(28, 'LockStore', ()))
    IMFAttributes.UnlockStore = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(29, 'UnlockStore', ()))
    IMFAttributes.GetCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(30, 'GetCount', ((1, 'pcItems'),)))
    IMFAttributes.GetItemByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(31, 'GetItemByIndex', ((1, 'unIndex'),(1, 'pguidKey'),(1, 'pValue'),)))
    IMFAttributes.CopyAllItems = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head)(32, 'CopyAllItems', ((1, 'pDest'),)))
    win32more.System.Com.IUnknown
    return IMFAttributes
def _define_IMFAudioMediaType_head():
    class IMFAudioMediaType(win32more.Media.MediaFoundation.IMFMediaType_head):
        Guid = Guid('26a0adc3-ce26-4672-93-04-69-55-2e-dd-3f-af')
    return IMFAudioMediaType
def _define_IMFAudioMediaType():
    IMFAudioMediaType = win32more.Media.MediaFoundation.IMFAudioMediaType_head
    IMFAudioMediaType.GetAudioFormat = COMMETHOD(WINFUNCTYPE(POINTER(win32more.Media.Audio.WAVEFORMATEX_head),)(38, 'GetAudioFormat', ()))
    win32more.Media.MediaFoundation.IMFMediaType
    return IMFAudioMediaType
def _define_IMFAudioPolicy_head():
    class IMFAudioPolicy(win32more.System.Com.IUnknown_head):
        Guid = Guid('a0638c2b-6465-4395-9a-e7-a3-21-a9-fd-28-56')
    return IMFAudioPolicy
def _define_IMFAudioPolicy():
    IMFAudioPolicy = win32more.Media.MediaFoundation.IMFAudioPolicy_head
    IMFAudioPolicy.SetGroupingParam = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid))(3, 'SetGroupingParam', ((1, 'rguidClass'),)))
    IMFAudioPolicy.GetGroupingParam = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid))(4, 'GetGroupingParam', ((1, 'pguidClass'),)))
    IMFAudioPolicy.SetDisplayName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR)(5, 'SetDisplayName', ((1, 'pszName'),)))
    IMFAudioPolicy.GetDisplayName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(6, 'GetDisplayName', ((1, 'pszName'),)))
    IMFAudioPolicy.SetIconPath = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR)(7, 'SetIconPath', ((1, 'pszPath'),)))
    IMFAudioPolicy.GetIconPath = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(8, 'GetIconPath', ((1, 'pszPath'),)))
    win32more.System.Com.IUnknown
    return IMFAudioPolicy
def _define_IMFAudioStreamVolume_head():
    class IMFAudioStreamVolume(win32more.System.Com.IUnknown_head):
        Guid = Guid('76b1bbdb-4ec8-4f36-b1-06-70-a9-31-6d-f5-93')
    return IMFAudioStreamVolume
def _define_IMFAudioStreamVolume():
    IMFAudioStreamVolume = win32more.Media.MediaFoundation.IMFAudioStreamVolume_head
    IMFAudioStreamVolume.GetChannelCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'GetChannelCount', ((1, 'pdwCount'),)))
    IMFAudioStreamVolume.SetChannelVolume = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,Single)(4, 'SetChannelVolume', ((1, 'dwIndex'),(1, 'fLevel'),)))
    IMFAudioStreamVolume.GetChannelVolume = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Single))(5, 'GetChannelVolume', ((1, 'dwIndex'),(1, 'pfLevel'),)))
    IMFAudioStreamVolume.SetAllVolumes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Single))(6, 'SetAllVolumes', ((1, 'dwCount'),(1, 'pfVolumes'),)))
    IMFAudioStreamVolume.GetAllVolumes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Single))(7, 'GetAllVolumes', ((1, 'dwCount'),(1, 'pfVolumes'),)))
    win32more.System.Com.IUnknown
    return IMFAudioStreamVolume
def _define_IMFBufferListNotify_head():
    class IMFBufferListNotify(win32more.System.Com.IUnknown_head):
        Guid = Guid('24cd47f7-81d8-4785-ad-b2-af-69-7a-96-3c-d2')
    return IMFBufferListNotify
def _define_IMFBufferListNotify():
    IMFBufferListNotify = win32more.Media.MediaFoundation.IMFBufferListNotify_head
    IMFBufferListNotify.OnAddSourceBuffer = COMMETHOD(WINFUNCTYPE(Void,)(3, 'OnAddSourceBuffer', ()))
    IMFBufferListNotify.OnRemoveSourceBuffer = COMMETHOD(WINFUNCTYPE(Void,)(4, 'OnRemoveSourceBuffer', ()))
    win32more.System.Com.IUnknown
    return IMFBufferListNotify
def _define_IMFByteStream_head():
    class IMFByteStream(win32more.System.Com.IUnknown_head):
        Guid = Guid('ad4c1b00-4bf7-422f-91-75-75-66-93-d9-13-0d')
    return IMFByteStream
def _define_IMFByteStream():
    IMFByteStream = win32more.Media.MediaFoundation.IMFByteStream_head
    IMFByteStream.GetCapabilities = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'GetCapabilities', ((1, 'pdwCapabilities'),)))
    IMFByteStream.GetLength = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64))(4, 'GetLength', ((1, 'pqwLength'),)))
    IMFByteStream.SetLength = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64)(5, 'SetLength', ((1, 'qwLength'),)))
    IMFByteStream.GetCurrentPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64))(6, 'GetCurrentPosition', ((1, 'pqwPosition'),)))
    IMFByteStream.SetCurrentPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64)(7, 'SetCurrentPosition', ((1, 'qwPosition'),)))
    IMFByteStream.IsEndOfStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(8, 'IsEndOfStream', ((1, 'pfEndOfStream'),)))
    IMFByteStream.Read = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32,POINTER(UInt32))(9, 'Read', ((1, 'pb'),(1, 'cb'),(1, 'pcbRead'),)))
    IMFByteStream.BeginRead = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(10, 'BeginRead', ((1, 'pb'),(1, 'cb'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFByteStream.EndRead = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(UInt32))(11, 'EndRead', ((1, 'pResult'),(1, 'pcbRead'),)))
    IMFByteStream.Write = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32,POINTER(UInt32))(12, 'Write', ((1, 'pb'),(1, 'cb'),(1, 'pcbWritten'),)))
    IMFByteStream.BeginWrite = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(13, 'BeginWrite', ((1, 'pb'),(1, 'cb'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFByteStream.EndWrite = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(UInt32))(14, 'EndWrite', ((1, 'pResult'),(1, 'pcbWritten'),)))
    IMFByteStream.Seek = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFBYTESTREAM_SEEK_ORIGIN,Int64,UInt32,POINTER(UInt64))(15, 'Seek', ((1, 'SeekOrigin'),(1, 'llSeekOffset'),(1, 'dwSeekFlags'),(1, 'pqwCurrentPosition'),)))
    IMFByteStream.Flush = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(16, 'Flush', ()))
    IMFByteStream.Close = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(17, 'Close', ()))
    win32more.System.Com.IUnknown
    return IMFByteStream
def _define_IMFByteStreamBuffering_head():
    class IMFByteStreamBuffering(win32more.System.Com.IUnknown_head):
        Guid = Guid('6d66d782-1d4f-4db7-8c-63-cb-8c-77-f1-ef-5e')
    return IMFByteStreamBuffering
def _define_IMFByteStreamBuffering():
    IMFByteStreamBuffering = win32more.Media.MediaFoundation.IMFByteStreamBuffering_head
    IMFByteStreamBuffering.SetBufferingParams = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFBYTESTREAM_BUFFERING_PARAMS_head))(3, 'SetBufferingParams', ((1, 'pParams'),)))
    IMFByteStreamBuffering.EnableBuffering = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL)(4, 'EnableBuffering', ((1, 'fEnable'),)))
    IMFByteStreamBuffering.StopBuffering = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(5, 'StopBuffering', ()))
    win32more.System.Com.IUnknown
    return IMFByteStreamBuffering
def _define_IMFByteStreamCacheControl_head():
    class IMFByteStreamCacheControl(win32more.System.Com.IUnknown_head):
        Guid = Guid('f5042ea4-7a96-4a75-aa-7b-2b-e1-ef-7f-88-d5')
    return IMFByteStreamCacheControl
def _define_IMFByteStreamCacheControl():
    IMFByteStreamCacheControl = win32more.Media.MediaFoundation.IMFByteStreamCacheControl_head
    IMFByteStreamCacheControl.StopBackgroundTransfer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(3, 'StopBackgroundTransfer', ()))
    win32more.System.Com.IUnknown
    return IMFByteStreamCacheControl
def _define_IMFByteStreamCacheControl2_head():
    class IMFByteStreamCacheControl2(win32more.Media.MediaFoundation.IMFByteStreamCacheControl_head):
        Guid = Guid('71ce469c-f34b-49ea-a5-6b-2d-2a-10-e5-11-49')
    return IMFByteStreamCacheControl2
def _define_IMFByteStreamCacheControl2():
    IMFByteStreamCacheControl2 = win32more.Media.MediaFoundation.IMFByteStreamCacheControl2_head
    IMFByteStreamCacheControl2.GetByteRanges = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(POINTER(win32more.Media.MediaFoundation.MF_BYTE_STREAM_CACHE_RANGE_head)))(4, 'GetByteRanges', ((1, 'pcRanges'),(1, 'ppRanges'),)))
    IMFByteStreamCacheControl2.SetCacheLimit = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64)(5, 'SetCacheLimit', ((1, 'qwBytes'),)))
    IMFByteStreamCacheControl2.IsBackgroundTransferActive = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(6, 'IsBackgroundTransferActive', ((1, 'pfActive'),)))
    win32more.Media.MediaFoundation.IMFByteStreamCacheControl
    return IMFByteStreamCacheControl2
def _define_IMFByteStreamHandler_head():
    class IMFByteStreamHandler(win32more.System.Com.IUnknown_head):
        Guid = Guid('bb420aa4-765b-4a1f-91-fe-d6-a8-a1-43-92-4c')
    return IMFByteStreamHandler
def _define_IMFByteStreamHandler():
    IMFByteStreamHandler = win32more.Media.MediaFoundation.IMFByteStreamHandler_head
    IMFByteStreamHandler.BeginCreateObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Foundation.PWSTR,UInt32,win32more.UI.Shell.PropertiesSystem.IPropertyStore_head,POINTER(win32more.System.Com.IUnknown_head),win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(3, 'BeginCreateObject', ((1, 'pByteStream'),(1, 'pwszURL'),(1, 'dwFlags'),(1, 'pProps'),(1, 'ppIUnknownCancelCookie'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFByteStreamHandler.EndCreateObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(win32more.Media.MediaFoundation.MF_OBJECT_TYPE),POINTER(win32more.System.Com.IUnknown_head))(4, 'EndCreateObject', ((1, 'pResult'),(1, 'pObjectType'),(1, 'ppObject'),)))
    IMFByteStreamHandler.CancelObjectCreation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head)(5, 'CancelObjectCreation', ((1, 'pIUnknownCancelCookie'),)))
    IMFByteStreamHandler.GetMaxNumberOfBytesRequiredForResolution = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64))(6, 'GetMaxNumberOfBytesRequiredForResolution', ((1, 'pqwBytes'),)))
    win32more.System.Com.IUnknown
    return IMFByteStreamHandler
def _define_IMFByteStreamProxyClassFactory_head():
    class IMFByteStreamProxyClassFactory(win32more.System.Com.IUnknown_head):
        Guid = Guid('a6b43f84-5c0a-42e8-a4-4d-b1-85-7a-76-99-2f')
    return IMFByteStreamProxyClassFactory
def _define_IMFByteStreamProxyClassFactory():
    IMFByteStreamProxyClassFactory = win32more.Media.MediaFoundation.IMFByteStreamProxyClassFactory_head
    IMFByteStreamProxyClassFactory.CreateByteStreamProxy = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(Guid),POINTER(c_void_p))(3, 'CreateByteStreamProxy', ((1, 'pByteStream'),(1, 'pAttributes'),(1, 'riid'),(1, 'ppvObject'),)))
    win32more.System.Com.IUnknown
    return IMFByteStreamProxyClassFactory
def _define_IMFByteStreamTimeSeek_head():
    class IMFByteStreamTimeSeek(win32more.System.Com.IUnknown_head):
        Guid = Guid('64976bfa-fb61-4041-90-69-8c-9a-5f-65-9b-eb')
    return IMFByteStreamTimeSeek
def _define_IMFByteStreamTimeSeek():
    IMFByteStreamTimeSeek = win32more.Media.MediaFoundation.IMFByteStreamTimeSeek_head
    IMFByteStreamTimeSeek.IsTimeSeekSupported = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(3, 'IsTimeSeekSupported', ((1, 'pfTimeSeekIsSupported'),)))
    IMFByteStreamTimeSeek.TimeSeek = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64)(4, 'TimeSeek', ((1, 'qwTimePosition'),)))
    IMFByteStreamTimeSeek.GetTimeSeekResult = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64),POINTER(UInt64),POINTER(UInt64))(5, 'GetTimeSeekResult', ((1, 'pqwStartTime'),(1, 'pqwStopTime'),(1, 'pqwDuration'),)))
    win32more.System.Com.IUnknown
    return IMFByteStreamTimeSeek
def _define_IMFCameraOcclusionStateMonitor_head():
    class IMFCameraOcclusionStateMonitor(win32more.System.Com.IUnknown_head):
        Guid = Guid('cc692f46-c697-47e2-a7-2d-7b-06-46-17-74-9b')
    return IMFCameraOcclusionStateMonitor
def _define_IMFCameraOcclusionStateMonitor():
    IMFCameraOcclusionStateMonitor = win32more.Media.MediaFoundation.IMFCameraOcclusionStateMonitor_head
    IMFCameraOcclusionStateMonitor.Start = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(3, 'Start', ()))
    IMFCameraOcclusionStateMonitor.Stop = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(4, 'Stop', ()))
    IMFCameraOcclusionStateMonitor.GetSupportedStates = COMMETHOD(WINFUNCTYPE(UInt32,)(5, 'GetSupportedStates', ()))
    win32more.System.Com.IUnknown
    return IMFCameraOcclusionStateMonitor
def _define_IMFCameraOcclusionStateReport_head():
    class IMFCameraOcclusionStateReport(win32more.System.Com.IUnknown_head):
        Guid = Guid('1640b2cf-74da-4462-a4-3b-b7-6d-3b-dc-14-34')
    return IMFCameraOcclusionStateReport
def _define_IMFCameraOcclusionStateReport():
    IMFCameraOcclusionStateReport = win32more.Media.MediaFoundation.IMFCameraOcclusionStateReport_head
    IMFCameraOcclusionStateReport.GetOcclusionState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'GetOcclusionState', ((1, 'occlusionState'),)))
    win32more.System.Com.IUnknown
    return IMFCameraOcclusionStateReport
def _define_IMFCameraOcclusionStateReportCallback_head():
    class IMFCameraOcclusionStateReportCallback(win32more.System.Com.IUnknown_head):
        Guid = Guid('6e5841c7-3889-4019-90-35-78-3f-b1-9b-59-48')
    return IMFCameraOcclusionStateReportCallback
def _define_IMFCameraOcclusionStateReportCallback():
    IMFCameraOcclusionStateReportCallback = win32more.Media.MediaFoundation.IMFCameraOcclusionStateReportCallback_head
    IMFCameraOcclusionStateReportCallback.OnOcclusionStateReport = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFCameraOcclusionStateReport_head)(3, 'OnOcclusionStateReport', ((1, 'occlusionStateReport'),)))
    win32more.System.Com.IUnknown
    return IMFCameraOcclusionStateReportCallback
def _define_IMFCameraSyncObject_head():
    class IMFCameraSyncObject(win32more.System.Com.IUnknown_head):
        Guid = Guid('6338b23a-3042-49d2-a3-ea-ec-0f-ed-81-54-07')
    return IMFCameraSyncObject
def _define_IMFCameraSyncObject():
    IMFCameraSyncObject = win32more.Media.MediaFoundation.IMFCameraSyncObject_head
    IMFCameraSyncObject.WaitOnSignal = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(3, 'WaitOnSignal', ((1, 'timeOutInMs'),)))
    IMFCameraSyncObject.Shutdown = COMMETHOD(WINFUNCTYPE(Void,)(4, 'Shutdown', ()))
    win32more.System.Com.IUnknown
    return IMFCameraSyncObject
def _define_IMFCaptureEngine_head():
    class IMFCaptureEngine(win32more.System.Com.IUnknown_head):
        Guid = Guid('a6bba433-176b-48b2-b3-75-53-aa-03-47-32-07')
    return IMFCaptureEngine
def _define_IMFCaptureEngine():
    IMFCaptureEngine = win32more.Media.MediaFoundation.IMFCaptureEngine_head
    IMFCaptureEngine.Initialize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFCaptureEngineOnEventCallback_head,win32more.Media.MediaFoundation.IMFAttributes_head,win32more.System.Com.IUnknown_head,win32more.System.Com.IUnknown_head)(3, 'Initialize', ((1, 'pEventCallback'),(1, 'pAttributes'),(1, 'pAudioSource'),(1, 'pVideoSource'),)))
    IMFCaptureEngine.StartPreview = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(4, 'StartPreview', ()))
    IMFCaptureEngine.StopPreview = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(5, 'StopPreview', ()))
    IMFCaptureEngine.StartRecord = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(6, 'StartRecord', ()))
    IMFCaptureEngine.StopRecord = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL,win32more.Foundation.BOOL)(7, 'StopRecord', ((1, 'bFinalize'),(1, 'bFlushUnprocessedSamples'),)))
    IMFCaptureEngine.TakePhoto = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(8, 'TakePhoto', ()))
    IMFCaptureEngine.GetSink = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_CAPTURE_ENGINE_SINK_TYPE,POINTER(win32more.Media.MediaFoundation.IMFCaptureSink_head))(9, 'GetSink', ((1, 'mfCaptureEngineSinkType'),(1, 'ppSink'),)))
    IMFCaptureEngine.GetSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFCaptureSource_head))(10, 'GetSource', ((1, 'ppSource'),)))
    win32more.System.Com.IUnknown
    return IMFCaptureEngine
def _define_IMFCaptureEngineClassFactory_head():
    class IMFCaptureEngineClassFactory(win32more.System.Com.IUnknown_head):
        Guid = Guid('8f02d140-56fc-4302-a7-05-3a-97-c7-8b-e7-79')
    return IMFCaptureEngineClassFactory
def _define_IMFCaptureEngineClassFactory():
    IMFCaptureEngineClassFactory = win32more.Media.MediaFoundation.IMFCaptureEngineClassFactory_head
    IMFCaptureEngineClassFactory.CreateInstance = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Guid),POINTER(c_void_p))(3, 'CreateInstance', ((1, 'clsid'),(1, 'riid'),(1, 'ppvObject'),)))
    win32more.System.Com.IUnknown
    return IMFCaptureEngineClassFactory
def _define_IMFCaptureEngineOnEventCallback_head():
    class IMFCaptureEngineOnEventCallback(win32more.System.Com.IUnknown_head):
        Guid = Guid('aeda51c0-9025-4983-90-12-de-59-7b-88-b0-89')
    return IMFCaptureEngineOnEventCallback
def _define_IMFCaptureEngineOnEventCallback():
    IMFCaptureEngineOnEventCallback = win32more.Media.MediaFoundation.IMFCaptureEngineOnEventCallback_head
    IMFCaptureEngineOnEventCallback.OnEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaEvent_head)(3, 'OnEvent', ((1, 'pEvent'),)))
    win32more.System.Com.IUnknown
    return IMFCaptureEngineOnEventCallback
def _define_IMFCaptureEngineOnSampleCallback_head():
    class IMFCaptureEngineOnSampleCallback(win32more.System.Com.IUnknown_head):
        Guid = Guid('52150b82-ab39-4467-98-0f-e4-8b-f0-82-2e-cd')
    return IMFCaptureEngineOnSampleCallback
def _define_IMFCaptureEngineOnSampleCallback():
    IMFCaptureEngineOnSampleCallback = win32more.Media.MediaFoundation.IMFCaptureEngineOnSampleCallback_head
    IMFCaptureEngineOnSampleCallback.OnSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSample_head)(3, 'OnSample', ((1, 'pSample'),)))
    win32more.System.Com.IUnknown
    return IMFCaptureEngineOnSampleCallback
def _define_IMFCaptureEngineOnSampleCallback2_head():
    class IMFCaptureEngineOnSampleCallback2(win32more.Media.MediaFoundation.IMFCaptureEngineOnSampleCallback_head):
        Guid = Guid('e37ceed7-340f-4514-9f-4d-9c-2a-e0-26-10-0b')
    return IMFCaptureEngineOnSampleCallback2
def _define_IMFCaptureEngineOnSampleCallback2():
    IMFCaptureEngineOnSampleCallback2 = win32more.Media.MediaFoundation.IMFCaptureEngineOnSampleCallback2_head
    IMFCaptureEngineOnSampleCallback2.OnSynchronizedEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaEvent_head)(4, 'OnSynchronizedEvent', ((1, 'pEvent'),)))
    win32more.Media.MediaFoundation.IMFCaptureEngineOnSampleCallback
    return IMFCaptureEngineOnSampleCallback2
def _define_IMFCapturePhotoConfirmation_head():
    class IMFCapturePhotoConfirmation(win32more.System.Com.IUnknown_head):
        Guid = Guid('19f68549-ca8a-4706-a4-ef-48-1d-bc-95-e1-2c')
    return IMFCapturePhotoConfirmation
def _define_IMFCapturePhotoConfirmation():
    IMFCapturePhotoConfirmation = win32more.Media.MediaFoundation.IMFCapturePhotoConfirmation_head
    IMFCapturePhotoConfirmation.SetPhotoConfirmationCallback = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncCallback_head)(3, 'SetPhotoConfirmationCallback', ((1, 'pNotificationCallback'),)))
    IMFCapturePhotoConfirmation.SetPixelFormat = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Guid)(4, 'SetPixelFormat', ((1, 'subtype'),)))
    IMFCapturePhotoConfirmation.GetPixelFormat = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid))(5, 'GetPixelFormat', ((1, 'subtype'),)))
    win32more.System.Com.IUnknown
    return IMFCapturePhotoConfirmation
def _define_IMFCapturePhotoSink_head():
    class IMFCapturePhotoSink(win32more.Media.MediaFoundation.IMFCaptureSink_head):
        Guid = Guid('d2d43cc8-48bb-4aa7-95-db-10-c0-69-77-e7-77')
    return IMFCapturePhotoSink
def _define_IMFCapturePhotoSink():
    IMFCapturePhotoSink = win32more.Media.MediaFoundation.IMFCapturePhotoSink_head
    IMFCapturePhotoSink.SetOutputFileName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR)(8, 'SetOutputFileName', ((1, 'fileName'),)))
    IMFCapturePhotoSink.SetSampleCallback = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFCaptureEngineOnSampleCallback_head)(9, 'SetSampleCallback', ((1, 'pCallback'),)))
    IMFCapturePhotoSink.SetOutputByteStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head)(10, 'SetOutputByteStream', ((1, 'pByteStream'),)))
    win32more.Media.MediaFoundation.IMFCaptureSink
    return IMFCapturePhotoSink
def _define_IMFCapturePreviewSink_head():
    class IMFCapturePreviewSink(win32more.Media.MediaFoundation.IMFCaptureSink_head):
        Guid = Guid('77346cfd-5b49-4d73-ac-e0-5b-52-a8-59-f2-e0')
    return IMFCapturePreviewSink
def _define_IMFCapturePreviewSink():
    IMFCapturePreviewSink = win32more.Media.MediaFoundation.IMFCapturePreviewSink_head
    IMFCapturePreviewSink.SetRenderHandle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE)(8, 'SetRenderHandle', ((1, 'handle'),)))
    IMFCapturePreviewSink.SetRenderSurface = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head)(9, 'SetRenderSurface', ((1, 'pSurface'),)))
    IMFCapturePreviewSink.UpdateVideo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVideoNormalizedRect_head),POINTER(win32more.Foundation.RECT_head),POINTER(win32more.Foundation.COLORREF))(10, 'UpdateVideo', ((1, 'pSrc'),(1, 'pDst'),(1, 'pBorderClr'),)))
    IMFCapturePreviewSink.SetSampleCallback = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFCaptureEngineOnSampleCallback_head)(11, 'SetSampleCallback', ((1, 'dwStreamSinkIndex'),(1, 'pCallback'),)))
    IMFCapturePreviewSink.GetMirrorState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(12, 'GetMirrorState', ((1, 'pfMirrorState'),)))
    IMFCapturePreviewSink.SetMirrorState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL)(13, 'SetMirrorState', ((1, 'fMirrorState'),)))
    IMFCapturePreviewSink.GetRotation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32))(14, 'GetRotation', ((1, 'dwStreamIndex'),(1, 'pdwRotationValue'),)))
    IMFCapturePreviewSink.SetRotation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32)(15, 'SetRotation', ((1, 'dwStreamIndex'),(1, 'dwRotationValue'),)))
    IMFCapturePreviewSink.SetCustomSink = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaSink_head)(16, 'SetCustomSink', ((1, 'pMediaSink'),)))
    win32more.Media.MediaFoundation.IMFCaptureSink
    return IMFCapturePreviewSink
def _define_IMFCaptureRecordSink_head():
    class IMFCaptureRecordSink(win32more.Media.MediaFoundation.IMFCaptureSink_head):
        Guid = Guid('3323b55a-f92a-4fe2-8e-dc-e9-bf-c0-63-4d-77')
    return IMFCaptureRecordSink
def _define_IMFCaptureRecordSink():
    IMFCaptureRecordSink = win32more.Media.MediaFoundation.IMFCaptureRecordSink_head
    IMFCaptureRecordSink.SetOutputByteStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,POINTER(Guid))(8, 'SetOutputByteStream', ((1, 'pByteStream'),(1, 'guidContainerType'),)))
    IMFCaptureRecordSink.SetOutputFileName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR)(9, 'SetOutputFileName', ((1, 'fileName'),)))
    IMFCaptureRecordSink.SetSampleCallback = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFCaptureEngineOnSampleCallback_head)(10, 'SetSampleCallback', ((1, 'dwStreamSinkIndex'),(1, 'pCallback'),)))
    IMFCaptureRecordSink.SetCustomSink = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaSink_head)(11, 'SetCustomSink', ((1, 'pMediaSink'),)))
    IMFCaptureRecordSink.GetRotation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32))(12, 'GetRotation', ((1, 'dwStreamIndex'),(1, 'pdwRotationValue'),)))
    IMFCaptureRecordSink.SetRotation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32)(13, 'SetRotation', ((1, 'dwStreamIndex'),(1, 'dwRotationValue'),)))
    win32more.Media.MediaFoundation.IMFCaptureSink
    return IMFCaptureRecordSink
def _define_IMFCaptureSink_head():
    class IMFCaptureSink(win32more.System.Com.IUnknown_head):
        Guid = Guid('72d6135b-35e9-412c-b9-26-fd-52-65-f2-a8-85')
    return IMFCaptureSink
def _define_IMFCaptureSink():
    IMFCaptureSink = win32more.Media.MediaFoundation.IMFCaptureSink_head
    IMFCaptureSink.GetOutputMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(3, 'GetOutputMediaType', ((1, 'dwSinkStreamIndex'),(1, 'ppMediaType'),)))
    IMFCaptureSink.GetService = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),POINTER(Guid),POINTER(win32more.System.Com.IUnknown_head))(4, 'GetService', ((1, 'dwSinkStreamIndex'),(1, 'rguidService'),(1, 'riid'),(1, 'ppUnknown'),)))
    IMFCaptureSink.AddStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(UInt32))(5, 'AddStream', ((1, 'dwSourceStreamIndex'),(1, 'pMediaType'),(1, 'pAttributes'),(1, 'pdwSinkStreamIndex'),)))
    IMFCaptureSink.Prepare = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(6, 'Prepare', ()))
    IMFCaptureSink.RemoveAllStreams = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(7, 'RemoveAllStreams', ()))
    win32more.System.Com.IUnknown
    return IMFCaptureSink
def _define_IMFCaptureSink2_head():
    class IMFCaptureSink2(win32more.Media.MediaFoundation.IMFCaptureSink_head):
        Guid = Guid('f9e4219e-6197-4b5e-b8-88-be-e3-10-ab-2c-59')
    return IMFCaptureSink2
def _define_IMFCaptureSink2():
    IMFCaptureSink2 = win32more.Media.MediaFoundation.IMFCaptureSink2_head
    IMFCaptureSink2.SetOutputMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.Media.MediaFoundation.IMFAttributes_head)(8, 'SetOutputMediaType', ((1, 'dwStreamIndex'),(1, 'pMediaType'),(1, 'pEncodingAttributes'),)))
    win32more.Media.MediaFoundation.IMFCaptureSink
    return IMFCaptureSink2
def _define_IMFCaptureSource_head():
    class IMFCaptureSource(win32more.System.Com.IUnknown_head):
        Guid = Guid('439a42a8-0d2c-4505-be-83-f7-9b-2a-05-d5-c4')
    return IMFCaptureSource
def _define_IMFCaptureSource():
    IMFCaptureSource = win32more.Media.MediaFoundation.IMFCaptureSource_head
    IMFCaptureSource.GetCaptureDeviceSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_CAPTURE_ENGINE_DEVICE_TYPE,POINTER(win32more.Media.MediaFoundation.IMFMediaSource_head))(3, 'GetCaptureDeviceSource', ((1, 'mfCaptureEngineDeviceType'),(1, 'ppMediaSource'),)))
    IMFCaptureSource.GetCaptureDeviceActivate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_CAPTURE_ENGINE_DEVICE_TYPE,POINTER(win32more.Media.MediaFoundation.IMFActivate_head))(4, 'GetCaptureDeviceActivate', ((1, 'mfCaptureEngineDeviceType'),(1, 'ppActivate'),)))
    IMFCaptureSource.GetService = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Guid),POINTER(win32more.System.Com.IUnknown_head))(5, 'GetService', ((1, 'rguidService'),(1, 'riid'),(1, 'ppUnknown'),)))
    IMFCaptureSource.AddEffect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.System.Com.IUnknown_head)(6, 'AddEffect', ((1, 'dwSourceStreamIndex'),(1, 'pUnknown'),)))
    IMFCaptureSource.RemoveEffect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.System.Com.IUnknown_head)(7, 'RemoveEffect', ((1, 'dwSourceStreamIndex'),(1, 'pUnknown'),)))
    IMFCaptureSource.RemoveAllEffects = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(8, 'RemoveAllEffects', ((1, 'dwSourceStreamIndex'),)))
    IMFCaptureSource.GetAvailableDeviceMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(9, 'GetAvailableDeviceMediaType', ((1, 'dwSourceStreamIndex'),(1, 'dwMediaTypeIndex'),(1, 'ppMediaType'),)))
    IMFCaptureSource.SetCurrentDeviceMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head)(10, 'SetCurrentDeviceMediaType', ((1, 'dwSourceStreamIndex'),(1, 'pMediaType'),)))
    IMFCaptureSource.GetCurrentDeviceMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(11, 'GetCurrentDeviceMediaType', ((1, 'dwSourceStreamIndex'),(1, 'ppMediaType'),)))
    IMFCaptureSource.GetDeviceStreamCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(12, 'GetDeviceStreamCount', ((1, 'pdwStreamCount'),)))
    IMFCaptureSource.GetDeviceStreamCategory = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.MF_CAPTURE_ENGINE_STREAM_CATEGORY))(13, 'GetDeviceStreamCategory', ((1, 'dwSourceStreamIndex'),(1, 'pStreamCategory'),)))
    IMFCaptureSource.GetMirrorState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Foundation.BOOL))(14, 'GetMirrorState', ((1, 'dwStreamIndex'),(1, 'pfMirrorState'),)))
    IMFCaptureSource.SetMirrorState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.BOOL)(15, 'SetMirrorState', ((1, 'dwStreamIndex'),(1, 'fMirrorState'),)))
    IMFCaptureSource.GetStreamIndexFromFriendlyName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32))(16, 'GetStreamIndexFromFriendlyName', ((1, 'uifriendlyName'),(1, 'pdwActualStreamIndex'),)))
    win32more.System.Com.IUnknown
    return IMFCaptureSource
def _define_IMFCdmSuspendNotify_head():
    class IMFCdmSuspendNotify(win32more.System.Com.IUnknown_head):
        Guid = Guid('7a5645d2-43bd-47fd-87-b7-dc-d2-4c-c7-d6-92')
    return IMFCdmSuspendNotify
def _define_IMFCdmSuspendNotify():
    IMFCdmSuspendNotify = win32more.Media.MediaFoundation.IMFCdmSuspendNotify_head
    IMFCdmSuspendNotify.Begin = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(3, 'Begin', ()))
    IMFCdmSuspendNotify.End = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(4, 'End', ()))
    win32more.System.Com.IUnknown
    return IMFCdmSuspendNotify
def _define_IMFClock_head():
    class IMFClock(win32more.System.Com.IUnknown_head):
        Guid = Guid('2eb1e945-18b8-4139-9b-1a-d5-d5-84-81-85-30')
    return IMFClock
def _define_IMFClock():
    IMFClock = win32more.Media.MediaFoundation.IMFClock_head
    IMFClock.GetClockCharacteristics = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'GetClockCharacteristics', ((1, 'pdwCharacteristics'),)))
    IMFClock.GetCorrelatedTime = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Int64),POINTER(Int64))(4, 'GetCorrelatedTime', ((1, 'dwReserved'),(1, 'pllClockTime'),(1, 'phnsSystemTime'),)))
    IMFClock.GetContinuityKey = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(5, 'GetContinuityKey', ((1, 'pdwContinuityKey'),)))
    IMFClock.GetState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.MFCLOCK_STATE))(6, 'GetState', ((1, 'dwReserved'),(1, 'peClockState'),)))
    IMFClock.GetProperties = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFCLOCK_PROPERTIES_head))(7, 'GetProperties', ((1, 'pClockProperties'),)))
    win32more.System.Com.IUnknown
    return IMFClock
def _define_IMFClockConsumer_head():
    class IMFClockConsumer(win32more.System.Com.IUnknown_head):
        Guid = Guid('6ef2a662-47c0-4666-b1-3d-cb-b7-17-f2-fa-2c')
    return IMFClockConsumer
def _define_IMFClockConsumer():
    IMFClockConsumer = win32more.Media.MediaFoundation.IMFClockConsumer_head
    IMFClockConsumer.SetPresentationClock = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationClock_head)(3, 'SetPresentationClock', ((1, 'pPresentationClock'),)))
    IMFClockConsumer.GetPresentationClock = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFPresentationClock_head))(4, 'GetPresentationClock', ((1, 'ppPresentationClock'),)))
    win32more.System.Com.IUnknown
    return IMFClockConsumer
def _define_IMFClockStateSink_head():
    class IMFClockStateSink(win32more.System.Com.IUnknown_head):
        Guid = Guid('f6696e82-74f7-4f3d-a1-78-8a-5e-09-c3-65-9f')
    return IMFClockStateSink
def _define_IMFClockStateSink():
    IMFClockStateSink = win32more.Media.MediaFoundation.IMFClockStateSink_head
    IMFClockStateSink.OnClockStart = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int64,Int64)(3, 'OnClockStart', ((1, 'hnsSystemTime'),(1, 'llClockStartOffset'),)))
    IMFClockStateSink.OnClockStop = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int64)(4, 'OnClockStop', ((1, 'hnsSystemTime'),)))
    IMFClockStateSink.OnClockPause = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int64)(5, 'OnClockPause', ((1, 'hnsSystemTime'),)))
    IMFClockStateSink.OnClockRestart = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int64)(6, 'OnClockRestart', ((1, 'hnsSystemTime'),)))
    IMFClockStateSink.OnClockSetRate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int64,Single)(7, 'OnClockSetRate', ((1, 'hnsSystemTime'),(1, 'flRate'),)))
    win32more.System.Com.IUnknown
    return IMFClockStateSink
def _define_IMFCollection_head():
    class IMFCollection(win32more.System.Com.IUnknown_head):
        Guid = Guid('5bc8a76b-869a-46a3-9b-03-fa-21-8a-66-ae-be')
    return IMFCollection
def _define_IMFCollection():
    IMFCollection = win32more.Media.MediaFoundation.IMFCollection_head
    IMFCollection.GetElementCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'GetElementCount', ((1, 'pcElements'),)))
    IMFCollection.GetElement = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.System.Com.IUnknown_head))(4, 'GetElement', ((1, 'dwElementIndex'),(1, 'ppUnkElement'),)))
    IMFCollection.AddElement = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head)(5, 'AddElement', ((1, 'pUnkElement'),)))
    IMFCollection.RemoveElement = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.System.Com.IUnknown_head))(6, 'RemoveElement', ((1, 'dwElementIndex'),(1, 'ppUnkElement'),)))
    IMFCollection.InsertElementAt = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.System.Com.IUnknown_head)(7, 'InsertElementAt', ((1, 'dwIndex'),(1, 'pUnknown'),)))
    IMFCollection.RemoveAllElements = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(8, 'RemoveAllElements', ()))
    win32more.System.Com.IUnknown
    return IMFCollection
def _define_IMFContentDecryptionModule_head():
    class IMFContentDecryptionModule(win32more.System.Com.IUnknown_head):
        Guid = Guid('87be986c-10be-4943-bf-48-4b-54-ce-19-83-a2')
    return IMFContentDecryptionModule
def _define_IMFContentDecryptionModule():
    IMFContentDecryptionModule = win32more.Media.MediaFoundation.IMFContentDecryptionModule_head
    IMFContentDecryptionModule.SetContentEnabler = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFContentEnabler_head,win32more.Media.MediaFoundation.IMFAsyncResult_head)(3, 'SetContentEnabler', ((1, 'contentEnabler'),(1, 'result'),)))
    IMFContentDecryptionModule.GetSuspendNotify = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFCdmSuspendNotify_head))(4, 'GetSuspendNotify', ((1, 'notify'),)))
    IMFContentDecryptionModule.SetPMPHostApp = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPMPHostApp_head)(5, 'SetPMPHostApp', ((1, 'pmpHostApp'),)))
    IMFContentDecryptionModule.CreateSession = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_MEDIAKEYSESSION_TYPE,win32more.Media.MediaFoundation.IMFContentDecryptionModuleSessionCallbacks_head,POINTER(win32more.Media.MediaFoundation.IMFContentDecryptionModuleSession_head))(6, 'CreateSession', ((1, 'sessionType'),(1, 'callbacks'),(1, 'session'),)))
    IMFContentDecryptionModule.SetServerCertificate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32)(7, 'SetServerCertificate', ((1, 'certificate'),(1, 'certificateSize'),)))
    IMFContentDecryptionModule.CreateTrustedInput = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32,POINTER(win32more.Media.MediaFoundation.IMFTrustedInput_head))(8, 'CreateTrustedInput', ((1, 'contentInitData'),(1, 'contentInitDataSize'),(1, 'trustedInput'),)))
    IMFContentDecryptionModule.GetProtectionSystemIds = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(POINTER(Guid)),POINTER(UInt32))(9, 'GetProtectionSystemIds', ((1, 'systemIds'),(1, 'count'),)))
    win32more.System.Com.IUnknown
    return IMFContentDecryptionModule
def _define_IMFContentDecryptionModuleAccess_head():
    class IMFContentDecryptionModuleAccess(win32more.System.Com.IUnknown_head):
        Guid = Guid('a853d1f4-e2a0-4303-9e-dc-f1-a6-8e-e4-31-36')
    return IMFContentDecryptionModuleAccess
def _define_IMFContentDecryptionModuleAccess():
    IMFContentDecryptionModuleAccess = win32more.Media.MediaFoundation.IMFContentDecryptionModuleAccess_head
    IMFContentDecryptionModuleAccess.CreateContentDecryptionModule = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.UI.Shell.PropertiesSystem.IPropertyStore_head,POINTER(win32more.Media.MediaFoundation.IMFContentDecryptionModule_head))(3, 'CreateContentDecryptionModule', ((1, 'contentDecryptionModuleProperties'),(1, 'contentDecryptionModule'),)))
    IMFContentDecryptionModuleAccess.GetConfiguration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.UI.Shell.PropertiesSystem.IPropertyStore_head))(4, 'GetConfiguration', ((1, 'configuration'),)))
    IMFContentDecryptionModuleAccess.GetKeySystem = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(5, 'GetKeySystem', ((1, 'keySystem'),)))
    win32more.System.Com.IUnknown
    return IMFContentDecryptionModuleAccess
def _define_IMFContentDecryptionModuleFactory_head():
    class IMFContentDecryptionModuleFactory(win32more.System.Com.IUnknown_head):
        Guid = Guid('7d5abf16-4cbb-4e08-b9-77-9b-a5-90-49-94-3e')
    return IMFContentDecryptionModuleFactory
def _define_IMFContentDecryptionModuleFactory():
    IMFContentDecryptionModuleFactory = win32more.Media.MediaFoundation.IMFContentDecryptionModuleFactory_head
    IMFContentDecryptionModuleFactory.IsTypeSupported = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR)(3, 'IsTypeSupported', ((1, 'keySystem'),(1, 'contentType'),)))
    IMFContentDecryptionModuleFactory.CreateContentDecryptionModuleAccess = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.UI.Shell.PropertiesSystem.IPropertyStore_head),UInt32,POINTER(win32more.Media.MediaFoundation.IMFContentDecryptionModuleAccess_head))(4, 'CreateContentDecryptionModuleAccess', ((1, 'keySystem'),(1, 'configurations'),(1, 'numConfigurations'),(1, 'contentDecryptionModuleAccess'),)))
    win32more.System.Com.IUnknown
    return IMFContentDecryptionModuleFactory
def _define_IMFContentDecryptionModuleSession_head():
    class IMFContentDecryptionModuleSession(win32more.System.Com.IUnknown_head):
        Guid = Guid('4e233efd-1dd2-49e8-b5-77-d6-3e-ee-4c-0d-33')
    return IMFContentDecryptionModuleSession
def _define_IMFContentDecryptionModuleSession():
    IMFContentDecryptionModuleSession = win32more.Media.MediaFoundation.IMFContentDecryptionModuleSession_head
    IMFContentDecryptionModuleSession.GetSessionId = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(3, 'GetSessionId', ((1, 'sessionId'),)))
    IMFContentDecryptionModuleSession.GetExpiration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Double))(4, 'GetExpiration', ((1, 'expiration'),)))
    IMFContentDecryptionModuleSession.GetKeyStatuses = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(POINTER(win32more.Media.MediaFoundation.MFMediaKeyStatus_head)),POINTER(UInt32))(5, 'GetKeyStatuses', ((1, 'keyStatuses'),(1, 'numKeyStatuses'),)))
    IMFContentDecryptionModuleSession.Load = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Foundation.BOOL))(6, 'Load', ((1, 'sessionId'),(1, 'loaded'),)))
    IMFContentDecryptionModuleSession.GenerateRequest = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,c_char_p_no,UInt32)(7, 'GenerateRequest', ((1, 'initDataType'),(1, 'initData'),(1, 'initDataSize'),)))
    IMFContentDecryptionModuleSession.Update = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32)(8, 'Update', ((1, 'response'),(1, 'responseSize'),)))
    IMFContentDecryptionModuleSession.Close = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(9, 'Close', ()))
    IMFContentDecryptionModuleSession.Remove = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(10, 'Remove', ()))
    win32more.System.Com.IUnknown
    return IMFContentDecryptionModuleSession
def _define_IMFContentDecryptionModuleSessionCallbacks_head():
    class IMFContentDecryptionModuleSessionCallbacks(win32more.System.Com.IUnknown_head):
        Guid = Guid('3f96ee40-ad81-4096-84-70-59-a4-b7-70-f8-9a')
    return IMFContentDecryptionModuleSessionCallbacks
def _define_IMFContentDecryptionModuleSessionCallbacks():
    IMFContentDecryptionModuleSessionCallbacks = win32more.Media.MediaFoundation.IMFContentDecryptionModuleSessionCallbacks_head
    IMFContentDecryptionModuleSessionCallbacks.KeyMessage = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_MEDIAKEYSESSION_MESSAGETYPE,c_char_p_no,UInt32,win32more.Foundation.PWSTR)(3, 'KeyMessage', ((1, 'messageType'),(1, 'message'),(1, 'messageSize'),(1, 'destinationURL'),)))
    IMFContentDecryptionModuleSessionCallbacks.KeyStatusChanged = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(4, 'KeyStatusChanged', ()))
    win32more.System.Com.IUnknown
    return IMFContentDecryptionModuleSessionCallbacks
def _define_IMFContentDecryptorContext_head():
    class IMFContentDecryptorContext(win32more.System.Com.IUnknown_head):
        Guid = Guid('7ec4b1bd-43fb-4763-85-d2-64-fc-b5-c5-f4-cb')
    return IMFContentDecryptorContext
def _define_IMFContentDecryptorContext():
    IMFContentDecryptorContext = win32more.Media.MediaFoundation.IMFContentDecryptorContext_head
    IMFContentDecryptorContext.InitializeHardwareKey = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_void_p,POINTER(UInt64))(3, 'InitializeHardwareKey', ((1, 'InputPrivateDataByteCount'),(1, 'InputPrivateData'),(1, 'OutputPrivateData'),)))
    win32more.System.Com.IUnknown
    return IMFContentDecryptorContext
def _define_IMFContentEnabler_head():
    class IMFContentEnabler(win32more.System.Com.IUnknown_head):
        Guid = Guid('d3c4ef59-49ce-4381-90-71-d5-bc-d0-44-c7-70')
    return IMFContentEnabler
def _define_IMFContentEnabler():
    IMFContentEnabler = win32more.Media.MediaFoundation.IMFContentEnabler_head
    IMFContentEnabler.GetEnableType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid))(3, 'GetEnableType', ((1, 'pType'),)))
    IMFContentEnabler.GetEnableURL = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR),POINTER(UInt32),POINTER(win32more.Media.MediaFoundation.MF_URL_TRUST_STATUS))(4, 'GetEnableURL', ((1, 'ppwszURL'),(1, 'pcchURL'),(1, 'pTrustStatus'),)))
    IMFContentEnabler.GetEnableData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(c_char_p_no),POINTER(UInt32))(5, 'GetEnableData', ((1, 'ppbData'),(1, 'pcbData'),)))
    IMFContentEnabler.IsAutomaticSupported = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(6, 'IsAutomaticSupported', ((1, 'pfAutomatic'),)))
    IMFContentEnabler.AutomaticEnable = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(7, 'AutomaticEnable', ()))
    IMFContentEnabler.MonitorEnable = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(8, 'MonitorEnable', ()))
    IMFContentEnabler.Cancel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(9, 'Cancel', ()))
    win32more.System.Com.IUnknown
    return IMFContentEnabler
def _define_IMFContentProtectionDevice_head():
    class IMFContentProtectionDevice(win32more.System.Com.IUnknown_head):
        Guid = Guid('e6257174-a060-4c9a-a0-88-3b-1b-47-1c-ad-28')
    return IMFContentProtectionDevice
def _define_IMFContentProtectionDevice():
    IMFContentProtectionDevice = win32more.Media.MediaFoundation.IMFContentProtectionDevice_head
    IMFContentProtectionDevice.InvokeFunction = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,c_char_p_no,POINTER(UInt32),c_char_p_no)(3, 'InvokeFunction', ((1, 'FunctionId'),(1, 'InputBufferByteCount'),(1, 'InputBuffer'),(1, 'OutputBufferByteCount'),(1, 'OutputBuffer'),)))
    IMFContentProtectionDevice.GetPrivateDataByteCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(UInt32))(4, 'GetPrivateDataByteCount', ((1, 'PrivateInputByteCount'),(1, 'PrivateOutputByteCount'),)))
    win32more.System.Com.IUnknown
    return IMFContentProtectionDevice
def _define_IMFContentProtectionManager_head():
    class IMFContentProtectionManager(win32more.System.Com.IUnknown_head):
        Guid = Guid('acf92459-6a61-42bd-b5-7c-b4-3e-51-20-3c-b0')
    return IMFContentProtectionManager
def _define_IMFContentProtectionManager():
    IMFContentProtectionManager = win32more.Media.MediaFoundation.IMFContentProtectionManager_head
    IMFContentProtectionManager.BeginEnableContent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFActivate_head,win32more.Media.MediaFoundation.IMFTopology_head,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(3, 'BeginEnableContent', ((1, 'pEnablerActivate'),(1, 'pTopo'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFContentProtectionManager.EndEnableContent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head)(4, 'EndEnableContent', ((1, 'pResult'),)))
    win32more.System.Com.IUnknown
    return IMFContentProtectionManager
def _define_IMFD3D12SynchronizationObject_head():
    class IMFD3D12SynchronizationObject(win32more.System.Com.IUnknown_head):
        Guid = Guid('802302b0-82de-45e1-b4-21-f1-9e-e5-bd-af-23')
    return IMFD3D12SynchronizationObject
def _define_IMFD3D12SynchronizationObject():
    IMFD3D12SynchronizationObject = win32more.Media.MediaFoundation.IMFD3D12SynchronizationObject_head
    IMFD3D12SynchronizationObject.SignalEventOnFinalResourceRelease = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE)(3, 'SignalEventOnFinalResourceRelease', ((1, 'hEvent'),)))
    IMFD3D12SynchronizationObject.Reset = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(4, 'Reset', ()))
    win32more.System.Com.IUnknown
    return IMFD3D12SynchronizationObject
def _define_IMFD3D12SynchronizationObjectCommands_head():
    class IMFD3D12SynchronizationObjectCommands(win32more.System.Com.IUnknown_head):
        Guid = Guid('09d0f835-92ff-4e53-8e-fa-40-fa-a5-51-f2-33')
    return IMFD3D12SynchronizationObjectCommands
def _define_IMFD3D12SynchronizationObjectCommands():
    IMFD3D12SynchronizationObjectCommands = win32more.Media.MediaFoundation.IMFD3D12SynchronizationObjectCommands_head
    IMFD3D12SynchronizationObjectCommands.EnqueueResourceReady = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D12.ID3D12CommandQueue_head)(3, 'EnqueueResourceReady', ((1, 'pProducerCommandQueue'),)))
    IMFD3D12SynchronizationObjectCommands.EnqueueResourceReadyWait = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D12.ID3D12CommandQueue_head)(4, 'EnqueueResourceReadyWait', ((1, 'pConsumerCommandQueue'),)))
    IMFD3D12SynchronizationObjectCommands.SignalEventOnResourceReady = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE)(5, 'SignalEventOnResourceReady', ((1, 'hEvent'),)))
    IMFD3D12SynchronizationObjectCommands.EnqueueResourceRelease = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D12.ID3D12CommandQueue_head)(6, 'EnqueueResourceRelease', ((1, 'pConsumerCommandQueue'),)))
    win32more.System.Com.IUnknown
    return IMFD3D12SynchronizationObjectCommands
def _define_IMFDesiredSample_head():
    class IMFDesiredSample(win32more.System.Com.IUnknown_head):
        Guid = Guid('56c294d0-753e-4260-8d-61-a3-d8-82-0b-1d-54')
    return IMFDesiredSample
def _define_IMFDesiredSample():
    IMFDesiredSample = win32more.Media.MediaFoundation.IMFDesiredSample_head
    IMFDesiredSample.GetDesiredSampleTimeAndDuration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int64),POINTER(Int64))(3, 'GetDesiredSampleTimeAndDuration', ((1, 'phnsSampleTime'),(1, 'phnsSampleDuration'),)))
    IMFDesiredSample.SetDesiredSampleTimeAndDuration = COMMETHOD(WINFUNCTYPE(Void,Int64,Int64)(4, 'SetDesiredSampleTimeAndDuration', ((1, 'hnsSampleTime'),(1, 'hnsSampleDuration'),)))
    IMFDesiredSample.Clear = COMMETHOD(WINFUNCTYPE(Void,)(5, 'Clear', ()))
    win32more.System.Com.IUnknown
    return IMFDesiredSample
def _define_IMFDeviceTransform_head():
    class IMFDeviceTransform(win32more.System.Com.IUnknown_head):
        Guid = Guid('d818fbd8-fc46-42f2-87-ac-1e-a2-d1-f9-bf-32')
    return IMFDeviceTransform
def _define_IMFDeviceTransform():
    IMFDeviceTransform = win32more.Media.MediaFoundation.IMFDeviceTransform_head
    IMFDeviceTransform.InitializeTransform = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head)(3, 'InitializeTransform', ((1, 'pAttributes'),)))
    IMFDeviceTransform.GetInputAvailableType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(4, 'GetInputAvailableType', ((1, 'dwInputStreamID'),(1, 'dwTypeIndex'),(1, 'pMediaType'),)))
    IMFDeviceTransform.GetInputCurrentType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(5, 'GetInputCurrentType', ((1, 'dwInputStreamID'),(1, 'pMediaType'),)))
    IMFDeviceTransform.GetInputStreamAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head))(6, 'GetInputStreamAttributes', ((1, 'dwInputStreamID'),(1, 'ppAttributes'),)))
    IMFDeviceTransform.GetOutputAvailableType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(7, 'GetOutputAvailableType', ((1, 'dwOutputStreamID'),(1, 'dwTypeIndex'),(1, 'pMediaType'),)))
    IMFDeviceTransform.GetOutputCurrentType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(8, 'GetOutputCurrentType', ((1, 'dwOutputStreamID'),(1, 'pMediaType'),)))
    IMFDeviceTransform.GetOutputStreamAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head))(9, 'GetOutputStreamAttributes', ((1, 'dwOutputStreamID'),(1, 'ppAttributes'),)))
    IMFDeviceTransform.GetStreamCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(UInt32))(10, 'GetStreamCount', ((1, 'pcInputStreams'),(1, 'pcOutputStreams'),)))
    IMFDeviceTransform.GetStreamIDs = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32),UInt32,POINTER(UInt32))(11, 'GetStreamIDs', ((1, 'dwInputIDArraySize'),(1, 'pdwInputStreamIds'),(1, 'dwOutputIDArraySize'),(1, 'pdwOutputStreamIds'),)))
    IMFDeviceTransform.ProcessEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaEvent_head)(12, 'ProcessEvent', ((1, 'dwInputStreamID'),(1, 'pEvent'),)))
    IMFDeviceTransform.ProcessInput = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFSample_head,UInt32)(13, 'ProcessInput', ((1, 'dwInputStreamID'),(1, 'pSample'),(1, 'dwFlags'),)))
    IMFDeviceTransform.ProcessMessage = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFT_MESSAGE_TYPE,UIntPtr)(14, 'ProcessMessage', ((1, 'eMessage'),(1, 'ulParam'),)))
    IMFDeviceTransform.ProcessOutput = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.MFT_OUTPUT_DATA_BUFFER_head),POINTER(UInt32))(15, 'ProcessOutput', ((1, 'dwFlags'),(1, 'cOutputBufferCount'),(1, 'pOutputSample'),(1, 'pdwStatus'),)))
    IMFDeviceTransform.SetInputStreamState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.Media.MediaFoundation.DeviceStreamState,UInt32)(16, 'SetInputStreamState', ((1, 'dwStreamID'),(1, 'pMediaType'),(1, 'value'),(1, 'dwFlags'),)))
    IMFDeviceTransform.GetInputStreamState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.DeviceStreamState))(17, 'GetInputStreamState', ((1, 'dwStreamID'),(1, 'value'),)))
    IMFDeviceTransform.SetOutputStreamState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.Media.MediaFoundation.DeviceStreamState,UInt32)(18, 'SetOutputStreamState', ((1, 'dwStreamID'),(1, 'pMediaType'),(1, 'value'),(1, 'dwFlags'),)))
    IMFDeviceTransform.GetOutputStreamState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.DeviceStreamState))(19, 'GetOutputStreamState', ((1, 'dwStreamID'),(1, 'value'),)))
    IMFDeviceTransform.GetInputStreamPreferredState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.DeviceStreamState),POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(20, 'GetInputStreamPreferredState', ((1, 'dwStreamID'),(1, 'value'),(1, 'ppMediaType'),)))
    IMFDeviceTransform.FlushInputStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32)(21, 'FlushInputStream', ((1, 'dwStreamIndex'),(1, 'dwFlags'),)))
    IMFDeviceTransform.FlushOutputStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32)(22, 'FlushOutputStream', ((1, 'dwStreamIndex'),(1, 'dwFlags'),)))
    win32more.System.Com.IUnknown
    return IMFDeviceTransform
def _define_IMFDeviceTransformCallback_head():
    class IMFDeviceTransformCallback(win32more.System.Com.IUnknown_head):
        Guid = Guid('6d5cb646-29ec-41fb-81-79-8c-4c-6d-75-08-11')
    return IMFDeviceTransformCallback
def _define_IMFDeviceTransformCallback():
    IMFDeviceTransformCallback = win32more.Media.MediaFoundation.IMFDeviceTransformCallback_head
    IMFDeviceTransformCallback.OnBufferSent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head,UInt32)(3, 'OnBufferSent', ((1, 'pCallbackAttributes'),(1, 'pinId'),)))
    win32more.System.Com.IUnknown
    return IMFDeviceTransformCallback
def _define_IMFDLNASinkInit_head():
    class IMFDLNASinkInit(win32more.System.Com.IUnknown_head):
        Guid = Guid('0c012799-1b61-4c10-bd-a9-04-44-5b-e5-f5-61')
    return IMFDLNASinkInit
def _define_IMFDLNASinkInit():
    IMFDLNASinkInit = win32more.Media.MediaFoundation.IMFDLNASinkInit_head
    IMFDLNASinkInit.Initialize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Foundation.BOOL)(3, 'Initialize', ((1, 'pByteStream'),(1, 'fPal'),)))
    win32more.System.Com.IUnknown
    return IMFDLNASinkInit
def _define_IMFDRMNetHelper_head():
    class IMFDRMNetHelper(win32more.System.Com.IUnknown_head):
        Guid = Guid('3d1ff0ea-679a-4190-8d-46-7f-a6-9e-8c-7e-15')
    return IMFDRMNetHelper
def _define_IMFDRMNetHelper():
    IMFDRMNetHelper = win32more.Media.MediaFoundation.IMFDRMNetHelper_head
    IMFDRMNetHelper.ProcessLicenseRequest = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32,POINTER(c_char_p_no),POINTER(UInt32),POINTER(win32more.Foundation.BSTR))(3, 'ProcessLicenseRequest', ((1, 'pLicenseRequest'),(1, 'cbLicenseRequest'),(1, 'ppLicenseResponse'),(1, 'pcbLicenseResponse'),(1, 'pbstrKID'),)))
    IMFDRMNetHelper.GetChainedLicenseResponse = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(c_char_p_no),POINTER(UInt32))(4, 'GetChainedLicenseResponse', ((1, 'ppLicenseResponse'),(1, 'pcbLicenseResponse'),)))
    win32more.System.Com.IUnknown
    return IMFDRMNetHelper
def _define_IMFDXGIBuffer_head():
    class IMFDXGIBuffer(win32more.System.Com.IUnknown_head):
        Guid = Guid('e7174cfa-1c9e-48b1-88-66-62-62-26-bf-c2-58')
    return IMFDXGIBuffer
def _define_IMFDXGIBuffer():
    IMFDXGIBuffer = win32more.Media.MediaFoundation.IMFDXGIBuffer_head
    IMFDXGIBuffer.GetResource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p))(3, 'GetResource', ((1, 'riid'),(1, 'ppvObject'),)))
    IMFDXGIBuffer.GetSubresourceIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(4, 'GetSubresourceIndex', ((1, 'puSubresource'),)))
    IMFDXGIBuffer.GetUnknown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Guid),POINTER(c_void_p))(5, 'GetUnknown', ((1, 'guid'),(1, 'riid'),(1, 'ppvObject'),)))
    IMFDXGIBuffer.SetUnknown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),win32more.System.Com.IUnknown_head)(6, 'SetUnknown', ((1, 'guid'),(1, 'pUnkData'),)))
    win32more.System.Com.IUnknown
    return IMFDXGIBuffer
def _define_IMFDXGIDeviceManager_head():
    class IMFDXGIDeviceManager(win32more.System.Com.IUnknown_head):
        Guid = Guid('eb533d5d-2db6-40f8-97-a9-49-46-92-01-4f-07')
    return IMFDXGIDeviceManager
def _define_IMFDXGIDeviceManager():
    IMFDXGIDeviceManager = win32more.Media.MediaFoundation.IMFDXGIDeviceManager_head
    IMFDXGIDeviceManager.CloseDeviceHandle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE)(3, 'CloseDeviceHandle', ((1, 'hDevice'),)))
    IMFDXGIDeviceManager.GetVideoService = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,POINTER(Guid),POINTER(c_void_p))(4, 'GetVideoService', ((1, 'hDevice'),(1, 'riid'),(1, 'ppService'),)))
    IMFDXGIDeviceManager.LockDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,POINTER(Guid),POINTER(c_void_p),win32more.Foundation.BOOL)(5, 'LockDevice', ((1, 'hDevice'),(1, 'riid'),(1, 'ppUnkDevice'),(1, 'fBlock'),)))
    IMFDXGIDeviceManager.OpenDeviceHandle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.HANDLE))(6, 'OpenDeviceHandle', ((1, 'phDevice'),)))
    IMFDXGIDeviceManager.ResetDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,UInt32)(7, 'ResetDevice', ((1, 'pUnkDevice'),(1, 'resetToken'),)))
    IMFDXGIDeviceManager.TestDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE)(8, 'TestDevice', ((1, 'hDevice'),)))
    IMFDXGIDeviceManager.UnlockDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,win32more.Foundation.BOOL)(9, 'UnlockDevice', ((1, 'hDevice'),(1, 'fSaveState'),)))
    win32more.System.Com.IUnknown
    return IMFDXGIDeviceManager
def _define_IMFDXGIDeviceManagerSource_head():
    class IMFDXGIDeviceManagerSource(win32more.System.Com.IUnknown_head):
        Guid = Guid('20bc074b-7a8d-4609-8c-3b-64-a0-a3-b5-d7-ce')
    return IMFDXGIDeviceManagerSource
def _define_IMFDXGIDeviceManagerSource():
    IMFDXGIDeviceManagerSource = win32more.Media.MediaFoundation.IMFDXGIDeviceManagerSource_head
    IMFDXGIDeviceManagerSource.GetManager = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFDXGIDeviceManager_head))(3, 'GetManager', ((1, 'ppManager'),)))
    win32more.System.Com.IUnknown
    return IMFDXGIDeviceManagerSource
def _define_IMFExtendedCameraControl_head():
    class IMFExtendedCameraControl(win32more.System.Com.IUnknown_head):
        Guid = Guid('38e33520-fca1-4845-a2-7a-68-b7-c6-ab-37-89')
    return IMFExtendedCameraControl
def _define_IMFExtendedCameraControl():
    IMFExtendedCameraControl = win32more.Media.MediaFoundation.IMFExtendedCameraControl_head
    IMFExtendedCameraControl.GetCapabilities = COMMETHOD(WINFUNCTYPE(UInt64,)(3, 'GetCapabilities', ()))
    IMFExtendedCameraControl.SetFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64)(4, 'SetFlags', ((1, 'ulFlags'),)))
    IMFExtendedCameraControl.GetFlags = COMMETHOD(WINFUNCTYPE(UInt64,)(5, 'GetFlags', ()))
    IMFExtendedCameraControl.LockPayload = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(c_char_p_no),POINTER(UInt32))(6, 'LockPayload', ((1, 'ppPayload'),(1, 'pulPayload'),)))
    IMFExtendedCameraControl.UnlockPayload = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(7, 'UnlockPayload', ()))
    IMFExtendedCameraControl.CommitSettings = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(8, 'CommitSettings', ()))
    win32more.System.Com.IUnknown
    return IMFExtendedCameraControl
def _define_IMFExtendedCameraController_head():
    class IMFExtendedCameraController(win32more.System.Com.IUnknown_head):
        Guid = Guid('b91ebfee-ca03-4af4-8a-82-a3-17-52-f4-a0-fc')
    return IMFExtendedCameraController
def _define_IMFExtendedCameraController():
    IMFExtendedCameraController = win32more.Media.MediaFoundation.IMFExtendedCameraController_head
    IMFExtendedCameraController.GetExtendedCameraControl = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.IMFExtendedCameraControl_head))(3, 'GetExtendedCameraControl', ((1, 'dwStreamIndex'),(1, 'ulPropertyId'),(1, 'ppControl'),)))
    win32more.System.Com.IUnknown
    return IMFExtendedCameraController
def _define_IMFExtendedCameraIntrinsicModel_head():
    class IMFExtendedCameraIntrinsicModel(win32more.System.Com.IUnknown_head):
        Guid = Guid('5c595e64-4630-4231-85-5a-12-84-2f-73-32-45')
    return IMFExtendedCameraIntrinsicModel
def _define_IMFExtendedCameraIntrinsicModel():
    IMFExtendedCameraIntrinsicModel = win32more.Media.MediaFoundation.IMFExtendedCameraIntrinsicModel_head
    IMFExtendedCameraIntrinsicModel.GetModel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFExtendedCameraIntrinsic_IntrinsicModel_head))(3, 'GetModel', ((1, 'pIntrinsicModel'),)))
    IMFExtendedCameraIntrinsicModel.SetModel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFExtendedCameraIntrinsic_IntrinsicModel_head))(4, 'SetModel', ((1, 'pIntrinsicModel'),)))
    IMFExtendedCameraIntrinsicModel.GetDistortionModelType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFCameraIntrinsic_DistortionModelType))(5, 'GetDistortionModelType', ((1, 'pDistortionModelType'),)))
    win32more.System.Com.IUnknown
    return IMFExtendedCameraIntrinsicModel
def _define_IMFExtendedCameraIntrinsics_head():
    class IMFExtendedCameraIntrinsics(win32more.System.Com.IUnknown_head):
        Guid = Guid('687f6dac-6987-4750-a1-6a-73-4d-1e-7a-10-fe')
    return IMFExtendedCameraIntrinsics
def _define_IMFExtendedCameraIntrinsics():
    IMFExtendedCameraIntrinsics = win32more.Media.MediaFoundation.IMFExtendedCameraIntrinsics_head
    IMFExtendedCameraIntrinsics.InitializeFromBuffer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32)(3, 'InitializeFromBuffer', ((1, 'pbBuffer'),(1, 'dwBufferSize'),)))
    IMFExtendedCameraIntrinsics.GetBufferSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(4, 'GetBufferSize', ((1, 'pdwBufferSize'),)))
    IMFExtendedCameraIntrinsics.SerializeToBuffer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,POINTER(UInt32))(5, 'SerializeToBuffer', ((1, 'pbBuffer'),(1, 'pdwBufferSize'),)))
    IMFExtendedCameraIntrinsics.GetIntrinsicModelCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(6, 'GetIntrinsicModelCount', ((1, 'pdwCount'),)))
    IMFExtendedCameraIntrinsics.GetIntrinsicModelByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFExtendedCameraIntrinsicModel_head))(7, 'GetIntrinsicModelByIndex', ((1, 'dwIndex'),(1, 'ppIntrinsicModel'),)))
    IMFExtendedCameraIntrinsics.AddIntrinsicModel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFExtendedCameraIntrinsicModel_head)(8, 'AddIntrinsicModel', ((1, 'pIntrinsicModel'),)))
    win32more.System.Com.IUnknown
    return IMFExtendedCameraIntrinsics
def _define_IMFExtendedCameraIntrinsicsDistortionModel6KT_head():
    class IMFExtendedCameraIntrinsicsDistortionModel6KT(win32more.System.Com.IUnknown_head):
        Guid = Guid('74c2653b-5f55-4eb1-9f-0f-18-b8-f6-8b-7d-3d')
    return IMFExtendedCameraIntrinsicsDistortionModel6KT
def _define_IMFExtendedCameraIntrinsicsDistortionModel6KT():
    IMFExtendedCameraIntrinsicsDistortionModel6KT = win32more.Media.MediaFoundation.IMFExtendedCameraIntrinsicsDistortionModel6KT_head
    IMFExtendedCameraIntrinsicsDistortionModel6KT.GetDistortionModel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFCameraIntrinsic_DistortionModel6KT_head))(3, 'GetDistortionModel', ((1, 'pDistortionModel'),)))
    IMFExtendedCameraIntrinsicsDistortionModel6KT.SetDistortionModel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFCameraIntrinsic_DistortionModel6KT_head))(4, 'SetDistortionModel', ((1, 'pDistortionModel'),)))
    win32more.System.Com.IUnknown
    return IMFExtendedCameraIntrinsicsDistortionModel6KT
def _define_IMFExtendedCameraIntrinsicsDistortionModelArcTan_head():
    class IMFExtendedCameraIntrinsicsDistortionModelArcTan(win32more.System.Com.IUnknown_head):
        Guid = Guid('812d5f95-b572-45dc-ba-fc-ae-24-19-9d-dd-a8')
    return IMFExtendedCameraIntrinsicsDistortionModelArcTan
def _define_IMFExtendedCameraIntrinsicsDistortionModelArcTan():
    IMFExtendedCameraIntrinsicsDistortionModelArcTan = win32more.Media.MediaFoundation.IMFExtendedCameraIntrinsicsDistortionModelArcTan_head
    IMFExtendedCameraIntrinsicsDistortionModelArcTan.GetDistortionModel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFCameraIntrinsic_DistortionModelArcTan_head))(3, 'GetDistortionModel', ((1, 'pDistortionModel'),)))
    IMFExtendedCameraIntrinsicsDistortionModelArcTan.SetDistortionModel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFCameraIntrinsic_DistortionModelArcTan_head))(4, 'SetDistortionModel', ((1, 'pDistortionModel'),)))
    win32more.System.Com.IUnknown
    return IMFExtendedCameraIntrinsicsDistortionModelArcTan
def _define_IMFExtendedDRMTypeSupport_head():
    class IMFExtendedDRMTypeSupport(win32more.System.Com.IUnknown_head):
        Guid = Guid('332ec562-3758-468d-a7-84-e3-8f-23-55-21-28')
    return IMFExtendedDRMTypeSupport
def _define_IMFExtendedDRMTypeSupport():
    IMFExtendedDRMTypeSupport = win32more.Media.MediaFoundation.IMFExtendedDRMTypeSupport_head
    IMFExtendedDRMTypeSupport.IsTypeSupportedEx = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,win32more.Foundation.BSTR,POINTER(win32more.Media.MediaFoundation.MF_MEDIA_ENGINE_CANPLAY))(3, 'IsTypeSupportedEx', ((1, 'type'),(1, 'keySystem'),(1, 'pAnswer'),)))
    win32more.System.Com.IUnknown
    return IMFExtendedDRMTypeSupport
def _define_IMFFieldOfUseMFTUnlock_head():
    class IMFFieldOfUseMFTUnlock(win32more.System.Com.IUnknown_head):
        Guid = Guid('508e71d3-ec66-4fc3-87-75-b4-b9-ed-6b-a8-47')
    return IMFFieldOfUseMFTUnlock
def _define_IMFFieldOfUseMFTUnlock():
    IMFFieldOfUseMFTUnlock = win32more.Media.MediaFoundation.IMFFieldOfUseMFTUnlock_head
    IMFFieldOfUseMFTUnlock.Unlock = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head)(3, 'Unlock', ((1, 'pUnkMFT'),)))
    win32more.System.Com.IUnknown
    return IMFFieldOfUseMFTUnlock
def _define_IMFFinalizableMediaSink_head():
    class IMFFinalizableMediaSink(win32more.Media.MediaFoundation.IMFMediaSink_head):
        Guid = Guid('eaecb74a-9a50-42ce-95-41-6a-7f-57-aa-4a-d7')
    return IMFFinalizableMediaSink
def _define_IMFFinalizableMediaSink():
    IMFFinalizableMediaSink = win32more.Media.MediaFoundation.IMFFinalizableMediaSink_head
    IMFFinalizableMediaSink.BeginFinalize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(12, 'BeginFinalize', ((1, 'pCallback'),(1, 'punkState'),)))
    IMFFinalizableMediaSink.EndFinalize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head)(13, 'EndFinalize', ((1, 'pResult'),)))
    win32more.Media.MediaFoundation.IMFMediaSink
    return IMFFinalizableMediaSink
def _define_IMFGetService_head():
    class IMFGetService(win32more.System.Com.IUnknown_head):
        Guid = Guid('fa993888-4383-415a-a9-30-dd-47-2a-8c-f6-f7')
    return IMFGetService
def _define_IMFGetService():
    IMFGetService = win32more.Media.MediaFoundation.IMFGetService_head
    IMFGetService.GetService = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Guid),POINTER(c_void_p))(3, 'GetService', ((1, 'guidService'),(1, 'riid'),(1, 'ppvObject'),)))
    win32more.System.Com.IUnknown
    return IMFGetService
def _define_IMFHDCPStatus_head():
    class IMFHDCPStatus(win32more.System.Com.IUnknown_head):
        Guid = Guid('de400f54-5bf1-40cf-89-64-0b-ea-13-6b-1e-3d')
    return IMFHDCPStatus
def _define_IMFHDCPStatus():
    IMFHDCPStatus = win32more.Media.MediaFoundation.IMFHDCPStatus_head
    IMFHDCPStatus.Query = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_HDCP_STATUS),POINTER(win32more.Foundation.BOOL))(3, 'Query', ((1, 'pStatus'),(1, 'pfStatus'),)))
    IMFHDCPStatus.Set = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_HDCP_STATUS)(4, 'Set', ((1, 'status'),)))
    win32more.System.Com.IUnknown
    return IMFHDCPStatus
def _define_IMFHttpDownloadRequest_head():
    class IMFHttpDownloadRequest(win32more.System.Com.IUnknown_head):
        Guid = Guid('f779fddf-26e7-4270-8a-8b-b9-83-d1-85-9d-e0')
    return IMFHttpDownloadRequest
def _define_IMFHttpDownloadRequest():
    IMFHttpDownloadRequest = win32more.Media.MediaFoundation.IMFHttpDownloadRequest_head
    IMFHttpDownloadRequest.AddHeader = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR)(3, 'AddHeader', ((1, 'szHeader'),)))
    IMFHttpDownloadRequest.BeginSendRequest = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(4, 'BeginSendRequest', ((1, 'pbPayload'),(1, 'cbPayload'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFHttpDownloadRequest.EndSendRequest = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head)(5, 'EndSendRequest', ((1, 'pResult'),)))
    IMFHttpDownloadRequest.BeginReceiveResponse = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(6, 'BeginReceiveResponse', ((1, 'pCallback'),(1, 'punkState'),)))
    IMFHttpDownloadRequest.EndReceiveResponse = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head)(7, 'EndReceiveResponse', ((1, 'pResult'),)))
    IMFHttpDownloadRequest.BeginReadPayload = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(8, 'BeginReadPayload', ((1, 'pb'),(1, 'cb'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFHttpDownloadRequest.EndReadPayload = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(UInt64),POINTER(UInt32))(9, 'EndReadPayload', ((1, 'pResult'),(1, 'pqwOffset'),(1, 'pcbRead'),)))
    IMFHttpDownloadRequest.QueryHeader = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,UInt32,POINTER(win32more.Foundation.PWSTR))(10, 'QueryHeader', ((1, 'szHeaderName'),(1, 'dwIndex'),(1, 'ppszHeaderValue'),)))
    IMFHttpDownloadRequest.GetURL = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(11, 'GetURL', ((1, 'ppszURL'),)))
    IMFHttpDownloadRequest.HasNullSourceOrigin = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(12, 'HasNullSourceOrigin', ((1, 'pfNullSourceOrigin'),)))
    IMFHttpDownloadRequest.GetTimeSeekResult = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64),POINTER(UInt64),POINTER(UInt64))(13, 'GetTimeSeekResult', ((1, 'pqwStartTime'),(1, 'pqwStopTime'),(1, 'pqwDuration'),)))
    IMFHttpDownloadRequest.GetHttpStatus = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(14, 'GetHttpStatus', ((1, 'pdwHttpStatus'),)))
    IMFHttpDownloadRequest.GetAtEndOfPayload = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(15, 'GetAtEndOfPayload', ((1, 'pfAtEndOfPayload'),)))
    IMFHttpDownloadRequest.GetTotalLength = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64))(16, 'GetTotalLength', ((1, 'pqwTotalLength'),)))
    IMFHttpDownloadRequest.GetRangeEndOffset = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64))(17, 'GetRangeEndOffset', ((1, 'pqwRangeEnd'),)))
    IMFHttpDownloadRequest.Close = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(18, 'Close', ()))
    win32more.System.Com.IUnknown
    return IMFHttpDownloadRequest
def _define_IMFHttpDownloadSession_head():
    class IMFHttpDownloadSession(win32more.System.Com.IUnknown_head):
        Guid = Guid('71fa9a2c-53ce-4662-a1-32-1a-7e-8c-bf-62-db')
    return IMFHttpDownloadSession
def _define_IMFHttpDownloadSession():
    IMFHttpDownloadSession = win32more.Media.MediaFoundation.IMFHttpDownloadSession_head
    IMFHttpDownloadSession.SetServer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,UInt32)(3, 'SetServer', ((1, 'szServerName'),(1, 'nPort'),)))
    IMFHttpDownloadSession.CreateRequest = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.BOOL,win32more.Foundation.BOOL,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.IMFHttpDownloadRequest_head))(4, 'CreateRequest', ((1, 'szObjectName'),(1, 'fBypassProxyCache'),(1, 'fSecure'),(1, 'szVerb'),(1, 'szReferrer'),(1, 'ppRequest'),)))
    IMFHttpDownloadSession.Close = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(5, 'Close', ()))
    win32more.System.Com.IUnknown
    return IMFHttpDownloadSession
def _define_IMFHttpDownloadSessionProvider_head():
    class IMFHttpDownloadSessionProvider(win32more.System.Com.IUnknown_head):
        Guid = Guid('1b4cf4b9-3a16-4115-83-9d-03-cc-5c-99-df-01')
    return IMFHttpDownloadSessionProvider
def _define_IMFHttpDownloadSessionProvider():
    IMFHttpDownloadSessionProvider = win32more.Media.MediaFoundation.IMFHttpDownloadSessionProvider_head
    IMFHttpDownloadSessionProvider.CreateHttpDownloadSession = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.IMFHttpDownloadSession_head))(3, 'CreateHttpDownloadSession', ((1, 'wszScheme'),(1, 'ppDownloadSession'),)))
    win32more.System.Com.IUnknown
    return IMFHttpDownloadSessionProvider
def _define_IMFImageSharingEngine_head():
    class IMFImageSharingEngine(win32more.System.Com.IUnknown_head):
        Guid = Guid('cfa0ae8e-7e1c-44d2-ae-68-fc-4c-14-8a-63-54')
    return IMFImageSharingEngine
def _define_IMFImageSharingEngine():
    IMFImageSharingEngine = win32more.Media.MediaFoundation.IMFImageSharingEngine_head
    IMFImageSharingEngine.SetSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head)(3, 'SetSource', ((1, 'pStream'),)))
    IMFImageSharingEngine.GetDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.DEVICE_INFO_head))(4, 'GetDevice', ((1, 'pDevice'),)))
    IMFImageSharingEngine.Shutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(5, 'Shutdown', ()))
    win32more.System.Com.IUnknown
    return IMFImageSharingEngine
def _define_IMFImageSharingEngineClassFactory_head():
    class IMFImageSharingEngineClassFactory(win32more.System.Com.IUnknown_head):
        Guid = Guid('1fc55727-a7fb-4fc8-83-ae-8a-f0-24-99-0a-f1')
    return IMFImageSharingEngineClassFactory
def _define_IMFImageSharingEngineClassFactory():
    IMFImageSharingEngineClassFactory = win32more.Media.MediaFoundation.IMFImageSharingEngineClassFactory_head
    IMFImageSharingEngineClassFactory.CreateInstanceFromUDN = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,POINTER(win32more.Media.MediaFoundation.IMFImageSharingEngine_head))(3, 'CreateInstanceFromUDN', ((1, 'pUniqueDeviceName'),(1, 'ppEngine'),)))
    win32more.System.Com.IUnknown
    return IMFImageSharingEngineClassFactory
def _define_IMFInputTrustAuthority_head():
    class IMFInputTrustAuthority(win32more.System.Com.IUnknown_head):
        Guid = Guid('d19f8e98-b126-4446-89-0c-5d-cb-7a-d7-14-53')
    return IMFInputTrustAuthority
def _define_IMFInputTrustAuthority():
    IMFInputTrustAuthority = win32more.Media.MediaFoundation.IMFInputTrustAuthority_head
    IMFInputTrustAuthority.GetDecrypter = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p))(3, 'GetDecrypter', ((1, 'riid'),(1, 'ppv'),)))
    IMFInputTrustAuthority.RequestAccess = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFPOLICYMANAGER_ACTION,POINTER(win32more.Media.MediaFoundation.IMFActivate_head))(4, 'RequestAccess', ((1, 'Action'),(1, 'ppContentEnablerActivate'),)))
    IMFInputTrustAuthority.GetPolicy = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFPOLICYMANAGER_ACTION,POINTER(win32more.Media.MediaFoundation.IMFOutputPolicy_head))(5, 'GetPolicy', ((1, 'Action'),(1, 'ppPolicy'),)))
    IMFInputTrustAuthority.BindAccess = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS_head))(6, 'BindAccess', ((1, 'pParam'),)))
    IMFInputTrustAuthority.UpdateAccess = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS_head))(7, 'UpdateAccess', ((1, 'pParam'),)))
    IMFInputTrustAuthority.Reset = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(8, 'Reset', ()))
    win32more.System.Com.IUnknown
    return IMFInputTrustAuthority
def _define_IMFLocalMFTRegistration_head():
    class IMFLocalMFTRegistration(win32more.System.Com.IUnknown_head):
        Guid = Guid('149c4d73-b4be-4f8d-8b-87-07-9e-92-6b-6a-dd')
    return IMFLocalMFTRegistration
def _define_IMFLocalMFTRegistration():
    IMFLocalMFTRegistration = win32more.Media.MediaFoundation.IMFLocalMFTRegistration_head
    IMFLocalMFTRegistration.RegisterMFTs = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFT_REGISTRATION_INFO_head),UInt32)(3, 'RegisterMFTs', ((1, 'pMFTs'),(1, 'cMFTs'),)))
    win32more.System.Com.IUnknown
    return IMFLocalMFTRegistration
def _define_IMFMediaBuffer_head():
    class IMFMediaBuffer(win32more.System.Com.IUnknown_head):
        Guid = Guid('045fa593-8799-42b8-bc-8d-89-68-c6-45-35-07')
    return IMFMediaBuffer
def _define_IMFMediaBuffer():
    IMFMediaBuffer = win32more.Media.MediaFoundation.IMFMediaBuffer_head
    IMFMediaBuffer.Lock = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(c_char_p_no),POINTER(UInt32),POINTER(UInt32))(3, 'Lock', ((1, 'ppbBuffer'),(1, 'pcbMaxLength'),(1, 'pcbCurrentLength'),)))
    IMFMediaBuffer.Unlock = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(4, 'Unlock', ()))
    IMFMediaBuffer.GetCurrentLength = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(5, 'GetCurrentLength', ((1, 'pcbCurrentLength'),)))
    IMFMediaBuffer.SetCurrentLength = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(6, 'SetCurrentLength', ((1, 'cbCurrentLength'),)))
    IMFMediaBuffer.GetMaxLength = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(7, 'GetMaxLength', ((1, 'pcbMaxLength'),)))
    win32more.System.Com.IUnknown
    return IMFMediaBuffer
def _define_IMFMediaEngine_head():
    class IMFMediaEngine(win32more.System.Com.IUnknown_head):
        Guid = Guid('98a1b0bb-03eb-4935-ae-7c-93-c1-fa-0e-1c-93')
    return IMFMediaEngine
def _define_IMFMediaEngine():
    IMFMediaEngine = win32more.Media.MediaFoundation.IMFMediaEngine_head
    IMFMediaEngine.GetError = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaError_head))(3, 'GetError', ((1, 'ppError'),)))
    IMFMediaEngine.SetErrorCode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_MEDIA_ENGINE_ERR)(4, 'SetErrorCode', ((1, 'error'),)))
    IMFMediaEngine.SetSourceElements = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaEngineSrcElements_head)(5, 'SetSourceElements', ((1, 'pSrcElements'),)))
    IMFMediaEngine.SetSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR)(6, 'SetSource', ((1, 'pUrl'),)))
    IMFMediaEngine.GetCurrentSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BSTR))(7, 'GetCurrentSource', ((1, 'ppUrl'),)))
    IMFMediaEngine.GetNetworkState = COMMETHOD(WINFUNCTYPE(UInt16,)(8, 'GetNetworkState', ()))
    IMFMediaEngine.GetPreload = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.MF_MEDIA_ENGINE_PRELOAD,)(9, 'GetPreload', ()))
    IMFMediaEngine.SetPreload = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_MEDIA_ENGINE_PRELOAD)(10, 'SetPreload', ((1, 'Preload'),)))
    IMFMediaEngine.GetBuffered = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaTimeRange_head))(11, 'GetBuffered', ((1, 'ppBuffered'),)))
    IMFMediaEngine.Load = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(12, 'Load', ()))
    IMFMediaEngine.CanPlayType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,POINTER(win32more.Media.MediaFoundation.MF_MEDIA_ENGINE_CANPLAY))(13, 'CanPlayType', ((1, 'type'),(1, 'pAnswer'),)))
    IMFMediaEngine.GetReadyState = COMMETHOD(WINFUNCTYPE(UInt16,)(14, 'GetReadyState', ()))
    IMFMediaEngine.IsSeeking = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL,)(15, 'IsSeeking', ()))
    IMFMediaEngine.GetCurrentTime = COMMETHOD(WINFUNCTYPE(Double,)(16, 'GetCurrentTime', ()))
    IMFMediaEngine.SetCurrentTime = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double)(17, 'SetCurrentTime', ((1, 'seekTime'),)))
    IMFMediaEngine.GetStartTime = COMMETHOD(WINFUNCTYPE(Double,)(18, 'GetStartTime', ()))
    IMFMediaEngine.GetDuration = COMMETHOD(WINFUNCTYPE(Double,)(19, 'GetDuration', ()))
    IMFMediaEngine.IsPaused = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL,)(20, 'IsPaused', ()))
    IMFMediaEngine.GetDefaultPlaybackRate = COMMETHOD(WINFUNCTYPE(Double,)(21, 'GetDefaultPlaybackRate', ()))
    IMFMediaEngine.SetDefaultPlaybackRate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double)(22, 'SetDefaultPlaybackRate', ((1, 'Rate'),)))
    IMFMediaEngine.GetPlaybackRate = COMMETHOD(WINFUNCTYPE(Double,)(23, 'GetPlaybackRate', ()))
    IMFMediaEngine.SetPlaybackRate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double)(24, 'SetPlaybackRate', ((1, 'Rate'),)))
    IMFMediaEngine.GetPlayed = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaTimeRange_head))(25, 'GetPlayed', ((1, 'ppPlayed'),)))
    IMFMediaEngine.GetSeekable = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaTimeRange_head))(26, 'GetSeekable', ((1, 'ppSeekable'),)))
    IMFMediaEngine.IsEnded = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL,)(27, 'IsEnded', ()))
    IMFMediaEngine.GetAutoPlay = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL,)(28, 'GetAutoPlay', ()))
    IMFMediaEngine.SetAutoPlay = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL)(29, 'SetAutoPlay', ((1, 'AutoPlay'),)))
    IMFMediaEngine.GetLoop = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL,)(30, 'GetLoop', ()))
    IMFMediaEngine.SetLoop = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL)(31, 'SetLoop', ((1, 'Loop'),)))
    IMFMediaEngine.Play = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(32, 'Play', ()))
    IMFMediaEngine.Pause = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(33, 'Pause', ()))
    IMFMediaEngine.GetMuted = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL,)(34, 'GetMuted', ()))
    IMFMediaEngine.SetMuted = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL)(35, 'SetMuted', ((1, 'Muted'),)))
    IMFMediaEngine.GetVolume = COMMETHOD(WINFUNCTYPE(Double,)(36, 'GetVolume', ()))
    IMFMediaEngine.SetVolume = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double)(37, 'SetVolume', ((1, 'Volume'),)))
    IMFMediaEngine.HasVideo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL,)(38, 'HasVideo', ()))
    IMFMediaEngine.HasAudio = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL,)(39, 'HasAudio', ()))
    IMFMediaEngine.GetNativeVideoSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(UInt32))(40, 'GetNativeVideoSize', ((1, 'cx'),(1, 'cy'),)))
    IMFMediaEngine.GetVideoAspectRatio = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(UInt32))(41, 'GetVideoAspectRatio', ((1, 'cx'),(1, 'cy'),)))
    IMFMediaEngine.Shutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(42, 'Shutdown', ()))
    IMFMediaEngine.TransferVideoFrame = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,POINTER(win32more.Media.MediaFoundation.MFVideoNormalizedRect_head),POINTER(win32more.Foundation.RECT_head),POINTER(win32more.Media.MediaFoundation.MFARGB_head))(43, 'TransferVideoFrame', ((1, 'pDstSurf'),(1, 'pSrc'),(1, 'pDst'),(1, 'pBorderClr'),)))
    IMFMediaEngine.OnVideoStreamTick = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int64))(44, 'OnVideoStreamTick', ((1, 'pPts'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngine
def _define_IMFMediaEngineAudioEndpointId_head():
    class IMFMediaEngineAudioEndpointId(win32more.System.Com.IUnknown_head):
        Guid = Guid('7a3bac98-0e76-49fb-8c-20-8a-86-fd-98-ea-f2')
    return IMFMediaEngineAudioEndpointId
def _define_IMFMediaEngineAudioEndpointId():
    IMFMediaEngineAudioEndpointId = win32more.Media.MediaFoundation.IMFMediaEngineAudioEndpointId_head
    IMFMediaEngineAudioEndpointId.SetAudioEndpointId = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR)(3, 'SetAudioEndpointId', ((1, 'pszEndpointId'),)))
    IMFMediaEngineAudioEndpointId.GetAudioEndpointId = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(4, 'GetAudioEndpointId', ((1, 'ppszEndpointId'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineAudioEndpointId
def _define_IMFMediaEngineClassFactory_head():
    class IMFMediaEngineClassFactory(win32more.System.Com.IUnknown_head):
        Guid = Guid('4d645ace-26aa-4688-9b-e1-df-35-16-99-0b-93')
    return IMFMediaEngineClassFactory
def _define_IMFMediaEngineClassFactory():
    IMFMediaEngineClassFactory = win32more.Media.MediaFoundation.IMFMediaEngineClassFactory_head
    IMFMediaEngineClassFactory.CreateInstance = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFMediaEngine_head))(3, 'CreateInstance', ((1, 'dwFlags'),(1, 'pAttr'),(1, 'ppPlayer'),)))
    IMFMediaEngineClassFactory.CreateTimeRange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaTimeRange_head))(4, 'CreateTimeRange', ((1, 'ppTimeRange'),)))
    IMFMediaEngineClassFactory.CreateError = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaError_head))(5, 'CreateError', ((1, 'ppError'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineClassFactory
def _define_IMFMediaEngineClassFactory2_head():
    class IMFMediaEngineClassFactory2(win32more.System.Com.IUnknown_head):
        Guid = Guid('09083cef-867f-4bf6-87-76-de-e3-a7-b4-2f-ca')
    return IMFMediaEngineClassFactory2
def _define_IMFMediaEngineClassFactory2():
    IMFMediaEngineClassFactory2 = win32more.Media.MediaFoundation.IMFMediaEngineClassFactory2_head
    IMFMediaEngineClassFactory2.CreateMediaKeys2 = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,win32more.Foundation.BSTR,win32more.Foundation.BSTR,POINTER(win32more.Media.MediaFoundation.IMFMediaKeys_head))(3, 'CreateMediaKeys2', ((1, 'keySystem'),(1, 'defaultCdmStorePath'),(1, 'inprivateCdmStorePath'),(1, 'ppKeys'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineClassFactory2
def _define_IMFMediaEngineClassFactory3_head():
    class IMFMediaEngineClassFactory3(win32more.System.Com.IUnknown_head):
        Guid = Guid('3787614f-65f7-4003-b6-73-ea-d8-29-3a-0e-60')
    return IMFMediaEngineClassFactory3
def _define_IMFMediaEngineClassFactory3():
    IMFMediaEngineClassFactory3 = win32more.Media.MediaFoundation.IMFMediaEngineClassFactory3_head
    IMFMediaEngineClassFactory3.CreateMediaKeySystemAccess = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,POINTER(win32more.UI.Shell.PropertiesSystem.IPropertyStore_head),UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaKeySystemAccess_head))(3, 'CreateMediaKeySystemAccess', ((1, 'keySystem'),(1, 'ppSupportedConfigurationsArray'),(1, 'uSize'),(1, 'ppKeyAccess'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineClassFactory3
def _define_IMFMediaEngineClassFactory4_head():
    class IMFMediaEngineClassFactory4(win32more.System.Com.IUnknown_head):
        Guid = Guid('fbe256c1-43cf-4a9b-8c-b8-ce-86-32-a3-41-86')
    return IMFMediaEngineClassFactory4
def _define_IMFMediaEngineClassFactory4():
    IMFMediaEngineClassFactory4 = win32more.Media.MediaFoundation.IMFMediaEngineClassFactory4_head
    IMFMediaEngineClassFactory4.CreateContentDecryptionModuleFactory = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(Guid),POINTER(c_void_p))(3, 'CreateContentDecryptionModuleFactory', ((1, 'keySystem'),(1, 'riid'),(1, 'ppvObject'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineClassFactory4
def _define_IMFMediaEngineClassFactoryEx_head():
    class IMFMediaEngineClassFactoryEx(win32more.Media.MediaFoundation.IMFMediaEngineClassFactory_head):
        Guid = Guid('c56156c6-ea5b-48a5-9d-f8-fb-e0-35-d0-92-9e')
    return IMFMediaEngineClassFactoryEx
def _define_IMFMediaEngineClassFactoryEx():
    IMFMediaEngineClassFactoryEx = win32more.Media.MediaFoundation.IMFMediaEngineClassFactoryEx_head
    IMFMediaEngineClassFactoryEx.CreateMediaSourceExtension = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSourceExtension_head))(6, 'CreateMediaSourceExtension', ((1, 'dwFlags'),(1, 'pAttr'),(1, 'ppMSE'),)))
    IMFMediaEngineClassFactoryEx.CreateMediaKeys = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,win32more.Foundation.BSTR,POINTER(win32more.Media.MediaFoundation.IMFMediaKeys_head))(7, 'CreateMediaKeys', ((1, 'keySystem'),(1, 'cdmStorePath'),(1, 'ppKeys'),)))
    IMFMediaEngineClassFactoryEx.IsTypeSupported = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,win32more.Foundation.BSTR,POINTER(win32more.Foundation.BOOL))(8, 'IsTypeSupported', ((1, 'type'),(1, 'keySystem'),(1, 'isSupported'),)))
    win32more.Media.MediaFoundation.IMFMediaEngineClassFactory
    return IMFMediaEngineClassFactoryEx
def _define_IMFMediaEngineEME_head():
    class IMFMediaEngineEME(win32more.System.Com.IUnknown_head):
        Guid = Guid('50dc93e4-ba4f-4275-ae-66-83-e8-36-e5-74-69')
    return IMFMediaEngineEME
def _define_IMFMediaEngineEME():
    IMFMediaEngineEME = win32more.Media.MediaFoundation.IMFMediaEngineEME_head
    IMFMediaEngineEME.get_Keys = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaKeys_head))(3, 'get_Keys', ((1, 'keys'),)))
    IMFMediaEngineEME.SetMediaKeys = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaKeys_head)(4, 'SetMediaKeys', ((1, 'keys'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineEME
def _define_IMFMediaEngineEMENotify_head():
    class IMFMediaEngineEMENotify(win32more.System.Com.IUnknown_head):
        Guid = Guid('9e184d15-cdb7-4f86-b4-9e-56-66-89-f4-a6-01')
    return IMFMediaEngineEMENotify
def _define_IMFMediaEngineEMENotify():
    IMFMediaEngineEMENotify = win32more.Media.MediaFoundation.IMFMediaEngineEMENotify_head
    IMFMediaEngineEMENotify.Encrypted = COMMETHOD(WINFUNCTYPE(Void,c_char_p_no,UInt32,win32more.Foundation.BSTR)(3, 'Encrypted', ((1, 'pbInitData'),(1, 'cb'),(1, 'bstrInitDataType'),)))
    IMFMediaEngineEMENotify.WaitingForKey = COMMETHOD(WINFUNCTYPE(Void,)(4, 'WaitingForKey', ()))
    win32more.System.Com.IUnknown
    return IMFMediaEngineEMENotify
def _define_IMFMediaEngineEx_head():
    class IMFMediaEngineEx(win32more.Media.MediaFoundation.IMFMediaEngine_head):
        Guid = Guid('83015ead-b1e6-40d0-a9-8a-37-14-5f-fe-1a-d1')
    return IMFMediaEngineEx
def _define_IMFMediaEngineEx():
    IMFMediaEngineEx = win32more.Media.MediaFoundation.IMFMediaEngineEx_head
    IMFMediaEngineEx.SetSourceFromByteStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Foundation.BSTR)(45, 'SetSourceFromByteStream', ((1, 'pByteStream'),(1, 'pURL'),)))
    IMFMediaEngineEx.GetStatistics = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_MEDIA_ENGINE_STATISTIC,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(46, 'GetStatistics', ((1, 'StatisticID'),(1, 'pStatistic'),)))
    IMFMediaEngineEx.UpdateVideoStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVideoNormalizedRect_head),POINTER(win32more.Foundation.RECT_head),POINTER(win32more.Media.MediaFoundation.MFARGB_head))(47, 'UpdateVideoStream', ((1, 'pSrc'),(1, 'pDst'),(1, 'pBorderClr'),)))
    IMFMediaEngineEx.GetBalance = COMMETHOD(WINFUNCTYPE(Double,)(48, 'GetBalance', ()))
    IMFMediaEngineEx.SetBalance = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double)(49, 'SetBalance', ((1, 'balance'),)))
    IMFMediaEngineEx.IsPlaybackRateSupported = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL,Double)(50, 'IsPlaybackRateSupported', ((1, 'rate'),)))
    IMFMediaEngineEx.FrameStep = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL)(51, 'FrameStep', ((1, 'Forward'),)))
    IMFMediaEngineEx.GetResourceCharacteristics = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(52, 'GetResourceCharacteristics', ((1, 'pCharacteristics'),)))
    IMFMediaEngineEx.GetPresentationAttribute = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(53, 'GetPresentationAttribute', ((1, 'guidMFAttribute'),(1, 'pvValue'),)))
    IMFMediaEngineEx.GetNumberOfStreams = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(54, 'GetNumberOfStreams', ((1, 'pdwStreamCount'),)))
    IMFMediaEngineEx.GetStreamAttribute = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(55, 'GetStreamAttribute', ((1, 'dwStreamIndex'),(1, 'guidMFAttribute'),(1, 'pvValue'),)))
    IMFMediaEngineEx.GetStreamSelection = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Foundation.BOOL))(56, 'GetStreamSelection', ((1, 'dwStreamIndex'),(1, 'pEnabled'),)))
    IMFMediaEngineEx.SetStreamSelection = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.BOOL)(57, 'SetStreamSelection', ((1, 'dwStreamIndex'),(1, 'Enabled'),)))
    IMFMediaEngineEx.ApplyStreamSelections = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(58, 'ApplyStreamSelections', ()))
    IMFMediaEngineEx.IsProtected = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(59, 'IsProtected', ((1, 'pProtected'),)))
    IMFMediaEngineEx.InsertVideoEffect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,win32more.Foundation.BOOL)(60, 'InsertVideoEffect', ((1, 'pEffect'),(1, 'fOptional'),)))
    IMFMediaEngineEx.InsertAudioEffect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,win32more.Foundation.BOOL)(61, 'InsertAudioEffect', ((1, 'pEffect'),(1, 'fOptional'),)))
    IMFMediaEngineEx.RemoveAllEffects = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(62, 'RemoveAllEffects', ()))
    IMFMediaEngineEx.SetTimelineMarkerTimer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double)(63, 'SetTimelineMarkerTimer', ((1, 'timeToFire'),)))
    IMFMediaEngineEx.GetTimelineMarkerTimer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Double))(64, 'GetTimelineMarkerTimer', ((1, 'pTimeToFire'),)))
    IMFMediaEngineEx.CancelTimelineMarkerTimer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(65, 'CancelTimelineMarkerTimer', ()))
    IMFMediaEngineEx.IsStereo3D = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL,)(66, 'IsStereo3D', ()))
    IMFMediaEngineEx.GetStereo3DFramePackingMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_MEDIA_ENGINE_S3D_PACKING_MODE))(67, 'GetStereo3DFramePackingMode', ((1, 'packMode'),)))
    IMFMediaEngineEx.SetStereo3DFramePackingMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_MEDIA_ENGINE_S3D_PACKING_MODE)(68, 'SetStereo3DFramePackingMode', ((1, 'packMode'),)))
    IMFMediaEngineEx.GetStereo3DRenderMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF3DVideoOutputType))(69, 'GetStereo3DRenderMode', ((1, 'outputType'),)))
    IMFMediaEngineEx.SetStereo3DRenderMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF3DVideoOutputType)(70, 'SetStereo3DRenderMode', ((1, 'outputType'),)))
    IMFMediaEngineEx.EnableWindowlessSwapchainMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL)(71, 'EnableWindowlessSwapchainMode', ((1, 'fEnable'),)))
    IMFMediaEngineEx.GetVideoSwapchainHandle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.HANDLE))(72, 'GetVideoSwapchainHandle', ((1, 'phSwapchain'),)))
    IMFMediaEngineEx.EnableHorizontalMirrorMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL)(73, 'EnableHorizontalMirrorMode', ((1, 'fEnable'),)))
    IMFMediaEngineEx.GetAudioStreamCategory = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(74, 'GetAudioStreamCategory', ((1, 'pCategory'),)))
    IMFMediaEngineEx.SetAudioStreamCategory = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(75, 'SetAudioStreamCategory', ((1, 'category'),)))
    IMFMediaEngineEx.GetAudioEndpointRole = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(76, 'GetAudioEndpointRole', ((1, 'pRole'),)))
    IMFMediaEngineEx.SetAudioEndpointRole = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(77, 'SetAudioEndpointRole', ((1, 'role'),)))
    IMFMediaEngineEx.GetRealTimeMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(78, 'GetRealTimeMode', ((1, 'pfEnabled'),)))
    IMFMediaEngineEx.SetRealTimeMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL)(79, 'SetRealTimeMode', ((1, 'fEnable'),)))
    IMFMediaEngineEx.SetCurrentTimeEx = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double,win32more.Media.MediaFoundation.MF_MEDIA_ENGINE_SEEK_MODE)(80, 'SetCurrentTimeEx', ((1, 'seekTime'),(1, 'seekMode'),)))
    IMFMediaEngineEx.EnableTimeUpdateTimer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL)(81, 'EnableTimeUpdateTimer', ((1, 'fEnableTimer'),)))
    win32more.Media.MediaFoundation.IMFMediaEngine
    return IMFMediaEngineEx
def _define_IMFMediaEngineExtension_head():
    class IMFMediaEngineExtension(win32more.System.Com.IUnknown_head):
        Guid = Guid('2f69d622-20b5-41e9-af-df-89-ce-d1-dd-a0-4e')
    return IMFMediaEngineExtension
def _define_IMFMediaEngineExtension():
    IMFMediaEngineExtension = win32more.Media.MediaFoundation.IMFMediaEngineExtension_head
    IMFMediaEngineExtension.CanPlayType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL,win32more.Foundation.BSTR,POINTER(win32more.Media.MediaFoundation.MF_MEDIA_ENGINE_CANPLAY))(3, 'CanPlayType', ((1, 'AudioOnly'),(1, 'MimeType'),(1, 'pAnswer'),)))
    IMFMediaEngineExtension.BeginCreateObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.MF_OBJECT_TYPE,POINTER(win32more.System.Com.IUnknown_head),win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(4, 'BeginCreateObject', ((1, 'bstrURL'),(1, 'pByteStream'),(1, 'type'),(1, 'ppIUnknownCancelCookie'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFMediaEngineExtension.CancelObjectCreation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head)(5, 'CancelObjectCreation', ((1, 'pIUnknownCancelCookie'),)))
    IMFMediaEngineExtension.EndCreateObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(win32more.System.Com.IUnknown_head))(6, 'EndCreateObject', ((1, 'pResult'),(1, 'ppObject'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineExtension
def _define_IMFMediaEngineNeedKeyNotify_head():
    class IMFMediaEngineNeedKeyNotify(win32more.System.Com.IUnknown_head):
        Guid = Guid('46a30204-a696-4b18-88-04-24-6b-8f-03-1b-b1')
    return IMFMediaEngineNeedKeyNotify
def _define_IMFMediaEngineNeedKeyNotify():
    IMFMediaEngineNeedKeyNotify = win32more.Media.MediaFoundation.IMFMediaEngineNeedKeyNotify_head
    IMFMediaEngineNeedKeyNotify.NeedKey = COMMETHOD(WINFUNCTYPE(Void,c_char_p_no,UInt32)(3, 'NeedKey', ((1, 'initData'),(1, 'cb'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineNeedKeyNotify
def _define_IMFMediaEngineNotify_head():
    class IMFMediaEngineNotify(win32more.System.Com.IUnknown_head):
        Guid = Guid('fee7c112-e776-42b5-9b-bf-00-48-52-4e-2b-d5')
    return IMFMediaEngineNotify
def _define_IMFMediaEngineNotify():
    IMFMediaEngineNotify = win32more.Media.MediaFoundation.IMFMediaEngineNotify_head
    IMFMediaEngineNotify.EventNotify = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UIntPtr,UInt32)(3, 'EventNotify', ((1, 'event'),(1, 'param1'),(1, 'param2'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineNotify
def _define_IMFMediaEngineOPMInfo_head():
    class IMFMediaEngineOPMInfo(win32more.System.Com.IUnknown_head):
        Guid = Guid('765763e6-6c01-4b01-bb-0f-b8-29-f6-0e-d2-8c')
    return IMFMediaEngineOPMInfo
def _define_IMFMediaEngineOPMInfo():
    IMFMediaEngineOPMInfo = win32more.Media.MediaFoundation.IMFMediaEngineOPMInfo_head
    IMFMediaEngineOPMInfo.GetOPMInfo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_MEDIA_ENGINE_OPM_STATUS),POINTER(win32more.Foundation.BOOL))(3, 'GetOPMInfo', ((1, 'pStatus'),(1, 'pConstricted'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineOPMInfo
def _define_IMFMediaEngineProtectedContent_head():
    class IMFMediaEngineProtectedContent(win32more.System.Com.IUnknown_head):
        Guid = Guid('9f8021e8-9c8c-487e-bb-5c-79-aa-47-79-93-8c')
    return IMFMediaEngineProtectedContent
def _define_IMFMediaEngineProtectedContent():
    IMFMediaEngineProtectedContent = win32more.Media.MediaFoundation.IMFMediaEngineProtectedContent_head
    IMFMediaEngineProtectedContent.ShareResources = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head)(3, 'ShareResources', ((1, 'pUnkDeviceContext'),)))
    IMFMediaEngineProtectedContent.GetRequiredProtections = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(4, 'GetRequiredProtections', ((1, 'pFrameProtectionFlags'),)))
    IMFMediaEngineProtectedContent.SetOPMWindow = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HWND)(5, 'SetOPMWindow', ((1, 'hwnd'),)))
    IMFMediaEngineProtectedContent.TransferVideoFrame = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,POINTER(win32more.Media.MediaFoundation.MFVideoNormalizedRect_head),POINTER(win32more.Foundation.RECT_head),POINTER(win32more.Media.MediaFoundation.MFARGB_head),POINTER(UInt32))(6, 'TransferVideoFrame', ((1, 'pDstSurf'),(1, 'pSrc'),(1, 'pDst'),(1, 'pBorderClr'),(1, 'pFrameProtectionFlags'),)))
    IMFMediaEngineProtectedContent.SetContentProtectionManager = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFContentProtectionManager_head)(7, 'SetContentProtectionManager', ((1, 'pCPM'),)))
    IMFMediaEngineProtectedContent.SetApplicationCertificate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32)(8, 'SetApplicationCertificate', ((1, 'pbBlob'),(1, 'cbBlob'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineProtectedContent
def _define_IMFMediaEngineSrcElements_head():
    class IMFMediaEngineSrcElements(win32more.System.Com.IUnknown_head):
        Guid = Guid('7a5e5354-b114-4c72-b9-91-31-31-d7-50-32-ea')
    return IMFMediaEngineSrcElements
def _define_IMFMediaEngineSrcElements():
    IMFMediaEngineSrcElements = win32more.Media.MediaFoundation.IMFMediaEngineSrcElements_head
    IMFMediaEngineSrcElements.GetLength = COMMETHOD(WINFUNCTYPE(UInt32,)(3, 'GetLength', ()))
    IMFMediaEngineSrcElements.GetURL = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Foundation.BSTR))(4, 'GetURL', ((1, 'index'),(1, 'pURL'),)))
    IMFMediaEngineSrcElements.GetType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Foundation.BSTR))(5, 'GetType', ((1, 'index'),(1, 'pType'),)))
    IMFMediaEngineSrcElements.GetMedia = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Foundation.BSTR))(6, 'GetMedia', ((1, 'index'),(1, 'pMedia'),)))
    IMFMediaEngineSrcElements.AddElement = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,win32more.Foundation.BSTR,win32more.Foundation.BSTR)(7, 'AddElement', ((1, 'pURL'),(1, 'pType'),(1, 'pMedia'),)))
    IMFMediaEngineSrcElements.RemoveAllElements = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(8, 'RemoveAllElements', ()))
    win32more.System.Com.IUnknown
    return IMFMediaEngineSrcElements
def _define_IMFMediaEngineSrcElementsEx_head():
    class IMFMediaEngineSrcElementsEx(win32more.Media.MediaFoundation.IMFMediaEngineSrcElements_head):
        Guid = Guid('654a6bb3-e1a3-424a-99-08-53-a4-3a-0d-fd-a0')
    return IMFMediaEngineSrcElementsEx
def _define_IMFMediaEngineSrcElementsEx():
    IMFMediaEngineSrcElementsEx = win32more.Media.MediaFoundation.IMFMediaEngineSrcElementsEx_head
    IMFMediaEngineSrcElementsEx.AddElementEx = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,win32more.Foundation.BSTR,win32more.Foundation.BSTR,win32more.Foundation.BSTR)(9, 'AddElementEx', ((1, 'pURL'),(1, 'pType'),(1, 'pMedia'),(1, 'keySystem'),)))
    IMFMediaEngineSrcElementsEx.GetKeySystem = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Foundation.BSTR))(10, 'GetKeySystem', ((1, 'index'),(1, 'pType'),)))
    win32more.Media.MediaFoundation.IMFMediaEngineSrcElements
    return IMFMediaEngineSrcElementsEx
def _define_IMFMediaEngineSupportsSourceTransfer_head():
    class IMFMediaEngineSupportsSourceTransfer(win32more.System.Com.IUnknown_head):
        Guid = Guid('a724b056-1b2e-4642-a6-f3-db-94-20-c5-29-08')
    return IMFMediaEngineSupportsSourceTransfer
def _define_IMFMediaEngineSupportsSourceTransfer():
    IMFMediaEngineSupportsSourceTransfer = win32more.Media.MediaFoundation.IMFMediaEngineSupportsSourceTransfer_head
    IMFMediaEngineSupportsSourceTransfer.ShouldTransferSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(3, 'ShouldTransferSource', ((1, 'pfShouldTransfer'),)))
    IMFMediaEngineSupportsSourceTransfer.DetachMediaSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFByteStream_head),POINTER(win32more.Media.MediaFoundation.IMFMediaSource_head),POINTER(win32more.Media.MediaFoundation.IMFMediaSourceExtension_head))(4, 'DetachMediaSource', ((1, 'ppByteStream'),(1, 'ppMediaSource'),(1, 'ppMSE'),)))
    IMFMediaEngineSupportsSourceTransfer.AttachMediaSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFMediaSource_head,win32more.Media.MediaFoundation.IMFMediaSourceExtension_head)(5, 'AttachMediaSource', ((1, 'pByteStream'),(1, 'pMediaSource'),(1, 'pMSE'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineSupportsSourceTransfer
def _define_IMFMediaEngineTransferSource_head():
    class IMFMediaEngineTransferSource(win32more.System.Com.IUnknown_head):
        Guid = Guid('24230452-fe54-40cc-94-f3-fc-c3-94-c3-40-d6')
    return IMFMediaEngineTransferSource
def _define_IMFMediaEngineTransferSource():
    IMFMediaEngineTransferSource = win32more.Media.MediaFoundation.IMFMediaEngineTransferSource_head
    IMFMediaEngineTransferSource.TransferSourceToMediaEngine = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaEngine_head)(3, 'TransferSourceToMediaEngine', ((1, 'destination'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEngineTransferSource
def _define_IMFMediaEngineWebSupport_head():
    class IMFMediaEngineWebSupport(win32more.System.Com.IUnknown_head):
        Guid = Guid('ba2743a1-07e0-48ef-84-b6-9a-2e-d0-23-ca-6c')
    return IMFMediaEngineWebSupport
def _define_IMFMediaEngineWebSupport():
    IMFMediaEngineWebSupport = win32more.Media.MediaFoundation.IMFMediaEngineWebSupport_head
    IMFMediaEngineWebSupport.ShouldDelayTheLoadEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL,)(3, 'ShouldDelayTheLoadEvent', ()))
    IMFMediaEngineWebSupport.ConnectWebAudio = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IAudioSourceProvider_head))(4, 'ConnectWebAudio', ((1, 'dwSampleRate'),(1, 'ppSourceProvider'),)))
    IMFMediaEngineWebSupport.DisconnectWebAudio = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(5, 'DisconnectWebAudio', ()))
    win32more.System.Com.IUnknown
    return IMFMediaEngineWebSupport
def _define_IMFMediaError_head():
    class IMFMediaError(win32more.System.Com.IUnknown_head):
        Guid = Guid('fc0e10d2-ab2a-4501-a9-51-06-bb-10-75-18-4c')
    return IMFMediaError
def _define_IMFMediaError():
    IMFMediaError = win32more.Media.MediaFoundation.IMFMediaError_head
    IMFMediaError.GetErrorCode = COMMETHOD(WINFUNCTYPE(UInt16,)(3, 'GetErrorCode', ()))
    IMFMediaError.GetExtendedErrorCode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(4, 'GetExtendedErrorCode', ()))
    IMFMediaError.SetErrorCode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_MEDIA_ENGINE_ERR)(5, 'SetErrorCode', ((1, 'error'),)))
    IMFMediaError.SetExtendedErrorCode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HRESULT)(6, 'SetExtendedErrorCode', ((1, 'error'),)))
    win32more.System.Com.IUnknown
    return IMFMediaError
def _define_IMFMediaEvent_head():
    class IMFMediaEvent(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('df598932-f10c-4e39-bb-a2-c3-08-f1-01-da-a3')
    return IMFMediaEvent
def _define_IMFMediaEvent():
    IMFMediaEvent = win32more.Media.MediaFoundation.IMFMediaEvent_head
    IMFMediaEvent.GetType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(33, 'GetType', ((1, 'pmet'),)))
    IMFMediaEvent.GetExtendedType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid))(34, 'GetExtendedType', ((1, 'pguidExtendedType'),)))
    IMFMediaEvent.GetStatus = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.HRESULT))(35, 'GetStatus', ((1, 'phrStatus'),)))
    IMFMediaEvent.GetValue = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(36, 'GetValue', ((1, 'pvValue'),)))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFMediaEvent
def _define_IMFMediaEventGenerator_head():
    class IMFMediaEventGenerator(win32more.System.Com.IUnknown_head):
        Guid = Guid('2cd0bd52-bcd5-4b89-b6-2c-ea-dc-0c-03-1e-7d')
    return IMFMediaEventGenerator
def _define_IMFMediaEventGenerator():
    IMFMediaEventGenerator = win32more.Media.MediaFoundation.IMFMediaEventGenerator_head
    IMFMediaEventGenerator.GetEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS,POINTER(win32more.Media.MediaFoundation.IMFMediaEvent_head))(3, 'GetEvent', ((1, 'dwFlags'),(1, 'ppEvent'),)))
    IMFMediaEventGenerator.BeginGetEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(4, 'BeginGetEvent', ((1, 'pCallback'),(1, 'punkState'),)))
    IMFMediaEventGenerator.EndGetEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(win32more.Media.MediaFoundation.IMFMediaEvent_head))(5, 'EndGetEvent', ((1, 'pResult'),(1, 'ppEvent'),)))
    IMFMediaEventGenerator.QueueEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),win32more.Foundation.HRESULT,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(6, 'QueueEvent', ((1, 'met'),(1, 'guidExtendedType'),(1, 'hrStatus'),(1, 'pvValue'),)))
    win32more.System.Com.IUnknown
    return IMFMediaEventGenerator
def _define_IMFMediaEventQueue_head():
    class IMFMediaEventQueue(win32more.System.Com.IUnknown_head):
        Guid = Guid('36f846fc-2256-48b6-b5-8e-e2-b6-38-31-65-81')
    return IMFMediaEventQueue
def _define_IMFMediaEventQueue():
    IMFMediaEventQueue = win32more.Media.MediaFoundation.IMFMediaEventQueue_head
    IMFMediaEventQueue.GetEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaEvent_head))(3, 'GetEvent', ((1, 'dwFlags'),(1, 'ppEvent'),)))
    IMFMediaEventQueue.BeginGetEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(4, 'BeginGetEvent', ((1, 'pCallback'),(1, 'punkState'),)))
    IMFMediaEventQueue.EndGetEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(win32more.Media.MediaFoundation.IMFMediaEvent_head))(5, 'EndGetEvent', ((1, 'pResult'),(1, 'ppEvent'),)))
    IMFMediaEventQueue.QueueEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaEvent_head)(6, 'QueueEvent', ((1, 'pEvent'),)))
    IMFMediaEventQueue.QueueEventParamVar = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),win32more.Foundation.HRESULT,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(7, 'QueueEventParamVar', ((1, 'met'),(1, 'guidExtendedType'),(1, 'hrStatus'),(1, 'pvValue'),)))
    IMFMediaEventQueue.QueueEventParamUnk = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head)(8, 'QueueEventParamUnk', ((1, 'met'),(1, 'guidExtendedType'),(1, 'hrStatus'),(1, 'pUnk'),)))
    IMFMediaEventQueue.Shutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(9, 'Shutdown', ()))
    win32more.System.Com.IUnknown
    return IMFMediaEventQueue
def _define_IMFMediaKeys_head():
    class IMFMediaKeys(win32more.System.Com.IUnknown_head):
        Guid = Guid('5cb31c05-61ff-418f-af-da-ca-af-41-42-1a-38')
    return IMFMediaKeys
def _define_IMFMediaKeys():
    IMFMediaKeys = win32more.Media.MediaFoundation.IMFMediaKeys_head
    IMFMediaKeys.CreateSession = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,c_char_p_no,UInt32,c_char_p_no,UInt32,win32more.Media.MediaFoundation.IMFMediaKeySessionNotify_head,POINTER(win32more.Media.MediaFoundation.IMFMediaKeySession_head))(3, 'CreateSession', ((1, 'mimeType'),(1, 'initData'),(1, 'cb'),(1, 'customData'),(1, 'cbCustomData'),(1, 'notify'),(1, 'ppSession'),)))
    IMFMediaKeys.get_KeySystem = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BSTR))(4, 'get_KeySystem', ((1, 'keySystem'),)))
    IMFMediaKeys.Shutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(5, 'Shutdown', ()))
    IMFMediaKeys.GetSuspendNotify = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFCdmSuspendNotify_head))(6, 'GetSuspendNotify', ((1, 'notify'),)))
    win32more.System.Com.IUnknown
    return IMFMediaKeys
def _define_IMFMediaKeys2_head():
    class IMFMediaKeys2(win32more.Media.MediaFoundation.IMFMediaKeys_head):
        Guid = Guid('45892507-ad66-4de2-83-a2-ac-bb-13-cd-8d-43')
    return IMFMediaKeys2
def _define_IMFMediaKeys2():
    IMFMediaKeys2 = win32more.Media.MediaFoundation.IMFMediaKeys2_head
    IMFMediaKeys2.CreateSession2 = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_MEDIAKEYSESSION_TYPE,win32more.Media.MediaFoundation.IMFMediaKeySessionNotify2_head,POINTER(win32more.Media.MediaFoundation.IMFMediaKeySession2_head))(7, 'CreateSession2', ((1, 'eSessionType'),(1, 'pMFMediaKeySessionNotify2'),(1, 'ppSession'),)))
    IMFMediaKeys2.SetServerCertificate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32)(8, 'SetServerCertificate', ((1, 'pbServerCertificate'),(1, 'cb'),)))
    IMFMediaKeys2.GetDOMException = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HRESULT,POINTER(win32more.Foundation.HRESULT))(9, 'GetDOMException', ((1, 'systemCode'),(1, 'code'),)))
    win32more.Media.MediaFoundation.IMFMediaKeys
    return IMFMediaKeys2
def _define_IMFMediaKeySession_head():
    class IMFMediaKeySession(win32more.System.Com.IUnknown_head):
        Guid = Guid('24fa67d5-d1d0-4dc5-99-5c-c0-ef-dc-19-1f-b5')
    return IMFMediaKeySession
def _define_IMFMediaKeySession():
    IMFMediaKeySession = win32more.Media.MediaFoundation.IMFMediaKeySession_head
    IMFMediaKeySession.GetError = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt16),POINTER(UInt32))(3, 'GetError', ((1, 'code'),(1, 'systemCode'),)))
    IMFMediaKeySession.get_KeySystem = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BSTR))(4, 'get_KeySystem', ((1, 'keySystem'),)))
    IMFMediaKeySession.get_SessionId = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BSTR))(5, 'get_SessionId', ((1, 'sessionId'),)))
    IMFMediaKeySession.Update = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32)(6, 'Update', ((1, 'key'),(1, 'cb'),)))
    IMFMediaKeySession.Close = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(7, 'Close', ()))
    win32more.System.Com.IUnknown
    return IMFMediaKeySession
def _define_IMFMediaKeySession2_head():
    class IMFMediaKeySession2(win32more.Media.MediaFoundation.IMFMediaKeySession_head):
        Guid = Guid('e9707e05-6d55-4636-b1-85-3d-e2-12-10-bd-75')
    return IMFMediaKeySession2
def _define_IMFMediaKeySession2():
    IMFMediaKeySession2 = win32more.Media.MediaFoundation.IMFMediaKeySession2_head
    IMFMediaKeySession2.get_KeyStatuses = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(POINTER(win32more.Media.MediaFoundation.MFMediaKeyStatus_head)),POINTER(UInt32))(8, 'get_KeyStatuses', ((1, 'pKeyStatusesArray'),(1, 'puSize'),)))
    IMFMediaKeySession2.Load = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,POINTER(win32more.Foundation.BOOL))(9, 'Load', ((1, 'bstrSessionId'),(1, 'pfLoaded'),)))
    IMFMediaKeySession2.GenerateRequest = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,c_char_p_no,UInt32)(10, 'GenerateRequest', ((1, 'initDataType'),(1, 'pbInitData'),(1, 'cb'),)))
    IMFMediaKeySession2.get_Expiration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Double))(11, 'get_Expiration', ((1, 'dblExpiration'),)))
    IMFMediaKeySession2.Remove = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(12, 'Remove', ()))
    IMFMediaKeySession2.Shutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(13, 'Shutdown', ()))
    win32more.Media.MediaFoundation.IMFMediaKeySession
    return IMFMediaKeySession2
def _define_IMFMediaKeySessionNotify_head():
    class IMFMediaKeySessionNotify(win32more.System.Com.IUnknown_head):
        Guid = Guid('6a0083f9-8947-4c1d-9c-e0-cd-ee-22-b2-31-35')
    return IMFMediaKeySessionNotify
def _define_IMFMediaKeySessionNotify():
    IMFMediaKeySessionNotify = win32more.Media.MediaFoundation.IMFMediaKeySessionNotify_head
    IMFMediaKeySessionNotify.KeyMessage = COMMETHOD(WINFUNCTYPE(Void,win32more.Foundation.BSTR,c_char_p_no,UInt32)(3, 'KeyMessage', ((1, 'destinationURL'),(1, 'message'),(1, 'cb'),)))
    IMFMediaKeySessionNotify.KeyAdded = COMMETHOD(WINFUNCTYPE(Void,)(4, 'KeyAdded', ()))
    IMFMediaKeySessionNotify.KeyError = COMMETHOD(WINFUNCTYPE(Void,UInt16,UInt32)(5, 'KeyError', ((1, 'code'),(1, 'systemCode'),)))
    win32more.System.Com.IUnknown
    return IMFMediaKeySessionNotify
def _define_IMFMediaKeySessionNotify2_head():
    class IMFMediaKeySessionNotify2(win32more.Media.MediaFoundation.IMFMediaKeySessionNotify_head):
        Guid = Guid('c3a9e92a-da88-46b0-a1-10-6c-f9-53-02-6c-b9')
    return IMFMediaKeySessionNotify2
def _define_IMFMediaKeySessionNotify2():
    IMFMediaKeySessionNotify2 = win32more.Media.MediaFoundation.IMFMediaKeySessionNotify2_head
    IMFMediaKeySessionNotify2.KeyMessage2 = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.MF_MEDIAKEYSESSION_MESSAGETYPE,win32more.Foundation.BSTR,c_char_p_no,UInt32)(6, 'KeyMessage2', ((1, 'eMessageType'),(1, 'destinationURL'),(1, 'pbMessage'),(1, 'cbMessage'),)))
    IMFMediaKeySessionNotify2.KeyStatusChange = COMMETHOD(WINFUNCTYPE(Void,)(7, 'KeyStatusChange', ()))
    win32more.Media.MediaFoundation.IMFMediaKeySessionNotify
    return IMFMediaKeySessionNotify2
def _define_IMFMediaKeySystemAccess_head():
    class IMFMediaKeySystemAccess(win32more.System.Com.IUnknown_head):
        Guid = Guid('aec63fda-7a97-4944-b3-5c-6c-6d-f8-08-5c-c3')
    return IMFMediaKeySystemAccess
def _define_IMFMediaKeySystemAccess():
    IMFMediaKeySystemAccess = win32more.Media.MediaFoundation.IMFMediaKeySystemAccess_head
    IMFMediaKeySystemAccess.CreateMediaKeys = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.UI.Shell.PropertiesSystem.IPropertyStore_head,POINTER(win32more.Media.MediaFoundation.IMFMediaKeys2_head))(3, 'CreateMediaKeys', ((1, 'pCdmCustomConfig'),(1, 'ppKeys'),)))
    IMFMediaKeySystemAccess.get_SupportedConfiguration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.UI.Shell.PropertiesSystem.IPropertyStore_head))(4, 'get_SupportedConfiguration', ((1, 'ppSupportedConfiguration'),)))
    IMFMediaKeySystemAccess.get_KeySystem = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BSTR))(5, 'get_KeySystem', ((1, 'pKeySystem'),)))
    win32more.System.Com.IUnknown
    return IMFMediaKeySystemAccess
def _define_IMFMediaSession_head():
    class IMFMediaSession(win32more.Media.MediaFoundation.IMFMediaEventGenerator_head):
        Guid = Guid('90377834-21d0-4dee-82-14-ba-2e-3e-6c-11-27')
    return IMFMediaSession
def _define_IMFMediaSession():
    IMFMediaSession = win32more.Media.MediaFoundation.IMFMediaSession_head
    IMFMediaSession.SetTopology = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFTopology_head)(7, 'SetTopology', ((1, 'dwSetTopologyFlags'),(1, 'pTopology'),)))
    IMFMediaSession.ClearTopologies = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(8, 'ClearTopologies', ()))
    IMFMediaSession.Start = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(9, 'Start', ((1, 'pguidTimeFormat'),(1, 'pvarStartPosition'),)))
    IMFMediaSession.Pause = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(10, 'Pause', ()))
    IMFMediaSession.Stop = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(11, 'Stop', ()))
    IMFMediaSession.Close = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(12, 'Close', ()))
    IMFMediaSession.Shutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(13, 'Shutdown', ()))
    IMFMediaSession.GetClock = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFClock_head))(14, 'GetClock', ((1, 'ppClock'),)))
    IMFMediaSession.GetSessionCapabilities = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(15, 'GetSessionCapabilities', ((1, 'pdwCaps'),)))
    IMFMediaSession.GetFullTopology = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt64,POINTER(win32more.Media.MediaFoundation.IMFTopology_head))(16, 'GetFullTopology', ((1, 'dwGetFullTopologyFlags'),(1, 'TopoId'),(1, 'ppFullTopology'),)))
    win32more.Media.MediaFoundation.IMFMediaEventGenerator
    return IMFMediaSession
def _define_IMFMediaSharingEngine_head():
    class IMFMediaSharingEngine(win32more.Media.MediaFoundation.IMFMediaEngine_head):
        Guid = Guid('8d3ce1bf-2367-40e0-9e-ee-40-d3-77-cc-1b-46')
    return IMFMediaSharingEngine
def _define_IMFMediaSharingEngine():
    IMFMediaSharingEngine = win32more.Media.MediaFoundation.IMFMediaSharingEngine_head
    IMFMediaSharingEngine.GetDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.DEVICE_INFO_head))(45, 'GetDevice', ((1, 'pDevice'),)))
    win32more.Media.MediaFoundation.IMFMediaEngine
    return IMFMediaSharingEngine
def _define_IMFMediaSharingEngineClassFactory_head():
    class IMFMediaSharingEngineClassFactory(win32more.System.Com.IUnknown_head):
        Guid = Guid('524d2bc4-b2b1-4fe5-8f-ac-fa-4e-45-12-b4-e0')
    return IMFMediaSharingEngineClassFactory
def _define_IMFMediaSharingEngineClassFactory():
    IMFMediaSharingEngineClassFactory = win32more.Media.MediaFoundation.IMFMediaSharingEngineClassFactory_head
    IMFMediaSharingEngineClassFactory.CreateInstance = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFMediaSharingEngine_head))(3, 'CreateInstance', ((1, 'dwFlags'),(1, 'pAttr'),(1, 'ppEngine'),)))
    win32more.System.Com.IUnknown
    return IMFMediaSharingEngineClassFactory
def _define_IMFMediaSink_head():
    class IMFMediaSink(win32more.System.Com.IUnknown_head):
        Guid = Guid('6ef2a660-47c0-4666-b1-3d-cb-b7-17-f2-fa-2c')
    return IMFMediaSink
def _define_IMFMediaSink():
    IMFMediaSink = win32more.Media.MediaFoundation.IMFMediaSink_head
    IMFMediaSink.GetCharacteristics = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'GetCharacteristics', ((1, 'pdwCharacteristics'),)))
    IMFMediaSink.AddStreamSink = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.IMFStreamSink_head))(4, 'AddStreamSink', ((1, 'dwStreamSinkIdentifier'),(1, 'pMediaType'),(1, 'ppStreamSink'),)))
    IMFMediaSink.RemoveStreamSink = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(5, 'RemoveStreamSink', ((1, 'dwStreamSinkIdentifier'),)))
    IMFMediaSink.GetStreamSinkCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(6, 'GetStreamSinkCount', ((1, 'pcStreamSinkCount'),)))
    IMFMediaSink.GetStreamSinkByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFStreamSink_head))(7, 'GetStreamSinkByIndex', ((1, 'dwIndex'),(1, 'ppStreamSink'),)))
    IMFMediaSink.GetStreamSinkById = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFStreamSink_head))(8, 'GetStreamSinkById', ((1, 'dwStreamSinkIdentifier'),(1, 'ppStreamSink'),)))
    IMFMediaSink.SetPresentationClock = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationClock_head)(9, 'SetPresentationClock', ((1, 'pPresentationClock'),)))
    IMFMediaSink.GetPresentationClock = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFPresentationClock_head))(10, 'GetPresentationClock', ((1, 'ppPresentationClock'),)))
    IMFMediaSink.Shutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(11, 'Shutdown', ()))
    win32more.System.Com.IUnknown
    return IMFMediaSink
def _define_IMFMediaSinkPreroll_head():
    class IMFMediaSinkPreroll(win32more.System.Com.IUnknown_head):
        Guid = Guid('5dfd4b2a-7674-4110-a4-e6-8a-68-fd-5f-36-88')
    return IMFMediaSinkPreroll
def _define_IMFMediaSinkPreroll():
    IMFMediaSinkPreroll = win32more.Media.MediaFoundation.IMFMediaSinkPreroll_head
    IMFMediaSinkPreroll.NotifyPreroll = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int64)(3, 'NotifyPreroll', ((1, 'hnsUpcomingStartTime'),)))
    win32more.System.Com.IUnknown
    return IMFMediaSinkPreroll
def _define_IMFMediaSource_head():
    class IMFMediaSource(win32more.Media.MediaFoundation.IMFMediaEventGenerator_head):
        Guid = Guid('279a808d-aec7-40c8-9c-6b-a6-b4-92-c7-8a-66')
    return IMFMediaSource
def _define_IMFMediaSource():
    IMFMediaSource = win32more.Media.MediaFoundation.IMFMediaSource_head
    IMFMediaSource.GetCharacteristics = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(7, 'GetCharacteristics', ((1, 'pdwCharacteristics'),)))
    IMFMediaSource.CreatePresentationDescriptor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFPresentationDescriptor_head))(8, 'CreatePresentationDescriptor', ((1, 'ppPresentationDescriptor'),)))
    IMFMediaSource.Start = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationDescriptor_head,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(9, 'Start', ((1, 'pPresentationDescriptor'),(1, 'pguidTimeFormat'),(1, 'pvarStartPosition'),)))
    IMFMediaSource.Stop = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(10, 'Stop', ()))
    IMFMediaSource.Pause = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(11, 'Pause', ()))
    IMFMediaSource.Shutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(12, 'Shutdown', ()))
    win32more.Media.MediaFoundation.IMFMediaEventGenerator
    return IMFMediaSource
def _define_IMFMediaSource2_head():
    class IMFMediaSource2(win32more.Media.MediaFoundation.IMFMediaSourceEx_head):
        Guid = Guid('fbb03414-d13b-4786-83-19-5a-c5-1f-c0-a1-36')
    return IMFMediaSource2
def _define_IMFMediaSource2():
    IMFMediaSource2 = win32more.Media.MediaFoundation.IMFMediaSource2_head
    IMFMediaSource2.SetMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head)(16, 'SetMediaType', ((1, 'dwStreamID'),(1, 'pMediaType'),)))
    win32more.Media.MediaFoundation.IMFMediaSourceEx
    return IMFMediaSource2
def _define_IMFMediaSourceEx_head():
    class IMFMediaSourceEx(win32more.Media.MediaFoundation.IMFMediaSource_head):
        Guid = Guid('3c9b2eb9-86d5-4514-a3-94-f5-66-64-f9-f0-d8')
    return IMFMediaSourceEx
def _define_IMFMediaSourceEx():
    IMFMediaSourceEx = win32more.Media.MediaFoundation.IMFMediaSourceEx_head
    IMFMediaSourceEx.GetSourceAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head))(13, 'GetSourceAttributes', ((1, 'ppAttributes'),)))
    IMFMediaSourceEx.GetStreamAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head))(14, 'GetStreamAttributes', ((1, 'dwStreamIdentifier'),(1, 'ppAttributes'),)))
    IMFMediaSourceEx.SetD3DManager = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head)(15, 'SetD3DManager', ((1, 'pManager'),)))
    win32more.Media.MediaFoundation.IMFMediaSource
    return IMFMediaSourceEx
def _define_IMFMediaSourceExtension_head():
    class IMFMediaSourceExtension(win32more.System.Com.IUnknown_head):
        Guid = Guid('e467b94e-a713-4562-a8-02-81-6a-42-e9-00-8a')
    return IMFMediaSourceExtension
def _define_IMFMediaSourceExtension():
    IMFMediaSourceExtension = win32more.Media.MediaFoundation.IMFMediaSourceExtension_head
    IMFMediaSourceExtension.GetSourceBuffers = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.IMFSourceBufferList_head,)(3, 'GetSourceBuffers', ()))
    IMFMediaSourceExtension.GetActiveSourceBuffers = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.IMFSourceBufferList_head,)(4, 'GetActiveSourceBuffers', ()))
    IMFMediaSourceExtension.GetReadyState = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.MF_MSE_READY,)(5, 'GetReadyState', ()))
    IMFMediaSourceExtension.GetDuration = COMMETHOD(WINFUNCTYPE(Double,)(6, 'GetDuration', ()))
    IMFMediaSourceExtension.SetDuration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double)(7, 'SetDuration', ((1, 'duration'),)))
    IMFMediaSourceExtension.AddSourceBuffer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,win32more.Media.MediaFoundation.IMFSourceBufferNotify_head,POINTER(win32more.Media.MediaFoundation.IMFSourceBuffer_head))(8, 'AddSourceBuffer', ((1, 'type'),(1, 'pNotify'),(1, 'ppSourceBuffer'),)))
    IMFMediaSourceExtension.RemoveSourceBuffer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSourceBuffer_head)(9, 'RemoveSourceBuffer', ((1, 'pSourceBuffer'),)))
    IMFMediaSourceExtension.SetEndOfStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_MSE_ERROR)(10, 'SetEndOfStream', ((1, 'error'),)))
    IMFMediaSourceExtension.IsTypeSupported = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.BSTR)(11, 'IsTypeSupported', ((1, 'type'),)))
    IMFMediaSourceExtension.GetSourceBuffer = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.IMFSourceBuffer_head,UInt32)(12, 'GetSourceBuffer', ((1, 'dwStreamIndex'),)))
    win32more.System.Com.IUnknown
    return IMFMediaSourceExtension
def _define_IMFMediaSourceExtensionLiveSeekableRange_head():
    class IMFMediaSourceExtensionLiveSeekableRange(win32more.System.Com.IUnknown_head):
        Guid = Guid('5d1abfd6-450a-4d92-9e-fc-d6-b6-cb-c1-f4-da')
    return IMFMediaSourceExtensionLiveSeekableRange
def _define_IMFMediaSourceExtensionLiveSeekableRange():
    IMFMediaSourceExtensionLiveSeekableRange = win32more.Media.MediaFoundation.IMFMediaSourceExtensionLiveSeekableRange_head
    IMFMediaSourceExtensionLiveSeekableRange.SetLiveSeekableRange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double,Double)(3, 'SetLiveSeekableRange', ((1, 'start'),(1, 'end'),)))
    IMFMediaSourceExtensionLiveSeekableRange.ClearLiveSeekableRange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(4, 'ClearLiveSeekableRange', ()))
    win32more.System.Com.IUnknown
    return IMFMediaSourceExtensionLiveSeekableRange
def _define_IMFMediaSourceExtensionNotify_head():
    class IMFMediaSourceExtensionNotify(win32more.System.Com.IUnknown_head):
        Guid = Guid('a7901327-05dd-4469-a7-b7-0e-01-97-9e-36-1d')
    return IMFMediaSourceExtensionNotify
def _define_IMFMediaSourceExtensionNotify():
    IMFMediaSourceExtensionNotify = win32more.Media.MediaFoundation.IMFMediaSourceExtensionNotify_head
    IMFMediaSourceExtensionNotify.OnSourceOpen = COMMETHOD(WINFUNCTYPE(Void,)(3, 'OnSourceOpen', ()))
    IMFMediaSourceExtensionNotify.OnSourceEnded = COMMETHOD(WINFUNCTYPE(Void,)(4, 'OnSourceEnded', ()))
    IMFMediaSourceExtensionNotify.OnSourceClose = COMMETHOD(WINFUNCTYPE(Void,)(5, 'OnSourceClose', ()))
    win32more.System.Com.IUnknown
    return IMFMediaSourceExtensionNotify
def _define_IMFMediaSourcePresentationProvider_head():
    class IMFMediaSourcePresentationProvider(win32more.System.Com.IUnknown_head):
        Guid = Guid('0e1d600a-c9f3-442d-8c-51-a4-2d-2d-49-45-2f')
    return IMFMediaSourcePresentationProvider
def _define_IMFMediaSourcePresentationProvider():
    IMFMediaSourcePresentationProvider = win32more.Media.MediaFoundation.IMFMediaSourcePresentationProvider_head
    IMFMediaSourcePresentationProvider.ForceEndOfPresentation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationDescriptor_head)(3, 'ForceEndOfPresentation', ((1, 'pPresentationDescriptor'),)))
    win32more.System.Com.IUnknown
    return IMFMediaSourcePresentationProvider
def _define_IMFMediaSourceTopologyProvider_head():
    class IMFMediaSourceTopologyProvider(win32more.System.Com.IUnknown_head):
        Guid = Guid('0e1d6009-c9f3-442d-8c-51-a4-2d-2d-49-45-2f')
    return IMFMediaSourceTopologyProvider
def _define_IMFMediaSourceTopologyProvider():
    IMFMediaSourceTopologyProvider = win32more.Media.MediaFoundation.IMFMediaSourceTopologyProvider_head
    IMFMediaSourceTopologyProvider.GetMediaSourceTopology = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationDescriptor_head,POINTER(win32more.Media.MediaFoundation.IMFTopology_head))(3, 'GetMediaSourceTopology', ((1, 'pPresentationDescriptor'),(1, 'ppTopology'),)))
    win32more.System.Com.IUnknown
    return IMFMediaSourceTopologyProvider
def _define_IMFMediaStream_head():
    class IMFMediaStream(win32more.Media.MediaFoundation.IMFMediaEventGenerator_head):
        Guid = Guid('d182108f-4ec6-443f-aa-42-a7-11-06-ec-82-5f')
    return IMFMediaStream
def _define_IMFMediaStream():
    IMFMediaStream = win32more.Media.MediaFoundation.IMFMediaStream_head
    IMFMediaStream.GetMediaSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaSource_head))(7, 'GetMediaSource', ((1, 'ppMediaSource'),)))
    IMFMediaStream.GetStreamDescriptor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFStreamDescriptor_head))(8, 'GetStreamDescriptor', ((1, 'ppStreamDescriptor'),)))
    IMFMediaStream.RequestSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head)(9, 'RequestSample', ((1, 'pToken'),)))
    win32more.Media.MediaFoundation.IMFMediaEventGenerator
    return IMFMediaStream
def _define_IMFMediaStream2_head():
    class IMFMediaStream2(win32more.Media.MediaFoundation.IMFMediaStream_head):
        Guid = Guid('c5bc37d6-75c7-46a1-a1-32-81-b5-f7-23-c2-0f')
    return IMFMediaStream2
def _define_IMFMediaStream2():
    IMFMediaStream2 = win32more.Media.MediaFoundation.IMFMediaStream2_head
    IMFMediaStream2.SetStreamState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_STREAM_STATE)(10, 'SetStreamState', ((1, 'value'),)))
    IMFMediaStream2.GetStreamState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_STREAM_STATE))(11, 'GetStreamState', ((1, 'value'),)))
    win32more.Media.MediaFoundation.IMFMediaStream
    return IMFMediaStream2
def _define_IMFMediaStreamSourceSampleRequest_head():
    class IMFMediaStreamSourceSampleRequest(win32more.System.Com.IUnknown_head):
        Guid = Guid('380b9af9-a85b-4e78-a2-af-ea-5c-e6-45-c6-b4')
    return IMFMediaStreamSourceSampleRequest
def _define_IMFMediaStreamSourceSampleRequest():
    IMFMediaStreamSourceSampleRequest = win32more.Media.MediaFoundation.IMFMediaStreamSourceSampleRequest_head
    IMFMediaStreamSourceSampleRequest.SetSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSample_head)(3, 'SetSample', ((1, 'value'),)))
    win32more.System.Com.IUnknown
    return IMFMediaStreamSourceSampleRequest
def _define_IMFMediaTimeRange_head():
    class IMFMediaTimeRange(win32more.System.Com.IUnknown_head):
        Guid = Guid('db71a2fc-078a-414e-9d-f9-8c-25-31-b0-aa-6c')
    return IMFMediaTimeRange
def _define_IMFMediaTimeRange():
    IMFMediaTimeRange = win32more.Media.MediaFoundation.IMFMediaTimeRange_head
    IMFMediaTimeRange.GetLength = COMMETHOD(WINFUNCTYPE(UInt32,)(3, 'GetLength', ()))
    IMFMediaTimeRange.GetStart = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Double))(4, 'GetStart', ((1, 'index'),(1, 'pStart'),)))
    IMFMediaTimeRange.GetEnd = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Double))(5, 'GetEnd', ((1, 'index'),(1, 'pEnd'),)))
    IMFMediaTimeRange.ContainsTime = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL,Double)(6, 'ContainsTime', ((1, 'time'),)))
    IMFMediaTimeRange.AddRange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double,Double)(7, 'AddRange', ((1, 'startTime'),(1, 'endTime'),)))
    IMFMediaTimeRange.Clear = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(8, 'Clear', ()))
    win32more.System.Com.IUnknown
    return IMFMediaTimeRange
def _define_IMFMediaType_head():
    class IMFMediaType(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('44ae0fa8-ea31-4109-8d-2e-4c-ae-49-97-c5-55')
    return IMFMediaType
def _define_IMFMediaType():
    IMFMediaType = win32more.Media.MediaFoundation.IMFMediaType_head
    IMFMediaType.GetMajorType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid))(33, 'GetMajorType', ((1, 'pguidMajorType'),)))
    IMFMediaType.IsCompressedFormat = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(34, 'IsCompressedFormat', ((1, 'pfCompressed'),)))
    IMFMediaType.IsEqual = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(UInt32))(35, 'IsEqual', ((1, 'pIMediaType'),(1, 'pdwFlags'),)))
    IMFMediaType.GetRepresentation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,POINTER(c_void_p))(36, 'GetRepresentation', ((1, 'guidRepresentation'),(1, 'ppvRepresentation'),)))
    IMFMediaType.FreeRepresentation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,c_void_p)(37, 'FreeRepresentation', ((1, 'guidRepresentation'),(1, 'pvRepresentation'),)))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFMediaType
def _define_IMFMediaTypeHandler_head():
    class IMFMediaTypeHandler(win32more.System.Com.IUnknown_head):
        Guid = Guid('e93dcf6c-4b07-4e1e-81-23-aa-16-ed-6e-ad-f5')
    return IMFMediaTypeHandler
def _define_IMFMediaTypeHandler():
    IMFMediaTypeHandler = win32more.Media.MediaFoundation.IMFMediaTypeHandler_head
    IMFMediaTypeHandler.IsMediaTypeSupported = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(3, 'IsMediaTypeSupported', ((1, 'pMediaType'),(1, 'ppMediaType'),)))
    IMFMediaTypeHandler.GetMediaTypeCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(4, 'GetMediaTypeCount', ((1, 'pdwTypeCount'),)))
    IMFMediaTypeHandler.GetMediaTypeByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(5, 'GetMediaTypeByIndex', ((1, 'dwIndex'),(1, 'ppType'),)))
    IMFMediaTypeHandler.SetCurrentMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head)(6, 'SetCurrentMediaType', ((1, 'pMediaType'),)))
    IMFMediaTypeHandler.GetCurrentMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(7, 'GetCurrentMediaType', ((1, 'ppMediaType'),)))
    IMFMediaTypeHandler.GetMajorType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid))(8, 'GetMajorType', ((1, 'pguidMajorType'),)))
    win32more.System.Com.IUnknown
    return IMFMediaTypeHandler
def _define_IMFMetadata_head():
    class IMFMetadata(win32more.System.Com.IUnknown_head):
        Guid = Guid('f88cfb8c-ef16-4991-b4-50-cb-8c-69-e5-17-04')
    return IMFMetadata
def _define_IMFMetadata():
    IMFMetadata = win32more.Media.MediaFoundation.IMFMetadata_head
    IMFMetadata.SetLanguage = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR)(3, 'SetLanguage', ((1, 'pwszRFC1766'),)))
    IMFMetadata.GetLanguage = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(4, 'GetLanguage', ((1, 'ppwszRFC1766'),)))
    IMFMetadata.GetAllLanguages = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(5, 'GetAllLanguages', ((1, 'ppvLanguages'),)))
    IMFMetadata.SetProperty = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(6, 'SetProperty', ((1, 'pwszName'),(1, 'ppvValue'),)))
    IMFMetadata.GetProperty = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(7, 'GetProperty', ((1, 'pwszName'),(1, 'ppvValue'),)))
    IMFMetadata.DeleteProperty = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR)(8, 'DeleteProperty', ((1, 'pwszName'),)))
    IMFMetadata.GetAllPropertyNames = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(9, 'GetAllPropertyNames', ((1, 'ppvNames'),)))
    win32more.System.Com.IUnknown
    return IMFMetadata
def _define_IMFMetadataProvider_head():
    class IMFMetadataProvider(win32more.System.Com.IUnknown_head):
        Guid = Guid('56181d2d-e221-4adb-b1-c8-3c-ee-6a-53-f7-6f')
    return IMFMetadataProvider
def _define_IMFMetadataProvider():
    IMFMetadataProvider = win32more.Media.MediaFoundation.IMFMetadataProvider_head
    IMFMetadataProvider.GetMFMetadata = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationDescriptor_head,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMetadata_head))(3, 'GetMFMetadata', ((1, 'pPresentationDescriptor'),(1, 'dwStreamIdentifier'),(1, 'dwFlags'),(1, 'ppMFMetadata'),)))
    win32more.System.Com.IUnknown
    return IMFMetadataProvider
def _define_IMFMuxStreamAttributesManager_head():
    class IMFMuxStreamAttributesManager(win32more.System.Com.IUnknown_head):
        Guid = Guid('ce8bd576-e440-43b3-be-34-1e-53-f5-65-f7-e8')
    return IMFMuxStreamAttributesManager
def _define_IMFMuxStreamAttributesManager():
    IMFMuxStreamAttributesManager = win32more.Media.MediaFoundation.IMFMuxStreamAttributesManager_head
    IMFMuxStreamAttributesManager.GetStreamCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'GetStreamCount', ((1, 'pdwMuxStreamCount'),)))
    IMFMuxStreamAttributesManager.GetAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head))(4, 'GetAttributes', ((1, 'dwMuxStreamIndex'),(1, 'ppStreamAttributes'),)))
    win32more.System.Com.IUnknown
    return IMFMuxStreamAttributesManager
def _define_IMFMuxStreamMediaTypeManager_head():
    class IMFMuxStreamMediaTypeManager(win32more.System.Com.IUnknown_head):
        Guid = Guid('505a2c72-42f7-4690-ae-ab-8f-51-3d-0f-fd-b8')
    return IMFMuxStreamMediaTypeManager
def _define_IMFMuxStreamMediaTypeManager():
    IMFMuxStreamMediaTypeManager = win32more.Media.MediaFoundation.IMFMuxStreamMediaTypeManager_head
    IMFMuxStreamMediaTypeManager.GetStreamCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'GetStreamCount', ((1, 'pdwMuxStreamCount'),)))
    IMFMuxStreamMediaTypeManager.GetMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(4, 'GetMediaType', ((1, 'dwMuxStreamIndex'),(1, 'ppMediaType'),)))
    IMFMuxStreamMediaTypeManager.GetStreamConfigurationCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(5, 'GetStreamConfigurationCount', ((1, 'pdwCount'),)))
    IMFMuxStreamMediaTypeManager.AddStreamConfiguration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64)(6, 'AddStreamConfiguration', ((1, 'ullStreamMask'),)))
    IMFMuxStreamMediaTypeManager.RemoveStreamConfiguration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64)(7, 'RemoveStreamConfiguration', ((1, 'ullStreamMask'),)))
    IMFMuxStreamMediaTypeManager.GetStreamConfiguration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt64))(8, 'GetStreamConfiguration', ((1, 'ulIndex'),(1, 'pullStreamMask'),)))
    win32more.System.Com.IUnknown
    return IMFMuxStreamMediaTypeManager
def _define_IMFMuxStreamSampleManager_head():
    class IMFMuxStreamSampleManager(win32more.System.Com.IUnknown_head):
        Guid = Guid('74abbc19-b1cc-4e41-bb-8b-9d-9b-86-a8-f6-ca')
    return IMFMuxStreamSampleManager
def _define_IMFMuxStreamSampleManager():
    IMFMuxStreamSampleManager = win32more.Media.MediaFoundation.IMFMuxStreamSampleManager_head
    IMFMuxStreamSampleManager.GetStreamCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'GetStreamCount', ((1, 'pdwMuxStreamCount'),)))
    IMFMuxStreamSampleManager.GetSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFSample_head))(4, 'GetSample', ((1, 'dwMuxStreamIndex'),(1, 'ppSample'),)))
    IMFMuxStreamSampleManager.GetStreamConfiguration = COMMETHOD(WINFUNCTYPE(UInt64,)(5, 'GetStreamConfiguration', ()))
    win32more.System.Com.IUnknown
    return IMFMuxStreamSampleManager
def _define_IMFNetCredential_head():
    class IMFNetCredential(win32more.System.Com.IUnknown_head):
        Guid = Guid('5b87ef6a-7ed8-434f-ba-0e-18-4f-ac-16-28-d1')
    return IMFNetCredential
def _define_IMFNetCredential():
    IMFNetCredential = win32more.Media.MediaFoundation.IMFNetCredential_head
    IMFNetCredential.SetUser = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32,win32more.Foundation.BOOL)(3, 'SetUser', ((1, 'pbData'),(1, 'cbData'),(1, 'fDataIsEncrypted'),)))
    IMFNetCredential.SetPassword = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32,win32more.Foundation.BOOL)(4, 'SetPassword', ((1, 'pbData'),(1, 'cbData'),(1, 'fDataIsEncrypted'),)))
    IMFNetCredential.GetUser = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,POINTER(UInt32),win32more.Foundation.BOOL)(5, 'GetUser', ((1, 'pbData'),(1, 'pcbData'),(1, 'fEncryptData'),)))
    IMFNetCredential.GetPassword = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,POINTER(UInt32),win32more.Foundation.BOOL)(6, 'GetPassword', ((1, 'pbData'),(1, 'pcbData'),(1, 'fEncryptData'),)))
    IMFNetCredential.LoggedOnUser = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(7, 'LoggedOnUser', ((1, 'pfLoggedOnUser'),)))
    win32more.System.Com.IUnknown
    return IMFNetCredential
def _define_IMFNetCredentialCache_head():
    class IMFNetCredentialCache(win32more.System.Com.IUnknown_head):
        Guid = Guid('5b87ef6c-7ed8-434f-ba-0e-18-4f-ac-16-28-d1')
    return IMFNetCredentialCache
def _define_IMFNetCredentialCache():
    IMFNetCredentialCache = win32more.Media.MediaFoundation.IMFNetCredentialCache_head
    IMFNetCredentialCache.GetCredential = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,POINTER(win32more.Media.MediaFoundation.IMFNetCredential_head),POINTER(UInt32))(3, 'GetCredential', ((1, 'pszUrl'),(1, 'pszRealm'),(1, 'dwAuthenticationFlags'),(1, 'ppCred'),(1, 'pdwRequirementsFlags'),)))
    IMFNetCredentialCache.SetGood = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFNetCredential_head,win32more.Foundation.BOOL)(4, 'SetGood', ((1, 'pCred'),(1, 'fGood'),)))
    IMFNetCredentialCache.SetUserOptions = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFNetCredential_head,UInt32)(5, 'SetUserOptions', ((1, 'pCred'),(1, 'dwOptionsFlags'),)))
    win32more.System.Com.IUnknown
    return IMFNetCredentialCache
def _define_IMFNetCredentialManager_head():
    class IMFNetCredentialManager(win32more.System.Com.IUnknown_head):
        Guid = Guid('5b87ef6b-7ed8-434f-ba-0e-18-4f-ac-16-28-d1')
    return IMFNetCredentialManager
def _define_IMFNetCredentialManager():
    IMFNetCredentialManager = win32more.Media.MediaFoundation.IMFNetCredentialManager_head
    IMFNetCredentialManager.BeginGetCredentials = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFNetCredentialManagerGetParam_head),win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(3, 'BeginGetCredentials', ((1, 'pParam'),(1, 'pCallback'),(1, 'pState'),)))
    IMFNetCredentialManager.EndGetCredentials = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(win32more.Media.MediaFoundation.IMFNetCredential_head))(4, 'EndGetCredentials', ((1, 'pResult'),(1, 'ppCred'),)))
    IMFNetCredentialManager.SetGood = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFNetCredential_head,win32more.Foundation.BOOL)(5, 'SetGood', ((1, 'pCred'),(1, 'fGood'),)))
    win32more.System.Com.IUnknown
    return IMFNetCredentialManager
def _define_IMFNetCrossOriginSupport_head():
    class IMFNetCrossOriginSupport(win32more.System.Com.IUnknown_head):
        Guid = Guid('bc2b7d44-a72d-49d5-83-76-14-80-de-e5-8b-22')
    return IMFNetCrossOriginSupport
def _define_IMFNetCrossOriginSupport():
    IMFNetCrossOriginSupport = win32more.Media.MediaFoundation.IMFNetCrossOriginSupport_head
    IMFNetCrossOriginSupport.GetCrossOriginPolicy = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_CROSS_ORIGIN_POLICY))(3, 'GetCrossOriginPolicy', ((1, 'pPolicy'),)))
    IMFNetCrossOriginSupport.GetSourceOrigin = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(4, 'GetSourceOrigin', ((1, 'wszSourceOrigin'),)))
    IMFNetCrossOriginSupport.IsSameOrigin = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Foundation.BOOL))(5, 'IsSameOrigin', ((1, 'wszURL'),(1, 'pfIsSameOrigin'),)))
    win32more.System.Com.IUnknown
    return IMFNetCrossOriginSupport
def _define_IMFNetProxyLocator_head():
    class IMFNetProxyLocator(win32more.System.Com.IUnknown_head):
        Guid = Guid('e9cd0383-a268-4bb4-82-de-65-8d-53-57-4d-41')
    return IMFNetProxyLocator
def _define_IMFNetProxyLocator():
    IMFNetProxyLocator = win32more.Media.MediaFoundation.IMFNetProxyLocator_head
    IMFNetProxyLocator.FindFirstProxy = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.BOOL)(3, 'FindFirstProxy', ((1, 'pszHost'),(1, 'pszUrl'),(1, 'fReserved'),)))
    IMFNetProxyLocator.FindNextProxy = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(4, 'FindNextProxy', ()))
    IMFNetProxyLocator.RegisterProxyResult = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HRESULT)(5, 'RegisterProxyResult', ((1, 'hrOp'),)))
    IMFNetProxyLocator.GetCurrentProxy = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(UInt32))(6, 'GetCurrentProxy', ((1, 'pszStr'),(1, 'pcchStr'),)))
    IMFNetProxyLocator.Clone = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFNetProxyLocator_head))(7, 'Clone', ((1, 'ppProxyLocator'),)))
    win32more.System.Com.IUnknown
    return IMFNetProxyLocator
def _define_IMFNetProxyLocatorFactory_head():
    class IMFNetProxyLocatorFactory(win32more.System.Com.IUnknown_head):
        Guid = Guid('e9cd0384-a268-4bb4-82-de-65-8d-53-57-4d-41')
    return IMFNetProxyLocatorFactory
def _define_IMFNetProxyLocatorFactory():
    IMFNetProxyLocatorFactory = win32more.Media.MediaFoundation.IMFNetProxyLocatorFactory_head
    IMFNetProxyLocatorFactory.CreateProxyLocator = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.IMFNetProxyLocator_head))(3, 'CreateProxyLocator', ((1, 'pszProtocol'),(1, 'ppProxyLocator'),)))
    win32more.System.Com.IUnknown
    return IMFNetProxyLocatorFactory
def _define_IMFNetResourceFilter_head():
    class IMFNetResourceFilter(win32more.System.Com.IUnknown_head):
        Guid = Guid('091878a3-bf11-4a5c-bc-9f-33-99-5b-06-ef-2d')
    return IMFNetResourceFilter
def _define_IMFNetResourceFilter():
    IMFNetResourceFilter = win32more.Media.MediaFoundation.IMFNetResourceFilter_head
    IMFNetResourceFilter.OnRedirect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Foundation.VARIANT_BOOL))(3, 'OnRedirect', ((1, 'pszUrl'),(1, 'pvbCancel'),)))
    IMFNetResourceFilter.OnSendingRequest = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR)(4, 'OnSendingRequest', ((1, 'pszUrl'),)))
    win32more.System.Com.IUnknown
    return IMFNetResourceFilter
def _define_IMFNetSchemeHandlerConfig_head():
    class IMFNetSchemeHandlerConfig(win32more.System.Com.IUnknown_head):
        Guid = Guid('7be19e73-c9bf-468a-ac-5a-a5-e8-65-3b-ec-87')
    return IMFNetSchemeHandlerConfig
def _define_IMFNetSchemeHandlerConfig():
    IMFNetSchemeHandlerConfig = win32more.Media.MediaFoundation.IMFNetSchemeHandlerConfig_head
    IMFNetSchemeHandlerConfig.GetNumberOfSupportedProtocols = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'GetNumberOfSupportedProtocols', ((1, 'pcProtocols'),)))
    IMFNetSchemeHandlerConfig.GetSupportedProtocolType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.MFNETSOURCE_PROTOCOL_TYPE))(4, 'GetSupportedProtocolType', ((1, 'nProtocolIndex'),(1, 'pnProtocolType'),)))
    IMFNetSchemeHandlerConfig.ResetProtocolRolloverSettings = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(5, 'ResetProtocolRolloverSettings', ()))
    win32more.System.Com.IUnknown
    return IMFNetSchemeHandlerConfig
def _define_IMFObjectReferenceStream_head():
    class IMFObjectReferenceStream(win32more.System.Com.IUnknown_head):
        Guid = Guid('09ef5be3-c8a7-469e-8b-70-73-bf-25-bb-19-3f')
    return IMFObjectReferenceStream
def _define_IMFObjectReferenceStream():
    IMFObjectReferenceStream = win32more.Media.MediaFoundation.IMFObjectReferenceStream_head
    IMFObjectReferenceStream.SaveReference = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),win32more.System.Com.IUnknown_head)(3, 'SaveReference', ((1, 'riid'),(1, 'pUnk'),)))
    IMFObjectReferenceStream.LoadReference = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p))(4, 'LoadReference', ((1, 'riid'),(1, 'ppv'),)))
    win32more.System.Com.IUnknown
    return IMFObjectReferenceStream
def _define_IMFOutputPolicy_head():
    class IMFOutputPolicy(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('7f00f10a-daed-41af-ab-26-5f-df-a4-df-ba-3c')
    return IMFOutputPolicy
def _define_IMFOutputPolicy():
    IMFOutputPolicy = win32more.Media.MediaFoundation.IMFOutputPolicy_head
    IMFOutputPolicy.GenerateRequiredSchemas = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,Guid,POINTER(Guid),UInt32,POINTER(win32more.Media.MediaFoundation.IMFCollection_head))(33, 'GenerateRequiredSchemas', ((1, 'dwAttributes'),(1, 'guidOutputSubType'),(1, 'rgGuidProtectionSchemasSupported'),(1, 'cProtectionSchemasSupported'),(1, 'ppRequiredProtectionSchemas'),)))
    IMFOutputPolicy.GetOriginatorID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid))(34, 'GetOriginatorID', ((1, 'pguidOriginatorID'),)))
    IMFOutputPolicy.GetMinimumGRLVersion = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(35, 'GetMinimumGRLVersion', ((1, 'pdwMinimumGRLVersion'),)))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFOutputPolicy
def _define_IMFOutputSchema_head():
    class IMFOutputSchema(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('7be0fc5b-abd9-44fb-a5-c8-f5-01-36-e7-15-99')
    return IMFOutputSchema
def _define_IMFOutputSchema():
    IMFOutputSchema = win32more.Media.MediaFoundation.IMFOutputSchema_head
    IMFOutputSchema.GetSchemaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid))(33, 'GetSchemaType', ((1, 'pguidSchemaType'),)))
    IMFOutputSchema.GetConfigurationData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(34, 'GetConfigurationData', ((1, 'pdwVal'),)))
    IMFOutputSchema.GetOriginatorID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid))(35, 'GetOriginatorID', ((1, 'pguidOriginatorID'),)))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFOutputSchema
def _define_IMFOutputTrustAuthority_head():
    class IMFOutputTrustAuthority(win32more.System.Com.IUnknown_head):
        Guid = Guid('d19f8e94-b126-4446-89-0c-5d-cb-7a-d7-14-53')
    return IMFOutputTrustAuthority
def _define_IMFOutputTrustAuthority():
    IMFOutputTrustAuthority = win32more.Media.MediaFoundation.IMFOutputTrustAuthority_head
    IMFOutputTrustAuthority.GetAction = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFPOLICYMANAGER_ACTION))(3, 'GetAction', ((1, 'pAction'),)))
    IMFOutputTrustAuthority.SetPolicy = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFOutputPolicy_head),UInt32,POINTER(c_char_p_no),POINTER(UInt32))(4, 'SetPolicy', ((1, 'ppPolicy'),(1, 'nPolicy'),(1, 'ppbTicket'),(1, 'pcbTicket'),)))
    win32more.System.Com.IUnknown
    return IMFOutputTrustAuthority
def _define_IMFPluginControl_head():
    class IMFPluginControl(win32more.System.Com.IUnknown_head):
        Guid = Guid('5c6c44bf-1db6-435b-92-49-e8-cd-10-fd-ec-96')
    return IMFPluginControl
def _define_IMFPluginControl():
    IMFPluginControl = win32more.Media.MediaFoundation.IMFPluginControl_head
    IMFPluginControl.GetPreferredClsid = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.PWSTR,POINTER(Guid))(3, 'GetPreferredClsid', ((1, 'pluginType'),(1, 'selector'),(1, 'clsid'),)))
    IMFPluginControl.GetPreferredClsidByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(win32more.Foundation.PWSTR),POINTER(Guid))(4, 'GetPreferredClsidByIndex', ((1, 'pluginType'),(1, 'index'),(1, 'selector'),(1, 'clsid'),)))
    IMFPluginControl.SetPreferredClsid = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.PWSTR,POINTER(Guid))(5, 'SetPreferredClsid', ((1, 'pluginType'),(1, 'selector'),(1, 'clsid'),)))
    IMFPluginControl.IsDisabled = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid))(6, 'IsDisabled', ((1, 'pluginType'),(1, 'clsid'),)))
    IMFPluginControl.GetDisabledByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(Guid))(7, 'GetDisabledByIndex', ((1, 'pluginType'),(1, 'index'),(1, 'clsid'),)))
    IMFPluginControl.SetDisabled = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),win32more.Foundation.BOOL)(8, 'SetDisabled', ((1, 'pluginType'),(1, 'clsid'),(1, 'disabled'),)))
    win32more.System.Com.IUnknown
    return IMFPluginControl
def _define_IMFPluginControl2_head():
    class IMFPluginControl2(win32more.Media.MediaFoundation.IMFPluginControl_head):
        Guid = Guid('c6982083-3ddc-45cb-af-5e-0f-7a-8c-e4-de-77')
    return IMFPluginControl2
def _define_IMFPluginControl2():
    IMFPluginControl2 = win32more.Media.MediaFoundation.IMFPluginControl2_head
    IMFPluginControl2.SetPolicy = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_PLUGIN_CONTROL_POLICY)(9, 'SetPolicy', ((1, 'policy'),)))
    win32more.Media.MediaFoundation.IMFPluginControl
    return IMFPluginControl2
def _define_IMFPMediaItem_head():
    class IMFPMediaItem(win32more.System.Com.IUnknown_head):
        Guid = Guid('90eb3e6b-ecbf-45cc-b1-da-c6-fe-3e-a7-0d-57')
    return IMFPMediaItem
def _define_IMFPMediaItem():
    IMFPMediaItem = win32more.Media.MediaFoundation.IMFPMediaItem_head
    IMFPMediaItem.GetMediaPlayer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFPMediaPlayer_head))(3, 'GetMediaPlayer', ((1, 'ppMediaPlayer'),)))
    IMFPMediaItem.GetURL = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(4, 'GetURL', ((1, 'ppwszURL'),)))
    IMFPMediaItem.GetObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.IUnknown_head))(5, 'GetObject', ((1, 'ppIUnknown'),)))
    IMFPMediaItem.GetUserData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UIntPtr))(6, 'GetUserData', ((1, 'pdwUserData'),)))
    IMFPMediaItem.SetUserData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UIntPtr)(7, 'SetUserData', ((1, 'dwUserData'),)))
    IMFPMediaItem.GetStartStopPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head),POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(8, 'GetStartStopPosition', ((1, 'pguidStartPositionType'),(1, 'pvStartValue'),(1, 'pguidStopPositionType'),(1, 'pvStopValue'),)))
    IMFPMediaItem.SetStartStopPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head),POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(9, 'SetStartStopPosition', ((1, 'pguidStartPositionType'),(1, 'pvStartValue'),(1, 'pguidStopPositionType'),(1, 'pvStopValue'),)))
    IMFPMediaItem.HasVideo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL),POINTER(win32more.Foundation.BOOL))(10, 'HasVideo', ((1, 'pfHasVideo'),(1, 'pfSelected'),)))
    IMFPMediaItem.HasAudio = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL),POINTER(win32more.Foundation.BOOL))(11, 'HasAudio', ((1, 'pfHasAudio'),(1, 'pfSelected'),)))
    IMFPMediaItem.IsProtected = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(12, 'IsProtected', ((1, 'pfProtected'),)))
    IMFPMediaItem.GetDuration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(13, 'GetDuration', ((1, 'guidPositionType'),(1, 'pvDurationValue'),)))
    IMFPMediaItem.GetNumberOfStreams = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(14, 'GetNumberOfStreams', ((1, 'pdwStreamCount'),)))
    IMFPMediaItem.GetStreamSelection = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Foundation.BOOL))(15, 'GetStreamSelection', ((1, 'dwStreamIndex'),(1, 'pfEnabled'),)))
    IMFPMediaItem.SetStreamSelection = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.BOOL)(16, 'SetStreamSelection', ((1, 'dwStreamIndex'),(1, 'fEnabled'),)))
    IMFPMediaItem.GetStreamAttribute = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(17, 'GetStreamAttribute', ((1, 'dwStreamIndex'),(1, 'guidMFAttribute'),(1, 'pvValue'),)))
    IMFPMediaItem.GetPresentationAttribute = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(18, 'GetPresentationAttribute', ((1, 'guidMFAttribute'),(1, 'pvValue'),)))
    IMFPMediaItem.GetCharacteristics = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(19, 'GetCharacteristics', ((1, 'pCharacteristics'),)))
    IMFPMediaItem.SetStreamSink = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.System.Com.IUnknown_head)(20, 'SetStreamSink', ((1, 'dwStreamIndex'),(1, 'pMediaSink'),)))
    IMFPMediaItem.GetMetadata = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.UI.Shell.PropertiesSystem.IPropertyStore_head))(21, 'GetMetadata', ((1, 'ppMetadataStore'),)))
    win32more.System.Com.IUnknown
    return IMFPMediaItem
def _define_IMFPMediaPlayer_head():
    class IMFPMediaPlayer(win32more.System.Com.IUnknown_head):
        Guid = Guid('a714590a-58af-430a-85-bf-44-f5-ec-83-8d-85')
    return IMFPMediaPlayer
def _define_IMFPMediaPlayer():
    IMFPMediaPlayer = win32more.Media.MediaFoundation.IMFPMediaPlayer_head
    IMFPMediaPlayer.Play = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(3, 'Play', ()))
    IMFPMediaPlayer.Pause = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(4, 'Pause', ()))
    IMFPMediaPlayer.Stop = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(5, 'Stop', ()))
    IMFPMediaPlayer.FrameStep = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(6, 'FrameStep', ()))
    IMFPMediaPlayer.SetPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(7, 'SetPosition', ((1, 'guidPositionType'),(1, 'pvPositionValue'),)))
    IMFPMediaPlayer.GetPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(8, 'GetPosition', ((1, 'guidPositionType'),(1, 'pvPositionValue'),)))
    IMFPMediaPlayer.GetDuration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(9, 'GetDuration', ((1, 'guidPositionType'),(1, 'pvDurationValue'),)))
    IMFPMediaPlayer.SetRate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Single)(10, 'SetRate', ((1, 'flRate'),)))
    IMFPMediaPlayer.GetRate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Single))(11, 'GetRate', ((1, 'pflRate'),)))
    IMFPMediaPlayer.GetSupportedRates = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL,POINTER(Single),POINTER(Single))(12, 'GetSupportedRates', ((1, 'fForwardDirection'),(1, 'pflSlowestRate'),(1, 'pflFastestRate'),)))
    IMFPMediaPlayer.GetState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFP_MEDIAPLAYER_STATE))(13, 'GetState', ((1, 'peState'),)))
    IMFPMediaPlayer.CreateMediaItemFromURL = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.BOOL,UIntPtr,POINTER(win32more.Media.MediaFoundation.IMFPMediaItem_head))(14, 'CreateMediaItemFromURL', ((1, 'pwszURL'),(1, 'fSync'),(1, 'dwUserData'),(1, 'ppMediaItem'),)))
    IMFPMediaPlayer.CreateMediaItemFromObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,win32more.Foundation.BOOL,UIntPtr,POINTER(win32more.Media.MediaFoundation.IMFPMediaItem_head))(15, 'CreateMediaItemFromObject', ((1, 'pIUnknownObj'),(1, 'fSync'),(1, 'dwUserData'),(1, 'ppMediaItem'),)))
    IMFPMediaPlayer.SetMediaItem = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPMediaItem_head)(16, 'SetMediaItem', ((1, 'pIMFPMediaItem'),)))
    IMFPMediaPlayer.ClearMediaItem = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(17, 'ClearMediaItem', ()))
    IMFPMediaPlayer.GetMediaItem = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFPMediaItem_head))(18, 'GetMediaItem', ((1, 'ppIMFPMediaItem'),)))
    IMFPMediaPlayer.GetVolume = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Single))(19, 'GetVolume', ((1, 'pflVolume'),)))
    IMFPMediaPlayer.SetVolume = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Single)(20, 'SetVolume', ((1, 'flVolume'),)))
    IMFPMediaPlayer.GetBalance = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Single))(21, 'GetBalance', ((1, 'pflBalance'),)))
    IMFPMediaPlayer.SetBalance = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Single)(22, 'SetBalance', ((1, 'flBalance'),)))
    IMFPMediaPlayer.GetMute = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(23, 'GetMute', ((1, 'pfMute'),)))
    IMFPMediaPlayer.SetMute = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL)(24, 'SetMute', ((1, 'fMute'),)))
    IMFPMediaPlayer.GetNativeVideoSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.SIZE_head),POINTER(win32more.Foundation.SIZE_head))(25, 'GetNativeVideoSize', ((1, 'pszVideo'),(1, 'pszARVideo'),)))
    IMFPMediaPlayer.GetIdealVideoSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.SIZE_head),POINTER(win32more.Foundation.SIZE_head))(26, 'GetIdealVideoSize', ((1, 'pszMin'),(1, 'pszMax'),)))
    IMFPMediaPlayer.SetVideoSourceRect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVideoNormalizedRect_head))(27, 'SetVideoSourceRect', ((1, 'pnrcSource'),)))
    IMFPMediaPlayer.GetVideoSourceRect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVideoNormalizedRect_head))(28, 'GetVideoSourceRect', ((1, 'pnrcSource'),)))
    IMFPMediaPlayer.SetAspectRatioMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(29, 'SetAspectRatioMode', ((1, 'dwAspectRatioMode'),)))
    IMFPMediaPlayer.GetAspectRatioMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(30, 'GetAspectRatioMode', ((1, 'pdwAspectRatioMode'),)))
    IMFPMediaPlayer.GetVideoWindow = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.HWND))(31, 'GetVideoWindow', ((1, 'phwndVideo'),)))
    IMFPMediaPlayer.UpdateVideo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(32, 'UpdateVideo', ()))
    IMFPMediaPlayer.SetBorderColor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.COLORREF)(33, 'SetBorderColor', ((1, 'Clr'),)))
    IMFPMediaPlayer.GetBorderColor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.COLORREF))(34, 'GetBorderColor', ((1, 'pClr'),)))
    IMFPMediaPlayer.InsertEffect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,win32more.Foundation.BOOL)(35, 'InsertEffect', ((1, 'pEffect'),(1, 'fOptional'),)))
    IMFPMediaPlayer.RemoveEffect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head)(36, 'RemoveEffect', ((1, 'pEffect'),)))
    IMFPMediaPlayer.RemoveAllEffects = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(37, 'RemoveAllEffects', ()))
    IMFPMediaPlayer.Shutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(38, 'Shutdown', ()))
    win32more.System.Com.IUnknown
    return IMFPMediaPlayer
def _define_IMFPMediaPlayerCallback_head():
    class IMFPMediaPlayerCallback(win32more.System.Com.IUnknown_head):
        Guid = Guid('766c8ffb-5fdb-4fea-a2-8d-b9-12-99-6f-51-bd')
    return IMFPMediaPlayerCallback
def _define_IMFPMediaPlayerCallback():
    IMFPMediaPlayerCallback = win32more.Media.MediaFoundation.IMFPMediaPlayerCallback_head
    IMFPMediaPlayerCallback.OnMediaPlayerEvent = COMMETHOD(WINFUNCTYPE(Void,POINTER(win32more.Media.MediaFoundation.MFP_EVENT_HEADER_head))(3, 'OnMediaPlayerEvent', ((1, 'pEventHeader'),)))
    win32more.System.Com.IUnknown
    return IMFPMediaPlayerCallback
def _define_IMFPMPClient_head():
    class IMFPMPClient(win32more.System.Com.IUnknown_head):
        Guid = Guid('6c4e655d-ead8-4421-b6-b9-54-dc-db-bd-f8-20')
    return IMFPMPClient
def _define_IMFPMPClient():
    IMFPMPClient = win32more.Media.MediaFoundation.IMFPMPClient_head
    IMFPMPClient.SetPMPHost = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPMPHost_head)(3, 'SetPMPHost', ((1, 'pPMPHost'),)))
    win32more.System.Com.IUnknown
    return IMFPMPClient
def _define_IMFPMPClientApp_head():
    class IMFPMPClientApp(win32more.System.Com.IUnknown_head):
        Guid = Guid('c004f646-be2c-48f3-93-a2-a0-98-3e-ba-11-08')
    return IMFPMPClientApp
def _define_IMFPMPClientApp():
    IMFPMPClientApp = win32more.Media.MediaFoundation.IMFPMPClientApp_head
    IMFPMPClientApp.SetPMPHost = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPMPHostApp_head)(3, 'SetPMPHost', ((1, 'pPMPHost'),)))
    win32more.System.Com.IUnknown
    return IMFPMPClientApp
def _define_IMFPMPHost_head():
    class IMFPMPHost(win32more.System.Com.IUnknown_head):
        Guid = Guid('f70ca1a9-fdc7-4782-b9-94-ad-ff-b1-c9-86-06')
    return IMFPMPHost
def _define_IMFPMPHost():
    IMFPMPHost = win32more.Media.MediaFoundation.IMFPMPHost_head
    IMFPMPHost.LockProcess = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(3, 'LockProcess', ()))
    IMFPMPHost.UnlockProcess = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(4, 'UnlockProcess', ()))
    IMFPMPHost.CreateObjectByCLSID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),win32more.System.Com.IStream_head,POINTER(Guid),POINTER(c_void_p))(5, 'CreateObjectByCLSID', ((1, 'clsid'),(1, 'pStream'),(1, 'riid'),(1, 'ppv'),)))
    win32more.System.Com.IUnknown
    return IMFPMPHost
def _define_IMFPMPHostApp_head():
    class IMFPMPHostApp(win32more.System.Com.IUnknown_head):
        Guid = Guid('84d2054a-3aa1-4728-a3-b0-44-0a-41-8c-f4-9c')
    return IMFPMPHostApp
def _define_IMFPMPHostApp():
    IMFPMPHostApp = win32more.Media.MediaFoundation.IMFPMPHostApp_head
    IMFPMPHostApp.LockProcess = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(3, 'LockProcess', ()))
    IMFPMPHostApp.UnlockProcess = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(4, 'UnlockProcess', ()))
    IMFPMPHostApp.ActivateClassById = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.System.Com.IStream_head,POINTER(Guid),POINTER(c_void_p))(5, 'ActivateClassById', ((1, 'id'),(1, 'pStream'),(1, 'riid'),(1, 'ppv'),)))
    win32more.System.Com.IUnknown
    return IMFPMPHostApp
def _define_IMFPMPServer_head():
    class IMFPMPServer(win32more.System.Com.IUnknown_head):
        Guid = Guid('994e23af-1cc2-493c-b9-fa-46-f1-cb-04-0f-a4')
    return IMFPMPServer
def _define_IMFPMPServer():
    IMFPMPServer = win32more.Media.MediaFoundation.IMFPMPServer_head
    IMFPMPServer.LockProcess = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(3, 'LockProcess', ()))
    IMFPMPServer.UnlockProcess = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(4, 'UnlockProcess', ()))
    IMFPMPServer.CreateObjectByCLSID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(Guid),POINTER(c_void_p))(5, 'CreateObjectByCLSID', ((1, 'clsid'),(1, 'riid'),(1, 'ppObject'),)))
    win32more.System.Com.IUnknown
    return IMFPMPServer
def _define_IMFPresentationClock_head():
    class IMFPresentationClock(win32more.Media.MediaFoundation.IMFClock_head):
        Guid = Guid('868ce85c-8ea9-4f55-ab-82-b0-09-a9-10-a8-05')
    return IMFPresentationClock
def _define_IMFPresentationClock():
    IMFPresentationClock = win32more.Media.MediaFoundation.IMFPresentationClock_head
    IMFPresentationClock.SetTimeSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationTimeSource_head)(8, 'SetTimeSource', ((1, 'pTimeSource'),)))
    IMFPresentationClock.GetTimeSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFPresentationTimeSource_head))(9, 'GetTimeSource', ((1, 'ppTimeSource'),)))
    IMFPresentationClock.GetTime = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int64))(10, 'GetTime', ((1, 'phnsClockTime'),)))
    IMFPresentationClock.AddClockStateSink = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFClockStateSink_head)(11, 'AddClockStateSink', ((1, 'pStateSink'),)))
    IMFPresentationClock.RemoveClockStateSink = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFClockStateSink_head)(12, 'RemoveClockStateSink', ((1, 'pStateSink'),)))
    IMFPresentationClock.Start = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int64)(13, 'Start', ((1, 'llClockStartOffset'),)))
    IMFPresentationClock.Stop = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(14, 'Stop', ()))
    IMFPresentationClock.Pause = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(15, 'Pause', ()))
    win32more.Media.MediaFoundation.IMFClock
    return IMFPresentationClock
def _define_IMFPresentationDescriptor_head():
    class IMFPresentationDescriptor(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('03cb2711-24d7-4db6-a1-7f-f3-a7-a4-79-a5-36')
    return IMFPresentationDescriptor
def _define_IMFPresentationDescriptor():
    IMFPresentationDescriptor = win32more.Media.MediaFoundation.IMFPresentationDescriptor_head
    IMFPresentationDescriptor.GetStreamDescriptorCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(33, 'GetStreamDescriptorCount', ((1, 'pdwDescriptorCount'),)))
    IMFPresentationDescriptor.GetStreamDescriptorByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Foundation.BOOL),POINTER(win32more.Media.MediaFoundation.IMFStreamDescriptor_head))(34, 'GetStreamDescriptorByIndex', ((1, 'dwIndex'),(1, 'pfSelected'),(1, 'ppDescriptor'),)))
    IMFPresentationDescriptor.SelectStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(35, 'SelectStream', ((1, 'dwDescriptorIndex'),)))
    IMFPresentationDescriptor.DeselectStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(36, 'DeselectStream', ((1, 'dwDescriptorIndex'),)))
    IMFPresentationDescriptor.Clone = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFPresentationDescriptor_head))(37, 'Clone', ((1, 'ppPresentationDescriptor'),)))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFPresentationDescriptor
def _define_IMFPresentationTimeSource_head():
    class IMFPresentationTimeSource(win32more.Media.MediaFoundation.IMFClock_head):
        Guid = Guid('7ff12cce-f76f-41c2-86-3b-16-66-c8-e5-e1-39')
    return IMFPresentationTimeSource
def _define_IMFPresentationTimeSource():
    IMFPresentationTimeSource = win32more.Media.MediaFoundation.IMFPresentationTimeSource_head
    IMFPresentationTimeSource.GetUnderlyingClock = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFClock_head))(8, 'GetUnderlyingClock', ((1, 'ppClock'),)))
    win32more.Media.MediaFoundation.IMFClock
    return IMFPresentationTimeSource
def _define_IMFProtectedEnvironmentAccess_head():
    class IMFProtectedEnvironmentAccess(win32more.System.Com.IUnknown_head):
        Guid = Guid('ef5dc845-f0d9-4ec9-b0-0c-cb-51-83-d3-84-34')
    return IMFProtectedEnvironmentAccess
def _define_IMFProtectedEnvironmentAccess():
    IMFProtectedEnvironmentAccess = win32more.Media.MediaFoundation.IMFProtectedEnvironmentAccess_head
    IMFProtectedEnvironmentAccess.Call = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_char_p_no,UInt32,c_char_p_no)(3, 'Call', ((1, 'inputLength'),(1, 'input'),(1, 'outputLength'),(1, 'output'),)))
    IMFProtectedEnvironmentAccess.ReadGRL = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(c_char_p_no))(4, 'ReadGRL', ((1, 'outputLength'),(1, 'output'),)))
    win32more.System.Com.IUnknown
    return IMFProtectedEnvironmentAccess
def _define_IMFQualityAdvise_head():
    class IMFQualityAdvise(win32more.System.Com.IUnknown_head):
        Guid = Guid('ec15e2e9-e36b-4f7c-87-58-77-d4-52-ef-4c-e7')
    return IMFQualityAdvise
def _define_IMFQualityAdvise():
    IMFQualityAdvise = win32more.Media.MediaFoundation.IMFQualityAdvise_head
    IMFQualityAdvise.SetDropMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_QUALITY_DROP_MODE)(3, 'SetDropMode', ((1, 'eDropMode'),)))
    IMFQualityAdvise.SetQualityLevel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_QUALITY_LEVEL)(4, 'SetQualityLevel', ((1, 'eQualityLevel'),)))
    IMFQualityAdvise.GetDropMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_QUALITY_DROP_MODE))(5, 'GetDropMode', ((1, 'peDropMode'),)))
    IMFQualityAdvise.GetQualityLevel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_QUALITY_LEVEL))(6, 'GetQualityLevel', ((1, 'peQualityLevel'),)))
    IMFQualityAdvise.DropTime = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int64)(7, 'DropTime', ((1, 'hnsAmountToDrop'),)))
    win32more.System.Com.IUnknown
    return IMFQualityAdvise
def _define_IMFQualityAdvise2_head():
    class IMFQualityAdvise2(win32more.Media.MediaFoundation.IMFQualityAdvise_head):
        Guid = Guid('f3706f0d-8ea2-4886-80-00-71-55-e9-ec-2e-ae')
    return IMFQualityAdvise2
def _define_IMFQualityAdvise2():
    IMFQualityAdvise2 = win32more.Media.MediaFoundation.IMFQualityAdvise2_head
    IMFQualityAdvise2.NotifyQualityEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaEvent_head,POINTER(UInt32))(8, 'NotifyQualityEvent', ((1, 'pEvent'),(1, 'pdwFlags'),)))
    win32more.Media.MediaFoundation.IMFQualityAdvise
    return IMFQualityAdvise2
def _define_IMFQualityAdviseLimits_head():
    class IMFQualityAdviseLimits(win32more.System.Com.IUnknown_head):
        Guid = Guid('dfcd8e4d-30b5-4567-ac-aa-8e-b5-b7-85-3d-c9')
    return IMFQualityAdviseLimits
def _define_IMFQualityAdviseLimits():
    IMFQualityAdviseLimits = win32more.Media.MediaFoundation.IMFQualityAdviseLimits_head
    IMFQualityAdviseLimits.GetMaximumDropMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_QUALITY_DROP_MODE))(3, 'GetMaximumDropMode', ((1, 'peDropMode'),)))
    IMFQualityAdviseLimits.GetMinimumQualityLevel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_QUALITY_LEVEL))(4, 'GetMinimumQualityLevel', ((1, 'peQualityLevel'),)))
    win32more.System.Com.IUnknown
    return IMFQualityAdviseLimits
def _define_IMFQualityManager_head():
    class IMFQualityManager(win32more.System.Com.IUnknown_head):
        Guid = Guid('8d009d86-5b9f-4115-b1-fc-9f-80-d5-2a-b8-ab')
    return IMFQualityManager
def _define_IMFQualityManager():
    IMFQualityManager = win32more.Media.MediaFoundation.IMFQualityManager_head
    IMFQualityManager.NotifyTopology = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTopology_head)(3, 'NotifyTopology', ((1, 'pTopology'),)))
    IMFQualityManager.NotifyPresentationClock = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationClock_head)(4, 'NotifyPresentationClock', ((1, 'pClock'),)))
    IMFQualityManager.NotifyProcessInput = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTopologyNode_head,Int32,win32more.Media.MediaFoundation.IMFSample_head)(5, 'NotifyProcessInput', ((1, 'pNode'),(1, 'lInputIndex'),(1, 'pSample'),)))
    IMFQualityManager.NotifyProcessOutput = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTopologyNode_head,Int32,win32more.Media.MediaFoundation.IMFSample_head)(6, 'NotifyProcessOutput', ((1, 'pNode'),(1, 'lOutputIndex'),(1, 'pSample'),)))
    IMFQualityManager.NotifyQualityEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head,win32more.Media.MediaFoundation.IMFMediaEvent_head)(7, 'NotifyQualityEvent', ((1, 'pObject'),(1, 'pEvent'),)))
    IMFQualityManager.Shutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(8, 'Shutdown', ()))
    win32more.System.Com.IUnknown
    return IMFQualityManager
def _define_IMFRateControl_head():
    class IMFRateControl(win32more.System.Com.IUnknown_head):
        Guid = Guid('88ddcd21-03c3-4275-91-ed-55-ee-39-29-32-8f')
    return IMFRateControl
def _define_IMFRateControl():
    IMFRateControl = win32more.Media.MediaFoundation.IMFRateControl_head
    IMFRateControl.SetRate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL,Single)(3, 'SetRate', ((1, 'fThin'),(1, 'flRate'),)))
    IMFRateControl.GetRate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL),POINTER(Single))(4, 'GetRate', ((1, 'pfThin'),(1, 'pflRate'),)))
    win32more.System.Com.IUnknown
    return IMFRateControl
def _define_IMFRateSupport_head():
    class IMFRateSupport(win32more.System.Com.IUnknown_head):
        Guid = Guid('0a9ccdbc-d797-4563-96-67-94-ec-5d-79-29-2d')
    return IMFRateSupport
def _define_IMFRateSupport():
    IMFRateSupport = win32more.Media.MediaFoundation.IMFRateSupport_head
    IMFRateSupport.GetSlowestRate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFRATE_DIRECTION,win32more.Foundation.BOOL,POINTER(Single))(3, 'GetSlowestRate', ((1, 'eDirection'),(1, 'fThin'),(1, 'pflRate'),)))
    IMFRateSupport.GetFastestRate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFRATE_DIRECTION,win32more.Foundation.BOOL,POINTER(Single))(4, 'GetFastestRate', ((1, 'eDirection'),(1, 'fThin'),(1, 'pflRate'),)))
    IMFRateSupport.IsRateSupported = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL,Single,POINTER(Single))(5, 'IsRateSupported', ((1, 'fThin'),(1, 'flRate'),(1, 'pflNearestSupportedRate'),)))
    win32more.System.Com.IUnknown
    return IMFRateSupport
def _define_IMFReadWriteClassFactory_head():
    class IMFReadWriteClassFactory(win32more.System.Com.IUnknown_head):
        Guid = Guid('e7fe2e12-661c-40da-92-f9-4f-00-2a-b6-76-27')
    return IMFReadWriteClassFactory
def _define_IMFReadWriteClassFactory():
    IMFReadWriteClassFactory = win32more.Media.MediaFoundation.IMFReadWriteClassFactory_head
    IMFReadWriteClassFactory.CreateInstanceFromURL = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(Guid),POINTER(c_void_p))(3, 'CreateInstanceFromURL', ((1, 'clsid'),(1, 'pwszURL'),(1, 'pAttributes'),(1, 'riid'),(1, 'ppvObject'),)))
    IMFReadWriteClassFactory.CreateInstanceFromObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),win32more.System.Com.IUnknown_head,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(Guid),POINTER(c_void_p))(4, 'CreateInstanceFromObject', ((1, 'clsid'),(1, 'punkObject'),(1, 'pAttributes'),(1, 'riid'),(1, 'ppvObject'),)))
    win32more.System.Com.IUnknown
    return IMFReadWriteClassFactory
def _define_IMFRealTimeClient_head():
    class IMFRealTimeClient(win32more.System.Com.IUnknown_head):
        Guid = Guid('2347d60b-3fb5-480c-88-03-8d-f3-ad-cd-3e-f0')
    return IMFRealTimeClient
def _define_IMFRealTimeClient():
    IMFRealTimeClient = win32more.Media.MediaFoundation.IMFRealTimeClient_head
    IMFRealTimeClient.RegisterThreads = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.PWSTR)(3, 'RegisterThreads', ((1, 'dwTaskIndex'),(1, 'wszClass'),)))
    IMFRealTimeClient.UnregisterThreads = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(4, 'UnregisterThreads', ()))
    IMFRealTimeClient.SetWorkQueue = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(5, 'SetWorkQueue', ((1, 'dwWorkQueueId'),)))
    win32more.System.Com.IUnknown
    return IMFRealTimeClient
def _define_IMFRealTimeClientEx_head():
    class IMFRealTimeClientEx(win32more.System.Com.IUnknown_head):
        Guid = Guid('03910848-ab16-4611-b1-00-17-b8-8a-e2-f2-48')
    return IMFRealTimeClientEx
def _define_IMFRealTimeClientEx():
    IMFRealTimeClientEx = win32more.Media.MediaFoundation.IMFRealTimeClientEx_head
    IMFRealTimeClientEx.RegisterThreadsEx = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),win32more.Foundation.PWSTR,Int32)(3, 'RegisterThreadsEx', ((1, 'pdwTaskIndex'),(1, 'wszClassName'),(1, 'lBasePriority'),)))
    IMFRealTimeClientEx.UnregisterThreads = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(4, 'UnregisterThreads', ()))
    IMFRealTimeClientEx.SetWorkQueueEx = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,Int32)(5, 'SetWorkQueueEx', ((1, 'dwMultithreadedWorkQueueId'),(1, 'lWorkItemBasePriority'),)))
    win32more.System.Com.IUnknown
    return IMFRealTimeClientEx
def _define_IMFRelativePanelReport_head():
    class IMFRelativePanelReport(win32more.System.Com.IUnknown_head):
        Guid = Guid('f25362ea-2c0e-447f-81-e2-75-59-14-cd-c0-c3')
    return IMFRelativePanelReport
def _define_IMFRelativePanelReport():
    IMFRelativePanelReport = win32more.Media.MediaFoundation.IMFRelativePanelReport_head
    IMFRelativePanelReport.GetRelativePanel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'GetRelativePanel', ((1, 'panel'),)))
    win32more.System.Com.IUnknown
    return IMFRelativePanelReport
def _define_IMFRelativePanelWatcher_head():
    class IMFRelativePanelWatcher(win32more.Media.MediaFoundation.IMFShutdown_head):
        Guid = Guid('421af7f6-573e-4ad0-8f-da-2e-57-ce-db-18-c6')
    return IMFRelativePanelWatcher
def _define_IMFRelativePanelWatcher():
    IMFRelativePanelWatcher = win32more.Media.MediaFoundation.IMFRelativePanelWatcher_head
    IMFRelativePanelWatcher.BeginGetReport = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(5, 'BeginGetReport', ((1, 'pCallback'),(1, 'pState'),)))
    IMFRelativePanelWatcher.EndGetReport = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(win32more.Media.MediaFoundation.IMFRelativePanelReport_head))(6, 'EndGetReport', ((1, 'pResult'),(1, 'ppRelativePanelReport'),)))
    IMFRelativePanelWatcher.GetReport = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFRelativePanelReport_head))(7, 'GetReport', ((1, 'ppRelativePanelReport'),)))
    win32more.Media.MediaFoundation.IMFShutdown
    return IMFRelativePanelWatcher
def _define_IMFRemoteAsyncCallback_head():
    class IMFRemoteAsyncCallback(win32more.System.Com.IUnknown_head):
        Guid = Guid('a27003d0-2354-4f2a-8d-6a-ab-7c-ff-15-43-7e')
    return IMFRemoteAsyncCallback
def _define_IMFRemoteAsyncCallback():
    IMFRemoteAsyncCallback = win32more.Media.MediaFoundation.IMFRemoteAsyncCallback_head
    IMFRemoteAsyncCallback.Invoke = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head)(3, 'Invoke', ((1, 'hr'),(1, 'pRemoteResult'),)))
    win32more.System.Com.IUnknown
    return IMFRemoteAsyncCallback
def _define_IMFRemoteDesktopPlugin_head():
    class IMFRemoteDesktopPlugin(win32more.System.Com.IUnknown_head):
        Guid = Guid('1cde6309-cae0-4940-90-7e-c1-ec-9c-3d-1d-4a')
    return IMFRemoteDesktopPlugin
def _define_IMFRemoteDesktopPlugin():
    IMFRemoteDesktopPlugin = win32more.Media.MediaFoundation.IMFRemoteDesktopPlugin_head
    IMFRemoteDesktopPlugin.UpdateTopology = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTopology_head)(3, 'UpdateTopology', ((1, 'pTopology'),)))
    win32more.System.Com.IUnknown
    return IMFRemoteDesktopPlugin
def _define_IMFRemoteProxy_head():
    class IMFRemoteProxy(win32more.System.Com.IUnknown_head):
        Guid = Guid('994e23ad-1cc2-493c-b9-fa-46-f1-cb-04-0f-a4')
    return IMFRemoteProxy
def _define_IMFRemoteProxy():
    IMFRemoteProxy = win32more.Media.MediaFoundation.IMFRemoteProxy_head
    IMFRemoteProxy.GetRemoteObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p))(3, 'GetRemoteObject', ((1, 'riid'),(1, 'ppv'),)))
    IMFRemoteProxy.GetRemoteHost = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(c_void_p))(4, 'GetRemoteHost', ((1, 'riid'),(1, 'ppv'),)))
    win32more.System.Com.IUnknown
    return IMFRemoteProxy
def _define_IMFSAMIStyle_head():
    class IMFSAMIStyle(win32more.System.Com.IUnknown_head):
        Guid = Guid('a7e025dd-5303-4a62-89-d6-e7-47-e1-ef-ac-73')
    return IMFSAMIStyle
def _define_IMFSAMIStyle():
    IMFSAMIStyle = win32more.Media.MediaFoundation.IMFSAMIStyle_head
    IMFSAMIStyle.GetStyleCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'GetStyleCount', ((1, 'pdwCount'),)))
    IMFSAMIStyle.GetStyles = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(4, 'GetStyles', ((1, 'pPropVarStyleArray'),)))
    IMFSAMIStyle.SetSelectedStyle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR)(5, 'SetSelectedStyle', ((1, 'pwszStyle'),)))
    IMFSAMIStyle.GetSelectedStyle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(6, 'GetSelectedStyle', ((1, 'ppwszStyle'),)))
    win32more.System.Com.IUnknown
    return IMFSAMIStyle
def _define_IMFSample_head():
    class IMFSample(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('c40a00f2-b93a-4d80-ae-8c-5a-1c-63-4f-58-e4')
    return IMFSample
def _define_IMFSample():
    IMFSample = win32more.Media.MediaFoundation.IMFSample_head
    IMFSample.GetSampleFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(33, 'GetSampleFlags', ((1, 'pdwSampleFlags'),)))
    IMFSample.SetSampleFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(34, 'SetSampleFlags', ((1, 'dwSampleFlags'),)))
    IMFSample.GetSampleTime = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int64))(35, 'GetSampleTime', ((1, 'phnsSampleTime'),)))
    IMFSample.SetSampleTime = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int64)(36, 'SetSampleTime', ((1, 'hnsSampleTime'),)))
    IMFSample.GetSampleDuration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int64))(37, 'GetSampleDuration', ((1, 'phnsSampleDuration'),)))
    IMFSample.SetSampleDuration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int64)(38, 'SetSampleDuration', ((1, 'hnsSampleDuration'),)))
    IMFSample.GetBufferCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(39, 'GetBufferCount', ((1, 'pdwBufferCount'),)))
    IMFSample.GetBufferByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaBuffer_head))(40, 'GetBufferByIndex', ((1, 'dwIndex'),(1, 'ppBuffer'),)))
    IMFSample.ConvertToContiguousBuffer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaBuffer_head))(41, 'ConvertToContiguousBuffer', ((1, 'ppBuffer'),)))
    IMFSample.AddBuffer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaBuffer_head)(42, 'AddBuffer', ((1, 'pBuffer'),)))
    IMFSample.RemoveBufferByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(43, 'RemoveBufferByIndex', ((1, 'dwIndex'),)))
    IMFSample.RemoveAllBuffers = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(44, 'RemoveAllBuffers', ()))
    IMFSample.GetTotalLength = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(45, 'GetTotalLength', ((1, 'pcbTotalLength'),)))
    IMFSample.CopyToBuffer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaBuffer_head)(46, 'CopyToBuffer', ((1, 'pBuffer'),)))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFSample
def _define_IMFSampleAllocatorControl_head():
    class IMFSampleAllocatorControl(win32more.System.Com.IUnknown_head):
        Guid = Guid('da62b958-3a38-4a97-bd-27-14-9c-64-0c-07-71')
    return IMFSampleAllocatorControl
def _define_IMFSampleAllocatorControl():
    IMFSampleAllocatorControl = win32more.Media.MediaFoundation.IMFSampleAllocatorControl_head
    IMFSampleAllocatorControl.SetDefaultAllocator = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.System.Com.IUnknown_head)(3, 'SetDefaultAllocator', ((1, 'dwOutputStreamID'),(1, 'pAllocator'),)))
    IMFSampleAllocatorControl.GetAllocatorUsage = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32),POINTER(win32more.Media.MediaFoundation.MFSampleAllocatorUsage))(4, 'GetAllocatorUsage', ((1, 'dwOutputStreamID'),(1, 'pdwInputStreamID'),(1, 'peUsage'),)))
    win32more.System.Com.IUnknown
    return IMFSampleAllocatorControl
def _define_IMFSampleGrabberSinkCallback_head():
    class IMFSampleGrabberSinkCallback(win32more.Media.MediaFoundation.IMFClockStateSink_head):
        Guid = Guid('8c7b80bf-ee42-4b59-b1-df-55-66-8e-1b-dc-a8')
    return IMFSampleGrabberSinkCallback
def _define_IMFSampleGrabberSinkCallback():
    IMFSampleGrabberSinkCallback = win32more.Media.MediaFoundation.IMFSampleGrabberSinkCallback_head
    IMFSampleGrabberSinkCallback.OnSetPresentationClock = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationClock_head)(8, 'OnSetPresentationClock', ((1, 'pPresentationClock'),)))
    IMFSampleGrabberSinkCallback.OnProcessSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),UInt32,Int64,Int64,c_char_p_no,UInt32)(9, 'OnProcessSample', ((1, 'guidMajorMediaType'),(1, 'dwSampleFlags'),(1, 'llSampleTime'),(1, 'llSampleDuration'),(1, 'pSampleBuffer'),(1, 'dwSampleSize'),)))
    IMFSampleGrabberSinkCallback.OnShutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(10, 'OnShutdown', ()))
    win32more.Media.MediaFoundation.IMFClockStateSink
    return IMFSampleGrabberSinkCallback
def _define_IMFSampleGrabberSinkCallback2_head():
    class IMFSampleGrabberSinkCallback2(win32more.Media.MediaFoundation.IMFSampleGrabberSinkCallback_head):
        Guid = Guid('ca86aa50-c46e-429e-ab-27-16-d6-ac-68-44-cb')
    return IMFSampleGrabberSinkCallback2
def _define_IMFSampleGrabberSinkCallback2():
    IMFSampleGrabberSinkCallback2 = win32more.Media.MediaFoundation.IMFSampleGrabberSinkCallback2_head
    IMFSampleGrabberSinkCallback2.OnProcessSampleEx = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),UInt32,Int64,Int64,c_char_p_no,UInt32,win32more.Media.MediaFoundation.IMFAttributes_head)(11, 'OnProcessSampleEx', ((1, 'guidMajorMediaType'),(1, 'dwSampleFlags'),(1, 'llSampleTime'),(1, 'llSampleDuration'),(1, 'pSampleBuffer'),(1, 'dwSampleSize'),(1, 'pAttributes'),)))
    win32more.Media.MediaFoundation.IMFSampleGrabberSinkCallback
    return IMFSampleGrabberSinkCallback2
def _define_IMFSampleOutputStream_head():
    class IMFSampleOutputStream(win32more.System.Com.IUnknown_head):
        Guid = Guid('8feed468-6f7e-440d-86-9a-49-bd-d2-83-ad-0d')
    return IMFSampleOutputStream
def _define_IMFSampleOutputStream():
    IMFSampleOutputStream = win32more.Media.MediaFoundation.IMFSampleOutputStream_head
    IMFSampleOutputStream.BeginWriteSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSample_head,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(3, 'BeginWriteSample', ((1, 'pSample'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFSampleOutputStream.EndWriteSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head)(4, 'EndWriteSample', ((1, 'pResult'),)))
    IMFSampleOutputStream.Close = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(5, 'Close', ()))
    win32more.System.Com.IUnknown
    return IMFSampleOutputStream
def _define_IMFSampleProtection_head():
    class IMFSampleProtection(win32more.System.Com.IUnknown_head):
        Guid = Guid('8e36395f-c7b9-43c4-a5-4d-51-2b-4a-f6-3c-95')
    return IMFSampleProtection
def _define_IMFSampleProtection():
    IMFSampleProtection = win32more.Media.MediaFoundation.IMFSampleProtection_head
    IMFSampleProtection.GetInputProtectionVersion = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'GetInputProtectionVersion', ((1, 'pdwVersion'),)))
    IMFSampleProtection.GetOutputProtectionVersion = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(4, 'GetOutputProtectionVersion', ((1, 'pdwVersion'),)))
    IMFSampleProtection.GetProtectionCertificate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(c_char_p_no),POINTER(UInt32))(5, 'GetProtectionCertificate', ((1, 'dwVersion'),(1, 'ppCert'),(1, 'pcbCert'),)))
    IMFSampleProtection.InitOutputProtection = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,c_char_p_no,UInt32,POINTER(c_char_p_no),POINTER(UInt32))(6, 'InitOutputProtection', ((1, 'dwVersion'),(1, 'dwOutputId'),(1, 'pbCert'),(1, 'cbCert'),(1, 'ppbSeed'),(1, 'pcbSeed'),)))
    IMFSampleProtection.InitInputProtection = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,c_char_p_no,UInt32)(7, 'InitInputProtection', ((1, 'dwVersion'),(1, 'dwInputId'),(1, 'pbSeed'),(1, 'cbSeed'),)))
    win32more.System.Com.IUnknown
    return IMFSampleProtection
def _define_IMFSaveJob_head():
    class IMFSaveJob(win32more.System.Com.IUnknown_head):
        Guid = Guid('e9931663-80bf-4c6e-98-af-5d-cf-58-74-7d-1f')
    return IMFSaveJob
def _define_IMFSaveJob():
    IMFSaveJob = win32more.Media.MediaFoundation.IMFSaveJob_head
    IMFSaveJob.BeginSave = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(3, 'BeginSave', ((1, 'pStream'),(1, 'pCallback'),(1, 'pState'),)))
    IMFSaveJob.EndSave = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head)(4, 'EndSave', ((1, 'pResult'),)))
    IMFSaveJob.CancelSave = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(5, 'CancelSave', ()))
    IMFSaveJob.GetProgress = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(6, 'GetProgress', ((1, 'pdwPercentComplete'),)))
    win32more.System.Com.IUnknown
    return IMFSaveJob
def _define_IMFSchemeHandler_head():
    class IMFSchemeHandler(win32more.System.Com.IUnknown_head):
        Guid = Guid('6d4c7b74-52a0-4bb7-b0-db-55-f2-9f-47-a6-68')
    return IMFSchemeHandler
def _define_IMFSchemeHandler():
    IMFSchemeHandler = win32more.Media.MediaFoundation.IMFSchemeHandler_head
    IMFSchemeHandler.BeginCreateObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,UInt32,win32more.UI.Shell.PropertiesSystem.IPropertyStore_head,POINTER(win32more.System.Com.IUnknown_head),win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(3, 'BeginCreateObject', ((1, 'pwszURL'),(1, 'dwFlags'),(1, 'pProps'),(1, 'ppIUnknownCancelCookie'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFSchemeHandler.EndCreateObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(win32more.Media.MediaFoundation.MF_OBJECT_TYPE),POINTER(win32more.System.Com.IUnknown_head))(4, 'EndCreateObject', ((1, 'pResult'),(1, 'pObjectType'),(1, 'ppObject'),)))
    IMFSchemeHandler.CancelObjectCreation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head)(5, 'CancelObjectCreation', ((1, 'pIUnknownCancelCookie'),)))
    win32more.System.Com.IUnknown
    return IMFSchemeHandler
def _define_IMFSecureBuffer_head():
    class IMFSecureBuffer(win32more.System.Com.IUnknown_head):
        Guid = Guid('c1209904-e584-4752-a2-d6-7f-21-69-3f-8b-21')
    return IMFSecureBuffer
def _define_IMFSecureBuffer():
    IMFSecureBuffer = win32more.Media.MediaFoundation.IMFSecureBuffer_head
    IMFSecureBuffer.GetIdentifier = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid))(3, 'GetIdentifier', ((1, 'pGuidIdentifier'),)))
    win32more.System.Com.IUnknown
    return IMFSecureBuffer
def _define_IMFSecureChannel_head():
    class IMFSecureChannel(win32more.System.Com.IUnknown_head):
        Guid = Guid('d0ae555d-3b12-4d97-b0-60-09-90-bc-5a-eb-67')
    return IMFSecureChannel
def _define_IMFSecureChannel():
    IMFSecureChannel = win32more.Media.MediaFoundation.IMFSecureChannel_head
    IMFSecureChannel.GetCertificate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(c_char_p_no),POINTER(UInt32))(3, 'GetCertificate', ((1, 'ppCert'),(1, 'pcbCert'),)))
    IMFSecureChannel.SetupSession = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32)(4, 'SetupSession', ((1, 'pbEncryptedSessionKey'),(1, 'cbSessionKey'),)))
    win32more.System.Com.IUnknown
    return IMFSecureChannel
def _define_IMFSeekInfo_head():
    class IMFSeekInfo(win32more.System.Com.IUnknown_head):
        Guid = Guid('26afea53-d9ed-42b5-ab-80-e6-4f-9e-e3-47-79')
    return IMFSeekInfo
def _define_IMFSeekInfo():
    IMFSeekInfo = win32more.Media.MediaFoundation.IMFSeekInfo_head
    IMFSeekInfo.GetNearestKeyFrames = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(3, 'GetNearestKeyFrames', ((1, 'pguidTimeFormat'),(1, 'pvarStartPosition'),(1, 'pvarPreviousKeyFrame'),(1, 'pvarNextKeyFrame'),)))
    win32more.System.Com.IUnknown
    return IMFSeekInfo
def _define_IMFSensorActivitiesReport_head():
    class IMFSensorActivitiesReport(win32more.System.Com.IUnknown_head):
        Guid = Guid('683f7a5e-4a19-43cd-b1-a9-db-f4-ab-3f-77-77')
    return IMFSensorActivitiesReport
def _define_IMFSensorActivitiesReport():
    IMFSensorActivitiesReport = win32more.Media.MediaFoundation.IMFSensorActivitiesReport_head
    IMFSensorActivitiesReport.GetCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'GetCount', ((1, 'pcCount'),)))
    IMFSensorActivitiesReport.GetActivityReport = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFSensorActivityReport_head))(4, 'GetActivityReport', ((1, 'Index'),(1, 'sensorActivityReport'),)))
    IMFSensorActivitiesReport.GetActivityReportByDeviceName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.IMFSensorActivityReport_head))(5, 'GetActivityReportByDeviceName', ((1, 'SymbolicName'),(1, 'sensorActivityReport'),)))
    win32more.System.Com.IUnknown
    return IMFSensorActivitiesReport
def _define_IMFSensorActivitiesReportCallback_head():
    class IMFSensorActivitiesReportCallback(win32more.System.Com.IUnknown_head):
        Guid = Guid('de5072ee-dbe3-46dc-8a-87-b6-f6-31-19-47-51')
    return IMFSensorActivitiesReportCallback
def _define_IMFSensorActivitiesReportCallback():
    IMFSensorActivitiesReportCallback = win32more.Media.MediaFoundation.IMFSensorActivitiesReportCallback_head
    IMFSensorActivitiesReportCallback.OnActivitiesReport = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSensorActivitiesReport_head)(3, 'OnActivitiesReport', ((1, 'sensorActivitiesReport'),)))
    win32more.System.Com.IUnknown
    return IMFSensorActivitiesReportCallback
def _define_IMFSensorActivityMonitor_head():
    class IMFSensorActivityMonitor(win32more.System.Com.IUnknown_head):
        Guid = Guid('d0cef145-b3f4-4340-a2-e5-7a-50-80-ca-05-cb')
    return IMFSensorActivityMonitor
def _define_IMFSensorActivityMonitor():
    IMFSensorActivityMonitor = win32more.Media.MediaFoundation.IMFSensorActivityMonitor_head
    IMFSensorActivityMonitor.Start = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(3, 'Start', ()))
    IMFSensorActivityMonitor.Stop = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(4, 'Stop', ()))
    win32more.System.Com.IUnknown
    return IMFSensorActivityMonitor
def _define_IMFSensorActivityReport_head():
    class IMFSensorActivityReport(win32more.System.Com.IUnknown_head):
        Guid = Guid('3e8c4be1-a8c2-4528-90-de-28-51-bd-e5-fe-ad')
    return IMFSensorActivityReport
def _define_IMFSensorActivityReport():
    IMFSensorActivityReport = win32more.Media.MediaFoundation.IMFSensorActivityReport_head
    IMFSensorActivityReport.GetFriendlyName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(3, 'GetFriendlyName', ((1, 'FriendlyName'),(1, 'cchFriendlyName'),(1, 'pcchWritten'),)))
    IMFSensorActivityReport.GetSymbolicLink = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(4, 'GetSymbolicLink', ((1, 'SymbolicLink'),(1, 'cchSymbolicLink'),(1, 'pcchWritten'),)))
    IMFSensorActivityReport.GetProcessCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(5, 'GetProcessCount', ((1, 'pcCount'),)))
    IMFSensorActivityReport.GetProcessActivity = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFSensorProcessActivity_head))(6, 'GetProcessActivity', ((1, 'Index'),(1, 'ppProcessActivity'),)))
    win32more.System.Com.IUnknown
    return IMFSensorActivityReport
def _define_IMFSensorDevice_head():
    class IMFSensorDevice(win32more.System.Com.IUnknown_head):
        Guid = Guid('fb9f48f2-2a18-4e28-97-30-78-6f-30-f0-4d-c4')
    return IMFSensorDevice
def _define_IMFSensorDevice():
    IMFSensorDevice = win32more.Media.MediaFoundation.IMFSensorDevice_head
    IMFSensorDevice.GetDeviceId = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64))(3, 'GetDeviceId', ((1, 'pDeviceId'),)))
    IMFSensorDevice.GetDeviceType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFSensorDeviceType))(4, 'GetDeviceType', ((1, 'pType'),)))
    IMFSensorDevice.GetFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64))(5, 'GetFlags', ((1, 'pFlags'),)))
    IMFSensorDevice.GetSymbolicLink = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,Int32,POINTER(Int32))(6, 'GetSymbolicLink', ((1, 'SymbolicLink'),(1, 'cchSymbolicLink'),(1, 'pcchWritten'),)))
    IMFSensorDevice.GetDeviceAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head))(7, 'GetDeviceAttributes', ((1, 'ppAttributes'),)))
    IMFSensorDevice.GetStreamAttributesCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFSensorStreamType,POINTER(UInt32))(8, 'GetStreamAttributesCount', ((1, 'eType'),(1, 'pdwCount'),)))
    IMFSensorDevice.GetStreamAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFSensorStreamType,UInt32,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head))(9, 'GetStreamAttributes', ((1, 'eType'),(1, 'dwIndex'),(1, 'ppAttributes'),)))
    IMFSensorDevice.SetSensorDeviceMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFSensorDeviceMode)(10, 'SetSensorDeviceMode', ((1, 'eMode'),)))
    IMFSensorDevice.GetSensorDeviceMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFSensorDeviceMode))(11, 'GetSensorDeviceMode', ((1, 'peMode'),)))
    win32more.System.Com.IUnknown
    return IMFSensorDevice
def _define_IMFSensorGroup_head():
    class IMFSensorGroup(win32more.System.Com.IUnknown_head):
        Guid = Guid('4110243a-9757-461f-89-f1-f2-23-45-bc-ab-4e')
    return IMFSensorGroup
def _define_IMFSensorGroup():
    IMFSensorGroup = win32more.Media.MediaFoundation.IMFSensorGroup_head
    IMFSensorGroup.GetSymbolicLink = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,Int32,POINTER(Int32))(3, 'GetSymbolicLink', ((1, 'SymbolicLink'),(1, 'cchSymbolicLink'),(1, 'pcchWritten'),)))
    IMFSensorGroup.GetFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64))(4, 'GetFlags', ((1, 'pFlags'),)))
    IMFSensorGroup.GetSensorGroupAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head))(5, 'GetSensorGroupAttributes', ((1, 'ppAttributes'),)))
    IMFSensorGroup.GetSensorDeviceCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(6, 'GetSensorDeviceCount', ((1, 'pdwCount'),)))
    IMFSensorGroup.GetSensorDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFSensorDevice_head))(7, 'GetSensorDevice', ((1, 'dwIndex'),(1, 'ppDevice'),)))
    IMFSensorGroup.SetDefaultSensorDeviceIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(8, 'SetDefaultSensorDeviceIndex', ((1, 'dwIndex'),)))
    IMFSensorGroup.GetDefaultSensorDeviceIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(9, 'GetDefaultSensorDeviceIndex', ((1, 'pdwIndex'),)))
    IMFSensorGroup.CreateMediaSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaSource_head))(10, 'CreateMediaSource', ((1, 'ppSource'),)))
    win32more.System.Com.IUnknown
    return IMFSensorGroup
def _define_IMFSensorProcessActivity_head():
    class IMFSensorProcessActivity(win32more.System.Com.IUnknown_head):
        Guid = Guid('39dc7f4a-b141-4719-81-3c-a7-f4-61-62-a2-b8')
    return IMFSensorProcessActivity
def _define_IMFSensorProcessActivity():
    IMFSensorProcessActivity = win32more.Media.MediaFoundation.IMFSensorProcessActivity_head
    IMFSensorProcessActivity.GetProcessId = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'GetProcessId', ((1, 'pPID'),)))
    IMFSensorProcessActivity.GetStreamingState = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(4, 'GetStreamingState', ((1, 'pfStreaming'),)))
    IMFSensorProcessActivity.GetStreamingMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFSensorDeviceMode))(5, 'GetStreamingMode', ((1, 'pMode'),)))
    IMFSensorProcessActivity.GetReportTime = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.FILETIME_head))(6, 'GetReportTime', ((1, 'pft'),)))
    win32more.System.Com.IUnknown
    return IMFSensorProcessActivity
def _define_IMFSensorProfile_head():
    class IMFSensorProfile(win32more.System.Com.IUnknown_head):
        Guid = Guid('22f765d1-8dab-4107-84-6d-56-ba-f7-22-15-e7')
    return IMFSensorProfile
def _define_IMFSensorProfile():
    IMFSensorProfile = win32more.Media.MediaFoundation.IMFSensorProfile_head
    IMFSensorProfile.GetProfileId = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.SENSORPROFILEID_head))(3, 'GetProfileId', ((1, 'pId'),)))
    IMFSensorProfile.AddProfileFilter = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.PWSTR)(4, 'AddProfileFilter', ((1, 'StreamId'),(1, 'wzFilterSetString'),)))
    IMFSensorProfile.IsMediaTypeSupported = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(win32more.Foundation.BOOL))(5, 'IsMediaTypeSupported', ((1, 'StreamId'),(1, 'pMediaType'),(1, 'pfSupported'),)))
    IMFSensorProfile.AddBlockedControl = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR)(6, 'AddBlockedControl', ((1, 'wzBlockedControl'),)))
    win32more.System.Com.IUnknown
    return IMFSensorProfile
def _define_IMFSensorProfileCollection_head():
    class IMFSensorProfileCollection(win32more.System.Com.IUnknown_head):
        Guid = Guid('c95ea55b-0187-48be-93-53-8d-25-07-66-23-51')
    return IMFSensorProfileCollection
def _define_IMFSensorProfileCollection():
    IMFSensorProfileCollection = win32more.Media.MediaFoundation.IMFSensorProfileCollection_head
    IMFSensorProfileCollection.GetProfileCount = COMMETHOD(WINFUNCTYPE(UInt32,)(3, 'GetProfileCount', ()))
    IMFSensorProfileCollection.GetProfile = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFSensorProfile_head))(4, 'GetProfile', ((1, 'Index'),(1, 'ppProfile'),)))
    IMFSensorProfileCollection.AddProfile = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSensorProfile_head)(5, 'AddProfile', ((1, 'pProfile'),)))
    IMFSensorProfileCollection.FindProfile = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.SENSORPROFILEID_head),POINTER(win32more.Media.MediaFoundation.IMFSensorProfile_head))(6, 'FindProfile', ((1, 'ProfileId'),(1, 'ppProfile'),)))
    IMFSensorProfileCollection.RemoveProfileByIndex = COMMETHOD(WINFUNCTYPE(Void,UInt32)(7, 'RemoveProfileByIndex', ((1, 'Index'),)))
    IMFSensorProfileCollection.RemoveProfile = COMMETHOD(WINFUNCTYPE(Void,POINTER(win32more.Media.MediaFoundation.SENSORPROFILEID_head))(8, 'RemoveProfile', ((1, 'ProfileId'),)))
    win32more.System.Com.IUnknown
    return IMFSensorProfileCollection
def _define_IMFSensorStream_head():
    class IMFSensorStream(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('e9a42171-c56e-498a-8b-39-ed-a5-a0-70-b7-fc')
    return IMFSensorStream
def _define_IMFSensorStream():
    IMFSensorStream = win32more.Media.MediaFoundation.IMFSensorStream_head
    IMFSensorStream.GetMediaTypeCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(33, 'GetMediaTypeCount', ((1, 'pdwCount'),)))
    IMFSensorStream.GetMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(34, 'GetMediaType', ((1, 'dwIndex'),(1, 'ppMediaType'),)))
    IMFSensorStream.CloneSensorStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFSensorStream_head))(35, 'CloneSensorStream', ((1, 'ppStream'),)))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFSensorStream
def _define_IMFSensorTransformFactory_head():
    class IMFSensorTransformFactory(win32more.System.Com.IUnknown_head):
        Guid = Guid('eed9c2ee-66b4-4f18-a6-97-ac-7d-39-60-21-5c')
    return IMFSensorTransformFactory
def _define_IMFSensorTransformFactory():
    IMFSensorTransformFactory = win32more.Media.MediaFoundation.IMFSensorTransformFactory_head
    IMFSensorTransformFactory.GetFactoryAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head))(3, 'GetFactoryAttributes', ((1, 'ppAttributes'),)))
    IMFSensorTransformFactory.InitializeFactory = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFCollection_head,win32more.Media.MediaFoundation.IMFAttributes_head)(4, 'InitializeFactory', ((1, 'dwMaxTransformCount'),(1, 'pSensorDevices'),(1, 'pAttributes'),)))
    IMFSensorTransformFactory.GetTransformCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(5, 'GetTransformCount', ((1, 'pdwCount'),)))
    IMFSensorTransformFactory.GetTransformInformation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.IMFAttributes_head),POINTER(win32more.Media.MediaFoundation.IMFCollection_head))(6, 'GetTransformInformation', ((1, 'TransformIndex'),(1, 'pguidTransformId'),(1, 'ppAttributes'),(1, 'ppStreamInformation'),)))
    IMFSensorTransformFactory.CreateTransform = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.Media.MediaFoundation.IMFDeviceTransform_head))(7, 'CreateTransform', ((1, 'guidSensorTransformID'),(1, 'pAttributes'),(1, 'ppDeviceMFT'),)))
    win32more.System.Com.IUnknown
    return IMFSensorTransformFactory
def _define_IMFSequencerSource_head():
    class IMFSequencerSource(win32more.System.Com.IUnknown_head):
        Guid = Guid('197cd219-19cb-4de1-a6-4c-ac-f2-ed-cb-e5-9e')
    return IMFSequencerSource
def _define_IMFSequencerSource():
    IMFSequencerSource = win32more.Media.MediaFoundation.IMFSequencerSource_head
    IMFSequencerSource.AppendTopology = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTopology_head,UInt32,POINTER(UInt32))(3, 'AppendTopology', ((1, 'pTopology'),(1, 'dwFlags'),(1, 'pdwId'),)))
    IMFSequencerSource.DeleteTopology = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(4, 'DeleteTopology', ((1, 'dwId'),)))
    IMFSequencerSource.GetPresentationContext = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFPresentationDescriptor_head,POINTER(UInt32),POINTER(win32more.Media.MediaFoundation.IMFTopology_head))(5, 'GetPresentationContext', ((1, 'pPD'),(1, 'pId'),(1, 'ppTopology'),)))
    IMFSequencerSource.UpdateTopology = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFTopology_head)(6, 'UpdateTopology', ((1, 'dwId'),(1, 'pTopology'),)))
    IMFSequencerSource.UpdateTopologyFlags = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32)(7, 'UpdateTopologyFlags', ((1, 'dwId'),(1, 'dwFlags'),)))
    win32more.System.Com.IUnknown
    return IMFSequencerSource
def _define_IMFSharingEngineClassFactory_head():
    class IMFSharingEngineClassFactory(win32more.System.Com.IUnknown_head):
        Guid = Guid('2ba61f92-8305-413b-97-33-fa-f1-5f-25-93-84')
    return IMFSharingEngineClassFactory
def _define_IMFSharingEngineClassFactory():
    IMFSharingEngineClassFactory = win32more.Media.MediaFoundation.IMFSharingEngineClassFactory_head
    IMFSharingEngineClassFactory.CreateInstance = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFAttributes_head,POINTER(win32more.System.Com.IUnknown_head))(3, 'CreateInstance', ((1, 'dwFlags'),(1, 'pAttr'),(1, 'ppEngine'),)))
    win32more.System.Com.IUnknown
    return IMFSharingEngineClassFactory
def _define_IMFShutdown_head():
    class IMFShutdown(win32more.System.Com.IUnknown_head):
        Guid = Guid('97ec2ea4-0e42-4937-97-ac-9d-6d-32-88-24-e1')
    return IMFShutdown
def _define_IMFShutdown():
    IMFShutdown = win32more.Media.MediaFoundation.IMFShutdown_head
    IMFShutdown.Shutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(3, 'Shutdown', ()))
    IMFShutdown.GetShutdownStatus = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFSHUTDOWN_STATUS))(4, 'GetShutdownStatus', ((1, 'pStatus'),)))
    win32more.System.Com.IUnknown
    return IMFShutdown
def _define_IMFSignedLibrary_head():
    class IMFSignedLibrary(win32more.System.Com.IUnknown_head):
        Guid = Guid('4a724bca-ff6a-4c07-8e-0d-7a-35-84-21-cf-06')
    return IMFSignedLibrary
def _define_IMFSignedLibrary():
    IMFSignedLibrary = win32more.Media.MediaFoundation.IMFSignedLibrary_head
    IMFSignedLibrary.GetProcedureAddress = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PSTR,POINTER(c_void_p))(3, 'GetProcedureAddress', ((1, 'name'),(1, 'address'),)))
    win32more.System.Com.IUnknown
    return IMFSignedLibrary
def _define_IMFSimpleAudioVolume_head():
    class IMFSimpleAudioVolume(win32more.System.Com.IUnknown_head):
        Guid = Guid('089edf13-cf71-4338-8d-13-9e-56-9d-bd-c3-19')
    return IMFSimpleAudioVolume
def _define_IMFSimpleAudioVolume():
    IMFSimpleAudioVolume = win32more.Media.MediaFoundation.IMFSimpleAudioVolume_head
    IMFSimpleAudioVolume.SetMasterVolume = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Single)(3, 'SetMasterVolume', ((1, 'fLevel'),)))
    IMFSimpleAudioVolume.GetMasterVolume = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Single))(4, 'GetMasterVolume', ((1, 'pfLevel'),)))
    IMFSimpleAudioVolume.SetMute = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL)(5, 'SetMute', ((1, 'bMute'),)))
    IMFSimpleAudioVolume.GetMute = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(6, 'GetMute', ((1, 'pbMute'),)))
    win32more.System.Com.IUnknown
    return IMFSimpleAudioVolume
def _define_IMFSinkWriter_head():
    class IMFSinkWriter(win32more.System.Com.IUnknown_head):
        Guid = Guid('3137f1cd-fe5e-4805-a5-d8-fb-47-74-48-cb-3d')
    return IMFSinkWriter
def _define_IMFSinkWriter():
    IMFSinkWriter = win32more.Media.MediaFoundation.IMFSinkWriter_head
    IMFSinkWriter.AddStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(UInt32))(3, 'AddStream', ((1, 'pTargetMediaType'),(1, 'pdwStreamIndex'),)))
    IMFSinkWriter.SetInputMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.Media.MediaFoundation.IMFAttributes_head)(4, 'SetInputMediaType', ((1, 'dwStreamIndex'),(1, 'pInputMediaType'),(1, 'pEncodingParameters'),)))
    IMFSinkWriter.BeginWriting = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(5, 'BeginWriting', ()))
    IMFSinkWriter.WriteSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFSample_head)(6, 'WriteSample', ((1, 'dwStreamIndex'),(1, 'pSample'),)))
    IMFSinkWriter.SendStreamTick = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,Int64)(7, 'SendStreamTick', ((1, 'dwStreamIndex'),(1, 'llTimestamp'),)))
    IMFSinkWriter.PlaceMarker = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_void_p)(8, 'PlaceMarker', ((1, 'dwStreamIndex'),(1, 'pvContext'),)))
    IMFSinkWriter.NotifyEndOfSegment = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(9, 'NotifyEndOfSegment', ((1, 'dwStreamIndex'),)))
    IMFSinkWriter.Flush = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(10, 'Flush', ((1, 'dwStreamIndex'),)))
    IMFSinkWriter.Finalize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(11, 'Finalize', ()))
    IMFSinkWriter.GetServiceForStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),POINTER(Guid),POINTER(c_void_p))(12, 'GetServiceForStream', ((1, 'dwStreamIndex'),(1, 'guidService'),(1, 'riid'),(1, 'ppvObject'),)))
    IMFSinkWriter.GetStatistics = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.MF_SINK_WRITER_STATISTICS_head))(13, 'GetStatistics', ((1, 'dwStreamIndex'),(1, 'pStats'),)))
    win32more.System.Com.IUnknown
    return IMFSinkWriter
def _define_IMFSinkWriterCallback_head():
    class IMFSinkWriterCallback(win32more.System.Com.IUnknown_head):
        Guid = Guid('666f76de-33d2-41b9-a4-58-29-ed-0a-97-2c-58')
    return IMFSinkWriterCallback
def _define_IMFSinkWriterCallback():
    IMFSinkWriterCallback = win32more.Media.MediaFoundation.IMFSinkWriterCallback_head
    IMFSinkWriterCallback.OnFinalize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HRESULT)(3, 'OnFinalize', ((1, 'hrStatus'),)))
    IMFSinkWriterCallback.OnMarker = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_void_p)(4, 'OnMarker', ((1, 'dwStreamIndex'),(1, 'pvContext'),)))
    win32more.System.Com.IUnknown
    return IMFSinkWriterCallback
def _define_IMFSinkWriterCallback2_head():
    class IMFSinkWriterCallback2(win32more.Media.MediaFoundation.IMFSinkWriterCallback_head):
        Guid = Guid('2456bd58-c067-4513-84-fe-8d-0c-88-ff-dc-61')
    return IMFSinkWriterCallback2
def _define_IMFSinkWriterCallback2():
    IMFSinkWriterCallback2 = win32more.Media.MediaFoundation.IMFSinkWriterCallback2_head
    IMFSinkWriterCallback2.OnTransformChange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(5, 'OnTransformChange', ()))
    IMFSinkWriterCallback2.OnStreamError = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.HRESULT)(6, 'OnStreamError', ((1, 'dwStreamIndex'),(1, 'hrStatus'),)))
    win32more.Media.MediaFoundation.IMFSinkWriterCallback
    return IMFSinkWriterCallback2
def _define_IMFSinkWriterEncoderConfig_head():
    class IMFSinkWriterEncoderConfig(win32more.System.Com.IUnknown_head):
        Guid = Guid('17c3779e-3cde-4ede-8c-60-38-99-f5-f5-3a-d6')
    return IMFSinkWriterEncoderConfig
def _define_IMFSinkWriterEncoderConfig():
    IMFSinkWriterEncoderConfig = win32more.Media.MediaFoundation.IMFSinkWriterEncoderConfig_head
    IMFSinkWriterEncoderConfig.SetTargetMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head,win32more.Media.MediaFoundation.IMFAttributes_head)(3, 'SetTargetMediaType', ((1, 'dwStreamIndex'),(1, 'pTargetMediaType'),(1, 'pEncodingParameters'),)))
    IMFSinkWriterEncoderConfig.PlaceEncodingParameters = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFAttributes_head)(4, 'PlaceEncodingParameters', ((1, 'dwStreamIndex'),(1, 'pEncodingParameters'),)))
    win32more.System.Com.IUnknown
    return IMFSinkWriterEncoderConfig
def _define_IMFSinkWriterEx_head():
    class IMFSinkWriterEx(win32more.Media.MediaFoundation.IMFSinkWriter_head):
        Guid = Guid('588d72ab-5bc1-496a-87-14-b7-06-17-14-1b-25')
    return IMFSinkWriterEx
def _define_IMFSinkWriterEx():
    IMFSinkWriterEx = win32more.Media.MediaFoundation.IMFSinkWriterEx_head
    IMFSinkWriterEx.GetTransformForStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.IMFTransform_head))(14, 'GetTransformForStream', ((1, 'dwStreamIndex'),(1, 'dwTransformIndex'),(1, 'pGuidCategory'),(1, 'ppTransform'),)))
    win32more.Media.MediaFoundation.IMFSinkWriter
    return IMFSinkWriterEx
def _define_IMFSourceBuffer_head():
    class IMFSourceBuffer(win32more.System.Com.IUnknown_head):
        Guid = Guid('e2cd3a4b-af25-4d3d-91-10-da-0e-6f-8e-e8-77')
    return IMFSourceBuffer
def _define_IMFSourceBuffer():
    IMFSourceBuffer = win32more.Media.MediaFoundation.IMFSourceBuffer_head
    IMFSourceBuffer.GetUpdating = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL,)(3, 'GetUpdating', ()))
    IMFSourceBuffer.GetBuffered = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaTimeRange_head))(4, 'GetBuffered', ((1, 'ppBuffered'),)))
    IMFSourceBuffer.GetTimeStampOffset = COMMETHOD(WINFUNCTYPE(Double,)(5, 'GetTimeStampOffset', ()))
    IMFSourceBuffer.SetTimeStampOffset = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double)(6, 'SetTimeStampOffset', ((1, 'offset'),)))
    IMFSourceBuffer.GetAppendWindowStart = COMMETHOD(WINFUNCTYPE(Double,)(7, 'GetAppendWindowStart', ()))
    IMFSourceBuffer.SetAppendWindowStart = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double)(8, 'SetAppendWindowStart', ((1, 'time'),)))
    IMFSourceBuffer.GetAppendWindowEnd = COMMETHOD(WINFUNCTYPE(Double,)(9, 'GetAppendWindowEnd', ()))
    IMFSourceBuffer.SetAppendWindowEnd = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double)(10, 'SetAppendWindowEnd', ((1, 'time'),)))
    IMFSourceBuffer.Append = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,UInt32)(11, 'Append', ((1, 'pData'),(1, 'len'),)))
    IMFSourceBuffer.AppendByteStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,POINTER(UInt64))(12, 'AppendByteStream', ((1, 'pStream'),(1, 'pMaxLen'),)))
    IMFSourceBuffer.Abort = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(13, 'Abort', ()))
    IMFSourceBuffer.Remove = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double,Double)(14, 'Remove', ((1, 'start'),(1, 'end'),)))
    win32more.System.Com.IUnknown
    return IMFSourceBuffer
def _define_IMFSourceBufferAppendMode_head():
    class IMFSourceBufferAppendMode(win32more.System.Com.IUnknown_head):
        Guid = Guid('19666fb4-babe-4c55-bc-03-0a-07-4d-a3-7e-2a')
    return IMFSourceBufferAppendMode
def _define_IMFSourceBufferAppendMode():
    IMFSourceBufferAppendMode = win32more.Media.MediaFoundation.IMFSourceBufferAppendMode_head
    IMFSourceBufferAppendMode.GetAppendMode = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.MF_MSE_APPEND_MODE,)(3, 'GetAppendMode', ()))
    IMFSourceBufferAppendMode.SetAppendMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_MSE_APPEND_MODE)(4, 'SetAppendMode', ((1, 'mode'),)))
    win32more.System.Com.IUnknown
    return IMFSourceBufferAppendMode
def _define_IMFSourceBufferList_head():
    class IMFSourceBufferList(win32more.System.Com.IUnknown_head):
        Guid = Guid('249981f8-8325-41f3-b8-0c-3b-9e-3a-ad-0c-be')
    return IMFSourceBufferList
def _define_IMFSourceBufferList():
    IMFSourceBufferList = win32more.Media.MediaFoundation.IMFSourceBufferList_head
    IMFSourceBufferList.GetLength = COMMETHOD(WINFUNCTYPE(UInt32,)(3, 'GetLength', ()))
    IMFSourceBufferList.GetSourceBuffer = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.IMFSourceBuffer_head,UInt32)(4, 'GetSourceBuffer', ((1, 'index'),)))
    win32more.System.Com.IUnknown
    return IMFSourceBufferList
def _define_IMFSourceBufferNotify_head():
    class IMFSourceBufferNotify(win32more.System.Com.IUnknown_head):
        Guid = Guid('87e47623-2ceb-45d6-9b-88-d8-52-0c-4d-cb-bc')
    return IMFSourceBufferNotify
def _define_IMFSourceBufferNotify():
    IMFSourceBufferNotify = win32more.Media.MediaFoundation.IMFSourceBufferNotify_head
    IMFSourceBufferNotify.OnUpdateStart = COMMETHOD(WINFUNCTYPE(Void,)(3, 'OnUpdateStart', ()))
    IMFSourceBufferNotify.OnAbort = COMMETHOD(WINFUNCTYPE(Void,)(4, 'OnAbort', ()))
    IMFSourceBufferNotify.OnError = COMMETHOD(WINFUNCTYPE(Void,win32more.Foundation.HRESULT)(5, 'OnError', ((1, 'hr'),)))
    IMFSourceBufferNotify.OnUpdate = COMMETHOD(WINFUNCTYPE(Void,)(6, 'OnUpdate', ()))
    IMFSourceBufferNotify.OnUpdateEnd = COMMETHOD(WINFUNCTYPE(Void,)(7, 'OnUpdateEnd', ()))
    win32more.System.Com.IUnknown
    return IMFSourceBufferNotify
def _define_IMFSourceOpenMonitor_head():
    class IMFSourceOpenMonitor(win32more.System.Com.IUnknown_head):
        Guid = Guid('059054b3-027c-494c-a2-7d-91-13-29-1c-f8-7f')
    return IMFSourceOpenMonitor
def _define_IMFSourceOpenMonitor():
    IMFSourceOpenMonitor = win32more.Media.MediaFoundation.IMFSourceOpenMonitor_head
    IMFSourceOpenMonitor.OnSourceEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFMediaEvent_head)(3, 'OnSourceEvent', ((1, 'pEvent'),)))
    win32more.System.Com.IUnknown
    return IMFSourceOpenMonitor
def _define_IMFSourceReader_head():
    class IMFSourceReader(win32more.System.Com.IUnknown_head):
        Guid = Guid('70ae66f2-c809-4e4f-89-15-bd-cb-40-6b-79-93')
    return IMFSourceReader
def _define_IMFSourceReader():
    IMFSourceReader = win32more.Media.MediaFoundation.IMFSourceReader_head
    IMFSourceReader.GetStreamSelection = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Foundation.BOOL))(3, 'GetStreamSelection', ((1, 'dwStreamIndex'),(1, 'pfSelected'),)))
    IMFSourceReader.SetStreamSelection = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.BOOL)(4, 'SetStreamSelection', ((1, 'dwStreamIndex'),(1, 'fSelected'),)))
    IMFSourceReader.GetNativeMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(5, 'GetNativeMediaType', ((1, 'dwStreamIndex'),(1, 'dwMediaTypeIndex'),(1, 'ppMediaType'),)))
    IMFSourceReader.GetCurrentMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(6, 'GetCurrentMediaType', ((1, 'dwStreamIndex'),(1, 'ppMediaType'),)))
    IMFSourceReader.SetCurrentMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32),win32more.Media.MediaFoundation.IMFMediaType_head)(7, 'SetCurrentMediaType', ((1, 'dwStreamIndex'),(1, 'pdwReserved'),(1, 'pMediaType'),)))
    IMFSourceReader.SetCurrentPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(8, 'SetCurrentPosition', ((1, 'guidTimeFormat'),(1, 'varPosition'),)))
    IMFSourceReader.ReadSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(UInt32),POINTER(UInt32),POINTER(Int64),POINTER(win32more.Media.MediaFoundation.IMFSample_head))(9, 'ReadSample', ((1, 'dwStreamIndex'),(1, 'dwControlFlags'),(1, 'pdwActualStreamIndex'),(1, 'pdwStreamFlags'),(1, 'pllTimestamp'),(1, 'ppSample'),)))
    IMFSourceReader.Flush = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(10, 'Flush', ((1, 'dwStreamIndex'),)))
    IMFSourceReader.GetServiceForStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),POINTER(Guid),POINTER(c_void_p))(11, 'GetServiceForStream', ((1, 'dwStreamIndex'),(1, 'guidService'),(1, 'riid'),(1, 'ppvObject'),)))
    IMFSourceReader.GetPresentationAttribute = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(12, 'GetPresentationAttribute', ((1, 'dwStreamIndex'),(1, 'guidAttribute'),(1, 'pvarAttribute'),)))
    win32more.System.Com.IUnknown
    return IMFSourceReader
def _define_IMFSourceReaderCallback_head():
    class IMFSourceReaderCallback(win32more.System.Com.IUnknown_head):
        Guid = Guid('deec8d99-fa1d-4d82-84-c2-2c-89-69-94-48-67')
    return IMFSourceReaderCallback
def _define_IMFSourceReaderCallback():
    IMFSourceReaderCallback = win32more.Media.MediaFoundation.IMFSourceReaderCallback_head
    IMFSourceReaderCallback.OnReadSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HRESULT,UInt32,UInt32,Int64,win32more.Media.MediaFoundation.IMFSample_head)(3, 'OnReadSample', ((1, 'hrStatus'),(1, 'dwStreamIndex'),(1, 'dwStreamFlags'),(1, 'llTimestamp'),(1, 'pSample'),)))
    IMFSourceReaderCallback.OnFlush = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(4, 'OnFlush', ((1, 'dwStreamIndex'),)))
    IMFSourceReaderCallback.OnEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaEvent_head)(5, 'OnEvent', ((1, 'dwStreamIndex'),(1, 'pEvent'),)))
    win32more.System.Com.IUnknown
    return IMFSourceReaderCallback
def _define_IMFSourceReaderCallback2_head():
    class IMFSourceReaderCallback2(win32more.Media.MediaFoundation.IMFSourceReaderCallback_head):
        Guid = Guid('cf839fe6-8c2a-4dd2-b6-ea-c2-2d-69-61-af-05')
    return IMFSourceReaderCallback2
def _define_IMFSourceReaderCallback2():
    IMFSourceReaderCallback2 = win32more.Media.MediaFoundation.IMFSourceReaderCallback2_head
    IMFSourceReaderCallback2.OnTransformChange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(6, 'OnTransformChange', ()))
    IMFSourceReaderCallback2.OnStreamError = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.HRESULT)(7, 'OnStreamError', ((1, 'dwStreamIndex'),(1, 'hrStatus'),)))
    win32more.Media.MediaFoundation.IMFSourceReaderCallback
    return IMFSourceReaderCallback2
def _define_IMFSourceReaderEx_head():
    class IMFSourceReaderEx(win32more.Media.MediaFoundation.IMFSourceReader_head):
        Guid = Guid('7b981cf0-560e-4116-98-75-b0-99-89-5f-23-d7')
    return IMFSourceReaderEx
def _define_IMFSourceReaderEx():
    IMFSourceReaderEx = win32more.Media.MediaFoundation.IMFSourceReaderEx_head
    IMFSourceReaderEx.SetNativeMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head,POINTER(UInt32))(13, 'SetNativeMediaType', ((1, 'dwStreamIndex'),(1, 'pMediaType'),(1, 'pdwStreamFlags'),)))
    IMFSourceReaderEx.AddTransformForStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.System.Com.IUnknown_head)(14, 'AddTransformForStream', ((1, 'dwStreamIndex'),(1, 'pTransformOrActivate'),)))
    IMFSourceReaderEx.RemoveAllTransformsForStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(15, 'RemoveAllTransformsForStream', ((1, 'dwStreamIndex'),)))
    IMFSourceReaderEx.GetTransformForStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.IMFTransform_head))(16, 'GetTransformForStream', ((1, 'dwStreamIndex'),(1, 'dwTransformIndex'),(1, 'pGuidCategory'),(1, 'ppTransform'),)))
    win32more.Media.MediaFoundation.IMFSourceReader
    return IMFSourceReaderEx
def _define_IMFSourceResolver_head():
    class IMFSourceResolver(win32more.System.Com.IUnknown_head):
        Guid = Guid('fbe5a32d-a497-4b61-bb-85-97-b1-a8-48-a6-e3')
    return IMFSourceResolver
def _define_IMFSourceResolver():
    IMFSourceResolver = win32more.Media.MediaFoundation.IMFSourceResolver_head
    IMFSourceResolver.CreateObjectFromURL = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,UInt32,win32more.UI.Shell.PropertiesSystem.IPropertyStore_head,POINTER(win32more.Media.MediaFoundation.MF_OBJECT_TYPE),POINTER(win32more.System.Com.IUnknown_head))(3, 'CreateObjectFromURL', ((1, 'pwszURL'),(1, 'dwFlags'),(1, 'pProps'),(1, 'pObjectType'),(1, 'ppObject'),)))
    IMFSourceResolver.CreateObjectFromByteStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Foundation.PWSTR,UInt32,win32more.UI.Shell.PropertiesSystem.IPropertyStore_head,POINTER(win32more.Media.MediaFoundation.MF_OBJECT_TYPE),POINTER(win32more.System.Com.IUnknown_head))(4, 'CreateObjectFromByteStream', ((1, 'pByteStream'),(1, 'pwszURL'),(1, 'dwFlags'),(1, 'pProps'),(1, 'pObjectType'),(1, 'ppObject'),)))
    IMFSourceResolver.BeginCreateObjectFromURL = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,UInt32,win32more.UI.Shell.PropertiesSystem.IPropertyStore_head,POINTER(win32more.System.Com.IUnknown_head),win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(5, 'BeginCreateObjectFromURL', ((1, 'pwszURL'),(1, 'dwFlags'),(1, 'pProps'),(1, 'ppIUnknownCancelCookie'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFSourceResolver.EndCreateObjectFromURL = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(win32more.Media.MediaFoundation.MF_OBJECT_TYPE),POINTER(win32more.System.Com.IUnknown_head))(6, 'EndCreateObjectFromURL', ((1, 'pResult'),(1, 'pObjectType'),(1, 'ppObject'),)))
    IMFSourceResolver.BeginCreateObjectFromByteStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Foundation.PWSTR,UInt32,win32more.UI.Shell.PropertiesSystem.IPropertyStore_head,POINTER(win32more.System.Com.IUnknown_head),win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(7, 'BeginCreateObjectFromByteStream', ((1, 'pByteStream'),(1, 'pwszURL'),(1, 'dwFlags'),(1, 'pProps'),(1, 'ppIUnknownCancelCookie'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFSourceResolver.EndCreateObjectFromByteStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(win32more.Media.MediaFoundation.MF_OBJECT_TYPE),POINTER(win32more.System.Com.IUnknown_head))(8, 'EndCreateObjectFromByteStream', ((1, 'pResult'),(1, 'pObjectType'),(1, 'ppObject'),)))
    IMFSourceResolver.CancelObjectCreation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head)(9, 'CancelObjectCreation', ((1, 'pIUnknownCancelCookie'),)))
    win32more.System.Com.IUnknown
    return IMFSourceResolver
def _define_IMFSpatialAudioObjectBuffer_head():
    class IMFSpatialAudioObjectBuffer(win32more.Media.MediaFoundation.IMFMediaBuffer_head):
        Guid = Guid('d396ec8c-605e-4249-97-8d-72-ad-1c-31-28-72')
    return IMFSpatialAudioObjectBuffer
def _define_IMFSpatialAudioObjectBuffer():
    IMFSpatialAudioObjectBuffer = win32more.Media.MediaFoundation.IMFSpatialAudioObjectBuffer_head
    IMFSpatialAudioObjectBuffer.SetID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(8, 'SetID', ((1, 'u32ID'),)))
    IMFSpatialAudioObjectBuffer.GetID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(9, 'GetID', ((1, 'pu32ID'),)))
    IMFSpatialAudioObjectBuffer.SetType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.Audio.AudioObjectType)(10, 'SetType', ((1, 'type'),)))
    IMFSpatialAudioObjectBuffer.GetType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.Audio.AudioObjectType))(11, 'GetType', ((1, 'pType'),)))
    IMFSpatialAudioObjectBuffer.GetMetadataItems = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.Audio.ISpatialAudioMetadataItems_head))(12, 'GetMetadataItems', ((1, 'ppMetadataItems'),)))
    win32more.Media.MediaFoundation.IMFMediaBuffer
    return IMFSpatialAudioObjectBuffer
def _define_IMFSpatialAudioSample_head():
    class IMFSpatialAudioSample(win32more.Media.MediaFoundation.IMFSample_head):
        Guid = Guid('abf28a9b-3393-4290-ba-79-5f-fc-46-d9-86-b2')
    return IMFSpatialAudioSample
def _define_IMFSpatialAudioSample():
    IMFSpatialAudioSample = win32more.Media.MediaFoundation.IMFSpatialAudioSample_head
    IMFSpatialAudioSample.GetObjectCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(47, 'GetObjectCount', ((1, 'pdwObjectCount'),)))
    IMFSpatialAudioSample.AddSpatialAudioObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSpatialAudioObjectBuffer_head)(48, 'AddSpatialAudioObject', ((1, 'pAudioObjBuffer'),)))
    IMFSpatialAudioSample.GetSpatialAudioObjectByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFSpatialAudioObjectBuffer_head))(49, 'GetSpatialAudioObjectByIndex', ((1, 'dwIndex'),(1, 'ppAudioObjBuffer'),)))
    win32more.Media.MediaFoundation.IMFSample
    return IMFSpatialAudioSample
def _define_IMFSSLCertificateManager_head():
    class IMFSSLCertificateManager(win32more.System.Com.IUnknown_head):
        Guid = Guid('61f7d887-1230-4a8b-ae-ba-8a-d4-34-d1-a6-4d')
    return IMFSSLCertificateManager
def _define_IMFSSLCertificateManager():
    IMFSSLCertificateManager = win32more.Media.MediaFoundation.IMFSSLCertificateManager_head
    IMFSSLCertificateManager.GetClientCertificate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(c_char_p_no),POINTER(UInt32))(3, 'GetClientCertificate', ((1, 'pszURL'),(1, 'ppbData'),(1, 'pcbData'),)))
    IMFSSLCertificateManager.BeginGetClientCertificate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(4, 'BeginGetClientCertificate', ((1, 'pszURL'),(1, 'pCallback'),(1, 'pState'),)))
    IMFSSLCertificateManager.EndGetClientCertificate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(c_char_p_no),POINTER(UInt32))(5, 'EndGetClientCertificate', ((1, 'pResult'),(1, 'ppbData'),(1, 'pcbData'),)))
    IMFSSLCertificateManager.GetCertificatePolicy = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Foundation.BOOL),POINTER(win32more.Foundation.BOOL))(6, 'GetCertificatePolicy', ((1, 'pszURL'),(1, 'pfOverrideAutomaticCheck'),(1, 'pfClientCertificateAvailable'),)))
    IMFSSLCertificateManager.OnServerCertificate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,c_char_p_no,UInt32,POINTER(win32more.Foundation.BOOL))(7, 'OnServerCertificate', ((1, 'pszURL'),(1, 'pbData'),(1, 'cbData'),(1, 'pfIsGood'),)))
    win32more.System.Com.IUnknown
    return IMFSSLCertificateManager
def _define_IMFStreamDescriptor_head():
    class IMFStreamDescriptor(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('56c03d9c-9dbb-45f5-ab-4b-d8-0f-47-c0-59-38')
    return IMFStreamDescriptor
def _define_IMFStreamDescriptor():
    IMFStreamDescriptor = win32more.Media.MediaFoundation.IMFStreamDescriptor_head
    IMFStreamDescriptor.GetStreamIdentifier = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(33, 'GetStreamIdentifier', ((1, 'pdwStreamIdentifier'),)))
    IMFStreamDescriptor.GetMediaTypeHandler = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaTypeHandler_head))(34, 'GetMediaTypeHandler', ((1, 'ppMediaTypeHandler'),)))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFStreamDescriptor
def _define_IMFStreamingSinkConfig_head():
    class IMFStreamingSinkConfig(win32more.System.Com.IUnknown_head):
        Guid = Guid('9db7aa41-3cc5-40d4-85-09-55-58-04-ad-34-cc')
    return IMFStreamingSinkConfig
def _define_IMFStreamingSinkConfig():
    IMFStreamingSinkConfig = win32more.Media.MediaFoundation.IMFStreamingSinkConfig_head
    IMFStreamingSinkConfig.StartStreaming = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL,UInt64)(3, 'StartStreaming', ((1, 'fSeekOffsetIsByteOffset'),(1, 'qwSeekOffset'),)))
    win32more.System.Com.IUnknown
    return IMFStreamingSinkConfig
def _define_IMFStreamSink_head():
    class IMFStreamSink(win32more.Media.MediaFoundation.IMFMediaEventGenerator_head):
        Guid = Guid('0a97b3cf-8e7c-4a3d-8f-8c-0c-84-3d-c2-47-fb')
    return IMFStreamSink
def _define_IMFStreamSink():
    IMFStreamSink = win32more.Media.MediaFoundation.IMFStreamSink_head
    IMFStreamSink.GetMediaSink = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaSink_head))(7, 'GetMediaSink', ((1, 'ppMediaSink'),)))
    IMFStreamSink.GetIdentifier = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(8, 'GetIdentifier', ((1, 'pdwIdentifier'),)))
    IMFStreamSink.GetMediaTypeHandler = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaTypeHandler_head))(9, 'GetMediaTypeHandler', ((1, 'ppHandler'),)))
    IMFStreamSink.ProcessSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSample_head)(10, 'ProcessSample', ((1, 'pSample'),)))
    IMFStreamSink.PlaceMarker = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFSTREAMSINK_MARKER_TYPE,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head),POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(11, 'PlaceMarker', ((1, 'eMarkerType'),(1, 'pvarMarkerValue'),(1, 'pvarContextValue'),)))
    IMFStreamSink.Flush = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(12, 'Flush', ()))
    win32more.Media.MediaFoundation.IMFMediaEventGenerator
    return IMFStreamSink
def _define_IMFSystemId_head():
    class IMFSystemId(win32more.System.Com.IUnknown_head):
        Guid = Guid('fff4af3a-1fc1-4ef9-a2-9b-d2-6c-49-e2-f3-1a')
    return IMFSystemId
def _define_IMFSystemId():
    IMFSystemId = win32more.Media.MediaFoundation.IMFSystemId_head
    IMFSystemId.GetData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(c_char_p_no))(3, 'GetData', ((1, 'size'),(1, 'data'),)))
    IMFSystemId.Setup = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,c_char_p_no,POINTER(UInt32),POINTER(c_char_p_no))(4, 'Setup', ((1, 'stage'),(1, 'cbIn'),(1, 'pbIn'),(1, 'pcbOut'),(1, 'ppbOut'),)))
    win32more.System.Com.IUnknown
    return IMFSystemId
def _define_IMFTimecodeTranslate_head():
    class IMFTimecodeTranslate(win32more.System.Com.IUnknown_head):
        Guid = Guid('ab9d8661-f7e8-4ef4-98-61-89-f3-34-f9-4e-74')
    return IMFTimecodeTranslate
def _define_IMFTimecodeTranslate():
    IMFTimecodeTranslate = win32more.Media.MediaFoundation.IMFTimecodeTranslate_head
    IMFTimecodeTranslate.BeginConvertTimecodeToHNS = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head),win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(3, 'BeginConvertTimecodeToHNS', ((1, 'pPropVarTimecode'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFTimecodeTranslate.EndConvertTimecodeToHNS = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(Int64))(4, 'EndConvertTimecodeToHNS', ((1, 'pResult'),(1, 'phnsTime'),)))
    IMFTimecodeTranslate.BeginConvertHNSToTimecode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int64,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(5, 'BeginConvertHNSToTimecode', ((1, 'hnsTime'),(1, 'pCallback'),(1, 'punkState'),)))
    IMFTimecodeTranslate.EndConvertHNSToTimecode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(win32more.System.Com.StructuredStorage.PROPVARIANT_head))(6, 'EndConvertHNSToTimecode', ((1, 'pResult'),(1, 'pPropVarTimecode'),)))
    win32more.System.Com.IUnknown
    return IMFTimecodeTranslate
def _define_IMFTimedText_head():
    class IMFTimedText(win32more.System.Com.IUnknown_head):
        Guid = Guid('1f2a94c9-a3df-430d-9d-0f-ac-d8-5d-dc-29-af')
    return IMFTimedText
def _define_IMFTimedText():
    IMFTimedText = win32more.Media.MediaFoundation.IMFTimedText_head
    IMFTimedText.RegisterNotifications = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTimedTextNotify_head)(3, 'RegisterNotifications', ((1, 'notify'),)))
    IMFTimedText.SelectTrack = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.BOOL)(4, 'SelectTrack', ((1, 'trackId'),(1, 'selected'),)))
    IMFTimedText.AddDataSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFByteStream_head,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.MF_TIMED_TEXT_TRACK_KIND,win32more.Foundation.BOOL,POINTER(UInt32))(5, 'AddDataSource', ((1, 'byteStream'),(1, 'label'),(1, 'language'),(1, 'kind'),(1, 'isDefault'),(1, 'trackId'),)))
    IMFTimedText.AddDataSourceFromUrl = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.MF_TIMED_TEXT_TRACK_KIND,win32more.Foundation.BOOL,POINTER(UInt32))(6, 'AddDataSourceFromUrl', ((1, 'url'),(1, 'label'),(1, 'language'),(1, 'kind'),(1, 'isDefault'),(1, 'trackId'),)))
    IMFTimedText.AddTrack = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Media.MediaFoundation.MF_TIMED_TEXT_TRACK_KIND,POINTER(win32more.Media.MediaFoundation.IMFTimedTextTrack_head))(7, 'AddTrack', ((1, 'label'),(1, 'language'),(1, 'kind'),(1, 'track'),)))
    IMFTimedText.RemoveTrack = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTimedTextTrack_head)(8, 'RemoveTrack', ((1, 'track'),)))
    IMFTimedText.GetCueTimeOffset = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Double))(9, 'GetCueTimeOffset', ((1, 'offset'),)))
    IMFTimedText.SetCueTimeOffset = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double)(10, 'SetCueTimeOffset', ((1, 'offset'),)))
    IMFTimedText.GetTracks = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTimedTextTrackList_head))(11, 'GetTracks', ((1, 'tracks'),)))
    IMFTimedText.GetActiveTracks = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTimedTextTrackList_head))(12, 'GetActiveTracks', ((1, 'activeTracks'),)))
    IMFTimedText.GetTextTracks = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTimedTextTrackList_head))(13, 'GetTextTracks', ((1, 'textTracks'),)))
    IMFTimedText.GetMetadataTracks = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTimedTextTrackList_head))(14, 'GetMetadataTracks', ((1, 'metadataTracks'),)))
    IMFTimedText.SetInBandEnabled = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL)(15, 'SetInBandEnabled', ((1, 'enabled'),)))
    IMFTimedText.IsInBandEnabled = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL,)(16, 'IsInBandEnabled', ()))
    win32more.System.Com.IUnknown
    return IMFTimedText
def _define_IMFTimedTextBinary_head():
    class IMFTimedTextBinary(win32more.System.Com.IUnknown_head):
        Guid = Guid('4ae3a412-0545-43c4-bf-6f-6b-97-a5-c6-c4-32')
    return IMFTimedTextBinary
def _define_IMFTimedTextBinary():
    IMFTimedTextBinary = win32more.Media.MediaFoundation.IMFTimedTextBinary_head
    IMFTimedTextBinary.GetData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(c_char_p_no),POINTER(UInt32))(3, 'GetData', ((1, 'data'),(1, 'length'),)))
    win32more.System.Com.IUnknown
    return IMFTimedTextBinary
def _define_IMFTimedTextBouten_head():
    class IMFTimedTextBouten(win32more.System.Com.IUnknown_head):
        Guid = Guid('3c5f3e8a-90c0-464e-81-36-89-8d-29-75-f8-47')
    return IMFTimedTextBouten
def _define_IMFTimedTextBouten():
    IMFTimedTextBouten = win32more.Media.MediaFoundation.IMFTimedTextBouten_head
    IMFTimedTextBouten.GetBoutenType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_BOUTEN_TYPE))(3, 'GetBoutenType', ((1, 'value'),)))
    IMFTimedTextBouten.GetBoutenColor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFARGB_head))(4, 'GetBoutenColor', ((1, 'value'),)))
    IMFTimedTextBouten.GetBoutenPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_BOUTEN_POSITION))(5, 'GetBoutenPosition', ((1, 'value'),)))
    win32more.System.Com.IUnknown
    return IMFTimedTextBouten
def _define_IMFTimedTextCue_head():
    class IMFTimedTextCue(win32more.System.Com.IUnknown_head):
        Guid = Guid('1e560447-9a2b-43e1-a9-4c-b0-aa-ab-fb-fb-c9')
    return IMFTimedTextCue
def _define_IMFTimedTextCue():
    IMFTimedTextCue = win32more.Media.MediaFoundation.IMFTimedTextCue_head
    IMFTimedTextCue.GetId = COMMETHOD(WINFUNCTYPE(UInt32,)(3, 'GetId', ()))
    IMFTimedTextCue.GetOriginalId = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(4, 'GetOriginalId', ((1, 'originalId'),)))
    IMFTimedTextCue.GetCueKind = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.MF_TIMED_TEXT_TRACK_KIND,)(5, 'GetCueKind', ()))
    IMFTimedTextCue.GetStartTime = COMMETHOD(WINFUNCTYPE(Double,)(6, 'GetStartTime', ()))
    IMFTimedTextCue.GetDuration = COMMETHOD(WINFUNCTYPE(Double,)(7, 'GetDuration', ()))
    IMFTimedTextCue.GetTrackId = COMMETHOD(WINFUNCTYPE(UInt32,)(8, 'GetTrackId', ()))
    IMFTimedTextCue.GetData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTimedTextBinary_head))(9, 'GetData', ((1, 'data'),)))
    IMFTimedTextCue.GetRegion = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTimedTextRegion_head))(10, 'GetRegion', ((1, 'region'),)))
    IMFTimedTextCue.GetStyle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTimedTextStyle_head))(11, 'GetStyle', ((1, 'style'),)))
    IMFTimedTextCue.GetLineCount = COMMETHOD(WINFUNCTYPE(UInt32,)(12, 'GetLineCount', ()))
    IMFTimedTextCue.GetLine = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFTimedTextFormattedText_head))(13, 'GetLine', ((1, 'index'),(1, 'line'),)))
    win32more.System.Com.IUnknown
    return IMFTimedTextCue
def _define_IMFTimedTextCueList_head():
    class IMFTimedTextCueList(win32more.System.Com.IUnknown_head):
        Guid = Guid('ad128745-211b-40a0-99-81-fe-65-f1-66-d0-fd')
    return IMFTimedTextCueList
def _define_IMFTimedTextCueList():
    IMFTimedTextCueList = win32more.Media.MediaFoundation.IMFTimedTextCueList_head
    IMFTimedTextCueList.GetLength = COMMETHOD(WINFUNCTYPE(UInt32,)(3, 'GetLength', ()))
    IMFTimedTextCueList.GetCueByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFTimedTextCue_head))(4, 'GetCueByIndex', ((1, 'index'),(1, 'cue'),)))
    IMFTimedTextCueList.GetCueById = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFTimedTextCue_head))(5, 'GetCueById', ((1, 'id'),(1, 'cue'),)))
    IMFTimedTextCueList.GetCueByOriginalId = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.IMFTimedTextCue_head))(6, 'GetCueByOriginalId', ((1, 'originalId'),(1, 'cue'),)))
    IMFTimedTextCueList.AddTextCue = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double,Double,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.IMFTimedTextCue_head))(7, 'AddTextCue', ((1, 'start'),(1, 'duration'),(1, 'text'),(1, 'cue'),)))
    IMFTimedTextCueList.AddDataCue = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Double,Double,c_char_p_no,UInt32,POINTER(win32more.Media.MediaFoundation.IMFTimedTextCue_head))(8, 'AddDataCue', ((1, 'start'),(1, 'duration'),(1, 'data'),(1, 'dataSize'),(1, 'cue'),)))
    IMFTimedTextCueList.RemoveCue = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTimedTextCue_head)(9, 'RemoveCue', ((1, 'cue'),)))
    win32more.System.Com.IUnknown
    return IMFTimedTextCueList
def _define_IMFTimedTextFormattedText_head():
    class IMFTimedTextFormattedText(win32more.System.Com.IUnknown_head):
        Guid = Guid('e13af3c1-4d47-4354-b1-f5-e8-3a-e0-ec-ae-60')
    return IMFTimedTextFormattedText
def _define_IMFTimedTextFormattedText():
    IMFTimedTextFormattedText = win32more.Media.MediaFoundation.IMFTimedTextFormattedText_head
    IMFTimedTextFormattedText.GetText = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(3, 'GetText', ((1, 'text'),)))
    IMFTimedTextFormattedText.GetSubformattingCount = COMMETHOD(WINFUNCTYPE(UInt32,)(4, 'GetSubformattingCount', ()))
    IMFTimedTextFormattedText.GetSubformatting = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32),POINTER(UInt32),POINTER(win32more.Media.MediaFoundation.IMFTimedTextStyle_head))(5, 'GetSubformatting', ((1, 'index'),(1, 'firstChar'),(1, 'charLength'),(1, 'style'),)))
    win32more.System.Com.IUnknown
    return IMFTimedTextFormattedText
def _define_IMFTimedTextNotify_head():
    class IMFTimedTextNotify(win32more.System.Com.IUnknown_head):
        Guid = Guid('df6b87b6-ce12-45db-ab-a7-43-2f-e0-54-e5-7d')
    return IMFTimedTextNotify
def _define_IMFTimedTextNotify():
    IMFTimedTextNotify = win32more.Media.MediaFoundation.IMFTimedTextNotify_head
    IMFTimedTextNotify.TrackAdded = COMMETHOD(WINFUNCTYPE(Void,UInt32)(3, 'TrackAdded', ((1, 'trackId'),)))
    IMFTimedTextNotify.TrackRemoved = COMMETHOD(WINFUNCTYPE(Void,UInt32)(4, 'TrackRemoved', ((1, 'trackId'),)))
    IMFTimedTextNotify.TrackSelected = COMMETHOD(WINFUNCTYPE(Void,UInt32,win32more.Foundation.BOOL)(5, 'TrackSelected', ((1, 'trackId'),(1, 'selected'),)))
    IMFTimedTextNotify.TrackReadyStateChanged = COMMETHOD(WINFUNCTYPE(Void,UInt32)(6, 'TrackReadyStateChanged', ((1, 'trackId'),)))
    IMFTimedTextNotify.Error = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.MF_TIMED_TEXT_ERROR_CODE,win32more.Foundation.HRESULT,UInt32)(7, 'Error', ((1, 'errorCode'),(1, 'extendedErrorCode'),(1, 'sourceTrackId'),)))
    IMFTimedTextNotify.Cue = COMMETHOD(WINFUNCTYPE(Void,win32more.Media.MediaFoundation.MF_TIMED_TEXT_CUE_EVENT,Double,win32more.Media.MediaFoundation.IMFTimedTextCue_head)(8, 'Cue', ((1, 'cueEvent'),(1, 'currentTime'),(1, 'cue'),)))
    IMFTimedTextNotify.Reset = COMMETHOD(WINFUNCTYPE(Void,)(9, 'Reset', ()))
    win32more.System.Com.IUnknown
    return IMFTimedTextNotify
def _define_IMFTimedTextRegion_head():
    class IMFTimedTextRegion(win32more.System.Com.IUnknown_head):
        Guid = Guid('c8d22afc-bc47-4bdf-9b-04-78-7e-49-ce-3f-58')
    return IMFTimedTextRegion
def _define_IMFTimedTextRegion():
    IMFTimedTextRegion = win32more.Media.MediaFoundation.IMFTimedTextRegion_head
    IMFTimedTextRegion.GetName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(3, 'GetName', ((1, 'name'),)))
    IMFTimedTextRegion.GetPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Double),POINTER(Double),POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_UNIT_TYPE))(4, 'GetPosition', ((1, 'pX'),(1, 'pY'),(1, 'unitType'),)))
    IMFTimedTextRegion.GetExtent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Double),POINTER(Double),POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_UNIT_TYPE))(5, 'GetExtent', ((1, 'pWidth'),(1, 'pHeight'),(1, 'unitType'),)))
    IMFTimedTextRegion.GetBackgroundColor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFARGB_head))(6, 'GetBackgroundColor', ((1, 'bgColor'),)))
    IMFTimedTextRegion.GetWritingMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_WRITING_MODE))(7, 'GetWritingMode', ((1, 'writingMode'),)))
    IMFTimedTextRegion.GetDisplayAlignment = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_DISPLAY_ALIGNMENT))(8, 'GetDisplayAlignment', ((1, 'displayAlign'),)))
    IMFTimedTextRegion.GetLineHeight = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Double),POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_UNIT_TYPE))(9, 'GetLineHeight', ((1, 'pLineHeight'),(1, 'unitType'),)))
    IMFTimedTextRegion.GetClipOverflow = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(10, 'GetClipOverflow', ((1, 'clipOverflow'),)))
    IMFTimedTextRegion.GetPadding = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Double),POINTER(Double),POINTER(Double),POINTER(Double),POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_UNIT_TYPE))(11, 'GetPadding', ((1, 'before'),(1, 'start'),(1, 'after'),(1, 'end'),(1, 'unitType'),)))
    IMFTimedTextRegion.GetWrap = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(12, 'GetWrap', ((1, 'wrap'),)))
    IMFTimedTextRegion.GetZIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int32))(13, 'GetZIndex', ((1, 'zIndex'),)))
    IMFTimedTextRegion.GetScrollMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_SCROLL_MODE))(14, 'GetScrollMode', ((1, 'scrollMode'),)))
    win32more.System.Com.IUnknown
    return IMFTimedTextRegion
def _define_IMFTimedTextRuby_head():
    class IMFTimedTextRuby(win32more.System.Com.IUnknown_head):
        Guid = Guid('76c6a6f5-4955-4de5-b2-7b-14-b7-34-cc-14-b4')
    return IMFTimedTextRuby
def _define_IMFTimedTextRuby():
    IMFTimedTextRuby = win32more.Media.MediaFoundation.IMFTimedTextRuby_head
    IMFTimedTextRuby.GetRubyText = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(3, 'GetRubyText', ((1, 'rubyText'),)))
    IMFTimedTextRuby.GetRubyPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_RUBY_POSITION))(4, 'GetRubyPosition', ((1, 'value'),)))
    IMFTimedTextRuby.GetRubyAlign = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_RUBY_ALIGN))(5, 'GetRubyAlign', ((1, 'value'),)))
    IMFTimedTextRuby.GetRubyReserve = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_RUBY_RESERVE))(6, 'GetRubyReserve', ((1, 'value'),)))
    win32more.System.Com.IUnknown
    return IMFTimedTextRuby
def _define_IMFTimedTextStyle_head():
    class IMFTimedTextStyle(win32more.System.Com.IUnknown_head):
        Guid = Guid('09b2455d-b834-4f01-a3-47-90-52-e2-1c-45-0e')
    return IMFTimedTextStyle
def _define_IMFTimedTextStyle():
    IMFTimedTextStyle = win32more.Media.MediaFoundation.IMFTimedTextStyle_head
    IMFTimedTextStyle.GetName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(3, 'GetName', ((1, 'name'),)))
    IMFTimedTextStyle.IsExternal = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL,)(4, 'IsExternal', ()))
    IMFTimedTextStyle.GetFontFamily = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(5, 'GetFontFamily', ((1, 'fontFamily'),)))
    IMFTimedTextStyle.GetFontSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Double),POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_UNIT_TYPE))(6, 'GetFontSize', ((1, 'fontSize'),(1, 'unitType'),)))
    IMFTimedTextStyle.GetColor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFARGB_head))(7, 'GetColor', ((1, 'color'),)))
    IMFTimedTextStyle.GetBackgroundColor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFARGB_head))(8, 'GetBackgroundColor', ((1, 'bgColor'),)))
    IMFTimedTextStyle.GetShowBackgroundAlways = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(9, 'GetShowBackgroundAlways', ((1, 'showBackgroundAlways'),)))
    IMFTimedTextStyle.GetFontStyle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_FONT_STYLE))(10, 'GetFontStyle', ((1, 'fontStyle'),)))
    IMFTimedTextStyle.GetBold = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(11, 'GetBold', ((1, 'bold'),)))
    IMFTimedTextStyle.GetRightToLeft = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(12, 'GetRightToLeft', ((1, 'rightToLeft'),)))
    IMFTimedTextStyle.GetTextAlignment = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_ALIGNMENT))(13, 'GetTextAlignment', ((1, 'textAlign'),)))
    IMFTimedTextStyle.GetTextDecoration = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(14, 'GetTextDecoration', ((1, 'textDecoration'),)))
    IMFTimedTextStyle.GetTextOutline = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFARGB_head),POINTER(Double),POINTER(Double),POINTER(win32more.Media.MediaFoundation.MF_TIMED_TEXT_UNIT_TYPE))(15, 'GetTextOutline', ((1, 'color'),(1, 'thickness'),(1, 'blurRadius'),(1, 'unitType'),)))
    win32more.System.Com.IUnknown
    return IMFTimedTextStyle
def _define_IMFTimedTextStyle2_head():
    class IMFTimedTextStyle2(win32more.System.Com.IUnknown_head):
        Guid = Guid('db639199-c809-4c89-bf-ca-d0-bb-b9-72-9d-6e')
    return IMFTimedTextStyle2
def _define_IMFTimedTextStyle2():
    IMFTimedTextStyle2 = win32more.Media.MediaFoundation.IMFTimedTextStyle2_head
    IMFTimedTextStyle2.GetRuby = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTimedTextRuby_head))(3, 'GetRuby', ((1, 'ruby'),)))
    IMFTimedTextStyle2.GetBouten = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTimedTextBouten_head))(4, 'GetBouten', ((1, 'bouten'),)))
    IMFTimedTextStyle2.IsTextCombined = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(5, 'IsTextCombined', ((1, 'value'),)))
    IMFTimedTextStyle2.GetFontAngleInDegrees = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Double))(6, 'GetFontAngleInDegrees', ((1, 'value'),)))
    win32more.System.Com.IUnknown
    return IMFTimedTextStyle2
def _define_IMFTimedTextTrack_head():
    class IMFTimedTextTrack(win32more.System.Com.IUnknown_head):
        Guid = Guid('8822c32d-654e-4233-bf-21-d7-f2-e6-7d-30-d4')
    return IMFTimedTextTrack
def _define_IMFTimedTextTrack():
    IMFTimedTextTrack = win32more.Media.MediaFoundation.IMFTimedTextTrack_head
    IMFTimedTextTrack.GetId = COMMETHOD(WINFUNCTYPE(UInt32,)(3, 'GetId', ()))
    IMFTimedTextTrack.GetLabel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(4, 'GetLabel', ((1, 'label'),)))
    IMFTimedTextTrack.SetLabel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR)(5, 'SetLabel', ((1, 'label'),)))
    IMFTimedTextTrack.GetLanguage = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(6, 'GetLanguage', ((1, 'language'),)))
    IMFTimedTextTrack.GetTrackKind = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.MF_TIMED_TEXT_TRACK_KIND,)(7, 'GetTrackKind', ()))
    IMFTimedTextTrack.IsInBand = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL,)(8, 'IsInBand', ()))
    IMFTimedTextTrack.GetInBandMetadataTrackDispatchType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(9, 'GetInBandMetadataTrackDispatchType', ((1, 'dispatchType'),)))
    IMFTimedTextTrack.IsActive = COMMETHOD(WINFUNCTYPE(win32more.Foundation.BOOL,)(10, 'IsActive', ()))
    IMFTimedTextTrack.GetErrorCode = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.MF_TIMED_TEXT_ERROR_CODE,)(11, 'GetErrorCode', ()))
    IMFTimedTextTrack.GetExtendedErrorCode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(12, 'GetExtendedErrorCode', ()))
    IMFTimedTextTrack.GetDataFormat = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid))(13, 'GetDataFormat', ((1, 'format'),)))
    IMFTimedTextTrack.GetReadyState = COMMETHOD(WINFUNCTYPE(win32more.Media.MediaFoundation.MF_TIMED_TEXT_TRACK_READY_STATE,)(14, 'GetReadyState', ()))
    IMFTimedTextTrack.GetCueList = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFTimedTextCueList_head))(15, 'GetCueList', ((1, 'cues'),)))
    win32more.System.Com.IUnknown
    return IMFTimedTextTrack
def _define_IMFTimedTextTrackList_head():
    class IMFTimedTextTrackList(win32more.System.Com.IUnknown_head):
        Guid = Guid('23ff334c-442c-445f-bc-cc-ed-c4-38-aa-11-e2')
    return IMFTimedTextTrackList
def _define_IMFTimedTextTrackList():
    IMFTimedTextTrackList = win32more.Media.MediaFoundation.IMFTimedTextTrackList_head
    IMFTimedTextTrackList.GetLength = COMMETHOD(WINFUNCTYPE(UInt32,)(3, 'GetLength', ()))
    IMFTimedTextTrackList.GetTrack = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFTimedTextTrack_head))(4, 'GetTrack', ((1, 'index'),(1, 'track'),)))
    IMFTimedTextTrackList.GetTrackById = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFTimedTextTrack_head))(5, 'GetTrackById', ((1, 'trackId'),(1, 'track'),)))
    win32more.System.Com.IUnknown
    return IMFTimedTextTrackList
def _define_IMFTimer_head():
    class IMFTimer(win32more.System.Com.IUnknown_head):
        Guid = Guid('e56e4cbd-8f70-49d8-a0-f8-ed-b3-d6-ab-9b-f2')
    return IMFTimer
def _define_IMFTimer():
    IMFTimer = win32more.Media.MediaFoundation.IMFTimer_head
    IMFTimer.SetTimer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,Int64,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head,POINTER(win32more.System.Com.IUnknown_head))(3, 'SetTimer', ((1, 'dwFlags'),(1, 'llClockTime'),(1, 'pCallback'),(1, 'punkState'),(1, 'ppunkKey'),)))
    IMFTimer.CancelTimer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head)(4, 'CancelTimer', ((1, 'punkKey'),)))
    win32more.System.Com.IUnknown
    return IMFTimer
def _define_IMFTopoLoader_head():
    class IMFTopoLoader(win32more.System.Com.IUnknown_head):
        Guid = Guid('de9a6157-f660-4643-b5-6a-df-9f-79-98-c7-cd')
    return IMFTopoLoader
def _define_IMFTopoLoader():
    IMFTopoLoader = win32more.Media.MediaFoundation.IMFTopoLoader_head
    IMFTopoLoader.Load = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTopology_head,POINTER(win32more.Media.MediaFoundation.IMFTopology_head),win32more.Media.MediaFoundation.IMFTopology_head)(3, 'Load', ((1, 'pInputTopo'),(1, 'ppOutputTopo'),(1, 'pCurrentTopo'),)))
    win32more.System.Com.IUnknown
    return IMFTopoLoader
def _define_IMFTopology_head():
    class IMFTopology(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('83cf873a-f6da-4bc8-82-3f-ba-cf-d5-5d-c4-33')
    return IMFTopology
def _define_IMFTopology():
    IMFTopology = win32more.Media.MediaFoundation.IMFTopology_head
    IMFTopology.GetTopologyID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64))(33, 'GetTopologyID', ((1, 'pID'),)))
    IMFTopology.AddNode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTopologyNode_head)(34, 'AddNode', ((1, 'pNode'),)))
    IMFTopology.RemoveNode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTopologyNode_head)(35, 'RemoveNode', ((1, 'pNode'),)))
    IMFTopology.GetNodeCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt16))(36, 'GetNodeCount', ((1, 'pwNodes'),)))
    IMFTopology.GetNode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16,POINTER(win32more.Media.MediaFoundation.IMFTopologyNode_head))(37, 'GetNode', ((1, 'wIndex'),(1, 'ppNode'),)))
    IMFTopology.Clear = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(38, 'Clear', ()))
    IMFTopology.CloneFrom = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTopology_head)(39, 'CloneFrom', ((1, 'pTopology'),)))
    IMFTopology.GetNodeByID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64,POINTER(win32more.Media.MediaFoundation.IMFTopologyNode_head))(40, 'GetNodeByID', ((1, 'qwTopoNodeID'),(1, 'ppNode'),)))
    IMFTopology.GetSourceNodeCollection = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFCollection_head))(41, 'GetSourceNodeCollection', ((1, 'ppCollection'),)))
    IMFTopology.GetOutputNodeCollection = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFCollection_head))(42, 'GetOutputNodeCollection', ((1, 'ppCollection'),)))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFTopology
def _define_IMFTopologyNode_head():
    class IMFTopologyNode(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('83cf873a-f6da-4bc8-82-3f-ba-cf-d5-5d-c4-30')
    return IMFTopologyNode
def _define_IMFTopologyNode():
    IMFTopologyNode = win32more.Media.MediaFoundation.IMFTopologyNode_head
    IMFTopologyNode.SetObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head)(33, 'SetObject', ((1, 'pObject'),)))
    IMFTopologyNode.GetObject = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.IUnknown_head))(34, 'GetObject', ((1, 'ppObject'),)))
    IMFTopologyNode.GetNodeType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_TOPOLOGY_TYPE))(35, 'GetNodeType', ((1, 'pType'),)))
    IMFTopologyNode.GetTopoNodeID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt64))(36, 'GetTopoNodeID', ((1, 'pID'),)))
    IMFTopologyNode.SetTopoNodeID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64)(37, 'SetTopoNodeID', ((1, 'ullTopoID'),)))
    IMFTopologyNode.GetInputCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(38, 'GetInputCount', ((1, 'pcInputs'),)))
    IMFTopologyNode.GetOutputCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(39, 'GetOutputCount', ((1, 'pcOutputs'),)))
    IMFTopologyNode.ConnectOutput = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFTopologyNode_head,UInt32)(40, 'ConnectOutput', ((1, 'dwOutputIndex'),(1, 'pDownstreamNode'),(1, 'dwInputIndexOnDownstreamNode'),)))
    IMFTopologyNode.DisconnectOutput = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(41, 'DisconnectOutput', ((1, 'dwOutputIndex'),)))
    IMFTopologyNode.GetInput = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFTopologyNode_head),POINTER(UInt32))(42, 'GetInput', ((1, 'dwInputIndex'),(1, 'ppUpstreamNode'),(1, 'pdwOutputIndexOnUpstreamNode'),)))
    IMFTopologyNode.GetOutput = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFTopologyNode_head),POINTER(UInt32))(43, 'GetOutput', ((1, 'dwOutputIndex'),(1, 'ppDownstreamNode'),(1, 'pdwInputIndexOnDownstreamNode'),)))
    IMFTopologyNode.SetOutputPrefType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head)(44, 'SetOutputPrefType', ((1, 'dwOutputIndex'),(1, 'pType'),)))
    IMFTopologyNode.GetOutputPrefType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(45, 'GetOutputPrefType', ((1, 'dwOutputIndex'),(1, 'ppType'),)))
    IMFTopologyNode.SetInputPrefType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head)(46, 'SetInputPrefType', ((1, 'dwInputIndex'),(1, 'pType'),)))
    IMFTopologyNode.GetInputPrefType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(47, 'GetInputPrefType', ((1, 'dwInputIndex'),(1, 'ppType'),)))
    IMFTopologyNode.CloneFrom = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTopologyNode_head)(48, 'CloneFrom', ((1, 'pNode'),)))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFTopologyNode
def _define_IMFTopologyNodeAttributeEditor_head():
    class IMFTopologyNodeAttributeEditor(win32more.System.Com.IUnknown_head):
        Guid = Guid('676aa6dd-238a-410d-bb-99-65-66-8d-01-60-5a')
    return IMFTopologyNodeAttributeEditor
def _define_IMFTopologyNodeAttributeEditor():
    IMFTopologyNodeAttributeEditor = win32more.Media.MediaFoundation.IMFTopologyNodeAttributeEditor_head
    IMFTopologyNodeAttributeEditor.UpdateNodeAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt64,UInt32,POINTER(win32more.Media.MediaFoundation.MFTOPONODE_ATTRIBUTE_UPDATE_head))(3, 'UpdateNodeAttributes', ((1, 'TopoId'),(1, 'cUpdates'),(1, 'pUpdates'),)))
    win32more.System.Com.IUnknown
    return IMFTopologyNodeAttributeEditor
def _define_IMFTopologyServiceLookup_head():
    class IMFTopologyServiceLookup(win32more.System.Com.IUnknown_head):
        Guid = Guid('fa993889-4383-415a-a9-30-dd-47-2a-8c-f6-f7')
    return IMFTopologyServiceLookup
def _define_IMFTopologyServiceLookup():
    IMFTopologyServiceLookup = win32more.Media.MediaFoundation.IMFTopologyServiceLookup_head
    IMFTopologyServiceLookup.LookupService = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_SERVICE_LOOKUP_TYPE,UInt32,POINTER(Guid),POINTER(Guid),POINTER(c_void_p),POINTER(UInt32))(3, 'LookupService', ((1, 'Type'),(1, 'dwIndex'),(1, 'guidService'),(1, 'riid'),(1, 'ppvObjects'),(1, 'pnObjects'),)))
    win32more.System.Com.IUnknown
    return IMFTopologyServiceLookup
def _define_IMFTopologyServiceLookupClient_head():
    class IMFTopologyServiceLookupClient(win32more.System.Com.IUnknown_head):
        Guid = Guid('fa99388a-4383-415a-a9-30-dd-47-2a-8c-f6-f7')
    return IMFTopologyServiceLookupClient
def _define_IMFTopologyServiceLookupClient():
    IMFTopologyServiceLookupClient = win32more.Media.MediaFoundation.IMFTopologyServiceLookupClient_head
    IMFTopologyServiceLookupClient.InitServicePointers = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTopologyServiceLookup_head)(3, 'InitServicePointers', ((1, 'pLookup'),)))
    IMFTopologyServiceLookupClient.ReleaseServicePointers = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(4, 'ReleaseServicePointers', ()))
    win32more.System.Com.IUnknown
    return IMFTopologyServiceLookupClient
def _define_IMFTrackedSample_head():
    class IMFTrackedSample(win32more.System.Com.IUnknown_head):
        Guid = Guid('245bf8e9-0755-40f7-88-a5-ae-0f-18-d5-5e-17')
    return IMFTrackedSample
def _define_IMFTrackedSample():
    IMFTrackedSample = win32more.Media.MediaFoundation.IMFTrackedSample_head
    IMFTrackedSample.SetAllocator = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(3, 'SetAllocator', ((1, 'pSampleAllocator'),(1, 'pUnkState'),)))
    win32more.System.Com.IUnknown
    return IMFTrackedSample
def _define_IMFTranscodeProfile_head():
    class IMFTranscodeProfile(win32more.System.Com.IUnknown_head):
        Guid = Guid('4adfdba3-7ab0-4953-a6-2b-46-1e-7f-f3-da-1e')
    return IMFTranscodeProfile
def _define_IMFTranscodeProfile():
    IMFTranscodeProfile = win32more.Media.MediaFoundation.IMFTranscodeProfile_head
    IMFTranscodeProfile.SetAudioAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head)(3, 'SetAudioAttributes', ((1, 'pAttrs'),)))
    IMFTranscodeProfile.GetAudioAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head))(4, 'GetAudioAttributes', ((1, 'ppAttrs'),)))
    IMFTranscodeProfile.SetVideoAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head)(5, 'SetVideoAttributes', ((1, 'pAttrs'),)))
    IMFTranscodeProfile.GetVideoAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head))(6, 'GetVideoAttributes', ((1, 'ppAttrs'),)))
    IMFTranscodeProfile.SetContainerAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAttributes_head)(7, 'SetContainerAttributes', ((1, 'pAttrs'),)))
    IMFTranscodeProfile.GetContainerAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head))(8, 'GetContainerAttributes', ((1, 'ppAttrs'),)))
    win32more.System.Com.IUnknown
    return IMFTranscodeProfile
def _define_IMFTranscodeSinkInfoProvider_head():
    class IMFTranscodeSinkInfoProvider(win32more.System.Com.IUnknown_head):
        Guid = Guid('8cffcd2e-5a03-4a3a-af-f7-ed-cd-10-7c-62-0e')
    return IMFTranscodeSinkInfoProvider
def _define_IMFTranscodeSinkInfoProvider():
    IMFTranscodeSinkInfoProvider = win32more.Media.MediaFoundation.IMFTranscodeSinkInfoProvider_head
    IMFTranscodeSinkInfoProvider.SetOutputFile = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR)(3, 'SetOutputFile', ((1, 'pwszFileName'),)))
    IMFTranscodeSinkInfoProvider.SetOutputByteStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFActivate_head)(4, 'SetOutputByteStream', ((1, 'pByteStreamActivate'),)))
    IMFTranscodeSinkInfoProvider.SetProfile = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTranscodeProfile_head)(5, 'SetProfile', ((1, 'pProfile'),)))
    IMFTranscodeSinkInfoProvider.GetSinkInfo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MF_TRANSCODE_SINK_INFO_head))(6, 'GetSinkInfo', ((1, 'pSinkInfo'),)))
    win32more.System.Com.IUnknown
    return IMFTranscodeSinkInfoProvider
def _define_IMFTransform_head():
    class IMFTransform(win32more.System.Com.IUnknown_head):
        Guid = Guid('bf94c121-5b05-4e6f-80-00-ba-59-89-61-41-4d')
    return IMFTransform
def _define_IMFTransform():
    IMFTransform = win32more.Media.MediaFoundation.IMFTransform_head
    IMFTransform.GetStreamLimits = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(UInt32),POINTER(UInt32),POINTER(UInt32))(3, 'GetStreamLimits', ((1, 'pdwInputMinimum'),(1, 'pdwInputMaximum'),(1, 'pdwOutputMinimum'),(1, 'pdwOutputMaximum'),)))
    IMFTransform.GetStreamCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(UInt32))(4, 'GetStreamCount', ((1, 'pcInputStreams'),(1, 'pcOutputStreams'),)))
    IMFTransform.GetStreamIDs = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32),UInt32,POINTER(UInt32))(5, 'GetStreamIDs', ((1, 'dwInputIDArraySize'),(1, 'pdwInputIDs'),(1, 'dwOutputIDArraySize'),(1, 'pdwOutputIDs'),)))
    IMFTransform.GetInputStreamInfo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.MFT_INPUT_STREAM_INFO_head))(6, 'GetInputStreamInfo', ((1, 'dwInputStreamID'),(1, 'pStreamInfo'),)))
    IMFTransform.GetOutputStreamInfo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.MFT_OUTPUT_STREAM_INFO_head))(7, 'GetOutputStreamInfo', ((1, 'dwOutputStreamID'),(1, 'pStreamInfo'),)))
    IMFTransform.GetAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head))(8, 'GetAttributes', ((1, 'pAttributes'),)))
    IMFTransform.GetInputStreamAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head))(9, 'GetInputStreamAttributes', ((1, 'dwInputStreamID'),(1, 'pAttributes'),)))
    IMFTransform.GetOutputStreamAttributes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFAttributes_head))(10, 'GetOutputStreamAttributes', ((1, 'dwOutputStreamID'),(1, 'pAttributes'),)))
    IMFTransform.DeleteInputStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(11, 'DeleteInputStream', ((1, 'dwStreamID'),)))
    IMFTransform.AddInputStreams = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32))(12, 'AddInputStreams', ((1, 'cStreams'),(1, 'adwStreamIDs'),)))
    IMFTransform.GetInputAvailableType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(13, 'GetInputAvailableType', ((1, 'dwInputStreamID'),(1, 'dwTypeIndex'),(1, 'ppType'),)))
    IMFTransform.GetOutputAvailableType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(14, 'GetOutputAvailableType', ((1, 'dwOutputStreamID'),(1, 'dwTypeIndex'),(1, 'ppType'),)))
    IMFTransform.SetInputType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head,UInt32)(15, 'SetInputType', ((1, 'dwInputStreamID'),(1, 'pType'),(1, 'dwFlags'),)))
    IMFTransform.SetOutputType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head,UInt32)(16, 'SetOutputType', ((1, 'dwOutputStreamID'),(1, 'pType'),(1, 'dwFlags'),)))
    IMFTransform.GetInputCurrentType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(17, 'GetInputCurrentType', ((1, 'dwInputStreamID'),(1, 'ppType'),)))
    IMFTransform.GetOutputCurrentType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(18, 'GetOutputCurrentType', ((1, 'dwOutputStreamID'),(1, 'ppType'),)))
    IMFTransform.GetInputStatus = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32))(19, 'GetInputStatus', ((1, 'dwInputStreamID'),(1, 'pdwFlags'),)))
    IMFTransform.GetOutputStatus = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(20, 'GetOutputStatus', ((1, 'pdwFlags'),)))
    IMFTransform.SetOutputBounds = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int64,Int64)(21, 'SetOutputBounds', ((1, 'hnsLowerBound'),(1, 'hnsUpperBound'),)))
    IMFTransform.ProcessEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaEvent_head)(22, 'ProcessEvent', ((1, 'dwInputStreamID'),(1, 'pEvent'),)))
    IMFTransform.ProcessMessage = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFT_MESSAGE_TYPE,UIntPtr)(23, 'ProcessMessage', ((1, 'eMessage'),(1, 'ulParam'),)))
    IMFTransform.ProcessInput = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFSample_head,UInt32)(24, 'ProcessInput', ((1, 'dwInputStreamID'),(1, 'pSample'),(1, 'dwFlags'),)))
    IMFTransform.ProcessOutput = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.MFT_OUTPUT_DATA_BUFFER_head),POINTER(UInt32))(25, 'ProcessOutput', ((1, 'dwFlags'),(1, 'cOutputBufferCount'),(1, 'pOutputSamples'),(1, 'pdwStatus'),)))
    win32more.System.Com.IUnknown
    return IMFTransform
def _define_IMFTrustedInput_head():
    class IMFTrustedInput(win32more.System.Com.IUnknown_head):
        Guid = Guid('542612c4-a1b8-4632-b5-21-de-11-ea-64-a0-b0')
    return IMFTrustedInput
def _define_IMFTrustedInput():
    IMFTrustedInput = win32more.Media.MediaFoundation.IMFTrustedInput_head
    IMFTrustedInput.GetInputTrustAuthority = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Guid),POINTER(win32more.System.Com.IUnknown_head))(3, 'GetInputTrustAuthority', ((1, 'dwStreamID'),(1, 'riid'),(1, 'ppunkObject'),)))
    win32more.System.Com.IUnknown
    return IMFTrustedInput
def _define_IMFTrustedOutput_head():
    class IMFTrustedOutput(win32more.System.Com.IUnknown_head):
        Guid = Guid('d19f8e95-b126-4446-89-0c-5d-cb-7a-d7-14-53')
    return IMFTrustedOutput
def _define_IMFTrustedOutput():
    IMFTrustedOutput = win32more.Media.MediaFoundation.IMFTrustedOutput_head
    IMFTrustedOutput.GetOutputTrustAuthorityCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'GetOutputTrustAuthorityCount', ((1, 'pcOutputTrustAuthorities'),)))
    IMFTrustedOutput.GetOutputTrustAuthorityByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IMFOutputTrustAuthority_head))(4, 'GetOutputTrustAuthorityByIndex', ((1, 'dwIndex'),(1, 'ppauthority'),)))
    IMFTrustedOutput.IsFinal = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(5, 'IsFinal', ((1, 'pfIsFinal'),)))
    win32more.System.Com.IUnknown
    return IMFTrustedOutput
def _define_IMFVideoCaptureSampleAllocator_head():
    class IMFVideoCaptureSampleAllocator(win32more.Media.MediaFoundation.IMFVideoSampleAllocator_head):
        Guid = Guid('725b77c7-ca9f-4fe5-9d-72-99-46-bf-9b-3c-70')
    return IMFVideoCaptureSampleAllocator
def _define_IMFVideoCaptureSampleAllocator():
    IMFVideoCaptureSampleAllocator = win32more.Media.MediaFoundation.IMFVideoCaptureSampleAllocator_head
    IMFVideoCaptureSampleAllocator.InitializeCaptureSampleAllocator = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,UInt32,UInt32,win32more.Media.MediaFoundation.IMFAttributes_head,win32more.Media.MediaFoundation.IMFMediaType_head)(7, 'InitializeCaptureSampleAllocator', ((1, 'cbSampleSize'),(1, 'cbCaptureMetadataSize'),(1, 'cbAlignment'),(1, 'cMinimumSamples'),(1, 'pAttributes'),(1, 'pMediaType'),)))
    win32more.Media.MediaFoundation.IMFVideoSampleAllocator
    return IMFVideoCaptureSampleAllocator
def _define_IMFVideoDeviceID_head():
    class IMFVideoDeviceID(win32more.System.Com.IUnknown_head):
        Guid = Guid('a38d9567-5a9c-4f3c-b2-93-8e-b4-15-b2-79-ba')
    return IMFVideoDeviceID
def _define_IMFVideoDeviceID():
    IMFVideoDeviceID = win32more.Media.MediaFoundation.IMFVideoDeviceID_head
    IMFVideoDeviceID.GetDeviceID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid))(3, 'GetDeviceID', ((1, 'pDeviceID'),)))
    win32more.System.Com.IUnknown
    return IMFVideoDeviceID
def _define_IMFVideoDisplayControl_head():
    class IMFVideoDisplayControl(win32more.System.Com.IUnknown_head):
        Guid = Guid('a490b1e4-ab84-4d31-a1-b2-18-1e-03-b1-07-7a')
    return IMFVideoDisplayControl
def _define_IMFVideoDisplayControl():
    IMFVideoDisplayControl = win32more.Media.MediaFoundation.IMFVideoDisplayControl_head
    IMFVideoDisplayControl.GetNativeVideoSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.SIZE_head),POINTER(win32more.Foundation.SIZE_head))(3, 'GetNativeVideoSize', ((1, 'pszVideo'),(1, 'pszARVideo'),)))
    IMFVideoDisplayControl.GetIdealVideoSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.SIZE_head),POINTER(win32more.Foundation.SIZE_head))(4, 'GetIdealVideoSize', ((1, 'pszMin'),(1, 'pszMax'),)))
    IMFVideoDisplayControl.SetVideoPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVideoNormalizedRect_head),POINTER(win32more.Foundation.RECT_head))(5, 'SetVideoPosition', ((1, 'pnrcSource'),(1, 'prcDest'),)))
    IMFVideoDisplayControl.GetVideoPosition = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVideoNormalizedRect_head),POINTER(win32more.Foundation.RECT_head))(6, 'GetVideoPosition', ((1, 'pnrcSource'),(1, 'prcDest'),)))
    IMFVideoDisplayControl.SetAspectRatioMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(7, 'SetAspectRatioMode', ((1, 'dwAspectRatioMode'),)))
    IMFVideoDisplayControl.GetAspectRatioMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(8, 'GetAspectRatioMode', ((1, 'pdwAspectRatioMode'),)))
    IMFVideoDisplayControl.SetVideoWindow = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HWND)(9, 'SetVideoWindow', ((1, 'hwndVideo'),)))
    IMFVideoDisplayControl.GetVideoWindow = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.HWND))(10, 'GetVideoWindow', ((1, 'phwndVideo'),)))
    IMFVideoDisplayControl.RepaintVideo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(11, 'RepaintVideo', ()))
    IMFVideoDisplayControl.GetCurrentImage = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Graphics.Gdi.BITMAPINFOHEADER_head),POINTER(c_char_p_no),POINTER(UInt32),POINTER(Int64))(12, 'GetCurrentImage', ((1, 'pBih'),(1, 'pDib'),(1, 'pcbDib'),(1, 'pTimeStamp'),)))
    IMFVideoDisplayControl.SetBorderColor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.COLORREF)(13, 'SetBorderColor', ((1, 'Clr'),)))
    IMFVideoDisplayControl.GetBorderColor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.COLORREF))(14, 'GetBorderColor', ((1, 'pClr'),)))
    IMFVideoDisplayControl.SetRenderingPrefs = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(15, 'SetRenderingPrefs', ((1, 'dwRenderFlags'),)))
    IMFVideoDisplayControl.GetRenderingPrefs = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(16, 'GetRenderingPrefs', ((1, 'pdwRenderFlags'),)))
    IMFVideoDisplayControl.SetFullscreen = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL)(17, 'SetFullscreen', ((1, 'fFullscreen'),)))
    IMFVideoDisplayControl.GetFullscreen = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BOOL))(18, 'GetFullscreen', ((1, 'pfFullscreen'),)))
    win32more.System.Com.IUnknown
    return IMFVideoDisplayControl
def _define_IMFVideoMediaType_head():
    class IMFVideoMediaType(win32more.Media.MediaFoundation.IMFMediaType_head):
        Guid = Guid('b99f381f-a8f9-47a2-a5-af-ca-3a-22-5a-38-90')
    return IMFVideoMediaType
def _define_IMFVideoMediaType():
    IMFVideoMediaType = win32more.Media.MediaFoundation.IMFVideoMediaType_head
    IMFVideoMediaType.GetVideoFormat = COMMETHOD(WINFUNCTYPE(POINTER(win32more.Media.MediaFoundation.MFVIDEOFORMAT_head),)(38, 'GetVideoFormat', ()))
    IMFVideoMediaType.GetVideoRepresentation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,POINTER(c_void_p),Int32)(39, 'GetVideoRepresentation', ((1, 'guidRepresentation'),(1, 'ppvRepresentation'),(1, 'lStride'),)))
    win32more.Media.MediaFoundation.IMFMediaType
    return IMFVideoMediaType
def _define_IMFVideoMixerBitmap_head():
    class IMFVideoMixerBitmap(win32more.System.Com.IUnknown_head):
        Guid = Guid('814c7b20-0fdb-4eec-af-8f-f9-57-c8-f6-9e-dc')
    return IMFVideoMixerBitmap
def _define_IMFVideoMixerBitmap():
    IMFVideoMixerBitmap = win32more.Media.MediaFoundation.IMFVideoMixerBitmap_head
    IMFVideoMixerBitmap.SetAlphaBitmap = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVideoAlphaBitmap_head))(3, 'SetAlphaBitmap', ((1, 'pBmpParms'),)))
    IMFVideoMixerBitmap.ClearAlphaBitmap = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(4, 'ClearAlphaBitmap', ()))
    IMFVideoMixerBitmap.UpdateAlphaBitmapParameters = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVideoAlphaBitmapParams_head))(5, 'UpdateAlphaBitmapParameters', ((1, 'pBmpParms'),)))
    IMFVideoMixerBitmap.GetAlphaBitmapParameters = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFVideoAlphaBitmapParams_head))(6, 'GetAlphaBitmapParameters', ((1, 'pBmpParms'),)))
    win32more.System.Com.IUnknown
    return IMFVideoMixerBitmap
def _define_IMFVideoMixerControl_head():
    class IMFVideoMixerControl(win32more.System.Com.IUnknown_head):
        Guid = Guid('a5c6c53f-c202-4aa5-96-95-17-5b-a8-c5-08-a5')
    return IMFVideoMixerControl
def _define_IMFVideoMixerControl():
    IMFVideoMixerControl = win32more.Media.MediaFoundation.IMFVideoMixerControl_head
    IMFVideoMixerControl.SetStreamZOrder = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32)(3, 'SetStreamZOrder', ((1, 'dwStreamID'),(1, 'dwZ'),)))
    IMFVideoMixerControl.GetStreamZOrder = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32))(4, 'GetStreamZOrder', ((1, 'dwStreamID'),(1, 'pdwZ'),)))
    IMFVideoMixerControl.SetStreamOutputRect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.MFVideoNormalizedRect_head))(5, 'SetStreamOutputRect', ((1, 'dwStreamID'),(1, 'pnrcOutput'),)))
    IMFVideoMixerControl.GetStreamOutputRect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.MFVideoNormalizedRect_head))(6, 'GetStreamOutputRect', ((1, 'dwStreamID'),(1, 'pnrcOutput'),)))
    win32more.System.Com.IUnknown
    return IMFVideoMixerControl
def _define_IMFVideoMixerControl2_head():
    class IMFVideoMixerControl2(win32more.Media.MediaFoundation.IMFVideoMixerControl_head):
        Guid = Guid('8459616d-966e-4930-b6-58-54-fa-7e-5a-16-d3')
    return IMFVideoMixerControl2
def _define_IMFVideoMixerControl2():
    IMFVideoMixerControl2 = win32more.Media.MediaFoundation.IMFVideoMixerControl2_head
    IMFVideoMixerControl2.SetMixingPrefs = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(7, 'SetMixingPrefs', ((1, 'dwMixFlags'),)))
    IMFVideoMixerControl2.GetMixingPrefs = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(8, 'GetMixingPrefs', ((1, 'pdwMixFlags'),)))
    win32more.Media.MediaFoundation.IMFVideoMixerControl
    return IMFVideoMixerControl2
def _define_IMFVideoPositionMapper_head():
    class IMFVideoPositionMapper(win32more.System.Com.IUnknown_head):
        Guid = Guid('1f6a9f17-e70b-4e24-8a-e4-0b-2c-3b-a7-a4-ae')
    return IMFVideoPositionMapper
def _define_IMFVideoPositionMapper():
    IMFVideoPositionMapper = win32more.Media.MediaFoundation.IMFVideoPositionMapper_head
    IMFVideoPositionMapper.MapOutputCoordinateToInputStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Single,Single,UInt32,UInt32,POINTER(Single),POINTER(Single))(3, 'MapOutputCoordinateToInputStream', ((1, 'xOut'),(1, 'yOut'),(1, 'dwOutputStreamIndex'),(1, 'dwInputStreamIndex'),(1, 'pxIn'),(1, 'pyIn'),)))
    win32more.System.Com.IUnknown
    return IMFVideoPositionMapper
def _define_IMFVideoPresenter_head():
    class IMFVideoPresenter(win32more.Media.MediaFoundation.IMFClockStateSink_head):
        Guid = Guid('29aff080-182a-4a5d-af-3b-44-8f-3a-63-46-cb')
    return IMFVideoPresenter
def _define_IMFVideoPresenter():
    IMFVideoPresenter = win32more.Media.MediaFoundation.IMFVideoPresenter_head
    IMFVideoPresenter.ProcessMessage = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MFVP_MESSAGE_TYPE,UIntPtr)(8, 'ProcessMessage', ((1, 'eMessage'),(1, 'ulParam'),)))
    IMFVideoPresenter.GetCurrentMediaType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFVideoMediaType_head))(9, 'GetCurrentMediaType', ((1, 'ppMediaType'),)))
    win32more.Media.MediaFoundation.IMFClockStateSink
    return IMFVideoPresenter
def _define_IMFVideoProcessor_head():
    class IMFVideoProcessor(win32more.System.Com.IUnknown_head):
        Guid = Guid('6ab0000c-fece-4d1f-a2-ac-a9-57-35-30-65-6e')
    return IMFVideoProcessor
def _define_IMFVideoProcessor():
    IMFVideoProcessor = win32more.Media.MediaFoundation.IMFVideoProcessor_head
    IMFVideoProcessor.GetAvailableVideoProcessorModes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(POINTER(Guid)))(3, 'GetAvailableVideoProcessorModes', ((1, 'lpdwNumProcessingModes'),(1, 'ppVideoProcessingModes'),)))
    IMFVideoProcessor.GetVideoProcessorCaps = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),POINTER(win32more.Media.MediaFoundation.DXVA2_VideoProcessorCaps_head))(4, 'GetVideoProcessorCaps', ((1, 'lpVideoProcessorMode'),(1, 'lpVideoProcessorCaps'),)))
    IMFVideoProcessor.GetVideoProcessorMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid))(5, 'GetVideoProcessorMode', ((1, 'lpMode'),)))
    IMFVideoProcessor.SetVideoProcessorMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid))(6, 'SetVideoProcessorMode', ((1, 'lpMode'),)))
    IMFVideoProcessor.GetProcAmpRange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.DXVA2_ValueRange_head))(7, 'GetProcAmpRange', ((1, 'dwProperty'),(1, 'pPropRange'),)))
    IMFVideoProcessor.GetProcAmpValues = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.DXVA2_ProcAmpValues_head))(8, 'GetProcAmpValues', ((1, 'dwFlags'),(1, 'Values'),)))
    IMFVideoProcessor.SetProcAmpValues = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.DXVA2_ProcAmpValues_head))(9, 'SetProcAmpValues', ((1, 'dwFlags'),(1, 'pValues'),)))
    IMFVideoProcessor.GetFilteringRange = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.DXVA2_ValueRange_head))(10, 'GetFilteringRange', ((1, 'dwProperty'),(1, 'pPropRange'),)))
    IMFVideoProcessor.GetFilteringValue = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.DXVA2_Fixed32_head))(11, 'GetFilteringValue', ((1, 'dwProperty'),(1, 'pValue'),)))
    IMFVideoProcessor.SetFilteringValue = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.DXVA2_Fixed32_head))(12, 'SetFilteringValue', ((1, 'dwProperty'),(1, 'pValue'),)))
    IMFVideoProcessor.GetBackgroundColor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.COLORREF))(13, 'GetBackgroundColor', ((1, 'lpClrBkg'),)))
    IMFVideoProcessor.SetBackgroundColor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.COLORREF)(14, 'SetBackgroundColor', ((1, 'ClrBkg'),)))
    win32more.System.Com.IUnknown
    return IMFVideoProcessor
def _define_IMFVideoProcessorControl_head():
    class IMFVideoProcessorControl(win32more.System.Com.IUnknown_head):
        Guid = Guid('a3f675d5-6119-4f7f-a1-00-1d-8b-28-0f-0e-fb')
    return IMFVideoProcessorControl
def _define_IMFVideoProcessorControl():
    IMFVideoProcessorControl = win32more.Media.MediaFoundation.IMFVideoProcessorControl_head
    IMFVideoProcessorControl.SetBorderColor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.MFARGB_head))(3, 'SetBorderColor', ((1, 'pBorderColor'),)))
    IMFVideoProcessorControl.SetSourceRectangle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.RECT_head))(4, 'SetSourceRectangle', ((1, 'pSrcRect'),)))
    IMFVideoProcessorControl.SetDestinationRectangle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.RECT_head))(5, 'SetDestinationRectangle', ((1, 'pDstRect'),)))
    IMFVideoProcessorControl.SetMirror = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_VIDEO_PROCESSOR_MIRROR)(6, 'SetMirror', ((1, 'eMirror'),)))
    IMFVideoProcessorControl.SetRotation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.MF_VIDEO_PROCESSOR_ROTATION)(7, 'SetRotation', ((1, 'eRotation'),)))
    IMFVideoProcessorControl.SetConstrictionSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.SIZE_head))(8, 'SetConstrictionSize', ((1, 'pConstrictionSize'),)))
    win32more.System.Com.IUnknown
    return IMFVideoProcessorControl
def _define_IMFVideoProcessorControl2_head():
    class IMFVideoProcessorControl2(win32more.Media.MediaFoundation.IMFVideoProcessorControl_head):
        Guid = Guid('bde633d3-e1dc-4a7f-a6-93-bb-ae-39-9c-4a-20')
    return IMFVideoProcessorControl2
def _define_IMFVideoProcessorControl2():
    IMFVideoProcessorControl2 = win32more.Media.MediaFoundation.IMFVideoProcessorControl2_head
    IMFVideoProcessorControl2.SetRotationOverride = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(9, 'SetRotationOverride', ((1, 'uiRotation'),)))
    IMFVideoProcessorControl2.EnableHardwareEffects = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL)(10, 'EnableHardwareEffects', ((1, 'fEnabled'),)))
    IMFVideoProcessorControl2.GetSupportedHardwareEffects = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(11, 'GetSupportedHardwareEffects', ((1, 'puiSupport'),)))
    win32more.Media.MediaFoundation.IMFVideoProcessorControl
    return IMFVideoProcessorControl2
def _define_IMFVideoProcessorControl3_head():
    class IMFVideoProcessorControl3(win32more.Media.MediaFoundation.IMFVideoProcessorControl2_head):
        Guid = Guid('2424b3f2-eb23-40f1-91-aa-74-bd-de-ea-08-83')
    return IMFVideoProcessorControl3
def _define_IMFVideoProcessorControl3():
    IMFVideoProcessorControl3 = win32more.Media.MediaFoundation.IMFVideoProcessorControl3_head
    IMFVideoProcessorControl3.GetNaturalOutputType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaType_head))(12, 'GetNaturalOutputType', ((1, 'ppType'),)))
    IMFVideoProcessorControl3.EnableSphericalVideoProcessing = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL,win32more.Media.MediaFoundation.MFVideoSphericalFormat,win32more.Media.MediaFoundation.MFVideoSphericalProjectionMode)(13, 'EnableSphericalVideoProcessing', ((1, 'fEnable'),(1, 'eFormat'),(1, 'eProjectionMode'),)))
    IMFVideoProcessorControl3.SetSphericalVideoProperties = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Single,Single,Single,Single,Single)(14, 'SetSphericalVideoProperties', ((1, 'X'),(1, 'Y'),(1, 'Z'),(1, 'W'),(1, 'fieldOfView'),)))
    IMFVideoProcessorControl3.SetOutputDevice = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head)(15, 'SetOutputDevice', ((1, 'pOutputDevice'),)))
    win32more.Media.MediaFoundation.IMFVideoProcessorControl2
    return IMFVideoProcessorControl3
def _define_IMFVideoRenderer_head():
    class IMFVideoRenderer(win32more.System.Com.IUnknown_head):
        Guid = Guid('dfdfd197-a9ca-43d8-b3-41-6a-f3-50-37-92-cd')
    return IMFVideoRenderer
def _define_IMFVideoRenderer():
    IMFVideoRenderer = win32more.Media.MediaFoundation.IMFVideoRenderer_head
    IMFVideoRenderer.InitializeRenderer = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFTransform_head,win32more.Media.MediaFoundation.IMFVideoPresenter_head)(3, 'InitializeRenderer', ((1, 'pVideoMixer'),(1, 'pVideoPresenter'),)))
    win32more.System.Com.IUnknown
    return IMFVideoRenderer
def _define_IMFVideoRendererEffectControl_head():
    class IMFVideoRendererEffectControl(win32more.System.Com.IUnknown_head):
        Guid = Guid('604d33d7-cf23-41d5-82-24-5b-bb-b1-a8-74-75')
    return IMFVideoRendererEffectControl
def _define_IMFVideoRendererEffectControl():
    IMFVideoRendererEffectControl = win32more.Media.MediaFoundation.IMFVideoRendererEffectControl_head
    IMFVideoRendererEffectControl.OnAppServiceConnectionEstablished = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head)(3, 'OnAppServiceConnectionEstablished', ((1, 'pAppServiceConnection'),)))
    win32more.System.Com.IUnknown
    return IMFVideoRendererEffectControl
def _define_IMFVideoSampleAllocator_head():
    class IMFVideoSampleAllocator(win32more.System.Com.IUnknown_head):
        Guid = Guid('86cbc910-e533-4751-8e-3b-f1-9b-5b-80-6a-03')
    return IMFVideoSampleAllocator
def _define_IMFVideoSampleAllocator():
    IMFVideoSampleAllocator = win32more.Media.MediaFoundation.IMFVideoSampleAllocator_head
    IMFVideoSampleAllocator.SetDirectXManager = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.IUnknown_head)(3, 'SetDirectXManager', ((1, 'pManager'),)))
    IMFVideoSampleAllocator.UninitializeSampleAllocator = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(4, 'UninitializeSampleAllocator', ()))
    IMFVideoSampleAllocator.InitializeSampleAllocator = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFMediaType_head)(5, 'InitializeSampleAllocator', ((1, 'cRequestedFrames'),(1, 'pMediaType'),)))
    IMFVideoSampleAllocator.AllocateSample = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFSample_head))(6, 'AllocateSample', ((1, 'ppSample'),)))
    win32more.System.Com.IUnknown
    return IMFVideoSampleAllocator
def _define_IMFVideoSampleAllocatorCallback_head():
    class IMFVideoSampleAllocatorCallback(win32more.System.Com.IUnknown_head):
        Guid = Guid('992388b4-3372-4f67-8b-6f-c8-4c-07-1f-47-51')
    return IMFVideoSampleAllocatorCallback
def _define_IMFVideoSampleAllocatorCallback():
    IMFVideoSampleAllocatorCallback = win32more.Media.MediaFoundation.IMFVideoSampleAllocatorCallback_head
    IMFVideoSampleAllocatorCallback.SetCallback = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFVideoSampleAllocatorNotify_head)(3, 'SetCallback', ((1, 'pNotify'),)))
    IMFVideoSampleAllocatorCallback.GetFreeSampleCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int32))(4, 'GetFreeSampleCount', ((1, 'plSamples'),)))
    win32more.System.Com.IUnknown
    return IMFVideoSampleAllocatorCallback
def _define_IMFVideoSampleAllocatorEx_head():
    class IMFVideoSampleAllocatorEx(win32more.Media.MediaFoundation.IMFVideoSampleAllocator_head):
        Guid = Guid('545b3a48-3283-4f62-86-6f-a6-2d-8f-59-8f-9f')
    return IMFVideoSampleAllocatorEx
def _define_IMFVideoSampleAllocatorEx():
    IMFVideoSampleAllocatorEx = win32more.Media.MediaFoundation.IMFVideoSampleAllocatorEx_head
    IMFVideoSampleAllocatorEx.InitializeSampleAllocatorEx = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,win32more.Media.MediaFoundation.IMFAttributes_head,win32more.Media.MediaFoundation.IMFMediaType_head)(7, 'InitializeSampleAllocatorEx', ((1, 'cInitialSamples'),(1, 'cMaximumSamples'),(1, 'pAttributes'),(1, 'pMediaType'),)))
    win32more.Media.MediaFoundation.IMFVideoSampleAllocator
    return IMFVideoSampleAllocatorEx
def _define_IMFVideoSampleAllocatorNotify_head():
    class IMFVideoSampleAllocatorNotify(win32more.System.Com.IUnknown_head):
        Guid = Guid('a792cdbe-c374-4e89-83-35-27-8e-7b-99-56-a4')
    return IMFVideoSampleAllocatorNotify
def _define_IMFVideoSampleAllocatorNotify():
    IMFVideoSampleAllocatorNotify = win32more.Media.MediaFoundation.IMFVideoSampleAllocatorNotify_head
    IMFVideoSampleAllocatorNotify.NotifyRelease = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(3, 'NotifyRelease', ()))
    win32more.System.Com.IUnknown
    return IMFVideoSampleAllocatorNotify
def _define_IMFVideoSampleAllocatorNotifyEx_head():
    class IMFVideoSampleAllocatorNotifyEx(win32more.Media.MediaFoundation.IMFVideoSampleAllocatorNotify_head):
        Guid = Guid('3978aa1a-6d5b-4b7f-a3-40-90-89-91-89-ae-34')
    return IMFVideoSampleAllocatorNotifyEx
def _define_IMFVideoSampleAllocatorNotifyEx():
    IMFVideoSampleAllocatorNotifyEx = win32more.Media.MediaFoundation.IMFVideoSampleAllocatorNotifyEx_head
    IMFVideoSampleAllocatorNotifyEx.NotifyPrune = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSample_head)(4, 'NotifyPrune', ((1, '__MIDL__IMFVideoSampleAllocatorNotifyEx0000'),)))
    win32more.Media.MediaFoundation.IMFVideoSampleAllocatorNotify
    return IMFVideoSampleAllocatorNotifyEx
def _define_IMFVirtualCamera_head():
    class IMFVirtualCamera(win32more.Media.MediaFoundation.IMFAttributes_head):
        Guid = Guid('1c08a864-ef6c-4c75-af-59-5f-2d-68-da-95-63')
    return IMFVirtualCamera
def _define_IMFVirtualCamera():
    IMFVirtualCamera = win32more.Media.MediaFoundation.IMFVirtualCamera_head
    IMFVirtualCamera.AddDeviceSourceInfo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR)(33, 'AddDeviceSourceInfo', ((1, 'DeviceSourceInfo'),)))
    IMFVirtualCamera.AddProperty = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,c_char_p_no,UInt32)(34, 'AddProperty', ((1, 'pKey'),(1, 'Type'),(1, 'pbData'),(1, 'cbData'),)))
    IMFVirtualCamera.AddRegistryEntry = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,c_char_p_no,UInt32)(35, 'AddRegistryEntry', ((1, 'EntryName'),(1, 'SubkeyPath'),(1, 'dwRegType'),(1, 'pbData'),(1, 'cbData'),)))
    IMFVirtualCamera.Start = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncCallback_head)(36, 'Start', ((1, 'pCallback'),)))
    IMFVirtualCamera.Stop = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(37, 'Stop', ()))
    IMFVirtualCamera.Remove = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(38, 'Remove', ()))
    IMFVirtualCamera.GetMediaSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.IMFMediaSource_head))(39, 'GetMediaSource', ((1, 'ppMediaSource'),)))
    IMFVirtualCamera.SendCameraProperty = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),UInt32,UInt32,c_void_p,UInt32,c_void_p,UInt32,POINTER(UInt32))(40, 'SendCameraProperty', ((1, 'propertySet'),(1, 'propertyId'),(1, 'propertyFlags'),(1, 'propertyPayload'),(1, 'propertyPayloadLength'),(1, 'data'),(1, 'dataLength'),(1, 'dataWritten'),)))
    IMFVirtualCamera.CreateSyncEvent = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),UInt32,UInt32,win32more.Foundation.HANDLE,POINTER(win32more.Media.MediaFoundation.IMFCameraSyncObject_head))(41, 'CreateSyncEvent', ((1, 'kseventSet'),(1, 'kseventId'),(1, 'kseventFlags'),(1, 'eventHandle'),(1, 'cameraSyncObject'),)))
    IMFVirtualCamera.CreateSyncSemaphore = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Guid),UInt32,UInt32,win32more.Foundation.HANDLE,Int32,POINTER(win32more.Media.MediaFoundation.IMFCameraSyncObject_head))(42, 'CreateSyncSemaphore', ((1, 'kseventSet'),(1, 'kseventId'),(1, 'kseventFlags'),(1, 'semaphoreHandle'),(1, 'semaphoreAdjustment'),(1, 'cameraSyncObject'),)))
    IMFVirtualCamera.Shutdown = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(43, 'Shutdown', ()))
    win32more.Media.MediaFoundation.IMFAttributes
    return IMFVirtualCamera
def _define_IMFWorkQueueServices_head():
    class IMFWorkQueueServices(win32more.System.Com.IUnknown_head):
        Guid = Guid('35fe1bb8-a3a9-40fe-bb-ec-eb-56-9c-9c-cc-a3')
    return IMFWorkQueueServices
def _define_IMFWorkQueueServices():
    IMFWorkQueueServices = win32more.Media.MediaFoundation.IMFWorkQueueServices_head
    IMFWorkQueueServices.BeginRegisterTopologyWorkQueuesWithMMCSS = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(3, 'BeginRegisterTopologyWorkQueuesWithMMCSS', ((1, 'pCallback'),(1, 'pState'),)))
    IMFWorkQueueServices.EndRegisterTopologyWorkQueuesWithMMCSS = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head)(4, 'EndRegisterTopologyWorkQueuesWithMMCSS', ((1, 'pResult'),)))
    IMFWorkQueueServices.BeginUnregisterTopologyWorkQueuesWithMMCSS = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(5, 'BeginUnregisterTopologyWorkQueuesWithMMCSS', ((1, 'pCallback'),(1, 'pState'),)))
    IMFWorkQueueServices.EndUnregisterTopologyWorkQueuesWithMMCSS = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head)(6, 'EndUnregisterTopologyWorkQueuesWithMMCSS', ((1, 'pResult'),)))
    IMFWorkQueueServices.GetTopologyWorkQueueMMCSSClass = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.PWSTR,POINTER(UInt32))(7, 'GetTopologyWorkQueueMMCSSClass', ((1, 'dwTopologyWorkQueueId'),(1, 'pwszClass'),(1, 'pcchClass'),)))
    IMFWorkQueueServices.GetTopologyWorkQueueMMCSSTaskId = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32))(8, 'GetTopologyWorkQueueMMCSSTaskId', ((1, 'dwTopologyWorkQueueId'),(1, 'pdwTaskId'),)))
    IMFWorkQueueServices.BeginRegisterPlatformWorkQueueWithMMCSS = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.PWSTR,UInt32,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(9, 'BeginRegisterPlatformWorkQueueWithMMCSS', ((1, 'dwPlatformWorkQueue'),(1, 'wszClass'),(1, 'dwTaskId'),(1, 'pCallback'),(1, 'pState'),)))
    IMFWorkQueueServices.EndRegisterPlatformWorkQueueWithMMCSS = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head,POINTER(UInt32))(10, 'EndRegisterPlatformWorkQueueWithMMCSS', ((1, 'pResult'),(1, 'pdwTaskId'),)))
    IMFWorkQueueServices.BeginUnregisterPlatformWorkQueueWithMMCSS = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(11, 'BeginUnregisterPlatformWorkQueueWithMMCSS', ((1, 'dwPlatformWorkQueue'),(1, 'pCallback'),(1, 'pState'),)))
    IMFWorkQueueServices.EndUnregisterPlatformWorkQueueWithMMCSS = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFAsyncResult_head)(12, 'EndUnregisterPlatformWorkQueueWithMMCSS', ((1, 'pResult'),)))
    IMFWorkQueueServices.GetPlaftormWorkQueueMMCSSClass = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.PWSTR,POINTER(UInt32))(13, 'GetPlaftormWorkQueueMMCSSClass', ((1, 'dwPlatformWorkQueueId'),(1, 'pwszClass'),(1, 'pcchClass'),)))
    IMFWorkQueueServices.GetPlatformWorkQueueMMCSSTaskId = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32))(14, 'GetPlatformWorkQueueMMCSSTaskId', ((1, 'dwPlatformWorkQueueId'),(1, 'pdwTaskId'),)))
    win32more.System.Com.IUnknown
    return IMFWorkQueueServices
def _define_IMFWorkQueueServicesEx_head():
    class IMFWorkQueueServicesEx(win32more.Media.MediaFoundation.IMFWorkQueueServices_head):
        Guid = Guid('96bf961b-40fe-42f1-ba-9d-32-02-38-b4-97-00')
    return IMFWorkQueueServicesEx
def _define_IMFWorkQueueServicesEx():
    IMFWorkQueueServicesEx = win32more.Media.MediaFoundation.IMFWorkQueueServicesEx_head
    IMFWorkQueueServicesEx.GetTopologyWorkQueueMMCSSPriority = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Int32))(15, 'GetTopologyWorkQueueMMCSSPriority', ((1, 'dwTopologyWorkQueueId'),(1, 'plPriority'),)))
    IMFWorkQueueServicesEx.BeginRegisterPlatformWorkQueueWithMMCSSEx = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.PWSTR,UInt32,Int32,win32more.Media.MediaFoundation.IMFAsyncCallback_head,win32more.System.Com.IUnknown_head)(16, 'BeginRegisterPlatformWorkQueueWithMMCSSEx', ((1, 'dwPlatformWorkQueue'),(1, 'wszClass'),(1, 'dwTaskId'),(1, 'lPriority'),(1, 'pCallback'),(1, 'pState'),)))
    IMFWorkQueueServicesEx.GetPlatformWorkQueueMMCSSPriority = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(Int32))(17, 'GetPlatformWorkQueueMMCSSPriority', ((1, 'dwPlatformWorkQueueId'),(1, 'plPriority'),)))
    win32more.Media.MediaFoundation.IMFWorkQueueServices
    return IMFWorkQueueServicesEx
def _define_IOPMVideoOutput_head():
    class IOPMVideoOutput(win32more.System.Com.IUnknown_head):
        Guid = Guid('0a15159d-41c7-4456-93-e1-28-4c-d6-1d-4e-8d')
    return IOPMVideoOutput
def _define_IOPMVideoOutput():
    IOPMVideoOutput = win32more.Media.MediaFoundation.IOPMVideoOutput_head
    IOPMVideoOutput.StartInitialization = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.OPM_RANDOM_NUMBER_head),POINTER(c_char_p_no),POINTER(UInt32))(3, 'StartInitialization', ((1, 'prnRandomNumber'),(1, 'ppbCertificate'),(1, 'pulCertificateLength'),)))
    IOPMVideoOutput.FinishInitialization = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.OPM_ENCRYPTED_INITIALIZATION_PARAMETERS_head))(4, 'FinishInitialization', ((1, 'pParameters'),)))
    IOPMVideoOutput.GetInformation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.OPM_GET_INFO_PARAMETERS_head),POINTER(win32more.Media.MediaFoundation.OPM_REQUESTED_INFORMATION_head))(5, 'GetInformation', ((1, 'pParameters'),(1, 'pRequestedInformation'),)))
    IOPMVideoOutput.COPPCompatibleGetInformation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS_head),POINTER(win32more.Media.MediaFoundation.OPM_REQUESTED_INFORMATION_head))(6, 'COPPCompatibleGetInformation', ((1, 'pParameters'),(1, 'pRequestedInformation'),)))
    IOPMVideoOutput.Configure = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.OPM_CONFIGURE_PARAMETERS_head),UInt32,c_char_p_no)(7, 'Configure', ((1, 'pParameters'),(1, 'ulAdditionalParametersSize'),(1, 'pbAdditionalParameters'),)))
    win32more.System.Com.IUnknown
    return IOPMVideoOutput
def _define_IPlayToControl_head():
    class IPlayToControl(win32more.System.Com.IUnknown_head):
        Guid = Guid('607574eb-f4b6-45c1-b0-8c-cb-71-51-22-90-1d')
    return IPlayToControl
def _define_IPlayToControl():
    IPlayToControl = win32more.Media.MediaFoundation.IPlayToControl_head
    IPlayToControl.Connect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IMFSharingEngineClassFactory_head)(3, 'Connect', ((1, 'pFactory'),)))
    IPlayToControl.Disconnect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(4, 'Disconnect', ()))
    win32more.System.Com.IUnknown
    return IPlayToControl
def _define_IPlayToControlWithCapabilities_head():
    class IPlayToControlWithCapabilities(win32more.Media.MediaFoundation.IPlayToControl_head):
        Guid = Guid('aa9dd80f-c50a-4220-91-c1-33-22-87-f8-2a-34')
    return IPlayToControlWithCapabilities
def _define_IPlayToControlWithCapabilities():
    IPlayToControlWithCapabilities = win32more.Media.MediaFoundation.IPlayToControlWithCapabilities_head
    IPlayToControlWithCapabilities.GetCapabilities = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.PLAYTO_SOURCE_CREATEFLAGS))(5, 'GetCapabilities', ((1, 'pCapabilities'),)))
    win32more.Media.MediaFoundation.IPlayToControl
    return IPlayToControlWithCapabilities
def _define_IPlayToSourceClassFactory_head():
    class IPlayToSourceClassFactory(win32more.System.Com.IUnknown_head):
        Guid = Guid('842b32a3-9b9b-4d1c-b3-f3-49-19-32-48-a5-54')
    return IPlayToSourceClassFactory
def _define_IPlayToSourceClassFactory():
    IPlayToSourceClassFactory = win32more.Media.MediaFoundation.IPlayToSourceClassFactory_head
    IPlayToSourceClassFactory.CreateInstance = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IPlayToControl_head,POINTER(win32more.System.WinRT.IInspectable_head))(3, 'CreateInstance', ((1, 'dwFlags'),(1, 'pControl'),(1, 'ppSource'),)))
    win32more.System.Com.IUnknown
    return IPlayToSourceClassFactory
def _define_IToc_head():
    class IToc(win32more.System.Com.IUnknown_head):
        Guid = Guid('d6f05441-a919-423b-91-a0-89-d5-b4-a8-ab-77')
    return IToc
def _define_IToc():
    IToc = win32more.Media.MediaFoundation.IToc_head
    IToc.SetDescriptor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.TOC_DESCRIPTOR_head))(3, 'SetDescriptor', ((1, 'pDescriptor'),)))
    IToc.GetDescriptor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.TOC_DESCRIPTOR_head))(4, 'GetDescriptor', ((1, 'pDescriptor'),)))
    IToc.SetDescription = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR)(5, 'SetDescription', ((1, 'pwszDescription'),)))
    IToc.GetDescription = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt16),win32more.Foundation.PWSTR)(6, 'GetDescription', ((1, 'pwDescriptionSize'),(1, 'pwszDescription'),)))
    IToc.SetContext = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_char_p_no)(7, 'SetContext', ((1, 'dwContextSize'),(1, 'pbtContext'),)))
    IToc.GetContext = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),c_char_p_no)(8, 'GetContext', ((1, 'pdwContextSize'),(1, 'pbtContext'),)))
    IToc.GetEntryListCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt16))(9, 'GetEntryListCount', ((1, 'pwCount'),)))
    IToc.GetEntryListByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16,POINTER(win32more.Media.MediaFoundation.ITocEntryList_head))(10, 'GetEntryListByIndex', ((1, 'wEntryListIndex'),(1, 'ppEntryList'),)))
    IToc.AddEntryList = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.ITocEntryList_head,POINTER(UInt16))(11, 'AddEntryList', ((1, 'pEntryList'),(1, 'pwEntryListIndex'),)))
    IToc.AddEntryListByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16,win32more.Media.MediaFoundation.ITocEntryList_head)(12, 'AddEntryListByIndex', ((1, 'wEntryListIndex'),(1, 'pEntryList'),)))
    IToc.RemoveEntryListByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16)(13, 'RemoveEntryListByIndex', ((1, 'wEntryListIndex'),)))
    win32more.System.Com.IUnknown
    return IToc
def _define_ITocCollection_head():
    class ITocCollection(win32more.System.Com.IUnknown_head):
        Guid = Guid('23fee831-ae96-42df-b1-70-25-a0-48-47-a3-ca')
    return ITocCollection
def _define_ITocCollection():
    ITocCollection = win32more.Media.MediaFoundation.ITocCollection_head
    ITocCollection.GetEntryCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'GetEntryCount', ((1, 'pdwEntryCount'),)))
    ITocCollection.GetEntryByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.IToc_head))(4, 'GetEntryByIndex', ((1, 'dwEntryIndex'),(1, 'ppToc'),)))
    ITocCollection.AddEntry = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.IToc_head,POINTER(UInt32))(5, 'AddEntry', ((1, 'pToc'),(1, 'pdwEntryIndex'),)))
    ITocCollection.AddEntryByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.IToc_head)(6, 'AddEntryByIndex', ((1, 'dwEntryIndex'),(1, 'pToc'),)))
    ITocCollection.RemoveEntryByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(7, 'RemoveEntryByIndex', ((1, 'dwEntryIndex'),)))
    win32more.System.Com.IUnknown
    return ITocCollection
def _define_ITocEntry_head():
    class ITocEntry(win32more.System.Com.IUnknown_head):
        Guid = Guid('f22f5e06-585c-4def-85-23-65-55-cf-bc-0c-b3')
    return ITocEntry
def _define_ITocEntry():
    ITocEntry = win32more.Media.MediaFoundation.ITocEntry_head
    ITocEntry.SetTitle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR)(3, 'SetTitle', ((1, 'pwszTitle'),)))
    ITocEntry.GetTitle = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt16),win32more.Foundation.PWSTR)(4, 'GetTitle', ((1, 'pwTitleSize'),(1, 'pwszTitle'),)))
    ITocEntry.SetDescriptor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.TOC_ENTRY_DESCRIPTOR_head))(5, 'SetDescriptor', ((1, 'pDescriptor'),)))
    ITocEntry.GetDescriptor = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.MediaFoundation.TOC_ENTRY_DESCRIPTOR_head))(6, 'GetDescriptor', ((1, 'pDescriptor'),)))
    ITocEntry.SetSubEntries = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt16))(7, 'SetSubEntries', ((1, 'dwNumSubEntries'),(1, 'pwSubEntryIndices'),)))
    ITocEntry.GetSubEntries = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),POINTER(UInt16))(8, 'GetSubEntries', ((1, 'pdwNumSubEntries'),(1, 'pwSubEntryIndices'),)))
    ITocEntry.SetDescriptionData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_char_p_no,POINTER(Guid))(9, 'SetDescriptionData', ((1, 'dwDescriptionDataSize'),(1, 'pbtDescriptionData'),(1, 'pguidType'),)))
    ITocEntry.GetDescriptionData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),c_char_p_no,POINTER(Guid))(10, 'GetDescriptionData', ((1, 'pdwDescriptionDataSize'),(1, 'pbtDescriptionData'),(1, 'pGuidType'),)))
    win32more.System.Com.IUnknown
    return ITocEntry
def _define_ITocEntryList_head():
    class ITocEntryList(win32more.System.Com.IUnknown_head):
        Guid = Guid('3a8cccbd-0efd-43a3-b8-38-f3-8a-55-2b-a2-37')
    return ITocEntryList
def _define_ITocEntryList():
    ITocEntryList = win32more.Media.MediaFoundation.ITocEntryList_head
    ITocEntryList.GetEntryCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'GetEntryCount', ((1, 'pdwEntryCount'),)))
    ITocEntryList.GetEntryByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Media.MediaFoundation.ITocEntry_head))(4, 'GetEntryByIndex', ((1, 'dwEntryIndex'),(1, 'ppEntry'),)))
    ITocEntryList.AddEntry = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.ITocEntry_head,POINTER(UInt32))(5, 'AddEntry', ((1, 'pEntry'),(1, 'pdwEntryIndex'),)))
    ITocEntryList.AddEntryByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Media.MediaFoundation.ITocEntry_head)(6, 'AddEntryByIndex', ((1, 'dwEntryIndex'),(1, 'pEntry'),)))
    ITocEntryList.RemoveEntryByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(7, 'RemoveEntryByIndex', ((1, 'dwEntryIndex'),)))
    win32more.System.Com.IUnknown
    return ITocEntryList
def _define_ITocParser_head():
    class ITocParser(win32more.System.Com.IUnknown_head):
        Guid = Guid('ecfb9a55-9298-4f49-88-7f-0b-36-20-65-99-d2')
    return ITocParser
def _define_ITocParser():
    ITocParser = win32more.Media.MediaFoundation.ITocParser_head
    ITocParser.Init = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR)(3, 'Init', ((1, 'pwszFileName'),)))
    ITocParser.GetTocCount = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.TOC_POS_TYPE,POINTER(UInt32))(4, 'GetTocCount', ((1, 'enumTocPosType'),(1, 'pdwTocCount'),)))
    ITocParser.GetTocByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.TOC_POS_TYPE,UInt32,POINTER(win32more.Media.MediaFoundation.IToc_head))(5, 'GetTocByIndex', ((1, 'enumTocPosType'),(1, 'dwTocIndex'),(1, 'ppToc'),)))
    ITocParser.GetTocByType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.TOC_POS_TYPE,Guid,POINTER(win32more.Media.MediaFoundation.ITocCollection_head))(6, 'GetTocByType', ((1, 'enumTocPosType'),(1, 'guidTocType'),(1, 'ppTocs'),)))
    ITocParser.AddToc = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.TOC_POS_TYPE,win32more.Media.MediaFoundation.IToc_head,POINTER(UInt32))(7, 'AddToc', ((1, 'enumTocPosType'),(1, 'pToc'),(1, 'pdwTocIndex'),)))
    ITocParser.RemoveTocByIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.TOC_POS_TYPE,UInt32)(8, 'RemoveTocByIndex', ((1, 'enumTocPosType'),(1, 'dwTocIndex'),)))
    ITocParser.RemoveTocByType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.MediaFoundation.TOC_POS_TYPE,Guid)(9, 'RemoveTocByType', ((1, 'enumTocPosType'),(1, 'guidTocType'),)))
    ITocParser.Commit = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(10, 'Commit', ()))
    win32more.System.Com.IUnknown
    return ITocParser
def _define_IValidateBinding_head():
    class IValidateBinding(win32more.System.Com.IUnknown_head):
        Guid = Guid('04a578b2-e778-422a-a8-05-b3-ee-54-d9-0b-d9')
    return IValidateBinding
def _define_IValidateBinding():
    IValidateBinding = win32more.Media.MediaFoundation.IValidateBinding_head
    IValidateBinding.GetIdentifier = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Guid,c_char_p_no,UInt32,POINTER(c_char_p_no),POINTER(UInt32))(3, 'GetIdentifier', ((1, 'guidLicensorID'),(1, 'pbEphemeron'),(1, 'cbEphemeron'),(1, 'ppbBlobValidationID'),(1, 'pcbBlobSize'),)))
    win32more.System.Com.IUnknown
    return IValidateBinding
def _define_IWMCodecLeakyBucket_head():
    class IWMCodecLeakyBucket(win32more.System.Com.IUnknown_head):
        Guid = Guid('a81ba647-6227-43b7-b2-31-c7-b1-51-35-dd-7d')
    return IWMCodecLeakyBucket
def _define_IWMCodecLeakyBucket():
    IWMCodecLeakyBucket = win32more.Media.MediaFoundation.IWMCodecLeakyBucket_head
    IWMCodecLeakyBucket.SetBufferSizeBits = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(3, 'SetBufferSizeBits', ((1, 'ulBufferSize'),)))
    IWMCodecLeakyBucket.GetBufferSizeBits = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(4, 'GetBufferSizeBits', ((1, 'pulBufferSize'),)))
    IWMCodecLeakyBucket.SetBufferFullnessBits = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(5, 'SetBufferFullnessBits', ((1, 'ulBufferFullness'),)))
    IWMCodecLeakyBucket.GetBufferFullnessBits = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(6, 'GetBufferFullnessBits', ((1, 'pulBufferFullness'),)))
    win32more.System.Com.IUnknown
    return IWMCodecLeakyBucket
def _define_IWMCodecOutputTimestamp_head():
    class IWMCodecOutputTimestamp(win32more.System.Com.IUnknown_head):
        Guid = Guid('b72adf95-7adc-4a72-bc-05-57-7d-8e-a6-bf-68')
    return IWMCodecOutputTimestamp
def _define_IWMCodecOutputTimestamp():
    IWMCodecOutputTimestamp = win32more.Media.MediaFoundation.IWMCodecOutputTimestamp_head
    IWMCodecOutputTimestamp.GetNextOutputTime = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int64))(3, 'GetNextOutputTime', ((1, 'prtTime'),)))
    win32more.System.Com.IUnknown
    return IWMCodecOutputTimestamp
def _define_IWMCodecPrivateData_head():
    class IWMCodecPrivateData(win32more.System.Com.IUnknown_head):
        Guid = Guid('73f0be8e-57f7-4f01-aa-66-9f-57-34-0c-fe-0e')
    return IWMCodecPrivateData
def _define_IWMCodecPrivateData():
    IWMCodecPrivateData = win32more.Media.MediaFoundation.IWMCodecPrivateData_head
    IWMCodecPrivateData.SetPartialOutputType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.DxMediaObjects.DMO_MEDIA_TYPE_head))(3, 'SetPartialOutputType', ((1, 'pmt'),)))
    IWMCodecPrivateData.GetPrivateData = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,POINTER(UInt32))(4, 'GetPrivateData', ((1, 'pbData'),(1, 'pcbData'),)))
    win32more.System.Com.IUnknown
    return IWMCodecPrivateData
def _define_IWMCodecProps_head():
    class IWMCodecProps(win32more.System.Com.IUnknown_head):
        Guid = Guid('2573e11a-f01a-4fdd-a9-8d-63-b8-e0-ba-95-89')
    return IWMCodecProps
def _define_IWMCodecProps():
    IWMCodecProps = win32more.Media.MediaFoundation.IWMCodecProps_head
    IWMCodecProps.GetFormatProp = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.DxMediaObjects.DMO_MEDIA_TYPE_head),win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.WMT_PROP_DATATYPE),c_char_p_no,POINTER(UInt32))(3, 'GetFormatProp', ((1, 'pmt'),(1, 'pszName'),(1, 'pType'),(1, 'pValue'),(1, 'pdwSize'),)))
    IWMCodecProps.GetCodecProp = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.PWSTR,POINTER(win32more.Media.MediaFoundation.WMT_PROP_DATATYPE),c_char_p_no,POINTER(UInt32))(4, 'GetCodecProp', ((1, 'dwFormat'),(1, 'pszName'),(1, 'pType'),(1, 'pValue'),(1, 'pdwSize'),)))
    win32more.System.Com.IUnknown
    return IWMCodecProps
def _define_IWMCodecStrings_head():
    class IWMCodecStrings(win32more.System.Com.IUnknown_head):
        Guid = Guid('a7b2504b-e58a-47fb-95-8b-ca-c7-16-5a-05-7d')
    return IWMCodecStrings
def _define_IWMCodecStrings():
    IWMCodecStrings = win32more.Media.MediaFoundation.IWMCodecStrings_head
    IWMCodecStrings.GetName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.DxMediaObjects.DMO_MEDIA_TYPE_head),UInt32,win32more.Foundation.PWSTR,POINTER(UInt32))(3, 'GetName', ((1, 'pmt'),(1, 'cchLength'),(1, 'szName'),(1, 'pcchLength'),)))
    IWMCodecStrings.GetDescription = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Media.DxMediaObjects.DMO_MEDIA_TYPE_head),UInt32,win32more.Foundation.PWSTR,POINTER(UInt32))(4, 'GetDescription', ((1, 'pmt'),(1, 'cchLength'),(1, 'szDescription'),(1, 'pcchLength'),)))
    win32more.System.Com.IUnknown
    return IWMCodecStrings
def _define_IWMColorConvProps_head():
    class IWMColorConvProps(win32more.System.Com.IUnknown_head):
        Guid = Guid('e6a49e22-c099-421d-aa-d3-c0-61-fb-4a-e8-5b')
    return IWMColorConvProps
def _define_IWMColorConvProps():
    IWMColorConvProps = win32more.Media.MediaFoundation.IWMColorConvProps_head
    IWMColorConvProps.SetMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32)(3, 'SetMode', ((1, 'lMode'),)))
    IWMColorConvProps.SetFullCroppingParam = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,Int32,Int32,Int32,Int32)(4, 'SetFullCroppingParam', ((1, 'lSrcCropLeft'),(1, 'lSrcCropTop'),(1, 'lDstCropLeft'),(1, 'lDstCropTop'),(1, 'lCropWidth'),(1, 'lCropHeight'),)))
    win32more.System.Com.IUnknown
    return IWMColorConvProps
def _define_IWMColorLegalizerProps_head():
    class IWMColorLegalizerProps(win32more.System.Com.IUnknown_head):
        Guid = Guid('776c93b3-b72d-4508-b6-d0-20-87-85-f5-53-e7')
    return IWMColorLegalizerProps
def _define_IWMColorLegalizerProps():
    IWMColorLegalizerProps = win32more.Media.MediaFoundation.IWMColorLegalizerProps_head
    IWMColorLegalizerProps.SetColorLegalizerQuality = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32)(3, 'SetColorLegalizerQuality', ((1, 'lquality'),)))
    win32more.System.Com.IUnknown
    return IWMColorLegalizerProps
def _define_IWMFrameInterpProps_head():
    class IWMFrameInterpProps(win32more.System.Com.IUnknown_head):
        Guid = Guid('4c06bb9b-626c-4614-83-29-cc-6a-21-b9-3f-a0')
    return IWMFrameInterpProps
def _define_IWMFrameInterpProps():
    IWMFrameInterpProps = win32more.Media.MediaFoundation.IWMFrameInterpProps_head
    IWMFrameInterpProps.SetFrameRateIn = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32)(3, 'SetFrameRateIn', ((1, 'lFrameRate'),(1, 'lScale'),)))
    IWMFrameInterpProps.SetFrameRateOut = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32)(4, 'SetFrameRateOut', ((1, 'lFrameRate'),(1, 'lScale'),)))
    IWMFrameInterpProps.SetFrameInterpEnabled = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL)(5, 'SetFrameInterpEnabled', ((1, 'bFIEnabled'),)))
    IWMFrameInterpProps.SetComplexityLevel = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32)(6, 'SetComplexityLevel', ((1, 'iComplexity'),)))
    win32more.System.Com.IUnknown
    return IWMFrameInterpProps
def _define_IWMInterlaceProps_head():
    class IWMInterlaceProps(win32more.System.Com.IUnknown_head):
        Guid = Guid('7b12e5d1-bd22-48ea-bc-06-98-e8-93-22-1c-89')
    return IWMInterlaceProps
def _define_IWMInterlaceProps():
    IWMInterlaceProps = win32more.Media.MediaFoundation.IWMInterlaceProps_head
    IWMInterlaceProps.SetProcessType = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32)(3, 'SetProcessType', ((1, 'iProcessType'),)))
    IWMInterlaceProps.SetInitInverseTeleCinePattern = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32)(4, 'SetInitInverseTeleCinePattern', ((1, 'iInitPattern'),)))
    IWMInterlaceProps.SetLastFrame = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(5, 'SetLastFrame', ()))
    win32more.System.Com.IUnknown
    return IWMInterlaceProps
def _define_IWMResamplerProps_head():
    class IWMResamplerProps(win32more.System.Com.IUnknown_head):
        Guid = Guid('e7e9984f-f09f-4da4-90-3f-6e-2e-0e-fe-56-b5')
    return IWMResamplerProps
def _define_IWMResamplerProps():
    IWMResamplerProps = win32more.Media.MediaFoundation.IWMResamplerProps_head
    IWMResamplerProps.SetHalfFilterLength = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32)(3, 'SetHalfFilterLength', ((1, 'lhalfFilterLen'),)))
    IWMResamplerProps.SetUserChannelMtx = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Single))(4, 'SetUserChannelMtx', ((1, 'userChannelMtx'),)))
    win32more.System.Com.IUnknown
    return IWMResamplerProps
def _define_IWMResizerProps_head():
    class IWMResizerProps(win32more.System.Com.IUnknown_head):
        Guid = Guid('57665d4c-0414-4faa-90-5b-10-e5-46-f8-1c-33')
    return IWMResizerProps
def _define_IWMResizerProps():
    IWMResizerProps = win32more.Media.MediaFoundation.IWMResizerProps_head
    IWMResizerProps.SetResizerQuality = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32)(3, 'SetResizerQuality', ((1, 'lquality'),)))
    IWMResizerProps.SetInterlaceMode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32)(4, 'SetInterlaceMode', ((1, 'lmode'),)))
    IWMResizerProps.SetClipRegion = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,Int32,Int32)(5, 'SetClipRegion', ((1, 'lClipOriXSrc'),(1, 'lClipOriYSrc'),(1, 'lClipWidthSrc'),(1, 'lClipHeightSrc'),)))
    IWMResizerProps.SetFullCropRegion = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)(6, 'SetFullCropRegion', ((1, 'lClipOriXSrc'),(1, 'lClipOriYSrc'),(1, 'lClipWidthSrc'),(1, 'lClipHeightSrc'),(1, 'lClipOriXDst'),(1, 'lClipOriYDst'),(1, 'lClipWidthDst'),(1, 'lClipHeightDst'),)))
    IWMResizerProps.GetFullCropRegion = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int32),POINTER(Int32),POINTER(Int32),POINTER(Int32),POINTER(Int32),POINTER(Int32),POINTER(Int32),POINTER(Int32))(7, 'GetFullCropRegion', ((1, 'lClipOriXSrc'),(1, 'lClipOriYSrc'),(1, 'lClipWidthSrc'),(1, 'lClipHeightSrc'),(1, 'lClipOriXDst'),(1, 'lClipOriYDst'),(1, 'lClipWidthDst'),(1, 'lClipHeightDst'),)))
    win32more.System.Com.IUnknown
    return IWMResizerProps
def _define_IWMSampleExtensionSupport_head():
    class IWMSampleExtensionSupport(win32more.System.Com.IUnknown_head):
        Guid = Guid('9bca9884-0604-4c2a-87-da-79-3f-f4-d5-86-c3')
    return IWMSampleExtensionSupport
def _define_IWMSampleExtensionSupport():
    IWMSampleExtensionSupport = win32more.Media.MediaFoundation.IWMSampleExtensionSupport_head
    IWMSampleExtensionSupport.SetUseSampleExtensions = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL)(3, 'SetUseSampleExtensions', ((1, 'fUseExtensions'),)))
    win32more.System.Com.IUnknown
    return IWMSampleExtensionSupport
def _define_IWMValidate_head():
    class IWMValidate(win32more.System.Com.IUnknown_head):
        Guid = Guid('cee3def2-3808-414d-be-66-fa-fd-47-22-10-bc')
    return IWMValidate
def _define_IWMValidate():
    IWMValidate = win32more.Media.MediaFoundation.IWMValidate_head
    IWMValidate.SetIdentifier = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Guid)(3, 'SetIdentifier', ((1, 'guidValidationID'),)))
    win32more.System.Com.IUnknown
    return IWMValidate
def _define_IWMVideoDecoderHurryup_head():
    class IWMVideoDecoderHurryup(win32more.System.Com.IUnknown_head):
        Guid = Guid('352bb3bd-2d4d-4323-9e-71-dc-dc-fb-d5-3c-a6')
    return IWMVideoDecoderHurryup
def _define_IWMVideoDecoderHurryup():
    IWMVideoDecoderHurryup = win32more.Media.MediaFoundation.IWMVideoDecoderHurryup_head
    IWMVideoDecoderHurryup.SetHurryup = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32)(3, 'SetHurryup', ((1, 'lHurryup'),)))
    IWMVideoDecoderHurryup.GetHurryup = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int32))(4, 'GetHurryup', ((1, 'plHurryup'),)))
    win32more.System.Com.IUnknown
    return IWMVideoDecoderHurryup
def _define_IWMVideoDecoderReconBuffer_head():
    class IWMVideoDecoderReconBuffer(win32more.System.Com.IUnknown_head):
        Guid = Guid('45bda2ac-88e2-4923-98-ba-39-49-08-07-11-a3')
    return IWMVideoDecoderReconBuffer
def _define_IWMVideoDecoderReconBuffer():
    IWMVideoDecoderReconBuffer = win32more.Media.MediaFoundation.IWMVideoDecoderReconBuffer_head
    IWMVideoDecoderReconBuffer.GetReconstructedVideoFrameSize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'GetReconstructedVideoFrameSize', ((1, 'pdwSize'),)))
    IWMVideoDecoderReconBuffer.GetReconstructedVideoFrame = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.DxMediaObjects.IMediaBuffer_head)(4, 'GetReconstructedVideoFrame', ((1, 'pBuf'),)))
    IWMVideoDecoderReconBuffer.SetReconstructedVideoFrame = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Media.DxMediaObjects.IMediaBuffer_head)(5, 'SetReconstructedVideoFrame', ((1, 'pBuf'),)))
    win32more.System.Com.IUnknown
    return IWMVideoDecoderReconBuffer
def _define_IWMVideoForceKeyFrame_head():
    class IWMVideoForceKeyFrame(win32more.System.Com.IUnknown_head):
        Guid = Guid('9f8496be-5b9a-41b9-a9-e8-f2-1c-d8-05-96-c2')
    return IWMVideoForceKeyFrame
def _define_IWMVideoForceKeyFrame():
    IWMVideoForceKeyFrame = win32more.Media.MediaFoundation.IWMVideoForceKeyFrame_head
    IWMVideoForceKeyFrame.SetKeyFrame = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(3, 'SetKeyFrame', ()))
    win32more.System.Com.IUnknown
    return IWMVideoForceKeyFrame
KSMETHOD_OPMVIDEOOUTPUT = Int32
KSMETHOD_OPMVIDEOOUTPUT_STARTINITIALIZATION = 0
KSMETHOD_OPMVIDEOOUTPUT_FINISHINITIALIZATION = 1
KSMETHOD_OPMVIDEOOUTPUT_GETINFORMATION = 2
KSPROPSETID_OPMVideoOutput = Guid('06f414bb-f43a-4fe2-a5-66-77-4b-4c-81-f0-db')
def _define_MACROBLOCK_DATA_head():
    class MACROBLOCK_DATA(Structure):
        pass
    return MACROBLOCK_DATA
def _define_MACROBLOCK_DATA():
    MACROBLOCK_DATA = win32more.Media.MediaFoundation.MACROBLOCK_DATA_head
    MACROBLOCK_DATA._fields_ = [
        ('flags', UInt32),
        ('motionVectorX', Int16),
        ('motionVectorY', Int16),
        ('QPDelta', Int32),
    ]
    return MACROBLOCK_DATA
MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS = UInt32
MF_EVENT_FLAG_NONE = 0
MF_EVENT_FLAG_NO_WAIT = 1
MF_ACTIVATE_CUSTOM_MIXER = Int32
MF_ACTIVATE_CUSTOM_MIXER_ALLOWFAIL = 1
MF_ACTIVATE_CUSTOM_PRESENTER = Int32
MF_ACTIVATE_CUSTOM_PRESENTER_ALLOWFAIL = 1
MF_ATTRIBUTE_SERIALIZE_OPTIONS = Int32
MF_ATTRIBUTE_SERIALIZE_UNKNOWN_BYREF = 1
MF_ATTRIBUTE_TYPE = Int32
MF_ATTRIBUTE_UINT32 = 19
MF_ATTRIBUTE_UINT64 = 21
MF_ATTRIBUTE_DOUBLE = 5
MF_ATTRIBUTE_GUID = 72
MF_ATTRIBUTE_STRING = 31
MF_ATTRIBUTE_BLOB = 4113
MF_ATTRIBUTE_IUNKNOWN = 13
MF_ATTRIBUTES_MATCH_TYPE = Int32
MF_ATTRIBUTES_MATCH_OUR_ITEMS = 0
MF_ATTRIBUTES_MATCH_THEIR_ITEMS = 1
MF_ATTRIBUTES_MATCH_ALL_ITEMS = 2
MF_ATTRIBUTES_MATCH_INTERSECTION = 3
MF_ATTRIBUTES_MATCH_SMALLER = 4
MF_AUVRHP_ROOMMODEL = Int32
VRHP_SMALLROOM = 0
VRHP_MEDIUMROOM = 1
VRHP_BIGROOM = 2
VRHP_CUSTUMIZEDROOM = 3
def _define_MF_BYTE_STREAM_CACHE_RANGE_head():
    class MF_BYTE_STREAM_CACHE_RANGE(Structure):
        pass
    return MF_BYTE_STREAM_CACHE_RANGE
def _define_MF_BYTE_STREAM_CACHE_RANGE():
    MF_BYTE_STREAM_CACHE_RANGE = win32more.Media.MediaFoundation.MF_BYTE_STREAM_CACHE_RANGE_head
    MF_BYTE_STREAM_CACHE_RANGE._fields_ = [
        ('qwStartOffset', UInt64),
        ('qwEndOffset', UInt64),
    ]
    return MF_BYTE_STREAM_CACHE_RANGE
MF_CAPTURE_ENGINE_AUDIO_PROCESSING_MODE = Int32
MF_CAPTURE_ENGINE_AUDIO_PROCESSING_DEFAULT = 0
MF_CAPTURE_ENGINE_AUDIO_PROCESSING_RAW = 1
MF_CAPTURE_ENGINE_DEVICE_TYPE = Int32
MF_CAPTURE_ENGINE_DEVICE_TYPE_AUDIO = 0
MF_CAPTURE_ENGINE_DEVICE_TYPE_VIDEO = 1
MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE = Int32
MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_OTHER = 0
MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_COMMUNICATIONS = 1
MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_MEDIA = 2
MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_GAMECHAT = 3
MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_SPEECH = 4
MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_FARFIELDSPEECH = 5
MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_UNIFORMSPEECH = 6
MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_VOICETYPING = 7
MF_CAPTURE_ENGINE_SINK_TYPE = Int32
MF_CAPTURE_ENGINE_SINK_TYPE_RECORD = 0
MF_CAPTURE_ENGINE_SINK_TYPE_PREVIEW = 1
MF_CAPTURE_ENGINE_SINK_TYPE_PHOTO = 2
MF_CAPTURE_ENGINE_SOURCE = UInt32
MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_PREVIEW = 4294967290
MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_RECORD = 4294967289
MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_PHOTO = 4294967288
MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_AUDIO = 4294967287
MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_METADATA = 4294967286
MF_CAPTURE_ENGINE_MEDIASOURCE = 4294967295
MF_CAPTURE_ENGINE_STREAM_CATEGORY = Int32
MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_PREVIEW = 0
MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_CAPTURE = 1
MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_INDEPENDENT = 2
MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_DEPENDENT = 3
MF_CAPTURE_ENGINE_STREAM_CATEGORY_AUDIO = 4
MF_CAPTURE_ENGINE_STREAM_CATEGORY_UNSUPPORTED = 5
MF_CAPTURE_ENGINE_STREAM_CATEGORY_METADATA = 6
MF_CONNECT_METHOD = Int32
MF_CONNECT_DIRECT = 0
MF_CONNECT_ALLOW_CONVERTER = 1
MF_CONNECT_ALLOW_DECODER = 3
MF_CONNECT_RESOLVE_INDEPENDENT_OUTPUTTYPES = 4
MF_CONNECT_AS_OPTIONAL = 65536
MF_CONNECT_AS_OPTIONAL_BRANCH = 131072
MF_CROSS_ORIGIN_POLICY = Int32
MF_CROSS_ORIGIN_POLICY_NONE = 0
MF_CROSS_ORIGIN_POLICY_ANONYMOUS = 1
MF_CROSS_ORIGIN_POLICY_USE_CREDENTIALS = 2
MF_CUSTOM_DECODE_UNIT_TYPE = Int32
MF_DECODE_UNIT_NAL = 0
MF_DECODE_UNIT_SEI = 1
MF_EVENT_TYPE = Int32
MF_EVENT_TYPE_MEUnknown = 0
MF_EVENT_TYPE_MEError = 1
MF_EVENT_TYPE_MEExtendedType = 2
MF_EVENT_TYPE_MENonFatalError = 3
MF_EVENT_TYPE_MEGenericV1Anchor = 3
MF_EVENT_TYPE_MESessionUnknown = 100
MF_EVENT_TYPE_MESessionTopologySet = 101
MF_EVENT_TYPE_MESessionTopologiesCleared = 102
MF_EVENT_TYPE_MESessionStarted = 103
MF_EVENT_TYPE_MESessionPaused = 104
MF_EVENT_TYPE_MESessionStopped = 105
MF_EVENT_TYPE_MESessionClosed = 106
MF_EVENT_TYPE_MESessionEnded = 107
MF_EVENT_TYPE_MESessionRateChanged = 108
MF_EVENT_TYPE_MESessionScrubSampleComplete = 109
MF_EVENT_TYPE_MESessionCapabilitiesChanged = 110
MF_EVENT_TYPE_MESessionTopologyStatus = 111
MF_EVENT_TYPE_MESessionNotifyPresentationTime = 112
MF_EVENT_TYPE_MENewPresentation = 113
MF_EVENT_TYPE_MELicenseAcquisitionStart = 114
MF_EVENT_TYPE_MELicenseAcquisitionCompleted = 115
MF_EVENT_TYPE_MEIndividualizationStart = 116
MF_EVENT_TYPE_MEIndividualizationCompleted = 117
MF_EVENT_TYPE_MEEnablerProgress = 118
MF_EVENT_TYPE_MEEnablerCompleted = 119
MF_EVENT_TYPE_MEPolicyError = 120
MF_EVENT_TYPE_MEPolicyReport = 121
MF_EVENT_TYPE_MEBufferingStarted = 122
MF_EVENT_TYPE_MEBufferingStopped = 123
MF_EVENT_TYPE_MEConnectStart = 124
MF_EVENT_TYPE_MEConnectEnd = 125
MF_EVENT_TYPE_MEReconnectStart = 126
MF_EVENT_TYPE_MEReconnectEnd = 127
MF_EVENT_TYPE_MERendererEvent = 128
MF_EVENT_TYPE_MESessionStreamSinkFormatChanged = 129
MF_EVENT_TYPE_MESessionV1Anchor = 129
MF_EVENT_TYPE_MESourceUnknown = 200
MF_EVENT_TYPE_MESourceStarted = 201
MF_EVENT_TYPE_MEStreamStarted = 202
MF_EVENT_TYPE_MESourceSeeked = 203
MF_EVENT_TYPE_MEStreamSeeked = 204
MF_EVENT_TYPE_MENewStream = 205
MF_EVENT_TYPE_MEUpdatedStream = 206
MF_EVENT_TYPE_MESourceStopped = 207
MF_EVENT_TYPE_MEStreamStopped = 208
MF_EVENT_TYPE_MESourcePaused = 209
MF_EVENT_TYPE_MEStreamPaused = 210
MF_EVENT_TYPE_MEEndOfPresentation = 211
MF_EVENT_TYPE_MEEndOfStream = 212
MF_EVENT_TYPE_MEMediaSample = 213
MF_EVENT_TYPE_MEStreamTick = 214
MF_EVENT_TYPE_MEStreamThinMode = 215
MF_EVENT_TYPE_MEStreamFormatChanged = 216
MF_EVENT_TYPE_MESourceRateChanged = 217
MF_EVENT_TYPE_MEEndOfPresentationSegment = 218
MF_EVENT_TYPE_MESourceCharacteristicsChanged = 219
MF_EVENT_TYPE_MESourceRateChangeRequested = 220
MF_EVENT_TYPE_MESourceMetadataChanged = 221
MF_EVENT_TYPE_MESequencerSourceTopologyUpdated = 222
MF_EVENT_TYPE_MESourceV1Anchor = 222
MF_EVENT_TYPE_MESinkUnknown = 300
MF_EVENT_TYPE_MEStreamSinkStarted = 301
MF_EVENT_TYPE_MEStreamSinkStopped = 302
MF_EVENT_TYPE_MEStreamSinkPaused = 303
MF_EVENT_TYPE_MEStreamSinkRateChanged = 304
MF_EVENT_TYPE_MEStreamSinkRequestSample = 305
MF_EVENT_TYPE_MEStreamSinkMarker = 306
MF_EVENT_TYPE_MEStreamSinkPrerolled = 307
MF_EVENT_TYPE_MEStreamSinkScrubSampleComplete = 308
MF_EVENT_TYPE_MEStreamSinkFormatChanged = 309
MF_EVENT_TYPE_MEStreamSinkDeviceChanged = 310
MF_EVENT_TYPE_MEQualityNotify = 311
MF_EVENT_TYPE_MESinkInvalidated = 312
MF_EVENT_TYPE_MEAudioSessionNameChanged = 313
MF_EVENT_TYPE_MEAudioSessionVolumeChanged = 314
MF_EVENT_TYPE_MEAudioSessionDeviceRemoved = 315
MF_EVENT_TYPE_MEAudioSessionServerShutdown = 316
MF_EVENT_TYPE_MEAudioSessionGroupingParamChanged = 317
MF_EVENT_TYPE_MEAudioSessionIconChanged = 318
MF_EVENT_TYPE_MEAudioSessionFormatChanged = 319
MF_EVENT_TYPE_MEAudioSessionDisconnected = 320
MF_EVENT_TYPE_MEAudioSessionExclusiveModeOverride = 321
MF_EVENT_TYPE_MESinkV1Anchor = 321
MF_EVENT_TYPE_MECaptureAudioSessionVolumeChanged = 322
MF_EVENT_TYPE_MECaptureAudioSessionDeviceRemoved = 323
MF_EVENT_TYPE_MECaptureAudioSessionFormatChanged = 324
MF_EVENT_TYPE_MECaptureAudioSessionDisconnected = 325
MF_EVENT_TYPE_MECaptureAudioSessionExclusiveModeOverride = 326
MF_EVENT_TYPE_MECaptureAudioSessionServerShutdown = 327
MF_EVENT_TYPE_MESinkV2Anchor = 327
MF_EVENT_TYPE_METrustUnknown = 400
MF_EVENT_TYPE_MEPolicyChanged = 401
MF_EVENT_TYPE_MEContentProtectionMessage = 402
MF_EVENT_TYPE_MEPolicySet = 403
MF_EVENT_TYPE_METrustV1Anchor = 403
MF_EVENT_TYPE_MEWMDRMLicenseBackupCompleted = 500
MF_EVENT_TYPE_MEWMDRMLicenseBackupProgress = 501
MF_EVENT_TYPE_MEWMDRMLicenseRestoreCompleted = 502
MF_EVENT_TYPE_MEWMDRMLicenseRestoreProgress = 503
MF_EVENT_TYPE_MEWMDRMLicenseAcquisitionCompleted = 506
MF_EVENT_TYPE_MEWMDRMIndividualizationCompleted = 508
MF_EVENT_TYPE_MEWMDRMIndividualizationProgress = 513
MF_EVENT_TYPE_MEWMDRMProximityCompleted = 514
MF_EVENT_TYPE_MEWMDRMLicenseStoreCleaned = 515
MF_EVENT_TYPE_MEWMDRMRevocationDownloadCompleted = 516
MF_EVENT_TYPE_MEWMDRMV1Anchor = 516
MF_EVENT_TYPE_METransformUnknown = 600
MF_EVENT_TYPE_METransformNeedInput = 601
MF_EVENT_TYPE_METransformHaveOutput = 602
MF_EVENT_TYPE_METransformDrainComplete = 603
MF_EVENT_TYPE_METransformMarker = 604
MF_EVENT_TYPE_METransformInputStreamStateChanged = 605
MF_EVENT_TYPE_MEByteStreamCharacteristicsChanged = 700
MF_EVENT_TYPE_MEVideoCaptureDeviceRemoved = 800
MF_EVENT_TYPE_MEVideoCaptureDevicePreempted = 801
MF_EVENT_TYPE_MEStreamSinkFormatInvalidated = 802
MF_EVENT_TYPE_MEEncodingParameters = 803
MF_EVENT_TYPE_MEContentProtectionMetadata = 900
MF_EVENT_TYPE_MEDeviceThermalStateChanged = 950
MF_EVENT_TYPE_MEReservedMax = 10000
MF_FILE_ACCESSMODE = Int32
MF_ACCESSMODE_READ = 1
MF_ACCESSMODE_WRITE = 2
MF_ACCESSMODE_READWRITE = 3
MF_FILE_FLAGS = Int32
MF_FILEFLAGS_NONE = 0
MF_FILEFLAGS_NOBUFFERING = 1
MF_FILEFLAGS_ALLOW_WRITE_SHARING = 2
MF_FILE_OPENMODE = Int32
MF_OPENMODE_FAIL_IF_NOT_EXIST = 0
MF_OPENMODE_FAIL_IF_EXIST = 1
MF_OPENMODE_RESET_IF_EXIST = 2
MF_OPENMODE_APPEND_IF_EXIST = 3
MF_OPENMODE_DELETE_IF_EXIST = 4
def _define_MF_FLOAT2_head():
    class MF_FLOAT2(Structure):
        pass
    return MF_FLOAT2
def _define_MF_FLOAT2():
    MF_FLOAT2 = win32more.Media.MediaFoundation.MF_FLOAT2_head
    MF_FLOAT2._fields_ = [
        ('x', Single),
        ('y', Single),
    ]
    return MF_FLOAT2
def _define_MF_FLOAT3_head():
    class MF_FLOAT3(Structure):
        pass
    return MF_FLOAT3
def _define_MF_FLOAT3():
    MF_FLOAT3 = win32more.Media.MediaFoundation.MF_FLOAT3_head
    MF_FLOAT3._fields_ = [
        ('x', Single),
        ('y', Single),
        ('z', Single),
    ]
    return MF_FLOAT3
MF_HDCP_STATUS = Int32
MF_HDCP_STATUS_ON = 0
MF_HDCP_STATUS_OFF = 1
MF_HDCP_STATUS_ON_WITH_TYPE_ENFORCEMENT = 2
def _define_MF_LEAKY_BUCKET_PAIR_head():
    class MF_LEAKY_BUCKET_PAIR(Structure):
        pass
    return MF_LEAKY_BUCKET_PAIR
def _define_MF_LEAKY_BUCKET_PAIR():
    MF_LEAKY_BUCKET_PAIR = win32more.Media.MediaFoundation.MF_LEAKY_BUCKET_PAIR_head
    MF_LEAKY_BUCKET_PAIR._fields_ = [
        ('dwBitrate', UInt32),
        ('msBufferWindow', UInt32),
    ]
    return MF_LEAKY_BUCKET_PAIR
MF_MEDIA_ENGINE_CANPLAY = Int32
MF_MEDIA_ENGINE_CANPLAY_NOT_SUPPORTED = 0
MF_MEDIA_ENGINE_CANPLAY_MAYBE = 1
MF_MEDIA_ENGINE_CANPLAY_PROBABLY = 2
MF_MEDIA_ENGINE_CREATEFLAGS = Int32
MF_MEDIA_ENGINE_AUDIOONLY = 1
MF_MEDIA_ENGINE_WAITFORSTABLE_STATE = 2
MF_MEDIA_ENGINE_FORCEMUTE = 4
MF_MEDIA_ENGINE_REAL_TIME_MODE = 8
MF_MEDIA_ENGINE_DISABLE_LOCAL_PLUGINS = 16
MF_MEDIA_ENGINE_CREATEFLAGS_MASK = 31
MF_MEDIA_ENGINE_ERR = Int32
MF_MEDIA_ENGINE_ERR_NOERROR = 0
MF_MEDIA_ENGINE_ERR_ABORTED = 1
MF_MEDIA_ENGINE_ERR_NETWORK = 2
MF_MEDIA_ENGINE_ERR_DECODE = 3
MF_MEDIA_ENGINE_ERR_SRC_NOT_SUPPORTED = 4
MF_MEDIA_ENGINE_ERR_ENCRYPTED = 5
MF_MEDIA_ENGINE_EVENT = Int32
MF_MEDIA_ENGINE_EVENT_LOADSTART = 1
MF_MEDIA_ENGINE_EVENT_PROGRESS = 2
MF_MEDIA_ENGINE_EVENT_SUSPEND = 3
MF_MEDIA_ENGINE_EVENT_ABORT = 4
MF_MEDIA_ENGINE_EVENT_ERROR = 5
MF_MEDIA_ENGINE_EVENT_EMPTIED = 6
MF_MEDIA_ENGINE_EVENT_STALLED = 7
MF_MEDIA_ENGINE_EVENT_PLAY = 8
MF_MEDIA_ENGINE_EVENT_PAUSE = 9
MF_MEDIA_ENGINE_EVENT_LOADEDMETADATA = 10
MF_MEDIA_ENGINE_EVENT_LOADEDDATA = 11
MF_MEDIA_ENGINE_EVENT_WAITING = 12
MF_MEDIA_ENGINE_EVENT_PLAYING = 13
MF_MEDIA_ENGINE_EVENT_CANPLAY = 14
MF_MEDIA_ENGINE_EVENT_CANPLAYTHROUGH = 15
MF_MEDIA_ENGINE_EVENT_SEEKING = 16
MF_MEDIA_ENGINE_EVENT_SEEKED = 17
MF_MEDIA_ENGINE_EVENT_TIMEUPDATE = 18
MF_MEDIA_ENGINE_EVENT_ENDED = 19
MF_MEDIA_ENGINE_EVENT_RATECHANGE = 20
MF_MEDIA_ENGINE_EVENT_DURATIONCHANGE = 21
MF_MEDIA_ENGINE_EVENT_VOLUMECHANGE = 22
MF_MEDIA_ENGINE_EVENT_FORMATCHANGE = 1000
MF_MEDIA_ENGINE_EVENT_PURGEQUEUEDEVENTS = 1001
MF_MEDIA_ENGINE_EVENT_TIMELINE_MARKER = 1002
MF_MEDIA_ENGINE_EVENT_BALANCECHANGE = 1003
MF_MEDIA_ENGINE_EVENT_DOWNLOADCOMPLETE = 1004
MF_MEDIA_ENGINE_EVENT_BUFFERINGSTARTED = 1005
MF_MEDIA_ENGINE_EVENT_BUFFERINGENDED = 1006
MF_MEDIA_ENGINE_EVENT_FRAMESTEPCOMPLETED = 1007
MF_MEDIA_ENGINE_EVENT_NOTIFYSTABLESTATE = 1008
MF_MEDIA_ENGINE_EVENT_FIRSTFRAMEREADY = 1009
MF_MEDIA_ENGINE_EVENT_TRACKSCHANGE = 1010
MF_MEDIA_ENGINE_EVENT_OPMINFO = 1011
MF_MEDIA_ENGINE_EVENT_RESOURCELOST = 1012
MF_MEDIA_ENGINE_EVENT_DELAYLOADEVENT_CHANGED = 1013
MF_MEDIA_ENGINE_EVENT_STREAMRENDERINGERROR = 1014
MF_MEDIA_ENGINE_EVENT_SUPPORTEDRATES_CHANGED = 1015
MF_MEDIA_ENGINE_EVENT_AUDIOENDPOINTCHANGE = 1016
MF_MEDIA_ENGINE_EXTENSION_TYPE = Int32
MF_MEDIA_ENGINE_EXTENSION_TYPE_MEDIASOURCE = 0
MF_MEDIA_ENGINE_EXTENSION_TYPE_BYTESTREAM = 1
MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAGS = Int32
MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_PROTECTED = 1
MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_SURFACE_PROTECTION = 2
MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_ANTI_SCREEN_SCRAPE_PROTECTION = 4
MF_MEDIA_ENGINE_KEYERR = Int32
MF_MEDIAENGINE_KEYERR_UNKNOWN = 1
MF_MEDIAENGINE_KEYERR_CLIENT = 2
MF_MEDIAENGINE_KEYERR_SERVICE = 3
MF_MEDIAENGINE_KEYERR_OUTPUT = 4
MF_MEDIAENGINE_KEYERR_HARDWARECHANGE = 5
MF_MEDIAENGINE_KEYERR_DOMAIN = 6
MF_MEDIA_ENGINE_NETWORK = Int32
MF_MEDIA_ENGINE_NETWORK_EMPTY = 0
MF_MEDIA_ENGINE_NETWORK_IDLE = 1
MF_MEDIA_ENGINE_NETWORK_LOADING = 2
MF_MEDIA_ENGINE_NETWORK_NO_SOURCE = 3
MF_MEDIA_ENGINE_OPM_STATUS = Int32
MF_MEDIA_ENGINE_OPM_NOT_REQUESTED = 0
MF_MEDIA_ENGINE_OPM_ESTABLISHED = 1
MF_MEDIA_ENGINE_OPM_FAILED_VM = 2
MF_MEDIA_ENGINE_OPM_FAILED_BDA = 3
MF_MEDIA_ENGINE_OPM_FAILED_UNSIGNED_DRIVER = 4
MF_MEDIA_ENGINE_OPM_FAILED = 5
MF_MEDIA_ENGINE_PRELOAD = Int32
MF_MEDIA_ENGINE_PRELOAD_MISSING = 0
MF_MEDIA_ENGINE_PRELOAD_EMPTY = 1
MF_MEDIA_ENGINE_PRELOAD_NONE = 2
MF_MEDIA_ENGINE_PRELOAD_METADATA = 3
MF_MEDIA_ENGINE_PRELOAD_AUTOMATIC = 4
MF_MEDIA_ENGINE_PROTECTION_FLAGS = Int32
MF_MEDIA_ENGINE_ENABLE_PROTECTED_CONTENT = 1
MF_MEDIA_ENGINE_USE_PMP_FOR_ALL_CONTENT = 2
MF_MEDIA_ENGINE_USE_UNPROTECTED_PMP = 4
MF_MEDIA_ENGINE_READY = Int32
MF_MEDIA_ENGINE_READY_HAVE_NOTHING = 0
MF_MEDIA_ENGINE_READY_HAVE_METADATA = 1
MF_MEDIA_ENGINE_READY_HAVE_CURRENT_DATA = 2
MF_MEDIA_ENGINE_READY_HAVE_FUTURE_DATA = 3
MF_MEDIA_ENGINE_READY_HAVE_ENOUGH_DATA = 4
MF_MEDIA_ENGINE_S3D_PACKING_MODE = Int32
MF_MEDIA_ENGINE_S3D_PACKING_MODE_NONE = 0
MF_MEDIA_ENGINE_S3D_PACKING_MODE_SIDE_BY_SIDE = 1
MF_MEDIA_ENGINE_S3D_PACKING_MODE_TOP_BOTTOM = 2
MF_MEDIA_ENGINE_SEEK_MODE = Int32
MF_MEDIA_ENGINE_SEEK_MODE_NORMAL = 0
MF_MEDIA_ENGINE_SEEK_MODE_APPROXIMATE = 1
MF_MEDIA_ENGINE_STATISTIC = Int32
MF_MEDIA_ENGINE_STATISTIC_FRAMES_RENDERED = 0
MF_MEDIA_ENGINE_STATISTIC_FRAMES_DROPPED = 1
MF_MEDIA_ENGINE_STATISTIC_BYTES_DOWNLOADED = 2
MF_MEDIA_ENGINE_STATISTIC_BUFFER_PROGRESS = 3
MF_MEDIA_ENGINE_STATISTIC_FRAMES_PER_SECOND = 4
MF_MEDIA_ENGINE_STATISTIC_PLAYBACK_JITTER = 5
MF_MEDIA_ENGINE_STATISTIC_FRAMES_CORRUPTED = 6
MF_MEDIA_ENGINE_STATISTIC_TOTAL_FRAME_DELAY = 7
MF_MEDIA_ENGINE_STREAMTYPE_FAILED = Int32
MF_MEDIA_ENGINE_STREAMTYPE_FAILED_UNKNOWN = 0
MF_MEDIA_ENGINE_STREAMTYPE_FAILED_AUDIO = 1
MF_MEDIA_ENGINE_STREAMTYPE_FAILED_VIDEO = 2
MF_MEDIA_SHARING_ENGINE_EVENT = Int32
MF_MEDIA_SHARING_ENGINE_EVENT_DISCONNECT = 2000
MF_MEDIAKEY_STATUS = Int32
MF_MEDIAKEY_STATUS_USABLE = 0
MF_MEDIAKEY_STATUS_EXPIRED = 1
MF_MEDIAKEY_STATUS_OUTPUT_DOWNSCALED = 2
MF_MEDIAKEY_STATUS_OUTPUT_NOT_ALLOWED = 3
MF_MEDIAKEY_STATUS_STATUS_PENDING = 4
MF_MEDIAKEY_STATUS_INTERNAL_ERROR = 5
MF_MEDIAKEY_STATUS_RELEASED = 6
MF_MEDIAKEY_STATUS_OUTPUT_RESTRICTED = 7
MF_MEDIAKEYS_REQUIREMENT = Int32
MF_MEDIAKEYS_REQUIREMENT_REQUIRED = 1
MF_MEDIAKEYS_REQUIREMENT_OPTIONAL = 2
MF_MEDIAKEYS_REQUIREMENT_NOT_ALLOWED = 3
MF_MEDIAKEYSESSION_MESSAGETYPE = Int32
MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_REQUEST = 0
MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RENEWAL = 1
MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RELEASE = 2
MF_MEDIAKEYSESSION_MESSAGETYPE_INDIVIDUALIZATION_REQUEST = 3
MF_MEDIAKEYSESSION_TYPE = Int32
MF_MEDIAKEYSESSION_TYPE_TEMPORARY = 0
MF_MEDIAKEYSESSION_TYPE_PERSISTENT_LICENSE = 1
MF_MEDIAKEYSESSION_TYPE_PERSISTENT_RELEASE_MESSAGE = 2
MF_MEDIAKEYSESSION_TYPE_PERSISTENT_USAGE_RECORD = 3
MF_MSE_APPEND_MODE = Int32
MF_MSE_APPEND_MODE_SEGMENTS = 0
MF_MSE_APPEND_MODE_SEQUENCE = 1
MF_MSE_ERROR = Int32
MF_MSE_ERROR_NOERROR = 0
MF_MSE_ERROR_NETWORK = 1
MF_MSE_ERROR_DECODE = 2
MF_MSE_ERROR_UNKNOWN_ERROR = 3
MF_MSE_OPUS_SUPPORT_TYPE = Int32
MF_MSE_OPUS_SUPPORT_ON = 0
MF_MSE_OPUS_SUPPORT_OFF = 1
MF_MSE_READY = Int32
MF_MSE_READY_CLOSED = 1
MF_MSE_READY_OPEN = 2
MF_MSE_READY_ENDED = 3
MF_MSE_VP9_SUPPORT_TYPE = Int32
MF_MSE_VP9_SUPPORT_DEFAULT = 0
MF_MSE_VP9_SUPPORT_ON = 1
MF_MSE_VP9_SUPPORT_OFF = 2
MF_MT_D3D_RESOURCE_VERSION_ENUM = Int32
MF_D3D11_RESOURCE = 0
MF_D3D12_RESOURCE = 1
MF_OBJECT_TYPE = Int32
MF_OBJECT_MEDIASOURCE = 0
MF_OBJECT_BYTESTREAM = 1
MF_OBJECT_INVALID = 2
MF_OPM_ACP_PROTECTION_LEVEL = Int32
MF_OPM_ACP_OFF = 0
MF_OPM_ACP_LEVEL_ONE = 1
MF_OPM_ACP_LEVEL_TWO = 2
MF_OPM_ACP_LEVEL_THREE = 3
MF_OPM_ACP_FORCE_ULONG = 2147483647
MF_OPM_CGMSA_PROTECTION_LEVEL = Int32
MF_OPM_CGMSA_OFF = 0
MF_OPM_CGMSA_COPY_FREELY = 1
MF_OPM_CGMSA_COPY_NO_MORE = 2
MF_OPM_CGMSA_COPY_ONE_GENERATION = 3
MF_OPM_CGMSA_COPY_NEVER = 4
MF_OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED = 8
MF_PLUGIN_CONTROL_POLICY = Int32
MF_PLUGIN_CONTROL_POLICY_USE_ALL_PLUGINS = 0
MF_PLUGIN_CONTROL_POLICY_USE_APPROVED_PLUGINS = 1
MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS = 2
MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS_EDGEMODE = 3
MF_Plugin_Type = Int32
MF_Plugin_Type_MFT = 0
MF_Plugin_Type_MediaSource = 1
MF_Plugin_Type_MFT_MatchOutputType = 2
MF_Plugin_Type_Other = -1
MF_QUALITY_ADVISE_FLAGS = Int32
MF_QUALITY_CANNOT_KEEP_UP = 1
MF_QUALITY_DROP_MODE = Int32
MF_DROP_MODE_NONE = 0
MF_DROP_MODE_1 = 1
MF_DROP_MODE_2 = 2
MF_DROP_MODE_3 = 3
MF_DROP_MODE_4 = 4
MF_DROP_MODE_5 = 5
MF_NUM_DROP_MODES = 6
MF_QUALITY_LEVEL = Int32
MF_QUALITY_NORMAL = 0
MF_QUALITY_NORMAL_MINUS_1 = 1
MF_QUALITY_NORMAL_MINUS_2 = 2
MF_QUALITY_NORMAL_MINUS_3 = 3
MF_QUALITY_NORMAL_MINUS_4 = 4
MF_QUALITY_NORMAL_MINUS_5 = 5
MF_NUM_QUALITY_LEVELS = 6
def _define_MF_QUATERNION_head():
    class MF_QUATERNION(Structure):
        pass
    return MF_QUATERNION
def _define_MF_QUATERNION():
    MF_QUATERNION = win32more.Media.MediaFoundation.MF_QUATERNION_head
    MF_QUATERNION._fields_ = [
        ('x', Single),
        ('y', Single),
        ('z', Single),
        ('w', Single),
    ]
    return MF_QUATERNION
MF_RESOLUTION_FLAGS = UInt32
MF_RESOLUTION_MEDIASOURCE = 1
MF_RESOLUTION_BYTESTREAM = 2
MF_RESOLUTION_CONTENT_DOES_NOT_HAVE_TO_MATCH_EXTENSION_OR_MIME_TYPE = 16
MF_RESOLUTION_KEEP_BYTE_STREAM_ALIVE_ON_FAIL = 32
MF_RESOLUTION_DISABLE_LOCAL_PLUGINS = 64
MF_RESOLUTION_PLUGIN_CONTROL_POLICY_APPROVED_ONLY = 128
MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY = 256
MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY_EDGEMODE = 512
MF_RESOLUTION_ENABLE_STORE_PLUGINS = 1024
MF_RESOLUTION_READ = 65536
MF_RESOLUTION_WRITE = 131072
MF_SERVICE_LOOKUP_TYPE = Int32
MF_SERVICE_LOOKUP_UPSTREAM = 0
MF_SERVICE_LOOKUP_UPSTREAM_DIRECT = 1
MF_SERVICE_LOOKUP_DOWNSTREAM = 2
MF_SERVICE_LOOKUP_DOWNSTREAM_DIRECT = 3
MF_SERVICE_LOOKUP_ALL = 4
MF_SERVICE_LOOKUP_GLOBAL = 5
MF_SHARING_ENGINE_EVENT = Int32
MF_SHARING_ENGINE_EVENT_DISCONNECT = 2000
MF_SHARING_ENGINE_EVENT_LOCALRENDERINGSTARTED = 2001
MF_SHARING_ENGINE_EVENT_LOCALRENDERINGENDED = 2002
MF_SHARING_ENGINE_EVENT_STOPPED = 2003
MF_SHARING_ENGINE_EVENT_ERROR = 2501
MF_SINK_WRITER_CONSTANTS = UInt32
MF_SINK_WRITER_INVALID_STREAM_INDEX = 4294967295
MF_SINK_WRITER_ALL_STREAMS = 4294967294
MF_SINK_WRITER_MEDIASINK = 4294967295
def _define_MF_SINK_WRITER_STATISTICS_head():
    class MF_SINK_WRITER_STATISTICS(Structure):
        pass
    return MF_SINK_WRITER_STATISTICS
def _define_MF_SINK_WRITER_STATISTICS():
    MF_SINK_WRITER_STATISTICS = win32more.Media.MediaFoundation.MF_SINK_WRITER_STATISTICS_head
    MF_SINK_WRITER_STATISTICS._fields_ = [
        ('cb', UInt32),
        ('llLastTimestampReceived', Int64),
        ('llLastTimestampEncoded', Int64),
        ('llLastTimestampProcessed', Int64),
        ('llLastStreamTickReceived', Int64),
        ('llLastSinkSampleRequest', Int64),
        ('qwNumSamplesReceived', UInt64),
        ('qwNumSamplesEncoded', UInt64),
        ('qwNumSamplesProcessed', UInt64),
        ('qwNumStreamTicksReceived', UInt64),
        ('dwByteCountQueued', UInt32),
        ('qwByteCountProcessed', UInt64),
        ('dwNumOutstandingSinkSampleRequests', UInt32),
        ('dwAverageSampleRateReceived', UInt32),
        ('dwAverageSampleRateEncoded', UInt32),
        ('dwAverageSampleRateProcessed', UInt32),
    ]
    return MF_SINK_WRITER_STATISTICS
MF_SOURCE_READER_CONSTANTS = Int32
MF_SOURCE_READER_INVALID_STREAM_INDEX = -1
MF_SOURCE_READER_ALL_STREAMS = -2
MF_SOURCE_READER_ANY_STREAM = -2
MF_SOURCE_READER_FIRST_AUDIO_STREAM = -3
MF_SOURCE_READER_FIRST_VIDEO_STREAM = -4
MF_SOURCE_READER_MEDIASOURCE = -1
MF_SOURCE_READER_CONTROL_FLAG = Int32
MF_SOURCE_READER_CONTROLF_DRAIN = 1
MF_SOURCE_READER_CURRENT_TYPE_CONSTANTS = Int32
MF_SOURCE_READER_CURRENT_TYPE_INDEX = -1
MF_SOURCE_READER_FLAG = Int32
MF_SOURCE_READERF_ERROR = 1
MF_SOURCE_READERF_ENDOFSTREAM = 2
MF_SOURCE_READERF_NEWSTREAM = 4
MF_SOURCE_READERF_NATIVEMEDIATYPECHANGED = 16
MF_SOURCE_READERF_CURRENTMEDIATYPECHANGED = 32
MF_SOURCE_READERF_STREAMTICK = 256
MF_SOURCE_READERF_ALLEFFECTSREMOVED = 512
MF_STREAM_STATE = Int32
MF_STREAM_STATE_STOPPED = 0
MF_STREAM_STATE_PAUSED = 1
MF_STREAM_STATE_RUNNING = 2
MF_TIMED_TEXT_ALIGNMENT = Int32
MF_TIMED_TEXT_ALIGNMENT_START = 0
MF_TIMED_TEXT_ALIGNMENT_END = 1
MF_TIMED_TEXT_ALIGNMENT_CENTER = 2
MF_TIMED_TEXT_BOUTEN_POSITION = Int32
MF_TIMED_TEXT_BOUTEN_POSITION_BEFORE = 0
MF_TIMED_TEXT_BOUTEN_POSITION_AFTER = 1
MF_TIMED_TEXT_BOUTEN_POSITION_OUTSIDE = 2
MF_TIMED_TEXT_BOUTEN_TYPE = Int32
MF_TIMED_TEXT_BOUTEN_TYPE_NONE = 0
MF_TIMED_TEXT_BOUTEN_TYPE_AUTO = 1
MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDCIRCLE = 2
MF_TIMED_TEXT_BOUTEN_TYPE_OPENCIRCLE = 3
MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDDOT = 4
MF_TIMED_TEXT_BOUTEN_TYPE_OPENDOT = 5
MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDSESAME = 6
MF_TIMED_TEXT_BOUTEN_TYPE_OPENSESAME = 7
MF_TIMED_TEXT_CUE_EVENT = Int32
MF_TIMED_TEXT_CUE_EVENT_ACTIVE = 0
MF_TIMED_TEXT_CUE_EVENT_INACTIVE = 1
MF_TIMED_TEXT_CUE_EVENT_CLEAR = 2
MF_TIMED_TEXT_DECORATION = Int32
MF_TIMED_TEXT_DECORATION_NONE = 0
MF_TIMED_TEXT_DECORATION_UNDERLINE = 1
MF_TIMED_TEXT_DECORATION_LINE_THROUGH = 2
MF_TIMED_TEXT_DECORATION_OVERLINE = 4
MF_TIMED_TEXT_DISPLAY_ALIGNMENT = Int32
MF_TIMED_TEXT_DISPLAY_ALIGNMENT_BEFORE = 0
MF_TIMED_TEXT_DISPLAY_ALIGNMENT_AFTER = 1
MF_TIMED_TEXT_DISPLAY_ALIGNMENT_CENTER = 2
MF_TIMED_TEXT_ERROR_CODE = Int32
MF_TIMED_TEXT_ERROR_CODE_NOERROR = 0
MF_TIMED_TEXT_ERROR_CODE_FATAL = 1
MF_TIMED_TEXT_ERROR_CODE_DATA_FORMAT = 2
MF_TIMED_TEXT_ERROR_CODE_NETWORK = 3
MF_TIMED_TEXT_ERROR_CODE_INTERNAL = 4
MF_TIMED_TEXT_FONT_STYLE = Int32
MF_TIMED_TEXT_FONT_STYLE_NORMAL = 0
MF_TIMED_TEXT_FONT_STYLE_OBLIQUE = 1
MF_TIMED_TEXT_FONT_STYLE_ITALIC = 2
MF_TIMED_TEXT_RUBY_ALIGN = Int32
MF_TIMED_TEXT_RUBY_ALIGN_CENTER = 0
MF_TIMED_TEXT_RUBY_ALIGN_START = 1
MF_TIMED_TEXT_RUBY_ALIGN_END = 2
MF_TIMED_TEXT_RUBY_ALIGN_SPACEAROUND = 3
MF_TIMED_TEXT_RUBY_ALIGN_SPACEBETWEEN = 4
MF_TIMED_TEXT_RUBY_ALIGN_WITHBASE = 5
MF_TIMED_TEXT_RUBY_POSITION = Int32
MF_TIMED_TEXT_RUBY_POSITION_BEFORE = 0
MF_TIMED_TEXT_RUBY_POSITION_AFTER = 1
MF_TIMED_TEXT_RUBY_POSITION_OUTSIDE = 2
MF_TIMED_TEXT_RUBY_RESERVE = Int32
MF_TIMED_TEXT_RUBY_RESERVE_NONE = 0
MF_TIMED_TEXT_RUBY_RESERVE_BEFORE = 1
MF_TIMED_TEXT_RUBY_RESERVE_AFTER = 2
MF_TIMED_TEXT_RUBY_RESERVE_BOTH = 3
MF_TIMED_TEXT_RUBY_RESERVE_OUTSIDE = 4
MF_TIMED_TEXT_SCROLL_MODE = Int32
MF_TIMED_TEXT_SCROLL_MODE_POP_ON = 0
MF_TIMED_TEXT_SCROLL_MODE_ROLL_UP = 1
MF_TIMED_TEXT_TRACK_KIND = Int32
MF_TIMED_TEXT_TRACK_KIND_UNKNOWN = 0
MF_TIMED_TEXT_TRACK_KIND_SUBTITLES = 1
MF_TIMED_TEXT_TRACK_KIND_CAPTIONS = 2
MF_TIMED_TEXT_TRACK_KIND_METADATA = 3
MF_TIMED_TEXT_TRACK_READY_STATE = Int32
MF_TIMED_TEXT_TRACK_READY_STATE_NONE = 0
MF_TIMED_TEXT_TRACK_READY_STATE_LOADING = 1
MF_TIMED_TEXT_TRACK_READY_STATE_LOADED = 2
MF_TIMED_TEXT_TRACK_READY_STATE_ERROR = 3
MF_TIMED_TEXT_UNIT_TYPE = Int32
MF_TIMED_TEXT_UNIT_TYPE_PIXELS = 0
MF_TIMED_TEXT_UNIT_TYPE_PERCENTAGE = 1
MF_TIMED_TEXT_WRITING_MODE = Int32
MF_TIMED_TEXT_WRITING_MODE_LRTB = 0
MF_TIMED_TEXT_WRITING_MODE_RLTB = 1
MF_TIMED_TEXT_WRITING_MODE_TBRL = 2
MF_TIMED_TEXT_WRITING_MODE_TBLR = 3
MF_TIMED_TEXT_WRITING_MODE_LR = 4
MF_TIMED_TEXT_WRITING_MODE_RL = 5
MF_TIMED_TEXT_WRITING_MODE_TB = 6
MF_TOPOLOGY_RESOLUTION_STATUS_FLAGS = Int32
MF_TOPOLOGY_RESOLUTION_SUCCEEDED = 0
MF_OPTIONAL_NODE_REJECTED_MEDIA_TYPE = 1
MF_OPTIONAL_NODE_REJECTED_PROTECTED_PROCESS = 2
MF_TOPOLOGY_TYPE = Int32
MF_TOPOLOGY_OUTPUT_NODE = 0
MF_TOPOLOGY_SOURCESTREAM_NODE = 1
MF_TOPOLOGY_TRANSFORM_NODE = 2
MF_TOPOLOGY_TEE_NODE = 3
MF_TOPOLOGY_MAX = -1
MF_TOPONODE_DRAIN_MODE = Int32
MF_TOPONODE_DRAIN_DEFAULT = 0
MF_TOPONODE_DRAIN_ALWAYS = 1
MF_TOPONODE_DRAIN_NEVER = 2
MF_TOPONODE_FLUSH_MODE = Int32
MF_TOPONODE_FLUSH_ALWAYS = 0
MF_TOPONODE_FLUSH_SEEK = 1
MF_TOPONODE_FLUSH_NEVER = 2
MF_TOPOSTATUS = Int32
MF_TOPOSTATUS_INVALID = 0
MF_TOPOSTATUS_READY = 100
MF_TOPOSTATUS_STARTED_SOURCE = 200
MF_TOPOSTATUS_DYNAMIC_CHANGED = 210
MF_TOPOSTATUS_SINK_SWITCHED = 300
MF_TOPOSTATUS_ENDED = 400
MF_TRANSCODE_ADJUST_PROFILE_FLAGS = Int32
MF_TRANSCODE_ADJUST_PROFILE_DEFAULT = 0
MF_TRANSCODE_ADJUST_PROFILE_USE_SOURCE_ATTRIBUTES = 1
def _define_MF_TRANSCODE_SINK_INFO_head():
    class MF_TRANSCODE_SINK_INFO(Structure):
        pass
    return MF_TRANSCODE_SINK_INFO
def _define_MF_TRANSCODE_SINK_INFO():
    MF_TRANSCODE_SINK_INFO = win32more.Media.MediaFoundation.MF_TRANSCODE_SINK_INFO_head
    MF_TRANSCODE_SINK_INFO._fields_ = [
        ('dwVideoStreamID', UInt32),
        ('pVideoMediaType', win32more.Media.MediaFoundation.IMFMediaType_head),
        ('dwAudioStreamID', UInt32),
        ('pAudioMediaType', win32more.Media.MediaFoundation.IMFMediaType_head),
    ]
    return MF_TRANSCODE_SINK_INFO
MF_TRANSCODE_TOPOLOGYMODE_FLAGS = Int32
MF_TRANSCODE_TOPOLOGYMODE_SOFTWARE_ONLY = 0
MF_TRANSCODE_TOPOLOGYMODE_HARDWARE_ALLOWED = 1
MF_URL_TRUST_STATUS = Int32
MF_LICENSE_URL_UNTRUSTED = 0
MF_LICENSE_URL_TRUSTED = 1
MF_LICENSE_URL_TAMPERED = 2
MF_VIDEO_PROCESSOR_ALGORITHM_TYPE = Int32
MF_VIDEO_PROCESSOR_ALGORITHM_DEFAULT = 0
MF_VIDEO_PROCESSOR_ALGORITHM_MRF_CRF_444 = 1
MF_VIDEO_PROCESSOR_MIRROR = Int32
MIRROR_NONE = 0
MIRROR_HORIZONTAL = 1
MIRROR_VERTICAL = 2
MF_VIDEO_PROCESSOR_ROTATION = Int32
ROTATION_NONE = 0
ROTATION_NORMAL = 1
def _define_MF_VIDEO_SPHERICAL_VIEWDIRECTION_head():
    class MF_VIDEO_SPHERICAL_VIEWDIRECTION(Structure):
        pass
    return MF_VIDEO_SPHERICAL_VIEWDIRECTION
def _define_MF_VIDEO_SPHERICAL_VIEWDIRECTION():
    MF_VIDEO_SPHERICAL_VIEWDIRECTION = win32more.Media.MediaFoundation.MF_VIDEO_SPHERICAL_VIEWDIRECTION_head
    MF_VIDEO_SPHERICAL_VIEWDIRECTION._fields_ = [
        ('iHeading', Int32),
        ('iPitch', Int32),
        ('iRoll', Int32),
    ]
    return MF_VIDEO_SPHERICAL_VIEWDIRECTION
MF2DBuffer_LockFlags = Int32
MF2DBuffer_LockFlags_LockTypeMask = 3
MF2DBuffer_LockFlags_Read = 1
MF2DBuffer_LockFlags_Write = 2
MF2DBuffer_LockFlags_ReadWrite = 3
MF2DBuffer_LockFlags_ForceDWORD = 2147483647
MF3DVideoOutputType = Int32
MF3DVideoOutputType_BaseView = 0
MF3DVideoOutputType_Stereo = 1
MFAMRNBByteStreamHandler = Guid('efe6208a-0a2c-49fa-8a-01-37-68-b5-59-b6-da')
MFAMRNBSinkClassFactory = Guid('b0271158-70d2-4c5b-9f-94-76-f5-49-d9-0f-df')
def _define_MFARGB_head():
    class MFARGB(Structure):
        pass
    return MFARGB
def _define_MFARGB():
    MFARGB = win32more.Media.MediaFoundation.MFARGB_head
    MFARGB._fields_ = [
        ('rgbBlue', Byte),
        ('rgbGreen', Byte),
        ('rgbRed', Byte),
        ('rgbAlpha', Byte),
    ]
    return MFARGB
MFASF_INDEXER_FLAGS = Int32
MFASF_INDEXER_WRITE_NEW_INDEX = 1
MFASF_INDEXER_READ_FOR_REVERSEPLAYBACK = 2
MFASF_INDEXER_WRITE_FOR_LIVEREAD = 4
MFASF_MULTIPLEXERFLAGS = Int32
MFASF_MULTIPLEXER_AUTOADJUST_BITRATE = 1
MFASF_SPLITTERFLAGS = Int32
MFASF_SPLITTER_REVERSE = 1
MFASF_SPLITTER_WMDRM = 2
MFASF_STREAMSELECTOR_FLAGS = Int32
MFASF_STREAMSELECTOR_DISABLE_THINNING = 1
MFASF_STREAMSELECTOR_USE_AVERAGE_BITRATE = 2
MFASYNC_WORKQUEUE_TYPE = Int32
MF_STANDARD_WORKQUEUE = 0
MF_WINDOW_WORKQUEUE = 1
MF_MULTITHREADED_WORKQUEUE = 2
def _define_MFASYNCRESULT_head():
    class MFASYNCRESULT(win32more.Media.MediaFoundation.IMFAsyncResult_head):
        pass
    return MFASYNCRESULT
def _define_MFASYNCRESULT():
    MFASYNCRESULT = win32more.Media.MediaFoundation.MFASYNCRESULT_head
    win32more.Media.MediaFoundation.IMFAsyncResult
    return MFASYNCRESULT
MFAudioConstriction = Int32
MFAudioConstriction_MFaudioConstrictionOff = 0
MFAudioConstriction_MFaudioConstriction48_16 = 1
MFAudioConstriction_MFaudioConstriction44_16 = 2
MFAudioConstriction_MFaudioConstriction14_14 = 3
MFAudioConstriction_MFaudioConstrictionMute = 4
def _define_MFAudioDecoderDegradationInfo_head():
    class MFAudioDecoderDegradationInfo(Structure):
        pass
    return MFAudioDecoderDegradationInfo
def _define_MFAudioDecoderDegradationInfo():
    MFAudioDecoderDegradationInfo = win32more.Media.MediaFoundation.MFAudioDecoderDegradationInfo_head
    MFAudioDecoderDegradationInfo._fields_ = [
        ('eDegradationReason', win32more.Media.MediaFoundation.MFT_AUDIO_DECODER_DEGRADATION_REASON),
        ('eType', win32more.Media.MediaFoundation.MFT_AUDIO_DECODER_DEGRADATION_TYPE),
    ]
    return MFAudioDecoderDegradationInfo
def _define_MFAYUVSample_head():
    class MFAYUVSample(Structure):
        pass
    return MFAYUVSample
def _define_MFAYUVSample():
    MFAYUVSample = win32more.Media.MediaFoundation.MFAYUVSample_head
    MFAYUVSample._fields_ = [
        ('bCrValue', Byte),
        ('bCbValue', Byte),
        ('bYValue', Byte),
        ('bSampleAlpha8', Byte),
    ]
    return MFAYUVSample
def _define_MFBYTESTREAM_BUFFERING_PARAMS_head():
    class MFBYTESTREAM_BUFFERING_PARAMS(Structure):
        pass
    return MFBYTESTREAM_BUFFERING_PARAMS
def _define_MFBYTESTREAM_BUFFERING_PARAMS():
    MFBYTESTREAM_BUFFERING_PARAMS = win32more.Media.MediaFoundation.MFBYTESTREAM_BUFFERING_PARAMS_head
    MFBYTESTREAM_BUFFERING_PARAMS._fields_ = [
        ('cbTotalFileSize', UInt64),
        ('cbPlayableDataSize', UInt64),
        ('prgBuckets', POINTER(win32more.Media.MediaFoundation.MF_LEAKY_BUCKET_PAIR_head)),
        ('cBuckets', UInt32),
        ('qwNetBufferingTime', UInt64),
        ('qwExtraBufferingTimeDuringSeek', UInt64),
        ('qwPlayDuration', UInt64),
        ('dRate', Single),
    ]
    return MFBYTESTREAM_BUFFERING_PARAMS
MFBYTESTREAM_SEEK_ORIGIN = Int32
MFBYTESTREAM_SEEK_ORIGIN_msoBegin = 0
MFBYTESTREAM_SEEK_ORIGIN_msoCurrent = 1
def _define_MFCameraExtrinsic_CalibratedTransform_head():
    class MFCameraExtrinsic_CalibratedTransform(Structure):
        pass
    return MFCameraExtrinsic_CalibratedTransform
def _define_MFCameraExtrinsic_CalibratedTransform():
    MFCameraExtrinsic_CalibratedTransform = win32more.Media.MediaFoundation.MFCameraExtrinsic_CalibratedTransform_head
    MFCameraExtrinsic_CalibratedTransform._fields_ = [
        ('CalibrationId', Guid),
        ('Position', win32more.Media.MediaFoundation.MF_FLOAT3),
        ('Orientation', win32more.Media.MediaFoundation.MF_QUATERNION),
    ]
    return MFCameraExtrinsic_CalibratedTransform
def _define_MFCameraExtrinsics_head():
    class MFCameraExtrinsics(Structure):
        pass
    return MFCameraExtrinsics
def _define_MFCameraExtrinsics():
    MFCameraExtrinsics = win32more.Media.MediaFoundation.MFCameraExtrinsics_head
    MFCameraExtrinsics._fields_ = [
        ('TransformCount', UInt32),
        ('CalibratedTransforms', win32more.Media.MediaFoundation.MFCameraExtrinsic_CalibratedTransform * 1),
    ]
    return MFCameraExtrinsics
def _define_MFCameraIntrinsic_CameraModel_head():
    class MFCameraIntrinsic_CameraModel(Structure):
        pass
    return MFCameraIntrinsic_CameraModel
def _define_MFCameraIntrinsic_CameraModel():
    MFCameraIntrinsic_CameraModel = win32more.Media.MediaFoundation.MFCameraIntrinsic_CameraModel_head
    MFCameraIntrinsic_CameraModel._fields_ = [
        ('FocalLength_x', Single),
        ('FocalLength_y', Single),
        ('PrincipalPoint_x', Single),
        ('PrincipalPoint_y', Single),
    ]
    return MFCameraIntrinsic_CameraModel
def _define_MFCameraIntrinsic_DistortionModel_head():
    class MFCameraIntrinsic_DistortionModel(Structure):
        pass
    return MFCameraIntrinsic_DistortionModel
def _define_MFCameraIntrinsic_DistortionModel():
    MFCameraIntrinsic_DistortionModel = win32more.Media.MediaFoundation.MFCameraIntrinsic_DistortionModel_head
    MFCameraIntrinsic_DistortionModel._fields_ = [
        ('Radial_k1', Single),
        ('Radial_k2', Single),
        ('Radial_k3', Single),
        ('Tangential_p1', Single),
        ('Tangential_p2', Single),
    ]
    return MFCameraIntrinsic_DistortionModel
def _define_MFCameraIntrinsic_DistortionModel6KT_head():
    class MFCameraIntrinsic_DistortionModel6KT(Structure):
        pass
    return MFCameraIntrinsic_DistortionModel6KT
def _define_MFCameraIntrinsic_DistortionModel6KT():
    MFCameraIntrinsic_DistortionModel6KT = win32more.Media.MediaFoundation.MFCameraIntrinsic_DistortionModel6KT_head
    MFCameraIntrinsic_DistortionModel6KT._fields_ = [
        ('Radial_k1', Single),
        ('Radial_k2', Single),
        ('Radial_k3', Single),
        ('Radial_k4', Single),
        ('Radial_k5', Single),
        ('Radial_k6', Single),
        ('Tangential_p1', Single),
        ('Tangential_p2', Single),
    ]
    return MFCameraIntrinsic_DistortionModel6KT
def _define_MFCameraIntrinsic_DistortionModelArcTan_head():
    class MFCameraIntrinsic_DistortionModelArcTan(Structure):
        pass
    return MFCameraIntrinsic_DistortionModelArcTan
def _define_MFCameraIntrinsic_DistortionModelArcTan():
    MFCameraIntrinsic_DistortionModelArcTan = win32more.Media.MediaFoundation.MFCameraIntrinsic_DistortionModelArcTan_head
    MFCameraIntrinsic_DistortionModelArcTan._fields_ = [
        ('Radial_k0', Single),
        ('DistortionCenter_x', Single),
        ('DistortionCenter_y', Single),
        ('Tangential_x', Single),
        ('Tangential_y', Single),
    ]
    return MFCameraIntrinsic_DistortionModelArcTan
MFCameraIntrinsic_DistortionModelType = Int32
MFCameraIntrinsic_DistortionModelType_6KT = 0
MFCameraIntrinsic_DistortionModelType_ArcTan = 1
def _define_MFCameraIntrinsic_PinholeCameraModel_head():
    class MFCameraIntrinsic_PinholeCameraModel(Structure):
        pass
    return MFCameraIntrinsic_PinholeCameraModel
def _define_MFCameraIntrinsic_PinholeCameraModel():
    MFCameraIntrinsic_PinholeCameraModel = win32more.Media.MediaFoundation.MFCameraIntrinsic_PinholeCameraModel_head
    MFCameraIntrinsic_PinholeCameraModel._fields_ = [
        ('FocalLength', win32more.Media.MediaFoundation.MF_FLOAT2),
        ('PrincipalPoint', win32more.Media.MediaFoundation.MF_FLOAT2),
    ]
    return MFCameraIntrinsic_PinholeCameraModel
MFCameraOcclusionState = Int32
MFCameraOcclusionState_Open = 0
MFCameraOcclusionState_OccludedByLid = 1
MFCameraOcclusionState_OccludedByCameraHardware = 2
MFCLOCK_CHARACTERISTICS_FLAGS = Int32
MFCLOCK_CHARACTERISTICS_FLAG_FREQUENCY_10MHZ = 2
MFCLOCK_CHARACTERISTICS_FLAG_ALWAYS_RUNNING = 4
MFCLOCK_CHARACTERISTICS_FLAG_IS_SYSTEM_CLOCK = 8
def _define_MFCLOCK_PROPERTIES_head():
    class MFCLOCK_PROPERTIES(Structure):
        pass
    return MFCLOCK_PROPERTIES
def _define_MFCLOCK_PROPERTIES():
    MFCLOCK_PROPERTIES = win32more.Media.MediaFoundation.MFCLOCK_PROPERTIES_head
    MFCLOCK_PROPERTIES._fields_ = [
        ('qwCorrelationRate', UInt64),
        ('guidClockId', Guid),
        ('dwClockFlags', UInt32),
        ('qwClockFrequency', UInt64),
        ('dwClockTolerance', UInt32),
        ('dwClockJitter', UInt32),
    ]
    return MFCLOCK_PROPERTIES
MFCLOCK_RELATIONAL_FLAGS = Int32
MFCLOCK_RELATIONAL_FLAG_JITTER_NEVER_AHEAD = 1
MFCLOCK_STATE = Int32
MFCLOCK_STATE_INVALID = 0
MFCLOCK_STATE_RUNNING = 1
MFCLOCK_STATE_STOPPED = 2
MFCLOCK_STATE_PAUSED = 3
def _define_MFCONTENTPROTECTIONDEVICE_INPUT_DATA_head():
    class MFCONTENTPROTECTIONDEVICE_INPUT_DATA(Structure):
        pass
    return MFCONTENTPROTECTIONDEVICE_INPUT_DATA
def _define_MFCONTENTPROTECTIONDEVICE_INPUT_DATA():
    MFCONTENTPROTECTIONDEVICE_INPUT_DATA = win32more.Media.MediaFoundation.MFCONTENTPROTECTIONDEVICE_INPUT_DATA_head
    MFCONTENTPROTECTIONDEVICE_INPUT_DATA._fields_ = [
        ('HWProtectionFunctionID', UInt32),
        ('PrivateDataByteCount', UInt32),
        ('HWProtectionDataByteCount', UInt32),
        ('Reserved', UInt32),
        ('InputData', Byte * 4),
    ]
    return MFCONTENTPROTECTIONDEVICE_INPUT_DATA
def _define_MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA_head():
    class MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA(Structure):
        pass
    return MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA
def _define_MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA():
    MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA = win32more.Media.MediaFoundation.MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA_head
    MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA._fields_ = [
        ('PrivateDataByteCount', UInt32),
        ('MaxHWProtectionDataByteCount', UInt32),
        ('HWProtectionDataByteCount', UInt32),
        ('Status', win32more.Foundation.HRESULT),
        ('TransportTimeInHundredsOfNanoseconds', Int64),
        ('ExecutionTimeInHundredsOfNanoseconds', Int64),
        ('OutputData', Byte * 4),
    ]
    return MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA
def _define_MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA_head():
    class MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA(Structure):
        pass
    return MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA
def _define_MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA():
    MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA = win32more.Media.MediaFoundation.MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA_head
    MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA._fields_ = [
        ('TaskIndex', UInt32),
        ('ClassName', Char * 260),
        ('BasePriority', Int32),
    ]
    return MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA
MFDepthMeasurement = Int32
MFDepthMeasurement_DistanceToFocalPlane = 0
MFDepthMeasurement_DistanceToOpticalCenter = 1
def _define_MFExtendedCameraIntrinsic_IntrinsicModel_head():
    class MFExtendedCameraIntrinsic_IntrinsicModel(Structure):
        pass
    return MFExtendedCameraIntrinsic_IntrinsicModel
def _define_MFExtendedCameraIntrinsic_IntrinsicModel():
    MFExtendedCameraIntrinsic_IntrinsicModel = win32more.Media.MediaFoundation.MFExtendedCameraIntrinsic_IntrinsicModel_head
    MFExtendedCameraIntrinsic_IntrinsicModel._fields_ = [
        ('Width', UInt32),
        ('Height', UInt32),
        ('SplitFrameId', UInt32),
        ('CameraModel', win32more.Media.MediaFoundation.MFCameraIntrinsic_CameraModel),
    ]
    return MFExtendedCameraIntrinsic_IntrinsicModel
MFFLACBytestreamHandler = Guid('0e41cfb8-0506-40f4-a5-16-77-cc-23-64-2d-91')
MFFLACSinkClassFactory = Guid('7d39c56f-6075-47c9-9b-ae-8c-f9-e5-31-b5-f5')
def _define_MFFOLDDOWN_MATRIX_head():
    class MFFOLDDOWN_MATRIX(Structure):
        pass
    return MFFOLDDOWN_MATRIX
def _define_MFFOLDDOWN_MATRIX():
    MFFOLDDOWN_MATRIX = win32more.Media.MediaFoundation.MFFOLDDOWN_MATRIX_head
    MFFOLDDOWN_MATRIX._fields_ = [
        ('cbSize', UInt32),
        ('cSrcChannels', UInt32),
        ('cDstChannels', UInt32),
        ('dwChannelMask', UInt32),
        ('Coeff', Int32 * 64),
    ]
    return MFFOLDDOWN_MATRIX
MFFrameSourceTypes = Int32
MFFrameSourceTypes_Color = 1
MFFrameSourceTypes_Infrared = 2
MFFrameSourceTypes_Depth = 4
MFFrameSourceTypes_Image = 8
MFFrameSourceTypes_Custom = 128
def _define_MFINPUTTRUSTAUTHORITY_ACCESS_ACTION_head():
    class MFINPUTTRUSTAUTHORITY_ACCESS_ACTION(Structure):
        pass
    return MFINPUTTRUSTAUTHORITY_ACCESS_ACTION
def _define_MFINPUTTRUSTAUTHORITY_ACCESS_ACTION():
    MFINPUTTRUSTAUTHORITY_ACCESS_ACTION = win32more.Media.MediaFoundation.MFINPUTTRUSTAUTHORITY_ACCESS_ACTION_head
    MFINPUTTRUSTAUTHORITY_ACCESS_ACTION._fields_ = [
        ('Action', win32more.Media.MediaFoundation.MFPOLICYMANAGER_ACTION),
        ('pbTicket', c_char_p_no),
        ('cbTicket', UInt32),
    ]
    return MFINPUTTRUSTAUTHORITY_ACCESS_ACTION
def _define_MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS_head():
    class MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS(Structure):
        pass
    return MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS
def _define_MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS():
    MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS = win32more.Media.MediaFoundation.MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS_head
    MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS._fields_ = [
        ('dwSize', UInt32),
        ('dwVer', UInt32),
        ('cbSignatureOffset', UInt32),
        ('cbSignatureSize', UInt32),
        ('cbExtensionOffset', UInt32),
        ('cbExtensionSize', UInt32),
        ('cActions', UInt32),
        ('rgOutputActions', win32more.Media.MediaFoundation.MFINPUTTRUSTAUTHORITY_ACCESS_ACTION * 1),
    ]
    return MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS
def _define_MFMediaKeyStatus_head():
    class MFMediaKeyStatus(Structure):
        pass
    return MFMediaKeyStatus
def _define_MFMediaKeyStatus():
    MFMediaKeyStatus = win32more.Media.MediaFoundation.MFMediaKeyStatus_head
    MFMediaKeyStatus._fields_ = [
        ('pbKeyId', c_char_p_no),
        ('cbKeyId', UInt32),
        ('eMediaKeyStatus', win32more.Media.MediaFoundation.MF_MEDIAKEY_STATUS),
    ]
    return MFMediaKeyStatus
MFMEDIASOURCE_CHARACTERISTICS = Int32
MFMEDIASOURCE_IS_LIVE = 1
MFMEDIASOURCE_CAN_SEEK = 2
MFMEDIASOURCE_CAN_PAUSE = 4
MFMEDIASOURCE_HAS_SLOW_SEEK = 8
MFMEDIASOURCE_HAS_MULTIPLE_PRESENTATIONS = 16
MFMEDIASOURCE_CAN_SKIPFORWARD = 32
MFMEDIASOURCE_CAN_SKIPBACKWARD = 64
MFMEDIASOURCE_DOES_NOT_USE_NETWORK = 128
def _define_MFMPEG2DLNASINKSTATS_head():
    class MFMPEG2DLNASINKSTATS(Structure):
        pass
    return MFMPEG2DLNASINKSTATS
def _define_MFMPEG2DLNASINKSTATS():
    MFMPEG2DLNASINKSTATS = win32more.Media.MediaFoundation.MFMPEG2DLNASINKSTATS_head
    MFMPEG2DLNASINKSTATS._fields_ = [
        ('cBytesWritten', UInt64),
        ('fPAL', win32more.Foundation.BOOL),
        ('fccVideo', UInt32),
        ('dwVideoWidth', UInt32),
        ('dwVideoHeight', UInt32),
        ('cVideoFramesReceived', UInt64),
        ('cVideoFramesEncoded', UInt64),
        ('cVideoFramesSkipped', UInt64),
        ('cBlackVideoFramesEncoded', UInt64),
        ('cVideoFramesDuplicated', UInt64),
        ('cAudioSamplesPerSec', UInt32),
        ('cAudioChannels', UInt32),
        ('cAudioBytesReceived', UInt64),
        ('cAudioFramesEncoded', UInt64),
    ]
    return MFMPEG2DLNASINKSTATS
MFNET_PROXYSETTINGS = Int32
MFNET_PROXYSETTING_NONE = 0
MFNET_PROXYSETTING_MANUAL = 1
MFNET_PROXYSETTING_AUTO = 2
MFNET_PROXYSETTING_BROWSER = 3
MFNetAuthenticationFlags = Int32
MFNET_AUTHENTICATION_PROXY = 1
MFNET_AUTHENTICATION_CLEAR_TEXT = 2
MFNET_AUTHENTICATION_LOGGED_ON_USER = 4
def _define_MFNetCredentialManagerGetParam_head():
    class MFNetCredentialManagerGetParam(Structure):
        pass
    return MFNetCredentialManagerGetParam
def _define_MFNetCredentialManagerGetParam():
    MFNetCredentialManagerGetParam = win32more.Media.MediaFoundation.MFNetCredentialManagerGetParam_head
    MFNetCredentialManagerGetParam._fields_ = [
        ('hrOp', win32more.Foundation.HRESULT),
        ('fAllowLoggedOnUser', win32more.Foundation.BOOL),
        ('fClearTextPackage', win32more.Foundation.BOOL),
        ('pszUrl', win32more.Foundation.PWSTR),
        ('pszSite', win32more.Foundation.PWSTR),
        ('pszRealm', win32more.Foundation.PWSTR),
        ('pszPackage', win32more.Foundation.PWSTR),
        ('nRetries', Int32),
    ]
    return MFNetCredentialManagerGetParam
MFNetCredentialOptions = Int32
MFNET_CREDENTIAL_SAVE = 1
MFNET_CREDENTIAL_DONT_CACHE = 2
MFNET_CREDENTIAL_ALLOW_CLEAR_TEXT = 4
MFNetCredentialRequirements = Int32
REQUIRE_PROMPT = 1
REQUIRE_SAVE_SELECTED = 2
MFNETSOURCE_CACHE_STATE = Int32
MFNETSOURCE_CACHE_UNAVAILABLE = 0
MFNETSOURCE_CACHE_ACTIVE_WRITING = 1
MFNETSOURCE_CACHE_ACTIVE_COMPLETE = 2
MFNETSOURCE_PROTOCOL_TYPE = Int32
MFNETSOURCE_UNDEFINED = 0
MFNETSOURCE_HTTP = 1
MFNETSOURCE_RTSP = 2
MFNETSOURCE_FILE = 3
MFNETSOURCE_MULTICAST = 4
MFNETSOURCE_STATISTICS_IDS = Int32
MFNETSOURCE_RECVPACKETS_ID = 0
MFNETSOURCE_LOSTPACKETS_ID = 1
MFNETSOURCE_RESENDSREQUESTED_ID = 2
MFNETSOURCE_RESENDSRECEIVED_ID = 3
MFNETSOURCE_RECOVEREDBYECCPACKETS_ID = 4
MFNETSOURCE_RECOVEREDBYRTXPACKETS_ID = 5
MFNETSOURCE_OUTPACKETS_ID = 6
MFNETSOURCE_RECVRATE_ID = 7
MFNETSOURCE_AVGBANDWIDTHBPS_ID = 8
MFNETSOURCE_BYTESRECEIVED_ID = 9
MFNETSOURCE_PROTOCOL_ID = 10
MFNETSOURCE_TRANSPORT_ID = 11
MFNETSOURCE_CACHE_STATE_ID = 12
MFNETSOURCE_LINKBANDWIDTH_ID = 13
MFNETSOURCE_CONTENTBITRATE_ID = 14
MFNETSOURCE_SPEEDFACTOR_ID = 15
MFNETSOURCE_BUFFERSIZE_ID = 16
MFNETSOURCE_BUFFERPROGRESS_ID = 17
MFNETSOURCE_LASTBWSWITCHTS_ID = 18
MFNETSOURCE_SEEKRANGESTART_ID = 19
MFNETSOURCE_SEEKRANGEEND_ID = 20
MFNETSOURCE_BUFFERINGCOUNT_ID = 21
MFNETSOURCE_INCORRECTLYSIGNEDPACKETS_ID = 22
MFNETSOURCE_SIGNEDSESSION_ID = 23
MFNETSOURCE_MAXBITRATE_ID = 24
MFNETSOURCE_RECEPTION_QUALITY_ID = 25
MFNETSOURCE_RECOVEREDPACKETS_ID = 26
MFNETSOURCE_VBR_ID = 27
MFNETSOURCE_DOWNLOADPROGRESS_ID = 28
MFNETSOURCE_UNPREDEFINEDPROTOCOLNAME_ID = 29
MFNETSOURCE_TRANSPORT_TYPE = Int32
MFNETSOURCE_UDP = 0
MFNETSOURCE_TCP = 1
MFNominalRange = Int32
MFNominalRange_Unknown = 0
MFNominalRange_Normal = 1
MFNominalRange_Wide = 2
MFNominalRange_0_255 = 1
MFNominalRange_16_235 = 2
MFNominalRange_48_208 = 3
MFNominalRange_64_127 = 4
MFNominalRange_Last = 5
MFNominalRange_ForceDWORD = 2147483647
def _define_MFOffset_head():
    class MFOffset(Structure):
        pass
    return MFOffset
def _define_MFOffset():
    MFOffset = win32more.Media.MediaFoundation.MFOffset_head
    MFOffset._fields_ = [
        ('fract', UInt16),
        ('value', Int16),
    ]
    return MFOffset
def _define_MFP_ACQUIRE_USER_CREDENTIAL_EVENT_head():
    class MFP_ACQUIRE_USER_CREDENTIAL_EVENT(Structure):
        pass
    return MFP_ACQUIRE_USER_CREDENTIAL_EVENT
def _define_MFP_ACQUIRE_USER_CREDENTIAL_EVENT():
    MFP_ACQUIRE_USER_CREDENTIAL_EVENT = win32more.Media.MediaFoundation.MFP_ACQUIRE_USER_CREDENTIAL_EVENT_head
    MFP_ACQUIRE_USER_CREDENTIAL_EVENT._fields_ = [
        ('header', win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
        ('dwUserData', UIntPtr),
        ('fProceedWithAuthentication', win32more.Foundation.BOOL),
        ('hrAuthenticationStatus', win32more.Foundation.HRESULT),
        ('pwszURL', win32more.Foundation.PWSTR),
        ('pwszSite', win32more.Foundation.PWSTR),
        ('pwszRealm', win32more.Foundation.PWSTR),
        ('pwszPackage', win32more.Foundation.PWSTR),
        ('nRetries', Int32),
        ('flags', UInt32),
        ('pCredential', win32more.Media.MediaFoundation.IMFNetCredential_head),
    ]
    return MFP_ACQUIRE_USER_CREDENTIAL_EVENT
MFP_CREATION_OPTIONS = Int32
MFP_OPTION_NONE = 0
MFP_OPTION_FREE_THREADED_CALLBACK = 1
MFP_OPTION_NO_MMCSS = 2
MFP_OPTION_NO_REMOTE_DESKTOP_OPTIMIZATION = 4
def _define_MFP_ERROR_EVENT_head():
    class MFP_ERROR_EVENT(Structure):
        pass
    return MFP_ERROR_EVENT
def _define_MFP_ERROR_EVENT():
    MFP_ERROR_EVENT = win32more.Media.MediaFoundation.MFP_ERROR_EVENT_head
    MFP_ERROR_EVENT._fields_ = [
        ('header', win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
    ]
    return MFP_ERROR_EVENT
def _define_MFP_EVENT_HEADER_head():
    class MFP_EVENT_HEADER(Structure):
        pass
    return MFP_EVENT_HEADER
def _define_MFP_EVENT_HEADER():
    MFP_EVENT_HEADER = win32more.Media.MediaFoundation.MFP_EVENT_HEADER_head
    MFP_EVENT_HEADER._fields_ = [
        ('eEventType', win32more.Media.MediaFoundation.MFP_EVENT_TYPE),
        ('hrEvent', win32more.Foundation.HRESULT),
        ('pMediaPlayer', win32more.Media.MediaFoundation.IMFPMediaPlayer_head),
        ('eState', win32more.Media.MediaFoundation.MFP_MEDIAPLAYER_STATE),
        ('pPropertyStore', win32more.UI.Shell.PropertiesSystem.IPropertyStore_head),
    ]
    return MFP_EVENT_HEADER
MFP_EVENT_TYPE = Int32
MFP_EVENT_TYPE_PLAY = 0
MFP_EVENT_TYPE_PAUSE = 1
MFP_EVENT_TYPE_STOP = 2
MFP_EVENT_TYPE_POSITION_SET = 3
MFP_EVENT_TYPE_RATE_SET = 4
MFP_EVENT_TYPE_MEDIAITEM_CREATED = 5
MFP_EVENT_TYPE_MEDIAITEM_SET = 6
MFP_EVENT_TYPE_FRAME_STEP = 7
MFP_EVENT_TYPE_MEDIAITEM_CLEARED = 8
MFP_EVENT_TYPE_MF = 9
MFP_EVENT_TYPE_ERROR = 10
MFP_EVENT_TYPE_PLAYBACK_ENDED = 11
MFP_EVENT_TYPE_ACQUIRE_USER_CREDENTIAL = 12
def _define_MFP_FRAME_STEP_EVENT_head():
    class MFP_FRAME_STEP_EVENT(Structure):
        pass
    return MFP_FRAME_STEP_EVENT
def _define_MFP_FRAME_STEP_EVENT():
    MFP_FRAME_STEP_EVENT = win32more.Media.MediaFoundation.MFP_FRAME_STEP_EVENT_head
    MFP_FRAME_STEP_EVENT._fields_ = [
        ('header', win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
        ('pMediaItem', win32more.Media.MediaFoundation.IMFPMediaItem_head),
    ]
    return MFP_FRAME_STEP_EVENT
def _define_MFP_MEDIAITEM_CLEARED_EVENT_head():
    class MFP_MEDIAITEM_CLEARED_EVENT(Structure):
        pass
    return MFP_MEDIAITEM_CLEARED_EVENT
def _define_MFP_MEDIAITEM_CLEARED_EVENT():
    MFP_MEDIAITEM_CLEARED_EVENT = win32more.Media.MediaFoundation.MFP_MEDIAITEM_CLEARED_EVENT_head
    MFP_MEDIAITEM_CLEARED_EVENT._fields_ = [
        ('header', win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
        ('pMediaItem', win32more.Media.MediaFoundation.IMFPMediaItem_head),
    ]
    return MFP_MEDIAITEM_CLEARED_EVENT
def _define_MFP_MEDIAITEM_CREATED_EVENT_head():
    class MFP_MEDIAITEM_CREATED_EVENT(Structure):
        pass
    return MFP_MEDIAITEM_CREATED_EVENT
def _define_MFP_MEDIAITEM_CREATED_EVENT():
    MFP_MEDIAITEM_CREATED_EVENT = win32more.Media.MediaFoundation.MFP_MEDIAITEM_CREATED_EVENT_head
    MFP_MEDIAITEM_CREATED_EVENT._fields_ = [
        ('header', win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
        ('pMediaItem', win32more.Media.MediaFoundation.IMFPMediaItem_head),
        ('dwUserData', UIntPtr),
    ]
    return MFP_MEDIAITEM_CREATED_EVENT
def _define_MFP_MEDIAITEM_SET_EVENT_head():
    class MFP_MEDIAITEM_SET_EVENT(Structure):
        pass
    return MFP_MEDIAITEM_SET_EVENT
def _define_MFP_MEDIAITEM_SET_EVENT():
    MFP_MEDIAITEM_SET_EVENT = win32more.Media.MediaFoundation.MFP_MEDIAITEM_SET_EVENT_head
    MFP_MEDIAITEM_SET_EVENT._fields_ = [
        ('header', win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
        ('pMediaItem', win32more.Media.MediaFoundation.IMFPMediaItem_head),
    ]
    return MFP_MEDIAITEM_SET_EVENT
MFP_MEDIAPLAYER_STATE = Int32
MFP_MEDIAPLAYER_STATE_EMPTY = 0
MFP_MEDIAPLAYER_STATE_STOPPED = 1
MFP_MEDIAPLAYER_STATE_PLAYING = 2
MFP_MEDIAPLAYER_STATE_PAUSED = 3
MFP_MEDIAPLAYER_STATE_SHUTDOWN = 4
def _define_MFP_MF_EVENT_head():
    class MFP_MF_EVENT(Structure):
        pass
    return MFP_MF_EVENT
def _define_MFP_MF_EVENT():
    MFP_MF_EVENT = win32more.Media.MediaFoundation.MFP_MF_EVENT_head
    MFP_MF_EVENT._fields_ = [
        ('header', win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
        ('MFEventType', UInt32),
        ('pMFMediaEvent', win32more.Media.MediaFoundation.IMFMediaEvent_head),
        ('pMediaItem', win32more.Media.MediaFoundation.IMFPMediaItem_head),
    ]
    return MFP_MF_EVENT
def _define_MFP_PAUSE_EVENT_head():
    class MFP_PAUSE_EVENT(Structure):
        pass
    return MFP_PAUSE_EVENT
def _define_MFP_PAUSE_EVENT():
    MFP_PAUSE_EVENT = win32more.Media.MediaFoundation.MFP_PAUSE_EVENT_head
    MFP_PAUSE_EVENT._fields_ = [
        ('header', win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
        ('pMediaItem', win32more.Media.MediaFoundation.IMFPMediaItem_head),
    ]
    return MFP_PAUSE_EVENT
def _define_MFP_PLAY_EVENT_head():
    class MFP_PLAY_EVENT(Structure):
        pass
    return MFP_PLAY_EVENT
def _define_MFP_PLAY_EVENT():
    MFP_PLAY_EVENT = win32more.Media.MediaFoundation.MFP_PLAY_EVENT_head
    MFP_PLAY_EVENT._fields_ = [
        ('header', win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
        ('pMediaItem', win32more.Media.MediaFoundation.IMFPMediaItem_head),
    ]
    return MFP_PLAY_EVENT
def _define_MFP_PLAYBACK_ENDED_EVENT_head():
    class MFP_PLAYBACK_ENDED_EVENT(Structure):
        pass
    return MFP_PLAYBACK_ENDED_EVENT
def _define_MFP_PLAYBACK_ENDED_EVENT():
    MFP_PLAYBACK_ENDED_EVENT = win32more.Media.MediaFoundation.MFP_PLAYBACK_ENDED_EVENT_head
    MFP_PLAYBACK_ENDED_EVENT._fields_ = [
        ('header', win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
        ('pMediaItem', win32more.Media.MediaFoundation.IMFPMediaItem_head),
    ]
    return MFP_PLAYBACK_ENDED_EVENT
def _define_MFP_POSITION_SET_EVENT_head():
    class MFP_POSITION_SET_EVENT(Structure):
        pass
    return MFP_POSITION_SET_EVENT
def _define_MFP_POSITION_SET_EVENT():
    MFP_POSITION_SET_EVENT = win32more.Media.MediaFoundation.MFP_POSITION_SET_EVENT_head
    MFP_POSITION_SET_EVENT._fields_ = [
        ('header', win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
        ('pMediaItem', win32more.Media.MediaFoundation.IMFPMediaItem_head),
    ]
    return MFP_POSITION_SET_EVENT
def _define_MFP_RATE_SET_EVENT_head():
    class MFP_RATE_SET_EVENT(Structure):
        pass
    return MFP_RATE_SET_EVENT
def _define_MFP_RATE_SET_EVENT():
    MFP_RATE_SET_EVENT = win32more.Media.MediaFoundation.MFP_RATE_SET_EVENT_head
    MFP_RATE_SET_EVENT._fields_ = [
        ('header', win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
        ('pMediaItem', win32more.Media.MediaFoundation.IMFPMediaItem_head),
        ('flRate', Single),
    ]
    return MFP_RATE_SET_EVENT
def _define_MFP_STOP_EVENT_head():
    class MFP_STOP_EVENT(Structure):
        pass
    return MFP_STOP_EVENT
def _define_MFP_STOP_EVENT():
    MFP_STOP_EVENT = win32more.Media.MediaFoundation.MFP_STOP_EVENT_head
    MFP_STOP_EVENT._fields_ = [
        ('header', win32more.Media.MediaFoundation.MFP_EVENT_HEADER),
        ('pMediaItem', win32more.Media.MediaFoundation.IMFPMediaItem_head),
    ]
    return MFP_STOP_EVENT
def _define_MFPaletteEntry_head():
    class MFPaletteEntry(Union):
        pass
    return MFPaletteEntry
def _define_MFPaletteEntry():
    MFPaletteEntry = win32more.Media.MediaFoundation.MFPaletteEntry_head
    MFPaletteEntry._fields_ = [
        ('ARGB', win32more.Media.MediaFoundation.MFARGB),
        ('AYCbCr', win32more.Media.MediaFoundation.MFAYUVSample),
    ]
    return MFPaletteEntry
def _define_MFPERIODICCALLBACK():
    return WINFUNCTYPE(Void,win32more.System.Com.IUnknown_head)
def _define_MFPinholeCameraIntrinsic_IntrinsicModel_head():
    class MFPinholeCameraIntrinsic_IntrinsicModel(Structure):
        pass
    return MFPinholeCameraIntrinsic_IntrinsicModel
def _define_MFPinholeCameraIntrinsic_IntrinsicModel():
    MFPinholeCameraIntrinsic_IntrinsicModel = win32more.Media.MediaFoundation.MFPinholeCameraIntrinsic_IntrinsicModel_head
    MFPinholeCameraIntrinsic_IntrinsicModel._fields_ = [
        ('Width', UInt32),
        ('Height', UInt32),
        ('CameraModel', win32more.Media.MediaFoundation.MFCameraIntrinsic_PinholeCameraModel),
        ('DistortionModel', win32more.Media.MediaFoundation.MFCameraIntrinsic_DistortionModel),
    ]
    return MFPinholeCameraIntrinsic_IntrinsicModel
def _define_MFPinholeCameraIntrinsics_head():
    class MFPinholeCameraIntrinsics(Structure):
        pass
    return MFPinholeCameraIntrinsics
def _define_MFPinholeCameraIntrinsics():
    MFPinholeCameraIntrinsics = win32more.Media.MediaFoundation.MFPinholeCameraIntrinsics_head
    MFPinholeCameraIntrinsics._fields_ = [
        ('IntrinsicModelCount', UInt32),
        ('IntrinsicModels', win32more.Media.MediaFoundation.MFPinholeCameraIntrinsic_IntrinsicModel * 1),
    ]
    return MFPinholeCameraIntrinsics
MFPMPSESSION_CREATION_FLAGS = Int32
MFPMPSESSION_UNPROTECTED_PROCESS = 1
MFPMPSESSION_IN_PROCESS = 2
MFPOLICYMANAGER_ACTION = Int32
PEACTION_NO = 0
PEACTION_PLAY = 1
PEACTION_COPY = 2
PEACTION_EXPORT = 3
PEACTION_EXTRACT = 4
PEACTION_RESERVED1 = 5
PEACTION_RESERVED2 = 6
PEACTION_RESERVED3 = 7
PEACTION_LAST = 7
MFRATE_DIRECTION = Int32
MFRATE_FORWARD = 0
MFRATE_REVERSE = 1
def _define_MFRatio_head():
    class MFRatio(Structure):
        pass
    return MFRatio
def _define_MFRatio():
    MFRatio = win32more.Media.MediaFoundation.MFRatio_head
    MFRatio._fields_ = [
        ('Numerator', UInt32),
        ('Denominator', UInt32),
    ]
    return MFRatio
def _define_MFRR_COMPONENT_HASH_INFO_head():
    class MFRR_COMPONENT_HASH_INFO(Structure):
        pass
    return MFRR_COMPONENT_HASH_INFO
def _define_MFRR_COMPONENT_HASH_INFO():
    MFRR_COMPONENT_HASH_INFO = win32more.Media.MediaFoundation.MFRR_COMPONENT_HASH_INFO_head
    MFRR_COMPONENT_HASH_INFO._fields_ = [
        ('ulReason', UInt32),
        ('rgHeaderHash', Char * 43),
        ('rgPublicKeyHash', Char * 43),
        ('wszName', Char * 260),
    ]
    return MFRR_COMPONENT_HASH_INFO
def _define_MFRR_COMPONENTS_head():
    class MFRR_COMPONENTS(Structure):
        pass
    return MFRR_COMPONENTS
def _define_MFRR_COMPONENTS():
    MFRR_COMPONENTS = win32more.Media.MediaFoundation.MFRR_COMPONENTS_head
    MFRR_COMPONENTS._fields_ = [
        ('dwRRInfoVersion', UInt32),
        ('dwRRComponents', UInt32),
        ('pRRComponents', POINTER(win32more.Media.MediaFoundation.MFRR_COMPONENT_HASH_INFO_head)),
    ]
    return MFRR_COMPONENTS
MFSampleAllocatorUsage = Int32
MFSampleAllocatorUsage_UsesProvidedAllocator = 0
MFSampleAllocatorUsage_UsesCustomAllocator = 1
MFSampleAllocatorUsage_DoesNotAllocate = 2
MFSampleEncryptionProtectionScheme = Int32
MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_NONE = 0
MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_AES_CTR = 1
MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_AES_CBC = 2
MFSensorDeviceMode = Int32
MFSensorDeviceMode_Controller = 0
MFSensorDeviceMode_Shared = 1
MFSensorDeviceType = Int32
MFSensorDeviceType_Unknown = 0
MFSensorDeviceType_Device = 1
MFSensorDeviceType_MediaSource = 2
MFSensorDeviceType_FrameProvider = 3
MFSensorDeviceType_SensorTransform = 4
MFSensorStreamType = Int32
MFSensorStreamType_Unknown = 0
MFSensorStreamType_Input = 1
MFSensorStreamType_Output = 2
MFSequencerTopologyFlags = Int32
SequencerTopologyFlags_Last = 1
MFSESSION_GETFULLTOPOLOGY_FLAGS = Int32
MFSESSION_GETFULLTOPOLOGY_CURRENT = 1
MFSESSION_SETTOPOLOGY_FLAGS = Int32
MFSESSION_SETTOPOLOGY_IMMEDIATE = 1
MFSESSION_SETTOPOLOGY_NORESOLUTION = 2
MFSESSION_SETTOPOLOGY_CLEAR_CURRENT = 4
MFSHUTDOWN_STATUS = Int32
MFSHUTDOWN_INITIATED = 0
MFSHUTDOWN_COMPLETED = 1
MFSINK_WMDRMACTION = Int32
MFSINK_WMDRMACTION_UNDEFINED = 0
MFSINK_WMDRMACTION_ENCODE = 1
MFSINK_WMDRMACTION_TRANSCODE = 2
MFSINK_WMDRMACTION_TRANSCRYPT = 3
MFSINK_WMDRMACTION_LAST = 3
MFStandardVideoFormat = Int32
MFStdVideoFormat_reserved = 0
MFStdVideoFormat_NTSC = 1
MFStdVideoFormat_PAL = 2
MFStdVideoFormat_DVD_NTSC = 3
MFStdVideoFormat_DVD_PAL = 4
MFStdVideoFormat_DV_PAL = 5
MFStdVideoFormat_DV_NTSC = 6
MFStdVideoFormat_ATSC_SD480i = 7
MFStdVideoFormat_ATSC_HD1080i = 8
MFStdVideoFormat_ATSC_HD720p = 9
MFSTREAMSINK_MARKER_TYPE = Int32
MFSTREAMSINK_MARKER_DEFAULT = 0
MFSTREAMSINK_MARKER_ENDOFSEGMENT = 1
MFSTREAMSINK_MARKER_TICK = 2
MFSTREAMSINK_MARKER_EVENT = 3
MFT_AUDIO_DECODER_DEGRADATION_REASON = Int32
MFT_AUDIO_DECODER_DEGRADATION_REASON_NONE = 0
MFT_AUDIO_DECODER_DEGRADATION_REASON_LICENSING_REQUIREMENT = 1
MFT_AUDIO_DECODER_DEGRADATION_TYPE = Int32
MFT_AUDIO_DECODER_DEGRADATION_TYPE_NONE = 0
MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX2CHANNEL = 1
MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX6CHANNEL = 2
MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX8CHANNEL = 3
MFT_DRAIN_TYPE = Int32
MFT_DRAIN_PRODUCE_TAILS = 0
MFT_DRAIN_NO_TAILS = 1
MFT_ENUM_FLAG = UInt32
MFT_ENUM_FLAG_SYNCMFT = 1
MFT_ENUM_FLAG_ASYNCMFT = 2
MFT_ENUM_FLAG_HARDWARE = 4
MFT_ENUM_FLAG_FIELDOFUSE = 8
MFT_ENUM_FLAG_LOCALMFT = 16
MFT_ENUM_FLAG_TRANSCODE_ONLY = 32
MFT_ENUM_FLAG_SORTANDFILTER = 64
MFT_ENUM_FLAG_SORTANDFILTER_APPROVED_ONLY = 192
MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY = 320
MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY_EDGEMODE = 576
MFT_ENUM_FLAG_UNTRUSTED_STOREMFT = 1024
MFT_ENUM_FLAG_ALL = 63
def _define_MFT_INPUT_STREAM_INFO_head():
    class MFT_INPUT_STREAM_INFO(Structure):
        pass
    return MFT_INPUT_STREAM_INFO
def _define_MFT_INPUT_STREAM_INFO():
    MFT_INPUT_STREAM_INFO = win32more.Media.MediaFoundation.MFT_INPUT_STREAM_INFO_head
    MFT_INPUT_STREAM_INFO._fields_ = [
        ('hnsMaxLatency', Int64),
        ('dwFlags', UInt32),
        ('cbSize', UInt32),
        ('cbMaxLookahead', UInt32),
        ('cbAlignment', UInt32),
    ]
    return MFT_INPUT_STREAM_INFO
MFT_MESSAGE_TYPE = Int32
MFT_MESSAGE_COMMAND_FLUSH = 0
MFT_MESSAGE_COMMAND_DRAIN = 1
MFT_MESSAGE_SET_D3D_MANAGER = 2
MFT_MESSAGE_DROP_SAMPLES = 3
MFT_MESSAGE_COMMAND_TICK = 4
MFT_MESSAGE_NOTIFY_BEGIN_STREAMING = 268435456
MFT_MESSAGE_NOTIFY_END_STREAMING = 268435457
MFT_MESSAGE_NOTIFY_END_OF_STREAM = 268435458
MFT_MESSAGE_NOTIFY_START_OF_STREAM = 268435459
MFT_MESSAGE_NOTIFY_RELEASE_RESOURCES = 268435460
MFT_MESSAGE_NOTIFY_REACQUIRE_RESOURCES = 268435461
MFT_MESSAGE_NOTIFY_EVENT = 268435462
MFT_MESSAGE_COMMAND_SET_OUTPUT_STREAM_STATE = 268435463
MFT_MESSAGE_COMMAND_FLUSH_OUTPUT_STREAM = 268435464
MFT_MESSAGE_COMMAND_MARKER = 536870912
def _define_MFT_OUTPUT_DATA_BUFFER_head():
    class MFT_OUTPUT_DATA_BUFFER(Structure):
        pass
    return MFT_OUTPUT_DATA_BUFFER
def _define_MFT_OUTPUT_DATA_BUFFER():
    MFT_OUTPUT_DATA_BUFFER = win32more.Media.MediaFoundation.MFT_OUTPUT_DATA_BUFFER_head
    MFT_OUTPUT_DATA_BUFFER._fields_ = [
        ('dwStreamID', UInt32),
        ('pSample', win32more.Media.MediaFoundation.IMFSample_head),
        ('dwStatus', UInt32),
        ('pEvents', win32more.Media.MediaFoundation.IMFCollection_head),
    ]
    return MFT_OUTPUT_DATA_BUFFER
def _define_MFT_OUTPUT_STREAM_INFO_head():
    class MFT_OUTPUT_STREAM_INFO(Structure):
        pass
    return MFT_OUTPUT_STREAM_INFO
def _define_MFT_OUTPUT_STREAM_INFO():
    MFT_OUTPUT_STREAM_INFO = win32more.Media.MediaFoundation.MFT_OUTPUT_STREAM_INFO_head
    MFT_OUTPUT_STREAM_INFO._fields_ = [
        ('dwFlags', UInt32),
        ('cbSize', UInt32),
        ('cbAlignment', UInt32),
    ]
    return MFT_OUTPUT_STREAM_INFO
def _define_MFT_REGISTER_TYPE_INFO_head():
    class MFT_REGISTER_TYPE_INFO(Structure):
        pass
    return MFT_REGISTER_TYPE_INFO
def _define_MFT_REGISTER_TYPE_INFO():
    MFT_REGISTER_TYPE_INFO = win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head
    MFT_REGISTER_TYPE_INFO._fields_ = [
        ('guidMajorType', Guid),
        ('guidSubtype', Guid),
    ]
    return MFT_REGISTER_TYPE_INFO
def _define_MFT_REGISTRATION_INFO_head():
    class MFT_REGISTRATION_INFO(Structure):
        pass
    return MFT_REGISTRATION_INFO
def _define_MFT_REGISTRATION_INFO():
    MFT_REGISTRATION_INFO = win32more.Media.MediaFoundation.MFT_REGISTRATION_INFO_head
    MFT_REGISTRATION_INFO._fields_ = [
        ('clsid', Guid),
        ('guidCategory', Guid),
        ('uiFlags', UInt32),
        ('pszName', win32more.Foundation.PWSTR),
        ('cInTypes', UInt32),
        ('pInTypes', POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head)),
        ('cOutTypes', UInt32),
        ('pOutTypes', POINTER(win32more.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO_head)),
    ]
    return MFT_REGISTRATION_INFO
def _define_MFT_STREAM_STATE_PARAM_head():
    class MFT_STREAM_STATE_PARAM(Structure):
        pass
    return MFT_STREAM_STATE_PARAM
def _define_MFT_STREAM_STATE_PARAM():
    MFT_STREAM_STATE_PARAM = win32more.Media.MediaFoundation.MFT_STREAM_STATE_PARAM_head
    MFT_STREAM_STATE_PARAM._fields_ = [
        ('StreamId', UInt32),
        ('State', win32more.Media.MediaFoundation.MF_STREAM_STATE),
    ]
    return MFT_STREAM_STATE_PARAM
MFTIMER_FLAGS = Int32
MFTIMER_RELATIVE = 1
MFTOPOLOGY_DXVA_MODE = Int32
MFTOPOLOGY_DXVA_DEFAULT = 0
MFTOPOLOGY_DXVA_NONE = 1
MFTOPOLOGY_DXVA_FULL = 2
MFTOPOLOGY_HARDWARE_MODE = Int32
MFTOPOLOGY_HWMODE_SOFTWARE_ONLY = 0
MFTOPOLOGY_HWMODE_USE_HARDWARE = 1
MFTOPOLOGY_HWMODE_USE_ONLY_HARDWARE = 2
def _define_MFTOPONODE_ATTRIBUTE_UPDATE_head():
    class MFTOPONODE_ATTRIBUTE_UPDATE(Structure):
        pass
    return MFTOPONODE_ATTRIBUTE_UPDATE
def _define_MFTOPONODE_ATTRIBUTE_UPDATE():
    MFTOPONODE_ATTRIBUTE_UPDATE = win32more.Media.MediaFoundation.MFTOPONODE_ATTRIBUTE_UPDATE_head
    class MFTOPONODE_ATTRIBUTE_UPDATE__Anonymous_e__Union(Union):
        pass
    MFTOPONODE_ATTRIBUTE_UPDATE__Anonymous_e__Union._fields_ = [
        ('u32', UInt32),
        ('u64', UInt64),
        ('d', Double),
    ]
    MFTOPONODE_ATTRIBUTE_UPDATE._anonymous_ = [
        'Anonymous',
    ]
    MFTOPONODE_ATTRIBUTE_UPDATE._fields_ = [
        ('NodeId', UInt64),
        ('guidAttributeKey', Guid),
        ('attrType', win32more.Media.MediaFoundation.MF_ATTRIBUTE_TYPE),
        ('Anonymous', MFTOPONODE_ATTRIBUTE_UPDATE__Anonymous_e__Union),
    ]
    return MFTOPONODE_ATTRIBUTE_UPDATE
MFVideo3DFormat = Int32
MFVideo3DSampleFormat_BaseView = 0
MFVideo3DSampleFormat_MultiView = 1
MFVideo3DSampleFormat_Packed_LeftRight = 2
MFVideo3DSampleFormat_Packed_TopBottom = 3
MFVideo3DSampleFormat = Int32
MFSampleExtension_3DVideo_MultiView = 1
MFSampleExtension_3DVideo_Packed = 0
def _define_MFVideoAlphaBitmap_head():
    class MFVideoAlphaBitmap(Structure):
        pass
    return MFVideoAlphaBitmap
def _define_MFVideoAlphaBitmap():
    MFVideoAlphaBitmap = win32more.Media.MediaFoundation.MFVideoAlphaBitmap_head
    class MFVideoAlphaBitmap__bitmap_e__Union(Union):
        pass
    MFVideoAlphaBitmap__bitmap_e__Union._fields_ = [
        ('hdc', win32more.Graphics.Gdi.HDC),
        ('pDDS', win32more.Graphics.Direct3D9.IDirect3DSurface9_head),
    ]
    MFVideoAlphaBitmap._fields_ = [
        ('GetBitmapFromDC', win32more.Foundation.BOOL),
        ('bitmap', MFVideoAlphaBitmap__bitmap_e__Union),
        ('params', win32more.Media.MediaFoundation.MFVideoAlphaBitmapParams),
    ]
    return MFVideoAlphaBitmap
MFVideoAlphaBitmapFlags = Int32
MFVideoAlphaBitmap_EntireDDS = 1
MFVideoAlphaBitmap_SrcColorKey = 2
MFVideoAlphaBitmap_SrcRect = 4
MFVideoAlphaBitmap_DestRect = 8
MFVideoAlphaBitmap_FilterMode = 16
MFVideoAlphaBitmap_Alpha = 32
MFVideoAlphaBitmap_BitMask = 63
def _define_MFVideoAlphaBitmapParams_head():
    class MFVideoAlphaBitmapParams(Structure):
        pass
    return MFVideoAlphaBitmapParams
def _define_MFVideoAlphaBitmapParams():
    MFVideoAlphaBitmapParams = win32more.Media.MediaFoundation.MFVideoAlphaBitmapParams_head
    MFVideoAlphaBitmapParams._fields_ = [
        ('dwFlags', UInt32),
        ('clrSrcKey', win32more.Foundation.COLORREF),
        ('rcSrc', win32more.Foundation.RECT),
        ('nrcDest', win32more.Media.MediaFoundation.MFVideoNormalizedRect),
        ('fAlpha', Single),
        ('dwFilterMode', UInt32),
    ]
    return MFVideoAlphaBitmapParams
def _define_MFVideoArea_head():
    class MFVideoArea(Structure):
        pass
    return MFVideoArea
def _define_MFVideoArea():
    MFVideoArea = win32more.Media.MediaFoundation.MFVideoArea_head
    MFVideoArea._fields_ = [
        ('OffsetX', win32more.Media.MediaFoundation.MFOffset),
        ('OffsetY', win32more.Media.MediaFoundation.MFOffset),
        ('Area', win32more.Foundation.SIZE),
    ]
    return MFVideoArea
MFVideoAspectRatioMode = Int32
MFVideoARMode_None = 0
MFVideoARMode_PreservePicture = 1
MFVideoARMode_PreservePixel = 2
MFVideoARMode_NonLinearStretch = 4
MFVideoARMode_Mask = 7
MFVideoChromaSubsampling = Int32
MFVideoChromaSubsampling_Unknown = 0
MFVideoChromaSubsampling_ProgressiveChroma = 8
MFVideoChromaSubsampling_Horizontally_Cosited = 4
MFVideoChromaSubsampling_Vertically_Cosited = 2
MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes = 1
MFVideoChromaSubsampling_MPEG2 = 5
MFVideoChromaSubsampling_MPEG1 = 1
MFVideoChromaSubsampling_DV_PAL = 6
MFVideoChromaSubsampling_Cosited = 7
MFVideoChromaSubsampling_Last = 8
MFVideoChromaSubsampling_ForceDWORD = 2147483647
def _define_MFVideoCompressedInfo_head():
    class MFVideoCompressedInfo(Structure):
        pass
    return MFVideoCompressedInfo
def _define_MFVideoCompressedInfo():
    MFVideoCompressedInfo = win32more.Media.MediaFoundation.MFVideoCompressedInfo_head
    MFVideoCompressedInfo._fields_ = [
        ('AvgBitrate', Int64),
        ('AvgBitErrorRate', Int64),
        ('MaxKeyFrameSpacing', UInt32),
    ]
    return MFVideoCompressedInfo
MFVideoDRMFlags = Int32
MFVideoDRMFlag_None = 0
MFVideoDRMFlag_AnalogProtected = 1
MFVideoDRMFlag_DigitallyProtected = 2
MFVideoDSPMode = Int32
MFVideoDSPMode_Passthrough = 1
MFVideoDSPMode_Stabilization = 4
MFVideoFlags = Int32
MFVideoFlag_PAD_TO_Mask = 3
MFVideoFlag_PAD_TO_None = 0
MFVideoFlag_PAD_TO_4x3 = 1
MFVideoFlag_PAD_TO_16x9 = 2
MFVideoFlag_SrcContentHintMask = 28
MFVideoFlag_SrcContentHintNone = 0
MFVideoFlag_SrcContentHint16x9 = 4
MFVideoFlag_SrcContentHint235_1 = 8
MFVideoFlag_AnalogProtected = 32
MFVideoFlag_DigitallyProtected = 64
MFVideoFlag_ProgressiveContent = 128
MFVideoFlag_FieldRepeatCountMask = 1792
MFVideoFlag_FieldRepeatCountShift = 8
MFVideoFlag_ProgressiveSeqReset = 2048
MFVideoFlag_PanScanEnabled = 131072
MFVideoFlag_LowerFieldFirst = 262144
MFVideoFlag_BottomUpLinearRep = 524288
MFVideoFlags_DXVASurface = 1048576
MFVideoFlags_RenderTargetSurface = 4194304
MFVideoFlags_ForceQWORD = 2147483647
def _define_MFVIDEOFORMAT_head():
    class MFVIDEOFORMAT(Structure):
        pass
    return MFVIDEOFORMAT
def _define_MFVIDEOFORMAT():
    MFVIDEOFORMAT = win32more.Media.MediaFoundation.MFVIDEOFORMAT_head
    MFVIDEOFORMAT._fields_ = [
        ('dwSize', UInt32),
        ('videoInfo', win32more.Media.MediaFoundation.MFVideoInfo),
        ('guidFormat', Guid),
        ('compressedInfo', win32more.Media.MediaFoundation.MFVideoCompressedInfo),
        ('surfaceInfo', win32more.Media.MediaFoundation.MFVideoSurfaceInfo),
    ]
    return MFVIDEOFORMAT
def _define_MFVideoInfo_head():
    class MFVideoInfo(Structure):
        pass
    return MFVideoInfo
def _define_MFVideoInfo():
    MFVideoInfo = win32more.Media.MediaFoundation.MFVideoInfo_head
    MFVideoInfo._fields_ = [
        ('dwWidth', UInt32),
        ('dwHeight', UInt32),
        ('PixelAspectRatio', win32more.Media.MediaFoundation.MFRatio),
        ('SourceChromaSubsampling', win32more.Media.MediaFoundation.MFVideoChromaSubsampling),
        ('InterlaceMode', win32more.Media.MediaFoundation.MFVideoInterlaceMode),
        ('TransferFunction', win32more.Media.MediaFoundation.MFVideoTransferFunction),
        ('ColorPrimaries', win32more.Media.MediaFoundation.MFVideoPrimaries),
        ('TransferMatrix', win32more.Media.MediaFoundation.MFVideoTransferMatrix),
        ('SourceLighting', win32more.Media.MediaFoundation.MFVideoLighting),
        ('FramesPerSecond', win32more.Media.MediaFoundation.MFRatio),
        ('NominalRange', win32more.Media.MediaFoundation.MFNominalRange),
        ('GeometricAperture', win32more.Media.MediaFoundation.MFVideoArea),
        ('MinimumDisplayAperture', win32more.Media.MediaFoundation.MFVideoArea),
        ('PanScanAperture', win32more.Media.MediaFoundation.MFVideoArea),
        ('VideoFlags', UInt64),
    ]
    return MFVideoInfo
MFVideoInterlaceMode = Int32
MFVideoInterlace_Unknown = 0
MFVideoInterlace_Progressive = 2
MFVideoInterlace_FieldInterleavedUpperFirst = 3
MFVideoInterlace_FieldInterleavedLowerFirst = 4
MFVideoInterlace_FieldSingleUpper = 5
MFVideoInterlace_FieldSingleLower = 6
MFVideoInterlace_MixedInterlaceOrProgressive = 7
MFVideoInterlace_Last = 8
MFVideoInterlace_ForceDWORD = 2147483647
MFVideoLighting = Int32
MFVideoLighting_Unknown = 0
MFVideoLighting_bright = 1
MFVideoLighting_office = 2
MFVideoLighting_dim = 3
MFVideoLighting_dark = 4
MFVideoLighting_Last = 5
MFVideoLighting_ForceDWORD = 2147483647
MFVideoMixPrefs = Int32
MFVideoMixPrefs_ForceHalfInterlace = 1
MFVideoMixPrefs_AllowDropToHalfInterlace = 2
MFVideoMixPrefs_AllowDropToBob = 4
MFVideoMixPrefs_ForceBob = 8
MFVideoMixPrefs_EnableRotation = 16
MFVideoMixPrefs_Mask = 31
def _define_MFVideoNormalizedRect_head():
    class MFVideoNormalizedRect(Structure):
        pass
    return MFVideoNormalizedRect
def _define_MFVideoNormalizedRect():
    MFVideoNormalizedRect = win32more.Media.MediaFoundation.MFVideoNormalizedRect_head
    MFVideoNormalizedRect._fields_ = [
        ('left', Single),
        ('top', Single),
        ('right', Single),
        ('bottom', Single),
    ]
    return MFVideoNormalizedRect
MFVideoPadFlags = Int32
MFVideoPadFlag_PAD_TO_None = 0
MFVideoPadFlag_PAD_TO_4x3 = 1
MFVideoPadFlag_PAD_TO_16x9 = 2
MFVideoPrimaries = Int32
MFVideoPrimaries_Unknown = 0
MFVideoPrimaries_reserved = 1
MFVideoPrimaries_BT709 = 2
MFVideoPrimaries_BT470_2_SysM = 3
MFVideoPrimaries_BT470_2_SysBG = 4
MFVideoPrimaries_SMPTE170M = 5
MFVideoPrimaries_SMPTE240M = 6
MFVideoPrimaries_EBU3213 = 7
MFVideoPrimaries_SMPTE_C = 8
MFVideoPrimaries_BT2020 = 9
MFVideoPrimaries_XYZ = 10
MFVideoPrimaries_DCI_P3 = 11
MFVideoPrimaries_ACES = 12
MFVideoPrimaries_Last = 13
MFVideoPrimaries_ForceDWORD = 2147483647
MFVideoRenderPrefs = Int32
MFVideoRenderPrefs_DoNotRenderBorder = 1
MFVideoRenderPrefs_DoNotClipToDevice = 2
MFVideoRenderPrefs_AllowOutputThrottling = 4
MFVideoRenderPrefs_ForceOutputThrottling = 8
MFVideoRenderPrefs_ForceBatching = 16
MFVideoRenderPrefs_AllowBatching = 32
MFVideoRenderPrefs_ForceScaling = 64
MFVideoRenderPrefs_AllowScaling = 128
MFVideoRenderPrefs_DoNotRepaintOnStop = 256
MFVideoRenderPrefs_Mask = 511
MFVideoRotationFormat = Int32
MFVideoRotationFormat_0 = 0
MFVideoRotationFormat_90 = 90
MFVideoRotationFormat_180 = 180
MFVideoRotationFormat_270 = 270
MFVideoSphericalFormat = Int32
MFVideoSphericalFormat_Unsupported = 0
MFVideoSphericalFormat_Equirectangular = 1
MFVideoSphericalFormat_CubeMap = 2
MFVideoSphericalFormat_3DMesh = 3
MFVideoSphericalProjectionMode = Int32
MFVideoSphericalProjectionMode_Spherical = 0
MFVideoSphericalProjectionMode_Flat = 1
MFVideoSrcContentHintFlags = Int32
MFVideoSrcContentHintFlag_None = 0
MFVideoSrcContentHintFlag_16x9 = 1
MFVideoSrcContentHintFlag_235_1 = 2
def _define_MFVideoSurfaceInfo_head():
    class MFVideoSurfaceInfo(Structure):
        pass
    return MFVideoSurfaceInfo
def _define_MFVideoSurfaceInfo():
    MFVideoSurfaceInfo = win32more.Media.MediaFoundation.MFVideoSurfaceInfo_head
    MFVideoSurfaceInfo._fields_ = [
        ('Format', UInt32),
        ('PaletteEntries', UInt32),
        ('Palette', win32more.Media.MediaFoundation.MFPaletteEntry * 1),
    ]
    return MFVideoSurfaceInfo
MFVideoTransferFunction = Int32
MFVideoTransFunc_Unknown = 0
MFVideoTransFunc_10 = 1
MFVideoTransFunc_18 = 2
MFVideoTransFunc_20 = 3
MFVideoTransFunc_22 = 4
MFVideoTransFunc_709 = 5
MFVideoTransFunc_240M = 6
MFVideoTransFunc_sRGB = 7
MFVideoTransFunc_28 = 8
MFVideoTransFunc_Log_100 = 9
MFVideoTransFunc_Log_316 = 10
MFVideoTransFunc_709_sym = 11
MFVideoTransFunc_2020_const = 12
MFVideoTransFunc_2020 = 13
MFVideoTransFunc_26 = 14
MFVideoTransFunc_2084 = 15
MFVideoTransFunc_HLG = 16
MFVideoTransFunc_10_rel = 17
MFVideoTransFunc_Last = 18
MFVideoTransFunc_ForceDWORD = 2147483647
MFVideoTransferMatrix = Int32
MFVideoTransferMatrix_Unknown = 0
MFVideoTransferMatrix_BT709 = 1
MFVideoTransferMatrix_BT601 = 2
MFVideoTransferMatrix_SMPTE240M = 3
MFVideoTransferMatrix_BT2020_10 = 4
MFVideoTransferMatrix_BT2020_12 = 5
MFVideoTransferMatrix_Last = 6
MFVideoTransferMatrix_ForceDWORD = 2147483647
MFVirtualCameraAccess = Int32
MFVirtualCameraAccess_CurrentUser = 0
MFVirtualCameraAccess_AllUsers = 1
MFVirtualCameraLifetime = Int32
MFVirtualCameraLifetime_Session = 0
MFVirtualCameraLifetime_System = 1
MFVirtualCameraType = Int32
MFVirtualCameraType_SoftwareCameraSource = 0
MFVP_MESSAGE_TYPE = Int32
MFVP_MESSAGE_FLUSH = 0
MFVP_MESSAGE_INVALIDATEMEDIATYPE = 1
MFVP_MESSAGE_PROCESSINPUTNOTIFY = 2
MFVP_MESSAGE_BEGINSTREAMING = 3
MFVP_MESSAGE_ENDSTREAMING = 4
MFVP_MESSAGE_ENDOFSTREAM = 5
MFVP_MESSAGE_STEP = 6
MFVP_MESSAGE_CANCELSTEP = 7
MFWaveFormatExConvertFlags = Int32
MFWaveFormatExConvertFlag_Normal = 0
MFWaveFormatExConvertFlag_ForceExtensible = 1
MIC_ARRAY_MODE = Int32
MICARRAY_SINGLE_CHAN = 0
MICARRAY_SIMPLE_SUM = 256
MICARRAY_SINGLE_BEAM = 512
MICARRAY_FIXED_BEAM = 1024
MICARRAY_EXTERN_BEAM = 2048
def _define_MOVE_RECT_head():
    class MOVE_RECT(Structure):
        pass
    return MOVE_RECT
def _define_MOVE_RECT():
    MOVE_RECT = win32more.Media.MediaFoundation.MOVE_RECT_head
    MOVE_RECT._fields_ = [
        ('SourcePoint', win32more.Foundation.POINT),
        ('DestRect', win32more.Foundation.RECT),
    ]
    return MOVE_RECT
def _define_MOVEREGION_INFO_head():
    class MOVEREGION_INFO(Structure):
        pass
    return MOVEREGION_INFO
def _define_MOVEREGION_INFO():
    MOVEREGION_INFO = win32more.Media.MediaFoundation.MOVEREGION_INFO_head
    MOVEREGION_INFO._fields_ = [
        ('FrameNumber', UInt32),
        ('NumMoveRegions', UInt32),
        ('MoveRegions', win32more.Media.MediaFoundation.MOVE_RECT * 1),
    ]
    return MOVEREGION_INFO
MP3ACMCodecWrapper = Guid('11103421-354c-4cca-a7-a3-1a-ff-9a-5b-67-01')
def _define_MPEG1VIDEOINFO_head():
    class MPEG1VIDEOINFO(Structure):
        pass
    return MPEG1VIDEOINFO
def _define_MPEG1VIDEOINFO():
    MPEG1VIDEOINFO = win32more.Media.MediaFoundation.MPEG1VIDEOINFO_head
    MPEG1VIDEOINFO._fields_ = [
        ('hdr', win32more.Media.MediaFoundation.VIDEOINFOHEADER),
        ('dwStartTimeCode', UInt32),
        ('cbSequenceHeader', UInt32),
        ('bSequenceHeader', Byte * 1),
    ]
    return MPEG1VIDEOINFO
def _define_MPEG2VIDEOINFO_head():
    class MPEG2VIDEOINFO(Structure):
        pass
    return MPEG2VIDEOINFO
def _define_MPEG2VIDEOINFO():
    MPEG2VIDEOINFO = win32more.Media.MediaFoundation.MPEG2VIDEOINFO_head
    MPEG2VIDEOINFO._fields_ = [
        ('hdr', win32more.Media.MediaFoundation.VIDEOINFOHEADER2),
        ('dwStartTimeCode', UInt32),
        ('cbSequenceHeader', UInt32),
        ('dwProfile', UInt32),
        ('dwLevel', UInt32),
        ('dwFlags', win32more.Media.MediaFoundation.MPEG2VIDEOINFO_FLAGS),
        ('dwSequenceHeader', UInt32 * 1),
    ]
    return MPEG2VIDEOINFO
MPEG2VIDEOINFO_FLAGS = UInt32
AMMPEG2_DoPanScan = 1
AMMPEG2_DVDLine21Field1 = 2
AMMPEG2_DVDLine21Field2 = 4
AMMPEG2_SourceIsLetterboxed = 8
AMMPEG2_FilmCameraMode = 16
AMMPEG2_LetterboxAnalogOut = 32
AMMPEG2_DSS_UserData = 64
AMMPEG2_DVB_UserData = 128
AMMPEG2_27MhzTimebase = 256
AMMPEG2_WidescreenAnalogOut = 512
MSAMRNBDecoder = Guid('265011ae-5481-4f77-a2-95-ab-b6-ff-e8-d6-3e')
MSAMRNBEncoder = Guid('2fae8afe-04a3-423a-a8-14-85-db-45-47-12-b0')
def _define_MT_ARBITRARY_HEADER_head():
    class MT_ARBITRARY_HEADER(Structure):
        pass
    return MT_ARBITRARY_HEADER
def _define_MT_ARBITRARY_HEADER():
    MT_ARBITRARY_HEADER = win32more.Media.MediaFoundation.MT_ARBITRARY_HEADER_head
    MT_ARBITRARY_HEADER._fields_ = [
        ('majortype', Guid),
        ('subtype', Guid),
        ('bFixedSizeSamples', win32more.Foundation.BOOL),
        ('bTemporalCompression', win32more.Foundation.BOOL),
        ('lSampleSize', UInt32),
        ('formattype', Guid),
    ]
    return MT_ARBITRARY_HEADER
def _define_MT_CUSTOM_VIDEO_PRIMARIES_head():
    class MT_CUSTOM_VIDEO_PRIMARIES(Structure):
        pass
    return MT_CUSTOM_VIDEO_PRIMARIES
def _define_MT_CUSTOM_VIDEO_PRIMARIES():
    MT_CUSTOM_VIDEO_PRIMARIES = win32more.Media.MediaFoundation.MT_CUSTOM_VIDEO_PRIMARIES_head
    MT_CUSTOM_VIDEO_PRIMARIES._fields_ = [
        ('fRx', Single),
        ('fRy', Single),
        ('fGx', Single),
        ('fGy', Single),
        ('fBx', Single),
        ('fBy', Single),
        ('fWx', Single),
        ('fWy', Single),
    ]
    return MT_CUSTOM_VIDEO_PRIMARIES
MULawCodecWrapper = Guid('92b66080-5e2d-449e-90-c4-c4-1f-26-8e-55-14')
def _define_OPM_ACP_AND_CGMSA_SIGNALING_head():
    class OPM_ACP_AND_CGMSA_SIGNALING(Structure):
        pass
    return OPM_ACP_AND_CGMSA_SIGNALING
def _define_OPM_ACP_AND_CGMSA_SIGNALING():
    OPM_ACP_AND_CGMSA_SIGNALING = win32more.Media.MediaFoundation.OPM_ACP_AND_CGMSA_SIGNALING_head
    OPM_ACP_AND_CGMSA_SIGNALING._pack_ = 1
    OPM_ACP_AND_CGMSA_SIGNALING._fields_ = [
        ('rnRandomNumber', win32more.Media.MediaFoundation.OPM_RANDOM_NUMBER),
        ('ulStatusFlags', UInt32),
        ('ulAvailableTVProtectionStandards', UInt32),
        ('ulActiveTVProtectionStandard', UInt32),
        ('ulReserved', UInt32),
        ('ulAspectRatioValidMask1', UInt32),
        ('ulAspectRatioData1', UInt32),
        ('ulAspectRatioValidMask2', UInt32),
        ('ulAspectRatioData2', UInt32),
        ('ulAspectRatioValidMask3', UInt32),
        ('ulAspectRatioData3', UInt32),
        ('ulReserved2', UInt32 * 4),
        ('ulReserved3', UInt32 * 4),
    ]
    return OPM_ACP_AND_CGMSA_SIGNALING
OPM_ACP_PROTECTION_LEVEL = Int32
OPM_ACP_OFF = 0
OPM_ACP_LEVEL_ONE = 1
OPM_ACP_LEVEL_TWO = 2
OPM_ACP_LEVEL_THREE = 3
OPM_ACP_FORCE_ULONG = 2147483647
def _define_OPM_ACTUAL_OUTPUT_FORMAT_head():
    class OPM_ACTUAL_OUTPUT_FORMAT(Structure):
        pass
    return OPM_ACTUAL_OUTPUT_FORMAT
def _define_OPM_ACTUAL_OUTPUT_FORMAT():
    OPM_ACTUAL_OUTPUT_FORMAT = win32more.Media.MediaFoundation.OPM_ACTUAL_OUTPUT_FORMAT_head
    OPM_ACTUAL_OUTPUT_FORMAT._pack_ = 1
    OPM_ACTUAL_OUTPUT_FORMAT._fields_ = [
        ('rnRandomNumber', win32more.Media.MediaFoundation.OPM_RANDOM_NUMBER),
        ('ulStatusFlags', UInt32),
        ('ulDisplayWidth', UInt32),
        ('ulDisplayHeight', UInt32),
        ('dsfSampleInterleaveFormat', win32more.Media.MediaFoundation.DXVA2_SampleFormat),
        ('d3dFormat', win32more.Graphics.Direct3D9.D3DFORMAT),
        ('ulFrequencyNumerator', UInt32),
        ('ulFrequencyDenominator', UInt32),
    ]
    return OPM_ACTUAL_OUTPUT_FORMAT
OPM_BUS_TYPE = Int32
OPM_BUS_TYPE_OTHER = 0
OPM_BUS_TYPE_PCI = 1
OPM_BUS_TYPE_PCIX = 2
OPM_BUS_TYPE_PCIEXPRESS = 3
OPM_BUS_TYPE_AGP = 4
OPM_BUS_IMPLEMENTATION_MODIFIER_INSIDE_OF_CHIPSET = 65536
OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 131072
OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 196608
OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 262144
OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 327680
OPM_BUS_IMPLEMENTATION_MODIFIER_NON_STANDARD = -2147483648
OPM_COPP_COMPATIBLE_BUS_TYPE_INTEGRATED = -2147483648
OPM_CGMSA = Int32
OPM_CGMSA_OFF = 0
OPM_CGMSA_COPY_FREELY = 1
OPM_CGMSA_COPY_NO_MORE = 2
OPM_CGMSA_COPY_ONE_GENERATION = 3
OPM_CGMSA_COPY_NEVER = 4
OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED = 8
def _define_OPM_CONFIGURE_PARAMETERS_head():
    class OPM_CONFIGURE_PARAMETERS(Structure):
        pass
    return OPM_CONFIGURE_PARAMETERS
def _define_OPM_CONFIGURE_PARAMETERS():
    OPM_CONFIGURE_PARAMETERS = win32more.Media.MediaFoundation.OPM_CONFIGURE_PARAMETERS_head
    OPM_CONFIGURE_PARAMETERS._pack_ = 1
    OPM_CONFIGURE_PARAMETERS._fields_ = [
        ('omac', win32more.Media.MediaFoundation.OPM_OMAC),
        ('guidSetting', Guid),
        ('ulSequenceNumber', UInt32),
        ('cbParametersSize', UInt32),
        ('abParameters', Byte * 4056),
    ]
    return OPM_CONFIGURE_PARAMETERS
def _define_OPM_CONNECTED_HDCP_DEVICE_INFORMATION_head():
    class OPM_CONNECTED_HDCP_DEVICE_INFORMATION(Structure):
        pass
    return OPM_CONNECTED_HDCP_DEVICE_INFORMATION
def _define_OPM_CONNECTED_HDCP_DEVICE_INFORMATION():
    OPM_CONNECTED_HDCP_DEVICE_INFORMATION = win32more.Media.MediaFoundation.OPM_CONNECTED_HDCP_DEVICE_INFORMATION_head
    OPM_CONNECTED_HDCP_DEVICE_INFORMATION._pack_ = 1
    OPM_CONNECTED_HDCP_DEVICE_INFORMATION._fields_ = [
        ('rnRandomNumber', win32more.Media.MediaFoundation.OPM_RANDOM_NUMBER),
        ('ulStatusFlags', UInt32),
        ('ulHDCPFlags', UInt32),
        ('ksvB', win32more.Media.MediaFoundation.OPM_HDCP_KEY_SELECTION_VECTOR),
        ('Reserved', Byte * 11),
        ('Reserved2', Byte * 16),
        ('Reserved3', Byte * 16),
    ]
    return OPM_CONNECTED_HDCP_DEVICE_INFORMATION
OPM_CONNECTOR_TYPE = Int32
OPM_CONNECTOR_TYPE_OTHER = -1
OPM_CONNECTOR_TYPE_VGA = 0
OPM_CONNECTOR_TYPE_SVIDEO = 1
OPM_CONNECTOR_TYPE_COMPOSITE_VIDEO = 2
OPM_CONNECTOR_TYPE_COMPONENT_VIDEO = 3
OPM_CONNECTOR_TYPE_DVI = 4
OPM_CONNECTOR_TYPE_HDMI = 5
OPM_CONNECTOR_TYPE_LVDS = 6
OPM_CONNECTOR_TYPE_D_JPN = 8
OPM_CONNECTOR_TYPE_SDI = 9
OPM_CONNECTOR_TYPE_DISPLAYPORT_EXTERNAL = 10
OPM_CONNECTOR_TYPE_DISPLAYPORT_EMBEDDED = 11
OPM_CONNECTOR_TYPE_UDI_EXTERNAL = 12
OPM_CONNECTOR_TYPE_UDI_EMBEDDED = 13
OPM_CONNECTOR_TYPE_RESERVED = 14
OPM_CONNECTOR_TYPE_MIRACAST = 15
OPM_CONNECTOR_TYPE_TRANSPORT_AGNOSTIC_DIGITAL_MODE_A = 16
OPM_CONNECTOR_TYPE_TRANSPORT_AGNOSTIC_DIGITAL_MODE_B = 17
OPM_COPP_COMPATIBLE_CONNECTOR_TYPE_INTERNAL = -2147483648
def _define_OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS_head():
    class OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS(Structure):
        pass
    return OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS
def _define_OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS():
    OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS = win32more.Media.MediaFoundation.OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS_head
    OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS._pack_ = 1
    OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS._fields_ = [
        ('rnRandomNumber', win32more.Media.MediaFoundation.OPM_RANDOM_NUMBER),
        ('guidInformation', Guid),
        ('ulSequenceNumber', UInt32),
        ('cbParametersSize', UInt32),
        ('abParameters', Byte * 4056),
    ]
    return OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS
OPM_DPCP_PROTECTION_LEVEL = Int32
OPM_DPCP_OFF = 0
OPM_DPCP_ON = 1
OPM_DPCP_FORCE_ULONG = 2147483647
OPM_DVI_CHARACTERISTIC = Int32
OPM_DVI_CHARACTERISTIC_1_0 = 1
OPM_DVI_CHARACTERISTIC_1_1_OR_ABOVE = 2
def _define_OPM_ENCRYPTED_INITIALIZATION_PARAMETERS_head():
    class OPM_ENCRYPTED_INITIALIZATION_PARAMETERS(Structure):
        pass
    return OPM_ENCRYPTED_INITIALIZATION_PARAMETERS
def _define_OPM_ENCRYPTED_INITIALIZATION_PARAMETERS():
    OPM_ENCRYPTED_INITIALIZATION_PARAMETERS = win32more.Media.MediaFoundation.OPM_ENCRYPTED_INITIALIZATION_PARAMETERS_head
    OPM_ENCRYPTED_INITIALIZATION_PARAMETERS._fields_ = [
        ('abEncryptedInitializationParameters', Byte * 256),
    ]
    return OPM_ENCRYPTED_INITIALIZATION_PARAMETERS
def _define_OPM_GET_CODEC_INFO_INFORMATION_head():
    class OPM_GET_CODEC_INFO_INFORMATION(Structure):
        pass
    return OPM_GET_CODEC_INFO_INFORMATION
def _define_OPM_GET_CODEC_INFO_INFORMATION():
    OPM_GET_CODEC_INFO_INFORMATION = win32more.Media.MediaFoundation.OPM_GET_CODEC_INFO_INFORMATION_head
    OPM_GET_CODEC_INFO_INFORMATION._pack_ = 1
    OPM_GET_CODEC_INFO_INFORMATION._fields_ = [
        ('rnRandomNumber', win32more.Media.MediaFoundation.OPM_RANDOM_NUMBER),
        ('Merit', UInt32),
    ]
    return OPM_GET_CODEC_INFO_INFORMATION
def _define_OPM_GET_CODEC_INFO_PARAMETERS_head():
    class OPM_GET_CODEC_INFO_PARAMETERS(Structure):
        pass
    return OPM_GET_CODEC_INFO_PARAMETERS
def _define_OPM_GET_CODEC_INFO_PARAMETERS():
    OPM_GET_CODEC_INFO_PARAMETERS = win32more.Media.MediaFoundation.OPM_GET_CODEC_INFO_PARAMETERS_head
    OPM_GET_CODEC_INFO_PARAMETERS._pack_ = 1
    OPM_GET_CODEC_INFO_PARAMETERS._fields_ = [
        ('cbVerifier', UInt32),
        ('Verifier', Byte * 4052),
    ]
    return OPM_GET_CODEC_INFO_PARAMETERS
def _define_OPM_GET_INFO_PARAMETERS_head():
    class OPM_GET_INFO_PARAMETERS(Structure):
        pass
    return OPM_GET_INFO_PARAMETERS
def _define_OPM_GET_INFO_PARAMETERS():
    OPM_GET_INFO_PARAMETERS = win32more.Media.MediaFoundation.OPM_GET_INFO_PARAMETERS_head
    OPM_GET_INFO_PARAMETERS._pack_ = 1
    OPM_GET_INFO_PARAMETERS._fields_ = [
        ('omac', win32more.Media.MediaFoundation.OPM_OMAC),
        ('rnRandomNumber', win32more.Media.MediaFoundation.OPM_RANDOM_NUMBER),
        ('guidInformation', Guid),
        ('ulSequenceNumber', UInt32),
        ('cbParametersSize', UInt32),
        ('abParameters', Byte * 4056),
    ]
    return OPM_GET_INFO_PARAMETERS
OPM_HDCP_FLAGS = UInt32
OPM_HDCP_FLAG_NONE = 0
OPM_HDCP_FLAG_REPEATER = 1
def _define_OPM_HDCP_KEY_SELECTION_VECTOR_head():
    class OPM_HDCP_KEY_SELECTION_VECTOR(Structure):
        pass
    return OPM_HDCP_KEY_SELECTION_VECTOR
def _define_OPM_HDCP_KEY_SELECTION_VECTOR():
    OPM_HDCP_KEY_SELECTION_VECTOR = win32more.Media.MediaFoundation.OPM_HDCP_KEY_SELECTION_VECTOR_head
    OPM_HDCP_KEY_SELECTION_VECTOR._fields_ = [
        ('abKeySelectionVector', Byte * 5),
    ]
    return OPM_HDCP_KEY_SELECTION_VECTOR
OPM_HDCP_PROTECTION_LEVEL = Int32
OPM_HDCP_OFF = 0
OPM_HDCP_ON = 1
OPM_HDCP_FORCE_ULONG = 2147483647
OPM_HDCP_STATUS = Int32
OPM_HDCP_STATUS_ON = 0
OPM_HDCP_STATUS_OFF = 1
OPM_HDCP_TYPE = Int32
OPM_HDCP_TYPE_0 = 0
OPM_HDCP_TYPE_1 = 1
OPM_IMAGE_ASPECT_RATIO_EN300294 = Int32
OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_4_BY_3 = 0
OPM_ASPECT_RATIO_EN300294_BOX_14_BY_9_CENTER = 1
OPM_ASPECT_RATIO_EN300294_BOX_14_BY_9_TOP = 2
OPM_ASPECT_RATIO_EN300294_BOX_16_BY_9_CENTER = 3
OPM_ASPECT_RATIO_EN300294_BOX_16_BY_9_TOP = 4
OPM_ASPECT_RATIO_EN300294_BOX_GT_16_BY_9_CENTER = 5
OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_4_BY_3_PROTECTED_CENTER = 6
OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_16_BY_9_ANAMORPHIC = 7
OPM_ASPECT_RATIO_FORCE_ULONG = 2147483647
def _define_OPM_OMAC_head():
    class OPM_OMAC(Structure):
        pass
    return OPM_OMAC
def _define_OPM_OMAC():
    OPM_OMAC = win32more.Media.MediaFoundation.OPM_OMAC_head
    OPM_OMAC._fields_ = [
        ('abOMAC', Byte * 16),
    ]
    return OPM_OMAC
OPM_OUTPUT_HARDWARE_PROTECTION = Int32
OPM_OUTPUT_HARDWARE_PROTECTION_NOT_SUPPORTED = 0
OPM_OUTPUT_HARDWARE_PROTECTION_SUPPORTED = 1
def _define_OPM_OUTPUT_ID_DATA_head():
    class OPM_OUTPUT_ID_DATA(Structure):
        pass
    return OPM_OUTPUT_ID_DATA
def _define_OPM_OUTPUT_ID_DATA():
    OPM_OUTPUT_ID_DATA = win32more.Media.MediaFoundation.OPM_OUTPUT_ID_DATA_head
    OPM_OUTPUT_ID_DATA._pack_ = 1
    OPM_OUTPUT_ID_DATA._fields_ = [
        ('rnRandomNumber', win32more.Media.MediaFoundation.OPM_RANDOM_NUMBER),
        ('ulStatusFlags', UInt32),
        ('OutputId', UInt64),
    ]
    return OPM_OUTPUT_ID_DATA
OPM_PROTECTION_STANDARD_TYPE = UInt32
OPM_PROTECTION_STANDARD_OTHER = 2147483648
OPM_PROTECTION_STANDARD_NONE = 0
OPM_PROTECTION_STANDARD_IEC61880_525I = 1
OPM_PROTECTION_STANDARD_IEC61880_2_525I = 2
OPM_PROTECTION_STANDARD_IEC62375_625P = 4
OPM_PROTECTION_STANDARD_EIA608B_525 = 8
OPM_PROTECTION_STANDARD_EN300294_625I = 16
OPM_PROTECTION_STANDARD_CEA805A_TYPEA_525P = 32
OPM_PROTECTION_STANDARD_CEA805A_TYPEA_750P = 64
OPM_PROTECTION_STANDARD_CEA805A_TYPEA_1125I = 128
OPM_PROTECTION_STANDARD_CEA805A_TYPEB_525P = 256
OPM_PROTECTION_STANDARD_CEA805A_TYPEB_750P = 512
OPM_PROTECTION_STANDARD_CEA805A_TYPEB_1125I = 1024
OPM_PROTECTION_STANDARD_ARIBTRB15_525I = 2048
OPM_PROTECTION_STANDARD_ARIBTRB15_525P = 4096
OPM_PROTECTION_STANDARD_ARIBTRB15_750P = 8192
OPM_PROTECTION_STANDARD_ARIBTRB15_1125I = 16384
OPM_PROTECTION_TYPE = Int32
OPM_PROTECTION_TYPE_OTHER = -2147483648
OPM_PROTECTION_TYPE_NONE = 0
OPM_PROTECTION_TYPE_COPP_COMPATIBLE_HDCP = 1
OPM_PROTECTION_TYPE_ACP = 2
OPM_PROTECTION_TYPE_CGMSA = 4
OPM_PROTECTION_TYPE_HDCP = 8
OPM_PROTECTION_TYPE_DPCP = 16
OPM_PROTECTION_TYPE_TYPE_ENFORCEMENT_HDCP = 32
def _define_OPM_RANDOM_NUMBER_head():
    class OPM_RANDOM_NUMBER(Structure):
        pass
    return OPM_RANDOM_NUMBER
def _define_OPM_RANDOM_NUMBER():
    OPM_RANDOM_NUMBER = win32more.Media.MediaFoundation.OPM_RANDOM_NUMBER_head
    OPM_RANDOM_NUMBER._fields_ = [
        ('abRandomNumber', Byte * 16),
    ]
    return OPM_RANDOM_NUMBER
def _define_OPM_REQUESTED_INFORMATION_head():
    class OPM_REQUESTED_INFORMATION(Structure):
        pass
    return OPM_REQUESTED_INFORMATION
def _define_OPM_REQUESTED_INFORMATION():
    OPM_REQUESTED_INFORMATION = win32more.Media.MediaFoundation.OPM_REQUESTED_INFORMATION_head
    OPM_REQUESTED_INFORMATION._pack_ = 1
    OPM_REQUESTED_INFORMATION._fields_ = [
        ('omac', win32more.Media.MediaFoundation.OPM_OMAC),
        ('cbRequestedInformationSize', UInt32),
        ('abRequestedInformation', Byte * 4076),
    ]
    return OPM_REQUESTED_INFORMATION
def _define_OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS_head():
    class OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS(Structure):
        pass
    return OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS
def _define_OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS():
    OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS = win32more.Media.MediaFoundation.OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS_head
    OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS._pack_ = 1
    OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS._fields_ = [
        ('ulNewTVProtectionStandard', UInt32),
        ('ulAspectRatioChangeMask1', UInt32),
        ('ulAspectRatioData1', UInt32),
        ('ulAspectRatioChangeMask2', UInt32),
        ('ulAspectRatioData2', UInt32),
        ('ulAspectRatioChangeMask3', UInt32),
        ('ulAspectRatioData3', UInt32),
        ('ulReserved', UInt32 * 4),
        ('ulReserved2', UInt32 * 4),
        ('ulReserved3', UInt32),
    ]
    return OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS
def _define_OPM_SET_HDCP_SRM_PARAMETERS_head():
    class OPM_SET_HDCP_SRM_PARAMETERS(Structure):
        pass
    return OPM_SET_HDCP_SRM_PARAMETERS
def _define_OPM_SET_HDCP_SRM_PARAMETERS():
    OPM_SET_HDCP_SRM_PARAMETERS = win32more.Media.MediaFoundation.OPM_SET_HDCP_SRM_PARAMETERS_head
    OPM_SET_HDCP_SRM_PARAMETERS._pack_ = 1
    OPM_SET_HDCP_SRM_PARAMETERS._fields_ = [
        ('ulSRMVersion', UInt32),
    ]
    return OPM_SET_HDCP_SRM_PARAMETERS
def _define_OPM_SET_PROTECTION_LEVEL_PARAMETERS_head():
    class OPM_SET_PROTECTION_LEVEL_PARAMETERS(Structure):
        pass
    return OPM_SET_PROTECTION_LEVEL_PARAMETERS
def _define_OPM_SET_PROTECTION_LEVEL_PARAMETERS():
    OPM_SET_PROTECTION_LEVEL_PARAMETERS = win32more.Media.MediaFoundation.OPM_SET_PROTECTION_LEVEL_PARAMETERS_head
    OPM_SET_PROTECTION_LEVEL_PARAMETERS._pack_ = 1
    OPM_SET_PROTECTION_LEVEL_PARAMETERS._fields_ = [
        ('ulProtectionType', UInt32),
        ('ulProtectionLevel', UInt32),
        ('Reserved', UInt32),
        ('Reserved2', UInt32),
    ]
    return OPM_SET_PROTECTION_LEVEL_PARAMETERS
def _define_OPM_STANDARD_INFORMATION_head():
    class OPM_STANDARD_INFORMATION(Structure):
        pass
    return OPM_STANDARD_INFORMATION
def _define_OPM_STANDARD_INFORMATION():
    OPM_STANDARD_INFORMATION = win32more.Media.MediaFoundation.OPM_STANDARD_INFORMATION_head
    OPM_STANDARD_INFORMATION._pack_ = 1
    OPM_STANDARD_INFORMATION._fields_ = [
        ('rnRandomNumber', win32more.Media.MediaFoundation.OPM_RANDOM_NUMBER),
        ('ulStatusFlags', UInt32),
        ('ulInformation', UInt32),
        ('ulReserved', UInt32),
        ('ulReserved2', UInt32),
    ]
    return OPM_STANDARD_INFORMATION
OPM_STATUS = Int32
OPM_STATUS_NORMAL = 0
OPM_STATUS_LINK_LOST = 1
OPM_STATUS_RENEGOTIATION_REQUIRED = 2
OPM_STATUS_TAMPERING_DETECTED = 4
OPM_STATUS_REVOKED_HDCP_DEVICE_ATTACHED = 8
OPM_TYPE = Int32
OPM_OMAC_SIZE = 16
OPM_128_BIT_RANDOM_NUMBER_SIZE = 16
OPM_ENCRYPTED_INITIALIZATION_PARAMETERS_SIZE = 256
OPM_CONFIGURE_SETTING_DATA_SIZE = 4056
OPM_GET_INFORMATION_PARAMETERS_SIZE = 4056
OPM_REQUESTED_INFORMATION_SIZE = 4076
OPM_HDCP_KEY_SELECTION_VECTOR_SIZE = 5
OPM_PROTECTION_TYPE_SIZE = 4
OPM_BUS_TYPE_MASK = 65535
OPM_BUS_IMPLEMENTATION_MODIFIER_MASK = 32767
OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL = Int32
OPM_TYPE_ENFORCEMENT_HDCP_OFF = 0
OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_NO_TYPE_RESTRICTION = 1
OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_TYPE1_RESTRICTION = 2
OPM_TYPE_ENFORCEMENT_HDCP_FORCE_ULONG = 2147483647
OPM_VIDEO_OUTPUT_SEMANTICS = Int32
OPM_VOS_COPP_SEMANTICS = 0
OPM_VOS_OPM_SEMANTICS = 1
OPM_VOS_OPM_INDIRECT_DISPLAY = 2
def _define_PDXVAHD_CreateDevice():
    return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.IDirect3DDevice9Ex_head,POINTER(win32more.Media.MediaFoundation.DXVAHD_CONTENT_DESC_head),win32more.Media.MediaFoundation.DXVAHD_DEVICE_USAGE,win32more.Media.MediaFoundation.PDXVAHDSW_Plugin,POINTER(win32more.Media.MediaFoundation.IDXVAHD_Device_head))
def _define_PDXVAHDSW_CreateDevice():
    return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Direct3D9.IDirect3DDevice9Ex_head,POINTER(win32more.Foundation.HANDLE))
def _define_PDXVAHDSW_CreateVideoProcessor():
    return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,POINTER(Guid),POINTER(win32more.Foundation.HANDLE))
def _define_PDXVAHDSW_DestroyDevice():
    return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE)
def _define_PDXVAHDSW_DestroyVideoProcessor():
    return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE)
def _define_PDXVAHDSW_GetVideoProcessBltStatePrivate():
    return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,POINTER(win32more.Media.MediaFoundation.DXVAHD_BLT_STATE_PRIVATE_DATA_head))
def _define_PDXVAHDSW_GetVideoProcessorCaps():
    return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,POINTER(win32more.Media.MediaFoundation.DXVAHD_CONTENT_DESC_head),win32more.Media.MediaFoundation.DXVAHD_DEVICE_USAGE,UInt32,POINTER(win32more.Media.MediaFoundation.DXVAHD_VPCAPS_head))
def _define_PDXVAHDSW_GetVideoProcessorCustomRates():
    return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,POINTER(Guid),UInt32,POINTER(win32more.Media.MediaFoundation.DXVAHD_CUSTOM_RATE_DATA_head))
def _define_PDXVAHDSW_GetVideoProcessorDeviceCaps():
    return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,POINTER(win32more.Media.MediaFoundation.DXVAHD_CONTENT_DESC_head),win32more.Media.MediaFoundation.DXVAHD_DEVICE_USAGE,POINTER(win32more.Media.MediaFoundation.DXVAHD_VPDEVCAPS_head))
def _define_PDXVAHDSW_GetVideoProcessorFilterRange():
    return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,win32more.Media.MediaFoundation.DXVAHD_FILTER,POINTER(win32more.Media.MediaFoundation.DXVAHD_FILTER_RANGE_DATA_head))
def _define_PDXVAHDSW_GetVideoProcessorInputFormats():
    return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,POINTER(win32more.Media.MediaFoundation.DXVAHD_CONTENT_DESC_head),win32more.Media.MediaFoundation.DXVAHD_DEVICE_USAGE,UInt32,POINTER(win32more.Graphics.Direct3D9.D3DFORMAT))
def _define_PDXVAHDSW_GetVideoProcessorOutputFormats():
    return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,POINTER(win32more.Media.MediaFoundation.DXVAHD_CONTENT_DESC_head),win32more.Media.MediaFoundation.DXVAHD_DEVICE_USAGE,UInt32,POINTER(win32more.Graphics.Direct3D9.D3DFORMAT))
def _define_PDXVAHDSW_GetVideoProcessStreamStatePrivate():
    return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,UInt32,POINTER(win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE_PRIVATE_DATA_head))
def _define_PDXVAHDSW_Plugin():
    return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_void_p)
def _define_PDXVAHDSW_ProposeVideoPrivateFormat():
    return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,POINTER(win32more.Graphics.Direct3D9.D3DFORMAT))
def _define_PDXVAHDSW_SetVideoProcessBltState():
    return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,win32more.Media.MediaFoundation.DXVAHD_BLT_STATE,UInt32,c_void_p)
def _define_PDXVAHDSW_SetVideoProcessStreamState():
    return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,UInt32,win32more.Media.MediaFoundation.DXVAHD_STREAM_STATE,UInt32,c_void_p)
def _define_PDXVAHDSW_VideoProcessBltHD():
    return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.HANDLE,win32more.Graphics.Direct3D9.IDirect3DSurface9_head,UInt32,UInt32,POINTER(win32more.Media.MediaFoundation.DXVAHD_STREAM_DATA_head))
PLAYTO_SOURCE_CREATEFLAGS = Int32
PLAYTO_SOURCE_NONE = 0
PLAYTO_SOURCE_IMAGE = 1
PLAYTO_SOURCE_AUDIO = 2
PLAYTO_SOURCE_VIDEO = 4
PLAYTO_SOURCE_PROTECTED = 8
def _define_ROI_AREA_head():
    class ROI_AREA(Structure):
        pass
    return ROI_AREA
def _define_ROI_AREA():
    ROI_AREA = win32more.Media.MediaFoundation.ROI_AREA_head
    ROI_AREA._fields_ = [
        ('rect', win32more.Foundation.RECT),
        ('QPDelta', Int32),
    ]
    return ROI_AREA
SAMPLE_PROTECTION_VERSION = Int32
SAMPLE_PROTECTION_VERSION_NO = 0
SAMPLE_PROTECTION_VERSION_BASIC_LOKI = 1
SAMPLE_PROTECTION_VERSION_SCATTER = 2
SAMPLE_PROTECTION_VERSION_RC4 = 3
SAMPLE_PROTECTION_VERSION_AES128CTR = 4
SEEK_ORIGIN = Int32
_msoBegin = 0
_msoCurrent = 1
def _define_SENSORPROFILEID_head():
    class SENSORPROFILEID(Structure):
        pass
    return SENSORPROFILEID
def _define_SENSORPROFILEID():
    SENSORPROFILEID = win32more.Media.MediaFoundation.SENSORPROFILEID_head
    SENSORPROFILEID._fields_ = [
        ('Type', Guid),
        ('Index', UInt32),
        ('Unused', UInt32),
    ]
    return SENSORPROFILEID
def _define_STREAM_MEDIUM_head():
    class STREAM_MEDIUM(Structure):
        pass
    return STREAM_MEDIUM
def _define_STREAM_MEDIUM():
    STREAM_MEDIUM = win32more.Media.MediaFoundation.STREAM_MEDIUM_head
    STREAM_MEDIUM._fields_ = [
        ('gidMedium', Guid),
        ('unMediumInstance', UInt32),
    ]
    return STREAM_MEDIUM
def _define_TOC_DESCRIPTOR_head():
    class TOC_DESCRIPTOR(Structure):
        pass
    return TOC_DESCRIPTOR
def _define_TOC_DESCRIPTOR():
    TOC_DESCRIPTOR = win32more.Media.MediaFoundation.TOC_DESCRIPTOR_head
    TOC_DESCRIPTOR._fields_ = [
        ('guidID', Guid),
        ('wStreamNumber', UInt16),
        ('guidType', Guid),
        ('wLanguageIndex', UInt16),
    ]
    return TOC_DESCRIPTOR
def _define_TOC_ENTRY_DESCRIPTOR_head():
    class TOC_ENTRY_DESCRIPTOR(Structure):
        pass
    return TOC_ENTRY_DESCRIPTOR
def _define_TOC_ENTRY_DESCRIPTOR():
    TOC_ENTRY_DESCRIPTOR = win32more.Media.MediaFoundation.TOC_ENTRY_DESCRIPTOR_head
    TOC_ENTRY_DESCRIPTOR._fields_ = [
        ('qwStartTime', UInt64),
        ('qwEndTime', UInt64),
        ('qwStartPacketOffset', UInt64),
        ('qwEndPacketOffset', UInt64),
        ('qwRepresentativeFrameTime', UInt64),
    ]
    return TOC_ENTRY_DESCRIPTOR
TOC_POS_TYPE = Int32
TOC_POS_INHEADER = 0
TOC_POS_TOPLEVELOBJECT = 1
def _define_VIDEOINFOHEADER_head():
    class VIDEOINFOHEADER(Structure):
        pass
    return VIDEOINFOHEADER
def _define_VIDEOINFOHEADER():
    VIDEOINFOHEADER = win32more.Media.MediaFoundation.VIDEOINFOHEADER_head
    VIDEOINFOHEADER._fields_ = [
        ('rcSource', win32more.Foundation.RECT),
        ('rcTarget', win32more.Foundation.RECT),
        ('dwBitRate', UInt32),
        ('dwBitErrorRate', UInt32),
        ('AvgTimePerFrame', Int64),
        ('bmiHeader', win32more.Graphics.Gdi.BITMAPINFOHEADER),
    ]
    return VIDEOINFOHEADER
def _define_VIDEOINFOHEADER2_head():
    class VIDEOINFOHEADER2(Structure):
        pass
    return VIDEOINFOHEADER2
def _define_VIDEOINFOHEADER2():
    VIDEOINFOHEADER2 = win32more.Media.MediaFoundation.VIDEOINFOHEADER2_head
    class VIDEOINFOHEADER2__Anonymous_e__Union(Union):
        pass
    VIDEOINFOHEADER2__Anonymous_e__Union._fields_ = [
        ('dwControlFlags', UInt32),
        ('dwReserved1', UInt32),
    ]
    VIDEOINFOHEADER2._anonymous_ = [
        'Anonymous',
    ]
    VIDEOINFOHEADER2._fields_ = [
        ('rcSource', win32more.Foundation.RECT),
        ('rcTarget', win32more.Foundation.RECT),
        ('dwBitRate', UInt32),
        ('dwBitErrorRate', UInt32),
        ('AvgTimePerFrame', Int64),
        ('dwInterlaceFlags', UInt32),
        ('dwCopyProtectFlags', UInt32),
        ('dwPictAspectRatioX', UInt32),
        ('dwPictAspectRatioY', UInt32),
        ('Anonymous', VIDEOINFOHEADER2__Anonymous_e__Union),
        ('dwReserved2', UInt32),
        ('bmiHeader', win32more.Graphics.Gdi.BITMAPINFOHEADER),
    ]
    return VIDEOINFOHEADER2
VorbisDecoderMFT = Guid('1a198ef2-60e5-4ea8-90-d8-da-1f-28-32-c2-88')
WMT_PROP_DATATYPE = Int32
WMT_PROP_TYPE_DWORD = 0
WMT_PROP_TYPE_STRING = 1
WMT_PROP_TYPE_BINARY = 2
WMT_PROP_TYPE_BOOL = 3
WMT_PROP_TYPE_QWORD = 4
WMT_PROP_TYPE_WORD = 5
WMT_PROP_TYPE_GUID = 6
WMV_DYNAMIC_FLAGS = Int32
WMV_DYNAMIC_BITRATE = 1
WMV_DYNAMIC_RESOLUTION = 2
WMV_DYNAMIC_COMPLEXITY = 4
__all__ = [
    "AACMFTEncoder",
    "ACCESSMODE_READ",
    "ACCESSMODE_READWRITE",
    "ACCESSMODE_WRITE",
    "ACCESSMODE_WRITE_EXCLUSIVE",
    "ADAPTIVE_ARRAY_AND_AEC",
    "ADAPTIVE_ARRAY_ONLY",
    "AEC_CAPTURE_STREAM",
    "AEC_INPUT_STREAM",
    "AEC_MAX_SYSTEM_MODES",
    "AEC_REFERENCE_STREAM",
    "AEC_SYSTEM_MODE",
    "AEC_VAD_DISABLED",
    "AEC_VAD_FOR_AGC",
    "AEC_VAD_FOR_SILENCE_SUPPRESSION",
    "AEC_VAD_MODE",
    "AEC_VAD_NORMAL",
    "ALawCodecWrapper",
    "AMMPEG2_27MhzTimebase",
    "AMMPEG2_DSS_UserData",
    "AMMPEG2_DVB_UserData",
    "AMMPEG2_DVDLine21Field1",
    "AMMPEG2_DVDLine21Field2",
    "AMMPEG2_DoPanScan",
    "AMMPEG2_FilmCameraMode",
    "AMMPEG2_LetterboxAnalogOut",
    "AMMPEG2_SourceIsLetterboxed",
    "AMMPEG2_WidescreenAnalogOut",
    "AMPROPSETID_Pin",
    "AM_MEDIA_TYPE",
    "AM_MEDIA_TYPE_REPRESENTATION",
    "ASF_FLAT_PICTURE",
    "ASF_FLAT_SYNCHRONISED_LYRICS",
    "ASF_INDEX_DESCRIPTOR",
    "ASF_INDEX_IDENTIFIER",
    "ASF_MUX_STATISTICS",
    "ASF_SELECTION_STATUS",
    "ASF_STATUSFLAGS",
    "ASF_STATUSFLAGS_INCOMPLETE",
    "ASF_STATUSFLAGS_NONFATAL_ERROR",
    "ASF_STATUS_ALLDATAUNITS",
    "ASF_STATUS_CLEANPOINTSONLY",
    "ASF_STATUS_NOTSELECTED",
    "AVENC_H263V_LEVELCOUNT",
    "AVENC_H264V_LEVELCOUNT",
    "AVENC_H264V_MAX_MBBITS",
    "AVEncAudioInputContent_Music",
    "AVEncAudioInputContent_Unknown",
    "AVEncAudioInputContent_Voice",
    "AecQualityMetrics_Struct",
    "CAC3DecMediaObject",
    "CAPTION_FORMAT_ATSC",
    "CAPTION_FORMAT_DIRECTV",
    "CAPTION_FORMAT_DVB",
    "CAPTION_FORMAT_ECHOSTAR",
    "CClusterDetectorDmo",
    "CColorControlDmo",
    "CColorConvertDMO",
    "CColorLegalizerDmo",
    "CDTVAudDecoderDS",
    "CDTVVidDecoderDS",
    "CDVDecoderMediaObject",
    "CDVEncoderMediaObject",
    "CDeColorConvMediaObject",
    "CFrameInterpDMO",
    "CFrameRateConvertDmo",
    "CInterlaceMediaObject",
    "CLSID_ACMWrapper",
    "CLSID_ATSCNetworkPropertyPage",
    "CLSID_ATSCNetworkProvider",
    "CLSID_AVICo",
    "CLSID_AVIDec",
    "CLSID_AVIDoc",
    "CLSID_AVIDraw",
    "CLSID_AVIMIDIRender",
    "CLSID_ActiveMovieCategories",
    "CLSID_AllocPresenter",
    "CLSID_AllocPresenterDDXclMode",
    "CLSID_AnalogVideoDecoderPropertyPage",
    "CLSID_AsyncReader",
    "CLSID_AudioCompressorCategory",
    "CLSID_AudioInputDeviceCategory",
    "CLSID_AudioInputMixerProperties",
    "CLSID_AudioProperties",
    "CLSID_AudioRecord",
    "CLSID_AudioRender",
    "CLSID_AudioRendererAdvancedProperties",
    "CLSID_AudioRendererCategory",
    "CLSID_AudioResamplerMediaObject",
    "CLSID_AviDest",
    "CLSID_AviMuxProptyPage",
    "CLSID_AviMuxProptyPage1",
    "CLSID_AviReader",
    "CLSID_AviSplitter",
    "CLSID_CAcmCoClassManager",
    "CLSID_CAsfTocParser",
    "CLSID_CAviTocParser",
    "CLSID_CCAFilter",
    "CLSID_CClusterDetectorEx",
    "CLSID_CDeviceMoniker",
    "CLSID_CFileClient",
    "CLSID_CFileIo",
    "CLSID_CIcmCoClassManager",
    "CLSID_CMidiOutClassManager",
    "CLSID_CMpegAudioCodec",
    "CLSID_CMpegVideoCodec",
    "CLSID_CQzFilterClassManager",
    "CLSID_CToc",
    "CLSID_CTocCollection",
    "CLSID_CTocEntry",
    "CLSID_CTocEntryList",
    "CLSID_CTocParser",
    "CLSID_CVidCapClassManager",
    "CLSID_CWaveOutClassManager",
    "CLSID_CWaveinClassManager",
    "CLSID_CameraControlPropertyPage",
    "CLSID_CaptionsFilter",
    "CLSID_CaptureGraphBuilder",
    "CLSID_CaptureGraphBuilder2",
    "CLSID_CaptureProperties",
    "CLSID_Colour",
    "CLSID_CreateMediaExtensionObject",
    "CLSID_CrossbarFilterPropertyPage",
    "CLSID_DShowTVEFilter",
    "CLSID_DSoundRender",
    "CLSID_DVBCNetworkProvider",
    "CLSID_DVBSNetworkProvider",
    "CLSID_DVBTNetworkProvider",
    "CLSID_DVDHWDecodersCategory",
    "CLSID_DVDNavigator",
    "CLSID_DVDState",
    "CLSID_DVDecPropertiesPage",
    "CLSID_DVEncPropertiesPage",
    "CLSID_DVMux",
    "CLSID_DVMuxPropertyPage",
    "CLSID_DVSplitter",
    "CLSID_DVVideoCodec",
    "CLSID_DVVideoEnc",
    "CLSID_DeviceControlCategory",
    "CLSID_DirectDrawProperties",
    "CLSID_DirectShowPluginControl",
    "CLSID_Dither",
    "CLSID_DtvCcFilter",
    "CLSID_DvdGraphBuilder",
    "CLSID_EVRPlaybackPipelineOptimizer",
    "CLSID_EVRTearlessWindowPresenter9",
    "CLSID_EnhancedVideoRenderer",
    "CLSID_FGControl",
    "CLSID_FileSource",
    "CLSID_FileWriter",
    "CLSID_FilterGraph",
    "CLSID_FilterGraphNoThread",
    "CLSID_FilterGraphPrivateThread",
    "CLSID_FilterMapper",
    "CLSID_FilterMapper2",
    "CLSID_FrameServerNetworkCameraSource",
    "CLSID_HttpSchemePlugin",
    "CLSID_ICodecAPIProxy",
    "CLSID_IVideoEncoderCodecAPIProxy",
    "CLSID_IVideoEncoderProxy",
    "CLSID_InfTee",
    "CLSID_LegacyAmFilterCategory",
    "CLSID_Line21Decoder",
    "CLSID_Line21Decoder2",
    "CLSID_MFByteStreamProxyClassFactory",
    "CLSID_MFCaptureEngine",
    "CLSID_MFCaptureEngineClassFactory",
    "CLSID_MFImageSharingEngineClassFactory",
    "CLSID_MFMediaEngineClassFactory",
    "CLSID_MFMediaSharingEngineClassFactory",
    "CLSID_MFReadWriteClassFactory",
    "CLSID_MFSinkWriter",
    "CLSID_MFSourceReader",
    "CLSID_MFSourceResolver",
    "CLSID_MFVideoMixer9",
    "CLSID_MFVideoPresenter9",
    "CLSID_MJPGEnc",
    "CLSID_MMSPLITTER",
    "CLSID_MOVReader",
    "CLSID_MP3DecMediaObject",
    "CLSID_MPEG1Doc",
    "CLSID_MPEG1PacketPlayer",
    "CLSID_MPEG1Splitter",
    "CLSID_MPEG2ByteStreamPlugin",
    "CLSID_MPEG2DLNASink",
    "CLSID_MPEG2Demultiplexer",
    "CLSID_MPEG2Demultiplexer_NoClock",
    "CLSID_MSAACDecMFT",
    "CLSID_MSDDPlusDecMFT",
    "CLSID_MSH264DecoderMFT",
    "CLSID_MSH264EncoderMFT",
    "CLSID_MSH265DecoderMFT",
    "CLSID_MSMPEGAudDecMFT",
    "CLSID_MSMPEGDecoderMFT",
    "CLSID_MSOpusDecoder",
    "CLSID_MSVPxDecoder",
    "CLSID_MediaEncoderCategory",
    "CLSID_MediaMultiplexerCategory",
    "CLSID_MediaPropertyBag",
    "CLSID_MemoryAllocator",
    "CLSID_MidiRendererCategory",
    "CLSID_MjpegDec",
    "CLSID_ModexRenderer",
    "CLSID_Mpeg2VideoStreamAnalyzer",
    "CLSID_NetSchemePlugin",
    "CLSID_NetworkProvider",
    "CLSID_OverlayMixer",
    "CLSID_PerformanceProperties",
    "CLSID_PersistMonikerPID",
    "CLSID_PlayToSourceClassFactory",
    "CLSID_ProtoFilterGraph",
    "CLSID_QTDec",
    "CLSID_QualityProperties",
    "CLSID_QuickTimeParser",
    "CLSID_SBE2File",
    "CLSID_SBE2FileScan",
    "CLSID_SBE2MediaTypeProfile",
    "CLSID_SBE2Sink",
    "CLSID_SeekingPassThru",
    "CLSID_SmartTee",
    "CLSID_StreamBufferComposeRecording",
    "CLSID_StreamBufferConfig",
    "CLSID_StreamBufferPropertyHandler",
    "CLSID_StreamBufferRecordingAttributes",
    "CLSID_StreamBufferSink",
    "CLSID_StreamBufferSource",
    "CLSID_StreamBufferThumbnailHandler",
    "CLSID_SubtitlesFilter",
    "CLSID_SystemClock",
    "CLSID_SystemDeviceEnum",
    "CLSID_TVAudioFilterPropertyPage",
    "CLSID_TVEFilterCCProperties",
    "CLSID_TVEFilterStatsProperties",
    "CLSID_TVEFilterTuneProperties",
    "CLSID_TVTunerFilterPropertyPage",
    "CLSID_TextRender",
    "CLSID_TransmitCategory",
    "CLSID_URLReader",
    "CLSID_UrlmonSchemePlugin",
    "CLSID_VBISurfaces",
    "CLSID_VPObject",
    "CLSID_VPVBIObject",
    "CLSID_VfwCapture",
    "CLSID_VideoCompressorCategory",
    "CLSID_VideoInputDeviceCategory",
    "CLSID_VideoMixingRenderer",
    "CLSID_VideoMixingRenderer9",
    "CLSID_VideoPortManager",
    "CLSID_VideoProcAmpPropertyPage",
    "CLSID_VideoProcessorMFT",
    "CLSID_VideoRenderer",
    "CLSID_VideoRendererDefault",
    "CLSID_VideoStreamConfigPropertyPage",
    "CLSID_WMADecMediaObject",
    "CLSID_WMAsfReader",
    "CLSID_WMAsfWriter",
    "CLSID_WMDRMSystemID",
    "CLSID_WMVDecoderMFT",
    "CLSID_WSTDecoder",
    "CLSID_WstDecoderPropertyPage",
    "CMP3DecMediaObject",
    "CMPEG2AudDecoderDS",
    "CMPEG2AudioEncoderMFT",
    "CMPEG2EncoderAudioDS",
    "CMPEG2EncoderDS",
    "CMPEG2EncoderVideoDS",
    "CMPEG2VidDecoderDS",
    "CMPEG2VideoEncoderMFT",
    "CMPEGAACDecMediaObject",
    "CMSAACDecMFT",
    "CMSAC3Enc",
    "CMSALACDecMFT",
    "CMSALACEncMFT",
    "CMSDDPlusDecMFT",
    "CMSDolbyDigitalEncMFT",
    "CMSFLACDecMFT",
    "CMSFLACEncMFT",
    "CMSH263EncoderMFT",
    "CMSH264DecoderMFT",
    "CMSH264EncoderMFT",
    "CMSH264RemuxMFT",
    "CMSH265EncoderMFT",
    "CMSMPEGAudDecMFT",
    "CMSMPEGDecoderMFT",
    "CMSOpusDecMFT",
    "CMSSCDecMediaObject",
    "CMSSCEncMediaObject",
    "CMSSCEncMediaObject2",
    "CMSVPXEncoderMFT",
    "CMSVideoDSPMFT",
    "CMpeg2DecMediaObject",
    "CMpeg43DecMediaObject",
    "CMpeg4DecMediaObject",
    "CMpeg4EncMediaObject",
    "CMpeg4sDecMFT",
    "CMpeg4sDecMediaObject",
    "CMpeg4sEncMediaObject",
    "CNokiaAACCCDecMediaObject",
    "CNokiaAACDecMediaObject",
    "CODECAPI_ALLSETTINGS",
    "CODECAPI_AUDIO_ENCODER",
    "CODECAPI_AVAudioChannelConfig",
    "CODECAPI_AVAudioChannelCount",
    "CODECAPI_AVAudioSampleRate",
    "CODECAPI_AVDDSurroundMode",
    "CODECAPI_AVDSPLoudnessEqualization",
    "CODECAPI_AVDSPSpeakerFill",
    "CODECAPI_AVDecAACDownmixMode",
    "CODECAPI_AVDecAudioDualMono",
    "CODECAPI_AVDecAudioDualMonoReproMode",
    "CODECAPI_AVDecCommonInputFormat",
    "CODECAPI_AVDecCommonMeanBitRate",
    "CODECAPI_AVDecCommonMeanBitRateInterval",
    "CODECAPI_AVDecCommonOutputFormat",
    "CODECAPI_AVDecDDDynamicRangeScaleHigh",
    "CODECAPI_AVDecDDDynamicRangeScaleLow",
    "CODECAPI_AVDecDDMatrixDecodingMode",
    "CODECAPI_AVDecDDOperationalMode",
    "CODECAPI_AVDecDDStereoDownMixMode",
    "CODECAPI_AVDecDisableVideoPostProcessing",
    "CODECAPI_AVDecHEAACDynamicRangeControl",
    "CODECAPI_AVDecMmcssClass",
    "CODECAPI_AVDecNumWorkerThreads",
    "CODECAPI_AVDecSoftwareDynamicFormatChange",
    "CODECAPI_AVDecVideoAcceleration_H264",
    "CODECAPI_AVDecVideoAcceleration_MPEG2",
    "CODECAPI_AVDecVideoAcceleration_VC1",
    "CODECAPI_AVDecVideoCodecType",
    "CODECAPI_AVDecVideoDXVABusEncryption",
    "CODECAPI_AVDecVideoDXVAMode",
    "CODECAPI_AVDecVideoDropPicWithMissingRef",
    "CODECAPI_AVDecVideoFastDecodeMode",
    "CODECAPI_AVDecVideoH264ErrorConcealment",
    "CODECAPI_AVDecVideoImageSize",
    "CODECAPI_AVDecVideoInputScanType",
    "CODECAPI_AVDecVideoMPEG2ErrorConcealment",
    "CODECAPI_AVDecVideoMaxCodedHeight",
    "CODECAPI_AVDecVideoMaxCodedWidth",
    "CODECAPI_AVDecVideoPixelAspectRatio",
    "CODECAPI_AVDecVideoProcDeinterlaceCSC",
    "CODECAPI_AVDecVideoSWPowerLevel",
    "CODECAPI_AVDecVideoSoftwareDeinterlaceMode",
    "CODECAPI_AVDecVideoThumbnailGenerationMode",
    "CODECAPI_AVEnableInLoopDeblockFilter",
    "CODECAPI_AVEncAdaptiveMode",
    "CODECAPI_AVEncAudioDualMono",
    "CODECAPI_AVEncAudioInputContent",
    "CODECAPI_AVEncAudioIntervalToEncode",
    "CODECAPI_AVEncAudioIntervalToSkip",
    "CODECAPI_AVEncAudioMapDestChannel0",
    "CODECAPI_AVEncAudioMapDestChannel1",
    "CODECAPI_AVEncAudioMapDestChannel10",
    "CODECAPI_AVEncAudioMapDestChannel11",
    "CODECAPI_AVEncAudioMapDestChannel12",
    "CODECAPI_AVEncAudioMapDestChannel13",
    "CODECAPI_AVEncAudioMapDestChannel14",
    "CODECAPI_AVEncAudioMapDestChannel15",
    "CODECAPI_AVEncAudioMapDestChannel2",
    "CODECAPI_AVEncAudioMapDestChannel3",
    "CODECAPI_AVEncAudioMapDestChannel4",
    "CODECAPI_AVEncAudioMapDestChannel5",
    "CODECAPI_AVEncAudioMapDestChannel6",
    "CODECAPI_AVEncAudioMapDestChannel7",
    "CODECAPI_AVEncAudioMapDestChannel8",
    "CODECAPI_AVEncAudioMapDestChannel9",
    "CODECAPI_AVEncAudioMeanBitRate",
    "CODECAPI_AVEncChromaEncodeMode",
    "CODECAPI_AVEncChromaUpdateTime",
    "CODECAPI_AVEncCodecType",
    "CODECAPI_AVEncCommonAllowFrameDrops",
    "CODECAPI_AVEncCommonBufferInLevel",
    "CODECAPI_AVEncCommonBufferOutLevel",
    "CODECAPI_AVEncCommonBufferSize",
    "CODECAPI_AVEncCommonFormatConstraint",
    "CODECAPI_AVEncCommonLowLatency",
    "CODECAPI_AVEncCommonMaxBitRate",
    "CODECAPI_AVEncCommonMeanBitRate",
    "CODECAPI_AVEncCommonMeanBitRateInterval",
    "CODECAPI_AVEncCommonMinBitRate",
    "CODECAPI_AVEncCommonMultipassMode",
    "CODECAPI_AVEncCommonPassEnd",
    "CODECAPI_AVEncCommonPassStart",
    "CODECAPI_AVEncCommonQuality",
    "CODECAPI_AVEncCommonQualityVsSpeed",
    "CODECAPI_AVEncCommonRateControlMode",
    "CODECAPI_AVEncCommonRealTime",
    "CODECAPI_AVEncCommonStreamEndHandling",
    "CODECAPI_AVEncCommonTranscodeEncodingProfile",
    "CODECAPI_AVEncDDAtoDConverterType",
    "CODECAPI_AVEncDDCentreDownMixLevel",
    "CODECAPI_AVEncDDChannelBWLowPassFilter",
    "CODECAPI_AVEncDDCopyright",
    "CODECAPI_AVEncDDDCHighPassFilter",
    "CODECAPI_AVEncDDDialogNormalization",
    "CODECAPI_AVEncDDDigitalDeemphasis",
    "CODECAPI_AVEncDDDynamicRangeCompressionControl",
    "CODECAPI_AVEncDDHeadphoneMode",
    "CODECAPI_AVEncDDLFELowPassFilter",
    "CODECAPI_AVEncDDLoRoCenterMixLvl_x10",
    "CODECAPI_AVEncDDLoRoSurroundMixLvl_x10",
    "CODECAPI_AVEncDDLtRtCenterMixLvl_x10",
    "CODECAPI_AVEncDDLtRtSurroundMixLvl_x10",
    "CODECAPI_AVEncDDOriginalBitstream",
    "CODECAPI_AVEncDDPreferredStereoDownMixMode",
    "CODECAPI_AVEncDDProductionInfoExists",
    "CODECAPI_AVEncDDProductionMixLevel",
    "CODECAPI_AVEncDDProductionRoomType",
    "CODECAPI_AVEncDDRFPreEmphasisFilter",
    "CODECAPI_AVEncDDService",
    "CODECAPI_AVEncDDSurround3dBAttenuation",
    "CODECAPI_AVEncDDSurround90DegreeePhaseShift",
    "CODECAPI_AVEncDDSurroundDownMixLevel",
    "CODECAPI_AVEncDDSurroundExMode",
    "CODECAPI_AVEncEnableVideoProcessing",
    "CODECAPI_AVEncH264CABACEnable",
    "CODECAPI_AVEncH264PPSID",
    "CODECAPI_AVEncH264SPSID",
    "CODECAPI_AVEncInputVideoSystem",
    "CODECAPI_AVEncLowPowerEncoder",
    "CODECAPI_AVEncMP12MuxDVDNavPacks",
    "CODECAPI_AVEncMP12MuxEarliestPTS",
    "CODECAPI_AVEncMP12MuxInitialSCR",
    "CODECAPI_AVEncMP12MuxLargestPacketSize",
    "CODECAPI_AVEncMP12MuxMuxRate",
    "CODECAPI_AVEncMP12MuxNumStreams",
    "CODECAPI_AVEncMP12MuxPackSize",
    "CODECAPI_AVEncMP12MuxPacketOverhead",
    "CODECAPI_AVEncMP12MuxSysAudioLock",
    "CODECAPI_AVEncMP12MuxSysCSPS",
    "CODECAPI_AVEncMP12MuxSysFixed",
    "CODECAPI_AVEncMP12MuxSysRateBound",
    "CODECAPI_AVEncMP12MuxSysSTDBufferBound",
    "CODECAPI_AVEncMP12MuxSysVideoLock",
    "CODECAPI_AVEncMP12MuxTargetPacketizer",
    "CODECAPI_AVEncMP12PktzCopyright",
    "CODECAPI_AVEncMP12PktzInitialPTS",
    "CODECAPI_AVEncMP12PktzOriginal",
    "CODECAPI_AVEncMP12PktzPacketSize",
    "CODECAPI_AVEncMP12PktzSTDBuffer",
    "CODECAPI_AVEncMP12PktzStreamID",
    "CODECAPI_AVEncMPACodingMode",
    "CODECAPI_AVEncMPACopyright",
    "CODECAPI_AVEncMPAEmphasisType",
    "CODECAPI_AVEncMPAEnableRedundancyProtection",
    "CODECAPI_AVEncMPALayer",
    "CODECAPI_AVEncMPAOriginalBitstream",
    "CODECAPI_AVEncMPAPrivateUserBit",
    "CODECAPI_AVEncMPVAddSeqEndCode",
    "CODECAPI_AVEncMPVDefaultBPictureCount",
    "CODECAPI_AVEncMPVFrameFieldMode",
    "CODECAPI_AVEncMPVGOPOpen",
    "CODECAPI_AVEncMPVGOPSInSeq",
    "CODECAPI_AVEncMPVGOPSize",
    "CODECAPI_AVEncMPVGOPSizeMax",
    "CODECAPI_AVEncMPVGOPSizeMin",
    "CODECAPI_AVEncMPVGenerateHeaderPicDispExt",
    "CODECAPI_AVEncMPVGenerateHeaderPicExt",
    "CODECAPI_AVEncMPVGenerateHeaderSeqDispExt",
    "CODECAPI_AVEncMPVGenerateHeaderSeqExt",
    "CODECAPI_AVEncMPVGenerateHeaderSeqScaleExt",
    "CODECAPI_AVEncMPVIntraDCPrecision",
    "CODECAPI_AVEncMPVIntraVLCTable",
    "CODECAPI_AVEncMPVLevel",
    "CODECAPI_AVEncMPVProfile",
    "CODECAPI_AVEncMPVQScaleType",
    "CODECAPI_AVEncMPVQuantMatrixChromaIntra",
    "CODECAPI_AVEncMPVQuantMatrixChromaNonIntra",
    "CODECAPI_AVEncMPVQuantMatrixIntra",
    "CODECAPI_AVEncMPVQuantMatrixNonIntra",
    "CODECAPI_AVEncMPVScanPattern",
    "CODECAPI_AVEncMPVSceneDetection",
    "CODECAPI_AVEncMPVUseConcealmentMotionVectors",
    "CODECAPI_AVEncMaxFrameRate",
    "CODECAPI_AVEncMuxOutputStreamType",
    "CODECAPI_AVEncNoInputCopy",
    "CODECAPI_AVEncNumWorkerThreads",
    "CODECAPI_AVEncProgressiveUpdateTime",
    "CODECAPI_AVEncSliceControlMode",
    "CODECAPI_AVEncSliceControlSize",
    "CODECAPI_AVEncSliceGenerationMode",
    "CODECAPI_AVEncStatAudioAverageBPS",
    "CODECAPI_AVEncStatAudioAveragePCMValue",
    "CODECAPI_AVEncStatAudioPeakPCMValue",
    "CODECAPI_AVEncStatAverageBPS",
    "CODECAPI_AVEncStatCommonCompletedPasses",
    "CODECAPI_AVEncStatHardwareBandwidthUtilitization",
    "CODECAPI_AVEncStatHardwareProcessorUtilitization",
    "CODECAPI_AVEncStatMPVSkippedEmptyFrames",
    "CODECAPI_AVEncStatVideoCodedFrames",
    "CODECAPI_AVEncStatVideoOutputFrameRate",
    "CODECAPI_AVEncStatVideoTotalFrames",
    "CODECAPI_AVEncStatWMVCBAvg",
    "CODECAPI_AVEncStatWMVCBMax",
    "CODECAPI_AVEncStatWMVDecoderComplexityProfile",
    "CODECAPI_AVEncVideoCBRMotionTradeoff",
    "CODECAPI_AVEncVideoCTBSize",
    "CODECAPI_AVEncVideoCodedVideoAccessUnitSize",
    "CODECAPI_AVEncVideoContentType",
    "CODECAPI_AVEncVideoDefaultUpperFieldDominant",
    "CODECAPI_AVEncVideoDirtyRectEnabled",
    "CODECAPI_AVEncVideoDisplayDimension",
    "CODECAPI_AVEncVideoEncodeDimension",
    "CODECAPI_AVEncVideoEncodeFrameTypeQP",
    "CODECAPI_AVEncVideoEncodeOffsetOrigin",
    "CODECAPI_AVEncVideoEncodeQP",
    "CODECAPI_AVEncVideoFieldSwap",
    "CODECAPI_AVEncVideoForceKeyFrame",
    "CODECAPI_AVEncVideoForceSourceScanType",
    "CODECAPI_AVEncVideoGradualIntraRefresh",
    "CODECAPI_AVEncVideoHeaderDropFrame",
    "CODECAPI_AVEncVideoHeaderFrames",
    "CODECAPI_AVEncVideoHeaderHours",
    "CODECAPI_AVEncVideoHeaderMinutes",
    "CODECAPI_AVEncVideoHeaderSeconds",
    "CODECAPI_AVEncVideoInputChromaResolution",
    "CODECAPI_AVEncVideoInputChromaSubsampling",
    "CODECAPI_AVEncVideoInputColorLighting",
    "CODECAPI_AVEncVideoInputColorNominalRange",
    "CODECAPI_AVEncVideoInputColorPrimaries",
    "CODECAPI_AVEncVideoInputColorTransferFunction",
    "CODECAPI_AVEncVideoInputColorTransferMatrix",
    "CODECAPI_AVEncVideoInstantTemporalUpSwitching",
    "CODECAPI_AVEncVideoIntraLayerPrediction",
    "CODECAPI_AVEncVideoInverseTelecineEnable",
    "CODECAPI_AVEncVideoInverseTelecineThreshold",
    "CODECAPI_AVEncVideoLTRBufferControl",
    "CODECAPI_AVEncVideoMarkLTRFrame",
    "CODECAPI_AVEncVideoMaxCTBSize",
    "CODECAPI_AVEncVideoMaxKeyframeDistance",
    "CODECAPI_AVEncVideoMaxNumRefFrame",
    "CODECAPI_AVEncVideoMaxQP",
    "CODECAPI_AVEncVideoMaxTemporalLayers",
    "CODECAPI_AVEncVideoMeanAbsoluteDifference",
    "CODECAPI_AVEncVideoMinQP",
    "CODECAPI_AVEncVideoNoOfFieldsToEncode",
    "CODECAPI_AVEncVideoNoOfFieldsToSkip",
    "CODECAPI_AVEncVideoNumGOPsPerIDR",
    "CODECAPI_AVEncVideoOutputChromaResolution",
    "CODECAPI_AVEncVideoOutputChromaSubsampling",
    "CODECAPI_AVEncVideoOutputColorLighting",
    "CODECAPI_AVEncVideoOutputColorNominalRange",
    "CODECAPI_AVEncVideoOutputColorPrimaries",
    "CODECAPI_AVEncVideoOutputColorTransferFunction",
    "CODECAPI_AVEncVideoOutputColorTransferMatrix",
    "CODECAPI_AVEncVideoOutputFrameRate",
    "CODECAPI_AVEncVideoOutputFrameRateConversion",
    "CODECAPI_AVEncVideoOutputScanType",
    "CODECAPI_AVEncVideoPixelAspectRatio",
    "CODECAPI_AVEncVideoROIEnabled",
    "CODECAPI_AVEncVideoRateControlParams",
    "CODECAPI_AVEncVideoSelectLayer",
    "CODECAPI_AVEncVideoSourceFilmContent",
    "CODECAPI_AVEncVideoSourceIsBW",
    "CODECAPI_AVEncVideoSupportedControls",
    "CODECAPI_AVEncVideoTemporalLayerCount",
    "CODECAPI_AVEncVideoUsage",
    "CODECAPI_AVEncVideoUseLTRFrame",
    "CODECAPI_AVEncWMVDecoderComplexity",
    "CODECAPI_AVEncWMVInterlacedEncoding",
    "CODECAPI_AVEncWMVKeyFrameBufferLevelMarker",
    "CODECAPI_AVEncWMVKeyFrameDistance",
    "CODECAPI_AVEncWMVProduceDummyFrames",
    "CODECAPI_AVLowLatencyMode",
    "CODECAPI_AVPriorityControl",
    "CODECAPI_AVRealtimeControl",
    "CODECAPI_AVScenarioInfo",
    "CODECAPI_CHANGELISTS",
    "CODECAPI_CURRENTCHANGELIST",
    "CODECAPI_GUID_AVDecAudioInputAAC",
    "CODECAPI_GUID_AVDecAudioInputDTS",
    "CODECAPI_GUID_AVDecAudioInputDolby",
    "CODECAPI_GUID_AVDecAudioInputDolbyDigitalPlus",
    "CODECAPI_GUID_AVDecAudioInputHEAAC",
    "CODECAPI_GUID_AVDecAudioInputMPEG",
    "CODECAPI_GUID_AVDecAudioInputPCM",
    "CODECAPI_GUID_AVDecAudioInputWMA",
    "CODECAPI_GUID_AVDecAudioInputWMAPro",
    "CODECAPI_GUID_AVDecAudioOutputFormat_PCM",
    "CODECAPI_GUID_AVDecAudioOutputFormat_PCM_Headphones",
    "CODECAPI_GUID_AVDecAudioOutputFormat_PCM_Stereo_Auto",
    "CODECAPI_GUID_AVDecAudioOutputFormat_PCM_Stereo_MatrixEncoded",
    "CODECAPI_GUID_AVDecAudioOutputFormat_SPDIF_Bitstream",
    "CODECAPI_GUID_AVDecAudioOutputFormat_SPDIF_PCM",
    "CODECAPI_GUID_AVEncCommonFormatATSC",
    "CODECAPI_GUID_AVEncCommonFormatDVB",
    "CODECAPI_GUID_AVEncCommonFormatDVD_DashVR",
    "CODECAPI_GUID_AVEncCommonFormatDVD_PlusVR",
    "CODECAPI_GUID_AVEncCommonFormatDVD_V",
    "CODECAPI_GUID_AVEncCommonFormatHighMAT",
    "CODECAPI_GUID_AVEncCommonFormatHighMPV",
    "CODECAPI_GUID_AVEncCommonFormatMP3",
    "CODECAPI_GUID_AVEncCommonFormatSVCD",
    "CODECAPI_GUID_AVEncCommonFormatUnSpecified",
    "CODECAPI_GUID_AVEncCommonFormatVCD",
    "CODECAPI_GUID_AVEncDTS",
    "CODECAPI_GUID_AVEncDTSHD",
    "CODECAPI_GUID_AVEncDV",
    "CODECAPI_GUID_AVEncDolbyDigitalConsumer",
    "CODECAPI_GUID_AVEncDolbyDigitalPlus",
    "CODECAPI_GUID_AVEncDolbyDigitalPro",
    "CODECAPI_GUID_AVEncH264Video",
    "CODECAPI_GUID_AVEncMLP",
    "CODECAPI_GUID_AVEncMPEG1Audio",
    "CODECAPI_GUID_AVEncMPEG1Video",
    "CODECAPI_GUID_AVEncMPEG2Audio",
    "CODECAPI_GUID_AVEncMPEG2Video",
    "CODECAPI_GUID_AVEncPCM",
    "CODECAPI_GUID_AVEncSDDS",
    "CODECAPI_GUID_AVEncWMALossless",
    "CODECAPI_GUID_AVEncWMAPro",
    "CODECAPI_GUID_AVEncWMAVoice",
    "CODECAPI_GUID_AVEncWMV",
    "CODECAPI_GUID_AVEndMPEG4Video",
    "CODECAPI_GetOPMContext",
    "CODECAPI_SETALLDEFAULTS",
    "CODECAPI_SUPPORTSEVENTS",
    "CODECAPI_SetHDCPManagerContext",
    "CODECAPI_VIDEO_ENCODER",
    "CODECAPI_VideoEncoderDisplayContentType",
    "COPP_ProtectionType_ACP",
    "COPP_ProtectionType_CGMSA",
    "COPP_ProtectionType_HDCP",
    "COPP_ProtectionType_Mask",
    "COPP_ProtectionType_None",
    "COPP_ProtectionType_Reserved",
    "COPP_ProtectionType_Unknown",
    "CPK_DS_AC3Decoder",
    "CPK_DS_MPEG2Decoder",
    "CResamplerMediaObject",
    "CResizerDMO",
    "CResizerMediaObject",
    "CShotDetectorDmo",
    "CSmpteTransformsDmo",
    "CThumbnailGeneratorDmo",
    "CTocGeneratorDmo",
    "CVodafoneAACCCDecMediaObject",
    "CVodafoneAACDecMediaObject",
    "CWMADecMediaObject",
    "CWMAEncMediaObject",
    "CWMATransMediaObject",
    "CWMAudioAEC",
    "CWMAudioCAPXGFXAPO",
    "CWMAudioCAPXLFXAPO",
    "CWMAudioGFXAPO",
    "CWMAudioLFXAPO",
    "CWMAudioSpdTxDMO",
    "CWMSPDecMediaObject",
    "CWMSPEncMediaObject",
    "CWMSPEncMediaObject2",
    "CWMTDecMediaObject",
    "CWMTEncMediaObject",
    "CWMV9EncMediaObject",
    "CWMVDecMediaObject",
    "CWMVEncMediaObject2",
    "CWMVXEncMediaObject",
    "CWVC1DecMediaObject",
    "CWVC1EncMediaObject",
    "CZuneAACCCDecMediaObject",
    "CZuneM4S2DecMediaObject",
    "CodecAPIEventData",
    "CreateNamedPropertyStore",
    "CreatePropertyStore",
    "D3D12_BITSTREAM_ENCRYPTION_TYPE",
    "D3D12_BITSTREAM_ENCRYPTION_TYPE_NONE",
    "D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE",
    "D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE",
    "D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1",
    "D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT",
    "D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS",
    "D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT",
    "D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM",
    "D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES",
    "D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT",
    "D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES",
    "D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS",
    "D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT",
    "D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS",
    "D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT",
    "D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS",
    "D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT",
    "D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE",
    "D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT",
    "D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT",
    "D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR",
    "D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES",
    "D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE",
    "D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE",
    "D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1",
    "D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS",
    "D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES",
    "D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO",
    "D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT",
    "D3D12_FEATURE_VIDEO",
    "D3D12_FEATURE_VIDEO_ARCHITECTURE",
    "D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE",
    "D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE1",
    "D3D12_FEATURE_VIDEO_DECODE_CONVERSION_SUPPORT",
    "D3D12_FEATURE_VIDEO_DECODE_FORMATS",
    "D3D12_FEATURE_VIDEO_DECODE_FORMAT_COUNT",
    "D3D12_FEATURE_VIDEO_DECODE_HISTOGRAM",
    "D3D12_FEATURE_VIDEO_DECODE_PROFILES",
    "D3D12_FEATURE_VIDEO_DECODE_PROFILE_COUNT",
    "D3D12_FEATURE_VIDEO_DECODE_PROTECTED_RESOURCES",
    "D3D12_FEATURE_VIDEO_DECODE_SUPPORT",
    "D3D12_FEATURE_VIDEO_EXTENSION_COMMANDS",
    "D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_COUNT",
    "D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETERS",
    "D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT",
    "D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SIZE",
    "D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SUPPORT",
    "D3D12_FEATURE_VIDEO_FEATURE_AREA_SUPPORT",
    "D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR",
    "D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES",
    "D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_SIZE",
    "D3D12_FEATURE_VIDEO_PROCESSOR_SIZE",
    "D3D12_FEATURE_VIDEO_PROCESSOR_SIZE1",
    "D3D12_FEATURE_VIDEO_PROCESS_MAX_INPUT_STREAMS",
    "D3D12_FEATURE_VIDEO_PROCESS_PROTECTED_RESOURCES",
    "D3D12_FEATURE_VIDEO_PROCESS_REFERENCE_INFO",
    "D3D12_FEATURE_VIDEO_PROCESS_SUPPORT",
    "D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS",
    "D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT",
    "D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT",
    "D3D12_RESOURCE_COORDINATE",
    "D3D12_VIDEO_DECODER_DESC",
    "D3D12_VIDEO_DECODER_HEAP_DESC",
    "D3D12_VIDEO_DECODE_ARGUMENT_TYPE",
    "D3D12_VIDEO_DECODE_ARGUMENT_TYPE_INVERSE_QUANTIZATION_MATRIX",
    "D3D12_VIDEO_DECODE_ARGUMENT_TYPE_MAX_VALID",
    "D3D12_VIDEO_DECODE_ARGUMENT_TYPE_PICTURE_PARAMETERS",
    "D3D12_VIDEO_DECODE_ARGUMENT_TYPE_SLICE_CONTROL",
    "D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM",
    "D3D12_VIDEO_DECODE_CONFIGURATION",
    "D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS",
    "D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_ALLOW_RESOLUTION_CHANGE_ON_NON_KEY_FRAME",
    "D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_HEIGHT_ALIGNMENT_MULTIPLE_32_REQUIRED",
    "D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_NONE",
    "D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_POST_PROCESSING_SUPPORTED",
    "D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_REFERENCE_ONLY_ALLOCATIONS_REQUIRED",
    "D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS",
    "D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1",
    "D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS",
    "D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_NONE",
    "D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_SUPPORTED",
    "D3D12_VIDEO_DECODE_FRAME_ARGUMENT",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_A",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_B",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_A",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_B",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_G",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_NONE",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_R",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_U",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_V",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_Y",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_G",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_R",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_U",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_V",
    "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_Y",
    "D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS",
    "D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM",
    "D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS",
    "D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1",
    "D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2",
    "D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2_420",
    "D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE0",
    "D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE1",
    "D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE2",
    "D3D12_VIDEO_DECODE_PROFILE_H264",
    "D3D12_VIDEO_DECODE_PROFILE_H264_MULTIVIEW",
    "D3D12_VIDEO_DECODE_PROFILE_H264_STEREO",
    "D3D12_VIDEO_DECODE_PROFILE_H264_STEREO_PROGRESSIVE",
    "D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN",
    "D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN10",
    "D3D12_VIDEO_DECODE_PROFILE_MPEG1_AND_MPEG2",
    "D3D12_VIDEO_DECODE_PROFILE_MPEG2",
    "D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_ADVSIMPLE_NOGMC",
    "D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_SIMPLE",
    "D3D12_VIDEO_DECODE_PROFILE_VC1",
    "D3D12_VIDEO_DECODE_PROFILE_VC1_D2010",
    "D3D12_VIDEO_DECODE_PROFILE_VP8",
    "D3D12_VIDEO_DECODE_PROFILE_VP9",
    "D3D12_VIDEO_DECODE_PROFILE_VP9_10BIT_PROFILE2",
    "D3D12_VIDEO_DECODE_REFERENCE_FRAMES",
    "D3D12_VIDEO_DECODE_STATUS",
    "D3D12_VIDEO_DECODE_STATUS_CONTINUE",
    "D3D12_VIDEO_DECODE_STATUS_CONTINUE_SKIP_DISPLAY",
    "D3D12_VIDEO_DECODE_STATUS_OK",
    "D3D12_VIDEO_DECODE_STATUS_RATE_EXCEEDED",
    "D3D12_VIDEO_DECODE_STATUS_RESTART",
    "D3D12_VIDEO_DECODE_SUPPORT_FLAGS",
    "D3D12_VIDEO_DECODE_SUPPORT_FLAG_NONE",
    "D3D12_VIDEO_DECODE_SUPPORT_FLAG_SUPPORTED",
    "D3D12_VIDEO_DECODE_TIER",
    "D3D12_VIDEO_DECODE_TIER_1",
    "D3D12_VIDEO_DECODE_TIER_2",
    "D3D12_VIDEO_DECODE_TIER_3",
    "D3D12_VIDEO_DECODE_TIER_NOT_SUPPORTED",
    "D3D12_VIDEO_ENCODER_CODEC",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_DISABLED",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_SPATIAL",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_TEMPORAL",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ENABLE_CABAC_ENCODING",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_ADAPTIVE_8x8_TRANSFORM",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_CONSTRAINED_INTRAPREDICTION",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_1_DISABLE_ALL_SLICE_BLOCK_EDGES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_2_DISABLE_SLICE_BOUNDARIES_BLOCKS",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_3_USE_TWO_STAGE_DEBLOCKING",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_4_DISABLE_CHROMA_BLOCK_EDGES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_1_DISABLE_ALL_SLICE_BLOCK_EDGES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_2_DISABLE_SLICE_BOUNDARIES_BLOCKS",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_3_USE_TWO_STAGE_DEBLOCKING",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_4_DISABLE_CHROMA_BLOCK_EDGES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_16x16",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_32x32",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_64x64",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_8x8",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_DISABLE_LOOP_FILTER_ACROSS_SLICES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_LONG_TERM_REFERENCES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_SAO_FILTER",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_TRANSFORM_SKIPPING",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_ASYMETRIC_MOTION_PARTITION",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_CONSTRAINED_INTRAPREDICTION",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_16x16",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_32x32",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_4x4",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_8x8",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_ADAPTIVE_8x8_TRANSFORM_ENCODING_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_BFRAME_LTR_COMBINED_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CABAC_ENCODING_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_SPATIAL_ENCODING_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_TEMPORAL_ENCODING_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_REQUIRED",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_BFRAME_LTR_COMBINED_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_DISABLING_LOOP_FILTER_ACROSS_SLICES_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_P_FRAMES_IMPLEMENTED_AS_LOW_DELAY_B_FRAMES",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_SAO_FILTER_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_TRANSFORM_SKIP_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_H264",
    "D3D12_VIDEO_ENCODER_CODEC_HEVC",
    "D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT",
    "D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264",
    "D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC",
    "D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM",
    "D3D12_VIDEO_ENCODER_DESC",
    "D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS",
    "D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS",
    "D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS",
    "D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_CODEC_PICTURE_CONTROL_NOT_SUPPORTED",
    "D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_METADATA_BUFFER_SOURCE",
    "D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_REFERENCE_PICTURES",
    "D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_NO_ERROR",
    "D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_RECONFIGURATION_REQUEST_NOT_SUPPORTED",
    "D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_SUBREGION_LAYOUT_CONFIGURATION_NOT_SUPPORTED",
    "D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER",
    "D3D12_VIDEO_ENCODER_FLAGS",
    "D3D12_VIDEO_ENCODER_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE",
    "D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_BYTES_PER_SUBREGION",
    "D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_FULL_FRAME",
    "D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_SQUARE_UNITS_PER_SUBREGION_ROW_UNALIGNED",
    "D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_ROWS_PER_SUBREGION",
    "D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_SUBREGIONS_PER_FRAME",
    "D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA",
    "D3D12_VIDEO_ENCODER_FRAME_TYPE_H264",
    "D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_B_FRAME",
    "D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_IDR_FRAME",
    "D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_I_FRAME",
    "D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_P_FRAME",
    "D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC",
    "D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_B_FRAME",
    "D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_IDR_FRAME",
    "D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_I_FRAME",
    "D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_P_FRAME",
    "D3D12_VIDEO_ENCODER_HEAP_DESC",
    "D3D12_VIDEO_ENCODER_HEAP_FLAGS",
    "D3D12_VIDEO_ENCODER_HEAP_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_INTRA_REFRESH",
    "D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE",
    "D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_NONE",
    "D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_ROW_BASED",
    "D3D12_VIDEO_ENCODER_LEVELS_H264",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_1",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_11",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_12",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_13",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_1b",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_2",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_21",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_22",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_3",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_31",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_32",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_4",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_41",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_42",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_5",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_51",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_52",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_6",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_61",
    "D3D12_VIDEO_ENCODER_LEVELS_H264_62",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_1",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_2",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_21",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_3",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_31",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_4",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_41",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_5",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_51",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_52",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_6",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_61",
    "D3D12_VIDEO_ENCODER_LEVELS_HEVC_62",
    "D3D12_VIDEO_ENCODER_LEVEL_SETTING",
    "D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC",
    "D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE",
    "D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_FULL_PIXEL",
    "D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_HALF_PIXEL",
    "D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_MAXIMUM",
    "D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_QUARTER_PIXEL",
    "D3D12_VIDEO_ENCODER_OUTPUT_METADATA",
    "D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_USED_AS_REFERENCE_PICTURE",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA",
    "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES",
    "D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC",
    "D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC",
    "D3D12_VIDEO_ENCODER_PROFILE_DESC",
    "D3D12_VIDEO_ENCODER_PROFILE_H264",
    "D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH",
    "D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH_10",
    "D3D12_VIDEO_ENCODER_PROFILE_H264_MAIN",
    "D3D12_VIDEO_ENCODER_PROFILE_HEVC",
    "D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN",
    "D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN10",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_DELTA_QP",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_FRAME_ANALYSIS",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_INITIAL_QP",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_MAX_FRAME_SIZE",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_QP_RANGE",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_VBV_SIZES",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_ABSOLUTE_QP_MAP",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CBR",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CQP",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_QVBR",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_VBR",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR",
    "D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR",
    "D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE",
    "D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264",
    "D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC",
    "D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS",
    "D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS",
    "D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC",
    "D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS",
    "D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_GOP_SEQUENCE_CHANGE",
    "D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RATE_CONTROL_CHANGE",
    "D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_REQUEST_INTRA_REFRESH",
    "D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RESOLUTION_CHANGE",
    "D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_SUBREGION_LAYOUT_CHANGE",
    "D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE",
    "D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264",
    "D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAGS",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_GENERAL_SUPPORT_OK",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_MOTION_ESTIMATION_PRECISION_MODE_LIMIT_AVAILABLE",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_ADJUSTABLE_QP_RANGE_AVAILABLE",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_DELTA_QP_AVAILABLE",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_FRAME_ANALYSIS_AVAILABLE",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_INITIAL_QP_AVAILABLE",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_MAX_FRAME_SIZE_AVAILABLE",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_RECONFIGURATION_AVAILABLE",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_VBV_SIZE_CONFIG_AVAILABLE",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RECONSTRUCTED_FRAMES_REQUIRE_TEXTURE_ARRAYS",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RESOLUTION_RECONFIGURATION_AVAILABLE",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SEQUENCE_GOP_RECONFIGURATION_AVAILABLE",
    "D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SUBREGION_LAYOUT_RECONFIGURATION_AVAILABLE",
    "D3D12_VIDEO_ENCODER_TIER_HEVC",
    "D3D12_VIDEO_ENCODER_TIER_HEVC_HIGH",
    "D3D12_VIDEO_ENCODER_TIER_HEVC_MAIN",
    "D3D12_VIDEO_ENCODER_VALIDATION_FLAGS",
    "D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_CONFIGURATION_NOT_SUPPORTED",
    "D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_NOT_SUPPORTED",
    "D3D12_VIDEO_ENCODER_VALIDATION_FLAG_GOP_STRUCTURE_NOT_SUPPORTED",
    "D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INPUT_FORMAT_NOT_SUPPORTED",
    "D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INTRA_REFRESH_MODE_NOT_SUPPORTED",
    "D3D12_VIDEO_ENCODER_VALIDATION_FLAG_NONE",
    "D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_CONFIGURATION_NOT_SUPPORTED",
    "D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_MODE_NOT_SUPPORTED",
    "D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RESOLUTION_NOT_SUPPORTED_IN_LIST",
    "D3D12_VIDEO_ENCODER_VALIDATION_FLAG_SUBREGION_LAYOUT_MODE_NOT_SUPPORTED",
    "D3D12_VIDEO_ENCODE_REFERENCE_FRAMES",
    "D3D12_VIDEO_EXTENSION_COMMAND_DESC",
    "D3D12_VIDEO_EXTENSION_COMMAND_INFO",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_NONE",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_READ",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_WRITE",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_INPUT",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_OUTPUT",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CREATION",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_INPUT",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_OUTPUT",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_EXECUTION",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_INITIALIZATION",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_DOUBLE",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_FLOAT",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_RESOURCE",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT16",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT32",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT64",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT8",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT16",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT32",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT64",
    "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT8",
    "D3D12_VIDEO_FIELD_TYPE",
    "D3D12_VIDEO_FIELD_TYPE_INTERLACED_BOTTOM_FIELD_FIRST",
    "D3D12_VIDEO_FIELD_TYPE_INTERLACED_TOP_FIELD_FIRST",
    "D3D12_VIDEO_FIELD_TYPE_NONE",
    "D3D12_VIDEO_FORMAT",
    "D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE",
    "D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_FIELD_BASED",
    "D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_NONE",
    "D3D12_VIDEO_FRAME_STEREO_FORMAT",
    "D3D12_VIDEO_FRAME_STEREO_FORMAT_HORIZONTAL",
    "D3D12_VIDEO_FRAME_STEREO_FORMAT_MONO",
    "D3D12_VIDEO_FRAME_STEREO_FORMAT_NONE",
    "D3D12_VIDEO_FRAME_STEREO_FORMAT_SEPARATE",
    "D3D12_VIDEO_FRAME_STEREO_FORMAT_VERTICAL",
    "D3D12_VIDEO_MOTION_ESTIMATOR_DESC",
    "D3D12_VIDEO_MOTION_ESTIMATOR_INPUT",
    "D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT",
    "D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE",
    "D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_16X16",
    "D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_8X8",
    "D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS",
    "D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_16X16",
    "D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_8X8",
    "D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_NONE",
    "D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION",
    "D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS",
    "D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_NONE",
    "D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_QUARTER_PEL",
    "D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_QUARTER_PEL",
    "D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC",
    "D3D12_VIDEO_PROCESS_ALPHA_BLENDING",
    "D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE",
    "D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_BACKGROUND",
    "D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_DESTINATION",
    "D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_OPAQUE",
    "D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_SOURCE_STREAM",
    "D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS",
    "D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_ANAMORPHIC_SCALING",
    "D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_COLOR_CORRECTION",
    "D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_CUSTOM",
    "D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DENOISE",
    "D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DERINGING",
    "D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_EDGE_ENHANCEMENT",
    "D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_FLESH_TONE_MAPPING",
    "D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_IMAGE_STABILIZATION",
    "D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_NONE",
    "D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_SUPER_RESOLUTION",
    "D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS",
    "D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_BOB",
    "D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_CUSTOM",
    "D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_NONE",
    "D3D12_VIDEO_PROCESS_FEATURE_FLAGS",
    "D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_BLENDING",
    "D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_FILL",
    "D3D12_VIDEO_PROCESS_FEATURE_FLAG_FLIP",
    "D3D12_VIDEO_PROCESS_FEATURE_FLAG_LUMA_KEY",
    "D3D12_VIDEO_PROCESS_FEATURE_FLAG_NONE",
    "D3D12_VIDEO_PROCESS_FEATURE_FLAG_PIXEL_ASPECT_RATIO",
    "D3D12_VIDEO_PROCESS_FEATURE_FLAG_ROTATION",
    "D3D12_VIDEO_PROCESS_FEATURE_FLAG_STEREO",
    "D3D12_VIDEO_PROCESS_FILTER",
    "D3D12_VIDEO_PROCESS_FILTER_ANAMORPHIC_SCALING",
    "D3D12_VIDEO_PROCESS_FILTER_BRIGHTNESS",
    "D3D12_VIDEO_PROCESS_FILTER_CONTRAST",
    "D3D12_VIDEO_PROCESS_FILTER_EDGE_ENHANCEMENT",
    "D3D12_VIDEO_PROCESS_FILTER_FLAGS",
    "D3D12_VIDEO_PROCESS_FILTER_FLAG_ANAMORPHIC_SCALING",
    "D3D12_VIDEO_PROCESS_FILTER_FLAG_BRIGHTNESS",
    "D3D12_VIDEO_PROCESS_FILTER_FLAG_CONTRAST",
    "D3D12_VIDEO_PROCESS_FILTER_FLAG_EDGE_ENHANCEMENT",
    "D3D12_VIDEO_PROCESS_FILTER_FLAG_HUE",
    "D3D12_VIDEO_PROCESS_FILTER_FLAG_NOISE_REDUCTION",
    "D3D12_VIDEO_PROCESS_FILTER_FLAG_NONE",
    "D3D12_VIDEO_PROCESS_FILTER_FLAG_SATURATION",
    "D3D12_VIDEO_PROCESS_FILTER_FLAG_STEREO_ADJUSTMENT",
    "D3D12_VIDEO_PROCESS_FILTER_HUE",
    "D3D12_VIDEO_PROCESS_FILTER_NOISE_REDUCTION",
    "D3D12_VIDEO_PROCESS_FILTER_RANGE",
    "D3D12_VIDEO_PROCESS_FILTER_SATURATION",
    "D3D12_VIDEO_PROCESS_FILTER_STEREO_ADJUSTMENT",
    "D3D12_VIDEO_PROCESS_INPUT_STREAM",
    "D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS",
    "D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1",
    "D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC",
    "D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS",
    "D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_DISCONTINUITY",
    "D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_REPEAT",
    "D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_NONE",
    "D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE",
    "D3D12_VIDEO_PROCESS_LUMA_KEY",
    "D3D12_VIDEO_PROCESS_ORIENTATION",
    "D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_180",
    "D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270",
    "D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270_FLIP_HORIZONTAL",
    "D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90",
    "D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90_FLIP_HORIZONTAL",
    "D3D12_VIDEO_PROCESS_ORIENTATION_DEFAULT",
    "D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_HORIZONTAL",
    "D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_VERTICAL",
    "D3D12_VIDEO_PROCESS_OUTPUT_STREAM",
    "D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS",
    "D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC",
    "D3D12_VIDEO_PROCESS_REFERENCE_SET",
    "D3D12_VIDEO_PROCESS_SUPPORT_FLAGS",
    "D3D12_VIDEO_PROCESS_SUPPORT_FLAG_NONE",
    "D3D12_VIDEO_PROCESS_SUPPORT_FLAG_SUPPORTED",
    "D3D12_VIDEO_PROCESS_TRANSFORM",
    "D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS",
    "D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_NONE",
    "D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_SUPPORTED",
    "D3D12_VIDEO_SAMPLE",
    "D3D12_VIDEO_SCALE_SUPPORT",
    "D3D12_VIDEO_SCALE_SUPPORT_FLAGS",
    "D3D12_VIDEO_SCALE_SUPPORT_FLAG_EVEN_DIMENSIONS_ONLY",
    "D3D12_VIDEO_SCALE_SUPPORT_FLAG_NONE",
    "D3D12_VIDEO_SCALE_SUPPORT_FLAG_POW2_ONLY",
    "D3D12_VIDEO_SIZE_RANGE",
    "D3DCONTENTPROTECTIONCAPS",
    "D3DOVERLAYCAPS",
    "DEVICE_INFO",
    "DEVPKEY_DeviceInterface_IsVirtualCamera",
    "DIRTYRECT_INFO",
    "DSATTRIB_CAPTURE_STREAMTIME",
    "DSATTRIB_CC_CONTAINER_INFO",
    "DSATTRIB_DSHOW_STREAM_DESC",
    "DSATTRIB_OptionalVideoAttributes",
    "DSATTRIB_PBDATAG_ATTRIBUTE",
    "DSATTRIB_PicSampleSeq",
    "DSATTRIB_SAMPLE_LIVE_STREAM_TIME",
    "DSATTRIB_TRANSPORT_PROPERTIES",
    "DSATTRIB_UDCRTag",
    "DXVA2CreateDirect3DDeviceManager9",
    "DXVA2CreateVideoService",
    "DXVA2_AES_CTR_IV",
    "DXVA2_AYUVSample16",
    "DXVA2_AYUVSample8",
    "DXVA2_BitStreamDateBufferType",
    "DXVA2_BufferfType",
    "DXVA2_ConfigPictureDecode",
    "DXVA2_DECODE_GET_DRIVER_HANDLE",
    "DXVA2_DECODE_SPECIFY_ENCRYPTED_BLOCKS",
    "DXVA2_DeblockingControlBufferType",
    "DXVA2_DecodeBufferDesc",
    "DXVA2_DecodeExecuteParams",
    "DXVA2_DecodeExtensionData",
    "DXVA2_DeinterlaceTech",
    "DXVA2_DeinterlaceTech_BOBLineReplicate",
    "DXVA2_DeinterlaceTech_BOBVerticalStretch",
    "DXVA2_DeinterlaceTech_BOBVerticalStretch4Tap",
    "DXVA2_DeinterlaceTech_EdgeFiltering",
    "DXVA2_DeinterlaceTech_FieldAdaptive",
    "DXVA2_DeinterlaceTech_InverseTelecine",
    "DXVA2_DeinterlaceTech_Mask",
    "DXVA2_DeinterlaceTech_MedianFiltering",
    "DXVA2_DeinterlaceTech_MotionVectorSteered",
    "DXVA2_DeinterlaceTech_PixelAdaptive",
    "DXVA2_DeinterlaceTech_Unknown",
    "DXVA2_DestData",
    "DXVA2_DestData_Mask",
    "DXVA2_DestData_RFF",
    "DXVA2_DestData_RFF_TFF_Present",
    "DXVA2_DestData_TFF",
    "DXVA2_DetailFilterChromaLevel",
    "DXVA2_DetailFilterChromaRadius",
    "DXVA2_DetailFilterChromaThreshold",
    "DXVA2_DetailFilterLumaLevel",
    "DXVA2_DetailFilterLumaRadius",
    "DXVA2_DetailFilterLumaThreshold",
    "DXVA2_DetailFilterTech",
    "DXVA2_DetailFilterTech_Edge",
    "DXVA2_DetailFilterTech_Mask",
    "DXVA2_DetailFilterTech_Sharpening",
    "DXVA2_DetailFilterTech_Unknown",
    "DXVA2_DetailFilterTech_Unsupported",
    "DXVA2_E_NEW_VIDEO_DEVICE",
    "DXVA2_E_NOT_AVAILABLE",
    "DXVA2_E_NOT_INITIALIZED",
    "DXVA2_E_VIDEO_DEVICE_LOCKED",
    "DXVA2_ExtendedFormat",
    "DXVA2_FilmGrainBuffer",
    "DXVA2_FilterType",
    "DXVA2_FilterValues",
    "DXVA2_Fixed32",
    "DXVA2_Frequency",
    "DXVA2_InverseQuantizationMatrixBufferType",
    "DXVA2_MacroBlockControlBufferType",
    "DXVA2_ModeH264_A",
    "DXVA2_ModeH264_B",
    "DXVA2_ModeH264_C",
    "DXVA2_ModeH264_D",
    "DXVA2_ModeH264_E",
    "DXVA2_ModeH264_F",
    "DXVA2_ModeH264_VLD_Multiview_NoFGT",
    "DXVA2_ModeH264_VLD_Stereo_NoFGT",
    "DXVA2_ModeH264_VLD_Stereo_Progressive_NoFGT",
    "DXVA2_ModeH264_VLD_WithFMOASO_NoFGT",
    "DXVA2_ModeHEVC_VLD_Main",
    "DXVA2_ModeHEVC_VLD_Main10",
    "DXVA2_ModeMPEG1_VLD",
    "DXVA2_ModeMPEG2_IDCT",
    "DXVA2_ModeMPEG2_MoComp",
    "DXVA2_ModeMPEG2_VLD",
    "DXVA2_ModeMPEG2and1_VLD",
    "DXVA2_ModeMPEG4pt2_VLD_AdvSimple_GMC",
    "DXVA2_ModeMPEG4pt2_VLD_AdvSimple_NoGMC",
    "DXVA2_ModeMPEG4pt2_VLD_Simple",
    "DXVA2_ModeVC1_A",
    "DXVA2_ModeVC1_B",
    "DXVA2_ModeVC1_C",
    "DXVA2_ModeVC1_D",
    "DXVA2_ModeVC1_D2010",
    "DXVA2_ModeVP8_VLD",
    "DXVA2_ModeVP9_VLD_10bit_Profile2",
    "DXVA2_ModeVP9_VLD_Profile0",
    "DXVA2_ModeWMV8_A",
    "DXVA2_ModeWMV8_B",
    "DXVA2_ModeWMV9_A",
    "DXVA2_ModeWMV9_B",
    "DXVA2_ModeWMV9_C",
    "DXVA2_MotionVectorBuffer",
    "DXVA2_NoEncrypt",
    "DXVA2_NoiseFilterChromaLevel",
    "DXVA2_NoiseFilterChromaRadius",
    "DXVA2_NoiseFilterChromaThreshold",
    "DXVA2_NoiseFilterLumaLevel",
    "DXVA2_NoiseFilterLumaRadius",
    "DXVA2_NoiseFilterLumaThreshold",
    "DXVA2_NoiseFilterTech",
    "DXVA2_NoiseFilterTech_BlockNoise",
    "DXVA2_NoiseFilterTech_Mask",
    "DXVA2_NoiseFilterTech_Median",
    "DXVA2_NoiseFilterTech_MosquitoNoise",
    "DXVA2_NoiseFilterTech_Temporal",
    "DXVA2_NoiseFilterTech_Unknown",
    "DXVA2_NoiseFilterTech_Unsupported",
    "DXVA2_NominalRange",
    "DXVA2_NominalRangeMask",
    "DXVA2_NominalRange_0_255",
    "DXVA2_NominalRange_16_235",
    "DXVA2_NominalRange_48_208",
    "DXVA2_NominalRange_Normal",
    "DXVA2_NominalRange_Unknown",
    "DXVA2_NominalRange_Wide",
    "DXVA2_PictureParametersBufferType",
    "DXVA2_ProcAmp",
    "DXVA2_ProcAmpValues",
    "DXVA2_ProcAmp_Brightness",
    "DXVA2_ProcAmp_Contrast",
    "DXVA2_ProcAmp_Hue",
    "DXVA2_ProcAmp_Mask",
    "DXVA2_ProcAmp_None",
    "DXVA2_ProcAmp_Saturation",
    "DXVA2_ResidualDifferenceBufferType",
    "DXVA2_SampleData",
    "DXVA2_SampleData_Mask",
    "DXVA2_SampleData_RFF",
    "DXVA2_SampleData_RFF_TFF_Present",
    "DXVA2_SampleData_TFF",
    "DXVA2_SampleFieldInterleavedEvenFirst",
    "DXVA2_SampleFieldInterleavedOddFirst",
    "DXVA2_SampleFieldSingleEven",
    "DXVA2_SampleFieldSingleOdd",
    "DXVA2_SampleFormat",
    "DXVA2_SampleFormatMask",
    "DXVA2_SampleProgressiveFrame",
    "DXVA2_SampleSubStream",
    "DXVA2_SampleUnknown",
    "DXVA2_SliceControlBufferType",
    "DXVA2_SurfaceType",
    "DXVA2_SurfaceType_D3DRenderTargetTexture",
    "DXVA2_SurfaceType_DecoderRenderTarget",
    "DXVA2_SurfaceType_ProcessorRenderTarget",
    "DXVA2_VPDev",
    "DXVA2_VPDev_EmulatedDXVA1",
    "DXVA2_VPDev_HardwareDevice",
    "DXVA2_VPDev_Mask",
    "DXVA2_VPDev_SoftwareDevice",
    "DXVA2_ValueRange",
    "DXVA2_VideoChromaSubSampling",
    "DXVA2_VideoChromaSubsamplingMask",
    "DXVA2_VideoChromaSubsampling_Cosited",
    "DXVA2_VideoChromaSubsampling_DV_PAL",
    "DXVA2_VideoChromaSubsampling_Horizontally_Cosited",
    "DXVA2_VideoChromaSubsampling_MPEG1",
    "DXVA2_VideoChromaSubsampling_MPEG2",
    "DXVA2_VideoChromaSubsampling_ProgressiveChroma",
    "DXVA2_VideoChromaSubsampling_Unknown",
    "DXVA2_VideoChromaSubsampling_Vertically_AlignedChromaPlanes",
    "DXVA2_VideoChromaSubsampling_Vertically_Cosited",
    "DXVA2_VideoDecoderRenderTarget",
    "DXVA2_VideoDesc",
    "DXVA2_VideoLighting",
    "DXVA2_VideoLightingMask",
    "DXVA2_VideoLighting_Unknown",
    "DXVA2_VideoLighting_bright",
    "DXVA2_VideoLighting_dark",
    "DXVA2_VideoLighting_dim",
    "DXVA2_VideoLighting_office",
    "DXVA2_VideoPrimaries",
    "DXVA2_VideoPrimariesMask",
    "DXVA2_VideoPrimaries_BT470_2_SysBG",
    "DXVA2_VideoPrimaries_BT470_2_SysM",
    "DXVA2_VideoPrimaries_BT709",
    "DXVA2_VideoPrimaries_EBU3213",
    "DXVA2_VideoPrimaries_SMPTE170M",
    "DXVA2_VideoPrimaries_SMPTE240M",
    "DXVA2_VideoPrimaries_SMPTE_C",
    "DXVA2_VideoPrimaries_Unknown",
    "DXVA2_VideoPrimaries_reserved",
    "DXVA2_VideoProcBobDevice",
    "DXVA2_VideoProcProgressiveDevice",
    "DXVA2_VideoProcSoftwareDevice",
    "DXVA2_VideoProcess",
    "DXVA2_VideoProcessBltParams",
    "DXVA2_VideoProcess_AlphaBlend",
    "DXVA2_VideoProcess_AlphaBlendExtended",
    "DXVA2_VideoProcess_Constriction",
    "DXVA2_VideoProcess_DetailFilter",
    "DXVA2_VideoProcess_GammaCompensated",
    "DXVA2_VideoProcess_LinearScaling",
    "DXVA2_VideoProcess_MaintainsOriginalFieldData",
    "DXVA2_VideoProcess_Mask",
    "DXVA2_VideoProcess_NoiseFilter",
    "DXVA2_VideoProcess_None",
    "DXVA2_VideoProcess_PlanarAlpha",
    "DXVA2_VideoProcess_StretchX",
    "DXVA2_VideoProcess_StretchY",
    "DXVA2_VideoProcess_SubRects",
    "DXVA2_VideoProcess_SubStreams",
    "DXVA2_VideoProcess_SubStreamsExtended",
    "DXVA2_VideoProcess_YUV2RGB",
    "DXVA2_VideoProcess_YUV2RGBExtended",
    "DXVA2_VideoProcessorCaps",
    "DXVA2_VideoProcessorRenderTarget",
    "DXVA2_VideoRenderTargetType",
    "DXVA2_VideoSample",
    "DXVA2_VideoSoftwareRenderTarget",
    "DXVA2_VideoTransFuncMask",
    "DXVA2_VideoTransFunc_10",
    "DXVA2_VideoTransFunc_18",
    "DXVA2_VideoTransFunc_20",
    "DXVA2_VideoTransFunc_22",
    "DXVA2_VideoTransFunc_240M",
    "DXVA2_VideoTransFunc_28",
    "DXVA2_VideoTransFunc_709",
    "DXVA2_VideoTransFunc_Unknown",
    "DXVA2_VideoTransFunc_sRGB",
    "DXVA2_VideoTransferFunction",
    "DXVA2_VideoTransferMatrix",
    "DXVA2_VideoTransferMatrixMask",
    "DXVA2_VideoTransferMatrix_BT601",
    "DXVA2_VideoTransferMatrix_BT709",
    "DXVA2_VideoTransferMatrix_SMPTE240M",
    "DXVA2_VideoTransferMatrix_Unknown",
    "DXVABufferInfo",
    "DXVACompBufferInfo",
    "DXVAHDControlGuid",
    "DXVAHDETWGUID_CREATEVIDEOPROCESSOR",
    "DXVAHDETWGUID_DESTROYVIDEOPROCESSOR",
    "DXVAHDETWGUID_VIDEOPROCESSBLTHD",
    "DXVAHDETWGUID_VIDEOPROCESSBLTHD_STREAM",
    "DXVAHDETWGUID_VIDEOPROCESSBLTSTATE",
    "DXVAHDETWGUID_VIDEOPROCESSSTREAMSTATE",
    "DXVAHDETW_CREATEVIDEOPROCESSOR",
    "DXVAHDETW_DESTROYVIDEOPROCESSOR",
    "DXVAHDETW_VIDEOPROCESSBLTHD",
    "DXVAHDETW_VIDEOPROCESSBLTHD_STREAM",
    "DXVAHDETW_VIDEOPROCESSBLTSTATE",
    "DXVAHDETW_VIDEOPROCESSSTREAMSTATE",
    "DXVAHDSW_CALLBACKS",
    "DXVAHD_ALPHA_FILL_MODE",
    "DXVAHD_ALPHA_FILL_MODE_BACKGROUND",
    "DXVAHD_ALPHA_FILL_MODE_DESTINATION",
    "DXVAHD_ALPHA_FILL_MODE_OPAQUE",
    "DXVAHD_ALPHA_FILL_MODE_SOURCE_STREAM",
    "DXVAHD_BLT_STATE",
    "DXVAHD_BLT_STATE_ALPHA_FILL",
    "DXVAHD_BLT_STATE_ALPHA_FILL_DATA",
    "DXVAHD_BLT_STATE_BACKGROUND_COLOR",
    "DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA",
    "DXVAHD_BLT_STATE_CONSTRICTION",
    "DXVAHD_BLT_STATE_CONSTRICTION_DATA",
    "DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE",
    "DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA",
    "DXVAHD_BLT_STATE_PRIVATE",
    "DXVAHD_BLT_STATE_PRIVATE_DATA",
    "DXVAHD_BLT_STATE_TARGET_RECT",
    "DXVAHD_BLT_STATE_TARGET_RECT_DATA",
    "DXVAHD_COLOR",
    "DXVAHD_COLOR_RGBA",
    "DXVAHD_COLOR_YCbCrA",
    "DXVAHD_CONTENT_DESC",
    "DXVAHD_CUSTOM_RATE_DATA",
    "DXVAHD_CreateDevice",
    "DXVAHD_DEVICE_CAPS",
    "DXVAHD_DEVICE_CAPS_LINEAR_SPACE",
    "DXVAHD_DEVICE_CAPS_RGB_RANGE_CONVERSION",
    "DXVAHD_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION",
    "DXVAHD_DEVICE_CAPS_xvYCC",
    "DXVAHD_DEVICE_TYPE",
    "DXVAHD_DEVICE_TYPE_HARDWARE",
    "DXVAHD_DEVICE_TYPE_OTHER",
    "DXVAHD_DEVICE_TYPE_REFERENCE",
    "DXVAHD_DEVICE_TYPE_SOFTWARE",
    "DXVAHD_DEVICE_USAGE",
    "DXVAHD_DEVICE_USAGE_OPTIMAL_QUALITY",
    "DXVAHD_DEVICE_USAGE_OPTIMAL_SPEED",
    "DXVAHD_DEVICE_USAGE_PLAYBACK_NORMAL",
    "DXVAHD_FEATURE_CAPS",
    "DXVAHD_FEATURE_CAPS_ALPHA_FILL",
    "DXVAHD_FEATURE_CAPS_ALPHA_PALETTE",
    "DXVAHD_FEATURE_CAPS_CONSTRICTION",
    "DXVAHD_FEATURE_CAPS_LUMA_KEY",
    "DXVAHD_FILTER",
    "DXVAHD_FILTER_ANAMORPHIC_SCALING",
    "DXVAHD_FILTER_BRIGHTNESS",
    "DXVAHD_FILTER_CAPS",
    "DXVAHD_FILTER_CAPS_ANAMORPHIC_SCALING",
    "DXVAHD_FILTER_CAPS_BRIGHTNESS",
    "DXVAHD_FILTER_CAPS_CONTRAST",
    "DXVAHD_FILTER_CAPS_EDGE_ENHANCEMENT",
    "DXVAHD_FILTER_CAPS_HUE",
    "DXVAHD_FILTER_CAPS_NOISE_REDUCTION",
    "DXVAHD_FILTER_CAPS_SATURATION",
    "DXVAHD_FILTER_CONTRAST",
    "DXVAHD_FILTER_EDGE_ENHANCEMENT",
    "DXVAHD_FILTER_HUE",
    "DXVAHD_FILTER_NOISE_REDUCTION",
    "DXVAHD_FILTER_RANGE_DATA",
    "DXVAHD_FILTER_SATURATION",
    "DXVAHD_FRAME_FORMAT",
    "DXVAHD_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST",
    "DXVAHD_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST",
    "DXVAHD_FRAME_FORMAT_PROGRESSIVE",
    "DXVAHD_INPUT_FORMAT_CAPS",
    "DXVAHD_INPUT_FORMAT_CAPS_PALETTE_INTERLACED",
    "DXVAHD_INPUT_FORMAT_CAPS_RGB_INTERLACED",
    "DXVAHD_INPUT_FORMAT_CAPS_RGB_LUMA_KEY",
    "DXVAHD_INPUT_FORMAT_CAPS_RGB_PROCAMP",
    "DXVAHD_ITELECINE_CAPS",
    "DXVAHD_ITELECINE_CAPS_22",
    "DXVAHD_ITELECINE_CAPS_222222222223",
    "DXVAHD_ITELECINE_CAPS_2224",
    "DXVAHD_ITELECINE_CAPS_2332",
    "DXVAHD_ITELECINE_CAPS_32",
    "DXVAHD_ITELECINE_CAPS_32322",
    "DXVAHD_ITELECINE_CAPS_55",
    "DXVAHD_ITELECINE_CAPS_64",
    "DXVAHD_ITELECINE_CAPS_87",
    "DXVAHD_ITELECINE_CAPS_OTHER",
    "DXVAHD_OUTPUT_RATE",
    "DXVAHD_OUTPUT_RATE_CUSTOM",
    "DXVAHD_OUTPUT_RATE_HALF",
    "DXVAHD_OUTPUT_RATE_NORMAL",
    "DXVAHD_PROCESSOR_CAPS",
    "DXVAHD_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE",
    "DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BLEND",
    "DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BOB",
    "DXVAHD_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION",
    "DXVAHD_PROCESSOR_CAPS_FRAME_RATE_CONVERSION",
    "DXVAHD_PROCESSOR_CAPS_INVERSE_TELECINE",
    "DXVAHD_RATIONAL",
    "DXVAHD_STREAM_DATA",
    "DXVAHD_STREAM_STATE",
    "DXVAHD_STREAM_STATE_ALPHA",
    "DXVAHD_STREAM_STATE_ALPHA_DATA",
    "DXVAHD_STREAM_STATE_ASPECT_RATIO",
    "DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA",
    "DXVAHD_STREAM_STATE_D3DFORMAT",
    "DXVAHD_STREAM_STATE_D3DFORMAT_DATA",
    "DXVAHD_STREAM_STATE_DESTINATION_RECT",
    "DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA",
    "DXVAHD_STREAM_STATE_FILTER_ANAMORPHIC_SCALING",
    "DXVAHD_STREAM_STATE_FILTER_BRIGHTNESS",
    "DXVAHD_STREAM_STATE_FILTER_CONTRAST",
    "DXVAHD_STREAM_STATE_FILTER_DATA",
    "DXVAHD_STREAM_STATE_FILTER_EDGE_ENHANCEMENT",
    "DXVAHD_STREAM_STATE_FILTER_HUE",
    "DXVAHD_STREAM_STATE_FILTER_NOISE_REDUCTION",
    "DXVAHD_STREAM_STATE_FILTER_SATURATION",
    "DXVAHD_STREAM_STATE_FRAME_FORMAT",
    "DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA",
    "DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE",
    "DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA",
    "DXVAHD_STREAM_STATE_LUMA_KEY",
    "DXVAHD_STREAM_STATE_LUMA_KEY_DATA",
    "DXVAHD_STREAM_STATE_OUTPUT_RATE",
    "DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA",
    "DXVAHD_STREAM_STATE_PALETTE",
    "DXVAHD_STREAM_STATE_PALETTE_DATA",
    "DXVAHD_STREAM_STATE_PRIVATE",
    "DXVAHD_STREAM_STATE_PRIVATE_DATA",
    "DXVAHD_STREAM_STATE_PRIVATE_IVTC",
    "DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA",
    "DXVAHD_STREAM_STATE_SOURCE_RECT",
    "DXVAHD_STREAM_STATE_SOURCE_RECT_DATA",
    "DXVAHD_SURFACE_TYPE",
    "DXVAHD_SURFACE_TYPE_VIDEO_INPUT",
    "DXVAHD_SURFACE_TYPE_VIDEO_INPUT_PRIVATE",
    "DXVAHD_SURFACE_TYPE_VIDEO_OUTPUT",
    "DXVAHD_VPCAPS",
    "DXVAHD_VPDEVCAPS",
    "DXVAUncompDataInfo",
    "DXVA_AYUVsample2",
    "DXVA_BufferDescription",
    "DXVA_COPPCommand",
    "DXVA_COPPSignature",
    "DXVA_COPPStatusInput",
    "DXVA_COPPStatusOutput",
    "DXVA_ConfigPictureDecode",
    "DXVA_DeinterlaceBlt",
    "DXVA_DeinterlaceBltEx",
    "DXVA_DeinterlaceBltEx32",
    "DXVA_DeinterlaceCaps",
    "DXVA_DeinterlaceQueryAvailableModes",
    "DXVA_DeinterlaceQueryModeCaps",
    "DXVA_DeinterlaceTech",
    "DXVA_DeinterlaceTech_BOBLineReplicate",
    "DXVA_DeinterlaceTech_BOBVerticalStretch",
    "DXVA_DeinterlaceTech_BOBVerticalStretch4Tap",
    "DXVA_DeinterlaceTech_EdgeFiltering",
    "DXVA_DeinterlaceTech_FieldAdaptive",
    "DXVA_DeinterlaceTech_MedianFiltering",
    "DXVA_DeinterlaceTech_MotionVectorSteered",
    "DXVA_DeinterlaceTech_PixelAdaptive",
    "DXVA_DeinterlaceTech_Unknown",
    "DXVA_DestinationFlagMask",
    "DXVA_DestinationFlag_Alpha_Changed",
    "DXVA_DestinationFlag_Background_Changed",
    "DXVA_DestinationFlag_ColorData_Changed",
    "DXVA_DestinationFlag_TargetRect_Changed",
    "DXVA_DestinationFlags",
    "DXVA_ExtendedFormat",
    "DXVA_Frequency",
    "DXVA_NominalRange",
    "DXVA_NominalRangeMask",
    "DXVA_NominalRangeShift",
    "DXVA_NominalRange_0_255",
    "DXVA_NominalRange_16_235",
    "DXVA_NominalRange_48_208",
    "DXVA_NominalRange_Normal",
    "DXVA_NominalRange_Unknown",
    "DXVA_NominalRange_Wide",
    "DXVA_PictureParameters",
    "DXVA_ProcAmpControlBlt",
    "DXVA_ProcAmpControlCaps",
    "DXVA_ProcAmpControlProp",
    "DXVA_ProcAmpControlQueryRange",
    "DXVA_ProcAmp_Brightness",
    "DXVA_ProcAmp_Contrast",
    "DXVA_ProcAmp_Hue",
    "DXVA_ProcAmp_None",
    "DXVA_ProcAmp_Saturation",
    "DXVA_SampleFieldInterleavedEvenFirst",
    "DXVA_SampleFieldInterleavedOddFirst",
    "DXVA_SampleFieldSingleEven",
    "DXVA_SampleFieldSingleOdd",
    "DXVA_SampleFlag_ColorData_Changed",
    "DXVA_SampleFlag_DstRect_Changed",
    "DXVA_SampleFlag_Palette_Changed",
    "DXVA_SampleFlag_SrcRect_Changed",
    "DXVA_SampleFlags",
    "DXVA_SampleFlagsMask",
    "DXVA_SampleFormat",
    "DXVA_SampleFormatMask",
    "DXVA_SamplePreviousFrame",
    "DXVA_SampleProgressiveFrame",
    "DXVA_SampleSubStream",
    "DXVA_SampleUnknown",
    "DXVA_VideoChromaSubsampling",
    "DXVA_VideoChromaSubsamplingMask",
    "DXVA_VideoChromaSubsamplingShift",
    "DXVA_VideoChromaSubsampling_Cosited",
    "DXVA_VideoChromaSubsampling_DV_PAL",
    "DXVA_VideoChromaSubsampling_Horizontally_Cosited",
    "DXVA_VideoChromaSubsampling_MPEG1",
    "DXVA_VideoChromaSubsampling_MPEG2",
    "DXVA_VideoChromaSubsampling_ProgressiveChroma",
    "DXVA_VideoChromaSubsampling_Unknown",
    "DXVA_VideoChromaSubsampling_Vertically_AlignedChromaPlanes",
    "DXVA_VideoChromaSubsampling_Vertically_Cosited",
    "DXVA_VideoDesc",
    "DXVA_VideoLighting",
    "DXVA_VideoLightingMask",
    "DXVA_VideoLightingShift",
    "DXVA_VideoLighting_Unknown",
    "DXVA_VideoLighting_bright",
    "DXVA_VideoLighting_dark",
    "DXVA_VideoLighting_dim",
    "DXVA_VideoLighting_office",
    "DXVA_VideoPrimaries",
    "DXVA_VideoPrimariesMask",
    "DXVA_VideoPrimariesShift",
    "DXVA_VideoPrimaries_BT470_2_SysBG",
    "DXVA_VideoPrimaries_BT470_2_SysM",
    "DXVA_VideoPrimaries_BT709",
    "DXVA_VideoPrimaries_EBU3213",
    "DXVA_VideoPrimaries_SMPTE170M",
    "DXVA_VideoPrimaries_SMPTE240M",
    "DXVA_VideoPrimaries_SMPTE_C",
    "DXVA_VideoPrimaries_Unknown",
    "DXVA_VideoPrimaries_reserved",
    "DXVA_VideoProcessCaps",
    "DXVA_VideoProcess_AlphaBlend",
    "DXVA_VideoProcess_AlphaBlendExtended",
    "DXVA_VideoProcess_None",
    "DXVA_VideoProcess_StretchX",
    "DXVA_VideoProcess_StretchY",
    "DXVA_VideoProcess_SubRects",
    "DXVA_VideoProcess_SubStreams",
    "DXVA_VideoProcess_SubStreamsExtended",
    "DXVA_VideoProcess_YUV2RGB",
    "DXVA_VideoProcess_YUV2RGBExtended",
    "DXVA_VideoPropertyRange",
    "DXVA_VideoSample",
    "DXVA_VideoSample2",
    "DXVA_VideoSample32",
    "DXVA_VideoTransFuncMask",
    "DXVA_VideoTransFuncShift",
    "DXVA_VideoTransFunc_10",
    "DXVA_VideoTransFunc_18",
    "DXVA_VideoTransFunc_20",
    "DXVA_VideoTransFunc_22",
    "DXVA_VideoTransFunc_22_240M",
    "DXVA_VideoTransFunc_22_709",
    "DXVA_VideoTransFunc_22_8bit_sRGB",
    "DXVA_VideoTransFunc_28",
    "DXVA_VideoTransFunc_Unknown",
    "DXVA_VideoTransferFunction",
    "DXVA_VideoTransferMatrix",
    "DXVA_VideoTransferMatrixMask",
    "DXVA_VideoTransferMatrixShift",
    "DXVA_VideoTransferMatrix_BT601",
    "DXVA_VideoTransferMatrix_BT709",
    "DXVA_VideoTransferMatrix_SMPTE240M",
    "DXVA_VideoTransferMatrix_Unknown",
    "DXVAp_DeinterlaceBobDevice",
    "DXVAp_DeinterlaceContainerDevice",
    "DXVAp_ModeMPEG2_A",
    "DXVAp_ModeMPEG2_C",
    "DXVAp_NoEncrypt",
    "DeviceStreamState",
    "DeviceStreamState_Disabled",
    "DeviceStreamState_Pause",
    "DeviceStreamState_Run",
    "DeviceStreamState_Stop",
    "DigitalWindowSetting",
    "EAllocationType",
    "EAllocationType_eAllocationTypeDynamic",
    "EAllocationType_eAllocationTypeIgnore",
    "EAllocationType_eAllocationTypePageable",
    "EAllocationType_eAllocationTypeRT",
    "ENCAPIPARAM_BITRATE",
    "ENCAPIPARAM_BITRATE_MODE",
    "ENCAPIPARAM_PEAK_BITRATE",
    "ENCAPIPARAM_SAP_MODE",
    "EVRConfig_ForceBatching",
    "EVRConfig_ForceBob",
    "EVRConfig_ForceHalfInterlace",
    "EVRConfig_ForceScaling",
    "EVRConfig_ForceThrottle",
    "EVRFilterConfigPrefs",
    "EVRFilterConfigPrefs_EnableQoS",
    "EVRFilterConfigPrefs_Mask",
    "E_TOCPARSER_INVALIDASFFILE",
    "E_TOCPARSER_INVALIDRIFFFILE",
    "FACILITY_MF",
    "FACILITY_MF_WIN32",
    "FILE_ACCESSMODE",
    "FILE_OPENMODE",
    "FORMAT_525WSS",
    "FORMAT_AnalogVideo",
    "FORMAT_CAPTIONED_H264VIDEO",
    "FORMAT_CAPTIONED_MPEG2VIDEO",
    "FORMAT_CC_CONTAINER",
    "FORMAT_DvInfo",
    "FORMAT_MFVideoFormat",
    "FORMAT_MPEGStreams",
    "FORMAT_MPEGVideo",
    "FORMAT_None",
    "FORMAT_VideoInfo",
    "FORMAT_VideoInfo2",
    "FORMAT_WaveFormatEx",
    "GUID_NativeDeviceService",
    "GUID_PlayToService",
    "IAdvancedMediaCapture",
    "IAdvancedMediaCaptureInitializationSettings",
    "IAdvancedMediaCaptureSettings",
    "IAudioSourceProvider",
    "IClusterDetector",
    "ICodecAPI",
    "ID3D12VideoDecodeCommandList",
    "ID3D12VideoDecodeCommandList1",
    "ID3D12VideoDecodeCommandList2",
    "ID3D12VideoDecoder",
    "ID3D12VideoDecoder1",
    "ID3D12VideoDecoderHeap",
    "ID3D12VideoDecoderHeap1",
    "ID3D12VideoDevice",
    "ID3D12VideoDevice1",
    "ID3D12VideoDevice2",
    "ID3D12VideoDevice3",
    "ID3D12VideoEncodeCommandList",
    "ID3D12VideoEncodeCommandList1",
    "ID3D12VideoEncodeCommandList2",
    "ID3D12VideoEncoder",
    "ID3D12VideoEncoderHeap",
    "ID3D12VideoExtensionCommand",
    "ID3D12VideoMotionEstimator",
    "ID3D12VideoMotionVectorHeap",
    "ID3D12VideoProcessCommandList",
    "ID3D12VideoProcessCommandList1",
    "ID3D12VideoProcessCommandList2",
    "ID3D12VideoProcessor",
    "ID3D12VideoProcessor1",
    "IDXVAHD_Device",
    "IDXVAHD_VideoProcessor",
    "IDirect3D9ExOverlayExtension",
    "IDirect3DAuthenticatedChannel9",
    "IDirect3DCryptoSession9",
    "IDirect3DDevice9Video",
    "IDirect3DDeviceManager9",
    "IDirectXVideoAccelerationService",
    "IDirectXVideoDecoder",
    "IDirectXVideoDecoderService",
    "IDirectXVideoMemoryConfiguration",
    "IDirectXVideoProcessor",
    "IDirectXVideoProcessorService",
    "IEVRFilterConfig",
    "IEVRFilterConfigEx",
    "IEVRTrustedVideoPlugin",
    "IEVRVideoStreamControl",
    "IFileClient",
    "IFileIo",
    "IMF2DBuffer",
    "IMF2DBuffer2",
    "IMFASFContentInfo",
    "IMFASFIndexer",
    "IMFASFMultiplexer",
    "IMFASFMutualExclusion",
    "IMFASFProfile",
    "IMFASFSplitter",
    "IMFASFStreamConfig",
    "IMFASFStreamPrioritization",
    "IMFASFStreamSelector",
    "IMFActivate",
    "IMFAsyncCallback",
    "IMFAsyncCallbackLogging",
    "IMFAsyncResult",
    "IMFAttributes",
    "IMFAudioMediaType",
    "IMFAudioPolicy",
    "IMFAudioStreamVolume",
    "IMFBufferListNotify",
    "IMFByteStream",
    "IMFByteStreamBuffering",
    "IMFByteStreamCacheControl",
    "IMFByteStreamCacheControl2",
    "IMFByteStreamHandler",
    "IMFByteStreamProxyClassFactory",
    "IMFByteStreamTimeSeek",
    "IMFCameraOcclusionStateMonitor",
    "IMFCameraOcclusionStateReport",
    "IMFCameraOcclusionStateReportCallback",
    "IMFCameraSyncObject",
    "IMFCaptureEngine",
    "IMFCaptureEngineClassFactory",
    "IMFCaptureEngineOnEventCallback",
    "IMFCaptureEngineOnSampleCallback",
    "IMFCaptureEngineOnSampleCallback2",
    "IMFCapturePhotoConfirmation",
    "IMFCapturePhotoSink",
    "IMFCapturePreviewSink",
    "IMFCaptureRecordSink",
    "IMFCaptureSink",
    "IMFCaptureSink2",
    "IMFCaptureSource",
    "IMFCdmSuspendNotify",
    "IMFClock",
    "IMFClockConsumer",
    "IMFClockStateSink",
    "IMFCollection",
    "IMFContentDecryptionModule",
    "IMFContentDecryptionModuleAccess",
    "IMFContentDecryptionModuleFactory",
    "IMFContentDecryptionModuleSession",
    "IMFContentDecryptionModuleSessionCallbacks",
    "IMFContentDecryptorContext",
    "IMFContentEnabler",
    "IMFContentProtectionDevice",
    "IMFContentProtectionManager",
    "IMFD3D12SynchronizationObject",
    "IMFD3D12SynchronizationObjectCommands",
    "IMFDLNASinkInit",
    "IMFDRMNetHelper",
    "IMFDXGIBuffer",
    "IMFDXGIDeviceManager",
    "IMFDXGIDeviceManagerSource",
    "IMFDesiredSample",
    "IMFDeviceTransform",
    "IMFDeviceTransformCallback",
    "IMFExtendedCameraControl",
    "IMFExtendedCameraController",
    "IMFExtendedCameraIntrinsicModel",
    "IMFExtendedCameraIntrinsics",
    "IMFExtendedCameraIntrinsicsDistortionModel6KT",
    "IMFExtendedCameraIntrinsicsDistortionModelArcTan",
    "IMFExtendedDRMTypeSupport",
    "IMFFieldOfUseMFTUnlock",
    "IMFFinalizableMediaSink",
    "IMFGetService",
    "IMFHDCPStatus",
    "IMFHttpDownloadRequest",
    "IMFHttpDownloadSession",
    "IMFHttpDownloadSessionProvider",
    "IMFImageSharingEngine",
    "IMFImageSharingEngineClassFactory",
    "IMFInputTrustAuthority",
    "IMFLocalMFTRegistration",
    "IMFMediaBuffer",
    "IMFMediaEngine",
    "IMFMediaEngineAudioEndpointId",
    "IMFMediaEngineClassFactory",
    "IMFMediaEngineClassFactory2",
    "IMFMediaEngineClassFactory3",
    "IMFMediaEngineClassFactory4",
    "IMFMediaEngineClassFactoryEx",
    "IMFMediaEngineEME",
    "IMFMediaEngineEMENotify",
    "IMFMediaEngineEx",
    "IMFMediaEngineExtension",
    "IMFMediaEngineNeedKeyNotify",
    "IMFMediaEngineNotify",
    "IMFMediaEngineOPMInfo",
    "IMFMediaEngineProtectedContent",
    "IMFMediaEngineSrcElements",
    "IMFMediaEngineSrcElementsEx",
    "IMFMediaEngineSupportsSourceTransfer",
    "IMFMediaEngineTransferSource",
    "IMFMediaEngineWebSupport",
    "IMFMediaError",
    "IMFMediaEvent",
    "IMFMediaEventGenerator",
    "IMFMediaEventQueue",
    "IMFMediaKeySession",
    "IMFMediaKeySession2",
    "IMFMediaKeySessionNotify",
    "IMFMediaKeySessionNotify2",
    "IMFMediaKeySystemAccess",
    "IMFMediaKeys",
    "IMFMediaKeys2",
    "IMFMediaSession",
    "IMFMediaSharingEngine",
    "IMFMediaSharingEngineClassFactory",
    "IMFMediaSink",
    "IMFMediaSinkPreroll",
    "IMFMediaSource",
    "IMFMediaSource2",
    "IMFMediaSourceEx",
    "IMFMediaSourceExtension",
    "IMFMediaSourceExtensionLiveSeekableRange",
    "IMFMediaSourceExtensionNotify",
    "IMFMediaSourcePresentationProvider",
    "IMFMediaSourceTopologyProvider",
    "IMFMediaStream",
    "IMFMediaStream2",
    "IMFMediaStreamSourceSampleRequest",
    "IMFMediaTimeRange",
    "IMFMediaType",
    "IMFMediaTypeHandler",
    "IMFMetadata",
    "IMFMetadataProvider",
    "IMFMuxStreamAttributesManager",
    "IMFMuxStreamMediaTypeManager",
    "IMFMuxStreamSampleManager",
    "IMFNetCredential",
    "IMFNetCredentialCache",
    "IMFNetCredentialManager",
    "IMFNetCrossOriginSupport",
    "IMFNetProxyLocator",
    "IMFNetProxyLocatorFactory",
    "IMFNetResourceFilter",
    "IMFNetSchemeHandlerConfig",
    "IMFObjectReferenceStream",
    "IMFOutputPolicy",
    "IMFOutputSchema",
    "IMFOutputTrustAuthority",
    "IMFPMPClient",
    "IMFPMPClientApp",
    "IMFPMPHost",
    "IMFPMPHostApp",
    "IMFPMPServer",
    "IMFPMediaItem",
    "IMFPMediaPlayer",
    "IMFPMediaPlayerCallback",
    "IMFPluginControl",
    "IMFPluginControl2",
    "IMFPresentationClock",
    "IMFPresentationDescriptor",
    "IMFPresentationTimeSource",
    "IMFProtectedEnvironmentAccess",
    "IMFQualityAdvise",
    "IMFQualityAdvise2",
    "IMFQualityAdviseLimits",
    "IMFQualityManager",
    "IMFRateControl",
    "IMFRateSupport",
    "IMFReadWriteClassFactory",
    "IMFRealTimeClient",
    "IMFRealTimeClientEx",
    "IMFRelativePanelReport",
    "IMFRelativePanelWatcher",
    "IMFRemoteAsyncCallback",
    "IMFRemoteDesktopPlugin",
    "IMFRemoteProxy",
    "IMFSAMIStyle",
    "IMFSSLCertificateManager",
    "IMFSample",
    "IMFSampleAllocatorControl",
    "IMFSampleGrabberSinkCallback",
    "IMFSampleGrabberSinkCallback2",
    "IMFSampleOutputStream",
    "IMFSampleProtection",
    "IMFSaveJob",
    "IMFSchemeHandler",
    "IMFSecureBuffer",
    "IMFSecureChannel",
    "IMFSeekInfo",
    "IMFSensorActivitiesReport",
    "IMFSensorActivitiesReportCallback",
    "IMFSensorActivityMonitor",
    "IMFSensorActivityReport",
    "IMFSensorDevice",
    "IMFSensorGroup",
    "IMFSensorProcessActivity",
    "IMFSensorProfile",
    "IMFSensorProfileCollection",
    "IMFSensorStream",
    "IMFSensorTransformFactory",
    "IMFSequencerSource",
    "IMFSharingEngineClassFactory",
    "IMFShutdown",
    "IMFSignedLibrary",
    "IMFSimpleAudioVolume",
    "IMFSinkWriter",
    "IMFSinkWriterCallback",
    "IMFSinkWriterCallback2",
    "IMFSinkWriterEncoderConfig",
    "IMFSinkWriterEx",
    "IMFSourceBuffer",
    "IMFSourceBufferAppendMode",
    "IMFSourceBufferList",
    "IMFSourceBufferNotify",
    "IMFSourceOpenMonitor",
    "IMFSourceReader",
    "IMFSourceReaderCallback",
    "IMFSourceReaderCallback2",
    "IMFSourceReaderEx",
    "IMFSourceResolver",
    "IMFSpatialAudioObjectBuffer",
    "IMFSpatialAudioSample",
    "IMFStreamDescriptor",
    "IMFStreamSink",
    "IMFStreamingSinkConfig",
    "IMFSystemId",
    "IMFTimecodeTranslate",
    "IMFTimedText",
    "IMFTimedTextBinary",
    "IMFTimedTextBouten",
    "IMFTimedTextCue",
    "IMFTimedTextCueList",
    "IMFTimedTextFormattedText",
    "IMFTimedTextNotify",
    "IMFTimedTextRegion",
    "IMFTimedTextRuby",
    "IMFTimedTextStyle",
    "IMFTimedTextStyle2",
    "IMFTimedTextTrack",
    "IMFTimedTextTrackList",
    "IMFTimer",
    "IMFTopoLoader",
    "IMFTopology",
    "IMFTopologyNode",
    "IMFTopologyNodeAttributeEditor",
    "IMFTopologyServiceLookup",
    "IMFTopologyServiceLookupClient",
    "IMFTrackedSample",
    "IMFTranscodeProfile",
    "IMFTranscodeSinkInfoProvider",
    "IMFTransform",
    "IMFTrustedInput",
    "IMFTrustedOutput",
    "IMFVideoCaptureSampleAllocator",
    "IMFVideoDeviceID",
    "IMFVideoDisplayControl",
    "IMFVideoMediaType",
    "IMFVideoMixerBitmap",
    "IMFVideoMixerControl",
    "IMFVideoMixerControl2",
    "IMFVideoPositionMapper",
    "IMFVideoPresenter",
    "IMFVideoProcessor",
    "IMFVideoProcessorControl",
    "IMFVideoProcessorControl2",
    "IMFVideoProcessorControl3",
    "IMFVideoRenderer",
    "IMFVideoRendererEffectControl",
    "IMFVideoSampleAllocator",
    "IMFVideoSampleAllocatorCallback",
    "IMFVideoSampleAllocatorEx",
    "IMFVideoSampleAllocatorNotify",
    "IMFVideoSampleAllocatorNotifyEx",
    "IMFVirtualCamera",
    "IMFWorkQueueServices",
    "IMFWorkQueueServicesEx",
    "IOPMVideoOutput",
    "IPlayToControl",
    "IPlayToControlWithCapabilities",
    "IPlayToSourceClassFactory",
    "IToc",
    "ITocCollection",
    "ITocEntry",
    "ITocEntryList",
    "ITocParser",
    "IValidateBinding",
    "IWMCodecLeakyBucket",
    "IWMCodecOutputTimestamp",
    "IWMCodecPrivateData",
    "IWMCodecProps",
    "IWMCodecStrings",
    "IWMColorConvProps",
    "IWMColorLegalizerProps",
    "IWMFrameInterpProps",
    "IWMInterlaceProps",
    "IWMResamplerProps",
    "IWMResizerProps",
    "IWMSampleExtensionSupport",
    "IWMValidate",
    "IWMVideoDecoderHurryup",
    "IWMVideoDecoderReconBuffer",
    "IWMVideoForceKeyFrame",
    "KSMETHOD_OPMVIDEOOUTPUT",
    "KSMETHOD_OPMVIDEOOUTPUT_FINISHINITIALIZATION",
    "KSMETHOD_OPMVIDEOOUTPUT_GETINFORMATION",
    "KSMETHOD_OPMVIDEOOUTPUT_STARTINITIALIZATION",
    "KSPROPSETID_OPMVideoOutput",
    "LOCAL_D3DFMT_DEFINES",
    "LOOK_DOWNSTREAM_ONLY",
    "LOOK_UPSTREAM_ONLY",
    "MACROBLOCK_DATA",
    "MACROBLOCK_FLAG_DIRTY",
    "MACROBLOCK_FLAG_HAS_MOTION_VECTOR",
    "MACROBLOCK_FLAG_HAS_QP",
    "MACROBLOCK_FLAG_MOTION",
    "MACROBLOCK_FLAG_SKIP",
    "MACROBLOCK_FLAG_VIDEO",
    "MAX_SUBSTREAMS",
    "MEDIASINK_CANNOT_MATCH_CLOCK",
    "MEDIASINK_CAN_PREROLL",
    "MEDIASINK_CLOCK_REQUIRED",
    "MEDIASINK_FIXED_STREAMS",
    "MEDIASINK_RATELESS",
    "MEDIASINK_REQUIRE_REFERENCE_MEDIATYPE",
    "MEDIASUBTYPE_420O",
    "MEDIASUBTYPE_708_608Data",
    "MEDIASUBTYPE_A2B10G10R10",
    "MEDIASUBTYPE_A2R10G10B10",
    "MEDIASUBTYPE_AI44",
    "MEDIASUBTYPE_AIFF",
    "MEDIASUBTYPE_ARGB1555",
    "MEDIASUBTYPE_ARGB1555_D3D_DX7_RT",
    "MEDIASUBTYPE_ARGB1555_D3D_DX9_RT",
    "MEDIASUBTYPE_ARGB32",
    "MEDIASUBTYPE_ARGB32_D3D_DX7_RT",
    "MEDIASUBTYPE_ARGB32_D3D_DX9_RT",
    "MEDIASUBTYPE_ARGB4444",
    "MEDIASUBTYPE_ARGB4444_D3D_DX7_RT",
    "MEDIASUBTYPE_ARGB4444_D3D_DX9_RT",
    "MEDIASUBTYPE_AU",
    "MEDIASUBTYPE_AVC1",
    "MEDIASUBTYPE_AYUV",
    "MEDIASUBTYPE_AnalogVideo_NTSC_M",
    "MEDIASUBTYPE_AnalogVideo_PAL_B",
    "MEDIASUBTYPE_AnalogVideo_PAL_D",
    "MEDIASUBTYPE_AnalogVideo_PAL_G",
    "MEDIASUBTYPE_AnalogVideo_PAL_H",
    "MEDIASUBTYPE_AnalogVideo_PAL_I",
    "MEDIASUBTYPE_AnalogVideo_PAL_M",
    "MEDIASUBTYPE_AnalogVideo_PAL_N",
    "MEDIASUBTYPE_AnalogVideo_PAL_N_COMBO",
    "MEDIASUBTYPE_AnalogVideo_SECAM_B",
    "MEDIASUBTYPE_AnalogVideo_SECAM_D",
    "MEDIASUBTYPE_AnalogVideo_SECAM_G",
    "MEDIASUBTYPE_AnalogVideo_SECAM_H",
    "MEDIASUBTYPE_AnalogVideo_SECAM_K",
    "MEDIASUBTYPE_AnalogVideo_SECAM_K1",
    "MEDIASUBTYPE_AnalogVideo_SECAM_L",
    "MEDIASUBTYPE_Asf",
    "MEDIASUBTYPE_Avi",
    "MEDIASUBTYPE_CC_CONTAINER",
    "MEDIASUBTYPE_CFCC",
    "MEDIASUBTYPE_CLJR",
    "MEDIASUBTYPE_CLPL",
    "MEDIASUBTYPE_CPLA",
    "MEDIASUBTYPE_DOLBY_AC3_SPDIF",
    "MEDIASUBTYPE_DOLBY_DDPLUS",
    "MEDIASUBTYPE_DOLBY_TRUEHD",
    "MEDIASUBTYPE_DRM_Audio",
    "MEDIASUBTYPE_DTS2",
    "MEDIASUBTYPE_DTS_HD",
    "MEDIASUBTYPE_DTS_HD_HRA",
    "MEDIASUBTYPE_DVB_SUBTITLES",
    "MEDIASUBTYPE_DVCS",
    "MEDIASUBTYPE_DVM",
    "MEDIASUBTYPE_DVSD",
    "MEDIASUBTYPE_DssAudio",
    "MEDIASUBTYPE_DssVideo",
    "MEDIASUBTYPE_DtvCcData",
    "MEDIASUBTYPE_H264",
    "MEDIASUBTYPE_I420",
    "MEDIASUBTYPE_IA44",
    "MEDIASUBTYPE_IEEE_FLOAT",
    "MEDIASUBTYPE_IF09",
    "MEDIASUBTYPE_IJPG",
    "MEDIASUBTYPE_IMC1",
    "MEDIASUBTYPE_IMC2",
    "MEDIASUBTYPE_IMC3",
    "MEDIASUBTYPE_IMC4",
    "MEDIASUBTYPE_ISDB_CAPTIONS",
    "MEDIASUBTYPE_ISDB_SUPERIMPOSE",
    "MEDIASUBTYPE_IYUV",
    "MEDIASUBTYPE_Line21_BytePair",
    "MEDIASUBTYPE_Line21_GOPPacket",
    "MEDIASUBTYPE_Line21_VBIRawData",
    "MEDIASUBTYPE_M4S2",
    "MEDIASUBTYPE_MDVF",
    "MEDIASUBTYPE_MJPG",
    "MEDIASUBTYPE_MP42",
    "MEDIASUBTYPE_MP43",
    "MEDIASUBTYPE_MP4S",
    "MEDIASUBTYPE_MPEG1Audio",
    "MEDIASUBTYPE_MPEG1AudioPayload",
    "MEDIASUBTYPE_MPEG1Packet",
    "MEDIASUBTYPE_MPEG1Payload",
    "MEDIASUBTYPE_MPEG1System",
    "MEDIASUBTYPE_MPEG1Video",
    "MEDIASUBTYPE_MPEG1VideoCD",
    "MEDIASUBTYPE_MPEG_ADTS_AAC",
    "MEDIASUBTYPE_MPEG_HEAAC",
    "MEDIASUBTYPE_MPEG_LOAS",
    "MEDIASUBTYPE_MPEG_RAW_AAC",
    "MEDIASUBTYPE_MPG4",
    "MEDIASUBTYPE_MSAUDIO1",
    "MEDIASUBTYPE_MSS1",
    "MEDIASUBTYPE_MSS2",
    "MEDIASUBTYPE_NOKIA_MPEG_ADTS_AAC",
    "MEDIASUBTYPE_NOKIA_MPEG_RAW_AAC",
    "MEDIASUBTYPE_NV11",
    "MEDIASUBTYPE_NV12",
    "MEDIASUBTYPE_NV24",
    "MEDIASUBTYPE_None",
    "MEDIASUBTYPE_Overlay",
    "MEDIASUBTYPE_P010",
    "MEDIASUBTYPE_P016",
    "MEDIASUBTYPE_P208",
    "MEDIASUBTYPE_P210",
    "MEDIASUBTYPE_P216",
    "MEDIASUBTYPE_P408",
    "MEDIASUBTYPE_PCM",
    "MEDIASUBTYPE_PCMAudio_Obsolete",
    "MEDIASUBTYPE_Plum",
    "MEDIASUBTYPE_QTJpeg",
    "MEDIASUBTYPE_QTMovie",
    "MEDIASUBTYPE_QTRle",
    "MEDIASUBTYPE_QTRpza",
    "MEDIASUBTYPE_QTSmc",
    "MEDIASUBTYPE_RAW_AAC1",
    "MEDIASUBTYPE_RAW_SPORT",
    "MEDIASUBTYPE_RGB1",
    "MEDIASUBTYPE_RGB16_D3D_DX7_RT",
    "MEDIASUBTYPE_RGB16_D3D_DX9_RT",
    "MEDIASUBTYPE_RGB24",
    "MEDIASUBTYPE_RGB32",
    "MEDIASUBTYPE_RGB32_D3D_DX7_RT",
    "MEDIASUBTYPE_RGB32_D3D_DX9_RT",
    "MEDIASUBTYPE_RGB4",
    "MEDIASUBTYPE_RGB555",
    "MEDIASUBTYPE_RGB565",
    "MEDIASUBTYPE_RGB8",
    "MEDIASUBTYPE_S340",
    "MEDIASUBTYPE_S342",
    "MEDIASUBTYPE_SPDIF_TAG_241h",
    "MEDIASUBTYPE_TELETEXT",
    "MEDIASUBTYPE_TVMJ",
    "MEDIASUBTYPE_UYVY",
    "MEDIASUBTYPE_V216",
    "MEDIASUBTYPE_V410",
    "MEDIASUBTYPE_VBI",
    "MEDIASUBTYPE_VODAFONE_MPEG_ADTS_AAC",
    "MEDIASUBTYPE_VODAFONE_MPEG_RAW_AAC",
    "MEDIASUBTYPE_VPS",
    "MEDIASUBTYPE_VPVBI",
    "MEDIASUBTYPE_VPVideo",
    "MEDIASUBTYPE_WAKE",
    "MEDIASUBTYPE_WAVE",
    "MEDIASUBTYPE_WMASPDIF",
    "MEDIASUBTYPE_WMAUDIO2",
    "MEDIASUBTYPE_WMAUDIO3",
    "MEDIASUBTYPE_WMAUDIO4",
    "MEDIASUBTYPE_WMAUDIO_LOSSLESS",
    "MEDIASUBTYPE_WMV1",
    "MEDIASUBTYPE_WMV2",
    "MEDIASUBTYPE_WMV3",
    "MEDIASUBTYPE_WMVA",
    "MEDIASUBTYPE_WMVB",
    "MEDIASUBTYPE_WMVP",
    "MEDIASUBTYPE_WMVR",
    "MEDIASUBTYPE_WSS",
    "MEDIASUBTYPE_WVC1",
    "MEDIASUBTYPE_WVP2",
    "MEDIASUBTYPE_X264",
    "MEDIASUBTYPE_XDS",
    "MEDIASUBTYPE_Y210",
    "MEDIASUBTYPE_Y211",
    "MEDIASUBTYPE_Y216",
    "MEDIASUBTYPE_Y411",
    "MEDIASUBTYPE_Y41P",
    "MEDIASUBTYPE_Y41T",
    "MEDIASUBTYPE_Y42T",
    "MEDIASUBTYPE_YUY2",
    "MEDIASUBTYPE_YUYV",
    "MEDIASUBTYPE_YV12",
    "MEDIASUBTYPE_YVU9",
    "MEDIASUBTYPE_YVYU",
    "MEDIASUBTYPE_dv25",
    "MEDIASUBTYPE_dv50",
    "MEDIASUBTYPE_dvh1",
    "MEDIASUBTYPE_dvhd",
    "MEDIASUBTYPE_dvsd",
    "MEDIASUBTYPE_dvsl",
    "MEDIASUBTYPE_h264",
    "MEDIASUBTYPE_m4s2",
    "MEDIASUBTYPE_mp42",
    "MEDIASUBTYPE_mp43",
    "MEDIASUBTYPE_mp4s",
    "MEDIASUBTYPE_mpg4",
    "MEDIASUBTYPE_v210",
    "MEDIASUBTYPE_wmv1",
    "MEDIASUBTYPE_wmv2",
    "MEDIASUBTYPE_wmv3",
    "MEDIASUBTYPE_wmva",
    "MEDIASUBTYPE_wmvb",
    "MEDIASUBTYPE_wmvp",
    "MEDIASUBTYPE_wmvr",
    "MEDIASUBTYPE_wvc1",
    "MEDIASUBTYPE_wvp2",
    "MEDIASUBTYPE_x264",
    "MEDIATYPE_AUXLine21Data",
    "MEDIATYPE_AUXTeletextPage",
    "MEDIATYPE_AnalogAudio",
    "MEDIATYPE_AnalogVideo",
    "MEDIATYPE_Audio",
    "MEDIATYPE_CC_CONTAINER",
    "MEDIATYPE_DTVCCData",
    "MEDIATYPE_File",
    "MEDIATYPE_Interleaved",
    "MEDIATYPE_LMRT",
    "MEDIATYPE_MPEG1SystemStream",
    "MEDIATYPE_MSTVCaption",
    "MEDIATYPE_Midi",
    "MEDIATYPE_ScriptCommand",
    "MEDIATYPE_Stream",
    "MEDIATYPE_Text",
    "MEDIATYPE_Timecode",
    "MEDIATYPE_URL_STREAM",
    "MEDIATYPE_VBI",
    "MEDIATYPE_Video",
    "MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS",
    "MEDeviceStreamCreated",
    "MF2DBuffer_LockFlags",
    "MF2DBuffer_LockFlags_ForceDWORD",
    "MF2DBuffer_LockFlags_LockTypeMask",
    "MF2DBuffer_LockFlags_Read",
    "MF2DBuffer_LockFlags_ReadWrite",
    "MF2DBuffer_LockFlags_Write",
    "MF3DVideoOutputType",
    "MF3DVideoOutputType_BaseView",
    "MF3DVideoOutputType_Stereo",
    "MFAMRNBByteStreamHandler",
    "MFAMRNBSinkClassFactory",
    "MFARGB",
    "MFASFINDEXER_APPROX_SEEK_TIME_UNKNOWN",
    "MFASFINDEXER_NO_FIXED_INTERVAL",
    "MFASFINDEXER_PER_ENTRY_BYTES_DYNAMIC",
    "MFASFINDEXER_READ_FOR_REVERSEPLAYBACK_OUTOFDATASEGMENT",
    "MFASFINDEXER_TYPE_TIMECODE",
    "MFASFMutexType_Bitrate",
    "MFASFMutexType_Language",
    "MFASFMutexType_Presentation",
    "MFASFMutexType_Unknown",
    "MFASFSPLITTER_PACKET_BOUNDARY",
    "MFASFSampleExtension_ContentType",
    "MFASFSampleExtension_Encryption_KeyID",
    "MFASFSampleExtension_Encryption_SampleID",
    "MFASFSampleExtension_FileName",
    "MFASFSampleExtension_OutputCleanPoint",
    "MFASFSampleExtension_PixelAspectRatio",
    "MFASFSampleExtension_SMPTE",
    "MFASFSampleExtension_SampleDuration",
    "MFASF_DEFAULT_BUFFER_WINDOW_MS",
    "MFASF_INDEXER_FLAGS",
    "MFASF_INDEXER_READ_FOR_REVERSEPLAYBACK",
    "MFASF_INDEXER_WRITE_FOR_LIVEREAD",
    "MFASF_INDEXER_WRITE_NEW_INDEX",
    "MFASF_INVALID_STREAM_NUMBER",
    "MFASF_MAX_STREAM_NUMBER",
    "MFASF_MULTIPLEXERFLAGS",
    "MFASF_MULTIPLEXER_AUTOADJUST_BITRATE",
    "MFASF_PAYLOADEXTENSION_MAX_SIZE",
    "MFASF_PAYLOADEXTENSION_VARIABLE_SIZE",
    "MFASF_SPLITTERFLAGS",
    "MFASF_SPLITTER_REVERSE",
    "MFASF_SPLITTER_WMDRM",
    "MFASF_STREAMSELECTOR_DISABLE_THINNING",
    "MFASF_STREAMSELECTOR_FLAGS",
    "MFASF_STREAMSELECTOR_USE_AVERAGE_BITRATE",
    "MFASYNCRESULT",
    "MFASYNC_BLOCKING_CALLBACK",
    "MFASYNC_CALLBACK_QUEUE_ALL",
    "MFASYNC_CALLBACK_QUEUE_IO",
    "MFASYNC_CALLBACK_QUEUE_LONG_FUNCTION",
    "MFASYNC_CALLBACK_QUEUE_MULTITHREADED",
    "MFASYNC_CALLBACK_QUEUE_PRIVATE_MASK",
    "MFASYNC_CALLBACK_QUEUE_RT",
    "MFASYNC_CALLBACK_QUEUE_STANDARD",
    "MFASYNC_CALLBACK_QUEUE_TIMER",
    "MFASYNC_CALLBACK_QUEUE_UNDEFINED",
    "MFASYNC_FAST_IO_PROCESSING_CALLBACK",
    "MFASYNC_LOCALIZE_REMOTE_CALLBACK",
    "MFASYNC_REPLY_CALLBACK",
    "MFASYNC_SIGNAL_CALLBACK",
    "MFASYNC_WORKQUEUE_TYPE",
    "MFAYUVSample",
    "MFAddPeriodicCallback",
    "MFAllocateSerialWorkQueue",
    "MFAllocateWorkQueue",
    "MFAllocateWorkQueueEx",
    "MFAudioConstriction",
    "MFAudioConstriction_MFaudioConstriction14_14",
    "MFAudioConstriction_MFaudioConstriction44_16",
    "MFAudioConstriction_MFaudioConstriction48_16",
    "MFAudioConstriction_MFaudioConstrictionMute",
    "MFAudioConstriction_MFaudioConstrictionOff",
    "MFAudioDecoderDegradationInfo",
    "MFAudioFormat_AAC",
    "MFAudioFormat_AAC_HDCP",
    "MFAudioFormat_ADTS",
    "MFAudioFormat_ADTS_HDCP",
    "MFAudioFormat_ALAC",
    "MFAudioFormat_AMR_NB",
    "MFAudioFormat_AMR_WB",
    "MFAudioFormat_AMR_WP",
    "MFAudioFormat_Base",
    "MFAudioFormat_Base_HDCP",
    "MFAudioFormat_DRM",
    "MFAudioFormat_DTS",
    "MFAudioFormat_DTS_HD",
    "MFAudioFormat_DTS_LBR",
    "MFAudioFormat_DTS_RAW",
    "MFAudioFormat_DTS_UHD",
    "MFAudioFormat_DTS_UHDY",
    "MFAudioFormat_DTS_XLL",
    "MFAudioFormat_Dolby_AC3",
    "MFAudioFormat_Dolby_AC3_HDCP",
    "MFAudioFormat_Dolby_AC3_SPDIF",
    "MFAudioFormat_Dolby_AC4",
    "MFAudioFormat_Dolby_AC4_V1",
    "MFAudioFormat_Dolby_AC4_V1_ES",
    "MFAudioFormat_Dolby_AC4_V2",
    "MFAudioFormat_Dolby_AC4_V2_ES",
    "MFAudioFormat_Dolby_DDPlus",
    "MFAudioFormat_FLAC",
    "MFAudioFormat_Float",
    "MFAudioFormat_Float_SpatialObjects",
    "MFAudioFormat_LPCM",
    "MFAudioFormat_MP3",
    "MFAudioFormat_MPEG",
    "MFAudioFormat_MSP1",
    "MFAudioFormat_Opus",
    "MFAudioFormat_PCM",
    "MFAudioFormat_PCM_HDCP",
    "MFAudioFormat_Vorbis",
    "MFAudioFormat_WMASPDIF",
    "MFAudioFormat_WMAudioV8",
    "MFAudioFormat_WMAudioV9",
    "MFAudioFormat_WMAudio_Lossless",
    "MFAverageTimePerFrameToFrameRate",
    "MFBYTESTREAM_BUFFERING_PARAMS",
    "MFBYTESTREAM_DOES_NOT_USE_NETWORK",
    "MFBYTESTREAM_HAS_SLOW_SEEK",
    "MFBYTESTREAM_IS_DIRECTORY",
    "MFBYTESTREAM_IS_PARTIALLY_DOWNLOADED",
    "MFBYTESTREAM_IS_READABLE",
    "MFBYTESTREAM_IS_REMOTE",
    "MFBYTESTREAM_IS_SEEKABLE",
    "MFBYTESTREAM_IS_WRITABLE",
    "MFBYTESTREAM_SEEK_FLAG_CANCEL_PENDING_IO",
    "MFBYTESTREAM_SEEK_ORIGIN",
    "MFBYTESTREAM_SEEK_ORIGIN_msoBegin",
    "MFBYTESTREAM_SEEK_ORIGIN_msoCurrent",
    "MFBYTESTREAM_SHARE_WRITE",
    "MFBeginCreateFile",
    "MFBeginRegisterWorkQueueWithMMCSS",
    "MFBeginRegisterWorkQueueWithMMCSSEx",
    "MFBeginUnregisterWorkQueueWithMMCSS",
    "MFCAPTURE_METADATA_SCANLINE_VERTICAL",
    "MFCAPTURE_METADATA_SCAN_BOTTOM_TOP",
    "MFCAPTURE_METADATA_SCAN_RIGHT_LEFT",
    "MFCLOCK_CHARACTERISTICS_FLAGS",
    "MFCLOCK_CHARACTERISTICS_FLAG_ALWAYS_RUNNING",
    "MFCLOCK_CHARACTERISTICS_FLAG_FREQUENCY_10MHZ",
    "MFCLOCK_CHARACTERISTICS_FLAG_IS_SYSTEM_CLOCK",
    "MFCLOCK_FREQUENCY_HNS",
    "MFCLOCK_JITTER_DPC",
    "MFCLOCK_JITTER_ISR",
    "MFCLOCK_JITTER_PASSIVE",
    "MFCLOCK_PROPERTIES",
    "MFCLOCK_RELATIONAL_FLAGS",
    "MFCLOCK_RELATIONAL_FLAG_JITTER_NEVER_AHEAD",
    "MFCLOCK_STATE",
    "MFCLOCK_STATE_INVALID",
    "MFCLOCK_STATE_PAUSED",
    "MFCLOCK_STATE_RUNNING",
    "MFCLOCK_STATE_STOPPED",
    "MFCLOCK_TOLERANCE_UNKNOWN",
    "MFCONNECTOR_AGP",
    "MFCONNECTOR_COMPONENT",
    "MFCONNECTOR_COMPOSITE",
    "MFCONNECTOR_DISPLAYPORT_EMBEDDED",
    "MFCONNECTOR_DISPLAYPORT_EXTERNAL",
    "MFCONNECTOR_DVI",
    "MFCONNECTOR_D_JPN",
    "MFCONNECTOR_HDMI",
    "MFCONNECTOR_LVDS",
    "MFCONNECTOR_MIRACAST",
    "MFCONNECTOR_PCI",
    "MFCONNECTOR_PCIX",
    "MFCONNECTOR_PCI_Express",
    "MFCONNECTOR_SDI",
    "MFCONNECTOR_SPDIF",
    "MFCONNECTOR_SVIDEO",
    "MFCONNECTOR_TRANSPORT_AGNOSTIC_DIGITAL_MODE_A",
    "MFCONNECTOR_TRANSPORT_AGNOSTIC_DIGITAL_MODE_B",
    "MFCONNECTOR_UDI_EMBEDDED",
    "MFCONNECTOR_UDI_EXTERNAL",
    "MFCONNECTOR_UNKNOWN",
    "MFCONNECTOR_VGA",
    "MFCONTENTPROTECTIONDEVICE_FUNCTIONID_START",
    "MFCONTENTPROTECTIONDEVICE_INPUT_DATA",
    "MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA",
    "MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA",
    "MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA_FUNCTIONID",
    "MFCalculateBitmapImageSize",
    "MFCalculateImageSize",
    "MFCameraExtrinsic_CalibratedTransform",
    "MFCameraExtrinsics",
    "MFCameraIntrinsic_CameraModel",
    "MFCameraIntrinsic_DistortionModel",
    "MFCameraIntrinsic_DistortionModel6KT",
    "MFCameraIntrinsic_DistortionModelArcTan",
    "MFCameraIntrinsic_DistortionModelType",
    "MFCameraIntrinsic_DistortionModelType_6KT",
    "MFCameraIntrinsic_DistortionModelType_ArcTan",
    "MFCameraIntrinsic_PinholeCameraModel",
    "MFCameraOcclusionState",
    "MFCameraOcclusionState_OccludedByCameraHardware",
    "MFCameraOcclusionState_OccludedByLid",
    "MFCameraOcclusionState_Open",
    "MFCancelCreateFile",
    "MFCancelWorkItem",
    "MFCombineSamples",
    "MFCompareFullToPartialMediaType",
    "MFConvertColorInfoFromDXVA",
    "MFConvertColorInfoToDXVA",
    "MFConvertFromFP16Array",
    "MFConvertToFP16Array",
    "MFCopyImage",
    "MFCreate2DMediaBuffer",
    "MFCreate3GPMediaSink",
    "MFCreateAC3MediaSink",
    "MFCreateADTSMediaSink",
    "MFCreateAMMediaTypeFromMFMediaType",
    "MFCreateASFContentInfo",
    "MFCreateASFIndexer",
    "MFCreateASFIndexerByteStream",
    "MFCreateASFMediaSink",
    "MFCreateASFMediaSinkActivate",
    "MFCreateASFMultiplexer",
    "MFCreateASFProfile",
    "MFCreateASFProfileFromPresentationDescriptor",
    "MFCreateASFSplitter",
    "MFCreateASFStreamSelector",
    "MFCreateASFStreamingMediaSink",
    "MFCreateASFStreamingMediaSinkActivate",
    "MFCreateAVIMediaSink",
    "MFCreateAggregateSource",
    "MFCreateAlignedMemoryBuffer",
    "MFCreateAsyncResult",
    "MFCreateAttributes",
    "MFCreateAudioMediaType",
    "MFCreateAudioRenderer",
    "MFCreateAudioRendererActivate",
    "MFCreateCameraOcclusionStateMonitor",
    "MFCreateCollection",
    "MFCreateContentDecryptorContext",
    "MFCreateContentProtectionDevice",
    "MFCreateCredentialCache",
    "MFCreateD3D12SynchronizationObject",
    "MFCreateDXGIDeviceManager",
    "MFCreateDXGISurfaceBuffer",
    "MFCreateDXSurfaceBuffer",
    "MFCreateDeviceSource",
    "MFCreateDeviceSourceActivate",
    "MFCreateEncryptedMediaExtensionsStoreActivate",
    "MFCreateEventQueue",
    "MFCreateExtendedCameraIntrinsicModel",
    "MFCreateExtendedCameraIntrinsics",
    "MFCreateFMPEG4MediaSink",
    "MFCreateFile",
    "MFCreateLegacyMediaBufferOnMFMediaBuffer",
    "MFCreateMFByteStreamOnStream",
    "MFCreateMFByteStreamOnStreamEx",
    "MFCreateMFByteStreamWrapper",
    "MFCreateMFVideoFormatFromMFMediaType",
    "MFCreateMP3MediaSink",
    "MFCreateMPEG4MediaSink",
    "MFCreateMediaBufferFromMediaType",
    "MFCreateMediaBufferWrapper",
    "MFCreateMediaEvent",
    "MFCreateMediaExtensionActivate",
    "MFCreateMediaSession",
    "MFCreateMediaType",
    "MFCreateMediaTypeFromProperties",
    "MFCreateMediaTypeFromRepresentation",
    "MFCreateMemoryBuffer",
    "MFCreateMuxSink",
    "MFCreateMuxStreamAttributes",
    "MFCreateMuxStreamMediaType",
    "MFCreateMuxStreamSample",
    "MFCreateNetSchemePlugin",
    "MFCreatePMPMediaSession",
    "MFCreatePMPServer",
    "MFCreatePresentationClock",
    "MFCreatePresentationDescriptor",
    "MFCreatePresentationDescriptorFromASFProfile",
    "MFCreatePropertiesFromMediaType",
    "MFCreateProtectedEnvironmentAccess",
    "MFCreateProxyLocator",
    "MFCreateRelativePanelWatcher",
    "MFCreateRemoteDesktopPlugin",
    "MFCreateSample",
    "MFCreateSampleCopierMFT",
    "MFCreateSampleGrabberSinkActivate",
    "MFCreateSensorActivityMonitor",
    "MFCreateSensorGroup",
    "MFCreateSensorProfile",
    "MFCreateSensorProfileCollection",
    "MFCreateSensorStream",
    "MFCreateSequencerSegmentOffset",
    "MFCreateSequencerSource",
    "MFCreateSimpleTypeHandler",
    "MFCreateSinkWriterFromMediaSink",
    "MFCreateSinkWriterFromURL",
    "MFCreateSourceReaderFromByteStream",
    "MFCreateSourceReaderFromMediaSource",
    "MFCreateSourceReaderFromURL",
    "MFCreateSourceResolver",
    "MFCreateStandardQualityManager",
    "MFCreateStreamDescriptor",
    "MFCreateStreamOnMFByteStream",
    "MFCreateStreamOnMFByteStreamEx",
    "MFCreateSystemTimeSource",
    "MFCreateTempFile",
    "MFCreateTopoLoader",
    "MFCreateTopology",
    "MFCreateTopologyNode",
    "MFCreateTrackedSample",
    "MFCreateTranscodeProfile",
    "MFCreateTranscodeSinkActivate",
    "MFCreateTranscodeTopology",
    "MFCreateTranscodeTopologyFromByteStream",
    "MFCreateTransformActivate",
    "MFCreateVideoMediaType",
    "MFCreateVideoMediaTypeFromBitMapInfoHeader",
    "MFCreateVideoMediaTypeFromBitMapInfoHeaderEx",
    "MFCreateVideoMediaTypeFromSubtype",
    "MFCreateVideoMixer",
    "MFCreateVideoMixerAndPresenter",
    "MFCreateVideoPresenter",
    "MFCreateVideoRenderer",
    "MFCreateVideoRendererActivate",
    "MFCreateVideoSampleAllocator",
    "MFCreateVideoSampleAllocatorEx",
    "MFCreateVideoSampleFromSurface",
    "MFCreateVirtualCamera",
    "MFCreateWAVEMediaSink",
    "MFCreateWICBitmapBuffer",
    "MFCreateWMAEncoderActivate",
    "MFCreateWMVEncoderActivate",
    "MFCreateWaveFormatExFromMFMediaType",
    "MFDepthMeasurement",
    "MFDepthMeasurement_DistanceToFocalPlane",
    "MFDepthMeasurement_DistanceToOpticalCenter",
    "MFDeserializeAttributesFromStream",
    "MFDeserializePresentationDescriptor",
    "MFENABLETYPE_MF_RebootRequired",
    "MFENABLETYPE_MF_UpdateRevocationInformation",
    "MFENABLETYPE_MF_UpdateUntrustedComponent",
    "MFENABLETYPE_WMDRMV1_LicenseAcquisition",
    "MFENABLETYPE_WMDRMV7_Individualization",
    "MFENABLETYPE_WMDRMV7_LicenseAcquisition",
    "MFEVRDLL",
    "MFEndCreateFile",
    "MFEndRegisterWorkQueueWithMMCSS",
    "MFEndUnregisterWorkQueueWithMMCSS",
    "MFEnumDeviceSources",
    "MFExtendedCameraIntrinsic_IntrinsicModel",
    "MFFLACBytestreamHandler",
    "MFFLACSinkClassFactory",
    "MFFOLDDOWN_MATRIX",
    "MFFrameRateToAverageTimePerFrame",
    "MFFrameSourceTypes",
    "MFFrameSourceTypes_Color",
    "MFFrameSourceTypes_Custom",
    "MFFrameSourceTypes_Depth",
    "MFFrameSourceTypes_Image",
    "MFFrameSourceTypes_Infrared",
    "MFGetAttributesAsBlob",
    "MFGetAttributesAsBlobSize",
    "MFGetContentProtectionSystemCLSID",
    "MFGetLocalId",
    "MFGetMFTMerit",
    "MFGetPlaneSize",
    "MFGetPluginControl",
    "MFGetService",
    "MFGetStrideForBitmapInfoHeader",
    "MFGetSupportedMimeTypes",
    "MFGetSupportedSchemes",
    "MFGetSystemId",
    "MFGetSystemTime",
    "MFGetTimerPeriodicity",
    "MFGetTopoNodeCurrentType",
    "MFGetUncompressedVideoFormat",
    "MFGetWorkQueueMMCSSClass",
    "MFGetWorkQueueMMCSSPriority",
    "MFGetWorkQueueMMCSSTaskId",
    "MFHeapAlloc",
    "MFHeapFree",
    "MFINPUTTRUSTAUTHORITY_ACCESS_ACTION",
    "MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS",
    "MFImageFormat_JPEG",
    "MFImageFormat_RGB32",
    "MFInitAMMediaTypeFromMFMediaType",
    "MFInitAttributesFromBlob",
    "MFInitMediaTypeFromAMMediaType",
    "MFInitMediaTypeFromMFVideoFormat",
    "MFInitMediaTypeFromMPEG1VideoInfo",
    "MFInitMediaTypeFromMPEG2VideoInfo",
    "MFInitMediaTypeFromVideoInfoHeader",
    "MFInitMediaTypeFromVideoInfoHeader2",
    "MFInitMediaTypeFromWaveFormatEx",
    "MFInitVideoFormat",
    "MFInitVideoFormat_RGB",
    "MFInvokeCallback",
    "MFIsContentProtectionDeviceSupported",
    "MFIsFormatYUV",
    "MFIsVirtualCameraTypeSupported",
    "MFLoadSignedLibrary",
    "MFLockDXGIDeviceManager",
    "MFLockPlatform",
    "MFLockSharedWorkQueue",
    "MFLockWorkQueue",
    "MFMEDIASOURCE_CAN_PAUSE",
    "MFMEDIASOURCE_CAN_SEEK",
    "MFMEDIASOURCE_CAN_SKIPBACKWARD",
    "MFMEDIASOURCE_CAN_SKIPFORWARD",
    "MFMEDIASOURCE_CHARACTERISTICS",
    "MFMEDIASOURCE_DOES_NOT_USE_NETWORK",
    "MFMEDIASOURCE_HAS_MULTIPLE_PRESENTATIONS",
    "MFMEDIASOURCE_HAS_SLOW_SEEK",
    "MFMEDIASOURCE_IS_LIVE",
    "MFMPEG2DLNASINKSTATS",
    "MFMPEG4Format_Base",
    "MFMapDX9FormatToDXGIFormat",
    "MFMapDXGIFormatToDX9Format",
    "MFMediaKeyStatus",
    "MFMediaType_Audio",
    "MFMediaType_Binary",
    "MFMediaType_Default",
    "MFMediaType_FileTransfer",
    "MFMediaType_HTML",
    "MFMediaType_Image",
    "MFMediaType_Metadata",
    "MFMediaType_MultiplexedFrames",
    "MFMediaType_Perception",
    "MFMediaType_Protected",
    "MFMediaType_SAMI",
    "MFMediaType_Script",
    "MFMediaType_Stream",
    "MFMediaType_Subtitle",
    "MFMediaType_Video",
    "MFNETSOURCE_ACCELERATEDSTREAMINGDURATION",
    "MFNETSOURCE_AUTORECONNECTLIMIT",
    "MFNETSOURCE_AUTORECONNECTPROGRESS",
    "MFNETSOURCE_AVGBANDWIDTHBPS_ID",
    "MFNETSOURCE_BROWSERUSERAGENT",
    "MFNETSOURCE_BROWSERWEBPAGE",
    "MFNETSOURCE_BUFFERINGCOUNT_ID",
    "MFNETSOURCE_BUFFERINGTIME",
    "MFNETSOURCE_BUFFERPROGRESS_ID",
    "MFNETSOURCE_BUFFERSIZE_ID",
    "MFNETSOURCE_BYTESRECEIVED_ID",
    "MFNETSOURCE_CACHEENABLED",
    "MFNETSOURCE_CACHE_ACTIVE_COMPLETE",
    "MFNETSOURCE_CACHE_ACTIVE_WRITING",
    "MFNETSOURCE_CACHE_STATE",
    "MFNETSOURCE_CACHE_STATE_ID",
    "MFNETSOURCE_CACHE_UNAVAILABLE",
    "MFNETSOURCE_CLIENTGUID",
    "MFNETSOURCE_CONNECTIONBANDWIDTH",
    "MFNETSOURCE_CONTENTBITRATE_ID",
    "MFNETSOURCE_CREDENTIAL_MANAGER",
    "MFNETSOURCE_CROSS_ORIGIN_SUPPORT",
    "MFNETSOURCE_DOWNLOADPROGRESS_ID",
    "MFNETSOURCE_DRMNET_LICENSE_REPRESENTATION",
    "MFNETSOURCE_ENABLE_DOWNLOAD",
    "MFNETSOURCE_ENABLE_HTTP",
    "MFNETSOURCE_ENABLE_MSB",
    "MFNETSOURCE_ENABLE_PRIVATEMODE",
    "MFNETSOURCE_ENABLE_RTSP",
    "MFNETSOURCE_ENABLE_STREAMING",
    "MFNETSOURCE_ENABLE_TCP",
    "MFNETSOURCE_ENABLE_UDP",
    "MFNETSOURCE_FILE",
    "MFNETSOURCE_FRIENDLYNAME",
    "MFNETSOURCE_HOSTEXE",
    "MFNETSOURCE_HOSTVERSION",
    "MFNETSOURCE_HTTP",
    "MFNETSOURCE_HTTP_DOWNLOAD_SESSION_PROVIDER",
    "MFNETSOURCE_INCORRECTLYSIGNEDPACKETS_ID",
    "MFNETSOURCE_LASTBWSWITCHTS_ID",
    "MFNETSOURCE_LINKBANDWIDTH_ID",
    "MFNETSOURCE_LOGPARAMS",
    "MFNETSOURCE_LOGURL",
    "MFNETSOURCE_LOSTPACKETS_ID",
    "MFNETSOURCE_MAXBITRATE_ID",
    "MFNETSOURCE_MAXBUFFERTIMEMS",
    "MFNETSOURCE_MAXUDPACCELERATEDSTREAMINGDURATION",
    "MFNETSOURCE_MULTICAST",
    "MFNETSOURCE_OUTPACKETS_ID",
    "MFNETSOURCE_PEERMANAGER",
    "MFNETSOURCE_PLAYERID",
    "MFNETSOURCE_PLAYERUSERAGENT",
    "MFNETSOURCE_PLAYERVERSION",
    "MFNETSOURCE_PPBANDWIDTH",
    "MFNETSOURCE_PREVIEWMODEENABLED",
    "MFNETSOURCE_PROTOCOL",
    "MFNETSOURCE_PROTOCOL_ID",
    "MFNETSOURCE_PROTOCOL_TYPE",
    "MFNETSOURCE_PROXYBYPASSFORLOCAL",
    "MFNETSOURCE_PROXYEXCEPTIONLIST",
    "MFNETSOURCE_PROXYHOSTNAME",
    "MFNETSOURCE_PROXYINFO",
    "MFNETSOURCE_PROXYLOCATORFACTORY",
    "MFNETSOURCE_PROXYPORT",
    "MFNETSOURCE_PROXYRERUNAUTODETECTION",
    "MFNETSOURCE_PROXYSETTINGS",
    "MFNETSOURCE_RECEPTION_QUALITY_ID",
    "MFNETSOURCE_RECOVEREDBYECCPACKETS_ID",
    "MFNETSOURCE_RECOVEREDBYRTXPACKETS_ID",
    "MFNETSOURCE_RECOVEREDPACKETS_ID",
    "MFNETSOURCE_RECVPACKETS_ID",
    "MFNETSOURCE_RECVRATE_ID",
    "MFNETSOURCE_RESENDSENABLED",
    "MFNETSOURCE_RESENDSRECEIVED_ID",
    "MFNETSOURCE_RESENDSREQUESTED_ID",
    "MFNETSOURCE_RESOURCE_FILTER",
    "MFNETSOURCE_RTSP",
    "MFNETSOURCE_SEEKRANGEEND_ID",
    "MFNETSOURCE_SEEKRANGESTART_ID",
    "MFNETSOURCE_SIGNEDSESSION_ID",
    "MFNETSOURCE_SPEEDFACTOR_ID",
    "MFNETSOURCE_SSLCERTIFICATE_MANAGER",
    "MFNETSOURCE_STATISTICS",
    "MFNETSOURCE_STATISTICS_IDS",
    "MFNETSOURCE_STATISTICS_SERVICE",
    "MFNETSOURCE_STREAM_LANGUAGE",
    "MFNETSOURCE_TCP",
    "MFNETSOURCE_THINNINGENABLED",
    "MFNETSOURCE_TRANSPORT",
    "MFNETSOURCE_TRANSPORT_ID",
    "MFNETSOURCE_TRANSPORT_TYPE",
    "MFNETSOURCE_UDP",
    "MFNETSOURCE_UDP_PORT_RANGE",
    "MFNETSOURCE_UNDEFINED",
    "MFNETSOURCE_UNPREDEFINEDPROTOCOLNAME_ID",
    "MFNETSOURCE_VBR_ID",
    "MFNET_AUTHENTICATION_CLEAR_TEXT",
    "MFNET_AUTHENTICATION_LOGGED_ON_USER",
    "MFNET_AUTHENTICATION_PROXY",
    "MFNET_CREDENTIAL_ALLOW_CLEAR_TEXT",
    "MFNET_CREDENTIAL_DONT_CACHE",
    "MFNET_CREDENTIAL_SAVE",
    "MFNET_PROXYSETTINGS",
    "MFNET_PROXYSETTING_AUTO",
    "MFNET_PROXYSETTING_BROWSER",
    "MFNET_PROXYSETTING_MANUAL",
    "MFNET_PROXYSETTING_NONE",
    "MFNET_SAVEJOB_SERVICE",
    "MFNetAuthenticationFlags",
    "MFNetCredentialManagerGetParam",
    "MFNetCredentialOptions",
    "MFNetCredentialRequirements",
    "MFNominalRange",
    "MFNominalRange_0_255",
    "MFNominalRange_16_235",
    "MFNominalRange_48_208",
    "MFNominalRange_64_127",
    "MFNominalRange_ForceDWORD",
    "MFNominalRange_Last",
    "MFNominalRange_Normal",
    "MFNominalRange_Unknown",
    "MFNominalRange_Wide",
    "MFOffset",
    "MFPCreateMediaPlayer",
    "MFPERIODICCALLBACK",
    "MFPMPSESSION_CREATION_FLAGS",
    "MFPMPSESSION_IN_PROCESS",
    "MFPMPSESSION_UNPROTECTED_PROCESS",
    "MFPOLICYMANAGER_ACTION",
    "MFPROTECTIONATTRIBUTE_BEST_EFFORT",
    "MFPROTECTIONATTRIBUTE_CONSTRICTVIDEO_IMAGESIZE",
    "MFPROTECTIONATTRIBUTE_FAIL_OVER",
    "MFPROTECTIONATTRIBUTE_HDCP_SRM",
    "MFPROTECTION_ACP",
    "MFPROTECTION_CGMSA",
    "MFPROTECTION_CONSTRICTAUDIO",
    "MFPROTECTION_CONSTRICTVIDEO",
    "MFPROTECTION_CONSTRICTVIDEO_NOOPM",
    "MFPROTECTION_DISABLE",
    "MFPROTECTION_DISABLE_SCREEN_SCRAPE",
    "MFPROTECTION_FFT",
    "MFPROTECTION_GRAPHICS_TRANSFER_AES_ENCRYPTION",
    "MFPROTECTION_HARDWARE",
    "MFPROTECTION_HDCP",
    "MFPROTECTION_HDCP_WITH_TYPE_ENFORCEMENT",
    "MFPROTECTION_PROTECTED_SURFACE",
    "MFPROTECTION_TRUSTEDAUDIODRIVERS",
    "MFPROTECTION_VIDEO_FRAMES",
    "MFPROTECTION_WMDRMOTA",
    "MFP_ACQUIRE_USER_CREDENTIAL_EVENT",
    "MFP_CREATION_OPTIONS",
    "MFP_CREDENTIAL_CLEAR_TEXT",
    "MFP_CREDENTIAL_DO_NOT_CACHE",
    "MFP_CREDENTIAL_LOGGED_ON_USER",
    "MFP_CREDENTIAL_PROMPT",
    "MFP_CREDENTIAL_PROXY",
    "MFP_CREDENTIAL_SAVE",
    "MFP_ERROR_EVENT",
    "MFP_EVENT_HEADER",
    "MFP_EVENT_TYPE",
    "MFP_EVENT_TYPE_ACQUIRE_USER_CREDENTIAL",
    "MFP_EVENT_TYPE_ERROR",
    "MFP_EVENT_TYPE_FRAME_STEP",
    "MFP_EVENT_TYPE_MEDIAITEM_CLEARED",
    "MFP_EVENT_TYPE_MEDIAITEM_CREATED",
    "MFP_EVENT_TYPE_MEDIAITEM_SET",
    "MFP_EVENT_TYPE_MF",
    "MFP_EVENT_TYPE_PAUSE",
    "MFP_EVENT_TYPE_PLAY",
    "MFP_EVENT_TYPE_PLAYBACK_ENDED",
    "MFP_EVENT_TYPE_POSITION_SET",
    "MFP_EVENT_TYPE_RATE_SET",
    "MFP_EVENT_TYPE_STOP",
    "MFP_FRAME_STEP_EVENT",
    "MFP_MEDIAITEM_CAN_PAUSE",
    "MFP_MEDIAITEM_CAN_SEEK",
    "MFP_MEDIAITEM_CLEARED_EVENT",
    "MFP_MEDIAITEM_CREATED_EVENT",
    "MFP_MEDIAITEM_HAS_SLOW_SEEK",
    "MFP_MEDIAITEM_IS_LIVE",
    "MFP_MEDIAITEM_SET_EVENT",
    "MFP_MEDIAPLAYER_STATE",
    "MFP_MEDIAPLAYER_STATE_EMPTY",
    "MFP_MEDIAPLAYER_STATE_PAUSED",
    "MFP_MEDIAPLAYER_STATE_PLAYING",
    "MFP_MEDIAPLAYER_STATE_SHUTDOWN",
    "MFP_MEDIAPLAYER_STATE_STOPPED",
    "MFP_MF_EVENT",
    "MFP_OPTION_FREE_THREADED_CALLBACK",
    "MFP_OPTION_NONE",
    "MFP_OPTION_NO_MMCSS",
    "MFP_OPTION_NO_REMOTE_DESKTOP_OPTIMIZATION",
    "MFP_PAUSE_EVENT",
    "MFP_PLAYBACK_ENDED_EVENT",
    "MFP_PLAY_EVENT",
    "MFP_POSITIONTYPE_100NS",
    "MFP_POSITION_SET_EVENT",
    "MFP_RATE_SET_EVENT",
    "MFP_STOP_EVENT",
    "MFPaletteEntry",
    "MFPinholeCameraIntrinsic_IntrinsicModel",
    "MFPinholeCameraIntrinsics",
    "MFPutWaitingWorkItem",
    "MFPutWorkItem",
    "MFPutWorkItem2",
    "MFPutWorkItemEx",
    "MFPutWorkItemEx2",
    "MFRATE_DIRECTION",
    "MFRATE_FORWARD",
    "MFRATE_REVERSE",
    "MFRR_COMPONENTS",
    "MFRR_COMPONENT_HASH_INFO",
    "MFRR_INFO_VERSION",
    "MFRatio",
    "MFRegisterLocalByteStreamHandler",
    "MFRegisterLocalSchemeHandler",
    "MFRegisterPlatformWithMMCSS",
    "MFRemovePeriodicCallback",
    "MFRequireProtectedEnvironment",
    "MFSEQUENCER_INVALID_ELEMENT_ID",
    "MFSESSIONCAP_DOES_NOT_USE_NETWORK",
    "MFSESSIONCAP_PAUSE",
    "MFSESSIONCAP_RATE_FORWARD",
    "MFSESSIONCAP_RATE_REVERSE",
    "MFSESSIONCAP_SEEK",
    "MFSESSIONCAP_START",
    "MFSESSION_GETFULLTOPOLOGY_CURRENT",
    "MFSESSION_GETFULLTOPOLOGY_FLAGS",
    "MFSESSION_SETTOPOLOGY_CLEAR_CURRENT",
    "MFSESSION_SETTOPOLOGY_FLAGS",
    "MFSESSION_SETTOPOLOGY_IMMEDIATE",
    "MFSESSION_SETTOPOLOGY_NORESOLUTION",
    "MFSHUTDOWN_COMPLETED",
    "MFSHUTDOWN_INITIATED",
    "MFSHUTDOWN_STATUS",
    "MFSINK_WMDRMACTION",
    "MFSINK_WMDRMACTION_ENCODE",
    "MFSINK_WMDRMACTION_LAST",
    "MFSINK_WMDRMACTION_TRANSCODE",
    "MFSINK_WMDRMACTION_TRANSCRYPT",
    "MFSINK_WMDRMACTION_UNDEFINED",
    "MFSTARTUP_FULL",
    "MFSTARTUP_LITE",
    "MFSTARTUP_NOSOCKET",
    "MFSTREAMSINK_MARKER_DEFAULT",
    "MFSTREAMSINK_MARKER_ENDOFSEGMENT",
    "MFSTREAMSINK_MARKER_EVENT",
    "MFSTREAMSINK_MARKER_TICK",
    "MFSTREAMSINK_MARKER_TYPE",
    "MFSampleAllocatorUsage",
    "MFSampleAllocatorUsage_DoesNotAllocate",
    "MFSampleAllocatorUsage_UsesCustomAllocator",
    "MFSampleAllocatorUsage_UsesProvidedAllocator",
    "MFSampleEncryptionProtectionScheme",
    "MFSampleExtension_3DVideo",
    "MFSampleExtension_3DVideo_MultiView",
    "MFSampleExtension_3DVideo_Packed",
    "MFSampleExtension_3DVideo_SampleFormat",
    "MFSampleExtension_AccumulatedNonRefPicPercent",
    "MFSampleExtension_BottomFieldFirst",
    "MFSampleExtension_CameraExtrinsics",
    "MFSampleExtension_CaptureMetadata",
    "MFSampleExtension_ChromaOnly",
    "MFSampleExtension_CleanPoint",
    "MFSampleExtension_ClosedCaption_CEA708",
    "MFSampleExtension_ClosedCaption_CEA708_MAX_SIZE",
    "MFSampleExtension_Content_KeyID",
    "MFSampleExtension_DecodeTimestamp",
    "MFSampleExtension_Depth_MaxReliableDepth",
    "MFSampleExtension_Depth_MinReliableDepth",
    "MFSampleExtension_DerivedFromTopField",
    "MFSampleExtension_DescrambleData",
    "MFSampleExtension_DeviceReferenceSystemTime",
    "MFSampleExtension_DeviceTimestamp",
    "MFSampleExtension_DirtyRects",
    "MFSampleExtension_Discontinuity",
    "MFSampleExtension_Encryption_ClearSliceHeaderData",
    "MFSampleExtension_Encryption_CryptByteBlock",
    "MFSampleExtension_Encryption_HardwareProtection",
    "MFSampleExtension_Encryption_HardwareProtection_KeyInfo",
    "MFSampleExtension_Encryption_HardwareProtection_KeyInfoID",
    "MFSampleExtension_Encryption_HardwareProtection_VideoDecryptorContext",
    "MFSampleExtension_Encryption_KeyID",
    "MFSampleExtension_Encryption_NALUTypes",
    "MFSampleExtension_Encryption_Opaque_Data",
    "MFSampleExtension_Encryption_ProtectionScheme",
    "MFSampleExtension_Encryption_ResumeVideoOutput",
    "MFSampleExtension_Encryption_SEIData",
    "MFSampleExtension_Encryption_SPSPPSData",
    "MFSampleExtension_Encryption_SampleID",
    "MFSampleExtension_Encryption_SkipByteBlock",
    "MFSampleExtension_Encryption_SubSampleMappingSplit",
    "MFSampleExtension_Encryption_SubSample_Mapping",
    "MFSampleExtension_ExtendedCameraIntrinsics",
    "MFSampleExtension_FeatureMap",
    "MFSampleExtension_ForwardedDecodeUnitType",
    "MFSampleExtension_ForwardedDecodeUnits",
    "MFSampleExtension_FrameCorruption",
    "MFSampleExtension_GenKeyCtx",
    "MFSampleExtension_GenKeyFunc",
    "MFSampleExtension_HDCP_FrameCounter",
    "MFSampleExtension_HDCP_OptionalHeader",
    "MFSampleExtension_HDCP_StreamID",
    "MFSampleExtension_Interlaced",
    "MFSampleExtension_LastSlice",
    "MFSampleExtension_LongTermReferenceFrameInfo",
    "MFSampleExtension_MDLCacheCookie",
    "MFSampleExtension_MULTIPLEXED_MANAGER",
    "MFSampleExtension_MaxDecodeFrameSize",
    "MFSampleExtension_MeanAbsoluteDifference",
    "MFSampleExtension_MoveRegions",
    "MFSampleExtension_NALULengthInfo",
    "MFSampleExtension_PacketCrossOffsets",
    "MFSampleExtension_PhotoThumbnail",
    "MFSampleExtension_PhotoThumbnailMediaType",
    "MFSampleExtension_PinholeCameraIntrinsics",
    "MFSampleExtension_ROIRectangle",
    "MFSampleExtension_RepeatFirstField",
    "MFSampleExtension_RepeatFrame",
    "MFSampleExtension_SampleKeyID",
    "MFSampleExtension_SingleField",
    "MFSampleExtension_Spatial_CameraCoordinateSystem",
    "MFSampleExtension_Spatial_CameraProjectionTransform",
    "MFSampleExtension_Spatial_CameraViewTransform",
    "MFSampleExtension_TargetGlobalLuminance",
    "MFSampleExtension_Timestamp",
    "MFSampleExtension_Token",
    "MFSampleExtension_VideoDSPMode",
    "MFSampleExtension_VideoEncodePictureType",
    "MFSampleExtension_VideoEncodeQP",
    "MFScheduleWorkItem",
    "MFScheduleWorkItemEx",
    "MFSensorDeviceMode",
    "MFSensorDeviceMode_Controller",
    "MFSensorDeviceMode_Shared",
    "MFSensorDeviceType",
    "MFSensorDeviceType_Device",
    "MFSensorDeviceType_FrameProvider",
    "MFSensorDeviceType_MediaSource",
    "MFSensorDeviceType_SensorTransform",
    "MFSensorDeviceType_Unknown",
    "MFSensorStreamType",
    "MFSensorStreamType_Input",
    "MFSensorStreamType_Output",
    "MFSensorStreamType_Unknown",
    "MFSequencerTopologyFlags",
    "MFSerializeAttributesToStream",
    "MFSerializePresentationDescriptor",
    "MFShutdown",
    "MFShutdownObject",
    "MFSplitSample",
    "MFStandardVideoFormat",
    "MFStartup",
    "MFStdVideoFormat_ATSC_HD1080i",
    "MFStdVideoFormat_ATSC_HD720p",
    "MFStdVideoFormat_ATSC_SD480i",
    "MFStdVideoFormat_DVD_NTSC",
    "MFStdVideoFormat_DVD_PAL",
    "MFStdVideoFormat_DV_NTSC",
    "MFStdVideoFormat_DV_PAL",
    "MFStdVideoFormat_NTSC",
    "MFStdVideoFormat_PAL",
    "MFStdVideoFormat_reserved",
    "MFStreamExtension_CameraExtrinsics",
    "MFStreamExtension_ExtendedCameraIntrinsics",
    "MFStreamExtension_PinholeCameraIntrinsics",
    "MFStreamFormat_MPEG2Program",
    "MFStreamFormat_MPEG2Transport",
    "MFSubtitleFormat_ATSC",
    "MFSubtitleFormat_CustomUserData",
    "MFSubtitleFormat_PGS",
    "MFSubtitleFormat_SRT",
    "MFSubtitleFormat_SSA",
    "MFSubtitleFormat_TTML",
    "MFSubtitleFormat_VobSub",
    "MFSubtitleFormat_WebVTT",
    "MFSubtitleFormat_XML",
    "MFTEnum",
    "MFTEnum2",
    "MFTEnumEx",
    "MFTGetInfo",
    "MFTIMER_FLAGS",
    "MFTIMER_RELATIVE",
    "MFTOPOLOGY_DXVA_DEFAULT",
    "MFTOPOLOGY_DXVA_FULL",
    "MFTOPOLOGY_DXVA_MODE",
    "MFTOPOLOGY_DXVA_NONE",
    "MFTOPOLOGY_HARDWARE_MODE",
    "MFTOPOLOGY_HWMODE_SOFTWARE_ONLY",
    "MFTOPOLOGY_HWMODE_USE_HARDWARE",
    "MFTOPOLOGY_HWMODE_USE_ONLY_HARDWARE",
    "MFTOPONODE_ATTRIBUTE_UPDATE",
    "MFTRegister",
    "MFTRegisterLocal",
    "MFTRegisterLocalByCLSID",
    "MFTUnregister",
    "MFTUnregisterLocal",
    "MFTUnregisterLocalByCLSID",
    "MFT_AUDIO_DECODER_AUDIO_ENDPOINT_ID",
    "MFT_AUDIO_DECODER_DEGRADATION_INFO_ATTRIBUTE",
    "MFT_AUDIO_DECODER_DEGRADATION_REASON",
    "MFT_AUDIO_DECODER_DEGRADATION_REASON_LICENSING_REQUIREMENT",
    "MFT_AUDIO_DECODER_DEGRADATION_REASON_NONE",
    "MFT_AUDIO_DECODER_DEGRADATION_TYPE",
    "MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX2CHANNEL",
    "MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX6CHANNEL",
    "MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX8CHANNEL",
    "MFT_AUDIO_DECODER_DEGRADATION_TYPE_NONE",
    "MFT_AUDIO_DECODER_SPATIAL_METADATA_CLIENT",
    "MFT_CATEGORY_AUDIO_DECODER",
    "MFT_CATEGORY_AUDIO_EFFECT",
    "MFT_CATEGORY_AUDIO_ENCODER",
    "MFT_CATEGORY_DEMULTIPLEXER",
    "MFT_CATEGORY_ENCRYPTOR",
    "MFT_CATEGORY_MULTIPLEXER",
    "MFT_CATEGORY_OTHER",
    "MFT_CATEGORY_VIDEO_DECODER",
    "MFT_CATEGORY_VIDEO_EFFECT",
    "MFT_CATEGORY_VIDEO_ENCODER",
    "MFT_CATEGORY_VIDEO_PROCESSOR",
    "MFT_CATEGORY_VIDEO_RENDERER_EFFECT",
    "MFT_CODEC_MERIT_Attribute",
    "MFT_CONNECTED_STREAM_ATTRIBUTE",
    "MFT_CONNECTED_TO_HW_STREAM",
    "MFT_DECODER_EXPOSE_OUTPUT_TYPES_IN_NATIVE_ORDER",
    "MFT_DECODER_FINAL_VIDEO_RESOLUTION_HINT",
    "MFT_DECODER_QUALITY_MANAGEMENT_CUSTOM_CONTROL",
    "MFT_DECODER_QUALITY_MANAGEMENT_RECOVERY_WITHOUT_ARTIFACTS",
    "MFT_DRAIN_NO_TAILS",
    "MFT_DRAIN_PRODUCE_TAILS",
    "MFT_DRAIN_TYPE",
    "MFT_ENCODER_ERROR",
    "MFT_ENCODER_SUPPORTS_CONFIG_EVENT",
    "MFT_END_STREAMING_AWARE",
    "MFT_ENUM_ADAPTER_LUID",
    "MFT_ENUM_FLAG",
    "MFT_ENUM_FLAG_ALL",
    "MFT_ENUM_FLAG_ASYNCMFT",
    "MFT_ENUM_FLAG_FIELDOFUSE",
    "MFT_ENUM_FLAG_HARDWARE",
    "MFT_ENUM_FLAG_LOCALMFT",
    "MFT_ENUM_FLAG_SORTANDFILTER",
    "MFT_ENUM_FLAG_SORTANDFILTER_APPROVED_ONLY",
    "MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY",
    "MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY_EDGEMODE",
    "MFT_ENUM_FLAG_SYNCMFT",
    "MFT_ENUM_FLAG_TRANSCODE_ONLY",
    "MFT_ENUM_FLAG_UNTRUSTED_STOREMFT",
    "MFT_ENUM_HARDWARE_URL_Attribute",
    "MFT_ENUM_HARDWARE_VENDOR_ID_Attribute",
    "MFT_ENUM_TRANSCODE_ONLY_ATTRIBUTE",
    "MFT_ENUM_VIDEO_RENDERER_EXTENSION_PROFILE",
    "MFT_FIELDOFUSE_UNLOCK_Attribute",
    "MFT_FRIENDLY_NAME_Attribute",
    "MFT_GFX_DRIVER_VERSION_ID_Attribute",
    "MFT_HW_TIMESTAMP_WITH_QPC_Attribute",
    "MFT_INPUT_DATA_BUFFER_PLACEHOLDER",
    "MFT_INPUT_STATUS_ACCEPT_DATA",
    "MFT_INPUT_STREAM_DOES_NOT_ADDREF",
    "MFT_INPUT_STREAM_FIXED_SAMPLE_SIZE",
    "MFT_INPUT_STREAM_HOLDS_BUFFERS",
    "MFT_INPUT_STREAM_INFO",
    "MFT_INPUT_STREAM_OPTIONAL",
    "MFT_INPUT_STREAM_PROCESSES_IN_PLACE",
    "MFT_INPUT_STREAM_REMOVABLE",
    "MFT_INPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER",
    "MFT_INPUT_STREAM_WHOLE_SAMPLES",
    "MFT_INPUT_TYPES_Attributes",
    "MFT_MESSAGE_COMMAND_DRAIN",
    "MFT_MESSAGE_COMMAND_FLUSH",
    "MFT_MESSAGE_COMMAND_FLUSH_OUTPUT_STREAM",
    "MFT_MESSAGE_COMMAND_MARKER",
    "MFT_MESSAGE_COMMAND_SET_OUTPUT_STREAM_STATE",
    "MFT_MESSAGE_COMMAND_TICK",
    "MFT_MESSAGE_DROP_SAMPLES",
    "MFT_MESSAGE_NOTIFY_BEGIN_STREAMING",
    "MFT_MESSAGE_NOTIFY_END_OF_STREAM",
    "MFT_MESSAGE_NOTIFY_END_STREAMING",
    "MFT_MESSAGE_NOTIFY_EVENT",
    "MFT_MESSAGE_NOTIFY_REACQUIRE_RESOURCES",
    "MFT_MESSAGE_NOTIFY_RELEASE_RESOURCES",
    "MFT_MESSAGE_NOTIFY_START_OF_STREAM",
    "MFT_MESSAGE_SET_D3D_MANAGER",
    "MFT_MESSAGE_TYPE",
    "MFT_OUTPUT_BOUND_UPPER_UNBOUNDED",
    "MFT_OUTPUT_DATA_BUFFER",
    "MFT_OUTPUT_DATA_BUFFER_FORMAT_CHANGE",
    "MFT_OUTPUT_DATA_BUFFER_INCOMPLETE",
    "MFT_OUTPUT_DATA_BUFFER_NO_SAMPLE",
    "MFT_OUTPUT_DATA_BUFFER_STREAM_END",
    "MFT_OUTPUT_STATUS_SAMPLE_READY",
    "MFT_OUTPUT_STREAM_CAN_PROVIDE_SAMPLES",
    "MFT_OUTPUT_STREAM_DISCARDABLE",
    "MFT_OUTPUT_STREAM_FIXED_SAMPLE_SIZE",
    "MFT_OUTPUT_STREAM_INFO",
    "MFT_OUTPUT_STREAM_LAZY_READ",
    "MFT_OUTPUT_STREAM_OPTIONAL",
    "MFT_OUTPUT_STREAM_PROVIDES_SAMPLES",
    "MFT_OUTPUT_STREAM_REMOVABLE",
    "MFT_OUTPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER",
    "MFT_OUTPUT_STREAM_WHOLE_SAMPLES",
    "MFT_OUTPUT_TYPES_Attributes",
    "MFT_POLICY_SET_AWARE",
    "MFT_PREFERRED_ENCODER_PROFILE",
    "MFT_PREFERRED_OUTPUTTYPE_Attribute",
    "MFT_PROCESS_LOCAL_Attribute",
    "MFT_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER",
    "MFT_PROCESS_OUTPUT_REGENERATE_LAST_OUTPUT",
    "MFT_PROCESS_OUTPUT_STATUS_NEW_STREAMS",
    "MFT_REGISTER_TYPE_INFO",
    "MFT_REGISTRATION_INFO",
    "MFT_REMUX_MARK_I_PICTURE_AS_CLEAN_POINT",
    "MFT_SET_TYPE_TEST_ONLY",
    "MFT_STREAMS_UNLIMITED",
    "MFT_STREAM_STATE_PARAM",
    "MFT_SUPPORT_3DVIDEO",
    "MFT_SUPPORT_DYNAMIC_FORMAT_CHANGE",
    "MFT_TRANSFORM_CLSID_Attribute",
    "MFT_USING_HARDWARE_DRM",
    "MFTranscodeContainerType_3GP",
    "MFTranscodeContainerType_AC3",
    "MFTranscodeContainerType_ADTS",
    "MFTranscodeContainerType_AMR",
    "MFTranscodeContainerType_ASF",
    "MFTranscodeContainerType_AVI",
    "MFTranscodeContainerType_FLAC",
    "MFTranscodeContainerType_FMPEG4",
    "MFTranscodeContainerType_MP3",
    "MFTranscodeContainerType_MPEG2",
    "MFTranscodeContainerType_MPEG4",
    "MFTranscodeContainerType_WAVE",
    "MFTranscodeGetAudioOutputAvailableTypes",
    "MFUnlockDXGIDeviceManager",
    "MFUnlockPlatform",
    "MFUnlockWorkQueue",
    "MFUnregisterPlatformFromMMCSS",
    "MFUnwrapMediaType",
    "MFVIDEOFORMAT",
    "MFVP_MESSAGE_BEGINSTREAMING",
    "MFVP_MESSAGE_CANCELSTEP",
    "MFVP_MESSAGE_ENDOFSTREAM",
    "MFVP_MESSAGE_ENDSTREAMING",
    "MFVP_MESSAGE_FLUSH",
    "MFVP_MESSAGE_INVALIDATEMEDIATYPE",
    "MFVP_MESSAGE_PROCESSINPUTNOTIFY",
    "MFVP_MESSAGE_STEP",
    "MFVP_MESSAGE_TYPE",
    "MFValidateMediaTypeSize",
    "MFVideo3DFormat",
    "MFVideo3DSampleFormat",
    "MFVideo3DSampleFormat_BaseView",
    "MFVideo3DSampleFormat_MultiView",
    "MFVideo3DSampleFormat_Packed_LeftRight",
    "MFVideo3DSampleFormat_Packed_TopBottom",
    "MFVideoARMode_Mask",
    "MFVideoARMode_NonLinearStretch",
    "MFVideoARMode_None",
    "MFVideoARMode_PreservePicture",
    "MFVideoARMode_PreservePixel",
    "MFVideoAlphaBitmap",
    "MFVideoAlphaBitmapFlags",
    "MFVideoAlphaBitmapParams",
    "MFVideoAlphaBitmap_Alpha",
    "MFVideoAlphaBitmap_BitMask",
    "MFVideoAlphaBitmap_DestRect",
    "MFVideoAlphaBitmap_EntireDDS",
    "MFVideoAlphaBitmap_FilterMode",
    "MFVideoAlphaBitmap_SrcColorKey",
    "MFVideoAlphaBitmap_SrcRect",
    "MFVideoArea",
    "MFVideoAspectRatioMode",
    "MFVideoChromaSubsampling",
    "MFVideoChromaSubsampling_Cosited",
    "MFVideoChromaSubsampling_DV_PAL",
    "MFVideoChromaSubsampling_ForceDWORD",
    "MFVideoChromaSubsampling_Horizontally_Cosited",
    "MFVideoChromaSubsampling_Last",
    "MFVideoChromaSubsampling_MPEG1",
    "MFVideoChromaSubsampling_MPEG2",
    "MFVideoChromaSubsampling_ProgressiveChroma",
    "MFVideoChromaSubsampling_Unknown",
    "MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes",
    "MFVideoChromaSubsampling_Vertically_Cosited",
    "MFVideoCompressedInfo",
    "MFVideoDRMFlag_AnalogProtected",
    "MFVideoDRMFlag_DigitallyProtected",
    "MFVideoDRMFlag_None",
    "MFVideoDRMFlags",
    "MFVideoDSPMode",
    "MFVideoDSPMode_Passthrough",
    "MFVideoDSPMode_Stabilization",
    "MFVideoFlag_AnalogProtected",
    "MFVideoFlag_BottomUpLinearRep",
    "MFVideoFlag_DigitallyProtected",
    "MFVideoFlag_FieldRepeatCountMask",
    "MFVideoFlag_FieldRepeatCountShift",
    "MFVideoFlag_LowerFieldFirst",
    "MFVideoFlag_PAD_TO_16x9",
    "MFVideoFlag_PAD_TO_4x3",
    "MFVideoFlag_PAD_TO_Mask",
    "MFVideoFlag_PAD_TO_None",
    "MFVideoFlag_PanScanEnabled",
    "MFVideoFlag_ProgressiveContent",
    "MFVideoFlag_ProgressiveSeqReset",
    "MFVideoFlag_SrcContentHint16x9",
    "MFVideoFlag_SrcContentHint235_1",
    "MFVideoFlag_SrcContentHintMask",
    "MFVideoFlag_SrcContentHintNone",
    "MFVideoFlags",
    "MFVideoFlags_DXVASurface",
    "MFVideoFlags_ForceQWORD",
    "MFVideoFlags_RenderTargetSurface",
    "MFVideoFormat_420O",
    "MFVideoFormat_A16B16G16R16F",
    "MFVideoFormat_A2R10G10B10",
    "MFVideoFormat_AI44",
    "MFVideoFormat_ARGB32",
    "MFVideoFormat_AV1",
    "MFVideoFormat_AYUV",
    "MFVideoFormat_Base",
    "MFVideoFormat_Base_HDCP",
    "MFVideoFormat_D16",
    "MFVideoFormat_DV25",
    "MFVideoFormat_DV50",
    "MFVideoFormat_DVH1",
    "MFVideoFormat_DVHD",
    "MFVideoFormat_DVSD",
    "MFVideoFormat_DVSL",
    "MFVideoFormat_H263",
    "MFVideoFormat_H264",
    "MFVideoFormat_H264_ES",
    "MFVideoFormat_H264_HDCP",
    "MFVideoFormat_H265",
    "MFVideoFormat_HEVC",
    "MFVideoFormat_HEVC_ES",
    "MFVideoFormat_HEVC_HDCP",
    "MFVideoFormat_I420",
    "MFVideoFormat_IYUV",
    "MFVideoFormat_L16",
    "MFVideoFormat_L8",
    "MFVideoFormat_M4S2",
    "MFVideoFormat_MJPG",
    "MFVideoFormat_MP43",
    "MFVideoFormat_MP4S",
    "MFVideoFormat_MP4V",
    "MFVideoFormat_MPEG2",
    "MFVideoFormat_MPG1",
    "MFVideoFormat_MSS1",
    "MFVideoFormat_MSS2",
    "MFVideoFormat_NV11",
    "MFVideoFormat_NV12",
    "MFVideoFormat_NV21",
    "MFVideoFormat_ORAW",
    "MFVideoFormat_P010",
    "MFVideoFormat_P016",
    "MFVideoFormat_P210",
    "MFVideoFormat_P216",
    "MFVideoFormat_RGB24",
    "MFVideoFormat_RGB32",
    "MFVideoFormat_RGB555",
    "MFVideoFormat_RGB565",
    "MFVideoFormat_RGB8",
    "MFVideoFormat_Theora",
    "MFVideoFormat_UYVY",
    "MFVideoFormat_VP10",
    "MFVideoFormat_VP80",
    "MFVideoFormat_VP90",
    "MFVideoFormat_WMV1",
    "MFVideoFormat_WMV2",
    "MFVideoFormat_WMV3",
    "MFVideoFormat_WVC1",
    "MFVideoFormat_Y210",
    "MFVideoFormat_Y216",
    "MFVideoFormat_Y410",
    "MFVideoFormat_Y416",
    "MFVideoFormat_Y41P",
    "MFVideoFormat_Y41T",
    "MFVideoFormat_Y42T",
    "MFVideoFormat_YUY2",
    "MFVideoFormat_YV12",
    "MFVideoFormat_YVU9",
    "MFVideoFormat_YVYU",
    "MFVideoFormat_v210",
    "MFVideoFormat_v216",
    "MFVideoFormat_v410",
    "MFVideoInfo",
    "MFVideoInterlaceMode",
    "MFVideoInterlace_FieldInterleavedLowerFirst",
    "MFVideoInterlace_FieldInterleavedUpperFirst",
    "MFVideoInterlace_FieldSingleLower",
    "MFVideoInterlace_FieldSingleUpper",
    "MFVideoInterlace_ForceDWORD",
    "MFVideoInterlace_Last",
    "MFVideoInterlace_MixedInterlaceOrProgressive",
    "MFVideoInterlace_Progressive",
    "MFVideoInterlace_Unknown",
    "MFVideoLighting",
    "MFVideoLighting_ForceDWORD",
    "MFVideoLighting_Last",
    "MFVideoLighting_Unknown",
    "MFVideoLighting_bright",
    "MFVideoLighting_dark",
    "MFVideoLighting_dim",
    "MFVideoLighting_office",
    "MFVideoMixPrefs",
    "MFVideoMixPrefs_AllowDropToBob",
    "MFVideoMixPrefs_AllowDropToHalfInterlace",
    "MFVideoMixPrefs_EnableRotation",
    "MFVideoMixPrefs_ForceBob",
    "MFVideoMixPrefs_ForceHalfInterlace",
    "MFVideoMixPrefs_Mask",
    "MFVideoNormalizedRect",
    "MFVideoPadFlag_PAD_TO_16x9",
    "MFVideoPadFlag_PAD_TO_4x3",
    "MFVideoPadFlag_PAD_TO_None",
    "MFVideoPadFlags",
    "MFVideoPrimaries",
    "MFVideoPrimaries_ACES",
    "MFVideoPrimaries_BT2020",
    "MFVideoPrimaries_BT470_2_SysBG",
    "MFVideoPrimaries_BT470_2_SysM",
    "MFVideoPrimaries_BT709",
    "MFVideoPrimaries_DCI_P3",
    "MFVideoPrimaries_EBU3213",
    "MFVideoPrimaries_ForceDWORD",
    "MFVideoPrimaries_Last",
    "MFVideoPrimaries_SMPTE170M",
    "MFVideoPrimaries_SMPTE240M",
    "MFVideoPrimaries_SMPTE_C",
    "MFVideoPrimaries_Unknown",
    "MFVideoPrimaries_XYZ",
    "MFVideoPrimaries_reserved",
    "MFVideoRenderPrefs",
    "MFVideoRenderPrefs_AllowBatching",
    "MFVideoRenderPrefs_AllowOutputThrottling",
    "MFVideoRenderPrefs_AllowScaling",
    "MFVideoRenderPrefs_DoNotClipToDevice",
    "MFVideoRenderPrefs_DoNotRenderBorder",
    "MFVideoRenderPrefs_DoNotRepaintOnStop",
    "MFVideoRenderPrefs_ForceBatching",
    "MFVideoRenderPrefs_ForceOutputThrottling",
    "MFVideoRenderPrefs_ForceScaling",
    "MFVideoRenderPrefs_Mask",
    "MFVideoRotationFormat",
    "MFVideoRotationFormat_0",
    "MFVideoRotationFormat_180",
    "MFVideoRotationFormat_270",
    "MFVideoRotationFormat_90",
    "MFVideoSphericalFormat",
    "MFVideoSphericalFormat_3DMesh",
    "MFVideoSphericalFormat_CubeMap",
    "MFVideoSphericalFormat_Equirectangular",
    "MFVideoSphericalFormat_Unsupported",
    "MFVideoSphericalProjectionMode",
    "MFVideoSphericalProjectionMode_Flat",
    "MFVideoSphericalProjectionMode_Spherical",
    "MFVideoSrcContentHintFlag_16x9",
    "MFVideoSrcContentHintFlag_235_1",
    "MFVideoSrcContentHintFlag_None",
    "MFVideoSrcContentHintFlags",
    "MFVideoSurfaceInfo",
    "MFVideoTransFunc_10",
    "MFVideoTransFunc_10_rel",
    "MFVideoTransFunc_18",
    "MFVideoTransFunc_20",
    "MFVideoTransFunc_2020",
    "MFVideoTransFunc_2020_const",
    "MFVideoTransFunc_2084",
    "MFVideoTransFunc_22",
    "MFVideoTransFunc_240M",
    "MFVideoTransFunc_26",
    "MFVideoTransFunc_28",
    "MFVideoTransFunc_709",
    "MFVideoTransFunc_709_sym",
    "MFVideoTransFunc_ForceDWORD",
    "MFVideoTransFunc_HLG",
    "MFVideoTransFunc_Last",
    "MFVideoTransFunc_Log_100",
    "MFVideoTransFunc_Log_316",
    "MFVideoTransFunc_Unknown",
    "MFVideoTransFunc_sRGB",
    "MFVideoTransferFunction",
    "MFVideoTransferMatrix",
    "MFVideoTransferMatrix_BT2020_10",
    "MFVideoTransferMatrix_BT2020_12",
    "MFVideoTransferMatrix_BT601",
    "MFVideoTransferMatrix_BT709",
    "MFVideoTransferMatrix_ForceDWORD",
    "MFVideoTransferMatrix_Last",
    "MFVideoTransferMatrix_SMPTE240M",
    "MFVideoTransferMatrix_Unknown",
    "MFVirtualCameraAccess",
    "MFVirtualCameraAccess_AllUsers",
    "MFVirtualCameraAccess_CurrentUser",
    "MFVirtualCameraLifetime",
    "MFVirtualCameraLifetime_Session",
    "MFVirtualCameraLifetime_System",
    "MFVirtualCameraType",
    "MFVirtualCameraType_SoftwareCameraSource",
    "MFWaveFormatExConvertFlag_ForceExtensible",
    "MFWaveFormatExConvertFlag_Normal",
    "MFWaveFormatExConvertFlags",
    "MFWrapMediaType",
    "MF_1024_BYTE_ALIGNMENT",
    "MF_128_BYTE_ALIGNMENT",
    "MF_16_BYTE_ALIGNMENT",
    "MF_1_BYTE_ALIGNMENT",
    "MF_2048_BYTE_ALIGNMENT",
    "MF_256_BYTE_ALIGNMENT",
    "MF_2_BYTE_ALIGNMENT",
    "MF_32_BYTE_ALIGNMENT",
    "MF_4096_BYTE_ALIGNMENT",
    "MF_4_BYTE_ALIGNMENT",
    "MF_512_BYTE_ALIGNMENT",
    "MF_64_BYTE_ALIGNMENT",
    "MF_8192_BYTE_ALIGNMENT",
    "MF_8_BYTE_ALIGNMENT",
    "MF_ACCESSMODE_READ",
    "MF_ACCESSMODE_READWRITE",
    "MF_ACCESSMODE_WRITE",
    "MF_ACCESS_CONTROLLED_MEDIASOURCE_SERVICE",
    "MF_ACTIVATE_CUSTOM_MIXER",
    "MF_ACTIVATE_CUSTOM_MIXER_ALLOWFAIL",
    "MF_ACTIVATE_CUSTOM_PRESENTER",
    "MF_ACTIVATE_CUSTOM_PRESENTER_ALLOWFAIL",
    "MF_ACTIVATE_CUSTOM_VIDEO_MIXER_ACTIVATE",
    "MF_ACTIVATE_CUSTOM_VIDEO_MIXER_CLSID",
    "MF_ACTIVATE_CUSTOM_VIDEO_MIXER_FLAGS",
    "MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_ACTIVATE",
    "MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_CLSID",
    "MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_FLAGS",
    "MF_ACTIVATE_MFT_LOCKED",
    "MF_ACTIVATE_VIDEO_WINDOW",
    "MF_API_VERSION",
    "MF_ASFPROFILE_MAXPACKETSIZE",
    "MF_ASFPROFILE_MINPACKETSIZE",
    "MF_ASFSTREAMCONFIG_LEAKYBUCKET1",
    "MF_ASFSTREAMCONFIG_LEAKYBUCKET2",
    "MF_ATTRIBUTES_MATCH_ALL_ITEMS",
    "MF_ATTRIBUTES_MATCH_INTERSECTION",
    "MF_ATTRIBUTES_MATCH_OUR_ITEMS",
    "MF_ATTRIBUTES_MATCH_SMALLER",
    "MF_ATTRIBUTES_MATCH_THEIR_ITEMS",
    "MF_ATTRIBUTES_MATCH_TYPE",
    "MF_ATTRIBUTE_BLOB",
    "MF_ATTRIBUTE_DOUBLE",
    "MF_ATTRIBUTE_GUID",
    "MF_ATTRIBUTE_IUNKNOWN",
    "MF_ATTRIBUTE_SERIALIZE_OPTIONS",
    "MF_ATTRIBUTE_SERIALIZE_UNKNOWN_BYREF",
    "MF_ATTRIBUTE_STRING",
    "MF_ATTRIBUTE_TYPE",
    "MF_ATTRIBUTE_UINT32",
    "MF_ATTRIBUTE_UINT64",
    "MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ID",
    "MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ROLE",
    "MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS",
    "MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_CROSSPROCESS",
    "MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_DONT_ALLOW_FORMAT_CHANGES",
    "MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_NOPERSIST",
    "MF_AUDIO_RENDERER_ATTRIBUTE_SESSION_ID",
    "MF_AUDIO_RENDERER_ATTRIBUTE_STREAM_CATEGORY",
    "MF_AUVRHP_ROOMMODEL",
    "MF_BD_MVC_PLANE_OFFSET_METADATA",
    "MF_BOOT_DRIVER_VERIFICATION_FAILED",
    "MF_BYTESTREAMHANDLER_ACCEPTS_SHARE_WRITE",
    "MF_BYTESTREAM_CONTENT_TYPE",
    "MF_BYTESTREAM_DLNA_PROFILE_ID",
    "MF_BYTESTREAM_DURATION",
    "MF_BYTESTREAM_EFFECTIVE_URL",
    "MF_BYTESTREAM_IFO_FILE_URI",
    "MF_BYTESTREAM_LAST_MODIFIED_TIME",
    "MF_BYTESTREAM_ORIGIN_NAME",
    "MF_BYTESTREAM_SERVICE",
    "MF_BYTESTREAM_TRANSCODED",
    "MF_BYTE_STREAM_CACHE_RANGE",
    "MF_CAPTURE_ENGINE_ALL_EFFECTS_REMOVED",
    "MF_CAPTURE_ENGINE_AUDIO_PROCESSING",
    "MF_CAPTURE_ENGINE_AUDIO_PROCESSING_DEFAULT",
    "MF_CAPTURE_ENGINE_AUDIO_PROCESSING_MODE",
    "MF_CAPTURE_ENGINE_AUDIO_PROCESSING_RAW",
    "MF_CAPTURE_ENGINE_CAMERA_STREAM_BLOCKED",
    "MF_CAPTURE_ENGINE_CAMERA_STREAM_UNBLOCKED",
    "MF_CAPTURE_ENGINE_D3D_MANAGER",
    "MF_CAPTURE_ENGINE_DECODER_MFT_FIELDOFUSE_UNLOCK_Attribute",
    "MF_CAPTURE_ENGINE_DEVICE_TYPE",
    "MF_CAPTURE_ENGINE_DEVICE_TYPE_AUDIO",
    "MF_CAPTURE_ENGINE_DEVICE_TYPE_VIDEO",
    "MF_CAPTURE_ENGINE_DISABLE_DXVA",
    "MF_CAPTURE_ENGINE_DISABLE_HARDWARE_TRANSFORMS",
    "MF_CAPTURE_ENGINE_EFFECT_ADDED",
    "MF_CAPTURE_ENGINE_EFFECT_REMOVED",
    "MF_CAPTURE_ENGINE_ENABLE_CAMERA_STREAMSTATE_NOTIFICATION",
    "MF_CAPTURE_ENGINE_ENCODER_MFT_FIELDOFUSE_UNLOCK_Attribute",
    "MF_CAPTURE_ENGINE_ERROR",
    "MF_CAPTURE_ENGINE_EVENT_GENERATOR_GUID",
    "MF_CAPTURE_ENGINE_EVENT_STREAM_INDEX",
    "MF_CAPTURE_ENGINE_INITIALIZED",
    "MF_CAPTURE_ENGINE_MEDIASOURCE",
    "MF_CAPTURE_ENGINE_MEDIASOURCE_CONFIG",
    "MF_CAPTURE_ENGINE_MEDIA_CATEGORY",
    "MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE",
    "MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_COMMUNICATIONS",
    "MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_FARFIELDSPEECH",
    "MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_GAMECHAT",
    "MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_MEDIA",
    "MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_OTHER",
    "MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_SPEECH",
    "MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_UNIFORMSPEECH",
    "MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_VOICETYPING",
    "MF_CAPTURE_ENGINE_OUTPUT_MEDIA_TYPE_SET",
    "MF_CAPTURE_ENGINE_PHOTO_TAKEN",
    "MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_AUDIO",
    "MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_METADATA",
    "MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_PHOTO",
    "MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_PREVIEW",
    "MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_RECORD",
    "MF_CAPTURE_ENGINE_PREVIEW_STARTED",
    "MF_CAPTURE_ENGINE_PREVIEW_STOPPED",
    "MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_PROCESSED_SAMPLES",
    "MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_UNPROCESSED_SAMPLES",
    "MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_PROCESSED_SAMPLES",
    "MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_UNPROCESSED_SAMPLES",
    "MF_CAPTURE_ENGINE_RECORD_STARTED",
    "MF_CAPTURE_ENGINE_RECORD_STOPPED",
    "MF_CAPTURE_ENGINE_SELECTEDCAMERAPROFILE",
    "MF_CAPTURE_ENGINE_SELECTEDCAMERAPROFILE_INDEX",
    "MF_CAPTURE_ENGINE_SINK_TYPE",
    "MF_CAPTURE_ENGINE_SINK_TYPE_PHOTO",
    "MF_CAPTURE_ENGINE_SINK_TYPE_PREVIEW",
    "MF_CAPTURE_ENGINE_SINK_TYPE_RECORD",
    "MF_CAPTURE_ENGINE_SOURCE",
    "MF_CAPTURE_ENGINE_STREAM_CATEGORY",
    "MF_CAPTURE_ENGINE_STREAM_CATEGORY_AUDIO",
    "MF_CAPTURE_ENGINE_STREAM_CATEGORY_METADATA",
    "MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_DEPENDENT",
    "MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_INDEPENDENT",
    "MF_CAPTURE_ENGINE_STREAM_CATEGORY_UNSUPPORTED",
    "MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_CAPTURE",
    "MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_PREVIEW",
    "MF_CAPTURE_ENGINE_USE_AUDIO_DEVICE_ONLY",
    "MF_CAPTURE_ENGINE_USE_VIDEO_DEVICE_ONLY",
    "MF_CAPTURE_METADATA_DIGITALWINDOW",
    "MF_CAPTURE_METADATA_EXIF",
    "MF_CAPTURE_METADATA_EXPOSURE_COMPENSATION",
    "MF_CAPTURE_METADATA_EXPOSURE_TIME",
    "MF_CAPTURE_METADATA_FACEROICHARACTERIZATIONS",
    "MF_CAPTURE_METADATA_FACEROIS",
    "MF_CAPTURE_METADATA_FACEROITIMESTAMPS",
    "MF_CAPTURE_METADATA_FIRST_SCANLINE_START_TIME_QPC",
    "MF_CAPTURE_METADATA_FLASH",
    "MF_CAPTURE_METADATA_FLASH_POWER",
    "MF_CAPTURE_METADATA_FOCUSSTATE",
    "MF_CAPTURE_METADATA_FRAME_BACKGROUND_MASK",
    "MF_CAPTURE_METADATA_FRAME_ILLUMINATION",
    "MF_CAPTURE_METADATA_FRAME_RAWSTREAM",
    "MF_CAPTURE_METADATA_HISTOGRAM",
    "MF_CAPTURE_METADATA_ISO_GAINS",
    "MF_CAPTURE_METADATA_ISO_SPEED",
    "MF_CAPTURE_METADATA_LAST_SCANLINE_END_TIME_QPC",
    "MF_CAPTURE_METADATA_LENS_POSITION",
    "MF_CAPTURE_METADATA_PHOTO_FRAME_FLASH",
    "MF_CAPTURE_METADATA_REQUESTED_FRAME_SETTING_ID",
    "MF_CAPTURE_METADATA_SCANLINE_DIRECTION",
    "MF_CAPTURE_METADATA_SCANLINE_TIME_QPC_ACCURACY",
    "MF_CAPTURE_METADATA_SCENE_MODE",
    "MF_CAPTURE_METADATA_SENSORFRAMERATE",
    "MF_CAPTURE_METADATA_UVC_PAYLOADHEADER",
    "MF_CAPTURE_METADATA_WHITEBALANCE",
    "MF_CAPTURE_METADATA_WHITEBALANCE_GAINS",
    "MF_CAPTURE_METADATA_ZOOMFACTOR",
    "MF_CAPTURE_SINK_PREPARED",
    "MF_CAPTURE_SOURCE_CURRENT_DEVICE_MEDIA_TYPE_SET",
    "MF_COMPONENT_CERT_REVOKED",
    "MF_COMPONENT_HS_CERT_REVOKED",
    "MF_COMPONENT_INVALID_EKU",
    "MF_COMPONENT_INVALID_ROOT",
    "MF_COMPONENT_LS_CERT_REVOKED",
    "MF_COMPONENT_REVOKED",
    "MF_CONNECT_ALLOW_CONVERTER",
    "MF_CONNECT_ALLOW_DECODER",
    "MF_CONNECT_AS_OPTIONAL",
    "MF_CONNECT_AS_OPTIONAL_BRANCH",
    "MF_CONNECT_DIRECT",
    "MF_CONNECT_METHOD",
    "MF_CONNECT_RESOLVE_INDEPENDENT_OUTPUTTYPES",
    "MF_CONTENTDECRYPTIONMODULE_SERVICE",
    "MF_CONTENT_DECRYPTOR_SERVICE",
    "MF_CONTENT_PROTECTION_DEVICE_SERVICE",
    "MF_CROSS_ORIGIN_POLICY",
    "MF_CROSS_ORIGIN_POLICY_ANONYMOUS",
    "MF_CROSS_ORIGIN_POLICY_NONE",
    "MF_CROSS_ORIGIN_POLICY_USE_CREDENTIALS",
    "MF_CUSTOM_DECODE_UNIT_TYPE",
    "MF_D3D11_RESOURCE",
    "MF_D3D12_RESOURCE",
    "MF_D3D12_SYNCHRONIZATION_OBJECT",
    "MF_DECODER_FWD_CUSTOM_SEI_DECODE_ORDER",
    "MF_DECODE_UNIT_NAL",
    "MF_DECODE_UNIT_SEI",
    "MF_DEVICEMFT_CONNECTED_FILTER_KSCONTROL",
    "MF_DEVICEMFT_CONNECTED_PIN_KSCONTROL",
    "MF_DEVICEMFT_EXTENSION_PLUGIN_CLSID",
    "MF_DEVICEMFT_SENSORPROFILE_COLLECTION",
    "MF_DEVICESTREAM_ATTRIBUTE_FACEAUTH_CAPABILITY",
    "MF_DEVICESTREAM_ATTRIBUTE_FRAMESOURCE_TYPES",
    "MF_DEVICESTREAM_ATTRIBUTE_SECURE_CAPABILITY",
    "MF_DEVICESTREAM_EXTENSION_PLUGIN_CLSID",
    "MF_DEVICESTREAM_EXTENSION_PLUGIN_CONNECTION_POINT",
    "MF_DEVICESTREAM_FILTER_KSCONTROL",
    "MF_DEVICESTREAM_FRAMESERVER_HIDDEN",
    "MF_DEVICESTREAM_FRAMESERVER_SHARED",
    "MF_DEVICESTREAM_IMAGE_STREAM",
    "MF_DEVICESTREAM_INDEPENDENT_IMAGE_STREAM",
    "MF_DEVICESTREAM_MAX_FRAME_BUFFERS",
    "MF_DEVICESTREAM_MULTIPLEXED_MANAGER",
    "MF_DEVICESTREAM_PIN_KSCONTROL",
    "MF_DEVICESTREAM_REQUIRED_CAPABILITIES",
    "MF_DEVICESTREAM_REQUIRED_SDDL",
    "MF_DEVICESTREAM_SENSORSTREAM_ID",
    "MF_DEVICESTREAM_SOURCE_ATTRIBUTES",
    "MF_DEVICESTREAM_STREAM_CATEGORY",
    "MF_DEVICESTREAM_STREAM_ID",
    "MF_DEVICESTREAM_TAKEPHOTO_TRIGGER",
    "MF_DEVICESTREAM_TRANSFORM_STREAM_ID",
    "MF_DEVICE_THERMAL_STATE_CHANGED",
    "MF_DEVSOURCE_ATTRIBUTE_FRIENDLY_NAME",
    "MF_DEVSOURCE_ATTRIBUTE_MEDIA_TYPE",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_PASSWORD",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_STREAM_URL",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ENDPOINT_ID",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_GUID",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ROLE",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_SYMBOLIC_LINK",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_CATEGORY",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_GUID",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_HW_SOURCE",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_MAX_BUFFERS",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_PROVIDER_DEVICE_ID",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_SYMBOLIC_LINK",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_USERNAME",
    "MF_DEVSOURCE_ATTRIBUTE_SOURCE_XADDRESS",
    "MF_DISABLE_FRAME_CORRUPTION_INFO",
    "MF_DISABLE_LOCALLY_REGISTERED_PLUGINS",
    "MF_DMFT_FRAME_BUFFER_INFO",
    "MF_DROP_MODE_1",
    "MF_DROP_MODE_2",
    "MF_DROP_MODE_3",
    "MF_DROP_MODE_4",
    "MF_DROP_MODE_5",
    "MF_DROP_MODE_NONE",
    "MF_ENABLE_3DVIDEO_OUTPUT",
    "MF_EVENT_DO_THINNING",
    "MF_EVENT_FLAG_NONE",
    "MF_EVENT_FLAG_NO_WAIT",
    "MF_EVENT_MFT_CONTEXT",
    "MF_EVENT_MFT_INPUT_STREAM_ID",
    "MF_EVENT_OUTPUT_NODE",
    "MF_EVENT_PRESENTATION_TIME_OFFSET",
    "MF_EVENT_SCRUBSAMPLE_TIME",
    "MF_EVENT_SESSIONCAPS",
    "MF_EVENT_SESSIONCAPS_DELTA",
    "MF_EVENT_SOURCE_ACTUAL_START",
    "MF_EVENT_SOURCE_CHARACTERISTICS",
    "MF_EVENT_SOURCE_CHARACTERISTICS_OLD",
    "MF_EVENT_SOURCE_FAKE_START",
    "MF_EVENT_SOURCE_PROJECTSTART",
    "MF_EVENT_SOURCE_TOPOLOGY_CANCELED",
    "MF_EVENT_START_PRESENTATION_TIME",
    "MF_EVENT_START_PRESENTATION_TIME_AT_OUTPUT",
    "MF_EVENT_STREAM_METADATA_CONTENT_KEYIDS",
    "MF_EVENT_STREAM_METADATA_KEYDATA",
    "MF_EVENT_STREAM_METADATA_SYSTEMID",
    "MF_EVENT_TOPOLOGY_STATUS",
    "MF_EVENT_TYPE",
    "MF_EVENT_TYPE_MEAudioSessionDeviceRemoved",
    "MF_EVENT_TYPE_MEAudioSessionDisconnected",
    "MF_EVENT_TYPE_MEAudioSessionExclusiveModeOverride",
    "MF_EVENT_TYPE_MEAudioSessionFormatChanged",
    "MF_EVENT_TYPE_MEAudioSessionGroupingParamChanged",
    "MF_EVENT_TYPE_MEAudioSessionIconChanged",
    "MF_EVENT_TYPE_MEAudioSessionNameChanged",
    "MF_EVENT_TYPE_MEAudioSessionServerShutdown",
    "MF_EVENT_TYPE_MEAudioSessionVolumeChanged",
    "MF_EVENT_TYPE_MEBufferingStarted",
    "MF_EVENT_TYPE_MEBufferingStopped",
    "MF_EVENT_TYPE_MEByteStreamCharacteristicsChanged",
    "MF_EVENT_TYPE_MECaptureAudioSessionDeviceRemoved",
    "MF_EVENT_TYPE_MECaptureAudioSessionDisconnected",
    "MF_EVENT_TYPE_MECaptureAudioSessionExclusiveModeOverride",
    "MF_EVENT_TYPE_MECaptureAudioSessionFormatChanged",
    "MF_EVENT_TYPE_MECaptureAudioSessionServerShutdown",
    "MF_EVENT_TYPE_MECaptureAudioSessionVolumeChanged",
    "MF_EVENT_TYPE_MEConnectEnd",
    "MF_EVENT_TYPE_MEConnectStart",
    "MF_EVENT_TYPE_MEContentProtectionMessage",
    "MF_EVENT_TYPE_MEContentProtectionMetadata",
    "MF_EVENT_TYPE_MEDeviceThermalStateChanged",
    "MF_EVENT_TYPE_MEEnablerCompleted",
    "MF_EVENT_TYPE_MEEnablerProgress",
    "MF_EVENT_TYPE_MEEncodingParameters",
    "MF_EVENT_TYPE_MEEndOfPresentation",
    "MF_EVENT_TYPE_MEEndOfPresentationSegment",
    "MF_EVENT_TYPE_MEEndOfStream",
    "MF_EVENT_TYPE_MEError",
    "MF_EVENT_TYPE_MEExtendedType",
    "MF_EVENT_TYPE_MEGenericV1Anchor",
    "MF_EVENT_TYPE_MEIndividualizationCompleted",
    "MF_EVENT_TYPE_MEIndividualizationStart",
    "MF_EVENT_TYPE_MELicenseAcquisitionCompleted",
    "MF_EVENT_TYPE_MELicenseAcquisitionStart",
    "MF_EVENT_TYPE_MEMediaSample",
    "MF_EVENT_TYPE_MENewPresentation",
    "MF_EVENT_TYPE_MENewStream",
    "MF_EVENT_TYPE_MENonFatalError",
    "MF_EVENT_TYPE_MEPolicyChanged",
    "MF_EVENT_TYPE_MEPolicyError",
    "MF_EVENT_TYPE_MEPolicyReport",
    "MF_EVENT_TYPE_MEPolicySet",
    "MF_EVENT_TYPE_MEQualityNotify",
    "MF_EVENT_TYPE_MEReconnectEnd",
    "MF_EVENT_TYPE_MEReconnectStart",
    "MF_EVENT_TYPE_MERendererEvent",
    "MF_EVENT_TYPE_MEReservedMax",
    "MF_EVENT_TYPE_MESequencerSourceTopologyUpdated",
    "MF_EVENT_TYPE_MESessionCapabilitiesChanged",
    "MF_EVENT_TYPE_MESessionClosed",
    "MF_EVENT_TYPE_MESessionEnded",
    "MF_EVENT_TYPE_MESessionNotifyPresentationTime",
    "MF_EVENT_TYPE_MESessionPaused",
    "MF_EVENT_TYPE_MESessionRateChanged",
    "MF_EVENT_TYPE_MESessionScrubSampleComplete",
    "MF_EVENT_TYPE_MESessionStarted",
    "MF_EVENT_TYPE_MESessionStopped",
    "MF_EVENT_TYPE_MESessionStreamSinkFormatChanged",
    "MF_EVENT_TYPE_MESessionTopologiesCleared",
    "MF_EVENT_TYPE_MESessionTopologySet",
    "MF_EVENT_TYPE_MESessionTopologyStatus",
    "MF_EVENT_TYPE_MESessionUnknown",
    "MF_EVENT_TYPE_MESessionV1Anchor",
    "MF_EVENT_TYPE_MESinkInvalidated",
    "MF_EVENT_TYPE_MESinkUnknown",
    "MF_EVENT_TYPE_MESinkV1Anchor",
    "MF_EVENT_TYPE_MESinkV2Anchor",
    "MF_EVENT_TYPE_MESourceCharacteristicsChanged",
    "MF_EVENT_TYPE_MESourceMetadataChanged",
    "MF_EVENT_TYPE_MESourcePaused",
    "MF_EVENT_TYPE_MESourceRateChangeRequested",
    "MF_EVENT_TYPE_MESourceRateChanged",
    "MF_EVENT_TYPE_MESourceSeeked",
    "MF_EVENT_TYPE_MESourceStarted",
    "MF_EVENT_TYPE_MESourceStopped",
    "MF_EVENT_TYPE_MESourceUnknown",
    "MF_EVENT_TYPE_MESourceV1Anchor",
    "MF_EVENT_TYPE_MEStreamFormatChanged",
    "MF_EVENT_TYPE_MEStreamPaused",
    "MF_EVENT_TYPE_MEStreamSeeked",
    "MF_EVENT_TYPE_MEStreamSinkDeviceChanged",
    "MF_EVENT_TYPE_MEStreamSinkFormatChanged",
    "MF_EVENT_TYPE_MEStreamSinkFormatInvalidated",
    "MF_EVENT_TYPE_MEStreamSinkMarker",
    "MF_EVENT_TYPE_MEStreamSinkPaused",
    "MF_EVENT_TYPE_MEStreamSinkPrerolled",
    "MF_EVENT_TYPE_MEStreamSinkRateChanged",
    "MF_EVENT_TYPE_MEStreamSinkRequestSample",
    "MF_EVENT_TYPE_MEStreamSinkScrubSampleComplete",
    "MF_EVENT_TYPE_MEStreamSinkStarted",
    "MF_EVENT_TYPE_MEStreamSinkStopped",
    "MF_EVENT_TYPE_MEStreamStarted",
    "MF_EVENT_TYPE_MEStreamStopped",
    "MF_EVENT_TYPE_MEStreamThinMode",
    "MF_EVENT_TYPE_MEStreamTick",
    "MF_EVENT_TYPE_METransformDrainComplete",
    "MF_EVENT_TYPE_METransformHaveOutput",
    "MF_EVENT_TYPE_METransformInputStreamStateChanged",
    "MF_EVENT_TYPE_METransformMarker",
    "MF_EVENT_TYPE_METransformNeedInput",
    "MF_EVENT_TYPE_METransformUnknown",
    "MF_EVENT_TYPE_METrustUnknown",
    "MF_EVENT_TYPE_METrustV1Anchor",
    "MF_EVENT_TYPE_MEUnknown",
    "MF_EVENT_TYPE_MEUpdatedStream",
    "MF_EVENT_TYPE_MEVideoCaptureDevicePreempted",
    "MF_EVENT_TYPE_MEVideoCaptureDeviceRemoved",
    "MF_EVENT_TYPE_MEWMDRMIndividualizationCompleted",
    "MF_EVENT_TYPE_MEWMDRMIndividualizationProgress",
    "MF_EVENT_TYPE_MEWMDRMLicenseAcquisitionCompleted",
    "MF_EVENT_TYPE_MEWMDRMLicenseBackupCompleted",
    "MF_EVENT_TYPE_MEWMDRMLicenseBackupProgress",
    "MF_EVENT_TYPE_MEWMDRMLicenseRestoreCompleted",
    "MF_EVENT_TYPE_MEWMDRMLicenseRestoreProgress",
    "MF_EVENT_TYPE_MEWMDRMLicenseStoreCleaned",
    "MF_EVENT_TYPE_MEWMDRMProximityCompleted",
    "MF_EVENT_TYPE_MEWMDRMRevocationDownloadCompleted",
    "MF_EVENT_TYPE_MEWMDRMV1Anchor",
    "MF_E_ALLOCATOR_ALREADY_COMMITED",
    "MF_E_ALLOCATOR_NOT_COMMITED",
    "MF_E_ALLOCATOR_NOT_INITIALIZED",
    "MF_E_ALL_PROCESS_RESTART_REQUIRED",
    "MF_E_ALREADY_INITIALIZED",
    "MF_E_ASF_DROPPED_PACKET",
    "MF_E_ASF_FILESINK_BITRATE_UNKNOWN",
    "MF_E_ASF_INDEXNOTLOADED",
    "MF_E_ASF_INVALIDDATA",
    "MF_E_ASF_MISSINGDATA",
    "MF_E_ASF_NOINDEX",
    "MF_E_ASF_OPAQUEPACKET",
    "MF_E_ASF_OUTOFRANGE",
    "MF_E_ASF_PARSINGINCOMPLETE",
    "MF_E_ASF_TOO_MANY_PAYLOADS",
    "MF_E_ASF_UNSUPPORTED_STREAM_TYPE",
    "MF_E_ATTRIBUTENOTFOUND",
    "MF_E_AUDIO_BUFFER_SIZE_ERROR",
    "MF_E_AUDIO_CLIENT_WRAPPER_SPOOF_ERROR",
    "MF_E_AUDIO_PLAYBACK_DEVICE_INVALIDATED",
    "MF_E_AUDIO_PLAYBACK_DEVICE_IN_USE",
    "MF_E_AUDIO_RECORDING_DEVICE_INVALIDATED",
    "MF_E_AUDIO_RECORDING_DEVICE_IN_USE",
    "MF_E_AUDIO_SERVICE_NOT_RUNNING",
    "MF_E_BACKUP_RESTRICTED_LICENSE",
    "MF_E_BAD_OPL_STRUCTURE_FORMAT",
    "MF_E_BAD_STARTUP_VERSION",
    "MF_E_BANDWIDTH_OVERRUN",
    "MF_E_BUFFERTOOSMALL",
    "MF_E_BYTESTREAM_NOT_SEEKABLE",
    "MF_E_BYTESTREAM_UNKNOWN_LENGTH",
    "MF_E_CANNOT_CREATE_SINK",
    "MF_E_CANNOT_FIND_KEYFRAME_SAMPLE",
    "MF_E_CANNOT_INDEX_IN_PLACE",
    "MF_E_CANNOT_PARSE_BYTESTREAM",
    "MF_E_CAPTURE_ENGINE_ALL_EFFECTS_REMOVED",
    "MF_E_CAPTURE_ENGINE_INVALID_OP",
    "MF_E_CAPTURE_NO_SAMPLES_IN_QUEUE",
    "MF_E_CAPTURE_PROPERTY_SET_DURING_PHOTO",
    "MF_E_CAPTURE_SINK_MIRROR_ERROR",
    "MF_E_CAPTURE_SINK_OUTPUT_NOT_SET",
    "MF_E_CAPTURE_SINK_ROTATE_ERROR",
    "MF_E_CAPTURE_SOURCE_DEVICE_EXTENDEDPROP_OP_IN_PROGRESS",
    "MF_E_CAPTURE_SOURCE_NO_AUDIO_STREAM_PRESENT",
    "MF_E_CAPTURE_SOURCE_NO_INDEPENDENT_PHOTO_STREAM_PRESENT",
    "MF_E_CAPTURE_SOURCE_NO_VIDEO_STREAM_PRESENT",
    "MF_E_CLOCK_AUDIO_DEVICE_POSITION_UNEXPECTED",
    "MF_E_CLOCK_AUDIO_RENDER_POSITION_UNEXPECTED",
    "MF_E_CLOCK_AUDIO_RENDER_TIME_UNEXPECTED",
    "MF_E_CLOCK_INVALID_CONTINUITY_KEY",
    "MF_E_CLOCK_NOT_SIMPLE",
    "MF_E_CLOCK_NO_TIME_SOURCE",
    "MF_E_CLOCK_STATE_ALREADY_SET",
    "MF_E_CODE_EXPIRED",
    "MF_E_COMPONENT_REVOKED",
    "MF_E_CONTENT_PROTECTION_SYSTEM_NOT_ENABLED",
    "MF_E_DEBUGGING_NOT_ALLOWED",
    "MF_E_DISABLED_IN_SAFEMODE",
    "MF_E_DRM_HARDWARE_INCONSISTENT",
    "MF_E_DRM_MIGRATION_NOT_SUPPORTED",
    "MF_E_DRM_UNSUPPORTED",
    "MF_E_DROPTIME_NOT_SUPPORTED",
    "MF_E_DURATION_TOO_LONG",
    "MF_E_DXGI_DEVICE_NOT_INITIALIZED",
    "MF_E_DXGI_NEW_VIDEO_DEVICE",
    "MF_E_DXGI_VIDEO_DEVICE_LOCKED",
    "MF_E_END_OF_STREAM",
    "MF_E_FLUSH_NEEDED",
    "MF_E_FORMAT_CHANGE_NOT_SUPPORTED",
    "MF_E_GRL_ABSENT",
    "MF_E_GRL_EXTENSIBLE_ENTRY_NOT_FOUND",
    "MF_E_GRL_INVALID_FORMAT",
    "MF_E_GRL_RENEWAL_NOT_FOUND",
    "MF_E_GRL_UNRECOGNIZED_FORMAT",
    "MF_E_GRL_VERSION_TOO_LOW",
    "MF_E_HARDWARE_DRM_UNSUPPORTED",
    "MF_E_HDCP_AUTHENTICATION_FAILURE",
    "MF_E_HDCP_LINK_FAILURE",
    "MF_E_HIGH_SECURITY_LEVEL_CONTENT_NOT_ALLOWED",
    "MF_E_HW_ACCELERATED_THUMBNAIL_NOT_SUPPORTED",
    "MF_E_HW_MFT_FAILED_START_STREAMING",
    "MF_E_HW_STREAM_NOT_CONNECTED",
    "MF_E_INCOMPATIBLE_SAMPLE_PROTECTION",
    "MF_E_INDEX_NOT_COMMITTED",
    "MF_E_INSUFFICIENT_BUFFER",
    "MF_E_INVALIDINDEX",
    "MF_E_INVALIDMEDIATYPE",
    "MF_E_INVALIDNAME",
    "MF_E_INVALIDREQUEST",
    "MF_E_INVALIDSTREAMNUMBER",
    "MF_E_INVALIDTYPE",
    "MF_E_INVALID_AKE_CHANNEL_PARAMETERS",
    "MF_E_INVALID_ASF_STREAMID",
    "MF_E_INVALID_CODEC_MERIT",
    "MF_E_INVALID_FILE_FORMAT",
    "MF_E_INVALID_FORMAT",
    "MF_E_INVALID_KEY",
    "MF_E_INVALID_POSITION",
    "MF_E_INVALID_PROFILE",
    "MF_E_INVALID_STATE_TRANSITION",
    "MF_E_INVALID_STREAM_DATA",
    "MF_E_INVALID_STREAM_STATE",
    "MF_E_INVALID_TIMESTAMP",
    "MF_E_INVALID_WORKQUEUE",
    "MF_E_ITA_ERROR_PARSING_SAP_PARAMETERS",
    "MF_E_ITA_OPL_DATA_NOT_INITIALIZED",
    "MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_OUTPUT",
    "MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_PROTECTION_GUID",
    "MF_E_ITA_UNRECOGNIZED_DIGITAL_VIDEO_OUTPUT",
    "MF_E_ITA_UNSUPPORTED_ACTION",
    "MF_E_KERNEL_UNTRUSTED",
    "MF_E_LATE_SAMPLE",
    "MF_E_LICENSE_INCORRECT_RIGHTS",
    "MF_E_LICENSE_OUTOFDATE",
    "MF_E_LICENSE_REQUIRED",
    "MF_E_LICENSE_RESTORE_NEEDS_INDIVIDUALIZATION",
    "MF_E_LICENSE_RESTORE_NO_RIGHTS",
    "MF_E_MEDIAPROC_WRONGSTATE",
    "MF_E_MEDIA_EXTENSION_APPSERVICE_CONNECTION_FAILED",
    "MF_E_MEDIA_EXTENSION_APPSERVICE_REQUEST_FAILED",
    "MF_E_MEDIA_EXTENSION_PACKAGE_INTEGRITY_CHECK_FAILED",
    "MF_E_MEDIA_EXTENSION_PACKAGE_LICENSE_INVALID",
    "MF_E_MEDIA_SOURCE_NOT_STARTED",
    "MF_E_MEDIA_SOURCE_NO_STREAMS_SELECTED",
    "MF_E_MEDIA_SOURCE_WRONGSTATE",
    "MF_E_METADATA_TOO_LONG",
    "MF_E_MISSING_ASF_LEAKYBUCKET",
    "MF_E_MP3_BAD_CRC",
    "MF_E_MP3_NOTFOUND",
    "MF_E_MP3_NOTMP3",
    "MF_E_MP3_NOTSUPPORTED",
    "MF_E_MP3_OUTOFDATA",
    "MF_E_MULTIPLE_BEGIN",
    "MF_E_MULTIPLE_SUBSCRIBERS",
    "MF_E_NETWORK_RESOURCE_FAILURE",
    "MF_E_NET_BAD_CONTROL_DATA",
    "MF_E_NET_BAD_REQUEST",
    "MF_E_NET_BUSY",
    "MF_E_NET_BWLEVEL_NOT_SUPPORTED",
    "MF_E_NET_CACHESTREAM_NOT_FOUND",
    "MF_E_NET_CACHE_NO_DATA",
    "MF_E_NET_CANNOTCONNECT",
    "MF_E_NET_CLIENT_CLOSE",
    "MF_E_NET_COMPANION_DRIVER_DISCONNECT",
    "MF_E_NET_CONNECTION_FAILURE",
    "MF_E_NET_EOL",
    "MF_E_NET_ERROR_FROM_PROXY",
    "MF_E_NET_INCOMPATIBLE_PUSHSERVER",
    "MF_E_NET_INCOMPATIBLE_SERVER",
    "MF_E_NET_INTERNAL_SERVER_ERROR",
    "MF_E_NET_INVALID_PRESENTATION_DESCRIPTOR",
    "MF_E_NET_INVALID_PUSH_PUBLISHING_POINT",
    "MF_E_NET_INVALID_PUSH_TEMPLATE",
    "MF_E_NET_MANUALSS_NOT_SUPPORTED",
    "MF_E_NET_NOCONNECTION",
    "MF_E_NET_PROTOCOL_DISABLED",
    "MF_E_NET_PROXY_ACCESSDENIED",
    "MF_E_NET_PROXY_TIMEOUT",
    "MF_E_NET_READ",
    "MF_E_NET_REDIRECT",
    "MF_E_NET_REDIRECT_TO_PROXY",
    "MF_E_NET_REQUIRE_ASYNC",
    "MF_E_NET_REQUIRE_INPUT",
    "MF_E_NET_REQUIRE_NETWORK",
    "MF_E_NET_RESOURCE_GONE",
    "MF_E_NET_SERVER_ACCESSDENIED",
    "MF_E_NET_SERVER_UNAVAILABLE",
    "MF_E_NET_SESSION_INVALID",
    "MF_E_NET_SESSION_NOT_FOUND",
    "MF_E_NET_STREAMGROUPS_NOT_SUPPORTED",
    "MF_E_NET_TIMEOUT",
    "MF_E_NET_TOO_MANY_REDIRECTS",
    "MF_E_NET_TOO_MUCH_DATA",
    "MF_E_NET_UDP_BLOCKED",
    "MF_E_NET_UNSAFE_URL",
    "MF_E_NET_UNSUPPORTED_CONFIGURATION",
    "MF_E_NET_WRITE",
    "MF_E_NEW_VIDEO_DEVICE",
    "MF_E_NON_PE_PROCESS",
    "MF_E_NOTACCEPTING",
    "MF_E_NOT_AVAILABLE",
    "MF_E_NOT_FOUND",
    "MF_E_NOT_INITIALIZED",
    "MF_E_NOT_PROTECTED",
    "MF_E_NO_AUDIO_PLAYBACK_DEVICE",
    "MF_E_NO_AUDIO_RECORDING_DEVICE",
    "MF_E_NO_BITPUMP",
    "MF_E_NO_CAPTURE_DEVICES_AVAILABLE",
    "MF_E_NO_CLOCK",
    "MF_E_NO_CONTENT_PROTECTION_MANAGER",
    "MF_E_NO_DURATION",
    "MF_E_NO_EVENTS_AVAILABLE",
    "MF_E_NO_INDEX",
    "MF_E_NO_MORE_DROP_MODES",
    "MF_E_NO_MORE_QUALITY_LEVELS",
    "MF_E_NO_MORE_TYPES",
    "MF_E_NO_PMP_HOST",
    "MF_E_NO_SAMPLE_DURATION",
    "MF_E_NO_SAMPLE_TIMESTAMP",
    "MF_E_NO_SOURCE_IN_CACHE",
    "MF_E_NO_VIDEO_SAMPLE_AVAILABLE",
    "MF_E_OFFLINE_MODE",
    "MF_E_OPERATION_CANCELLED",
    "MF_E_OPERATION_IN_PROGRESS",
    "MF_E_OPERATION_UNSUPPORTED_AT_D3D_FEATURE_LEVEL",
    "MF_E_OPL_NOT_SUPPORTED",
    "MF_E_OUT_OF_RANGE",
    "MF_E_PEAUTH_NOT_STARTED",
    "MF_E_PEAUTH_PUBLICKEY_REVOKED",
    "MF_E_PEAUTH_SESSION_NOT_STARTED",
    "MF_E_PEAUTH_UNTRUSTED",
    "MF_E_PE_SESSIONS_MAXED",
    "MF_E_PE_UNTRUSTED",
    "MF_E_PLATFORM_NOT_INITIALIZED",
    "MF_E_POLICY_MGR_ACTION_OUTOFBOUNDS",
    "MF_E_POLICY_UNSUPPORTED",
    "MF_E_PROCESS_RESTART_REQUIRED",
    "MF_E_PROPERTY_EMPTY",
    "MF_E_PROPERTY_NOT_ALLOWED",
    "MF_E_PROPERTY_NOT_EMPTY",
    "MF_E_PROPERTY_NOT_FOUND",
    "MF_E_PROPERTY_READ_ONLY",
    "MF_E_PROPERTY_TYPE_NOT_ALLOWED",
    "MF_E_PROPERTY_TYPE_NOT_SUPPORTED",
    "MF_E_PROPERTY_VECTOR_NOT_ALLOWED",
    "MF_E_PROPERTY_VECTOR_REQUIRED",
    "MF_E_QM_INVALIDSTATE",
    "MF_E_QUALITYKNOB_WAIT_LONGER",
    "MF_E_RATE_CHANGE_PREEMPTED",
    "MF_E_REBOOT_REQUIRED",
    "MF_E_RESOLUTION_REQUIRES_PMP_CREATION_CALLBACK",
    "MF_E_REVERSE_UNSUPPORTED",
    "MF_E_RT_OUTOFMEMORY",
    "MF_E_RT_THROUGHPUT_NOT_AVAILABLE",
    "MF_E_RT_TOO_MANY_CLASSES",
    "MF_E_RT_UNAVAILABLE",
    "MF_E_RT_WORKQUEUE_CLASS_NOT_SPECIFIED",
    "MF_E_RT_WOULDBLOCK",
    "MF_E_SAMPLEALLOCATOR_CANCELED",
    "MF_E_SAMPLEALLOCATOR_EMPTY",
    "MF_E_SAMPLE_HAS_TOO_MANY_BUFFERS",
    "MF_E_SAMPLE_NOT_WRITABLE",
    "MF_E_SEQUENCER_UNKNOWN_SEGMENT_ID",
    "MF_E_SESSION_PAUSEWHILESTOPPED",
    "MF_E_SHUTDOWN",
    "MF_E_SIGNATURE_VERIFICATION_FAILED",
    "MF_E_SINK_ALREADYSTOPPED",
    "MF_E_SINK_HEADERS_NOT_FOUND",
    "MF_E_SINK_NO_SAMPLES_PROCESSED",
    "MF_E_SINK_NO_STREAMS",
    "MF_E_SOURCERESOLVER_MUTUALLY_EXCLUSIVE_FLAGS",
    "MF_E_STATE_TRANSITION_PENDING",
    "MF_E_STREAMSINKS_FIXED",
    "MF_E_STREAMSINKS_OUT_OF_SYNC",
    "MF_E_STREAMSINK_EXISTS",
    "MF_E_STREAMSINK_REMOVED",
    "MF_E_STREAM_ERROR",
    "MF_E_TEST_SIGNED_COMPONENTS_NOT_ALLOWED",
    "MF_E_THINNING_UNSUPPORTED",
    "MF_E_TIMELINECONTROLLER_CANNOT_ATTACH",
    "MF_E_TIMELINECONTROLLER_NOT_ALLOWED",
    "MF_E_TIMELINECONTROLLER_UNSUPPORTED_SOURCE_TYPE",
    "MF_E_TIMER_ORPHANED",
    "MF_E_TOPOLOGY_VERIFICATION_FAILED",
    "MF_E_TOPO_CANNOT_CONNECT",
    "MF_E_TOPO_CANNOT_FIND_DECRYPTOR",
    "MF_E_TOPO_CODEC_NOT_FOUND",
    "MF_E_TOPO_INVALID_OPTIONAL_NODE",
    "MF_E_TOPO_INVALID_TIME_ATTRIBUTES",
    "MF_E_TOPO_LOOPS_IN_TOPOLOGY",
    "MF_E_TOPO_MISSING_PRESENTATION_DESCRIPTOR",
    "MF_E_TOPO_MISSING_SOURCE",
    "MF_E_TOPO_MISSING_STREAM_DESCRIPTOR",
    "MF_E_TOPO_SINK_ACTIVATES_UNSUPPORTED",
    "MF_E_TOPO_STREAM_DESCRIPTOR_NOT_SELECTED",
    "MF_E_TOPO_UNSUPPORTED",
    "MF_E_TRANSCODE_INVALID_PROFILE",
    "MF_E_TRANSCODE_NO_CONTAINERTYPE",
    "MF_E_TRANSCODE_NO_MATCHING_ENCODER",
    "MF_E_TRANSCODE_PROFILE_NO_MATCHING_STREAMS",
    "MF_E_TRANSFORM_ASYNC_LOCKED",
    "MF_E_TRANSFORM_ASYNC_MFT_NOT_SUPPORTED",
    "MF_E_TRANSFORM_CANNOT_CHANGE_MEDIATYPE_WHILE_PROCESSING",
    "MF_E_TRANSFORM_CANNOT_INITIALIZE_ACM_DRIVER",
    "MF_E_TRANSFORM_CONFLICTS_WITH_OTHER_CURRENTLY_ENABLED_FEATURES",
    "MF_E_TRANSFORM_EXATTRIBUTE_NOT_SUPPORTED",
    "MF_E_TRANSFORM_INPUT_REMAINING",
    "MF_E_TRANSFORM_NEED_MORE_INPUT",
    "MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_INPUT_MEDIATYPE",
    "MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_MEDIATYPE_COMBINATION",
    "MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_OUTPUT_MEDIATYPE",
    "MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_SPKR_CONFIG",
    "MF_E_TRANSFORM_PROFILE_INVALID_OR_CORRUPT",
    "MF_E_TRANSFORM_PROFILE_MISSING",
    "MF_E_TRANSFORM_PROFILE_TRUNCATED",
    "MF_E_TRANSFORM_PROPERTY_ARRAY_VALUE_WRONG_NUM_DIM",
    "MF_E_TRANSFORM_PROPERTY_NOT_WRITEABLE",
    "MF_E_TRANSFORM_PROPERTY_PID_NOT_RECOGNIZED",
    "MF_E_TRANSFORM_PROPERTY_VALUE_INCOMPATIBLE",
    "MF_E_TRANSFORM_PROPERTY_VALUE_OUT_OF_RANGE",
    "MF_E_TRANSFORM_PROPERTY_VALUE_SIZE_WRONG",
    "MF_E_TRANSFORM_PROPERTY_VARIANT_TYPE_WRONG",
    "MF_E_TRANSFORM_STREAM_CHANGE",
    "MF_E_TRANSFORM_STREAM_INVALID_RESOLUTION",
    "MF_E_TRANSFORM_TYPE_NOT_SET",
    "MF_E_TRUST_DISABLED",
    "MF_E_UNAUTHORIZED",
    "MF_E_UNEXPECTED",
    "MF_E_UNRECOVERABLE_ERROR_OCCURRED",
    "MF_E_UNSUPPORTED_BYTESTREAM_TYPE",
    "MF_E_UNSUPPORTED_CAPTION",
    "MF_E_UNSUPPORTED_CAPTURE_DEVICE_PRESENT",
    "MF_E_UNSUPPORTED_CHARACTERISTICS",
    "MF_E_UNSUPPORTED_CONTENT_PROTECTION_SYSTEM",
    "MF_E_UNSUPPORTED_D3D_TYPE",
    "MF_E_UNSUPPORTED_FORMAT",
    "MF_E_UNSUPPORTED_MEDIATYPE_AT_D3D_FEATURE_LEVEL",
    "MF_E_UNSUPPORTED_RATE",
    "MF_E_UNSUPPORTED_RATE_TRANSITION",
    "MF_E_UNSUPPORTED_REPRESENTATION",
    "MF_E_UNSUPPORTED_SCHEME",
    "MF_E_UNSUPPORTED_SERVICE",
    "MF_E_UNSUPPORTED_STATE_TRANSITION",
    "MF_E_UNSUPPORTED_TIME_FORMAT",
    "MF_E_USERMODE_UNTRUSTED",
    "MF_E_VIDEO_DEVICE_LOCKED",
    "MF_E_VIDEO_RECORDING_DEVICE_INVALIDATED",
    "MF_E_VIDEO_RECORDING_DEVICE_PREEMPTED",
    "MF_E_VIDEO_REN_COPYPROT_FAILED",
    "MF_E_VIDEO_REN_NO_DEINTERLACE_HW",
    "MF_E_VIDEO_REN_NO_PROCAMP_HW",
    "MF_E_VIDEO_REN_SURFACE_NOT_SHARED",
    "MF_E_WMDRMOTA_ACTION_ALREADY_SET",
    "MF_E_WMDRMOTA_ACTION_MISMATCH",
    "MF_E_WMDRMOTA_DRM_ENCRYPTION_SCHEME_NOT_SUPPORTED",
    "MF_E_WMDRMOTA_DRM_HEADER_NOT_AVAILABLE",
    "MF_E_WMDRMOTA_INVALID_POLICY",
    "MF_E_WMDRMOTA_NO_ACTION",
    "MF_FILEFLAGS_ALLOW_WRITE_SHARING",
    "MF_FILEFLAGS_NOBUFFERING",
    "MF_FILEFLAGS_NONE",
    "MF_FILE_ACCESSMODE",
    "MF_FILE_FLAGS",
    "MF_FILE_OPENMODE",
    "MF_FLOAT2",
    "MF_FLOAT3",
    "MF_FRAMESERVER_VCAMEVENT_EXTENDED_CUSTOM_EVENT",
    "MF_FRAMESERVER_VCAMEVENT_EXTENDED_PIPELINE_SHUTDOWN",
    "MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_INITIALIZE",
    "MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_START",
    "MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_STOP",
    "MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_UNINITIALIZE",
    "MF_GRL_ABSENT",
    "MF_GRL_LOAD_FAILED",
    "MF_HDCP_STATUS",
    "MF_HDCP_STATUS_OFF",
    "MF_HDCP_STATUS_ON",
    "MF_HDCP_STATUS_ON_WITH_TYPE_ENFORCEMENT",
    "MF_HISTOGRAM_CHANNEL_B",
    "MF_HISTOGRAM_CHANNEL_Cb",
    "MF_HISTOGRAM_CHANNEL_Cr",
    "MF_HISTOGRAM_CHANNEL_G",
    "MF_HISTOGRAM_CHANNEL_R",
    "MF_HISTOGRAM_CHANNEL_Y",
    "MF_INDEPENDENT_STILL_IMAGE",
    "MF_INDEX_SIZE_ERR",
    "MF_INVALID_ACCESS_ERR",
    "MF_INVALID_GRL_SIGNATURE",
    "MF_INVALID_PRESENTATION_TIME",
    "MF_INVALID_STATE_ERR",
    "MF_I_MANUAL_PROXY",
    "MF_KERNEL_MODE_COMPONENT_LOAD",
    "MF_LEAKY_BUCKET_PAIR",
    "MF_LICENSE_URL_TAMPERED",
    "MF_LICENSE_URL_TRUSTED",
    "MF_LICENSE_URL_UNTRUSTED",
    "MF_LOCAL_MFT_REGISTRATION_SERVICE",
    "MF_LOCAL_PLUGIN_CONTROL_POLICY",
    "MF_LOW_LATENCY",
    "MF_LUMA_KEY_ENABLE",
    "MF_LUMA_KEY_LOWER",
    "MF_LUMA_KEY_UPPER",
    "MF_MEDIAENGINE_KEYERR_CLIENT",
    "MF_MEDIAENGINE_KEYERR_DOMAIN",
    "MF_MEDIAENGINE_KEYERR_HARDWARECHANGE",
    "MF_MEDIAENGINE_KEYERR_OUTPUT",
    "MF_MEDIAENGINE_KEYERR_SERVICE",
    "MF_MEDIAENGINE_KEYERR_UNKNOWN",
    "MF_MEDIAKEYSESSION_MESSAGETYPE",
    "MF_MEDIAKEYSESSION_MESSAGETYPE_INDIVIDUALIZATION_REQUEST",
    "MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RELEASE",
    "MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RENEWAL",
    "MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_REQUEST",
    "MF_MEDIAKEYSESSION_TYPE",
    "MF_MEDIAKEYSESSION_TYPE_PERSISTENT_LICENSE",
    "MF_MEDIAKEYSESSION_TYPE_PERSISTENT_RELEASE_MESSAGE",
    "MF_MEDIAKEYSESSION_TYPE_PERSISTENT_USAGE_RECORD",
    "MF_MEDIAKEYSESSION_TYPE_TEMPORARY",
    "MF_MEDIAKEYS_REQUIREMENT",
    "MF_MEDIAKEYS_REQUIREMENT_NOT_ALLOWED",
    "MF_MEDIAKEYS_REQUIREMENT_OPTIONAL",
    "MF_MEDIAKEYS_REQUIREMENT_REQUIRED",
    "MF_MEDIAKEY_STATUS",
    "MF_MEDIAKEY_STATUS_EXPIRED",
    "MF_MEDIAKEY_STATUS_INTERNAL_ERROR",
    "MF_MEDIAKEY_STATUS_OUTPUT_DOWNSCALED",
    "MF_MEDIAKEY_STATUS_OUTPUT_NOT_ALLOWED",
    "MF_MEDIAKEY_STATUS_OUTPUT_RESTRICTED",
    "MF_MEDIAKEY_STATUS_RELEASED",
    "MF_MEDIAKEY_STATUS_STATUS_PENDING",
    "MF_MEDIAKEY_STATUS_USABLE",
    "MF_MEDIASINK_AUTOFINALIZE_SUPPORTED",
    "MF_MEDIASINK_ENABLE_AUTOFINALIZE",
    "MF_MEDIASOURCE_EXPOSE_ALL_STREAMS",
    "MF_MEDIASOURCE_SERVICE",
    "MF_MEDIATYPE_EQUAL_FORMAT_DATA",
    "MF_MEDIATYPE_EQUAL_FORMAT_TYPES",
    "MF_MEDIATYPE_EQUAL_FORMAT_USER_DATA",
    "MF_MEDIATYPE_EQUAL_MAJOR_TYPES",
    "MF_MEDIATYPE_MULTIPLEXED_MANAGER",
    "MF_MEDIA_ENGINE_AUDIOONLY",
    "MF_MEDIA_ENGINE_AUDIO_CATEGORY",
    "MF_MEDIA_ENGINE_AUDIO_ENDPOINT_ROLE",
    "MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE",
    "MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE10",
    "MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE11",
    "MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE9",
    "MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE_EDGE",
    "MF_MEDIA_ENGINE_CALLBACK",
    "MF_MEDIA_ENGINE_CANPLAY",
    "MF_MEDIA_ENGINE_CANPLAY_MAYBE",
    "MF_MEDIA_ENGINE_CANPLAY_NOT_SUPPORTED",
    "MF_MEDIA_ENGINE_CANPLAY_PROBABLY",
    "MF_MEDIA_ENGINE_COMPATIBILITY_MODE",
    "MF_MEDIA_ENGINE_COMPATIBILITY_MODE_WIN10",
    "MF_MEDIA_ENGINE_COMPATIBILITY_MODE_WWA_EDGE",
    "MF_MEDIA_ENGINE_CONTENT_PROTECTION_FLAGS",
    "MF_MEDIA_ENGINE_CONTENT_PROTECTION_MANAGER",
    "MF_MEDIA_ENGINE_CONTINUE_ON_CODEC_ERROR",
    "MF_MEDIA_ENGINE_COREWINDOW",
    "MF_MEDIA_ENGINE_CREATEFLAGS",
    "MF_MEDIA_ENGINE_CREATEFLAGS_MASK",
    "MF_MEDIA_ENGINE_DISABLE_LOCAL_PLUGINS",
    "MF_MEDIA_ENGINE_DXGI_MANAGER",
    "MF_MEDIA_ENGINE_EME_CALLBACK",
    "MF_MEDIA_ENGINE_ENABLE_PROTECTED_CONTENT",
    "MF_MEDIA_ENGINE_ERR",
    "MF_MEDIA_ENGINE_ERR_ABORTED",
    "MF_MEDIA_ENGINE_ERR_DECODE",
    "MF_MEDIA_ENGINE_ERR_ENCRYPTED",
    "MF_MEDIA_ENGINE_ERR_NETWORK",
    "MF_MEDIA_ENGINE_ERR_NOERROR",
    "MF_MEDIA_ENGINE_ERR_SRC_NOT_SUPPORTED",
    "MF_MEDIA_ENGINE_EVENT",
    "MF_MEDIA_ENGINE_EVENT_ABORT",
    "MF_MEDIA_ENGINE_EVENT_AUDIOENDPOINTCHANGE",
    "MF_MEDIA_ENGINE_EVENT_BALANCECHANGE",
    "MF_MEDIA_ENGINE_EVENT_BUFFERINGENDED",
    "MF_MEDIA_ENGINE_EVENT_BUFFERINGSTARTED",
    "MF_MEDIA_ENGINE_EVENT_CANPLAY",
    "MF_MEDIA_ENGINE_EVENT_CANPLAYTHROUGH",
    "MF_MEDIA_ENGINE_EVENT_DELAYLOADEVENT_CHANGED",
    "MF_MEDIA_ENGINE_EVENT_DOWNLOADCOMPLETE",
    "MF_MEDIA_ENGINE_EVENT_DURATIONCHANGE",
    "MF_MEDIA_ENGINE_EVENT_EMPTIED",
    "MF_MEDIA_ENGINE_EVENT_ENDED",
    "MF_MEDIA_ENGINE_EVENT_ERROR",
    "MF_MEDIA_ENGINE_EVENT_FIRSTFRAMEREADY",
    "MF_MEDIA_ENGINE_EVENT_FORMATCHANGE",
    "MF_MEDIA_ENGINE_EVENT_FRAMESTEPCOMPLETED",
    "MF_MEDIA_ENGINE_EVENT_LOADEDDATA",
    "MF_MEDIA_ENGINE_EVENT_LOADEDMETADATA",
    "MF_MEDIA_ENGINE_EVENT_LOADSTART",
    "MF_MEDIA_ENGINE_EVENT_NOTIFYSTABLESTATE",
    "MF_MEDIA_ENGINE_EVENT_OPMINFO",
    "MF_MEDIA_ENGINE_EVENT_PAUSE",
    "MF_MEDIA_ENGINE_EVENT_PLAY",
    "MF_MEDIA_ENGINE_EVENT_PLAYING",
    "MF_MEDIA_ENGINE_EVENT_PROGRESS",
    "MF_MEDIA_ENGINE_EVENT_PURGEQUEUEDEVENTS",
    "MF_MEDIA_ENGINE_EVENT_RATECHANGE",
    "MF_MEDIA_ENGINE_EVENT_RESOURCELOST",
    "MF_MEDIA_ENGINE_EVENT_SEEKED",
    "MF_MEDIA_ENGINE_EVENT_SEEKING",
    "MF_MEDIA_ENGINE_EVENT_STALLED",
    "MF_MEDIA_ENGINE_EVENT_STREAMRENDERINGERROR",
    "MF_MEDIA_ENGINE_EVENT_SUPPORTEDRATES_CHANGED",
    "MF_MEDIA_ENGINE_EVENT_SUSPEND",
    "MF_MEDIA_ENGINE_EVENT_TIMELINE_MARKER",
    "MF_MEDIA_ENGINE_EVENT_TIMEUPDATE",
    "MF_MEDIA_ENGINE_EVENT_TRACKSCHANGE",
    "MF_MEDIA_ENGINE_EVENT_VOLUMECHANGE",
    "MF_MEDIA_ENGINE_EVENT_WAITING",
    "MF_MEDIA_ENGINE_EXTENSION",
    "MF_MEDIA_ENGINE_EXTENSION_TYPE",
    "MF_MEDIA_ENGINE_EXTENSION_TYPE_BYTESTREAM",
    "MF_MEDIA_ENGINE_EXTENSION_TYPE_MEDIASOURCE",
    "MF_MEDIA_ENGINE_FORCEMUTE",
    "MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAGS",
    "MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_PROTECTED",
    "MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_ANTI_SCREEN_SCRAPE_PROTECTION",
    "MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_SURFACE_PROTECTION",
    "MF_MEDIA_ENGINE_KEYERR",
    "MF_MEDIA_ENGINE_MEDIA_PLAYER_MODE",
    "MF_MEDIA_ENGINE_NEEDKEY_CALLBACK",
    "MF_MEDIA_ENGINE_NETWORK",
    "MF_MEDIA_ENGINE_NETWORK_EMPTY",
    "MF_MEDIA_ENGINE_NETWORK_IDLE",
    "MF_MEDIA_ENGINE_NETWORK_LOADING",
    "MF_MEDIA_ENGINE_NETWORK_NO_SOURCE",
    "MF_MEDIA_ENGINE_OPM_ESTABLISHED",
    "MF_MEDIA_ENGINE_OPM_FAILED",
    "MF_MEDIA_ENGINE_OPM_FAILED_BDA",
    "MF_MEDIA_ENGINE_OPM_FAILED_UNSIGNED_DRIVER",
    "MF_MEDIA_ENGINE_OPM_FAILED_VM",
    "MF_MEDIA_ENGINE_OPM_HWND",
    "MF_MEDIA_ENGINE_OPM_NOT_REQUESTED",
    "MF_MEDIA_ENGINE_OPM_STATUS",
    "MF_MEDIA_ENGINE_PLAYBACK_HWND",
    "MF_MEDIA_ENGINE_PLAYBACK_VISUAL",
    "MF_MEDIA_ENGINE_PRELOAD",
    "MF_MEDIA_ENGINE_PRELOAD_AUTOMATIC",
    "MF_MEDIA_ENGINE_PRELOAD_EMPTY",
    "MF_MEDIA_ENGINE_PRELOAD_METADATA",
    "MF_MEDIA_ENGINE_PRELOAD_MISSING",
    "MF_MEDIA_ENGINE_PRELOAD_NONE",
    "MF_MEDIA_ENGINE_PROTECTION_FLAGS",
    "MF_MEDIA_ENGINE_READY",
    "MF_MEDIA_ENGINE_READY_HAVE_CURRENT_DATA",
    "MF_MEDIA_ENGINE_READY_HAVE_ENOUGH_DATA",
    "MF_MEDIA_ENGINE_READY_HAVE_FUTURE_DATA",
    "MF_MEDIA_ENGINE_READY_HAVE_METADATA",
    "MF_MEDIA_ENGINE_READY_HAVE_NOTHING",
    "MF_MEDIA_ENGINE_REAL_TIME_MODE",
    "MF_MEDIA_ENGINE_S3D_PACKING_MODE",
    "MF_MEDIA_ENGINE_S3D_PACKING_MODE_NONE",
    "MF_MEDIA_ENGINE_S3D_PACKING_MODE_SIDE_BY_SIDE",
    "MF_MEDIA_ENGINE_S3D_PACKING_MODE_TOP_BOTTOM",
    "MF_MEDIA_ENGINE_SEEK_MODE",
    "MF_MEDIA_ENGINE_SEEK_MODE_APPROXIMATE",
    "MF_MEDIA_ENGINE_SEEK_MODE_NORMAL",
    "MF_MEDIA_ENGINE_SOURCE_RESOLVER_CONFIG_STORE",
    "MF_MEDIA_ENGINE_STATISTIC",
    "MF_MEDIA_ENGINE_STATISTIC_BUFFER_PROGRESS",
    "MF_MEDIA_ENGINE_STATISTIC_BYTES_DOWNLOADED",
    "MF_MEDIA_ENGINE_STATISTIC_FRAMES_CORRUPTED",
    "MF_MEDIA_ENGINE_STATISTIC_FRAMES_DROPPED",
    "MF_MEDIA_ENGINE_STATISTIC_FRAMES_PER_SECOND",
    "MF_MEDIA_ENGINE_STATISTIC_FRAMES_RENDERED",
    "MF_MEDIA_ENGINE_STATISTIC_PLAYBACK_JITTER",
    "MF_MEDIA_ENGINE_STATISTIC_TOTAL_FRAME_DELAY",
    "MF_MEDIA_ENGINE_STREAMTYPE_FAILED",
    "MF_MEDIA_ENGINE_STREAMTYPE_FAILED_AUDIO",
    "MF_MEDIA_ENGINE_STREAMTYPE_FAILED_UNKNOWN",
    "MF_MEDIA_ENGINE_STREAMTYPE_FAILED_VIDEO",
    "MF_MEDIA_ENGINE_STREAM_CONTAINS_ALPHA_CHANNEL",
    "MF_MEDIA_ENGINE_SYNCHRONOUS_CLOSE",
    "MF_MEDIA_ENGINE_TELEMETRY_APPLICATION_ID",
    "MF_MEDIA_ENGINE_TIMEDTEXT",
    "MF_MEDIA_ENGINE_TRACK_ID",
    "MF_MEDIA_ENGINE_USE_PMP_FOR_ALL_CONTENT",
    "MF_MEDIA_ENGINE_USE_UNPROTECTED_PMP",
    "MF_MEDIA_ENGINE_VIDEO_OUTPUT_FORMAT",
    "MF_MEDIA_ENGINE_WAITFORSTABLE_STATE",
    "MF_MEDIA_PROTECTION_MANAGER_PROPERTIES",
    "MF_MEDIA_SHARING_ENGINE_DEVICE",
    "MF_MEDIA_SHARING_ENGINE_DEVICE_NAME",
    "MF_MEDIA_SHARING_ENGINE_EVENT",
    "MF_MEDIA_SHARING_ENGINE_EVENT_DISCONNECT",
    "MF_MEDIA_SHARING_ENGINE_INITIAL_SEEK_TIME",
    "MF_METADATAFACIALEXPRESSION_SMILE",
    "MF_METADATATIMESTAMPS_DEVICE",
    "MF_METADATATIMESTAMPS_PRESENTATION",
    "MF_METADATA_PROVIDER_SERVICE",
    "MF_MINCRYPT_FAILURE",
    "MF_MP2DLNA_AUDIO_BIT_RATE",
    "MF_MP2DLNA_ENCODE_QUALITY",
    "MF_MP2DLNA_STATISTICS",
    "MF_MP2DLNA_USE_MMCSS",
    "MF_MP2DLNA_VIDEO_BIT_RATE",
    "MF_MPEG4SINK_MAX_CODED_SEQUENCES_PER_FRAGMENT",
    "MF_MPEG4SINK_MINIMUM_PROPERTIES_SIZE",
    "MF_MPEG4SINK_MIN_FRAGMENT_DURATION",
    "MF_MPEG4SINK_MOOV_BEFORE_MDAT",
    "MF_MPEG4SINK_SPSPPS_PASSTHROUGH",
    "MF_MSE_ACTIVELIST_CALLBACK",
    "MF_MSE_APPEND_MODE",
    "MF_MSE_APPEND_MODE_SEGMENTS",
    "MF_MSE_APPEND_MODE_SEQUENCE",
    "MF_MSE_BUFFERLIST_CALLBACK",
    "MF_MSE_CALLBACK",
    "MF_MSE_ERROR",
    "MF_MSE_ERROR_DECODE",
    "MF_MSE_ERROR_NETWORK",
    "MF_MSE_ERROR_NOERROR",
    "MF_MSE_ERROR_UNKNOWN_ERROR",
    "MF_MSE_OPUS_SUPPORT",
    "MF_MSE_OPUS_SUPPORT_OFF",
    "MF_MSE_OPUS_SUPPORT_ON",
    "MF_MSE_OPUS_SUPPORT_TYPE",
    "MF_MSE_READY",
    "MF_MSE_READY_CLOSED",
    "MF_MSE_READY_ENDED",
    "MF_MSE_READY_OPEN",
    "MF_MSE_VP9_SUPPORT",
    "MF_MSE_VP9_SUPPORT_DEFAULT",
    "MF_MSE_VP9_SUPPORT_OFF",
    "MF_MSE_VP9_SUPPORT_ON",
    "MF_MSE_VP9_SUPPORT_TYPE",
    "MF_MT_AAC_AUDIO_PROFILE_LEVEL_INDICATION",
    "MF_MT_AAC_PAYLOAD_TYPE",
    "MF_MT_ALL_SAMPLES_INDEPENDENT",
    "MF_MT_ALPHA_MODE",
    "MF_MT_AM_FORMAT_TYPE",
    "MF_MT_ARBITRARY_FORMAT",
    "MF_MT_ARBITRARY_HEADER",
    "MF_MT_AUDIO_AVG_BYTES_PER_SECOND",
    "MF_MT_AUDIO_BITS_PER_SAMPLE",
    "MF_MT_AUDIO_BLOCK_ALIGNMENT",
    "MF_MT_AUDIO_CHANNEL_MASK",
    "MF_MT_AUDIO_FLAC_MAX_BLOCK_SIZE",
    "MF_MT_AUDIO_FLOAT_SAMPLES_PER_SECOND",
    "MF_MT_AUDIO_FOLDDOWN_MATRIX",
    "MF_MT_AUDIO_NUM_CHANNELS",
    "MF_MT_AUDIO_PREFER_WAVEFORMATEX",
    "MF_MT_AUDIO_SAMPLES_PER_BLOCK",
    "MF_MT_AUDIO_SAMPLES_PER_SECOND",
    "MF_MT_AUDIO_VALID_BITS_PER_SAMPLE",
    "MF_MT_AUDIO_WMADRC_AVGREF",
    "MF_MT_AUDIO_WMADRC_AVGTARGET",
    "MF_MT_AUDIO_WMADRC_PEAKREF",
    "MF_MT_AUDIO_WMADRC_PEAKTARGET",
    "MF_MT_AVG_BITRATE",
    "MF_MT_AVG_BIT_ERROR_RATE",
    "MF_MT_COMPRESSED",
    "MF_MT_CONTAINER_RATE_SCALING",
    "MF_MT_CUSTOM_VIDEO_PRIMARIES",
    "MF_MT_D3D12_CPU_READBACK",
    "MF_MT_D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER",
    "MF_MT_D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL",
    "MF_MT_D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET",
    "MF_MT_D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS",
    "MF_MT_D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS",
    "MF_MT_D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE",
    "MF_MT_D3D12_TEXTURE_LAYOUT",
    "MF_MT_D3D_RESOURCE_VERSION",
    "MF_MT_D3D_RESOURCE_VERSION_ENUM",
    "MF_MT_DECODER_MAX_DPB_COUNT",
    "MF_MT_DECODER_USE_MAX_RESOLUTION",
    "MF_MT_DEFAULT_STRIDE",
    "MF_MT_DEPTH_MEASUREMENT",
    "MF_MT_DEPTH_VALUE_UNIT",
    "MF_MT_DRM_FLAGS",
    "MF_MT_DV_AAUX_CTRL_PACK_0",
    "MF_MT_DV_AAUX_CTRL_PACK_1",
    "MF_MT_DV_AAUX_SRC_PACK_0",
    "MF_MT_DV_AAUX_SRC_PACK_1",
    "MF_MT_DV_VAUX_CTRL_PACK",
    "MF_MT_DV_VAUX_SRC_PACK",
    "MF_MT_FIXED_SIZE_SAMPLES",
    "MF_MT_FORWARD_CUSTOM_NALU",
    "MF_MT_FORWARD_CUSTOM_SEI",
    "MF_MT_FRAME_RATE",
    "MF_MT_FRAME_RATE_RANGE_MAX",
    "MF_MT_FRAME_RATE_RANGE_MIN",
    "MF_MT_FRAME_SIZE",
    "MF_MT_GEOMETRIC_APERTURE",
    "MF_MT_H264_CAPABILITIES",
    "MF_MT_H264_LAYOUT_PER_STREAM",
    "MF_MT_H264_MAX_CODEC_CONFIG_DELAY",
    "MF_MT_H264_MAX_MB_PER_SEC",
    "MF_MT_H264_RATE_CONTROL_MODES",
    "MF_MT_H264_RESOLUTION_SCALING",
    "MF_MT_H264_SIMULCAST_SUPPORT",
    "MF_MT_H264_SUPPORTED_RATE_CONTROL_MODES",
    "MF_MT_H264_SUPPORTED_SLICE_MODES",
    "MF_MT_H264_SUPPORTED_SYNC_FRAME_TYPES",
    "MF_MT_H264_SUPPORTED_USAGES",
    "MF_MT_H264_SVC_CAPABILITIES",
    "MF_MT_H264_USAGE",
    "MF_MT_IMAGE_LOSS_TOLERANT",
    "MF_MT_INTERLACE_MODE",
    "MF_MT_IN_BAND_PARAMETER_SET",
    "MF_MT_MAJOR_TYPE",
    "MF_MT_MAX_FRAME_AVERAGE_LUMINANCE_LEVEL",
    "MF_MT_MAX_KEYFRAME_SPACING",
    "MF_MT_MAX_LUMINANCE_LEVEL",
    "MF_MT_MAX_MASTERING_LUMINANCE",
    "MF_MT_MINIMUM_DISPLAY_APERTURE",
    "MF_MT_MIN_MASTERING_LUMINANCE",
    "MF_MT_MPEG2_CONTENT_PACKET",
    "MF_MT_MPEG2_FLAGS",
    "MF_MT_MPEG2_HDCP",
    "MF_MT_MPEG2_LEVEL",
    "MF_MT_MPEG2_ONE_FRAME_PER_PACKET",
    "MF_MT_MPEG2_PROFILE",
    "MF_MT_MPEG2_STANDARD",
    "MF_MT_MPEG2_TIMECODE",
    "MF_MT_MPEG4_CURRENT_SAMPLE_ENTRY",
    "MF_MT_MPEG4_SAMPLE_DESCRIPTION",
    "MF_MT_MPEG4_TRACK_TYPE",
    "MF_MT_MPEG_SEQUENCE_HEADER",
    "MF_MT_MPEG_START_TIME_CODE",
    "MF_MT_ORIGINAL_4CC",
    "MF_MT_ORIGINAL_WAVE_FORMAT_TAG",
    "MF_MT_OUTPUT_BUFFER_NUM",
    "MF_MT_PAD_CONTROL_FLAGS",
    "MF_MT_PALETTE",
    "MF_MT_PAN_SCAN_APERTURE",
    "MF_MT_PAN_SCAN_ENABLED",
    "MF_MT_PIXEL_ASPECT_RATIO",
    "MF_MT_REALTIME_CONTENT",
    "MF_MT_SAMPLE_SIZE",
    "MF_MT_SECURE",
    "MF_MT_SOURCE_CONTENT_HINT",
    "MF_MT_SPATIAL_AUDIO_DATA_PRESENT",
    "MF_MT_SPATIAL_AUDIO_MAX_DYNAMIC_OBJECTS",
    "MF_MT_SPATIAL_AUDIO_MAX_METADATA_ITEMS",
    "MF_MT_SPATIAL_AUDIO_MIN_METADATA_ITEM_OFFSET_SPACING",
    "MF_MT_SPATIAL_AUDIO_OBJECT_METADATA_FORMAT_ID",
    "MF_MT_SPATIAL_AUDIO_OBJECT_METADATA_LENGTH",
    "MF_MT_SUBTYPE",
    "MF_MT_TIMESTAMP_CAN_BE_DTS",
    "MF_MT_TRANSFER_FUNCTION",
    "MF_MT_USER_DATA",
    "MF_MT_VIDEO_3D",
    "MF_MT_VIDEO_3D_FIRST_IS_LEFT",
    "MF_MT_VIDEO_3D_FORMAT",
    "MF_MT_VIDEO_3D_LEFT_IS_BASE",
    "MF_MT_VIDEO_3D_NUM_VIEWS",
    "MF_MT_VIDEO_CHROMA_SITING",
    "MF_MT_VIDEO_H264_NO_FMOASO",
    "MF_MT_VIDEO_LEVEL",
    "MF_MT_VIDEO_LIGHTING",
    "MF_MT_VIDEO_NOMINAL_RANGE",
    "MF_MT_VIDEO_NO_FRAME_ORDERING",
    "MF_MT_VIDEO_PRIMARIES",
    "MF_MT_VIDEO_PROFILE",
    "MF_MT_VIDEO_RENDERER_EXTENSION_PROFILE",
    "MF_MT_VIDEO_ROTATION",
    "MF_MT_WRAPPED_TYPE",
    "MF_MT_YUV_MATRIX",
    "MF_MULTITHREADED_WORKQUEUE",
    "MF_NALU_LENGTH_INFORMATION",
    "MF_NALU_LENGTH_SET",
    "MF_NOT_FOUND_ERR",
    "MF_NOT_SUPPORTED_ERR",
    "MF_NUM_DROP_MODES",
    "MF_NUM_QUALITY_LEVELS",
    "MF_OBJECT_BYTESTREAM",
    "MF_OBJECT_INVALID",
    "MF_OBJECT_MEDIASOURCE",
    "MF_OBJECT_TYPE",
    "MF_OPENMODE_APPEND_IF_EXIST",
    "MF_OPENMODE_DELETE_IF_EXIST",
    "MF_OPENMODE_FAIL_IF_EXIST",
    "MF_OPENMODE_FAIL_IF_NOT_EXIST",
    "MF_OPENMODE_RESET_IF_EXIST",
    "MF_OPM_ACP_FORCE_ULONG",
    "MF_OPM_ACP_LEVEL_ONE",
    "MF_OPM_ACP_LEVEL_THREE",
    "MF_OPM_ACP_LEVEL_TWO",
    "MF_OPM_ACP_OFF",
    "MF_OPM_ACP_PROTECTION_LEVEL",
    "MF_OPM_CGMSA_COPY_FREELY",
    "MF_OPM_CGMSA_COPY_NEVER",
    "MF_OPM_CGMSA_COPY_NO_MORE",
    "MF_OPM_CGMSA_COPY_ONE_GENERATION",
    "MF_OPM_CGMSA_OFF",
    "MF_OPM_CGMSA_PROTECTION_LEVEL",
    "MF_OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED",
    "MF_OPTIONAL_NODE_REJECTED_MEDIA_TYPE",
    "MF_OPTIONAL_NODE_REJECTED_PROTECTED_PROCESS",
    "MF_PARSE_ERR",
    "MF_PD_ADAPTIVE_STREAMING",
    "MF_PD_APP_CONTEXT",
    "MF_PD_ASF_CODECLIST",
    "MF_PD_ASF_CONTENTENCRYPTIONEX_ENCRYPTION_DATA",
    "MF_PD_ASF_CONTENTENCRYPTION_KEYID",
    "MF_PD_ASF_CONTENTENCRYPTION_LICENSE_URL",
    "MF_PD_ASF_CONTENTENCRYPTION_SECRET_DATA",
    "MF_PD_ASF_CONTENTENCRYPTION_TYPE",
    "MF_PD_ASF_DATA_LENGTH",
    "MF_PD_ASF_DATA_START_OFFSET",
    "MF_PD_ASF_FILEPROPERTIES_CREATION_TIME",
    "MF_PD_ASF_FILEPROPERTIES_FILE_ID",
    "MF_PD_ASF_FILEPROPERTIES_FLAGS",
    "MF_PD_ASF_FILEPROPERTIES_MAX_BITRATE",
    "MF_PD_ASF_FILEPROPERTIES_MAX_PACKET_SIZE",
    "MF_PD_ASF_FILEPROPERTIES_MIN_PACKET_SIZE",
    "MF_PD_ASF_FILEPROPERTIES_PACKETS",
    "MF_PD_ASF_FILEPROPERTIES_PLAY_DURATION",
    "MF_PD_ASF_FILEPROPERTIES_PREROLL",
    "MF_PD_ASF_FILEPROPERTIES_SEND_DURATION",
    "MF_PD_ASF_INFO_HAS_AUDIO",
    "MF_PD_ASF_INFO_HAS_NON_AUDIO_VIDEO",
    "MF_PD_ASF_INFO_HAS_VIDEO",
    "MF_PD_ASF_LANGLIST",
    "MF_PD_ASF_LANGLIST_LEGACYORDER",
    "MF_PD_ASF_MARKER",
    "MF_PD_ASF_METADATA_IS_VBR",
    "MF_PD_ASF_METADATA_LEAKY_BUCKET_PAIRS",
    "MF_PD_ASF_METADATA_V8_BUFFERAVERAGE",
    "MF_PD_ASF_METADATA_V8_VBRPEAK",
    "MF_PD_ASF_SCRIPT",
    "MF_PD_AUDIO_ENCODING_BITRATE",
    "MF_PD_AUDIO_ISVARIABLEBITRATE",
    "MF_PD_DURATION",
    "MF_PD_LAST_MODIFIED_TIME",
    "MF_PD_MIME_TYPE",
    "MF_PD_PLAYBACK_BOUNDARY_TIME",
    "MF_PD_PLAYBACK_ELEMENT_ID",
    "MF_PD_PMPHOST_CONTEXT",
    "MF_PD_PREFERRED_LANGUAGE",
    "MF_PD_SAMI_STYLELIST",
    "MF_PD_TOTAL_FILE_SIZE",
    "MF_PD_VIDEO_ENCODING_BITRATE",
    "MF_PLUGIN_CONTROL_POLICY",
    "MF_PLUGIN_CONTROL_POLICY_USE_ALL_PLUGINS",
    "MF_PLUGIN_CONTROL_POLICY_USE_APPROVED_PLUGINS",
    "MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS",
    "MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS_EDGEMODE",
    "MF_PMP_SERVER_CONTEXT",
    "MF_POLICY_ID",
    "MF_PREFERRED_SOURCE_URI",
    "MF_PROGRESSIVE_CODING_CONTENT",
    "MF_PROPERTY_HANDLER_SERVICE",
    "MF_Plugin_Type",
    "MF_Plugin_Type_MFT",
    "MF_Plugin_Type_MFT_MatchOutputType",
    "MF_Plugin_Type_MediaSource",
    "MF_Plugin_Type_Other",
    "MF_QUALITY_ADVISE_FLAGS",
    "MF_QUALITY_CANNOT_KEEP_UP",
    "MF_QUALITY_DROP_MODE",
    "MF_QUALITY_LEVEL",
    "MF_QUALITY_NORMAL",
    "MF_QUALITY_NORMAL_MINUS_1",
    "MF_QUALITY_NORMAL_MINUS_2",
    "MF_QUALITY_NORMAL_MINUS_3",
    "MF_QUALITY_NORMAL_MINUS_4",
    "MF_QUALITY_NORMAL_MINUS_5",
    "MF_QUALITY_NOTIFY_PROCESSING_LATENCY",
    "MF_QUALITY_NOTIFY_SAMPLE_LAG",
    "MF_QUALITY_SERVICES",
    "MF_QUATERNION",
    "MF_QUOTA_EXCEEDED_ERR",
    "MF_RATE_CONTROL_SERVICE",
    "MF_READWRITE_D3D_OPTIONAL",
    "MF_READWRITE_DISABLE_CONVERTERS",
    "MF_READWRITE_ENABLE_AUTOFINALIZE",
    "MF_READWRITE_ENABLE_HARDWARE_TRANSFORMS",
    "MF_READWRITE_MMCSS_CLASS",
    "MF_READWRITE_MMCSS_CLASS_AUDIO",
    "MF_READWRITE_MMCSS_PRIORITY",
    "MF_READWRITE_MMCSS_PRIORITY_AUDIO",
    "MF_REMOTE_PROXY",
    "MF_RESOLUTION_BYTESTREAM",
    "MF_RESOLUTION_CONTENT_DOES_NOT_HAVE_TO_MATCH_EXTENSION_OR_MIME_TYPE",
    "MF_RESOLUTION_DISABLE_LOCAL_PLUGINS",
    "MF_RESOLUTION_ENABLE_STORE_PLUGINS",
    "MF_RESOLUTION_FLAGS",
    "MF_RESOLUTION_KEEP_BYTE_STREAM_ALIVE_ON_FAIL",
    "MF_RESOLUTION_MEDIASOURCE",
    "MF_RESOLUTION_PLUGIN_CONTROL_POLICY_APPROVED_ONLY",
    "MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY",
    "MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY_EDGEMODE",
    "MF_RESOLUTION_READ",
    "MF_RESOLUTION_WRITE",
    "MF_SAMI_SERVICE",
    "MF_SAMPLEGRABBERSINK_IGNORE_CLOCK",
    "MF_SAMPLEGRABBERSINK_SAMPLE_TIME_OFFSET",
    "MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_AES_CBC",
    "MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_AES_CTR",
    "MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_NONE",
    "MF_SA_AUDIO_ENDPOINT_AWARE",
    "MF_SA_BUFFERS_PER_SAMPLE",
    "MF_SA_D3D11_ALLOCATE_DISPLAYABLE_RESOURCES",
    "MF_SA_D3D11_ALLOW_DYNAMIC_YUV_TEXTURE",
    "MF_SA_D3D11_AWARE",
    "MF_SA_D3D11_BINDFLAGS",
    "MF_SA_D3D11_HW_PROTECTED",
    "MF_SA_D3D11_SHARED",
    "MF_SA_D3D11_SHARED_WITHOUT_MUTEX",
    "MF_SA_D3D11_USAGE",
    "MF_SA_D3D12_CLEAR_VALUE",
    "MF_SA_D3D12_HEAP_FLAGS",
    "MF_SA_D3D12_HEAP_TYPE",
    "MF_SA_D3D_AWARE",
    "MF_SA_MINIMUM_OUTPUT_SAMPLE_COUNT",
    "MF_SA_MINIMUM_OUTPUT_SAMPLE_COUNT_PROGRESSIVE",
    "MF_SA_REQUIRED_SAMPLE_COUNT",
    "MF_SA_REQUIRED_SAMPLE_COUNT_PROGRESSIVE",
    "MF_SDK_VERSION",
    "MF_SD_AMBISONICS_SAMPLE3D_DESCRIPTION",
    "MF_SD_ASF_EXTSTRMPROP_AVG_BUFFERSIZE",
    "MF_SD_ASF_EXTSTRMPROP_AVG_DATA_BITRATE",
    "MF_SD_ASF_EXTSTRMPROP_LANGUAGE_ID_INDEX",
    "MF_SD_ASF_EXTSTRMPROP_MAX_BUFFERSIZE",
    "MF_SD_ASF_EXTSTRMPROP_MAX_DATA_BITRATE",
    "MF_SD_ASF_METADATA_DEVICE_CONFORMANCE_TEMPLATE",
    "MF_SD_ASF_STREAMBITRATES_BITRATE",
    "MF_SD_AUDIO_ENCODER_DELAY",
    "MF_SD_AUDIO_ENCODER_PADDING",
    "MF_SD_LANGUAGE",
    "MF_SD_MEDIASOURCE_STATUS",
    "MF_SD_MUTUALLY_EXCLUSIVE",
    "MF_SD_PROTECTED",
    "MF_SD_SAMI_LANGUAGE",
    "MF_SD_STREAM_NAME",
    "MF_SD_VIDEO_SPHERICAL",
    "MF_SD_VIDEO_SPHERICAL_FORMAT",
    "MF_SD_VIDEO_SPHERICAL_INITIAL_VIEWDIRECTION",
    "MF_SERVICE_LOOKUP_ALL",
    "MF_SERVICE_LOOKUP_DOWNSTREAM",
    "MF_SERVICE_LOOKUP_DOWNSTREAM_DIRECT",
    "MF_SERVICE_LOOKUP_GLOBAL",
    "MF_SERVICE_LOOKUP_TYPE",
    "MF_SERVICE_LOOKUP_UPSTREAM",
    "MF_SERVICE_LOOKUP_UPSTREAM_DIRECT",
    "MF_SESSION_APPROX_EVENT_OCCURRENCE_TIME",
    "MF_SESSION_CONTENT_PROTECTION_MANAGER",
    "MF_SESSION_GLOBAL_TIME",
    "MF_SESSION_QUALITY_MANAGER",
    "MF_SESSION_REMOTE_SOURCE_MODE",
    "MF_SESSION_SERVER_CONTEXT",
    "MF_SESSION_TOPOLOADER",
    "MF_SHARING_ENGINE_CALLBACK",
    "MF_SHARING_ENGINE_EVENT",
    "MF_SHARING_ENGINE_EVENT_DISCONNECT",
    "MF_SHARING_ENGINE_EVENT_ERROR",
    "MF_SHARING_ENGINE_EVENT_LOCALRENDERINGENDED",
    "MF_SHARING_ENGINE_EVENT_LOCALRENDERINGSTARTED",
    "MF_SHARING_ENGINE_EVENT_STOPPED",
    "MF_SHARING_ENGINE_SHAREDRENDERER",
    "MF_SHUTDOWN_RENDERER_ON_ENGINE_SHUTDOWN",
    "MF_SINK_VIDEO_DISPLAY_ASPECT_RATIO_DENOMINATOR",
    "MF_SINK_VIDEO_DISPLAY_ASPECT_RATIO_NUMERATOR",
    "MF_SINK_VIDEO_NATIVE_HEIGHT",
    "MF_SINK_VIDEO_NATIVE_WIDTH",
    "MF_SINK_VIDEO_PTS",
    "MF_SINK_WRITER_ALL_STREAMS",
    "MF_SINK_WRITER_ASYNC_CALLBACK",
    "MF_SINK_WRITER_CONSTANTS",
    "MF_SINK_WRITER_D3D_MANAGER",
    "MF_SINK_WRITER_DISABLE_THROTTLING",
    "MF_SINK_WRITER_ENCODER_CONFIG",
    "MF_SINK_WRITER_INVALID_STREAM_INDEX",
    "MF_SINK_WRITER_MEDIASINK",
    "MF_SINK_WRITER_STATISTICS",
    "MF_SOURCE_PRESENTATION_PROVIDER_SERVICE",
    "MF_SOURCE_READERF_ALLEFFECTSREMOVED",
    "MF_SOURCE_READERF_CURRENTMEDIATYPECHANGED",
    "MF_SOURCE_READERF_ENDOFSTREAM",
    "MF_SOURCE_READERF_ERROR",
    "MF_SOURCE_READERF_NATIVEMEDIATYPECHANGED",
    "MF_SOURCE_READERF_NEWSTREAM",
    "MF_SOURCE_READERF_STREAMTICK",
    "MF_SOURCE_READER_ALL_STREAMS",
    "MF_SOURCE_READER_ANY_STREAM",
    "MF_SOURCE_READER_ASYNC_CALLBACK",
    "MF_SOURCE_READER_CONSTANTS",
    "MF_SOURCE_READER_CONTROLF_DRAIN",
    "MF_SOURCE_READER_CONTROL_FLAG",
    "MF_SOURCE_READER_CURRENT_TYPE_CONSTANTS",
    "MF_SOURCE_READER_CURRENT_TYPE_INDEX",
    "MF_SOURCE_READER_D3D11_BIND_FLAGS",
    "MF_SOURCE_READER_D3D_MANAGER",
    "MF_SOURCE_READER_DISABLE_CAMERA_PLUGINS",
    "MF_SOURCE_READER_DISABLE_DXVA",
    "MF_SOURCE_READER_DISCONNECT_MEDIASOURCE_ON_SHUTDOWN",
    "MF_SOURCE_READER_ENABLE_ADVANCED_VIDEO_PROCESSING",
    "MF_SOURCE_READER_ENABLE_TRANSCODE_ONLY_TRANSFORMS",
    "MF_SOURCE_READER_ENABLE_VIDEO_PROCESSING",
    "MF_SOURCE_READER_FIRST_AUDIO_STREAM",
    "MF_SOURCE_READER_FIRST_VIDEO_STREAM",
    "MF_SOURCE_READER_FLAG",
    "MF_SOURCE_READER_INVALID_STREAM_INDEX",
    "MF_SOURCE_READER_MEDIASOURCE",
    "MF_SOURCE_READER_MEDIASOURCE_CHARACTERISTICS",
    "MF_SOURCE_READER_MEDIASOURCE_CONFIG",
    "MF_SOURCE_STREAM_SUPPORTS_HW_CONNECTION",
    "MF_STANDARD_WORKQUEUE",
    "MF_STF_VERSION_DATE",
    "MF_STF_VERSION_INFO",
    "MF_STREAM_SINK_SUPPORTS_HW_CONNECTION",
    "MF_STREAM_SINK_SUPPORTS_ROTATION",
    "MF_STREAM_STATE",
    "MF_STREAM_STATE_PAUSED",
    "MF_STREAM_STATE_RUNNING",
    "MF_STREAM_STATE_STOPPED",
    "MF_ST_MEDIASOURCE_COLLECTION",
    "MF_SYNTAX_ERR",
    "MF_S_ACTIVATE_REPLACED",
    "MF_S_ASF_PARSEINPROGRESS",
    "MF_S_CLOCK_STOPPED",
    "MF_S_MULTIPLE_BEGIN",
    "MF_S_PE_TRUSTED",
    "MF_S_PROTECTION_NOT_REQUIRED",
    "MF_S_SEQUENCER_CONTEXT_CANCELED",
    "MF_S_SEQUENCER_SEGMENT_AT_END_OF_STREAM",
    "MF_S_SINK_NOT_FINALIZED",
    "MF_S_TRANSFORM_DO_NOT_PROPAGATE_EVENT",
    "MF_S_VIDEO_DISABLED_WITH_UNKNOWN_SOFTWARE_OUTPUT",
    "MF_S_WAIT_FOR_POLICY_SET",
    "MF_SampleProtectionSalt",
    "MF_TEST_SIGNED_COMPONENT_LOADING",
    "MF_TIMECODE_SERVICE",
    "MF_TIMED_TEXT_ALIGNMENT",
    "MF_TIMED_TEXT_ALIGNMENT_CENTER",
    "MF_TIMED_TEXT_ALIGNMENT_END",
    "MF_TIMED_TEXT_ALIGNMENT_START",
    "MF_TIMED_TEXT_BOUTEN_POSITION",
    "MF_TIMED_TEXT_BOUTEN_POSITION_AFTER",
    "MF_TIMED_TEXT_BOUTEN_POSITION_BEFORE",
    "MF_TIMED_TEXT_BOUTEN_POSITION_OUTSIDE",
    "MF_TIMED_TEXT_BOUTEN_TYPE",
    "MF_TIMED_TEXT_BOUTEN_TYPE_AUTO",
    "MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDCIRCLE",
    "MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDDOT",
    "MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDSESAME",
    "MF_TIMED_TEXT_BOUTEN_TYPE_NONE",
    "MF_TIMED_TEXT_BOUTEN_TYPE_OPENCIRCLE",
    "MF_TIMED_TEXT_BOUTEN_TYPE_OPENDOT",
    "MF_TIMED_TEXT_BOUTEN_TYPE_OPENSESAME",
    "MF_TIMED_TEXT_CUE_EVENT",
    "MF_TIMED_TEXT_CUE_EVENT_ACTIVE",
    "MF_TIMED_TEXT_CUE_EVENT_CLEAR",
    "MF_TIMED_TEXT_CUE_EVENT_INACTIVE",
    "MF_TIMED_TEXT_DECORATION",
    "MF_TIMED_TEXT_DECORATION_LINE_THROUGH",
    "MF_TIMED_TEXT_DECORATION_NONE",
    "MF_TIMED_TEXT_DECORATION_OVERLINE",
    "MF_TIMED_TEXT_DECORATION_UNDERLINE",
    "MF_TIMED_TEXT_DISPLAY_ALIGNMENT",
    "MF_TIMED_TEXT_DISPLAY_ALIGNMENT_AFTER",
    "MF_TIMED_TEXT_DISPLAY_ALIGNMENT_BEFORE",
    "MF_TIMED_TEXT_DISPLAY_ALIGNMENT_CENTER",
    "MF_TIMED_TEXT_ERROR_CODE",
    "MF_TIMED_TEXT_ERROR_CODE_DATA_FORMAT",
    "MF_TIMED_TEXT_ERROR_CODE_FATAL",
    "MF_TIMED_TEXT_ERROR_CODE_INTERNAL",
    "MF_TIMED_TEXT_ERROR_CODE_NETWORK",
    "MF_TIMED_TEXT_ERROR_CODE_NOERROR",
    "MF_TIMED_TEXT_FONT_STYLE",
    "MF_TIMED_TEXT_FONT_STYLE_ITALIC",
    "MF_TIMED_TEXT_FONT_STYLE_NORMAL",
    "MF_TIMED_TEXT_FONT_STYLE_OBLIQUE",
    "MF_TIMED_TEXT_RUBY_ALIGN",
    "MF_TIMED_TEXT_RUBY_ALIGN_CENTER",
    "MF_TIMED_TEXT_RUBY_ALIGN_END",
    "MF_TIMED_TEXT_RUBY_ALIGN_SPACEAROUND",
    "MF_TIMED_TEXT_RUBY_ALIGN_SPACEBETWEEN",
    "MF_TIMED_TEXT_RUBY_ALIGN_START",
    "MF_TIMED_TEXT_RUBY_ALIGN_WITHBASE",
    "MF_TIMED_TEXT_RUBY_POSITION",
    "MF_TIMED_TEXT_RUBY_POSITION_AFTER",
    "MF_TIMED_TEXT_RUBY_POSITION_BEFORE",
    "MF_TIMED_TEXT_RUBY_POSITION_OUTSIDE",
    "MF_TIMED_TEXT_RUBY_RESERVE",
    "MF_TIMED_TEXT_RUBY_RESERVE_AFTER",
    "MF_TIMED_TEXT_RUBY_RESERVE_BEFORE",
    "MF_TIMED_TEXT_RUBY_RESERVE_BOTH",
    "MF_TIMED_TEXT_RUBY_RESERVE_NONE",
    "MF_TIMED_TEXT_RUBY_RESERVE_OUTSIDE",
    "MF_TIMED_TEXT_SCROLL_MODE",
    "MF_TIMED_TEXT_SCROLL_MODE_POP_ON",
    "MF_TIMED_TEXT_SCROLL_MODE_ROLL_UP",
    "MF_TIMED_TEXT_TRACK_KIND",
    "MF_TIMED_TEXT_TRACK_KIND_CAPTIONS",
    "MF_TIMED_TEXT_TRACK_KIND_METADATA",
    "MF_TIMED_TEXT_TRACK_KIND_SUBTITLES",
    "MF_TIMED_TEXT_TRACK_KIND_UNKNOWN",
    "MF_TIMED_TEXT_TRACK_READY_STATE",
    "MF_TIMED_TEXT_TRACK_READY_STATE_ERROR",
    "MF_TIMED_TEXT_TRACK_READY_STATE_LOADED",
    "MF_TIMED_TEXT_TRACK_READY_STATE_LOADING",
    "MF_TIMED_TEXT_TRACK_READY_STATE_NONE",
    "MF_TIMED_TEXT_UNIT_TYPE",
    "MF_TIMED_TEXT_UNIT_TYPE_PERCENTAGE",
    "MF_TIMED_TEXT_UNIT_TYPE_PIXELS",
    "MF_TIMED_TEXT_WRITING_MODE",
    "MF_TIMED_TEXT_WRITING_MODE_LR",
    "MF_TIMED_TEXT_WRITING_MODE_LRTB",
    "MF_TIMED_TEXT_WRITING_MODE_RL",
    "MF_TIMED_TEXT_WRITING_MODE_RLTB",
    "MF_TIMED_TEXT_WRITING_MODE_TB",
    "MF_TIMED_TEXT_WRITING_MODE_TBLR",
    "MF_TIMED_TEXT_WRITING_MODE_TBRL",
    "MF_TIME_FORMAT_ENTRY_RELATIVE",
    "MF_TIME_FORMAT_SEGMENT_OFFSET",
    "MF_TOPOLOGY_DXVA_MODE",
    "MF_TOPOLOGY_DYNAMIC_CHANGE_NOT_ALLOWED",
    "MF_TOPOLOGY_ENABLE_XVP_FOR_PLAYBACK",
    "MF_TOPOLOGY_ENUMERATE_SOURCE_TYPES",
    "MF_TOPOLOGY_HARDWARE_MODE",
    "MF_TOPOLOGY_MAX",
    "MF_TOPOLOGY_NO_MARKIN_MARKOUT",
    "MF_TOPOLOGY_OUTPUT_NODE",
    "MF_TOPOLOGY_PLAYBACK_FRAMERATE",
    "MF_TOPOLOGY_PLAYBACK_MAX_DIMS",
    "MF_TOPOLOGY_PROJECTSTART",
    "MF_TOPOLOGY_PROJECTSTOP",
    "MF_TOPOLOGY_RESOLUTION_STATUS",
    "MF_TOPOLOGY_RESOLUTION_STATUS_FLAGS",
    "MF_TOPOLOGY_RESOLUTION_SUCCEEDED",
    "MF_TOPOLOGY_SOURCESTREAM_NODE",
    "MF_TOPOLOGY_START_TIME_ON_PRESENTATION_SWITCH",
    "MF_TOPOLOGY_STATIC_PLAYBACK_OPTIMIZATIONS",
    "MF_TOPOLOGY_TEE_NODE",
    "MF_TOPOLOGY_TRANSFORM_NODE",
    "MF_TOPOLOGY_TYPE",
    "MF_TOPONODE_ATTRIBUTE_EDITOR_SERVICE",
    "MF_TOPONODE_CONNECT_METHOD",
    "MF_TOPONODE_D3DAWARE",
    "MF_TOPONODE_DECODER",
    "MF_TOPONODE_DECRYPTOR",
    "MF_TOPONODE_DISABLE_PREROLL",
    "MF_TOPONODE_DISCARDABLE",
    "MF_TOPONODE_DRAIN",
    "MF_TOPONODE_DRAIN_ALWAYS",
    "MF_TOPONODE_DRAIN_DEFAULT",
    "MF_TOPONODE_DRAIN_MODE",
    "MF_TOPONODE_DRAIN_NEVER",
    "MF_TOPONODE_ERRORCODE",
    "MF_TOPONODE_ERROR_MAJORTYPE",
    "MF_TOPONODE_ERROR_SUBTYPE",
    "MF_TOPONODE_FLUSH",
    "MF_TOPONODE_FLUSH_ALWAYS",
    "MF_TOPONODE_FLUSH_MODE",
    "MF_TOPONODE_FLUSH_NEVER",
    "MF_TOPONODE_FLUSH_SEEK",
    "MF_TOPONODE_LOCKED",
    "MF_TOPONODE_MARKIN_HERE",
    "MF_TOPONODE_MARKOUT_HERE",
    "MF_TOPONODE_MEDIASTART",
    "MF_TOPONODE_MEDIASTOP",
    "MF_TOPONODE_NOSHUTDOWN_ON_REMOVE",
    "MF_TOPONODE_PRESENTATION_DESCRIPTOR",
    "MF_TOPONODE_PRIMARYOUTPUT",
    "MF_TOPONODE_RATELESS",
    "MF_TOPONODE_SEQUENCE_ELEMENTID",
    "MF_TOPONODE_SOURCE",
    "MF_TOPONODE_STREAMID",
    "MF_TOPONODE_STREAM_DESCRIPTOR",
    "MF_TOPONODE_TRANSFORM_OBJECTID",
    "MF_TOPONODE_WORKQUEUE_ID",
    "MF_TOPONODE_WORKQUEUE_ITEM_PRIORITY",
    "MF_TOPONODE_WORKQUEUE_MMCSS_CLASS",
    "MF_TOPONODE_WORKQUEUE_MMCSS_PRIORITY",
    "MF_TOPONODE_WORKQUEUE_MMCSS_TASKID",
    "MF_TOPOSTATUS",
    "MF_TOPOSTATUS_DYNAMIC_CHANGED",
    "MF_TOPOSTATUS_ENDED",
    "MF_TOPOSTATUS_INVALID",
    "MF_TOPOSTATUS_READY",
    "MF_TOPOSTATUS_SINK_SWITCHED",
    "MF_TOPOSTATUS_STARTED_SOURCE",
    "MF_TRANSCODE_ADJUST_PROFILE",
    "MF_TRANSCODE_ADJUST_PROFILE_DEFAULT",
    "MF_TRANSCODE_ADJUST_PROFILE_FLAGS",
    "MF_TRANSCODE_ADJUST_PROFILE_USE_SOURCE_ATTRIBUTES",
    "MF_TRANSCODE_CONTAINERTYPE",
    "MF_TRANSCODE_DONOT_INSERT_ENCODER",
    "MF_TRANSCODE_ENCODINGPROFILE",
    "MF_TRANSCODE_QUALITYVSSPEED",
    "MF_TRANSCODE_SINK_INFO",
    "MF_TRANSCODE_SKIP_METADATA_TRANSFER",
    "MF_TRANSCODE_TOPOLOGYMODE",
    "MF_TRANSCODE_TOPOLOGYMODE_FLAGS",
    "MF_TRANSCODE_TOPOLOGYMODE_HARDWARE_ALLOWED",
    "MF_TRANSCODE_TOPOLOGYMODE_SOFTWARE_ONLY",
    "MF_TRANSFORM_ASYNC",
    "MF_TRANSFORM_ASYNC_UNLOCK",
    "MF_TRANSFORM_CATEGORY_Attribute",
    "MF_TRANSFORM_FLAGS_Attribute",
    "MF_TYPE_ERR",
    "MF_UNKNOWN_DURATION",
    "MF_URL_TRUST_STATUS",
    "MF_USER_DATA_PAYLOAD",
    "MF_USER_EXTENDED_ATTRIBUTES",
    "MF_USER_MODE_COMPONENT_LOAD",
    "MF_VIDEODSP_MODE",
    "MF_VIDEO_MAX_MB_PER_SEC",
    "MF_VIDEO_PROCESSOR_ALGORITHM",
    "MF_VIDEO_PROCESSOR_ALGORITHM_DEFAULT",
    "MF_VIDEO_PROCESSOR_ALGORITHM_MRF_CRF_444",
    "MF_VIDEO_PROCESSOR_ALGORITHM_TYPE",
    "MF_VIDEO_PROCESSOR_MIRROR",
    "MF_VIDEO_PROCESSOR_ROTATION",
    "MF_VIDEO_RENDERER_EFFECT_APP_SERVICE_NAME",
    "MF_VIDEO_SPHERICAL_VIEWDIRECTION",
    "MF_VIRTUALCAMERA_CONFIGURATION_APP_PACKAGE_FAMILY_NAME",
    "MF_WINDOW_WORKQUEUE",
    "MF_WORKQUEUE_SERVICES",
    "MF_WRAPPED_BUFFER_SERVICE",
    "MF_WRAPPED_OBJECT",
    "MF_WRAPPED_SAMPLE_SERVICE",
    "MF_WVC1_PROG_SINGLE_SLICE_CONTENT",
    "MF_XVP_CALLER_ALLOCATES_OUTPUT",
    "MF_XVP_DISABLE_FRC",
    "MF_XVP_SAMPLE_LOCK_TIMEOUT",
    "MFllMulDiv",
    "MICARRAY_EXTERN_BEAM",
    "MICARRAY_FIXED_BEAM",
    "MICARRAY_SIMPLE_SUM",
    "MICARRAY_SINGLE_BEAM",
    "MICARRAY_SINGLE_CHAN",
    "MIC_ARRAY_MODE",
    "MIRROR_HORIZONTAL",
    "MIRROR_NONE",
    "MIRROR_VERTICAL",
    "MODE_NOT_SET",
    "MOVEREGION_INFO",
    "MOVE_RECT",
    "MP3ACMCodecWrapper",
    "MPEG1VIDEOINFO",
    "MPEG2VIDEOINFO",
    "MPEG2VIDEOINFO_FLAGS",
    "MR_AUDIO_POLICY_SERVICE",
    "MR_BUFFER_SERVICE",
    "MR_CAPTURE_POLICY_VOLUME_SERVICE",
    "MR_POLICY_VOLUME_SERVICE",
    "MR_STREAM_VOLUME_SERVICE",
    "MR_VIDEO_ACCELERATION_SERVICE",
    "MR_VIDEO_MIXER_SERVICE",
    "MR_VIDEO_RENDER_SERVICE",
    "MSAMRNBDecoder",
    "MSAMRNBEncoder",
    "MT_ARBITRARY_HEADER",
    "MT_CUSTOM_VIDEO_PRIMARIES",
    "MULawCodecWrapper",
    "OPENMODE_APPEND_IF_EXIST",
    "OPENMODE_DELETE_IF_EXIST",
    "OPENMODE_FAIL_IF_EXIST",
    "OPENMODE_FAIL_IF_NOT_EXIST",
    "OPENMODE_RESET_IF_EXIST",
    "OPMGetVideoOutputForTarget",
    "OPMGetVideoOutputsFromHMONITOR",
    "OPMGetVideoOutputsFromIDirect3DDevice9Object",
    "OPMXboxEnableHDCP",
    "OPMXboxGetHDCPStatus",
    "OPMXboxGetHDCPStatusAndType",
    "OPM_128_BIT_RANDOM_NUMBER_SIZE",
    "OPM_ACP_AND_CGMSA_SIGNALING",
    "OPM_ACP_FORCE_ULONG",
    "OPM_ACP_LEVEL_ONE",
    "OPM_ACP_LEVEL_THREE",
    "OPM_ACP_LEVEL_TWO",
    "OPM_ACP_OFF",
    "OPM_ACP_PROTECTION_LEVEL",
    "OPM_ACTUAL_OUTPUT_FORMAT",
    "OPM_ASPECT_RATIO_EN300294_BOX_14_BY_9_CENTER",
    "OPM_ASPECT_RATIO_EN300294_BOX_14_BY_9_TOP",
    "OPM_ASPECT_RATIO_EN300294_BOX_16_BY_9_CENTER",
    "OPM_ASPECT_RATIO_EN300294_BOX_16_BY_9_TOP",
    "OPM_ASPECT_RATIO_EN300294_BOX_GT_16_BY_9_CENTER",
    "OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_16_BY_9_ANAMORPHIC",
    "OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_4_BY_3",
    "OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_4_BY_3_PROTECTED_CENTER",
    "OPM_ASPECT_RATIO_FORCE_ULONG",
    "OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR",
    "OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE",
    "OPM_BUS_IMPLEMENTATION_MODIFIER_INSIDE_OF_CHIPSET",
    "OPM_BUS_IMPLEMENTATION_MODIFIER_MASK",
    "OPM_BUS_IMPLEMENTATION_MODIFIER_NON_STANDARD",
    "OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP",
    "OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET",
    "OPM_BUS_TYPE",
    "OPM_BUS_TYPE_AGP",
    "OPM_BUS_TYPE_MASK",
    "OPM_BUS_TYPE_OTHER",
    "OPM_BUS_TYPE_PCI",
    "OPM_BUS_TYPE_PCIEXPRESS",
    "OPM_BUS_TYPE_PCIX",
    "OPM_CGMSA",
    "OPM_CGMSA_COPY_FREELY",
    "OPM_CGMSA_COPY_NEVER",
    "OPM_CGMSA_COPY_NO_MORE",
    "OPM_CGMSA_COPY_ONE_GENERATION",
    "OPM_CGMSA_OFF",
    "OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED",
    "OPM_CONFIGURE_PARAMETERS",
    "OPM_CONFIGURE_SETTING_DATA_SIZE",
    "OPM_CONNECTED_HDCP_DEVICE_INFORMATION",
    "OPM_CONNECTOR_TYPE",
    "OPM_CONNECTOR_TYPE_COMPONENT_VIDEO",
    "OPM_CONNECTOR_TYPE_COMPOSITE_VIDEO",
    "OPM_CONNECTOR_TYPE_DISPLAYPORT_EMBEDDED",
    "OPM_CONNECTOR_TYPE_DISPLAYPORT_EXTERNAL",
    "OPM_CONNECTOR_TYPE_DVI",
    "OPM_CONNECTOR_TYPE_D_JPN",
    "OPM_CONNECTOR_TYPE_HDMI",
    "OPM_CONNECTOR_TYPE_LVDS",
    "OPM_CONNECTOR_TYPE_MIRACAST",
    "OPM_CONNECTOR_TYPE_OTHER",
    "OPM_CONNECTOR_TYPE_RESERVED",
    "OPM_CONNECTOR_TYPE_SDI",
    "OPM_CONNECTOR_TYPE_SVIDEO",
    "OPM_CONNECTOR_TYPE_TRANSPORT_AGNOSTIC_DIGITAL_MODE_A",
    "OPM_CONNECTOR_TYPE_TRANSPORT_AGNOSTIC_DIGITAL_MODE_B",
    "OPM_CONNECTOR_TYPE_UDI_EMBEDDED",
    "OPM_CONNECTOR_TYPE_UDI_EXTERNAL",
    "OPM_CONNECTOR_TYPE_VGA",
    "OPM_COPP_COMPATIBLE_BUS_TYPE_INTEGRATED",
    "OPM_COPP_COMPATIBLE_CONNECTOR_TYPE_INTERNAL",
    "OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS",
    "OPM_DPCP_FORCE_ULONG",
    "OPM_DPCP_OFF",
    "OPM_DPCP_ON",
    "OPM_DPCP_PROTECTION_LEVEL",
    "OPM_DVI_CHARACTERISTIC",
    "OPM_DVI_CHARACTERISTIC_1_0",
    "OPM_DVI_CHARACTERISTIC_1_1_OR_ABOVE",
    "OPM_ENCRYPTED_INITIALIZATION_PARAMETERS",
    "OPM_ENCRYPTED_INITIALIZATION_PARAMETERS_SIZE",
    "OPM_GET_ACP_AND_CGMSA_SIGNALING",
    "OPM_GET_ACTUAL_OUTPUT_FORMAT",
    "OPM_GET_ACTUAL_PROTECTION_LEVEL",
    "OPM_GET_ADAPTER_BUS_TYPE",
    "OPM_GET_CODEC_INFO",
    "OPM_GET_CODEC_INFO_INFORMATION",
    "OPM_GET_CODEC_INFO_PARAMETERS",
    "OPM_GET_CONNECTED_HDCP_DEVICE_INFORMATION",
    "OPM_GET_CONNECTOR_TYPE",
    "OPM_GET_CURRENT_HDCP_SRM_VERSION",
    "OPM_GET_DVI_CHARACTERISTICS",
    "OPM_GET_INFORMATION_PARAMETERS_SIZE",
    "OPM_GET_INFO_PARAMETERS",
    "OPM_GET_OUTPUT_HARDWARE_PROTECTION_SUPPORT",
    "OPM_GET_OUTPUT_ID",
    "OPM_GET_SUPPORTED_PROTECTION_TYPES",
    "OPM_GET_VIRTUAL_PROTECTION_LEVEL",
    "OPM_HDCP_FLAGS",
    "OPM_HDCP_FLAG_NONE",
    "OPM_HDCP_FLAG_REPEATER",
    "OPM_HDCP_FORCE_ULONG",
    "OPM_HDCP_KEY_SELECTION_VECTOR",
    "OPM_HDCP_KEY_SELECTION_VECTOR_SIZE",
    "OPM_HDCP_OFF",
    "OPM_HDCP_ON",
    "OPM_HDCP_PROTECTION_LEVEL",
    "OPM_HDCP_STATUS",
    "OPM_HDCP_STATUS_OFF",
    "OPM_HDCP_STATUS_ON",
    "OPM_HDCP_TYPE",
    "OPM_HDCP_TYPE_0",
    "OPM_HDCP_TYPE_1",
    "OPM_IMAGE_ASPECT_RATIO_EN300294",
    "OPM_OMAC",
    "OPM_OMAC_SIZE",
    "OPM_OUTPUT_HARDWARE_PROTECTION",
    "OPM_OUTPUT_HARDWARE_PROTECTION_NOT_SUPPORTED",
    "OPM_OUTPUT_HARDWARE_PROTECTION_SUPPORTED",
    "OPM_OUTPUT_ID_DATA",
    "OPM_PROTECTION_STANDARD_ARIBTRB15_1125I",
    "OPM_PROTECTION_STANDARD_ARIBTRB15_525I",
    "OPM_PROTECTION_STANDARD_ARIBTRB15_525P",
    "OPM_PROTECTION_STANDARD_ARIBTRB15_750P",
    "OPM_PROTECTION_STANDARD_CEA805A_TYPEA_1125I",
    "OPM_PROTECTION_STANDARD_CEA805A_TYPEA_525P",
    "OPM_PROTECTION_STANDARD_CEA805A_TYPEA_750P",
    "OPM_PROTECTION_STANDARD_CEA805A_TYPEB_1125I",
    "OPM_PROTECTION_STANDARD_CEA805A_TYPEB_525P",
    "OPM_PROTECTION_STANDARD_CEA805A_TYPEB_750P",
    "OPM_PROTECTION_STANDARD_EIA608B_525",
    "OPM_PROTECTION_STANDARD_EN300294_625I",
    "OPM_PROTECTION_STANDARD_IEC61880_2_525I",
    "OPM_PROTECTION_STANDARD_IEC61880_525I",
    "OPM_PROTECTION_STANDARD_IEC62375_625P",
    "OPM_PROTECTION_STANDARD_NONE",
    "OPM_PROTECTION_STANDARD_OTHER",
    "OPM_PROTECTION_STANDARD_TYPE",
    "OPM_PROTECTION_TYPE",
    "OPM_PROTECTION_TYPE_ACP",
    "OPM_PROTECTION_TYPE_CGMSA",
    "OPM_PROTECTION_TYPE_COPP_COMPATIBLE_HDCP",
    "OPM_PROTECTION_TYPE_DPCP",
    "OPM_PROTECTION_TYPE_HDCP",
    "OPM_PROTECTION_TYPE_NONE",
    "OPM_PROTECTION_TYPE_OTHER",
    "OPM_PROTECTION_TYPE_SIZE",
    "OPM_PROTECTION_TYPE_TYPE_ENFORCEMENT_HDCP",
    "OPM_RANDOM_NUMBER",
    "OPM_REQUESTED_INFORMATION",
    "OPM_REQUESTED_INFORMATION_SIZE",
    "OPM_SET_ACP_AND_CGMSA_SIGNALING",
    "OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS",
    "OPM_SET_HDCP_SRM",
    "OPM_SET_HDCP_SRM_PARAMETERS",
    "OPM_SET_PROTECTION_LEVEL",
    "OPM_SET_PROTECTION_LEVEL_ACCORDING_TO_CSS_DVD",
    "OPM_SET_PROTECTION_LEVEL_PARAMETERS",
    "OPM_STANDARD_INFORMATION",
    "OPM_STATUS",
    "OPM_STATUS_LINK_LOST",
    "OPM_STATUS_NORMAL",
    "OPM_STATUS_RENEGOTIATION_REQUIRED",
    "OPM_STATUS_REVOKED_HDCP_DEVICE_ATTACHED",
    "OPM_STATUS_TAMPERING_DETECTED",
    "OPM_TYPE",
    "OPM_TYPE_ENFORCEMENT_HDCP_FORCE_ULONG",
    "OPM_TYPE_ENFORCEMENT_HDCP_OFF",
    "OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_NO_TYPE_RESTRICTION",
    "OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_TYPE1_RESTRICTION",
    "OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL",
    "OPM_VIDEO_OUTPUT_SEMANTICS",
    "OPM_VOS_COPP_SEMANTICS",
    "OPM_VOS_OPM_INDIRECT_DISPLAY",
    "OPM_VOS_OPM_SEMANTICS",
    "OPTIBEAM_ARRAY_AND_AEC",
    "OPTIBEAM_ARRAY_ONLY",
    "PDXVAHDSW_CreateDevice",
    "PDXVAHDSW_CreateVideoProcessor",
    "PDXVAHDSW_DestroyDevice",
    "PDXVAHDSW_DestroyVideoProcessor",
    "PDXVAHDSW_GetVideoProcessBltStatePrivate",
    "PDXVAHDSW_GetVideoProcessStreamStatePrivate",
    "PDXVAHDSW_GetVideoProcessorCaps",
    "PDXVAHDSW_GetVideoProcessorCustomRates",
    "PDXVAHDSW_GetVideoProcessorDeviceCaps",
    "PDXVAHDSW_GetVideoProcessorFilterRange",
    "PDXVAHDSW_GetVideoProcessorInputFormats",
    "PDXVAHDSW_GetVideoProcessorOutputFormats",
    "PDXVAHDSW_Plugin",
    "PDXVAHDSW_ProposeVideoPrivateFormat",
    "PDXVAHDSW_SetVideoProcessBltState",
    "PDXVAHDSW_SetVideoProcessStreamState",
    "PDXVAHDSW_VideoProcessBltHD",
    "PDXVAHD_CreateDevice",
    "PEACTION_COPY",
    "PEACTION_EXPORT",
    "PEACTION_EXTRACT",
    "PEACTION_LAST",
    "PEACTION_NO",
    "PEACTION_PLAY",
    "PEACTION_RESERVED1",
    "PEACTION_RESERVED2",
    "PEACTION_RESERVED3",
    "PIN_CATEGORY_ANALOGVIDEOIN",
    "PIN_CATEGORY_CAPTURE",
    "PIN_CATEGORY_CC",
    "PIN_CATEGORY_EDS",
    "PIN_CATEGORY_NABTS",
    "PIN_CATEGORY_PREVIEW",
    "PIN_CATEGORY_STILL",
    "PIN_CATEGORY_TELETEXT",
    "PIN_CATEGORY_TIMECODE",
    "PIN_CATEGORY_VBI",
    "PIN_CATEGORY_VIDEOPORT",
    "PIN_CATEGORY_VIDEOPORT_VBI",
    "PLAYTO_SOURCE_AUDIO",
    "PLAYTO_SOURCE_CREATEFLAGS",
    "PLAYTO_SOURCE_IMAGE",
    "PLAYTO_SOURCE_NONE",
    "PLAYTO_SOURCE_PROTECTED",
    "PLAYTO_SOURCE_VIDEO",
    "PRESENTATION_CURRENT_POSITION",
    "REQUIRE_PROMPT",
    "REQUIRE_SAVE_SELECTED",
    "ROI_AREA",
    "ROTATION_NONE",
    "ROTATION_NORMAL",
    "SAMPLE_PROTECTION_VERSION",
    "SAMPLE_PROTECTION_VERSION_AES128CTR",
    "SAMPLE_PROTECTION_VERSION_BASIC_LOKI",
    "SAMPLE_PROTECTION_VERSION_NO",
    "SAMPLE_PROTECTION_VERSION_RC4",
    "SAMPLE_PROTECTION_VERSION_SCATTER",
    "SEEK_ORIGIN",
    "SENSORPROFILEID",
    "SHA_HASH_LEN",
    "SINGLE_CHANNEL_AEC",
    "SINGLE_CHANNEL_NSAGC",
    "STREAM_MEDIUM",
    "SYSFXUI_DONOTSHOW_BASSBOOST",
    "SYSFXUI_DONOTSHOW_BASSMANAGEMENT",
    "SYSFXUI_DONOTSHOW_CHANNELPHANTOMING",
    "SYSFXUI_DONOTSHOW_HEADPHONEVIRTUALIZATION",
    "SYSFXUI_DONOTSHOW_LOUDNESSEQUALIZATION",
    "SYSFXUI_DONOTSHOW_ROOMCORRECTION",
    "SYSFXUI_DONOTSHOW_SPEAKERFILLING",
    "SYSFXUI_DONOTSHOW_VIRTUALSURROUND",
    "SequencerTopologyFlags_Last",
    "TIME_FORMAT_BYTE",
    "TIME_FORMAT_FIELD",
    "TIME_FORMAT_FRAME",
    "TIME_FORMAT_MEDIA_TIME",
    "TIME_FORMAT_NONE",
    "TIME_FORMAT_SAMPLE",
    "TOC_DESCRIPTOR",
    "TOC_ENTRY_DESCRIPTOR",
    "TOC_ENTRY_MAX_TITLE_SIZE",
    "TOC_MAX_DESCRIPTION_SIZE",
    "TOC_POS_INHEADER",
    "TOC_POS_TOPLEVELOBJECT",
    "TOC_POS_TYPE",
    "UUID_UdriTagTables",
    "UUID_WMDRMTagTables",
    "VIDEOINFOHEADER",
    "VIDEOINFOHEADER2",
    "VIDEO_ZOOM_RECT",
    "VRHP_BIGROOM",
    "VRHP_CUSTUMIZEDROOM",
    "VRHP_MEDIUMROOM",
    "VRHP_SMALLROOM",
    "VorbisDecoderMFT",
    "WMAAECMA_E_NO_ACTIVE_RENDER_STREAM",
    "WMT_PROP_DATATYPE",
    "WMT_PROP_TYPE_BINARY",
    "WMT_PROP_TYPE_BOOL",
    "WMT_PROP_TYPE_DWORD",
    "WMT_PROP_TYPE_GUID",
    "WMT_PROP_TYPE_QWORD",
    "WMT_PROP_TYPE_STRING",
    "WMT_PROP_TYPE_WORD",
    "WMV_DYNAMIC_BITRATE",
    "WMV_DYNAMIC_COMPLEXITY",
    "WMV_DYNAMIC_FLAGS",
    "WMV_DYNAMIC_RESOLUTION",
    "WM_CODEC_ONEPASS_CBR",
    "WM_CODEC_ONEPASS_VBR",
    "WM_CODEC_TWOPASS_CBR",
    "WM_CODEC_TWOPASS_VBR_PEAKCONSTRAINED",
    "WM_CODEC_TWOPASS_VBR_UNCONSTRAINED",
    "_MFP_CREDENTIAL_FLAGS",
    "_MFP_MEDIAITEM_CHARACTERISTICS",
    "_MFT_INPUT_DATA_BUFFER_FLAGS",
    "_MFT_INPUT_STATUS_FLAGS",
    "_MFT_INPUT_STREAM_INFO_FLAGS",
    "_MFT_OUTPUT_DATA_BUFFER_FLAGS",
    "_MFT_OUTPUT_STATUS_FLAGS",
    "_MFT_OUTPUT_STREAM_INFO_FLAGS",
    "_MFT_PROCESS_OUTPUT_FLAGS",
    "_MFT_PROCESS_OUTPUT_STATUS",
    "_MFT_SET_TYPE_FLAGS",
    "_msoBegin",
    "_msoCurrent",
    "eAVAudioChannelConfig",
    "eAVAudioChannelConfig_BACK_CENTER",
    "eAVAudioChannelConfig_BACK_LEFT",
    "eAVAudioChannelConfig_BACK_RIGHT",
    "eAVAudioChannelConfig_FRONT_CENTER",
    "eAVAudioChannelConfig_FRONT_LEFT",
    "eAVAudioChannelConfig_FRONT_LEFT_OF_CENTER",
    "eAVAudioChannelConfig_FRONT_RIGHT",
    "eAVAudioChannelConfig_FRONT_RIGHT_OF_CENTER",
    "eAVAudioChannelConfig_LOW_FREQUENCY",
    "eAVAudioChannelConfig_SIDE_LEFT",
    "eAVAudioChannelConfig_SIDE_RIGHT",
    "eAVAudioChannelConfig_TOP_BACK_CENTER",
    "eAVAudioChannelConfig_TOP_BACK_LEFT",
    "eAVAudioChannelConfig_TOP_BACK_RIGHT",
    "eAVAudioChannelConfig_TOP_CENTER",
    "eAVAudioChannelConfig_TOP_FRONT_CENTER",
    "eAVAudioChannelConfig_TOP_FRONT_LEFT",
    "eAVAudioChannelConfig_TOP_FRONT_RIGHT",
    "eAVDDSurroundMode",
    "eAVDDSurroundMode_No",
    "eAVDDSurroundMode_NotIndicated",
    "eAVDDSurroundMode_Yes",
    "eAVDSPLoudnessEqualization",
    "eAVDSPLoudnessEqualization_AUTO",
    "eAVDSPLoudnessEqualization_OFF",
    "eAVDSPLoudnessEqualization_ON",
    "eAVDSPSpeakerFill",
    "eAVDSPSpeakerFill_AUTO",
    "eAVDSPSpeakerFill_OFF",
    "eAVDSPSpeakerFill_ON",
    "eAVDecAACDownmixMode",
    "eAVDecAACDownmixMode_eAVDecAACUseARIBDownmix",
    "eAVDecAACDownmixMode_eAVDecAACUseISODownmix",
    "eAVDecAudioDualMono",
    "eAVDecAudioDualMonoReproMode",
    "eAVDecAudioDualMonoReproMode_LEFT_MONO",
    "eAVDecAudioDualMonoReproMode_MIX_MONO",
    "eAVDecAudioDualMonoReproMode_RIGHT_MONO",
    "eAVDecAudioDualMonoReproMode_STEREO",
    "eAVDecAudioDualMono_IsDualMono",
    "eAVDecAudioDualMono_IsNotDualMono",
    "eAVDecAudioDualMono_UnSpecified",
    "eAVDecDDMatrixDecodingMode",
    "eAVDecDDMatrixDecodingMode_AUTO",
    "eAVDecDDMatrixDecodingMode_OFF",
    "eAVDecDDMatrixDecodingMode_ON",
    "eAVDecDDOperationalMode",
    "eAVDecDDOperationalMode_CUSTOM0",
    "eAVDecDDOperationalMode_CUSTOM1",
    "eAVDecDDOperationalMode_LINE",
    "eAVDecDDOperationalMode_NONE",
    "eAVDecDDOperationalMode_PORTABLE11",
    "eAVDecDDOperationalMode_PORTABLE14",
    "eAVDecDDOperationalMode_PORTABLE8",
    "eAVDecDDOperationalMode_RF",
    "eAVDecDDStereoDownMixMode",
    "eAVDecDDStereoDownMixMode_Auto",
    "eAVDecDDStereoDownMixMode_LoRo",
    "eAVDecDDStereoDownMixMode_LtRt",
    "eAVDecHEAACDynamicRangeControl",
    "eAVDecHEAACDynamicRangeControl_OFF",
    "eAVDecHEAACDynamicRangeControl_ON",
    "eAVDecVideoCodecType",
    "eAVDecVideoCodecType_H264",
    "eAVDecVideoCodecType_MPEG2",
    "eAVDecVideoCodecType_NOTPLAYING",
    "eAVDecVideoDXVABusEncryption",
    "eAVDecVideoDXVABusEncryption_AES",
    "eAVDecVideoDXVABusEncryption_NONE",
    "eAVDecVideoDXVABusEncryption_PRIVATE",
    "eAVDecVideoDXVAMode",
    "eAVDecVideoDXVAMode_IDCT",
    "eAVDecVideoDXVAMode_MC",
    "eAVDecVideoDXVAMode_NOTPLAYING",
    "eAVDecVideoDXVAMode_SW",
    "eAVDecVideoDXVAMode_VLD",
    "eAVDecVideoH264ErrorConcealment",
    "eAVDecVideoH264ErrorConcealment_eErrorConcealmentTypeAdvanced",
    "eAVDecVideoH264ErrorConcealment_eErrorConcealmentTypeBasic",
    "eAVDecVideoH264ErrorConcealment_eErrorConcealmentTypeDXVASetBlack",
    "eAVDecVideoH264ErrorConcealment_eErrorConcealmentTypeDrop",
    "eAVDecVideoInputScanType",
    "eAVDecVideoInputScan_Interlaced_LowerFieldFirst",
    "eAVDecVideoInputScan_Interlaced_UpperFieldFirst",
    "eAVDecVideoInputScan_Progressive",
    "eAVDecVideoInputScan_Unknown",
    "eAVDecVideoMPEG2ErrorConcealment",
    "eAVDecVideoMPEG2ErrorConcealment_eErrorConcealmentOff",
    "eAVDecVideoMPEG2ErrorConcealment_eErrorConcealmentOn",
    "eAVDecVideoSWPowerLevel",
    "eAVDecVideoSWPowerLevel_Balanced",
    "eAVDecVideoSWPowerLevel_BatteryLife",
    "eAVDecVideoSWPowerLevel_VideoQuality",
    "eAVDecVideoSoftwareDeinterlaceMode",
    "eAVDecVideoSoftwareDeinterlaceMode_BOBDeinterlacing",
    "eAVDecVideoSoftwareDeinterlaceMode_NoDeinterlacing",
    "eAVDecVideoSoftwareDeinterlaceMode_ProgressiveDeinterlacing",
    "eAVDecVideoSoftwareDeinterlaceMode_SmartBOBDeinterlacing",
    "eAVEncAdaptiveMode",
    "eAVEncAdaptiveMode_FrameRate",
    "eAVEncAdaptiveMode_None",
    "eAVEncAdaptiveMode_Resolution",
    "eAVEncAudioDualMono",
    "eAVEncAudioDualMono_Off",
    "eAVEncAudioDualMono_On",
    "eAVEncAudioDualMono_SameAsInput",
    "eAVEncAudioInputContent",
    "eAVEncChromaEncodeMode",
    "eAVEncChromaEncodeMode_420",
    "eAVEncChromaEncodeMode_444",
    "eAVEncChromaEncodeMode_444_v2",
    "eAVEncCommonRateControlMode",
    "eAVEncCommonRateControlMode_CBR",
    "eAVEncCommonRateControlMode_GlobalLowDelayVBR",
    "eAVEncCommonRateControlMode_GlobalVBR",
    "eAVEncCommonRateControlMode_LowDelayVBR",
    "eAVEncCommonRateControlMode_PeakConstrainedVBR",
    "eAVEncCommonRateControlMode_Quality",
    "eAVEncCommonRateControlMode_UnconstrainedVBR",
    "eAVEncCommonStreamEndHandling",
    "eAVEncCommonStreamEndHandling_DiscardPartial",
    "eAVEncCommonStreamEndHandling_EnsureComplete",
    "eAVEncDDAtoDConverterType",
    "eAVEncDDAtoDConverterType_HDCD",
    "eAVEncDDAtoDConverterType_Standard",
    "eAVEncDDDynamicRangeCompressionControl",
    "eAVEncDDDynamicRangeCompressionControl_FilmLight",
    "eAVEncDDDynamicRangeCompressionControl_FilmStandard",
    "eAVEncDDDynamicRangeCompressionControl_MusicLight",
    "eAVEncDDDynamicRangeCompressionControl_MusicStandard",
    "eAVEncDDDynamicRangeCompressionControl_None",
    "eAVEncDDDynamicRangeCompressionControl_Speech",
    "eAVEncDDHeadphoneMode",
    "eAVEncDDHeadphoneMode_Encoded",
    "eAVEncDDHeadphoneMode_NotEncoded",
    "eAVEncDDHeadphoneMode_NotIndicated",
    "eAVEncDDPreferredStereoDownMixMode",
    "eAVEncDDPreferredStereoDownMixMode_LoRo",
    "eAVEncDDPreferredStereoDownMixMode_LtRt",
    "eAVEncDDProductionRoomType",
    "eAVEncDDProductionRoomType_Large",
    "eAVEncDDProductionRoomType_NotIndicated",
    "eAVEncDDProductionRoomType_Small",
    "eAVEncDDService",
    "eAVEncDDService_C",
    "eAVEncDDService_CM",
    "eAVEncDDService_D",
    "eAVEncDDService_E",
    "eAVEncDDService_HI",
    "eAVEncDDService_ME",
    "eAVEncDDService_VI",
    "eAVEncDDService_VO",
    "eAVEncDDSurroundExMode",
    "eAVEncDDSurroundExMode_No",
    "eAVEncDDSurroundExMode_NotIndicated",
    "eAVEncDDSurroundExMode_Yes",
    "eAVEncH263PictureType",
    "eAVEncH263PictureType_B",
    "eAVEncH263PictureType_I",
    "eAVEncH263PictureType_P",
    "eAVEncH263VLevel",
    "eAVEncH263VLevel_eAVEncH263VLevel1",
    "eAVEncH263VLevel_eAVEncH263VLevel2",
    "eAVEncH263VLevel_eAVEncH263VLevel3",
    "eAVEncH263VLevel_eAVEncH263VLevel4",
    "eAVEncH263VLevel_eAVEncH263VLevel4_5",
    "eAVEncH263VLevel_eAVEncH263VLevel5",
    "eAVEncH263VLevel_eAVEncH263VLevel6",
    "eAVEncH263VLevel_eAVEncH263VLevel7",
    "eAVEncH263VProfile",
    "eAVEncH263VProfile_Base",
    "eAVEncH263VProfile_CompatibilityV1",
    "eAVEncH263VProfile_CompatibilityV2",
    "eAVEncH263VProfile_HighCompression",
    "eAVEncH263VProfile_HighLatency",
    "eAVEncH263VProfile_Interlace",
    "eAVEncH263VProfile_Internet",
    "eAVEncH263VProfile_WirelessV2",
    "eAVEncH263VProfile_WirelessV3",
    "eAVEncH264PictureType",
    "eAVEncH264PictureType_B",
    "eAVEncH264PictureType_IDR",
    "eAVEncH264PictureType_P",
    "eAVEncH264VLevel",
    "eAVEncH264VLevel_eAVEncH264VLevel1",
    "eAVEncH264VLevel_eAVEncH264VLevel1_1",
    "eAVEncH264VLevel_eAVEncH264VLevel1_2",
    "eAVEncH264VLevel_eAVEncH264VLevel1_3",
    "eAVEncH264VLevel_eAVEncH264VLevel1_b",
    "eAVEncH264VLevel_eAVEncH264VLevel2",
    "eAVEncH264VLevel_eAVEncH264VLevel2_1",
    "eAVEncH264VLevel_eAVEncH264VLevel2_2",
    "eAVEncH264VLevel_eAVEncH264VLevel3",
    "eAVEncH264VLevel_eAVEncH264VLevel3_1",
    "eAVEncH264VLevel_eAVEncH264VLevel3_2",
    "eAVEncH264VLevel_eAVEncH264VLevel4",
    "eAVEncH264VLevel_eAVEncH264VLevel4_1",
    "eAVEncH264VLevel_eAVEncH264VLevel4_2",
    "eAVEncH264VLevel_eAVEncH264VLevel5",
    "eAVEncH264VLevel_eAVEncH264VLevel5_1",
    "eAVEncH264VLevel_eAVEncH264VLevel5_2",
    "eAVEncH264VProfile",
    "eAVEncH264VProfile_422",
    "eAVEncH264VProfile_444",
    "eAVEncH264VProfile_Base",
    "eAVEncH264VProfile_ConstrainedBase",
    "eAVEncH264VProfile_Extended",
    "eAVEncH264VProfile_High",
    "eAVEncH264VProfile_High10",
    "eAVEncH264VProfile_Main",
    "eAVEncH264VProfile_MultiviewHigh",
    "eAVEncH264VProfile_ScalableBase",
    "eAVEncH264VProfile_ScalableHigh",
    "eAVEncH264VProfile_Simple",
    "eAVEncH264VProfile_StereoHigh",
    "eAVEncH264VProfile_UCConstrainedHigh",
    "eAVEncH264VProfile_UCScalableConstrainedBase",
    "eAVEncH264VProfile_UCScalableConstrainedHigh",
    "eAVEncH264VProfile_unknown",
    "eAVEncH265VLevel",
    "eAVEncH265VLevel_eAVEncH265VLevel1",
    "eAVEncH265VLevel_eAVEncH265VLevel2",
    "eAVEncH265VLevel_eAVEncH265VLevel2_1",
    "eAVEncH265VLevel_eAVEncH265VLevel3",
    "eAVEncH265VLevel_eAVEncH265VLevel3_1",
    "eAVEncH265VLevel_eAVEncH265VLevel4",
    "eAVEncH265VLevel_eAVEncH265VLevel4_1",
    "eAVEncH265VLevel_eAVEncH265VLevel5",
    "eAVEncH265VLevel_eAVEncH265VLevel5_1",
    "eAVEncH265VLevel_eAVEncH265VLevel5_2",
    "eAVEncH265VLevel_eAVEncH265VLevel6",
    "eAVEncH265VLevel_eAVEncH265VLevel6_1",
    "eAVEncH265VLevel_eAVEncH265VLevel6_2",
    "eAVEncH265VProfile",
    "eAVEncH265VProfile_MainIntra_420_10",
    "eAVEncH265VProfile_MainIntra_420_12",
    "eAVEncH265VProfile_MainIntra_420_8",
    "eAVEncH265VProfile_MainIntra_422_10",
    "eAVEncH265VProfile_MainIntra_422_12",
    "eAVEncH265VProfile_MainIntra_444_10",
    "eAVEncH265VProfile_MainIntra_444_12",
    "eAVEncH265VProfile_MainIntra_444_16",
    "eAVEncH265VProfile_MainIntra_444_8",
    "eAVEncH265VProfile_MainStill_420_8",
    "eAVEncH265VProfile_MainStill_444_16",
    "eAVEncH265VProfile_MainStill_444_8",
    "eAVEncH265VProfile_Main_420_10",
    "eAVEncH265VProfile_Main_420_12",
    "eAVEncH265VProfile_Main_420_8",
    "eAVEncH265VProfile_Main_422_10",
    "eAVEncH265VProfile_Main_422_12",
    "eAVEncH265VProfile_Main_444_10",
    "eAVEncH265VProfile_Main_444_12",
    "eAVEncH265VProfile_Main_444_8",
    "eAVEncH265VProfile_Monochrome_12",
    "eAVEncH265VProfile_Monochrome_16",
    "eAVEncH265VProfile_unknown",
    "eAVEncInputVideoSystem",
    "eAVEncInputVideoSystem_Component",
    "eAVEncInputVideoSystem_HDV",
    "eAVEncInputVideoSystem_MAC",
    "eAVEncInputVideoSystem_NTSC",
    "eAVEncInputVideoSystem_PAL",
    "eAVEncInputVideoSystem_SECAM",
    "eAVEncInputVideoSystem_Unspecified",
    "eAVEncMPACodingMode",
    "eAVEncMPACodingMode_DualChannel",
    "eAVEncMPACodingMode_JointStereo",
    "eAVEncMPACodingMode_Mono",
    "eAVEncMPACodingMode_Stereo",
    "eAVEncMPACodingMode_Surround",
    "eAVEncMPAEmphasisType",
    "eAVEncMPAEmphasisType_50_15",
    "eAVEncMPAEmphasisType_CCITT_J17",
    "eAVEncMPAEmphasisType_None",
    "eAVEncMPAEmphasisType_Reserved",
    "eAVEncMPALayer",
    "eAVEncMPALayer_1",
    "eAVEncMPALayer_2",
    "eAVEncMPALayer_3",
    "eAVEncMPVFrameFieldMode",
    "eAVEncMPVFrameFieldMode_FieldMode",
    "eAVEncMPVFrameFieldMode_FrameMode",
    "eAVEncMPVIntraVLCTable",
    "eAVEncMPVIntraVLCTable_Alternate",
    "eAVEncMPVIntraVLCTable_Auto",
    "eAVEncMPVIntraVLCTable_MPEG1",
    "eAVEncMPVLevel",
    "eAVEncMPVLevel_High",
    "eAVEncMPVLevel_High1440",
    "eAVEncMPVLevel_Low",
    "eAVEncMPVLevel_Main",
    "eAVEncMPVProfile",
    "eAVEncMPVProfile_422",
    "eAVEncMPVProfile_High",
    "eAVEncMPVProfile_Main",
    "eAVEncMPVProfile_Simple",
    "eAVEncMPVProfile_unknown",
    "eAVEncMPVQScaleType",
    "eAVEncMPVQScaleType_Auto",
    "eAVEncMPVQScaleType_Linear",
    "eAVEncMPVQScaleType_NonLinear",
    "eAVEncMPVScanPattern",
    "eAVEncMPVScanPattern_AlternateScan",
    "eAVEncMPVScanPattern_Auto",
    "eAVEncMPVScanPattern_ZigZagScan",
    "eAVEncMPVSceneDetection",
    "eAVEncMPVSceneDetection_InsertIPicture",
    "eAVEncMPVSceneDetection_None",
    "eAVEncMPVSceneDetection_StartNewGOP",
    "eAVEncMPVSceneDetection_StartNewLocatableGOP",
    "eAVEncMuxOutput",
    "eAVEncMuxOutput_eAVEncMuxOutputAuto",
    "eAVEncMuxOutput_eAVEncMuxOutputPS",
    "eAVEncMuxOutput_eAVEncMuxOutputTS",
    "eAVEncVP9VProfile",
    "eAVEncVP9VProfile_420_10",
    "eAVEncVP9VProfile_420_12",
    "eAVEncVP9VProfile_420_8",
    "eAVEncVP9VProfile_unknown",
    "eAVEncVideoChromaResolution",
    "eAVEncVideoChromaResolution_411",
    "eAVEncVideoChromaResolution_420",
    "eAVEncVideoChromaResolution_422",
    "eAVEncVideoChromaResolution_444",
    "eAVEncVideoChromaResolution_SameAsSource",
    "eAVEncVideoChromaSubsampling",
    "eAVEncVideoChromaSubsamplingFormat_Horizontally_Cosited",
    "eAVEncVideoChromaSubsamplingFormat_ProgressiveChroma",
    "eAVEncVideoChromaSubsamplingFormat_SameAsSource",
    "eAVEncVideoChromaSubsamplingFormat_Vertically_AlignedChromaPlanes",
    "eAVEncVideoChromaSubsamplingFormat_Vertically_Cosited",
    "eAVEncVideoColorLighting",
    "eAVEncVideoColorLighting_Bright",
    "eAVEncVideoColorLighting_Dark",
    "eAVEncVideoColorLighting_Dim",
    "eAVEncVideoColorLighting_Office",
    "eAVEncVideoColorLighting_SameAsSource",
    "eAVEncVideoColorLighting_Unknown",
    "eAVEncVideoColorNominalRange",
    "eAVEncVideoColorNominalRange_0_255",
    "eAVEncVideoColorNominalRange_16_235",
    "eAVEncVideoColorNominalRange_48_208",
    "eAVEncVideoColorNominalRange_SameAsSource",
    "eAVEncVideoColorPrimaries",
    "eAVEncVideoColorPrimaries_BT470_2_SysBG",
    "eAVEncVideoColorPrimaries_BT470_2_SysM",
    "eAVEncVideoColorPrimaries_BT709",
    "eAVEncVideoColorPrimaries_EBU3231",
    "eAVEncVideoColorPrimaries_Reserved",
    "eAVEncVideoColorPrimaries_SMPTE170M",
    "eAVEncVideoColorPrimaries_SMPTE240M",
    "eAVEncVideoColorPrimaries_SMPTE_C",
    "eAVEncVideoColorPrimaries_SameAsSource",
    "eAVEncVideoColorTransferFunction",
    "eAVEncVideoColorTransferFunction_10",
    "eAVEncVideoColorTransferFunction_18",
    "eAVEncVideoColorTransferFunction_20",
    "eAVEncVideoColorTransferFunction_22",
    "eAVEncVideoColorTransferFunction_22_240M",
    "eAVEncVideoColorTransferFunction_22_709",
    "eAVEncVideoColorTransferFunction_22_8bit_sRGB",
    "eAVEncVideoColorTransferFunction_28",
    "eAVEncVideoColorTransferFunction_SameAsSource",
    "eAVEncVideoColorTransferMatrix",
    "eAVEncVideoColorTransferMatrix_BT601",
    "eAVEncVideoColorTransferMatrix_BT709",
    "eAVEncVideoColorTransferMatrix_SMPTE240M",
    "eAVEncVideoColorTransferMatrix_SameAsSource",
    "eAVEncVideoContentType",
    "eAVEncVideoContentType_FixedCameraAngle",
    "eAVEncVideoContentType_Unknown",
    "eAVEncVideoFilmContent",
    "eAVEncVideoFilmContent_FilmOnly",
    "eAVEncVideoFilmContent_Mixed",
    "eAVEncVideoFilmContent_VideoOnly",
    "eAVEncVideoOutputFrameRateConversion",
    "eAVEncVideoOutputFrameRateConversion_Alias",
    "eAVEncVideoOutputFrameRateConversion_Disable",
    "eAVEncVideoOutputFrameRateConversion_Enable",
    "eAVEncVideoOutputScanType",
    "eAVEncVideoOutputScan_Automatic",
    "eAVEncVideoOutputScan_Interlaced",
    "eAVEncVideoOutputScan_Progressive",
    "eAVEncVideoOutputScan_SameAsInput",
    "eAVEncVideoSourceScanType",
    "eAVEncVideoSourceScan_Automatic",
    "eAVEncVideoSourceScan_Interlaced",
    "eAVEncVideoSourceScan_Progressive",
    "eAVFastDecodeMode",
    "eAVFastDecodeMode_eVideoDecodeCompliant",
    "eAVFastDecodeMode_eVideoDecodeDisableLF",
    "eAVFastDecodeMode_eVideoDecodeFastest",
    "eAVFastDecodeMode_eVideoDecodeOptimalLF",
    "eAVScenarioInfo",
    "eAVScenarioInfo_Archive",
    "eAVScenarioInfo_CameraRecord",
    "eAVScenarioInfo_DisplayRemoting",
    "eAVScenarioInfo_DisplayRemotingWithFeatureMap",
    "eAVScenarioInfo_LiveStreaming",
    "eAVScenarioInfo_Unknown",
    "eAVScenarioInfo_VideoConference",
    "eVideoEncoderDisplayContentType",
    "eVideoEncoderDisplayContent_FullScreenVideo",
    "eVideoEncoderDisplayContent_Unknown",
    "g_wszSpeechFormatCaps",
    "g_wszWMCPAudioVBRQuality",
    "g_wszWMCPAudioVBRSupported",
    "g_wszWMCPCodecName",
    "g_wszWMCPDefaultCrisp",
    "g_wszWMCPMaxPasses",
    "g_wszWMCPSupportedVBRModes",
]
