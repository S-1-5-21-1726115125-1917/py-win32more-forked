from win32more import *
import win32more.Security.Cryptography
import win32more.Foundation
import win32more.Security
import win32more.System.Com
import win32more.System.Registry

def __getattr__(name):
    if f"_define_{name}" not in globals():
        raise AttributeError()
    setattr(win32more.Security.Cryptography, name, globals()[f"_define_{name}"]())
    return getattr(win32more.Security.Cryptography, name)
def __dir__():
    return __all__
CERT_COMPARE_SHIFT = 16
BCRYPT_OBJECT_ALIGNMENT = 16
KDF_HASH_ALGORITHM = 0
KDF_SECRET_PREPEND = 1
KDF_SECRET_APPEND = 2
KDF_HMAC_KEY = 3
KDF_TLS_PRF_LABEL = 4
KDF_TLS_PRF_SEED = 5
KDF_SECRET_HANDLE = 6
KDF_TLS_PRF_PROTOCOL = 7
KDF_ALGORITHMID = 8
KDF_PARTYUINFO = 9
KDF_PARTYVINFO = 10
KDF_SUPPPUBINFO = 11
KDF_SUPPPRIVINFO = 12
KDF_LABEL = 13
KDF_CONTEXT = 14
KDF_SALT = 15
KDF_ITERATION_COUNT = 16
KDF_GENERIC_PARAMETER = 17
KDF_KEYBITLENGTH = 18
KDF_HKDF_SALT = 19
KDF_HKDF_INFO = 20
KDF_USE_SECRET_AS_HMAC_KEY_FLAG = 1
BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_VERSION = 1
BCRYPT_AUTH_MODE_CHAIN_CALLS_FLAG = 1
BCRYPT_AUTH_MODE_IN_PROGRESS_FLAG = 2
BCRYPT_SUPPORTED_PAD_ROUTER = 1
BCRYPT_SUPPORTED_PAD_PKCS1_ENC = 2
BCRYPT_SUPPORTED_PAD_PKCS1_SIG = 4
BCRYPT_SUPPORTED_PAD_OAEP = 8
BCRYPT_SUPPORTED_PAD_PSS = 16
BCRYPT_BLOCK_PADDING = 1
BCRYPT_GENERATE_IV = 32
BCRYPT_PAD_PKCS1_OPTIONAL_HASH_OID = 16
BCRYPTBUFFER_VERSION = 0
BCRYPT_ECDH_PUBLIC_P256_MAGIC = 827016005
BCRYPT_ECDH_PRIVATE_P256_MAGIC = 843793221
BCRYPT_ECDH_PUBLIC_P384_MAGIC = 860570437
BCRYPT_ECDH_PRIVATE_P384_MAGIC = 877347653
BCRYPT_ECDH_PUBLIC_P521_MAGIC = 894124869
BCRYPT_ECDH_PRIVATE_P521_MAGIC = 910902085
BCRYPT_ECDH_PUBLIC_GENERIC_MAGIC = 1347109701
BCRYPT_ECDH_PRIVATE_GENERIC_MAGIC = 1447772997
BCRYPT_ECDSA_PUBLIC_P256_MAGIC = 827540293
BCRYPT_ECDSA_PRIVATE_P256_MAGIC = 844317509
BCRYPT_ECDSA_PUBLIC_P384_MAGIC = 861094725
BCRYPT_ECDSA_PRIVATE_P384_MAGIC = 877871941
BCRYPT_ECDSA_PUBLIC_P521_MAGIC = 894649157
BCRYPT_ECDSA_PRIVATE_P521_MAGIC = 911426373
BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC = 1346650949
BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC = 1447314245
BCRYPT_ECC_FULLKEY_BLOB_V1 = 1
BCRYPT_DH_PARAMETERS_MAGIC = 1297107012
BCRYPT_DSA_PUBLIC_MAGIC_V2 = 843206724
BCRYPT_DSA_PRIVATE_MAGIC_V2 = 844517444
BCRYPT_KEY_DATA_BLOB_MAGIC = 1296188491
BCRYPT_KEY_DATA_BLOB_VERSION1 = 1
BCRYPT_DSA_PARAMETERS_MAGIC = 1297109828
BCRYPT_DSA_PARAMETERS_MAGIC_V2 = 843927620
BCRYPT_ECC_PARAMETERS_MAGIC = 1346585413
BCRYPT_KEY_DERIVATION_INTERFACE = 7
BCRYPT_MD2_ALG_HANDLE = 1
BCRYPT_MD4_ALG_HANDLE = 17
BCRYPT_MD5_ALG_HANDLE = 33
BCRYPT_SHA1_ALG_HANDLE = 49
BCRYPT_SHA256_ALG_HANDLE = 65
BCRYPT_SHA384_ALG_HANDLE = 81
BCRYPT_SHA512_ALG_HANDLE = 97
BCRYPT_RC4_ALG_HANDLE = 113
BCRYPT_RNG_ALG_HANDLE = 129
BCRYPT_HMAC_MD5_ALG_HANDLE = 145
BCRYPT_HMAC_SHA1_ALG_HANDLE = 161
BCRYPT_HMAC_SHA256_ALG_HANDLE = 177
BCRYPT_HMAC_SHA384_ALG_HANDLE = 193
BCRYPT_HMAC_SHA512_ALG_HANDLE = 209
BCRYPT_RSA_ALG_HANDLE = 225
BCRYPT_ECDSA_ALG_HANDLE = 241
BCRYPT_AES_CMAC_ALG_HANDLE = 257
BCRYPT_AES_GMAC_ALG_HANDLE = 273
BCRYPT_HMAC_MD2_ALG_HANDLE = 289
BCRYPT_HMAC_MD4_ALG_HANDLE = 305
BCRYPT_3DES_CBC_ALG_HANDLE = 321
BCRYPT_3DES_ECB_ALG_HANDLE = 337
BCRYPT_3DES_CFB_ALG_HANDLE = 353
BCRYPT_3DES_112_CBC_ALG_HANDLE = 369
BCRYPT_3DES_112_ECB_ALG_HANDLE = 385
BCRYPT_3DES_112_CFB_ALG_HANDLE = 401
BCRYPT_AES_CBC_ALG_HANDLE = 417
BCRYPT_AES_ECB_ALG_HANDLE = 433
BCRYPT_AES_CFB_ALG_HANDLE = 449
BCRYPT_AES_CCM_ALG_HANDLE = 465
BCRYPT_AES_GCM_ALG_HANDLE = 481
BCRYPT_DES_CBC_ALG_HANDLE = 497
BCRYPT_DES_ECB_ALG_HANDLE = 513
BCRYPT_DES_CFB_ALG_HANDLE = 529
BCRYPT_DESX_CBC_ALG_HANDLE = 545
BCRYPT_DESX_ECB_ALG_HANDLE = 561
BCRYPT_DESX_CFB_ALG_HANDLE = 577
BCRYPT_RC2_CBC_ALG_HANDLE = 593
BCRYPT_RC2_ECB_ALG_HANDLE = 609
BCRYPT_RC2_CFB_ALG_HANDLE = 625
BCRYPT_DH_ALG_HANDLE = 641
BCRYPT_ECDH_ALG_HANDLE = 657
BCRYPT_ECDH_P256_ALG_HANDLE = 673
BCRYPT_ECDH_P384_ALG_HANDLE = 689
BCRYPT_ECDH_P521_ALG_HANDLE = 705
BCRYPT_DSA_ALG_HANDLE = 721
BCRYPT_ECDSA_P256_ALG_HANDLE = 737
BCRYPT_ECDSA_P384_ALG_HANDLE = 753
BCRYPT_ECDSA_P521_ALG_HANDLE = 769
BCRYPT_RSA_SIGN_ALG_HANDLE = 785
BCRYPT_CAPI_KDF_ALG_HANDLE = 801
BCRYPT_PBKDF2_ALG_HANDLE = 817
BCRYPT_SP800108_CTR_HMAC_ALG_HANDLE = 833
BCRYPT_SP80056A_CONCAT_ALG_HANDLE = 849
BCRYPT_TLS1_1_KDF_ALG_HANDLE = 865
BCRYPT_TLS1_2_KDF_ALG_HANDLE = 881
BCRYPT_XTS_AES_ALG_HANDLE = 897
BCRYPT_HKDF_ALG_HANDLE = 913
BCRYPT_CHACHA20_POLY1305_ALG_HANDLE = 929
BCRYPT_CAPI_AES_FLAG = 16
BCRYPT_MULTI_FLAG = 64
BCRYPT_TLS_CBC_HMAC_VERIFY_FLAG = 4
BCRYPT_BUFFERS_LOCKED_FLAG = 64
BCRYPT_EXTENDED_KEYSIZE = 128
BCRYPT_ENABLE_INCOMPATIBLE_FIPS_CHECKS = 256
BCRYPT_KEY_DERIVATION_OPERATION = 64
BCRYPT_PUBLIC_KEY_FLAG = 1
BCRYPT_PRIVATE_KEY_FLAG = 2
BCRYPT_NO_KEY_VALIDATION = 8
BCRYPT_KEY_VALIDATION_RANGE = 16
BCRYPT_KEY_VALIDATION_RANGE_AND_ORDER = 24
BCRYPT_KEY_VALIDATION_REGENERATE = 32
BCRYPT_RNG_USE_ENTROPY_IN_BUFFER = 1
BCRYPT_USE_SYSTEM_PREFERRED_RNG = 2
BCRYPT_HASH_INTERFACE_MAJORVERSION_2 = 2
CRYPT_OVERWRITE = 1
CRYPT_PRIORITY_TOP = 0
CRYPT_PRIORITY_BOTTOM = 4294967295
CRYPT_XML_BLOB_MAX = 2147483640
CRYPT_XML_ID_MAX = 256
CRYPT_XML_SIGNATURES_MAX = 16
CRYPT_XML_TRANSFORM_MAX = 16
CRYPT_XML_SIGNATURE_VALUE_MAX = 2048
CRYPT_XML_DIGEST_VALUE_MAX = 128
CRYPT_XML_OBJECTS_MAX = 256
CRYPT_XML_REFERENCES_MAX = 32760
CRYPT_XML_E_BASE = -2146885376
CRYPT_XML_E_LARGE = -2146885375
CRYPT_XML_E_TOO_MANY_TRANSFORMS = -2146885374
CRYPT_XML_E_ENCODING = -2146885373
CRYPT_XML_E_ALGORITHM = -2146885372
CRYPT_XML_E_TRANSFORM = -2146885371
CRYPT_XML_E_HANDLE = -2146885370
CRYPT_XML_E_OPERATION = -2146885369
CRYPT_XML_E_UNRESOLVED_REFERENCE = -2146885368
CRYPT_XML_E_INVALID_DIGEST = -2146885367
CRYPT_XML_E_INVALID_SIGNATURE = -2146885366
CRYPT_XML_E_HASH_FAILED = -2146885365
CRYPT_XML_E_SIGN_FAILED = -2146885364
CRYPT_XML_E_VERIFY_FAILED = -2146885363
CRYPT_XML_E_TOO_MANY_SIGNATURES = -2146885362
CRYPT_XML_E_INVALID_KEYVALUE = -2146885361
CRYPT_XML_E_UNEXPECTED_XML = -2146885360
CRYPT_XML_E_SIGNER = -2146885359
CRYPT_XML_E_NON_UNIQUE_ID = -2146885358
CRYPT_XML_E_LAST = -2146885358
CRYPT_XML_FLAG_ALWAYS_RETURN_ENCODED_OBJECT = 1073741824
CRYPT_XML_FLAG_ENFORCE_ID_NCNAME_FORMAT = 536870912
CRYPT_XML_FLAG_ENFORCE_ID_NAME_FORMAT = 134217728
CRYPT_XML_FLAG_ECDSA_DSIG11 = 67108864
CRYPT_XML_STATUS_NO_ERROR = 0
CRYPT_XML_FLAG_ADD_OBJECT_CREATE_COPY = 1
CRYPT_XML_FLAG_CREATE_REFERENCE_AS_OBJECT = 1
CRYPT_XML_DIGEST_REFERENCE_DATA_TRANSFORMED = 1
CRYPT_XML_GROUP_ID_HASH = 1
CRYPT_XML_GROUP_ID_SIGN = 2
CRYPT_XML_ALGORITHM_INFO_FIND_BY_URI = 1
CRYPT_XML_ALGORITHM_INFO_FIND_BY_NAME = 2
CRYPT_XML_ALGORITHM_INFO_FIND_BY_CNG_ALGID = 3
CRYPT_XML_ALGORITHM_INFO_FIND_BY_CNG_SIGN_ALGID = 4
CRYPTPROTECT_PROMPT_ON_UNPROTECT = 1
CRYPTPROTECT_PROMPT_ON_PROTECT = 2
CRYPTPROTECT_PROMPT_RESERVED = 4
CRYPTPROTECT_PROMPT_STRONG = 8
CRYPTPROTECT_PROMPT_REQUIRE_STRONG = 16
CRYPTPROTECT_UI_FORBIDDEN = 1
CRYPTPROTECT_LOCAL_MACHINE = 4
CRYPTPROTECT_CRED_SYNC = 8
CRYPTPROTECT_AUDIT = 16
CRYPTPROTECT_NO_RECOVERY = 32
CRYPTPROTECT_VERIFY_PROTECTION = 64
CRYPTPROTECT_CRED_REGENERATE = 128
CRYPTPROTECT_FIRST_RESERVED_FLAGVAL = 268435455
CRYPTPROTECT_LAST_RESERVED_FLAGVAL = 4294967295
CRYPTPROTECTMEMORY_BLOCK_SIZE = 16
CRYPTPROTECTMEMORY_SAME_PROCESS = 0
CRYPTPROTECTMEMORY_CROSS_PROCESS = 1
CRYPTPROTECTMEMORY_SAME_LOGON = 2
NCRYPT_MAX_KEY_NAME_LENGTH = 512
NCRYPT_MAX_ALG_ID_LENGTH = 512
NCRYPT_KEY_DERIVATION_INTERFACE = 7
NCRYPT_KEY_PROTECTION_INTERFACE = 65540
NCRYPTBUFFER_VERSION = 0
NCRYPTBUFFER_EMPTY = 0
NCRYPTBUFFER_DATA = 1
NCRYPTBUFFER_PROTECTION_DESCRIPTOR_STRING = 3
NCRYPTBUFFER_PROTECTION_FLAGS = 4
NCRYPTBUFFER_SSL_CLIENT_RANDOM = 20
NCRYPTBUFFER_SSL_SERVER_RANDOM = 21
NCRYPTBUFFER_SSL_HIGHEST_VERSION = 22
NCRYPTBUFFER_SSL_CLEAR_KEY = 23
NCRYPTBUFFER_SSL_KEY_ARG_DATA = 24
NCRYPTBUFFER_SSL_SESSION_HASH = 25
NCRYPTBUFFER_PKCS_OID = 40
NCRYPTBUFFER_PKCS_ALG_OID = 41
NCRYPTBUFFER_PKCS_ALG_PARAM = 42
NCRYPTBUFFER_PKCS_ALG_ID = 43
NCRYPTBUFFER_PKCS_ATTRS = 44
NCRYPTBUFFER_PKCS_KEY_NAME = 45
NCRYPTBUFFER_PKCS_SECRET = 46
NCRYPTBUFFER_CERT_BLOB = 47
NCRYPTBUFFER_CLAIM_IDBINDING_NONCE = 48
NCRYPTBUFFER_CLAIM_KEYATTESTATION_NONCE = 49
NCRYPTBUFFER_KEY_PROPERTY_FLAGS = 50
NCRYPTBUFFER_ATTESTATIONSTATEMENT_BLOB = 51
NCRYPTBUFFER_ATTESTATION_CLAIM_TYPE = 52
NCRYPTBUFFER_ATTESTATION_CLAIM_CHALLENGE_REQUIRED = 53
NCRYPTBUFFER_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS = 54
NCRYPTBUFFER_ECC_CURVE_NAME = 60
NCRYPTBUFFER_ECC_PARAMETERS = 61
NCRYPTBUFFER_TPM_SEAL_PASSWORD = 70
NCRYPTBUFFER_TPM_SEAL_POLICYINFO = 71
NCRYPTBUFFER_TPM_SEAL_TICKET = 72
NCRYPTBUFFER_TPM_SEAL_NO_DA_PROTECTION = 73
NCRYPTBUFFER_TPM_PLATFORM_CLAIM_PCR_MASK = 80
NCRYPTBUFFER_TPM_PLATFORM_CLAIM_NONCE = 81
NCRYPTBUFFER_TPM_PLATFORM_CLAIM_STATIC_CREATE = 82
NCRYPT_CIPHER_NO_PADDING_FLAG = 0
NCRYPT_CIPHER_BLOCK_PADDING_FLAG = 1
NCRYPT_CIPHER_OTHER_PADDING_FLAG = 2
NCRYPT_PLATFORM_ATTEST_MAGIC = 1146110288
NCRYPT_KEY_ATTEST_MAGIC = 1146110283
NCRYPT_CLAIM_AUTHORITY_ONLY = 1
NCRYPT_CLAIM_SUBJECT_ONLY = 2
NCRYPT_CLAIM_WEB_AUTH_SUBJECT_ONLY = 258
NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT = 3
NCRYPT_CLAIM_VSM_KEY_ATTESTATION_STATEMENT = 4
NCRYPT_CLAIM_UNKNOWN = 4096
NCRYPT_CLAIM_PLATFORM = 65536
NCRYPT_ISOLATED_KEY_FLAG_CREATED_IN_ISOLATION = 1
NCRYPT_ISOLATED_KEY_FLAG_IMPORT_ONLY = 2
NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_V0 = 0
NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_CURRENT_VERSION = 0
NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_V0 = 0
NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_CURRENT_VERSION = 0
NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_V0 = 0
NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_CURRENT_VERSION = 0
NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_V0 = 0
NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_CURRENT_VERSION = 0
NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_V0 = 0
NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_CURRENT_VERSION = 0
NCRYPT_PAD_CIPHER_FLAG = 16
NCRYPT_ATTESTATION_FLAG = 32
NCRYPT_SEALING_FLAG = 256
NCRYPT_DO_NOT_FINALIZE_FLAG = 1024
NCRYPT_EXPORT_LEGACY_FLAG = 2048
NCRYPT_IGNORE_DEVICE_STATE_FLAG = 4096
NCRYPT_TREAT_NIST_AS_GENERIC_ECC_FLAG = 8192
NCRYPT_NO_CACHED_PASSWORD = 16384
NCRYPT_PROTECT_TO_LOCAL_SYSTEM = 32768
NCRYPT_PREFER_VIRTUAL_ISOLATION_FLAG = 65536
NCRYPT_USE_VIRTUAL_ISOLATION_FLAG = 131072
NCRYPT_USE_PER_BOOT_KEY_FLAG = 262144
NCRYPT_KEY_DERIVATION_OPERATION = 64
NCRYPT_AUTHORITY_KEY_FLAG = 256
IFX_RSA_KEYGEN_VUL_NOT_AFFECTED = 0
IFX_RSA_KEYGEN_VUL_AFFECTED_LEVEL_1 = 1
IFX_RSA_KEYGEN_VUL_AFFECTED_LEVEL_2 = 2
NCRYPT_TPM_PSS_SALT_SIZE_UNKNOWN = 0
NCRYPT_TPM_PSS_SALT_SIZE_MAXIMUM = 1
NCRYPT_TPM_PSS_SALT_SIZE_HASHSIZE = 2
NCRYPT_TPM_PAD_PSS_IGNORE_SALT = 32
NCRYPT_TPM12_PROVIDER = 65536
NCRYPT_PCP_SIGNATURE_KEY = 1
NCRYPT_PCP_ENCRYPTION_KEY = 2
NCRYPT_PCP_STORAGE_KEY = 4
NCRYPT_PCP_IDENTITY_KEY = 8
NCRYPT_PCP_HMACVERIFICATION_KEY = 16
NCRYPT_MAX_PROPERTY_NAME = 64
NCRYPT_MAX_PROPERTY_DATA = 1048576
NCRYPT_ALLOW_EXPORT_FLAG = 1
NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG = 2
NCRYPT_ALLOW_ARCHIVING_FLAG = 4
NCRYPT_ALLOW_PLAINTEXT_ARCHIVING_FLAG = 8
NCRYPT_IMPL_HARDWARE_FLAG = 1
NCRYPT_IMPL_SOFTWARE_FLAG = 2
NCRYPT_IMPL_REMOVABLE_FLAG = 8
NCRYPT_IMPL_HARDWARE_RNG_FLAG = 16
NCRYPT_IMPL_VIRTUAL_ISOLATION_FLAG = 32
NCRYPT_ALLOW_DECRYPT_FLAG = 1
NCRYPT_ALLOW_SIGNING_FLAG = 2
NCRYPT_ALLOW_KEY_AGREEMENT_FLAG = 4
NCRYPT_ALLOW_KEY_IMPORT_FLAG = 8
NCRYPT_ALLOW_ALL_USAGES = 16777215
NCRYPT_UI_PROTECT_KEY_FLAG = 1
NCRYPT_UI_FORCE_HIGH_PROTECTION_FLAG = 2
NCRYPT_UI_FINGERPRINT_PROTECTION_FLAG = 4
NCRYPT_UI_APPCONTAINER_ACCESS_MEDIUM_FLAG = 8
NCRYPT_PIN_CACHE_DISABLE_DPL_FLAG = 1
NCRYPT_PIN_CACHE_REQUIRE_GESTURE_FLAG = 1
NCRYPT_PIN_CACHE_APPLICATION_TICKET_BYTE_LENGTH = 90
NCRYPT_PIN_CACHE_CLEAR_FOR_CALLING_PROCESS_OPTION = 1
NCRYPT_KEY_ACCESS_POLICY_VERSION = 1
NCRYPT_ALLOW_SILENT_KEY_ACCESS = 1
NCRYPT_CIPHER_KEY_BLOB_MAGIC = 1380470851
NCRYPT_KDF_KEY_BLOB_MAGIC = 826688587
NCRYPT_PROTECTED_KEY_BLOB_MAGIC = 1263817296
NCRYPT_TPM_LOADABLE_KEY_BLOB_MAGIC = 1297371211
NCRYPT_NAMED_DESCRIPTOR_FLAG = 1
NCRYPT_PROTECTION_INFO_TYPE_DESCRIPTOR_STRING = 1
ALG_CLASS_ANY = 0
ALG_CLASS_SIGNATURE = 8192
ALG_CLASS_MSG_ENCRYPT = 16384
ALG_CLASS_DATA_ENCRYPT = 24576
ALG_CLASS_HASH = 32768
ALG_CLASS_KEY_EXCHANGE = 40960
ALG_CLASS_ALL = 57344
ALG_TYPE_ANY = 0
ALG_TYPE_DSS = 512
ALG_TYPE_RSA = 1024
ALG_TYPE_BLOCK = 1536
ALG_TYPE_STREAM = 2048
ALG_TYPE_DH = 2560
ALG_TYPE_SECURECHANNEL = 3072
ALG_TYPE_ECDH = 3584
ALG_TYPE_THIRDPARTY = 4096
ALG_SID_ANY = 0
ALG_SID_THIRDPARTY_ANY = 0
ALG_SID_RSA_ANY = 0
ALG_SID_RSA_PKCS = 1
ALG_SID_RSA_MSATWORK = 2
ALG_SID_RSA_ENTRUST = 3
ALG_SID_RSA_PGP = 4
ALG_SID_DSS_ANY = 0
ALG_SID_DSS_PKCS = 1
ALG_SID_DSS_DMS = 2
ALG_SID_ECDSA = 3
ALG_SID_DES = 1
ALG_SID_3DES = 3
ALG_SID_DESX = 4
ALG_SID_IDEA = 5
ALG_SID_CAST = 6
ALG_SID_SAFERSK64 = 7
ALG_SID_SAFERSK128 = 8
ALG_SID_3DES_112 = 9
ALG_SID_CYLINK_MEK = 12
ALG_SID_RC5 = 13
ALG_SID_AES_128 = 14
ALG_SID_AES_192 = 15
ALG_SID_AES_256 = 16
ALG_SID_AES = 17
ALG_SID_SKIPJACK = 10
ALG_SID_TEK = 11
CRYPT_MODE_CBCI = 6
CRYPT_MODE_CFBP = 7
CRYPT_MODE_OFBP = 8
CRYPT_MODE_CBCOFM = 9
CRYPT_MODE_CBCOFMI = 10
ALG_SID_RC2 = 2
ALG_SID_RC4 = 1
ALG_SID_SEAL = 2
ALG_SID_DH_SANDF = 1
ALG_SID_DH_EPHEM = 2
ALG_SID_AGREED_KEY_ANY = 3
ALG_SID_KEA = 4
ALG_SID_ECDH = 5
ALG_SID_ECDH_EPHEM = 6
ALG_SID_MD2 = 1
ALG_SID_MD4 = 2
ALG_SID_MD5 = 3
ALG_SID_SHA = 4
ALG_SID_SHA1 = 4
ALG_SID_MAC = 5
ALG_SID_RIPEMD = 6
ALG_SID_RIPEMD160 = 7
ALG_SID_SSL3SHAMD5 = 8
ALG_SID_HMAC = 9
ALG_SID_TLS1PRF = 10
ALG_SID_HASH_REPLACE_OWF = 11
ALG_SID_SHA_256 = 12
ALG_SID_SHA_384 = 13
ALG_SID_SHA_512 = 14
ALG_SID_SSL3_MASTER = 1
ALG_SID_SCHANNEL_MASTER_HASH = 2
ALG_SID_SCHANNEL_MAC_KEY = 3
ALG_SID_PCT1_MASTER = 4
ALG_SID_SSL2_MASTER = 5
ALG_SID_TLS1_MASTER = 6
ALG_SID_SCHANNEL_ENC_KEY = 7
ALG_SID_ECMQV = 1
ALG_SID_EXAMPLE = 80
SIGNATURE_RESOURCE_NUMBER = 666
CRYPT_VERIFYCONTEXT = 4026531840
CRYPT_NEWKEYSET = 8
CRYPT_DELETEKEYSET = 16
CRYPT_SILENT = 64
CRYPT_DEFAULT_CONTAINER_OPTIONAL = 128
CRYPT_UPDATE_KEY = 8
CRYPT_USER_PROTECTED_STRONG = 1048576
RSA1024BIT_KEY = 67108864
CRYPT_SERVER = 1024
KEY_LENGTH_MASK = 4294901760
CRYPT_DECRYPT_RSA_NO_PADDING_CHECK = 32
CRYPT_SECRETDIGEST = 1
CRYPT_OWF_REPL_LM_HASH = 1
CRYPT_LITTLE_ENDIAN = 1
CRYPT_NOHASHOID = 1
CRYPT_TYPE2_FORMAT = 2
CRYPT_X931_FORMAT = 4
CRYPT_MACHINE_DEFAULT = 1
CRYPT_USER_DEFAULT = 2
CRYPT_DELETE_DEFAULT = 4
SIMPLEBLOB = 1
PUBLICKEYBLOB = 6
PRIVATEKEYBLOB = 7
PLAINTEXTKEYBLOB = 8
OPAQUEKEYBLOB = 9
PUBLICKEYBLOBEX = 10
SYMMETRICWRAPKEYBLOB = 11
KEYSTATEBLOB = 12
CRYPT_USERDATA = 1
KP_IV = 1
KP_PADDING = 3
KP_MODE = 4
KP_MODE_BITS = 5
KP_P = 11
KP_G = 12
KP_Q = 13
KP_X = 14
KP_Y = 15
KP_RA = 16
KP_RB = 17
KP_INFO = 18
KP_EFFECTIVE_KEYLEN = 19
KP_SCHANNEL_ALG = 20
KP_CLIENT_RANDOM = 21
KP_SERVER_RANDOM = 22
KP_RP = 23
KP_PRECOMP_MD5 = 24
KP_PRECOMP_SHA = 25
KP_CLEAR_KEY = 27
KP_PUB_EX_LEN = 28
KP_PUB_EX_VAL = 29
KP_KEYVAL = 30
KP_ADMIN_PIN = 31
KP_KEYEXCHANGE_PIN = 32
KP_SIGNATURE_PIN = 33
KP_PREHASH = 34
KP_ROUNDS = 35
KP_OAEP_PARAMS = 36
KP_CMS_KEY_INFO = 37
KP_CMS_DH_KEY_INFO = 38
KP_PUB_PARAMS = 39
KP_VERIFY_PARAMS = 40
KP_HIGHEST_VERSION = 41
KP_PIN_ID = 43
KP_PIN_INFO = 44
PKCS5_PADDING = 1
RANDOM_PADDING = 2
ZERO_PADDING = 3
CRYPT_MODE_CBC = 1
CRYPT_MODE_ECB = 2
CRYPT_MODE_OFB = 3
CRYPT_MODE_CFB = 4
CRYPT_MODE_CTS = 5
CRYPT_ENCRYPT = 1
CRYPT_DECRYPT = 2
CRYPT_EXPORT = 4
CRYPT_READ = 8
CRYPT_WRITE = 16
CRYPT_MAC = 32
CRYPT_EXPORT_KEY = 64
CRYPT_IMPORT_KEY = 128
CRYPT_ARCHIVE = 256
HP_ALGID = 1
HP_HASHSIZE = 4
HP_TLS1PRF_LABEL = 6
HP_TLS1PRF_SEED = 7
CRYPT_FAILED = 0
CRYPT_SUCCEED = 1
PP_ENUMALGS = 1
PP_ENUMCONTAINERS = 2
PP_IMPTYPE = 3
PP_NAME = 4
PP_VERSION = 5
PP_CONTAINER = 6
PP_CHANGE_PASSWORD = 7
PP_CERTCHAIN = 9
PP_KEY_TYPE_SUBTYPE = 10
PP_PROVTYPE = 16
PP_KEYSTORAGE = 17
PP_APPLI_CERT = 18
PP_SYM_KEYSIZE = 19
PP_SESSION_KEYSIZE = 20
PP_ENUMALGS_EX = 22
PP_ENUMMANDROOTS = 25
PP_ENUMELECTROOTS = 26
PP_KEYSET_TYPE = 27
PP_ADMIN_PIN = 31
PP_SIG_KEYSIZE_INC = 34
PP_KEYX_KEYSIZE_INC = 35
PP_UNIQUE_CONTAINER = 36
PP_SGC_INFO = 37
PP_KEYSPEC = 39
PP_ENUMEX_SIGNING_PROT = 40
PP_CRYPT_COUNT_KEY_USE = 41
PP_SMARTCARD_GUID = 45
PP_SMARTCARD_READER_ICON = 47
CRYPT_FIRST = 1
CRYPT_NEXT = 2
CRYPT_SGC_ENUM = 4
CRYPT_IMPL_HARDWARE = 1
CRYPT_IMPL_SOFTWARE = 2
CRYPT_IMPL_MIXED = 3
CRYPT_IMPL_UNKNOWN = 4
CRYPT_IMPL_REMOVABLE = 8
CRYPT_SEC_DESCR = 1
CRYPT_PSTORE = 2
CRYPT_UI_PROMPT = 4
CRYPT_FLAG_PCT1 = 1
CRYPT_FLAG_SSL2 = 2
CRYPT_FLAG_SSL3 = 4
CRYPT_FLAG_TLS1 = 8
CRYPT_FLAG_IPSEC = 16
CRYPT_FLAG_SIGNING = 32
CRYPT_SGC = 1
CRYPT_FASTSGC = 2
PP_CONTEXT_INFO = 11
PP_DISMISS_PIN_UI_SEC = 49
PROV_RSA_FULL = 1
PROV_RSA_SIG = 2
PROV_DSS = 3
PROV_FORTEZZA = 4
PROV_MS_EXCHANGE = 5
PROV_SSL = 6
PROV_RSA_SCHANNEL = 12
PROV_DSS_DH = 13
PROV_EC_ECDSA_SIG = 14
PROV_EC_ECNRA_SIG = 15
PROV_EC_ECDSA_FULL = 16
PROV_EC_ECNRA_FULL = 17
PROV_DH_SCHANNEL = 18
PROV_SPYRUS_LYNKS = 20
PROV_RNG = 21
PROV_INTEL_SEC = 22
PROV_REPLACE_OWF = 23
PROV_RSA_AES = 24
PROV_STT_MER = 7
PROV_STT_ACQ = 8
PROV_STT_BRND = 9
PROV_STT_ROOT = 10
PROV_STT_ISS = 11
MAXUIDLEN = 64
CUR_BLOB_VERSION = 2
SCHANNEL_MAC_KEY = 0
SCHANNEL_ENC_KEY = 1
INTERNATIONAL_USAGE = 1
CERT_RDN_TYPE_MASK = 255
CERT_RDN_FLAGS_MASK = 4278190080
CERT_RDN_ENABLE_T61_UNICODE_FLAG = 2147483648
CERT_RDN_ENABLE_UTF8_UNICODE_FLAG = 536870912
CERT_RDN_FORCE_UTF8_UNICODE_FLAG = 268435456
CERT_RDN_DISABLE_CHECK_TYPE_FLAG = 1073741824
CERT_RDN_DISABLE_IE4_UTF8_FLAG = 16777216
CERT_RDN_ENABLE_PUNYCODE_FLAG = 33554432
CRYPT_ECC_PRIVATE_KEY_INFO_v1 = 1
CERT_V1 = 0
CERT_V2 = 1
CERT_V3 = 2
CERT_INFO_VERSION_FLAG = 1
CERT_INFO_SERIAL_NUMBER_FLAG = 2
CERT_INFO_SIGNATURE_ALGORITHM_FLAG = 3
CERT_INFO_ISSUER_FLAG = 4
CERT_INFO_NOT_BEFORE_FLAG = 5
CERT_INFO_NOT_AFTER_FLAG = 6
CERT_INFO_SUBJECT_FLAG = 7
CERT_INFO_SUBJECT_PUBLIC_KEY_INFO_FLAG = 8
CERT_INFO_ISSUER_UNIQUE_ID_FLAG = 9
CERT_INFO_SUBJECT_UNIQUE_ID_FLAG = 10
CERT_INFO_EXTENSION_FLAG = 11
CRL_V1 = 0
CRL_V2 = 1
CERT_BUNDLE_CERTIFICATE = 0
CERT_BUNDLE_CRL = 1
CERT_REQUEST_V1 = 0
CERT_KEYGEN_REQUEST_V1 = 0
CTL_V1 = 0
CERT_ENCODING_TYPE_MASK = 65535
CMSG_ENCODING_TYPE_MASK = 4294901760
CRYPT_ASN_ENCODING = 1
CRYPT_NDR_ENCODING = 2
X509_NDR_ENCODING = 2
PKCS_7_NDR_ENCODING = 131072
CRYPT_FORMAT_STR_MULTI_LINE = 1
CRYPT_FORMAT_STR_NO_HEX = 16
CRYPT_FORMAT_SIMPLE = 1
CRYPT_FORMAT_X509 = 2
CRYPT_FORMAT_OID = 4
CRYPT_FORMAT_RDN_SEMICOLON = 256
CRYPT_FORMAT_RDN_CRLF = 512
CRYPT_FORMAT_RDN_UNQUOTE = 1024
CRYPT_FORMAT_RDN_REVERSE = 2048
CRYPT_FORMAT_COMMA = 4096
CRYPT_FORMAT_SEMICOLON = 256
CRYPT_FORMAT_CRLF = 512
CRYPT_ENCODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG = 8
CRYPT_UNICODE_NAME_ENCODE_FORCE_UTF8_UNICODE_FLAG = 268435456
CRYPT_SORTED_CTL_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG = 65536
CRYPT_ENCODE_ENABLE_UTF8PERCENT_FLAG = 262144
CRYPT_DECODE_NOCOPY_FLAG = 1
CRYPT_DECODE_TO_BE_SIGNED_FLAG = 2
CRYPT_DECODE_SHARE_OID_STRING_FLAG = 4
CRYPT_DECODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG = 8
CRYPT_DECODE_ALLOC_FLAG = 32768
CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG = 16777216
CRYPT_DECODE_ENABLE_PUNYCODE_FLAG = 33554432
CRYPT_DECODE_ENABLE_UTF8PERCENT_FLAG = 67108864
CRYPT_ENCODE_DECODE_NONE = 0
SITE_PIN_RULES_ALL_SUBDOMAINS_FLAG = 1
CERT_ROOT_PROGRAM_FLAG_OU = 16
CERT_ROOT_PROGRAM_FLAG_ADDRESS = 8
CERT_UNICODE_RDN_ERR_INDEX_MASK = 1023
CERT_UNICODE_RDN_ERR_INDEX_SHIFT = 22
CERT_UNICODE_ATTR_ERR_INDEX_MASK = 63
CERT_UNICODE_ATTR_ERR_INDEX_SHIFT = 16
CERT_UNICODE_VALUE_ERR_INDEX_MASK = 65535
CERT_UNICODE_VALUE_ERR_INDEX_SHIFT = 0
CERT_DIGITAL_SIGNATURE_KEY_USAGE = 128
CERT_NON_REPUDIATION_KEY_USAGE = 64
CERT_KEY_ENCIPHERMENT_KEY_USAGE = 32
CERT_DATA_ENCIPHERMENT_KEY_USAGE = 16
CERT_KEY_AGREEMENT_KEY_USAGE = 8
CERT_KEY_CERT_SIGN_KEY_USAGE = 4
CERT_OFFLINE_CRL_SIGN_KEY_USAGE = 2
CERT_CRL_SIGN_KEY_USAGE = 2
CERT_ENCIPHER_ONLY_KEY_USAGE = 1
CERT_DECIPHER_ONLY_KEY_USAGE = 128
CERT_ALT_NAME_X400_ADDRESS = 4
CERT_ALT_NAME_EDI_PARTY_NAME = 6
CERT_ALT_NAME_ENTRY_ERR_INDEX_MASK = 255
CERT_ALT_NAME_ENTRY_ERR_INDEX_SHIFT = 16
CERT_ALT_NAME_VALUE_ERR_INDEX_MASK = 65535
CERT_ALT_NAME_VALUE_ERR_INDEX_SHIFT = 0
CERT_CA_SUBJECT_FLAG = 128
CERT_END_ENTITY_SUBJECT_FLAG = 64
CRL_REASON_PRIVILEGE_WITHDRAWN = 9
CRL_REASON_AA_COMPROMISE = 10
CRL_DIST_POINT_NO_NAME = 0
CRL_DIST_POINT_FULL_NAME = 1
CRL_DIST_POINT_ISSUER_RDN_NAME = 2
CRL_REASON_UNUSED_FLAG = 128
CRL_REASON_KEY_COMPROMISE_FLAG = 64
CRL_REASON_CA_COMPROMISE_FLAG = 32
CRL_REASON_AFFILIATION_CHANGED_FLAG = 16
CRL_REASON_SUPERSEDED_FLAG = 8
CRL_REASON_CESSATION_OF_OPERATION_FLAG = 4
CRL_REASON_CERTIFICATE_HOLD_FLAG = 2
CRL_REASON_PRIVILEGE_WITHDRAWN_FLAG = 1
CRL_REASON_AA_COMPROMISE_FLAG = 128
CRL_DIST_POINT_ERR_INDEX_MASK = 127
CRL_DIST_POINT_ERR_INDEX_SHIFT = 24
CRL_DIST_POINT_ERR_CRL_ISSUER_BIT = -2147483648
CROSS_CERT_DIST_POINT_ERR_INDEX_MASK = 255
CROSS_CERT_DIST_POINT_ERR_INDEX_SHIFT = 24
CERT_EXCLUDED_SUBTREE_BIT = -2147483648
SORTED_CTL_EXT_HASHED_SUBJECT_IDENTIFIER_FLAG = 1
CERT_DSS_R_LEN = 20
CERT_DSS_S_LEN = 20
CRYPT_X942_COUNTER_BYTE_LENGTH = 4
CRYPT_X942_KEY_LENGTH_BYTE_LENGTH = 4
CRYPT_ECC_CMS_SHARED_INFO_SUPPPUBINFO_BYTE_LENGTH = 4
CRYPT_RC2_40BIT_VERSION = 160
CRYPT_RC2_56BIT_VERSION = 52
CRYPT_RC2_64BIT_VERSION = 120
CRYPT_RC2_128BIT_VERSION = 58
PKCS_RSA_SSA_PSS_TRAILER_FIELD_BC = 1
NETSCAPE_SSL_CLIENT_AUTH_CERT_TYPE = 128
NETSCAPE_SSL_SERVER_AUTH_CERT_TYPE = 64
NETSCAPE_SMIME_CERT_TYPE = 32
NETSCAPE_SIGN_CERT_TYPE = 16
NETSCAPE_SSL_CA_CERT_TYPE = 4
NETSCAPE_SMIME_CA_CERT_TYPE = 2
NETSCAPE_SIGN_CA_CERT_TYPE = 1
CMC_TAGGED_CERT_REQUEST_CHOICE = 1
CMC_OTHER_INFO_NO_CHOICE = 0
CMC_OTHER_INFO_FAIL_CHOICE = 1
CMC_OTHER_INFO_PEND_CHOICE = 2
CMC_STATUS_SUCCESS = 0
CMC_STATUS_FAILED = 2
CMC_STATUS_PENDING = 3
CMC_STATUS_NO_SUPPORT = 4
CMC_STATUS_CONFIRM_REQUIRED = 5
CMC_FAIL_BAD_ALG = 0
CMC_FAIL_BAD_MESSAGE_CHECK = 1
CMC_FAIL_BAD_REQUEST = 2
CMC_FAIL_BAD_TIME = 3
CMC_FAIL_BAD_CERT_ID = 4
CMC_FAIL_UNSUPORTED_EXT = 5
CMC_FAIL_MUST_ARCHIVE_KEYS = 6
CMC_FAIL_BAD_IDENTITY = 7
CMC_FAIL_POP_REQUIRED = 8
CMC_FAIL_POP_FAILED = 9
CMC_FAIL_NO_KEY_REUSE = 10
CMC_FAIL_INTERNAL_CA_ERROR = 11
CMC_FAIL_TRY_LATER = 12
CERT_BIOMETRIC_PICTURE_TYPE = 0
CERT_BIOMETRIC_SIGNATURE_TYPE = 1
OCSP_REQUEST_V1 = 0
OCSP_SUCCESSFUL_RESPONSE = 0
OCSP_MALFORMED_REQUEST_RESPONSE = 1
OCSP_INTERNAL_ERROR_RESPONSE = 2
OCSP_TRY_LATER_RESPONSE = 3
OCSP_SIG_REQUIRED_RESPONSE = 5
OCSP_UNAUTHORIZED_RESPONSE = 6
OCSP_BASIC_GOOD_CERT_STATUS = 0
OCSP_BASIC_REVOKED_CERT_STATUS = 1
OCSP_BASIC_UNKNOWN_CERT_STATUS = 2
OCSP_BASIC_RESPONSE_V1 = 0
OCSP_BASIC_BY_NAME_RESPONDER_ID = 1
OCSP_BASIC_BY_KEY_RESPONDER_ID = 2
CRYPT_INSTALL_OID_FUNC_BEFORE_FLAG = 1
CRYPT_GET_INSTALLED_OID_FUNC_FLAG = 1
CRYPT_REGISTER_FIRST_INDEX = 0
CRYPT_REGISTER_LAST_INDEX = 4294967295
CRYPT_MATCH_ANY_ENCODING_TYPE = 4294967295
CALG_OID_INFO_CNG_ONLY = 4294967295
CALG_OID_INFO_PARAMETERS = 4294967294
CRYPT_HASH_ALG_OID_GROUP_ID = 1
CRYPT_ENCRYPT_ALG_OID_GROUP_ID = 2
CRYPT_PUBKEY_ALG_OID_GROUP_ID = 3
CRYPT_SIGN_ALG_OID_GROUP_ID = 4
CRYPT_RDN_ATTR_OID_GROUP_ID = 5
CRYPT_EXT_OR_ATTR_OID_GROUP_ID = 6
CRYPT_ENHKEY_USAGE_OID_GROUP_ID = 7
CRYPT_POLICY_OID_GROUP_ID = 8
CRYPT_TEMPLATE_OID_GROUP_ID = 9
CRYPT_KDF_OID_GROUP_ID = 10
CRYPT_LAST_OID_GROUP_ID = 10
CRYPT_FIRST_ALG_OID_GROUP_ID = 1
CRYPT_LAST_ALG_OID_GROUP_ID = 4
CRYPT_OID_INHIBIT_SIGNATURE_FORMAT_FLAG = 1
CRYPT_OID_USE_PUBKEY_PARA_FOR_PKCS7_FLAG = 2
CRYPT_OID_NO_NULL_ALGORITHM_PARA_FLAG = 4
CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG = 2147483648
CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG = 1073741824
CRYPT_OID_USE_CURVE_NAME_FOR_ENCODE_FLAG = 536870912
CRYPT_OID_USE_CURVE_PARAMETERS_FOR_ENCODE_FLAG = 268435456
CRYPT_OID_INFO_OID_KEY = 1
CRYPT_OID_INFO_NAME_KEY = 2
CRYPT_OID_INFO_ALGID_KEY = 3
CRYPT_OID_INFO_SIGN_KEY = 4
CRYPT_OID_INFO_CNG_ALGID_KEY = 5
CRYPT_OID_INFO_CNG_SIGN_KEY = 6
CRYPT_OID_INFO_OID_KEY_FLAGS_MASK = 4294901760
CRYPT_OID_DISABLE_SEARCH_DS_FLAG = 2147483648
CRYPT_OID_PREFER_CNG_ALGID_FLAG = 1073741824
CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK = 268369920
CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT = 16
CRYPT_INSTALL_OID_INFO_BEFORE_FLAG = 1
CRYPT_LOCALIZED_NAME_ENCODING_TYPE = 0
CERT_STRONG_SIGN_SERIALIZED_INFO_CHOICE = 1
CERT_STRONG_SIGN_OID_INFO_CHOICE = 2
CMSG_ENCRYPTED = 6
CMSG_MAIL_LIST_HANDLE_KEY_CHOICE = 1
CMSG_KEY_TRANS_RECIPIENT = 1
CMSG_KEY_AGREE_RECIPIENT = 2
CMSG_MAIL_LIST_RECIPIENT = 3
CMSG_SP3_COMPATIBLE_ENCRYPT_FLAG = 2147483648
CMSG_RC4_NO_SALT_FLAG = 1073741824
CMSG_INDEFINITE_LENGTH = 4294967295
CMSG_BARE_CONTENT_FLAG = 1
CMSG_LENGTH_ONLY_FLAG = 2
CMSG_DETACHED_FLAG = 4
CMSG_AUTHENTICATED_ATTRIBUTES_FLAG = 8
CMSG_CONTENTS_OCTETS_FLAG = 16
CMSG_MAX_LENGTH_FLAG = 32
CMSG_CMS_ENCAPSULATED_CONTENT_FLAG = 64
CMSG_SIGNED_DATA_NO_SIGN_FLAG = 128
CMSG_CRYPT_RELEASE_CONTEXT_FLAG = 32768
CMSG_TYPE_PARAM = 1
CMSG_CONTENT_PARAM = 2
CMSG_BARE_CONTENT_PARAM = 3
CMSG_INNER_CONTENT_TYPE_PARAM = 4
CMSG_SIGNER_COUNT_PARAM = 5
CMSG_SIGNER_INFO_PARAM = 6
CMSG_SIGNER_CERT_INFO_PARAM = 7
CMSG_SIGNER_HASH_ALGORITHM_PARAM = 8
CMSG_SIGNER_AUTH_ATTR_PARAM = 9
CMSG_SIGNER_UNAUTH_ATTR_PARAM = 10
CMSG_CERT_COUNT_PARAM = 11
CMSG_CERT_PARAM = 12
CMSG_CRL_COUNT_PARAM = 13
CMSG_CRL_PARAM = 14
CMSG_ENVELOPE_ALGORITHM_PARAM = 15
CMSG_RECIPIENT_COUNT_PARAM = 17
CMSG_RECIPIENT_INDEX_PARAM = 18
CMSG_RECIPIENT_INFO_PARAM = 19
CMSG_HASH_ALGORITHM_PARAM = 20
CMSG_HASH_DATA_PARAM = 21
CMSG_COMPUTED_HASH_PARAM = 22
CMSG_ENCRYPT_PARAM = 26
CMSG_ENCRYPTED_DIGEST = 27
CMSG_ENCODED_SIGNER = 28
CMSG_ENCODED_MESSAGE = 29
CMSG_VERSION_PARAM = 30
CMSG_ATTR_CERT_COUNT_PARAM = 31
CMSG_ATTR_CERT_PARAM = 32
CMSG_CMS_RECIPIENT_COUNT_PARAM = 33
CMSG_CMS_RECIPIENT_INDEX_PARAM = 34
CMSG_CMS_RECIPIENT_ENCRYPTED_KEY_INDEX_PARAM = 35
CMSG_CMS_RECIPIENT_INFO_PARAM = 36
CMSG_UNPROTECTED_ATTR_PARAM = 37
CMSG_SIGNER_CERT_ID_PARAM = 38
CMSG_CMS_SIGNER_INFO_PARAM = 39
CMSG_SIGNED_DATA_V1 = 1
CMSG_SIGNED_DATA_V3 = 3
CMSG_SIGNED_DATA_PKCS_1_5_VERSION = 1
CMSG_SIGNED_DATA_CMS_VERSION = 3
CMSG_SIGNER_INFO_V1 = 1
CMSG_SIGNER_INFO_V3 = 3
CMSG_SIGNER_INFO_PKCS_1_5_VERSION = 1
CMSG_SIGNER_INFO_CMS_VERSION = 3
CMSG_HASHED_DATA_V0 = 0
CMSG_HASHED_DATA_V2 = 2
CMSG_HASHED_DATA_PKCS_1_5_VERSION = 0
CMSG_HASHED_DATA_CMS_VERSION = 2
CMSG_ENVELOPED_DATA_V0 = 0
CMSG_ENVELOPED_DATA_V2 = 2
CMSG_ENVELOPED_DATA_PKCS_1_5_VERSION = 0
CMSG_ENVELOPED_DATA_CMS_VERSION = 2
CMSG_ENVELOPED_RECIPIENT_V0 = 0
CMSG_ENVELOPED_RECIPIENT_V2 = 2
CMSG_ENVELOPED_RECIPIENT_V3 = 3
CMSG_ENVELOPED_RECIPIENT_V4 = 4
CMSG_KEY_TRANS_PKCS_1_5_VERSION = 0
CMSG_KEY_TRANS_CMS_VERSION = 2
CMSG_KEY_AGREE_VERSION = 3
CMSG_MAIL_LIST_VERSION = 4
CMSG_CTRL_VERIFY_SIGNATURE = 1
CMSG_CTRL_DECRYPT = 2
CMSG_CTRL_VERIFY_HASH = 5
CMSG_CTRL_ADD_SIGNER = 6
CMSG_CTRL_DEL_SIGNER = 7
CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR = 8
CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR = 9
CMSG_CTRL_ADD_CERT = 10
CMSG_CTRL_DEL_CERT = 11
CMSG_CTRL_ADD_CRL = 12
CMSG_CTRL_DEL_CRL = 13
CMSG_CTRL_ADD_ATTR_CERT = 14
CMSG_CTRL_DEL_ATTR_CERT = 15
CMSG_CTRL_KEY_TRANS_DECRYPT = 16
CMSG_CTRL_KEY_AGREE_DECRYPT = 17
CMSG_CTRL_MAIL_LIST_DECRYPT = 18
CMSG_CTRL_VERIFY_SIGNATURE_EX = 19
CMSG_CTRL_ADD_CMS_SIGNER_INFO = 20
CMSG_CTRL_ENABLE_STRONG_SIGNATURE = 21
CMSG_VERIFY_SIGNER_PUBKEY = 1
CMSG_VERIFY_SIGNER_CERT = 2
CMSG_VERIFY_SIGNER_CHAIN = 3
CMSG_VERIFY_SIGNER_NULL = 4
CMSG_VERIFY_COUNTER_SIGN_ENABLE_STRONG_FLAG = 1
CMSG_CONTENT_ENCRYPT_PAD_ENCODED_LEN_FLAG = 1
CMSG_CONTENT_ENCRYPT_FREE_PARA_FLAG = 1
CMSG_CONTENT_ENCRYPT_FREE_OBJID_FLAG = 2
CMSG_CONTENT_ENCRYPT_RELEASE_CONTEXT_FLAG = 32768
CMSG_KEY_TRANS_ENCRYPT_FREE_PARA_FLAG = 1
CMSG_KEY_TRANS_ENCRYPT_FREE_OBJID_FLAG = 2
CMSG_KEY_AGREE_ENCRYPT_FREE_PARA_FLAG = 1
CMSG_KEY_AGREE_ENCRYPT_FREE_MATERIAL_FLAG = 2
CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_ALG_FLAG = 4
CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_PARA_FLAG = 8
CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_BITS_FLAG = 16
CMSG_KEY_AGREE_ENCRYPT_FREE_OBJID_FLAG = 32
CMSG_MAIL_LIST_ENCRYPT_FREE_PARA_FLAG = 1
CMSG_MAIL_LIST_ENCRYPT_FREE_OBJID_FLAG = 2
CERT_KEY_PROV_HANDLE_PROP_ID = 1
CERT_KEY_PROV_INFO_PROP_ID = 2
CERT_SHA1_HASH_PROP_ID = 3
CERT_MD5_HASH_PROP_ID = 4
CERT_HASH_PROP_ID = 3
CERT_KEY_CONTEXT_PROP_ID = 5
CERT_KEY_SPEC_PROP_ID = 6
CERT_IE30_RESERVED_PROP_ID = 7
CERT_PUBKEY_HASH_RESERVED_PROP_ID = 8
CERT_ENHKEY_USAGE_PROP_ID = 9
CERT_CTL_USAGE_PROP_ID = 9
CERT_NEXT_UPDATE_LOCATION_PROP_ID = 10
CERT_FRIENDLY_NAME_PROP_ID = 11
CERT_PVK_FILE_PROP_ID = 12
CERT_DESCRIPTION_PROP_ID = 13
CERT_ACCESS_STATE_PROP_ID = 14
CERT_SIGNATURE_HASH_PROP_ID = 15
CERT_SMART_CARD_DATA_PROP_ID = 16
CERT_EFS_PROP_ID = 17
CERT_FORTEZZA_DATA_PROP_ID = 18
CERT_ARCHIVED_PROP_ID = 19
CERT_KEY_IDENTIFIER_PROP_ID = 20
CERT_AUTO_ENROLL_PROP_ID = 21
CERT_PUBKEY_ALG_PARA_PROP_ID = 22
CERT_CROSS_CERT_DIST_POINTS_PROP_ID = 23
CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID = 24
CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID = 25
CERT_ENROLLMENT_PROP_ID = 26
CERT_DATE_STAMP_PROP_ID = 27
CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = 28
CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = 29
CERT_EXTENDED_ERROR_INFO_PROP_ID = 30
CERT_RENEWAL_PROP_ID = 64
CERT_ARCHIVED_KEY_HASH_PROP_ID = 65
CERT_AUTO_ENROLL_RETRY_PROP_ID = 66
CERT_AIA_URL_RETRIEVED_PROP_ID = 67
CERT_AUTHORITY_INFO_ACCESS_PROP_ID = 68
CERT_BACKED_UP_PROP_ID = 69
CERT_OCSP_RESPONSE_PROP_ID = 70
CERT_REQUEST_ORIGINATOR_PROP_ID = 71
CERT_SOURCE_LOCATION_PROP_ID = 72
CERT_SOURCE_URL_PROP_ID = 73
CERT_NEW_KEY_PROP_ID = 74
CERT_OCSP_CACHE_PREFIX_PROP_ID = 75
CERT_SMART_CARD_ROOT_INFO_PROP_ID = 76
CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID = 77
CERT_NCRYPT_KEY_HANDLE_PROP_ID = 78
CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID = 79
CERT_SUBJECT_INFO_ACCESS_PROP_ID = 80
CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 81
CERT_CA_DISABLE_CRL_PROP_ID = 82
CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID = 83
CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID = 84
CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 85
CERT_SUBJECT_DISABLE_CRL_PROP_ID = 86
CERT_CEP_PROP_ID = 87
CERT_SIGN_HASH_CNG_ALG_PROP_ID = 89
CERT_SCARD_PIN_ID_PROP_ID = 90
CERT_SCARD_PIN_INFO_PROP_ID = 91
CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID = 92
CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 93
CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID = 94
CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID = 95
CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 96
CERT_NO_EXPIRE_NOTIFICATION_PROP_ID = 97
CERT_AUTH_ROOT_SHA256_HASH_PROP_ID = 98
CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID = 99
CERT_HCRYPTPROV_TRANSFER_PROP_ID = 100
CERT_SMART_CARD_READER_PROP_ID = 101
CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID = 102
CERT_KEY_REPAIR_ATTEMPTED_PROP_ID = 103
CERT_DISALLOWED_FILETIME_PROP_ID = 104
CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID = 105
CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID = 106
CERT_SHA256_HASH_PROP_ID = 107
CERT_SCEP_SERVER_CERTS_PROP_ID = 108
CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID = 109
CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID = 110
CERT_SCEP_CA_CERT_PROP_ID = 111
CERT_SCEP_SIGNER_CERT_PROP_ID = 112
CERT_SCEP_NONCE_PROP_ID = 113
CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID = 114
CERT_SCEP_FLAGS_PROP_ID = 115
CERT_SCEP_GUID_PROP_ID = 116
CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID = 117
CERT_ISOLATED_KEY_PROP_ID = 118
CERT_SERIAL_CHAIN_PROP_ID = 119
CERT_KEY_CLASSIFICATION_PROP_ID = 120
CERT_OCSP_MUST_STAPLE_PROP_ID = 121
CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID = 122
CERT_NONCOMPLIANT_ROOT_URL_PROP_ID = 123
CERT_PIN_SHA256_HASH_PROP_ID = 124
CERT_CLR_DELETE_KEY_PROP_ID = 125
CERT_NOT_BEFORE_FILETIME_PROP_ID = 126
CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID = 127
CERT_FIRST_RESERVED_PROP_ID = 128
CERT_LAST_RESERVED_PROP_ID = 32767
CERT_FIRST_USER_PROP_ID = 32768
CERT_LAST_USER_PROP_ID = 65535
CERT_ACCESS_STATE_WRITE_PERSIST_FLAG = 1
CERT_ACCESS_STATE_SYSTEM_STORE_FLAG = 2
CERT_ACCESS_STATE_LM_SYSTEM_STORE_FLAG = 4
CERT_ACCESS_STATE_GP_SYSTEM_STORE_FLAG = 8
CERT_ACCESS_STATE_SHARED_USER_FLAG = 16
CERT_STORE_SIGNATURE_FLAG = 1
CERT_STORE_TIME_VALIDITY_FLAG = 2
CERT_STORE_REVOCATION_FLAG = 4
CERT_STORE_NO_CRL_FLAG = 65536
CERT_STORE_NO_ISSUER_FLAG = 131072
CERT_STORE_BASE_CRL_FLAG = 256
CERT_STORE_DELTA_CRL_FLAG = 512
CERT_STORE_UNSAFE_PHYSICAL_FLAG = 32
CERT_STORE_SHARE_STORE_FLAG = 64
CERT_STORE_MANIFOLD_FLAG = 256
CERT_SYSTEM_STORE_MASK = 4294901760
CERT_SYSTEM_STORE_UNPROTECTED_FLAG = 1073741824
CERT_SYSTEM_STORE_DEFER_READ_FLAG = 536870912
CERT_SYSTEM_STORE_LOCATION_SHIFT = 16
CERT_SYSTEM_STORE_CURRENT_USER_ID = 1
CERT_SYSTEM_STORE_LOCAL_MACHINE_ID = 2
CERT_SYSTEM_STORE_CURRENT_SERVICE_ID = 4
CERT_SYSTEM_STORE_SERVICES_ID = 5
CERT_SYSTEM_STORE_USERS_ID = 6
CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY_ID = 7
CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY_ID = 8
CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE_ID = 9
CERT_SYSTEM_STORE_LOCAL_MACHINE_WCOS_ID = 10
CERT_PROT_ROOT_DISABLE_CURRENT_USER_FLAG = 1
CERT_PROT_ROOT_INHIBIT_ADD_AT_INIT_FLAG = 2
CERT_PROT_ROOT_INHIBIT_PURGE_LM_FLAG = 4
CERT_PROT_ROOT_DISABLE_LM_AUTH_FLAG = 8
CERT_PROT_ROOT_ONLY_LM_GPT_FLAG = 8
CERT_PROT_ROOT_DISABLE_NT_AUTH_REQUIRED_FLAG = 16
CERT_PROT_ROOT_DISABLE_NOT_DEFINED_NAME_CONSTRAINT_FLAG = 32
CERT_PROT_ROOT_DISABLE_PEER_TRUST = 65536
CERT_TRUST_PUB_ALLOW_TRUST_MASK = 3
CERT_TRUST_PUB_ALLOW_END_USER_TRUST = 0
CERT_TRUST_PUB_ALLOW_MACHINE_ADMIN_TRUST = 1
CERT_TRUST_PUB_ALLOW_ENTERPRISE_ADMIN_TRUST = 2
CERT_TRUST_PUB_CHECK_PUBLISHER_REV_FLAG = 256
CERT_TRUST_PUB_CHECK_TIMESTAMP_REV_FLAG = 512
CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_UNTRUSTED_ROOT_LOGGING_FLAG = 1
CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_PARTIAL_CHAIN_LOGGING_FLAG = 2
CERT_AUTO_UPDATE_DISABLE_RANDOM_QUERY_STRING_FLAG = 4
CERT_REGISTRY_STORE_REMOTE_FLAG = 65536
CERT_REGISTRY_STORE_SERIALIZED_FLAG = 131072
CERT_REGISTRY_STORE_CLIENT_GPT_FLAG = 2147483648
CERT_REGISTRY_STORE_LM_GPT_FLAG = 16777216
CERT_REGISTRY_STORE_ROAMING_FLAG = 262144
CERT_REGISTRY_STORE_MY_IE_DIRTY_FLAG = 524288
CERT_REGISTRY_STORE_EXTERNAL_FLAG = 1048576
CERT_FILE_STORE_COMMIT_ENABLE_FLAG = 65536
CERT_LDAP_STORE_SIGN_FLAG = 65536
CERT_LDAP_STORE_AREC_EXCLUSIVE_FLAG = 131072
CERT_LDAP_STORE_OPENED_FLAG = 262144
CERT_LDAP_STORE_UNBIND_FLAG = 524288
CERT_STORE_PROV_GP_SYSTEM_STORE_FLAG = 32
CERT_STORE_PROV_SHARED_USER_FLAG = 64
CERT_STORE_PROV_CLOSE_FUNC = 0
CERT_STORE_PROV_READ_CERT_FUNC = 1
CERT_STORE_PROV_WRITE_CERT_FUNC = 2
CERT_STORE_PROV_DELETE_CERT_FUNC = 3
CERT_STORE_PROV_SET_CERT_PROPERTY_FUNC = 4
CERT_STORE_PROV_READ_CRL_FUNC = 5
CERT_STORE_PROV_WRITE_CRL_FUNC = 6
CERT_STORE_PROV_DELETE_CRL_FUNC = 7
CERT_STORE_PROV_SET_CRL_PROPERTY_FUNC = 8
CERT_STORE_PROV_READ_CTL_FUNC = 9
CERT_STORE_PROV_WRITE_CTL_FUNC = 10
CERT_STORE_PROV_DELETE_CTL_FUNC = 11
CERT_STORE_PROV_SET_CTL_PROPERTY_FUNC = 12
CERT_STORE_PROV_CONTROL_FUNC = 13
CERT_STORE_PROV_FIND_CERT_FUNC = 14
CERT_STORE_PROV_FREE_FIND_CERT_FUNC = 15
CERT_STORE_PROV_GET_CERT_PROPERTY_FUNC = 16
CERT_STORE_PROV_FIND_CRL_FUNC = 17
CERT_STORE_PROV_FREE_FIND_CRL_FUNC = 18
CERT_STORE_PROV_GET_CRL_PROPERTY_FUNC = 19
CERT_STORE_PROV_FIND_CTL_FUNC = 20
CERT_STORE_PROV_FREE_FIND_CTL_FUNC = 21
CERT_STORE_PROV_GET_CTL_PROPERTY_FUNC = 22
CERT_STORE_PROV_WRITE_ADD_FLAG = 1
CERT_STORE_SAVE_AS_PKCS12 = 3
CERT_CLOSE_STORE_FORCE_FLAG = 1
CERT_CLOSE_STORE_CHECK_FLAG = 2
CERT_COMPARE_MASK = 65535
CERT_COMPARE_ANY = 0
CERT_COMPARE_SHA1_HASH = 1
CERT_COMPARE_NAME = 2
CERT_COMPARE_ATTR = 3
CERT_COMPARE_MD5_HASH = 4
CERT_COMPARE_PROPERTY = 5
CERT_COMPARE_PUBLIC_KEY = 6
CERT_COMPARE_HASH = 1
CERT_COMPARE_NAME_STR_A = 7
CERT_COMPARE_NAME_STR_W = 8
CERT_COMPARE_KEY_SPEC = 9
CERT_COMPARE_ENHKEY_USAGE = 10
CERT_COMPARE_CTL_USAGE = 10
CERT_COMPARE_SUBJECT_CERT = 11
CERT_COMPARE_ISSUER_OF = 12
CERT_COMPARE_EXISTING = 13
CERT_COMPARE_SIGNATURE_HASH = 14
CERT_COMPARE_KEY_IDENTIFIER = 15
CERT_COMPARE_CERT_ID = 16
CERT_COMPARE_CROSS_CERT_DIST_POINTS = 17
CERT_COMPARE_PUBKEY_MD5_HASH = 18
CERT_COMPARE_SUBJECT_INFO_ACCESS = 19
CERT_COMPARE_HASH_STR = 20
CERT_COMPARE_HAS_PRIVATE_KEY = 21
CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG = 2147483648
CERT_SET_PROPERTY_INHIBIT_PERSIST_FLAG = 1073741824
CTL_ENTRY_FROM_PROP_CHAIN_FLAG = 1
CRL_FIND_ANY = 0
CRL_FIND_ISSUED_BY = 1
CRL_FIND_EXISTING = 2
CRL_FIND_ISSUED_FOR = 3
CRL_FIND_ISSUED_BY_AKI_FLAG = 1
CRL_FIND_ISSUED_BY_SIGNATURE_FLAG = 2
CRL_FIND_ISSUED_BY_DELTA_FLAG = 4
CRL_FIND_ISSUED_BY_BASE_FLAG = 8
CRL_FIND_ISSUED_FOR_SET_STRONG_PROPERTIES_FLAG = 16
CERT_STORE_ADD_NEW = 1
CERT_STORE_ADD_USE_EXISTING = 2
CERT_STORE_ADD_REPLACE_EXISTING = 3
CERT_STORE_ADD_ALWAYS = 4
CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES = 5
CERT_STORE_ADD_NEWER = 6
CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES = 7
CERT_STORE_CERTIFICATE_CONTEXT = 1
CERT_STORE_CRL_CONTEXT = 2
CERT_STORE_CTL_CONTEXT = 3
CTL_ANY_SUBJECT_TYPE = 1
CTL_CERT_SUBJECT_TYPE = 2
CTL_FIND_NO_LIST_ID_CBDATA = 4294967295
CERT_STORE_CTRL_RESYNC = 1
CERT_STORE_CTRL_NOTIFY_CHANGE = 2
CERT_STORE_CTRL_COMMIT = 3
CERT_STORE_CTRL_AUTO_RESYNC = 4
CERT_STORE_CTRL_CANCEL_NOTIFY = 5
CERT_STORE_LOCALIZED_NAME_PROP_ID = 4096
CERT_CREATE_CONTEXT_NOCOPY_FLAG = 1
CERT_CREATE_CONTEXT_SORTED_FLAG = 2
CERT_CREATE_CONTEXT_NO_HCRYPTMSG_FLAG = 4
CERT_CREATE_CONTEXT_NO_ENTRY_FLAG = 8
CERT_PHYSICAL_STORE_ADD_ENABLE_FLAG = 1
CERT_PHYSICAL_STORE_OPEN_DISABLE_FLAG = 2
CERT_PHYSICAL_STORE_REMOTE_OPEN_DISABLE_FLAG = 4
CERT_PHYSICAL_STORE_INSERT_COMPUTER_NAME_ENABLE_FLAG = 8
CERT_PHYSICAL_STORE_PREDEFINED_ENUM_FLAG = 1
CMSG_TRUSTED_SIGNER_FLAG = 1
CMSG_SIGNER_ONLY_FLAG = 2
CMSG_USE_SIGNER_INDEX_FLAG = 4
CMSG_CMS_ENCAPSULATED_CTL_FLAG = 32768
CMSG_ENCODE_SORTED_CTL_FLAG = 1
CMSG_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG = 2
CERT_VERIFY_INHIBIT_CTL_UPDATE_FLAG = 1
CERT_VERIFY_TRUSTED_SIGNERS_FLAG = 2
CERT_VERIFY_NO_TIME_CHECK_FLAG = 4
CERT_VERIFY_ALLOW_MORE_USAGE_FLAG = 8
CERT_VERIFY_UPDATED_CTL_FLAG = 1
CERT_CONTEXT_REVOCATION_TYPE = 1
CERT_VERIFY_REV_CHAIN_FLAG = 1
CERT_VERIFY_CACHE_ONLY_BASED_REVOCATION = 2
CERT_VERIFY_REV_ACCUMULATIVE_TIMEOUT_FLAG = 4
CERT_VERIFY_REV_SERVER_OCSP_FLAG = 8
CERT_VERIFY_REV_NO_OCSP_FAILOVER_TO_CRL_FLAG = 16
CERT_VERIFY_REV_SERVER_OCSP_WIRE_ONLY_FLAG = 32
CERT_UNICODE_IS_RDN_ATTRS_FLAG = 1
CERT_CASE_INSENSITIVE_IS_RDN_ATTRS_FLAG = 2
CRYPT_VERIFY_CERT_SIGN_SUBJECT_BLOB = 1
CRYPT_VERIFY_CERT_SIGN_SUBJECT_CERT = 2
CRYPT_VERIFY_CERT_SIGN_SUBJECT_CRL = 3
CRYPT_VERIFY_CERT_SIGN_SUBJECT_OCSP_BASIC_SIGNED_RESPONSE = 4
CRYPT_VERIFY_CERT_SIGN_ISSUER_PUBKEY = 1
CRYPT_VERIFY_CERT_SIGN_ISSUER_CERT = 2
CRYPT_VERIFY_CERT_SIGN_ISSUER_CHAIN = 3
CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL = 4
CRYPT_VERIFY_CERT_SIGN_CHECK_WEAK_HASH_FLAG = 8
CRYPT_ACQUIRE_WINDOW_HANDLE_FLAG = 128
CRYPT_ACQUIRE_NCRYPT_KEY_FLAGS_MASK = 458752
CRYPT_ACQUIRE_ALLOW_NCRYPT_KEY_FLAG = 65536
CRYPT_ACQUIRE_PREFER_NCRYPT_KEY_FLAG = 131072
CRYPT_ACQUIRE_ONLY_NCRYPT_KEY_FLAG = 262144
CRYPT_DELETE_KEYSET = 16
CERT_XML_NAME_STR = 4
CERT_NAME_STR_SEMICOLON_FLAG = 1073741824
CERT_NAME_STR_NO_PLUS_FLAG = 536870912
CERT_NAME_STR_NO_QUOTING_FLAG = 268435456
CERT_NAME_STR_CRLF_FLAG = 134217728
CERT_NAME_STR_COMMA_FLAG = 67108864
CERT_NAME_STR_REVERSE_FLAG = 33554432
CERT_NAME_STR_FORWARD_FLAG = 16777216
CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG = 65536
CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG = 131072
CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG = 262144
CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG = 524288
CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG = 1048576
CERT_NAME_STR_ENABLE_PUNYCODE_FLAG = 2097152
CERT_NAME_EMAIL_TYPE = 1
CERT_NAME_RDN_TYPE = 2
CERT_NAME_ATTR_TYPE = 3
CERT_NAME_SIMPLE_DISPLAY_TYPE = 4
CERT_NAME_FRIENDLY_DISPLAY_TYPE = 5
CERT_NAME_DNS_TYPE = 6
CERT_NAME_URL_TYPE = 7
CERT_NAME_UPN_TYPE = 8
CERT_NAME_ISSUER_FLAG = 1
CERT_NAME_DISABLE_IE4_UTF8_FLAG = 65536
CERT_NAME_SEARCH_ALL_NAMES_FLAG = 2
CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG = 1
CRYPT_MESSAGE_ENCAPSULATED_CONTENT_OUT_FLAG = 2
CRYPT_MESSAGE_KEYID_SIGNER_FLAG = 4
CRYPT_MESSAGE_SILENT_KEYSET_FLAG = 64
CRYPT_MESSAGE_KEYID_RECIPIENT_FLAG = 4
CRYPT_RETRIEVE_MULTIPLE_OBJECTS = 1
CRYPT_CACHE_ONLY_RETRIEVAL = 2
CRYPT_WIRE_ONLY_RETRIEVAL = 4
CRYPT_DONT_CACHE_RESULT = 8
CRYPT_ASYNC_RETRIEVAL = 16
CRYPT_STICKY_CACHE_RETRIEVAL = 4096
CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL = 8192
CRYPT_OFFLINE_CHECK_RETRIEVAL = 16384
CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE = 32768
CRYPT_LDAP_SIGN_RETRIEVAL = 65536
CRYPT_NO_AUTH_RETRIEVAL = 131072
CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL = 262144
CRYPT_AIA_RETRIEVAL = 524288
CRYPT_HTTP_POST_RETRIEVAL = 1048576
CRYPT_PROXY_CACHE_RETRIEVAL = 2097152
CRYPT_NOT_MODIFIED_RETRIEVAL = 4194304
CRYPT_ENABLE_SSL_REVOCATION_RETRIEVAL = 8388608
CRYPT_RANDOM_QUERY_STRING_RETRIEVAL = 67108864
CRYPT_ENABLE_FILE_RETRIEVAL = 134217728
CRYPT_CREATE_NEW_FLUSH_ENTRY = 268435456
CRYPT_VERIFY_CONTEXT_SIGNATURE = 32
CRYPT_VERIFY_DATA_HASH = 64
CRYPT_KEEP_TIME_VALID = 128
CRYPT_DONT_VERIFY_SIGNATURE = 256
CRYPT_DONT_CHECK_TIME_VALIDITY = 512
CRYPT_CHECK_FRESHNESS_TIME_VALIDITY = 1024
CRYPT_ACCUMULATIVE_TIMEOUT = 2048
CRYPT_OCSP_ONLY_RETRIEVAL = 16777216
CRYPT_NO_OCSP_FAILOVER_TO_CRL_RETRIEVAL = 33554432
CRYPTNET_URL_CACHE_PRE_FETCH_NONE = 0
CRYPTNET_URL_CACHE_PRE_FETCH_BLOB = 1
CRYPTNET_URL_CACHE_PRE_FETCH_CRL = 2
CRYPTNET_URL_CACHE_PRE_FETCH_OCSP = 3
CRYPTNET_URL_CACHE_PRE_FETCH_AUTOROOT_CAB = 5
CRYPTNET_URL_CACHE_PRE_FETCH_DISALLOWED_CERT_CAB = 6
CRYPTNET_URL_CACHE_PRE_FETCH_PIN_RULES_CAB = 7
CRYPTNET_URL_CACHE_DEFAULT_FLUSH = 0
CRYPTNET_URL_CACHE_DISABLE_FLUSH = 4294967295
CRYPTNET_URL_CACHE_RESPONSE_NONE = 0
CRYPTNET_URL_CACHE_RESPONSE_HTTP = 1
CRYPTNET_URL_CACHE_RESPONSE_VALIDATED = 32768
CRYPT_RETRIEVE_MAX_ERROR_CONTENT_LENGTH = 4096
CRYPT_KEYID_MACHINE_FLAG = 32
CRYPT_KEYID_ALLOC_FLAG = 32768
CRYPT_KEYID_DELETE_FLAG = 16
CRYPT_KEYID_SET_NEW_FLAG = 8192
CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_DEFAULT = 5
CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_DEFAULT = 3
CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_DEFAULT = 100000
CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_DEFAULT = 10
CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DEFAULT = 5
CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DISABLE = 4294967295
CERT_CHAIN_ENABLE_MD2_MD4_FLAG = 1
CERT_CHAIN_ENABLE_WEAK_RSA_ROOT_FLAG = 2
CERT_CHAIN_ENABLE_WEAK_LOGGING_FLAG = 4
CERT_CHAIN_ENABLE_ONLY_WEAK_LOGGING_FLAG = 8
CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DEFAULT = 1023
CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DISABLE = 4294967295
CERT_CHAIN_MIN_PUB_KEY_BIT_LENGTH_DISABLE = 4294967295
CERT_CHAIN_ENABLE_WEAK_SETTINGS_FLAG = 2147483648
CERT_CHAIN_DISABLE_ECC_PARA_FLAG = 16
CERT_CHAIN_DISABLE_ALL_EKU_WEAK_FLAG = 65536
CERT_CHAIN_ENABLE_ALL_EKU_HYGIENE_FLAG = 131072
CERT_CHAIN_DISABLE_OPT_IN_SERVER_AUTH_WEAK_FLAG = 262144
CERT_CHAIN_DISABLE_SERVER_AUTH_WEAK_FLAG = 1048576
CERT_CHAIN_ENABLE_SERVER_AUTH_HYGIENE_FLAG = 2097152
CERT_CHAIN_DISABLE_CODE_SIGNING_WEAK_FLAG = 4194304
CERT_CHAIN_DISABLE_MOTW_CODE_SIGNING_WEAK_FLAG = 8388608
CERT_CHAIN_ENABLE_CODE_SIGNING_HYGIENE_FLAG = 16777216
CERT_CHAIN_ENABLE_MOTW_CODE_SIGNING_HYGIENE_FLAG = 33554432
CERT_CHAIN_DISABLE_TIMESTAMP_WEAK_FLAG = 67108864
CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_WEAK_FLAG = 134217728
CERT_CHAIN_ENABLE_TIMESTAMP_HYGIENE_FLAG = 268435456
CERT_CHAIN_ENABLE_MOTW_TIMESTAMP_HYGIENE_FLAG = 536870912
CERT_CHAIN_MOTW_IGNORE_AFTER_TIME_WEAK_FLAG = 1073741824
CERT_CHAIN_DISABLE_FILE_HASH_WEAK_FLAG = 4096
CERT_CHAIN_DISABLE_MOTW_FILE_HASH_WEAK_FLAG = 8192
CERT_CHAIN_DISABLE_TIMESTAMP_HASH_WEAK_FLAG = 16384
CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_HASH_WEAK_FLAG = 32768
CERT_CHAIN_OPT_IN_WEAK_FLAGS = 262144
CERT_CHAIN_AUTO_CURRENT_USER = 1
CERT_CHAIN_AUTO_LOCAL_MACHINE = 2
CERT_CHAIN_AUTO_IMPERSONATED = 3
CERT_CHAIN_AUTO_PROCESS_INFO = 4
CERT_CHAIN_AUTO_PINRULE_INFO = 5
CERT_CHAIN_AUTO_NETWORK_INFO = 6
CERT_CHAIN_AUTO_SERIAL_LOCAL_MACHINE = 7
CERT_CHAIN_AUTO_HPKP_RULE_INFO = 8
CERT_CHAIN_AUTO_FLUSH_DISABLE_FLAG = 1
CERT_CHAIN_AUTO_LOG_CREATE_FLAG = 2
CERT_CHAIN_AUTO_LOG_FREE_FLAG = 4
CERT_CHAIN_AUTO_LOG_FLUSH_FLAG = 8
CERT_SRV_OCSP_RESP_MIN_SYNC_CERT_FILE_SECONDS_DEFAULT = 5
CRYPTNET_MAX_CACHED_OCSP_PER_CRL_COUNT_DEFAULT = 500
CRYPTNET_OCSP_AFTER_CRL_DISABLE = 4294967295
CRYPTNET_PRE_FETCH_AFTER_PUBLISH_PRE_FETCH_DIVISOR_DEFAULT = 10
CRYPTNET_PRE_FETCH_BEFORE_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT = 20
CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT = 10
CRYPTNET_PRE_FETCH_TRIGGER_DISABLE = 4294967295
CRYPTNET_PRE_FETCH_SCAN_AFTER_TRIGGER_DELAY_SECONDS_DEFAULT = 60
CRYPTNET_CACHED_OCSP_SWITCH_TO_CRL_COUNT_DEFAULT = 50
CRYPTNET_CRL_BEFORE_OCSP_ENABLE = 4294967295
CERT_CHAIN_OPTION_DISABLE_AIA_URL_RETRIEVAL = 2
CERT_CHAIN_OPTION_ENABLE_SIA_URL_RETRIEVAL = 4
CERT_CHAIN_CRL_VALIDITY_EXT_PERIOD_HOURS_DEFAULT = 12
CERT_CHAIN_CACHE_END_CERT = 1
CERT_CHAIN_THREAD_STORE_SYNC = 2
CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL = 4
CERT_CHAIN_USE_LOCAL_MACHINE_STORE = 8
CERT_CHAIN_ENABLE_CACHE_AUTO_UPDATE = 16
CERT_CHAIN_ENABLE_SHARE_STORE = 32
CERT_CHAIN_EXCLUSIVE_ENABLE_CA_FLAG = 1
CERT_TRUST_NO_ERROR = 0
CERT_TRUST_IS_NOT_TIME_VALID = 1
CERT_TRUST_IS_NOT_TIME_NESTED = 2
CERT_TRUST_IS_REVOKED = 4
CERT_TRUST_IS_NOT_SIGNATURE_VALID = 8
CERT_TRUST_IS_NOT_VALID_FOR_USAGE = 16
CERT_TRUST_IS_UNTRUSTED_ROOT = 32
CERT_TRUST_REVOCATION_STATUS_UNKNOWN = 64
CERT_TRUST_IS_CYCLIC = 128
CERT_TRUST_INVALID_EXTENSION = 256
CERT_TRUST_INVALID_POLICY_CONSTRAINTS = 512
CERT_TRUST_INVALID_BASIC_CONSTRAINTS = 1024
CERT_TRUST_INVALID_NAME_CONSTRAINTS = 2048
CERT_TRUST_HAS_NOT_SUPPORTED_NAME_CONSTRAINT = 4096
CERT_TRUST_HAS_NOT_DEFINED_NAME_CONSTRAINT = 8192
CERT_TRUST_HAS_NOT_PERMITTED_NAME_CONSTRAINT = 16384
CERT_TRUST_HAS_EXCLUDED_NAME_CONSTRAINT = 32768
CERT_TRUST_IS_OFFLINE_REVOCATION = 16777216
CERT_TRUST_NO_ISSUANCE_CHAIN_POLICY = 33554432
CERT_TRUST_IS_EXPLICIT_DISTRUST = 67108864
CERT_TRUST_HAS_NOT_SUPPORTED_CRITICAL_EXT = 134217728
CERT_TRUST_HAS_WEAK_SIGNATURE = 1048576
CERT_TRUST_HAS_WEAK_HYGIENE = 2097152
CERT_TRUST_IS_PARTIAL_CHAIN = 65536
CERT_TRUST_CTL_IS_NOT_TIME_VALID = 131072
CERT_TRUST_CTL_IS_NOT_SIGNATURE_VALID = 262144
CERT_TRUST_CTL_IS_NOT_VALID_FOR_USAGE = 524288
CERT_TRUST_HAS_EXACT_MATCH_ISSUER = 1
CERT_TRUST_HAS_KEY_MATCH_ISSUER = 2
CERT_TRUST_HAS_NAME_MATCH_ISSUER = 4
CERT_TRUST_IS_SELF_SIGNED = 8
CERT_TRUST_AUTO_UPDATE_CA_REVOCATION = 16
CERT_TRUST_AUTO_UPDATE_END_REVOCATION = 32
CERT_TRUST_NO_OCSP_FAILOVER_TO_CRL = 64
CERT_TRUST_IS_KEY_ROLLOVER = 128
CERT_TRUST_SSL_HANDSHAKE_OCSP = 262144
CERT_TRUST_SSL_TIME_VALID_OCSP = 524288
CERT_TRUST_SSL_RECONNECT_OCSP = 1048576
CERT_TRUST_HAS_PREFERRED_ISSUER = 256
CERT_TRUST_HAS_ISSUANCE_CHAIN_POLICY = 512
CERT_TRUST_HAS_VALID_NAME_CONSTRAINTS = 1024
CERT_TRUST_IS_PEER_TRUSTED = 2048
CERT_TRUST_HAS_CRL_VALIDITY_EXTENDED = 4096
CERT_TRUST_IS_FROM_EXCLUSIVE_TRUST_STORE = 8192
CERT_TRUST_IS_CA_TRUSTED = 16384
CERT_TRUST_HAS_AUTO_UPDATE_WEAK_SIGNATURE = 32768
CERT_TRUST_HAS_ALLOW_WEAK_SIGNATURE = 131072
CERT_TRUST_IS_COMPLEX_CHAIN = 65536
CERT_TRUST_SSL_TIME_VALID = 16777216
CERT_TRUST_NO_TIME_CHECK = 33554432
USAGE_MATCH_TYPE_AND = 0
USAGE_MATCH_TYPE_OR = 1
CERT_CHAIN_STRONG_SIGN_DISABLE_END_CHECK_FLAG = 1
CERT_CHAIN_REVOCATION_CHECK_END_CERT = 268435456
CERT_CHAIN_REVOCATION_CHECK_CHAIN = 536870912
CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 1073741824
CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY = 2147483648
CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT = 134217728
CERT_CHAIN_REVOCATION_CHECK_OCSP_CERT = 67108864
CERT_CHAIN_DISABLE_PASS1_QUALITY_FILTERING = 64
CERT_CHAIN_RETURN_LOWER_QUALITY_CONTEXTS = 128
CERT_CHAIN_DISABLE_AUTH_ROOT_AUTO_UPDATE = 256
CERT_CHAIN_TIMESTAMP_TIME = 512
CERT_CHAIN_ENABLE_PEER_TRUST = 1024
CERT_CHAIN_DISABLE_MY_PEER_TRUST = 2048
CERT_CHAIN_DISABLE_MD2_MD4 = 4096
CERT_CHAIN_DISABLE_AIA = 8192
CERT_CHAIN_HAS_MOTW = 16384
CERT_CHAIN_ONLY_ADDITIONAL_AND_AUTH_ROOT = 32768
CERT_CHAIN_OPT_IN_WEAK_SIGNATURE = 65536
CERT_CHAIN_FIND_BY_ISSUER = 1
CERT_CHAIN_POLICY_IGNORE_WEAK_SIGNATURE_FLAG = 134217728
BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_CA_FLAG = 2147483648
BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_END_ENTITY_FLAG = 1073741824
MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG = 65536
MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG = 131072
MICROSOFT_ROOT_CERT_CHAIN_POLICY_DISABLE_FLIGHT_ROOT_FLAG = 262144
SSL_F12_ERROR_TEXT_LENGTH = 256
CERT_CHAIN_POLICY_SSL_F12_SUCCESS_LEVEL = 0
CERT_CHAIN_POLICY_SSL_F12_WARNING_LEVEL = 1
CERT_CHAIN_POLICY_SSL_F12_ERROR_LEVEL = 2
CERT_CHAIN_POLICY_SSL_F12_NONE_CATEGORY = 0
CERT_CHAIN_POLICY_SSL_F12_WEAK_CRYPTO_CATEGORY = 1
CERT_CHAIN_POLICY_SSL_F12_ROOT_PROGRAM_CATEGORY = 2
SSL_HPKP_PKP_HEADER_INDEX = 0
SSL_HPKP_PKP_RO_HEADER_INDEX = 1
SSL_HPKP_HEADER_COUNT = 2
SSL_KEY_PIN_ERROR_TEXT_LENGTH = 512
CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_ERROR = -2
CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_ERROR = -1
CERT_CHAIN_POLICY_SSL_KEY_PIN_SUCCESS = 0
CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_WARNING = 1
CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_WARNING = 2
CRYPT_STRING_BASE64URI = 13
CRYPT_STRING_ENCODEMASK = 255
CRYPT_STRING_RESERVED100 = 256
CRYPT_STRING_RESERVED200 = 512
CRYPT_STRING_PERCENTESCAPE = 134217728
CRYPT_STRING_HASHDATA = 268435456
CRYPT_STRING_NOCRLF = 1073741824
CRYPT_STRING_NOCR = 2147483648
PKCS12_IMPORT_SILENT = 64
PKCS12_ONLY_CERTIFICATES = 1024
PKCS12_ONLY_NOT_ENCRYPTED_CERTIFICATES = 2048
PKCS12_VIRTUAL_ISOLATION_KEY = 65536
PKCS12_IMPORT_RESERVED_MASK = 4294901760
PKCS12_ONLY_CERTIFICATES_PROVIDER_TYPE = 0
REPORT_NO_PRIVATE_KEY = 1
REPORT_NOT_ABLE_TO_EXPORT_PRIVATE_KEY = 2
EXPORT_PRIVATE_KEYS = 4
PKCS12_PROTECT_TO_DOMAIN_SIDS = 32
PKCS12_EXPORT_SILENT = 64
PKCS12_EXPORT_PBES2_PARAMS = 128
PKCS12_DISABLE_ENCRYPT_CERTIFICATES = 256
PKCS12_ENCRYPT_CERTIFICATES = 512
PKCS12_EXPORT_ECC_CURVE_PARAMETERS = 4096
PKCS12_EXPORT_ECC_CURVE_OID = 8192
PKCS12_EXPORT_RESERVED_MASK = 4294901760
CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_READ_FLAG = 1
CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_WRITE_FLAG = 2
CERT_SERVER_OCSP_RESPONSE_ASYNC_FLAG = 1
CERT_SELECT_MAX_PARA = 500
CERT_SELECT_BY_ISSUER_DISPLAYNAME = 12
CERT_SELECT_BY_FRIENDLYNAME = 13
CERT_SELECT_BY_THUMBPRINT = 14
CERT_SELECT_ALLOW_EXPIRED = 1
CERT_SELECT_TRUSTED_ROOT = 2
CERT_SELECT_DISALLOW_SELFSIGNED = 4
CERT_SELECT_HAS_PRIVATE_KEY = 8
CERT_SELECT_HAS_KEY_FOR_SIGNATURE = 16
CERT_SELECT_HAS_KEY_FOR_KEY_EXCHANGE = 32
CERT_SELECT_HARDWARE_ONLY = 64
CERT_SELECT_ALLOW_DUPLICATES = 128
CERT_SELECT_IGNORE_AUTOSELECT = 256
TIMESTAMP_FAILURE_BAD_ALG = 0
TIMESTAMP_FAILURE_BAD_REQUEST = 2
TIMESTAMP_FAILURE_BAD_FORMAT = 5
TIMESTAMP_FAILURE_TIME_NOT_AVAILABLE = 14
TIMESTAMP_FAILURE_POLICY_NOT_SUPPORTED = 15
TIMESTAMP_FAILURE_EXTENSION_NOT_SUPPORTED = 16
TIMESTAMP_FAILURE_INFO_NOT_AVAILABLE = 17
TIMESTAMP_FAILURE_SYSTEM_FAILURE = 25
TIMESTAMP_DONT_HASH_DATA = 1
TIMESTAMP_VERIFY_CONTEXT_SIGNATURE = 32
TIMESTAMP_NO_AUTH_RETRIEVAL = 131072
CRYPT_OBJECT_LOCATOR_SPN_NAME_TYPE = 1
CRYPT_OBJECT_LOCATOR_LAST_RESERVED_NAME_TYPE = 32
CRYPT_OBJECT_LOCATOR_FIRST_RESERVED_USER_NAME_TYPE = 33
CRYPT_OBJECT_LOCATOR_LAST_RESERVED_USER_NAME_TYPE = 65535
CERT_FILE_HASH_USE_TYPE = 1
CERT_TIMESTAMP_HASH_USE_TYPE = 2
RECIPIENTPOLICYV1 = 1
RECIPIENTPOLICYV2 = 2
E_ICARD_COMMUNICATION = -1073413888
E_ICARD_DATA_ACCESS = -1073413887
E_ICARD_EXPORT = -1073413886
E_ICARD_IDENTITY = -1073413885
E_ICARD_IMPORT = -1073413884
E_ICARD_ARGUMENT = -1073413883
E_ICARD_REQUEST = -1073413882
E_ICARD_INFORMATIONCARD = -1073413881
E_ICARD_STOREKEY = -1073413880
E_ICARD_LOGOVALIDATION = -1073413879
E_ICARD_PASSWORDVALIDATION = -1073413878
E_ICARD_POLICY = -1073413877
E_ICARD_PROCESSDIED = -1073413876
E_ICARD_SERVICEBUSY = -1073413875
E_ICARD_SERVICE = -1073413874
E_ICARD_SHUTTINGDOWN = -1073413873
E_ICARD_TOKENCREATION = -1073413872
E_ICARD_TRUSTEXCHANGE = -1073413871
E_ICARD_UNTRUSTED = -1073413870
E_ICARD_USERCANCELLED = -1073413869
E_ICARD_STORE_IMPORT = -1073413868
E_ICARD_FAIL = -1073413867
E_ICARD_UI_INITIALIZATION = -1073413862
E_ICARD_REFRESH_REQUIRED = -1073413760
E_ICARD_MISSING_APPLIESTO = -1073413759
E_ICARD_INVALID_PROOF_KEY = -1073413758
E_ICARD_UNKNOWN_REFERENCE = -1073413757
E_ICARD_FAILED_REQUIRED_CLAIMS = -1073413756
AUDIT_CARD_WRITTEN = 1074070016
AUDIT_CARD_DELETE = 1074070017
AUDIT_CARD_IMPORT = 1074070018
AUDIT_STORE_IMPORT = 1074070019
AUDIT_STORE_EXPORT = 1074070020
AUDIT_STORE_DELETE = 1074070021
AUDIT_SERVICE_IDLE_STOP = 1074070022
BCRYPT_OPERATION = UInt32
BCRYPT_CIPHER_OPERATION = 1
BCRYPT_HASH_OPERATION = 2
BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = 4
BCRYPT_SECRET_AGREEMENT_OPERATION = 8
BCRYPT_SIGNATURE_OPERATION = 16
BCRYPT_RNG_OPERATION = 32
NCRYPT_OPERATION = UInt32
NCRYPT_CIPHER_OPERATION = 1
NCRYPT_HASH_OPERATION = 2
NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = 4
NCRYPT_SECRET_AGREEMENT_OPERATION = 8
NCRYPT_SIGNATURE_OPERATION = 16
CERT_FIND_FLAGS = UInt32
CERT_FIND_ANY = 0
CERT_FIND_CERT_ID = 1048576
CERT_FIND_CTL_USAGE = 655360
CERT_FIND_ENHKEY_USAGE = 655360
CERT_FIND_EXISTING = 851968
CERT_FIND_HASH = 65536
CERT_FIND_HAS_PRIVATE_KEY = 1376256
CERT_FIND_ISSUER_ATTR = 196612
CERT_FIND_ISSUER_NAME = 131076
CERT_FIND_ISSUER_OF = 786432
CERT_FIND_ISSUER_STR = 524292
CERT_FIND_KEY_IDENTIFIER = 983040
CERT_FIND_KEY_SPEC = 589824
CERT_FIND_MD5_HASH = 262144
CERT_FIND_PROPERTY = 327680
CERT_FIND_PUBLIC_KEY = 393216
CERT_FIND_SHA1_HASH = 65536
CERT_FIND_SIGNATURE_HASH = 917504
CERT_FIND_SUBJECT_ATTR = 196615
CERT_FIND_SUBJECT_CERT = 720896
CERT_FIND_SUBJECT_NAME = 131079
CERT_FIND_SUBJECT_STR = 524295
CERT_FIND_CROSS_CERT_DIST_POINTS = 1114112
CERT_FIND_PUBKEY_MD5_HASH = 1179648
CERT_FIND_SUBJECT_STR_A = 458759
CERT_FIND_SUBJECT_STR_W = 524295
CERT_FIND_ISSUER_STR_A = 458756
CERT_FIND_ISSUER_STR_W = 524292
CERT_FIND_SUBJECT_INFO_ACCESS = 1245184
CERT_FIND_HASH_STR = 1310720
CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG = 1
CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG = 2
CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG = 4
CERT_FIND_NO_ENHKEY_USAGE_FLAG = 8
CERT_FIND_OR_ENHKEY_USAGE_FLAG = 16
CERT_FIND_VALID_ENHKEY_USAGE_FLAG = 32
CERT_FIND_OPTIONAL_CTL_USAGE_FLAG = 1
CERT_FIND_EXT_ONLY_CTL_USAGE_FLAG = 2
CERT_FIND_PROP_ONLY_CTL_USAGE_FLAG = 4
CERT_FIND_NO_CTL_USAGE_FLAG = 8
CERT_FIND_OR_CTL_USAGE_FLAG = 16
CERT_FIND_VALID_CTL_USAGE_FLAG = 32
CERT_QUERY_OBJECT_TYPE = UInt32
CERT_QUERY_OBJECT_FILE = 1
CERT_QUERY_OBJECT_BLOB = 2
CERT_QUERY_CONTENT_TYPE = UInt32
CERT_QUERY_CONTENT_CERT = 1
CERT_QUERY_CONTENT_CTL = 2
CERT_QUERY_CONTENT_CRL = 3
CERT_QUERY_CONTENT_SERIALIZED_STORE = 4
CERT_QUERY_CONTENT_SERIALIZED_CERT = 5
CERT_QUERY_CONTENT_SERIALIZED_CTL = 6
CERT_QUERY_CONTENT_SERIALIZED_CRL = 7
CERT_QUERY_CONTENT_PKCS7_SIGNED = 8
CERT_QUERY_CONTENT_PKCS7_UNSIGNED = 9
CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED = 10
CERT_QUERY_CONTENT_PKCS10 = 11
CERT_QUERY_CONTENT_PFX = 12
CERT_QUERY_CONTENT_CERT_PAIR = 13
CERT_QUERY_CONTENT_PFX_AND_LOAD = 14
CERT_QUERY_CONTENT_TYPE_FLAGS = UInt32
CERT_QUERY_CONTENT_FLAG_CERT = 2
CERT_QUERY_CONTENT_FLAG_CTL = 4
CERT_QUERY_CONTENT_FLAG_CRL = 8
CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE = 16
CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT = 32
CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL = 64
CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL = 128
CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED = 256
CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED = 512
CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED = 1024
CERT_QUERY_CONTENT_FLAG_PKCS10 = 2048
CERT_QUERY_CONTENT_FLAG_PFX = 4096
CERT_QUERY_CONTENT_FLAG_CERT_PAIR = 8192
CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD = 16384
CERT_QUERY_CONTENT_FLAG_ALL = 16382
CERT_QUERY_CONTENT_FLAG_ALL_ISSUER_CERT = 818
CERT_QUERY_FORMAT_TYPE = UInt32
CERT_QUERY_FORMAT_BINARY = 1
CERT_QUERY_FORMAT_BASE64_ENCODED = 2
CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED = 3
CERT_QUERY_FORMAT_TYPE_FLAGS = UInt32
CERT_QUERY_FORMAT_FLAG_BINARY = 2
CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED = 4
CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED = 8
CERT_QUERY_FORMAT_FLAG_ALL = 14
CERT_QUERY_ENCODING_TYPE = UInt32
X509_ASN_ENCODING = 1
PKCS_7_ASN_ENCODING = 65536
CERT_RDN_ATTR_VALUE_TYPE = UInt32
CERT_RDN_ANY_TYPE = 0
CERT_RDN_NUMERIC_STRING = 3
CERT_RDN_PRINTABLE_STRING = 4
CERT_RDN_T61_STRING = 5
CERT_RDN_VIDEOTEX_STRING = 6
CERT_RDN_IA5_STRING = 7
CERT_RDN_GRAPHIC_STRING = 8
CERT_RDN_ISO646_STRING = 9
CERT_RDN_GENERAL_STRING = 10
CERT_RDN_INT4_STRING = 11
CERT_RDN_UNICODE_STRING = 12
CERT_RDN_BMP_STRING = 12
CERT_RDN_ENCODED_BLOB = 1
CERT_RDN_OCTET_STRING = 2
CERT_RDN_TELETEX_STRING = 5
CERT_RDN_UNIVERSAL_STRING = 11
CERT_RDN_UTF8_STRING = 13
CERT_RDN_VISIBLE_STRING = 9
CERT_STRING_TYPE = UInt32
CERT_SIMPLE_NAME_STR = 1
CERT_OID_NAME_STR = 2
CERT_X500_NAME_STR = 3
BCRYPT_TABLE = UInt32
CRYPT_LOCAL = 1
CRYPT_DOMAIN = 2
CERT_KEY_SPEC = UInt32
AT_KEYEXCHANGE = 1
AT_SIGNATURE = 2
CERT_NCRYPT_KEY_SPEC = 4294967295
BCRYPT_INTERFACE = UInt32
BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = 3
BCRYPT_CIPHER_INTERFACE = 1
BCRYPT_HASH_INTERFACE = 2
BCRYPT_RNG_INTERFACE = 6
BCRYPT_SECRET_AGREEMENT_INTERFACE = 4
BCRYPT_SIGNATURE_INTERFACE = 5
NCRYPT_KEY_STORAGE_INTERFACE = 65537
NCRYPT_SCHANNEL_INTERFACE = 65538
NCRYPT_SCHANNEL_SIGNATURE_INTERFACE = 65539
NCRYPT_FLAGS = UInt32
BCRYPT_PAD_NONE = 1
BCRYPT_PAD_OAEP = 4
BCRYPT_PAD_PKCS1 = 2
BCRYPT_PAD_PSS = 8
NCRYPT_SILENT_FLAG = 64
NCRYPT_NO_PADDING_FLAG = 1
NCRYPT_PAD_OAEP_FLAG = 4
NCRYPT_PAD_PKCS1_FLAG = 2
NCRYPT_REGISTER_NOTIFY_FLAG = 1
NCRYPT_UNREGISTER_NOTIFY_FLAG = 2
NCRYPT_MACHINE_KEY_FLAG = 32
NCRYPT_UNPROTECT_NO_DECRYPT = 1
NCRYPT_OVERWRITE_KEY_FLAG = 128
NCRYPT_NO_KEY_VALIDATION = 8
NCRYPT_WRITE_KEY_TO_LEGACY_STORE_FLAG = 512
NCRYPT_PAD_PSS_FLAG = 8
NCRYPT_PERSIST_FLAG = 2147483648
NCRYPT_PERSIST_ONLY_FLAG = 1073741824
CRYPT_STRING = UInt32
CRYPT_STRING_BASE64HEADER = 0
CRYPT_STRING_BASE64 = 1
CRYPT_STRING_BINARY = 2
CRYPT_STRING_BASE64REQUESTHEADER = 3
CRYPT_STRING_HEX = 4
CRYPT_STRING_HEXASCII = 5
CRYPT_STRING_BASE64X509CRLHEADER = 9
CRYPT_STRING_HEXADDR = 10
CRYPT_STRING_HEXASCIIADDR = 11
CRYPT_STRING_HEXRAW = 12
CRYPT_STRING_STRICT = 536870912
CRYPT_STRING_BASE64_ANY = 6
CRYPT_STRING_ANY = 7
CRYPT_STRING_HEX_ANY = 8
CRYPT_IMPORT_PUBLIC_KEY_FLAGS = UInt32
CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG = 2147483648
CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG = 1073741824
CRYPT_XML_FLAGS = UInt32
CRYPT_XML_FLAG_DISABLE_EXTENSIONS = 268435456
CRYPT_XML_FLAG_NO_SERIALIZE = 2147483648
CRYPT_XML_SIGN_ADD_KEYVALUE = 1
CRYPT_ENCODE_OBJECT_FLAGS = UInt32
CRYPT_ENCODE_ALLOC_FLAG = 32768
CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG = 131072
CRYPT_UNICODE_NAME_ENCODE_DISABLE_CHECK_TYPE_FLAG = 1073741824
CRYPT_UNICODE_NAME_ENCODE_ENABLE_T61_UNICODE_FLAG = 2147483648
CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG = 536870912
CRYPT_OBJECT_LOCATOR_RELEASE_REASON = UInt32
CRYPT_OBJECT_LOCATOR_RELEASE_SYSTEM_SHUTDOWN = 1
CRYPT_OBJECT_LOCATOR_RELEASE_SERVICE_STOP = 2
CRYPT_OBJECT_LOCATOR_RELEASE_PROCESS_EXIT = 3
CRYPT_OBJECT_LOCATOR_RELEASE_DLL_UNLOAD = 4
CRYPT_ACQUIRE_FLAGS = UInt32
CRYPT_ACQUIRE_CACHE_FLAG = 1
CRYPT_ACQUIRE_COMPARE_KEY_FLAG = 4
CRYPT_ACQUIRE_NO_HEALING = 8
CRYPT_ACQUIRE_SILENT_FLAG = 64
CRYPT_ACQUIRE_USE_PROV_INFO_FLAG = 2
CRYPT_GET_URL_FLAGS = UInt32
CRYPT_GET_URL_FROM_PROPERTY = 1
CRYPT_GET_URL_FROM_EXTENSION = 2
CRYPT_GET_URL_FROM_UNAUTH_ATTRIBUTE = 4
CRYPT_GET_URL_FROM_AUTH_ATTRIBUTE = 8
CERT_STORE_SAVE_AS = UInt32
CERT_STORE_SAVE_AS_PKCS7 = 2
CERT_STORE_SAVE_AS_STORE = 1
BCRYPT_QUERY_PROVIDER_MODE = UInt32
CRYPT_ANY = 4
CRYPT_UM = 1
CRYPT_KM = 2
CRYPT_MM = 3
CERT_FIND_CHAIN_IN_STORE_FLAGS = UInt32
CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG = 1
CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG = 2
CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG = 32768
CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG = 4
CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG = 8
CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG = 16384
CERT_CONTROL_STORE_FLAGS = UInt32
CERT_STORE_CTRL_COMMIT_FORCE_FLAG = 1
CERT_STORE_CTRL_COMMIT_CLEAR_FLAG = 2
CERT_STORE_CTRL_INHIBIT_DUPLICATE_HANDLE_FLAG = 1
BCRYPT_OPEN_ALGORITHM_PROVIDER_FLAGS = UInt32
BCRYPT_ALG_HANDLE_HMAC_FLAG = 8
BCRYPT_PROV_DISPATCH = 1
BCRYPT_HASH_REUSABLE_FLAG = 32
CERT_STORE_SAVE_TO = UInt32
CERT_STORE_SAVE_TO_FILE = 1
CERT_STORE_SAVE_TO_FILENAME = 4
CERT_STORE_SAVE_TO_FILENAME_A = 3
CERT_STORE_SAVE_TO_FILENAME_W = 4
CERT_STORE_SAVE_TO_MEMORY = 2
CRYPT_SET_PROV_PARAM_ID = UInt32
PP_CLIENT_HWND = 1
PP_DELETEKEY = 24
PP_KEYEXCHANGE_ALG = 14
PP_KEYEXCHANGE_PIN = 32
PP_KEYEXCHANGE_KEYSIZE = 12
PP_KEYSET_SEC_DESCR = 8
PP_PIN_PROMPT_STRING = 44
PP_ROOT_CERTSTORE = 46
PP_SIGNATURE_ALG = 15
PP_SIGNATURE_PIN = 33
PP_SIGNATURE_KEYSIZE = 13
PP_UI_PROMPT = 21
PP_USE_HARDWARE_RNG = 38
PP_USER_CERTSTORE = 42
PP_SECURE_KEYEXCHANGE_PIN = 47
PP_SECURE_SIGNATURE_PIN = 48
PP_SMARTCARD_READER = 43
CRYPT_KEY_PARAM_ID = UInt32
KP_ALGID = 7
KP_CERTIFICATE = 26
KP_PERMISSIONS = 6
KP_SALT = 2
KP_SALT_EX = 10
KP_BLOCKLEN = 8
KP_GET_USE_COUNT = 42
KP_KEYLEN = 9
CRYPT_KEY_FLAGS = UInt32
CRYPT_EXPORTABLE = 1
CRYPT_USER_PROTECTED = 2
CRYPT_ARCHIVABLE = 16384
CRYPT_CREATE_IV = 512
CRYPT_CREATE_SALT = 4
CRYPT_DATA_KEY = 2048
CRYPT_FORCE_KEY_PROTECTION_HIGH = 32768
CRYPT_KEK = 1024
CRYPT_INITIATOR = 64
CRYPT_NO_SALT = 16
CRYPT_ONLINE = 128
CRYPT_PREGEN = 64
CRYPT_RECIPIENT = 16
CRYPT_SF = 256
CRYPT_SGCKEY = 8192
CRYPT_VOLATILE = 4096
CRYPT_MACHINE_KEYSET = 32
CRYPT_USER_KEYSET = 4096
PKCS12_PREFER_CNG_KSP = 256
PKCS12_ALWAYS_CNG_KSP = 512
PKCS12_ALLOW_OVERWRITE_KEY = 16384
PKCS12_NO_PERSIST_KEY = 32768
PKCS12_INCLUDE_EXTENDED_PROPERTIES = 16
CRYPT_OAEP = 64
CRYPT_BLOB_VER3 = 128
CRYPT_DESTROYKEY = 4
CRYPT_SSL2_FALLBACK = 2
CRYPT_Y_ONLY = 1
CRYPT_IPSEC_HMAC_KEY = 256
CERT_SET_KEY_PROV_HANDLE_PROP_ID = 1
CERT_SET_KEY_CONTEXT_PROP_ID = 1
CRYPT_MSG_TYPE = UInt32
CMSG_DATA = 1
CMSG_SIGNED = 2
CMSG_ENVELOPED = 3
CMSG_SIGNED_AND_ENVELOPED = 4
CMSG_HASHED = 5
CERT_OPEN_STORE_FLAGS = UInt32
CERT_STORE_BACKUP_RESTORE_FLAG = 2048
CERT_STORE_CREATE_NEW_FLAG = 8192
CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG = 4
CERT_STORE_DELETE_FLAG = 16
CERT_STORE_ENUM_ARCHIVED_FLAG = 512
CERT_STORE_MAXIMUM_ALLOWED_FLAG = 4096
CERT_STORE_NO_CRYPT_RELEASE_FLAG = 1
CERT_STORE_OPEN_EXISTING_FLAG = 16384
CERT_STORE_READONLY_FLAG = 32768
CERT_STORE_SET_LOCALIZED_NAME_FLAG = 2
CERT_STORE_SHARE_CONTEXT_FLAG = 128
CERT_STORE_UPDATE_KEYID_FLAG = 1024
CRYPT_DEFAULT_CONTEXT_FLAGS = UInt32
CRYPT_DEFAULT_CONTEXT_AUTO_RELEASE_FLAG = 1
CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG = 2
CRYPT_VERIFY_CERT_FLAGS = UInt32
CRYPT_VERIFY_CERT_SIGN_DISABLE_MD2_MD4_FLAG = 1
CRYPT_VERIFY_CERT_SIGN_SET_STRONG_PROPERTIES_FLAG = 2
CRYPT_VERIFY_CERT_SIGN_RETURN_STRONG_PROPERTIES_FLAG = 4
CRYPT_SET_HASH_PARAM = UInt32
HP_HMAC_INFO = 5
HP_HASHVAL = 2
CERT_SYSTEM_STORE_FLAGS = UInt32
CERT_SYSTEM_STORE_LOCATION_MASK = 16711680
CERT_SYSTEM_STORE_RELOCATE_FLAG = 2147483648
CERT_CREATE_SELFSIGN_FLAGS = UInt32
CERT_CREATE_SELFSIGN_NO_KEY_INFO = 2
CERT_CREATE_SELFSIGN_NO_SIGN = 1
CRYPT_DEFAULT_CONTEXT_TYPE = UInt32
CRYPT_DEFAULT_CONTEXT_CERT_SIGN_OID = 1
CRYPT_DEFAULT_CONTEXT_MULTI_CERT_SIGN_OID = 2
BCRYPT_RESOLVE_PROVIDERS_FLAGS = UInt32
CRYPT_ALL_FUNCTIONS = 1
CRYPT_ALL_PROVIDERS = 2
CERT_FIND_TYPE = UInt32
CTL_FIND_ANY = 0
CTL_FIND_SHA1_HASH = 1
CTL_FIND_MD5_HASH = 2
CTL_FIND_USAGE = 3
CTL_FIND_SAME_USAGE_FLAG = 1
CTL_FIND_EXISTING = 5
CTL_FIND_SUBJECT = 4
CRYPT_FIND_FLAGS = UInt32
CRYPT_FIND_USER_KEYSET_FLAG = 1
CRYPT_FIND_MACHINE_KEYSET_FLAG = 2
CRYPT_FIND_SILENT_KEYSET_FLAG = 64
CRYPT_IMAGE_REF_FLAGS = UInt32
CRYPT_MIN_DEPENDENCIES = 1
CRYPT_PROCESS_ISOLATE = 65536
CERT_REVOCATION_STATUS_REASON = UInt32
CRL_REASON_UNSPECIFIED = 0
CRL_REASON_KEY_COMPROMISE = 1
CRL_REASON_CA_COMPROMISE = 2
CRL_REASON_AFFILIATION_CHANGED = 3
CRL_REASON_SUPERSEDED = 4
CRL_REASON_CESSATION_OF_OPERATION = 5
CRL_REASON_CERTIFICATE_HOLD = 6
CRL_REASON_REMOVE_FROM_CRL = 8
CERT_ROOT_PROGRAM_FLAGS = UInt32
CERT_ROOT_PROGRAM_FLAG_LSC = 64
CERT_ROOT_PROGRAM_FLAG_ORG = 128
CERT_ROOT_PROGRAM_FLAG_SUBJECT_LOGO = 32
CRYPT_XML_KEY_VALUE_TYPE = UInt32
CRYPT_XML_KEY_VALUE_TYPE_DSA = 1
CRYPT_XML_KEY_VALUE_TYPE_RSA = 2
CRYPT_XML_KEY_VALUE_TYPE_ECDSA = 3
CRYPT_XML_KEY_VALUE_TYPE_CUSTOM = 4
CERT_LOGOTYPE_CHOICE = UInt32
CERT_LOGOTYPE_NO_IMAGE_RESOLUTION_CHOICE = 0
CERT_LOGOTYPE_BITS_IMAGE_RESOLUTION_CHOICE = 1
CERT_LOGOTYPE_TABLE_SIZE_IMAGE_RESOLUTION_CHOICE = 2
CMSG_KEY_AGREE_OPTION = UInt32
CMSG_KEY_AGREE_EPHEMERAL_KEY_CHOICE = 1
CMSG_KEY_AGREE_STATIC_KEY_CHOICE = 2
CERT_LOGOTYPE_OPTION = UInt32
CERT_LOGOTYPE_DIRECT_INFO_CHOICE = 1
CERT_LOGOTYPE_INDIRECT_INFO_CHOICE = 2
CERT_STORE_PROV_FLAGS = UInt32
CERT_STORE_PROV_EXTERNAL_FLAG = 1
CERT_STORE_PROV_DELETED_FLAG = 2
CERT_STORE_PROV_NO_PERSIST_FLAG = 4
CERT_STORE_PROV_SYSTEM_STORE_FLAG = 8
CERT_STORE_PROV_LM_SYSTEM_STORE_FLAG = 16
CMSG_KEY_AGREE_ORIGINATOR = UInt32
CMSG_KEY_AGREE_ORIGINATOR_CERT = 1
CMSG_KEY_AGREE_ORIGINATOR_PUBLIC_KEY = 2
CRYPT_CONTEXT_CONFIG_FLAGS = UInt32
CRYPT_EXCLUSIVE = 1
CRYPT_OVERRIDE = 65536
BCRYPT_DSA_MAGIC = UInt32
BCRYPT_DSA_PUBLIC_MAGIC = 1112560452
BCRYPT_DSA_PRIVATE_MAGIC = 1448104772
CRYPT_XML_X509DATA_TYPE = UInt32
CRYPT_XML_X509DATA_TYPE_ISSUER_SERIAL = 1
CRYPT_XML_X509DATA_TYPE_SKI = 2
CRYPT_XML_X509DATA_TYPE_SUBJECT_NAME = 3
CRYPT_XML_X509DATA_TYPE_CERTIFICATE = 4
CRYPT_XML_X509DATA_TYPE_CRL = 5
CRYPT_XML_X509DATA_TYPE_CUSTOM = 6
CERT_BIOMETRIC_DATA_TYPE = UInt32
CERT_BIOMETRIC_PREDEFINED_DATA_CHOICE = 1
CERT_BIOMETRIC_OID_DATA_CHOICE = 2
CERT_CHAIN_POLICY_FLAGS = UInt32
CERT_CHAIN_POLICY_IGNORE_NOT_TIME_VALID_FLAG = 1
CERT_CHAIN_POLICY_IGNORE_CTL_NOT_TIME_VALID_FLAG = 2
CERT_CHAIN_POLICY_IGNORE_NOT_TIME_NESTED_FLAG = 4
CERT_CHAIN_POLICY_IGNORE_ALL_NOT_TIME_VALID_FLAGS = 7
CERT_CHAIN_POLICY_IGNORE_INVALID_BASIC_CONSTRAINTS_FLAG = 8
CERT_CHAIN_POLICY_ALLOW_UNKNOWN_CA_FLAG = 16
CERT_CHAIN_POLICY_IGNORE_WRONG_USAGE_FLAG = 32
CERT_CHAIN_POLICY_IGNORE_INVALID_NAME_FLAG = 64
CERT_CHAIN_POLICY_IGNORE_INVALID_POLICY_FLAG = 128
CERT_CHAIN_POLICY_IGNORE_END_REV_UNKNOWN_FLAG = 256
CERT_CHAIN_POLICY_IGNORE_CTL_SIGNER_REV_UNKNOWN_FLAG = 512
CERT_CHAIN_POLICY_IGNORE_CA_REV_UNKNOWN_FLAG = 1024
CERT_CHAIN_POLICY_IGNORE_ROOT_REV_UNKNOWN_FLAG = 2048
CERT_CHAIN_POLICY_IGNORE_ALL_REV_UNKNOWN_FLAGS = 3840
CERT_CHAIN_POLICY_ALLOW_TESTROOT_FLAG = 32768
CERT_CHAIN_POLICY_TRUST_TESTROOT_FLAG = 16384
CERT_CHAIN_POLICY_IGNORE_NOT_SUPPORTED_CRITICAL_EXT_FLAG = 8192
CERT_CHAIN_POLICY_IGNORE_PEER_TRUST_FLAG = 4096
CERT_STRONG_SIGN_FLAGS = UInt32
CERT_STRONG_SIGN_ENABLE_CRL_CHECK = 1
CERT_STRONG_SIGN_ENABLE_OCSP_CHECK = 2
CERT_LOGOTYPE_IMAGE_INFO_TYPE = UInt32
CERT_LOGOTYPE_GRAY_SCALE_IMAGE_INFO_CHOICE = 1
CERT_LOGOTYPE_COLOR_IMAGE_INFO_CHOICE = 2
CRYPT_XML_STATUS_INFO_STATUS = UInt32
CRYPT_XML_STATUS_INTERNAL_REFERENCE = 1
CRYPT_XML_STATUS_KEY_AVAILABLE = 2
CRYPT_XML_STATUS_DIGESTING = 4
CRYPT_XML_STATUS_DIGEST_VALID = 8
CRYPT_XML_STATUS_SIGNATURE_VALID = 65536
CRYPT_XML_STATUS_OPENED_TO_ENCODE = 2147483648
CRYPT_XML_TRANSFORM_FLAGS = UInt32
CRYPT_XML_TRANSFORM_ON_STREAM = 1
CRYPT_XML_TRANSFORM_ON_NODESET = 2
CRYPT_XML_TRANSFORM_URI_QUERY_STRING = 3
CRYPT_XML_GROUP_ID = UInt32
CRYPT_XML_GROUP_ID_HASH_________ = 1
CRYPT_XML_GROUP_ID_SIGN_________ = 2
CERT_SELECT_CRITERIA_TYPE = UInt32
CERT_SELECT_BY_ENHKEY_USAGE = 1
CERT_SELECT_BY_KEY_USAGE = 2
CERT_SELECT_BY_POLICY_OID = 3
CERT_SELECT_BY_PROV_NAME = 4
CERT_SELECT_BY_EXTENSION = 5
CERT_SELECT_BY_SUBJECT_HOST_NAME = 6
CERT_SELECT_BY_ISSUER_ATTR = 7
CERT_SELECT_BY_SUBJECT_ATTR = 8
CERT_SELECT_BY_ISSUER_NAME = 9
CERT_SELECT_BY_PUBLIC_KEY = 10
CERT_SELECT_BY_TLS_SIGNATURES = 11
BCRYPT_RSAKEY_BLOB_MAGIC = UInt32
BCRYPT_RSAPUBLIC_MAGIC = 826364754
BCRYPT_RSAPRIVATE_MAGIC = 843141970
BCRYPT_RSAFULLPRIVATE_MAGIC = 859919186
CRYPT_XML_KEYINFO_TYPE = UInt32
CRYPT_XML_KEYINFO_TYPE_KEYNAME = 1
CRYPT_XML_KEYINFO_TYPE_KEYVALUE = 2
CRYPT_XML_KEYINFO_TYPE_RETRIEVAL = 3
CRYPT_XML_KEYINFO_TYPE_X509DATA = 4
CRYPT_XML_KEYINFO_TYPE_CUSTOM = 5
CRYPT_TIMESTAMP_VERSION = UInt32
TIMESTAMP_VERSION = 1
CERT_ID_OPTION = UInt32
CERT_ID_ISSUER_SERIAL_NUMBER = 1
CERT_ID_KEY_IDENTIFIER = 2
CERT_ID_SHA1_HASH = 3
HTTPSPOLICY_CALLBACK_DATA_AUTH_TYPE = UInt32
AUTHTYPE_CLIENT = 1
AUTHTYPE_SERVER = 2
BCRYPT_DH_KEY_BLOB_MAGIC = UInt32
BCRYPT_DH_PUBLIC_MAGIC = 1112557636
BCRYPT_DH_PRIVATE_MAGIC = 1448101956
CRYPT_XML_STATUS_ERROR_STATUS = UInt32
CRYPT_XML_STATUS_ERROR_NOT_RESOLVED = 1
CRYPT_XML_STATUS_ERROR_DIGEST_INVALID = 2
CRYPT_XML_STATUS_ERROR_NOT_SUPPORTED_ALGORITHM = 5
CRYPT_XML_STATUS_ERROR_NOT_SUPPORTED_TRANSFORM = 8
CRYPT_XML_STATUS_ERROR_SIGNATURE_INVALID = 65536
CRYPT_XML_STATUS_ERROR_KEYINFO_NOT_PARSED = 131072
CRYPT_TIMESTAMP_RESPONSE_STATUS = UInt32
TIMESTAMP_STATUS_GRANTED = 0
TIMESTAMP_STATUS_GRANTED_WITH_MODS = 1
TIMESTAMP_STATUS_REJECTED = 2
TIMESTAMP_STATUS_WAITING = 3
TIMESTAMP_STATUS_REVOCATION_WARNING = 4
TIMESTAMP_STATUS_REVOKED = 5
NCRYPT_ALGORITHM_NAME_CLASS = UInt32
NCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = 3
NCRYPT_SECRET_AGREEMENT_INTERFACE = 4
NCRYPT_SIGNATURE_INTERFACE = 5
HCRYPTASYNC = IntPtr
HCERTCHAINENGINE = IntPtr
BCRYPT_ALG_HANDLE = IntPtr
BCRYPT_KEY_HANDLE = IntPtr
def _define_CMS_KEY_INFO_head():
    class CMS_KEY_INFO(Structure):
        pass
    return CMS_KEY_INFO
def _define_CMS_KEY_INFO():
    CMS_KEY_INFO = win32more.Security.Cryptography.CMS_KEY_INFO_head
    CMS_KEY_INFO._fields_ = [
        ("dwVersion", UInt32),
        ("Algid", UInt32),
        ("pbOID", c_char_p_no),
        ("cbOID", UInt32),
    ]
    return CMS_KEY_INFO
def _define_HMAC_Info_head():
    class HMAC_Info(Structure):
        pass
    return HMAC_Info
def _define_HMAC_Info():
    HMAC_Info = win32more.Security.Cryptography.HMAC_Info_head
    HMAC_Info._fields_ = [
        ("HashAlgid", UInt32),
        ("pbInnerString", c_char_p_no),
        ("cbInnerString", UInt32),
        ("pbOuterString", c_char_p_no),
        ("cbOuterString", UInt32),
    ]
    return HMAC_Info
def _define_SCHANNEL_ALG_head():
    class SCHANNEL_ALG(Structure):
        pass
    return SCHANNEL_ALG
def _define_SCHANNEL_ALG():
    SCHANNEL_ALG = win32more.Security.Cryptography.SCHANNEL_ALG_head
    SCHANNEL_ALG._fields_ = [
        ("dwUse", UInt32),
        ("Algid", UInt32),
        ("cBits", UInt32),
        ("dwFlags", UInt32),
        ("dwReserved", UInt32),
    ]
    return SCHANNEL_ALG
def _define_PROV_ENUMALGS_head():
    class PROV_ENUMALGS(Structure):
        pass
    return PROV_ENUMALGS
def _define_PROV_ENUMALGS():
    PROV_ENUMALGS = win32more.Security.Cryptography.PROV_ENUMALGS_head
    PROV_ENUMALGS._fields_ = [
        ("aiAlgid", UInt32),
        ("dwBitLen", UInt32),
        ("dwNameLen", UInt32),
        ("szName", win32more.Foundation.CHAR * 20),
    ]
    return PROV_ENUMALGS
def _define_PROV_ENUMALGS_EX_head():
    class PROV_ENUMALGS_EX(Structure):
        pass
    return PROV_ENUMALGS_EX
def _define_PROV_ENUMALGS_EX():
    PROV_ENUMALGS_EX = win32more.Security.Cryptography.PROV_ENUMALGS_EX_head
    PROV_ENUMALGS_EX._fields_ = [
        ("aiAlgid", UInt32),
        ("dwDefaultLen", UInt32),
        ("dwMinLen", UInt32),
        ("dwMaxLen", UInt32),
        ("dwProtocols", UInt32),
        ("dwNameLen", UInt32),
        ("szName", win32more.Foundation.CHAR * 20),
        ("dwLongNameLen", UInt32),
        ("szLongName", win32more.Foundation.CHAR * 40),
    ]
    return PROV_ENUMALGS_EX
def _define_PUBLICKEYSTRUC_head():
    class PUBLICKEYSTRUC(Structure):
        pass
    return PUBLICKEYSTRUC
def _define_PUBLICKEYSTRUC():
    PUBLICKEYSTRUC = win32more.Security.Cryptography.PUBLICKEYSTRUC_head
    PUBLICKEYSTRUC._fields_ = [
        ("bType", Byte),
        ("bVersion", Byte),
        ("reserved", UInt16),
        ("aiKeyAlg", UInt32),
    ]
    return PUBLICKEYSTRUC
def _define_RSAPUBKEY_head():
    class RSAPUBKEY(Structure):
        pass
    return RSAPUBKEY
def _define_RSAPUBKEY():
    RSAPUBKEY = win32more.Security.Cryptography.RSAPUBKEY_head
    RSAPUBKEY._fields_ = [
        ("magic", UInt32),
        ("bitlen", UInt32),
        ("pubexp", UInt32),
    ]
    return RSAPUBKEY
def _define_PUBKEY_head():
    class PUBKEY(Structure):
        pass
    return PUBKEY
def _define_PUBKEY():
    PUBKEY = win32more.Security.Cryptography.PUBKEY_head
    PUBKEY._fields_ = [
        ("magic", UInt32),
        ("bitlen", UInt32),
    ]
    return PUBKEY
def _define_DSSSEED_head():
    class DSSSEED(Structure):
        pass
    return DSSSEED
def _define_DSSSEED():
    DSSSEED = win32more.Security.Cryptography.DSSSEED_head
    DSSSEED._fields_ = [
        ("counter", UInt32),
        ("seed", Byte * 20),
    ]
    return DSSSEED
def _define_PUBKEYVER3_head():
    class PUBKEYVER3(Structure):
        pass
    return PUBKEYVER3
def _define_PUBKEYVER3():
    PUBKEYVER3 = win32more.Security.Cryptography.PUBKEYVER3_head
    PUBKEYVER3._fields_ = [
        ("magic", UInt32),
        ("bitlenP", UInt32),
        ("bitlenQ", UInt32),
        ("bitlenJ", UInt32),
        ("DSSSeed", win32more.Security.Cryptography.DSSSEED),
    ]
    return PUBKEYVER3
def _define_PRIVKEYVER3_head():
    class PRIVKEYVER3(Structure):
        pass
    return PRIVKEYVER3
def _define_PRIVKEYVER3():
    PRIVKEYVER3 = win32more.Security.Cryptography.PRIVKEYVER3_head
    PRIVKEYVER3._fields_ = [
        ("magic", UInt32),
        ("bitlenP", UInt32),
        ("bitlenQ", UInt32),
        ("bitlenJ", UInt32),
        ("bitlenX", UInt32),
        ("DSSSeed", win32more.Security.Cryptography.DSSSEED),
    ]
    return PRIVKEYVER3
def _define_KEY_TYPE_SUBTYPE_head():
    class KEY_TYPE_SUBTYPE(Structure):
        pass
    return KEY_TYPE_SUBTYPE
def _define_KEY_TYPE_SUBTYPE():
    KEY_TYPE_SUBTYPE = win32more.Security.Cryptography.KEY_TYPE_SUBTYPE_head
    KEY_TYPE_SUBTYPE._fields_ = [
        ("dwKeySpec", UInt32),
        ("Type", Guid),
        ("Subtype", Guid),
    ]
    return KEY_TYPE_SUBTYPE
def _define_CERT_FORTEZZA_DATA_PROP_head():
    class CERT_FORTEZZA_DATA_PROP(Structure):
        pass
    return CERT_FORTEZZA_DATA_PROP
def _define_CERT_FORTEZZA_DATA_PROP():
    CERT_FORTEZZA_DATA_PROP = win32more.Security.Cryptography.CERT_FORTEZZA_DATA_PROP_head
    CERT_FORTEZZA_DATA_PROP._fields_ = [
        ("SerialNumber", Byte * 8),
        ("CertIndex", Int32),
        ("CertLabel", Byte * 36),
    ]
    return CERT_FORTEZZA_DATA_PROP
def _define_CRYPT_RC4_KEY_STATE_head():
    class CRYPT_RC4_KEY_STATE(Structure):
        pass
    return CRYPT_RC4_KEY_STATE
def _define_CRYPT_RC4_KEY_STATE():
    CRYPT_RC4_KEY_STATE = win32more.Security.Cryptography.CRYPT_RC4_KEY_STATE_head
    CRYPT_RC4_KEY_STATE._fields_ = [
        ("Key", Byte * 16),
        ("SBox", Byte * 256),
        ("i", Byte),
        ("j", Byte),
    ]
    return CRYPT_RC4_KEY_STATE
def _define_CRYPT_DES_KEY_STATE_head():
    class CRYPT_DES_KEY_STATE(Structure):
        pass
    return CRYPT_DES_KEY_STATE
def _define_CRYPT_DES_KEY_STATE():
    CRYPT_DES_KEY_STATE = win32more.Security.Cryptography.CRYPT_DES_KEY_STATE_head
    CRYPT_DES_KEY_STATE._fields_ = [
        ("Key", Byte * 8),
        ("IV", Byte * 8),
        ("Feedback", Byte * 8),
    ]
    return CRYPT_DES_KEY_STATE
def _define_CRYPT_3DES_KEY_STATE_head():
    class CRYPT_3DES_KEY_STATE(Structure):
        pass
    return CRYPT_3DES_KEY_STATE
def _define_CRYPT_3DES_KEY_STATE():
    CRYPT_3DES_KEY_STATE = win32more.Security.Cryptography.CRYPT_3DES_KEY_STATE_head
    CRYPT_3DES_KEY_STATE._fields_ = [
        ("Key", Byte * 24),
        ("IV", Byte * 8),
        ("Feedback", Byte * 8),
    ]
    return CRYPT_3DES_KEY_STATE
def _define_CRYPT_AES_128_KEY_STATE_head():
    class CRYPT_AES_128_KEY_STATE(Structure):
        pass
    return CRYPT_AES_128_KEY_STATE
def _define_CRYPT_AES_128_KEY_STATE():
    CRYPT_AES_128_KEY_STATE = win32more.Security.Cryptography.CRYPT_AES_128_KEY_STATE_head
    CRYPT_AES_128_KEY_STATE._fields_ = [
        ("Key", Byte * 16),
        ("IV", Byte * 16),
        ("EncryptionState", Byte * 176),
        ("DecryptionState", Byte * 176),
        ("Feedback", Byte * 16),
    ]
    return CRYPT_AES_128_KEY_STATE
def _define_CRYPT_AES_256_KEY_STATE_head():
    class CRYPT_AES_256_KEY_STATE(Structure):
        pass
    return CRYPT_AES_256_KEY_STATE
def _define_CRYPT_AES_256_KEY_STATE():
    CRYPT_AES_256_KEY_STATE = win32more.Security.Cryptography.CRYPT_AES_256_KEY_STATE_head
    CRYPT_AES_256_KEY_STATE._fields_ = [
        ("Key", Byte * 32),
        ("IV", Byte * 16),
        ("EncryptionState", Byte * 240),
        ("DecryptionState", Byte * 240),
        ("Feedback", Byte * 16),
    ]
    return CRYPT_AES_256_KEY_STATE
def _define_CRYPTOAPI_BLOB_head():
    class CRYPTOAPI_BLOB(Structure):
        pass
    return CRYPTOAPI_BLOB
def _define_CRYPTOAPI_BLOB():
    CRYPTOAPI_BLOB = win32more.Security.Cryptography.CRYPTOAPI_BLOB_head
    CRYPTOAPI_BLOB._fields_ = [
        ("cbData", UInt32),
        ("pbData", c_char_p_no),
    ]
    return CRYPTOAPI_BLOB
def _define_CMS_DH_KEY_INFO_head():
    class CMS_DH_KEY_INFO(Structure):
        pass
    return CMS_DH_KEY_INFO
def _define_CMS_DH_KEY_INFO():
    CMS_DH_KEY_INFO = win32more.Security.Cryptography.CMS_DH_KEY_INFO_head
    CMS_DH_KEY_INFO._fields_ = [
        ("dwVersion", UInt32),
        ("Algid", UInt32),
        ("pszContentEncObjId", win32more.Foundation.PSTR),
        ("PubInfo", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("pReserved", c_void_p),
    ]
    return CMS_DH_KEY_INFO
def _define_BCRYPT_KEY_LENGTHS_STRUCT_head():
    class BCRYPT_KEY_LENGTHS_STRUCT(Structure):
        pass
    return BCRYPT_KEY_LENGTHS_STRUCT
def _define_BCRYPT_KEY_LENGTHS_STRUCT():
    BCRYPT_KEY_LENGTHS_STRUCT = win32more.Security.Cryptography.BCRYPT_KEY_LENGTHS_STRUCT_head
    BCRYPT_KEY_LENGTHS_STRUCT._fields_ = [
        ("dwMinLength", UInt32),
        ("dwMaxLength", UInt32),
        ("dwIncrement", UInt32),
    ]
    return BCRYPT_KEY_LENGTHS_STRUCT
def _define_BCRYPT_OID_head():
    class BCRYPT_OID(Structure):
        pass
    return BCRYPT_OID
def _define_BCRYPT_OID():
    BCRYPT_OID = win32more.Security.Cryptography.BCRYPT_OID_head
    BCRYPT_OID._fields_ = [
        ("cbOID", UInt32),
        ("pbOID", c_char_p_no),
    ]
    return BCRYPT_OID
def _define_BCRYPT_OID_LIST_head():
    class BCRYPT_OID_LIST(Structure):
        pass
    return BCRYPT_OID_LIST
def _define_BCRYPT_OID_LIST():
    BCRYPT_OID_LIST = win32more.Security.Cryptography.BCRYPT_OID_LIST_head
    BCRYPT_OID_LIST._fields_ = [
        ("dwOIDCount", UInt32),
        ("pOIDs", POINTER(win32more.Security.Cryptography.BCRYPT_OID_head)),
    ]
    return BCRYPT_OID_LIST
def _define_BCRYPT_PKCS1_PADDING_INFO_head():
    class BCRYPT_PKCS1_PADDING_INFO(Structure):
        pass
    return BCRYPT_PKCS1_PADDING_INFO
def _define_BCRYPT_PKCS1_PADDING_INFO():
    BCRYPT_PKCS1_PADDING_INFO = win32more.Security.Cryptography.BCRYPT_PKCS1_PADDING_INFO_head
    BCRYPT_PKCS1_PADDING_INFO._fields_ = [
        ("pszAlgId", win32more.Foundation.PWSTR),
    ]
    return BCRYPT_PKCS1_PADDING_INFO
def _define_BCRYPT_PSS_PADDING_INFO_head():
    class BCRYPT_PSS_PADDING_INFO(Structure):
        pass
    return BCRYPT_PSS_PADDING_INFO
def _define_BCRYPT_PSS_PADDING_INFO():
    BCRYPT_PSS_PADDING_INFO = win32more.Security.Cryptography.BCRYPT_PSS_PADDING_INFO_head
    BCRYPT_PSS_PADDING_INFO._fields_ = [
        ("pszAlgId", win32more.Foundation.PWSTR),
        ("cbSalt", UInt32),
    ]
    return BCRYPT_PSS_PADDING_INFO
def _define_BCRYPT_OAEP_PADDING_INFO_head():
    class BCRYPT_OAEP_PADDING_INFO(Structure):
        pass
    return BCRYPT_OAEP_PADDING_INFO
def _define_BCRYPT_OAEP_PADDING_INFO():
    BCRYPT_OAEP_PADDING_INFO = win32more.Security.Cryptography.BCRYPT_OAEP_PADDING_INFO_head
    BCRYPT_OAEP_PADDING_INFO._fields_ = [
        ("pszAlgId", win32more.Foundation.PWSTR),
        ("pbLabel", c_char_p_no),
        ("cbLabel", UInt32),
    ]
    return BCRYPT_OAEP_PADDING_INFO
def _define_BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_head():
    class BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO(Structure):
        pass
    return BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO
def _define_BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO():
    BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO = win32more.Security.Cryptography.BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_head
    BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO._fields_ = [
        ("cbSize", UInt32),
        ("dwInfoVersion", UInt32),
        ("pbNonce", c_char_p_no),
        ("cbNonce", UInt32),
        ("pbAuthData", c_char_p_no),
        ("cbAuthData", UInt32),
        ("pbTag", c_char_p_no),
        ("cbTag", UInt32),
        ("pbMacContext", c_char_p_no),
        ("cbMacContext", UInt32),
        ("cbAAD", UInt32),
        ("cbData", UInt64),
        ("dwFlags", UInt32),
    ]
    return BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO
def _define_BCryptBuffer_head():
    class BCryptBuffer(Structure):
        pass
    return BCryptBuffer
def _define_BCryptBuffer():
    BCryptBuffer = win32more.Security.Cryptography.BCryptBuffer_head
    BCryptBuffer._fields_ = [
        ("cbBuffer", UInt32),
        ("BufferType", UInt32),
        ("pvBuffer", c_void_p),
    ]
    return BCryptBuffer
def _define_BCryptBufferDesc_head():
    class BCryptBufferDesc(Structure):
        pass
    return BCryptBufferDesc
def _define_BCryptBufferDesc():
    BCryptBufferDesc = win32more.Security.Cryptography.BCryptBufferDesc_head
    BCryptBufferDesc._fields_ = [
        ("ulVersion", UInt32),
        ("cBuffers", UInt32),
        ("pBuffers", POINTER(win32more.Security.Cryptography.BCryptBuffer_head)),
    ]
    return BCryptBufferDesc
def _define_BCRYPT_KEY_BLOB_head():
    class BCRYPT_KEY_BLOB(Structure):
        pass
    return BCRYPT_KEY_BLOB
def _define_BCRYPT_KEY_BLOB():
    BCRYPT_KEY_BLOB = win32more.Security.Cryptography.BCRYPT_KEY_BLOB_head
    BCRYPT_KEY_BLOB._fields_ = [
        ("Magic", UInt32),
    ]
    return BCRYPT_KEY_BLOB
def _define_BCRYPT_RSAKEY_BLOB_head():
    class BCRYPT_RSAKEY_BLOB(Structure):
        pass
    return BCRYPT_RSAKEY_BLOB
def _define_BCRYPT_RSAKEY_BLOB():
    BCRYPT_RSAKEY_BLOB = win32more.Security.Cryptography.BCRYPT_RSAKEY_BLOB_head
    BCRYPT_RSAKEY_BLOB._fields_ = [
        ("Magic", win32more.Security.Cryptography.BCRYPT_RSAKEY_BLOB_MAGIC),
        ("BitLength", UInt32),
        ("cbPublicExp", UInt32),
        ("cbModulus", UInt32),
        ("cbPrime1", UInt32),
        ("cbPrime2", UInt32),
    ]
    return BCRYPT_RSAKEY_BLOB
def _define_BCRYPT_ECCKEY_BLOB_head():
    class BCRYPT_ECCKEY_BLOB(Structure):
        pass
    return BCRYPT_ECCKEY_BLOB
def _define_BCRYPT_ECCKEY_BLOB():
    BCRYPT_ECCKEY_BLOB = win32more.Security.Cryptography.BCRYPT_ECCKEY_BLOB_head
    BCRYPT_ECCKEY_BLOB._fields_ = [
        ("dwMagic", UInt32),
        ("cbKey", UInt32),
    ]
    return BCRYPT_ECCKEY_BLOB
def _define_SSL_ECCKEY_BLOB_head():
    class SSL_ECCKEY_BLOB(Structure):
        pass
    return SSL_ECCKEY_BLOB
def _define_SSL_ECCKEY_BLOB():
    SSL_ECCKEY_BLOB = win32more.Security.Cryptography.SSL_ECCKEY_BLOB_head
    SSL_ECCKEY_BLOB._fields_ = [
        ("dwCurveType", UInt32),
        ("cbKey", UInt32),
    ]
    return SSL_ECCKEY_BLOB
ECC_CURVE_TYPE_ENUM = Int32
BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE = 1
BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE = 2
BCRYPT_ECC_PRIME_MONTGOMERY_CURVE = 3
ECC_CURVE_ALG_ID_ENUM = Int32
BCRYPT_NO_CURVE_GENERATION_ALG_ID = 0
def _define_BCRYPT_ECCFULLKEY_BLOB_head():
    class BCRYPT_ECCFULLKEY_BLOB(Structure):
        pass
    return BCRYPT_ECCFULLKEY_BLOB
def _define_BCRYPT_ECCFULLKEY_BLOB():
    BCRYPT_ECCFULLKEY_BLOB = win32more.Security.Cryptography.BCRYPT_ECCFULLKEY_BLOB_head
    BCRYPT_ECCFULLKEY_BLOB._fields_ = [
        ("dwMagic", UInt32),
        ("dwVersion", UInt32),
        ("dwCurveType", win32more.Security.Cryptography.ECC_CURVE_TYPE_ENUM),
        ("dwCurveGenerationAlgId", win32more.Security.Cryptography.ECC_CURVE_ALG_ID_ENUM),
        ("cbFieldLength", UInt32),
        ("cbSubgroupOrder", UInt32),
        ("cbCofactor", UInt32),
        ("cbSeed", UInt32),
    ]
    return BCRYPT_ECCFULLKEY_BLOB
def _define_BCRYPT_DH_KEY_BLOB_head():
    class BCRYPT_DH_KEY_BLOB(Structure):
        pass
    return BCRYPT_DH_KEY_BLOB
def _define_BCRYPT_DH_KEY_BLOB():
    BCRYPT_DH_KEY_BLOB = win32more.Security.Cryptography.BCRYPT_DH_KEY_BLOB_head
    BCRYPT_DH_KEY_BLOB._fields_ = [
        ("dwMagic", win32more.Security.Cryptography.BCRYPT_DH_KEY_BLOB_MAGIC),
        ("cbKey", UInt32),
    ]
    return BCRYPT_DH_KEY_BLOB
def _define_BCRYPT_DH_PARAMETER_HEADER_head():
    class BCRYPT_DH_PARAMETER_HEADER(Structure):
        pass
    return BCRYPT_DH_PARAMETER_HEADER
def _define_BCRYPT_DH_PARAMETER_HEADER():
    BCRYPT_DH_PARAMETER_HEADER = win32more.Security.Cryptography.BCRYPT_DH_PARAMETER_HEADER_head
    BCRYPT_DH_PARAMETER_HEADER._fields_ = [
        ("cbLength", UInt32),
        ("dwMagic", UInt32),
        ("cbKeyLength", UInt32),
    ]
    return BCRYPT_DH_PARAMETER_HEADER
def _define_BCRYPT_DSA_KEY_BLOB_head():
    class BCRYPT_DSA_KEY_BLOB(Structure):
        pass
    return BCRYPT_DSA_KEY_BLOB
def _define_BCRYPT_DSA_KEY_BLOB():
    BCRYPT_DSA_KEY_BLOB = win32more.Security.Cryptography.BCRYPT_DSA_KEY_BLOB_head
    BCRYPT_DSA_KEY_BLOB._fields_ = [
        ("dwMagic", win32more.Security.Cryptography.BCRYPT_DSA_MAGIC),
        ("cbKey", UInt32),
        ("Count", Byte * 4),
        ("Seed", Byte * 20),
        ("q", Byte * 20),
    ]
    return BCRYPT_DSA_KEY_BLOB
HASHALGORITHM_ENUM = Int32
DSA_HASH_ALGORITHM_SHA1 = 0
DSA_HASH_ALGORITHM_SHA256 = 1
DSA_HASH_ALGORITHM_SHA512 = 2
DSAFIPSVERSION_ENUM = Int32
DSA_FIPS186_2 = 0
DSA_FIPS186_3 = 1
def _define_BCRYPT_DSA_KEY_BLOB_V2_head():
    class BCRYPT_DSA_KEY_BLOB_V2(Structure):
        pass
    return BCRYPT_DSA_KEY_BLOB_V2
def _define_BCRYPT_DSA_KEY_BLOB_V2():
    BCRYPT_DSA_KEY_BLOB_V2 = win32more.Security.Cryptography.BCRYPT_DSA_KEY_BLOB_V2_head
    BCRYPT_DSA_KEY_BLOB_V2._fields_ = [
        ("dwMagic", win32more.Security.Cryptography.BCRYPT_DSA_MAGIC),
        ("cbKey", UInt32),
        ("hashAlgorithm", win32more.Security.Cryptography.HASHALGORITHM_ENUM),
        ("standardVersion", win32more.Security.Cryptography.DSAFIPSVERSION_ENUM),
        ("cbSeedLength", UInt32),
        ("cbGroupSize", UInt32),
        ("Count", Byte * 4),
    ]
    return BCRYPT_DSA_KEY_BLOB_V2
def _define_BCRYPT_KEY_DATA_BLOB_HEADER_head():
    class BCRYPT_KEY_DATA_BLOB_HEADER(Structure):
        pass
    return BCRYPT_KEY_DATA_BLOB_HEADER
def _define_BCRYPT_KEY_DATA_BLOB_HEADER():
    BCRYPT_KEY_DATA_BLOB_HEADER = win32more.Security.Cryptography.BCRYPT_KEY_DATA_BLOB_HEADER_head
    BCRYPT_KEY_DATA_BLOB_HEADER._fields_ = [
        ("dwMagic", UInt32),
        ("dwVersion", UInt32),
        ("cbKeyData", UInt32),
    ]
    return BCRYPT_KEY_DATA_BLOB_HEADER
def _define_BCRYPT_DSA_PARAMETER_HEADER_head():
    class BCRYPT_DSA_PARAMETER_HEADER(Structure):
        pass
    return BCRYPT_DSA_PARAMETER_HEADER
def _define_BCRYPT_DSA_PARAMETER_HEADER():
    BCRYPT_DSA_PARAMETER_HEADER = win32more.Security.Cryptography.BCRYPT_DSA_PARAMETER_HEADER_head
    BCRYPT_DSA_PARAMETER_HEADER._fields_ = [
        ("cbLength", UInt32),
        ("dwMagic", UInt32),
        ("cbKeyLength", UInt32),
        ("Count", Byte * 4),
        ("Seed", Byte * 20),
        ("q", Byte * 20),
    ]
    return BCRYPT_DSA_PARAMETER_HEADER
def _define_BCRYPT_DSA_PARAMETER_HEADER_V2_head():
    class BCRYPT_DSA_PARAMETER_HEADER_V2(Structure):
        pass
    return BCRYPT_DSA_PARAMETER_HEADER_V2
def _define_BCRYPT_DSA_PARAMETER_HEADER_V2():
    BCRYPT_DSA_PARAMETER_HEADER_V2 = win32more.Security.Cryptography.BCRYPT_DSA_PARAMETER_HEADER_V2_head
    BCRYPT_DSA_PARAMETER_HEADER_V2._fields_ = [
        ("cbLength", UInt32),
        ("dwMagic", UInt32),
        ("cbKeyLength", UInt32),
        ("hashAlgorithm", win32more.Security.Cryptography.HASHALGORITHM_ENUM),
        ("standardVersion", win32more.Security.Cryptography.DSAFIPSVERSION_ENUM),
        ("cbSeedLength", UInt32),
        ("cbGroupSize", UInt32),
        ("Count", Byte * 4),
    ]
    return BCRYPT_DSA_PARAMETER_HEADER_V2
def _define_BCRYPT_ECC_CURVE_NAMES_head():
    class BCRYPT_ECC_CURVE_NAMES(Structure):
        pass
    return BCRYPT_ECC_CURVE_NAMES
def _define_BCRYPT_ECC_CURVE_NAMES():
    BCRYPT_ECC_CURVE_NAMES = win32more.Security.Cryptography.BCRYPT_ECC_CURVE_NAMES_head
    BCRYPT_ECC_CURVE_NAMES._fields_ = [
        ("dwEccCurveNames", UInt32),
        ("pEccCurveNames", POINTER(win32more.Foundation.PWSTR)),
    ]
    return BCRYPT_ECC_CURVE_NAMES
BCRYPT_HASH_OPERATION_TYPE = Int32
BCRYPT_HASH_OPERATION_HASH_DATA = 1
BCRYPT_HASH_OPERATION_FINISH_HASH = 2
def _define_BCRYPT_MULTI_HASH_OPERATION_head():
    class BCRYPT_MULTI_HASH_OPERATION(Structure):
        pass
    return BCRYPT_MULTI_HASH_OPERATION
def _define_BCRYPT_MULTI_HASH_OPERATION():
    BCRYPT_MULTI_HASH_OPERATION = win32more.Security.Cryptography.BCRYPT_MULTI_HASH_OPERATION_head
    BCRYPT_MULTI_HASH_OPERATION._fields_ = [
        ("iHash", UInt32),
        ("hashOperation", win32more.Security.Cryptography.BCRYPT_HASH_OPERATION_TYPE),
        ("pbBuffer", c_char_p_no),
        ("cbBuffer", UInt32),
    ]
    return BCRYPT_MULTI_HASH_OPERATION
BCRYPT_MULTI_OPERATION_TYPE = Int32
BCRYPT_OPERATION_TYPE_HASH = 1
def _define_BCRYPT_MULTI_OBJECT_LENGTH_STRUCT_head():
    class BCRYPT_MULTI_OBJECT_LENGTH_STRUCT(Structure):
        pass
    return BCRYPT_MULTI_OBJECT_LENGTH_STRUCT
def _define_BCRYPT_MULTI_OBJECT_LENGTH_STRUCT():
    BCRYPT_MULTI_OBJECT_LENGTH_STRUCT = win32more.Security.Cryptography.BCRYPT_MULTI_OBJECT_LENGTH_STRUCT_head
    BCRYPT_MULTI_OBJECT_LENGTH_STRUCT._fields_ = [
        ("cbPerObject", UInt32),
        ("cbPerElement", UInt32),
    ]
    return BCRYPT_MULTI_OBJECT_LENGTH_STRUCT
def _define_BCRYPT_ALGORITHM_IDENTIFIER_head():
    class BCRYPT_ALGORITHM_IDENTIFIER(Structure):
        pass
    return BCRYPT_ALGORITHM_IDENTIFIER
def _define_BCRYPT_ALGORITHM_IDENTIFIER():
    BCRYPT_ALGORITHM_IDENTIFIER = win32more.Security.Cryptography.BCRYPT_ALGORITHM_IDENTIFIER_head
    BCRYPT_ALGORITHM_IDENTIFIER._fields_ = [
        ("pszName", win32more.Foundation.PWSTR),
        ("dwClass", UInt32),
        ("dwFlags", UInt32),
    ]
    return BCRYPT_ALGORITHM_IDENTIFIER
def _define_BCRYPT_PROVIDER_NAME_head():
    class BCRYPT_PROVIDER_NAME(Structure):
        pass
    return BCRYPT_PROVIDER_NAME
def _define_BCRYPT_PROVIDER_NAME():
    BCRYPT_PROVIDER_NAME = win32more.Security.Cryptography.BCRYPT_PROVIDER_NAME_head
    BCRYPT_PROVIDER_NAME._fields_ = [
        ("pszProviderName", win32more.Foundation.PWSTR),
    ]
    return BCRYPT_PROVIDER_NAME
def _define_BCRYPT_INTERFACE_VERSION_head():
    class BCRYPT_INTERFACE_VERSION(Structure):
        pass
    return BCRYPT_INTERFACE_VERSION
def _define_BCRYPT_INTERFACE_VERSION():
    BCRYPT_INTERFACE_VERSION = win32more.Security.Cryptography.BCRYPT_INTERFACE_VERSION_head
    BCRYPT_INTERFACE_VERSION._fields_ = [
        ("MajorVersion", UInt16),
        ("MinorVersion", UInt16),
    ]
    return BCRYPT_INTERFACE_VERSION
def _define_CRYPT_INTERFACE_REG_head():
    class CRYPT_INTERFACE_REG(Structure):
        pass
    return CRYPT_INTERFACE_REG
def _define_CRYPT_INTERFACE_REG():
    CRYPT_INTERFACE_REG = win32more.Security.Cryptography.CRYPT_INTERFACE_REG_head
    CRYPT_INTERFACE_REG._fields_ = [
        ("dwInterface", win32more.Security.Cryptography.BCRYPT_INTERFACE),
        ("dwFlags", win32more.Security.Cryptography.BCRYPT_TABLE),
        ("cFunctions", UInt32),
        ("rgpszFunctions", POINTER(win32more.Foundation.PWSTR)),
    ]
    return CRYPT_INTERFACE_REG
def _define_CRYPT_IMAGE_REG_head():
    class CRYPT_IMAGE_REG(Structure):
        pass
    return CRYPT_IMAGE_REG
def _define_CRYPT_IMAGE_REG():
    CRYPT_IMAGE_REG = win32more.Security.Cryptography.CRYPT_IMAGE_REG_head
    CRYPT_IMAGE_REG._fields_ = [
        ("pszImage", win32more.Foundation.PWSTR),
        ("cInterfaces", UInt32),
        ("rgpInterfaces", POINTER(POINTER(win32more.Security.Cryptography.CRYPT_INTERFACE_REG_head))),
    ]
    return CRYPT_IMAGE_REG
def _define_CRYPT_PROVIDER_REG_head():
    class CRYPT_PROVIDER_REG(Structure):
        pass
    return CRYPT_PROVIDER_REG
def _define_CRYPT_PROVIDER_REG():
    CRYPT_PROVIDER_REG = win32more.Security.Cryptography.CRYPT_PROVIDER_REG_head
    CRYPT_PROVIDER_REG._fields_ = [
        ("cAliases", UInt32),
        ("rgpszAliases", POINTER(win32more.Foundation.PWSTR)),
        ("pUM", POINTER(win32more.Security.Cryptography.CRYPT_IMAGE_REG_head)),
        ("pKM", POINTER(win32more.Security.Cryptography.CRYPT_IMAGE_REG_head)),
    ]
    return CRYPT_PROVIDER_REG
def _define_CRYPT_PROVIDERS_head():
    class CRYPT_PROVIDERS(Structure):
        pass
    return CRYPT_PROVIDERS
def _define_CRYPT_PROVIDERS():
    CRYPT_PROVIDERS = win32more.Security.Cryptography.CRYPT_PROVIDERS_head
    CRYPT_PROVIDERS._fields_ = [
        ("cProviders", UInt32),
        ("rgpszProviders", POINTER(win32more.Foundation.PWSTR)),
    ]
    return CRYPT_PROVIDERS
def _define_CRYPT_CONTEXT_CONFIG_head():
    class CRYPT_CONTEXT_CONFIG(Structure):
        pass
    return CRYPT_CONTEXT_CONFIG
def _define_CRYPT_CONTEXT_CONFIG():
    CRYPT_CONTEXT_CONFIG = win32more.Security.Cryptography.CRYPT_CONTEXT_CONFIG_head
    CRYPT_CONTEXT_CONFIG._fields_ = [
        ("dwFlags", win32more.Security.Cryptography.CRYPT_CONTEXT_CONFIG_FLAGS),
        ("dwReserved", UInt32),
    ]
    return CRYPT_CONTEXT_CONFIG
def _define_CRYPT_CONTEXT_FUNCTION_CONFIG_head():
    class CRYPT_CONTEXT_FUNCTION_CONFIG(Structure):
        pass
    return CRYPT_CONTEXT_FUNCTION_CONFIG
def _define_CRYPT_CONTEXT_FUNCTION_CONFIG():
    CRYPT_CONTEXT_FUNCTION_CONFIG = win32more.Security.Cryptography.CRYPT_CONTEXT_FUNCTION_CONFIG_head
    CRYPT_CONTEXT_FUNCTION_CONFIG._fields_ = [
        ("dwFlags", UInt32),
        ("dwReserved", UInt32),
    ]
    return CRYPT_CONTEXT_FUNCTION_CONFIG
def _define_CRYPT_CONTEXTS_head():
    class CRYPT_CONTEXTS(Structure):
        pass
    return CRYPT_CONTEXTS
def _define_CRYPT_CONTEXTS():
    CRYPT_CONTEXTS = win32more.Security.Cryptography.CRYPT_CONTEXTS_head
    CRYPT_CONTEXTS._fields_ = [
        ("cContexts", UInt32),
        ("rgpszContexts", POINTER(win32more.Foundation.PWSTR)),
    ]
    return CRYPT_CONTEXTS
def _define_CRYPT_CONTEXT_FUNCTIONS_head():
    class CRYPT_CONTEXT_FUNCTIONS(Structure):
        pass
    return CRYPT_CONTEXT_FUNCTIONS
def _define_CRYPT_CONTEXT_FUNCTIONS():
    CRYPT_CONTEXT_FUNCTIONS = win32more.Security.Cryptography.CRYPT_CONTEXT_FUNCTIONS_head
    CRYPT_CONTEXT_FUNCTIONS._fields_ = [
        ("cFunctions", UInt32),
        ("rgpszFunctions", POINTER(win32more.Foundation.PWSTR)),
    ]
    return CRYPT_CONTEXT_FUNCTIONS
def _define_CRYPT_CONTEXT_FUNCTION_PROVIDERS_head():
    class CRYPT_CONTEXT_FUNCTION_PROVIDERS(Structure):
        pass
    return CRYPT_CONTEXT_FUNCTION_PROVIDERS
def _define_CRYPT_CONTEXT_FUNCTION_PROVIDERS():
    CRYPT_CONTEXT_FUNCTION_PROVIDERS = win32more.Security.Cryptography.CRYPT_CONTEXT_FUNCTION_PROVIDERS_head
    CRYPT_CONTEXT_FUNCTION_PROVIDERS._fields_ = [
        ("cProviders", UInt32),
        ("rgpszProviders", POINTER(win32more.Foundation.PWSTR)),
    ]
    return CRYPT_CONTEXT_FUNCTION_PROVIDERS
def _define_CRYPT_PROPERTY_REF_head():
    class CRYPT_PROPERTY_REF(Structure):
        pass
    return CRYPT_PROPERTY_REF
def _define_CRYPT_PROPERTY_REF():
    CRYPT_PROPERTY_REF = win32more.Security.Cryptography.CRYPT_PROPERTY_REF_head
    CRYPT_PROPERTY_REF._fields_ = [
        ("pszProperty", win32more.Foundation.PWSTR),
        ("cbValue", UInt32),
        ("pbValue", c_char_p_no),
    ]
    return CRYPT_PROPERTY_REF
def _define_CRYPT_IMAGE_REF_head():
    class CRYPT_IMAGE_REF(Structure):
        pass
    return CRYPT_IMAGE_REF
def _define_CRYPT_IMAGE_REF():
    CRYPT_IMAGE_REF = win32more.Security.Cryptography.CRYPT_IMAGE_REF_head
    CRYPT_IMAGE_REF._fields_ = [
        ("pszImage", win32more.Foundation.PWSTR),
        ("dwFlags", win32more.Security.Cryptography.CRYPT_IMAGE_REF_FLAGS),
    ]
    return CRYPT_IMAGE_REF
def _define_CRYPT_PROVIDER_REF_head():
    class CRYPT_PROVIDER_REF(Structure):
        pass
    return CRYPT_PROVIDER_REF
def _define_CRYPT_PROVIDER_REF():
    CRYPT_PROVIDER_REF = win32more.Security.Cryptography.CRYPT_PROVIDER_REF_head
    CRYPT_PROVIDER_REF._fields_ = [
        ("dwInterface", UInt32),
        ("pszFunction", win32more.Foundation.PWSTR),
        ("pszProvider", win32more.Foundation.PWSTR),
        ("cProperties", UInt32),
        ("rgpProperties", POINTER(POINTER(win32more.Security.Cryptography.CRYPT_PROPERTY_REF_head))),
        ("pUM", POINTER(win32more.Security.Cryptography.CRYPT_IMAGE_REF_head)),
        ("pKM", POINTER(win32more.Security.Cryptography.CRYPT_IMAGE_REF_head)),
    ]
    return CRYPT_PROVIDER_REF
def _define_CRYPT_PROVIDER_REFS_head():
    class CRYPT_PROVIDER_REFS(Structure):
        pass
    return CRYPT_PROVIDER_REFS
def _define_CRYPT_PROVIDER_REFS():
    CRYPT_PROVIDER_REFS = win32more.Security.Cryptography.CRYPT_PROVIDER_REFS_head
    CRYPT_PROVIDER_REFS._fields_ = [
        ("cProviders", UInt32),
        ("rgpProviders", POINTER(POINTER(win32more.Security.Cryptography.CRYPT_PROVIDER_REF_head))),
    ]
    return CRYPT_PROVIDER_REFS
def _define_PFN_NCRYPT_ALLOC():
    return CFUNCTYPE(c_void_p,UIntPtr, use_last_error=False)
def _define_PFN_NCRYPT_FREE():
    return CFUNCTYPE(Void,c_void_p, use_last_error=False)
def _define_NCRYPT_ALLOC_PARA_head():
    class NCRYPT_ALLOC_PARA(Structure):
        pass
    return NCRYPT_ALLOC_PARA
def _define_NCRYPT_ALLOC_PARA():
    NCRYPT_ALLOC_PARA = win32more.Security.Cryptography.NCRYPT_ALLOC_PARA_head
    NCRYPT_ALLOC_PARA._fields_ = [
        ("cbSize", UInt32),
        ("pfnAlloc", win32more.Security.Cryptography.PFN_NCRYPT_ALLOC),
        ("pfnFree", win32more.Security.Cryptography.PFN_NCRYPT_FREE),
    ]
    return NCRYPT_ALLOC_PARA
def _define_NCRYPT_CIPHER_PADDING_INFO_head():
    class NCRYPT_CIPHER_PADDING_INFO(Structure):
        pass
    return NCRYPT_CIPHER_PADDING_INFO
def _define_NCRYPT_CIPHER_PADDING_INFO():
    NCRYPT_CIPHER_PADDING_INFO = win32more.Security.Cryptography.NCRYPT_CIPHER_PADDING_INFO_head
    NCRYPT_CIPHER_PADDING_INFO._fields_ = [
        ("cbSize", UInt32),
        ("dwFlags", UInt32),
        ("pbIV", c_char_p_no),
        ("cbIV", UInt32),
        ("pbOtherInfo", c_char_p_no),
        ("cbOtherInfo", UInt32),
    ]
    return NCRYPT_CIPHER_PADDING_INFO
def _define_NCRYPT_PLATFORM_ATTEST_PADDING_INFO_head():
    class NCRYPT_PLATFORM_ATTEST_PADDING_INFO(Structure):
        pass
    return NCRYPT_PLATFORM_ATTEST_PADDING_INFO
def _define_NCRYPT_PLATFORM_ATTEST_PADDING_INFO():
    NCRYPT_PLATFORM_ATTEST_PADDING_INFO = win32more.Security.Cryptography.NCRYPT_PLATFORM_ATTEST_PADDING_INFO_head
    NCRYPT_PLATFORM_ATTEST_PADDING_INFO._fields_ = [
        ("magic", UInt32),
        ("pcrMask", UInt32),
    ]
    return NCRYPT_PLATFORM_ATTEST_PADDING_INFO
def _define_NCRYPT_KEY_ATTEST_PADDING_INFO_head():
    class NCRYPT_KEY_ATTEST_PADDING_INFO(Structure):
        pass
    return NCRYPT_KEY_ATTEST_PADDING_INFO
def _define_NCRYPT_KEY_ATTEST_PADDING_INFO():
    NCRYPT_KEY_ATTEST_PADDING_INFO = win32more.Security.Cryptography.NCRYPT_KEY_ATTEST_PADDING_INFO_head
    NCRYPT_KEY_ATTEST_PADDING_INFO._fields_ = [
        ("magic", UInt32),
        ("pbKeyBlob", c_char_p_no),
        ("cbKeyBlob", UInt32),
        ("pbKeyAuth", c_char_p_no),
        ("cbKeyAuth", UInt32),
    ]
    return NCRYPT_KEY_ATTEST_PADDING_INFO
def _define_NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_head():
    class NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES(Structure):
        pass
    return NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES
def _define_NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES():
    NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES = win32more.Security.Cryptography.NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_head
    NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES._fields_ = [
        ("Version", UInt32),
        ("Flags", UInt32),
        ("cbPublicKeyBlob", UInt32),
    ]
    return NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES
def _define_NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_head():
    class NCRYPT_VSM_KEY_ATTESTATION_STATEMENT(Structure):
        pass
    return NCRYPT_VSM_KEY_ATTESTATION_STATEMENT
def _define_NCRYPT_VSM_KEY_ATTESTATION_STATEMENT():
    NCRYPT_VSM_KEY_ATTESTATION_STATEMENT = win32more.Security.Cryptography.NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_head
    NCRYPT_VSM_KEY_ATTESTATION_STATEMENT._fields_ = [
        ("Magic", UInt32),
        ("Version", UInt32),
        ("cbSignature", UInt32),
        ("cbReport", UInt32),
        ("cbAttributes", UInt32),
    ]
    return NCRYPT_VSM_KEY_ATTESTATION_STATEMENT
def _define_NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_head():
    class NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS(Structure):
        pass
    return NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS
def _define_NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS():
    NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS = win32more.Security.Cryptography.NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_head
    NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS._fields_ = [
        ("Version", UInt32),
        ("TrustletId", UInt64),
        ("MinSvn", UInt32),
        ("FlagsMask", UInt32),
        ("FlagsExpected", UInt32),
        ("_bitfield", UInt32),
    ]
    return NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS
def _define_NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_head():
    class NCRYPT_EXPORTED_ISOLATED_KEY_HEADER(Structure):
        pass
    return NCRYPT_EXPORTED_ISOLATED_KEY_HEADER
def _define_NCRYPT_EXPORTED_ISOLATED_KEY_HEADER():
    NCRYPT_EXPORTED_ISOLATED_KEY_HEADER = win32more.Security.Cryptography.NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_head
    NCRYPT_EXPORTED_ISOLATED_KEY_HEADER._fields_ = [
        ("Version", UInt32),
        ("KeyUsage", UInt32),
        ("_bitfield", UInt32),
        ("cbAlgName", UInt32),
        ("cbNonce", UInt32),
        ("cbAuthTag", UInt32),
        ("cbWrappingKey", UInt32),
        ("cbIsolatedKey", UInt32),
    ]
    return NCRYPT_EXPORTED_ISOLATED_KEY_HEADER
def _define_NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE_head():
    class NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE(Structure):
        pass
    return NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE
def _define_NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE():
    NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE = win32more.Security.Cryptography.NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE_head
    NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE._fields_ = [
        ("Header", win32more.Security.Cryptography.NCRYPT_EXPORTED_ISOLATED_KEY_HEADER),
    ]
    return NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE
def _define___NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT_head():
    class __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT(Structure):
        pass
    return __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT
def _define___NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT():
    __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT = win32more.Security.Cryptography.__NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT_head
    __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT._fields_ = [
        ("Magic", UInt32),
        ("Version", UInt32),
        ("HeaderSize", UInt32),
        ("cbCertifyInfo", UInt32),
        ("cbSignature", UInt32),
        ("cbTpmPublic", UInt32),
    ]
    return __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT
def _define_NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_head():
    class NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT(Structure):
        pass
    return NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT
def _define_NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT():
    NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT = win32more.Security.Cryptography.NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_head
    NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT._fields_ = [
        ("Magic", UInt32),
        ("Version", UInt32),
        ("pcrAlg", UInt32),
        ("cbSignature", UInt32),
        ("cbQuote", UInt32),
        ("cbPcrs", UInt32),
    ]
    return NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT
def _define_NCryptAlgorithmName_head():
    class NCryptAlgorithmName(Structure):
        pass
    return NCryptAlgorithmName
def _define_NCryptAlgorithmName():
    NCryptAlgorithmName = win32more.Security.Cryptography.NCryptAlgorithmName_head
    NCryptAlgorithmName._fields_ = [
        ("pszName", win32more.Foundation.PWSTR),
        ("dwClass", win32more.Security.Cryptography.NCRYPT_ALGORITHM_NAME_CLASS),
        ("dwAlgOperations", win32more.Security.Cryptography.NCRYPT_OPERATION),
        ("dwFlags", UInt32),
    ]
    return NCryptAlgorithmName
def _define_NCryptKeyName_head():
    class NCryptKeyName(Structure):
        pass
    return NCryptKeyName
def _define_NCryptKeyName():
    NCryptKeyName = win32more.Security.Cryptography.NCryptKeyName_head
    NCryptKeyName._fields_ = [
        ("pszName", win32more.Foundation.PWSTR),
        ("pszAlgid", win32more.Foundation.PWSTR),
        ("dwLegacyKeySpec", win32more.Security.Cryptography.CERT_KEY_SPEC),
        ("dwFlags", UInt32),
    ]
    return NCryptKeyName
def _define_NCryptProviderName_head():
    class NCryptProviderName(Structure):
        pass
    return NCryptProviderName
def _define_NCryptProviderName():
    NCryptProviderName = win32more.Security.Cryptography.NCryptProviderName_head
    NCryptProviderName._fields_ = [
        ("pszName", win32more.Foundation.PWSTR),
        ("pszComment", win32more.Foundation.PWSTR),
    ]
    return NCryptProviderName
def _define_NCRYPT_UI_POLICY_head():
    class NCRYPT_UI_POLICY(Structure):
        pass
    return NCRYPT_UI_POLICY
def _define_NCRYPT_UI_POLICY():
    NCRYPT_UI_POLICY = win32more.Security.Cryptography.NCRYPT_UI_POLICY_head
    NCRYPT_UI_POLICY._fields_ = [
        ("dwVersion", UInt32),
        ("dwFlags", UInt32),
        ("pszCreationTitle", win32more.Foundation.PWSTR),
        ("pszFriendlyName", win32more.Foundation.PWSTR),
        ("pszDescription", win32more.Foundation.PWSTR),
    ]
    return NCRYPT_UI_POLICY
def _define_NCRYPT_KEY_ACCESS_POLICY_BLOB_head():
    class NCRYPT_KEY_ACCESS_POLICY_BLOB(Structure):
        pass
    return NCRYPT_KEY_ACCESS_POLICY_BLOB
def _define_NCRYPT_KEY_ACCESS_POLICY_BLOB():
    NCRYPT_KEY_ACCESS_POLICY_BLOB = win32more.Security.Cryptography.NCRYPT_KEY_ACCESS_POLICY_BLOB_head
    NCRYPT_KEY_ACCESS_POLICY_BLOB._fields_ = [
        ("dwVersion", UInt32),
        ("dwPolicyFlags", UInt32),
        ("cbUserSid", UInt32),
        ("cbApplicationSid", UInt32),
    ]
    return NCRYPT_KEY_ACCESS_POLICY_BLOB
def _define_NCRYPT_SUPPORTED_LENGTHS_head():
    class NCRYPT_SUPPORTED_LENGTHS(Structure):
        pass
    return NCRYPT_SUPPORTED_LENGTHS
def _define_NCRYPT_SUPPORTED_LENGTHS():
    NCRYPT_SUPPORTED_LENGTHS = win32more.Security.Cryptography.NCRYPT_SUPPORTED_LENGTHS_head
    NCRYPT_SUPPORTED_LENGTHS._fields_ = [
        ("dwMinLength", UInt32),
        ("dwMaxLength", UInt32),
        ("dwIncrement", UInt32),
        ("dwDefaultLength", UInt32),
    ]
    return NCRYPT_SUPPORTED_LENGTHS
def _define_NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO_head():
    class NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO(Structure):
        pass
    return NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO
def _define_NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO():
    NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO = win32more.Security.Cryptography.NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO_head
    NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO._fields_ = [
        ("dwVersion", UInt32),
        ("iExpiration", Int32),
        ("pabNonce", Byte * 32),
        ("pabPolicyRef", Byte * 32),
        ("pabHMAC", Byte * 32),
    ]
    return NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO
def _define_NCRYPT_PCP_TPM_FW_VERSION_INFO_head():
    class NCRYPT_PCP_TPM_FW_VERSION_INFO(Structure):
        pass
    return NCRYPT_PCP_TPM_FW_VERSION_INFO
def _define_NCRYPT_PCP_TPM_FW_VERSION_INFO():
    NCRYPT_PCP_TPM_FW_VERSION_INFO = win32more.Security.Cryptography.NCRYPT_PCP_TPM_FW_VERSION_INFO_head
    NCRYPT_PCP_TPM_FW_VERSION_INFO._fields_ = [
        ("major1", UInt16),
        ("major2", UInt16),
        ("minor1", UInt16),
        ("minor2", UInt16),
    ]
    return NCRYPT_PCP_TPM_FW_VERSION_INFO
def _define_NCRYPT_PCP_RAW_POLICYDIGEST_head():
    class NCRYPT_PCP_RAW_POLICYDIGEST(Structure):
        pass
    return NCRYPT_PCP_RAW_POLICYDIGEST
def _define_NCRYPT_PCP_RAW_POLICYDIGEST():
    NCRYPT_PCP_RAW_POLICYDIGEST = win32more.Security.Cryptography.NCRYPT_PCP_RAW_POLICYDIGEST_head
    NCRYPT_PCP_RAW_POLICYDIGEST._fields_ = [
        ("dwVersion", UInt32),
        ("cbDigest", UInt32),
    ]
    return NCRYPT_PCP_RAW_POLICYDIGEST
def _define_NCRYPT_KEY_BLOB_HEADER_head():
    class NCRYPT_KEY_BLOB_HEADER(Structure):
        pass
    return NCRYPT_KEY_BLOB_HEADER
def _define_NCRYPT_KEY_BLOB_HEADER():
    NCRYPT_KEY_BLOB_HEADER = win32more.Security.Cryptography.NCRYPT_KEY_BLOB_HEADER_head
    NCRYPT_KEY_BLOB_HEADER._fields_ = [
        ("cbSize", UInt32),
        ("dwMagic", UInt32),
        ("cbAlgName", UInt32),
        ("cbKeyData", UInt32),
    ]
    return NCRYPT_KEY_BLOB_HEADER
def _define_NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER_head():
    class NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER(Structure):
        pass
    return NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER
def _define_NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER():
    NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER = win32more.Security.Cryptography.NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER_head
    NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER._fields_ = [
        ("magic", UInt32),
        ("cbHeader", UInt32),
        ("cbPublic", UInt32),
        ("cbPrivate", UInt32),
        ("cbName", UInt32),
    ]
    return NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER
def _define_CRYPT_BIT_BLOB_head():
    class CRYPT_BIT_BLOB(Structure):
        pass
    return CRYPT_BIT_BLOB
def _define_CRYPT_BIT_BLOB():
    CRYPT_BIT_BLOB = win32more.Security.Cryptography.CRYPT_BIT_BLOB_head
    CRYPT_BIT_BLOB._fields_ = [
        ("cbData", UInt32),
        ("pbData", c_char_p_no),
        ("cUnusedBits", UInt32),
    ]
    return CRYPT_BIT_BLOB
def _define_CRYPT_ALGORITHM_IDENTIFIER_head():
    class CRYPT_ALGORITHM_IDENTIFIER(Structure):
        pass
    return CRYPT_ALGORITHM_IDENTIFIER
def _define_CRYPT_ALGORITHM_IDENTIFIER():
    CRYPT_ALGORITHM_IDENTIFIER = win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER_head
    CRYPT_ALGORITHM_IDENTIFIER._fields_ = [
        ("pszObjId", win32more.Foundation.PSTR),
        ("Parameters", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CRYPT_ALGORITHM_IDENTIFIER
def _define_CRYPT_OBJID_TABLE_head():
    class CRYPT_OBJID_TABLE(Structure):
        pass
    return CRYPT_OBJID_TABLE
def _define_CRYPT_OBJID_TABLE():
    CRYPT_OBJID_TABLE = win32more.Security.Cryptography.CRYPT_OBJID_TABLE_head
    CRYPT_OBJID_TABLE._fields_ = [
        ("dwAlgId", UInt32),
        ("pszObjId", win32more.Foundation.PSTR),
    ]
    return CRYPT_OBJID_TABLE
def _define_CRYPT_HASH_INFO_head():
    class CRYPT_HASH_INFO(Structure):
        pass
    return CRYPT_HASH_INFO
def _define_CRYPT_HASH_INFO():
    CRYPT_HASH_INFO = win32more.Security.Cryptography.CRYPT_HASH_INFO_head
    CRYPT_HASH_INFO._fields_ = [
        ("HashAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("Hash", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CRYPT_HASH_INFO
def _define_CERT_EXTENSION_head():
    class CERT_EXTENSION(Structure):
        pass
    return CERT_EXTENSION
def _define_CERT_EXTENSION():
    CERT_EXTENSION = win32more.Security.Cryptography.CERT_EXTENSION_head
    CERT_EXTENSION._fields_ = [
        ("pszObjId", win32more.Foundation.PSTR),
        ("fCritical", win32more.Foundation.BOOL),
        ("Value", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CERT_EXTENSION
def _define_CRYPT_ATTRIBUTE_TYPE_VALUE_head():
    class CRYPT_ATTRIBUTE_TYPE_VALUE(Structure):
        pass
    return CRYPT_ATTRIBUTE_TYPE_VALUE
def _define_CRYPT_ATTRIBUTE_TYPE_VALUE():
    CRYPT_ATTRIBUTE_TYPE_VALUE = win32more.Security.Cryptography.CRYPT_ATTRIBUTE_TYPE_VALUE_head
    CRYPT_ATTRIBUTE_TYPE_VALUE._fields_ = [
        ("pszObjId", win32more.Foundation.PSTR),
        ("Value", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CRYPT_ATTRIBUTE_TYPE_VALUE
def _define_CRYPT_ATTRIBUTE_head():
    class CRYPT_ATTRIBUTE(Structure):
        pass
    return CRYPT_ATTRIBUTE
def _define_CRYPT_ATTRIBUTE():
    CRYPT_ATTRIBUTE = win32more.Security.Cryptography.CRYPT_ATTRIBUTE_head
    CRYPT_ATTRIBUTE._fields_ = [
        ("pszObjId", win32more.Foundation.PSTR),
        ("cValue", UInt32),
        ("rgValue", POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head)),
    ]
    return CRYPT_ATTRIBUTE
def _define_CRYPT_ATTRIBUTES_head():
    class CRYPT_ATTRIBUTES(Structure):
        pass
    return CRYPT_ATTRIBUTES
def _define_CRYPT_ATTRIBUTES():
    CRYPT_ATTRIBUTES = win32more.Security.Cryptography.CRYPT_ATTRIBUTES_head
    CRYPT_ATTRIBUTES._fields_ = [
        ("cAttr", UInt32),
        ("rgAttr", POINTER(win32more.Security.Cryptography.CRYPT_ATTRIBUTE_head)),
    ]
    return CRYPT_ATTRIBUTES
def _define_CERT_RDN_ATTR_head():
    class CERT_RDN_ATTR(Structure):
        pass
    return CERT_RDN_ATTR
def _define_CERT_RDN_ATTR():
    CERT_RDN_ATTR = win32more.Security.Cryptography.CERT_RDN_ATTR_head
    CERT_RDN_ATTR._fields_ = [
        ("pszObjId", win32more.Foundation.PSTR),
        ("dwValueType", win32more.Security.Cryptography.CERT_RDN_ATTR_VALUE_TYPE),
        ("Value", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CERT_RDN_ATTR
def _define_CERT_RDN_head():
    class CERT_RDN(Structure):
        pass
    return CERT_RDN
def _define_CERT_RDN():
    CERT_RDN = win32more.Security.Cryptography.CERT_RDN_head
    CERT_RDN._fields_ = [
        ("cRDNAttr", UInt32),
        ("rgRDNAttr", POINTER(win32more.Security.Cryptography.CERT_RDN_ATTR_head)),
    ]
    return CERT_RDN
def _define_CERT_NAME_INFO_head():
    class CERT_NAME_INFO(Structure):
        pass
    return CERT_NAME_INFO
def _define_CERT_NAME_INFO():
    CERT_NAME_INFO = win32more.Security.Cryptography.CERT_NAME_INFO_head
    CERT_NAME_INFO._fields_ = [
        ("cRDN", UInt32),
        ("rgRDN", POINTER(win32more.Security.Cryptography.CERT_RDN_head)),
    ]
    return CERT_NAME_INFO
def _define_CERT_NAME_VALUE_head():
    class CERT_NAME_VALUE(Structure):
        pass
    return CERT_NAME_VALUE
def _define_CERT_NAME_VALUE():
    CERT_NAME_VALUE = win32more.Security.Cryptography.CERT_NAME_VALUE_head
    CERT_NAME_VALUE._fields_ = [
        ("dwValueType", UInt32),
        ("Value", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CERT_NAME_VALUE
def _define_CERT_PUBLIC_KEY_INFO_head():
    class CERT_PUBLIC_KEY_INFO(Structure):
        pass
    return CERT_PUBLIC_KEY_INFO
def _define_CERT_PUBLIC_KEY_INFO():
    CERT_PUBLIC_KEY_INFO = win32more.Security.Cryptography.CERT_PUBLIC_KEY_INFO_head
    CERT_PUBLIC_KEY_INFO._fields_ = [
        ("Algorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("PublicKey", win32more.Security.Cryptography.CRYPT_BIT_BLOB),
    ]
    return CERT_PUBLIC_KEY_INFO
def _define_CRYPT_ECC_PRIVATE_KEY_INFO_head():
    class CRYPT_ECC_PRIVATE_KEY_INFO(Structure):
        pass
    return CRYPT_ECC_PRIVATE_KEY_INFO
def _define_CRYPT_ECC_PRIVATE_KEY_INFO():
    CRYPT_ECC_PRIVATE_KEY_INFO = win32more.Security.Cryptography.CRYPT_ECC_PRIVATE_KEY_INFO_head
    CRYPT_ECC_PRIVATE_KEY_INFO._fields_ = [
        ("dwVersion", UInt32),
        ("PrivateKey", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("szCurveOid", win32more.Foundation.PSTR),
        ("PublicKey", win32more.Security.Cryptography.CRYPT_BIT_BLOB),
    ]
    return CRYPT_ECC_PRIVATE_KEY_INFO
def _define_CRYPT_PRIVATE_KEY_INFO_head():
    class CRYPT_PRIVATE_KEY_INFO(Structure):
        pass
    return CRYPT_PRIVATE_KEY_INFO
def _define_CRYPT_PRIVATE_KEY_INFO():
    CRYPT_PRIVATE_KEY_INFO = win32more.Security.Cryptography.CRYPT_PRIVATE_KEY_INFO_head
    CRYPT_PRIVATE_KEY_INFO._fields_ = [
        ("Version", UInt32),
        ("Algorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("PrivateKey", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("pAttributes", POINTER(win32more.Security.Cryptography.CRYPT_ATTRIBUTES_head)),
    ]
    return CRYPT_PRIVATE_KEY_INFO
def _define_CRYPT_ENCRYPTED_PRIVATE_KEY_INFO_head():
    class CRYPT_ENCRYPTED_PRIVATE_KEY_INFO(Structure):
        pass
    return CRYPT_ENCRYPTED_PRIVATE_KEY_INFO
def _define_CRYPT_ENCRYPTED_PRIVATE_KEY_INFO():
    CRYPT_ENCRYPTED_PRIVATE_KEY_INFO = win32more.Security.Cryptography.CRYPT_ENCRYPTED_PRIVATE_KEY_INFO_head
    CRYPT_ENCRYPTED_PRIVATE_KEY_INFO._fields_ = [
        ("EncryptionAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("EncryptedPrivateKey", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CRYPT_ENCRYPTED_PRIVATE_KEY_INFO
def _define_PCRYPT_DECRYPT_PRIVATE_KEY_FUNC():
    return CFUNCTYPE(win32more.Foundation.BOOL,win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER,win32more.Security.Cryptography.CRYPTOAPI_BLOB,c_char_p_no,POINTER(UInt32),c_void_p, use_last_error=False)
def _define_PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC():
    return CFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER_head),POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head),c_char_p_no,POINTER(UInt32),c_void_p, use_last_error=False)
def _define_PCRYPT_RESOLVE_HCRYPTPROV_FUNC():
    return CFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPT_PRIVATE_KEY_INFO_head),POINTER(UIntPtr),c_void_p, use_last_error=False)
def _define_CRYPT_PKCS8_IMPORT_PARAMS_head():
    class CRYPT_PKCS8_IMPORT_PARAMS(Structure):
        pass
    return CRYPT_PKCS8_IMPORT_PARAMS
def _define_CRYPT_PKCS8_IMPORT_PARAMS():
    CRYPT_PKCS8_IMPORT_PARAMS = win32more.Security.Cryptography.CRYPT_PKCS8_IMPORT_PARAMS_head
    CRYPT_PKCS8_IMPORT_PARAMS._fields_ = [
        ("PrivateKey", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("pResolvehCryptProvFunc", win32more.Security.Cryptography.PCRYPT_RESOLVE_HCRYPTPROV_FUNC),
        ("pVoidResolveFunc", c_void_p),
        ("pDecryptPrivateKeyFunc", win32more.Security.Cryptography.PCRYPT_DECRYPT_PRIVATE_KEY_FUNC),
        ("pVoidDecryptFunc", c_void_p),
    ]
    return CRYPT_PKCS8_IMPORT_PARAMS
def _define_CRYPT_PKCS8_EXPORT_PARAMS_head():
    class CRYPT_PKCS8_EXPORT_PARAMS(Structure):
        pass
    return CRYPT_PKCS8_EXPORT_PARAMS
def _define_CRYPT_PKCS8_EXPORT_PARAMS():
    CRYPT_PKCS8_EXPORT_PARAMS = win32more.Security.Cryptography.CRYPT_PKCS8_EXPORT_PARAMS_head
    CRYPT_PKCS8_EXPORT_PARAMS._fields_ = [
        ("hCryptProv", UIntPtr),
        ("dwKeySpec", UInt32),
        ("pszPrivateKeyObjId", win32more.Foundation.PSTR),
        ("pEncryptPrivateKeyFunc", win32more.Security.Cryptography.PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC),
        ("pVoidEncryptFunc", c_void_p),
    ]
    return CRYPT_PKCS8_EXPORT_PARAMS
def _define_CERT_INFO_head():
    class CERT_INFO(Structure):
        pass
    return CERT_INFO
def _define_CERT_INFO():
    CERT_INFO = win32more.Security.Cryptography.CERT_INFO_head
    CERT_INFO._fields_ = [
        ("dwVersion", UInt32),
        ("SerialNumber", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("SignatureAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("Issuer", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("NotBefore", win32more.Foundation.FILETIME),
        ("NotAfter", win32more.Foundation.FILETIME),
        ("Subject", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("SubjectPublicKeyInfo", win32more.Security.Cryptography.CERT_PUBLIC_KEY_INFO),
        ("IssuerUniqueId", win32more.Security.Cryptography.CRYPT_BIT_BLOB),
        ("SubjectUniqueId", win32more.Security.Cryptography.CRYPT_BIT_BLOB),
        ("cExtension", UInt32),
        ("rgExtension", POINTER(win32more.Security.Cryptography.CERT_EXTENSION_head)),
    ]
    return CERT_INFO
def _define_CRL_ENTRY_head():
    class CRL_ENTRY(Structure):
        pass
    return CRL_ENTRY
def _define_CRL_ENTRY():
    CRL_ENTRY = win32more.Security.Cryptography.CRL_ENTRY_head
    CRL_ENTRY._fields_ = [
        ("SerialNumber", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("RevocationDate", win32more.Foundation.FILETIME),
        ("cExtension", UInt32),
        ("rgExtension", POINTER(win32more.Security.Cryptography.CERT_EXTENSION_head)),
    ]
    return CRL_ENTRY
def _define_CRL_INFO_head():
    class CRL_INFO(Structure):
        pass
    return CRL_INFO
def _define_CRL_INFO():
    CRL_INFO = win32more.Security.Cryptography.CRL_INFO_head
    CRL_INFO._fields_ = [
        ("dwVersion", UInt32),
        ("SignatureAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("Issuer", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("ThisUpdate", win32more.Foundation.FILETIME),
        ("NextUpdate", win32more.Foundation.FILETIME),
        ("cCRLEntry", UInt32),
        ("rgCRLEntry", POINTER(win32more.Security.Cryptography.CRL_ENTRY_head)),
        ("cExtension", UInt32),
        ("rgExtension", POINTER(win32more.Security.Cryptography.CERT_EXTENSION_head)),
    ]
    return CRL_INFO
def _define_CERT_OR_CRL_BLOB_head():
    class CERT_OR_CRL_BLOB(Structure):
        pass
    return CERT_OR_CRL_BLOB
def _define_CERT_OR_CRL_BLOB():
    CERT_OR_CRL_BLOB = win32more.Security.Cryptography.CERT_OR_CRL_BLOB_head
    CERT_OR_CRL_BLOB._fields_ = [
        ("dwChoice", UInt32),
        ("cbEncoded", UInt32),
        ("pbEncoded", c_char_p_no),
    ]
    return CERT_OR_CRL_BLOB
def _define_CERT_OR_CRL_BUNDLE_head():
    class CERT_OR_CRL_BUNDLE(Structure):
        pass
    return CERT_OR_CRL_BUNDLE
def _define_CERT_OR_CRL_BUNDLE():
    CERT_OR_CRL_BUNDLE = win32more.Security.Cryptography.CERT_OR_CRL_BUNDLE_head
    CERT_OR_CRL_BUNDLE._fields_ = [
        ("cItem", UInt32),
        ("rgItem", POINTER(win32more.Security.Cryptography.CERT_OR_CRL_BLOB_head)),
    ]
    return CERT_OR_CRL_BUNDLE
def _define_CERT_REQUEST_INFO_head():
    class CERT_REQUEST_INFO(Structure):
        pass
    return CERT_REQUEST_INFO
def _define_CERT_REQUEST_INFO():
    CERT_REQUEST_INFO = win32more.Security.Cryptography.CERT_REQUEST_INFO_head
    CERT_REQUEST_INFO._fields_ = [
        ("dwVersion", UInt32),
        ("Subject", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("SubjectPublicKeyInfo", win32more.Security.Cryptography.CERT_PUBLIC_KEY_INFO),
        ("cAttribute", UInt32),
        ("rgAttribute", POINTER(win32more.Security.Cryptography.CRYPT_ATTRIBUTE_head)),
    ]
    return CERT_REQUEST_INFO
def _define_CERT_KEYGEN_REQUEST_INFO_head():
    class CERT_KEYGEN_REQUEST_INFO(Structure):
        pass
    return CERT_KEYGEN_REQUEST_INFO
def _define_CERT_KEYGEN_REQUEST_INFO():
    CERT_KEYGEN_REQUEST_INFO = win32more.Security.Cryptography.CERT_KEYGEN_REQUEST_INFO_head
    CERT_KEYGEN_REQUEST_INFO._fields_ = [
        ("dwVersion", UInt32),
        ("SubjectPublicKeyInfo", win32more.Security.Cryptography.CERT_PUBLIC_KEY_INFO),
        ("pwszChallengeString", win32more.Foundation.PWSTR),
    ]
    return CERT_KEYGEN_REQUEST_INFO
def _define_CERT_SIGNED_CONTENT_INFO_head():
    class CERT_SIGNED_CONTENT_INFO(Structure):
        pass
    return CERT_SIGNED_CONTENT_INFO
def _define_CERT_SIGNED_CONTENT_INFO():
    CERT_SIGNED_CONTENT_INFO = win32more.Security.Cryptography.CERT_SIGNED_CONTENT_INFO_head
    CERT_SIGNED_CONTENT_INFO._fields_ = [
        ("ToBeSigned", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("SignatureAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("Signature", win32more.Security.Cryptography.CRYPT_BIT_BLOB),
    ]
    return CERT_SIGNED_CONTENT_INFO
def _define_CTL_USAGE_head():
    class CTL_USAGE(Structure):
        pass
    return CTL_USAGE
def _define_CTL_USAGE():
    CTL_USAGE = win32more.Security.Cryptography.CTL_USAGE_head
    CTL_USAGE._fields_ = [
        ("cUsageIdentifier", UInt32),
        ("rgpszUsageIdentifier", POINTER(win32more.Foundation.PSTR)),
    ]
    return CTL_USAGE
def _define_CTL_ENTRY_head():
    class CTL_ENTRY(Structure):
        pass
    return CTL_ENTRY
def _define_CTL_ENTRY():
    CTL_ENTRY = win32more.Security.Cryptography.CTL_ENTRY_head
    CTL_ENTRY._fields_ = [
        ("SubjectIdentifier", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("cAttribute", UInt32),
        ("rgAttribute", POINTER(win32more.Security.Cryptography.CRYPT_ATTRIBUTE_head)),
    ]
    return CTL_ENTRY
def _define_CTL_INFO_head():
    class CTL_INFO(Structure):
        pass
    return CTL_INFO
def _define_CTL_INFO():
    CTL_INFO = win32more.Security.Cryptography.CTL_INFO_head
    CTL_INFO._fields_ = [
        ("dwVersion", UInt32),
        ("SubjectUsage", win32more.Security.Cryptography.CTL_USAGE),
        ("ListIdentifier", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("SequenceNumber", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("ThisUpdate", win32more.Foundation.FILETIME),
        ("NextUpdate", win32more.Foundation.FILETIME),
        ("SubjectAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("cCTLEntry", UInt32),
        ("rgCTLEntry", POINTER(win32more.Security.Cryptography.CTL_ENTRY_head)),
        ("cExtension", UInt32),
        ("rgExtension", POINTER(win32more.Security.Cryptography.CERT_EXTENSION_head)),
    ]
    return CTL_INFO
def _define_CRYPT_TIME_STAMP_REQUEST_INFO_head():
    class CRYPT_TIME_STAMP_REQUEST_INFO(Structure):
        pass
    return CRYPT_TIME_STAMP_REQUEST_INFO
def _define_CRYPT_TIME_STAMP_REQUEST_INFO():
    CRYPT_TIME_STAMP_REQUEST_INFO = win32more.Security.Cryptography.CRYPT_TIME_STAMP_REQUEST_INFO_head
    CRYPT_TIME_STAMP_REQUEST_INFO._fields_ = [
        ("pszTimeStampAlgorithm", win32more.Foundation.PSTR),
        ("pszContentType", win32more.Foundation.PSTR),
        ("Content", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("cAttribute", UInt32),
        ("rgAttribute", POINTER(win32more.Security.Cryptography.CRYPT_ATTRIBUTE_head)),
    ]
    return CRYPT_TIME_STAMP_REQUEST_INFO
def _define_CRYPT_ENROLLMENT_NAME_VALUE_PAIR_head():
    class CRYPT_ENROLLMENT_NAME_VALUE_PAIR(Structure):
        pass
    return CRYPT_ENROLLMENT_NAME_VALUE_PAIR
def _define_CRYPT_ENROLLMENT_NAME_VALUE_PAIR():
    CRYPT_ENROLLMENT_NAME_VALUE_PAIR = win32more.Security.Cryptography.CRYPT_ENROLLMENT_NAME_VALUE_PAIR_head
    CRYPT_ENROLLMENT_NAME_VALUE_PAIR._fields_ = [
        ("pwszName", win32more.Foundation.PWSTR),
        ("pwszValue", win32more.Foundation.PWSTR),
    ]
    return CRYPT_ENROLLMENT_NAME_VALUE_PAIR
def _define_CRYPT_CSP_PROVIDER_head():
    class CRYPT_CSP_PROVIDER(Structure):
        pass
    return CRYPT_CSP_PROVIDER
def _define_CRYPT_CSP_PROVIDER():
    CRYPT_CSP_PROVIDER = win32more.Security.Cryptography.CRYPT_CSP_PROVIDER_head
    CRYPT_CSP_PROVIDER._fields_ = [
        ("dwKeySpec", UInt32),
        ("pwszProviderName", win32more.Foundation.PWSTR),
        ("Signature", win32more.Security.Cryptography.CRYPT_BIT_BLOB),
    ]
    return CRYPT_CSP_PROVIDER
def _define_PFN_CRYPT_ALLOC():
    return CFUNCTYPE(c_void_p,UIntPtr, use_last_error=False)
def _define_PFN_CRYPT_FREE():
    return CFUNCTYPE(Void,c_void_p, use_last_error=False)
def _define_CRYPT_ENCODE_PARA_head():
    class CRYPT_ENCODE_PARA(Structure):
        pass
    return CRYPT_ENCODE_PARA
def _define_CRYPT_ENCODE_PARA():
    CRYPT_ENCODE_PARA = win32more.Security.Cryptography.CRYPT_ENCODE_PARA_head
    CRYPT_ENCODE_PARA._fields_ = [
        ("cbSize", UInt32),
        ("pfnAlloc", win32more.Security.Cryptography.PFN_CRYPT_ALLOC),
        ("pfnFree", win32more.Security.Cryptography.PFN_CRYPT_FREE),
    ]
    return CRYPT_ENCODE_PARA
def _define_CRYPT_DECODE_PARA_head():
    class CRYPT_DECODE_PARA(Structure):
        pass
    return CRYPT_DECODE_PARA
def _define_CRYPT_DECODE_PARA():
    CRYPT_DECODE_PARA = win32more.Security.Cryptography.CRYPT_DECODE_PARA_head
    CRYPT_DECODE_PARA._fields_ = [
        ("cbSize", UInt32),
        ("pfnAlloc", win32more.Security.Cryptography.PFN_CRYPT_ALLOC),
        ("pfnFree", win32more.Security.Cryptography.PFN_CRYPT_FREE),
    ]
    return CRYPT_DECODE_PARA
def _define_CERT_EXTENSIONS_head():
    class CERT_EXTENSIONS(Structure):
        pass
    return CERT_EXTENSIONS
def _define_CERT_EXTENSIONS():
    CERT_EXTENSIONS = win32more.Security.Cryptography.CERT_EXTENSIONS_head
    CERT_EXTENSIONS._fields_ = [
        ("cExtension", UInt32),
        ("rgExtension", POINTER(win32more.Security.Cryptography.CERT_EXTENSION_head)),
    ]
    return CERT_EXTENSIONS
def _define_CERT_AUTHORITY_KEY_ID_INFO_head():
    class CERT_AUTHORITY_KEY_ID_INFO(Structure):
        pass
    return CERT_AUTHORITY_KEY_ID_INFO
def _define_CERT_AUTHORITY_KEY_ID_INFO():
    CERT_AUTHORITY_KEY_ID_INFO = win32more.Security.Cryptography.CERT_AUTHORITY_KEY_ID_INFO_head
    CERT_AUTHORITY_KEY_ID_INFO._fields_ = [
        ("KeyId", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("CertIssuer", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("CertSerialNumber", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CERT_AUTHORITY_KEY_ID_INFO
def _define_CERT_PRIVATE_KEY_VALIDITY_head():
    class CERT_PRIVATE_KEY_VALIDITY(Structure):
        pass
    return CERT_PRIVATE_KEY_VALIDITY
def _define_CERT_PRIVATE_KEY_VALIDITY():
    CERT_PRIVATE_KEY_VALIDITY = win32more.Security.Cryptography.CERT_PRIVATE_KEY_VALIDITY_head
    CERT_PRIVATE_KEY_VALIDITY._fields_ = [
        ("NotBefore", win32more.Foundation.FILETIME),
        ("NotAfter", win32more.Foundation.FILETIME),
    ]
    return CERT_PRIVATE_KEY_VALIDITY
def _define_CERT_KEY_ATTRIBUTES_INFO_head():
    class CERT_KEY_ATTRIBUTES_INFO(Structure):
        pass
    return CERT_KEY_ATTRIBUTES_INFO
def _define_CERT_KEY_ATTRIBUTES_INFO():
    CERT_KEY_ATTRIBUTES_INFO = win32more.Security.Cryptography.CERT_KEY_ATTRIBUTES_INFO_head
    CERT_KEY_ATTRIBUTES_INFO._fields_ = [
        ("KeyId", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("IntendedKeyUsage", win32more.Security.Cryptography.CRYPT_BIT_BLOB),
        ("pPrivateKeyUsagePeriod", POINTER(win32more.Security.Cryptography.CERT_PRIVATE_KEY_VALIDITY_head)),
    ]
    return CERT_KEY_ATTRIBUTES_INFO
def _define_CERT_POLICY_ID_head():
    class CERT_POLICY_ID(Structure):
        pass
    return CERT_POLICY_ID
def _define_CERT_POLICY_ID():
    CERT_POLICY_ID = win32more.Security.Cryptography.CERT_POLICY_ID_head
    CERT_POLICY_ID._fields_ = [
        ("cCertPolicyElementId", UInt32),
        ("rgpszCertPolicyElementId", POINTER(win32more.Foundation.PSTR)),
    ]
    return CERT_POLICY_ID
def _define_CERT_KEY_USAGE_RESTRICTION_INFO_head():
    class CERT_KEY_USAGE_RESTRICTION_INFO(Structure):
        pass
    return CERT_KEY_USAGE_RESTRICTION_INFO
def _define_CERT_KEY_USAGE_RESTRICTION_INFO():
    CERT_KEY_USAGE_RESTRICTION_INFO = win32more.Security.Cryptography.CERT_KEY_USAGE_RESTRICTION_INFO_head
    CERT_KEY_USAGE_RESTRICTION_INFO._fields_ = [
        ("cCertPolicyId", UInt32),
        ("rgCertPolicyId", POINTER(win32more.Security.Cryptography.CERT_POLICY_ID_head)),
        ("RestrictedKeyUsage", win32more.Security.Cryptography.CRYPT_BIT_BLOB),
    ]
    return CERT_KEY_USAGE_RESTRICTION_INFO
def _define_CERT_OTHER_NAME_head():
    class CERT_OTHER_NAME(Structure):
        pass
    return CERT_OTHER_NAME
def _define_CERT_OTHER_NAME():
    CERT_OTHER_NAME = win32more.Security.Cryptography.CERT_OTHER_NAME_head
    CERT_OTHER_NAME._fields_ = [
        ("pszObjId", win32more.Foundation.PSTR),
        ("Value", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CERT_OTHER_NAME
def _define_CERT_ALT_NAME_ENTRY_head():
    class CERT_ALT_NAME_ENTRY(Structure):
        pass
    return CERT_ALT_NAME_ENTRY
def _define_CERT_ALT_NAME_ENTRY():
    CERT_ALT_NAME_ENTRY = win32more.Security.Cryptography.CERT_ALT_NAME_ENTRY_head
    class CERT_ALT_NAME_ENTRY__Anonymous_e__Union(Union):
        pass
    CERT_ALT_NAME_ENTRY__Anonymous_e__Union._fields_ = [
        ("pOtherName", POINTER(win32more.Security.Cryptography.CERT_OTHER_NAME_head)),
        ("pwszRfc822Name", win32more.Foundation.PWSTR),
        ("pwszDNSName", win32more.Foundation.PWSTR),
        ("DirectoryName", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("pwszURL", win32more.Foundation.PWSTR),
        ("IPAddress", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("pszRegisteredID", win32more.Foundation.PSTR),
    ]
    CERT_ALT_NAME_ENTRY._anonymous_ = [
        'Anonymous',
    ]
    CERT_ALT_NAME_ENTRY._fields_ = [
        ("dwAltNameChoice", UInt32),
        ("Anonymous", CERT_ALT_NAME_ENTRY__Anonymous_e__Union),
    ]
    return CERT_ALT_NAME_ENTRY
def _define_CERT_ALT_NAME_INFO_head():
    class CERT_ALT_NAME_INFO(Structure):
        pass
    return CERT_ALT_NAME_INFO
def _define_CERT_ALT_NAME_INFO():
    CERT_ALT_NAME_INFO = win32more.Security.Cryptography.CERT_ALT_NAME_INFO_head
    CERT_ALT_NAME_INFO._fields_ = [
        ("cAltEntry", UInt32),
        ("rgAltEntry", POINTER(win32more.Security.Cryptography.CERT_ALT_NAME_ENTRY_head)),
    ]
    return CERT_ALT_NAME_INFO
def _define_CERT_BASIC_CONSTRAINTS_INFO_head():
    class CERT_BASIC_CONSTRAINTS_INFO(Structure):
        pass
    return CERT_BASIC_CONSTRAINTS_INFO
def _define_CERT_BASIC_CONSTRAINTS_INFO():
    CERT_BASIC_CONSTRAINTS_INFO = win32more.Security.Cryptography.CERT_BASIC_CONSTRAINTS_INFO_head
    CERT_BASIC_CONSTRAINTS_INFO._fields_ = [
        ("SubjectType", win32more.Security.Cryptography.CRYPT_BIT_BLOB),
        ("fPathLenConstraint", win32more.Foundation.BOOL),
        ("dwPathLenConstraint", UInt32),
        ("cSubtreesConstraint", UInt32),
        ("rgSubtreesConstraint", POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head)),
    ]
    return CERT_BASIC_CONSTRAINTS_INFO
def _define_CERT_BASIC_CONSTRAINTS2_INFO_head():
    class CERT_BASIC_CONSTRAINTS2_INFO(Structure):
        pass
    return CERT_BASIC_CONSTRAINTS2_INFO
def _define_CERT_BASIC_CONSTRAINTS2_INFO():
    CERT_BASIC_CONSTRAINTS2_INFO = win32more.Security.Cryptography.CERT_BASIC_CONSTRAINTS2_INFO_head
    CERT_BASIC_CONSTRAINTS2_INFO._fields_ = [
        ("fCA", win32more.Foundation.BOOL),
        ("fPathLenConstraint", win32more.Foundation.BOOL),
        ("dwPathLenConstraint", UInt32),
    ]
    return CERT_BASIC_CONSTRAINTS2_INFO
def _define_CERT_POLICY_QUALIFIER_INFO_head():
    class CERT_POLICY_QUALIFIER_INFO(Structure):
        pass
    return CERT_POLICY_QUALIFIER_INFO
def _define_CERT_POLICY_QUALIFIER_INFO():
    CERT_POLICY_QUALIFIER_INFO = win32more.Security.Cryptography.CERT_POLICY_QUALIFIER_INFO_head
    CERT_POLICY_QUALIFIER_INFO._fields_ = [
        ("pszPolicyQualifierId", win32more.Foundation.PSTR),
        ("Qualifier", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CERT_POLICY_QUALIFIER_INFO
def _define_CERT_POLICY_INFO_head():
    class CERT_POLICY_INFO(Structure):
        pass
    return CERT_POLICY_INFO
def _define_CERT_POLICY_INFO():
    CERT_POLICY_INFO = win32more.Security.Cryptography.CERT_POLICY_INFO_head
    CERT_POLICY_INFO._fields_ = [
        ("pszPolicyIdentifier", win32more.Foundation.PSTR),
        ("cPolicyQualifier", UInt32),
        ("rgPolicyQualifier", POINTER(win32more.Security.Cryptography.CERT_POLICY_QUALIFIER_INFO_head)),
    ]
    return CERT_POLICY_INFO
def _define_CERT_POLICIES_INFO_head():
    class CERT_POLICIES_INFO(Structure):
        pass
    return CERT_POLICIES_INFO
def _define_CERT_POLICIES_INFO():
    CERT_POLICIES_INFO = win32more.Security.Cryptography.CERT_POLICIES_INFO_head
    CERT_POLICIES_INFO._fields_ = [
        ("cPolicyInfo", UInt32),
        ("rgPolicyInfo", POINTER(win32more.Security.Cryptography.CERT_POLICY_INFO_head)),
    ]
    return CERT_POLICIES_INFO
def _define_CERT_POLICY_QUALIFIER_NOTICE_REFERENCE_head():
    class CERT_POLICY_QUALIFIER_NOTICE_REFERENCE(Structure):
        pass
    return CERT_POLICY_QUALIFIER_NOTICE_REFERENCE
def _define_CERT_POLICY_QUALIFIER_NOTICE_REFERENCE():
    CERT_POLICY_QUALIFIER_NOTICE_REFERENCE = win32more.Security.Cryptography.CERT_POLICY_QUALIFIER_NOTICE_REFERENCE_head
    CERT_POLICY_QUALIFIER_NOTICE_REFERENCE._fields_ = [
        ("pszOrganization", win32more.Foundation.PSTR),
        ("cNoticeNumbers", UInt32),
        ("rgNoticeNumbers", POINTER(Int32)),
    ]
    return CERT_POLICY_QUALIFIER_NOTICE_REFERENCE
def _define_CERT_POLICY_QUALIFIER_USER_NOTICE_head():
    class CERT_POLICY_QUALIFIER_USER_NOTICE(Structure):
        pass
    return CERT_POLICY_QUALIFIER_USER_NOTICE
def _define_CERT_POLICY_QUALIFIER_USER_NOTICE():
    CERT_POLICY_QUALIFIER_USER_NOTICE = win32more.Security.Cryptography.CERT_POLICY_QUALIFIER_USER_NOTICE_head
    CERT_POLICY_QUALIFIER_USER_NOTICE._fields_ = [
        ("pNoticeReference", POINTER(win32more.Security.Cryptography.CERT_POLICY_QUALIFIER_NOTICE_REFERENCE_head)),
        ("pszDisplayText", win32more.Foundation.PWSTR),
    ]
    return CERT_POLICY_QUALIFIER_USER_NOTICE
def _define_CPS_URLS_head():
    class CPS_URLS(Structure):
        pass
    return CPS_URLS
def _define_CPS_URLS():
    CPS_URLS = win32more.Security.Cryptography.CPS_URLS_head
    CPS_URLS._fields_ = [
        ("pszURL", win32more.Foundation.PWSTR),
        ("pAlgorithm", POINTER(win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER_head)),
        ("pDigest", POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head)),
    ]
    return CPS_URLS
def _define_CERT_POLICY95_QUALIFIER1_head():
    class CERT_POLICY95_QUALIFIER1(Structure):
        pass
    return CERT_POLICY95_QUALIFIER1
def _define_CERT_POLICY95_QUALIFIER1():
    CERT_POLICY95_QUALIFIER1 = win32more.Security.Cryptography.CERT_POLICY95_QUALIFIER1_head
    CERT_POLICY95_QUALIFIER1._fields_ = [
        ("pszPracticesReference", win32more.Foundation.PWSTR),
        ("pszNoticeIdentifier", win32more.Foundation.PSTR),
        ("pszNSINoticeIdentifier", win32more.Foundation.PSTR),
        ("cCPSURLs", UInt32),
        ("rgCPSURLs", POINTER(win32more.Security.Cryptography.CPS_URLS_head)),
    ]
    return CERT_POLICY95_QUALIFIER1
def _define_CERT_POLICY_MAPPING_head():
    class CERT_POLICY_MAPPING(Structure):
        pass
    return CERT_POLICY_MAPPING
def _define_CERT_POLICY_MAPPING():
    CERT_POLICY_MAPPING = win32more.Security.Cryptography.CERT_POLICY_MAPPING_head
    CERT_POLICY_MAPPING._fields_ = [
        ("pszIssuerDomainPolicy", win32more.Foundation.PSTR),
        ("pszSubjectDomainPolicy", win32more.Foundation.PSTR),
    ]
    return CERT_POLICY_MAPPING
def _define_CERT_POLICY_MAPPINGS_INFO_head():
    class CERT_POLICY_MAPPINGS_INFO(Structure):
        pass
    return CERT_POLICY_MAPPINGS_INFO
def _define_CERT_POLICY_MAPPINGS_INFO():
    CERT_POLICY_MAPPINGS_INFO = win32more.Security.Cryptography.CERT_POLICY_MAPPINGS_INFO_head
    CERT_POLICY_MAPPINGS_INFO._fields_ = [
        ("cPolicyMapping", UInt32),
        ("rgPolicyMapping", POINTER(win32more.Security.Cryptography.CERT_POLICY_MAPPING_head)),
    ]
    return CERT_POLICY_MAPPINGS_INFO
def _define_CERT_POLICY_CONSTRAINTS_INFO_head():
    class CERT_POLICY_CONSTRAINTS_INFO(Structure):
        pass
    return CERT_POLICY_CONSTRAINTS_INFO
def _define_CERT_POLICY_CONSTRAINTS_INFO():
    CERT_POLICY_CONSTRAINTS_INFO = win32more.Security.Cryptography.CERT_POLICY_CONSTRAINTS_INFO_head
    CERT_POLICY_CONSTRAINTS_INFO._fields_ = [
        ("fRequireExplicitPolicy", win32more.Foundation.BOOL),
        ("dwRequireExplicitPolicySkipCerts", UInt32),
        ("fInhibitPolicyMapping", win32more.Foundation.BOOL),
        ("dwInhibitPolicyMappingSkipCerts", UInt32),
    ]
    return CERT_POLICY_CONSTRAINTS_INFO
def _define_CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY_head():
    class CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY(Structure):
        pass
    return CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY
def _define_CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY():
    CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY = win32more.Security.Cryptography.CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY_head
    CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY._fields_ = [
        ("pszObjId", win32more.Foundation.PSTR),
        ("cValue", UInt32),
        ("rgValue", POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head)),
    ]
    return CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY
def _define_CRYPT_CONTENT_INFO_head():
    class CRYPT_CONTENT_INFO(Structure):
        pass
    return CRYPT_CONTENT_INFO
def _define_CRYPT_CONTENT_INFO():
    CRYPT_CONTENT_INFO = win32more.Security.Cryptography.CRYPT_CONTENT_INFO_head
    CRYPT_CONTENT_INFO._fields_ = [
        ("pszObjId", win32more.Foundation.PSTR),
        ("Content", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CRYPT_CONTENT_INFO
def _define_CRYPT_SEQUENCE_OF_ANY_head():
    class CRYPT_SEQUENCE_OF_ANY(Structure):
        pass
    return CRYPT_SEQUENCE_OF_ANY
def _define_CRYPT_SEQUENCE_OF_ANY():
    CRYPT_SEQUENCE_OF_ANY = win32more.Security.Cryptography.CRYPT_SEQUENCE_OF_ANY_head
    CRYPT_SEQUENCE_OF_ANY._fields_ = [
        ("cValue", UInt32),
        ("rgValue", POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head)),
    ]
    return CRYPT_SEQUENCE_OF_ANY
def _define_CERT_AUTHORITY_KEY_ID2_INFO_head():
    class CERT_AUTHORITY_KEY_ID2_INFO(Structure):
        pass
    return CERT_AUTHORITY_KEY_ID2_INFO
def _define_CERT_AUTHORITY_KEY_ID2_INFO():
    CERT_AUTHORITY_KEY_ID2_INFO = win32more.Security.Cryptography.CERT_AUTHORITY_KEY_ID2_INFO_head
    CERT_AUTHORITY_KEY_ID2_INFO._fields_ = [
        ("KeyId", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("AuthorityCertIssuer", win32more.Security.Cryptography.CERT_ALT_NAME_INFO),
        ("AuthorityCertSerialNumber", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CERT_AUTHORITY_KEY_ID2_INFO
def _define_CERT_ACCESS_DESCRIPTION_head():
    class CERT_ACCESS_DESCRIPTION(Structure):
        pass
    return CERT_ACCESS_DESCRIPTION
def _define_CERT_ACCESS_DESCRIPTION():
    CERT_ACCESS_DESCRIPTION = win32more.Security.Cryptography.CERT_ACCESS_DESCRIPTION_head
    CERT_ACCESS_DESCRIPTION._fields_ = [
        ("pszAccessMethod", win32more.Foundation.PSTR),
        ("AccessLocation", win32more.Security.Cryptography.CERT_ALT_NAME_ENTRY),
    ]
    return CERT_ACCESS_DESCRIPTION
def _define_CERT_AUTHORITY_INFO_ACCESS_head():
    class CERT_AUTHORITY_INFO_ACCESS(Structure):
        pass
    return CERT_AUTHORITY_INFO_ACCESS
def _define_CERT_AUTHORITY_INFO_ACCESS():
    CERT_AUTHORITY_INFO_ACCESS = win32more.Security.Cryptography.CERT_AUTHORITY_INFO_ACCESS_head
    CERT_AUTHORITY_INFO_ACCESS._fields_ = [
        ("cAccDescr", UInt32),
        ("rgAccDescr", POINTER(win32more.Security.Cryptography.CERT_ACCESS_DESCRIPTION_head)),
    ]
    return CERT_AUTHORITY_INFO_ACCESS
def _define_CRL_DIST_POINT_NAME_head():
    class CRL_DIST_POINT_NAME(Structure):
        pass
    return CRL_DIST_POINT_NAME
def _define_CRL_DIST_POINT_NAME():
    CRL_DIST_POINT_NAME = win32more.Security.Cryptography.CRL_DIST_POINT_NAME_head
    class CRL_DIST_POINT_NAME__Anonymous_e__Union(Union):
        pass
    CRL_DIST_POINT_NAME__Anonymous_e__Union._fields_ = [
        ("FullName", win32more.Security.Cryptography.CERT_ALT_NAME_INFO),
    ]
    CRL_DIST_POINT_NAME._anonymous_ = [
        'Anonymous',
    ]
    CRL_DIST_POINT_NAME._fields_ = [
        ("dwDistPointNameChoice", UInt32),
        ("Anonymous", CRL_DIST_POINT_NAME__Anonymous_e__Union),
    ]
    return CRL_DIST_POINT_NAME
def _define_CRL_DIST_POINT_head():
    class CRL_DIST_POINT(Structure):
        pass
    return CRL_DIST_POINT
def _define_CRL_DIST_POINT():
    CRL_DIST_POINT = win32more.Security.Cryptography.CRL_DIST_POINT_head
    CRL_DIST_POINT._fields_ = [
        ("DistPointName", win32more.Security.Cryptography.CRL_DIST_POINT_NAME),
        ("ReasonFlags", win32more.Security.Cryptography.CRYPT_BIT_BLOB),
        ("CRLIssuer", win32more.Security.Cryptography.CERT_ALT_NAME_INFO),
    ]
    return CRL_DIST_POINT
def _define_CRL_DIST_POINTS_INFO_head():
    class CRL_DIST_POINTS_INFO(Structure):
        pass
    return CRL_DIST_POINTS_INFO
def _define_CRL_DIST_POINTS_INFO():
    CRL_DIST_POINTS_INFO = win32more.Security.Cryptography.CRL_DIST_POINTS_INFO_head
    CRL_DIST_POINTS_INFO._fields_ = [
        ("cDistPoint", UInt32),
        ("rgDistPoint", POINTER(win32more.Security.Cryptography.CRL_DIST_POINT_head)),
    ]
    return CRL_DIST_POINTS_INFO
def _define_CROSS_CERT_DIST_POINTS_INFO_head():
    class CROSS_CERT_DIST_POINTS_INFO(Structure):
        pass
    return CROSS_CERT_DIST_POINTS_INFO
def _define_CROSS_CERT_DIST_POINTS_INFO():
    CROSS_CERT_DIST_POINTS_INFO = win32more.Security.Cryptography.CROSS_CERT_DIST_POINTS_INFO_head
    CROSS_CERT_DIST_POINTS_INFO._fields_ = [
        ("dwSyncDeltaTime", UInt32),
        ("cDistPoint", UInt32),
        ("rgDistPoint", POINTER(win32more.Security.Cryptography.CERT_ALT_NAME_INFO_head)),
    ]
    return CROSS_CERT_DIST_POINTS_INFO
def _define_CERT_PAIR_head():
    class CERT_PAIR(Structure):
        pass
    return CERT_PAIR
def _define_CERT_PAIR():
    CERT_PAIR = win32more.Security.Cryptography.CERT_PAIR_head
    CERT_PAIR._fields_ = [
        ("Forward", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("Reverse", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CERT_PAIR
def _define_CRL_ISSUING_DIST_POINT_head():
    class CRL_ISSUING_DIST_POINT(Structure):
        pass
    return CRL_ISSUING_DIST_POINT
def _define_CRL_ISSUING_DIST_POINT():
    CRL_ISSUING_DIST_POINT = win32more.Security.Cryptography.CRL_ISSUING_DIST_POINT_head
    CRL_ISSUING_DIST_POINT._fields_ = [
        ("DistPointName", win32more.Security.Cryptography.CRL_DIST_POINT_NAME),
        ("fOnlyContainsUserCerts", win32more.Foundation.BOOL),
        ("fOnlyContainsCACerts", win32more.Foundation.BOOL),
        ("OnlySomeReasonFlags", win32more.Security.Cryptography.CRYPT_BIT_BLOB),
        ("fIndirectCRL", win32more.Foundation.BOOL),
    ]
    return CRL_ISSUING_DIST_POINT
def _define_CERT_GENERAL_SUBTREE_head():
    class CERT_GENERAL_SUBTREE(Structure):
        pass
    return CERT_GENERAL_SUBTREE
def _define_CERT_GENERAL_SUBTREE():
    CERT_GENERAL_SUBTREE = win32more.Security.Cryptography.CERT_GENERAL_SUBTREE_head
    CERT_GENERAL_SUBTREE._fields_ = [
        ("Base", win32more.Security.Cryptography.CERT_ALT_NAME_ENTRY),
        ("dwMinimum", UInt32),
        ("fMaximum", win32more.Foundation.BOOL),
        ("dwMaximum", UInt32),
    ]
    return CERT_GENERAL_SUBTREE
def _define_CERT_NAME_CONSTRAINTS_INFO_head():
    class CERT_NAME_CONSTRAINTS_INFO(Structure):
        pass
    return CERT_NAME_CONSTRAINTS_INFO
def _define_CERT_NAME_CONSTRAINTS_INFO():
    CERT_NAME_CONSTRAINTS_INFO = win32more.Security.Cryptography.CERT_NAME_CONSTRAINTS_INFO_head
    CERT_NAME_CONSTRAINTS_INFO._fields_ = [
        ("cPermittedSubtree", UInt32),
        ("rgPermittedSubtree", POINTER(win32more.Security.Cryptography.CERT_GENERAL_SUBTREE_head)),
        ("cExcludedSubtree", UInt32),
        ("rgExcludedSubtree", POINTER(win32more.Security.Cryptography.CERT_GENERAL_SUBTREE_head)),
    ]
    return CERT_NAME_CONSTRAINTS_INFO
def _define_CERT_DSS_PARAMETERS_head():
    class CERT_DSS_PARAMETERS(Structure):
        pass
    return CERT_DSS_PARAMETERS
def _define_CERT_DSS_PARAMETERS():
    CERT_DSS_PARAMETERS = win32more.Security.Cryptography.CERT_DSS_PARAMETERS_head
    CERT_DSS_PARAMETERS._fields_ = [
        ("p", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("q", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("g", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CERT_DSS_PARAMETERS
def _define_CERT_DH_PARAMETERS_head():
    class CERT_DH_PARAMETERS(Structure):
        pass
    return CERT_DH_PARAMETERS
def _define_CERT_DH_PARAMETERS():
    CERT_DH_PARAMETERS = win32more.Security.Cryptography.CERT_DH_PARAMETERS_head
    CERT_DH_PARAMETERS._fields_ = [
        ("p", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("g", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CERT_DH_PARAMETERS
def _define_CERT_ECC_SIGNATURE_head():
    class CERT_ECC_SIGNATURE(Structure):
        pass
    return CERT_ECC_SIGNATURE
def _define_CERT_ECC_SIGNATURE():
    CERT_ECC_SIGNATURE = win32more.Security.Cryptography.CERT_ECC_SIGNATURE_head
    CERT_ECC_SIGNATURE._fields_ = [
        ("r", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("s", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CERT_ECC_SIGNATURE
def _define_CERT_X942_DH_VALIDATION_PARAMS_head():
    class CERT_X942_DH_VALIDATION_PARAMS(Structure):
        pass
    return CERT_X942_DH_VALIDATION_PARAMS
def _define_CERT_X942_DH_VALIDATION_PARAMS():
    CERT_X942_DH_VALIDATION_PARAMS = win32more.Security.Cryptography.CERT_X942_DH_VALIDATION_PARAMS_head
    CERT_X942_DH_VALIDATION_PARAMS._fields_ = [
        ("seed", win32more.Security.Cryptography.CRYPT_BIT_BLOB),
        ("pgenCounter", UInt32),
    ]
    return CERT_X942_DH_VALIDATION_PARAMS
def _define_CERT_X942_DH_PARAMETERS_head():
    class CERT_X942_DH_PARAMETERS(Structure):
        pass
    return CERT_X942_DH_PARAMETERS
def _define_CERT_X942_DH_PARAMETERS():
    CERT_X942_DH_PARAMETERS = win32more.Security.Cryptography.CERT_X942_DH_PARAMETERS_head
    CERT_X942_DH_PARAMETERS._fields_ = [
        ("p", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("g", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("q", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("j", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("pValidationParams", POINTER(win32more.Security.Cryptography.CERT_X942_DH_VALIDATION_PARAMS_head)),
    ]
    return CERT_X942_DH_PARAMETERS
def _define_CRYPT_X942_OTHER_INFO_head():
    class CRYPT_X942_OTHER_INFO(Structure):
        pass
    return CRYPT_X942_OTHER_INFO
def _define_CRYPT_X942_OTHER_INFO():
    CRYPT_X942_OTHER_INFO = win32more.Security.Cryptography.CRYPT_X942_OTHER_INFO_head
    CRYPT_X942_OTHER_INFO._fields_ = [
        ("pszContentEncryptionObjId", win32more.Foundation.PSTR),
        ("rgbCounter", Byte * 4),
        ("rgbKeyLength", Byte * 4),
        ("PubInfo", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CRYPT_X942_OTHER_INFO
def _define_CRYPT_ECC_CMS_SHARED_INFO_head():
    class CRYPT_ECC_CMS_SHARED_INFO(Structure):
        pass
    return CRYPT_ECC_CMS_SHARED_INFO
def _define_CRYPT_ECC_CMS_SHARED_INFO():
    CRYPT_ECC_CMS_SHARED_INFO = win32more.Security.Cryptography.CRYPT_ECC_CMS_SHARED_INFO_head
    CRYPT_ECC_CMS_SHARED_INFO._fields_ = [
        ("Algorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("EntityUInfo", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("rgbSuppPubInfo", Byte * 4),
    ]
    return CRYPT_ECC_CMS_SHARED_INFO
def _define_CRYPT_RC2_CBC_PARAMETERS_head():
    class CRYPT_RC2_CBC_PARAMETERS(Structure):
        pass
    return CRYPT_RC2_CBC_PARAMETERS
def _define_CRYPT_RC2_CBC_PARAMETERS():
    CRYPT_RC2_CBC_PARAMETERS = win32more.Security.Cryptography.CRYPT_RC2_CBC_PARAMETERS_head
    CRYPT_RC2_CBC_PARAMETERS._fields_ = [
        ("dwVersion", UInt32),
        ("fIV", win32more.Foundation.BOOL),
        ("rgbIV", Byte * 8),
    ]
    return CRYPT_RC2_CBC_PARAMETERS
def _define_CRYPT_SMIME_CAPABILITY_head():
    class CRYPT_SMIME_CAPABILITY(Structure):
        pass
    return CRYPT_SMIME_CAPABILITY
def _define_CRYPT_SMIME_CAPABILITY():
    CRYPT_SMIME_CAPABILITY = win32more.Security.Cryptography.CRYPT_SMIME_CAPABILITY_head
    CRYPT_SMIME_CAPABILITY._fields_ = [
        ("pszObjId", win32more.Foundation.PSTR),
        ("Parameters", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CRYPT_SMIME_CAPABILITY
def _define_CRYPT_SMIME_CAPABILITIES_head():
    class CRYPT_SMIME_CAPABILITIES(Structure):
        pass
    return CRYPT_SMIME_CAPABILITIES
def _define_CRYPT_SMIME_CAPABILITIES():
    CRYPT_SMIME_CAPABILITIES = win32more.Security.Cryptography.CRYPT_SMIME_CAPABILITIES_head
    CRYPT_SMIME_CAPABILITIES._fields_ = [
        ("cCapability", UInt32),
        ("rgCapability", POINTER(win32more.Security.Cryptography.CRYPT_SMIME_CAPABILITY_head)),
    ]
    return CRYPT_SMIME_CAPABILITIES
def _define_CERT_QC_STATEMENT_head():
    class CERT_QC_STATEMENT(Structure):
        pass
    return CERT_QC_STATEMENT
def _define_CERT_QC_STATEMENT():
    CERT_QC_STATEMENT = win32more.Security.Cryptography.CERT_QC_STATEMENT_head
    CERT_QC_STATEMENT._fields_ = [
        ("pszStatementId", win32more.Foundation.PSTR),
        ("StatementInfo", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CERT_QC_STATEMENT
def _define_CERT_QC_STATEMENTS_EXT_INFO_head():
    class CERT_QC_STATEMENTS_EXT_INFO(Structure):
        pass
    return CERT_QC_STATEMENTS_EXT_INFO
def _define_CERT_QC_STATEMENTS_EXT_INFO():
    CERT_QC_STATEMENTS_EXT_INFO = win32more.Security.Cryptography.CERT_QC_STATEMENTS_EXT_INFO_head
    CERT_QC_STATEMENTS_EXT_INFO._fields_ = [
        ("cStatement", UInt32),
        ("rgStatement", POINTER(win32more.Security.Cryptography.CERT_QC_STATEMENT_head)),
    ]
    return CERT_QC_STATEMENTS_EXT_INFO
def _define_CRYPT_MASK_GEN_ALGORITHM_head():
    class CRYPT_MASK_GEN_ALGORITHM(Structure):
        pass
    return CRYPT_MASK_GEN_ALGORITHM
def _define_CRYPT_MASK_GEN_ALGORITHM():
    CRYPT_MASK_GEN_ALGORITHM = win32more.Security.Cryptography.CRYPT_MASK_GEN_ALGORITHM_head
    CRYPT_MASK_GEN_ALGORITHM._fields_ = [
        ("pszObjId", win32more.Foundation.PSTR),
        ("HashAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
    ]
    return CRYPT_MASK_GEN_ALGORITHM
def _define_CRYPT_RSA_SSA_PSS_PARAMETERS_head():
    class CRYPT_RSA_SSA_PSS_PARAMETERS(Structure):
        pass
    return CRYPT_RSA_SSA_PSS_PARAMETERS
def _define_CRYPT_RSA_SSA_PSS_PARAMETERS():
    CRYPT_RSA_SSA_PSS_PARAMETERS = win32more.Security.Cryptography.CRYPT_RSA_SSA_PSS_PARAMETERS_head
    CRYPT_RSA_SSA_PSS_PARAMETERS._fields_ = [
        ("HashAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("MaskGenAlgorithm", win32more.Security.Cryptography.CRYPT_MASK_GEN_ALGORITHM),
        ("dwSaltLength", UInt32),
        ("dwTrailerField", UInt32),
    ]
    return CRYPT_RSA_SSA_PSS_PARAMETERS
def _define_CRYPT_PSOURCE_ALGORITHM_head():
    class CRYPT_PSOURCE_ALGORITHM(Structure):
        pass
    return CRYPT_PSOURCE_ALGORITHM
def _define_CRYPT_PSOURCE_ALGORITHM():
    CRYPT_PSOURCE_ALGORITHM = win32more.Security.Cryptography.CRYPT_PSOURCE_ALGORITHM_head
    CRYPT_PSOURCE_ALGORITHM._fields_ = [
        ("pszObjId", win32more.Foundation.PSTR),
        ("EncodingParameters", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CRYPT_PSOURCE_ALGORITHM
def _define_CRYPT_RSAES_OAEP_PARAMETERS_head():
    class CRYPT_RSAES_OAEP_PARAMETERS(Structure):
        pass
    return CRYPT_RSAES_OAEP_PARAMETERS
def _define_CRYPT_RSAES_OAEP_PARAMETERS():
    CRYPT_RSAES_OAEP_PARAMETERS = win32more.Security.Cryptography.CRYPT_RSAES_OAEP_PARAMETERS_head
    CRYPT_RSAES_OAEP_PARAMETERS._fields_ = [
        ("HashAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("MaskGenAlgorithm", win32more.Security.Cryptography.CRYPT_MASK_GEN_ALGORITHM),
        ("PSourceAlgorithm", win32more.Security.Cryptography.CRYPT_PSOURCE_ALGORITHM),
    ]
    return CRYPT_RSAES_OAEP_PARAMETERS
def _define_CMC_TAGGED_ATTRIBUTE_head():
    class CMC_TAGGED_ATTRIBUTE(Structure):
        pass
    return CMC_TAGGED_ATTRIBUTE
def _define_CMC_TAGGED_ATTRIBUTE():
    CMC_TAGGED_ATTRIBUTE = win32more.Security.Cryptography.CMC_TAGGED_ATTRIBUTE_head
    CMC_TAGGED_ATTRIBUTE._fields_ = [
        ("dwBodyPartID", UInt32),
        ("Attribute", win32more.Security.Cryptography.CRYPT_ATTRIBUTE),
    ]
    return CMC_TAGGED_ATTRIBUTE
def _define_CMC_TAGGED_CERT_REQUEST_head():
    class CMC_TAGGED_CERT_REQUEST(Structure):
        pass
    return CMC_TAGGED_CERT_REQUEST
def _define_CMC_TAGGED_CERT_REQUEST():
    CMC_TAGGED_CERT_REQUEST = win32more.Security.Cryptography.CMC_TAGGED_CERT_REQUEST_head
    CMC_TAGGED_CERT_REQUEST._fields_ = [
        ("dwBodyPartID", UInt32),
        ("SignedCertRequest", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CMC_TAGGED_CERT_REQUEST
def _define_CMC_TAGGED_REQUEST_head():
    class CMC_TAGGED_REQUEST(Structure):
        pass
    return CMC_TAGGED_REQUEST
def _define_CMC_TAGGED_REQUEST():
    CMC_TAGGED_REQUEST = win32more.Security.Cryptography.CMC_TAGGED_REQUEST_head
    class CMC_TAGGED_REQUEST__Anonymous_e__Union(Union):
        pass
    CMC_TAGGED_REQUEST__Anonymous_e__Union._fields_ = [
        ("pTaggedCertRequest", POINTER(win32more.Security.Cryptography.CMC_TAGGED_CERT_REQUEST_head)),
    ]
    CMC_TAGGED_REQUEST._anonymous_ = [
        'Anonymous',
    ]
    CMC_TAGGED_REQUEST._fields_ = [
        ("dwTaggedRequestChoice", UInt32),
        ("Anonymous", CMC_TAGGED_REQUEST__Anonymous_e__Union),
    ]
    return CMC_TAGGED_REQUEST
def _define_CMC_TAGGED_CONTENT_INFO_head():
    class CMC_TAGGED_CONTENT_INFO(Structure):
        pass
    return CMC_TAGGED_CONTENT_INFO
def _define_CMC_TAGGED_CONTENT_INFO():
    CMC_TAGGED_CONTENT_INFO = win32more.Security.Cryptography.CMC_TAGGED_CONTENT_INFO_head
    CMC_TAGGED_CONTENT_INFO._fields_ = [
        ("dwBodyPartID", UInt32),
        ("EncodedContentInfo", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CMC_TAGGED_CONTENT_INFO
def _define_CMC_TAGGED_OTHER_MSG_head():
    class CMC_TAGGED_OTHER_MSG(Structure):
        pass
    return CMC_TAGGED_OTHER_MSG
def _define_CMC_TAGGED_OTHER_MSG():
    CMC_TAGGED_OTHER_MSG = win32more.Security.Cryptography.CMC_TAGGED_OTHER_MSG_head
    CMC_TAGGED_OTHER_MSG._fields_ = [
        ("dwBodyPartID", UInt32),
        ("pszObjId", win32more.Foundation.PSTR),
        ("Value", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CMC_TAGGED_OTHER_MSG
def _define_CMC_DATA_INFO_head():
    class CMC_DATA_INFO(Structure):
        pass
    return CMC_DATA_INFO
def _define_CMC_DATA_INFO():
    CMC_DATA_INFO = win32more.Security.Cryptography.CMC_DATA_INFO_head
    CMC_DATA_INFO._fields_ = [
        ("cTaggedAttribute", UInt32),
        ("rgTaggedAttribute", POINTER(win32more.Security.Cryptography.CMC_TAGGED_ATTRIBUTE_head)),
        ("cTaggedRequest", UInt32),
        ("rgTaggedRequest", POINTER(win32more.Security.Cryptography.CMC_TAGGED_REQUEST_head)),
        ("cTaggedContentInfo", UInt32),
        ("rgTaggedContentInfo", POINTER(win32more.Security.Cryptography.CMC_TAGGED_CONTENT_INFO_head)),
        ("cTaggedOtherMsg", UInt32),
        ("rgTaggedOtherMsg", POINTER(win32more.Security.Cryptography.CMC_TAGGED_OTHER_MSG_head)),
    ]
    return CMC_DATA_INFO
def _define_CMC_RESPONSE_INFO_head():
    class CMC_RESPONSE_INFO(Structure):
        pass
    return CMC_RESPONSE_INFO
def _define_CMC_RESPONSE_INFO():
    CMC_RESPONSE_INFO = win32more.Security.Cryptography.CMC_RESPONSE_INFO_head
    CMC_RESPONSE_INFO._fields_ = [
        ("cTaggedAttribute", UInt32),
        ("rgTaggedAttribute", POINTER(win32more.Security.Cryptography.CMC_TAGGED_ATTRIBUTE_head)),
        ("cTaggedContentInfo", UInt32),
        ("rgTaggedContentInfo", POINTER(win32more.Security.Cryptography.CMC_TAGGED_CONTENT_INFO_head)),
        ("cTaggedOtherMsg", UInt32),
        ("rgTaggedOtherMsg", POINTER(win32more.Security.Cryptography.CMC_TAGGED_OTHER_MSG_head)),
    ]
    return CMC_RESPONSE_INFO
def _define_CMC_PEND_INFO_head():
    class CMC_PEND_INFO(Structure):
        pass
    return CMC_PEND_INFO
def _define_CMC_PEND_INFO():
    CMC_PEND_INFO = win32more.Security.Cryptography.CMC_PEND_INFO_head
    CMC_PEND_INFO._fields_ = [
        ("PendToken", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("PendTime", win32more.Foundation.FILETIME),
    ]
    return CMC_PEND_INFO
def _define_CMC_STATUS_INFO_head():
    class CMC_STATUS_INFO(Structure):
        pass
    return CMC_STATUS_INFO
def _define_CMC_STATUS_INFO():
    CMC_STATUS_INFO = win32more.Security.Cryptography.CMC_STATUS_INFO_head
    class CMC_STATUS_INFO__Anonymous_e__Union(Union):
        pass
    CMC_STATUS_INFO__Anonymous_e__Union._fields_ = [
        ("dwFailInfo", UInt32),
        ("pPendInfo", POINTER(win32more.Security.Cryptography.CMC_PEND_INFO_head)),
    ]
    CMC_STATUS_INFO._anonymous_ = [
        'Anonymous',
    ]
    CMC_STATUS_INFO._fields_ = [
        ("dwStatus", UInt32),
        ("cBodyList", UInt32),
        ("rgdwBodyList", POINTER(UInt32)),
        ("pwszStatusString", win32more.Foundation.PWSTR),
        ("dwOtherInfoChoice", UInt32),
        ("Anonymous", CMC_STATUS_INFO__Anonymous_e__Union),
    ]
    return CMC_STATUS_INFO
def _define_CMC_ADD_EXTENSIONS_INFO_head():
    class CMC_ADD_EXTENSIONS_INFO(Structure):
        pass
    return CMC_ADD_EXTENSIONS_INFO
def _define_CMC_ADD_EXTENSIONS_INFO():
    CMC_ADD_EXTENSIONS_INFO = win32more.Security.Cryptography.CMC_ADD_EXTENSIONS_INFO_head
    CMC_ADD_EXTENSIONS_INFO._fields_ = [
        ("dwCmcDataReference", UInt32),
        ("cCertReference", UInt32),
        ("rgdwCertReference", POINTER(UInt32)),
        ("cExtension", UInt32),
        ("rgExtension", POINTER(win32more.Security.Cryptography.CERT_EXTENSION_head)),
    ]
    return CMC_ADD_EXTENSIONS_INFO
def _define_CMC_ADD_ATTRIBUTES_INFO_head():
    class CMC_ADD_ATTRIBUTES_INFO(Structure):
        pass
    return CMC_ADD_ATTRIBUTES_INFO
def _define_CMC_ADD_ATTRIBUTES_INFO():
    CMC_ADD_ATTRIBUTES_INFO = win32more.Security.Cryptography.CMC_ADD_ATTRIBUTES_INFO_head
    CMC_ADD_ATTRIBUTES_INFO._fields_ = [
        ("dwCmcDataReference", UInt32),
        ("cCertReference", UInt32),
        ("rgdwCertReference", POINTER(UInt32)),
        ("cAttribute", UInt32),
        ("rgAttribute", POINTER(win32more.Security.Cryptography.CRYPT_ATTRIBUTE_head)),
    ]
    return CMC_ADD_ATTRIBUTES_INFO
def _define_CERT_TEMPLATE_EXT_head():
    class CERT_TEMPLATE_EXT(Structure):
        pass
    return CERT_TEMPLATE_EXT
def _define_CERT_TEMPLATE_EXT():
    CERT_TEMPLATE_EXT = win32more.Security.Cryptography.CERT_TEMPLATE_EXT_head
    CERT_TEMPLATE_EXT._fields_ = [
        ("pszObjId", win32more.Foundation.PSTR),
        ("dwMajorVersion", UInt32),
        ("fMinorVersion", win32more.Foundation.BOOL),
        ("dwMinorVersion", UInt32),
    ]
    return CERT_TEMPLATE_EXT
def _define_CERT_HASHED_URL_head():
    class CERT_HASHED_URL(Structure):
        pass
    return CERT_HASHED_URL
def _define_CERT_HASHED_URL():
    CERT_HASHED_URL = win32more.Security.Cryptography.CERT_HASHED_URL_head
    CERT_HASHED_URL._fields_ = [
        ("HashAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("Hash", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("pwszUrl", win32more.Foundation.PWSTR),
    ]
    return CERT_HASHED_URL
def _define_CERT_LOGOTYPE_DETAILS_head():
    class CERT_LOGOTYPE_DETAILS(Structure):
        pass
    return CERT_LOGOTYPE_DETAILS
def _define_CERT_LOGOTYPE_DETAILS():
    CERT_LOGOTYPE_DETAILS = win32more.Security.Cryptography.CERT_LOGOTYPE_DETAILS_head
    CERT_LOGOTYPE_DETAILS._fields_ = [
        ("pwszMimeType", win32more.Foundation.PWSTR),
        ("cHashedUrl", UInt32),
        ("rgHashedUrl", POINTER(win32more.Security.Cryptography.CERT_HASHED_URL_head)),
    ]
    return CERT_LOGOTYPE_DETAILS
def _define_CERT_LOGOTYPE_REFERENCE_head():
    class CERT_LOGOTYPE_REFERENCE(Structure):
        pass
    return CERT_LOGOTYPE_REFERENCE
def _define_CERT_LOGOTYPE_REFERENCE():
    CERT_LOGOTYPE_REFERENCE = win32more.Security.Cryptography.CERT_LOGOTYPE_REFERENCE_head
    CERT_LOGOTYPE_REFERENCE._fields_ = [
        ("cHashedUrl", UInt32),
        ("rgHashedUrl", POINTER(win32more.Security.Cryptography.CERT_HASHED_URL_head)),
    ]
    return CERT_LOGOTYPE_REFERENCE
def _define_CERT_LOGOTYPE_IMAGE_INFO_head():
    class CERT_LOGOTYPE_IMAGE_INFO(Structure):
        pass
    return CERT_LOGOTYPE_IMAGE_INFO
def _define_CERT_LOGOTYPE_IMAGE_INFO():
    CERT_LOGOTYPE_IMAGE_INFO = win32more.Security.Cryptography.CERT_LOGOTYPE_IMAGE_INFO_head
    class CERT_LOGOTYPE_IMAGE_INFO__Anonymous_e__Union(Union):
        pass
    CERT_LOGOTYPE_IMAGE_INFO__Anonymous_e__Union._fields_ = [
        ("dwNumBits", UInt32),
        ("dwTableSize", UInt32),
    ]
    CERT_LOGOTYPE_IMAGE_INFO._anonymous_ = [
        'Anonymous',
    ]
    CERT_LOGOTYPE_IMAGE_INFO._fields_ = [
        ("dwLogotypeImageInfoChoice", win32more.Security.Cryptography.CERT_LOGOTYPE_IMAGE_INFO_TYPE),
        ("dwFileSize", UInt32),
        ("dwXSize", UInt32),
        ("dwYSize", UInt32),
        ("dwLogotypeImageResolutionChoice", win32more.Security.Cryptography.CERT_LOGOTYPE_CHOICE),
        ("Anonymous", CERT_LOGOTYPE_IMAGE_INFO__Anonymous_e__Union),
        ("pwszLanguage", win32more.Foundation.PWSTR),
    ]
    return CERT_LOGOTYPE_IMAGE_INFO
def _define_CERT_LOGOTYPE_IMAGE_head():
    class CERT_LOGOTYPE_IMAGE(Structure):
        pass
    return CERT_LOGOTYPE_IMAGE
def _define_CERT_LOGOTYPE_IMAGE():
    CERT_LOGOTYPE_IMAGE = win32more.Security.Cryptography.CERT_LOGOTYPE_IMAGE_head
    CERT_LOGOTYPE_IMAGE._fields_ = [
        ("LogotypeDetails", win32more.Security.Cryptography.CERT_LOGOTYPE_DETAILS),
        ("pLogotypeImageInfo", POINTER(win32more.Security.Cryptography.CERT_LOGOTYPE_IMAGE_INFO_head)),
    ]
    return CERT_LOGOTYPE_IMAGE
def _define_CERT_LOGOTYPE_AUDIO_INFO_head():
    class CERT_LOGOTYPE_AUDIO_INFO(Structure):
        pass
    return CERT_LOGOTYPE_AUDIO_INFO
def _define_CERT_LOGOTYPE_AUDIO_INFO():
    CERT_LOGOTYPE_AUDIO_INFO = win32more.Security.Cryptography.CERT_LOGOTYPE_AUDIO_INFO_head
    CERT_LOGOTYPE_AUDIO_INFO._fields_ = [
        ("dwFileSize", UInt32),
        ("dwPlayTime", UInt32),
        ("dwChannels", UInt32),
        ("dwSampleRate", UInt32),
        ("pwszLanguage", win32more.Foundation.PWSTR),
    ]
    return CERT_LOGOTYPE_AUDIO_INFO
def _define_CERT_LOGOTYPE_AUDIO_head():
    class CERT_LOGOTYPE_AUDIO(Structure):
        pass
    return CERT_LOGOTYPE_AUDIO
def _define_CERT_LOGOTYPE_AUDIO():
    CERT_LOGOTYPE_AUDIO = win32more.Security.Cryptography.CERT_LOGOTYPE_AUDIO_head
    CERT_LOGOTYPE_AUDIO._fields_ = [
        ("LogotypeDetails", win32more.Security.Cryptography.CERT_LOGOTYPE_DETAILS),
        ("pLogotypeAudioInfo", POINTER(win32more.Security.Cryptography.CERT_LOGOTYPE_AUDIO_INFO_head)),
    ]
    return CERT_LOGOTYPE_AUDIO
def _define_CERT_LOGOTYPE_DATA_head():
    class CERT_LOGOTYPE_DATA(Structure):
        pass
    return CERT_LOGOTYPE_DATA
def _define_CERT_LOGOTYPE_DATA():
    CERT_LOGOTYPE_DATA = win32more.Security.Cryptography.CERT_LOGOTYPE_DATA_head
    CERT_LOGOTYPE_DATA._fields_ = [
        ("cLogotypeImage", UInt32),
        ("rgLogotypeImage", POINTER(win32more.Security.Cryptography.CERT_LOGOTYPE_IMAGE_head)),
        ("cLogotypeAudio", UInt32),
        ("rgLogotypeAudio", POINTER(win32more.Security.Cryptography.CERT_LOGOTYPE_AUDIO_head)),
    ]
    return CERT_LOGOTYPE_DATA
def _define_CERT_LOGOTYPE_INFO_head():
    class CERT_LOGOTYPE_INFO(Structure):
        pass
    return CERT_LOGOTYPE_INFO
def _define_CERT_LOGOTYPE_INFO():
    CERT_LOGOTYPE_INFO = win32more.Security.Cryptography.CERT_LOGOTYPE_INFO_head
    class CERT_LOGOTYPE_INFO__Anonymous_e__Union(Union):
        pass
    CERT_LOGOTYPE_INFO__Anonymous_e__Union._fields_ = [
        ("pLogotypeDirectInfo", POINTER(win32more.Security.Cryptography.CERT_LOGOTYPE_DATA_head)),
        ("pLogotypeIndirectInfo", POINTER(win32more.Security.Cryptography.CERT_LOGOTYPE_REFERENCE_head)),
    ]
    CERT_LOGOTYPE_INFO._anonymous_ = [
        'Anonymous',
    ]
    CERT_LOGOTYPE_INFO._fields_ = [
        ("dwLogotypeInfoChoice", win32more.Security.Cryptography.CERT_LOGOTYPE_OPTION),
        ("Anonymous", CERT_LOGOTYPE_INFO__Anonymous_e__Union),
    ]
    return CERT_LOGOTYPE_INFO
def _define_CERT_OTHER_LOGOTYPE_INFO_head():
    class CERT_OTHER_LOGOTYPE_INFO(Structure):
        pass
    return CERT_OTHER_LOGOTYPE_INFO
def _define_CERT_OTHER_LOGOTYPE_INFO():
    CERT_OTHER_LOGOTYPE_INFO = win32more.Security.Cryptography.CERT_OTHER_LOGOTYPE_INFO_head
    CERT_OTHER_LOGOTYPE_INFO._fields_ = [
        ("pszObjId", win32more.Foundation.PSTR),
        ("LogotypeInfo", win32more.Security.Cryptography.CERT_LOGOTYPE_INFO),
    ]
    return CERT_OTHER_LOGOTYPE_INFO
def _define_CERT_LOGOTYPE_EXT_INFO_head():
    class CERT_LOGOTYPE_EXT_INFO(Structure):
        pass
    return CERT_LOGOTYPE_EXT_INFO
def _define_CERT_LOGOTYPE_EXT_INFO():
    CERT_LOGOTYPE_EXT_INFO = win32more.Security.Cryptography.CERT_LOGOTYPE_EXT_INFO_head
    CERT_LOGOTYPE_EXT_INFO._fields_ = [
        ("cCommunityLogo", UInt32),
        ("rgCommunityLogo", POINTER(win32more.Security.Cryptography.CERT_LOGOTYPE_INFO_head)),
        ("pIssuerLogo", POINTER(win32more.Security.Cryptography.CERT_LOGOTYPE_INFO_head)),
        ("pSubjectLogo", POINTER(win32more.Security.Cryptography.CERT_LOGOTYPE_INFO_head)),
        ("cOtherLogo", UInt32),
        ("rgOtherLogo", POINTER(win32more.Security.Cryptography.CERT_OTHER_LOGOTYPE_INFO_head)),
    ]
    return CERT_LOGOTYPE_EXT_INFO
def _define_CERT_BIOMETRIC_DATA_head():
    class CERT_BIOMETRIC_DATA(Structure):
        pass
    return CERT_BIOMETRIC_DATA
def _define_CERT_BIOMETRIC_DATA():
    CERT_BIOMETRIC_DATA = win32more.Security.Cryptography.CERT_BIOMETRIC_DATA_head
    class CERT_BIOMETRIC_DATA__Anonymous_e__Union(Union):
        pass
    CERT_BIOMETRIC_DATA__Anonymous_e__Union._fields_ = [
        ("dwPredefined", UInt32),
        ("pszObjId", win32more.Foundation.PSTR),
    ]
    CERT_BIOMETRIC_DATA._anonymous_ = [
        'Anonymous',
    ]
    CERT_BIOMETRIC_DATA._fields_ = [
        ("dwTypeOfBiometricDataChoice", win32more.Security.Cryptography.CERT_BIOMETRIC_DATA_TYPE),
        ("Anonymous", CERT_BIOMETRIC_DATA__Anonymous_e__Union),
        ("HashedUrl", win32more.Security.Cryptography.CERT_HASHED_URL),
    ]
    return CERT_BIOMETRIC_DATA
def _define_CERT_BIOMETRIC_EXT_INFO_head():
    class CERT_BIOMETRIC_EXT_INFO(Structure):
        pass
    return CERT_BIOMETRIC_EXT_INFO
def _define_CERT_BIOMETRIC_EXT_INFO():
    CERT_BIOMETRIC_EXT_INFO = win32more.Security.Cryptography.CERT_BIOMETRIC_EXT_INFO_head
    CERT_BIOMETRIC_EXT_INFO._fields_ = [
        ("cBiometricData", UInt32),
        ("rgBiometricData", POINTER(win32more.Security.Cryptography.CERT_BIOMETRIC_DATA_head)),
    ]
    return CERT_BIOMETRIC_EXT_INFO
def _define_OCSP_SIGNATURE_INFO_head():
    class OCSP_SIGNATURE_INFO(Structure):
        pass
    return OCSP_SIGNATURE_INFO
def _define_OCSP_SIGNATURE_INFO():
    OCSP_SIGNATURE_INFO = win32more.Security.Cryptography.OCSP_SIGNATURE_INFO_head
    OCSP_SIGNATURE_INFO._fields_ = [
        ("SignatureAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("Signature", win32more.Security.Cryptography.CRYPT_BIT_BLOB),
        ("cCertEncoded", UInt32),
        ("rgCertEncoded", POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head)),
    ]
    return OCSP_SIGNATURE_INFO
def _define_OCSP_SIGNED_REQUEST_INFO_head():
    class OCSP_SIGNED_REQUEST_INFO(Structure):
        pass
    return OCSP_SIGNED_REQUEST_INFO
def _define_OCSP_SIGNED_REQUEST_INFO():
    OCSP_SIGNED_REQUEST_INFO = win32more.Security.Cryptography.OCSP_SIGNED_REQUEST_INFO_head
    OCSP_SIGNED_REQUEST_INFO._fields_ = [
        ("ToBeSigned", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("pOptionalSignatureInfo", POINTER(win32more.Security.Cryptography.OCSP_SIGNATURE_INFO_head)),
    ]
    return OCSP_SIGNED_REQUEST_INFO
def _define_OCSP_CERT_ID_head():
    class OCSP_CERT_ID(Structure):
        pass
    return OCSP_CERT_ID
def _define_OCSP_CERT_ID():
    OCSP_CERT_ID = win32more.Security.Cryptography.OCSP_CERT_ID_head
    OCSP_CERT_ID._fields_ = [
        ("HashAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("IssuerNameHash", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("IssuerKeyHash", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("SerialNumber", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return OCSP_CERT_ID
def _define_OCSP_REQUEST_ENTRY_head():
    class OCSP_REQUEST_ENTRY(Structure):
        pass
    return OCSP_REQUEST_ENTRY
def _define_OCSP_REQUEST_ENTRY():
    OCSP_REQUEST_ENTRY = win32more.Security.Cryptography.OCSP_REQUEST_ENTRY_head
    OCSP_REQUEST_ENTRY._fields_ = [
        ("CertId", win32more.Security.Cryptography.OCSP_CERT_ID),
        ("cExtension", UInt32),
        ("rgExtension", POINTER(win32more.Security.Cryptography.CERT_EXTENSION_head)),
    ]
    return OCSP_REQUEST_ENTRY
def _define_OCSP_REQUEST_INFO_head():
    class OCSP_REQUEST_INFO(Structure):
        pass
    return OCSP_REQUEST_INFO
def _define_OCSP_REQUEST_INFO():
    OCSP_REQUEST_INFO = win32more.Security.Cryptography.OCSP_REQUEST_INFO_head
    OCSP_REQUEST_INFO._fields_ = [
        ("dwVersion", UInt32),
        ("pRequestorName", POINTER(win32more.Security.Cryptography.CERT_ALT_NAME_ENTRY_head)),
        ("cRequestEntry", UInt32),
        ("rgRequestEntry", POINTER(win32more.Security.Cryptography.OCSP_REQUEST_ENTRY_head)),
        ("cExtension", UInt32),
        ("rgExtension", POINTER(win32more.Security.Cryptography.CERT_EXTENSION_head)),
    ]
    return OCSP_REQUEST_INFO
def _define_OCSP_RESPONSE_INFO_head():
    class OCSP_RESPONSE_INFO(Structure):
        pass
    return OCSP_RESPONSE_INFO
def _define_OCSP_RESPONSE_INFO():
    OCSP_RESPONSE_INFO = win32more.Security.Cryptography.OCSP_RESPONSE_INFO_head
    OCSP_RESPONSE_INFO._fields_ = [
        ("dwStatus", UInt32),
        ("pszObjId", win32more.Foundation.PSTR),
        ("Value", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return OCSP_RESPONSE_INFO
def _define_OCSP_BASIC_SIGNED_RESPONSE_INFO_head():
    class OCSP_BASIC_SIGNED_RESPONSE_INFO(Structure):
        pass
    return OCSP_BASIC_SIGNED_RESPONSE_INFO
def _define_OCSP_BASIC_SIGNED_RESPONSE_INFO():
    OCSP_BASIC_SIGNED_RESPONSE_INFO = win32more.Security.Cryptography.OCSP_BASIC_SIGNED_RESPONSE_INFO_head
    OCSP_BASIC_SIGNED_RESPONSE_INFO._fields_ = [
        ("ToBeSigned", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("SignatureInfo", win32more.Security.Cryptography.OCSP_SIGNATURE_INFO),
    ]
    return OCSP_BASIC_SIGNED_RESPONSE_INFO
def _define_OCSP_BASIC_REVOKED_INFO_head():
    class OCSP_BASIC_REVOKED_INFO(Structure):
        pass
    return OCSP_BASIC_REVOKED_INFO
def _define_OCSP_BASIC_REVOKED_INFO():
    OCSP_BASIC_REVOKED_INFO = win32more.Security.Cryptography.OCSP_BASIC_REVOKED_INFO_head
    OCSP_BASIC_REVOKED_INFO._fields_ = [
        ("RevocationDate", win32more.Foundation.FILETIME),
        ("dwCrlReasonCode", win32more.Security.Cryptography.CERT_REVOCATION_STATUS_REASON),
    ]
    return OCSP_BASIC_REVOKED_INFO
def _define_OCSP_BASIC_RESPONSE_ENTRY_head():
    class OCSP_BASIC_RESPONSE_ENTRY(Structure):
        pass
    return OCSP_BASIC_RESPONSE_ENTRY
def _define_OCSP_BASIC_RESPONSE_ENTRY():
    OCSP_BASIC_RESPONSE_ENTRY = win32more.Security.Cryptography.OCSP_BASIC_RESPONSE_ENTRY_head
    class OCSP_BASIC_RESPONSE_ENTRY__Anonymous_e__Union(Union):
        pass
    OCSP_BASIC_RESPONSE_ENTRY__Anonymous_e__Union._fields_ = [
        ("pRevokedInfo", POINTER(win32more.Security.Cryptography.OCSP_BASIC_REVOKED_INFO_head)),
    ]
    OCSP_BASIC_RESPONSE_ENTRY._anonymous_ = [
        'Anonymous',
    ]
    OCSP_BASIC_RESPONSE_ENTRY._fields_ = [
        ("CertId", win32more.Security.Cryptography.OCSP_CERT_ID),
        ("dwCertStatus", UInt32),
        ("Anonymous", OCSP_BASIC_RESPONSE_ENTRY__Anonymous_e__Union),
        ("ThisUpdate", win32more.Foundation.FILETIME),
        ("NextUpdate", win32more.Foundation.FILETIME),
        ("cExtension", UInt32),
        ("rgExtension", POINTER(win32more.Security.Cryptography.CERT_EXTENSION_head)),
    ]
    return OCSP_BASIC_RESPONSE_ENTRY
def _define_OCSP_BASIC_RESPONSE_INFO_head():
    class OCSP_BASIC_RESPONSE_INFO(Structure):
        pass
    return OCSP_BASIC_RESPONSE_INFO
def _define_OCSP_BASIC_RESPONSE_INFO():
    OCSP_BASIC_RESPONSE_INFO = win32more.Security.Cryptography.OCSP_BASIC_RESPONSE_INFO_head
    class OCSP_BASIC_RESPONSE_INFO__Anonymous_e__Union(Union):
        pass
    OCSP_BASIC_RESPONSE_INFO__Anonymous_e__Union._fields_ = [
        ("ByNameResponderId", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("ByKeyResponderId", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    OCSP_BASIC_RESPONSE_INFO._anonymous_ = [
        'Anonymous',
    ]
    OCSP_BASIC_RESPONSE_INFO._fields_ = [
        ("dwVersion", UInt32),
        ("dwResponderIdChoice", UInt32),
        ("Anonymous", OCSP_BASIC_RESPONSE_INFO__Anonymous_e__Union),
        ("ProducedAt", win32more.Foundation.FILETIME),
        ("cResponseEntry", UInt32),
        ("rgResponseEntry", POINTER(win32more.Security.Cryptography.OCSP_BASIC_RESPONSE_ENTRY_head)),
        ("cExtension", UInt32),
        ("rgExtension", POINTER(win32more.Security.Cryptography.CERT_EXTENSION_head)),
    ]
    return OCSP_BASIC_RESPONSE_INFO
def _define_CERT_SUPPORTED_ALGORITHM_INFO_head():
    class CERT_SUPPORTED_ALGORITHM_INFO(Structure):
        pass
    return CERT_SUPPORTED_ALGORITHM_INFO
def _define_CERT_SUPPORTED_ALGORITHM_INFO():
    CERT_SUPPORTED_ALGORITHM_INFO = win32more.Security.Cryptography.CERT_SUPPORTED_ALGORITHM_INFO_head
    CERT_SUPPORTED_ALGORITHM_INFO._fields_ = [
        ("Algorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("IntendedKeyUsage", win32more.Security.Cryptography.CRYPT_BIT_BLOB),
        ("IntendedCertPolicies", win32more.Security.Cryptography.CERT_POLICIES_INFO),
    ]
    return CERT_SUPPORTED_ALGORITHM_INFO
def _define_CERT_TPM_SPECIFICATION_INFO_head():
    class CERT_TPM_SPECIFICATION_INFO(Structure):
        pass
    return CERT_TPM_SPECIFICATION_INFO
def _define_CERT_TPM_SPECIFICATION_INFO():
    CERT_TPM_SPECIFICATION_INFO = win32more.Security.Cryptography.CERT_TPM_SPECIFICATION_INFO_head
    CERT_TPM_SPECIFICATION_INFO._fields_ = [
        ("pwszFamily", win32more.Foundation.PWSTR),
        ("dwLevel", UInt32),
        ("dwRevision", UInt32),
    ]
    return CERT_TPM_SPECIFICATION_INFO
def _define_CRYPT_OID_FUNC_ENTRY_head():
    class CRYPT_OID_FUNC_ENTRY(Structure):
        pass
    return CRYPT_OID_FUNC_ENTRY
def _define_CRYPT_OID_FUNC_ENTRY():
    CRYPT_OID_FUNC_ENTRY = win32more.Security.Cryptography.CRYPT_OID_FUNC_ENTRY_head
    CRYPT_OID_FUNC_ENTRY._fields_ = [
        ("pszOID", win32more.Foundation.PSTR),
        ("pvFuncAddr", c_void_p),
    ]
    return CRYPT_OID_FUNC_ENTRY
def _define_PFN_CRYPT_ENUM_OID_FUNC():
    return CFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,POINTER(UInt32),POINTER(win32more.Foundation.PWSTR),POINTER(c_char_p_no),POINTER(UInt32),c_void_p, use_last_error=False)
def _define_CRYPT_OID_INFO_head():
    class CRYPT_OID_INFO(Structure):
        pass
    return CRYPT_OID_INFO
def _define_CRYPT_OID_INFO():
    CRYPT_OID_INFO = win32more.Security.Cryptography.CRYPT_OID_INFO_head
    class CRYPT_OID_INFO__Anonymous_e__Union(Union):
        pass
    CRYPT_OID_INFO__Anonymous_e__Union._fields_ = [
        ("dwValue", UInt32),
        ("Algid", UInt32),
        ("dwLength", UInt32),
    ]
    CRYPT_OID_INFO._anonymous_ = [
        'Anonymous',
    ]
    CRYPT_OID_INFO._fields_ = [
        ("cbSize", UInt32),
        ("pszOID", win32more.Foundation.PSTR),
        ("pwszName", win32more.Foundation.PWSTR),
        ("dwGroupId", UInt32),
        ("Anonymous", CRYPT_OID_INFO__Anonymous_e__Union),
        ("ExtraInfo", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CRYPT_OID_INFO
def _define_PFN_CRYPT_ENUM_OID_INFO():
    return CFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPT_OID_INFO_head),c_void_p, use_last_error=False)
def _define_CERT_STRONG_SIGN_SERIALIZED_INFO_head():
    class CERT_STRONG_SIGN_SERIALIZED_INFO(Structure):
        pass
    return CERT_STRONG_SIGN_SERIALIZED_INFO
def _define_CERT_STRONG_SIGN_SERIALIZED_INFO():
    CERT_STRONG_SIGN_SERIALIZED_INFO = win32more.Security.Cryptography.CERT_STRONG_SIGN_SERIALIZED_INFO_head
    CERT_STRONG_SIGN_SERIALIZED_INFO._fields_ = [
        ("dwFlags", win32more.Security.Cryptography.CERT_STRONG_SIGN_FLAGS),
        ("pwszCNGSignHashAlgids", win32more.Foundation.PWSTR),
        ("pwszCNGPubKeyMinBitLengths", win32more.Foundation.PWSTR),
    ]
    return CERT_STRONG_SIGN_SERIALIZED_INFO
def _define_CERT_STRONG_SIGN_PARA_head():
    class CERT_STRONG_SIGN_PARA(Structure):
        pass
    return CERT_STRONG_SIGN_PARA
def _define_CERT_STRONG_SIGN_PARA():
    CERT_STRONG_SIGN_PARA = win32more.Security.Cryptography.CERT_STRONG_SIGN_PARA_head
    class CERT_STRONG_SIGN_PARA__Anonymous_e__Union(Union):
        pass
    CERT_STRONG_SIGN_PARA__Anonymous_e__Union._fields_ = [
        ("pvInfo", c_void_p),
        ("pSerializedInfo", POINTER(win32more.Security.Cryptography.CERT_STRONG_SIGN_SERIALIZED_INFO_head)),
        ("pszOID", win32more.Foundation.PSTR),
    ]
    CERT_STRONG_SIGN_PARA._anonymous_ = [
        'Anonymous',
    ]
    CERT_STRONG_SIGN_PARA._fields_ = [
        ("cbSize", UInt32),
        ("dwInfoChoice", UInt32),
        ("Anonymous", CERT_STRONG_SIGN_PARA__Anonymous_e__Union),
    ]
    return CERT_STRONG_SIGN_PARA
def _define_CERT_ISSUER_SERIAL_NUMBER_head():
    class CERT_ISSUER_SERIAL_NUMBER(Structure):
        pass
    return CERT_ISSUER_SERIAL_NUMBER
def _define_CERT_ISSUER_SERIAL_NUMBER():
    CERT_ISSUER_SERIAL_NUMBER = win32more.Security.Cryptography.CERT_ISSUER_SERIAL_NUMBER_head
    CERT_ISSUER_SERIAL_NUMBER._fields_ = [
        ("Issuer", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("SerialNumber", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CERT_ISSUER_SERIAL_NUMBER
def _define_CERT_ID_head():
    class CERT_ID(Structure):
        pass
    return CERT_ID
def _define_CERT_ID():
    CERT_ID = win32more.Security.Cryptography.CERT_ID_head
    class CERT_ID__Anonymous_e__Union(Union):
        pass
    CERT_ID__Anonymous_e__Union._fields_ = [
        ("IssuerSerialNumber", win32more.Security.Cryptography.CERT_ISSUER_SERIAL_NUMBER),
        ("KeyId", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("HashId", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    CERT_ID._anonymous_ = [
        'Anonymous',
    ]
    CERT_ID._fields_ = [
        ("dwIdChoice", win32more.Security.Cryptography.CERT_ID_OPTION),
        ("Anonymous", CERT_ID__Anonymous_e__Union),
    ]
    return CERT_ID
def _define_CMSG_SIGNER_ENCODE_INFO_head():
    class CMSG_SIGNER_ENCODE_INFO(Structure):
        pass
    return CMSG_SIGNER_ENCODE_INFO
def _define_CMSG_SIGNER_ENCODE_INFO():
    CMSG_SIGNER_ENCODE_INFO = win32more.Security.Cryptography.CMSG_SIGNER_ENCODE_INFO_head
    class CMSG_SIGNER_ENCODE_INFO__Anonymous_e__Union(Union):
        pass
    CMSG_SIGNER_ENCODE_INFO__Anonymous_e__Union._fields_ = [
        ("hCryptProv", UIntPtr),
        ("hNCryptKey", UIntPtr),
    ]
    CMSG_SIGNER_ENCODE_INFO._anonymous_ = [
        'Anonymous',
    ]
    CMSG_SIGNER_ENCODE_INFO._fields_ = [
        ("cbSize", UInt32),
        ("pCertInfo", POINTER(win32more.Security.Cryptography.CERT_INFO_head)),
        ("Anonymous", CMSG_SIGNER_ENCODE_INFO__Anonymous_e__Union),
        ("dwKeySpec", UInt32),
        ("HashAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("pvHashAuxInfo", c_void_p),
        ("cAuthAttr", UInt32),
        ("rgAuthAttr", POINTER(win32more.Security.Cryptography.CRYPT_ATTRIBUTE_head)),
        ("cUnauthAttr", UInt32),
        ("rgUnauthAttr", POINTER(win32more.Security.Cryptography.CRYPT_ATTRIBUTE_head)),
    ]
    return CMSG_SIGNER_ENCODE_INFO
def _define_CMSG_SIGNED_ENCODE_INFO_head():
    class CMSG_SIGNED_ENCODE_INFO(Structure):
        pass
    return CMSG_SIGNED_ENCODE_INFO
def _define_CMSG_SIGNED_ENCODE_INFO():
    CMSG_SIGNED_ENCODE_INFO = win32more.Security.Cryptography.CMSG_SIGNED_ENCODE_INFO_head
    CMSG_SIGNED_ENCODE_INFO._fields_ = [
        ("cbSize", UInt32),
        ("cSigners", UInt32),
        ("rgSigners", POINTER(win32more.Security.Cryptography.CMSG_SIGNER_ENCODE_INFO_head)),
        ("cCertEncoded", UInt32),
        ("rgCertEncoded", POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head)),
        ("cCrlEncoded", UInt32),
        ("rgCrlEncoded", POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head)),
    ]
    return CMSG_SIGNED_ENCODE_INFO
def _define_CMSG_ENVELOPED_ENCODE_INFO_head():
    class CMSG_ENVELOPED_ENCODE_INFO(Structure):
        pass
    return CMSG_ENVELOPED_ENCODE_INFO
def _define_CMSG_ENVELOPED_ENCODE_INFO():
    CMSG_ENVELOPED_ENCODE_INFO = win32more.Security.Cryptography.CMSG_ENVELOPED_ENCODE_INFO_head
    CMSG_ENVELOPED_ENCODE_INFO._fields_ = [
        ("cbSize", UInt32),
        ("hCryptProv", UIntPtr),
        ("ContentEncryptionAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("pvEncryptionAuxInfo", c_void_p),
        ("cRecipients", UInt32),
        ("rgpRecipients", POINTER(POINTER(win32more.Security.Cryptography.CERT_INFO_head))),
    ]
    return CMSG_ENVELOPED_ENCODE_INFO
def _define_CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO_head():
    class CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO(Structure):
        pass
    return CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO
def _define_CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO():
    CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO = win32more.Security.Cryptography.CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO_head
    CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO._fields_ = [
        ("cbSize", UInt32),
        ("KeyEncryptionAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("pvKeyEncryptionAuxInfo", c_void_p),
        ("hCryptProv", UIntPtr),
        ("RecipientPublicKey", win32more.Security.Cryptography.CRYPT_BIT_BLOB),
        ("RecipientId", win32more.Security.Cryptography.CERT_ID),
    ]
    return CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO
def _define_CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO_head():
    class CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO(Structure):
        pass
    return CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO
def _define_CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO():
    CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO = win32more.Security.Cryptography.CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO_head
    CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO._fields_ = [
        ("cbSize", UInt32),
        ("RecipientPublicKey", win32more.Security.Cryptography.CRYPT_BIT_BLOB),
        ("RecipientId", win32more.Security.Cryptography.CERT_ID),
        ("Date", win32more.Foundation.FILETIME),
        ("pOtherAttr", POINTER(win32more.Security.Cryptography.CRYPT_ATTRIBUTE_TYPE_VALUE_head)),
    ]
    return CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO
def _define_CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO_head():
    class CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO(Structure):
        pass
    return CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO
def _define_CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO():
    CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO = win32more.Security.Cryptography.CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO_head
    class CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO__Anonymous_e__Union(Union):
        pass
    CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO__Anonymous_e__Union._fields_ = [
        ("pEphemeralAlgorithm", POINTER(win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER_head)),
        ("pSenderId", POINTER(win32more.Security.Cryptography.CERT_ID_head)),
    ]
    CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO._anonymous_ = [
        'Anonymous',
    ]
    CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO._fields_ = [
        ("cbSize", UInt32),
        ("KeyEncryptionAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("pvKeyEncryptionAuxInfo", c_void_p),
        ("KeyWrapAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("pvKeyWrapAuxInfo", c_void_p),
        ("hCryptProv", UIntPtr),
        ("dwKeySpec", UInt32),
        ("dwKeyChoice", win32more.Security.Cryptography.CMSG_KEY_AGREE_OPTION),
        ("Anonymous", CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO__Anonymous_e__Union),
        ("UserKeyingMaterial", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("cRecipientEncryptedKeys", UInt32),
        ("rgpRecipientEncryptedKeys", POINTER(POINTER(win32more.Security.Cryptography.CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO_head))),
    ]
    return CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO
def _define_CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO_head():
    class CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO(Structure):
        pass
    return CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO
def _define_CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO():
    CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO = win32more.Security.Cryptography.CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO_head
    class CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO__Anonymous_e__Union(Union):
        pass
    CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO__Anonymous_e__Union._fields_ = [
        ("hKeyEncryptionKey", UIntPtr),
        ("pvKeyEncryptionKey", c_void_p),
    ]
    CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO._anonymous_ = [
        'Anonymous',
    ]
    CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO._fields_ = [
        ("cbSize", UInt32),
        ("KeyEncryptionAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("pvKeyEncryptionAuxInfo", c_void_p),
        ("hCryptProv", UIntPtr),
        ("dwKeyChoice", UInt32),
        ("Anonymous", CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO__Anonymous_e__Union),
        ("KeyId", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("Date", win32more.Foundation.FILETIME),
        ("pOtherAttr", POINTER(win32more.Security.Cryptography.CRYPT_ATTRIBUTE_TYPE_VALUE_head)),
    ]
    return CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO
def _define_CMSG_RECIPIENT_ENCODE_INFO_head():
    class CMSG_RECIPIENT_ENCODE_INFO(Structure):
        pass
    return CMSG_RECIPIENT_ENCODE_INFO
def _define_CMSG_RECIPIENT_ENCODE_INFO():
    CMSG_RECIPIENT_ENCODE_INFO = win32more.Security.Cryptography.CMSG_RECIPIENT_ENCODE_INFO_head
    class CMSG_RECIPIENT_ENCODE_INFO__Anonymous_e__Union(Union):
        pass
    CMSG_RECIPIENT_ENCODE_INFO__Anonymous_e__Union._fields_ = [
        ("pKeyTrans", POINTER(win32more.Security.Cryptography.CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO_head)),
        ("pKeyAgree", POINTER(win32more.Security.Cryptography.CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO_head)),
        ("pMailList", POINTER(win32more.Security.Cryptography.CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO_head)),
    ]
    CMSG_RECIPIENT_ENCODE_INFO._anonymous_ = [
        'Anonymous',
    ]
    CMSG_RECIPIENT_ENCODE_INFO._fields_ = [
        ("dwRecipientChoice", UInt32),
        ("Anonymous", CMSG_RECIPIENT_ENCODE_INFO__Anonymous_e__Union),
    ]
    return CMSG_RECIPIENT_ENCODE_INFO
def _define_CMSG_RC2_AUX_INFO_head():
    class CMSG_RC2_AUX_INFO(Structure):
        pass
    return CMSG_RC2_AUX_INFO
def _define_CMSG_RC2_AUX_INFO():
    CMSG_RC2_AUX_INFO = win32more.Security.Cryptography.CMSG_RC2_AUX_INFO_head
    CMSG_RC2_AUX_INFO._fields_ = [
        ("cbSize", UInt32),
        ("dwBitLen", UInt32),
    ]
    return CMSG_RC2_AUX_INFO
def _define_CMSG_SP3_COMPATIBLE_AUX_INFO_head():
    class CMSG_SP3_COMPATIBLE_AUX_INFO(Structure):
        pass
    return CMSG_SP3_COMPATIBLE_AUX_INFO
def _define_CMSG_SP3_COMPATIBLE_AUX_INFO():
    CMSG_SP3_COMPATIBLE_AUX_INFO = win32more.Security.Cryptography.CMSG_SP3_COMPATIBLE_AUX_INFO_head
    CMSG_SP3_COMPATIBLE_AUX_INFO._fields_ = [
        ("cbSize", UInt32),
        ("dwFlags", UInt32),
    ]
    return CMSG_SP3_COMPATIBLE_AUX_INFO
def _define_CMSG_RC4_AUX_INFO_head():
    class CMSG_RC4_AUX_INFO(Structure):
        pass
    return CMSG_RC4_AUX_INFO
def _define_CMSG_RC4_AUX_INFO():
    CMSG_RC4_AUX_INFO = win32more.Security.Cryptography.CMSG_RC4_AUX_INFO_head
    CMSG_RC4_AUX_INFO._fields_ = [
        ("cbSize", UInt32),
        ("dwBitLen", UInt32),
    ]
    return CMSG_RC4_AUX_INFO
def _define_CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO_head():
    class CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO(Structure):
        pass
    return CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO
def _define_CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO():
    CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO = win32more.Security.Cryptography.CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO_head
    CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO._fields_ = [
        ("cbSize", UInt32),
        ("SignedInfo", win32more.Security.Cryptography.CMSG_SIGNED_ENCODE_INFO),
        ("EnvelopedInfo", win32more.Security.Cryptography.CMSG_ENVELOPED_ENCODE_INFO),
    ]
    return CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO
def _define_CMSG_HASHED_ENCODE_INFO_head():
    class CMSG_HASHED_ENCODE_INFO(Structure):
        pass
    return CMSG_HASHED_ENCODE_INFO
def _define_CMSG_HASHED_ENCODE_INFO():
    CMSG_HASHED_ENCODE_INFO = win32more.Security.Cryptography.CMSG_HASHED_ENCODE_INFO_head
    CMSG_HASHED_ENCODE_INFO._fields_ = [
        ("cbSize", UInt32),
        ("hCryptProv", UIntPtr),
        ("HashAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("pvHashAuxInfo", c_void_p),
    ]
    return CMSG_HASHED_ENCODE_INFO
def _define_CMSG_ENCRYPTED_ENCODE_INFO_head():
    class CMSG_ENCRYPTED_ENCODE_INFO(Structure):
        pass
    return CMSG_ENCRYPTED_ENCODE_INFO
def _define_CMSG_ENCRYPTED_ENCODE_INFO():
    CMSG_ENCRYPTED_ENCODE_INFO = win32more.Security.Cryptography.CMSG_ENCRYPTED_ENCODE_INFO_head
    CMSG_ENCRYPTED_ENCODE_INFO._fields_ = [
        ("cbSize", UInt32),
        ("ContentEncryptionAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("pvEncryptionAuxInfo", c_void_p),
    ]
    return CMSG_ENCRYPTED_ENCODE_INFO
def _define_PFN_CMSG_STREAM_OUTPUT():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_char_p_no,UInt32,win32more.Foundation.BOOL, use_last_error=False)
def _define_CMSG_STREAM_INFO_head():
    class CMSG_STREAM_INFO(Structure):
        pass
    return CMSG_STREAM_INFO
def _define_CMSG_STREAM_INFO():
    CMSG_STREAM_INFO = win32more.Security.Cryptography.CMSG_STREAM_INFO_head
    CMSG_STREAM_INFO._fields_ = [
        ("cbContent", UInt32),
        ("pfnStreamOutput", win32more.Security.Cryptography.PFN_CMSG_STREAM_OUTPUT),
        ("pvArg", c_void_p),
    ]
    return CMSG_STREAM_INFO
def _define_CMSG_SIGNER_INFO_head():
    class CMSG_SIGNER_INFO(Structure):
        pass
    return CMSG_SIGNER_INFO
def _define_CMSG_SIGNER_INFO():
    CMSG_SIGNER_INFO = win32more.Security.Cryptography.CMSG_SIGNER_INFO_head
    CMSG_SIGNER_INFO._fields_ = [
        ("dwVersion", UInt32),
        ("Issuer", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("SerialNumber", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("HashAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("HashEncryptionAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("EncryptedHash", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("AuthAttrs", win32more.Security.Cryptography.CRYPT_ATTRIBUTES),
        ("UnauthAttrs", win32more.Security.Cryptography.CRYPT_ATTRIBUTES),
    ]
    return CMSG_SIGNER_INFO
def _define_CMSG_CMS_SIGNER_INFO_head():
    class CMSG_CMS_SIGNER_INFO(Structure):
        pass
    return CMSG_CMS_SIGNER_INFO
def _define_CMSG_CMS_SIGNER_INFO():
    CMSG_CMS_SIGNER_INFO = win32more.Security.Cryptography.CMSG_CMS_SIGNER_INFO_head
    CMSG_CMS_SIGNER_INFO._fields_ = [
        ("dwVersion", UInt32),
        ("SignerId", win32more.Security.Cryptography.CERT_ID),
        ("HashAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("HashEncryptionAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("EncryptedHash", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("AuthAttrs", win32more.Security.Cryptography.CRYPT_ATTRIBUTES),
        ("UnauthAttrs", win32more.Security.Cryptography.CRYPT_ATTRIBUTES),
    ]
    return CMSG_CMS_SIGNER_INFO
def _define_CMSG_KEY_TRANS_RECIPIENT_INFO_head():
    class CMSG_KEY_TRANS_RECIPIENT_INFO(Structure):
        pass
    return CMSG_KEY_TRANS_RECIPIENT_INFO
def _define_CMSG_KEY_TRANS_RECIPIENT_INFO():
    CMSG_KEY_TRANS_RECIPIENT_INFO = win32more.Security.Cryptography.CMSG_KEY_TRANS_RECIPIENT_INFO_head
    CMSG_KEY_TRANS_RECIPIENT_INFO._fields_ = [
        ("dwVersion", UInt32),
        ("RecipientId", win32more.Security.Cryptography.CERT_ID),
        ("KeyEncryptionAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("EncryptedKey", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CMSG_KEY_TRANS_RECIPIENT_INFO
def _define_CMSG_RECIPIENT_ENCRYPTED_KEY_INFO_head():
    class CMSG_RECIPIENT_ENCRYPTED_KEY_INFO(Structure):
        pass
    return CMSG_RECIPIENT_ENCRYPTED_KEY_INFO
def _define_CMSG_RECIPIENT_ENCRYPTED_KEY_INFO():
    CMSG_RECIPIENT_ENCRYPTED_KEY_INFO = win32more.Security.Cryptography.CMSG_RECIPIENT_ENCRYPTED_KEY_INFO_head
    CMSG_RECIPIENT_ENCRYPTED_KEY_INFO._fields_ = [
        ("RecipientId", win32more.Security.Cryptography.CERT_ID),
        ("EncryptedKey", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("Date", win32more.Foundation.FILETIME),
        ("pOtherAttr", POINTER(win32more.Security.Cryptography.CRYPT_ATTRIBUTE_TYPE_VALUE_head)),
    ]
    return CMSG_RECIPIENT_ENCRYPTED_KEY_INFO
def _define_CMSG_KEY_AGREE_RECIPIENT_INFO_head():
    class CMSG_KEY_AGREE_RECIPIENT_INFO(Structure):
        pass
    return CMSG_KEY_AGREE_RECIPIENT_INFO
def _define_CMSG_KEY_AGREE_RECIPIENT_INFO():
    CMSG_KEY_AGREE_RECIPIENT_INFO = win32more.Security.Cryptography.CMSG_KEY_AGREE_RECIPIENT_INFO_head
    class CMSG_KEY_AGREE_RECIPIENT_INFO__Anonymous_e__Union(Union):
        pass
    CMSG_KEY_AGREE_RECIPIENT_INFO__Anonymous_e__Union._fields_ = [
        ("OriginatorCertId", win32more.Security.Cryptography.CERT_ID),
        ("OriginatorPublicKeyInfo", win32more.Security.Cryptography.CERT_PUBLIC_KEY_INFO),
    ]
    CMSG_KEY_AGREE_RECIPIENT_INFO._anonymous_ = [
        'Anonymous',
    ]
    CMSG_KEY_AGREE_RECIPIENT_INFO._fields_ = [
        ("dwVersion", UInt32),
        ("dwOriginatorChoice", win32more.Security.Cryptography.CMSG_KEY_AGREE_ORIGINATOR),
        ("Anonymous", CMSG_KEY_AGREE_RECIPIENT_INFO__Anonymous_e__Union),
        ("UserKeyingMaterial", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("KeyEncryptionAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("cRecipientEncryptedKeys", UInt32),
        ("rgpRecipientEncryptedKeys", POINTER(POINTER(win32more.Security.Cryptography.CMSG_RECIPIENT_ENCRYPTED_KEY_INFO_head))),
    ]
    return CMSG_KEY_AGREE_RECIPIENT_INFO
def _define_CMSG_MAIL_LIST_RECIPIENT_INFO_head():
    class CMSG_MAIL_LIST_RECIPIENT_INFO(Structure):
        pass
    return CMSG_MAIL_LIST_RECIPIENT_INFO
def _define_CMSG_MAIL_LIST_RECIPIENT_INFO():
    CMSG_MAIL_LIST_RECIPIENT_INFO = win32more.Security.Cryptography.CMSG_MAIL_LIST_RECIPIENT_INFO_head
    CMSG_MAIL_LIST_RECIPIENT_INFO._fields_ = [
        ("dwVersion", UInt32),
        ("KeyId", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("KeyEncryptionAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("EncryptedKey", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("Date", win32more.Foundation.FILETIME),
        ("pOtherAttr", POINTER(win32more.Security.Cryptography.CRYPT_ATTRIBUTE_TYPE_VALUE_head)),
    ]
    return CMSG_MAIL_LIST_RECIPIENT_INFO
def _define_CMSG_CMS_RECIPIENT_INFO_head():
    class CMSG_CMS_RECIPIENT_INFO(Structure):
        pass
    return CMSG_CMS_RECIPIENT_INFO
def _define_CMSG_CMS_RECIPIENT_INFO():
    CMSG_CMS_RECIPIENT_INFO = win32more.Security.Cryptography.CMSG_CMS_RECIPIENT_INFO_head
    class CMSG_CMS_RECIPIENT_INFO__Anonymous_e__Union(Union):
        pass
    CMSG_CMS_RECIPIENT_INFO__Anonymous_e__Union._fields_ = [
        ("pKeyTrans", POINTER(win32more.Security.Cryptography.CMSG_KEY_TRANS_RECIPIENT_INFO_head)),
        ("pKeyAgree", POINTER(win32more.Security.Cryptography.CMSG_KEY_AGREE_RECIPIENT_INFO_head)),
        ("pMailList", POINTER(win32more.Security.Cryptography.CMSG_MAIL_LIST_RECIPIENT_INFO_head)),
    ]
    CMSG_CMS_RECIPIENT_INFO._anonymous_ = [
        'Anonymous',
    ]
    CMSG_CMS_RECIPIENT_INFO._fields_ = [
        ("dwRecipientChoice", UInt32),
        ("Anonymous", CMSG_CMS_RECIPIENT_INFO__Anonymous_e__Union),
    ]
    return CMSG_CMS_RECIPIENT_INFO
def _define_CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA_head():
    class CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA(Structure):
        pass
    return CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA
def _define_CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA():
    CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA = win32more.Security.Cryptography.CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA_head
    CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA._fields_ = [
        ("cbSize", UInt32),
        ("hCryptProv", UIntPtr),
        ("dwSignerIndex", UInt32),
        ("dwSignerType", UInt32),
        ("pvSigner", c_void_p),
    ]
    return CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA
def _define_CMSG_CTRL_DECRYPT_PARA_head():
    class CMSG_CTRL_DECRYPT_PARA(Structure):
        pass
    return CMSG_CTRL_DECRYPT_PARA
def _define_CMSG_CTRL_DECRYPT_PARA():
    CMSG_CTRL_DECRYPT_PARA = win32more.Security.Cryptography.CMSG_CTRL_DECRYPT_PARA_head
    class CMSG_CTRL_DECRYPT_PARA__Anonymous_e__Union(Union):
        pass
    CMSG_CTRL_DECRYPT_PARA__Anonymous_e__Union._fields_ = [
        ("hCryptProv", UIntPtr),
        ("hNCryptKey", UIntPtr),
    ]
    CMSG_CTRL_DECRYPT_PARA._anonymous_ = [
        'Anonymous',
    ]
    CMSG_CTRL_DECRYPT_PARA._fields_ = [
        ("cbSize", UInt32),
        ("Anonymous", CMSG_CTRL_DECRYPT_PARA__Anonymous_e__Union),
        ("dwKeySpec", UInt32),
        ("dwRecipientIndex", UInt32),
    ]
    return CMSG_CTRL_DECRYPT_PARA
def _define_CMSG_CTRL_KEY_TRANS_DECRYPT_PARA_head():
    class CMSG_CTRL_KEY_TRANS_DECRYPT_PARA(Structure):
        pass
    return CMSG_CTRL_KEY_TRANS_DECRYPT_PARA
def _define_CMSG_CTRL_KEY_TRANS_DECRYPT_PARA():
    CMSG_CTRL_KEY_TRANS_DECRYPT_PARA = win32more.Security.Cryptography.CMSG_CTRL_KEY_TRANS_DECRYPT_PARA_head
    class CMSG_CTRL_KEY_TRANS_DECRYPT_PARA__Anonymous_e__Union(Union):
        pass
    CMSG_CTRL_KEY_TRANS_DECRYPT_PARA__Anonymous_e__Union._fields_ = [
        ("hCryptProv", UIntPtr),
        ("hNCryptKey", UIntPtr),
    ]
    CMSG_CTRL_KEY_TRANS_DECRYPT_PARA._anonymous_ = [
        'Anonymous',
    ]
    CMSG_CTRL_KEY_TRANS_DECRYPT_PARA._fields_ = [
        ("cbSize", UInt32),
        ("Anonymous", CMSG_CTRL_KEY_TRANS_DECRYPT_PARA__Anonymous_e__Union),
        ("dwKeySpec", UInt32),
        ("pKeyTrans", POINTER(win32more.Security.Cryptography.CMSG_KEY_TRANS_RECIPIENT_INFO_head)),
        ("dwRecipientIndex", UInt32),
    ]
    return CMSG_CTRL_KEY_TRANS_DECRYPT_PARA
def _define_CMSG_CTRL_KEY_AGREE_DECRYPT_PARA_head():
    class CMSG_CTRL_KEY_AGREE_DECRYPT_PARA(Structure):
        pass
    return CMSG_CTRL_KEY_AGREE_DECRYPT_PARA
def _define_CMSG_CTRL_KEY_AGREE_DECRYPT_PARA():
    CMSG_CTRL_KEY_AGREE_DECRYPT_PARA = win32more.Security.Cryptography.CMSG_CTRL_KEY_AGREE_DECRYPT_PARA_head
    class CMSG_CTRL_KEY_AGREE_DECRYPT_PARA__Anonymous_e__Union(Union):
        pass
    CMSG_CTRL_KEY_AGREE_DECRYPT_PARA__Anonymous_e__Union._fields_ = [
        ("hCryptProv", UIntPtr),
        ("hNCryptKey", UIntPtr),
    ]
    CMSG_CTRL_KEY_AGREE_DECRYPT_PARA._anonymous_ = [
        'Anonymous',
    ]
    CMSG_CTRL_KEY_AGREE_DECRYPT_PARA._fields_ = [
        ("cbSize", UInt32),
        ("Anonymous", CMSG_CTRL_KEY_AGREE_DECRYPT_PARA__Anonymous_e__Union),
        ("dwKeySpec", UInt32),
        ("pKeyAgree", POINTER(win32more.Security.Cryptography.CMSG_KEY_AGREE_RECIPIENT_INFO_head)),
        ("dwRecipientIndex", UInt32),
        ("dwRecipientEncryptedKeyIndex", UInt32),
        ("OriginatorPublicKey", win32more.Security.Cryptography.CRYPT_BIT_BLOB),
    ]
    return CMSG_CTRL_KEY_AGREE_DECRYPT_PARA
def _define_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA_head():
    class CMSG_CTRL_MAIL_LIST_DECRYPT_PARA(Structure):
        pass
    return CMSG_CTRL_MAIL_LIST_DECRYPT_PARA
def _define_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA():
    CMSG_CTRL_MAIL_LIST_DECRYPT_PARA = win32more.Security.Cryptography.CMSG_CTRL_MAIL_LIST_DECRYPT_PARA_head
    class CMSG_CTRL_MAIL_LIST_DECRYPT_PARA__Anonymous_e__Union(Union):
        pass
    CMSG_CTRL_MAIL_LIST_DECRYPT_PARA__Anonymous_e__Union._fields_ = [
        ("hKeyEncryptionKey", UIntPtr),
        ("pvKeyEncryptionKey", c_void_p),
    ]
    CMSG_CTRL_MAIL_LIST_DECRYPT_PARA._anonymous_ = [
        'Anonymous',
    ]
    CMSG_CTRL_MAIL_LIST_DECRYPT_PARA._fields_ = [
        ("cbSize", UInt32),
        ("hCryptProv", UIntPtr),
        ("pMailList", POINTER(win32more.Security.Cryptography.CMSG_MAIL_LIST_RECIPIENT_INFO_head)),
        ("dwRecipientIndex", UInt32),
        ("dwKeyChoice", UInt32),
        ("Anonymous", CMSG_CTRL_MAIL_LIST_DECRYPT_PARA__Anonymous_e__Union),
    ]
    return CMSG_CTRL_MAIL_LIST_DECRYPT_PARA
def _define_CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA_head():
    class CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA(Structure):
        pass
    return CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA
def _define_CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA():
    CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA = win32more.Security.Cryptography.CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA_head
    CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA._fields_ = [
        ("cbSize", UInt32),
        ("dwSignerIndex", UInt32),
        ("blob", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA
def _define_CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA_head():
    class CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA(Structure):
        pass
    return CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA
def _define_CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA():
    CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA = win32more.Security.Cryptography.CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA_head
    CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA._fields_ = [
        ("cbSize", UInt32),
        ("dwSignerIndex", UInt32),
        ("dwUnauthAttrIndex", UInt32),
    ]
    return CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA
def _define_PFN_CMSG_ALLOC():
    return CFUNCTYPE(c_void_p,UIntPtr, use_last_error=False)
def _define_PFN_CMSG_FREE():
    return CFUNCTYPE(Void,c_void_p, use_last_error=False)
def _define_PFN_CMSG_GEN_ENCRYPT_KEY():
    return CFUNCTYPE(win32more.Foundation.BOOL,POINTER(UIntPtr),POINTER(win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER_head),c_void_p,POINTER(win32more.Security.Cryptography.CERT_PUBLIC_KEY_INFO_head),win32more.Security.Cryptography.PFN_CMSG_ALLOC,POINTER(UIntPtr),POINTER(c_char_p_no),POINTER(UInt32), use_last_error=False)
def _define_PFN_CMSG_EXPORT_ENCRYPT_KEY():
    return CFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UIntPtr,POINTER(win32more.Security.Cryptography.CERT_PUBLIC_KEY_INFO_head),c_char_p_no,POINTER(UInt32), use_last_error=False)
def _define_PFN_CMSG_IMPORT_ENCRYPT_KEY():
    return CFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,POINTER(win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER_head),POINTER(win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER_head),c_char_p_no,UInt32,POINTER(UIntPtr), use_last_error=False)
def _define_CMSG_CONTENT_ENCRYPT_INFO_head():
    class CMSG_CONTENT_ENCRYPT_INFO(Structure):
        pass
    return CMSG_CONTENT_ENCRYPT_INFO
def _define_CMSG_CONTENT_ENCRYPT_INFO():
    CMSG_CONTENT_ENCRYPT_INFO = win32more.Security.Cryptography.CMSG_CONTENT_ENCRYPT_INFO_head
    class CMSG_CONTENT_ENCRYPT_INFO__Anonymous_e__Union(Union):
        pass
    CMSG_CONTENT_ENCRYPT_INFO__Anonymous_e__Union._fields_ = [
        ("hContentEncryptKey", UIntPtr),
        ("hCNGContentEncryptKey", win32more.Security.Cryptography.BCRYPT_KEY_HANDLE),
    ]
    CMSG_CONTENT_ENCRYPT_INFO._anonymous_ = [
        'Anonymous',
    ]
    CMSG_CONTENT_ENCRYPT_INFO._fields_ = [
        ("cbSize", UInt32),
        ("hCryptProv", UIntPtr),
        ("ContentEncryptionAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("pvEncryptionAuxInfo", c_void_p),
        ("cRecipients", UInt32),
        ("rgCmsRecipients", POINTER(win32more.Security.Cryptography.CMSG_RECIPIENT_ENCODE_INFO_head)),
        ("pfnAlloc", win32more.Security.Cryptography.PFN_CMSG_ALLOC),
        ("pfnFree", win32more.Security.Cryptography.PFN_CMSG_FREE),
        ("dwEncryptFlags", UInt32),
        ("Anonymous", CMSG_CONTENT_ENCRYPT_INFO__Anonymous_e__Union),
        ("dwFlags", UInt32),
        ("fCNG", win32more.Foundation.BOOL),
        ("pbCNGContentEncryptKeyObject", c_char_p_no),
        ("pbContentEncryptKey", c_char_p_no),
        ("cbContentEncryptKey", UInt32),
    ]
    return CMSG_CONTENT_ENCRYPT_INFO
def _define_PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY():
    return CFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CMSG_CONTENT_ENCRYPT_INFO_head),UInt32,c_void_p, use_last_error=False)
def _define_CMSG_KEY_TRANS_ENCRYPT_INFO_head():
    class CMSG_KEY_TRANS_ENCRYPT_INFO(Structure):
        pass
    return CMSG_KEY_TRANS_ENCRYPT_INFO
def _define_CMSG_KEY_TRANS_ENCRYPT_INFO():
    CMSG_KEY_TRANS_ENCRYPT_INFO = win32more.Security.Cryptography.CMSG_KEY_TRANS_ENCRYPT_INFO_head
    CMSG_KEY_TRANS_ENCRYPT_INFO._fields_ = [
        ("cbSize", UInt32),
        ("dwRecipientIndex", UInt32),
        ("KeyEncryptionAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("EncryptedKey", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("dwFlags", UInt32),
    ]
    return CMSG_KEY_TRANS_ENCRYPT_INFO
def _define_PFN_CMSG_EXPORT_KEY_TRANS():
    return CFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CMSG_CONTENT_ENCRYPT_INFO_head),POINTER(win32more.Security.Cryptography.CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO_head),POINTER(win32more.Security.Cryptography.CMSG_KEY_TRANS_ENCRYPT_INFO_head),UInt32,c_void_p, use_last_error=False)
def _define_CMSG_KEY_AGREE_KEY_ENCRYPT_INFO_head():
    class CMSG_KEY_AGREE_KEY_ENCRYPT_INFO(Structure):
        pass
    return CMSG_KEY_AGREE_KEY_ENCRYPT_INFO
def _define_CMSG_KEY_AGREE_KEY_ENCRYPT_INFO():
    CMSG_KEY_AGREE_KEY_ENCRYPT_INFO = win32more.Security.Cryptography.CMSG_KEY_AGREE_KEY_ENCRYPT_INFO_head
    CMSG_KEY_AGREE_KEY_ENCRYPT_INFO._fields_ = [
        ("cbSize", UInt32),
        ("EncryptedKey", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CMSG_KEY_AGREE_KEY_ENCRYPT_INFO
def _define_CMSG_KEY_AGREE_ENCRYPT_INFO_head():
    class CMSG_KEY_AGREE_ENCRYPT_INFO(Structure):
        pass
    return CMSG_KEY_AGREE_ENCRYPT_INFO
def _define_CMSG_KEY_AGREE_ENCRYPT_INFO():
    CMSG_KEY_AGREE_ENCRYPT_INFO = win32more.Security.Cryptography.CMSG_KEY_AGREE_ENCRYPT_INFO_head
    class CMSG_KEY_AGREE_ENCRYPT_INFO__Anonymous_e__Union(Union):
        pass
    CMSG_KEY_AGREE_ENCRYPT_INFO__Anonymous_e__Union._fields_ = [
        ("OriginatorCertId", win32more.Security.Cryptography.CERT_ID),
        ("OriginatorPublicKeyInfo", win32more.Security.Cryptography.CERT_PUBLIC_KEY_INFO),
    ]
    CMSG_KEY_AGREE_ENCRYPT_INFO._anonymous_ = [
        'Anonymous',
    ]
    CMSG_KEY_AGREE_ENCRYPT_INFO._fields_ = [
        ("cbSize", UInt32),
        ("dwRecipientIndex", UInt32),
        ("KeyEncryptionAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("UserKeyingMaterial", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("dwOriginatorChoice", win32more.Security.Cryptography.CMSG_KEY_AGREE_ORIGINATOR),
        ("Anonymous", CMSG_KEY_AGREE_ENCRYPT_INFO__Anonymous_e__Union),
        ("cKeyAgreeKeyEncryptInfo", UInt32),
        ("rgpKeyAgreeKeyEncryptInfo", POINTER(POINTER(win32more.Security.Cryptography.CMSG_KEY_AGREE_KEY_ENCRYPT_INFO_head))),
        ("dwFlags", UInt32),
    ]
    return CMSG_KEY_AGREE_ENCRYPT_INFO
def _define_PFN_CMSG_EXPORT_KEY_AGREE():
    return CFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CMSG_CONTENT_ENCRYPT_INFO_head),POINTER(win32more.Security.Cryptography.CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO_head),POINTER(win32more.Security.Cryptography.CMSG_KEY_AGREE_ENCRYPT_INFO_head),UInt32,c_void_p, use_last_error=False)
def _define_CMSG_MAIL_LIST_ENCRYPT_INFO_head():
    class CMSG_MAIL_LIST_ENCRYPT_INFO(Structure):
        pass
    return CMSG_MAIL_LIST_ENCRYPT_INFO
def _define_CMSG_MAIL_LIST_ENCRYPT_INFO():
    CMSG_MAIL_LIST_ENCRYPT_INFO = win32more.Security.Cryptography.CMSG_MAIL_LIST_ENCRYPT_INFO_head
    CMSG_MAIL_LIST_ENCRYPT_INFO._fields_ = [
        ("cbSize", UInt32),
        ("dwRecipientIndex", UInt32),
        ("KeyEncryptionAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("EncryptedKey", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("dwFlags", UInt32),
    ]
    return CMSG_MAIL_LIST_ENCRYPT_INFO
def _define_PFN_CMSG_EXPORT_MAIL_LIST():
    return CFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CMSG_CONTENT_ENCRYPT_INFO_head),POINTER(win32more.Security.Cryptography.CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO_head),POINTER(win32more.Security.Cryptography.CMSG_MAIL_LIST_ENCRYPT_INFO_head),UInt32,c_void_p, use_last_error=False)
def _define_PFN_CMSG_IMPORT_KEY_TRANS():
    return CFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER_head),POINTER(win32more.Security.Cryptography.CMSG_CTRL_KEY_TRANS_DECRYPT_PARA_head),UInt32,c_void_p,POINTER(UIntPtr), use_last_error=False)
def _define_PFN_CMSG_IMPORT_KEY_AGREE():
    return CFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER_head),POINTER(win32more.Security.Cryptography.CMSG_CTRL_KEY_AGREE_DECRYPT_PARA_head),UInt32,c_void_p,POINTER(UIntPtr), use_last_error=False)
def _define_PFN_CMSG_IMPORT_MAIL_LIST():
    return CFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER_head),POINTER(win32more.Security.Cryptography.CMSG_CTRL_MAIL_LIST_DECRYPT_PARA_head),UInt32,c_void_p,POINTER(UIntPtr), use_last_error=False)
def _define_CMSG_CNG_CONTENT_DECRYPT_INFO_head():
    class CMSG_CNG_CONTENT_DECRYPT_INFO(Structure):
        pass
    return CMSG_CNG_CONTENT_DECRYPT_INFO
def _define_CMSG_CNG_CONTENT_DECRYPT_INFO():
    CMSG_CNG_CONTENT_DECRYPT_INFO = win32more.Security.Cryptography.CMSG_CNG_CONTENT_DECRYPT_INFO_head
    CMSG_CNG_CONTENT_DECRYPT_INFO._fields_ = [
        ("cbSize", UInt32),
        ("ContentEncryptionAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("pfnAlloc", win32more.Security.Cryptography.PFN_CMSG_ALLOC),
        ("pfnFree", win32more.Security.Cryptography.PFN_CMSG_FREE),
        ("hNCryptKey", UIntPtr),
        ("pbContentEncryptKey", c_char_p_no),
        ("cbContentEncryptKey", UInt32),
        ("hCNGContentEncryptKey", win32more.Security.Cryptography.BCRYPT_KEY_HANDLE),
        ("pbCNGContentEncryptKeyObject", c_char_p_no),
    ]
    return CMSG_CNG_CONTENT_DECRYPT_INFO
def _define_PFN_CMSG_CNG_IMPORT_KEY_TRANS():
    return CFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CMSG_CNG_CONTENT_DECRYPT_INFO_head),POINTER(win32more.Security.Cryptography.CMSG_CTRL_KEY_TRANS_DECRYPT_PARA_head),UInt32,c_void_p, use_last_error=False)
def _define_PFN_CMSG_CNG_IMPORT_KEY_AGREE():
    return CFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CMSG_CNG_CONTENT_DECRYPT_INFO_head),POINTER(win32more.Security.Cryptography.CMSG_CTRL_KEY_AGREE_DECRYPT_PARA_head),UInt32,c_void_p, use_last_error=False)
def _define_PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY():
    return CFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CMSG_CNG_CONTENT_DECRYPT_INFO_head),UInt32,c_void_p, use_last_error=False)
def _define_CERT_CONTEXT_head():
    class CERT_CONTEXT(Structure):
        pass
    return CERT_CONTEXT
def _define_CERT_CONTEXT():
    CERT_CONTEXT = win32more.Security.Cryptography.CERT_CONTEXT_head
    CERT_CONTEXT._fields_ = [
        ("dwCertEncodingType", UInt32),
        ("pbCertEncoded", c_char_p_no),
        ("cbCertEncoded", UInt32),
        ("pCertInfo", POINTER(win32more.Security.Cryptography.CERT_INFO_head)),
        ("hCertStore", c_void_p),
    ]
    return CERT_CONTEXT
def _define_CRL_CONTEXT_head():
    class CRL_CONTEXT(Structure):
        pass
    return CRL_CONTEXT
def _define_CRL_CONTEXT():
    CRL_CONTEXT = win32more.Security.Cryptography.CRL_CONTEXT_head
    CRL_CONTEXT._fields_ = [
        ("dwCertEncodingType", UInt32),
        ("pbCrlEncoded", c_char_p_no),
        ("cbCrlEncoded", UInt32),
        ("pCrlInfo", POINTER(win32more.Security.Cryptography.CRL_INFO_head)),
        ("hCertStore", c_void_p),
    ]
    return CRL_CONTEXT
def _define_CTL_CONTEXT_head():
    class CTL_CONTEXT(Structure):
        pass
    return CTL_CONTEXT
def _define_CTL_CONTEXT():
    CTL_CONTEXT = win32more.Security.Cryptography.CTL_CONTEXT_head
    CTL_CONTEXT._fields_ = [
        ("dwMsgAndCertEncodingType", UInt32),
        ("pbCtlEncoded", c_char_p_no),
        ("cbCtlEncoded", UInt32),
        ("pCtlInfo", POINTER(win32more.Security.Cryptography.CTL_INFO_head)),
        ("hCertStore", c_void_p),
        ("hCryptMsg", c_void_p),
        ("pbCtlContent", c_char_p_no),
        ("cbCtlContent", UInt32),
    ]
    return CTL_CONTEXT
CertKeyType = UInt32
CertKeyType_KeyTypeOther = 0
CertKeyType_KeyTypeVirtualSmartCard = 1
CertKeyType_KeyTypePhysicalSmartCard = 2
CertKeyType_KeyTypePassport = 3
CertKeyType_KeyTypePassportRemote = 4
CertKeyType_KeyTypePassportSmartCard = 5
CertKeyType_KeyTypeHardware = 6
CertKeyType_KeyTypeSoftware = 7
CertKeyType_KeyTypeSelfSigned = 8
def _define_CRYPT_KEY_PROV_PARAM_head():
    class CRYPT_KEY_PROV_PARAM(Structure):
        pass
    return CRYPT_KEY_PROV_PARAM
def _define_CRYPT_KEY_PROV_PARAM():
    CRYPT_KEY_PROV_PARAM = win32more.Security.Cryptography.CRYPT_KEY_PROV_PARAM_head
    CRYPT_KEY_PROV_PARAM._fields_ = [
        ("dwParam", UInt32),
        ("pbData", c_char_p_no),
        ("cbData", UInt32),
        ("dwFlags", UInt32),
    ]
    return CRYPT_KEY_PROV_PARAM
def _define_CRYPT_KEY_PROV_INFO_head():
    class CRYPT_KEY_PROV_INFO(Structure):
        pass
    return CRYPT_KEY_PROV_INFO
def _define_CRYPT_KEY_PROV_INFO():
    CRYPT_KEY_PROV_INFO = win32more.Security.Cryptography.CRYPT_KEY_PROV_INFO_head
    CRYPT_KEY_PROV_INFO._fields_ = [
        ("pwszContainerName", win32more.Foundation.PWSTR),
        ("pwszProvName", win32more.Foundation.PWSTR),
        ("dwProvType", UInt32),
        ("dwFlags", win32more.Security.Cryptography.CRYPT_KEY_FLAGS),
        ("cProvParam", UInt32),
        ("rgProvParam", POINTER(win32more.Security.Cryptography.CRYPT_KEY_PROV_PARAM_head)),
        ("dwKeySpec", UInt32),
    ]
    return CRYPT_KEY_PROV_INFO
def _define_CERT_KEY_CONTEXT_head():
    class CERT_KEY_CONTEXT(Structure):
        pass
    return CERT_KEY_CONTEXT
def _define_CERT_KEY_CONTEXT():
    CERT_KEY_CONTEXT = win32more.Security.Cryptography.CERT_KEY_CONTEXT_head
    class CERT_KEY_CONTEXT__Anonymous_e__Union(Union):
        pass
    CERT_KEY_CONTEXT__Anonymous_e__Union._fields_ = [
        ("hCryptProv", UIntPtr),
        ("hNCryptKey", UIntPtr),
    ]
    CERT_KEY_CONTEXT._anonymous_ = [
        'Anonymous',
    ]
    CERT_KEY_CONTEXT._fields_ = [
        ("cbSize", UInt32),
        ("Anonymous", CERT_KEY_CONTEXT__Anonymous_e__Union),
        ("dwKeySpec", UInt32),
    ]
    return CERT_KEY_CONTEXT
def _define_ROOT_INFO_LUID_head():
    class ROOT_INFO_LUID(Structure):
        pass
    return ROOT_INFO_LUID
def _define_ROOT_INFO_LUID():
    ROOT_INFO_LUID = win32more.Security.Cryptography.ROOT_INFO_LUID_head
    ROOT_INFO_LUID._fields_ = [
        ("LowPart", UInt32),
        ("HighPart", Int32),
    ]
    return ROOT_INFO_LUID
def _define_CRYPT_SMART_CARD_ROOT_INFO_head():
    class CRYPT_SMART_CARD_ROOT_INFO(Structure):
        pass
    return CRYPT_SMART_CARD_ROOT_INFO
def _define_CRYPT_SMART_CARD_ROOT_INFO():
    CRYPT_SMART_CARD_ROOT_INFO = win32more.Security.Cryptography.CRYPT_SMART_CARD_ROOT_INFO_head
    CRYPT_SMART_CARD_ROOT_INFO._fields_ = [
        ("rgbCardID", Byte * 16),
        ("luid", win32more.Security.Cryptography.ROOT_INFO_LUID),
    ]
    return CRYPT_SMART_CARD_ROOT_INFO
def _define_CERT_SYSTEM_STORE_RELOCATE_PARA_head():
    class CERT_SYSTEM_STORE_RELOCATE_PARA(Structure):
        pass
    return CERT_SYSTEM_STORE_RELOCATE_PARA
def _define_CERT_SYSTEM_STORE_RELOCATE_PARA():
    CERT_SYSTEM_STORE_RELOCATE_PARA = win32more.Security.Cryptography.CERT_SYSTEM_STORE_RELOCATE_PARA_head
    class CERT_SYSTEM_STORE_RELOCATE_PARA__Anonymous2_e__Union(Union):
        pass
    CERT_SYSTEM_STORE_RELOCATE_PARA__Anonymous2_e__Union._fields_ = [
        ("pvSystemStore", c_void_p),
        ("pszSystemStore", win32more.Foundation.PSTR),
        ("pwszSystemStore", win32more.Foundation.PWSTR),
    ]
    class CERT_SYSTEM_STORE_RELOCATE_PARA__Anonymous1_e__Union(Union):
        pass
    CERT_SYSTEM_STORE_RELOCATE_PARA__Anonymous1_e__Union._fields_ = [
        ("hKeyBase", win32more.System.Registry.HKEY),
        ("pvBase", c_void_p),
    ]
    CERT_SYSTEM_STORE_RELOCATE_PARA._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
    ]
    CERT_SYSTEM_STORE_RELOCATE_PARA._fields_ = [
        ("Anonymous1", CERT_SYSTEM_STORE_RELOCATE_PARA__Anonymous1_e__Union),
        ("Anonymous2", CERT_SYSTEM_STORE_RELOCATE_PARA__Anonymous2_e__Union),
    ]
    return CERT_SYSTEM_STORE_RELOCATE_PARA
def _define_CERT_REGISTRY_STORE_CLIENT_GPT_PARA_head():
    class CERT_REGISTRY_STORE_CLIENT_GPT_PARA(Structure):
        pass
    return CERT_REGISTRY_STORE_CLIENT_GPT_PARA
def _define_CERT_REGISTRY_STORE_CLIENT_GPT_PARA():
    CERT_REGISTRY_STORE_CLIENT_GPT_PARA = win32more.Security.Cryptography.CERT_REGISTRY_STORE_CLIENT_GPT_PARA_head
    CERT_REGISTRY_STORE_CLIENT_GPT_PARA._fields_ = [
        ("hKeyBase", win32more.System.Registry.HKEY),
        ("pwszRegPath", win32more.Foundation.PWSTR),
    ]
    return CERT_REGISTRY_STORE_CLIENT_GPT_PARA
def _define_CERT_REGISTRY_STORE_ROAMING_PARA_head():
    class CERT_REGISTRY_STORE_ROAMING_PARA(Structure):
        pass
    return CERT_REGISTRY_STORE_ROAMING_PARA
def _define_CERT_REGISTRY_STORE_ROAMING_PARA():
    CERT_REGISTRY_STORE_ROAMING_PARA = win32more.Security.Cryptography.CERT_REGISTRY_STORE_ROAMING_PARA_head
    CERT_REGISTRY_STORE_ROAMING_PARA._fields_ = [
        ("hKey", win32more.System.Registry.HKEY),
        ("pwszStoreDirectory", win32more.Foundation.PWSTR),
    ]
    return CERT_REGISTRY_STORE_ROAMING_PARA
def _define_CERT_LDAP_STORE_OPENED_PARA_head():
    class CERT_LDAP_STORE_OPENED_PARA(Structure):
        pass
    return CERT_LDAP_STORE_OPENED_PARA
def _define_CERT_LDAP_STORE_OPENED_PARA():
    CERT_LDAP_STORE_OPENED_PARA = win32more.Security.Cryptography.CERT_LDAP_STORE_OPENED_PARA_head
    CERT_LDAP_STORE_OPENED_PARA._fields_ = [
        ("pvLdapSessionHandle", c_void_p),
        ("pwszLdapUrl", win32more.Foundation.PWSTR),
    ]
    return CERT_LDAP_STORE_OPENED_PARA
def _define_CERT_STORE_PROV_INFO_head():
    class CERT_STORE_PROV_INFO(Structure):
        pass
    return CERT_STORE_PROV_INFO
def _define_CERT_STORE_PROV_INFO():
    CERT_STORE_PROV_INFO = win32more.Security.Cryptography.CERT_STORE_PROV_INFO_head
    CERT_STORE_PROV_INFO._fields_ = [
        ("cbSize", UInt32),
        ("cStoreProvFunc", UInt32),
        ("rgpvStoreProvFunc", POINTER(c_void_p)),
        ("hStoreProv", c_void_p),
        ("dwStoreProvFlags", win32more.Security.Cryptography.CERT_STORE_PROV_FLAGS),
        ("hStoreProvFuncAddr2", c_void_p),
    ]
    return CERT_STORE_PROV_INFO
def _define_PFN_CERT_DLL_OPEN_STORE_PROV_FUNC():
    return CFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,win32more.Security.Cryptography.CERT_QUERY_ENCODING_TYPE,UIntPtr,win32more.Security.Cryptography.CERT_OPEN_STORE_FLAGS,c_void_p,c_void_p,POINTER(win32more.Security.Cryptography.CERT_STORE_PROV_INFO_head), use_last_error=False)
def _define_PFN_CERT_STORE_PROV_CLOSE():
    return CFUNCTYPE(Void,c_void_p,UInt32, use_last_error=False)
def _define_PFN_CERT_STORE_PROV_READ_CERT():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),UInt32,POINTER(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)), use_last_error=False)
def _define_PFN_CERT_STORE_PROV_WRITE_CERT():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),UInt32, use_last_error=False)
def _define_PFN_CERT_STORE_PROV_DELETE_CERT():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),UInt32, use_last_error=False)
def _define_PFN_CERT_STORE_PROV_SET_CERT_PROPERTY():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),UInt32,UInt32,c_void_p, use_last_error=False)
def _define_PFN_CERT_STORE_PROV_READ_CRL():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head),UInt32,POINTER(POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head)), use_last_error=False)
def _define_PFN_CERT_STORE_PROV_WRITE_CRL():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head),UInt32, use_last_error=False)
def _define_PFN_CERT_STORE_PROV_DELETE_CRL():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head),UInt32, use_last_error=False)
def _define_PFN_CERT_STORE_PROV_SET_CRL_PROPERTY():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head),UInt32,UInt32,c_void_p, use_last_error=False)
def _define_PFN_CERT_STORE_PROV_READ_CTL():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head),UInt32,POINTER(POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head)), use_last_error=False)
def _define_PFN_CERT_STORE_PROV_WRITE_CTL():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head),UInt32, use_last_error=False)
def _define_PFN_CERT_STORE_PROV_DELETE_CTL():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head),UInt32, use_last_error=False)
def _define_PFN_CERT_STORE_PROV_SET_CTL_PROPERTY():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head),UInt32,UInt32,c_void_p, use_last_error=False)
def _define_PFN_CERT_STORE_PROV_CONTROL():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,UInt32,c_void_p, use_last_error=False)
def _define_CERT_STORE_PROV_FIND_INFO_head():
    class CERT_STORE_PROV_FIND_INFO(Structure):
        pass
    return CERT_STORE_PROV_FIND_INFO
def _define_CERT_STORE_PROV_FIND_INFO():
    CERT_STORE_PROV_FIND_INFO = win32more.Security.Cryptography.CERT_STORE_PROV_FIND_INFO_head
    CERT_STORE_PROV_FIND_INFO._fields_ = [
        ("cbSize", UInt32),
        ("dwMsgAndCertEncodingType", UInt32),
        ("dwFindFlags", UInt32),
        ("dwFindType", UInt32),
        ("pvFindPara", c_void_p),
    ]
    return CERT_STORE_PROV_FIND_INFO
def _define_PFN_CERT_STORE_PROV_FIND_CERT():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CERT_STORE_PROV_FIND_INFO_head),POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),UInt32,POINTER(c_void_p),POINTER(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)), use_last_error=False)
def _define_PFN_CERT_STORE_PROV_FREE_FIND_CERT():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),c_void_p,UInt32, use_last_error=False)
def _define_PFN_CERT_STORE_PROV_GET_CERT_PROPERTY():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),UInt32,UInt32,c_void_p,POINTER(UInt32), use_last_error=False)
def _define_PFN_CERT_STORE_PROV_FIND_CRL():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CERT_STORE_PROV_FIND_INFO_head),POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head),UInt32,POINTER(c_void_p),POINTER(POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head)), use_last_error=False)
def _define_PFN_CERT_STORE_PROV_FREE_FIND_CRL():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head),c_void_p,UInt32, use_last_error=False)
def _define_PFN_CERT_STORE_PROV_GET_CRL_PROPERTY():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head),UInt32,UInt32,c_void_p,POINTER(UInt32), use_last_error=False)
def _define_PFN_CERT_STORE_PROV_FIND_CTL():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CERT_STORE_PROV_FIND_INFO_head),POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head),UInt32,POINTER(c_void_p),POINTER(POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head)), use_last_error=False)
def _define_PFN_CERT_STORE_PROV_FREE_FIND_CTL():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head),c_void_p,UInt32, use_last_error=False)
def _define_PFN_CERT_STORE_PROV_GET_CTL_PROPERTY():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head),UInt32,UInt32,c_void_p,POINTER(UInt32), use_last_error=False)
def _define_CRL_FIND_ISSUED_FOR_PARA_head():
    class CRL_FIND_ISSUED_FOR_PARA(Structure):
        pass
    return CRL_FIND_ISSUED_FOR_PARA
def _define_CRL_FIND_ISSUED_FOR_PARA():
    CRL_FIND_ISSUED_FOR_PARA = win32more.Security.Cryptography.CRL_FIND_ISSUED_FOR_PARA_head
    CRL_FIND_ISSUED_FOR_PARA._fields_ = [
        ("pSubjectCert", POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)),
        ("pIssuerCert", POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)),
    ]
    return CRL_FIND_ISSUED_FOR_PARA
def _define_CTL_ANY_SUBJECT_INFO_head():
    class CTL_ANY_SUBJECT_INFO(Structure):
        pass
    return CTL_ANY_SUBJECT_INFO
def _define_CTL_ANY_SUBJECT_INFO():
    CTL_ANY_SUBJECT_INFO = win32more.Security.Cryptography.CTL_ANY_SUBJECT_INFO_head
    CTL_ANY_SUBJECT_INFO._fields_ = [
        ("SubjectAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("SubjectIdentifier", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CTL_ANY_SUBJECT_INFO
def _define_CTL_FIND_USAGE_PARA_head():
    class CTL_FIND_USAGE_PARA(Structure):
        pass
    return CTL_FIND_USAGE_PARA
def _define_CTL_FIND_USAGE_PARA():
    CTL_FIND_USAGE_PARA = win32more.Security.Cryptography.CTL_FIND_USAGE_PARA_head
    CTL_FIND_USAGE_PARA._fields_ = [
        ("cbSize", UInt32),
        ("SubjectUsage", win32more.Security.Cryptography.CTL_USAGE),
        ("ListIdentifier", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("pSigner", POINTER(win32more.Security.Cryptography.CERT_INFO_head)),
    ]
    return CTL_FIND_USAGE_PARA
def _define_CTL_FIND_SUBJECT_PARA_head():
    class CTL_FIND_SUBJECT_PARA(Structure):
        pass
    return CTL_FIND_SUBJECT_PARA
def _define_CTL_FIND_SUBJECT_PARA():
    CTL_FIND_SUBJECT_PARA = win32more.Security.Cryptography.CTL_FIND_SUBJECT_PARA_head
    CTL_FIND_SUBJECT_PARA._fields_ = [
        ("cbSize", UInt32),
        ("pUsagePara", POINTER(win32more.Security.Cryptography.CTL_FIND_USAGE_PARA_head)),
        ("dwSubjectType", UInt32),
        ("pvSubject", c_void_p),
    ]
    return CTL_FIND_SUBJECT_PARA
def _define_PFN_CERT_CREATE_CONTEXT_SORT_FUNC():
    return CFUNCTYPE(win32more.Foundation.BOOL,UInt32,UInt32,UInt32,c_void_p, use_last_error=False)
def _define_CERT_CREATE_CONTEXT_PARA_head():
    class CERT_CREATE_CONTEXT_PARA(Structure):
        pass
    return CERT_CREATE_CONTEXT_PARA
def _define_CERT_CREATE_CONTEXT_PARA():
    CERT_CREATE_CONTEXT_PARA = win32more.Security.Cryptography.CERT_CREATE_CONTEXT_PARA_head
    CERT_CREATE_CONTEXT_PARA._fields_ = [
        ("cbSize", UInt32),
        ("pfnFree", win32more.Security.Cryptography.PFN_CRYPT_FREE),
        ("pvFree", c_void_p),
        ("pfnSort", win32more.Security.Cryptography.PFN_CERT_CREATE_CONTEXT_SORT_FUNC),
        ("pvSort", c_void_p),
    ]
    return CERT_CREATE_CONTEXT_PARA
def _define_CERT_SYSTEM_STORE_INFO_head():
    class CERT_SYSTEM_STORE_INFO(Structure):
        pass
    return CERT_SYSTEM_STORE_INFO
def _define_CERT_SYSTEM_STORE_INFO():
    CERT_SYSTEM_STORE_INFO = win32more.Security.Cryptography.CERT_SYSTEM_STORE_INFO_head
    CERT_SYSTEM_STORE_INFO._fields_ = [
        ("cbSize", UInt32),
    ]
    return CERT_SYSTEM_STORE_INFO
def _define_CERT_PHYSICAL_STORE_INFO_head():
    class CERT_PHYSICAL_STORE_INFO(Structure):
        pass
    return CERT_PHYSICAL_STORE_INFO
def _define_CERT_PHYSICAL_STORE_INFO():
    CERT_PHYSICAL_STORE_INFO = win32more.Security.Cryptography.CERT_PHYSICAL_STORE_INFO_head
    CERT_PHYSICAL_STORE_INFO._fields_ = [
        ("cbSize", UInt32),
        ("pszOpenStoreProvider", win32more.Foundation.PSTR),
        ("dwOpenEncodingType", UInt32),
        ("dwOpenFlags", UInt32),
        ("OpenParameters", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("dwFlags", UInt32),
        ("dwPriority", UInt32),
    ]
    return CERT_PHYSICAL_STORE_INFO
def _define_PFN_CERT_ENUM_SYSTEM_STORE_LOCATION():
    return CFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,UInt32,c_void_p,c_void_p, use_last_error=False)
def _define_PFN_CERT_ENUM_SYSTEM_STORE():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Security.Cryptography.CERT_SYSTEM_STORE_FLAGS,POINTER(win32more.Security.Cryptography.CERT_SYSTEM_STORE_INFO_head),c_void_p,c_void_p, use_last_error=False)
def _define_PFN_CERT_ENUM_PHYSICAL_STORE():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,win32more.Foundation.PWSTR,POINTER(win32more.Security.Cryptography.CERT_PHYSICAL_STORE_INFO_head),c_void_p,c_void_p, use_last_error=False)
def _define_CTL_VERIFY_USAGE_PARA_head():
    class CTL_VERIFY_USAGE_PARA(Structure):
        pass
    return CTL_VERIFY_USAGE_PARA
def _define_CTL_VERIFY_USAGE_PARA():
    CTL_VERIFY_USAGE_PARA = win32more.Security.Cryptography.CTL_VERIFY_USAGE_PARA_head
    CTL_VERIFY_USAGE_PARA._fields_ = [
        ("cbSize", UInt32),
        ("ListIdentifier", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("cCtlStore", UInt32),
        ("rghCtlStore", POINTER(c_void_p)),
        ("cSignerStore", UInt32),
        ("rghSignerStore", POINTER(c_void_p)),
    ]
    return CTL_VERIFY_USAGE_PARA
def _define_CTL_VERIFY_USAGE_STATUS_head():
    class CTL_VERIFY_USAGE_STATUS(Structure):
        pass
    return CTL_VERIFY_USAGE_STATUS
def _define_CTL_VERIFY_USAGE_STATUS():
    CTL_VERIFY_USAGE_STATUS = win32more.Security.Cryptography.CTL_VERIFY_USAGE_STATUS_head
    CTL_VERIFY_USAGE_STATUS._fields_ = [
        ("cbSize", UInt32),
        ("dwError", UInt32),
        ("dwFlags", UInt32),
        ("ppCtl", POINTER(POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head))),
        ("dwCtlEntryIndex", UInt32),
        ("ppSigner", POINTER(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head))),
        ("dwSignerIndex", UInt32),
    ]
    return CTL_VERIFY_USAGE_STATUS
def _define_CERT_REVOCATION_CRL_INFO_head():
    class CERT_REVOCATION_CRL_INFO(Structure):
        pass
    return CERT_REVOCATION_CRL_INFO
def _define_CERT_REVOCATION_CRL_INFO():
    CERT_REVOCATION_CRL_INFO = win32more.Security.Cryptography.CERT_REVOCATION_CRL_INFO_head
    CERT_REVOCATION_CRL_INFO._fields_ = [
        ("cbSize", UInt32),
        ("pBaseCrlContext", POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head)),
        ("pDeltaCrlContext", POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head)),
        ("pCrlEntry", POINTER(win32more.Security.Cryptography.CRL_ENTRY_head)),
        ("fDeltaCrlEntry", win32more.Foundation.BOOL),
    ]
    return CERT_REVOCATION_CRL_INFO
def _define_CERT_REVOCATION_PARA_head():
    class CERT_REVOCATION_PARA(Structure):
        pass
    return CERT_REVOCATION_PARA
def _define_CERT_REVOCATION_PARA():
    CERT_REVOCATION_PARA = win32more.Security.Cryptography.CERT_REVOCATION_PARA_head
    CERT_REVOCATION_PARA._fields_ = [
        ("cbSize", UInt32),
        ("pIssuerCert", POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)),
        ("cCertStore", UInt32),
        ("rgCertStore", POINTER(c_void_p)),
        ("hCrlStore", c_void_p),
        ("pftTimeToUse", POINTER(win32more.Foundation.FILETIME_head)),
    ]
    return CERT_REVOCATION_PARA
def _define_CERT_REVOCATION_STATUS_head():
    class CERT_REVOCATION_STATUS(Structure):
        pass
    return CERT_REVOCATION_STATUS
def _define_CERT_REVOCATION_STATUS():
    CERT_REVOCATION_STATUS = win32more.Security.Cryptography.CERT_REVOCATION_STATUS_head
    CERT_REVOCATION_STATUS._fields_ = [
        ("cbSize", UInt32),
        ("dwIndex", UInt32),
        ("dwError", UInt32),
        ("dwReason", win32more.Security.Cryptography.CERT_REVOCATION_STATUS_REASON),
        ("fHasFreshnessTime", win32more.Foundation.BOOL),
        ("dwFreshnessTime", UInt32),
    ]
    return CERT_REVOCATION_STATUS
def _define_CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO_head():
    class CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO(Structure):
        pass
    return CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO
def _define_CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO():
    CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO = win32more.Security.Cryptography.CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO_head
    CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO._fields_ = [
        ("CertSignHashCNGAlgPropData", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("CertIssuerPubKeyBitLengthPropData", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO
def _define_CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO_head():
    class CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO(Structure):
        pass
    return CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO
def _define_CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO():
    CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO = win32more.Security.Cryptography.CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO_head
    CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO._fields_ = [
        ("cCNGHashAlgid", UInt32),
        ("rgpwszCNGHashAlgid", POINTER(win32more.Foundation.PWSTR)),
        ("dwWeakIndex", UInt32),
    ]
    return CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO
def _define_PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC():
    return CFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER_head),POINTER(c_void_p),POINTER(win32more.Foundation.PWSTR), use_last_error=False)
def _define_PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC():
    return CFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,POINTER(win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER_head),c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,c_char_p_no,UInt32,c_char_p_no,POINTER(UInt32), use_last_error=False)
def _define_PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC():
    return CFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(win32more.Security.Cryptography.CERT_PUBLIC_KEY_INFO_head),POINTER(win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER_head),c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,c_char_p_no,UInt32,c_char_p_no,UInt32, use_last_error=False)
def _define_CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA_head():
    class CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA(Structure):
        pass
    return CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA
def _define_CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA():
    CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA = win32more.Security.Cryptography.CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA_head
    CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA._fields_ = [
        ("cOID", UInt32),
        ("rgpszOID", POINTER(win32more.Foundation.PSTR)),
    ]
    return CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA
def _define_PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC():
    return CFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,win32more.Foundation.PSTR,UInt32,c_void_p,POINTER(win32more.Security.Cryptography.CERT_PUBLIC_KEY_INFO_head),POINTER(UInt32), use_last_error=False)
def _define_PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC():
    return CFUNCTYPE(win32more.Foundation.BOOL,win32more.Security.Cryptography.BCRYPT_KEY_HANDLE,UInt32,win32more.Foundation.PSTR,UInt32,c_void_p,POINTER(win32more.Security.Cryptography.CERT_PUBLIC_KEY_INFO_head),POINTER(UInt32), use_last_error=False)
def _define_PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC():
    return CFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(win32more.Security.Cryptography.CERT_PUBLIC_KEY_INFO_head),UInt32,c_void_p,POINTER(win32more.Security.Cryptography.BCRYPT_KEY_HANDLE), use_last_error=False)
def _define_PFN_IMPORT_PRIV_KEY_FUNC():
    return CFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,POINTER(win32more.Security.Cryptography.CRYPT_PRIVATE_KEY_INFO_head),UInt32,c_void_p, use_last_error=False)
def _define_PFN_EXPORT_PRIV_KEY_FUNC():
    return CFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,win32more.Foundation.PSTR,UInt32,c_void_p,POINTER(win32more.Security.Cryptography.CRYPT_PRIVATE_KEY_INFO_head),POINTER(UInt32), use_last_error=False)
def _define_PFN_CRYPT_GET_SIGNER_CERTIFICATE():
    return CFUNCTYPE(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),c_void_p,UInt32,POINTER(win32more.Security.Cryptography.CERT_INFO_head),c_void_p, use_last_error=False)
def _define_CRYPT_SIGN_MESSAGE_PARA_head():
    class CRYPT_SIGN_MESSAGE_PARA(Structure):
        pass
    return CRYPT_SIGN_MESSAGE_PARA
def _define_CRYPT_SIGN_MESSAGE_PARA():
    CRYPT_SIGN_MESSAGE_PARA = win32more.Security.Cryptography.CRYPT_SIGN_MESSAGE_PARA_head
    CRYPT_SIGN_MESSAGE_PARA._fields_ = [
        ("cbSize", UInt32),
        ("dwMsgEncodingType", UInt32),
        ("pSigningCert", POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)),
        ("HashAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("pvHashAuxInfo", c_void_p),
        ("cMsgCert", UInt32),
        ("rgpMsgCert", POINTER(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head))),
        ("cMsgCrl", UInt32),
        ("rgpMsgCrl", POINTER(POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head))),
        ("cAuthAttr", UInt32),
        ("rgAuthAttr", POINTER(win32more.Security.Cryptography.CRYPT_ATTRIBUTE_head)),
        ("cUnauthAttr", UInt32),
        ("rgUnauthAttr", POINTER(win32more.Security.Cryptography.CRYPT_ATTRIBUTE_head)),
        ("dwFlags", UInt32),
        ("dwInnerContentType", UInt32),
    ]
    return CRYPT_SIGN_MESSAGE_PARA
def _define_CRYPT_VERIFY_MESSAGE_PARA_head():
    class CRYPT_VERIFY_MESSAGE_PARA(Structure):
        pass
    return CRYPT_VERIFY_MESSAGE_PARA
def _define_CRYPT_VERIFY_MESSAGE_PARA():
    CRYPT_VERIFY_MESSAGE_PARA = win32more.Security.Cryptography.CRYPT_VERIFY_MESSAGE_PARA_head
    CRYPT_VERIFY_MESSAGE_PARA._fields_ = [
        ("cbSize", UInt32),
        ("dwMsgAndCertEncodingType", UInt32),
        ("hCryptProv", UIntPtr),
        ("pfnGetSignerCertificate", win32more.Security.Cryptography.PFN_CRYPT_GET_SIGNER_CERTIFICATE),
        ("pvGetArg", c_void_p),
    ]
    return CRYPT_VERIFY_MESSAGE_PARA
def _define_CRYPT_ENCRYPT_MESSAGE_PARA_head():
    class CRYPT_ENCRYPT_MESSAGE_PARA(Structure):
        pass
    return CRYPT_ENCRYPT_MESSAGE_PARA
def _define_CRYPT_ENCRYPT_MESSAGE_PARA():
    CRYPT_ENCRYPT_MESSAGE_PARA = win32more.Security.Cryptography.CRYPT_ENCRYPT_MESSAGE_PARA_head
    CRYPT_ENCRYPT_MESSAGE_PARA._fields_ = [
        ("cbSize", UInt32),
        ("dwMsgEncodingType", UInt32),
        ("hCryptProv", UIntPtr),
        ("ContentEncryptionAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("pvEncryptionAuxInfo", c_void_p),
        ("dwFlags", UInt32),
        ("dwInnerContentType", UInt32),
    ]
    return CRYPT_ENCRYPT_MESSAGE_PARA
def _define_CRYPT_DECRYPT_MESSAGE_PARA_head():
    class CRYPT_DECRYPT_MESSAGE_PARA(Structure):
        pass
    return CRYPT_DECRYPT_MESSAGE_PARA
def _define_CRYPT_DECRYPT_MESSAGE_PARA():
    CRYPT_DECRYPT_MESSAGE_PARA = win32more.Security.Cryptography.CRYPT_DECRYPT_MESSAGE_PARA_head
    CRYPT_DECRYPT_MESSAGE_PARA._fields_ = [
        ("cbSize", UInt32),
        ("dwMsgAndCertEncodingType", UInt32),
        ("cCertStore", UInt32),
        ("rghCertStore", POINTER(c_void_p)),
    ]
    return CRYPT_DECRYPT_MESSAGE_PARA
def _define_CRYPT_HASH_MESSAGE_PARA_head():
    class CRYPT_HASH_MESSAGE_PARA(Structure):
        pass
    return CRYPT_HASH_MESSAGE_PARA
def _define_CRYPT_HASH_MESSAGE_PARA():
    CRYPT_HASH_MESSAGE_PARA = win32more.Security.Cryptography.CRYPT_HASH_MESSAGE_PARA_head
    CRYPT_HASH_MESSAGE_PARA._fields_ = [
        ("cbSize", UInt32),
        ("dwMsgEncodingType", UInt32),
        ("hCryptProv", UIntPtr),
        ("HashAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("pvHashAuxInfo", c_void_p),
    ]
    return CRYPT_HASH_MESSAGE_PARA
def _define_CRYPT_KEY_SIGN_MESSAGE_PARA_head():
    class CRYPT_KEY_SIGN_MESSAGE_PARA(Structure):
        pass
    return CRYPT_KEY_SIGN_MESSAGE_PARA
def _define_CRYPT_KEY_SIGN_MESSAGE_PARA():
    CRYPT_KEY_SIGN_MESSAGE_PARA = win32more.Security.Cryptography.CRYPT_KEY_SIGN_MESSAGE_PARA_head
    class CRYPT_KEY_SIGN_MESSAGE_PARA__Anonymous_e__Union(Union):
        pass
    CRYPT_KEY_SIGN_MESSAGE_PARA__Anonymous_e__Union._fields_ = [
        ("hCryptProv", UIntPtr),
        ("hNCryptKey", UIntPtr),
    ]
    CRYPT_KEY_SIGN_MESSAGE_PARA._anonymous_ = [
        'Anonymous',
    ]
    CRYPT_KEY_SIGN_MESSAGE_PARA._fields_ = [
        ("cbSize", UInt32),
        ("dwMsgAndCertEncodingType", win32more.Security.Cryptography.CERT_QUERY_ENCODING_TYPE),
        ("Anonymous", CRYPT_KEY_SIGN_MESSAGE_PARA__Anonymous_e__Union),
        ("dwKeySpec", win32more.Security.Cryptography.CERT_KEY_SPEC),
        ("HashAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("pvHashAuxInfo", c_void_p),
        ("PubKeyAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
    ]
    return CRYPT_KEY_SIGN_MESSAGE_PARA
def _define_CRYPT_KEY_VERIFY_MESSAGE_PARA_head():
    class CRYPT_KEY_VERIFY_MESSAGE_PARA(Structure):
        pass
    return CRYPT_KEY_VERIFY_MESSAGE_PARA
def _define_CRYPT_KEY_VERIFY_MESSAGE_PARA():
    CRYPT_KEY_VERIFY_MESSAGE_PARA = win32more.Security.Cryptography.CRYPT_KEY_VERIFY_MESSAGE_PARA_head
    CRYPT_KEY_VERIFY_MESSAGE_PARA._fields_ = [
        ("cbSize", UInt32),
        ("dwMsgEncodingType", UInt32),
        ("hCryptProv", UIntPtr),
    ]
    return CRYPT_KEY_VERIFY_MESSAGE_PARA
def _define_CERT_CHAIN_head():
    class CERT_CHAIN(Structure):
        pass
    return CERT_CHAIN
def _define_CERT_CHAIN():
    CERT_CHAIN = win32more.Security.Cryptography.CERT_CHAIN_head
    CERT_CHAIN._fields_ = [
        ("cCerts", UInt32),
        ("certs", POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head)),
        ("keyLocatorInfo", win32more.Security.Cryptography.CRYPT_KEY_PROV_INFO),
    ]
    return CERT_CHAIN
def _define_PFN_CRYPT_ASYNC_PARAM_FREE_FUNC():
    return CFUNCTYPE(Void,win32more.Foundation.PSTR,c_void_p, use_last_error=False)
def _define_CRYPT_BLOB_ARRAY_head():
    class CRYPT_BLOB_ARRAY(Structure):
        pass
    return CRYPT_BLOB_ARRAY
def _define_CRYPT_BLOB_ARRAY():
    CRYPT_BLOB_ARRAY = win32more.Security.Cryptography.CRYPT_BLOB_ARRAY_head
    CRYPT_BLOB_ARRAY._fields_ = [
        ("cBlob", UInt32),
        ("rgBlob", POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head)),
    ]
    return CRYPT_BLOB_ARRAY
def _define_CRYPT_CREDENTIALS_head():
    class CRYPT_CREDENTIALS(Structure):
        pass
    return CRYPT_CREDENTIALS
def _define_CRYPT_CREDENTIALS():
    CRYPT_CREDENTIALS = win32more.Security.Cryptography.CRYPT_CREDENTIALS_head
    CRYPT_CREDENTIALS._fields_ = [
        ("cbSize", UInt32),
        ("pszCredentialsOid", win32more.Foundation.PSTR),
        ("pvCredentials", c_void_p),
    ]
    return CRYPT_CREDENTIALS
def _define_CRYPT_PASSWORD_CREDENTIALSA_head():
    class CRYPT_PASSWORD_CREDENTIALSA(Structure):
        pass
    return CRYPT_PASSWORD_CREDENTIALSA
def _define_CRYPT_PASSWORD_CREDENTIALSA():
    CRYPT_PASSWORD_CREDENTIALSA = win32more.Security.Cryptography.CRYPT_PASSWORD_CREDENTIALSA_head
    CRYPT_PASSWORD_CREDENTIALSA._fields_ = [
        ("cbSize", UInt32),
        ("pszUsername", win32more.Foundation.PSTR),
        ("pszPassword", win32more.Foundation.PSTR),
    ]
    return CRYPT_PASSWORD_CREDENTIALSA
def _define_CRYPT_PASSWORD_CREDENTIALSW_head():
    class CRYPT_PASSWORD_CREDENTIALSW(Structure):
        pass
    return CRYPT_PASSWORD_CREDENTIALSW
def _define_CRYPT_PASSWORD_CREDENTIALSW():
    CRYPT_PASSWORD_CREDENTIALSW = win32more.Security.Cryptography.CRYPT_PASSWORD_CREDENTIALSW_head
    CRYPT_PASSWORD_CREDENTIALSW._fields_ = [
        ("cbSize", UInt32),
        ("pszUsername", win32more.Foundation.PWSTR),
        ("pszPassword", win32more.Foundation.PWSTR),
    ]
    return CRYPT_PASSWORD_CREDENTIALSW
def _define_PFN_FREE_ENCODED_OBJECT_FUNC():
    return CFUNCTYPE(Void,win32more.Foundation.PSTR,POINTER(win32more.Security.Cryptography.CRYPT_BLOB_ARRAY_head),c_void_p, use_last_error=False)
def _define_CRYPTNET_URL_CACHE_PRE_FETCH_INFO_head():
    class CRYPTNET_URL_CACHE_PRE_FETCH_INFO(Structure):
        pass
    return CRYPTNET_URL_CACHE_PRE_FETCH_INFO
def _define_CRYPTNET_URL_CACHE_PRE_FETCH_INFO():
    CRYPTNET_URL_CACHE_PRE_FETCH_INFO = win32more.Security.Cryptography.CRYPTNET_URL_CACHE_PRE_FETCH_INFO_head
    CRYPTNET_URL_CACHE_PRE_FETCH_INFO._fields_ = [
        ("cbSize", UInt32),
        ("dwObjectType", UInt32),
        ("dwError", UInt32),
        ("dwReserved", UInt32),
        ("ThisUpdateTime", win32more.Foundation.FILETIME),
        ("NextUpdateTime", win32more.Foundation.FILETIME),
        ("PublishTime", win32more.Foundation.FILETIME),
    ]
    return CRYPTNET_URL_CACHE_PRE_FETCH_INFO
def _define_CRYPTNET_URL_CACHE_FLUSH_INFO_head():
    class CRYPTNET_URL_CACHE_FLUSH_INFO(Structure):
        pass
    return CRYPTNET_URL_CACHE_FLUSH_INFO
def _define_CRYPTNET_URL_CACHE_FLUSH_INFO():
    CRYPTNET_URL_CACHE_FLUSH_INFO = win32more.Security.Cryptography.CRYPTNET_URL_CACHE_FLUSH_INFO_head
    CRYPTNET_URL_CACHE_FLUSH_INFO._fields_ = [
        ("cbSize", UInt32),
        ("dwExemptSeconds", UInt32),
        ("ExpireTime", win32more.Foundation.FILETIME),
    ]
    return CRYPTNET_URL_CACHE_FLUSH_INFO
def _define_CRYPTNET_URL_CACHE_RESPONSE_INFO_head():
    class CRYPTNET_URL_CACHE_RESPONSE_INFO(Structure):
        pass
    return CRYPTNET_URL_CACHE_RESPONSE_INFO
def _define_CRYPTNET_URL_CACHE_RESPONSE_INFO():
    CRYPTNET_URL_CACHE_RESPONSE_INFO = win32more.Security.Cryptography.CRYPTNET_URL_CACHE_RESPONSE_INFO_head
    CRYPTNET_URL_CACHE_RESPONSE_INFO._fields_ = [
        ("cbSize", UInt32),
        ("wResponseType", UInt16),
        ("wResponseFlags", UInt16),
        ("LastModifiedTime", win32more.Foundation.FILETIME),
        ("dwMaxAge", UInt32),
        ("pwszETag", win32more.Foundation.PWSTR),
        ("dwProxyId", UInt32),
    ]
    return CRYPTNET_URL_CACHE_RESPONSE_INFO
def _define_CRYPT_RETRIEVE_AUX_INFO_head():
    class CRYPT_RETRIEVE_AUX_INFO(Structure):
        pass
    return CRYPT_RETRIEVE_AUX_INFO
def _define_CRYPT_RETRIEVE_AUX_INFO():
    CRYPT_RETRIEVE_AUX_INFO = win32more.Security.Cryptography.CRYPT_RETRIEVE_AUX_INFO_head
    CRYPT_RETRIEVE_AUX_INFO._fields_ = [
        ("cbSize", UInt32),
        ("pLastSyncTime", POINTER(win32more.Foundation.FILETIME_head)),
        ("dwMaxUrlRetrievalByteCount", UInt32),
        ("pPreFetchInfo", POINTER(win32more.Security.Cryptography.CRYPTNET_URL_CACHE_PRE_FETCH_INFO_head)),
        ("pFlushInfo", POINTER(win32more.Security.Cryptography.CRYPTNET_URL_CACHE_FLUSH_INFO_head)),
        ("ppResponseInfo", POINTER(POINTER(win32more.Security.Cryptography.CRYPTNET_URL_CACHE_RESPONSE_INFO_head))),
        ("pwszCacheFileNamePrefix", win32more.Foundation.PWSTR),
        ("pftCacheResync", POINTER(win32more.Foundation.FILETIME_head)),
        ("fProxyCacheRetrieval", win32more.Foundation.BOOL),
        ("dwHttpStatusCode", UInt32),
        ("ppwszErrorResponseHeaders", POINTER(win32more.Foundation.PWSTR)),
        ("ppErrorContentBlob", POINTER(POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head))),
    ]
    return CRYPT_RETRIEVE_AUX_INFO
def _define_PFN_CRYPT_CANCEL_RETRIEVAL():
    return CFUNCTYPE(win32more.Foundation.BOOL,UInt32,c_void_p, use_last_error=False)
def _define_PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC():
    return CFUNCTYPE(Void,c_void_p,UInt32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,c_void_p, use_last_error=False)
def _define_CRYPT_ASYNC_RETRIEVAL_COMPLETION_head():
    class CRYPT_ASYNC_RETRIEVAL_COMPLETION(Structure):
        pass
    return CRYPT_ASYNC_RETRIEVAL_COMPLETION
def _define_CRYPT_ASYNC_RETRIEVAL_COMPLETION():
    CRYPT_ASYNC_RETRIEVAL_COMPLETION = win32more.Security.Cryptography.CRYPT_ASYNC_RETRIEVAL_COMPLETION_head
    CRYPT_ASYNC_RETRIEVAL_COMPLETION._fields_ = [
        ("pfnCompletion", win32more.Security.Cryptography.PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC),
        ("pvCompletion", c_void_p),
    ]
    return CRYPT_ASYNC_RETRIEVAL_COMPLETION
def _define_PFN_CANCEL_ASYNC_RETRIEVAL_FUNC():
    return CFUNCTYPE(win32more.Foundation.BOOL,win32more.Security.Cryptography.HCRYPTASYNC, use_last_error=False)
def _define_CRYPT_URL_ARRAY_head():
    class CRYPT_URL_ARRAY(Structure):
        pass
    return CRYPT_URL_ARRAY
def _define_CRYPT_URL_ARRAY():
    CRYPT_URL_ARRAY = win32more.Security.Cryptography.CRYPT_URL_ARRAY_head
    CRYPT_URL_ARRAY._fields_ = [
        ("cUrl", UInt32),
        ("rgwszUrl", POINTER(win32more.Foundation.PWSTR)),
    ]
    return CRYPT_URL_ARRAY
def _define_CRYPT_URL_INFO_head():
    class CRYPT_URL_INFO(Structure):
        pass
    return CRYPT_URL_INFO
def _define_CRYPT_URL_INFO():
    CRYPT_URL_INFO = win32more.Security.Cryptography.CRYPT_URL_INFO_head
    CRYPT_URL_INFO._fields_ = [
        ("cbSize", UInt32),
        ("dwSyncDeltaTime", UInt32),
        ("cGroup", UInt32),
        ("rgcGroupEntry", POINTER(UInt32)),
    ]
    return CRYPT_URL_INFO
def _define_CERT_CRL_CONTEXT_PAIR_head():
    class CERT_CRL_CONTEXT_PAIR(Structure):
        pass
    return CERT_CRL_CONTEXT_PAIR
def _define_CERT_CRL_CONTEXT_PAIR():
    CERT_CRL_CONTEXT_PAIR = win32more.Security.Cryptography.CERT_CRL_CONTEXT_PAIR_head
    CERT_CRL_CONTEXT_PAIR._fields_ = [
        ("pCertContext", POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)),
        ("pCrlContext", POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head)),
    ]
    return CERT_CRL_CONTEXT_PAIR
def _define_CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO_head():
    class CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO(Structure):
        pass
    return CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO
def _define_CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO():
    CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO = win32more.Security.Cryptography.CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO_head
    CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO._fields_ = [
        ("cbSize", UInt32),
        ("iDeltaCrlIndicator", Int32),
        ("pftCacheResync", POINTER(win32more.Foundation.FILETIME_head)),
        ("pLastSyncTime", POINTER(win32more.Foundation.FILETIME_head)),
        ("pMaxAgeTime", POINTER(win32more.Foundation.FILETIME_head)),
        ("pChainPara", POINTER(win32more.Security.Cryptography.CERT_REVOCATION_CHAIN_PARA_head)),
        ("pDeltaCrlIndicator", POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head)),
    ]
    return CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO
def _define_PFN_CRYPT_ENUM_KEYID_PROP():
    return CFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head),UInt32,c_void_p,c_void_p,UInt32,POINTER(UInt32),POINTER(c_void_p),POINTER(UInt32), use_last_error=False)
def _define_CERT_CHAIN_ENGINE_CONFIG_head():
    class CERT_CHAIN_ENGINE_CONFIG(Structure):
        pass
    return CERT_CHAIN_ENGINE_CONFIG
def _define_CERT_CHAIN_ENGINE_CONFIG():
    CERT_CHAIN_ENGINE_CONFIG = win32more.Security.Cryptography.CERT_CHAIN_ENGINE_CONFIG_head
    CERT_CHAIN_ENGINE_CONFIG._fields_ = [
        ("cbSize", UInt32),
        ("hRestrictedRoot", c_void_p),
        ("hRestrictedTrust", c_void_p),
        ("hRestrictedOther", c_void_p),
        ("cAdditionalStore", UInt32),
        ("rghAdditionalStore", POINTER(c_void_p)),
        ("dwFlags", UInt32),
        ("dwUrlRetrievalTimeout", UInt32),
        ("MaximumCachedCertificates", UInt32),
        ("CycleDetectionModulus", UInt32),
        ("hExclusiveRoot", c_void_p),
        ("hExclusiveTrustedPeople", c_void_p),
        ("dwExclusiveFlags", UInt32),
    ]
    return CERT_CHAIN_ENGINE_CONFIG
def _define_CERT_TRUST_STATUS_head():
    class CERT_TRUST_STATUS(Structure):
        pass
    return CERT_TRUST_STATUS
def _define_CERT_TRUST_STATUS():
    CERT_TRUST_STATUS = win32more.Security.Cryptography.CERT_TRUST_STATUS_head
    CERT_TRUST_STATUS._fields_ = [
        ("dwErrorStatus", UInt32),
        ("dwInfoStatus", UInt32),
    ]
    return CERT_TRUST_STATUS
def _define_CERT_REVOCATION_INFO_head():
    class CERT_REVOCATION_INFO(Structure):
        pass
    return CERT_REVOCATION_INFO
def _define_CERT_REVOCATION_INFO():
    CERT_REVOCATION_INFO = win32more.Security.Cryptography.CERT_REVOCATION_INFO_head
    CERT_REVOCATION_INFO._fields_ = [
        ("cbSize", UInt32),
        ("dwRevocationResult", UInt32),
        ("pszRevocationOid", win32more.Foundation.PSTR),
        ("pvOidSpecificInfo", c_void_p),
        ("fHasFreshnessTime", win32more.Foundation.BOOL),
        ("dwFreshnessTime", UInt32),
        ("pCrlInfo", POINTER(win32more.Security.Cryptography.CERT_REVOCATION_CRL_INFO_head)),
    ]
    return CERT_REVOCATION_INFO
def _define_CERT_TRUST_LIST_INFO_head():
    class CERT_TRUST_LIST_INFO(Structure):
        pass
    return CERT_TRUST_LIST_INFO
def _define_CERT_TRUST_LIST_INFO():
    CERT_TRUST_LIST_INFO = win32more.Security.Cryptography.CERT_TRUST_LIST_INFO_head
    CERT_TRUST_LIST_INFO._fields_ = [
        ("cbSize", UInt32),
        ("pCtlEntry", POINTER(win32more.Security.Cryptography.CTL_ENTRY_head)),
        ("pCtlContext", POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head)),
    ]
    return CERT_TRUST_LIST_INFO
def _define_CERT_CHAIN_ELEMENT_head():
    class CERT_CHAIN_ELEMENT(Structure):
        pass
    return CERT_CHAIN_ELEMENT
def _define_CERT_CHAIN_ELEMENT():
    CERT_CHAIN_ELEMENT = win32more.Security.Cryptography.CERT_CHAIN_ELEMENT_head
    CERT_CHAIN_ELEMENT._fields_ = [
        ("cbSize", UInt32),
        ("pCertContext", POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)),
        ("TrustStatus", win32more.Security.Cryptography.CERT_TRUST_STATUS),
        ("pRevocationInfo", POINTER(win32more.Security.Cryptography.CERT_REVOCATION_INFO_head)),
        ("pIssuanceUsage", POINTER(win32more.Security.Cryptography.CTL_USAGE_head)),
        ("pApplicationUsage", POINTER(win32more.Security.Cryptography.CTL_USAGE_head)),
        ("pwszExtendedErrorInfo", win32more.Foundation.PWSTR),
    ]
    return CERT_CHAIN_ELEMENT
def _define_CERT_SIMPLE_CHAIN_head():
    class CERT_SIMPLE_CHAIN(Structure):
        pass
    return CERT_SIMPLE_CHAIN
def _define_CERT_SIMPLE_CHAIN():
    CERT_SIMPLE_CHAIN = win32more.Security.Cryptography.CERT_SIMPLE_CHAIN_head
    CERT_SIMPLE_CHAIN._fields_ = [
        ("cbSize", UInt32),
        ("TrustStatus", win32more.Security.Cryptography.CERT_TRUST_STATUS),
        ("cElement", UInt32),
        ("rgpElement", POINTER(POINTER(win32more.Security.Cryptography.CERT_CHAIN_ELEMENT_head))),
        ("pTrustListInfo", POINTER(win32more.Security.Cryptography.CERT_TRUST_LIST_INFO_head)),
        ("fHasRevocationFreshnessTime", win32more.Foundation.BOOL),
        ("dwRevocationFreshnessTime", UInt32),
    ]
    return CERT_SIMPLE_CHAIN
def _define_CERT_CHAIN_CONTEXT_head():
    class CERT_CHAIN_CONTEXT(Structure):
        pass
    return CERT_CHAIN_CONTEXT
def _define_CERT_CHAIN_CONTEXT():
    CERT_CHAIN_CONTEXT = win32more.Security.Cryptography.CERT_CHAIN_CONTEXT_head
    CERT_CHAIN_CONTEXT._fields_ = [
        ("cbSize", UInt32),
        ("TrustStatus", win32more.Security.Cryptography.CERT_TRUST_STATUS),
        ("cChain", UInt32),
        ("rgpChain", POINTER(POINTER(win32more.Security.Cryptography.CERT_SIMPLE_CHAIN_head))),
        ("cLowerQualityChainContext", UInt32),
        ("rgpLowerQualityChainContext", POINTER(POINTER(win32more.Security.Cryptography.CERT_CHAIN_CONTEXT_head))),
        ("fHasRevocationFreshnessTime", win32more.Foundation.BOOL),
        ("dwRevocationFreshnessTime", UInt32),
        ("dwCreateFlags", UInt32),
        ("ChainId", Guid),
    ]
    return CERT_CHAIN_CONTEXT
def _define_CERT_USAGE_MATCH_head():
    class CERT_USAGE_MATCH(Structure):
        pass
    return CERT_USAGE_MATCH
def _define_CERT_USAGE_MATCH():
    CERT_USAGE_MATCH = win32more.Security.Cryptography.CERT_USAGE_MATCH_head
    CERT_USAGE_MATCH._fields_ = [
        ("dwType", UInt32),
        ("Usage", win32more.Security.Cryptography.CTL_USAGE),
    ]
    return CERT_USAGE_MATCH
def _define_CTL_USAGE_MATCH_head():
    class CTL_USAGE_MATCH(Structure):
        pass
    return CTL_USAGE_MATCH
def _define_CTL_USAGE_MATCH():
    CTL_USAGE_MATCH = win32more.Security.Cryptography.CTL_USAGE_MATCH_head
    CTL_USAGE_MATCH._fields_ = [
        ("dwType", UInt32),
        ("Usage", win32more.Security.Cryptography.CTL_USAGE),
    ]
    return CTL_USAGE_MATCH
def _define_CERT_CHAIN_PARA_head():
    class CERT_CHAIN_PARA(Structure):
        pass
    return CERT_CHAIN_PARA
def _define_CERT_CHAIN_PARA():
    CERT_CHAIN_PARA = win32more.Security.Cryptography.CERT_CHAIN_PARA_head
    CERT_CHAIN_PARA._fields_ = [
        ("cbSize", UInt32),
        ("RequestedUsage", win32more.Security.Cryptography.CERT_USAGE_MATCH),
    ]
    return CERT_CHAIN_PARA
def _define_CERT_REVOCATION_CHAIN_PARA_head():
    class CERT_REVOCATION_CHAIN_PARA(Structure):
        pass
    return CERT_REVOCATION_CHAIN_PARA
def _define_CERT_REVOCATION_CHAIN_PARA():
    CERT_REVOCATION_CHAIN_PARA = win32more.Security.Cryptography.CERT_REVOCATION_CHAIN_PARA_head
    CERT_REVOCATION_CHAIN_PARA._fields_ = [
        ("cbSize", UInt32),
        ("hChainEngine", win32more.Security.Cryptography.HCERTCHAINENGINE),
        ("hAdditionalStore", c_void_p),
        ("dwChainFlags", UInt32),
        ("dwUrlRetrievalTimeout", UInt32),
        ("pftCurrentTime", POINTER(win32more.Foundation.FILETIME_head)),
        ("pftCacheResync", POINTER(win32more.Foundation.FILETIME_head)),
        ("cbMaxUrlRetrievalByteCount", UInt32),
    ]
    return CERT_REVOCATION_CHAIN_PARA
def _define_CRL_REVOCATION_INFO_head():
    class CRL_REVOCATION_INFO(Structure):
        pass
    return CRL_REVOCATION_INFO
def _define_CRL_REVOCATION_INFO():
    CRL_REVOCATION_INFO = win32more.Security.Cryptography.CRL_REVOCATION_INFO_head
    CRL_REVOCATION_INFO._fields_ = [
        ("pCrlEntry", POINTER(win32more.Security.Cryptography.CRL_ENTRY_head)),
        ("pCrlContext", POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head)),
        ("pCrlIssuerChain", POINTER(win32more.Security.Cryptography.CERT_CHAIN_CONTEXT_head)),
    ]
    return CRL_REVOCATION_INFO
def _define_PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK():
    return CFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),c_void_p, use_last_error=False)
def _define_CERT_CHAIN_FIND_BY_ISSUER_PARA_head():
    class CERT_CHAIN_FIND_BY_ISSUER_PARA(Structure):
        pass
    return CERT_CHAIN_FIND_BY_ISSUER_PARA
def _define_CERT_CHAIN_FIND_BY_ISSUER_PARA():
    CERT_CHAIN_FIND_BY_ISSUER_PARA = win32more.Security.Cryptography.CERT_CHAIN_FIND_BY_ISSUER_PARA_head
    CERT_CHAIN_FIND_BY_ISSUER_PARA._fields_ = [
        ("cbSize", UInt32),
        ("pszUsageIdentifier", win32more.Foundation.PSTR),
        ("dwKeySpec", UInt32),
        ("dwAcquirePrivateKeyFlags", UInt32),
        ("cIssuer", UInt32),
        ("rgIssuer", POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head)),
        ("pfnFindCallback", win32more.Security.Cryptography.PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK),
        ("pvFindArg", c_void_p),
    ]
    return CERT_CHAIN_FIND_BY_ISSUER_PARA
def _define_CERT_CHAIN_POLICY_PARA_head():
    class CERT_CHAIN_POLICY_PARA(Structure):
        pass
    return CERT_CHAIN_POLICY_PARA
def _define_CERT_CHAIN_POLICY_PARA():
    CERT_CHAIN_POLICY_PARA = win32more.Security.Cryptography.CERT_CHAIN_POLICY_PARA_head
    CERT_CHAIN_POLICY_PARA._fields_ = [
        ("cbSize", UInt32),
        ("dwFlags", win32more.Security.Cryptography.CERT_CHAIN_POLICY_FLAGS),
        ("pvExtraPolicyPara", c_void_p),
    ]
    return CERT_CHAIN_POLICY_PARA
def _define_CERT_CHAIN_POLICY_STATUS_head():
    class CERT_CHAIN_POLICY_STATUS(Structure):
        pass
    return CERT_CHAIN_POLICY_STATUS
def _define_CERT_CHAIN_POLICY_STATUS():
    CERT_CHAIN_POLICY_STATUS = win32more.Security.Cryptography.CERT_CHAIN_POLICY_STATUS_head
    CERT_CHAIN_POLICY_STATUS._fields_ = [
        ("cbSize", UInt32),
        ("dwError", UInt32),
        ("lChainIndex", Int32),
        ("lElementIndex", Int32),
        ("pvExtraPolicyStatus", c_void_p),
    ]
    return CERT_CHAIN_POLICY_STATUS
def _define_AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA_head():
    class AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA(Structure):
        pass
    return AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA
def _define_AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA():
    AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA = win32more.Security.Cryptography.AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA_head
    AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA._fields_ = [
        ("cbSize", UInt32),
        ("dwRegPolicySettings", UInt32),
        ("pSignerInfo", POINTER(win32more.Security.Cryptography.CMSG_SIGNER_INFO_head)),
    ]
    return AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA
def _define_AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS_head():
    class AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS(Structure):
        pass
    return AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS
def _define_AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS():
    AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS = win32more.Security.Cryptography.AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS_head
    AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS._fields_ = [
        ("cbSize", UInt32),
        ("fCommercial", win32more.Foundation.BOOL),
    ]
    return AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS
def _define_AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA_head():
    class AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA(Structure):
        pass
    return AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA
def _define_AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA():
    AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA = win32more.Security.Cryptography.AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA_head
    AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA._fields_ = [
        ("cbSize", UInt32),
        ("dwRegPolicySettings", UInt32),
        ("fCommercial", win32more.Foundation.BOOL),
    ]
    return AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA
def _define_HTTPSPolicyCallbackData_head():
    class HTTPSPolicyCallbackData(Structure):
        pass
    return HTTPSPolicyCallbackData
def _define_HTTPSPolicyCallbackData():
    HTTPSPolicyCallbackData = win32more.Security.Cryptography.HTTPSPolicyCallbackData_head
    class HTTPSPolicyCallbackData__Anonymous_e__Union(Union):
        pass
    HTTPSPolicyCallbackData__Anonymous_e__Union._fields_ = [
        ("cbStruct", UInt32),
        ("cbSize", UInt32),
    ]
    HTTPSPolicyCallbackData._anonymous_ = [
        'Anonymous',
    ]
    HTTPSPolicyCallbackData._fields_ = [
        ("Anonymous", HTTPSPolicyCallbackData__Anonymous_e__Union),
        ("dwAuthType", win32more.Security.Cryptography.HTTPSPOLICY_CALLBACK_DATA_AUTH_TYPE),
        ("fdwChecks", UInt32),
        ("pwszServerName", win32more.Foundation.PWSTR),
    ]
    return HTTPSPolicyCallbackData
def _define_EV_EXTRA_CERT_CHAIN_POLICY_PARA_head():
    class EV_EXTRA_CERT_CHAIN_POLICY_PARA(Structure):
        pass
    return EV_EXTRA_CERT_CHAIN_POLICY_PARA
def _define_EV_EXTRA_CERT_CHAIN_POLICY_PARA():
    EV_EXTRA_CERT_CHAIN_POLICY_PARA = win32more.Security.Cryptography.EV_EXTRA_CERT_CHAIN_POLICY_PARA_head
    EV_EXTRA_CERT_CHAIN_POLICY_PARA._fields_ = [
        ("cbSize", UInt32),
        ("dwRootProgramQualifierFlags", win32more.Security.Cryptography.CERT_ROOT_PROGRAM_FLAGS),
    ]
    return EV_EXTRA_CERT_CHAIN_POLICY_PARA
def _define_EV_EXTRA_CERT_CHAIN_POLICY_STATUS_head():
    class EV_EXTRA_CERT_CHAIN_POLICY_STATUS(Structure):
        pass
    return EV_EXTRA_CERT_CHAIN_POLICY_STATUS
def _define_EV_EXTRA_CERT_CHAIN_POLICY_STATUS():
    EV_EXTRA_CERT_CHAIN_POLICY_STATUS = win32more.Security.Cryptography.EV_EXTRA_CERT_CHAIN_POLICY_STATUS_head
    EV_EXTRA_CERT_CHAIN_POLICY_STATUS._fields_ = [
        ("cbSize", UInt32),
        ("dwQualifiers", UInt32),
        ("dwIssuanceUsageIndex", UInt32),
    ]
    return EV_EXTRA_CERT_CHAIN_POLICY_STATUS
def _define_SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS_head():
    class SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS(Structure):
        pass
    return SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS
def _define_SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS():
    SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS = win32more.Security.Cryptography.SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS_head
    SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS._fields_ = [
        ("cbSize", UInt32),
        ("dwErrorLevel", UInt32),
        ("dwErrorCategory", UInt32),
        ("dwReserved", UInt32),
        ("wszErrorText", Char * 256),
    ]
    return SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS
def _define_SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA_head():
    class SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA(Structure):
        pass
    return SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA
def _define_SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA():
    SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA = win32more.Security.Cryptography.SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA_head
    SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA._fields_ = [
        ("cbSize", UInt32),
        ("dwReserved", UInt32),
        ("pwszServerName", win32more.Foundation.PWSTR),
        ("rgpszHpkpValue", win32more.Foundation.PSTR * 2),
    ]
    return SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA
def _define_SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA_head():
    class SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA(Structure):
        pass
    return SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA
def _define_SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA():
    SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA = win32more.Security.Cryptography.SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA_head
    SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA._fields_ = [
        ("cbSize", UInt32),
        ("dwReserved", UInt32),
        ("pwszServerName", win32more.Foundation.PWSTR),
    ]
    return SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA
def _define_SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS_head():
    class SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS(Structure):
        pass
    return SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS
def _define_SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS():
    SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS = win32more.Security.Cryptography.SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS_head
    SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS._fields_ = [
        ("cbSize", UInt32),
        ("lError", Int32),
        ("wszErrorText", Char * 512),
    ]
    return SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS
def _define_CRYPT_PKCS12_PBE_PARAMS_head():
    class CRYPT_PKCS12_PBE_PARAMS(Structure):
        pass
    return CRYPT_PKCS12_PBE_PARAMS
def _define_CRYPT_PKCS12_PBE_PARAMS():
    CRYPT_PKCS12_PBE_PARAMS = win32more.Security.Cryptography.CRYPT_PKCS12_PBE_PARAMS_head
    CRYPT_PKCS12_PBE_PARAMS._fields_ = [
        ("iIterations", Int32),
        ("cbSalt", UInt32),
    ]
    return CRYPT_PKCS12_PBE_PARAMS
def _define_PKCS12_PBES2_EXPORT_PARAMS_head():
    class PKCS12_PBES2_EXPORT_PARAMS(Structure):
        pass
    return PKCS12_PBES2_EXPORT_PARAMS
def _define_PKCS12_PBES2_EXPORT_PARAMS():
    PKCS12_PBES2_EXPORT_PARAMS = win32more.Security.Cryptography.PKCS12_PBES2_EXPORT_PARAMS_head
    PKCS12_PBES2_EXPORT_PARAMS._fields_ = [
        ("dwSize", UInt32),
        ("hNcryptDescriptor", c_void_p),
        ("pwszPbes2Alg", win32more.Foundation.PWSTR),
    ]
    return PKCS12_PBES2_EXPORT_PARAMS
def _define_CERT_SERVER_OCSP_RESPONSE_CONTEXT_head():
    class CERT_SERVER_OCSP_RESPONSE_CONTEXT(Structure):
        pass
    return CERT_SERVER_OCSP_RESPONSE_CONTEXT
def _define_CERT_SERVER_OCSP_RESPONSE_CONTEXT():
    CERT_SERVER_OCSP_RESPONSE_CONTEXT = win32more.Security.Cryptography.CERT_SERVER_OCSP_RESPONSE_CONTEXT_head
    CERT_SERVER_OCSP_RESPONSE_CONTEXT._fields_ = [
        ("cbSize", UInt32),
        ("pbEncodedOcspResponse", c_char_p_no),
        ("cbEncodedOcspResponse", UInt32),
    ]
    return CERT_SERVER_OCSP_RESPONSE_CONTEXT
def _define_PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK():
    return CFUNCTYPE(Void,POINTER(win32more.Security.Cryptography.CERT_CHAIN_CONTEXT_head),POINTER(win32more.Security.Cryptography.CERT_SERVER_OCSP_RESPONSE_CONTEXT_head),POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head),POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head),c_void_p,UInt32, use_last_error=False)
def _define_CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_head():
    class CERT_SERVER_OCSP_RESPONSE_OPEN_PARA(Structure):
        pass
    return CERT_SERVER_OCSP_RESPONSE_OPEN_PARA
def _define_CERT_SERVER_OCSP_RESPONSE_OPEN_PARA():
    CERT_SERVER_OCSP_RESPONSE_OPEN_PARA = win32more.Security.Cryptography.CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_head
    CERT_SERVER_OCSP_RESPONSE_OPEN_PARA._fields_ = [
        ("cbSize", UInt32),
        ("dwFlags", UInt32),
        ("pcbUsedSize", POINTER(UInt32)),
        ("pwszOcspDirectory", win32more.Foundation.PWSTR),
        ("pfnUpdateCallback", win32more.Security.Cryptography.PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK),
        ("pvUpdateCallbackArg", c_void_p),
    ]
    return CERT_SERVER_OCSP_RESPONSE_OPEN_PARA
def _define_CERT_SELECT_CHAIN_PARA_head():
    class CERT_SELECT_CHAIN_PARA(Structure):
        pass
    return CERT_SELECT_CHAIN_PARA
def _define_CERT_SELECT_CHAIN_PARA():
    CERT_SELECT_CHAIN_PARA = win32more.Security.Cryptography.CERT_SELECT_CHAIN_PARA_head
    CERT_SELECT_CHAIN_PARA._fields_ = [
        ("hChainEngine", win32more.Security.Cryptography.HCERTCHAINENGINE),
        ("pTime", POINTER(win32more.Foundation.FILETIME_head)),
        ("hAdditionalStore", c_void_p),
        ("pChainPara", POINTER(win32more.Security.Cryptography.CERT_CHAIN_PARA_head)),
        ("dwFlags", UInt32),
    ]
    return CERT_SELECT_CHAIN_PARA
def _define_CERT_SELECT_CRITERIA_head():
    class CERT_SELECT_CRITERIA(Structure):
        pass
    return CERT_SELECT_CRITERIA
def _define_CERT_SELECT_CRITERIA():
    CERT_SELECT_CRITERIA = win32more.Security.Cryptography.CERT_SELECT_CRITERIA_head
    CERT_SELECT_CRITERIA._fields_ = [
        ("dwType", win32more.Security.Cryptography.CERT_SELECT_CRITERIA_TYPE),
        ("cPara", UInt32),
        ("ppPara", POINTER(c_void_p)),
    ]
    return CERT_SELECT_CRITERIA
def _define_CRYPT_TIMESTAMP_REQUEST_head():
    class CRYPT_TIMESTAMP_REQUEST(Structure):
        pass
    return CRYPT_TIMESTAMP_REQUEST
def _define_CRYPT_TIMESTAMP_REQUEST():
    CRYPT_TIMESTAMP_REQUEST = win32more.Security.Cryptography.CRYPT_TIMESTAMP_REQUEST_head
    CRYPT_TIMESTAMP_REQUEST._fields_ = [
        ("dwVersion", win32more.Security.Cryptography.CRYPT_TIMESTAMP_VERSION),
        ("HashAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("HashedMessage", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("pszTSAPolicyId", win32more.Foundation.PSTR),
        ("Nonce", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("fCertReq", win32more.Foundation.BOOL),
        ("cExtension", UInt32),
        ("rgExtension", POINTER(win32more.Security.Cryptography.CERT_EXTENSION_head)),
    ]
    return CRYPT_TIMESTAMP_REQUEST
def _define_CRYPT_TIMESTAMP_RESPONSE_head():
    class CRYPT_TIMESTAMP_RESPONSE(Structure):
        pass
    return CRYPT_TIMESTAMP_RESPONSE
def _define_CRYPT_TIMESTAMP_RESPONSE():
    CRYPT_TIMESTAMP_RESPONSE = win32more.Security.Cryptography.CRYPT_TIMESTAMP_RESPONSE_head
    CRYPT_TIMESTAMP_RESPONSE._fields_ = [
        ("dwStatus", win32more.Security.Cryptography.CRYPT_TIMESTAMP_RESPONSE_STATUS),
        ("cFreeText", UInt32),
        ("rgFreeText", POINTER(win32more.Foundation.PWSTR)),
        ("FailureInfo", win32more.Security.Cryptography.CRYPT_BIT_BLOB),
        ("ContentInfo", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return CRYPT_TIMESTAMP_RESPONSE
def _define_CRYPT_TIMESTAMP_ACCURACY_head():
    class CRYPT_TIMESTAMP_ACCURACY(Structure):
        pass
    return CRYPT_TIMESTAMP_ACCURACY
def _define_CRYPT_TIMESTAMP_ACCURACY():
    CRYPT_TIMESTAMP_ACCURACY = win32more.Security.Cryptography.CRYPT_TIMESTAMP_ACCURACY_head
    CRYPT_TIMESTAMP_ACCURACY._fields_ = [
        ("dwSeconds", UInt32),
        ("dwMillis", UInt32),
        ("dwMicros", UInt32),
    ]
    return CRYPT_TIMESTAMP_ACCURACY
def _define_CRYPT_TIMESTAMP_INFO_head():
    class CRYPT_TIMESTAMP_INFO(Structure):
        pass
    return CRYPT_TIMESTAMP_INFO
def _define_CRYPT_TIMESTAMP_INFO():
    CRYPT_TIMESTAMP_INFO = win32more.Security.Cryptography.CRYPT_TIMESTAMP_INFO_head
    CRYPT_TIMESTAMP_INFO._fields_ = [
        ("dwVersion", UInt32),
        ("pszTSAPolicyId", win32more.Foundation.PSTR),
        ("HashAlgorithm", win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER),
        ("HashedMessage", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("SerialNumber", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("ftTime", win32more.Foundation.FILETIME),
        ("pvAccuracy", POINTER(win32more.Security.Cryptography.CRYPT_TIMESTAMP_ACCURACY_head)),
        ("fOrdering", win32more.Foundation.BOOL),
        ("Nonce", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("Tsa", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("cExtension", UInt32),
        ("rgExtension", POINTER(win32more.Security.Cryptography.CERT_EXTENSION_head)),
    ]
    return CRYPT_TIMESTAMP_INFO
def _define_CRYPT_TIMESTAMP_CONTEXT_head():
    class CRYPT_TIMESTAMP_CONTEXT(Structure):
        pass
    return CRYPT_TIMESTAMP_CONTEXT
def _define_CRYPT_TIMESTAMP_CONTEXT():
    CRYPT_TIMESTAMP_CONTEXT = win32more.Security.Cryptography.CRYPT_TIMESTAMP_CONTEXT_head
    CRYPT_TIMESTAMP_CONTEXT._fields_ = [
        ("cbEncoded", UInt32),
        ("pbEncoded", c_char_p_no),
        ("pTimeStamp", POINTER(win32more.Security.Cryptography.CRYPT_TIMESTAMP_INFO_head)),
    ]
    return CRYPT_TIMESTAMP_CONTEXT
def _define_CRYPT_TIMESTAMP_PARA_head():
    class CRYPT_TIMESTAMP_PARA(Structure):
        pass
    return CRYPT_TIMESTAMP_PARA
def _define_CRYPT_TIMESTAMP_PARA():
    CRYPT_TIMESTAMP_PARA = win32more.Security.Cryptography.CRYPT_TIMESTAMP_PARA_head
    CRYPT_TIMESTAMP_PARA._fields_ = [
        ("pszTSAPolicyId", win32more.Foundation.PSTR),
        ("fRequestCerts", win32more.Foundation.BOOL),
        ("Nonce", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("cExtension", UInt32),
        ("rgExtension", POINTER(win32more.Security.Cryptography.CERT_EXTENSION_head)),
    ]
    return CRYPT_TIMESTAMP_PARA
def _define_PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head)),UInt32, use_last_error=False)
def _define_PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head),UInt32,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head),POINTER(c_char_p_no),POINTER(UInt32),POINTER(win32more.Foundation.PWSTR),POINTER(POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head)), use_last_error=False)
def _define_PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE():
    return CFUNCTYPE(Void,win32more.Security.Cryptography.CRYPT_OBJECT_LOCATOR_RELEASE_REASON,c_void_p, use_last_error=False)
def _define_PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD():
    return CFUNCTYPE(Void,c_void_p,win32more.Foundation.PWSTR, use_last_error=False)
def _define_PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE():
    return CFUNCTYPE(Void,c_void_p,c_char_p_no, use_last_error=False)
def _define_PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER():
    return CFUNCTYPE(Void,c_void_p,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head), use_last_error=False)
def _define_CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE_head():
    class CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE(Structure):
        pass
    return CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE
def _define_CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE():
    CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE = win32more.Security.Cryptography.CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE_head
    CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE._fields_ = [
        ("cbSize", UInt32),
        ("pfnGet", win32more.Security.Cryptography.PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET),
        ("pfnRelease", win32more.Security.Cryptography.PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE),
        ("pfnFreePassword", win32more.Security.Cryptography.PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD),
        ("pfnFree", win32more.Security.Cryptography.PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE),
        ("pfnFreeIdentifier", win32more.Security.Cryptography.PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER),
    ]
    return CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE
def _define_PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE():
    return CFUNCTYPE(win32more.Foundation.BOOL,win32more.Security.Cryptography.PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH,c_void_p,POINTER(UInt32),POINTER(POINTER(win32more.Security.Cryptography.CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE_head)),POINTER(c_void_p), use_last_error=False)
def _define_PFN_CERT_IS_WEAK_HASH():
    return CFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PWSTR,UInt32,POINTER(win32more.Security.Cryptography.CERT_CHAIN_CONTEXT_head),POINTER(win32more.Foundation.FILETIME_head),win32more.Foundation.PWSTR, use_last_error=False)
def _define_CRYPTPROTECT_PROMPTSTRUCT_head():
    class CRYPTPROTECT_PROMPTSTRUCT(Structure):
        pass
    return CRYPTPROTECT_PROMPTSTRUCT
def _define_CRYPTPROTECT_PROMPTSTRUCT():
    CRYPTPROTECT_PROMPTSTRUCT = win32more.Security.Cryptography.CRYPTPROTECT_PROMPTSTRUCT_head
    CRYPTPROTECT_PROMPTSTRUCT._fields_ = [
        ("cbSize", UInt32),
        ("dwPromptFlags", UInt32),
        ("hwndApp", win32more.Foundation.HWND),
        ("szPrompt", win32more.Foundation.PWSTR),
    ]
    return CRYPTPROTECT_PROMPTSTRUCT
def _define_PFNCryptStreamOutputCallback():
    return CFUNCTYPE(Int32,c_void_p,c_char_p_no,UIntPtr,win32more.Foundation.BOOL, use_last_error=False)
def _define_NCRYPT_PROTECT_STREAM_INFO_head():
    class NCRYPT_PROTECT_STREAM_INFO(Structure):
        pass
    return NCRYPT_PROTECT_STREAM_INFO
def _define_NCRYPT_PROTECT_STREAM_INFO():
    NCRYPT_PROTECT_STREAM_INFO = win32more.Security.Cryptography.NCRYPT_PROTECT_STREAM_INFO_head
    NCRYPT_PROTECT_STREAM_INFO._fields_ = [
        ("pfnStreamOutput", win32more.Security.Cryptography.PFNCryptStreamOutputCallback),
        ("pvCallbackCtxt", c_void_p),
    ]
    return NCRYPT_PROTECT_STREAM_INFO
def _define_PFNCryptStreamOutputCallbackEx():
    return CFUNCTYPE(Int32,c_void_p,c_char_p_no,UIntPtr,win32more.Security.NCRYPT_DESCRIPTOR_HANDLE,win32more.Foundation.BOOL, use_last_error=False)
def _define_NCRYPT_PROTECT_STREAM_INFO_EX_head():
    class NCRYPT_PROTECT_STREAM_INFO_EX(Structure):
        pass
    return NCRYPT_PROTECT_STREAM_INFO_EX
def _define_NCRYPT_PROTECT_STREAM_INFO_EX():
    NCRYPT_PROTECT_STREAM_INFO_EX = win32more.Security.Cryptography.NCRYPT_PROTECT_STREAM_INFO_EX_head
    NCRYPT_PROTECT_STREAM_INFO_EX._fields_ = [
        ("pfnStreamOutput", win32more.Security.Cryptography.PFNCryptStreamOutputCallbackEx),
        ("pvCallbackCtxt", c_void_p),
    ]
    return NCRYPT_PROTECT_STREAM_INFO_EX
CRYPT_XML_CHARSET = Int32
CRYPT_XML_CHARSET_AUTO = 0
CRYPT_XML_CHARSET_UTF8 = 1
CRYPT_XML_CHARSET_UTF16LE = 2
CRYPT_XML_CHARSET_UTF16BE = 3
def _define_CRYPT_XML_BLOB_head():
    class CRYPT_XML_BLOB(Structure):
        pass
    return CRYPT_XML_BLOB
def _define_CRYPT_XML_BLOB():
    CRYPT_XML_BLOB = win32more.Security.Cryptography.CRYPT_XML_BLOB_head
    CRYPT_XML_BLOB._fields_ = [
        ("dwCharset", win32more.Security.Cryptography.CRYPT_XML_CHARSET),
        ("cbData", UInt32),
        ("pbData", c_char_p_no),
    ]
    return CRYPT_XML_BLOB
def _define_CRYPT_XML_DATA_BLOB_head():
    class CRYPT_XML_DATA_BLOB(Structure):
        pass
    return CRYPT_XML_DATA_BLOB
def _define_CRYPT_XML_DATA_BLOB():
    CRYPT_XML_DATA_BLOB = win32more.Security.Cryptography.CRYPT_XML_DATA_BLOB_head
    CRYPT_XML_DATA_BLOB._fields_ = [
        ("cbData", UInt32),
        ("pbData", c_char_p_no),
    ]
    return CRYPT_XML_DATA_BLOB
CRYPT_XML_PROPERTY_ID = Int32
CRYPT_XML_PROPERTY_MAX_HEAP_SIZE = 1
CRYPT_XML_PROPERTY_SIGNATURE_LOCATION = 2
CRYPT_XML_PROPERTY_MAX_SIGNATURES = 3
CRYPT_XML_PROPERTY_DOC_DECLARATION = 4
CRYPT_XML_PROPERTY_XML_OUTPUT_CHARSET = 5
def _define_CRYPT_XML_PROPERTY_head():
    class CRYPT_XML_PROPERTY(Structure):
        pass
    return CRYPT_XML_PROPERTY
def _define_CRYPT_XML_PROPERTY():
    CRYPT_XML_PROPERTY = win32more.Security.Cryptography.CRYPT_XML_PROPERTY_head
    CRYPT_XML_PROPERTY._fields_ = [
        ("dwPropId", win32more.Security.Cryptography.CRYPT_XML_PROPERTY_ID),
        ("pvValue", c_void_p),
        ("cbValue", UInt32),
    ]
    return CRYPT_XML_PROPERTY
def _define_PFN_CRYPT_XML_WRITE_CALLBACK():
    return CFUNCTYPE(win32more.Foundation.HRESULT,c_void_p,c_char_p_no,UInt32, use_last_error=False)
def _define_PFN_CRYPT_XML_DATA_PROVIDER_READ():
    return CFUNCTYPE(win32more.Foundation.HRESULT,c_void_p,c_char_p_no,UInt32,POINTER(UInt32), use_last_error=False)
def _define_PFN_CRYPT_XML_DATA_PROVIDER_CLOSE():
    return CFUNCTYPE(win32more.Foundation.HRESULT,c_void_p, use_last_error=False)
def _define_CRYPT_XML_DATA_PROVIDER_head():
    class CRYPT_XML_DATA_PROVIDER(Structure):
        pass
    return CRYPT_XML_DATA_PROVIDER
def _define_CRYPT_XML_DATA_PROVIDER():
    CRYPT_XML_DATA_PROVIDER = win32more.Security.Cryptography.CRYPT_XML_DATA_PROVIDER_head
    CRYPT_XML_DATA_PROVIDER._fields_ = [
        ("pvCallbackState", c_void_p),
        ("cbBufferSize", UInt32),
        ("pfnRead", win32more.Security.Cryptography.PFN_CRYPT_XML_DATA_PROVIDER_READ),
        ("pfnClose", win32more.Security.Cryptography.PFN_CRYPT_XML_DATA_PROVIDER_CLOSE),
    ]
    return CRYPT_XML_DATA_PROVIDER
def _define_PFN_CRYPT_XML_CREATE_TRANSFORM():
    return CFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Security.Cryptography.CRYPT_XML_ALGORITHM_head),POINTER(win32more.Security.Cryptography.CRYPT_XML_DATA_PROVIDER_head),POINTER(win32more.Security.Cryptography.CRYPT_XML_DATA_PROVIDER_head), use_last_error=False)
def _define_CRYPT_XML_STATUS_head():
    class CRYPT_XML_STATUS(Structure):
        pass
    return CRYPT_XML_STATUS
def _define_CRYPT_XML_STATUS():
    CRYPT_XML_STATUS = win32more.Security.Cryptography.CRYPT_XML_STATUS_head
    CRYPT_XML_STATUS._fields_ = [
        ("cbSize", UInt32),
        ("dwErrorStatus", win32more.Security.Cryptography.CRYPT_XML_STATUS_ERROR_STATUS),
        ("dwInfoStatus", win32more.Security.Cryptography.CRYPT_XML_STATUS_INFO_STATUS),
    ]
    return CRYPT_XML_STATUS
def _define_CRYPT_XML_ALGORITHM_head():
    class CRYPT_XML_ALGORITHM(Structure):
        pass
    return CRYPT_XML_ALGORITHM
def _define_CRYPT_XML_ALGORITHM():
    CRYPT_XML_ALGORITHM = win32more.Security.Cryptography.CRYPT_XML_ALGORITHM_head
    CRYPT_XML_ALGORITHM._fields_ = [
        ("cbSize", UInt32),
        ("wszAlgorithm", win32more.Foundation.PWSTR),
        ("Encoded", win32more.Security.Cryptography.CRYPT_XML_BLOB),
    ]
    return CRYPT_XML_ALGORITHM
def _define_CRYPT_XML_TRANSFORM_INFO_head():
    class CRYPT_XML_TRANSFORM_INFO(Structure):
        pass
    return CRYPT_XML_TRANSFORM_INFO
def _define_CRYPT_XML_TRANSFORM_INFO():
    CRYPT_XML_TRANSFORM_INFO = win32more.Security.Cryptography.CRYPT_XML_TRANSFORM_INFO_head
    CRYPT_XML_TRANSFORM_INFO._fields_ = [
        ("cbSize", UInt32),
        ("wszAlgorithm", win32more.Foundation.PWSTR),
        ("cbBufferSize", UInt32),
        ("dwFlags", win32more.Security.Cryptography.CRYPT_XML_TRANSFORM_FLAGS),
        ("pfnCreateTransform", win32more.Security.Cryptography.PFN_CRYPT_XML_CREATE_TRANSFORM),
    ]
    return CRYPT_XML_TRANSFORM_INFO
def _define_CRYPT_XML_TRANSFORM_CHAIN_CONFIG_head():
    class CRYPT_XML_TRANSFORM_CHAIN_CONFIG(Structure):
        pass
    return CRYPT_XML_TRANSFORM_CHAIN_CONFIG
def _define_CRYPT_XML_TRANSFORM_CHAIN_CONFIG():
    CRYPT_XML_TRANSFORM_CHAIN_CONFIG = win32more.Security.Cryptography.CRYPT_XML_TRANSFORM_CHAIN_CONFIG_head
    CRYPT_XML_TRANSFORM_CHAIN_CONFIG._fields_ = [
        ("cbSize", UInt32),
        ("cTransformInfo", UInt32),
        ("rgpTransformInfo", POINTER(POINTER(win32more.Security.Cryptography.CRYPT_XML_TRANSFORM_INFO_head))),
    ]
    return CRYPT_XML_TRANSFORM_CHAIN_CONFIG
def _define_CRYPT_XML_KEY_DSA_KEY_VALUE_head():
    class CRYPT_XML_KEY_DSA_KEY_VALUE(Structure):
        pass
    return CRYPT_XML_KEY_DSA_KEY_VALUE
def _define_CRYPT_XML_KEY_DSA_KEY_VALUE():
    CRYPT_XML_KEY_DSA_KEY_VALUE = win32more.Security.Cryptography.CRYPT_XML_KEY_DSA_KEY_VALUE_head
    CRYPT_XML_KEY_DSA_KEY_VALUE._fields_ = [
        ("P", win32more.Security.Cryptography.CRYPT_XML_DATA_BLOB),
        ("Q", win32more.Security.Cryptography.CRYPT_XML_DATA_BLOB),
        ("G", win32more.Security.Cryptography.CRYPT_XML_DATA_BLOB),
        ("Y", win32more.Security.Cryptography.CRYPT_XML_DATA_BLOB),
        ("J", win32more.Security.Cryptography.CRYPT_XML_DATA_BLOB),
        ("Seed", win32more.Security.Cryptography.CRYPT_XML_DATA_BLOB),
        ("Counter", win32more.Security.Cryptography.CRYPT_XML_DATA_BLOB),
    ]
    return CRYPT_XML_KEY_DSA_KEY_VALUE
def _define_CRYPT_XML_KEY_ECDSA_KEY_VALUE_head():
    class CRYPT_XML_KEY_ECDSA_KEY_VALUE(Structure):
        pass
    return CRYPT_XML_KEY_ECDSA_KEY_VALUE
def _define_CRYPT_XML_KEY_ECDSA_KEY_VALUE():
    CRYPT_XML_KEY_ECDSA_KEY_VALUE = win32more.Security.Cryptography.CRYPT_XML_KEY_ECDSA_KEY_VALUE_head
    CRYPT_XML_KEY_ECDSA_KEY_VALUE._fields_ = [
        ("wszNamedCurve", win32more.Foundation.PWSTR),
        ("X", win32more.Security.Cryptography.CRYPT_XML_DATA_BLOB),
        ("Y", win32more.Security.Cryptography.CRYPT_XML_DATA_BLOB),
        ("ExplicitPara", win32more.Security.Cryptography.CRYPT_XML_BLOB),
    ]
    return CRYPT_XML_KEY_ECDSA_KEY_VALUE
def _define_CRYPT_XML_KEY_RSA_KEY_VALUE_head():
    class CRYPT_XML_KEY_RSA_KEY_VALUE(Structure):
        pass
    return CRYPT_XML_KEY_RSA_KEY_VALUE
def _define_CRYPT_XML_KEY_RSA_KEY_VALUE():
    CRYPT_XML_KEY_RSA_KEY_VALUE = win32more.Security.Cryptography.CRYPT_XML_KEY_RSA_KEY_VALUE_head
    CRYPT_XML_KEY_RSA_KEY_VALUE._fields_ = [
        ("Modulus", win32more.Security.Cryptography.CRYPT_XML_DATA_BLOB),
        ("Exponent", win32more.Security.Cryptography.CRYPT_XML_DATA_BLOB),
    ]
    return CRYPT_XML_KEY_RSA_KEY_VALUE
def _define_CRYPT_XML_KEY_VALUE_head():
    class CRYPT_XML_KEY_VALUE(Structure):
        pass
    return CRYPT_XML_KEY_VALUE
def _define_CRYPT_XML_KEY_VALUE():
    CRYPT_XML_KEY_VALUE = win32more.Security.Cryptography.CRYPT_XML_KEY_VALUE_head
    class CRYPT_XML_KEY_VALUE__Anonymous_e__Union(Union):
        pass
    CRYPT_XML_KEY_VALUE__Anonymous_e__Union._fields_ = [
        ("DSAKeyValue", win32more.Security.Cryptography.CRYPT_XML_KEY_DSA_KEY_VALUE),
        ("RSAKeyValue", win32more.Security.Cryptography.CRYPT_XML_KEY_RSA_KEY_VALUE),
        ("ECDSAKeyValue", win32more.Security.Cryptography.CRYPT_XML_KEY_ECDSA_KEY_VALUE),
        ("Custom", win32more.Security.Cryptography.CRYPT_XML_BLOB),
    ]
    CRYPT_XML_KEY_VALUE._anonymous_ = [
        'Anonymous',
    ]
    CRYPT_XML_KEY_VALUE._fields_ = [
        ("dwType", win32more.Security.Cryptography.CRYPT_XML_KEY_VALUE_TYPE),
        ("Anonymous", CRYPT_XML_KEY_VALUE__Anonymous_e__Union),
    ]
    return CRYPT_XML_KEY_VALUE
def _define_CRYPT_XML_ISSUER_SERIAL_head():
    class CRYPT_XML_ISSUER_SERIAL(Structure):
        pass
    return CRYPT_XML_ISSUER_SERIAL
def _define_CRYPT_XML_ISSUER_SERIAL():
    CRYPT_XML_ISSUER_SERIAL = win32more.Security.Cryptography.CRYPT_XML_ISSUER_SERIAL_head
    CRYPT_XML_ISSUER_SERIAL._fields_ = [
        ("wszIssuer", win32more.Foundation.PWSTR),
        ("wszSerial", win32more.Foundation.PWSTR),
    ]
    return CRYPT_XML_ISSUER_SERIAL
def _define_CRYPT_XML_X509DATA_ITEM_head():
    class CRYPT_XML_X509DATA_ITEM(Structure):
        pass
    return CRYPT_XML_X509DATA_ITEM
def _define_CRYPT_XML_X509DATA_ITEM():
    CRYPT_XML_X509DATA_ITEM = win32more.Security.Cryptography.CRYPT_XML_X509DATA_ITEM_head
    class CRYPT_XML_X509DATA_ITEM__Anonymous_e__Union(Union):
        pass
    CRYPT_XML_X509DATA_ITEM__Anonymous_e__Union._fields_ = [
        ("IssuerSerial", win32more.Security.Cryptography.CRYPT_XML_ISSUER_SERIAL),
        ("SKI", win32more.Security.Cryptography.CRYPT_XML_DATA_BLOB),
        ("wszSubjectName", win32more.Foundation.PWSTR),
        ("Certificate", win32more.Security.Cryptography.CRYPT_XML_DATA_BLOB),
        ("CRL", win32more.Security.Cryptography.CRYPT_XML_DATA_BLOB),
        ("Custom", win32more.Security.Cryptography.CRYPT_XML_BLOB),
    ]
    CRYPT_XML_X509DATA_ITEM._anonymous_ = [
        'Anonymous',
    ]
    CRYPT_XML_X509DATA_ITEM._fields_ = [
        ("dwType", win32more.Security.Cryptography.CRYPT_XML_X509DATA_TYPE),
        ("Anonymous", CRYPT_XML_X509DATA_ITEM__Anonymous_e__Union),
    ]
    return CRYPT_XML_X509DATA_ITEM
def _define_CRYPT_XML_X509DATA_head():
    class CRYPT_XML_X509DATA(Structure):
        pass
    return CRYPT_XML_X509DATA
def _define_CRYPT_XML_X509DATA():
    CRYPT_XML_X509DATA = win32more.Security.Cryptography.CRYPT_XML_X509DATA_head
    CRYPT_XML_X509DATA._fields_ = [
        ("cX509Data", UInt32),
        ("rgX509Data", POINTER(win32more.Security.Cryptography.CRYPT_XML_X509DATA_ITEM_head)),
    ]
    return CRYPT_XML_X509DATA
def _define_CRYPT_XML_KEY_INFO_ITEM_head():
    class CRYPT_XML_KEY_INFO_ITEM(Structure):
        pass
    return CRYPT_XML_KEY_INFO_ITEM
def _define_CRYPT_XML_KEY_INFO_ITEM():
    CRYPT_XML_KEY_INFO_ITEM = win32more.Security.Cryptography.CRYPT_XML_KEY_INFO_ITEM_head
    class CRYPT_XML_KEY_INFO_ITEM__Anonymous_e__Union(Union):
        pass
    CRYPT_XML_KEY_INFO_ITEM__Anonymous_e__Union._fields_ = [
        ("wszKeyName", win32more.Foundation.PWSTR),
        ("KeyValue", win32more.Security.Cryptography.CRYPT_XML_KEY_VALUE),
        ("RetrievalMethod", win32more.Security.Cryptography.CRYPT_XML_BLOB),
        ("X509Data", win32more.Security.Cryptography.CRYPT_XML_X509DATA),
        ("Custom", win32more.Security.Cryptography.CRYPT_XML_BLOB),
    ]
    CRYPT_XML_KEY_INFO_ITEM._anonymous_ = [
        'Anonymous',
    ]
    CRYPT_XML_KEY_INFO_ITEM._fields_ = [
        ("dwType", win32more.Security.Cryptography.CRYPT_XML_KEYINFO_TYPE),
        ("Anonymous", CRYPT_XML_KEY_INFO_ITEM__Anonymous_e__Union),
    ]
    return CRYPT_XML_KEY_INFO_ITEM
def _define_CRYPT_XML_KEY_INFO_head():
    class CRYPT_XML_KEY_INFO(Structure):
        pass
    return CRYPT_XML_KEY_INFO
def _define_CRYPT_XML_KEY_INFO():
    CRYPT_XML_KEY_INFO = win32more.Security.Cryptography.CRYPT_XML_KEY_INFO_head
    CRYPT_XML_KEY_INFO._fields_ = [
        ("cbSize", UInt32),
        ("wszId", win32more.Foundation.PWSTR),
        ("cKeyInfo", UInt32),
        ("rgKeyInfo", POINTER(win32more.Security.Cryptography.CRYPT_XML_KEY_INFO_ITEM_head)),
        ("hVerifyKey", win32more.Security.Cryptography.BCRYPT_KEY_HANDLE),
    ]
    return CRYPT_XML_KEY_INFO
def _define_CRYPT_XML_REFERENCE_head():
    class CRYPT_XML_REFERENCE(Structure):
        pass
    return CRYPT_XML_REFERENCE
def _define_CRYPT_XML_REFERENCE():
    CRYPT_XML_REFERENCE = win32more.Security.Cryptography.CRYPT_XML_REFERENCE_head
    CRYPT_XML_REFERENCE._fields_ = [
        ("cbSize", UInt32),
        ("hReference", c_void_p),
        ("wszId", win32more.Foundation.PWSTR),
        ("wszUri", win32more.Foundation.PWSTR),
        ("wszType", win32more.Foundation.PWSTR),
        ("DigestMethod", win32more.Security.Cryptography.CRYPT_XML_ALGORITHM),
        ("DigestValue", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("cTransform", UInt32),
        ("rgTransform", POINTER(win32more.Security.Cryptography.CRYPT_XML_ALGORITHM_head)),
    ]
    return CRYPT_XML_REFERENCE
def _define_CRYPT_XML_REFERENCES_head():
    class CRYPT_XML_REFERENCES(Structure):
        pass
    return CRYPT_XML_REFERENCES
def _define_CRYPT_XML_REFERENCES():
    CRYPT_XML_REFERENCES = win32more.Security.Cryptography.CRYPT_XML_REFERENCES_head
    CRYPT_XML_REFERENCES._fields_ = [
        ("cReference", UInt32),
        ("rgpReference", POINTER(POINTER(win32more.Security.Cryptography.CRYPT_XML_REFERENCE_head))),
    ]
    return CRYPT_XML_REFERENCES
def _define_CRYPT_XML_SIGNED_INFO_head():
    class CRYPT_XML_SIGNED_INFO(Structure):
        pass
    return CRYPT_XML_SIGNED_INFO
def _define_CRYPT_XML_SIGNED_INFO():
    CRYPT_XML_SIGNED_INFO = win32more.Security.Cryptography.CRYPT_XML_SIGNED_INFO_head
    CRYPT_XML_SIGNED_INFO._fields_ = [
        ("cbSize", UInt32),
        ("wszId", win32more.Foundation.PWSTR),
        ("Canonicalization", win32more.Security.Cryptography.CRYPT_XML_ALGORITHM),
        ("SignatureMethod", win32more.Security.Cryptography.CRYPT_XML_ALGORITHM),
        ("cReference", UInt32),
        ("rgpReference", POINTER(POINTER(win32more.Security.Cryptography.CRYPT_XML_REFERENCE_head))),
        ("Encoded", win32more.Security.Cryptography.CRYPT_XML_BLOB),
    ]
    return CRYPT_XML_SIGNED_INFO
def _define_CRYPT_XML_OBJECT_head():
    class CRYPT_XML_OBJECT(Structure):
        pass
    return CRYPT_XML_OBJECT
def _define_CRYPT_XML_OBJECT():
    CRYPT_XML_OBJECT = win32more.Security.Cryptography.CRYPT_XML_OBJECT_head
    CRYPT_XML_OBJECT._fields_ = [
        ("cbSize", UInt32),
        ("hObject", c_void_p),
        ("wszId", win32more.Foundation.PWSTR),
        ("wszMimeType", win32more.Foundation.PWSTR),
        ("wszEncoding", win32more.Foundation.PWSTR),
        ("Manifest", win32more.Security.Cryptography.CRYPT_XML_REFERENCES),
        ("Encoded", win32more.Security.Cryptography.CRYPT_XML_BLOB),
    ]
    return CRYPT_XML_OBJECT
def _define_CRYPT_XML_SIGNATURE_head():
    class CRYPT_XML_SIGNATURE(Structure):
        pass
    return CRYPT_XML_SIGNATURE
def _define_CRYPT_XML_SIGNATURE():
    CRYPT_XML_SIGNATURE = win32more.Security.Cryptography.CRYPT_XML_SIGNATURE_head
    CRYPT_XML_SIGNATURE._fields_ = [
        ("cbSize", UInt32),
        ("hSignature", c_void_p),
        ("wszId", win32more.Foundation.PWSTR),
        ("SignedInfo", win32more.Security.Cryptography.CRYPT_XML_SIGNED_INFO),
        ("SignatureValue", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("pKeyInfo", POINTER(win32more.Security.Cryptography.CRYPT_XML_KEY_INFO_head)),
        ("cObject", UInt32),
        ("rgpObject", POINTER(POINTER(win32more.Security.Cryptography.CRYPT_XML_OBJECT_head))),
    ]
    return CRYPT_XML_SIGNATURE
def _define_CRYPT_XML_DOC_CTXT_head():
    class CRYPT_XML_DOC_CTXT(Structure):
        pass
    return CRYPT_XML_DOC_CTXT
def _define_CRYPT_XML_DOC_CTXT():
    CRYPT_XML_DOC_CTXT = win32more.Security.Cryptography.CRYPT_XML_DOC_CTXT_head
    CRYPT_XML_DOC_CTXT._fields_ = [
        ("cbSize", UInt32),
        ("hDocCtxt", c_void_p),
        ("pTransformsConfig", POINTER(win32more.Security.Cryptography.CRYPT_XML_TRANSFORM_CHAIN_CONFIG_head)),
        ("cSignature", UInt32),
        ("rgpSignature", POINTER(POINTER(win32more.Security.Cryptography.CRYPT_XML_SIGNATURE_head))),
    ]
    return CRYPT_XML_DOC_CTXT
def _define_CRYPT_XML_KEYINFO_PARAM_head():
    class CRYPT_XML_KEYINFO_PARAM(Structure):
        pass
    return CRYPT_XML_KEYINFO_PARAM
def _define_CRYPT_XML_KEYINFO_PARAM():
    CRYPT_XML_KEYINFO_PARAM = win32more.Security.Cryptography.CRYPT_XML_KEYINFO_PARAM_head
    CRYPT_XML_KEYINFO_PARAM._fields_ = [
        ("wszId", win32more.Foundation.PWSTR),
        ("wszKeyName", win32more.Foundation.PWSTR),
        ("SKI", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
        ("wszSubjectName", win32more.Foundation.PWSTR),
        ("cCertificate", UInt32),
        ("rgCertificate", POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head)),
        ("cCRL", UInt32),
        ("rgCRL", POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head)),
    ]
    return CRYPT_XML_KEYINFO_PARAM
CRYPT_XML_KEYINFO_SPEC = Int32
CRYPT_XML_KEYINFO_SPEC_NONE = 0
CRYPT_XML_KEYINFO_SPEC_ENCODED = 1
CRYPT_XML_KEYINFO_SPEC_PARAM = 2
def _define_CRYPT_XML_ALGORITHM_INFO_head():
    class CRYPT_XML_ALGORITHM_INFO(Structure):
        pass
    return CRYPT_XML_ALGORITHM_INFO
def _define_CRYPT_XML_ALGORITHM_INFO():
    CRYPT_XML_ALGORITHM_INFO = win32more.Security.Cryptography.CRYPT_XML_ALGORITHM_INFO_head
    CRYPT_XML_ALGORITHM_INFO._fields_ = [
        ("cbSize", UInt32),
        ("wszAlgorithmURI", win32more.Foundation.PWSTR),
        ("wszName", win32more.Foundation.PWSTR),
        ("dwGroupId", win32more.Security.Cryptography.CRYPT_XML_GROUP_ID),
        ("wszCNGAlgid", win32more.Foundation.PWSTR),
        ("wszCNGExtraAlgid", win32more.Foundation.PWSTR),
        ("dwSignFlags", UInt32),
        ("dwVerifyFlags", UInt32),
        ("pvPaddingInfo", c_void_p),
        ("pvExtraInfo", c_void_p),
    ]
    return CRYPT_XML_ALGORITHM_INFO
def _define_PFN_CRYPT_XML_ENUM_ALG_INFO():
    return CFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPT_XML_ALGORITHM_INFO_head),c_void_p, use_last_error=False)
def _define_CryptXmlDllGetInterface():
    return CFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Security.Cryptography.CRYPT_XML_ALGORITHM_INFO_head),POINTER(win32more.Security.Cryptography.CRYPT_XML_CRYPTOGRAPHIC_INTERFACE_head), use_last_error=False)
def _define_CryptXmlDllEncodeAlgorithm():
    return CFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Security.Cryptography.CRYPT_XML_ALGORITHM_INFO_head),win32more.Security.Cryptography.CRYPT_XML_CHARSET,c_void_p,win32more.Security.Cryptography.PFN_CRYPT_XML_WRITE_CALLBACK, use_last_error=False)
def _define_CryptXmlDllCreateDigest():
    return CFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Security.Cryptography.CRYPT_XML_ALGORITHM_head),POINTER(UInt32),POINTER(c_void_p), use_last_error=False)
def _define_CryptXmlDllDigestData():
    return CFUNCTYPE(win32more.Foundation.HRESULT,c_void_p,c_char_p_no,UInt32, use_last_error=False)
def _define_CryptXmlDllFinalizeDigest():
    return CFUNCTYPE(win32more.Foundation.HRESULT,c_void_p,c_char_p_no,UInt32, use_last_error=False)
def _define_CryptXmlDllCloseDigest():
    return CFUNCTYPE(win32more.Foundation.HRESULT,c_void_p, use_last_error=False)
def _define_CryptXmlDllSignData():
    return CFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Security.Cryptography.CRYPT_XML_ALGORITHM_head),UIntPtr,UInt32,c_char_p_no,UInt32,c_char_p_no,UInt32,POINTER(UInt32), use_last_error=False)
def _define_CryptXmlDllVerifySignature():
    return CFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Security.Cryptography.CRYPT_XML_ALGORITHM_head),win32more.Security.Cryptography.BCRYPT_KEY_HANDLE,c_char_p_no,UInt32,c_char_p_no,UInt32, use_last_error=False)
def _define_CryptXmlDllGetAlgorithmInfo():
    return CFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Security.Cryptography.CRYPT_XML_ALGORITHM_head),POINTER(POINTER(win32more.Security.Cryptography.CRYPT_XML_ALGORITHM_INFO_head)), use_last_error=False)
def _define_CRYPT_XML_CRYPTOGRAPHIC_INTERFACE_head():
    class CRYPT_XML_CRYPTOGRAPHIC_INTERFACE(Structure):
        pass
    return CRYPT_XML_CRYPTOGRAPHIC_INTERFACE
def _define_CRYPT_XML_CRYPTOGRAPHIC_INTERFACE():
    CRYPT_XML_CRYPTOGRAPHIC_INTERFACE = win32more.Security.Cryptography.CRYPT_XML_CRYPTOGRAPHIC_INTERFACE_head
    CRYPT_XML_CRYPTOGRAPHIC_INTERFACE._fields_ = [
        ("cbSize", UInt32),
        ("fpCryptXmlEncodeAlgorithm", win32more.Security.Cryptography.CryptXmlDllEncodeAlgorithm),
        ("fpCryptXmlCreateDigest", win32more.Security.Cryptography.CryptXmlDllCreateDigest),
        ("fpCryptXmlDigestData", win32more.Security.Cryptography.CryptXmlDllDigestData),
        ("fpCryptXmlFinalizeDigest", win32more.Security.Cryptography.CryptXmlDllFinalizeDigest),
        ("fpCryptXmlCloseDigest", win32more.Security.Cryptography.CryptXmlDllCloseDigest),
        ("fpCryptXmlSignData", win32more.Security.Cryptography.CryptXmlDllSignData),
        ("fpCryptXmlVerifySignature", win32more.Security.Cryptography.CryptXmlDllVerifySignature),
        ("fpCryptXmlGetAlgorithmInfo", win32more.Security.Cryptography.CryptXmlDllGetAlgorithmInfo),
    ]
    return CRYPT_XML_CRYPTOGRAPHIC_INTERFACE
def _define_CryptXmlDllEncodeKeyValue():
    return CFUNCTYPE(win32more.Foundation.HRESULT,UIntPtr,win32more.Security.Cryptography.CRYPT_XML_CHARSET,c_void_p,win32more.Security.Cryptography.PFN_CRYPT_XML_WRITE_CALLBACK, use_last_error=False)
def _define_CryptXmlDllCreateKey():
    return CFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Security.Cryptography.CRYPT_XML_BLOB_head),POINTER(win32more.Security.Cryptography.BCRYPT_KEY_HANDLE), use_last_error=False)
HandleType = Int32
HandleType_Asymmetric = 1
HandleType_Symmetric = 2
HandleType_Transform = 3
HandleType_Hash = 4
PaddingMode = Int32
PaddingMode_None = 1
PaddingMode_PKCS7 = 2
PaddingMode_Zeros = 3
PaddingMode_ANSIX923 = 4
PaddingMode_ISO10126 = 5
Direction = Int32
Direction_DirectionEncrypt = 1
Direction_DirectionDecrypt = 2
def _define_INFORMATIONCARD_ASYMMETRIC_CRYPTO_PARAMETERS_head():
    class INFORMATIONCARD_ASYMMETRIC_CRYPTO_PARAMETERS(Structure):
        pass
    return INFORMATIONCARD_ASYMMETRIC_CRYPTO_PARAMETERS
def _define_INFORMATIONCARD_ASYMMETRIC_CRYPTO_PARAMETERS():
    INFORMATIONCARD_ASYMMETRIC_CRYPTO_PARAMETERS = win32more.Security.Cryptography.INFORMATIONCARD_ASYMMETRIC_CRYPTO_PARAMETERS_head
    INFORMATIONCARD_ASYMMETRIC_CRYPTO_PARAMETERS._fields_ = [
        ("keySize", Int32),
        ("keyExchangeAlgorithm", win32more.Foundation.PWSTR),
        ("signatureAlgorithm", win32more.Foundation.PWSTR),
    ]
    return INFORMATIONCARD_ASYMMETRIC_CRYPTO_PARAMETERS
def _define_INFORMATIONCARD_SYMMETRIC_CRYPTO_PARAMETERS_head():
    class INFORMATIONCARD_SYMMETRIC_CRYPTO_PARAMETERS(Structure):
        pass
    return INFORMATIONCARD_SYMMETRIC_CRYPTO_PARAMETERS
def _define_INFORMATIONCARD_SYMMETRIC_CRYPTO_PARAMETERS():
    INFORMATIONCARD_SYMMETRIC_CRYPTO_PARAMETERS = win32more.Security.Cryptography.INFORMATIONCARD_SYMMETRIC_CRYPTO_PARAMETERS_head
    INFORMATIONCARD_SYMMETRIC_CRYPTO_PARAMETERS._fields_ = [
        ("keySize", Int32),
        ("blockSize", Int32),
        ("feedbackSize", Int32),
    ]
    return INFORMATIONCARD_SYMMETRIC_CRYPTO_PARAMETERS
def _define_INFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERS_head():
    class INFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERS(Structure):
        pass
    return INFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERS
def _define_INFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERS():
    INFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERS = win32more.Security.Cryptography.INFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERS_head
    INFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERS._fields_ = [
        ("inputBlockSize", Int32),
        ("outputBlockSize", Int32),
        ("canTransformMultipleBlocks", win32more.Foundation.BOOL),
        ("canReuseTransform", win32more.Foundation.BOOL),
    ]
    return INFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERS
def _define_INFORMATIONCARD_HASH_CRYPTO_PARAMETERS_head():
    class INFORMATIONCARD_HASH_CRYPTO_PARAMETERS(Structure):
        pass
    return INFORMATIONCARD_HASH_CRYPTO_PARAMETERS
def _define_INFORMATIONCARD_HASH_CRYPTO_PARAMETERS():
    INFORMATIONCARD_HASH_CRYPTO_PARAMETERS = win32more.Security.Cryptography.INFORMATIONCARD_HASH_CRYPTO_PARAMETERS_head
    INFORMATIONCARD_HASH_CRYPTO_PARAMETERS._fields_ = [
        ("hashSize", Int32),
        ("transform", win32more.Security.Cryptography.INFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERS),
    ]
    return INFORMATIONCARD_HASH_CRYPTO_PARAMETERS
def _define_INFORMATIONCARD_CRYPTO_HANDLE_head():
    class INFORMATIONCARD_CRYPTO_HANDLE(Structure):
        pass
    return INFORMATIONCARD_CRYPTO_HANDLE
def _define_INFORMATIONCARD_CRYPTO_HANDLE():
    INFORMATIONCARD_CRYPTO_HANDLE = win32more.Security.Cryptography.INFORMATIONCARD_CRYPTO_HANDLE_head
    INFORMATIONCARD_CRYPTO_HANDLE._fields_ = [
        ("type", win32more.Security.Cryptography.HandleType),
        ("expiration", Int64),
        ("cryptoParameters", c_void_p),
    ]
    return INFORMATIONCARD_CRYPTO_HANDLE
def _define_GENERIC_XML_TOKEN_head():
    class GENERIC_XML_TOKEN(Structure):
        pass
    return GENERIC_XML_TOKEN
def _define_GENERIC_XML_TOKEN():
    GENERIC_XML_TOKEN = win32more.Security.Cryptography.GENERIC_XML_TOKEN_head
    GENERIC_XML_TOKEN._pack_ = 1
    GENERIC_XML_TOKEN._fields_ = [
        ("createDate", win32more.Foundation.FILETIME),
        ("expiryDate", win32more.Foundation.FILETIME),
        ("xmlToken", win32more.Foundation.PWSTR),
        ("internalTokenReference", win32more.Foundation.PWSTR),
        ("externalTokenReference", win32more.Foundation.PWSTR),
    ]
    return GENERIC_XML_TOKEN
def _define_POLICY_ELEMENT_head():
    class POLICY_ELEMENT(Structure):
        pass
    return POLICY_ELEMENT
def _define_POLICY_ELEMENT():
    POLICY_ELEMENT = win32more.Security.Cryptography.POLICY_ELEMENT_head
    POLICY_ELEMENT._fields_ = [
        ("targetEndpointAddress", win32more.Foundation.PWSTR),
        ("issuerEndpointAddress", win32more.Foundation.PWSTR),
        ("issuedTokenParameters", win32more.Foundation.PWSTR),
        ("privacyNoticeLink", win32more.Foundation.PWSTR),
        ("privacyNoticeVersion", UInt32),
        ("useManagedPresentation", win32more.Foundation.BOOL),
    ]
    return POLICY_ELEMENT
def _define_ENDPOINTADDRESS_head():
    class ENDPOINTADDRESS(Structure):
        pass
    return ENDPOINTADDRESS
def _define_ENDPOINTADDRESS():
    ENDPOINTADDRESS = win32more.Security.Cryptography.ENDPOINTADDRESS_head
    ENDPOINTADDRESS._fields_ = [
        ("serviceUrl", win32more.Foundation.PWSTR),
        ("policyUrl", win32more.Foundation.PWSTR),
        ("rawCertificate", win32more.Security.Cryptography.CRYPTOAPI_BLOB),
    ]
    return ENDPOINTADDRESS
def _define_ENDPOINTADDRESS2_head():
    class ENDPOINTADDRESS2(Structure):
        pass
    return ENDPOINTADDRESS2
def _define_ENDPOINTADDRESS2():
    ENDPOINTADDRESS2 = win32more.Security.Cryptography.ENDPOINTADDRESS2_head
    ENDPOINTADDRESS2._fields_ = [
        ("serviceUrl", win32more.Foundation.PWSTR),
        ("policyUrl", win32more.Foundation.PWSTR),
        ("identityType", UInt32),
        ("identityBytes", c_void_p),
    ]
    return ENDPOINTADDRESS2
def _define_CERTIFICATE_CHAIN_BLOB_head():
    class CERTIFICATE_CHAIN_BLOB(Structure):
        pass
    return CERTIFICATE_CHAIN_BLOB
def _define_CERTIFICATE_CHAIN_BLOB():
    CERTIFICATE_CHAIN_BLOB = win32more.Security.Cryptography.CERTIFICATE_CHAIN_BLOB_head
    CERTIFICATE_CHAIN_BLOB._fields_ = [
        ("certCount", UInt32),
        ("rawCertificates", POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head)),
    ]
    return CERTIFICATE_CHAIN_BLOB
def _define_CLAIMLIST_head():
    class CLAIMLIST(Structure):
        pass
    return CLAIMLIST
def _define_CLAIMLIST():
    CLAIMLIST = win32more.Security.Cryptography.CLAIMLIST_head
    CLAIMLIST._fields_ = [
        ("count", UInt32),
        ("claims", POINTER(win32more.Foundation.PWSTR)),
    ]
    return CLAIMLIST
def _define_RECIPIENTPOLICY_head():
    class RECIPIENTPOLICY(Structure):
        pass
    return RECIPIENTPOLICY
def _define_RECIPIENTPOLICY():
    RECIPIENTPOLICY = win32more.Security.Cryptography.RECIPIENTPOLICY_head
    RECIPIENTPOLICY._fields_ = [
        ("recipient", win32more.Security.Cryptography.ENDPOINTADDRESS),
        ("issuer", win32more.Security.Cryptography.ENDPOINTADDRESS),
        ("tokenType", win32more.Foundation.PWSTR),
        ("requiredClaims", win32more.Security.Cryptography.CLAIMLIST),
        ("optionalClaims", win32more.Security.Cryptography.CLAIMLIST),
        ("privacyUrl", win32more.Foundation.PWSTR),
        ("privacyVersion", UInt32),
    ]
    return RECIPIENTPOLICY
def _define_RECIPIENTPOLICY2_head():
    class RECIPIENTPOLICY2(Structure):
        pass
    return RECIPIENTPOLICY2
def _define_RECIPIENTPOLICY2():
    RECIPIENTPOLICY2 = win32more.Security.Cryptography.RECIPIENTPOLICY2_head
    RECIPIENTPOLICY2._fields_ = [
        ("recipient", win32more.Security.Cryptography.ENDPOINTADDRESS2),
        ("issuer", win32more.Security.Cryptography.ENDPOINTADDRESS2),
        ("tokenType", win32more.Foundation.PWSTR),
        ("requiredClaims", win32more.Security.Cryptography.CLAIMLIST),
        ("optionalClaims", win32more.Security.Cryptography.CLAIMLIST),
        ("privacyUrl", win32more.Foundation.PWSTR),
        ("privacyVersion", UInt32),
    ]
    return RECIPIENTPOLICY2
CCertSrvSetupKeyInformation = Guid('38373906-5433-4633-b0fb-29b7e78262e1')
CCertSrvSetup = Guid('961f180f-f55c-413d-a9b3-7d2af4d8e42f')
CMSCEPSetup = Guid('aa4f5c02-8e7c-49c4-94fa-67a5cc5eadb4')
CCertificateEnrollmentServerSetup = Guid('9902f3bc-88af-4cf8-ae62-7140531552b6')
CCertificateEnrollmentPolicyServerSetup = Guid('afe2fa32-41b1-459d-a5de-49add8a72182')
def _define_ICertSrvSetupKeyInformation_head():
    class ICertSrvSetupKeyInformation(win32more.System.Com.IDispatch_head):
        Guid = Guid('6ba73778-36da-4c39-8a85-bcfa7d000793')
    return ICertSrvSetupKeyInformation
def _define_ICertSrvSetupKeyInformation():
    ICertSrvSetupKeyInformation = win32more.Security.Cryptography.ICertSrvSetupKeyInformation_head
    ICertSrvSetupKeyInformation.get_ProviderName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BSTR), use_last_error=False)(7, 'get_ProviderName', ((1, 'pVal'),)))
    ICertSrvSetupKeyInformation.put_ProviderName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR, use_last_error=False)(8, 'put_ProviderName', ((1, 'bstrVal'),)))
    ICertSrvSetupKeyInformation.get_Length = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int32), use_last_error=False)(9, 'get_Length', ((1, 'pVal'),)))
    ICertSrvSetupKeyInformation.put_Length = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32, use_last_error=False)(10, 'put_Length', ((1, 'lVal'),)))
    ICertSrvSetupKeyInformation.get_Existing = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int16), use_last_error=False)(11, 'get_Existing', ((1, 'pVal'),)))
    ICertSrvSetupKeyInformation.put_Existing = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int16, use_last_error=False)(12, 'put_Existing', ((1, 'bVal'),)))
    ICertSrvSetupKeyInformation.get_ContainerName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BSTR), use_last_error=False)(13, 'get_ContainerName', ((1, 'pVal'),)))
    ICertSrvSetupKeyInformation.put_ContainerName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR, use_last_error=False)(14, 'put_ContainerName', ((1, 'bstrVal'),)))
    ICertSrvSetupKeyInformation.get_HashAlgorithm = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BSTR), use_last_error=False)(15, 'get_HashAlgorithm', ((1, 'pVal'),)))
    ICertSrvSetupKeyInformation.put_HashAlgorithm = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR, use_last_error=False)(16, 'put_HashAlgorithm', ((1, 'bstrVal'),)))
    ICertSrvSetupKeyInformation.get_ExistingCACertificate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.VARIANT_head), use_last_error=False)(17, 'get_ExistingCACertificate', ((1, 'pVal'),)))
    ICertSrvSetupKeyInformation.put_ExistingCACertificate = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.System.Com.VARIANT, use_last_error=False)(18, 'put_ExistingCACertificate', ((1, 'varVal'),)))
    return ICertSrvSetupKeyInformation
def _define_ICertSrvSetupKeyInformationCollection_head():
    class ICertSrvSetupKeyInformationCollection(win32more.System.Com.IDispatch_head):
        Guid = Guid('e65c8b00-e58f-41f9-a9ec-a28d7427c844')
    return ICertSrvSetupKeyInformationCollection
def _define_ICertSrvSetupKeyInformationCollection():
    ICertSrvSetupKeyInformationCollection = win32more.Security.Cryptography.ICertSrvSetupKeyInformationCollection_head
    ICertSrvSetupKeyInformationCollection.get__NewEnum = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.IUnknown_head), use_last_error=False)(7, 'get__NewEnum', ((1, 'ppVal'),)))
    ICertSrvSetupKeyInformationCollection.get_Item = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,POINTER(win32more.System.Com.VARIANT_head), use_last_error=False)(8, 'get_Item', ((1, 'Index'),(1, 'pVal'),)))
    ICertSrvSetupKeyInformationCollection.get_Count = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int32), use_last_error=False)(9, 'get_Count', ((1, 'pVal'),)))
    ICertSrvSetupKeyInformationCollection.Add = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Security.Cryptography.ICertSrvSetupKeyInformation_head, use_last_error=False)(10, 'Add', ((1, 'pIKeyInformation'),)))
    return ICertSrvSetupKeyInformationCollection
CASetupProperty = Int32
ENUM_SETUPPROP_INVALID = -1
ENUM_SETUPPROP_CATYPE = 0
ENUM_SETUPPROP_CAKEYINFORMATION = 1
ENUM_SETUPPROP_INTERACTIVE = 2
ENUM_SETUPPROP_CANAME = 3
ENUM_SETUPPROP_CADSSUFFIX = 4
ENUM_SETUPPROP_VALIDITYPERIOD = 5
ENUM_SETUPPROP_VALIDITYPERIODUNIT = 6
ENUM_SETUPPROP_EXPIRATIONDATE = 7
ENUM_SETUPPROP_PRESERVEDATABASE = 8
ENUM_SETUPPROP_DATABASEDIRECTORY = 9
ENUM_SETUPPROP_LOGDIRECTORY = 10
ENUM_SETUPPROP_SHAREDFOLDER = 11
ENUM_SETUPPROP_PARENTCAMACHINE = 12
ENUM_SETUPPROP_PARENTCANAME = 13
ENUM_SETUPPROP_REQUESTFILE = 14
ENUM_SETUPPROP_WEBCAMACHINE = 15
ENUM_SETUPPROP_WEBCANAME = 16
def _define_ICertSrvSetup_head():
    class ICertSrvSetup(win32more.System.Com.IDispatch_head):
        Guid = Guid('b760a1bb-4784-44c0-8f12-555f0780ff25')
    return ICertSrvSetup
def _define_ICertSrvSetup():
    ICertSrvSetup = win32more.Security.Cryptography.ICertSrvSetup_head
    ICertSrvSetup.get_CAErrorId = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int32), use_last_error=False)(7, 'get_CAErrorId', ((1, 'pVal'),)))
    ICertSrvSetup.get_CAErrorString = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BSTR), use_last_error=False)(8, 'get_CAErrorString', ((1, 'pVal'),)))
    ICertSrvSetup.InitializeDefaults = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int16,Int16, use_last_error=False)(9, 'InitializeDefaults', ((1, 'bServer'),(1, 'bClient'),)))
    ICertSrvSetup.GetCASetupProperty = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Security.Cryptography.CASetupProperty,POINTER(win32more.System.Com.VARIANT_head), use_last_error=False)(10, 'GetCASetupProperty', ((1, 'propertyId'),(1, 'pPropertyValue'),)))
    ICertSrvSetup.SetCASetupProperty = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Security.Cryptography.CASetupProperty,POINTER(win32more.System.Com.VARIANT_head), use_last_error=False)(11, 'SetCASetupProperty', ((1, 'propertyId'),(1, 'pPropertyValue'),)))
    ICertSrvSetup.IsPropertyEditable = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Security.Cryptography.CASetupProperty,POINTER(Int16), use_last_error=False)(12, 'IsPropertyEditable', ((1, 'propertyId'),(1, 'pbEditable'),)))
    ICertSrvSetup.GetSupportedCATypes = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.VARIANT_head), use_last_error=False)(13, 'GetSupportedCATypes', ((1, 'pCATypes'),)))
    ICertSrvSetup.GetProviderNameList = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.VARIANT_head), use_last_error=False)(14, 'GetProviderNameList', ((1, 'pVal'),)))
    ICertSrvSetup.GetKeyLengthList = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,POINTER(win32more.System.Com.VARIANT_head), use_last_error=False)(15, 'GetKeyLengthList', ((1, 'bstrProviderName'),(1, 'pVal'),)))
    ICertSrvSetup.GetHashAlgorithmList = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,POINTER(win32more.System.Com.VARIANT_head), use_last_error=False)(16, 'GetHashAlgorithmList', ((1, 'bstrProviderName'),(1, 'pVal'),)))
    ICertSrvSetup.GetPrivateKeyContainerList = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,POINTER(win32more.System.Com.VARIANT_head), use_last_error=False)(17, 'GetPrivateKeyContainerList', ((1, 'bstrProviderName'),(1, 'pVal'),)))
    ICertSrvSetup.GetExistingCACertificates = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Security.Cryptography.ICertSrvSetupKeyInformationCollection_head), use_last_error=False)(18, 'GetExistingCACertificates', ((1, 'ppVal'),)))
    ICertSrvSetup.CAImportPFX = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,win32more.Foundation.BSTR,Int16,POINTER(win32more.Security.Cryptography.ICertSrvSetupKeyInformation_head), use_last_error=False)(19, 'CAImportPFX', ((1, 'bstrFileName'),(1, 'bstrPasswd'),(1, 'bOverwriteExistingKey'),(1, 'ppVal'),)))
    ICertSrvSetup.SetCADistinguishedName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,Int16,Int16,Int16, use_last_error=False)(20, 'SetCADistinguishedName', ((1, 'bstrCADN'),(1, 'bIgnoreUnicode'),(1, 'bOverwriteExistingKey'),(1, 'bOverwriteExistingCAInDS'),)))
    ICertSrvSetup.SetDatabaseInformation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,win32more.Foundation.BSTR,win32more.Foundation.BSTR,Int16, use_last_error=False)(21, 'SetDatabaseInformation', ((1, 'bstrDBDirectory'),(1, 'bstrLogDirectory'),(1, 'bstrSharedFolder'),(1, 'bForceOverwrite'),)))
    ICertSrvSetup.SetParentCAInformation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR, use_last_error=False)(22, 'SetParentCAInformation', ((1, 'bstrCAConfiguration'),)))
    ICertSrvSetup.SetWebCAInformation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR, use_last_error=False)(23, 'SetWebCAInformation', ((1, 'bstrCAConfiguration'),)))
    ICertSrvSetup.Install = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(24, 'Install', ()))
    ICertSrvSetup.PreUnInstall = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int16, use_last_error=False)(25, 'PreUnInstall', ((1, 'bClientOnly'),)))
    ICertSrvSetup.PostUnInstall = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(26, 'PostUnInstall', ()))
    return ICertSrvSetup
MSCEPSetupProperty = Int32
ENUM_CEPSETUPPROP_USELOCALSYSTEM = 0
ENUM_CEPSETUPPROP_USECHALLENGE = 1
ENUM_CEPSETUPPROP_RANAME_CN = 2
ENUM_CEPSETUPPROP_RANAME_EMAIL = 3
ENUM_CEPSETUPPROP_RANAME_COMPANY = 4
ENUM_CEPSETUPPROP_RANAME_DEPT = 5
ENUM_CEPSETUPPROP_RANAME_CITY = 6
ENUM_CEPSETUPPROP_RANAME_STATE = 7
ENUM_CEPSETUPPROP_RANAME_COUNTRY = 8
ENUM_CEPSETUPPROP_SIGNINGKEYINFORMATION = 9
ENUM_CEPSETUPPROP_EXCHANGEKEYINFORMATION = 10
ENUM_CEPSETUPPROP_CAINFORMATION = 11
ENUM_CEPSETUPPROP_MSCEPURL = 12
ENUM_CEPSETUPPROP_CHALLENGEURL = 13
def _define_IMSCEPSetup_head():
    class IMSCEPSetup(win32more.System.Com.IDispatch_head):
        Guid = Guid('4f7761bb-9f3b-4592-9ee0-9a73259c313e')
    return IMSCEPSetup
def _define_IMSCEPSetup():
    IMSCEPSetup = win32more.Security.Cryptography.IMSCEPSetup_head
    IMSCEPSetup.get_MSCEPErrorId = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int32), use_last_error=False)(7, 'get_MSCEPErrorId', ((1, 'pVal'),)))
    IMSCEPSetup.get_MSCEPErrorString = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BSTR), use_last_error=False)(8, 'get_MSCEPErrorString', ((1, 'pVal'),)))
    IMSCEPSetup.InitializeDefaults = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(9, 'InitializeDefaults', ()))
    IMSCEPSetup.GetMSCEPSetupProperty = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Security.Cryptography.MSCEPSetupProperty,POINTER(win32more.System.Com.VARIANT_head), use_last_error=False)(10, 'GetMSCEPSetupProperty', ((1, 'propertyId'),(1, 'pVal'),)))
    IMSCEPSetup.SetMSCEPSetupProperty = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Security.Cryptography.MSCEPSetupProperty,POINTER(win32more.System.Com.VARIANT_head), use_last_error=False)(11, 'SetMSCEPSetupProperty', ((1, 'propertyId'),(1, 'pPropertyValue'),)))
    IMSCEPSetup.SetAccountInformation = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,win32more.Foundation.BSTR, use_last_error=False)(12, 'SetAccountInformation', ((1, 'bstrUserName'),(1, 'bstrPassword'),)))
    IMSCEPSetup.IsMSCEPStoreEmpty = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int16), use_last_error=False)(13, 'IsMSCEPStoreEmpty', ((1, 'pbEmpty'),)))
    IMSCEPSetup.GetProviderNameList = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int16,POINTER(win32more.System.Com.VARIANT_head), use_last_error=False)(14, 'GetProviderNameList', ((1, 'bExchange'),(1, 'pVal'),)))
    IMSCEPSetup.GetKeyLengthList = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int16,win32more.Foundation.BSTR,POINTER(win32more.System.Com.VARIANT_head), use_last_error=False)(15, 'GetKeyLengthList', ((1, 'bExchange'),(1, 'bstrProviderName'),(1, 'pVal'),)))
    IMSCEPSetup.Install = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(16, 'Install', ()))
    IMSCEPSetup.PreUnInstall = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(17, 'PreUnInstall', ()))
    IMSCEPSetup.PostUnInstall = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(18, 'PostUnInstall', ()))
    return IMSCEPSetup
CESSetupProperty = Int32
ENUM_CESSETUPPROP_USE_IISAPPPOOLIDENTITY = 0
ENUM_CESSETUPPROP_CACONFIG = 1
ENUM_CESSETUPPROP_AUTHENTICATION = 2
ENUM_CESSETUPPROP_SSLCERTHASH = 3
ENUM_CESSETUPPROP_URL = 4
ENUM_CESSETUPPROP_RENEWALONLY = 5
ENUM_CESSETUPPROP_ALLOW_KEYBASED_RENEWAL = 6
def _define_ICertificateEnrollmentServerSetup_head():
    class ICertificateEnrollmentServerSetup(win32more.System.Com.IDispatch_head):
        Guid = Guid('70027fdb-9dd9-4921-8944-b35cb31bd2ec')
    return ICertificateEnrollmentServerSetup
def _define_ICertificateEnrollmentServerSetup():
    ICertificateEnrollmentServerSetup = win32more.Security.Cryptography.ICertificateEnrollmentServerSetup_head
    ICertificateEnrollmentServerSetup.get_ErrorString = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BSTR), use_last_error=False)(7, 'get_ErrorString', ((1, 'pVal'),)))
    ICertificateEnrollmentServerSetup.InitializeInstallDefaults = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(8, 'InitializeInstallDefaults', ()))
    ICertificateEnrollmentServerSetup.GetProperty = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Security.Cryptography.CESSetupProperty,POINTER(win32more.System.Com.VARIANT_head), use_last_error=False)(9, 'GetProperty', ((1, 'propertyId'),(1, 'pPropertyValue'),)))
    ICertificateEnrollmentServerSetup.SetProperty = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Security.Cryptography.CESSetupProperty,POINTER(win32more.System.Com.VARIANT_head), use_last_error=False)(10, 'SetProperty', ((1, 'propertyId'),(1, 'pPropertyValue'),)))
    ICertificateEnrollmentServerSetup.SetApplicationPoolCredentials = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,win32more.Foundation.BSTR, use_last_error=False)(11, 'SetApplicationPoolCredentials', ((1, 'bstrUsername'),(1, 'bstrPassword'),)))
    ICertificateEnrollmentServerSetup.Install = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(12, 'Install', ()))
    ICertificateEnrollmentServerSetup.UnInstall = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.VARIANT_head),POINTER(win32more.System.Com.VARIANT_head), use_last_error=False)(13, 'UnInstall', ((1, 'pCAConfig'),(1, 'pAuthentication'),)))
    return ICertificateEnrollmentServerSetup
CEPSetupProperty = Int32
ENUM_CEPSETUPPROP_AUTHENTICATION = 0
ENUM_CEPSETUPPROP_SSLCERTHASH = 1
ENUM_CEPSETUPPROP_URL = 2
ENUM_CEPSETUPPROP_KEYBASED_RENEWAL = 3
def _define_ICertificateEnrollmentPolicyServerSetup_head():
    class ICertificateEnrollmentPolicyServerSetup(win32more.System.Com.IDispatch_head):
        Guid = Guid('859252cc-238c-4a88-b8fd-a37e7d04e68b')
    return ICertificateEnrollmentPolicyServerSetup
def _define_ICertificateEnrollmentPolicyServerSetup():
    ICertificateEnrollmentPolicyServerSetup = win32more.Security.Cryptography.ICertificateEnrollmentPolicyServerSetup_head
    ICertificateEnrollmentPolicyServerSetup.get_ErrorString = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.BSTR), use_last_error=False)(7, 'get_ErrorString', ((1, 'pVal'),)))
    ICertificateEnrollmentPolicyServerSetup.InitializeInstallDefaults = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(8, 'InitializeInstallDefaults', ()))
    ICertificateEnrollmentPolicyServerSetup.GetProperty = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Security.Cryptography.CEPSetupProperty,POINTER(win32more.System.Com.VARIANT_head), use_last_error=False)(9, 'GetProperty', ((1, 'propertyId'),(1, 'pPropertyValue'),)))
    ICertificateEnrollmentPolicyServerSetup.SetProperty = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Security.Cryptography.CEPSetupProperty,POINTER(win32more.System.Com.VARIANT_head), use_last_error=False)(10, 'SetProperty', ((1, 'propertyId'),(1, 'pPropertyValue'),)))
    ICertificateEnrollmentPolicyServerSetup.Install = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(11, 'Install', ()))
    ICertificateEnrollmentPolicyServerSetup.UnInstall = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.VARIANT_head), use_last_error=False)(12, 'UnInstall', ((1, 'pAuthKeyBasedRenewal'),)))
    return ICertificateEnrollmentPolicyServerSetup
def _define_CryptAcquireContextA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(UIntPtr),win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,UInt32, use_last_error=True)(("CryptAcquireContextA", windll["ADVAPI32"]), ((1, 'phProv'),(1, 'szContainer'),(1, 'szProvider'),(1, 'dwProvType'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptAcquireContextW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(UIntPtr),win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,UInt32, use_last_error=True)(("CryptAcquireContextW", windll["ADVAPI32"]), ((1, 'phProv'),(1, 'szContainer'),(1, 'szProvider'),(1, 'dwProvType'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptAcquireContext():
    return win32more.Security.Cryptography.CryptAcquireContextW
def _define_CryptReleaseContext():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32, use_last_error=True)(("CryptReleaseContext", windll["ADVAPI32"]), ((1, 'hProv'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptGenKey():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,win32more.Security.Cryptography.CRYPT_KEY_FLAGS,POINTER(UIntPtr), use_last_error=True)(("CryptGenKey", windll["ADVAPI32"]), ((1, 'hProv'),(1, 'Algid'),(1, 'dwFlags'),(1, 'phKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptDeriveKey():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,UIntPtr,UInt32,POINTER(UIntPtr), use_last_error=True)(("CryptDeriveKey", windll["ADVAPI32"]), ((1, 'hProv'),(1, 'Algid'),(1, 'hBaseData'),(1, 'dwFlags'),(1, 'phKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptDestroyKey():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr, use_last_error=True)(("CryptDestroyKey", windll["ADVAPI32"]), ((1, 'hKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptSetKeyParam():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,win32more.Security.Cryptography.CRYPT_KEY_PARAM_ID,c_char_p_no,UInt32, use_last_error=True)(("CryptSetKeyParam", windll["ADVAPI32"]), ((1, 'hKey'),(1, 'dwParam'),(1, 'pbData'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptGetKeyParam():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,win32more.Security.Cryptography.CRYPT_KEY_PARAM_ID,c_char_p_no,POINTER(UInt32),UInt32, use_last_error=True)(("CryptGetKeyParam", windll["ADVAPI32"]), ((1, 'hKey'),(1, 'dwParam'),(1, 'pbData'),(1, 'pdwDataLen'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptSetHashParam():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,win32more.Security.Cryptography.CRYPT_SET_HASH_PARAM,c_char_p_no,UInt32, use_last_error=True)(("CryptSetHashParam", windll["ADVAPI32"]), ((1, 'hHash'),(1, 'dwParam'),(1, 'pbData'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptGetHashParam():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,c_char_p_no,POINTER(UInt32),UInt32, use_last_error=True)(("CryptGetHashParam", windll["ADVAPI32"]), ((1, 'hHash'),(1, 'dwParam'),(1, 'pbData'),(1, 'pdwDataLen'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptSetProvParam():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,win32more.Security.Cryptography.CRYPT_SET_PROV_PARAM_ID,c_char_p_no,UInt32, use_last_error=True)(("CryptSetProvParam", windll["ADVAPI32"]), ((1, 'hProv'),(1, 'dwParam'),(1, 'pbData'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptGetProvParam():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,c_char_p_no,POINTER(UInt32),UInt32, use_last_error=True)(("CryptGetProvParam", windll["ADVAPI32"]), ((1, 'hProv'),(1, 'dwParam'),(1, 'pbData'),(1, 'pdwDataLen'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptGenRandom():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,c_char_p_no, use_last_error=True)(("CryptGenRandom", windll["ADVAPI32"]), ((1, 'hProv'),(1, 'dwLen'),(1, 'pbBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptGetUserKey():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,POINTER(UIntPtr), use_last_error=True)(("CryptGetUserKey", windll["ADVAPI32"]), ((1, 'hProv'),(1, 'dwKeySpec'),(1, 'phUserKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptExportKey():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UIntPtr,UInt32,win32more.Security.Cryptography.CRYPT_KEY_FLAGS,c_char_p_no,POINTER(UInt32), use_last_error=True)(("CryptExportKey", windll["ADVAPI32"]), ((1, 'hKey'),(1, 'hExpKey'),(1, 'dwBlobType'),(1, 'dwFlags'),(1, 'pbData'),(1, 'pdwDataLen'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptImportKey():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,c_char_p_no,UInt32,UIntPtr,win32more.Security.Cryptography.CRYPT_KEY_FLAGS,POINTER(UIntPtr), use_last_error=True)(("CryptImportKey", windll["ADVAPI32"]), ((1, 'hProv'),(1, 'pbData'),(1, 'dwDataLen'),(1, 'hPubKey'),(1, 'dwFlags'),(1, 'phKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptEncrypt():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UIntPtr,win32more.Foundation.BOOL,UInt32,c_char_p_no,POINTER(UInt32),UInt32, use_last_error=True)(("CryptEncrypt", windll["ADVAPI32"]), ((1, 'hKey'),(1, 'hHash'),(1, 'Final'),(1, 'dwFlags'),(1, 'pbData'),(1, 'pdwDataLen'),(1, 'dwBufLen'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptDecrypt():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UIntPtr,win32more.Foundation.BOOL,UInt32,c_char_p_no,POINTER(UInt32), use_last_error=True)(("CryptDecrypt", windll["ADVAPI32"]), ((1, 'hKey'),(1, 'hHash'),(1, 'Final'),(1, 'dwFlags'),(1, 'pbData'),(1, 'pdwDataLen'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptCreateHash():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,UIntPtr,UInt32,POINTER(UIntPtr), use_last_error=True)(("CryptCreateHash", windll["ADVAPI32"]), ((1, 'hProv'),(1, 'Algid'),(1, 'hKey'),(1, 'dwFlags'),(1, 'phHash'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptHashData():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,c_char_p_no,UInt32,UInt32, use_last_error=True)(("CryptHashData", windll["ADVAPI32"]), ((1, 'hHash'),(1, 'pbData'),(1, 'dwDataLen'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptHashSessionKey():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UIntPtr,UInt32, use_last_error=True)(("CryptHashSessionKey", windll["ADVAPI32"]), ((1, 'hHash'),(1, 'hKey'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptDestroyHash():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr, use_last_error=True)(("CryptDestroyHash", windll["ADVAPI32"]), ((1, 'hHash'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptSignHashA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,win32more.Foundation.PSTR,UInt32,c_char_p_no,POINTER(UInt32), use_last_error=True)(("CryptSignHashA", windll["ADVAPI32"]), ((1, 'hHash'),(1, 'dwKeySpec'),(1, 'szDescription'),(1, 'dwFlags'),(1, 'pbSignature'),(1, 'pdwSigLen'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptSignHashW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,win32more.Foundation.PWSTR,UInt32,c_char_p_no,POINTER(UInt32), use_last_error=True)(("CryptSignHashW", windll["ADVAPI32"]), ((1, 'hHash'),(1, 'dwKeySpec'),(1, 'szDescription'),(1, 'dwFlags'),(1, 'pbSignature'),(1, 'pdwSigLen'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptSignHash():
    return win32more.Security.Cryptography.CryptSignHashW
def _define_CryptVerifySignatureA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,c_char_p_no,UInt32,UIntPtr,win32more.Foundation.PSTR,UInt32, use_last_error=True)(("CryptVerifySignatureA", windll["ADVAPI32"]), ((1, 'hHash'),(1, 'pbSignature'),(1, 'dwSigLen'),(1, 'hPubKey'),(1, 'szDescription'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptVerifySignatureW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,c_char_p_no,UInt32,UIntPtr,win32more.Foundation.PWSTR,UInt32, use_last_error=True)(("CryptVerifySignatureW", windll["ADVAPI32"]), ((1, 'hHash'),(1, 'pbSignature'),(1, 'dwSigLen'),(1, 'hPubKey'),(1, 'szDescription'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptVerifySignature():
    return win32more.Security.Cryptography.CryptVerifySignatureW
def _define_CryptSetProviderA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,UInt32, use_last_error=True)(("CryptSetProviderA", windll["ADVAPI32"]), ((1, 'pszProvName'),(1, 'dwProvType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptSetProviderW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,UInt32, use_last_error=True)(("CryptSetProviderW", windll["ADVAPI32"]), ((1, 'pszProvName'),(1, 'dwProvType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptSetProvider():
    return win32more.Security.Cryptography.CryptSetProviderW
def _define_CryptSetProviderExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,UInt32,POINTER(UInt32),UInt32, use_last_error=True)(("CryptSetProviderExA", windll["ADVAPI32"]), ((1, 'pszProvName'),(1, 'dwProvType'),(1, 'pdwReserved'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptSetProviderExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32),UInt32, use_last_error=True)(("CryptSetProviderExW", windll["ADVAPI32"]), ((1, 'pszProvName'),(1, 'dwProvType'),(1, 'pdwReserved'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptSetProviderEx():
    return win32more.Security.Cryptography.CryptSetProviderExW
def _define_CryptGetDefaultProviderA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(UInt32),UInt32,win32more.Foundation.PSTR,POINTER(UInt32), use_last_error=True)(("CryptGetDefaultProviderA", windll["ADVAPI32"]), ((1, 'dwProvType'),(1, 'pdwReserved'),(1, 'dwFlags'),(1, 'pszProvName'),(1, 'pcbProvName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptGetDefaultProviderW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(UInt32),UInt32,win32more.Foundation.PWSTR,POINTER(UInt32), use_last_error=True)(("CryptGetDefaultProviderW", windll["ADVAPI32"]), ((1, 'dwProvType'),(1, 'pdwReserved'),(1, 'dwFlags'),(1, 'pszProvName'),(1, 'pcbProvName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptGetDefaultProvider():
    return win32more.Security.Cryptography.CryptGetDefaultProviderW
def _define_CryptEnumProviderTypesA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(UInt32),UInt32,POINTER(UInt32),win32more.Foundation.PSTR,POINTER(UInt32), use_last_error=True)(("CryptEnumProviderTypesA", windll["ADVAPI32"]), ((1, 'dwIndex'),(1, 'pdwReserved'),(1, 'dwFlags'),(1, 'pdwProvType'),(1, 'szTypeName'),(1, 'pcbTypeName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptEnumProviderTypesW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(UInt32),UInt32,POINTER(UInt32),win32more.Foundation.PWSTR,POINTER(UInt32), use_last_error=True)(("CryptEnumProviderTypesW", windll["ADVAPI32"]), ((1, 'dwIndex'),(1, 'pdwReserved'),(1, 'dwFlags'),(1, 'pdwProvType'),(1, 'szTypeName'),(1, 'pcbTypeName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptEnumProviderTypes():
    return win32more.Security.Cryptography.CryptEnumProviderTypesW
def _define_CryptEnumProvidersA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(UInt32),UInt32,POINTER(UInt32),win32more.Foundation.PSTR,POINTER(UInt32), use_last_error=True)(("CryptEnumProvidersA", windll["ADVAPI32"]), ((1, 'dwIndex'),(1, 'pdwReserved'),(1, 'dwFlags'),(1, 'pdwProvType'),(1, 'szProvName'),(1, 'pcbProvName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptEnumProvidersW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(UInt32),UInt32,POINTER(UInt32),win32more.Foundation.PWSTR,POINTER(UInt32), use_last_error=True)(("CryptEnumProvidersW", windll["ADVAPI32"]), ((1, 'dwIndex'),(1, 'pdwReserved'),(1, 'dwFlags'),(1, 'pdwProvType'),(1, 'szProvName'),(1, 'pcbProvName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptEnumProviders():
    return win32more.Security.Cryptography.CryptEnumProvidersW
def _define_CryptContextAddRef():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,POINTER(UInt32),UInt32, use_last_error=True)(("CryptContextAddRef", windll["ADVAPI32"]), ((1, 'hProv'),(1, 'pdwReserved'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptDuplicateKey():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,POINTER(UInt32),UInt32,POINTER(UIntPtr), use_last_error=True)(("CryptDuplicateKey", windll["ADVAPI32"]), ((1, 'hKey'),(1, 'pdwReserved'),(1, 'dwFlags'),(1, 'phKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptDuplicateHash():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,POINTER(UInt32),UInt32,POINTER(UIntPtr), use_last_error=True)(("CryptDuplicateHash", windll["ADVAPI32"]), ((1, 'hHash'),(1, 'pdwReserved'),(1, 'dwFlags'),(1, 'phHash'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptOpenAlgorithmProvider():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,POINTER(win32more.Security.Cryptography.BCRYPT_ALG_HANDLE),win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Security.Cryptography.BCRYPT_OPEN_ALGORITHM_PROVIDER_FLAGS, use_last_error=False)(("BCryptOpenAlgorithmProvider", windll["bcrypt"]), ((1, 'phAlgorithm'),(1, 'pszAlgId'),(1, 'pszImplementation'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptEnumAlgorithms():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_OPERATION,POINTER(UInt32),POINTER(POINTER(win32more.Security.Cryptography.BCRYPT_ALGORITHM_IDENTIFIER_head)),UInt32, use_last_error=False)(("BCryptEnumAlgorithms", windll["bcrypt"]), ((1, 'dwAlgOperations'),(1, 'pAlgCount'),(1, 'ppAlgList'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptEnumProviders():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Foundation.PWSTR,POINTER(UInt32),POINTER(POINTER(win32more.Security.Cryptography.BCRYPT_PROVIDER_NAME_head)),UInt32, use_last_error=False)(("BCryptEnumProviders", windll["bcrypt"]), ((1, 'pszAlgId'),(1, 'pImplCount'),(1, 'ppImplList'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptGetProperty():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,c_void_p,win32more.Foundation.PWSTR,c_char_p_no,UInt32,POINTER(UInt32),UInt32, use_last_error=False)(("BCryptGetProperty", windll["bcrypt"]), ((1, 'hObject'),(1, 'pszProperty'),(1, 'pbOutput'),(1, 'cbOutput'),(1, 'pcbResult'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptSetProperty():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,c_void_p,win32more.Foundation.PWSTR,c_char_p_no,UInt32,UInt32, use_last_error=False)(("BCryptSetProperty", windll["bcrypt"]), ((1, 'hObject'),(1, 'pszProperty'),(1, 'pbInput'),(1, 'cbInput'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptCloseAlgorithmProvider():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_ALG_HANDLE,UInt32, use_last_error=False)(("BCryptCloseAlgorithmProvider", windll["bcrypt"]), ((1, 'hAlgorithm'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptFreeBuffer():
    try:
        return WINFUNCTYPE(Void,c_void_p, use_last_error=False)(("BCryptFreeBuffer", windll["bcrypt"]), ((1, 'pvBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptGenerateSymmetricKey():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_ALG_HANDLE,POINTER(win32more.Security.Cryptography.BCRYPT_KEY_HANDLE),c_char_p_no,UInt32,c_char_p_no,UInt32,UInt32, use_last_error=False)(("BCryptGenerateSymmetricKey", windll["bcrypt"]), ((1, 'hAlgorithm'),(1, 'phKey'),(1, 'pbKeyObject'),(1, 'cbKeyObject'),(1, 'pbSecret'),(1, 'cbSecret'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptGenerateKeyPair():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_ALG_HANDLE,POINTER(win32more.Security.Cryptography.BCRYPT_KEY_HANDLE),UInt32,UInt32, use_last_error=False)(("BCryptGenerateKeyPair", windll["bcrypt"]), ((1, 'hAlgorithm'),(1, 'phKey'),(1, 'dwLength'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptEncrypt():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_KEY_HANDLE,c_char_p_no,UInt32,c_void_p,c_char_p_no,UInt32,c_char_p_no,UInt32,POINTER(UInt32),win32more.Security.Cryptography.NCRYPT_FLAGS, use_last_error=False)(("BCryptEncrypt", windll["bcrypt"]), ((1, 'hKey'),(1, 'pbInput'),(1, 'cbInput'),(1, 'pPaddingInfo'),(1, 'pbIV'),(1, 'cbIV'),(1, 'pbOutput'),(1, 'cbOutput'),(1, 'pcbResult'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptDecrypt():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_KEY_HANDLE,c_char_p_no,UInt32,c_void_p,c_char_p_no,UInt32,c_char_p_no,UInt32,POINTER(UInt32),win32more.Security.Cryptography.NCRYPT_FLAGS, use_last_error=False)(("BCryptDecrypt", windll["bcrypt"]), ((1, 'hKey'),(1, 'pbInput'),(1, 'cbInput'),(1, 'pPaddingInfo'),(1, 'pbIV'),(1, 'cbIV'),(1, 'pbOutput'),(1, 'cbOutput'),(1, 'pcbResult'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptExportKey():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_KEY_HANDLE,win32more.Security.Cryptography.BCRYPT_KEY_HANDLE,win32more.Foundation.PWSTR,c_char_p_no,UInt32,POINTER(UInt32),UInt32, use_last_error=False)(("BCryptExportKey", windll["bcrypt"]), ((1, 'hKey'),(1, 'hExportKey'),(1, 'pszBlobType'),(1, 'pbOutput'),(1, 'cbOutput'),(1, 'pcbResult'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptImportKey():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_ALG_HANDLE,win32more.Security.Cryptography.BCRYPT_KEY_HANDLE,win32more.Foundation.PWSTR,POINTER(win32more.Security.Cryptography.BCRYPT_KEY_HANDLE),c_char_p_no,UInt32,c_char_p_no,UInt32,UInt32, use_last_error=False)(("BCryptImportKey", windll["bcrypt"]), ((1, 'hAlgorithm'),(1, 'hImportKey'),(1, 'pszBlobType'),(1, 'phKey'),(1, 'pbKeyObject'),(1, 'cbKeyObject'),(1, 'pbInput'),(1, 'cbInput'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptImportKeyPair():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_ALG_HANDLE,win32more.Security.Cryptography.BCRYPT_KEY_HANDLE,win32more.Foundation.PWSTR,POINTER(win32more.Security.Cryptography.BCRYPT_KEY_HANDLE),c_char_p_no,UInt32,UInt32, use_last_error=False)(("BCryptImportKeyPair", windll["bcrypt"]), ((1, 'hAlgorithm'),(1, 'hImportKey'),(1, 'pszBlobType'),(1, 'phKey'),(1, 'pbInput'),(1, 'cbInput'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptDuplicateKey():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_KEY_HANDLE,POINTER(win32more.Security.Cryptography.BCRYPT_KEY_HANDLE),c_char_p_no,UInt32,UInt32, use_last_error=False)(("BCryptDuplicateKey", windll["bcrypt"]), ((1, 'hKey'),(1, 'phNewKey'),(1, 'pbKeyObject'),(1, 'cbKeyObject'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptFinalizeKeyPair():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_KEY_HANDLE,UInt32, use_last_error=False)(("BCryptFinalizeKeyPair", windll["bcrypt"]), ((1, 'hKey'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptDestroyKey():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_KEY_HANDLE, use_last_error=False)(("BCryptDestroyKey", windll["bcrypt"]), ((1, 'hKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptDestroySecret():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,c_void_p, use_last_error=False)(("BCryptDestroySecret", windll["bcrypt"]), ((1, 'hSecret'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptSignHash():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_KEY_HANDLE,c_void_p,c_char_p_no,UInt32,c_char_p_no,UInt32,POINTER(UInt32),win32more.Security.Cryptography.NCRYPT_FLAGS, use_last_error=False)(("BCryptSignHash", windll["bcrypt"]), ((1, 'hKey'),(1, 'pPaddingInfo'),(1, 'pbInput'),(1, 'cbInput'),(1, 'pbOutput'),(1, 'cbOutput'),(1, 'pcbResult'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptVerifySignature():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_KEY_HANDLE,c_void_p,c_char_p_no,UInt32,c_char_p_no,UInt32,win32more.Security.Cryptography.NCRYPT_FLAGS, use_last_error=False)(("BCryptVerifySignature", windll["bcrypt"]), ((1, 'hKey'),(1, 'pPaddingInfo'),(1, 'pbHash'),(1, 'cbHash'),(1, 'pbSignature'),(1, 'cbSignature'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptSecretAgreement():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_KEY_HANDLE,win32more.Security.Cryptography.BCRYPT_KEY_HANDLE,POINTER(c_void_p),UInt32, use_last_error=False)(("BCryptSecretAgreement", windll["bcrypt"]), ((1, 'hPrivKey'),(1, 'hPubKey'),(1, 'phAgreedSecret'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptDeriveKey():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,c_void_p,win32more.Foundation.PWSTR,POINTER(win32more.Security.Cryptography.BCryptBufferDesc_head),c_char_p_no,UInt32,POINTER(UInt32),UInt32, use_last_error=False)(("BCryptDeriveKey", windll["bcrypt"]), ((1, 'hSharedSecret'),(1, 'pwszKDF'),(1, 'pParameterList'),(1, 'pbDerivedKey'),(1, 'cbDerivedKey'),(1, 'pcbResult'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptKeyDerivation():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_KEY_HANDLE,POINTER(win32more.Security.Cryptography.BCryptBufferDesc_head),c_char_p_no,UInt32,POINTER(UInt32),UInt32, use_last_error=False)(("BCryptKeyDerivation", windll["bcrypt"]), ((1, 'hKey'),(1, 'pParameterList'),(1, 'pbDerivedKey'),(1, 'cbDerivedKey'),(1, 'pcbResult'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptCreateHash():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_ALG_HANDLE,POINTER(c_void_p),c_char_p_no,UInt32,c_char_p_no,UInt32,UInt32, use_last_error=False)(("BCryptCreateHash", windll["bcrypt"]), ((1, 'hAlgorithm'),(1, 'phHash'),(1, 'pbHashObject'),(1, 'cbHashObject'),(1, 'pbSecret'),(1, 'cbSecret'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptHashData():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,c_void_p,c_char_p_no,UInt32,UInt32, use_last_error=False)(("BCryptHashData", windll["bcrypt"]), ((1, 'hHash'),(1, 'pbInput'),(1, 'cbInput'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptFinishHash():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,c_void_p,c_char_p_no,UInt32,UInt32, use_last_error=False)(("BCryptFinishHash", windll["bcrypt"]), ((1, 'hHash'),(1, 'pbOutput'),(1, 'cbOutput'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptCreateMultiHash():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_ALG_HANDLE,POINTER(c_void_p),UInt32,c_char_p_no,UInt32,c_char_p_no,UInt32,UInt32, use_last_error=False)(("BCryptCreateMultiHash", windll["bcrypt"]), ((1, 'hAlgorithm'),(1, 'phHash'),(1, 'nHashes'),(1, 'pbHashObject'),(1, 'cbHashObject'),(1, 'pbSecret'),(1, 'cbSecret'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptProcessMultiOperations():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,c_void_p,win32more.Security.Cryptography.BCRYPT_MULTI_OPERATION_TYPE,c_void_p,UInt32,UInt32, use_last_error=False)(("BCryptProcessMultiOperations", windll["bcrypt"]), ((1, 'hObject'),(1, 'operationType'),(1, 'pOperations'),(1, 'cbOperations'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptDuplicateHash():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,c_void_p,POINTER(c_void_p),c_char_p_no,UInt32,UInt32, use_last_error=False)(("BCryptDuplicateHash", windll["bcrypt"]), ((1, 'hHash'),(1, 'phNewHash'),(1, 'pbHashObject'),(1, 'cbHashObject'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptDestroyHash():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,c_void_p, use_last_error=False)(("BCryptDestroyHash", windll["bcrypt"]), ((1, 'hHash'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptHash():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_ALG_HANDLE,c_char_p_no,UInt32,c_char_p_no,UInt32,c_char_p_no,UInt32, use_last_error=False)(("BCryptHash", windll["bcrypt"]), ((1, 'hAlgorithm'),(1, 'pbSecret'),(1, 'cbSecret'),(1, 'pbInput'),(1, 'cbInput'),(1, 'pbOutput'),(1, 'cbOutput'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptGenRandom():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_ALG_HANDLE,c_char_p_no,UInt32,UInt32, use_last_error=False)(("BCryptGenRandom", windll["bcrypt"]), ((1, 'hAlgorithm'),(1, 'pbBuffer'),(1, 'cbBuffer'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptDeriveKeyCapi():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,c_void_p,win32more.Security.Cryptography.BCRYPT_ALG_HANDLE,c_char_p_no,UInt32,UInt32, use_last_error=False)(("BCryptDeriveKeyCapi", windll["bcrypt"]), ((1, 'hHash'),(1, 'hTargetAlg'),(1, 'pbDerivedKey'),(1, 'cbDerivedKey'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptDeriveKeyPBKDF2():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_ALG_HANDLE,c_char_p_no,UInt32,c_char_p_no,UInt32,UInt64,c_char_p_no,UInt32,UInt32, use_last_error=False)(("BCryptDeriveKeyPBKDF2", windll["bcrypt"]), ((1, 'hPrf'),(1, 'pbPassword'),(1, 'cbPassword'),(1, 'pbSalt'),(1, 'cbSalt'),(1, 'cIterations'),(1, 'pbDerivedKey'),(1, 'cbDerivedKey'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptQueryProviderRegistration():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Foundation.PWSTR,win32more.Security.Cryptography.BCRYPT_QUERY_PROVIDER_MODE,win32more.Security.Cryptography.BCRYPT_INTERFACE,POINTER(UInt32),POINTER(POINTER(win32more.Security.Cryptography.CRYPT_PROVIDER_REG_head)), use_last_error=False)(("BCryptQueryProviderRegistration", windll["bcrypt"]), ((1, 'pszProvider'),(1, 'dwMode'),(1, 'dwInterface'),(1, 'pcbBuffer'),(1, 'ppBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptEnumRegisteredProviders():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,POINTER(UInt32),POINTER(POINTER(win32more.Security.Cryptography.CRYPT_PROVIDERS_head)), use_last_error=False)(("BCryptEnumRegisteredProviders", windll["bcrypt"]), ((1, 'pcbBuffer'),(1, 'ppBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptCreateContext():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_TABLE,win32more.Foundation.PWSTR,POINTER(win32more.Security.Cryptography.CRYPT_CONTEXT_CONFIG_head), use_last_error=False)(("BCryptCreateContext", windll["bcrypt"]), ((1, 'dwTable'),(1, 'pszContext'),(1, 'pConfig'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptDeleteContext():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_TABLE,win32more.Foundation.PWSTR, use_last_error=False)(("BCryptDeleteContext", windll["bcrypt"]), ((1, 'dwTable'),(1, 'pszContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptEnumContexts():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_TABLE,POINTER(UInt32),POINTER(POINTER(win32more.Security.Cryptography.CRYPT_CONTEXTS_head)), use_last_error=False)(("BCryptEnumContexts", windll["bcrypt"]), ((1, 'dwTable'),(1, 'pcbBuffer'),(1, 'ppBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptConfigureContext():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_TABLE,win32more.Foundation.PWSTR,POINTER(win32more.Security.Cryptography.CRYPT_CONTEXT_CONFIG_head), use_last_error=False)(("BCryptConfigureContext", windll["bcrypt"]), ((1, 'dwTable'),(1, 'pszContext'),(1, 'pConfig'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptQueryContextConfiguration():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_TABLE,win32more.Foundation.PWSTR,POINTER(UInt32),POINTER(POINTER(win32more.Security.Cryptography.CRYPT_CONTEXT_CONFIG_head)), use_last_error=False)(("BCryptQueryContextConfiguration", windll["bcrypt"]), ((1, 'dwTable'),(1, 'pszContext'),(1, 'pcbBuffer'),(1, 'ppBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptAddContextFunction():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_TABLE,win32more.Foundation.PWSTR,win32more.Security.Cryptography.BCRYPT_INTERFACE,win32more.Foundation.PWSTR,UInt32, use_last_error=False)(("BCryptAddContextFunction", windll["bcrypt"]), ((1, 'dwTable'),(1, 'pszContext'),(1, 'dwInterface'),(1, 'pszFunction'),(1, 'dwPosition'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptRemoveContextFunction():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_TABLE,win32more.Foundation.PWSTR,win32more.Security.Cryptography.BCRYPT_INTERFACE,win32more.Foundation.PWSTR, use_last_error=False)(("BCryptRemoveContextFunction", windll["bcrypt"]), ((1, 'dwTable'),(1, 'pszContext'),(1, 'dwInterface'),(1, 'pszFunction'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptEnumContextFunctions():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_TABLE,win32more.Foundation.PWSTR,win32more.Security.Cryptography.BCRYPT_INTERFACE,POINTER(UInt32),POINTER(POINTER(win32more.Security.Cryptography.CRYPT_CONTEXT_FUNCTIONS_head)), use_last_error=False)(("BCryptEnumContextFunctions", windll["bcrypt"]), ((1, 'dwTable'),(1, 'pszContext'),(1, 'dwInterface'),(1, 'pcbBuffer'),(1, 'ppBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptConfigureContextFunction():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_TABLE,win32more.Foundation.PWSTR,win32more.Security.Cryptography.BCRYPT_INTERFACE,win32more.Foundation.PWSTR,POINTER(win32more.Security.Cryptography.CRYPT_CONTEXT_FUNCTION_CONFIG_head), use_last_error=False)(("BCryptConfigureContextFunction", windll["bcrypt"]), ((1, 'dwTable'),(1, 'pszContext'),(1, 'dwInterface'),(1, 'pszFunction'),(1, 'pConfig'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptQueryContextFunctionConfiguration():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_TABLE,win32more.Foundation.PWSTR,win32more.Security.Cryptography.BCRYPT_INTERFACE,win32more.Foundation.PWSTR,POINTER(UInt32),POINTER(POINTER(win32more.Security.Cryptography.CRYPT_CONTEXT_FUNCTION_CONFIG_head)), use_last_error=False)(("BCryptQueryContextFunctionConfiguration", windll["bcrypt"]), ((1, 'dwTable'),(1, 'pszContext'),(1, 'dwInterface'),(1, 'pszFunction'),(1, 'pcbBuffer'),(1, 'ppBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptEnumContextFunctionProviders():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_TABLE,win32more.Foundation.PWSTR,win32more.Security.Cryptography.BCRYPT_INTERFACE,win32more.Foundation.PWSTR,POINTER(UInt32),POINTER(POINTER(win32more.Security.Cryptography.CRYPT_CONTEXT_FUNCTION_PROVIDERS_head)), use_last_error=False)(("BCryptEnumContextFunctionProviders", windll["bcrypt"]), ((1, 'dwTable'),(1, 'pszContext'),(1, 'dwInterface'),(1, 'pszFunction'),(1, 'pcbBuffer'),(1, 'ppBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptSetContextFunctionProperty():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_TABLE,win32more.Foundation.PWSTR,win32more.Security.Cryptography.BCRYPT_INTERFACE,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,c_char_p_no, use_last_error=False)(("BCryptSetContextFunctionProperty", windll["bcrypt"]), ((1, 'dwTable'),(1, 'pszContext'),(1, 'dwInterface'),(1, 'pszFunction'),(1, 'pszProperty'),(1, 'cbValue'),(1, 'pbValue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptQueryContextFunctionProperty():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Security.Cryptography.BCRYPT_TABLE,win32more.Foundation.PWSTR,win32more.Security.Cryptography.BCRYPT_INTERFACE,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,POINTER(UInt32),POINTER(c_char_p_no), use_last_error=False)(("BCryptQueryContextFunctionProperty", windll["bcrypt"]), ((1, 'dwTable'),(1, 'pszContext'),(1, 'dwInterface'),(1, 'pszFunction'),(1, 'pszProperty'),(1, 'pcbValue'),(1, 'ppbValue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptRegisterConfigChangeNotify():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("BCryptRegisterConfigChangeNotify", windll["bcrypt"]), ((1, 'phEvent'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptUnregisterConfigChangeNotify():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Foundation.HANDLE, use_last_error=False)(("BCryptUnregisterConfigChangeNotify", windll["bcrypt"]), ((1, 'hEvent'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptResolveProviders():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,win32more.Foundation.PWSTR,UInt32,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Security.Cryptography.BCRYPT_QUERY_PROVIDER_MODE,win32more.Security.Cryptography.BCRYPT_RESOLVE_PROVIDERS_FLAGS,POINTER(UInt32),POINTER(POINTER(win32more.Security.Cryptography.CRYPT_PROVIDER_REFS_head)), use_last_error=False)(("BCryptResolveProviders", windll["bcrypt"]), ((1, 'pszContext'),(1, 'dwInterface'),(1, 'pszFunction'),(1, 'pszProvider'),(1, 'dwMode'),(1, 'dwFlags'),(1, 'pcbBuffer'),(1, 'ppBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BCryptGetFipsAlgorithmMode():
    try:
        return WINFUNCTYPE(win32more.Foundation.NTSTATUS,c_char_p_no, use_last_error=False)(("BCryptGetFipsAlgorithmMode", windll["bcrypt"]), ((1, 'pfEnabled'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptOpenStorageProvider():
    try:
        return WINFUNCTYPE(Int32,POINTER(UIntPtr),win32more.Foundation.PWSTR,UInt32, use_last_error=False)(("NCryptOpenStorageProvider", windll["ncrypt"]), ((1, 'phProvider'),(1, 'pszProviderName'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptEnumAlgorithms():
    try:
        return WINFUNCTYPE(Int32,UIntPtr,win32more.Security.Cryptography.NCRYPT_OPERATION,POINTER(UInt32),POINTER(POINTER(win32more.Security.Cryptography.NCryptAlgorithmName_head)),UInt32, use_last_error=False)(("NCryptEnumAlgorithms", windll["ncrypt"]), ((1, 'hProvider'),(1, 'dwAlgOperations'),(1, 'pdwAlgCount'),(1, 'ppAlgList'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptIsAlgSupported():
    try:
        return WINFUNCTYPE(Int32,UIntPtr,win32more.Foundation.PWSTR,UInt32, use_last_error=False)(("NCryptIsAlgSupported", windll["ncrypt"]), ((1, 'hProvider'),(1, 'pszAlgId'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptEnumKeys():
    try:
        return WINFUNCTYPE(Int32,UIntPtr,win32more.Foundation.PWSTR,POINTER(POINTER(win32more.Security.Cryptography.NCryptKeyName_head)),POINTER(c_void_p),win32more.Security.Cryptography.NCRYPT_FLAGS, use_last_error=False)(("NCryptEnumKeys", windll["ncrypt"]), ((1, 'hProvider'),(1, 'pszScope'),(1, 'ppKeyName'),(1, 'ppEnumState'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptEnumStorageProviders():
    try:
        return WINFUNCTYPE(Int32,POINTER(UInt32),POINTER(POINTER(win32more.Security.Cryptography.NCryptProviderName_head)),UInt32, use_last_error=False)(("NCryptEnumStorageProviders", windll["ncrypt"]), ((1, 'pdwProviderCount'),(1, 'ppProviderList'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptFreeBuffer():
    try:
        return WINFUNCTYPE(Int32,c_void_p, use_last_error=False)(("NCryptFreeBuffer", windll["ncrypt"]), ((1, 'pvInput'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptOpenKey():
    try:
        return WINFUNCTYPE(Int32,UIntPtr,POINTER(UIntPtr),win32more.Foundation.PWSTR,win32more.Security.Cryptography.CERT_KEY_SPEC,win32more.Security.Cryptography.NCRYPT_FLAGS, use_last_error=False)(("NCryptOpenKey", windll["ncrypt"]), ((1, 'hProvider'),(1, 'phKey'),(1, 'pszKeyName'),(1, 'dwLegacyKeySpec'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptCreatePersistedKey():
    try:
        return WINFUNCTYPE(Int32,UIntPtr,POINTER(UIntPtr),win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Security.Cryptography.CERT_KEY_SPEC,win32more.Security.Cryptography.NCRYPT_FLAGS, use_last_error=False)(("NCryptCreatePersistedKey", windll["ncrypt"]), ((1, 'hProvider'),(1, 'phKey'),(1, 'pszAlgId'),(1, 'pszKeyName'),(1, 'dwLegacyKeySpec'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptGetProperty():
    try:
        return WINFUNCTYPE(Int32,UIntPtr,win32more.Foundation.PWSTR,c_char_p_no,UInt32,POINTER(UInt32),win32more.Security.OBJECT_SECURITY_INFORMATION, use_last_error=False)(("NCryptGetProperty", windll["ncrypt"]), ((1, 'hObject'),(1, 'pszProperty'),(1, 'pbOutput'),(1, 'cbOutput'),(1, 'pcbResult'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptSetProperty():
    try:
        return WINFUNCTYPE(Int32,UIntPtr,win32more.Foundation.PWSTR,c_char_p_no,UInt32,win32more.Security.Cryptography.NCRYPT_FLAGS, use_last_error=False)(("NCryptSetProperty", windll["ncrypt"]), ((1, 'hObject'),(1, 'pszProperty'),(1, 'pbInput'),(1, 'cbInput'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptFinalizeKey():
    try:
        return WINFUNCTYPE(Int32,UIntPtr,win32more.Security.Cryptography.NCRYPT_FLAGS, use_last_error=False)(("NCryptFinalizeKey", windll["ncrypt"]), ((1, 'hKey'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptEncrypt():
    try:
        return WINFUNCTYPE(Int32,UIntPtr,c_char_p_no,UInt32,c_void_p,c_char_p_no,UInt32,POINTER(UInt32),win32more.Security.Cryptography.NCRYPT_FLAGS, use_last_error=False)(("NCryptEncrypt", windll["ncrypt"]), ((1, 'hKey'),(1, 'pbInput'),(1, 'cbInput'),(1, 'pPaddingInfo'),(1, 'pbOutput'),(1, 'cbOutput'),(1, 'pcbResult'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptDecrypt():
    try:
        return WINFUNCTYPE(Int32,UIntPtr,c_char_p_no,UInt32,c_void_p,c_char_p_no,UInt32,POINTER(UInt32),win32more.Security.Cryptography.NCRYPT_FLAGS, use_last_error=False)(("NCryptDecrypt", windll["ncrypt"]), ((1, 'hKey'),(1, 'pbInput'),(1, 'cbInput'),(1, 'pPaddingInfo'),(1, 'pbOutput'),(1, 'cbOutput'),(1, 'pcbResult'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptImportKey():
    try:
        return WINFUNCTYPE(Int32,UIntPtr,UIntPtr,win32more.Foundation.PWSTR,POINTER(win32more.Security.Cryptography.BCryptBufferDesc_head),POINTER(UIntPtr),c_char_p_no,UInt32,win32more.Security.Cryptography.NCRYPT_FLAGS, use_last_error=False)(("NCryptImportKey", windll["ncrypt"]), ((1, 'hProvider'),(1, 'hImportKey'),(1, 'pszBlobType'),(1, 'pParameterList'),(1, 'phKey'),(1, 'pbData'),(1, 'cbData'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptExportKey():
    try:
        return WINFUNCTYPE(Int32,UIntPtr,UIntPtr,win32more.Foundation.PWSTR,POINTER(win32more.Security.Cryptography.BCryptBufferDesc_head),c_char_p_no,UInt32,POINTER(UInt32),win32more.Security.Cryptography.NCRYPT_FLAGS, use_last_error=False)(("NCryptExportKey", windll["ncrypt"]), ((1, 'hKey'),(1, 'hExportKey'),(1, 'pszBlobType'),(1, 'pParameterList'),(1, 'pbOutput'),(1, 'cbOutput'),(1, 'pcbResult'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptSignHash():
    try:
        return WINFUNCTYPE(Int32,UIntPtr,c_void_p,c_char_p_no,UInt32,c_char_p_no,UInt32,POINTER(UInt32),win32more.Security.Cryptography.NCRYPT_FLAGS, use_last_error=False)(("NCryptSignHash", windll["ncrypt"]), ((1, 'hKey'),(1, 'pPaddingInfo'),(1, 'pbHashValue'),(1, 'cbHashValue'),(1, 'pbSignature'),(1, 'cbSignature'),(1, 'pcbResult'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptVerifySignature():
    try:
        return WINFUNCTYPE(Int32,UIntPtr,c_void_p,c_char_p_no,UInt32,c_char_p_no,UInt32,win32more.Security.Cryptography.NCRYPT_FLAGS, use_last_error=False)(("NCryptVerifySignature", windll["ncrypt"]), ((1, 'hKey'),(1, 'pPaddingInfo'),(1, 'pbHashValue'),(1, 'cbHashValue'),(1, 'pbSignature'),(1, 'cbSignature'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptDeleteKey():
    try:
        return WINFUNCTYPE(Int32,UIntPtr,UInt32, use_last_error=False)(("NCryptDeleteKey", windll["ncrypt"]), ((1, 'hKey'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptFreeObject():
    try:
        return WINFUNCTYPE(Int32,UIntPtr, use_last_error=False)(("NCryptFreeObject", windll["ncrypt"]), ((1, 'hObject'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptIsKeyHandle():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr, use_last_error=False)(("NCryptIsKeyHandle", windll["ncrypt"]), ((1, 'hKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptTranslateHandle():
    try:
        return WINFUNCTYPE(Int32,POINTER(UIntPtr),POINTER(UIntPtr),UIntPtr,UIntPtr,win32more.Security.Cryptography.CERT_KEY_SPEC,UInt32, use_last_error=False)(("NCryptTranslateHandle", windll["ncrypt"]), ((1, 'phProvider'),(1, 'phKey'),(1, 'hLegacyProv'),(1, 'hLegacyKey'),(1, 'dwLegacyKeySpec'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptNotifyChangeKey():
    try:
        return WINFUNCTYPE(Int32,UIntPtr,POINTER(win32more.Foundation.HANDLE),win32more.Security.Cryptography.NCRYPT_FLAGS, use_last_error=False)(("NCryptNotifyChangeKey", windll["ncrypt"]), ((1, 'hProvider'),(1, 'phEvent'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptSecretAgreement():
    try:
        return WINFUNCTYPE(Int32,UIntPtr,UIntPtr,POINTER(UIntPtr),win32more.Security.Cryptography.NCRYPT_FLAGS, use_last_error=False)(("NCryptSecretAgreement", windll["ncrypt"]), ((1, 'hPrivKey'),(1, 'hPubKey'),(1, 'phAgreedSecret'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptDeriveKey():
    try:
        return WINFUNCTYPE(Int32,UIntPtr,win32more.Foundation.PWSTR,POINTER(win32more.Security.Cryptography.BCryptBufferDesc_head),c_char_p_no,UInt32,POINTER(UInt32),UInt32, use_last_error=False)(("NCryptDeriveKey", windll["ncrypt"]), ((1, 'hSharedSecret'),(1, 'pwszKDF'),(1, 'pParameterList'),(1, 'pbDerivedKey'),(1, 'cbDerivedKey'),(1, 'pcbResult'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptKeyDerivation():
    try:
        return WINFUNCTYPE(Int32,UIntPtr,POINTER(win32more.Security.Cryptography.BCryptBufferDesc_head),c_char_p_no,UInt32,POINTER(UInt32),UInt32, use_last_error=False)(("NCryptKeyDerivation", windll["ncrypt"]), ((1, 'hKey'),(1, 'pParameterList'),(1, 'pbDerivedKey'),(1, 'cbDerivedKey'),(1, 'pcbResult'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptCreateClaim():
    try:
        return WINFUNCTYPE(Int32,UIntPtr,UIntPtr,UInt32,POINTER(win32more.Security.Cryptography.BCryptBufferDesc_head),c_char_p_no,UInt32,POINTER(UInt32),UInt32, use_last_error=False)(("NCryptCreateClaim", windll["ncrypt"]), ((1, 'hSubjectKey'),(1, 'hAuthorityKey'),(1, 'dwClaimType'),(1, 'pParameterList'),(1, 'pbClaimBlob'),(1, 'cbClaimBlob'),(1, 'pcbResult'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptVerifyClaim():
    try:
        return WINFUNCTYPE(Int32,UIntPtr,UIntPtr,UInt32,POINTER(win32more.Security.Cryptography.BCryptBufferDesc_head),c_char_p_no,UInt32,POINTER(win32more.Security.Cryptography.BCryptBufferDesc_head),UInt32, use_last_error=False)(("NCryptVerifyClaim", windll["ncrypt"]), ((1, 'hSubjectKey'),(1, 'hAuthorityKey'),(1, 'dwClaimType'),(1, 'pParameterList'),(1, 'pbClaimBlob'),(1, 'cbClaimBlob'),(1, 'pOutput'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptFormatObject():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,UInt32,UInt32,c_void_p,win32more.Foundation.PSTR,c_char_p_no,UInt32,c_void_p,POINTER(UInt32), use_last_error=True)(("CryptFormatObject", windll["CRYPT32"]), ((1, 'dwCertEncodingType'),(1, 'dwFormatType'),(1, 'dwFormatStrType'),(1, 'pFormatStruct'),(1, 'lpszStructType'),(1, 'pbEncoded'),(1, 'cbEncoded'),(1, 'pbFormat'),(1, 'pcbFormat'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptEncodeObjectEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Security.Cryptography.CERT_QUERY_ENCODING_TYPE,win32more.Foundation.PSTR,c_void_p,win32more.Security.Cryptography.CRYPT_ENCODE_OBJECT_FLAGS,POINTER(win32more.Security.Cryptography.CRYPT_ENCODE_PARA_head),c_void_p,POINTER(UInt32), use_last_error=True)(("CryptEncodeObjectEx", windll["CRYPT32"]), ((1, 'dwCertEncodingType'),(1, 'lpszStructType'),(1, 'pvStructInfo'),(1, 'dwFlags'),(1, 'pEncodePara'),(1, 'pvEncoded'),(1, 'pcbEncoded'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptEncodeObject():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PSTR,c_void_p,c_char_p_no,POINTER(UInt32), use_last_error=True)(("CryptEncodeObject", windll["CRYPT32"]), ((1, 'dwCertEncodingType'),(1, 'lpszStructType'),(1, 'pvStructInfo'),(1, 'pbEncoded'),(1, 'pcbEncoded'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptDecodeObjectEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PSTR,c_char_p_no,UInt32,UInt32,POINTER(win32more.Security.Cryptography.CRYPT_DECODE_PARA_head),c_void_p,POINTER(UInt32), use_last_error=True)(("CryptDecodeObjectEx", windll["CRYPT32"]), ((1, 'dwCertEncodingType'),(1, 'lpszStructType'),(1, 'pbEncoded'),(1, 'cbEncoded'),(1, 'dwFlags'),(1, 'pDecodePara'),(1, 'pvStructInfo'),(1, 'pcbStructInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptDecodeObject():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PSTR,c_char_p_no,UInt32,UInt32,c_void_p,POINTER(UInt32), use_last_error=True)(("CryptDecodeObject", windll["CRYPT32"]), ((1, 'dwCertEncodingType'),(1, 'lpszStructType'),(1, 'pbEncoded'),(1, 'cbEncoded'),(1, 'dwFlags'),(1, 'pvStructInfo'),(1, 'pcbStructInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptInstallOIDFunctionAddress():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HINSTANCE,UInt32,win32more.Foundation.PSTR,UInt32,POINTER(win32more.Security.Cryptography.CRYPT_OID_FUNC_ENTRY),UInt32, use_last_error=False)(("CryptInstallOIDFunctionAddress", windll["CRYPT32"]), ((1, 'hModule'),(1, 'dwEncodingType'),(1, 'pszFuncName'),(1, 'cFuncEntry'),(1, 'rgFuncEntry'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptInitOIDFunctionSet():
    try:
        return WINFUNCTYPE(c_void_p,win32more.Foundation.PSTR,UInt32, use_last_error=False)(("CryptInitOIDFunctionSet", windll["CRYPT32"]), ((1, 'pszFuncName'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptGetOIDFunctionAddress():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,win32more.Foundation.PSTR,UInt32,POINTER(c_void_p),POINTER(c_void_p), use_last_error=True)(("CryptGetOIDFunctionAddress", windll["CRYPT32"]), ((1, 'hFuncSet'),(1, 'dwEncodingType'),(1, 'pszOID'),(1, 'dwFlags'),(1, 'ppvFuncAddr'),(1, 'phFuncAddr'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptGetDefaultOIDDllList():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,POINTER(Char),POINTER(UInt32), use_last_error=True)(("CryptGetDefaultOIDDllList", windll["CRYPT32"]), ((1, 'hFuncSet'),(1, 'dwEncodingType'),(1, 'pwszDllList'),(1, 'pcchDllList'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptGetDefaultOIDFunctionAddress():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,win32more.Foundation.PWSTR,UInt32,POINTER(c_void_p),POINTER(c_void_p), use_last_error=False)(("CryptGetDefaultOIDFunctionAddress", windll["CRYPT32"]), ((1, 'hFuncSet'),(1, 'dwEncodingType'),(1, 'pwszDll'),(1, 'dwFlags'),(1, 'ppvFuncAddr'),(1, 'phFuncAddr'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptFreeOIDFunctionAddress():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32, use_last_error=False)(("CryptFreeOIDFunctionAddress", windll["CRYPT32"]), ((1, 'hFuncAddr'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptRegisterOIDFunction():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PWSTR,win32more.Foundation.PSTR, use_last_error=False)(("CryptRegisterOIDFunction", windll["CRYPT32"]), ((1, 'dwEncodingType'),(1, 'pszFuncName'),(1, 'pszOID'),(1, 'pwszDll'),(1, 'pszOverrideFuncName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptUnregisterOIDFunction():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PSTR,win32more.Foundation.PSTR, use_last_error=False)(("CryptUnregisterOIDFunction", windll["CRYPT32"]), ((1, 'dwEncodingType'),(1, 'pszFuncName'),(1, 'pszOID'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptRegisterDefaultOIDFunction():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PSTR,UInt32,win32more.Foundation.PWSTR, use_last_error=False)(("CryptRegisterDefaultOIDFunction", windll["CRYPT32"]), ((1, 'dwEncodingType'),(1, 'pszFuncName'),(1, 'dwIndex'),(1, 'pwszDll'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptUnregisterDefaultOIDFunction():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PSTR,win32more.Foundation.PWSTR, use_last_error=False)(("CryptUnregisterDefaultOIDFunction", windll["CRYPT32"]), ((1, 'dwEncodingType'),(1, 'pszFuncName'),(1, 'pwszDll'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptSetOIDFunctionValue():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PWSTR,win32more.System.Registry.REG_VALUE_TYPE,c_char_p_no,UInt32, use_last_error=False)(("CryptSetOIDFunctionValue", windll["CRYPT32"]), ((1, 'dwEncodingType'),(1, 'pszFuncName'),(1, 'pszOID'),(1, 'pwszValueName'),(1, 'dwValueType'),(1, 'pbValueData'),(1, 'cbValueData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptGetOIDFunctionValue():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PWSTR,POINTER(UInt32),c_char_p_no,POINTER(UInt32), use_last_error=True)(("CryptGetOIDFunctionValue", windll["CRYPT32"]), ((1, 'dwEncodingType'),(1, 'pszFuncName'),(1, 'pszOID'),(1, 'pwszValueName'),(1, 'pdwValueType'),(1, 'pbValueData'),(1, 'pcbValueData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptEnumOIDFunction():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,c_void_p,win32more.Security.Cryptography.PFN_CRYPT_ENUM_OID_FUNC, use_last_error=True)(("CryptEnumOIDFunction", windll["CRYPT32"]), ((1, 'dwEncodingType'),(1, 'pszFuncName'),(1, 'pszOID'),(1, 'dwFlags'),(1, 'pvArg'),(1, 'pfnEnumOIDFunc'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptFindOIDInfo():
    try:
        return WINFUNCTYPE(POINTER(win32more.Security.Cryptography.CRYPT_OID_INFO_head),UInt32,c_void_p,UInt32, use_last_error=False)(("CryptFindOIDInfo", windll["CRYPT32"]), ((1, 'dwKeyType'),(1, 'pvKey'),(1, 'dwGroupId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptRegisterOIDInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPT_OID_INFO_head),UInt32, use_last_error=False)(("CryptRegisterOIDInfo", windll["CRYPT32"]), ((1, 'pInfo'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptUnregisterOIDInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPT_OID_INFO_head), use_last_error=False)(("CryptUnregisterOIDInfo", windll["CRYPT32"]), ((1, 'pInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptEnumOIDInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,UInt32,c_void_p,win32more.Security.Cryptography.PFN_CRYPT_ENUM_OID_INFO, use_last_error=False)(("CryptEnumOIDInfo", windll["CRYPT32"]), ((1, 'dwGroupId'),(1, 'dwFlags'),(1, 'pvArg'),(1, 'pfnEnumOIDInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptFindLocalizedName():
    try:
        return WINFUNCTYPE(win32more.Foundation.PWSTR,win32more.Foundation.PWSTR, use_last_error=False)(("CryptFindLocalizedName", windll["CRYPT32"]), ((1, 'pwszCryptName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptMsgOpenToEncode():
    try:
        return WINFUNCTYPE(c_void_p,UInt32,UInt32,win32more.Security.Cryptography.CRYPT_MSG_TYPE,c_void_p,win32more.Foundation.PSTR,POINTER(win32more.Security.Cryptography.CMSG_STREAM_INFO_head), use_last_error=True)(("CryptMsgOpenToEncode", windll["CRYPT32"]), ((1, 'dwMsgEncodingType'),(1, 'dwFlags'),(1, 'dwMsgType'),(1, 'pvMsgEncodeInfo'),(1, 'pszInnerContentObjID'),(1, 'pStreamInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptMsgCalculateEncodedLength():
    try:
        return WINFUNCTYPE(UInt32,UInt32,UInt32,UInt32,c_void_p,win32more.Foundation.PSTR,UInt32, use_last_error=True)(("CryptMsgCalculateEncodedLength", windll["CRYPT32"]), ((1, 'dwMsgEncodingType'),(1, 'dwFlags'),(1, 'dwMsgType'),(1, 'pvMsgEncodeInfo'),(1, 'pszInnerContentObjID'),(1, 'cbData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptMsgOpenToDecode():
    try:
        return WINFUNCTYPE(c_void_p,UInt32,UInt32,UInt32,UIntPtr,POINTER(win32more.Security.Cryptography.CERT_INFO_head),POINTER(win32more.Security.Cryptography.CMSG_STREAM_INFO_head), use_last_error=True)(("CryptMsgOpenToDecode", windll["CRYPT32"]), ((1, 'dwMsgEncodingType'),(1, 'dwFlags'),(1, 'dwMsgType'),(1, 'hCryptProv'),(1, 'pRecipientInfo'),(1, 'pStreamInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptMsgDuplicate():
    try:
        return WINFUNCTYPE(c_void_p,c_void_p, use_last_error=False)(("CryptMsgDuplicate", windll["CRYPT32"]), ((1, 'hCryptMsg'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptMsgClose():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p, use_last_error=True)(("CryptMsgClose", windll["CRYPT32"]), ((1, 'hCryptMsg'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptMsgUpdate():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_char_p_no,UInt32,win32more.Foundation.BOOL, use_last_error=True)(("CryptMsgUpdate", windll["CRYPT32"]), ((1, 'hCryptMsg'),(1, 'pbData'),(1, 'cbData'),(1, 'fFinal'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptMsgGetParam():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,UInt32,c_void_p,POINTER(UInt32), use_last_error=True)(("CryptMsgGetParam", windll["CRYPT32"]), ((1, 'hCryptMsg'),(1, 'dwParamType'),(1, 'dwIndex'),(1, 'pvData'),(1, 'pcbData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptMsgControl():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,UInt32,c_void_p, use_last_error=True)(("CryptMsgControl", windll["CRYPT32"]), ((1, 'hCryptMsg'),(1, 'dwFlags'),(1, 'dwCtrlType'),(1, 'pvCtrlPara'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptMsgVerifyCountersignatureEncoded():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,c_char_p_no,UInt32,c_char_p_no,UInt32,POINTER(win32more.Security.Cryptography.CERT_INFO_head), use_last_error=True)(("CryptMsgVerifyCountersignatureEncoded", windll["CRYPT32"]), ((1, 'hCryptProv'),(1, 'dwEncodingType'),(1, 'pbSignerInfo'),(1, 'cbSignerInfo'),(1, 'pbSignerInfoCountersignature'),(1, 'cbSignerInfoCountersignature'),(1, 'pciCountersigner'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptMsgVerifyCountersignatureEncodedEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,c_char_p_no,UInt32,c_char_p_no,UInt32,UInt32,c_void_p,UInt32,c_void_p, use_last_error=True)(("CryptMsgVerifyCountersignatureEncodedEx", windll["CRYPT32"]), ((1, 'hCryptProv'),(1, 'dwEncodingType'),(1, 'pbSignerInfo'),(1, 'cbSignerInfo'),(1, 'pbSignerInfoCountersignature'),(1, 'cbSignerInfoCountersignature'),(1, 'dwSignerType'),(1, 'pvSigner'),(1, 'dwFlags'),(1, 'pvExtra'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptMsgCountersign():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,UInt32,POINTER(win32more.Security.Cryptography.CMSG_SIGNER_ENCODE_INFO), use_last_error=True)(("CryptMsgCountersign", windll["CRYPT32"]), ((1, 'hCryptMsg'),(1, 'dwIndex'),(1, 'cCountersigners'),(1, 'rgCountersigners'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptMsgCountersignEncoded():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,c_char_p_no,UInt32,UInt32,POINTER(win32more.Security.Cryptography.CMSG_SIGNER_ENCODE_INFO),c_char_p_no,POINTER(UInt32), use_last_error=True)(("CryptMsgCountersignEncoded", windll["CRYPT32"]), ((1, 'dwEncodingType'),(1, 'pbSignerInfo'),(1, 'cbSignerInfo'),(1, 'cCountersigners'),(1, 'rgCountersigners'),(1, 'pbCountersignature'),(1, 'pcbCountersignature'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertOpenStore():
    try:
        return WINFUNCTYPE(c_void_p,win32more.Foundation.PSTR,win32more.Security.Cryptography.CERT_QUERY_ENCODING_TYPE,UIntPtr,win32more.Security.Cryptography.CERT_OPEN_STORE_FLAGS,c_void_p, use_last_error=True)(("CertOpenStore", windll["CRYPT32"]), ((1, 'lpszStoreProvider'),(1, 'dwEncodingType'),(1, 'hCryptProv'),(1, 'dwFlags'),(1, 'pvPara'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertDuplicateStore():
    try:
        return WINFUNCTYPE(c_void_p,c_void_p, use_last_error=False)(("CertDuplicateStore", windll["CRYPT32"]), ((1, 'hCertStore'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertSaveStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Security.Cryptography.CERT_QUERY_ENCODING_TYPE,win32more.Security.Cryptography.CERT_STORE_SAVE_AS,win32more.Security.Cryptography.CERT_STORE_SAVE_TO,c_void_p,UInt32, use_last_error=True)(("CertSaveStore", windll["CRYPT32"]), ((1, 'hCertStore'),(1, 'dwEncodingType'),(1, 'dwSaveAs'),(1, 'dwSaveTo'),(1, 'pvSaveToPara'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertCloseStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32, use_last_error=True)(("CertCloseStore", windll["CRYPT32"]), ((1, 'hCertStore'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertGetSubjectCertificateFromStore():
    try:
        return WINFUNCTYPE(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),c_void_p,UInt32,POINTER(win32more.Security.Cryptography.CERT_INFO_head), use_last_error=True)(("CertGetSubjectCertificateFromStore", windll["CRYPT32"]), ((1, 'hCertStore'),(1, 'dwCertEncodingType'),(1, 'pCertId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertEnumCertificatesInStore():
    try:
        return WINFUNCTYPE(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),c_void_p,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head), use_last_error=True)(("CertEnumCertificatesInStore", windll["CRYPT32"]), ((1, 'hCertStore'),(1, 'pPrevCertContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertFindCertificateInStore():
    try:
        return WINFUNCTYPE(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),c_void_p,UInt32,UInt32,win32more.Security.Cryptography.CERT_FIND_FLAGS,c_void_p,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head), use_last_error=True)(("CertFindCertificateInStore", windll["CRYPT32"]), ((1, 'hCertStore'),(1, 'dwCertEncodingType'),(1, 'dwFindFlags'),(1, 'dwFindType'),(1, 'pvFindPara'),(1, 'pPrevCertContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertGetIssuerCertificateFromStore():
    try:
        return WINFUNCTYPE(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),c_void_p,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),POINTER(UInt32), use_last_error=True)(("CertGetIssuerCertificateFromStore", windll["CRYPT32"]), ((1, 'hCertStore'),(1, 'pSubjectContext'),(1, 'pPrevIssuerContext'),(1, 'pdwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertVerifySubjectCertificateContext():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),POINTER(UInt32), use_last_error=True)(("CertVerifySubjectCertificateContext", windll["CRYPT32"]), ((1, 'pSubject'),(1, 'pIssuer'),(1, 'pdwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertDuplicateCertificateContext():
    try:
        return WINFUNCTYPE(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head), use_last_error=False)(("CertDuplicateCertificateContext", windll["CRYPT32"]), ((1, 'pCertContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertCreateCertificateContext():
    try:
        return WINFUNCTYPE(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),UInt32,c_char_p_no,UInt32, use_last_error=True)(("CertCreateCertificateContext", windll["CRYPT32"]), ((1, 'dwCertEncodingType'),(1, 'pbCertEncoded'),(1, 'cbCertEncoded'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertFreeCertificateContext():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head), use_last_error=False)(("CertFreeCertificateContext", windll["CRYPT32"]), ((1, 'pCertContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertSetCertificateContextProperty():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),UInt32,UInt32,c_void_p, use_last_error=True)(("CertSetCertificateContextProperty", windll["CRYPT32"]), ((1, 'pCertContext'),(1, 'dwPropId'),(1, 'dwFlags'),(1, 'pvData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertGetCertificateContextProperty():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),UInt32,c_void_p,POINTER(UInt32), use_last_error=True)(("CertGetCertificateContextProperty", windll["CRYPT32"]), ((1, 'pCertContext'),(1, 'dwPropId'),(1, 'pvData'),(1, 'pcbData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertEnumCertificateContextProperties():
    try:
        return WINFUNCTYPE(UInt32,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),UInt32, use_last_error=False)(("CertEnumCertificateContextProperties", windll["CRYPT32"]), ((1, 'pCertContext'),(1, 'dwPropId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertCreateCTLEntryFromCertificateContextProperties():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),UInt32,POINTER(win32more.Security.Cryptography.CRYPT_ATTRIBUTE),UInt32,c_void_p,POINTER(win32more.Security.Cryptography.CTL_ENTRY_head),POINTER(UInt32), use_last_error=True)(("CertCreateCTLEntryFromCertificateContextProperties", windll["CRYPT32"]), ((1, 'pCertContext'),(1, 'cOptAttr'),(1, 'rgOptAttr'),(1, 'dwFlags'),(1, 'pvReserved'),(1, 'pCtlEntry'),(1, 'pcbCtlEntry'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertSetCertificateContextPropertiesFromCTLEntry():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),POINTER(win32more.Security.Cryptography.CTL_ENTRY_head),UInt32, use_last_error=True)(("CertSetCertificateContextPropertiesFromCTLEntry", windll["CRYPT32"]), ((1, 'pCertContext'),(1, 'pCtlEntry'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertGetCRLFromStore():
    try:
        return WINFUNCTYPE(POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head),c_void_p,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head),POINTER(UInt32), use_last_error=True)(("CertGetCRLFromStore", windll["CRYPT32"]), ((1, 'hCertStore'),(1, 'pIssuerContext'),(1, 'pPrevCrlContext'),(1, 'pdwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertEnumCRLsInStore():
    try:
        return WINFUNCTYPE(POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head),c_void_p,POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head), use_last_error=True)(("CertEnumCRLsInStore", windll["CRYPT32"]), ((1, 'hCertStore'),(1, 'pPrevCrlContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertFindCRLInStore():
    try:
        return WINFUNCTYPE(POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head),c_void_p,UInt32,UInt32,UInt32,c_void_p,POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head), use_last_error=True)(("CertFindCRLInStore", windll["CRYPT32"]), ((1, 'hCertStore'),(1, 'dwCertEncodingType'),(1, 'dwFindFlags'),(1, 'dwFindType'),(1, 'pvFindPara'),(1, 'pPrevCrlContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertDuplicateCRLContext():
    try:
        return WINFUNCTYPE(POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head),POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head), use_last_error=False)(("CertDuplicateCRLContext", windll["CRYPT32"]), ((1, 'pCrlContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertCreateCRLContext():
    try:
        return WINFUNCTYPE(POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head),UInt32,c_char_p_no,UInt32, use_last_error=True)(("CertCreateCRLContext", windll["CRYPT32"]), ((1, 'dwCertEncodingType'),(1, 'pbCrlEncoded'),(1, 'cbCrlEncoded'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertFreeCRLContext():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head), use_last_error=False)(("CertFreeCRLContext", windll["CRYPT32"]), ((1, 'pCrlContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertSetCRLContextProperty():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head),UInt32,UInt32,c_void_p, use_last_error=True)(("CertSetCRLContextProperty", windll["CRYPT32"]), ((1, 'pCrlContext'),(1, 'dwPropId'),(1, 'dwFlags'),(1, 'pvData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertGetCRLContextProperty():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head),UInt32,c_void_p,POINTER(UInt32), use_last_error=True)(("CertGetCRLContextProperty", windll["CRYPT32"]), ((1, 'pCrlContext'),(1, 'dwPropId'),(1, 'pvData'),(1, 'pcbData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertEnumCRLContextProperties():
    try:
        return WINFUNCTYPE(UInt32,POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head),UInt32, use_last_error=False)(("CertEnumCRLContextProperties", windll["CRYPT32"]), ((1, 'pCrlContext'),(1, 'dwPropId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertFindCertificateInCRL():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head),UInt32,c_void_p,POINTER(POINTER(win32more.Security.Cryptography.CRL_ENTRY_head)), use_last_error=False)(("CertFindCertificateInCRL", windll["CRYPT32"]), ((1, 'pCert'),(1, 'pCrlContext'),(1, 'dwFlags'),(1, 'pvReserved'),(1, 'ppCrlEntry'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertIsValidCRLForCertificate():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head),UInt32,c_void_p, use_last_error=False)(("CertIsValidCRLForCertificate", windll["CRYPT32"]), ((1, 'pCert'),(1, 'pCrl'),(1, 'dwFlags'),(1, 'pvReserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertAddEncodedCertificateToStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,c_char_p_no,UInt32,UInt32,POINTER(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)), use_last_error=True)(("CertAddEncodedCertificateToStore", windll["CRYPT32"]), ((1, 'hCertStore'),(1, 'dwCertEncodingType'),(1, 'pbCertEncoded'),(1, 'cbCertEncoded'),(1, 'dwAddDisposition'),(1, 'ppCertContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertAddCertificateContextToStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),UInt32,POINTER(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)), use_last_error=True)(("CertAddCertificateContextToStore", windll["CRYPT32"]), ((1, 'hCertStore'),(1, 'pCertContext'),(1, 'dwAddDisposition'),(1, 'ppStoreContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertAddSerializedElementToStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_char_p_no,UInt32,UInt32,UInt32,UInt32,POINTER(UInt32),POINTER(c_void_p), use_last_error=True)(("CertAddSerializedElementToStore", windll["CRYPT32"]), ((1, 'hCertStore'),(1, 'pbElement'),(1, 'cbElement'),(1, 'dwAddDisposition'),(1, 'dwFlags'),(1, 'dwContextTypeFlags'),(1, 'pdwContextType'),(1, 'ppvContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertDeleteCertificateFromStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head), use_last_error=True)(("CertDeleteCertificateFromStore", windll["CRYPT32"]), ((1, 'pCertContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertAddEncodedCRLToStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,c_char_p_no,UInt32,UInt32,POINTER(POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head)), use_last_error=True)(("CertAddEncodedCRLToStore", windll["CRYPT32"]), ((1, 'hCertStore'),(1, 'dwCertEncodingType'),(1, 'pbCrlEncoded'),(1, 'cbCrlEncoded'),(1, 'dwAddDisposition'),(1, 'ppCrlContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertAddCRLContextToStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head),UInt32,POINTER(POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head)), use_last_error=True)(("CertAddCRLContextToStore", windll["CRYPT32"]), ((1, 'hCertStore'),(1, 'pCrlContext'),(1, 'dwAddDisposition'),(1, 'ppStoreContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertDeleteCRLFromStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head), use_last_error=True)(("CertDeleteCRLFromStore", windll["CRYPT32"]), ((1, 'pCrlContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertSerializeCertificateStoreElement():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),UInt32,c_char_p_no,POINTER(UInt32), use_last_error=True)(("CertSerializeCertificateStoreElement", windll["CRYPT32"]), ((1, 'pCertContext'),(1, 'dwFlags'),(1, 'pbElement'),(1, 'pcbElement'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertSerializeCRLStoreElement():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head),UInt32,c_char_p_no,POINTER(UInt32), use_last_error=True)(("CertSerializeCRLStoreElement", windll["CRYPT32"]), ((1, 'pCrlContext'),(1, 'dwFlags'),(1, 'pbElement'),(1, 'pcbElement'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertDuplicateCTLContext():
    try:
        return WINFUNCTYPE(POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head),POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head), use_last_error=False)(("CertDuplicateCTLContext", windll["CRYPT32"]), ((1, 'pCtlContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertCreateCTLContext():
    try:
        return WINFUNCTYPE(POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head),UInt32,c_char_p_no,UInt32, use_last_error=True)(("CertCreateCTLContext", windll["CRYPT32"]), ((1, 'dwMsgAndCertEncodingType'),(1, 'pbCtlEncoded'),(1, 'cbCtlEncoded'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertFreeCTLContext():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head), use_last_error=False)(("CertFreeCTLContext", windll["CRYPT32"]), ((1, 'pCtlContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertSetCTLContextProperty():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head),UInt32,UInt32,c_void_p, use_last_error=True)(("CertSetCTLContextProperty", windll["CRYPT32"]), ((1, 'pCtlContext'),(1, 'dwPropId'),(1, 'dwFlags'),(1, 'pvData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertGetCTLContextProperty():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head),UInt32,c_void_p,POINTER(UInt32), use_last_error=True)(("CertGetCTLContextProperty", windll["CRYPT32"]), ((1, 'pCtlContext'),(1, 'dwPropId'),(1, 'pvData'),(1, 'pcbData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertEnumCTLContextProperties():
    try:
        return WINFUNCTYPE(UInt32,POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head),UInt32, use_last_error=False)(("CertEnumCTLContextProperties", windll["CRYPT32"]), ((1, 'pCtlContext'),(1, 'dwPropId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertEnumCTLsInStore():
    try:
        return WINFUNCTYPE(POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head),c_void_p,POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head), use_last_error=True)(("CertEnumCTLsInStore", windll["CRYPT32"]), ((1, 'hCertStore'),(1, 'pPrevCtlContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertFindSubjectInCTL():
    try:
        return WINFUNCTYPE(POINTER(win32more.Security.Cryptography.CTL_ENTRY_head),UInt32,UInt32,c_void_p,POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head),UInt32, use_last_error=True)(("CertFindSubjectInCTL", windll["CRYPT32"]), ((1, 'dwEncodingType'),(1, 'dwSubjectType'),(1, 'pvSubject'),(1, 'pCtlContext'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertFindCTLInStore():
    try:
        return WINFUNCTYPE(POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head),c_void_p,UInt32,UInt32,win32more.Security.Cryptography.CERT_FIND_TYPE,c_void_p,POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head), use_last_error=True)(("CertFindCTLInStore", windll["CRYPT32"]), ((1, 'hCertStore'),(1, 'dwMsgAndCertEncodingType'),(1, 'dwFindFlags'),(1, 'dwFindType'),(1, 'pvFindPara'),(1, 'pPrevCtlContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertAddEncodedCTLToStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,c_char_p_no,UInt32,UInt32,POINTER(POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head)), use_last_error=True)(("CertAddEncodedCTLToStore", windll["CRYPT32"]), ((1, 'hCertStore'),(1, 'dwMsgAndCertEncodingType'),(1, 'pbCtlEncoded'),(1, 'cbCtlEncoded'),(1, 'dwAddDisposition'),(1, 'ppCtlContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertAddCTLContextToStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head),UInt32,POINTER(POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head)), use_last_error=True)(("CertAddCTLContextToStore", windll["CRYPT32"]), ((1, 'hCertStore'),(1, 'pCtlContext'),(1, 'dwAddDisposition'),(1, 'ppStoreContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertSerializeCTLStoreElement():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head),UInt32,c_char_p_no,POINTER(UInt32), use_last_error=True)(("CertSerializeCTLStoreElement", windll["CRYPT32"]), ((1, 'pCtlContext'),(1, 'dwFlags'),(1, 'pbElement'),(1, 'pcbElement'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertDeleteCTLFromStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head), use_last_error=True)(("CertDeleteCTLFromStore", windll["CRYPT32"]), ((1, 'pCtlContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertAddCertificateLinkToStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),UInt32,POINTER(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)), use_last_error=True)(("CertAddCertificateLinkToStore", windll["CRYPT32"]), ((1, 'hCertStore'),(1, 'pCertContext'),(1, 'dwAddDisposition'),(1, 'ppStoreContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertAddCRLLinkToStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head),UInt32,POINTER(POINTER(win32more.Security.Cryptography.CRL_CONTEXT_head)), use_last_error=True)(("CertAddCRLLinkToStore", windll["CRYPT32"]), ((1, 'hCertStore'),(1, 'pCrlContext'),(1, 'dwAddDisposition'),(1, 'ppStoreContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertAddCTLLinkToStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head),UInt32,POINTER(POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head)), use_last_error=True)(("CertAddCTLLinkToStore", windll["CRYPT32"]), ((1, 'hCertStore'),(1, 'pCtlContext'),(1, 'dwAddDisposition'),(1, 'ppStoreContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertAddStoreToCollection():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,UInt32,UInt32, use_last_error=False)(("CertAddStoreToCollection", windll["CRYPT32"]), ((1, 'hCollectionStore'),(1, 'hSiblingStore'),(1, 'dwUpdateFlags'),(1, 'dwPriority'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertRemoveStoreFromCollection():
    try:
        return WINFUNCTYPE(Void,c_void_p,c_void_p, use_last_error=False)(("CertRemoveStoreFromCollection", windll["CRYPT32"]), ((1, 'hCollectionStore'),(1, 'hSiblingStore'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertControlStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Security.Cryptography.CERT_CONTROL_STORE_FLAGS,UInt32,c_void_p, use_last_error=True)(("CertControlStore", windll["CRYPT32"]), ((1, 'hCertStore'),(1, 'dwFlags'),(1, 'dwCtrlType'),(1, 'pvCtrlPara'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertSetStoreProperty():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,UInt32,c_void_p, use_last_error=False)(("CertSetStoreProperty", windll["CRYPT32"]), ((1, 'hCertStore'),(1, 'dwPropId'),(1, 'dwFlags'),(1, 'pvData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertGetStoreProperty():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,c_void_p,POINTER(UInt32), use_last_error=True)(("CertGetStoreProperty", windll["CRYPT32"]), ((1, 'hCertStore'),(1, 'dwPropId'),(1, 'pvData'),(1, 'pcbData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertCreateContext():
    try:
        return WINFUNCTYPE(c_void_p,UInt32,UInt32,c_char_p_no,UInt32,UInt32,POINTER(win32more.Security.Cryptography.CERT_CREATE_CONTEXT_PARA_head), use_last_error=True)(("CertCreateContext", windll["CRYPT32"]), ((1, 'dwContextType'),(1, 'dwEncodingType'),(1, 'pbEncoded'),(1, 'cbEncoded'),(1, 'dwFlags'),(1, 'pCreatePara'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertRegisterSystemStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,POINTER(win32more.Security.Cryptography.CERT_SYSTEM_STORE_INFO_head),c_void_p, use_last_error=False)(("CertRegisterSystemStore", windll["CRYPT32"]), ((1, 'pvSystemStore'),(1, 'dwFlags'),(1, 'pStoreInfo'),(1, 'pvReserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertRegisterPhysicalStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,win32more.Foundation.PWSTR,POINTER(win32more.Security.Cryptography.CERT_PHYSICAL_STORE_INFO_head),c_void_p, use_last_error=False)(("CertRegisterPhysicalStore", windll["CRYPT32"]), ((1, 'pvSystemStore'),(1, 'dwFlags'),(1, 'pwszStoreName'),(1, 'pStoreInfo'),(1, 'pvReserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertUnregisterSystemStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32, use_last_error=False)(("CertUnregisterSystemStore", windll["CRYPT32"]), ((1, 'pvSystemStore'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertUnregisterPhysicalStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,win32more.Foundation.PWSTR, use_last_error=False)(("CertUnregisterPhysicalStore", windll["CRYPT32"]), ((1, 'pvSystemStore'),(1, 'dwFlags'),(1, 'pwszStoreName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertEnumSystemStoreLocation():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,c_void_p,win32more.Security.Cryptography.PFN_CERT_ENUM_SYSTEM_STORE_LOCATION, use_last_error=False)(("CertEnumSystemStoreLocation", windll["CRYPT32"]), ((1, 'dwFlags'),(1, 'pvArg'),(1, 'pfnEnum'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertEnumSystemStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,c_void_p,c_void_p,win32more.Security.Cryptography.PFN_CERT_ENUM_SYSTEM_STORE, use_last_error=False)(("CertEnumSystemStore", windll["CRYPT32"]), ((1, 'dwFlags'),(1, 'pvSystemStoreLocationPara'),(1, 'pvArg'),(1, 'pfnEnum'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertEnumPhysicalStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,c_void_p,win32more.Security.Cryptography.PFN_CERT_ENUM_PHYSICAL_STORE, use_last_error=True)(("CertEnumPhysicalStore", windll["CRYPT32"]), ((1, 'pvSystemStore'),(1, 'dwFlags'),(1, 'pvArg'),(1, 'pfnEnum'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertGetEnhancedKeyUsage():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),UInt32,POINTER(win32more.Security.Cryptography.CTL_USAGE_head),POINTER(UInt32), use_last_error=True)(("CertGetEnhancedKeyUsage", windll["CRYPT32"]), ((1, 'pCertContext'),(1, 'dwFlags'),(1, 'pUsage'),(1, 'pcbUsage'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertSetEnhancedKeyUsage():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),POINTER(win32more.Security.Cryptography.CTL_USAGE_head), use_last_error=True)(("CertSetEnhancedKeyUsage", windll["CRYPT32"]), ((1, 'pCertContext'),(1, 'pUsage'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertAddEnhancedKeyUsageIdentifier():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),win32more.Foundation.PSTR, use_last_error=True)(("CertAddEnhancedKeyUsageIdentifier", windll["CRYPT32"]), ((1, 'pCertContext'),(1, 'pszUsageIdentifier'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertRemoveEnhancedKeyUsageIdentifier():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),win32more.Foundation.PSTR, use_last_error=True)(("CertRemoveEnhancedKeyUsageIdentifier", windll["CRYPT32"]), ((1, 'pCertContext'),(1, 'pszUsageIdentifier'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertGetValidUsages():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)),POINTER(Int32),POINTER(win32more.Foundation.PSTR),POINTER(UInt32), use_last_error=True)(("CertGetValidUsages", windll["CRYPT32"]), ((1, 'cCerts'),(1, 'rghCerts'),(1, 'cNumOIDs'),(1, 'rghOIDs'),(1, 'pcbOIDs'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptMsgGetAndVerifySigner():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,POINTER(c_void_p),UInt32,POINTER(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)),POINTER(UInt32), use_last_error=True)(("CryptMsgGetAndVerifySigner", windll["CRYPT32"]), ((1, 'hCryptMsg'),(1, 'cSignerStore'),(1, 'rghSignerStore'),(1, 'dwFlags'),(1, 'ppSigner'),(1, 'pdwSignerIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptMsgSignCTL():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,c_char_p_no,UInt32,POINTER(win32more.Security.Cryptography.CMSG_SIGNED_ENCODE_INFO_head),UInt32,c_char_p_no,POINTER(UInt32), use_last_error=True)(("CryptMsgSignCTL", windll["CRYPT32"]), ((1, 'dwMsgEncodingType'),(1, 'pbCtlContent'),(1, 'cbCtlContent'),(1, 'pSignInfo'),(1, 'dwFlags'),(1, 'pbEncoded'),(1, 'pcbEncoded'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptMsgEncodeAndSignCTL():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(win32more.Security.Cryptography.CTL_INFO_head),POINTER(win32more.Security.Cryptography.CMSG_SIGNED_ENCODE_INFO_head),UInt32,c_char_p_no,POINTER(UInt32), use_last_error=True)(("CryptMsgEncodeAndSignCTL", windll["CRYPT32"]), ((1, 'dwMsgEncodingType'),(1, 'pCtlInfo'),(1, 'pSignInfo'),(1, 'dwFlags'),(1, 'pbEncoded'),(1, 'pcbEncoded'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertFindSubjectInSortedCTL():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head),POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head),UInt32,c_void_p,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head), use_last_error=False)(("CertFindSubjectInSortedCTL", windll["CRYPT32"]), ((1, 'pSubjectIdentifier'),(1, 'pCtlContext'),(1, 'dwFlags'),(1, 'pvReserved'),(1, 'pEncodedAttributes'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertEnumSubjectInSortedCTL():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CTL_CONTEXT_head),POINTER(c_void_p),POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head),POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head), use_last_error=False)(("CertEnumSubjectInSortedCTL", windll["CRYPT32"]), ((1, 'pCtlContext'),(1, 'ppvNextSubject'),(1, 'pSubjectIdentifier'),(1, 'pEncodedAttributes'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertVerifyCTLUsage():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,UInt32,c_void_p,POINTER(win32more.Security.Cryptography.CTL_USAGE_head),UInt32,POINTER(win32more.Security.Cryptography.CTL_VERIFY_USAGE_PARA_head),POINTER(win32more.Security.Cryptography.CTL_VERIFY_USAGE_STATUS_head), use_last_error=True)(("CertVerifyCTLUsage", windll["CRYPT32"]), ((1, 'dwEncodingType'),(1, 'dwSubjectType'),(1, 'pvSubject'),(1, 'pSubjectUsage'),(1, 'dwFlags'),(1, 'pVerifyUsagePara'),(1, 'pVerifyUsageStatus'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertVerifyRevocation():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,UInt32,UInt32,POINTER(c_void_p),UInt32,POINTER(win32more.Security.Cryptography.CERT_REVOCATION_PARA_head),POINTER(win32more.Security.Cryptography.CERT_REVOCATION_STATUS_head), use_last_error=True)(("CertVerifyRevocation", windll["CRYPT32"]), ((1, 'dwEncodingType'),(1, 'dwRevType'),(1, 'cContext'),(1, 'rgpvContext'),(1, 'dwFlags'),(1, 'pRevPara'),(1, 'pRevStatus'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertCompareIntegerBlob():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head),POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head), use_last_error=True)(("CertCompareIntegerBlob", windll["CRYPT32"]), ((1, 'pInt1'),(1, 'pInt2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertCompareCertificate():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(win32more.Security.Cryptography.CERT_INFO_head),POINTER(win32more.Security.Cryptography.CERT_INFO_head), use_last_error=False)(("CertCompareCertificate", windll["CRYPT32"]), ((1, 'dwCertEncodingType'),(1, 'pCertId1'),(1, 'pCertId2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertCompareCertificateName():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head),POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head), use_last_error=False)(("CertCompareCertificateName", windll["CRYPT32"]), ((1, 'dwCertEncodingType'),(1, 'pCertName1'),(1, 'pCertName2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertIsRDNAttrsInCertificateName():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,UInt32,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head),POINTER(win32more.Security.Cryptography.CERT_RDN_head), use_last_error=True)(("CertIsRDNAttrsInCertificateName", windll["CRYPT32"]), ((1, 'dwCertEncodingType'),(1, 'dwFlags'),(1, 'pCertName'),(1, 'pRDN'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertComparePublicKeyInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(win32more.Security.Cryptography.CERT_PUBLIC_KEY_INFO_head),POINTER(win32more.Security.Cryptography.CERT_PUBLIC_KEY_INFO_head), use_last_error=False)(("CertComparePublicKeyInfo", windll["CRYPT32"]), ((1, 'dwCertEncodingType'),(1, 'pPublicKey1'),(1, 'pPublicKey2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertGetPublicKeyLength():
    try:
        return WINFUNCTYPE(UInt32,UInt32,POINTER(win32more.Security.Cryptography.CERT_PUBLIC_KEY_INFO_head), use_last_error=True)(("CertGetPublicKeyLength", windll["CRYPT32"]), ((1, 'dwCertEncodingType'),(1, 'pPublicKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptVerifyCertificateSignature():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,c_char_p_no,UInt32,POINTER(win32more.Security.Cryptography.CERT_PUBLIC_KEY_INFO_head), use_last_error=True)(("CryptVerifyCertificateSignature", windll["CRYPT32"]), ((1, 'hCryptProv'),(1, 'dwCertEncodingType'),(1, 'pbEncoded'),(1, 'cbEncoded'),(1, 'pPublicKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptVerifyCertificateSignatureEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,UInt32,c_void_p,UInt32,c_void_p,win32more.Security.Cryptography.CRYPT_VERIFY_CERT_FLAGS,c_void_p, use_last_error=True)(("CryptVerifyCertificateSignatureEx", windll["CRYPT32"]), ((1, 'hCryptProv'),(1, 'dwCertEncodingType'),(1, 'dwSubjectType'),(1, 'pvSubject'),(1, 'dwIssuerType'),(1, 'pvIssuer'),(1, 'dwFlags'),(1, 'pvExtra'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertIsStrongHashToSign():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CERT_STRONG_SIGN_PARA_head),win32more.Foundation.PWSTR,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head), use_last_error=True)(("CertIsStrongHashToSign", windll["CRYPT32"]), ((1, 'pStrongSignPara'),(1, 'pwszCNGHashAlgid'),(1, 'pSigningCert'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptHashToBeSigned():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,c_char_p_no,UInt32,c_char_p_no,POINTER(UInt32), use_last_error=True)(("CryptHashToBeSigned", windll["CRYPT32"]), ((1, 'hCryptProv'),(1, 'dwCertEncodingType'),(1, 'pbEncoded'),(1, 'cbEncoded'),(1, 'pbComputedHash'),(1, 'pcbComputedHash'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptHashCertificate():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,UInt32,c_char_p_no,UInt32,c_char_p_no,POINTER(UInt32), use_last_error=True)(("CryptHashCertificate", windll["CRYPT32"]), ((1, 'hCryptProv'),(1, 'Algid'),(1, 'dwFlags'),(1, 'pbEncoded'),(1, 'cbEncoded'),(1, 'pbComputedHash'),(1, 'pcbComputedHash'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptHashCertificate2():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,UInt32,c_void_p,c_char_p_no,UInt32,c_char_p_no,POINTER(UInt32), use_last_error=True)(("CryptHashCertificate2", windll["CRYPT32"]), ((1, 'pwszCNGHashAlgid'),(1, 'dwFlags'),(1, 'pvReserved'),(1, 'pbEncoded'),(1, 'cbEncoded'),(1, 'pbComputedHash'),(1, 'pcbComputedHash'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptSignCertificate():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,UInt32,c_char_p_no,UInt32,POINTER(win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER_head),c_void_p,c_char_p_no,POINTER(UInt32), use_last_error=True)(("CryptSignCertificate", windll["CRYPT32"]), ((1, 'hCryptProvOrNCryptKey'),(1, 'dwKeySpec'),(1, 'dwCertEncodingType'),(1, 'pbEncodedToBeSigned'),(1, 'cbEncodedToBeSigned'),(1, 'pSignatureAlgorithm'),(1, 'pvHashAuxInfo'),(1, 'pbSignature'),(1, 'pcbSignature'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptSignAndEncodeCertificate():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,win32more.Security.Cryptography.CERT_KEY_SPEC,UInt32,win32more.Foundation.PSTR,c_void_p,POINTER(win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER_head),c_void_p,c_char_p_no,POINTER(UInt32), use_last_error=True)(("CryptSignAndEncodeCertificate", windll["CRYPT32"]), ((1, 'hCryptProvOrNCryptKey'),(1, 'dwKeySpec'),(1, 'dwCertEncodingType'),(1, 'lpszStructType'),(1, 'pvStructInfo'),(1, 'pSignatureAlgorithm'),(1, 'pvHashAuxInfo'),(1, 'pbEncoded'),(1, 'pcbEncoded'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertVerifyTimeValidity():
    try:
        return WINFUNCTYPE(Int32,POINTER(win32more.Foundation.FILETIME_head),POINTER(win32more.Security.Cryptography.CERT_INFO_head), use_last_error=False)(("CertVerifyTimeValidity", windll["CRYPT32"]), ((1, 'pTimeToVerify'),(1, 'pCertInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertVerifyCRLTimeValidity():
    try:
        return WINFUNCTYPE(Int32,POINTER(win32more.Foundation.FILETIME_head),POINTER(win32more.Security.Cryptography.CRL_INFO_head), use_last_error=False)(("CertVerifyCRLTimeValidity", windll["CRYPT32"]), ((1, 'pTimeToVerify'),(1, 'pCrlInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertVerifyValidityNesting():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CERT_INFO_head),POINTER(win32more.Security.Cryptography.CERT_INFO_head), use_last_error=False)(("CertVerifyValidityNesting", windll["CRYPT32"]), ((1, 'pSubjectInfo'),(1, 'pIssuerInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertVerifyCRLRevocation():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(win32more.Security.Cryptography.CERT_INFO_head),UInt32,POINTER(POINTER(win32more.Security.Cryptography.CRL_INFO_head)), use_last_error=False)(("CertVerifyCRLRevocation", windll["CRYPT32"]), ((1, 'dwCertEncodingType'),(1, 'pCertId'),(1, 'cCrlInfo'),(1, 'rgpCrlInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertAlgIdToOID():
    try:
        return WINFUNCTYPE(win32more.Foundation.PSTR,UInt32, use_last_error=False)(("CertAlgIdToOID", windll["CRYPT32"]), ((1, 'dwAlgId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertOIDToAlgId():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.PSTR, use_last_error=False)(("CertOIDToAlgId", windll["CRYPT32"]), ((1, 'pszObjId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertFindExtension():
    try:
        return WINFUNCTYPE(POINTER(win32more.Security.Cryptography.CERT_EXTENSION_head),win32more.Foundation.PSTR,UInt32,POINTER(win32more.Security.Cryptography.CERT_EXTENSION), use_last_error=False)(("CertFindExtension", windll["CRYPT32"]), ((1, 'pszObjId'),(1, 'cExtensions'),(1, 'rgExtensions'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertFindAttribute():
    try:
        return WINFUNCTYPE(POINTER(win32more.Security.Cryptography.CRYPT_ATTRIBUTE_head),win32more.Foundation.PSTR,UInt32,POINTER(win32more.Security.Cryptography.CRYPT_ATTRIBUTE), use_last_error=False)(("CertFindAttribute", windll["CRYPT32"]), ((1, 'pszObjId'),(1, 'cAttr'),(1, 'rgAttr'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertFindRDNAttr():
    try:
        return WINFUNCTYPE(POINTER(win32more.Security.Cryptography.CERT_RDN_ATTR_head),win32more.Foundation.PSTR,POINTER(win32more.Security.Cryptography.CERT_NAME_INFO_head), use_last_error=False)(("CertFindRDNAttr", windll["CRYPT32"]), ((1, 'pszObjId'),(1, 'pName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertGetIntendedKeyUsage():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(win32more.Security.Cryptography.CERT_INFO_head),c_char_p_no,UInt32, use_last_error=True)(("CertGetIntendedKeyUsage", windll["CRYPT32"]), ((1, 'dwCertEncodingType'),(1, 'pCertInfo'),(1, 'pbKeyUsage'),(1, 'cbKeyUsage'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptInstallDefaultContext():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,win32more.Security.Cryptography.CRYPT_DEFAULT_CONTEXT_TYPE,c_void_p,win32more.Security.Cryptography.CRYPT_DEFAULT_CONTEXT_FLAGS,c_void_p,POINTER(c_void_p), use_last_error=True)(("CryptInstallDefaultContext", windll["CRYPT32"]), ((1, 'hCryptProv'),(1, 'dwDefaultType'),(1, 'pvDefaultPara'),(1, 'dwFlags'),(1, 'pvReserved'),(1, 'phDefaultContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptUninstallDefaultContext():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,c_void_p, use_last_error=True)(("CryptUninstallDefaultContext", windll["CRYPT32"]), ((1, 'hDefaultContext'),(1, 'dwFlags'),(1, 'pvReserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptExportPublicKeyInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,UInt32,POINTER(win32more.Security.Cryptography.CERT_PUBLIC_KEY_INFO_head),POINTER(UInt32), use_last_error=True)(("CryptExportPublicKeyInfo", windll["CRYPT32"]), ((1, 'hCryptProvOrNCryptKey'),(1, 'dwKeySpec'),(1, 'dwCertEncodingType'),(1, 'pInfo'),(1, 'pcbInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptExportPublicKeyInfoEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,UInt32,win32more.Foundation.PSTR,UInt32,c_void_p,POINTER(win32more.Security.Cryptography.CERT_PUBLIC_KEY_INFO_head),POINTER(UInt32), use_last_error=True)(("CryptExportPublicKeyInfoEx", windll["CRYPT32"]), ((1, 'hCryptProvOrNCryptKey'),(1, 'dwKeySpec'),(1, 'dwCertEncodingType'),(1, 'pszPublicKeyObjId'),(1, 'dwFlags'),(1, 'pvAuxInfo'),(1, 'pInfo'),(1, 'pcbInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptExportPublicKeyInfoFromBCryptKeyHandle():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Security.Cryptography.BCRYPT_KEY_HANDLE,UInt32,win32more.Foundation.PSTR,UInt32,c_void_p,POINTER(win32more.Security.Cryptography.CERT_PUBLIC_KEY_INFO_head),POINTER(UInt32), use_last_error=False)(("CryptExportPublicKeyInfoFromBCryptKeyHandle", windll["CRYPT32"]), ((1, 'hBCryptKey'),(1, 'dwCertEncodingType'),(1, 'pszPublicKeyObjId'),(1, 'dwFlags'),(1, 'pvAuxInfo'),(1, 'pInfo'),(1, 'pcbInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptImportPublicKeyInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,POINTER(win32more.Security.Cryptography.CERT_PUBLIC_KEY_INFO_head),POINTER(UIntPtr), use_last_error=True)(("CryptImportPublicKeyInfo", windll["CRYPT32"]), ((1, 'hCryptProv'),(1, 'dwCertEncodingType'),(1, 'pInfo'),(1, 'phKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptImportPublicKeyInfoEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,POINTER(win32more.Security.Cryptography.CERT_PUBLIC_KEY_INFO_head),UInt32,UInt32,c_void_p,POINTER(UIntPtr), use_last_error=True)(("CryptImportPublicKeyInfoEx", windll["CRYPT32"]), ((1, 'hCryptProv'),(1, 'dwCertEncodingType'),(1, 'pInfo'),(1, 'aiKeyAlg'),(1, 'dwFlags'),(1, 'pvAuxInfo'),(1, 'phKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptImportPublicKeyInfoEx2():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(win32more.Security.Cryptography.CERT_PUBLIC_KEY_INFO_head),win32more.Security.Cryptography.CRYPT_IMPORT_PUBLIC_KEY_FLAGS,c_void_p,POINTER(win32more.Security.Cryptography.BCRYPT_KEY_HANDLE), use_last_error=True)(("CryptImportPublicKeyInfoEx2", windll["CRYPT32"]), ((1, 'dwCertEncodingType'),(1, 'pInfo'),(1, 'dwFlags'),(1, 'pvAuxInfo'),(1, 'phKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptAcquireCertificatePrivateKey():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),win32more.Security.Cryptography.CRYPT_ACQUIRE_FLAGS,c_void_p,POINTER(UIntPtr),POINTER(win32more.Security.Cryptography.CERT_KEY_SPEC),POINTER(win32more.Foundation.BOOL), use_last_error=True)(("CryptAcquireCertificatePrivateKey", windll["CRYPT32"]), ((1, 'pCert'),(1, 'dwFlags'),(1, 'pvParameters'),(1, 'phCryptProvOrNCryptKey'),(1, 'pdwKeySpec'),(1, 'pfCallerFreeProvOrNCryptKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptFindCertificateKeyProvInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),win32more.Security.Cryptography.CRYPT_FIND_FLAGS,c_void_p, use_last_error=True)(("CryptFindCertificateKeyProvInfo", windll["CRYPT32"]), ((1, 'pCert'),(1, 'dwFlags'),(1, 'pvReserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptImportPKCS8():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Security.Cryptography.CRYPT_PKCS8_IMPORT_PARAMS,win32more.Security.Cryptography.CRYPT_KEY_FLAGS,POINTER(UIntPtr),c_void_p, use_last_error=True)(("CryptImportPKCS8", windll["CRYPT32"]), ((1, 'sPrivateKeyAndParams'),(1, 'dwFlags'),(1, 'phCryptProv'),(1, 'pvAuxInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptExportPKCS8():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,win32more.Foundation.PSTR,UInt32,c_void_p,c_char_p_no,POINTER(UInt32), use_last_error=True)(("CryptExportPKCS8", windll["CRYPT32"]), ((1, 'hCryptProv'),(1, 'dwKeySpec'),(1, 'pszPrivateKeyObjId'),(1, 'dwFlags'),(1, 'pvAuxInfo'),(1, 'pbPrivateKeyBlob'),(1, 'pcbPrivateKeyBlob'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptHashPublicKeyInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UIntPtr,UInt32,UInt32,UInt32,POINTER(win32more.Security.Cryptography.CERT_PUBLIC_KEY_INFO_head),c_char_p_no,POINTER(UInt32), use_last_error=True)(("CryptHashPublicKeyInfo", windll["CRYPT32"]), ((1, 'hCryptProv'),(1, 'Algid'),(1, 'dwFlags'),(1, 'dwCertEncodingType'),(1, 'pInfo'),(1, 'pbComputedHash'),(1, 'pcbComputedHash'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertRDNValueToStrA():
    try:
        return WINFUNCTYPE(UInt32,UInt32,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head),POINTER(Byte),UInt32, use_last_error=False)(("CertRDNValueToStrA", windll["CRYPT32"]), ((1, 'dwValueType'),(1, 'pValue'),(1, 'psz'),(1, 'csz'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertRDNValueToStrW():
    try:
        return WINFUNCTYPE(UInt32,UInt32,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head),POINTER(Char),UInt32, use_last_error=False)(("CertRDNValueToStrW", windll["CRYPT32"]), ((1, 'dwValueType'),(1, 'pValue'),(1, 'psz'),(1, 'csz'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertRDNValueToStr():
    return win32more.Security.Cryptography.CertRDNValueToStrW
def _define_CertNameToStrA():
    try:
        return WINFUNCTYPE(UInt32,UInt32,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head),win32more.Security.Cryptography.CERT_STRING_TYPE,POINTER(Byte),UInt32, use_last_error=False)(("CertNameToStrA", windll["CRYPT32"]), ((1, 'dwCertEncodingType'),(1, 'pName'),(1, 'dwStrType'),(1, 'psz'),(1, 'csz'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertNameToStrW():
    try:
        return WINFUNCTYPE(UInt32,UInt32,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head),win32more.Security.Cryptography.CERT_STRING_TYPE,POINTER(Char),UInt32, use_last_error=False)(("CertNameToStrW", windll["CRYPT32"]), ((1, 'dwCertEncodingType'),(1, 'pName'),(1, 'dwStrType'),(1, 'psz'),(1, 'csz'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertNameToStr():
    return win32more.Security.Cryptography.CertNameToStrW
def _define_CertStrToNameA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PSTR,win32more.Security.Cryptography.CERT_STRING_TYPE,c_void_p,c_char_p_no,POINTER(UInt32),POINTER(win32more.Foundation.PSTR), use_last_error=True)(("CertStrToNameA", windll["CRYPT32"]), ((1, 'dwCertEncodingType'),(1, 'pszX500'),(1, 'dwStrType'),(1, 'pvReserved'),(1, 'pbEncoded'),(1, 'pcbEncoded'),(1, 'ppszError'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertStrToNameW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PWSTR,win32more.Security.Cryptography.CERT_STRING_TYPE,c_void_p,c_char_p_no,POINTER(UInt32),POINTER(win32more.Foundation.PWSTR), use_last_error=True)(("CertStrToNameW", windll["CRYPT32"]), ((1, 'dwCertEncodingType'),(1, 'pszX500'),(1, 'dwStrType'),(1, 'pvReserved'),(1, 'pbEncoded'),(1, 'pcbEncoded'),(1, 'ppszError'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertStrToName():
    return win32more.Security.Cryptography.CertStrToNameW
def _define_CertGetNameStringA():
    try:
        return WINFUNCTYPE(UInt32,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),UInt32,UInt32,c_void_p,POINTER(Byte),UInt32, use_last_error=False)(("CertGetNameStringA", windll["CRYPT32"]), ((1, 'pCertContext'),(1, 'dwType'),(1, 'dwFlags'),(1, 'pvTypePara'),(1, 'pszNameString'),(1, 'cchNameString'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertGetNameStringW():
    try:
        return WINFUNCTYPE(UInt32,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),UInt32,UInt32,c_void_p,POINTER(Char),UInt32, use_last_error=False)(("CertGetNameStringW", windll["CRYPT32"]), ((1, 'pCertContext'),(1, 'dwType'),(1, 'dwFlags'),(1, 'pvTypePara'),(1, 'pszNameString'),(1, 'cchNameString'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertGetNameString():
    return win32more.Security.Cryptography.CertGetNameStringW
def _define_CryptSignMessage():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPT_SIGN_MESSAGE_PARA_head),win32more.Foundation.BOOL,UInt32,POINTER(c_char_p_no),POINTER(UInt32),c_char_p_no,POINTER(UInt32), use_last_error=True)(("CryptSignMessage", windll["CRYPT32"]), ((1, 'pSignPara'),(1, 'fDetachedSignature'),(1, 'cToBeSigned'),(1, 'rgpbToBeSigned'),(1, 'rgcbToBeSigned'),(1, 'pbSignedBlob'),(1, 'pcbSignedBlob'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptVerifyMessageSignature():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPT_VERIFY_MESSAGE_PARA_head),UInt32,c_char_p_no,UInt32,c_char_p_no,POINTER(UInt32),POINTER(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)), use_last_error=True)(("CryptVerifyMessageSignature", windll["CRYPT32"]), ((1, 'pVerifyPara'),(1, 'dwSignerIndex'),(1, 'pbSignedBlob'),(1, 'cbSignedBlob'),(1, 'pbDecoded'),(1, 'pcbDecoded'),(1, 'ppSignerCert'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptGetMessageSignerCount():
    try:
        return WINFUNCTYPE(Int32,UInt32,c_char_p_no,UInt32, use_last_error=True)(("CryptGetMessageSignerCount", windll["CRYPT32"]), ((1, 'dwMsgEncodingType'),(1, 'pbSignedBlob'),(1, 'cbSignedBlob'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptGetMessageCertificates():
    try:
        return WINFUNCTYPE(c_void_p,UInt32,UIntPtr,UInt32,c_char_p_no,UInt32, use_last_error=True)(("CryptGetMessageCertificates", windll["CRYPT32"]), ((1, 'dwMsgAndCertEncodingType'),(1, 'hCryptProv'),(1, 'dwFlags'),(1, 'pbSignedBlob'),(1, 'cbSignedBlob'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptVerifyDetachedMessageSignature():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPT_VERIFY_MESSAGE_PARA_head),UInt32,c_char_p_no,UInt32,UInt32,POINTER(c_char_p_no),POINTER(UInt32),POINTER(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)), use_last_error=True)(("CryptVerifyDetachedMessageSignature", windll["CRYPT32"]), ((1, 'pVerifyPara'),(1, 'dwSignerIndex'),(1, 'pbDetachedSignBlob'),(1, 'cbDetachedSignBlob'),(1, 'cToBeSigned'),(1, 'rgpbToBeSigned'),(1, 'rgcbToBeSigned'),(1, 'ppSignerCert'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptEncryptMessage():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPT_ENCRYPT_MESSAGE_PARA_head),UInt32,POINTER(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)),c_char_p_no,UInt32,c_char_p_no,POINTER(UInt32), use_last_error=True)(("CryptEncryptMessage", windll["CRYPT32"]), ((1, 'pEncryptPara'),(1, 'cRecipientCert'),(1, 'rgpRecipientCert'),(1, 'pbToBeEncrypted'),(1, 'cbToBeEncrypted'),(1, 'pbEncryptedBlob'),(1, 'pcbEncryptedBlob'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptDecryptMessage():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPT_DECRYPT_MESSAGE_PARA_head),c_char_p_no,UInt32,c_char_p_no,POINTER(UInt32),POINTER(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)), use_last_error=True)(("CryptDecryptMessage", windll["CRYPT32"]), ((1, 'pDecryptPara'),(1, 'pbEncryptedBlob'),(1, 'cbEncryptedBlob'),(1, 'pbDecrypted'),(1, 'pcbDecrypted'),(1, 'ppXchgCert'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptSignAndEncryptMessage():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPT_SIGN_MESSAGE_PARA_head),POINTER(win32more.Security.Cryptography.CRYPT_ENCRYPT_MESSAGE_PARA_head),UInt32,POINTER(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)),c_char_p_no,UInt32,c_char_p_no,POINTER(UInt32), use_last_error=True)(("CryptSignAndEncryptMessage", windll["CRYPT32"]), ((1, 'pSignPara'),(1, 'pEncryptPara'),(1, 'cRecipientCert'),(1, 'rgpRecipientCert'),(1, 'pbToBeSignedAndEncrypted'),(1, 'cbToBeSignedAndEncrypted'),(1, 'pbSignedAndEncryptedBlob'),(1, 'pcbSignedAndEncryptedBlob'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptDecryptAndVerifyMessageSignature():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPT_DECRYPT_MESSAGE_PARA_head),POINTER(win32more.Security.Cryptography.CRYPT_VERIFY_MESSAGE_PARA_head),UInt32,c_char_p_no,UInt32,c_char_p_no,POINTER(UInt32),POINTER(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)),POINTER(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)), use_last_error=True)(("CryptDecryptAndVerifyMessageSignature", windll["CRYPT32"]), ((1, 'pDecryptPara'),(1, 'pVerifyPara'),(1, 'dwSignerIndex'),(1, 'pbEncryptedBlob'),(1, 'cbEncryptedBlob'),(1, 'pbDecrypted'),(1, 'pcbDecrypted'),(1, 'ppXchgCert'),(1, 'ppSignerCert'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptDecodeMessage():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(win32more.Security.Cryptography.CRYPT_DECRYPT_MESSAGE_PARA_head),POINTER(win32more.Security.Cryptography.CRYPT_VERIFY_MESSAGE_PARA_head),UInt32,c_char_p_no,UInt32,UInt32,POINTER(UInt32),POINTER(UInt32),c_char_p_no,POINTER(UInt32),POINTER(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)),POINTER(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)), use_last_error=True)(("CryptDecodeMessage", windll["CRYPT32"]), ((1, 'dwMsgTypeFlags'),(1, 'pDecryptPara'),(1, 'pVerifyPara'),(1, 'dwSignerIndex'),(1, 'pbEncodedBlob'),(1, 'cbEncodedBlob'),(1, 'dwPrevInnerContentType'),(1, 'pdwMsgType'),(1, 'pdwInnerContentType'),(1, 'pbDecoded'),(1, 'pcbDecoded'),(1, 'ppXchgCert'),(1, 'ppSignerCert'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptHashMessage():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPT_HASH_MESSAGE_PARA_head),win32more.Foundation.BOOL,UInt32,POINTER(c_char_p_no),POINTER(UInt32),c_char_p_no,POINTER(UInt32),c_char_p_no,POINTER(UInt32), use_last_error=True)(("CryptHashMessage", windll["CRYPT32"]), ((1, 'pHashPara'),(1, 'fDetachedHash'),(1, 'cToBeHashed'),(1, 'rgpbToBeHashed'),(1, 'rgcbToBeHashed'),(1, 'pbHashedBlob'),(1, 'pcbHashedBlob'),(1, 'pbComputedHash'),(1, 'pcbComputedHash'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptVerifyMessageHash():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPT_HASH_MESSAGE_PARA_head),c_char_p_no,UInt32,c_char_p_no,POINTER(UInt32),c_char_p_no,POINTER(UInt32), use_last_error=True)(("CryptVerifyMessageHash", windll["CRYPT32"]), ((1, 'pHashPara'),(1, 'pbHashedBlob'),(1, 'cbHashedBlob'),(1, 'pbToBeHashed'),(1, 'pcbToBeHashed'),(1, 'pbComputedHash'),(1, 'pcbComputedHash'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptVerifyDetachedMessageHash():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPT_HASH_MESSAGE_PARA_head),c_char_p_no,UInt32,UInt32,POINTER(c_char_p_no),POINTER(UInt32),c_char_p_no,POINTER(UInt32), use_last_error=True)(("CryptVerifyDetachedMessageHash", windll["CRYPT32"]), ((1, 'pHashPara'),(1, 'pbDetachedHashBlob'),(1, 'cbDetachedHashBlob'),(1, 'cToBeHashed'),(1, 'rgpbToBeHashed'),(1, 'rgcbToBeHashed'),(1, 'pbComputedHash'),(1, 'pcbComputedHash'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptSignMessageWithKey():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPT_KEY_SIGN_MESSAGE_PARA_head),c_char_p_no,UInt32,c_char_p_no,POINTER(UInt32), use_last_error=True)(("CryptSignMessageWithKey", windll["CRYPT32"]), ((1, 'pSignPara'),(1, 'pbToBeSigned'),(1, 'cbToBeSigned'),(1, 'pbSignedBlob'),(1, 'pcbSignedBlob'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptVerifyMessageSignatureWithKey():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPT_KEY_VERIFY_MESSAGE_PARA_head),POINTER(win32more.Security.Cryptography.CERT_PUBLIC_KEY_INFO_head),c_char_p_no,UInt32,c_char_p_no,POINTER(UInt32), use_last_error=True)(("CryptVerifyMessageSignatureWithKey", windll["CRYPT32"]), ((1, 'pVerifyPara'),(1, 'pPublicKeyInfo'),(1, 'pbSignedBlob'),(1, 'cbSignedBlob'),(1, 'pbDecoded'),(1, 'pcbDecoded'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertOpenSystemStoreA():
    try:
        return WINFUNCTYPE(c_void_p,UIntPtr,win32more.Foundation.PSTR, use_last_error=True)(("CertOpenSystemStoreA", windll["CRYPT32"]), ((1, 'hProv'),(1, 'szSubsystemProtocol'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertOpenSystemStoreW():
    try:
        return WINFUNCTYPE(c_void_p,UIntPtr,win32more.Foundation.PWSTR, use_last_error=True)(("CertOpenSystemStoreW", windll["CRYPT32"]), ((1, 'hProv'),(1, 'szSubsystemProtocol'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertOpenSystemStore():
    return win32more.Security.Cryptography.CertOpenSystemStoreW
def _define_CertAddEncodedCertificateToSystemStoreA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,c_char_p_no,UInt32, use_last_error=True)(("CertAddEncodedCertificateToSystemStoreA", windll["CRYPT32"]), ((1, 'szCertStoreName'),(1, 'pbCertEncoded'),(1, 'cbCertEncoded'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertAddEncodedCertificateToSystemStoreW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,c_char_p_no,UInt32, use_last_error=True)(("CertAddEncodedCertificateToSystemStoreW", windll["CRYPT32"]), ((1, 'szCertStoreName'),(1, 'pbCertEncoded'),(1, 'cbCertEncoded'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertAddEncodedCertificateToSystemStore():
    return win32more.Security.Cryptography.CertAddEncodedCertificateToSystemStoreW
def _define_FindCertsByIssuer():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Security.Cryptography.CERT_CHAIN_head),POINTER(UInt32),POINTER(UInt32),c_char_p_no,UInt32,win32more.Foundation.PWSTR,UInt32, use_last_error=False)(("FindCertsByIssuer", windll["WINTRUST"]), ((1, 'pCertChains'),(1, 'pcbCertChains'),(1, 'pcCertChains'),(1, 'pbEncodedIssuerName'),(1, 'cbEncodedIssuerName'),(1, 'pwszPurpose'),(1, 'dwKeySpec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptQueryObject():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Security.Cryptography.CERT_QUERY_OBJECT_TYPE,c_void_p,win32more.Security.Cryptography.CERT_QUERY_CONTENT_TYPE_FLAGS,win32more.Security.Cryptography.CERT_QUERY_FORMAT_TYPE_FLAGS,UInt32,POINTER(win32more.Security.Cryptography.CERT_QUERY_ENCODING_TYPE),POINTER(win32more.Security.Cryptography.CERT_QUERY_CONTENT_TYPE),POINTER(win32more.Security.Cryptography.CERT_QUERY_FORMAT_TYPE),POINTER(c_void_p),POINTER(c_void_p),POINTER(c_void_p), use_last_error=True)(("CryptQueryObject", windll["CRYPT32"]), ((1, 'dwObjectType'),(1, 'pvObject'),(1, 'dwExpectedContentTypeFlags'),(1, 'dwExpectedFormatTypeFlags'),(1, 'dwFlags'),(1, 'pdwMsgAndCertEncodingType'),(1, 'pdwContentType'),(1, 'pdwFormatType'),(1, 'phCertStore'),(1, 'phMsg'),(1, 'ppvContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptMemAlloc():
    try:
        return WINFUNCTYPE(c_void_p,UInt32, use_last_error=False)(("CryptMemAlloc", windll["CRYPT32"]), ((1, 'cbSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptMemRealloc():
    try:
        return WINFUNCTYPE(c_void_p,c_void_p,UInt32, use_last_error=False)(("CryptMemRealloc", windll["CRYPT32"]), ((1, 'pv'),(1, 'cbSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptMemFree():
    try:
        return WINFUNCTYPE(Void,c_void_p, use_last_error=False)(("CryptMemFree", windll["CRYPT32"]), ((1, 'pv'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptCreateAsyncHandle():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(win32more.Security.Cryptography.HCRYPTASYNC), use_last_error=False)(("CryptCreateAsyncHandle", windll["CRYPT32"]), ((1, 'dwFlags'),(1, 'phAsync'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptSetAsyncParam():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Security.Cryptography.HCRYPTASYNC,win32more.Foundation.PSTR,c_void_p,win32more.Security.Cryptography.PFN_CRYPT_ASYNC_PARAM_FREE_FUNC, use_last_error=False)(("CryptSetAsyncParam", windll["CRYPT32"]), ((1, 'hAsync'),(1, 'pszParamOid'),(1, 'pvParam'),(1, 'pfnFree'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptGetAsyncParam():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Security.Cryptography.HCRYPTASYNC,win32more.Foundation.PSTR,POINTER(c_void_p),POINTER(win32more.Security.Cryptography.PFN_CRYPT_ASYNC_PARAM_FREE_FUNC), use_last_error=False)(("CryptGetAsyncParam", windll["CRYPT32"]), ((1, 'hAsync'),(1, 'pszParamOid'),(1, 'ppvParam'),(1, 'ppfnFree'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptCloseAsyncHandle():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Security.Cryptography.HCRYPTASYNC, use_last_error=False)(("CryptCloseAsyncHandle", windll["CRYPT32"]), ((1, 'hAsync'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptRetrieveObjectByUrlA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,UInt32,POINTER(c_void_p),win32more.Security.Cryptography.HCRYPTASYNC,POINTER(win32more.Security.Cryptography.CRYPT_CREDENTIALS_head),c_void_p,POINTER(win32more.Security.Cryptography.CRYPT_RETRIEVE_AUX_INFO_head), use_last_error=False)(("CryptRetrieveObjectByUrlA", windll["CRYPTNET"]), ((1, 'pszUrl'),(1, 'pszObjectOid'),(1, 'dwRetrievalFlags'),(1, 'dwTimeout'),(1, 'ppvObject'),(1, 'hAsyncRetrieve'),(1, 'pCredentials'),(1, 'pvVerify'),(1, 'pAuxInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptRetrieveObjectByUrlW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,win32more.Foundation.PSTR,UInt32,UInt32,POINTER(c_void_p),win32more.Security.Cryptography.HCRYPTASYNC,POINTER(win32more.Security.Cryptography.CRYPT_CREDENTIALS_head),c_void_p,POINTER(win32more.Security.Cryptography.CRYPT_RETRIEVE_AUX_INFO_head), use_last_error=False)(("CryptRetrieveObjectByUrlW", windll["CRYPTNET"]), ((1, 'pszUrl'),(1, 'pszObjectOid'),(1, 'dwRetrievalFlags'),(1, 'dwTimeout'),(1, 'ppvObject'),(1, 'hAsyncRetrieve'),(1, 'pCredentials'),(1, 'pvVerify'),(1, 'pAuxInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptRetrieveObjectByUrl():
    return win32more.Security.Cryptography.CryptRetrieveObjectByUrlW
def _define_CryptInstallCancelRetrieval():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Security.Cryptography.PFN_CRYPT_CANCEL_RETRIEVAL,c_void_p,UInt32,c_void_p, use_last_error=False)(("CryptInstallCancelRetrieval", windll["CRYPTNET"]), ((1, 'pfnCancel'),(1, 'pvArg'),(1, 'dwFlags'),(1, 'pvReserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptUninstallCancelRetrieval():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,c_void_p, use_last_error=False)(("CryptUninstallCancelRetrieval", windll["CRYPTNET"]), ((1, 'dwFlags'),(1, 'pvReserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptGetObjectUrl():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,c_void_p,win32more.Security.Cryptography.CRYPT_GET_URL_FLAGS,POINTER(win32more.Security.Cryptography.CRYPT_URL_ARRAY_head),POINTER(UInt32),POINTER(win32more.Security.Cryptography.CRYPT_URL_INFO_head),POINTER(UInt32),c_void_p, use_last_error=True)(("CryptGetObjectUrl", windll["CRYPTNET"]), ((1, 'pszUrlOid'),(1, 'pvPara'),(1, 'dwFlags'),(1, 'pUrlArray'),(1, 'pcbUrlArray'),(1, 'pUrlInfo'),(1, 'pcbUrlInfo'),(1, 'pvReserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertCreateSelfSignCertificate():
    try:
        return WINFUNCTYPE(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),UIntPtr,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head),win32more.Security.Cryptography.CERT_CREATE_SELFSIGN_FLAGS,POINTER(win32more.Security.Cryptography.CRYPT_KEY_PROV_INFO_head),POINTER(win32more.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER_head),POINTER(win32more.Foundation.SYSTEMTIME_head),POINTER(win32more.Foundation.SYSTEMTIME_head),POINTER(win32more.Security.Cryptography.CERT_EXTENSIONS_head), use_last_error=True)(("CertCreateSelfSignCertificate", windll["CRYPT32"]), ((1, 'hCryptProvOrNCryptKey'),(1, 'pSubjectIssuerBlob'),(1, 'dwFlags'),(1, 'pKeyProvInfo'),(1, 'pSignatureAlgorithm'),(1, 'pStartTime'),(1, 'pEndTime'),(1, 'pExtensions'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptGetKeyIdentifierProperty():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head),UInt32,UInt32,win32more.Foundation.PWSTR,c_void_p,c_void_p,POINTER(UInt32), use_last_error=True)(("CryptGetKeyIdentifierProperty", windll["CRYPT32"]), ((1, 'pKeyIdentifier'),(1, 'dwPropId'),(1, 'dwFlags'),(1, 'pwszComputerName'),(1, 'pvReserved'),(1, 'pvData'),(1, 'pcbData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptSetKeyIdentifierProperty():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head),UInt32,UInt32,win32more.Foundation.PWSTR,c_void_p,c_void_p, use_last_error=True)(("CryptSetKeyIdentifierProperty", windll["CRYPT32"]), ((1, 'pKeyIdentifier'),(1, 'dwPropId'),(1, 'dwFlags'),(1, 'pwszComputerName'),(1, 'pvReserved'),(1, 'pvData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptEnumKeyIdentifierProperties():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head),UInt32,UInt32,win32more.Foundation.PWSTR,c_void_p,c_void_p,win32more.Security.Cryptography.PFN_CRYPT_ENUM_KEYID_PROP, use_last_error=True)(("CryptEnumKeyIdentifierProperties", windll["CRYPT32"]), ((1, 'pKeyIdentifier'),(1, 'dwPropId'),(1, 'dwFlags'),(1, 'pwszComputerName'),(1, 'pvReserved'),(1, 'pvArg'),(1, 'pfnEnum'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptCreateKeyIdentifierFromCSP():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PSTR,POINTER(win32more.Security.Cryptography.PUBLICKEYSTRUC_head),UInt32,UInt32,c_void_p,c_char_p_no,POINTER(UInt32), use_last_error=True)(("CryptCreateKeyIdentifierFromCSP", windll["CRYPT32"]), ((1, 'dwCertEncodingType'),(1, 'pszPubKeyOID'),(1, 'pPubKeyStruc'),(1, 'cbPubKeyStruc'),(1, 'dwFlags'),(1, 'pvReserved'),(1, 'pbHash'),(1, 'pcbHash'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertCreateCertificateChainEngine():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CERT_CHAIN_ENGINE_CONFIG_head),POINTER(win32more.Security.Cryptography.HCERTCHAINENGINE), use_last_error=True)(("CertCreateCertificateChainEngine", windll["CRYPT32"]), ((1, 'pConfig'),(1, 'phChainEngine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertFreeCertificateChainEngine():
    try:
        return WINFUNCTYPE(Void,win32more.Security.Cryptography.HCERTCHAINENGINE, use_last_error=False)(("CertFreeCertificateChainEngine", windll["CRYPT32"]), ((1, 'hChainEngine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertResyncCertificateChainEngine():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Security.Cryptography.HCERTCHAINENGINE, use_last_error=True)(("CertResyncCertificateChainEngine", windll["CRYPT32"]), ((1, 'hChainEngine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertGetCertificateChain():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Security.Cryptography.HCERTCHAINENGINE,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),POINTER(win32more.Foundation.FILETIME_head),c_void_p,POINTER(win32more.Security.Cryptography.CERT_CHAIN_PARA_head),UInt32,c_void_p,POINTER(POINTER(win32more.Security.Cryptography.CERT_CHAIN_CONTEXT_head)), use_last_error=True)(("CertGetCertificateChain", windll["CRYPT32"]), ((1, 'hChainEngine'),(1, 'pCertContext'),(1, 'pTime'),(1, 'hAdditionalStore'),(1, 'pChainPara'),(1, 'dwFlags'),(1, 'pvReserved'),(1, 'ppChainContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertFreeCertificateChain():
    try:
        return WINFUNCTYPE(Void,POINTER(win32more.Security.Cryptography.CERT_CHAIN_CONTEXT_head), use_last_error=False)(("CertFreeCertificateChain", windll["CRYPT32"]), ((1, 'pChainContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertDuplicateCertificateChain():
    try:
        return WINFUNCTYPE(POINTER(win32more.Security.Cryptography.CERT_CHAIN_CONTEXT_head),POINTER(win32more.Security.Cryptography.CERT_CHAIN_CONTEXT_head), use_last_error=False)(("CertDuplicateCertificateChain", windll["CRYPT32"]), ((1, 'pChainContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertFindChainInStore():
    try:
        return WINFUNCTYPE(POINTER(win32more.Security.Cryptography.CERT_CHAIN_CONTEXT_head),c_void_p,UInt32,win32more.Security.Cryptography.CERT_FIND_CHAIN_IN_STORE_FLAGS,UInt32,c_void_p,POINTER(win32more.Security.Cryptography.CERT_CHAIN_CONTEXT_head), use_last_error=False)(("CertFindChainInStore", windll["CRYPT32"]), ((1, 'hCertStore'),(1, 'dwCertEncodingType'),(1, 'dwFindFlags'),(1, 'dwFindType'),(1, 'pvFindPara'),(1, 'pPrevChainContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertVerifyCertificateChainPolicy():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,POINTER(win32more.Security.Cryptography.CERT_CHAIN_CONTEXT_head),POINTER(win32more.Security.Cryptography.CERT_CHAIN_POLICY_PARA_head),POINTER(win32more.Security.Cryptography.CERT_CHAIN_POLICY_STATUS_head), use_last_error=False)(("CertVerifyCertificateChainPolicy", windll["CRYPT32"]), ((1, 'pszPolicyOID'),(1, 'pChainContext'),(1, 'pPolicyPara'),(1, 'pPolicyStatus'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptStringToBinaryA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Byte),UInt32,win32more.Security.Cryptography.CRYPT_STRING,c_char_p_no,POINTER(UInt32),POINTER(UInt32),POINTER(UInt32), use_last_error=True)(("CryptStringToBinaryA", windll["CRYPT32"]), ((1, 'pszString'),(1, 'cchString'),(1, 'dwFlags'),(1, 'pbBinary'),(1, 'pcbBinary'),(1, 'pdwSkip'),(1, 'pdwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptStringToBinaryW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Char),UInt32,win32more.Security.Cryptography.CRYPT_STRING,c_char_p_no,POINTER(UInt32),POINTER(UInt32),POINTER(UInt32), use_last_error=True)(("CryptStringToBinaryW", windll["CRYPT32"]), ((1, 'pszString'),(1, 'cchString'),(1, 'dwFlags'),(1, 'pbBinary'),(1, 'pcbBinary'),(1, 'pdwSkip'),(1, 'pdwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptStringToBinary():
    return win32more.Security.Cryptography.CryptStringToBinaryW
def _define_CryptBinaryToStringA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_char_p_no,UInt32,win32more.Security.Cryptography.CRYPT_STRING,POINTER(Byte),POINTER(UInt32), use_last_error=False)(("CryptBinaryToStringA", windll["CRYPT32"]), ((1, 'pbBinary'),(1, 'cbBinary'),(1, 'dwFlags'),(1, 'pszString'),(1, 'pcchString'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptBinaryToStringW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_char_p_no,UInt32,win32more.Security.Cryptography.CRYPT_STRING,POINTER(Char),POINTER(UInt32), use_last_error=False)(("CryptBinaryToStringW", windll["CRYPT32"]), ((1, 'pbBinary'),(1, 'cbBinary'),(1, 'dwFlags'),(1, 'pszString'),(1, 'pcchString'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptBinaryToString():
    return win32more.Security.Cryptography.CryptBinaryToStringW
def _define_PFXImportCertStore():
    try:
        return WINFUNCTYPE(c_void_p,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head),win32more.Foundation.PWSTR,win32more.Security.Cryptography.CRYPT_KEY_FLAGS, use_last_error=True)(("PFXImportCertStore", windll["CRYPT32"]), ((1, 'pPFX'),(1, 'szPassword'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_PFXIsPFXBlob():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head), use_last_error=False)(("PFXIsPFXBlob", windll["CRYPT32"]), ((1, 'pPFX'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_PFXVerifyPassword():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head),win32more.Foundation.PWSTR,UInt32, use_last_error=False)(("PFXVerifyPassword", windll["CRYPT32"]), ((1, 'pPFX'),(1, 'szPassword'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_PFXExportCertStoreEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head),win32more.Foundation.PWSTR,c_void_p,UInt32, use_last_error=True)(("PFXExportCertStoreEx", windll["CRYPT32"]), ((1, 'hStore'),(1, 'pPFX'),(1, 'szPassword'),(1, 'pvPara'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_PFXExportCertStore():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head),win32more.Foundation.PWSTR,UInt32, use_last_error=True)(("PFXExportCertStore", windll["CRYPT32"]), ((1, 'hStore'),(1, 'pPFX'),(1, 'szPassword'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertOpenServerOcspResponse():
    try:
        return WINFUNCTYPE(c_void_p,POINTER(win32more.Security.Cryptography.CERT_CHAIN_CONTEXT_head),UInt32,POINTER(win32more.Security.Cryptography.CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_head), use_last_error=True)(("CertOpenServerOcspResponse", windll["CRYPT32"]), ((1, 'pChainContext'),(1, 'dwFlags'),(1, 'pOpenPara'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertAddRefServerOcspResponse():
    try:
        return WINFUNCTYPE(Void,c_void_p, use_last_error=False)(("CertAddRefServerOcspResponse", windll["CRYPT32"]), ((1, 'hServerOcspResponse'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertCloseServerOcspResponse():
    try:
        return WINFUNCTYPE(Void,c_void_p,UInt32, use_last_error=False)(("CertCloseServerOcspResponse", windll["CRYPT32"]), ((1, 'hServerOcspResponse'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertGetServerOcspResponseContext():
    try:
        return WINFUNCTYPE(POINTER(win32more.Security.Cryptography.CERT_SERVER_OCSP_RESPONSE_CONTEXT_head),c_void_p,UInt32,c_void_p, use_last_error=False)(("CertGetServerOcspResponseContext", windll["CRYPT32"]), ((1, 'hServerOcspResponse'),(1, 'dwFlags'),(1, 'pvReserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertAddRefServerOcspResponseContext():
    try:
        return WINFUNCTYPE(Void,POINTER(win32more.Security.Cryptography.CERT_SERVER_OCSP_RESPONSE_CONTEXT_head), use_last_error=False)(("CertAddRefServerOcspResponseContext", windll["CRYPT32"]), ((1, 'pServerOcspResponseContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertFreeServerOcspResponseContext():
    try:
        return WINFUNCTYPE(Void,POINTER(win32more.Security.Cryptography.CERT_SERVER_OCSP_RESPONSE_CONTEXT_head), use_last_error=False)(("CertFreeServerOcspResponseContext", windll["CRYPT32"]), ((1, 'pServerOcspResponseContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertRetrieveLogoOrBiometricInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head),win32more.Foundation.PSTR,UInt32,UInt32,UInt32,c_void_p,POINTER(c_char_p_no),POINTER(UInt32),POINTER(win32more.Foundation.PWSTR), use_last_error=True)(("CertRetrieveLogoOrBiometricInfo", windll["CRYPT32"]), ((1, 'pCertContext'),(1, 'lpszLogoOrBiometricType'),(1, 'dwRetrievalFlags'),(1, 'dwTimeout'),(1, 'dwFlags'),(1, 'pvReserved'),(1, 'ppbData'),(1, 'pcbData'),(1, 'ppwszMimeType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertSelectCertificateChains():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),UInt32,POINTER(win32more.Security.Cryptography.CERT_SELECT_CHAIN_PARA_head),UInt32,POINTER(win32more.Security.Cryptography.CERT_SELECT_CRITERIA),c_void_p,POINTER(UInt32),POINTER(POINTER(POINTER(win32more.Security.Cryptography.CERT_CHAIN_CONTEXT_head))), use_last_error=True)(("CertSelectCertificateChains", windll["CRYPT32"]), ((1, 'pSelectionContext'),(1, 'dwFlags'),(1, 'pChainParameters'),(1, 'cCriteria'),(1, 'rgpCriteria'),(1, 'hStore'),(1, 'pcSelection'),(1, 'pprgpSelection'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertFreeCertificateChainList():
    try:
        return WINFUNCTYPE(Void,POINTER(POINTER(win32more.Security.Cryptography.CERT_CHAIN_CONTEXT_head)), use_last_error=False)(("CertFreeCertificateChainList", windll["CRYPT32"]), ((1, 'prgpSelection'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptRetrieveTimeStamp():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,UInt32,UInt32,win32more.Foundation.PSTR,POINTER(win32more.Security.Cryptography.CRYPT_TIMESTAMP_PARA_head),c_char_p_no,UInt32,POINTER(POINTER(win32more.Security.Cryptography.CRYPT_TIMESTAMP_CONTEXT_head)),POINTER(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)),POINTER(c_void_p), use_last_error=True)(("CryptRetrieveTimeStamp", windll["CRYPT32"]), ((1, 'wszUrl'),(1, 'dwRetrievalFlags'),(1, 'dwTimeout'),(1, 'pszHashId'),(1, 'pPara'),(1, 'pbData'),(1, 'cbData'),(1, 'ppTsContext'),(1, 'ppTsSigner'),(1, 'phStore'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptVerifyTimeStampSignature():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_char_p_no,UInt32,c_char_p_no,UInt32,c_void_p,POINTER(POINTER(win32more.Security.Cryptography.CRYPT_TIMESTAMP_CONTEXT_head)),POINTER(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)),POINTER(c_void_p), use_last_error=True)(("CryptVerifyTimeStampSignature", windll["CRYPT32"]), ((1, 'pbTSContentInfo'),(1, 'cbTSContentInfo'),(1, 'pbData'),(1, 'cbData'),(1, 'hAdditionalStore'),(1, 'ppTsContext'),(1, 'ppTsSigner'),(1, 'phStore'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CertIsWeakHash():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PWSTR,UInt32,POINTER(win32more.Security.Cryptography.CERT_CHAIN_CONTEXT_head),POINTER(win32more.Foundation.FILETIME_head),win32more.Foundation.PWSTR, use_last_error=False)(("CertIsWeakHash", windll["CRYPT32"]), ((1, 'dwHashUseType'),(1, 'pwszCNGHashAlgid'),(1, 'dwChainFlags'),(1, 'pSignerChainContext'),(1, 'pTimeStamp'),(1, 'pwszFileName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptProtectData():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head),win32more.Foundation.PWSTR,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head),c_void_p,POINTER(win32more.Security.Cryptography.CRYPTPROTECT_PROMPTSTRUCT_head),UInt32,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head), use_last_error=True)(("CryptProtectData", windll["CRYPT32"]), ((1, 'pDataIn'),(1, 'szDataDescr'),(1, 'pOptionalEntropy'),(1, 'pvReserved'),(1, 'pPromptStruct'),(1, 'dwFlags'),(1, 'pDataOut'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptUnprotectData():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head),POINTER(win32more.Foundation.PWSTR),POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head),c_void_p,POINTER(win32more.Security.Cryptography.CRYPTPROTECT_PROMPTSTRUCT_head),UInt32,POINTER(win32more.Security.Cryptography.CRYPTOAPI_BLOB_head), use_last_error=True)(("CryptUnprotectData", windll["CRYPT32"]), ((1, 'pDataIn'),(1, 'ppszDataDescr'),(1, 'pOptionalEntropy'),(1, 'pvReserved'),(1, 'pPromptStruct'),(1, 'dwFlags'),(1, 'pDataOut'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptUpdateProtectedState():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSID,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32),POINTER(UInt32), use_last_error=True)(("CryptUpdateProtectedState", windll["CRYPT32"]), ((1, 'pOldSid'),(1, 'pwszOldPassword'),(1, 'dwFlags'),(1, 'pdwSuccessCount'),(1, 'pdwFailureCount'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptProtectMemory():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,UInt32, use_last_error=True)(("CryptProtectMemory", windll["CRYPT32"]), ((1, 'pDataIn'),(1, 'cbDataIn'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptUnprotectMemory():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,UInt32, use_last_error=True)(("CryptUnprotectMemory", windll["CRYPT32"]), ((1, 'pDataIn'),(1, 'cbDataIn'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptRegisterProtectionDescriptorName():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32, use_last_error=False)(("NCryptRegisterProtectionDescriptorName", windll["ncrypt"]), ((1, 'pwszName'),(1, 'pwszDescriptorString'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptQueryProtectionDescriptorName():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PWSTR,POINTER(Char),POINTER(UIntPtr),UInt32, use_last_error=False)(("NCryptQueryProtectionDescriptorName", windll["ncrypt"]), ((1, 'pwszName'),(1, 'pwszDescriptorString'),(1, 'pcDescriptorString'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptCreateProtectionDescriptor():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PWSTR,UInt32,POINTER(win32more.Security.NCRYPT_DESCRIPTOR_HANDLE), use_last_error=False)(("NCryptCreateProtectionDescriptor", windll["ncrypt"]), ((1, 'pwszDescriptorString'),(1, 'dwFlags'),(1, 'phDescriptor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptCloseProtectionDescriptor():
    try:
        return WINFUNCTYPE(Int32,win32more.Security.NCRYPT_DESCRIPTOR_HANDLE, use_last_error=False)(("NCryptCloseProtectionDescriptor", windll["ncrypt"]), ((1, 'hDescriptor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptGetProtectionDescriptorInfo():
    try:
        return WINFUNCTYPE(Int32,win32more.Security.NCRYPT_DESCRIPTOR_HANDLE,POINTER(win32more.Security.Cryptography.NCRYPT_ALLOC_PARA_head),UInt32,POINTER(c_void_p), use_last_error=False)(("NCryptGetProtectionDescriptorInfo", windll["ncrypt"]), ((1, 'hDescriptor'),(1, 'pMemPara'),(1, 'dwInfoType'),(1, 'ppvInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptProtectSecret():
    try:
        return WINFUNCTYPE(Int32,win32more.Security.NCRYPT_DESCRIPTOR_HANDLE,UInt32,c_char_p_no,UInt32,POINTER(win32more.Security.Cryptography.NCRYPT_ALLOC_PARA_head),win32more.Foundation.HWND,POINTER(c_char_p_no),POINTER(UInt32), use_last_error=False)(("NCryptProtectSecret", windll["ncrypt"]), ((1, 'hDescriptor'),(1, 'dwFlags'),(1, 'pbData'),(1, 'cbData'),(1, 'pMemPara'),(1, 'hWnd'),(1, 'ppbProtectedBlob'),(1, 'pcbProtectedBlob'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptUnprotectSecret():
    try:
        return WINFUNCTYPE(Int32,POINTER(win32more.Security.NCRYPT_DESCRIPTOR_HANDLE),win32more.Security.Cryptography.NCRYPT_FLAGS,c_char_p_no,UInt32,POINTER(win32more.Security.Cryptography.NCRYPT_ALLOC_PARA_head),win32more.Foundation.HWND,POINTER(c_char_p_no),POINTER(UInt32), use_last_error=False)(("NCryptUnprotectSecret", windll["ncrypt"]), ((1, 'phDescriptor'),(1, 'dwFlags'),(1, 'pbProtectedBlob'),(1, 'cbProtectedBlob'),(1, 'pMemPara'),(1, 'hWnd'),(1, 'ppbData'),(1, 'pcbData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptStreamOpenToProtect():
    try:
        return WINFUNCTYPE(Int32,win32more.Security.NCRYPT_DESCRIPTOR_HANDLE,UInt32,win32more.Foundation.HWND,POINTER(win32more.Security.Cryptography.NCRYPT_PROTECT_STREAM_INFO_head),POINTER(win32more.Security.NCRYPT_STREAM_HANDLE), use_last_error=False)(("NCryptStreamOpenToProtect", windll["ncrypt"]), ((1, 'hDescriptor'),(1, 'dwFlags'),(1, 'hWnd'),(1, 'pStreamInfo'),(1, 'phStream'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptStreamOpenToUnprotect():
    try:
        return WINFUNCTYPE(Int32,POINTER(win32more.Security.Cryptography.NCRYPT_PROTECT_STREAM_INFO_head),UInt32,win32more.Foundation.HWND,POINTER(win32more.Security.NCRYPT_STREAM_HANDLE), use_last_error=False)(("NCryptStreamOpenToUnprotect", windll["ncrypt"]), ((1, 'pStreamInfo'),(1, 'dwFlags'),(1, 'hWnd'),(1, 'phStream'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptStreamOpenToUnprotectEx():
    try:
        return WINFUNCTYPE(Int32,POINTER(win32more.Security.Cryptography.NCRYPT_PROTECT_STREAM_INFO_EX_head),UInt32,win32more.Foundation.HWND,POINTER(win32more.Security.NCRYPT_STREAM_HANDLE), use_last_error=False)(("NCryptStreamOpenToUnprotectEx", windll["ncrypt"]), ((1, 'pStreamInfo'),(1, 'dwFlags'),(1, 'hWnd'),(1, 'phStream'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptStreamUpdate():
    try:
        return WINFUNCTYPE(Int32,win32more.Security.NCRYPT_STREAM_HANDLE,c_char_p_no,UIntPtr,win32more.Foundation.BOOL, use_last_error=False)(("NCryptStreamUpdate", windll["ncrypt"]), ((1, 'hStream'),(1, 'pbData'),(1, 'cbData'),(1, 'fFinal'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NCryptStreamClose():
    try:
        return WINFUNCTYPE(Int32,win32more.Security.NCRYPT_STREAM_HANDLE, use_last_error=False)(("NCryptStreamClose", windll["ncrypt"]), ((1, 'hStream'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptXmlClose():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,c_void_p, use_last_error=False)(("CryptXmlClose", windll["CRYPTXML"]), ((1, 'hCryptXml'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptXmlGetTransforms():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(POINTER(win32more.Security.Cryptography.CRYPT_XML_TRANSFORM_CHAIN_CONFIG_head)), use_last_error=False)(("CryptXmlGetTransforms", windll["CRYPTXML"]), ((1, 'ppConfig'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptXmlOpenToEncode():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Security.Cryptography.CRYPT_XML_TRANSFORM_CHAIN_CONFIG_head),win32more.Security.Cryptography.CRYPT_XML_FLAGS,win32more.Foundation.PWSTR,POINTER(win32more.Security.Cryptography.CRYPT_XML_PROPERTY),UInt32,POINTER(win32more.Security.Cryptography.CRYPT_XML_BLOB_head),POINTER(c_void_p), use_last_error=False)(("CryptXmlOpenToEncode", windll["CRYPTXML"]), ((1, 'pConfig'),(1, 'dwFlags'),(1, 'wszId'),(1, 'rgProperty'),(1, 'cProperty'),(1, 'pEncoded'),(1, 'phSignature'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptXmlOpenToDecode():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Security.Cryptography.CRYPT_XML_TRANSFORM_CHAIN_CONFIG_head),win32more.Security.Cryptography.CRYPT_XML_FLAGS,POINTER(win32more.Security.Cryptography.CRYPT_XML_PROPERTY),UInt32,POINTER(win32more.Security.Cryptography.CRYPT_XML_BLOB_head),POINTER(c_void_p), use_last_error=False)(("CryptXmlOpenToDecode", windll["CRYPTXML"]), ((1, 'pConfig'),(1, 'dwFlags'),(1, 'rgProperty'),(1, 'cProperty'),(1, 'pEncoded'),(1, 'phCryptXml'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptXmlAddObject():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,c_void_p,UInt32,POINTER(win32more.Security.Cryptography.CRYPT_XML_PROPERTY),UInt32,POINTER(win32more.Security.Cryptography.CRYPT_XML_BLOB_head),POINTER(POINTER(win32more.Security.Cryptography.CRYPT_XML_OBJECT_head)), use_last_error=False)(("CryptXmlAddObject", windll["CRYPTXML"]), ((1, 'hSignatureOrObject'),(1, 'dwFlags'),(1, 'rgProperty'),(1, 'cProperty'),(1, 'pEncoded'),(1, 'ppObject'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptXmlCreateReference():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,c_void_p,UInt32,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,POINTER(win32more.Security.Cryptography.CRYPT_XML_ALGORITHM_head),UInt32,POINTER(win32more.Security.Cryptography.CRYPT_XML_ALGORITHM),POINTER(c_void_p), use_last_error=False)(("CryptXmlCreateReference", windll["CRYPTXML"]), ((1, 'hCryptXml'),(1, 'dwFlags'),(1, 'wszId'),(1, 'wszURI'),(1, 'wszType'),(1, 'pDigestMethod'),(1, 'cTransform'),(1, 'rgTransform'),(1, 'phReference'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptXmlDigestReference():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,c_void_p,UInt32,POINTER(win32more.Security.Cryptography.CRYPT_XML_DATA_PROVIDER_head), use_last_error=False)(("CryptXmlDigestReference", windll["CRYPTXML"]), ((1, 'hReference'),(1, 'dwFlags'),(1, 'pDataProviderIn'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptXmlSetHMACSecret():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,c_void_p,c_char_p_no,UInt32, use_last_error=False)(("CryptXmlSetHMACSecret", windll["CRYPTXML"]), ((1, 'hSignature'),(1, 'pbSecret'),(1, 'cbSecret'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptXmlSign():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,c_void_p,UIntPtr,win32more.Security.Cryptography.CERT_KEY_SPEC,win32more.Security.Cryptography.CRYPT_XML_FLAGS,win32more.Security.Cryptography.CRYPT_XML_KEYINFO_SPEC,c_void_p,POINTER(win32more.Security.Cryptography.CRYPT_XML_ALGORITHM_head),POINTER(win32more.Security.Cryptography.CRYPT_XML_ALGORITHM_head), use_last_error=False)(("CryptXmlSign", windll["CRYPTXML"]), ((1, 'hSignature'),(1, 'hKey'),(1, 'dwKeySpec'),(1, 'dwFlags'),(1, 'dwKeyInfoSpec'),(1, 'pvKeyInfoSpec'),(1, 'pSignatureMethod'),(1, 'pCanonicalization'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptXmlImportPublicKey():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Security.Cryptography.CRYPT_XML_FLAGS,POINTER(win32more.Security.Cryptography.CRYPT_XML_KEY_VALUE_head),POINTER(win32more.Security.Cryptography.BCRYPT_KEY_HANDLE), use_last_error=False)(("CryptXmlImportPublicKey", windll["CRYPTXML"]), ((1, 'dwFlags'),(1, 'pKeyValue'),(1, 'phKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptXmlVerifySignature():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,c_void_p,win32more.Security.Cryptography.BCRYPT_KEY_HANDLE,win32more.Security.Cryptography.CRYPT_XML_FLAGS, use_last_error=False)(("CryptXmlVerifySignature", windll["CRYPTXML"]), ((1, 'hSignature'),(1, 'hKey'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptXmlGetDocContext():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,c_void_p,POINTER(POINTER(win32more.Security.Cryptography.CRYPT_XML_DOC_CTXT_head)), use_last_error=False)(("CryptXmlGetDocContext", windll["CRYPTXML"]), ((1, 'hCryptXml'),(1, 'ppStruct'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptXmlGetSignature():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,c_void_p,POINTER(POINTER(win32more.Security.Cryptography.CRYPT_XML_SIGNATURE_head)), use_last_error=False)(("CryptXmlGetSignature", windll["CRYPTXML"]), ((1, 'hCryptXml'),(1, 'ppStruct'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptXmlGetReference():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,c_void_p,POINTER(POINTER(win32more.Security.Cryptography.CRYPT_XML_REFERENCE_head)), use_last_error=False)(("CryptXmlGetReference", windll["CRYPTXML"]), ((1, 'hCryptXml'),(1, 'ppStruct'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptXmlGetStatus():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,c_void_p,POINTER(win32more.Security.Cryptography.CRYPT_XML_STATUS_head), use_last_error=False)(("CryptXmlGetStatus", windll["CRYPTXML"]), ((1, 'hCryptXml'),(1, 'pStatus'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptXmlEncode():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,c_void_p,win32more.Security.Cryptography.CRYPT_XML_CHARSET,POINTER(win32more.Security.Cryptography.CRYPT_XML_PROPERTY),UInt32,c_void_p,win32more.Security.Cryptography.PFN_CRYPT_XML_WRITE_CALLBACK, use_last_error=False)(("CryptXmlEncode", windll["CRYPTXML"]), ((1, 'hCryptXml'),(1, 'dwCharset'),(1, 'rgProperty'),(1, 'cProperty'),(1, 'pvCallbackState'),(1, 'pfnWrite'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptXmlGetAlgorithmInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Security.Cryptography.CRYPT_XML_ALGORITHM_head),win32more.Security.Cryptography.CRYPT_XML_FLAGS,POINTER(POINTER(win32more.Security.Cryptography.CRYPT_XML_ALGORITHM_INFO_head)), use_last_error=False)(("CryptXmlGetAlgorithmInfo", windll["CRYPTXML"]), ((1, 'pXmlAlgorithm'),(1, 'dwFlags'),(1, 'ppAlgInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptXmlFindAlgorithmInfo():
    try:
        return WINFUNCTYPE(POINTER(win32more.Security.Cryptography.CRYPT_XML_ALGORITHM_INFO_head),UInt32,c_void_p,UInt32,UInt32, use_last_error=False)(("CryptXmlFindAlgorithmInfo", windll["CRYPTXML"]), ((1, 'dwFindByType'),(1, 'pvFindBy'),(1, 'dwGroupId'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CryptXmlEnumAlgorithmInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,c_void_p,win32more.Security.Cryptography.PFN_CRYPT_XML_ENUM_ALG_INFO, use_last_error=False)(("CryptXmlEnumAlgorithmInfo", windll["CRYPTXML"]), ((1, 'dwGroupId'),(1, 'dwFlags'),(1, 'pvArg'),(1, 'pfnEnumAlgInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetToken():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Security.Cryptography.POLICY_ELEMENT),POINTER(POINTER(win32more.Security.Cryptography.GENERIC_XML_TOKEN_head)),POINTER(POINTER(win32more.Security.Cryptography.INFORMATIONCARD_CRYPTO_HANDLE_head)), use_last_error=False)(("GetToken", windll["infocardapi"]), ((1, 'cPolicyChain'),(1, 'pPolicyChain'),(1, 'securityToken'),(1, 'phProofTokenCrypto'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ManageCardSpace():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT, use_last_error=False)(("ManageCardSpace", windll["infocardapi"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_ImportInformationCard():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR, use_last_error=False)(("ImportInformationCard", windll["infocardapi"]), ((1, 'fileName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_Encrypt():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Security.Cryptography.INFORMATIONCARD_CRYPTO_HANDLE_head),win32more.Foundation.BOOL,UInt32,c_char_p_no,POINTER(UInt32),POINTER(c_char_p_no), use_last_error=False)(("Encrypt", windll["infocardapi"]), ((1, 'hCrypto'),(1, 'fOAEP'),(1, 'cbInData'),(1, 'pInData'),(1, 'pcbOutData'),(1, 'ppOutData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_Decrypt():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Security.Cryptography.INFORMATIONCARD_CRYPTO_HANDLE_head),win32more.Foundation.BOOL,UInt32,c_char_p_no,POINTER(UInt32),POINTER(c_char_p_no), use_last_error=False)(("Decrypt", windll["infocardapi"]), ((1, 'hCrypto'),(1, 'fOAEP'),(1, 'cbInData'),(1, 'pInData'),(1, 'pcbOutData'),(1, 'ppOutData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SignHash():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Security.Cryptography.INFORMATIONCARD_CRYPTO_HANDLE_head),UInt32,c_char_p_no,win32more.Foundation.PWSTR,POINTER(UInt32),POINTER(c_char_p_no), use_last_error=False)(("SignHash", windll["infocardapi"]), ((1, 'hCrypto'),(1, 'cbHash'),(1, 'pHash'),(1, 'hashAlgOid'),(1, 'pcbSig'),(1, 'ppSig'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_VerifyHash():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Security.Cryptography.INFORMATIONCARD_CRYPTO_HANDLE_head),UInt32,c_char_p_no,win32more.Foundation.PWSTR,UInt32,c_char_p_no,POINTER(win32more.Foundation.BOOL), use_last_error=False)(("VerifyHash", windll["infocardapi"]), ((1, 'hCrypto'),(1, 'cbHash'),(1, 'pHash'),(1, 'hashAlgOid'),(1, 'cbSig'),(1, 'pSig'),(1, 'pfVerified'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetCryptoTransform():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Security.Cryptography.INFORMATIONCARD_CRYPTO_HANDLE_head),UInt32,win32more.Security.Cryptography.PaddingMode,UInt32,win32more.Security.Cryptography.Direction,UInt32,c_char_p_no,POINTER(POINTER(win32more.Security.Cryptography.INFORMATIONCARD_CRYPTO_HANDLE_head)), use_last_error=False)(("GetCryptoTransform", windll["infocardapi"]), ((1, 'hSymmetricCrypto'),(1, 'mode'),(1, 'padding'),(1, 'feedbackSize'),(1, 'direction'),(1, 'cbIV'),(1, 'pIV'),(1, 'pphTransform'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetKeyedHash():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Security.Cryptography.INFORMATIONCARD_CRYPTO_HANDLE_head),POINTER(POINTER(win32more.Security.Cryptography.INFORMATIONCARD_CRYPTO_HANDLE_head)), use_last_error=False)(("GetKeyedHash", windll["infocardapi"]), ((1, 'hSymmetricCrypto'),(1, 'pphHash'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_TransformBlock():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Security.Cryptography.INFORMATIONCARD_CRYPTO_HANDLE_head),UInt32,c_char_p_no,POINTER(UInt32),POINTER(c_char_p_no), use_last_error=False)(("TransformBlock", windll["infocardapi"]), ((1, 'hCrypto'),(1, 'cbInData'),(1, 'pInData'),(1, 'pcbOutData'),(1, 'ppOutData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_TransformFinalBlock():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Security.Cryptography.INFORMATIONCARD_CRYPTO_HANDLE_head),UInt32,c_char_p_no,POINTER(UInt32),POINTER(c_char_p_no), use_last_error=False)(("TransformFinalBlock", windll["infocardapi"]), ((1, 'hCrypto'),(1, 'cbInData'),(1, 'pInData'),(1, 'pcbOutData'),(1, 'ppOutData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_HashCore():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Security.Cryptography.INFORMATIONCARD_CRYPTO_HANDLE_head),UInt32,c_char_p_no, use_last_error=False)(("HashCore", windll["infocardapi"]), ((1, 'hCrypto'),(1, 'cbInData'),(1, 'pInData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_HashFinal():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Security.Cryptography.INFORMATIONCARD_CRYPTO_HANDLE_head),UInt32,c_char_p_no,POINTER(UInt32),POINTER(c_char_p_no), use_last_error=False)(("HashFinal", windll["infocardapi"]), ((1, 'hCrypto'),(1, 'cbInData'),(1, 'pInData'),(1, 'pcbOutData'),(1, 'ppOutData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FreeToken():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Security.Cryptography.GENERIC_XML_TOKEN_head), use_last_error=False)(("FreeToken", windll["infocardapi"]), ((1, 'pAllocMemory'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CloseCryptoHandle():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Security.Cryptography.INFORMATIONCARD_CRYPTO_HANDLE_head), use_last_error=False)(("CloseCryptoHandle", windll["infocardapi"]), ((1, 'hCrypto'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GenerateDerivedKey():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Security.Cryptography.INFORMATIONCARD_CRYPTO_HANDLE_head),UInt32,c_char_p_no,UInt32,c_char_p_no,UInt32,UInt32,win32more.Foundation.PWSTR,POINTER(UInt32),POINTER(c_char_p_no), use_last_error=False)(("GenerateDerivedKey", windll["infocardapi"]), ((1, 'hCrypto'),(1, 'cbLabel'),(1, 'pLabel'),(1, 'cbNonce'),(1, 'pNonce'),(1, 'derivedKeyLength'),(1, 'offset'),(1, 'algId'),(1, 'pcbKey'),(1, 'ppKey'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetBrowserToken():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_void_p,POINTER(UInt32),POINTER(c_char_p_no), use_last_error=False)(("GetBrowserToken", windll["infocardapi"]), ((1, 'dwParamType'),(1, 'pParam'),(1, 'pcbToken'),(1, 'ppToken'),))
    except (FileNotFoundError, AttributeError):
        return None
__all__ = [
    "CERT_COMPARE_SHIFT",
    "BCRYPT_OBJECT_ALIGNMENT",
    "KDF_HASH_ALGORITHM",
    "KDF_SECRET_PREPEND",
    "KDF_SECRET_APPEND",
    "KDF_HMAC_KEY",
    "KDF_TLS_PRF_LABEL",
    "KDF_TLS_PRF_SEED",
    "KDF_SECRET_HANDLE",
    "KDF_TLS_PRF_PROTOCOL",
    "KDF_ALGORITHMID",
    "KDF_PARTYUINFO",
    "KDF_PARTYVINFO",
    "KDF_SUPPPUBINFO",
    "KDF_SUPPPRIVINFO",
    "KDF_LABEL",
    "KDF_CONTEXT",
    "KDF_SALT",
    "KDF_ITERATION_COUNT",
    "KDF_GENERIC_PARAMETER",
    "KDF_KEYBITLENGTH",
    "KDF_HKDF_SALT",
    "KDF_HKDF_INFO",
    "KDF_USE_SECRET_AS_HMAC_KEY_FLAG",
    "BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_VERSION",
    "BCRYPT_AUTH_MODE_CHAIN_CALLS_FLAG",
    "BCRYPT_AUTH_MODE_IN_PROGRESS_FLAG",
    "BCRYPT_SUPPORTED_PAD_ROUTER",
    "BCRYPT_SUPPORTED_PAD_PKCS1_ENC",
    "BCRYPT_SUPPORTED_PAD_PKCS1_SIG",
    "BCRYPT_SUPPORTED_PAD_OAEP",
    "BCRYPT_SUPPORTED_PAD_PSS",
    "BCRYPT_BLOCK_PADDING",
    "BCRYPT_GENERATE_IV",
    "BCRYPT_PAD_PKCS1_OPTIONAL_HASH_OID",
    "BCRYPTBUFFER_VERSION",
    "BCRYPT_ECDH_PUBLIC_P256_MAGIC",
    "BCRYPT_ECDH_PRIVATE_P256_MAGIC",
    "BCRYPT_ECDH_PUBLIC_P384_MAGIC",
    "BCRYPT_ECDH_PRIVATE_P384_MAGIC",
    "BCRYPT_ECDH_PUBLIC_P521_MAGIC",
    "BCRYPT_ECDH_PRIVATE_P521_MAGIC",
    "BCRYPT_ECDH_PUBLIC_GENERIC_MAGIC",
    "BCRYPT_ECDH_PRIVATE_GENERIC_MAGIC",
    "BCRYPT_ECDSA_PUBLIC_P256_MAGIC",
    "BCRYPT_ECDSA_PRIVATE_P256_MAGIC",
    "BCRYPT_ECDSA_PUBLIC_P384_MAGIC",
    "BCRYPT_ECDSA_PRIVATE_P384_MAGIC",
    "BCRYPT_ECDSA_PUBLIC_P521_MAGIC",
    "BCRYPT_ECDSA_PRIVATE_P521_MAGIC",
    "BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC",
    "BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC",
    "BCRYPT_ECC_FULLKEY_BLOB_V1",
    "BCRYPT_DH_PARAMETERS_MAGIC",
    "BCRYPT_DSA_PUBLIC_MAGIC_V2",
    "BCRYPT_DSA_PRIVATE_MAGIC_V2",
    "BCRYPT_KEY_DATA_BLOB_MAGIC",
    "BCRYPT_KEY_DATA_BLOB_VERSION1",
    "BCRYPT_DSA_PARAMETERS_MAGIC",
    "BCRYPT_DSA_PARAMETERS_MAGIC_V2",
    "BCRYPT_ECC_PARAMETERS_MAGIC",
    "BCRYPT_KEY_DERIVATION_INTERFACE",
    "BCRYPT_MD2_ALG_HANDLE",
    "BCRYPT_MD4_ALG_HANDLE",
    "BCRYPT_MD5_ALG_HANDLE",
    "BCRYPT_SHA1_ALG_HANDLE",
    "BCRYPT_SHA256_ALG_HANDLE",
    "BCRYPT_SHA384_ALG_HANDLE",
    "BCRYPT_SHA512_ALG_HANDLE",
    "BCRYPT_RC4_ALG_HANDLE",
    "BCRYPT_RNG_ALG_HANDLE",
    "BCRYPT_HMAC_MD5_ALG_HANDLE",
    "BCRYPT_HMAC_SHA1_ALG_HANDLE",
    "BCRYPT_HMAC_SHA256_ALG_HANDLE",
    "BCRYPT_HMAC_SHA384_ALG_HANDLE",
    "BCRYPT_HMAC_SHA512_ALG_HANDLE",
    "BCRYPT_RSA_ALG_HANDLE",
    "BCRYPT_ECDSA_ALG_HANDLE",
    "BCRYPT_AES_CMAC_ALG_HANDLE",
    "BCRYPT_AES_GMAC_ALG_HANDLE",
    "BCRYPT_HMAC_MD2_ALG_HANDLE",
    "BCRYPT_HMAC_MD4_ALG_HANDLE",
    "BCRYPT_3DES_CBC_ALG_HANDLE",
    "BCRYPT_3DES_ECB_ALG_HANDLE",
    "BCRYPT_3DES_CFB_ALG_HANDLE",
    "BCRYPT_3DES_112_CBC_ALG_HANDLE",
    "BCRYPT_3DES_112_ECB_ALG_HANDLE",
    "BCRYPT_3DES_112_CFB_ALG_HANDLE",
    "BCRYPT_AES_CBC_ALG_HANDLE",
    "BCRYPT_AES_ECB_ALG_HANDLE",
    "BCRYPT_AES_CFB_ALG_HANDLE",
    "BCRYPT_AES_CCM_ALG_HANDLE",
    "BCRYPT_AES_GCM_ALG_HANDLE",
    "BCRYPT_DES_CBC_ALG_HANDLE",
    "BCRYPT_DES_ECB_ALG_HANDLE",
    "BCRYPT_DES_CFB_ALG_HANDLE",
    "BCRYPT_DESX_CBC_ALG_HANDLE",
    "BCRYPT_DESX_ECB_ALG_HANDLE",
    "BCRYPT_DESX_CFB_ALG_HANDLE",
    "BCRYPT_RC2_CBC_ALG_HANDLE",
    "BCRYPT_RC2_ECB_ALG_HANDLE",
    "BCRYPT_RC2_CFB_ALG_HANDLE",
    "BCRYPT_DH_ALG_HANDLE",
    "BCRYPT_ECDH_ALG_HANDLE",
    "BCRYPT_ECDH_P256_ALG_HANDLE",
    "BCRYPT_ECDH_P384_ALG_HANDLE",
    "BCRYPT_ECDH_P521_ALG_HANDLE",
    "BCRYPT_DSA_ALG_HANDLE",
    "BCRYPT_ECDSA_P256_ALG_HANDLE",
    "BCRYPT_ECDSA_P384_ALG_HANDLE",
    "BCRYPT_ECDSA_P521_ALG_HANDLE",
    "BCRYPT_RSA_SIGN_ALG_HANDLE",
    "BCRYPT_CAPI_KDF_ALG_HANDLE",
    "BCRYPT_PBKDF2_ALG_HANDLE",
    "BCRYPT_SP800108_CTR_HMAC_ALG_HANDLE",
    "BCRYPT_SP80056A_CONCAT_ALG_HANDLE",
    "BCRYPT_TLS1_1_KDF_ALG_HANDLE",
    "BCRYPT_TLS1_2_KDF_ALG_HANDLE",
    "BCRYPT_XTS_AES_ALG_HANDLE",
    "BCRYPT_HKDF_ALG_HANDLE",
    "BCRYPT_CHACHA20_POLY1305_ALG_HANDLE",
    "BCRYPT_CAPI_AES_FLAG",
    "BCRYPT_MULTI_FLAG",
    "BCRYPT_TLS_CBC_HMAC_VERIFY_FLAG",
    "BCRYPT_BUFFERS_LOCKED_FLAG",
    "BCRYPT_EXTENDED_KEYSIZE",
    "BCRYPT_ENABLE_INCOMPATIBLE_FIPS_CHECKS",
    "BCRYPT_KEY_DERIVATION_OPERATION",
    "BCRYPT_PUBLIC_KEY_FLAG",
    "BCRYPT_PRIVATE_KEY_FLAG",
    "BCRYPT_NO_KEY_VALIDATION",
    "BCRYPT_KEY_VALIDATION_RANGE",
    "BCRYPT_KEY_VALIDATION_RANGE_AND_ORDER",
    "BCRYPT_KEY_VALIDATION_REGENERATE",
    "BCRYPT_RNG_USE_ENTROPY_IN_BUFFER",
    "BCRYPT_USE_SYSTEM_PREFERRED_RNG",
    "BCRYPT_HASH_INTERFACE_MAJORVERSION_2",
    "CRYPT_OVERWRITE",
    "CRYPT_PRIORITY_TOP",
    "CRYPT_PRIORITY_BOTTOM",
    "CRYPT_XML_BLOB_MAX",
    "CRYPT_XML_ID_MAX",
    "CRYPT_XML_SIGNATURES_MAX",
    "CRYPT_XML_TRANSFORM_MAX",
    "CRYPT_XML_SIGNATURE_VALUE_MAX",
    "CRYPT_XML_DIGEST_VALUE_MAX",
    "CRYPT_XML_OBJECTS_MAX",
    "CRYPT_XML_REFERENCES_MAX",
    "CRYPT_XML_E_BASE",
    "CRYPT_XML_E_LARGE",
    "CRYPT_XML_E_TOO_MANY_TRANSFORMS",
    "CRYPT_XML_E_ENCODING",
    "CRYPT_XML_E_ALGORITHM",
    "CRYPT_XML_E_TRANSFORM",
    "CRYPT_XML_E_HANDLE",
    "CRYPT_XML_E_OPERATION",
    "CRYPT_XML_E_UNRESOLVED_REFERENCE",
    "CRYPT_XML_E_INVALID_DIGEST",
    "CRYPT_XML_E_INVALID_SIGNATURE",
    "CRYPT_XML_E_HASH_FAILED",
    "CRYPT_XML_E_SIGN_FAILED",
    "CRYPT_XML_E_VERIFY_FAILED",
    "CRYPT_XML_E_TOO_MANY_SIGNATURES",
    "CRYPT_XML_E_INVALID_KEYVALUE",
    "CRYPT_XML_E_UNEXPECTED_XML",
    "CRYPT_XML_E_SIGNER",
    "CRYPT_XML_E_NON_UNIQUE_ID",
    "CRYPT_XML_E_LAST",
    "CRYPT_XML_FLAG_ALWAYS_RETURN_ENCODED_OBJECT",
    "CRYPT_XML_FLAG_ENFORCE_ID_NCNAME_FORMAT",
    "CRYPT_XML_FLAG_ENFORCE_ID_NAME_FORMAT",
    "CRYPT_XML_FLAG_ECDSA_DSIG11",
    "CRYPT_XML_STATUS_NO_ERROR",
    "CRYPT_XML_FLAG_ADD_OBJECT_CREATE_COPY",
    "CRYPT_XML_FLAG_CREATE_REFERENCE_AS_OBJECT",
    "CRYPT_XML_DIGEST_REFERENCE_DATA_TRANSFORMED",
    "CRYPT_XML_GROUP_ID_HASH",
    "CRYPT_XML_GROUP_ID_SIGN",
    "CRYPT_XML_ALGORITHM_INFO_FIND_BY_URI",
    "CRYPT_XML_ALGORITHM_INFO_FIND_BY_NAME",
    "CRYPT_XML_ALGORITHM_INFO_FIND_BY_CNG_ALGID",
    "CRYPT_XML_ALGORITHM_INFO_FIND_BY_CNG_SIGN_ALGID",
    "CRYPTPROTECT_PROMPT_ON_UNPROTECT",
    "CRYPTPROTECT_PROMPT_ON_PROTECT",
    "CRYPTPROTECT_PROMPT_RESERVED",
    "CRYPTPROTECT_PROMPT_STRONG",
    "CRYPTPROTECT_PROMPT_REQUIRE_STRONG",
    "CRYPTPROTECT_UI_FORBIDDEN",
    "CRYPTPROTECT_LOCAL_MACHINE",
    "CRYPTPROTECT_CRED_SYNC",
    "CRYPTPROTECT_AUDIT",
    "CRYPTPROTECT_NO_RECOVERY",
    "CRYPTPROTECT_VERIFY_PROTECTION",
    "CRYPTPROTECT_CRED_REGENERATE",
    "CRYPTPROTECT_FIRST_RESERVED_FLAGVAL",
    "CRYPTPROTECT_LAST_RESERVED_FLAGVAL",
    "CRYPTPROTECTMEMORY_BLOCK_SIZE",
    "CRYPTPROTECTMEMORY_SAME_PROCESS",
    "CRYPTPROTECTMEMORY_CROSS_PROCESS",
    "CRYPTPROTECTMEMORY_SAME_LOGON",
    "NCRYPT_MAX_KEY_NAME_LENGTH",
    "NCRYPT_MAX_ALG_ID_LENGTH",
    "NCRYPT_KEY_DERIVATION_INTERFACE",
    "NCRYPT_KEY_PROTECTION_INTERFACE",
    "NCRYPTBUFFER_VERSION",
    "NCRYPTBUFFER_EMPTY",
    "NCRYPTBUFFER_DATA",
    "NCRYPTBUFFER_PROTECTION_DESCRIPTOR_STRING",
    "NCRYPTBUFFER_PROTECTION_FLAGS",
    "NCRYPTBUFFER_SSL_CLIENT_RANDOM",
    "NCRYPTBUFFER_SSL_SERVER_RANDOM",
    "NCRYPTBUFFER_SSL_HIGHEST_VERSION",
    "NCRYPTBUFFER_SSL_CLEAR_KEY",
    "NCRYPTBUFFER_SSL_KEY_ARG_DATA",
    "NCRYPTBUFFER_SSL_SESSION_HASH",
    "NCRYPTBUFFER_PKCS_OID",
    "NCRYPTBUFFER_PKCS_ALG_OID",
    "NCRYPTBUFFER_PKCS_ALG_PARAM",
    "NCRYPTBUFFER_PKCS_ALG_ID",
    "NCRYPTBUFFER_PKCS_ATTRS",
    "NCRYPTBUFFER_PKCS_KEY_NAME",
    "NCRYPTBUFFER_PKCS_SECRET",
    "NCRYPTBUFFER_CERT_BLOB",
    "NCRYPTBUFFER_CLAIM_IDBINDING_NONCE",
    "NCRYPTBUFFER_CLAIM_KEYATTESTATION_NONCE",
    "NCRYPTBUFFER_KEY_PROPERTY_FLAGS",
    "NCRYPTBUFFER_ATTESTATIONSTATEMENT_BLOB",
    "NCRYPTBUFFER_ATTESTATION_CLAIM_TYPE",
    "NCRYPTBUFFER_ATTESTATION_CLAIM_CHALLENGE_REQUIRED",
    "NCRYPTBUFFER_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS",
    "NCRYPTBUFFER_ECC_CURVE_NAME",
    "NCRYPTBUFFER_ECC_PARAMETERS",
    "NCRYPTBUFFER_TPM_SEAL_PASSWORD",
    "NCRYPTBUFFER_TPM_SEAL_POLICYINFO",
    "NCRYPTBUFFER_TPM_SEAL_TICKET",
    "NCRYPTBUFFER_TPM_SEAL_NO_DA_PROTECTION",
    "NCRYPTBUFFER_TPM_PLATFORM_CLAIM_PCR_MASK",
    "NCRYPTBUFFER_TPM_PLATFORM_CLAIM_NONCE",
    "NCRYPTBUFFER_TPM_PLATFORM_CLAIM_STATIC_CREATE",
    "NCRYPT_CIPHER_NO_PADDING_FLAG",
    "NCRYPT_CIPHER_BLOCK_PADDING_FLAG",
    "NCRYPT_CIPHER_OTHER_PADDING_FLAG",
    "NCRYPT_PLATFORM_ATTEST_MAGIC",
    "NCRYPT_KEY_ATTEST_MAGIC",
    "NCRYPT_CLAIM_AUTHORITY_ONLY",
    "NCRYPT_CLAIM_SUBJECT_ONLY",
    "NCRYPT_CLAIM_WEB_AUTH_SUBJECT_ONLY",
    "NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT",
    "NCRYPT_CLAIM_VSM_KEY_ATTESTATION_STATEMENT",
    "NCRYPT_CLAIM_UNKNOWN",
    "NCRYPT_CLAIM_PLATFORM",
    "NCRYPT_ISOLATED_KEY_FLAG_CREATED_IN_ISOLATION",
    "NCRYPT_ISOLATED_KEY_FLAG_IMPORT_ONLY",
    "NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_V0",
    "NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_CURRENT_VERSION",
    "NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_V0",
    "NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_CURRENT_VERSION",
    "NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_V0",
    "NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_CURRENT_VERSION",
    "NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_V0",
    "NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_CURRENT_VERSION",
    "NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_V0",
    "NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_CURRENT_VERSION",
    "NCRYPT_PAD_CIPHER_FLAG",
    "NCRYPT_ATTESTATION_FLAG",
    "NCRYPT_SEALING_FLAG",
    "NCRYPT_DO_NOT_FINALIZE_FLAG",
    "NCRYPT_EXPORT_LEGACY_FLAG",
    "NCRYPT_IGNORE_DEVICE_STATE_FLAG",
    "NCRYPT_TREAT_NIST_AS_GENERIC_ECC_FLAG",
    "NCRYPT_NO_CACHED_PASSWORD",
    "NCRYPT_PROTECT_TO_LOCAL_SYSTEM",
    "NCRYPT_PREFER_VIRTUAL_ISOLATION_FLAG",
    "NCRYPT_USE_VIRTUAL_ISOLATION_FLAG",
    "NCRYPT_USE_PER_BOOT_KEY_FLAG",
    "NCRYPT_KEY_DERIVATION_OPERATION",
    "NCRYPT_AUTHORITY_KEY_FLAG",
    "IFX_RSA_KEYGEN_VUL_NOT_AFFECTED",
    "IFX_RSA_KEYGEN_VUL_AFFECTED_LEVEL_1",
    "IFX_RSA_KEYGEN_VUL_AFFECTED_LEVEL_2",
    "NCRYPT_TPM_PSS_SALT_SIZE_UNKNOWN",
    "NCRYPT_TPM_PSS_SALT_SIZE_MAXIMUM",
    "NCRYPT_TPM_PSS_SALT_SIZE_HASHSIZE",
    "NCRYPT_TPM_PAD_PSS_IGNORE_SALT",
    "NCRYPT_TPM12_PROVIDER",
    "NCRYPT_PCP_SIGNATURE_KEY",
    "NCRYPT_PCP_ENCRYPTION_KEY",
    "NCRYPT_PCP_STORAGE_KEY",
    "NCRYPT_PCP_IDENTITY_KEY",
    "NCRYPT_PCP_HMACVERIFICATION_KEY",
    "NCRYPT_MAX_PROPERTY_NAME",
    "NCRYPT_MAX_PROPERTY_DATA",
    "NCRYPT_ALLOW_EXPORT_FLAG",
    "NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG",
    "NCRYPT_ALLOW_ARCHIVING_FLAG",
    "NCRYPT_ALLOW_PLAINTEXT_ARCHIVING_FLAG",
    "NCRYPT_IMPL_HARDWARE_FLAG",
    "NCRYPT_IMPL_SOFTWARE_FLAG",
    "NCRYPT_IMPL_REMOVABLE_FLAG",
    "NCRYPT_IMPL_HARDWARE_RNG_FLAG",
    "NCRYPT_IMPL_VIRTUAL_ISOLATION_FLAG",
    "NCRYPT_ALLOW_DECRYPT_FLAG",
    "NCRYPT_ALLOW_SIGNING_FLAG",
    "NCRYPT_ALLOW_KEY_AGREEMENT_FLAG",
    "NCRYPT_ALLOW_KEY_IMPORT_FLAG",
    "NCRYPT_ALLOW_ALL_USAGES",
    "NCRYPT_UI_PROTECT_KEY_FLAG",
    "NCRYPT_UI_FORCE_HIGH_PROTECTION_FLAG",
    "NCRYPT_UI_FINGERPRINT_PROTECTION_FLAG",
    "NCRYPT_UI_APPCONTAINER_ACCESS_MEDIUM_FLAG",
    "NCRYPT_PIN_CACHE_DISABLE_DPL_FLAG",
    "NCRYPT_PIN_CACHE_REQUIRE_GESTURE_FLAG",
    "NCRYPT_PIN_CACHE_APPLICATION_TICKET_BYTE_LENGTH",
    "NCRYPT_PIN_CACHE_CLEAR_FOR_CALLING_PROCESS_OPTION",
    "NCRYPT_KEY_ACCESS_POLICY_VERSION",
    "NCRYPT_ALLOW_SILENT_KEY_ACCESS",
    "NCRYPT_CIPHER_KEY_BLOB_MAGIC",
    "NCRYPT_KDF_KEY_BLOB_MAGIC",
    "NCRYPT_PROTECTED_KEY_BLOB_MAGIC",
    "NCRYPT_TPM_LOADABLE_KEY_BLOB_MAGIC",
    "NCRYPT_NAMED_DESCRIPTOR_FLAG",
    "NCRYPT_PROTECTION_INFO_TYPE_DESCRIPTOR_STRING",
    "ALG_CLASS_ANY",
    "ALG_CLASS_SIGNATURE",
    "ALG_CLASS_MSG_ENCRYPT",
    "ALG_CLASS_DATA_ENCRYPT",
    "ALG_CLASS_HASH",
    "ALG_CLASS_KEY_EXCHANGE",
    "ALG_CLASS_ALL",
    "ALG_TYPE_ANY",
    "ALG_TYPE_DSS",
    "ALG_TYPE_RSA",
    "ALG_TYPE_BLOCK",
    "ALG_TYPE_STREAM",
    "ALG_TYPE_DH",
    "ALG_TYPE_SECURECHANNEL",
    "ALG_TYPE_ECDH",
    "ALG_TYPE_THIRDPARTY",
    "ALG_SID_ANY",
    "ALG_SID_THIRDPARTY_ANY",
    "ALG_SID_RSA_ANY",
    "ALG_SID_RSA_PKCS",
    "ALG_SID_RSA_MSATWORK",
    "ALG_SID_RSA_ENTRUST",
    "ALG_SID_RSA_PGP",
    "ALG_SID_DSS_ANY",
    "ALG_SID_DSS_PKCS",
    "ALG_SID_DSS_DMS",
    "ALG_SID_ECDSA",
    "ALG_SID_DES",
    "ALG_SID_3DES",
    "ALG_SID_DESX",
    "ALG_SID_IDEA",
    "ALG_SID_CAST",
    "ALG_SID_SAFERSK64",
    "ALG_SID_SAFERSK128",
    "ALG_SID_3DES_112",
    "ALG_SID_CYLINK_MEK",
    "ALG_SID_RC5",
    "ALG_SID_AES_128",
    "ALG_SID_AES_192",
    "ALG_SID_AES_256",
    "ALG_SID_AES",
    "ALG_SID_SKIPJACK",
    "ALG_SID_TEK",
    "CRYPT_MODE_CBCI",
    "CRYPT_MODE_CFBP",
    "CRYPT_MODE_OFBP",
    "CRYPT_MODE_CBCOFM",
    "CRYPT_MODE_CBCOFMI",
    "ALG_SID_RC2",
    "ALG_SID_RC4",
    "ALG_SID_SEAL",
    "ALG_SID_DH_SANDF",
    "ALG_SID_DH_EPHEM",
    "ALG_SID_AGREED_KEY_ANY",
    "ALG_SID_KEA",
    "ALG_SID_ECDH",
    "ALG_SID_ECDH_EPHEM",
    "ALG_SID_MD2",
    "ALG_SID_MD4",
    "ALG_SID_MD5",
    "ALG_SID_SHA",
    "ALG_SID_SHA1",
    "ALG_SID_MAC",
    "ALG_SID_RIPEMD",
    "ALG_SID_RIPEMD160",
    "ALG_SID_SSL3SHAMD5",
    "ALG_SID_HMAC",
    "ALG_SID_TLS1PRF",
    "ALG_SID_HASH_REPLACE_OWF",
    "ALG_SID_SHA_256",
    "ALG_SID_SHA_384",
    "ALG_SID_SHA_512",
    "ALG_SID_SSL3_MASTER",
    "ALG_SID_SCHANNEL_MASTER_HASH",
    "ALG_SID_SCHANNEL_MAC_KEY",
    "ALG_SID_PCT1_MASTER",
    "ALG_SID_SSL2_MASTER",
    "ALG_SID_TLS1_MASTER",
    "ALG_SID_SCHANNEL_ENC_KEY",
    "ALG_SID_ECMQV",
    "ALG_SID_EXAMPLE",
    "SIGNATURE_RESOURCE_NUMBER",
    "CRYPT_VERIFYCONTEXT",
    "CRYPT_NEWKEYSET",
    "CRYPT_DELETEKEYSET",
    "CRYPT_SILENT",
    "CRYPT_DEFAULT_CONTAINER_OPTIONAL",
    "CRYPT_UPDATE_KEY",
    "CRYPT_USER_PROTECTED_STRONG",
    "RSA1024BIT_KEY",
    "CRYPT_SERVER",
    "KEY_LENGTH_MASK",
    "CRYPT_DECRYPT_RSA_NO_PADDING_CHECK",
    "CRYPT_SECRETDIGEST",
    "CRYPT_OWF_REPL_LM_HASH",
    "CRYPT_LITTLE_ENDIAN",
    "CRYPT_NOHASHOID",
    "CRYPT_TYPE2_FORMAT",
    "CRYPT_X931_FORMAT",
    "CRYPT_MACHINE_DEFAULT",
    "CRYPT_USER_DEFAULT",
    "CRYPT_DELETE_DEFAULT",
    "SIMPLEBLOB",
    "PUBLICKEYBLOB",
    "PRIVATEKEYBLOB",
    "PLAINTEXTKEYBLOB",
    "OPAQUEKEYBLOB",
    "PUBLICKEYBLOBEX",
    "SYMMETRICWRAPKEYBLOB",
    "KEYSTATEBLOB",
    "CRYPT_USERDATA",
    "KP_IV",
    "KP_PADDING",
    "KP_MODE",
    "KP_MODE_BITS",
    "KP_P",
    "KP_G",
    "KP_Q",
    "KP_X",
    "KP_Y",
    "KP_RA",
    "KP_RB",
    "KP_INFO",
    "KP_EFFECTIVE_KEYLEN",
    "KP_SCHANNEL_ALG",
    "KP_CLIENT_RANDOM",
    "KP_SERVER_RANDOM",
    "KP_RP",
    "KP_PRECOMP_MD5",
    "KP_PRECOMP_SHA",
    "KP_CLEAR_KEY",
    "KP_PUB_EX_LEN",
    "KP_PUB_EX_VAL",
    "KP_KEYVAL",
    "KP_ADMIN_PIN",
    "KP_KEYEXCHANGE_PIN",
    "KP_SIGNATURE_PIN",
    "KP_PREHASH",
    "KP_ROUNDS",
    "KP_OAEP_PARAMS",
    "KP_CMS_KEY_INFO",
    "KP_CMS_DH_KEY_INFO",
    "KP_PUB_PARAMS",
    "KP_VERIFY_PARAMS",
    "KP_HIGHEST_VERSION",
    "KP_PIN_ID",
    "KP_PIN_INFO",
    "PKCS5_PADDING",
    "RANDOM_PADDING",
    "ZERO_PADDING",
    "CRYPT_MODE_CBC",
    "CRYPT_MODE_ECB",
    "CRYPT_MODE_OFB",
    "CRYPT_MODE_CFB",
    "CRYPT_MODE_CTS",
    "CRYPT_ENCRYPT",
    "CRYPT_DECRYPT",
    "CRYPT_EXPORT",
    "CRYPT_READ",
    "CRYPT_WRITE",
    "CRYPT_MAC",
    "CRYPT_EXPORT_KEY",
    "CRYPT_IMPORT_KEY",
    "CRYPT_ARCHIVE",
    "HP_ALGID",
    "HP_HASHSIZE",
    "HP_TLS1PRF_LABEL",
    "HP_TLS1PRF_SEED",
    "CRYPT_FAILED",
    "CRYPT_SUCCEED",
    "PP_ENUMALGS",
    "PP_ENUMCONTAINERS",
    "PP_IMPTYPE",
    "PP_NAME",
    "PP_VERSION",
    "PP_CONTAINER",
    "PP_CHANGE_PASSWORD",
    "PP_CERTCHAIN",
    "PP_KEY_TYPE_SUBTYPE",
    "PP_PROVTYPE",
    "PP_KEYSTORAGE",
    "PP_APPLI_CERT",
    "PP_SYM_KEYSIZE",
    "PP_SESSION_KEYSIZE",
    "PP_ENUMALGS_EX",
    "PP_ENUMMANDROOTS",
    "PP_ENUMELECTROOTS",
    "PP_KEYSET_TYPE",
    "PP_ADMIN_PIN",
    "PP_SIG_KEYSIZE_INC",
    "PP_KEYX_KEYSIZE_INC",
    "PP_UNIQUE_CONTAINER",
    "PP_SGC_INFO",
    "PP_KEYSPEC",
    "PP_ENUMEX_SIGNING_PROT",
    "PP_CRYPT_COUNT_KEY_USE",
    "PP_SMARTCARD_GUID",
    "PP_SMARTCARD_READER_ICON",
    "CRYPT_FIRST",
    "CRYPT_NEXT",
    "CRYPT_SGC_ENUM",
    "CRYPT_IMPL_HARDWARE",
    "CRYPT_IMPL_SOFTWARE",
    "CRYPT_IMPL_MIXED",
    "CRYPT_IMPL_UNKNOWN",
    "CRYPT_IMPL_REMOVABLE",
    "CRYPT_SEC_DESCR",
    "CRYPT_PSTORE",
    "CRYPT_UI_PROMPT",
    "CRYPT_FLAG_PCT1",
    "CRYPT_FLAG_SSL2",
    "CRYPT_FLAG_SSL3",
    "CRYPT_FLAG_TLS1",
    "CRYPT_FLAG_IPSEC",
    "CRYPT_FLAG_SIGNING",
    "CRYPT_SGC",
    "CRYPT_FASTSGC",
    "PP_CONTEXT_INFO",
    "PP_DISMISS_PIN_UI_SEC",
    "PROV_RSA_FULL",
    "PROV_RSA_SIG",
    "PROV_DSS",
    "PROV_FORTEZZA",
    "PROV_MS_EXCHANGE",
    "PROV_SSL",
    "PROV_RSA_SCHANNEL",
    "PROV_DSS_DH",
    "PROV_EC_ECDSA_SIG",
    "PROV_EC_ECNRA_SIG",
    "PROV_EC_ECDSA_FULL",
    "PROV_EC_ECNRA_FULL",
    "PROV_DH_SCHANNEL",
    "PROV_SPYRUS_LYNKS",
    "PROV_RNG",
    "PROV_INTEL_SEC",
    "PROV_REPLACE_OWF",
    "PROV_RSA_AES",
    "PROV_STT_MER",
    "PROV_STT_ACQ",
    "PROV_STT_BRND",
    "PROV_STT_ROOT",
    "PROV_STT_ISS",
    "MAXUIDLEN",
    "CUR_BLOB_VERSION",
    "SCHANNEL_MAC_KEY",
    "SCHANNEL_ENC_KEY",
    "INTERNATIONAL_USAGE",
    "CERT_RDN_TYPE_MASK",
    "CERT_RDN_FLAGS_MASK",
    "CERT_RDN_ENABLE_T61_UNICODE_FLAG",
    "CERT_RDN_ENABLE_UTF8_UNICODE_FLAG",
    "CERT_RDN_FORCE_UTF8_UNICODE_FLAG",
    "CERT_RDN_DISABLE_CHECK_TYPE_FLAG",
    "CERT_RDN_DISABLE_IE4_UTF8_FLAG",
    "CERT_RDN_ENABLE_PUNYCODE_FLAG",
    "CRYPT_ECC_PRIVATE_KEY_INFO_v1",
    "CERT_V1",
    "CERT_V2",
    "CERT_V3",
    "CERT_INFO_VERSION_FLAG",
    "CERT_INFO_SERIAL_NUMBER_FLAG",
    "CERT_INFO_SIGNATURE_ALGORITHM_FLAG",
    "CERT_INFO_ISSUER_FLAG",
    "CERT_INFO_NOT_BEFORE_FLAG",
    "CERT_INFO_NOT_AFTER_FLAG",
    "CERT_INFO_SUBJECT_FLAG",
    "CERT_INFO_SUBJECT_PUBLIC_KEY_INFO_FLAG",
    "CERT_INFO_ISSUER_UNIQUE_ID_FLAG",
    "CERT_INFO_SUBJECT_UNIQUE_ID_FLAG",
    "CERT_INFO_EXTENSION_FLAG",
    "CRL_V1",
    "CRL_V2",
    "CERT_BUNDLE_CERTIFICATE",
    "CERT_BUNDLE_CRL",
    "CERT_REQUEST_V1",
    "CERT_KEYGEN_REQUEST_V1",
    "CTL_V1",
    "CERT_ENCODING_TYPE_MASK",
    "CMSG_ENCODING_TYPE_MASK",
    "CRYPT_ASN_ENCODING",
    "CRYPT_NDR_ENCODING",
    "X509_NDR_ENCODING",
    "PKCS_7_NDR_ENCODING",
    "CRYPT_FORMAT_STR_MULTI_LINE",
    "CRYPT_FORMAT_STR_NO_HEX",
    "CRYPT_FORMAT_SIMPLE",
    "CRYPT_FORMAT_X509",
    "CRYPT_FORMAT_OID",
    "CRYPT_FORMAT_RDN_SEMICOLON",
    "CRYPT_FORMAT_RDN_CRLF",
    "CRYPT_FORMAT_RDN_UNQUOTE",
    "CRYPT_FORMAT_RDN_REVERSE",
    "CRYPT_FORMAT_COMMA",
    "CRYPT_FORMAT_SEMICOLON",
    "CRYPT_FORMAT_CRLF",
    "CRYPT_ENCODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG",
    "CRYPT_UNICODE_NAME_ENCODE_FORCE_UTF8_UNICODE_FLAG",
    "CRYPT_SORTED_CTL_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG",
    "CRYPT_ENCODE_ENABLE_UTF8PERCENT_FLAG",
    "CRYPT_DECODE_NOCOPY_FLAG",
    "CRYPT_DECODE_TO_BE_SIGNED_FLAG",
    "CRYPT_DECODE_SHARE_OID_STRING_FLAG",
    "CRYPT_DECODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG",
    "CRYPT_DECODE_ALLOC_FLAG",
    "CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG",
    "CRYPT_DECODE_ENABLE_PUNYCODE_FLAG",
    "CRYPT_DECODE_ENABLE_UTF8PERCENT_FLAG",
    "CRYPT_ENCODE_DECODE_NONE",
    "SITE_PIN_RULES_ALL_SUBDOMAINS_FLAG",
    "CERT_ROOT_PROGRAM_FLAG_OU",
    "CERT_ROOT_PROGRAM_FLAG_ADDRESS",
    "CERT_UNICODE_RDN_ERR_INDEX_MASK",
    "CERT_UNICODE_RDN_ERR_INDEX_SHIFT",
    "CERT_UNICODE_ATTR_ERR_INDEX_MASK",
    "CERT_UNICODE_ATTR_ERR_INDEX_SHIFT",
    "CERT_UNICODE_VALUE_ERR_INDEX_MASK",
    "CERT_UNICODE_VALUE_ERR_INDEX_SHIFT",
    "CERT_DIGITAL_SIGNATURE_KEY_USAGE",
    "CERT_NON_REPUDIATION_KEY_USAGE",
    "CERT_KEY_ENCIPHERMENT_KEY_USAGE",
    "CERT_DATA_ENCIPHERMENT_KEY_USAGE",
    "CERT_KEY_AGREEMENT_KEY_USAGE",
    "CERT_KEY_CERT_SIGN_KEY_USAGE",
    "CERT_OFFLINE_CRL_SIGN_KEY_USAGE",
    "CERT_CRL_SIGN_KEY_USAGE",
    "CERT_ENCIPHER_ONLY_KEY_USAGE",
    "CERT_DECIPHER_ONLY_KEY_USAGE",
    "CERT_ALT_NAME_X400_ADDRESS",
    "CERT_ALT_NAME_EDI_PARTY_NAME",
    "CERT_ALT_NAME_ENTRY_ERR_INDEX_MASK",
    "CERT_ALT_NAME_ENTRY_ERR_INDEX_SHIFT",
    "CERT_ALT_NAME_VALUE_ERR_INDEX_MASK",
    "CERT_ALT_NAME_VALUE_ERR_INDEX_SHIFT",
    "CERT_CA_SUBJECT_FLAG",
    "CERT_END_ENTITY_SUBJECT_FLAG",
    "CRL_REASON_PRIVILEGE_WITHDRAWN",
    "CRL_REASON_AA_COMPROMISE",
    "CRL_DIST_POINT_NO_NAME",
    "CRL_DIST_POINT_FULL_NAME",
    "CRL_DIST_POINT_ISSUER_RDN_NAME",
    "CRL_REASON_UNUSED_FLAG",
    "CRL_REASON_KEY_COMPROMISE_FLAG",
    "CRL_REASON_CA_COMPROMISE_FLAG",
    "CRL_REASON_AFFILIATION_CHANGED_FLAG",
    "CRL_REASON_SUPERSEDED_FLAG",
    "CRL_REASON_CESSATION_OF_OPERATION_FLAG",
    "CRL_REASON_CERTIFICATE_HOLD_FLAG",
    "CRL_REASON_PRIVILEGE_WITHDRAWN_FLAG",
    "CRL_REASON_AA_COMPROMISE_FLAG",
    "CRL_DIST_POINT_ERR_INDEX_MASK",
    "CRL_DIST_POINT_ERR_INDEX_SHIFT",
    "CRL_DIST_POINT_ERR_CRL_ISSUER_BIT",
    "CROSS_CERT_DIST_POINT_ERR_INDEX_MASK",
    "CROSS_CERT_DIST_POINT_ERR_INDEX_SHIFT",
    "CERT_EXCLUDED_SUBTREE_BIT",
    "SORTED_CTL_EXT_HASHED_SUBJECT_IDENTIFIER_FLAG",
    "CERT_DSS_R_LEN",
    "CERT_DSS_S_LEN",
    "CRYPT_X942_COUNTER_BYTE_LENGTH",
    "CRYPT_X942_KEY_LENGTH_BYTE_LENGTH",
    "CRYPT_ECC_CMS_SHARED_INFO_SUPPPUBINFO_BYTE_LENGTH",
    "CRYPT_RC2_40BIT_VERSION",
    "CRYPT_RC2_56BIT_VERSION",
    "CRYPT_RC2_64BIT_VERSION",
    "CRYPT_RC2_128BIT_VERSION",
    "PKCS_RSA_SSA_PSS_TRAILER_FIELD_BC",
    "NETSCAPE_SSL_CLIENT_AUTH_CERT_TYPE",
    "NETSCAPE_SSL_SERVER_AUTH_CERT_TYPE",
    "NETSCAPE_SMIME_CERT_TYPE",
    "NETSCAPE_SIGN_CERT_TYPE",
    "NETSCAPE_SSL_CA_CERT_TYPE",
    "NETSCAPE_SMIME_CA_CERT_TYPE",
    "NETSCAPE_SIGN_CA_CERT_TYPE",
    "CMC_TAGGED_CERT_REQUEST_CHOICE",
    "CMC_OTHER_INFO_NO_CHOICE",
    "CMC_OTHER_INFO_FAIL_CHOICE",
    "CMC_OTHER_INFO_PEND_CHOICE",
    "CMC_STATUS_SUCCESS",
    "CMC_STATUS_FAILED",
    "CMC_STATUS_PENDING",
    "CMC_STATUS_NO_SUPPORT",
    "CMC_STATUS_CONFIRM_REQUIRED",
    "CMC_FAIL_BAD_ALG",
    "CMC_FAIL_BAD_MESSAGE_CHECK",
    "CMC_FAIL_BAD_REQUEST",
    "CMC_FAIL_BAD_TIME",
    "CMC_FAIL_BAD_CERT_ID",
    "CMC_FAIL_UNSUPORTED_EXT",
    "CMC_FAIL_MUST_ARCHIVE_KEYS",
    "CMC_FAIL_BAD_IDENTITY",
    "CMC_FAIL_POP_REQUIRED",
    "CMC_FAIL_POP_FAILED",
    "CMC_FAIL_NO_KEY_REUSE",
    "CMC_FAIL_INTERNAL_CA_ERROR",
    "CMC_FAIL_TRY_LATER",
    "CERT_BIOMETRIC_PICTURE_TYPE",
    "CERT_BIOMETRIC_SIGNATURE_TYPE",
    "OCSP_REQUEST_V1",
    "OCSP_SUCCESSFUL_RESPONSE",
    "OCSP_MALFORMED_REQUEST_RESPONSE",
    "OCSP_INTERNAL_ERROR_RESPONSE",
    "OCSP_TRY_LATER_RESPONSE",
    "OCSP_SIG_REQUIRED_RESPONSE",
    "OCSP_UNAUTHORIZED_RESPONSE",
    "OCSP_BASIC_GOOD_CERT_STATUS",
    "OCSP_BASIC_REVOKED_CERT_STATUS",
    "OCSP_BASIC_UNKNOWN_CERT_STATUS",
    "OCSP_BASIC_RESPONSE_V1",
    "OCSP_BASIC_BY_NAME_RESPONDER_ID",
    "OCSP_BASIC_BY_KEY_RESPONDER_ID",
    "CRYPT_INSTALL_OID_FUNC_BEFORE_FLAG",
    "CRYPT_GET_INSTALLED_OID_FUNC_FLAG",
    "CRYPT_REGISTER_FIRST_INDEX",
    "CRYPT_REGISTER_LAST_INDEX",
    "CRYPT_MATCH_ANY_ENCODING_TYPE",
    "CALG_OID_INFO_CNG_ONLY",
    "CALG_OID_INFO_PARAMETERS",
    "CRYPT_HASH_ALG_OID_GROUP_ID",
    "CRYPT_ENCRYPT_ALG_OID_GROUP_ID",
    "CRYPT_PUBKEY_ALG_OID_GROUP_ID",
    "CRYPT_SIGN_ALG_OID_GROUP_ID",
    "CRYPT_RDN_ATTR_OID_GROUP_ID",
    "CRYPT_EXT_OR_ATTR_OID_GROUP_ID",
    "CRYPT_ENHKEY_USAGE_OID_GROUP_ID",
    "CRYPT_POLICY_OID_GROUP_ID",
    "CRYPT_TEMPLATE_OID_GROUP_ID",
    "CRYPT_KDF_OID_GROUP_ID",
    "CRYPT_LAST_OID_GROUP_ID",
    "CRYPT_FIRST_ALG_OID_GROUP_ID",
    "CRYPT_LAST_ALG_OID_GROUP_ID",
    "CRYPT_OID_INHIBIT_SIGNATURE_FORMAT_FLAG",
    "CRYPT_OID_USE_PUBKEY_PARA_FOR_PKCS7_FLAG",
    "CRYPT_OID_NO_NULL_ALGORITHM_PARA_FLAG",
    "CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG",
    "CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG",
    "CRYPT_OID_USE_CURVE_NAME_FOR_ENCODE_FLAG",
    "CRYPT_OID_USE_CURVE_PARAMETERS_FOR_ENCODE_FLAG",
    "CRYPT_OID_INFO_OID_KEY",
    "CRYPT_OID_INFO_NAME_KEY",
    "CRYPT_OID_INFO_ALGID_KEY",
    "CRYPT_OID_INFO_SIGN_KEY",
    "CRYPT_OID_INFO_CNG_ALGID_KEY",
    "CRYPT_OID_INFO_CNG_SIGN_KEY",
    "CRYPT_OID_INFO_OID_KEY_FLAGS_MASK",
    "CRYPT_OID_DISABLE_SEARCH_DS_FLAG",
    "CRYPT_OID_PREFER_CNG_ALGID_FLAG",
    "CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK",
    "CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT",
    "CRYPT_INSTALL_OID_INFO_BEFORE_FLAG",
    "CRYPT_LOCALIZED_NAME_ENCODING_TYPE",
    "CERT_STRONG_SIGN_SERIALIZED_INFO_CHOICE",
    "CERT_STRONG_SIGN_OID_INFO_CHOICE",
    "CMSG_ENCRYPTED",
    "CMSG_MAIL_LIST_HANDLE_KEY_CHOICE",
    "CMSG_KEY_TRANS_RECIPIENT",
    "CMSG_KEY_AGREE_RECIPIENT",
    "CMSG_MAIL_LIST_RECIPIENT",
    "CMSG_SP3_COMPATIBLE_ENCRYPT_FLAG",
    "CMSG_RC4_NO_SALT_FLAG",
    "CMSG_INDEFINITE_LENGTH",
    "CMSG_BARE_CONTENT_FLAG",
    "CMSG_LENGTH_ONLY_FLAG",
    "CMSG_DETACHED_FLAG",
    "CMSG_AUTHENTICATED_ATTRIBUTES_FLAG",
    "CMSG_CONTENTS_OCTETS_FLAG",
    "CMSG_MAX_LENGTH_FLAG",
    "CMSG_CMS_ENCAPSULATED_CONTENT_FLAG",
    "CMSG_SIGNED_DATA_NO_SIGN_FLAG",
    "CMSG_CRYPT_RELEASE_CONTEXT_FLAG",
    "CMSG_TYPE_PARAM",
    "CMSG_CONTENT_PARAM",
    "CMSG_BARE_CONTENT_PARAM",
    "CMSG_INNER_CONTENT_TYPE_PARAM",
    "CMSG_SIGNER_COUNT_PARAM",
    "CMSG_SIGNER_INFO_PARAM",
    "CMSG_SIGNER_CERT_INFO_PARAM",
    "CMSG_SIGNER_HASH_ALGORITHM_PARAM",
    "CMSG_SIGNER_AUTH_ATTR_PARAM",
    "CMSG_SIGNER_UNAUTH_ATTR_PARAM",
    "CMSG_CERT_COUNT_PARAM",
    "CMSG_CERT_PARAM",
    "CMSG_CRL_COUNT_PARAM",
    "CMSG_CRL_PARAM",
    "CMSG_ENVELOPE_ALGORITHM_PARAM",
    "CMSG_RECIPIENT_COUNT_PARAM",
    "CMSG_RECIPIENT_INDEX_PARAM",
    "CMSG_RECIPIENT_INFO_PARAM",
    "CMSG_HASH_ALGORITHM_PARAM",
    "CMSG_HASH_DATA_PARAM",
    "CMSG_COMPUTED_HASH_PARAM",
    "CMSG_ENCRYPT_PARAM",
    "CMSG_ENCRYPTED_DIGEST",
    "CMSG_ENCODED_SIGNER",
    "CMSG_ENCODED_MESSAGE",
    "CMSG_VERSION_PARAM",
    "CMSG_ATTR_CERT_COUNT_PARAM",
    "CMSG_ATTR_CERT_PARAM",
    "CMSG_CMS_RECIPIENT_COUNT_PARAM",
    "CMSG_CMS_RECIPIENT_INDEX_PARAM",
    "CMSG_CMS_RECIPIENT_ENCRYPTED_KEY_INDEX_PARAM",
    "CMSG_CMS_RECIPIENT_INFO_PARAM",
    "CMSG_UNPROTECTED_ATTR_PARAM",
    "CMSG_SIGNER_CERT_ID_PARAM",
    "CMSG_CMS_SIGNER_INFO_PARAM",
    "CMSG_SIGNED_DATA_V1",
    "CMSG_SIGNED_DATA_V3",
    "CMSG_SIGNED_DATA_PKCS_1_5_VERSION",
    "CMSG_SIGNED_DATA_CMS_VERSION",
    "CMSG_SIGNER_INFO_V1",
    "CMSG_SIGNER_INFO_V3",
    "CMSG_SIGNER_INFO_PKCS_1_5_VERSION",
    "CMSG_SIGNER_INFO_CMS_VERSION",
    "CMSG_HASHED_DATA_V0",
    "CMSG_HASHED_DATA_V2",
    "CMSG_HASHED_DATA_PKCS_1_5_VERSION",
    "CMSG_HASHED_DATA_CMS_VERSION",
    "CMSG_ENVELOPED_DATA_V0",
    "CMSG_ENVELOPED_DATA_V2",
    "CMSG_ENVELOPED_DATA_PKCS_1_5_VERSION",
    "CMSG_ENVELOPED_DATA_CMS_VERSION",
    "CMSG_ENVELOPED_RECIPIENT_V0",
    "CMSG_ENVELOPED_RECIPIENT_V2",
    "CMSG_ENVELOPED_RECIPIENT_V3",
    "CMSG_ENVELOPED_RECIPIENT_V4",
    "CMSG_KEY_TRANS_PKCS_1_5_VERSION",
    "CMSG_KEY_TRANS_CMS_VERSION",
    "CMSG_KEY_AGREE_VERSION",
    "CMSG_MAIL_LIST_VERSION",
    "CMSG_CTRL_VERIFY_SIGNATURE",
    "CMSG_CTRL_DECRYPT",
    "CMSG_CTRL_VERIFY_HASH",
    "CMSG_CTRL_ADD_SIGNER",
    "CMSG_CTRL_DEL_SIGNER",
    "CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR",
    "CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR",
    "CMSG_CTRL_ADD_CERT",
    "CMSG_CTRL_DEL_CERT",
    "CMSG_CTRL_ADD_CRL",
    "CMSG_CTRL_DEL_CRL",
    "CMSG_CTRL_ADD_ATTR_CERT",
    "CMSG_CTRL_DEL_ATTR_CERT",
    "CMSG_CTRL_KEY_TRANS_DECRYPT",
    "CMSG_CTRL_KEY_AGREE_DECRYPT",
    "CMSG_CTRL_MAIL_LIST_DECRYPT",
    "CMSG_CTRL_VERIFY_SIGNATURE_EX",
    "CMSG_CTRL_ADD_CMS_SIGNER_INFO",
    "CMSG_CTRL_ENABLE_STRONG_SIGNATURE",
    "CMSG_VERIFY_SIGNER_PUBKEY",
    "CMSG_VERIFY_SIGNER_CERT",
    "CMSG_VERIFY_SIGNER_CHAIN",
    "CMSG_VERIFY_SIGNER_NULL",
    "CMSG_VERIFY_COUNTER_SIGN_ENABLE_STRONG_FLAG",
    "CMSG_CONTENT_ENCRYPT_PAD_ENCODED_LEN_FLAG",
    "CMSG_CONTENT_ENCRYPT_FREE_PARA_FLAG",
    "CMSG_CONTENT_ENCRYPT_FREE_OBJID_FLAG",
    "CMSG_CONTENT_ENCRYPT_RELEASE_CONTEXT_FLAG",
    "CMSG_KEY_TRANS_ENCRYPT_FREE_PARA_FLAG",
    "CMSG_KEY_TRANS_ENCRYPT_FREE_OBJID_FLAG",
    "CMSG_KEY_AGREE_ENCRYPT_FREE_PARA_FLAG",
    "CMSG_KEY_AGREE_ENCRYPT_FREE_MATERIAL_FLAG",
    "CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_ALG_FLAG",
    "CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_PARA_FLAG",
    "CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_BITS_FLAG",
    "CMSG_KEY_AGREE_ENCRYPT_FREE_OBJID_FLAG",
    "CMSG_MAIL_LIST_ENCRYPT_FREE_PARA_FLAG",
    "CMSG_MAIL_LIST_ENCRYPT_FREE_OBJID_FLAG",
    "CERT_KEY_PROV_HANDLE_PROP_ID",
    "CERT_KEY_PROV_INFO_PROP_ID",
    "CERT_SHA1_HASH_PROP_ID",
    "CERT_MD5_HASH_PROP_ID",
    "CERT_HASH_PROP_ID",
    "CERT_KEY_CONTEXT_PROP_ID",
    "CERT_KEY_SPEC_PROP_ID",
    "CERT_IE30_RESERVED_PROP_ID",
    "CERT_PUBKEY_HASH_RESERVED_PROP_ID",
    "CERT_ENHKEY_USAGE_PROP_ID",
    "CERT_CTL_USAGE_PROP_ID",
    "CERT_NEXT_UPDATE_LOCATION_PROP_ID",
    "CERT_FRIENDLY_NAME_PROP_ID",
    "CERT_PVK_FILE_PROP_ID",
    "CERT_DESCRIPTION_PROP_ID",
    "CERT_ACCESS_STATE_PROP_ID",
    "CERT_SIGNATURE_HASH_PROP_ID",
    "CERT_SMART_CARD_DATA_PROP_ID",
    "CERT_EFS_PROP_ID",
    "CERT_FORTEZZA_DATA_PROP_ID",
    "CERT_ARCHIVED_PROP_ID",
    "CERT_KEY_IDENTIFIER_PROP_ID",
    "CERT_AUTO_ENROLL_PROP_ID",
    "CERT_PUBKEY_ALG_PARA_PROP_ID",
    "CERT_CROSS_CERT_DIST_POINTS_PROP_ID",
    "CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID",
    "CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID",
    "CERT_ENROLLMENT_PROP_ID",
    "CERT_DATE_STAMP_PROP_ID",
    "CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID",
    "CERT_SUBJECT_NAME_MD5_HASH_PROP_ID",
    "CERT_EXTENDED_ERROR_INFO_PROP_ID",
    "CERT_RENEWAL_PROP_ID",
    "CERT_ARCHIVED_KEY_HASH_PROP_ID",
    "CERT_AUTO_ENROLL_RETRY_PROP_ID",
    "CERT_AIA_URL_RETRIEVED_PROP_ID",
    "CERT_AUTHORITY_INFO_ACCESS_PROP_ID",
    "CERT_BACKED_UP_PROP_ID",
    "CERT_OCSP_RESPONSE_PROP_ID",
    "CERT_REQUEST_ORIGINATOR_PROP_ID",
    "CERT_SOURCE_LOCATION_PROP_ID",
    "CERT_SOURCE_URL_PROP_ID",
    "CERT_NEW_KEY_PROP_ID",
    "CERT_OCSP_CACHE_PREFIX_PROP_ID",
    "CERT_SMART_CARD_ROOT_INFO_PROP_ID",
    "CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID",
    "CERT_NCRYPT_KEY_HANDLE_PROP_ID",
    "CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID",
    "CERT_SUBJECT_INFO_ACCESS_PROP_ID",
    "CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID",
    "CERT_CA_DISABLE_CRL_PROP_ID",
    "CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID",
    "CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID",
    "CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID",
    "CERT_SUBJECT_DISABLE_CRL_PROP_ID",
    "CERT_CEP_PROP_ID",
    "CERT_SIGN_HASH_CNG_ALG_PROP_ID",
    "CERT_SCARD_PIN_ID_PROP_ID",
    "CERT_SCARD_PIN_INFO_PROP_ID",
    "CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID",
    "CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID",
    "CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID",
    "CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID",
    "CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID",
    "CERT_NO_EXPIRE_NOTIFICATION_PROP_ID",
    "CERT_AUTH_ROOT_SHA256_HASH_PROP_ID",
    "CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID",
    "CERT_HCRYPTPROV_TRANSFER_PROP_ID",
    "CERT_SMART_CARD_READER_PROP_ID",
    "CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID",
    "CERT_KEY_REPAIR_ATTEMPTED_PROP_ID",
    "CERT_DISALLOWED_FILETIME_PROP_ID",
    "CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID",
    "CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID",
    "CERT_SHA256_HASH_PROP_ID",
    "CERT_SCEP_SERVER_CERTS_PROP_ID",
    "CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID",
    "CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID",
    "CERT_SCEP_CA_CERT_PROP_ID",
    "CERT_SCEP_SIGNER_CERT_PROP_ID",
    "CERT_SCEP_NONCE_PROP_ID",
    "CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID",
    "CERT_SCEP_FLAGS_PROP_ID",
    "CERT_SCEP_GUID_PROP_ID",
    "CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID",
    "CERT_ISOLATED_KEY_PROP_ID",
    "CERT_SERIAL_CHAIN_PROP_ID",
    "CERT_KEY_CLASSIFICATION_PROP_ID",
    "CERT_OCSP_MUST_STAPLE_PROP_ID",
    "CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID",
    "CERT_NONCOMPLIANT_ROOT_URL_PROP_ID",
    "CERT_PIN_SHA256_HASH_PROP_ID",
    "CERT_CLR_DELETE_KEY_PROP_ID",
    "CERT_NOT_BEFORE_FILETIME_PROP_ID",
    "CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID",
    "CERT_FIRST_RESERVED_PROP_ID",
    "CERT_LAST_RESERVED_PROP_ID",
    "CERT_FIRST_USER_PROP_ID",
    "CERT_LAST_USER_PROP_ID",
    "CERT_ACCESS_STATE_WRITE_PERSIST_FLAG",
    "CERT_ACCESS_STATE_SYSTEM_STORE_FLAG",
    "CERT_ACCESS_STATE_LM_SYSTEM_STORE_FLAG",
    "CERT_ACCESS_STATE_GP_SYSTEM_STORE_FLAG",
    "CERT_ACCESS_STATE_SHARED_USER_FLAG",
    "CERT_STORE_SIGNATURE_FLAG",
    "CERT_STORE_TIME_VALIDITY_FLAG",
    "CERT_STORE_REVOCATION_FLAG",
    "CERT_STORE_NO_CRL_FLAG",
    "CERT_STORE_NO_ISSUER_FLAG",
    "CERT_STORE_BASE_CRL_FLAG",
    "CERT_STORE_DELTA_CRL_FLAG",
    "CERT_STORE_UNSAFE_PHYSICAL_FLAG",
    "CERT_STORE_SHARE_STORE_FLAG",
    "CERT_STORE_MANIFOLD_FLAG",
    "CERT_SYSTEM_STORE_MASK",
    "CERT_SYSTEM_STORE_UNPROTECTED_FLAG",
    "CERT_SYSTEM_STORE_DEFER_READ_FLAG",
    "CERT_SYSTEM_STORE_LOCATION_SHIFT",
    "CERT_SYSTEM_STORE_CURRENT_USER_ID",
    "CERT_SYSTEM_STORE_LOCAL_MACHINE_ID",
    "CERT_SYSTEM_STORE_CURRENT_SERVICE_ID",
    "CERT_SYSTEM_STORE_SERVICES_ID",
    "CERT_SYSTEM_STORE_USERS_ID",
    "CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY_ID",
    "CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY_ID",
    "CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE_ID",
    "CERT_SYSTEM_STORE_LOCAL_MACHINE_WCOS_ID",
    "CERT_PROT_ROOT_DISABLE_CURRENT_USER_FLAG",
    "CERT_PROT_ROOT_INHIBIT_ADD_AT_INIT_FLAG",
    "CERT_PROT_ROOT_INHIBIT_PURGE_LM_FLAG",
    "CERT_PROT_ROOT_DISABLE_LM_AUTH_FLAG",
    "CERT_PROT_ROOT_ONLY_LM_GPT_FLAG",
    "CERT_PROT_ROOT_DISABLE_NT_AUTH_REQUIRED_FLAG",
    "CERT_PROT_ROOT_DISABLE_NOT_DEFINED_NAME_CONSTRAINT_FLAG",
    "CERT_PROT_ROOT_DISABLE_PEER_TRUST",
    "CERT_TRUST_PUB_ALLOW_TRUST_MASK",
    "CERT_TRUST_PUB_ALLOW_END_USER_TRUST",
    "CERT_TRUST_PUB_ALLOW_MACHINE_ADMIN_TRUST",
    "CERT_TRUST_PUB_ALLOW_ENTERPRISE_ADMIN_TRUST",
    "CERT_TRUST_PUB_CHECK_PUBLISHER_REV_FLAG",
    "CERT_TRUST_PUB_CHECK_TIMESTAMP_REV_FLAG",
    "CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_UNTRUSTED_ROOT_LOGGING_FLAG",
    "CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_PARTIAL_CHAIN_LOGGING_FLAG",
    "CERT_AUTO_UPDATE_DISABLE_RANDOM_QUERY_STRING_FLAG",
    "CERT_REGISTRY_STORE_REMOTE_FLAG",
    "CERT_REGISTRY_STORE_SERIALIZED_FLAG",
    "CERT_REGISTRY_STORE_CLIENT_GPT_FLAG",
    "CERT_REGISTRY_STORE_LM_GPT_FLAG",
    "CERT_REGISTRY_STORE_ROAMING_FLAG",
    "CERT_REGISTRY_STORE_MY_IE_DIRTY_FLAG",
    "CERT_REGISTRY_STORE_EXTERNAL_FLAG",
    "CERT_FILE_STORE_COMMIT_ENABLE_FLAG",
    "CERT_LDAP_STORE_SIGN_FLAG",
    "CERT_LDAP_STORE_AREC_EXCLUSIVE_FLAG",
    "CERT_LDAP_STORE_OPENED_FLAG",
    "CERT_LDAP_STORE_UNBIND_FLAG",
    "CERT_STORE_PROV_GP_SYSTEM_STORE_FLAG",
    "CERT_STORE_PROV_SHARED_USER_FLAG",
    "CERT_STORE_PROV_CLOSE_FUNC",
    "CERT_STORE_PROV_READ_CERT_FUNC",
    "CERT_STORE_PROV_WRITE_CERT_FUNC",
    "CERT_STORE_PROV_DELETE_CERT_FUNC",
    "CERT_STORE_PROV_SET_CERT_PROPERTY_FUNC",
    "CERT_STORE_PROV_READ_CRL_FUNC",
    "CERT_STORE_PROV_WRITE_CRL_FUNC",
    "CERT_STORE_PROV_DELETE_CRL_FUNC",
    "CERT_STORE_PROV_SET_CRL_PROPERTY_FUNC",
    "CERT_STORE_PROV_READ_CTL_FUNC",
    "CERT_STORE_PROV_WRITE_CTL_FUNC",
    "CERT_STORE_PROV_DELETE_CTL_FUNC",
    "CERT_STORE_PROV_SET_CTL_PROPERTY_FUNC",
    "CERT_STORE_PROV_CONTROL_FUNC",
    "CERT_STORE_PROV_FIND_CERT_FUNC",
    "CERT_STORE_PROV_FREE_FIND_CERT_FUNC",
    "CERT_STORE_PROV_GET_CERT_PROPERTY_FUNC",
    "CERT_STORE_PROV_FIND_CRL_FUNC",
    "CERT_STORE_PROV_FREE_FIND_CRL_FUNC",
    "CERT_STORE_PROV_GET_CRL_PROPERTY_FUNC",
    "CERT_STORE_PROV_FIND_CTL_FUNC",
    "CERT_STORE_PROV_FREE_FIND_CTL_FUNC",
    "CERT_STORE_PROV_GET_CTL_PROPERTY_FUNC",
    "CERT_STORE_PROV_WRITE_ADD_FLAG",
    "CERT_STORE_SAVE_AS_PKCS12",
    "CERT_CLOSE_STORE_FORCE_FLAG",
    "CERT_CLOSE_STORE_CHECK_FLAG",
    "CERT_COMPARE_MASK",
    "CERT_COMPARE_ANY",
    "CERT_COMPARE_SHA1_HASH",
    "CERT_COMPARE_NAME",
    "CERT_COMPARE_ATTR",
    "CERT_COMPARE_MD5_HASH",
    "CERT_COMPARE_PROPERTY",
    "CERT_COMPARE_PUBLIC_KEY",
    "CERT_COMPARE_HASH",
    "CERT_COMPARE_NAME_STR_A",
    "CERT_COMPARE_NAME_STR_W",
    "CERT_COMPARE_KEY_SPEC",
    "CERT_COMPARE_ENHKEY_USAGE",
    "CERT_COMPARE_CTL_USAGE",
    "CERT_COMPARE_SUBJECT_CERT",
    "CERT_COMPARE_ISSUER_OF",
    "CERT_COMPARE_EXISTING",
    "CERT_COMPARE_SIGNATURE_HASH",
    "CERT_COMPARE_KEY_IDENTIFIER",
    "CERT_COMPARE_CERT_ID",
    "CERT_COMPARE_CROSS_CERT_DIST_POINTS",
    "CERT_COMPARE_PUBKEY_MD5_HASH",
    "CERT_COMPARE_SUBJECT_INFO_ACCESS",
    "CERT_COMPARE_HASH_STR",
    "CERT_COMPARE_HAS_PRIVATE_KEY",
    "CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG",
    "CERT_SET_PROPERTY_INHIBIT_PERSIST_FLAG",
    "CTL_ENTRY_FROM_PROP_CHAIN_FLAG",
    "CRL_FIND_ANY",
    "CRL_FIND_ISSUED_BY",
    "CRL_FIND_EXISTING",
    "CRL_FIND_ISSUED_FOR",
    "CRL_FIND_ISSUED_BY_AKI_FLAG",
    "CRL_FIND_ISSUED_BY_SIGNATURE_FLAG",
    "CRL_FIND_ISSUED_BY_DELTA_FLAG",
    "CRL_FIND_ISSUED_BY_BASE_FLAG",
    "CRL_FIND_ISSUED_FOR_SET_STRONG_PROPERTIES_FLAG",
    "CERT_STORE_ADD_NEW",
    "CERT_STORE_ADD_USE_EXISTING",
    "CERT_STORE_ADD_REPLACE_EXISTING",
    "CERT_STORE_ADD_ALWAYS",
    "CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES",
    "CERT_STORE_ADD_NEWER",
    "CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES",
    "CERT_STORE_CERTIFICATE_CONTEXT",
    "CERT_STORE_CRL_CONTEXT",
    "CERT_STORE_CTL_CONTEXT",
    "CTL_ANY_SUBJECT_TYPE",
    "CTL_CERT_SUBJECT_TYPE",
    "CTL_FIND_NO_LIST_ID_CBDATA",
    "CERT_STORE_CTRL_RESYNC",
    "CERT_STORE_CTRL_NOTIFY_CHANGE",
    "CERT_STORE_CTRL_COMMIT",
    "CERT_STORE_CTRL_AUTO_RESYNC",
    "CERT_STORE_CTRL_CANCEL_NOTIFY",
    "CERT_STORE_LOCALIZED_NAME_PROP_ID",
    "CERT_CREATE_CONTEXT_NOCOPY_FLAG",
    "CERT_CREATE_CONTEXT_SORTED_FLAG",
    "CERT_CREATE_CONTEXT_NO_HCRYPTMSG_FLAG",
    "CERT_CREATE_CONTEXT_NO_ENTRY_FLAG",
    "CERT_PHYSICAL_STORE_ADD_ENABLE_FLAG",
    "CERT_PHYSICAL_STORE_OPEN_DISABLE_FLAG",
    "CERT_PHYSICAL_STORE_REMOTE_OPEN_DISABLE_FLAG",
    "CERT_PHYSICAL_STORE_INSERT_COMPUTER_NAME_ENABLE_FLAG",
    "CERT_PHYSICAL_STORE_PREDEFINED_ENUM_FLAG",
    "CMSG_TRUSTED_SIGNER_FLAG",
    "CMSG_SIGNER_ONLY_FLAG",
    "CMSG_USE_SIGNER_INDEX_FLAG",
    "CMSG_CMS_ENCAPSULATED_CTL_FLAG",
    "CMSG_ENCODE_SORTED_CTL_FLAG",
    "CMSG_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG",
    "CERT_VERIFY_INHIBIT_CTL_UPDATE_FLAG",
    "CERT_VERIFY_TRUSTED_SIGNERS_FLAG",
    "CERT_VERIFY_NO_TIME_CHECK_FLAG",
    "CERT_VERIFY_ALLOW_MORE_USAGE_FLAG",
    "CERT_VERIFY_UPDATED_CTL_FLAG",
    "CERT_CONTEXT_REVOCATION_TYPE",
    "CERT_VERIFY_REV_CHAIN_FLAG",
    "CERT_VERIFY_CACHE_ONLY_BASED_REVOCATION",
    "CERT_VERIFY_REV_ACCUMULATIVE_TIMEOUT_FLAG",
    "CERT_VERIFY_REV_SERVER_OCSP_FLAG",
    "CERT_VERIFY_REV_NO_OCSP_FAILOVER_TO_CRL_FLAG",
    "CERT_VERIFY_REV_SERVER_OCSP_WIRE_ONLY_FLAG",
    "CERT_UNICODE_IS_RDN_ATTRS_FLAG",
    "CERT_CASE_INSENSITIVE_IS_RDN_ATTRS_FLAG",
    "CRYPT_VERIFY_CERT_SIGN_SUBJECT_BLOB",
    "CRYPT_VERIFY_CERT_SIGN_SUBJECT_CERT",
    "CRYPT_VERIFY_CERT_SIGN_SUBJECT_CRL",
    "CRYPT_VERIFY_CERT_SIGN_SUBJECT_OCSP_BASIC_SIGNED_RESPONSE",
    "CRYPT_VERIFY_CERT_SIGN_ISSUER_PUBKEY",
    "CRYPT_VERIFY_CERT_SIGN_ISSUER_CERT",
    "CRYPT_VERIFY_CERT_SIGN_ISSUER_CHAIN",
    "CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL",
    "CRYPT_VERIFY_CERT_SIGN_CHECK_WEAK_HASH_FLAG",
    "CRYPT_ACQUIRE_WINDOW_HANDLE_FLAG",
    "CRYPT_ACQUIRE_NCRYPT_KEY_FLAGS_MASK",
    "CRYPT_ACQUIRE_ALLOW_NCRYPT_KEY_FLAG",
    "CRYPT_ACQUIRE_PREFER_NCRYPT_KEY_FLAG",
    "CRYPT_ACQUIRE_ONLY_NCRYPT_KEY_FLAG",
    "CRYPT_DELETE_KEYSET",
    "CERT_XML_NAME_STR",
    "CERT_NAME_STR_SEMICOLON_FLAG",
    "CERT_NAME_STR_NO_PLUS_FLAG",
    "CERT_NAME_STR_NO_QUOTING_FLAG",
    "CERT_NAME_STR_CRLF_FLAG",
    "CERT_NAME_STR_COMMA_FLAG",
    "CERT_NAME_STR_REVERSE_FLAG",
    "CERT_NAME_STR_FORWARD_FLAG",
    "CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG",
    "CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG",
    "CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG",
    "CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG",
    "CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG",
    "CERT_NAME_STR_ENABLE_PUNYCODE_FLAG",
    "CERT_NAME_EMAIL_TYPE",
    "CERT_NAME_RDN_TYPE",
    "CERT_NAME_ATTR_TYPE",
    "CERT_NAME_SIMPLE_DISPLAY_TYPE",
    "CERT_NAME_FRIENDLY_DISPLAY_TYPE",
    "CERT_NAME_DNS_TYPE",
    "CERT_NAME_URL_TYPE",
    "CERT_NAME_UPN_TYPE",
    "CERT_NAME_ISSUER_FLAG",
    "CERT_NAME_DISABLE_IE4_UTF8_FLAG",
    "CERT_NAME_SEARCH_ALL_NAMES_FLAG",
    "CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG",
    "CRYPT_MESSAGE_ENCAPSULATED_CONTENT_OUT_FLAG",
    "CRYPT_MESSAGE_KEYID_SIGNER_FLAG",
    "CRYPT_MESSAGE_SILENT_KEYSET_FLAG",
    "CRYPT_MESSAGE_KEYID_RECIPIENT_FLAG",
    "CRYPT_RETRIEVE_MULTIPLE_OBJECTS",
    "CRYPT_CACHE_ONLY_RETRIEVAL",
    "CRYPT_WIRE_ONLY_RETRIEVAL",
    "CRYPT_DONT_CACHE_RESULT",
    "CRYPT_ASYNC_RETRIEVAL",
    "CRYPT_STICKY_CACHE_RETRIEVAL",
    "CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL",
    "CRYPT_OFFLINE_CHECK_RETRIEVAL",
    "CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE",
    "CRYPT_LDAP_SIGN_RETRIEVAL",
    "CRYPT_NO_AUTH_RETRIEVAL",
    "CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL",
    "CRYPT_AIA_RETRIEVAL",
    "CRYPT_HTTP_POST_RETRIEVAL",
    "CRYPT_PROXY_CACHE_RETRIEVAL",
    "CRYPT_NOT_MODIFIED_RETRIEVAL",
    "CRYPT_ENABLE_SSL_REVOCATION_RETRIEVAL",
    "CRYPT_RANDOM_QUERY_STRING_RETRIEVAL",
    "CRYPT_ENABLE_FILE_RETRIEVAL",
    "CRYPT_CREATE_NEW_FLUSH_ENTRY",
    "CRYPT_VERIFY_CONTEXT_SIGNATURE",
    "CRYPT_VERIFY_DATA_HASH",
    "CRYPT_KEEP_TIME_VALID",
    "CRYPT_DONT_VERIFY_SIGNATURE",
    "CRYPT_DONT_CHECK_TIME_VALIDITY",
    "CRYPT_CHECK_FRESHNESS_TIME_VALIDITY",
    "CRYPT_ACCUMULATIVE_TIMEOUT",
    "CRYPT_OCSP_ONLY_RETRIEVAL",
    "CRYPT_NO_OCSP_FAILOVER_TO_CRL_RETRIEVAL",
    "CRYPTNET_URL_CACHE_PRE_FETCH_NONE",
    "CRYPTNET_URL_CACHE_PRE_FETCH_BLOB",
    "CRYPTNET_URL_CACHE_PRE_FETCH_CRL",
    "CRYPTNET_URL_CACHE_PRE_FETCH_OCSP",
    "CRYPTNET_URL_CACHE_PRE_FETCH_AUTOROOT_CAB",
    "CRYPTNET_URL_CACHE_PRE_FETCH_DISALLOWED_CERT_CAB",
    "CRYPTNET_URL_CACHE_PRE_FETCH_PIN_RULES_CAB",
    "CRYPTNET_URL_CACHE_DEFAULT_FLUSH",
    "CRYPTNET_URL_CACHE_DISABLE_FLUSH",
    "CRYPTNET_URL_CACHE_RESPONSE_NONE",
    "CRYPTNET_URL_CACHE_RESPONSE_HTTP",
    "CRYPTNET_URL_CACHE_RESPONSE_VALIDATED",
    "CRYPT_RETRIEVE_MAX_ERROR_CONTENT_LENGTH",
    "CRYPT_KEYID_MACHINE_FLAG",
    "CRYPT_KEYID_ALLOC_FLAG",
    "CRYPT_KEYID_DELETE_FLAG",
    "CRYPT_KEYID_SET_NEW_FLAG",
    "CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_DEFAULT",
    "CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_DEFAULT",
    "CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_DEFAULT",
    "CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_DEFAULT",
    "CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DEFAULT",
    "CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DISABLE",
    "CERT_CHAIN_ENABLE_MD2_MD4_FLAG",
    "CERT_CHAIN_ENABLE_WEAK_RSA_ROOT_FLAG",
    "CERT_CHAIN_ENABLE_WEAK_LOGGING_FLAG",
    "CERT_CHAIN_ENABLE_ONLY_WEAK_LOGGING_FLAG",
    "CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DEFAULT",
    "CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DISABLE",
    "CERT_CHAIN_MIN_PUB_KEY_BIT_LENGTH_DISABLE",
    "CERT_CHAIN_ENABLE_WEAK_SETTINGS_FLAG",
    "CERT_CHAIN_DISABLE_ECC_PARA_FLAG",
    "CERT_CHAIN_DISABLE_ALL_EKU_WEAK_FLAG",
    "CERT_CHAIN_ENABLE_ALL_EKU_HYGIENE_FLAG",
    "CERT_CHAIN_DISABLE_OPT_IN_SERVER_AUTH_WEAK_FLAG",
    "CERT_CHAIN_DISABLE_SERVER_AUTH_WEAK_FLAG",
    "CERT_CHAIN_ENABLE_SERVER_AUTH_HYGIENE_FLAG",
    "CERT_CHAIN_DISABLE_CODE_SIGNING_WEAK_FLAG",
    "CERT_CHAIN_DISABLE_MOTW_CODE_SIGNING_WEAK_FLAG",
    "CERT_CHAIN_ENABLE_CODE_SIGNING_HYGIENE_FLAG",
    "CERT_CHAIN_ENABLE_MOTW_CODE_SIGNING_HYGIENE_FLAG",
    "CERT_CHAIN_DISABLE_TIMESTAMP_WEAK_FLAG",
    "CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_WEAK_FLAG",
    "CERT_CHAIN_ENABLE_TIMESTAMP_HYGIENE_FLAG",
    "CERT_CHAIN_ENABLE_MOTW_TIMESTAMP_HYGIENE_FLAG",
    "CERT_CHAIN_MOTW_IGNORE_AFTER_TIME_WEAK_FLAG",
    "CERT_CHAIN_DISABLE_FILE_HASH_WEAK_FLAG",
    "CERT_CHAIN_DISABLE_MOTW_FILE_HASH_WEAK_FLAG",
    "CERT_CHAIN_DISABLE_TIMESTAMP_HASH_WEAK_FLAG",
    "CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_HASH_WEAK_FLAG",
    "CERT_CHAIN_OPT_IN_WEAK_FLAGS",
    "CERT_CHAIN_AUTO_CURRENT_USER",
    "CERT_CHAIN_AUTO_LOCAL_MACHINE",
    "CERT_CHAIN_AUTO_IMPERSONATED",
    "CERT_CHAIN_AUTO_PROCESS_INFO",
    "CERT_CHAIN_AUTO_PINRULE_INFO",
    "CERT_CHAIN_AUTO_NETWORK_INFO",
    "CERT_CHAIN_AUTO_SERIAL_LOCAL_MACHINE",
    "CERT_CHAIN_AUTO_HPKP_RULE_INFO",
    "CERT_CHAIN_AUTO_FLUSH_DISABLE_FLAG",
    "CERT_CHAIN_AUTO_LOG_CREATE_FLAG",
    "CERT_CHAIN_AUTO_LOG_FREE_FLAG",
    "CERT_CHAIN_AUTO_LOG_FLUSH_FLAG",
    "CERT_SRV_OCSP_RESP_MIN_SYNC_CERT_FILE_SECONDS_DEFAULT",
    "CRYPTNET_MAX_CACHED_OCSP_PER_CRL_COUNT_DEFAULT",
    "CRYPTNET_OCSP_AFTER_CRL_DISABLE",
    "CRYPTNET_PRE_FETCH_AFTER_PUBLISH_PRE_FETCH_DIVISOR_DEFAULT",
    "CRYPTNET_PRE_FETCH_BEFORE_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT",
    "CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT",
    "CRYPTNET_PRE_FETCH_TRIGGER_DISABLE",
    "CRYPTNET_PRE_FETCH_SCAN_AFTER_TRIGGER_DELAY_SECONDS_DEFAULT",
    "CRYPTNET_CACHED_OCSP_SWITCH_TO_CRL_COUNT_DEFAULT",
    "CRYPTNET_CRL_BEFORE_OCSP_ENABLE",
    "CERT_CHAIN_OPTION_DISABLE_AIA_URL_RETRIEVAL",
    "CERT_CHAIN_OPTION_ENABLE_SIA_URL_RETRIEVAL",
    "CERT_CHAIN_CRL_VALIDITY_EXT_PERIOD_HOURS_DEFAULT",
    "CERT_CHAIN_CACHE_END_CERT",
    "CERT_CHAIN_THREAD_STORE_SYNC",
    "CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL",
    "CERT_CHAIN_USE_LOCAL_MACHINE_STORE",
    "CERT_CHAIN_ENABLE_CACHE_AUTO_UPDATE",
    "CERT_CHAIN_ENABLE_SHARE_STORE",
    "CERT_CHAIN_EXCLUSIVE_ENABLE_CA_FLAG",
    "CERT_TRUST_NO_ERROR",
    "CERT_TRUST_IS_NOT_TIME_VALID",
    "CERT_TRUST_IS_NOT_TIME_NESTED",
    "CERT_TRUST_IS_REVOKED",
    "CERT_TRUST_IS_NOT_SIGNATURE_VALID",
    "CERT_TRUST_IS_NOT_VALID_FOR_USAGE",
    "CERT_TRUST_IS_UNTRUSTED_ROOT",
    "CERT_TRUST_REVOCATION_STATUS_UNKNOWN",
    "CERT_TRUST_IS_CYCLIC",
    "CERT_TRUST_INVALID_EXTENSION",
    "CERT_TRUST_INVALID_POLICY_CONSTRAINTS",
    "CERT_TRUST_INVALID_BASIC_CONSTRAINTS",
    "CERT_TRUST_INVALID_NAME_CONSTRAINTS",
    "CERT_TRUST_HAS_NOT_SUPPORTED_NAME_CONSTRAINT",
    "CERT_TRUST_HAS_NOT_DEFINED_NAME_CONSTRAINT",
    "CERT_TRUST_HAS_NOT_PERMITTED_NAME_CONSTRAINT",
    "CERT_TRUST_HAS_EXCLUDED_NAME_CONSTRAINT",
    "CERT_TRUST_IS_OFFLINE_REVOCATION",
    "CERT_TRUST_NO_ISSUANCE_CHAIN_POLICY",
    "CERT_TRUST_IS_EXPLICIT_DISTRUST",
    "CERT_TRUST_HAS_NOT_SUPPORTED_CRITICAL_EXT",
    "CERT_TRUST_HAS_WEAK_SIGNATURE",
    "CERT_TRUST_HAS_WEAK_HYGIENE",
    "CERT_TRUST_IS_PARTIAL_CHAIN",
    "CERT_TRUST_CTL_IS_NOT_TIME_VALID",
    "CERT_TRUST_CTL_IS_NOT_SIGNATURE_VALID",
    "CERT_TRUST_CTL_IS_NOT_VALID_FOR_USAGE",
    "CERT_TRUST_HAS_EXACT_MATCH_ISSUER",
    "CERT_TRUST_HAS_KEY_MATCH_ISSUER",
    "CERT_TRUST_HAS_NAME_MATCH_ISSUER",
    "CERT_TRUST_IS_SELF_SIGNED",
    "CERT_TRUST_AUTO_UPDATE_CA_REVOCATION",
    "CERT_TRUST_AUTO_UPDATE_END_REVOCATION",
    "CERT_TRUST_NO_OCSP_FAILOVER_TO_CRL",
    "CERT_TRUST_IS_KEY_ROLLOVER",
    "CERT_TRUST_SSL_HANDSHAKE_OCSP",
    "CERT_TRUST_SSL_TIME_VALID_OCSP",
    "CERT_TRUST_SSL_RECONNECT_OCSP",
    "CERT_TRUST_HAS_PREFERRED_ISSUER",
    "CERT_TRUST_HAS_ISSUANCE_CHAIN_POLICY",
    "CERT_TRUST_HAS_VALID_NAME_CONSTRAINTS",
    "CERT_TRUST_IS_PEER_TRUSTED",
    "CERT_TRUST_HAS_CRL_VALIDITY_EXTENDED",
    "CERT_TRUST_IS_FROM_EXCLUSIVE_TRUST_STORE",
    "CERT_TRUST_IS_CA_TRUSTED",
    "CERT_TRUST_HAS_AUTO_UPDATE_WEAK_SIGNATURE",
    "CERT_TRUST_HAS_ALLOW_WEAK_SIGNATURE",
    "CERT_TRUST_IS_COMPLEX_CHAIN",
    "CERT_TRUST_SSL_TIME_VALID",
    "CERT_TRUST_NO_TIME_CHECK",
    "USAGE_MATCH_TYPE_AND",
    "USAGE_MATCH_TYPE_OR",
    "CERT_CHAIN_STRONG_SIGN_DISABLE_END_CHECK_FLAG",
    "CERT_CHAIN_REVOCATION_CHECK_END_CERT",
    "CERT_CHAIN_REVOCATION_CHECK_CHAIN",
    "CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT",
    "CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY",
    "CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT",
    "CERT_CHAIN_REVOCATION_CHECK_OCSP_CERT",
    "CERT_CHAIN_DISABLE_PASS1_QUALITY_FILTERING",
    "CERT_CHAIN_RETURN_LOWER_QUALITY_CONTEXTS",
    "CERT_CHAIN_DISABLE_AUTH_ROOT_AUTO_UPDATE",
    "CERT_CHAIN_TIMESTAMP_TIME",
    "CERT_CHAIN_ENABLE_PEER_TRUST",
    "CERT_CHAIN_DISABLE_MY_PEER_TRUST",
    "CERT_CHAIN_DISABLE_MD2_MD4",
    "CERT_CHAIN_DISABLE_AIA",
    "CERT_CHAIN_HAS_MOTW",
    "CERT_CHAIN_ONLY_ADDITIONAL_AND_AUTH_ROOT",
    "CERT_CHAIN_OPT_IN_WEAK_SIGNATURE",
    "CERT_CHAIN_FIND_BY_ISSUER",
    "CERT_CHAIN_POLICY_IGNORE_WEAK_SIGNATURE_FLAG",
    "BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_CA_FLAG",
    "BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_END_ENTITY_FLAG",
    "MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG",
    "MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG",
    "MICROSOFT_ROOT_CERT_CHAIN_POLICY_DISABLE_FLIGHT_ROOT_FLAG",
    "SSL_F12_ERROR_TEXT_LENGTH",
    "CERT_CHAIN_POLICY_SSL_F12_SUCCESS_LEVEL",
    "CERT_CHAIN_POLICY_SSL_F12_WARNING_LEVEL",
    "CERT_CHAIN_POLICY_SSL_F12_ERROR_LEVEL",
    "CERT_CHAIN_POLICY_SSL_F12_NONE_CATEGORY",
    "CERT_CHAIN_POLICY_SSL_F12_WEAK_CRYPTO_CATEGORY",
    "CERT_CHAIN_POLICY_SSL_F12_ROOT_PROGRAM_CATEGORY",
    "SSL_HPKP_PKP_HEADER_INDEX",
    "SSL_HPKP_PKP_RO_HEADER_INDEX",
    "SSL_HPKP_HEADER_COUNT",
    "SSL_KEY_PIN_ERROR_TEXT_LENGTH",
    "CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_ERROR",
    "CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_ERROR",
    "CERT_CHAIN_POLICY_SSL_KEY_PIN_SUCCESS",
    "CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_WARNING",
    "CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_WARNING",
    "CRYPT_STRING_BASE64URI",
    "CRYPT_STRING_ENCODEMASK",
    "CRYPT_STRING_RESERVED100",
    "CRYPT_STRING_RESERVED200",
    "CRYPT_STRING_PERCENTESCAPE",
    "CRYPT_STRING_HASHDATA",
    "CRYPT_STRING_NOCRLF",
    "CRYPT_STRING_NOCR",
    "PKCS12_IMPORT_SILENT",
    "PKCS12_ONLY_CERTIFICATES",
    "PKCS12_ONLY_NOT_ENCRYPTED_CERTIFICATES",
    "PKCS12_VIRTUAL_ISOLATION_KEY",
    "PKCS12_IMPORT_RESERVED_MASK",
    "PKCS12_ONLY_CERTIFICATES_PROVIDER_TYPE",
    "REPORT_NO_PRIVATE_KEY",
    "REPORT_NOT_ABLE_TO_EXPORT_PRIVATE_KEY",
    "EXPORT_PRIVATE_KEYS",
    "PKCS12_PROTECT_TO_DOMAIN_SIDS",
    "PKCS12_EXPORT_SILENT",
    "PKCS12_EXPORT_PBES2_PARAMS",
    "PKCS12_DISABLE_ENCRYPT_CERTIFICATES",
    "PKCS12_ENCRYPT_CERTIFICATES",
    "PKCS12_EXPORT_ECC_CURVE_PARAMETERS",
    "PKCS12_EXPORT_ECC_CURVE_OID",
    "PKCS12_EXPORT_RESERVED_MASK",
    "CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_READ_FLAG",
    "CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_WRITE_FLAG",
    "CERT_SERVER_OCSP_RESPONSE_ASYNC_FLAG",
    "CERT_SELECT_MAX_PARA",
    "CERT_SELECT_BY_ISSUER_DISPLAYNAME",
    "CERT_SELECT_BY_FRIENDLYNAME",
    "CERT_SELECT_BY_THUMBPRINT",
    "CERT_SELECT_ALLOW_EXPIRED",
    "CERT_SELECT_TRUSTED_ROOT",
    "CERT_SELECT_DISALLOW_SELFSIGNED",
    "CERT_SELECT_HAS_PRIVATE_KEY",
    "CERT_SELECT_HAS_KEY_FOR_SIGNATURE",
    "CERT_SELECT_HAS_KEY_FOR_KEY_EXCHANGE",
    "CERT_SELECT_HARDWARE_ONLY",
    "CERT_SELECT_ALLOW_DUPLICATES",
    "CERT_SELECT_IGNORE_AUTOSELECT",
    "TIMESTAMP_FAILURE_BAD_ALG",
    "TIMESTAMP_FAILURE_BAD_REQUEST",
    "TIMESTAMP_FAILURE_BAD_FORMAT",
    "TIMESTAMP_FAILURE_TIME_NOT_AVAILABLE",
    "TIMESTAMP_FAILURE_POLICY_NOT_SUPPORTED",
    "TIMESTAMP_FAILURE_EXTENSION_NOT_SUPPORTED",
    "TIMESTAMP_FAILURE_INFO_NOT_AVAILABLE",
    "TIMESTAMP_FAILURE_SYSTEM_FAILURE",
    "TIMESTAMP_DONT_HASH_DATA",
    "TIMESTAMP_VERIFY_CONTEXT_SIGNATURE",
    "TIMESTAMP_NO_AUTH_RETRIEVAL",
    "CRYPT_OBJECT_LOCATOR_SPN_NAME_TYPE",
    "CRYPT_OBJECT_LOCATOR_LAST_RESERVED_NAME_TYPE",
    "CRYPT_OBJECT_LOCATOR_FIRST_RESERVED_USER_NAME_TYPE",
    "CRYPT_OBJECT_LOCATOR_LAST_RESERVED_USER_NAME_TYPE",
    "CERT_FILE_HASH_USE_TYPE",
    "CERT_TIMESTAMP_HASH_USE_TYPE",
    "RECIPIENTPOLICYV1",
    "RECIPIENTPOLICYV2",
    "E_ICARD_COMMUNICATION",
    "E_ICARD_DATA_ACCESS",
    "E_ICARD_EXPORT",
    "E_ICARD_IDENTITY",
    "E_ICARD_IMPORT",
    "E_ICARD_ARGUMENT",
    "E_ICARD_REQUEST",
    "E_ICARD_INFORMATIONCARD",
    "E_ICARD_STOREKEY",
    "E_ICARD_LOGOVALIDATION",
    "E_ICARD_PASSWORDVALIDATION",
    "E_ICARD_POLICY",
    "E_ICARD_PROCESSDIED",
    "E_ICARD_SERVICEBUSY",
    "E_ICARD_SERVICE",
    "E_ICARD_SHUTTINGDOWN",
    "E_ICARD_TOKENCREATION",
    "E_ICARD_TRUSTEXCHANGE",
    "E_ICARD_UNTRUSTED",
    "E_ICARD_USERCANCELLED",
    "E_ICARD_STORE_IMPORT",
    "E_ICARD_FAIL",
    "E_ICARD_UI_INITIALIZATION",
    "E_ICARD_REFRESH_REQUIRED",
    "E_ICARD_MISSING_APPLIESTO",
    "E_ICARD_INVALID_PROOF_KEY",
    "E_ICARD_UNKNOWN_REFERENCE",
    "E_ICARD_FAILED_REQUIRED_CLAIMS",
    "AUDIT_CARD_WRITTEN",
    "AUDIT_CARD_DELETE",
    "AUDIT_CARD_IMPORT",
    "AUDIT_STORE_IMPORT",
    "AUDIT_STORE_EXPORT",
    "AUDIT_STORE_DELETE",
    "AUDIT_SERVICE_IDLE_STOP",
    "BCRYPT_OPERATION",
    "BCRYPT_CIPHER_OPERATION",
    "BCRYPT_HASH_OPERATION",
    "BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION",
    "BCRYPT_SECRET_AGREEMENT_OPERATION",
    "BCRYPT_SIGNATURE_OPERATION",
    "BCRYPT_RNG_OPERATION",
    "NCRYPT_OPERATION",
    "NCRYPT_CIPHER_OPERATION",
    "NCRYPT_HASH_OPERATION",
    "NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION",
    "NCRYPT_SECRET_AGREEMENT_OPERATION",
    "NCRYPT_SIGNATURE_OPERATION",
    "CERT_FIND_FLAGS",
    "CERT_FIND_ANY",
    "CERT_FIND_CERT_ID",
    "CERT_FIND_CTL_USAGE",
    "CERT_FIND_ENHKEY_USAGE",
    "CERT_FIND_EXISTING",
    "CERT_FIND_HASH",
    "CERT_FIND_HAS_PRIVATE_KEY",
    "CERT_FIND_ISSUER_ATTR",
    "CERT_FIND_ISSUER_NAME",
    "CERT_FIND_ISSUER_OF",
    "CERT_FIND_ISSUER_STR",
    "CERT_FIND_KEY_IDENTIFIER",
    "CERT_FIND_KEY_SPEC",
    "CERT_FIND_MD5_HASH",
    "CERT_FIND_PROPERTY",
    "CERT_FIND_PUBLIC_KEY",
    "CERT_FIND_SHA1_HASH",
    "CERT_FIND_SIGNATURE_HASH",
    "CERT_FIND_SUBJECT_ATTR",
    "CERT_FIND_SUBJECT_CERT",
    "CERT_FIND_SUBJECT_NAME",
    "CERT_FIND_SUBJECT_STR",
    "CERT_FIND_CROSS_CERT_DIST_POINTS",
    "CERT_FIND_PUBKEY_MD5_HASH",
    "CERT_FIND_SUBJECT_STR_A",
    "CERT_FIND_SUBJECT_STR_W",
    "CERT_FIND_ISSUER_STR_A",
    "CERT_FIND_ISSUER_STR_W",
    "CERT_FIND_SUBJECT_INFO_ACCESS",
    "CERT_FIND_HASH_STR",
    "CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG",
    "CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG",
    "CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG",
    "CERT_FIND_NO_ENHKEY_USAGE_FLAG",
    "CERT_FIND_OR_ENHKEY_USAGE_FLAG",
    "CERT_FIND_VALID_ENHKEY_USAGE_FLAG",
    "CERT_FIND_OPTIONAL_CTL_USAGE_FLAG",
    "CERT_FIND_EXT_ONLY_CTL_USAGE_FLAG",
    "CERT_FIND_PROP_ONLY_CTL_USAGE_FLAG",
    "CERT_FIND_NO_CTL_USAGE_FLAG",
    "CERT_FIND_OR_CTL_USAGE_FLAG",
    "CERT_FIND_VALID_CTL_USAGE_FLAG",
    "CERT_QUERY_OBJECT_TYPE",
    "CERT_QUERY_OBJECT_FILE",
    "CERT_QUERY_OBJECT_BLOB",
    "CERT_QUERY_CONTENT_TYPE",
    "CERT_QUERY_CONTENT_CERT",
    "CERT_QUERY_CONTENT_CTL",
    "CERT_QUERY_CONTENT_CRL",
    "CERT_QUERY_CONTENT_SERIALIZED_STORE",
    "CERT_QUERY_CONTENT_SERIALIZED_CERT",
    "CERT_QUERY_CONTENT_SERIALIZED_CTL",
    "CERT_QUERY_CONTENT_SERIALIZED_CRL",
    "CERT_QUERY_CONTENT_PKCS7_SIGNED",
    "CERT_QUERY_CONTENT_PKCS7_UNSIGNED",
    "CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED",
    "CERT_QUERY_CONTENT_PKCS10",
    "CERT_QUERY_CONTENT_PFX",
    "CERT_QUERY_CONTENT_CERT_PAIR",
    "CERT_QUERY_CONTENT_PFX_AND_LOAD",
    "CERT_QUERY_CONTENT_TYPE_FLAGS",
    "CERT_QUERY_CONTENT_FLAG_CERT",
    "CERT_QUERY_CONTENT_FLAG_CTL",
    "CERT_QUERY_CONTENT_FLAG_CRL",
    "CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE",
    "CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT",
    "CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL",
    "CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL",
    "CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED",
    "CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED",
    "CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED",
    "CERT_QUERY_CONTENT_FLAG_PKCS10",
    "CERT_QUERY_CONTENT_FLAG_PFX",
    "CERT_QUERY_CONTENT_FLAG_CERT_PAIR",
    "CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD",
    "CERT_QUERY_CONTENT_FLAG_ALL",
    "CERT_QUERY_CONTENT_FLAG_ALL_ISSUER_CERT",
    "CERT_QUERY_FORMAT_TYPE",
    "CERT_QUERY_FORMAT_BINARY",
    "CERT_QUERY_FORMAT_BASE64_ENCODED",
    "CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED",
    "CERT_QUERY_FORMAT_TYPE_FLAGS",
    "CERT_QUERY_FORMAT_FLAG_BINARY",
    "CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED",
    "CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED",
    "CERT_QUERY_FORMAT_FLAG_ALL",
    "CERT_QUERY_ENCODING_TYPE",
    "X509_ASN_ENCODING",
    "PKCS_7_ASN_ENCODING",
    "CERT_RDN_ATTR_VALUE_TYPE",
    "CERT_RDN_ANY_TYPE",
    "CERT_RDN_NUMERIC_STRING",
    "CERT_RDN_PRINTABLE_STRING",
    "CERT_RDN_T61_STRING",
    "CERT_RDN_VIDEOTEX_STRING",
    "CERT_RDN_IA5_STRING",
    "CERT_RDN_GRAPHIC_STRING",
    "CERT_RDN_ISO646_STRING",
    "CERT_RDN_GENERAL_STRING",
    "CERT_RDN_INT4_STRING",
    "CERT_RDN_UNICODE_STRING",
    "CERT_RDN_BMP_STRING",
    "CERT_RDN_ENCODED_BLOB",
    "CERT_RDN_OCTET_STRING",
    "CERT_RDN_TELETEX_STRING",
    "CERT_RDN_UNIVERSAL_STRING",
    "CERT_RDN_UTF8_STRING",
    "CERT_RDN_VISIBLE_STRING",
    "CERT_STRING_TYPE",
    "CERT_SIMPLE_NAME_STR",
    "CERT_OID_NAME_STR",
    "CERT_X500_NAME_STR",
    "BCRYPT_TABLE",
    "CRYPT_LOCAL",
    "CRYPT_DOMAIN",
    "CERT_KEY_SPEC",
    "AT_KEYEXCHANGE",
    "AT_SIGNATURE",
    "CERT_NCRYPT_KEY_SPEC",
    "BCRYPT_INTERFACE",
    "BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE",
    "BCRYPT_CIPHER_INTERFACE",
    "BCRYPT_HASH_INTERFACE",
    "BCRYPT_RNG_INTERFACE",
    "BCRYPT_SECRET_AGREEMENT_INTERFACE",
    "BCRYPT_SIGNATURE_INTERFACE",
    "NCRYPT_KEY_STORAGE_INTERFACE",
    "NCRYPT_SCHANNEL_INTERFACE",
    "NCRYPT_SCHANNEL_SIGNATURE_INTERFACE",
    "NCRYPT_FLAGS",
    "BCRYPT_PAD_NONE",
    "BCRYPT_PAD_OAEP",
    "BCRYPT_PAD_PKCS1",
    "BCRYPT_PAD_PSS",
    "NCRYPT_SILENT_FLAG",
    "NCRYPT_NO_PADDING_FLAG",
    "NCRYPT_PAD_OAEP_FLAG",
    "NCRYPT_PAD_PKCS1_FLAG",
    "NCRYPT_REGISTER_NOTIFY_FLAG",
    "NCRYPT_UNREGISTER_NOTIFY_FLAG",
    "NCRYPT_MACHINE_KEY_FLAG",
    "NCRYPT_UNPROTECT_NO_DECRYPT",
    "NCRYPT_OVERWRITE_KEY_FLAG",
    "NCRYPT_NO_KEY_VALIDATION",
    "NCRYPT_WRITE_KEY_TO_LEGACY_STORE_FLAG",
    "NCRYPT_PAD_PSS_FLAG",
    "NCRYPT_PERSIST_FLAG",
    "NCRYPT_PERSIST_ONLY_FLAG",
    "CRYPT_STRING",
    "CRYPT_STRING_BASE64HEADER",
    "CRYPT_STRING_BASE64",
    "CRYPT_STRING_BINARY",
    "CRYPT_STRING_BASE64REQUESTHEADER",
    "CRYPT_STRING_HEX",
    "CRYPT_STRING_HEXASCII",
    "CRYPT_STRING_BASE64X509CRLHEADER",
    "CRYPT_STRING_HEXADDR",
    "CRYPT_STRING_HEXASCIIADDR",
    "CRYPT_STRING_HEXRAW",
    "CRYPT_STRING_STRICT",
    "CRYPT_STRING_BASE64_ANY",
    "CRYPT_STRING_ANY",
    "CRYPT_STRING_HEX_ANY",
    "CRYPT_IMPORT_PUBLIC_KEY_FLAGS",
    "CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG",
    "CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG",
    "CRYPT_XML_FLAGS",
    "CRYPT_XML_FLAG_DISABLE_EXTENSIONS",
    "CRYPT_XML_FLAG_NO_SERIALIZE",
    "CRYPT_XML_SIGN_ADD_KEYVALUE",
    "CRYPT_ENCODE_OBJECT_FLAGS",
    "CRYPT_ENCODE_ALLOC_FLAG",
    "CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG",
    "CRYPT_UNICODE_NAME_ENCODE_DISABLE_CHECK_TYPE_FLAG",
    "CRYPT_UNICODE_NAME_ENCODE_ENABLE_T61_UNICODE_FLAG",
    "CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG",
    "CRYPT_OBJECT_LOCATOR_RELEASE_REASON",
    "CRYPT_OBJECT_LOCATOR_RELEASE_SYSTEM_SHUTDOWN",
    "CRYPT_OBJECT_LOCATOR_RELEASE_SERVICE_STOP",
    "CRYPT_OBJECT_LOCATOR_RELEASE_PROCESS_EXIT",
    "CRYPT_OBJECT_LOCATOR_RELEASE_DLL_UNLOAD",
    "CRYPT_ACQUIRE_FLAGS",
    "CRYPT_ACQUIRE_CACHE_FLAG",
    "CRYPT_ACQUIRE_COMPARE_KEY_FLAG",
    "CRYPT_ACQUIRE_NO_HEALING",
    "CRYPT_ACQUIRE_SILENT_FLAG",
    "CRYPT_ACQUIRE_USE_PROV_INFO_FLAG",
    "CRYPT_GET_URL_FLAGS",
    "CRYPT_GET_URL_FROM_PROPERTY",
    "CRYPT_GET_URL_FROM_EXTENSION",
    "CRYPT_GET_URL_FROM_UNAUTH_ATTRIBUTE",
    "CRYPT_GET_URL_FROM_AUTH_ATTRIBUTE",
    "CERT_STORE_SAVE_AS",
    "CERT_STORE_SAVE_AS_PKCS7",
    "CERT_STORE_SAVE_AS_STORE",
    "BCRYPT_QUERY_PROVIDER_MODE",
    "CRYPT_ANY",
    "CRYPT_UM",
    "CRYPT_KM",
    "CRYPT_MM",
    "CERT_FIND_CHAIN_IN_STORE_FLAGS",
    "CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG",
    "CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG",
    "CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG",
    "CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG",
    "CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG",
    "CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG",
    "CERT_CONTROL_STORE_FLAGS",
    "CERT_STORE_CTRL_COMMIT_FORCE_FLAG",
    "CERT_STORE_CTRL_COMMIT_CLEAR_FLAG",
    "CERT_STORE_CTRL_INHIBIT_DUPLICATE_HANDLE_FLAG",
    "BCRYPT_OPEN_ALGORITHM_PROVIDER_FLAGS",
    "BCRYPT_ALG_HANDLE_HMAC_FLAG",
    "BCRYPT_PROV_DISPATCH",
    "BCRYPT_HASH_REUSABLE_FLAG",
    "CERT_STORE_SAVE_TO",
    "CERT_STORE_SAVE_TO_FILE",
    "CERT_STORE_SAVE_TO_FILENAME",
    "CERT_STORE_SAVE_TO_FILENAME_A",
    "CERT_STORE_SAVE_TO_FILENAME_W",
    "CERT_STORE_SAVE_TO_MEMORY",
    "CRYPT_SET_PROV_PARAM_ID",
    "PP_CLIENT_HWND",
    "PP_DELETEKEY",
    "PP_KEYEXCHANGE_ALG",
    "PP_KEYEXCHANGE_PIN",
    "PP_KEYEXCHANGE_KEYSIZE",
    "PP_KEYSET_SEC_DESCR",
    "PP_PIN_PROMPT_STRING",
    "PP_ROOT_CERTSTORE",
    "PP_SIGNATURE_ALG",
    "PP_SIGNATURE_PIN",
    "PP_SIGNATURE_KEYSIZE",
    "PP_UI_PROMPT",
    "PP_USE_HARDWARE_RNG",
    "PP_USER_CERTSTORE",
    "PP_SECURE_KEYEXCHANGE_PIN",
    "PP_SECURE_SIGNATURE_PIN",
    "PP_SMARTCARD_READER",
    "CRYPT_KEY_PARAM_ID",
    "KP_ALGID",
    "KP_CERTIFICATE",
    "KP_PERMISSIONS",
    "KP_SALT",
    "KP_SALT_EX",
    "KP_BLOCKLEN",
    "KP_GET_USE_COUNT",
    "KP_KEYLEN",
    "CRYPT_KEY_FLAGS",
    "CRYPT_EXPORTABLE",
    "CRYPT_USER_PROTECTED",
    "CRYPT_ARCHIVABLE",
    "CRYPT_CREATE_IV",
    "CRYPT_CREATE_SALT",
    "CRYPT_DATA_KEY",
    "CRYPT_FORCE_KEY_PROTECTION_HIGH",
    "CRYPT_KEK",
    "CRYPT_INITIATOR",
    "CRYPT_NO_SALT",
    "CRYPT_ONLINE",
    "CRYPT_PREGEN",
    "CRYPT_RECIPIENT",
    "CRYPT_SF",
    "CRYPT_SGCKEY",
    "CRYPT_VOLATILE",
    "CRYPT_MACHINE_KEYSET",
    "CRYPT_USER_KEYSET",
    "PKCS12_PREFER_CNG_KSP",
    "PKCS12_ALWAYS_CNG_KSP",
    "PKCS12_ALLOW_OVERWRITE_KEY",
    "PKCS12_NO_PERSIST_KEY",
    "PKCS12_INCLUDE_EXTENDED_PROPERTIES",
    "CRYPT_OAEP",
    "CRYPT_BLOB_VER3",
    "CRYPT_DESTROYKEY",
    "CRYPT_SSL2_FALLBACK",
    "CRYPT_Y_ONLY",
    "CRYPT_IPSEC_HMAC_KEY",
    "CERT_SET_KEY_PROV_HANDLE_PROP_ID",
    "CERT_SET_KEY_CONTEXT_PROP_ID",
    "CRYPT_MSG_TYPE",
    "CMSG_DATA",
    "CMSG_SIGNED",
    "CMSG_ENVELOPED",
    "CMSG_SIGNED_AND_ENVELOPED",
    "CMSG_HASHED",
    "CERT_OPEN_STORE_FLAGS",
    "CERT_STORE_BACKUP_RESTORE_FLAG",
    "CERT_STORE_CREATE_NEW_FLAG",
    "CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG",
    "CERT_STORE_DELETE_FLAG",
    "CERT_STORE_ENUM_ARCHIVED_FLAG",
    "CERT_STORE_MAXIMUM_ALLOWED_FLAG",
    "CERT_STORE_NO_CRYPT_RELEASE_FLAG",
    "CERT_STORE_OPEN_EXISTING_FLAG",
    "CERT_STORE_READONLY_FLAG",
    "CERT_STORE_SET_LOCALIZED_NAME_FLAG",
    "CERT_STORE_SHARE_CONTEXT_FLAG",
    "CERT_STORE_UPDATE_KEYID_FLAG",
    "CRYPT_DEFAULT_CONTEXT_FLAGS",
    "CRYPT_DEFAULT_CONTEXT_AUTO_RELEASE_FLAG",
    "CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG",
    "CRYPT_VERIFY_CERT_FLAGS",
    "CRYPT_VERIFY_CERT_SIGN_DISABLE_MD2_MD4_FLAG",
    "CRYPT_VERIFY_CERT_SIGN_SET_STRONG_PROPERTIES_FLAG",
    "CRYPT_VERIFY_CERT_SIGN_RETURN_STRONG_PROPERTIES_FLAG",
    "CRYPT_SET_HASH_PARAM",
    "HP_HMAC_INFO",
    "HP_HASHVAL",
    "CERT_SYSTEM_STORE_FLAGS",
    "CERT_SYSTEM_STORE_LOCATION_MASK",
    "CERT_SYSTEM_STORE_RELOCATE_FLAG",
    "CERT_CREATE_SELFSIGN_FLAGS",
    "CERT_CREATE_SELFSIGN_NO_KEY_INFO",
    "CERT_CREATE_SELFSIGN_NO_SIGN",
    "CRYPT_DEFAULT_CONTEXT_TYPE",
    "CRYPT_DEFAULT_CONTEXT_CERT_SIGN_OID",
    "CRYPT_DEFAULT_CONTEXT_MULTI_CERT_SIGN_OID",
    "BCRYPT_RESOLVE_PROVIDERS_FLAGS",
    "CRYPT_ALL_FUNCTIONS",
    "CRYPT_ALL_PROVIDERS",
    "CERT_FIND_TYPE",
    "CTL_FIND_ANY",
    "CTL_FIND_SHA1_HASH",
    "CTL_FIND_MD5_HASH",
    "CTL_FIND_USAGE",
    "CTL_FIND_SAME_USAGE_FLAG",
    "CTL_FIND_EXISTING",
    "CTL_FIND_SUBJECT",
    "CRYPT_FIND_FLAGS",
    "CRYPT_FIND_USER_KEYSET_FLAG",
    "CRYPT_FIND_MACHINE_KEYSET_FLAG",
    "CRYPT_FIND_SILENT_KEYSET_FLAG",
    "CRYPT_IMAGE_REF_FLAGS",
    "CRYPT_MIN_DEPENDENCIES",
    "CRYPT_PROCESS_ISOLATE",
    "CERT_REVOCATION_STATUS_REASON",
    "CRL_REASON_UNSPECIFIED",
    "CRL_REASON_KEY_COMPROMISE",
    "CRL_REASON_CA_COMPROMISE",
    "CRL_REASON_AFFILIATION_CHANGED",
    "CRL_REASON_SUPERSEDED",
    "CRL_REASON_CESSATION_OF_OPERATION",
    "CRL_REASON_CERTIFICATE_HOLD",
    "CRL_REASON_REMOVE_FROM_CRL",
    "CERT_ROOT_PROGRAM_FLAGS",
    "CERT_ROOT_PROGRAM_FLAG_LSC",
    "CERT_ROOT_PROGRAM_FLAG_ORG",
    "CERT_ROOT_PROGRAM_FLAG_SUBJECT_LOGO",
    "CRYPT_XML_KEY_VALUE_TYPE",
    "CRYPT_XML_KEY_VALUE_TYPE_DSA",
    "CRYPT_XML_KEY_VALUE_TYPE_RSA",
    "CRYPT_XML_KEY_VALUE_TYPE_ECDSA",
    "CRYPT_XML_KEY_VALUE_TYPE_CUSTOM",
    "CERT_LOGOTYPE_CHOICE",
    "CERT_LOGOTYPE_NO_IMAGE_RESOLUTION_CHOICE",
    "CERT_LOGOTYPE_BITS_IMAGE_RESOLUTION_CHOICE",
    "CERT_LOGOTYPE_TABLE_SIZE_IMAGE_RESOLUTION_CHOICE",
    "CMSG_KEY_AGREE_OPTION",
    "CMSG_KEY_AGREE_EPHEMERAL_KEY_CHOICE",
    "CMSG_KEY_AGREE_STATIC_KEY_CHOICE",
    "CERT_LOGOTYPE_OPTION",
    "CERT_LOGOTYPE_DIRECT_INFO_CHOICE",
    "CERT_LOGOTYPE_INDIRECT_INFO_CHOICE",
    "CERT_STORE_PROV_FLAGS",
    "CERT_STORE_PROV_EXTERNAL_FLAG",
    "CERT_STORE_PROV_DELETED_FLAG",
    "CERT_STORE_PROV_NO_PERSIST_FLAG",
    "CERT_STORE_PROV_SYSTEM_STORE_FLAG",
    "CERT_STORE_PROV_LM_SYSTEM_STORE_FLAG",
    "CMSG_KEY_AGREE_ORIGINATOR",
    "CMSG_KEY_AGREE_ORIGINATOR_CERT",
    "CMSG_KEY_AGREE_ORIGINATOR_PUBLIC_KEY",
    "CRYPT_CONTEXT_CONFIG_FLAGS",
    "CRYPT_EXCLUSIVE",
    "CRYPT_OVERRIDE",
    "BCRYPT_DSA_MAGIC",
    "BCRYPT_DSA_PUBLIC_MAGIC",
    "BCRYPT_DSA_PRIVATE_MAGIC",
    "CRYPT_XML_X509DATA_TYPE",
    "CRYPT_XML_X509DATA_TYPE_ISSUER_SERIAL",
    "CRYPT_XML_X509DATA_TYPE_SKI",
    "CRYPT_XML_X509DATA_TYPE_SUBJECT_NAME",
    "CRYPT_XML_X509DATA_TYPE_CERTIFICATE",
    "CRYPT_XML_X509DATA_TYPE_CRL",
    "CRYPT_XML_X509DATA_TYPE_CUSTOM",
    "CERT_BIOMETRIC_DATA_TYPE",
    "CERT_BIOMETRIC_PREDEFINED_DATA_CHOICE",
    "CERT_BIOMETRIC_OID_DATA_CHOICE",
    "CERT_CHAIN_POLICY_FLAGS",
    "CERT_CHAIN_POLICY_IGNORE_NOT_TIME_VALID_FLAG",
    "CERT_CHAIN_POLICY_IGNORE_CTL_NOT_TIME_VALID_FLAG",
    "CERT_CHAIN_POLICY_IGNORE_NOT_TIME_NESTED_FLAG",
    "CERT_CHAIN_POLICY_IGNORE_ALL_NOT_TIME_VALID_FLAGS",
    "CERT_CHAIN_POLICY_IGNORE_INVALID_BASIC_CONSTRAINTS_FLAG",
    "CERT_CHAIN_POLICY_ALLOW_UNKNOWN_CA_FLAG",
    "CERT_CHAIN_POLICY_IGNORE_WRONG_USAGE_FLAG",
    "CERT_CHAIN_POLICY_IGNORE_INVALID_NAME_FLAG",
    "CERT_CHAIN_POLICY_IGNORE_INVALID_POLICY_FLAG",
    "CERT_CHAIN_POLICY_IGNORE_END_REV_UNKNOWN_FLAG",
    "CERT_CHAIN_POLICY_IGNORE_CTL_SIGNER_REV_UNKNOWN_FLAG",
    "CERT_CHAIN_POLICY_IGNORE_CA_REV_UNKNOWN_FLAG",
    "CERT_CHAIN_POLICY_IGNORE_ROOT_REV_UNKNOWN_FLAG",
    "CERT_CHAIN_POLICY_IGNORE_ALL_REV_UNKNOWN_FLAGS",
    "CERT_CHAIN_POLICY_ALLOW_TESTROOT_FLAG",
    "CERT_CHAIN_POLICY_TRUST_TESTROOT_FLAG",
    "CERT_CHAIN_POLICY_IGNORE_NOT_SUPPORTED_CRITICAL_EXT_FLAG",
    "CERT_CHAIN_POLICY_IGNORE_PEER_TRUST_FLAG",
    "CERT_STRONG_SIGN_FLAGS",
    "CERT_STRONG_SIGN_ENABLE_CRL_CHECK",
    "CERT_STRONG_SIGN_ENABLE_OCSP_CHECK",
    "CERT_LOGOTYPE_IMAGE_INFO_TYPE",
    "CERT_LOGOTYPE_GRAY_SCALE_IMAGE_INFO_CHOICE",
    "CERT_LOGOTYPE_COLOR_IMAGE_INFO_CHOICE",
    "CRYPT_XML_STATUS_INFO_STATUS",
    "CRYPT_XML_STATUS_INTERNAL_REFERENCE",
    "CRYPT_XML_STATUS_KEY_AVAILABLE",
    "CRYPT_XML_STATUS_DIGESTING",
    "CRYPT_XML_STATUS_DIGEST_VALID",
    "CRYPT_XML_STATUS_SIGNATURE_VALID",
    "CRYPT_XML_STATUS_OPENED_TO_ENCODE",
    "CRYPT_XML_TRANSFORM_FLAGS",
    "CRYPT_XML_TRANSFORM_ON_STREAM",
    "CRYPT_XML_TRANSFORM_ON_NODESET",
    "CRYPT_XML_TRANSFORM_URI_QUERY_STRING",
    "CRYPT_XML_GROUP_ID",
    "CRYPT_XML_GROUP_ID_HASH_________",
    "CRYPT_XML_GROUP_ID_SIGN_________",
    "CERT_SELECT_CRITERIA_TYPE",
    "CERT_SELECT_BY_ENHKEY_USAGE",
    "CERT_SELECT_BY_KEY_USAGE",
    "CERT_SELECT_BY_POLICY_OID",
    "CERT_SELECT_BY_PROV_NAME",
    "CERT_SELECT_BY_EXTENSION",
    "CERT_SELECT_BY_SUBJECT_HOST_NAME",
    "CERT_SELECT_BY_ISSUER_ATTR",
    "CERT_SELECT_BY_SUBJECT_ATTR",
    "CERT_SELECT_BY_ISSUER_NAME",
    "CERT_SELECT_BY_PUBLIC_KEY",
    "CERT_SELECT_BY_TLS_SIGNATURES",
    "BCRYPT_RSAKEY_BLOB_MAGIC",
    "BCRYPT_RSAPUBLIC_MAGIC",
    "BCRYPT_RSAPRIVATE_MAGIC",
    "BCRYPT_RSAFULLPRIVATE_MAGIC",
    "CRYPT_XML_KEYINFO_TYPE",
    "CRYPT_XML_KEYINFO_TYPE_KEYNAME",
    "CRYPT_XML_KEYINFO_TYPE_KEYVALUE",
    "CRYPT_XML_KEYINFO_TYPE_RETRIEVAL",
    "CRYPT_XML_KEYINFO_TYPE_X509DATA",
    "CRYPT_XML_KEYINFO_TYPE_CUSTOM",
    "CRYPT_TIMESTAMP_VERSION",
    "TIMESTAMP_VERSION",
    "CERT_ID_OPTION",
    "CERT_ID_ISSUER_SERIAL_NUMBER",
    "CERT_ID_KEY_IDENTIFIER",
    "CERT_ID_SHA1_HASH",
    "HTTPSPOLICY_CALLBACK_DATA_AUTH_TYPE",
    "AUTHTYPE_CLIENT",
    "AUTHTYPE_SERVER",
    "BCRYPT_DH_KEY_BLOB_MAGIC",
    "BCRYPT_DH_PUBLIC_MAGIC",
    "BCRYPT_DH_PRIVATE_MAGIC",
    "CRYPT_XML_STATUS_ERROR_STATUS",
    "CRYPT_XML_STATUS_ERROR_NOT_RESOLVED",
    "CRYPT_XML_STATUS_ERROR_DIGEST_INVALID",
    "CRYPT_XML_STATUS_ERROR_NOT_SUPPORTED_ALGORITHM",
    "CRYPT_XML_STATUS_ERROR_NOT_SUPPORTED_TRANSFORM",
    "CRYPT_XML_STATUS_ERROR_SIGNATURE_INVALID",
    "CRYPT_XML_STATUS_ERROR_KEYINFO_NOT_PARSED",
    "CRYPT_TIMESTAMP_RESPONSE_STATUS",
    "TIMESTAMP_STATUS_GRANTED",
    "TIMESTAMP_STATUS_GRANTED_WITH_MODS",
    "TIMESTAMP_STATUS_REJECTED",
    "TIMESTAMP_STATUS_WAITING",
    "TIMESTAMP_STATUS_REVOCATION_WARNING",
    "TIMESTAMP_STATUS_REVOKED",
    "NCRYPT_ALGORITHM_NAME_CLASS",
    "NCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE",
    "NCRYPT_SECRET_AGREEMENT_INTERFACE",
    "NCRYPT_SIGNATURE_INTERFACE",
    "HCRYPTASYNC",
    "HCERTCHAINENGINE",
    "BCRYPT_ALG_HANDLE",
    "BCRYPT_KEY_HANDLE",
    "CMS_KEY_INFO",
    "HMAC_Info",
    "SCHANNEL_ALG",
    "PROV_ENUMALGS",
    "PROV_ENUMALGS_EX",
    "PUBLICKEYSTRUC",
    "RSAPUBKEY",
    "PUBKEY",
    "DSSSEED",
    "PUBKEYVER3",
    "PRIVKEYVER3",
    "KEY_TYPE_SUBTYPE",
    "CERT_FORTEZZA_DATA_PROP",
    "CRYPT_RC4_KEY_STATE",
    "CRYPT_DES_KEY_STATE",
    "CRYPT_3DES_KEY_STATE",
    "CRYPT_AES_128_KEY_STATE",
    "CRYPT_AES_256_KEY_STATE",
    "CRYPTOAPI_BLOB",
    "CMS_DH_KEY_INFO",
    "BCRYPT_KEY_LENGTHS_STRUCT",
    "BCRYPT_OID",
    "BCRYPT_OID_LIST",
    "BCRYPT_PKCS1_PADDING_INFO",
    "BCRYPT_PSS_PADDING_INFO",
    "BCRYPT_OAEP_PADDING_INFO",
    "BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO",
    "BCryptBuffer",
    "BCryptBufferDesc",
    "BCRYPT_KEY_BLOB",
    "BCRYPT_RSAKEY_BLOB",
    "BCRYPT_ECCKEY_BLOB",
    "SSL_ECCKEY_BLOB",
    "ECC_CURVE_TYPE_ENUM",
    "BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE",
    "BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE",
    "BCRYPT_ECC_PRIME_MONTGOMERY_CURVE",
    "ECC_CURVE_ALG_ID_ENUM",
    "BCRYPT_NO_CURVE_GENERATION_ALG_ID",
    "BCRYPT_ECCFULLKEY_BLOB",
    "BCRYPT_DH_KEY_BLOB",
    "BCRYPT_DH_PARAMETER_HEADER",
    "BCRYPT_DSA_KEY_BLOB",
    "HASHALGORITHM_ENUM",
    "DSA_HASH_ALGORITHM_SHA1",
    "DSA_HASH_ALGORITHM_SHA256",
    "DSA_HASH_ALGORITHM_SHA512",
    "DSAFIPSVERSION_ENUM",
    "DSA_FIPS186_2",
    "DSA_FIPS186_3",
    "BCRYPT_DSA_KEY_BLOB_V2",
    "BCRYPT_KEY_DATA_BLOB_HEADER",
    "BCRYPT_DSA_PARAMETER_HEADER",
    "BCRYPT_DSA_PARAMETER_HEADER_V2",
    "BCRYPT_ECC_CURVE_NAMES",
    "BCRYPT_HASH_OPERATION_TYPE",
    "BCRYPT_HASH_OPERATION_HASH_DATA",
    "BCRYPT_HASH_OPERATION_FINISH_HASH",
    "BCRYPT_MULTI_HASH_OPERATION",
    "BCRYPT_MULTI_OPERATION_TYPE",
    "BCRYPT_OPERATION_TYPE_HASH",
    "BCRYPT_MULTI_OBJECT_LENGTH_STRUCT",
    "BCRYPT_ALGORITHM_IDENTIFIER",
    "BCRYPT_PROVIDER_NAME",
    "BCRYPT_INTERFACE_VERSION",
    "CRYPT_INTERFACE_REG",
    "CRYPT_IMAGE_REG",
    "CRYPT_PROVIDER_REG",
    "CRYPT_PROVIDERS",
    "CRYPT_CONTEXT_CONFIG",
    "CRYPT_CONTEXT_FUNCTION_CONFIG",
    "CRYPT_CONTEXTS",
    "CRYPT_CONTEXT_FUNCTIONS",
    "CRYPT_CONTEXT_FUNCTION_PROVIDERS",
    "CRYPT_PROPERTY_REF",
    "CRYPT_IMAGE_REF",
    "CRYPT_PROVIDER_REF",
    "CRYPT_PROVIDER_REFS",
    "PFN_NCRYPT_ALLOC",
    "PFN_NCRYPT_FREE",
    "NCRYPT_ALLOC_PARA",
    "NCRYPT_CIPHER_PADDING_INFO",
    "NCRYPT_PLATFORM_ATTEST_PADDING_INFO",
    "NCRYPT_KEY_ATTEST_PADDING_INFO",
    "NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES",
    "NCRYPT_VSM_KEY_ATTESTATION_STATEMENT",
    "NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS",
    "NCRYPT_EXPORTED_ISOLATED_KEY_HEADER",
    "NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE",
    "__NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT",
    "NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT",
    "NCryptAlgorithmName",
    "NCryptKeyName",
    "NCryptProviderName",
    "NCRYPT_UI_POLICY",
    "NCRYPT_KEY_ACCESS_POLICY_BLOB",
    "NCRYPT_SUPPORTED_LENGTHS",
    "NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO",
    "NCRYPT_PCP_TPM_FW_VERSION_INFO",
    "NCRYPT_PCP_RAW_POLICYDIGEST",
    "NCRYPT_KEY_BLOB_HEADER",
    "NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER",
    "CRYPT_BIT_BLOB",
    "CRYPT_ALGORITHM_IDENTIFIER",
    "CRYPT_OBJID_TABLE",
    "CRYPT_HASH_INFO",
    "CERT_EXTENSION",
    "CRYPT_ATTRIBUTE_TYPE_VALUE",
    "CRYPT_ATTRIBUTE",
    "CRYPT_ATTRIBUTES",
    "CERT_RDN_ATTR",
    "CERT_RDN",
    "CERT_NAME_INFO",
    "CERT_NAME_VALUE",
    "CERT_PUBLIC_KEY_INFO",
    "CRYPT_ECC_PRIVATE_KEY_INFO",
    "CRYPT_PRIVATE_KEY_INFO",
    "CRYPT_ENCRYPTED_PRIVATE_KEY_INFO",
    "PCRYPT_DECRYPT_PRIVATE_KEY_FUNC",
    "PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC",
    "PCRYPT_RESOLVE_HCRYPTPROV_FUNC",
    "CRYPT_PKCS8_IMPORT_PARAMS",
    "CRYPT_PKCS8_EXPORT_PARAMS",
    "CERT_INFO",
    "CRL_ENTRY",
    "CRL_INFO",
    "CERT_OR_CRL_BLOB",
    "CERT_OR_CRL_BUNDLE",
    "CERT_REQUEST_INFO",
    "CERT_KEYGEN_REQUEST_INFO",
    "CERT_SIGNED_CONTENT_INFO",
    "CTL_USAGE",
    "CTL_ENTRY",
    "CTL_INFO",
    "CRYPT_TIME_STAMP_REQUEST_INFO",
    "CRYPT_ENROLLMENT_NAME_VALUE_PAIR",
    "CRYPT_CSP_PROVIDER",
    "PFN_CRYPT_ALLOC",
    "PFN_CRYPT_FREE",
    "CRYPT_ENCODE_PARA",
    "CRYPT_DECODE_PARA",
    "CERT_EXTENSIONS",
    "CERT_AUTHORITY_KEY_ID_INFO",
    "CERT_PRIVATE_KEY_VALIDITY",
    "CERT_KEY_ATTRIBUTES_INFO",
    "CERT_POLICY_ID",
    "CERT_KEY_USAGE_RESTRICTION_INFO",
    "CERT_OTHER_NAME",
    "CERT_ALT_NAME_ENTRY",
    "CERT_ALT_NAME_INFO",
    "CERT_BASIC_CONSTRAINTS_INFO",
    "CERT_BASIC_CONSTRAINTS2_INFO",
    "CERT_POLICY_QUALIFIER_INFO",
    "CERT_POLICY_INFO",
    "CERT_POLICIES_INFO",
    "CERT_POLICY_QUALIFIER_NOTICE_REFERENCE",
    "CERT_POLICY_QUALIFIER_USER_NOTICE",
    "CPS_URLS",
    "CERT_POLICY95_QUALIFIER1",
    "CERT_POLICY_MAPPING",
    "CERT_POLICY_MAPPINGS_INFO",
    "CERT_POLICY_CONSTRAINTS_INFO",
    "CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY",
    "CRYPT_CONTENT_INFO",
    "CRYPT_SEQUENCE_OF_ANY",
    "CERT_AUTHORITY_KEY_ID2_INFO",
    "CERT_ACCESS_DESCRIPTION",
    "CERT_AUTHORITY_INFO_ACCESS",
    "CRL_DIST_POINT_NAME",
    "CRL_DIST_POINT",
    "CRL_DIST_POINTS_INFO",
    "CROSS_CERT_DIST_POINTS_INFO",
    "CERT_PAIR",
    "CRL_ISSUING_DIST_POINT",
    "CERT_GENERAL_SUBTREE",
    "CERT_NAME_CONSTRAINTS_INFO",
    "CERT_DSS_PARAMETERS",
    "CERT_DH_PARAMETERS",
    "CERT_ECC_SIGNATURE",
    "CERT_X942_DH_VALIDATION_PARAMS",
    "CERT_X942_DH_PARAMETERS",
    "CRYPT_X942_OTHER_INFO",
    "CRYPT_ECC_CMS_SHARED_INFO",
    "CRYPT_RC2_CBC_PARAMETERS",
    "CRYPT_SMIME_CAPABILITY",
    "CRYPT_SMIME_CAPABILITIES",
    "CERT_QC_STATEMENT",
    "CERT_QC_STATEMENTS_EXT_INFO",
    "CRYPT_MASK_GEN_ALGORITHM",
    "CRYPT_RSA_SSA_PSS_PARAMETERS",
    "CRYPT_PSOURCE_ALGORITHM",
    "CRYPT_RSAES_OAEP_PARAMETERS",
    "CMC_TAGGED_ATTRIBUTE",
    "CMC_TAGGED_CERT_REQUEST",
    "CMC_TAGGED_REQUEST",
    "CMC_TAGGED_CONTENT_INFO",
    "CMC_TAGGED_OTHER_MSG",
    "CMC_DATA_INFO",
    "CMC_RESPONSE_INFO",
    "CMC_PEND_INFO",
    "CMC_STATUS_INFO",
    "CMC_ADD_EXTENSIONS_INFO",
    "CMC_ADD_ATTRIBUTES_INFO",
    "CERT_TEMPLATE_EXT",
    "CERT_HASHED_URL",
    "CERT_LOGOTYPE_DETAILS",
    "CERT_LOGOTYPE_REFERENCE",
    "CERT_LOGOTYPE_IMAGE_INFO",
    "CERT_LOGOTYPE_IMAGE",
    "CERT_LOGOTYPE_AUDIO_INFO",
    "CERT_LOGOTYPE_AUDIO",
    "CERT_LOGOTYPE_DATA",
    "CERT_LOGOTYPE_INFO",
    "CERT_OTHER_LOGOTYPE_INFO",
    "CERT_LOGOTYPE_EXT_INFO",
    "CERT_BIOMETRIC_DATA",
    "CERT_BIOMETRIC_EXT_INFO",
    "OCSP_SIGNATURE_INFO",
    "OCSP_SIGNED_REQUEST_INFO",
    "OCSP_CERT_ID",
    "OCSP_REQUEST_ENTRY",
    "OCSP_REQUEST_INFO",
    "OCSP_RESPONSE_INFO",
    "OCSP_BASIC_SIGNED_RESPONSE_INFO",
    "OCSP_BASIC_REVOKED_INFO",
    "OCSP_BASIC_RESPONSE_ENTRY",
    "OCSP_BASIC_RESPONSE_INFO",
    "CERT_SUPPORTED_ALGORITHM_INFO",
    "CERT_TPM_SPECIFICATION_INFO",
    "CRYPT_OID_FUNC_ENTRY",
    "PFN_CRYPT_ENUM_OID_FUNC",
    "CRYPT_OID_INFO",
    "PFN_CRYPT_ENUM_OID_INFO",
    "CERT_STRONG_SIGN_SERIALIZED_INFO",
    "CERT_STRONG_SIGN_PARA",
    "CERT_ISSUER_SERIAL_NUMBER",
    "CERT_ID",
    "CMSG_SIGNER_ENCODE_INFO",
    "CMSG_SIGNED_ENCODE_INFO",
    "CMSG_ENVELOPED_ENCODE_INFO",
    "CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO",
    "CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO",
    "CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO",
    "CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO",
    "CMSG_RECIPIENT_ENCODE_INFO",
    "CMSG_RC2_AUX_INFO",
    "CMSG_SP3_COMPATIBLE_AUX_INFO",
    "CMSG_RC4_AUX_INFO",
    "CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO",
    "CMSG_HASHED_ENCODE_INFO",
    "CMSG_ENCRYPTED_ENCODE_INFO",
    "PFN_CMSG_STREAM_OUTPUT",
    "CMSG_STREAM_INFO",
    "CMSG_SIGNER_INFO",
    "CMSG_CMS_SIGNER_INFO",
    "CMSG_KEY_TRANS_RECIPIENT_INFO",
    "CMSG_RECIPIENT_ENCRYPTED_KEY_INFO",
    "CMSG_KEY_AGREE_RECIPIENT_INFO",
    "CMSG_MAIL_LIST_RECIPIENT_INFO",
    "CMSG_CMS_RECIPIENT_INFO",
    "CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA",
    "CMSG_CTRL_DECRYPT_PARA",
    "CMSG_CTRL_KEY_TRANS_DECRYPT_PARA",
    "CMSG_CTRL_KEY_AGREE_DECRYPT_PARA",
    "CMSG_CTRL_MAIL_LIST_DECRYPT_PARA",
    "CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA",
    "CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA",
    "PFN_CMSG_ALLOC",
    "PFN_CMSG_FREE",
    "PFN_CMSG_GEN_ENCRYPT_KEY",
    "PFN_CMSG_EXPORT_ENCRYPT_KEY",
    "PFN_CMSG_IMPORT_ENCRYPT_KEY",
    "CMSG_CONTENT_ENCRYPT_INFO",
    "PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY",
    "CMSG_KEY_TRANS_ENCRYPT_INFO",
    "PFN_CMSG_EXPORT_KEY_TRANS",
    "CMSG_KEY_AGREE_KEY_ENCRYPT_INFO",
    "CMSG_KEY_AGREE_ENCRYPT_INFO",
    "PFN_CMSG_EXPORT_KEY_AGREE",
    "CMSG_MAIL_LIST_ENCRYPT_INFO",
    "PFN_CMSG_EXPORT_MAIL_LIST",
    "PFN_CMSG_IMPORT_KEY_TRANS",
    "PFN_CMSG_IMPORT_KEY_AGREE",
    "PFN_CMSG_IMPORT_MAIL_LIST",
    "CMSG_CNG_CONTENT_DECRYPT_INFO",
    "PFN_CMSG_CNG_IMPORT_KEY_TRANS",
    "PFN_CMSG_CNG_IMPORT_KEY_AGREE",
    "PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY",
    "CERT_CONTEXT",
    "CRL_CONTEXT",
    "CTL_CONTEXT",
    "CertKeyType",
    "CertKeyType_KeyTypeOther",
    "CertKeyType_KeyTypeVirtualSmartCard",
    "CertKeyType_KeyTypePhysicalSmartCard",
    "CertKeyType_KeyTypePassport",
    "CertKeyType_KeyTypePassportRemote",
    "CertKeyType_KeyTypePassportSmartCard",
    "CertKeyType_KeyTypeHardware",
    "CertKeyType_KeyTypeSoftware",
    "CertKeyType_KeyTypeSelfSigned",
    "CRYPT_KEY_PROV_PARAM",
    "CRYPT_KEY_PROV_INFO",
    "CERT_KEY_CONTEXT",
    "ROOT_INFO_LUID",
    "CRYPT_SMART_CARD_ROOT_INFO",
    "CERT_SYSTEM_STORE_RELOCATE_PARA",
    "CERT_REGISTRY_STORE_CLIENT_GPT_PARA",
    "CERT_REGISTRY_STORE_ROAMING_PARA",
    "CERT_LDAP_STORE_OPENED_PARA",
    "CERT_STORE_PROV_INFO",
    "PFN_CERT_DLL_OPEN_STORE_PROV_FUNC",
    "PFN_CERT_STORE_PROV_CLOSE",
    "PFN_CERT_STORE_PROV_READ_CERT",
    "PFN_CERT_STORE_PROV_WRITE_CERT",
    "PFN_CERT_STORE_PROV_DELETE_CERT",
    "PFN_CERT_STORE_PROV_SET_CERT_PROPERTY",
    "PFN_CERT_STORE_PROV_READ_CRL",
    "PFN_CERT_STORE_PROV_WRITE_CRL",
    "PFN_CERT_STORE_PROV_DELETE_CRL",
    "PFN_CERT_STORE_PROV_SET_CRL_PROPERTY",
    "PFN_CERT_STORE_PROV_READ_CTL",
    "PFN_CERT_STORE_PROV_WRITE_CTL",
    "PFN_CERT_STORE_PROV_DELETE_CTL",
    "PFN_CERT_STORE_PROV_SET_CTL_PROPERTY",
    "PFN_CERT_STORE_PROV_CONTROL",
    "CERT_STORE_PROV_FIND_INFO",
    "PFN_CERT_STORE_PROV_FIND_CERT",
    "PFN_CERT_STORE_PROV_FREE_FIND_CERT",
    "PFN_CERT_STORE_PROV_GET_CERT_PROPERTY",
    "PFN_CERT_STORE_PROV_FIND_CRL",
    "PFN_CERT_STORE_PROV_FREE_FIND_CRL",
    "PFN_CERT_STORE_PROV_GET_CRL_PROPERTY",
    "PFN_CERT_STORE_PROV_FIND_CTL",
    "PFN_CERT_STORE_PROV_FREE_FIND_CTL",
    "PFN_CERT_STORE_PROV_GET_CTL_PROPERTY",
    "CRL_FIND_ISSUED_FOR_PARA",
    "CTL_ANY_SUBJECT_INFO",
    "CTL_FIND_USAGE_PARA",
    "CTL_FIND_SUBJECT_PARA",
    "PFN_CERT_CREATE_CONTEXT_SORT_FUNC",
    "CERT_CREATE_CONTEXT_PARA",
    "CERT_SYSTEM_STORE_INFO",
    "CERT_PHYSICAL_STORE_INFO",
    "PFN_CERT_ENUM_SYSTEM_STORE_LOCATION",
    "PFN_CERT_ENUM_SYSTEM_STORE",
    "PFN_CERT_ENUM_PHYSICAL_STORE",
    "CTL_VERIFY_USAGE_PARA",
    "CTL_VERIFY_USAGE_STATUS",
    "CERT_REVOCATION_CRL_INFO",
    "CERT_REVOCATION_PARA",
    "CERT_REVOCATION_STATUS",
    "CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO",
    "CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO",
    "PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC",
    "PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC",
    "PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC",
    "CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA",
    "PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC",
    "PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC",
    "PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC",
    "PFN_IMPORT_PRIV_KEY_FUNC",
    "PFN_EXPORT_PRIV_KEY_FUNC",
    "PFN_CRYPT_GET_SIGNER_CERTIFICATE",
    "CRYPT_SIGN_MESSAGE_PARA",
    "CRYPT_VERIFY_MESSAGE_PARA",
    "CRYPT_ENCRYPT_MESSAGE_PARA",
    "CRYPT_DECRYPT_MESSAGE_PARA",
    "CRYPT_HASH_MESSAGE_PARA",
    "CRYPT_KEY_SIGN_MESSAGE_PARA",
    "CRYPT_KEY_VERIFY_MESSAGE_PARA",
    "CERT_CHAIN",
    "PFN_CRYPT_ASYNC_PARAM_FREE_FUNC",
    "CRYPT_BLOB_ARRAY",
    "CRYPT_CREDENTIALS",
    "CRYPT_PASSWORD_CREDENTIALSA",
    "CRYPT_PASSWORD_CREDENTIALSW",
    "PFN_FREE_ENCODED_OBJECT_FUNC",
    "CRYPTNET_URL_CACHE_PRE_FETCH_INFO",
    "CRYPTNET_URL_CACHE_FLUSH_INFO",
    "CRYPTNET_URL_CACHE_RESPONSE_INFO",
    "CRYPT_RETRIEVE_AUX_INFO",
    "PFN_CRYPT_CANCEL_RETRIEVAL",
    "PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC",
    "CRYPT_ASYNC_RETRIEVAL_COMPLETION",
    "PFN_CANCEL_ASYNC_RETRIEVAL_FUNC",
    "CRYPT_URL_ARRAY",
    "CRYPT_URL_INFO",
    "CERT_CRL_CONTEXT_PAIR",
    "CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO",
    "PFN_CRYPT_ENUM_KEYID_PROP",
    "CERT_CHAIN_ENGINE_CONFIG",
    "CERT_TRUST_STATUS",
    "CERT_REVOCATION_INFO",
    "CERT_TRUST_LIST_INFO",
    "CERT_CHAIN_ELEMENT",
    "CERT_SIMPLE_CHAIN",
    "CERT_CHAIN_CONTEXT",
    "CERT_USAGE_MATCH",
    "CTL_USAGE_MATCH",
    "CERT_CHAIN_PARA",
    "CERT_REVOCATION_CHAIN_PARA",
    "CRL_REVOCATION_INFO",
    "PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK",
    "CERT_CHAIN_FIND_BY_ISSUER_PARA",
    "CERT_CHAIN_POLICY_PARA",
    "CERT_CHAIN_POLICY_STATUS",
    "AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA",
    "AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS",
    "AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA",
    "HTTPSPolicyCallbackData",
    "EV_EXTRA_CERT_CHAIN_POLICY_PARA",
    "EV_EXTRA_CERT_CHAIN_POLICY_STATUS",
    "SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS",
    "SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA",
    "SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA",
    "SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS",
    "CRYPT_PKCS12_PBE_PARAMS",
    "PKCS12_PBES2_EXPORT_PARAMS",
    "CERT_SERVER_OCSP_RESPONSE_CONTEXT",
    "PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK",
    "CERT_SERVER_OCSP_RESPONSE_OPEN_PARA",
    "CERT_SELECT_CHAIN_PARA",
    "CERT_SELECT_CRITERIA",
    "CRYPT_TIMESTAMP_REQUEST",
    "CRYPT_TIMESTAMP_RESPONSE",
    "CRYPT_TIMESTAMP_ACCURACY",
    "CRYPT_TIMESTAMP_INFO",
    "CRYPT_TIMESTAMP_CONTEXT",
    "CRYPT_TIMESTAMP_PARA",
    "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH",
    "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET",
    "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE",
    "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD",
    "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE",
    "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER",
    "CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE",
    "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE",
    "PFN_CERT_IS_WEAK_HASH",
    "CRYPTPROTECT_PROMPTSTRUCT",
    "PFNCryptStreamOutputCallback",
    "NCRYPT_PROTECT_STREAM_INFO",
    "PFNCryptStreamOutputCallbackEx",
    "NCRYPT_PROTECT_STREAM_INFO_EX",
    "CRYPT_XML_CHARSET",
    "CRYPT_XML_CHARSET_AUTO",
    "CRYPT_XML_CHARSET_UTF8",
    "CRYPT_XML_CHARSET_UTF16LE",
    "CRYPT_XML_CHARSET_UTF16BE",
    "CRYPT_XML_BLOB",
    "CRYPT_XML_DATA_BLOB",
    "CRYPT_XML_PROPERTY_ID",
    "CRYPT_XML_PROPERTY_MAX_HEAP_SIZE",
    "CRYPT_XML_PROPERTY_SIGNATURE_LOCATION",
    "CRYPT_XML_PROPERTY_MAX_SIGNATURES",
    "CRYPT_XML_PROPERTY_DOC_DECLARATION",
    "CRYPT_XML_PROPERTY_XML_OUTPUT_CHARSET",
    "CRYPT_XML_PROPERTY",
    "PFN_CRYPT_XML_WRITE_CALLBACK",
    "PFN_CRYPT_XML_DATA_PROVIDER_READ",
    "PFN_CRYPT_XML_DATA_PROVIDER_CLOSE",
    "CRYPT_XML_DATA_PROVIDER",
    "PFN_CRYPT_XML_CREATE_TRANSFORM",
    "CRYPT_XML_STATUS",
    "CRYPT_XML_ALGORITHM",
    "CRYPT_XML_TRANSFORM_INFO",
    "CRYPT_XML_TRANSFORM_CHAIN_CONFIG",
    "CRYPT_XML_KEY_DSA_KEY_VALUE",
    "CRYPT_XML_KEY_ECDSA_KEY_VALUE",
    "CRYPT_XML_KEY_RSA_KEY_VALUE",
    "CRYPT_XML_KEY_VALUE",
    "CRYPT_XML_ISSUER_SERIAL",
    "CRYPT_XML_X509DATA_ITEM",
    "CRYPT_XML_X509DATA",
    "CRYPT_XML_KEY_INFO_ITEM",
    "CRYPT_XML_KEY_INFO",
    "CRYPT_XML_REFERENCE",
    "CRYPT_XML_REFERENCES",
    "CRYPT_XML_SIGNED_INFO",
    "CRYPT_XML_OBJECT",
    "CRYPT_XML_SIGNATURE",
    "CRYPT_XML_DOC_CTXT",
    "CRYPT_XML_KEYINFO_PARAM",
    "CRYPT_XML_KEYINFO_SPEC",
    "CRYPT_XML_KEYINFO_SPEC_NONE",
    "CRYPT_XML_KEYINFO_SPEC_ENCODED",
    "CRYPT_XML_KEYINFO_SPEC_PARAM",
    "CRYPT_XML_ALGORITHM_INFO",
    "PFN_CRYPT_XML_ENUM_ALG_INFO",
    "CryptXmlDllGetInterface",
    "CryptXmlDllEncodeAlgorithm",
    "CryptXmlDllCreateDigest",
    "CryptXmlDllDigestData",
    "CryptXmlDllFinalizeDigest",
    "CryptXmlDllCloseDigest",
    "CryptXmlDllSignData",
    "CryptXmlDllVerifySignature",
    "CryptXmlDllGetAlgorithmInfo",
    "CRYPT_XML_CRYPTOGRAPHIC_INTERFACE",
    "CryptXmlDllEncodeKeyValue",
    "CryptXmlDllCreateKey",
    "HandleType",
    "HandleType_Asymmetric",
    "HandleType_Symmetric",
    "HandleType_Transform",
    "HandleType_Hash",
    "PaddingMode",
    "PaddingMode_None",
    "PaddingMode_PKCS7",
    "PaddingMode_Zeros",
    "PaddingMode_ANSIX923",
    "PaddingMode_ISO10126",
    "Direction",
    "Direction_DirectionEncrypt",
    "Direction_DirectionDecrypt",
    "INFORMATIONCARD_ASYMMETRIC_CRYPTO_PARAMETERS",
    "INFORMATIONCARD_SYMMETRIC_CRYPTO_PARAMETERS",
    "INFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERS",
    "INFORMATIONCARD_HASH_CRYPTO_PARAMETERS",
    "INFORMATIONCARD_CRYPTO_HANDLE",
    "GENERIC_XML_TOKEN",
    "POLICY_ELEMENT",
    "ENDPOINTADDRESS",
    "ENDPOINTADDRESS2",
    "CERTIFICATE_CHAIN_BLOB",
    "CLAIMLIST",
    "RECIPIENTPOLICY",
    "RECIPIENTPOLICY2",
    "CCertSrvSetupKeyInformation",
    "CCertSrvSetup",
    "CMSCEPSetup",
    "CCertificateEnrollmentServerSetup",
    "CCertificateEnrollmentPolicyServerSetup",
    "ICertSrvSetupKeyInformation",
    "ICertSrvSetupKeyInformationCollection",
    "CASetupProperty",
    "ENUM_SETUPPROP_INVALID",
    "ENUM_SETUPPROP_CATYPE",
    "ENUM_SETUPPROP_CAKEYINFORMATION",
    "ENUM_SETUPPROP_INTERACTIVE",
    "ENUM_SETUPPROP_CANAME",
    "ENUM_SETUPPROP_CADSSUFFIX",
    "ENUM_SETUPPROP_VALIDITYPERIOD",
    "ENUM_SETUPPROP_VALIDITYPERIODUNIT",
    "ENUM_SETUPPROP_EXPIRATIONDATE",
    "ENUM_SETUPPROP_PRESERVEDATABASE",
    "ENUM_SETUPPROP_DATABASEDIRECTORY",
    "ENUM_SETUPPROP_LOGDIRECTORY",
    "ENUM_SETUPPROP_SHAREDFOLDER",
    "ENUM_SETUPPROP_PARENTCAMACHINE",
    "ENUM_SETUPPROP_PARENTCANAME",
    "ENUM_SETUPPROP_REQUESTFILE",
    "ENUM_SETUPPROP_WEBCAMACHINE",
    "ENUM_SETUPPROP_WEBCANAME",
    "ICertSrvSetup",
    "MSCEPSetupProperty",
    "ENUM_CEPSETUPPROP_USELOCALSYSTEM",
    "ENUM_CEPSETUPPROP_USECHALLENGE",
    "ENUM_CEPSETUPPROP_RANAME_CN",
    "ENUM_CEPSETUPPROP_RANAME_EMAIL",
    "ENUM_CEPSETUPPROP_RANAME_COMPANY",
    "ENUM_CEPSETUPPROP_RANAME_DEPT",
    "ENUM_CEPSETUPPROP_RANAME_CITY",
    "ENUM_CEPSETUPPROP_RANAME_STATE",
    "ENUM_CEPSETUPPROP_RANAME_COUNTRY",
    "ENUM_CEPSETUPPROP_SIGNINGKEYINFORMATION",
    "ENUM_CEPSETUPPROP_EXCHANGEKEYINFORMATION",
    "ENUM_CEPSETUPPROP_CAINFORMATION",
    "ENUM_CEPSETUPPROP_MSCEPURL",
    "ENUM_CEPSETUPPROP_CHALLENGEURL",
    "IMSCEPSetup",
    "CESSetupProperty",
    "ENUM_CESSETUPPROP_USE_IISAPPPOOLIDENTITY",
    "ENUM_CESSETUPPROP_CACONFIG",
    "ENUM_CESSETUPPROP_AUTHENTICATION",
    "ENUM_CESSETUPPROP_SSLCERTHASH",
    "ENUM_CESSETUPPROP_URL",
    "ENUM_CESSETUPPROP_RENEWALONLY",
    "ENUM_CESSETUPPROP_ALLOW_KEYBASED_RENEWAL",
    "ICertificateEnrollmentServerSetup",
    "CEPSetupProperty",
    "ENUM_CEPSETUPPROP_AUTHENTICATION",
    "ENUM_CEPSETUPPROP_SSLCERTHASH",
    "ENUM_CEPSETUPPROP_URL",
    "ENUM_CEPSETUPPROP_KEYBASED_RENEWAL",
    "ICertificateEnrollmentPolicyServerSetup",
    "CryptAcquireContextA",
    "CryptAcquireContextW",
    "CryptAcquireContext",
    "CryptReleaseContext",
    "CryptGenKey",
    "CryptDeriveKey",
    "CryptDestroyKey",
    "CryptSetKeyParam",
    "CryptGetKeyParam",
    "CryptSetHashParam",
    "CryptGetHashParam",
    "CryptSetProvParam",
    "CryptGetProvParam",
    "CryptGenRandom",
    "CryptGetUserKey",
    "CryptExportKey",
    "CryptImportKey",
    "CryptEncrypt",
    "CryptDecrypt",
    "CryptCreateHash",
    "CryptHashData",
    "CryptHashSessionKey",
    "CryptDestroyHash",
    "CryptSignHashA",
    "CryptSignHashW",
    "CryptSignHash",
    "CryptVerifySignatureA",
    "CryptVerifySignatureW",
    "CryptVerifySignature",
    "CryptSetProviderA",
    "CryptSetProviderW",
    "CryptSetProvider",
    "CryptSetProviderExA",
    "CryptSetProviderExW",
    "CryptSetProviderEx",
    "CryptGetDefaultProviderA",
    "CryptGetDefaultProviderW",
    "CryptGetDefaultProvider",
    "CryptEnumProviderTypesA",
    "CryptEnumProviderTypesW",
    "CryptEnumProviderTypes",
    "CryptEnumProvidersA",
    "CryptEnumProvidersW",
    "CryptEnumProviders",
    "CryptContextAddRef",
    "CryptDuplicateKey",
    "CryptDuplicateHash",
    "BCryptOpenAlgorithmProvider",
    "BCryptEnumAlgorithms",
    "BCryptEnumProviders",
    "BCryptGetProperty",
    "BCryptSetProperty",
    "BCryptCloseAlgorithmProvider",
    "BCryptFreeBuffer",
    "BCryptGenerateSymmetricKey",
    "BCryptGenerateKeyPair",
    "BCryptEncrypt",
    "BCryptDecrypt",
    "BCryptExportKey",
    "BCryptImportKey",
    "BCryptImportKeyPair",
    "BCryptDuplicateKey",
    "BCryptFinalizeKeyPair",
    "BCryptDestroyKey",
    "BCryptDestroySecret",
    "BCryptSignHash",
    "BCryptVerifySignature",
    "BCryptSecretAgreement",
    "BCryptDeriveKey",
    "BCryptKeyDerivation",
    "BCryptCreateHash",
    "BCryptHashData",
    "BCryptFinishHash",
    "BCryptCreateMultiHash",
    "BCryptProcessMultiOperations",
    "BCryptDuplicateHash",
    "BCryptDestroyHash",
    "BCryptHash",
    "BCryptGenRandom",
    "BCryptDeriveKeyCapi",
    "BCryptDeriveKeyPBKDF2",
    "BCryptQueryProviderRegistration",
    "BCryptEnumRegisteredProviders",
    "BCryptCreateContext",
    "BCryptDeleteContext",
    "BCryptEnumContexts",
    "BCryptConfigureContext",
    "BCryptQueryContextConfiguration",
    "BCryptAddContextFunction",
    "BCryptRemoveContextFunction",
    "BCryptEnumContextFunctions",
    "BCryptConfigureContextFunction",
    "BCryptQueryContextFunctionConfiguration",
    "BCryptEnumContextFunctionProviders",
    "BCryptSetContextFunctionProperty",
    "BCryptQueryContextFunctionProperty",
    "BCryptRegisterConfigChangeNotify",
    "BCryptUnregisterConfigChangeNotify",
    "BCryptResolveProviders",
    "BCryptGetFipsAlgorithmMode",
    "NCryptOpenStorageProvider",
    "NCryptEnumAlgorithms",
    "NCryptIsAlgSupported",
    "NCryptEnumKeys",
    "NCryptEnumStorageProviders",
    "NCryptFreeBuffer",
    "NCryptOpenKey",
    "NCryptCreatePersistedKey",
    "NCryptGetProperty",
    "NCryptSetProperty",
    "NCryptFinalizeKey",
    "NCryptEncrypt",
    "NCryptDecrypt",
    "NCryptImportKey",
    "NCryptExportKey",
    "NCryptSignHash",
    "NCryptVerifySignature",
    "NCryptDeleteKey",
    "NCryptFreeObject",
    "NCryptIsKeyHandle",
    "NCryptTranslateHandle",
    "NCryptNotifyChangeKey",
    "NCryptSecretAgreement",
    "NCryptDeriveKey",
    "NCryptKeyDerivation",
    "NCryptCreateClaim",
    "NCryptVerifyClaim",
    "CryptFormatObject",
    "CryptEncodeObjectEx",
    "CryptEncodeObject",
    "CryptDecodeObjectEx",
    "CryptDecodeObject",
    "CryptInstallOIDFunctionAddress",
    "CryptInitOIDFunctionSet",
    "CryptGetOIDFunctionAddress",
    "CryptGetDefaultOIDDllList",
    "CryptGetDefaultOIDFunctionAddress",
    "CryptFreeOIDFunctionAddress",
    "CryptRegisterOIDFunction",
    "CryptUnregisterOIDFunction",
    "CryptRegisterDefaultOIDFunction",
    "CryptUnregisterDefaultOIDFunction",
    "CryptSetOIDFunctionValue",
    "CryptGetOIDFunctionValue",
    "CryptEnumOIDFunction",
    "CryptFindOIDInfo",
    "CryptRegisterOIDInfo",
    "CryptUnregisterOIDInfo",
    "CryptEnumOIDInfo",
    "CryptFindLocalizedName",
    "CryptMsgOpenToEncode",
    "CryptMsgCalculateEncodedLength",
    "CryptMsgOpenToDecode",
    "CryptMsgDuplicate",
    "CryptMsgClose",
    "CryptMsgUpdate",
    "CryptMsgGetParam",
    "CryptMsgControl",
    "CryptMsgVerifyCountersignatureEncoded",
    "CryptMsgVerifyCountersignatureEncodedEx",
    "CryptMsgCountersign",
    "CryptMsgCountersignEncoded",
    "CertOpenStore",
    "CertDuplicateStore",
    "CertSaveStore",
    "CertCloseStore",
    "CertGetSubjectCertificateFromStore",
    "CertEnumCertificatesInStore",
    "CertFindCertificateInStore",
    "CertGetIssuerCertificateFromStore",
    "CertVerifySubjectCertificateContext",
    "CertDuplicateCertificateContext",
    "CertCreateCertificateContext",
    "CertFreeCertificateContext",
    "CertSetCertificateContextProperty",
    "CertGetCertificateContextProperty",
    "CertEnumCertificateContextProperties",
    "CertCreateCTLEntryFromCertificateContextProperties",
    "CertSetCertificateContextPropertiesFromCTLEntry",
    "CertGetCRLFromStore",
    "CertEnumCRLsInStore",
    "CertFindCRLInStore",
    "CertDuplicateCRLContext",
    "CertCreateCRLContext",
    "CertFreeCRLContext",
    "CertSetCRLContextProperty",
    "CertGetCRLContextProperty",
    "CertEnumCRLContextProperties",
    "CertFindCertificateInCRL",
    "CertIsValidCRLForCertificate",
    "CertAddEncodedCertificateToStore",
    "CertAddCertificateContextToStore",
    "CertAddSerializedElementToStore",
    "CertDeleteCertificateFromStore",
    "CertAddEncodedCRLToStore",
    "CertAddCRLContextToStore",
    "CertDeleteCRLFromStore",
    "CertSerializeCertificateStoreElement",
    "CertSerializeCRLStoreElement",
    "CertDuplicateCTLContext",
    "CertCreateCTLContext",
    "CertFreeCTLContext",
    "CertSetCTLContextProperty",
    "CertGetCTLContextProperty",
    "CertEnumCTLContextProperties",
    "CertEnumCTLsInStore",
    "CertFindSubjectInCTL",
    "CertFindCTLInStore",
    "CertAddEncodedCTLToStore",
    "CertAddCTLContextToStore",
    "CertSerializeCTLStoreElement",
    "CertDeleteCTLFromStore",
    "CertAddCertificateLinkToStore",
    "CertAddCRLLinkToStore",
    "CertAddCTLLinkToStore",
    "CertAddStoreToCollection",
    "CertRemoveStoreFromCollection",
    "CertControlStore",
    "CertSetStoreProperty",
    "CertGetStoreProperty",
    "CertCreateContext",
    "CertRegisterSystemStore",
    "CertRegisterPhysicalStore",
    "CertUnregisterSystemStore",
    "CertUnregisterPhysicalStore",
    "CertEnumSystemStoreLocation",
    "CertEnumSystemStore",
    "CertEnumPhysicalStore",
    "CertGetEnhancedKeyUsage",
    "CertSetEnhancedKeyUsage",
    "CertAddEnhancedKeyUsageIdentifier",
    "CertRemoveEnhancedKeyUsageIdentifier",
    "CertGetValidUsages",
    "CryptMsgGetAndVerifySigner",
    "CryptMsgSignCTL",
    "CryptMsgEncodeAndSignCTL",
    "CertFindSubjectInSortedCTL",
    "CertEnumSubjectInSortedCTL",
    "CertVerifyCTLUsage",
    "CertVerifyRevocation",
    "CertCompareIntegerBlob",
    "CertCompareCertificate",
    "CertCompareCertificateName",
    "CertIsRDNAttrsInCertificateName",
    "CertComparePublicKeyInfo",
    "CertGetPublicKeyLength",
    "CryptVerifyCertificateSignature",
    "CryptVerifyCertificateSignatureEx",
    "CertIsStrongHashToSign",
    "CryptHashToBeSigned",
    "CryptHashCertificate",
    "CryptHashCertificate2",
    "CryptSignCertificate",
    "CryptSignAndEncodeCertificate",
    "CertVerifyTimeValidity",
    "CertVerifyCRLTimeValidity",
    "CertVerifyValidityNesting",
    "CertVerifyCRLRevocation",
    "CertAlgIdToOID",
    "CertOIDToAlgId",
    "CertFindExtension",
    "CertFindAttribute",
    "CertFindRDNAttr",
    "CertGetIntendedKeyUsage",
    "CryptInstallDefaultContext",
    "CryptUninstallDefaultContext",
    "CryptExportPublicKeyInfo",
    "CryptExportPublicKeyInfoEx",
    "CryptExportPublicKeyInfoFromBCryptKeyHandle",
    "CryptImportPublicKeyInfo",
    "CryptImportPublicKeyInfoEx",
    "CryptImportPublicKeyInfoEx2",
    "CryptAcquireCertificatePrivateKey",
    "CryptFindCertificateKeyProvInfo",
    "CryptImportPKCS8",
    "CryptExportPKCS8",
    "CryptHashPublicKeyInfo",
    "CertRDNValueToStrA",
    "CertRDNValueToStrW",
    "CertRDNValueToStr",
    "CertNameToStrA",
    "CertNameToStrW",
    "CertNameToStr",
    "CertStrToNameA",
    "CertStrToNameW",
    "CertStrToName",
    "CertGetNameStringA",
    "CertGetNameStringW",
    "CertGetNameString",
    "CryptSignMessage",
    "CryptVerifyMessageSignature",
    "CryptGetMessageSignerCount",
    "CryptGetMessageCertificates",
    "CryptVerifyDetachedMessageSignature",
    "CryptEncryptMessage",
    "CryptDecryptMessage",
    "CryptSignAndEncryptMessage",
    "CryptDecryptAndVerifyMessageSignature",
    "CryptDecodeMessage",
    "CryptHashMessage",
    "CryptVerifyMessageHash",
    "CryptVerifyDetachedMessageHash",
    "CryptSignMessageWithKey",
    "CryptVerifyMessageSignatureWithKey",
    "CertOpenSystemStoreA",
    "CertOpenSystemStoreW",
    "CertOpenSystemStore",
    "CertAddEncodedCertificateToSystemStoreA",
    "CertAddEncodedCertificateToSystemStoreW",
    "CertAddEncodedCertificateToSystemStore",
    "FindCertsByIssuer",
    "CryptQueryObject",
    "CryptMemAlloc",
    "CryptMemRealloc",
    "CryptMemFree",
    "CryptCreateAsyncHandle",
    "CryptSetAsyncParam",
    "CryptGetAsyncParam",
    "CryptCloseAsyncHandle",
    "CryptRetrieveObjectByUrlA",
    "CryptRetrieveObjectByUrlW",
    "CryptRetrieveObjectByUrl",
    "CryptInstallCancelRetrieval",
    "CryptUninstallCancelRetrieval",
    "CryptGetObjectUrl",
    "CertCreateSelfSignCertificate",
    "CryptGetKeyIdentifierProperty",
    "CryptSetKeyIdentifierProperty",
    "CryptEnumKeyIdentifierProperties",
    "CryptCreateKeyIdentifierFromCSP",
    "CertCreateCertificateChainEngine",
    "CertFreeCertificateChainEngine",
    "CertResyncCertificateChainEngine",
    "CertGetCertificateChain",
    "CertFreeCertificateChain",
    "CertDuplicateCertificateChain",
    "CertFindChainInStore",
    "CertVerifyCertificateChainPolicy",
    "CryptStringToBinaryA",
    "CryptStringToBinaryW",
    "CryptStringToBinary",
    "CryptBinaryToStringA",
    "CryptBinaryToStringW",
    "CryptBinaryToString",
    "PFXImportCertStore",
    "PFXIsPFXBlob",
    "PFXVerifyPassword",
    "PFXExportCertStoreEx",
    "PFXExportCertStore",
    "CertOpenServerOcspResponse",
    "CertAddRefServerOcspResponse",
    "CertCloseServerOcspResponse",
    "CertGetServerOcspResponseContext",
    "CertAddRefServerOcspResponseContext",
    "CertFreeServerOcspResponseContext",
    "CertRetrieveLogoOrBiometricInfo",
    "CertSelectCertificateChains",
    "CertFreeCertificateChainList",
    "CryptRetrieveTimeStamp",
    "CryptVerifyTimeStampSignature",
    "CertIsWeakHash",
    "CryptProtectData",
    "CryptUnprotectData",
    "CryptUpdateProtectedState",
    "CryptProtectMemory",
    "CryptUnprotectMemory",
    "NCryptRegisterProtectionDescriptorName",
    "NCryptQueryProtectionDescriptorName",
    "NCryptCreateProtectionDescriptor",
    "NCryptCloseProtectionDescriptor",
    "NCryptGetProtectionDescriptorInfo",
    "NCryptProtectSecret",
    "NCryptUnprotectSecret",
    "NCryptStreamOpenToProtect",
    "NCryptStreamOpenToUnprotect",
    "NCryptStreamOpenToUnprotectEx",
    "NCryptStreamUpdate",
    "NCryptStreamClose",
    "CryptXmlClose",
    "CryptXmlGetTransforms",
    "CryptXmlOpenToEncode",
    "CryptXmlOpenToDecode",
    "CryptXmlAddObject",
    "CryptXmlCreateReference",
    "CryptXmlDigestReference",
    "CryptXmlSetHMACSecret",
    "CryptXmlSign",
    "CryptXmlImportPublicKey",
    "CryptXmlVerifySignature",
    "CryptXmlGetDocContext",
    "CryptXmlGetSignature",
    "CryptXmlGetReference",
    "CryptXmlGetStatus",
    "CryptXmlEncode",
    "CryptXmlGetAlgorithmInfo",
    "CryptXmlFindAlgorithmInfo",
    "CryptXmlEnumAlgorithmInfo",
    "GetToken",
    "ManageCardSpace",
    "ImportInformationCard",
    "Encrypt",
    "Decrypt",
    "SignHash",
    "VerifyHash",
    "GetCryptoTransform",
    "GetKeyedHash",
    "TransformBlock",
    "TransformFinalBlock",
    "HashCore",
    "HashFinal",
    "FreeToken",
    "CloseCryptoHandle",
    "GenerateDerivedKey",
    "GetBrowserToken",
]
