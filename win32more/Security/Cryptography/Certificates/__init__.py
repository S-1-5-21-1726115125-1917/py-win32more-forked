from __future__ import annotations
from ctypes import c_void_p, Structure, Union, POINTER, CFUNCTYPE, WINFUNCTYPE, cdll, windll
from win32more.base import ARCH, MissingType, c_char_p_no, c_wchar_p_no, Byte, SByte, Char, Int16, UInt16, Int32, UInt32, Int64, UInt64, IntPtr, UIntPtr, Single, Double, String, Boolean, Void, Guid, SUCCEEDED, FAILED, cfunctype, winfunctype, commethod, cfunctype_pointer, winfunctype_pointer, press, make_head
import win32more.Foundation
import win32more.Security.Authentication.Identity
import win32more.Security.Cryptography
import win32more.Security.Cryptography.Certificates
import win32more.System.Com
import sys
_module = sys.modules[__name__]
def __getattr__(name):
    try:
        prototype = globals()[f'{name}_head']
    except KeyError:
        if name in _arch_optional:
            return None
        raise AttributeError(f"module '{__name__}' has no attribute '{name}'") from None
    setattr(_module, name, press(prototype))
    return getattr(_module, name)
def __dir__():
    return __all__
ADDED_CERT_TYPE = UInt32
XECT_EXTENSION_V1: ADDED_CERT_TYPE = 1
XECT_EXTENSION_V2: ADDED_CERT_TYPE = 2
AlgorithmFlags = Int32
AlgorithmFlags_AlgorithmFlagsNone: AlgorithmFlags = 0
AlgorithmFlags_AlgorithmFlagsWrap: AlgorithmFlags = 1
AlgorithmOperationFlags = Int32
XCN_NCRYPT_NO_OPERATION: AlgorithmOperationFlags = 0
XCN_NCRYPT_CIPHER_OPERATION: AlgorithmOperationFlags = 1
XCN_NCRYPT_HASH_OPERATION: AlgorithmOperationFlags = 2
XCN_NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION: AlgorithmOperationFlags = 4
XCN_NCRYPT_SECRET_AGREEMENT_OPERATION: AlgorithmOperationFlags = 8
XCN_NCRYPT_SIGNATURE_OPERATION: AlgorithmOperationFlags = 16
XCN_NCRYPT_RNG_OPERATION: AlgorithmOperationFlags = 32
XCN_NCRYPT_KEY_DERIVATION_OPERATION: AlgorithmOperationFlags = 64
XCN_NCRYPT_ANY_ASYMMETRIC_OPERATION: AlgorithmOperationFlags = 28
XCN_NCRYPT_PREFER_SIGNATURE_ONLY_OPERATION: AlgorithmOperationFlags = 2097152
XCN_NCRYPT_PREFER_NON_SIGNATURE_OPERATION: AlgorithmOperationFlags = 4194304
XCN_NCRYPT_EXACT_MATCH_OPERATION: AlgorithmOperationFlags = 8388608
XCN_NCRYPT_PREFERENCE_MASK_OPERATION: AlgorithmOperationFlags = 14680064
AlgorithmType = Int32
XCN_BCRYPT_UNKNOWN_INTERFACE: AlgorithmType = 0
XCN_BCRYPT_CIPHER_INTERFACE: AlgorithmType = 1
XCN_BCRYPT_HASH_INTERFACE: AlgorithmType = 2
XCN_BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE: AlgorithmType = 3
XCN_BCRYPT_SIGNATURE_INTERFACE: AlgorithmType = 5
XCN_BCRYPT_SECRET_AGREEMENT_INTERFACE: AlgorithmType = 4
XCN_BCRYPT_RNG_INTERFACE: AlgorithmType = 6
XCN_BCRYPT_KEY_DERIVATION_INTERFACE: AlgorithmType = 7
AlternativeNameType = Int32
XCN_CERT_ALT_NAME_UNKNOWN: AlternativeNameType = 0
XCN_CERT_ALT_NAME_OTHER_NAME: AlternativeNameType = 1
XCN_CERT_ALT_NAME_RFC822_NAME: AlternativeNameType = 2
XCN_CERT_ALT_NAME_DNS_NAME: AlternativeNameType = 3
XCN_CERT_ALT_NAME_X400_ADDRESS: AlternativeNameType = 4
XCN_CERT_ALT_NAME_DIRECTORY_NAME: AlternativeNameType = 5
XCN_CERT_ALT_NAME_EDI_PARTY_NAME: AlternativeNameType = 6
XCN_CERT_ALT_NAME_URL: AlternativeNameType = 7
XCN_CERT_ALT_NAME_IP_ADDRESS: AlternativeNameType = 8
XCN_CERT_ALT_NAME_REGISTERED_ID: AlternativeNameType = 9
XCN_CERT_ALT_NAME_GUID: AlternativeNameType = 10
XCN_CERT_ALT_NAME_USER_PRINCIPLE_NAME: AlternativeNameType = 11
wszREGKEYNOSYSTEMCERTSVCPATH: String = 'CurrentControlSet\\Services\\CertSvc'
wszREGKEYCERTSVCPATH: String = 'SYSTEM\\CurrentControlSet\\Services\\CertSvc'
CA_DISP_INCOMPLETE: UInt32 = 0
CA_DISP_ERROR: UInt32 = 1
CA_DISP_REVOKED: UInt32 = 2
CA_DISP_VALID: UInt32 = 3
CA_DISP_INVALID: UInt32 = 4
CA_DISP_UNDER_SUBMISSION: UInt32 = 5
KRA_DISP_EXPIRED: UInt32 = 0
KRA_DISP_NOTFOUND: UInt32 = 1
KRA_DISP_REVOKED: UInt32 = 2
KRA_DISP_VALID: UInt32 = 3
KRA_DISP_INVALID: UInt32 = 4
KRA_DISP_UNTRUSTED: UInt32 = 5
KRA_DISP_NOTLOADED: UInt32 = 6
CA_ACCESS_MASKROLES: UInt32 = 255
CA_CRL_BASE: UInt32 = 1
CA_CRL_DELTA: UInt32 = 2
CA_CRL_REPUBLISH: UInt32 = 16
ICF_ALLOWFOREIGN: UInt32 = 65536
ICF_EXISTINGROW: UInt32 = 131072
IKF_OVERWRITE: UInt32 = 65536
wszOCSPCAPROP_CACERTIFICATE: String = 'CACertificate'
wszOCSPCAPROP_HASHALGORITHMID: String = 'HashAlgorithmId'
wszOCSPCAPROP_SIGNINGFLAGS: String = 'SigningFlags'
wszOCSPCAPROP_REMINDERDURATION: String = 'ReminderDuration'
wszOCSPCAPROP_SIGNINGCERTIFICATE: String = 'SigningCertificate'
wszOCSPCAPROP_CSPNAME: String = 'CSPName'
wszOCSPCAPROP_KEYSPEC: String = 'KeySpec'
wszOCSPCAPROP_ERRORCODE: String = 'ErrorCode'
wszOCSPCAPROP_PROVIDERCLSID: String = 'ProviderCLSID'
wszOCSPCAPROP_PROVIDERPROPERTIES: String = 'Provider'
wszOCSPCAPROP_LOCALREVOCATIONINFORMATION: String = 'LocalRevocationInformation'
wszOCSPCAPROP_SIGNINGCERTIFICATETEMPLATE: String = 'SigningCertificateTemplate'
wszOCSPCAPROP_CACONFIG: String = 'CAConfig'
wszOCSPPROP_LOGLEVEL: String = 'LogLevel'
wszOCSPPROP_DEBUG: String = 'Debug'
wszOCSPPROP_AUDITFILTER: String = 'AuditFilter'
wszOCSPPROP_ARRAYCONTROLLER: String = 'ArrayController'
wszOCSPPROP_ARRAYMEMBERS: String = 'ArrayMembers'
wszOCSPPROP_ENROLLPOLLINTERVAL: String = 'EnrollPollInterval'
wszOCSPISAPIPROP_VIRTUALROOTNAME: String = 'VirtualRootName'
wszOCSPISAPIPROP_NUMOFTHREADS: String = 'NumOfThreads'
wszOCSPISAPIPROP_NUMOFBACKENDCONNECTIONS: String = 'NumOfBackendConnections'
wszOCSPISAPIPROP_REFRESHRATE: String = 'RefreshRate'
wszOCSPISAPIPROP_MAXNUMOFCACHEENTRIES: String = 'MaxNumOfCacheEntries'
wszOCSPISAPIPROP_MAXAGE: String = 'MaxAge'
wszOCSPISAPIPROP_DEBUG: String = 'ISAPIDebug'
wszOCSPCOMMONPROP_REQFLAGS: String = 'RequestFlags'
wszOCSPCOMMONPROP_MAXINCOMINGMESSAGESIZE: String = 'MaxIncomingMessageSize'
wszOCSPCOMMONPROP_MAXNUMOFREQUESTENTRIES: String = 'MaxNumOfRequestEntries'
wszOCSPREVPROP_CRLURLTIMEOUT: String = 'CrlUrlTimeOut'
wszOCSPREVPROP_BASECRLURLS: String = 'BaseCrlUrls'
wszOCSPREVPROP_SERIALNUMBERSDIRS: String = 'IssuedSerialNumbersDirectories'
wszOCSPREVPROP_BASECRL: String = 'BaseCrl'
wszOCSPREVPROP_DELTACRLURLS: String = 'DeltaCrlUrls'
wszOCSPREVPROP_DELTACRL: String = 'DeltaCrl'
wszOCSPREVPROP_REFRESHTIMEOUT: String = 'RefreshTimeOut'
wszOCSPREVPROP_ERRORCODE: String = 'RevocationErrorCode'
szBACKUPANNOTATION: String = 'Cert Server Backup Interface'
szRESTOREANNOTATION: String = 'Cert Server Restore Interface'
CSBACKUP_TYPE_MASK: UInt32 = 3
CSRESTORE_TYPE_FULL: UInt32 = 1
CSRESTORE_TYPE_ONLINE: UInt32 = 2
CSRESTORE_TYPE_CATCHUP: UInt32 = 4
CSRESTORE_TYPE_MASK: UInt32 = 5
CSBACKUP_DISABLE_INCREMENTAL: UInt32 = 4294967295
CSBFT_DIRECTORY: UInt32 = 128
CSBFT_DATABASE_DIRECTORY: UInt32 = 64
CSBFT_LOG_DIRECTORY: UInt32 = 32
CSCONTROL_SHUTDOWN: UInt64 = 1
CSCONTROL_SUSPEND: UInt64 = 2
CSCONTROL_RESTART: UInt64 = 3
wszCONFIG_COMMONNAME: String = 'CommonName'
wszCONFIG_ORGUNIT: String = 'OrgUnit'
wszCONFIG_ORGANIZATION: String = 'Organization'
wszCONFIG_LOCALITY: String = 'Locality'
wszCONFIG_STATE: String = 'State'
wszCONFIG_COUNTRY: String = 'Country'
wszCONFIG_CONFIG: String = 'Config'
wszCONFIG_EXCHANGECERTIFICATE: String = 'ExchangeCertificate'
wszCONFIG_SIGNATURECERTIFICATE: String = 'SignatureCertificate'
wszCONFIG_DESCRIPTION: String = 'Description'
wszCONFIG_COMMENT: String = 'Comment'
wszCONFIG_SERVER: String = 'Server'
wszCONFIG_AUTHORITY: String = 'Authority'
wszCONFIG_SANITIZEDNAME: String = 'SanitizedName'
wszCONFIG_SHORTNAME: String = 'ShortName'
wszCONFIG_SANITIZEDSHORTNAME: String = 'SanitizedShortName'
wszCONFIG_FLAGS: String = 'Flags'
wszCONFIG_WEBENROLLMENTSERVERS: String = 'WebEnrollmentServers'
CAIF_DSENTRY: UInt32 = 1
CAIF_SHAREDFOLDERENTRY: UInt32 = 2
CAIF_REGISTRY: UInt32 = 4
CAIF_LOCAL: UInt32 = 8
CAIF_REGISTRYPARENT: UInt32 = 16
CR_IN_ENCODEANY: UInt32 = 255
CR_IN_ENCODEMASK: UInt32 = 255
CR_IN_FORMATANY: UInt32 = 0
CR_IN_PKCS10: UInt32 = 256
CR_IN_KEYGEN: UInt32 = 512
CR_IN_PKCS7: UInt32 = 768
CR_IN_CMC: UInt32 = 1024
CR_IN_CHALLENGERESPONSE: UInt32 = 1280
CR_IN_SIGNEDCERTIFICATETIMESTAMPLIST: UInt32 = 1536
CR_IN_FORMATMASK: UInt32 = 65280
CR_IN_SCEP: UInt32 = 65536
CR_IN_RPC: UInt32 = 131072
CR_IN_HTTP: UInt32 = 196608
CR_IN_FULLRESPONSE: UInt32 = 262144
CR_IN_CRLS: UInt32 = 524288
CR_IN_MACHINE: UInt32 = 1048576
CR_IN_ROBO: UInt32 = 2097152
CR_IN_CLIENTIDNONE: UInt32 = 4194304
CR_IN_CONNECTONLY: UInt32 = 8388608
CR_IN_RETURNCHALLENGE: UInt32 = 16777216
CR_IN_SCEPPOST: UInt32 = 33554432
CR_IN_CERTIFICATETRANSPARENCY: UInt32 = 67108864
CR_DISP_REVOKED: UInt32 = 6
CR_OUT_BASE64REQUESTHEADER: UInt32 = 3
CR_OUT_HEX: UInt32 = 4
CR_OUT_HEXASCII: UInt32 = 5
CR_OUT_BASE64X509CRLHEADER: UInt32 = 9
CR_OUT_HEXADDR: UInt32 = 10
CR_OUT_HEXASCIIADDR: UInt32 = 11
CR_OUT_HEXRAW: UInt32 = 12
CR_OUT_ENCODEMASK: UInt32 = 255
CR_OUT_CHAIN: UInt32 = 256
CR_OUT_CRLS: UInt32 = 512
CR_OUT_NOCRLF: UInt32 = 1073741824
CR_OUT_NOCR: UInt32 = 2147483648
CR_GEMT_DEFAULT: UInt32 = 0
CR_GEMT_HRESULT_STRING: UInt32 = 1
CR_GEMT_HTTP_ERROR: UInt32 = 2
CR_PROP_NONE: UInt32 = 0
CR_PROP_FILEVERSION: UInt32 = 1
CR_PROP_PRODUCTVERSION: UInt32 = 2
CR_PROP_EXITCOUNT: UInt32 = 3
CR_PROP_EXITDESCRIPTION: UInt32 = 4
CR_PROP_POLICYDESCRIPTION: UInt32 = 5
CR_PROP_CANAME: UInt32 = 6
CR_PROP_SANITIZEDCANAME: UInt32 = 7
CR_PROP_SHAREDFOLDER: UInt32 = 8
CR_PROP_PARENTCA: UInt32 = 9
CR_PROP_CATYPE: UInt32 = 10
CR_PROP_CASIGCERTCOUNT: UInt32 = 11
CR_PROP_CASIGCERT: UInt32 = 12
CR_PROP_CASIGCERTCHAIN: UInt32 = 13
CR_PROP_CAXCHGCERTCOUNT: UInt32 = 14
CR_PROP_CAXCHGCERT: UInt32 = 15
CR_PROP_CAXCHGCERTCHAIN: UInt32 = 16
CR_PROP_BASECRL: UInt32 = 17
CR_PROP_DELTACRL: UInt32 = 18
CR_PROP_CACERTSTATE: UInt32 = 19
CR_PROP_CRLSTATE: UInt32 = 20
CR_PROP_CAPROPIDMAX: UInt32 = 21
CR_PROP_DNSNAME: UInt32 = 22
CR_PROP_ROLESEPARATIONENABLED: UInt32 = 23
CR_PROP_KRACERTUSEDCOUNT: UInt32 = 24
CR_PROP_KRACERTCOUNT: UInt32 = 25
CR_PROP_KRACERT: UInt32 = 26
CR_PROP_KRACERTSTATE: UInt32 = 27
CR_PROP_ADVANCEDSERVER: UInt32 = 28
CR_PROP_TEMPLATES: UInt32 = 29
CR_PROP_BASECRLPUBLISHSTATUS: UInt32 = 30
CR_PROP_DELTACRLPUBLISHSTATUS: UInt32 = 31
CR_PROP_CASIGCERTCRLCHAIN: UInt32 = 32
CR_PROP_CAXCHGCERTCRLCHAIN: UInt32 = 33
CR_PROP_CACERTSTATUSCODE: UInt32 = 34
CR_PROP_CAFORWARDCROSSCERT: UInt32 = 35
CR_PROP_CABACKWARDCROSSCERT: UInt32 = 36
CR_PROP_CAFORWARDCROSSCERTSTATE: UInt32 = 37
CR_PROP_CABACKWARDCROSSCERTSTATE: UInt32 = 38
CR_PROP_CACERTVERSION: UInt32 = 39
CR_PROP_SANITIZEDCASHORTNAME: UInt32 = 40
CR_PROP_CERTCDPURLS: UInt32 = 41
CR_PROP_CERTAIAURLS: UInt32 = 42
CR_PROP_CERTAIAOCSPURLS: UInt32 = 43
CR_PROP_LOCALENAME: UInt32 = 44
CR_PROP_SUBJECTTEMPLATE_OIDS: UInt32 = 45
CR_PROP_SCEPSERVERCERTS: UInt32 = 1000
CR_PROP_SCEPSERVERCAPABILITIES: UInt32 = 1001
CR_PROP_SCEPSERVERCERTSCHAIN: UInt32 = 1002
CR_PROP_SCEPMIN: UInt32 = 1000
CR_PROP_SCEPMAX: UInt32 = 1002
FR_PROP_CLAIMCHALLENGE: UInt32 = 22
EAN_NAMEOBJECTID: UInt32 = 2147483648
EANR_SUPPRESS_IA5CONVERSION: UInt32 = 2147483648
CERTENROLL_INDEX_BASE: UInt32 = 0
EXITEVENT_INVALID: UInt32 = 0
EXITEVENT_STARTUP: UInt32 = 128
EXITEVENT_CERTIMPORTED: UInt32 = 512
ENUMEXT_OBJECTID: UInt32 = 1
CMM_REFRESHONLY: UInt32 = 1
CMM_READONLY: UInt32 = 2
DBG_CERTSRV: UInt32 = 1
wszSERVICE_NAME: String = 'CertSvc'
wszREGKEYBASE: String = 'SYSTEM\\CurrentControlSet\\Services\\CertSvc'
wszREGKEYCONFIG: String = 'Configuration'
wszREGACTIVE: String = 'Active'
wszREGDIRECTORY: String = 'ConfigurationDirectory'
wszREGDBDIRECTORY: String = 'DBDirectory'
wszREGDBLOGDIRECTORY: String = 'DBLogDirectory'
wszREGDBSYSDIRECTORY: String = 'DBSystemDirectory'
wszREGDBTEMPDIRECTORY: String = 'DBTempDirectory'
wszREGDBSESSIONCOUNT: String = 'DBSessionCount'
wszREGDBMAXREADSESSIONCOUNT: String = 'DBMaxReadSessionCount'
wszREGDBFLAGS: String = 'DBFlags'
wszREGDBLASTFULLBACKUP: String = 'DBLastFullBackup'
wszREGDBLASTINCREMENTALBACKUP: String = 'DBLastIncrementalBackup'
wszREGDBLASTRECOVERY: String = 'DBLastRecovery'
wszREGWEBCLIENTCAMACHINE: String = 'WebClientCAMachine'
wszREGVERSION: String = 'Version'
wszREGWEBCLIENTCANAME: String = 'WebClientCAName'
wszREGWEBCLIENTCATYPE: String = 'WebClientCAType'
wszREGLDAPFLAGS: String = 'LDAPFlags'
wszREGCERTSRVDEBUG: String = 'Debug'
DBSESSIONCOUNTDEFAULT: UInt32 = 100
DBFLAGS_READONLY: UInt32 = 1
DBFLAGS_CREATEIFNEEDED: UInt32 = 2
DBFLAGS_CIRCULARLOGGING: UInt32 = 4
DBFLAGS_LAZYFLUSH: UInt32 = 8
DBFLAGS_MAXCACHESIZEX100: UInt32 = 16
DBFLAGS_CHECKPOINTDEPTH60MB: UInt32 = 32
DBFLAGS_LOGBUFFERSLARGE: UInt32 = 64
DBFLAGS_LOGBUFFERSHUGE: UInt32 = 128
DBFLAGS_LOGFILESIZE16MB: UInt32 = 256
DBFLAGS_MULTITHREADTRANSACTIONS: UInt32 = 512
DBFLAGS_DISABLESNAPSHOTBACKUP: UInt32 = 1024
DBFLAGS_ENABLEVOLATILEREQUESTS: UInt32 = 2048
LDAPF_SSLENABLE: UInt32 = 1
LDAPF_SIGNDISABLE: UInt32 = 2
CSVER_MAJOR_WIN2K: UInt32 = 1
CSVER_MINOR_WIN2K: UInt32 = 1
CSVER_MAJOR_WHISTLER: UInt32 = 2
CSVER_MINOR_WHISTLER_BETA2: UInt32 = 1
CSVER_MINOR_WHISTLER_BETA3: UInt32 = 2
CSVER_MAJOR_LONGHORN: UInt32 = 3
CSVER_MINOR_LONGHORN_BETA1: UInt32 = 1
CSVER_MAJOR_WIN7: UInt32 = 4
CSVER_MINOR_WIN7: UInt32 = 1
CSVER_MAJOR_WIN8: UInt32 = 5
CSVER_MINOR_WIN8: UInt32 = 1
CSVER_MAJOR_WINBLUE: UInt32 = 6
CSVER_MINOR_WINBLUE: UInt32 = 1
CSVER_MAJOR_THRESHOLD: UInt32 = 7
CSVER_MINOR_THRESHOLD: UInt32 = 1
CSVER_MAJOR: UInt32 = 7
CSVER_MINOR: UInt32 = 1
wszREGKEYRESTOREINPROGRESS: String = 'RestoreInProgress'
wszREGKEYDBPARAMETERS: String = 'DBParameters'
wszREGCADESCRIPTION: String = 'CADescription'
wszREGCACERTHASH: String = 'CACertHash'
wszREGCASERIALNUMBER: String = 'CACertSerialNumber'
wszREGCAXCHGCERTHASH: String = 'CAXchgCertHash'
wszREGKRACERTHASH: String = 'KRACertHash'
wszREGKRACERTCOUNT: String = 'KRACertCount'
wszREGKRAFLAGS: String = 'KRAFlags'
wszREGCATYPE: String = 'CAType'
wszREGCERTENROLLCOMPATIBLE: String = 'CertEnrollCompatible'
wszREGENFORCEX500NAMELENGTHS: String = 'EnforceX500NameLengths'
wszREGCOMMONNAME: String = 'CommonName'
wszREGCLOCKSKEWMINUTES: String = 'ClockSkewMinutes'
wszREGCRLNEXTPUBLISH: String = 'CRLNextPublish'
wszREGCRLPERIODSTRING: String = 'CRLPeriod'
wszREGCRLPERIODCOUNT: String = 'CRLPeriodUnits'
wszREGCRLOVERLAPPERIODSTRING: String = 'CRLOverlapPeriod'
wszREGCRLOVERLAPPERIODCOUNT: String = 'CRLOverlapUnits'
wszREGCRLDELTANEXTPUBLISH: String = 'CRLDeltaNextPublish'
wszREGCRLDELTAPERIODSTRING: String = 'CRLDeltaPeriod'
wszREGCRLDELTAPERIODCOUNT: String = 'CRLDeltaPeriodUnits'
wszREGCRLDELTAOVERLAPPERIODSTRING: String = 'CRLDeltaOverlapPeriod'
wszREGCRLDELTAOVERLAPPERIODCOUNT: String = 'CRLDeltaOverlapUnits'
wszREGCRLPUBLICATIONURLS: String = 'CRLPublicationURLs'
wszREGCACERTPUBLICATIONURLS: String = 'CACertPublicationURLs'
wszREGCAXCHGVALIDITYPERIODSTRING: String = 'CAXchgValidityPeriod'
wszREGCAXCHGVALIDITYPERIODCOUNT: String = 'CAXchgValidityPeriodUnits'
wszREGCAXCHGOVERLAPPERIODSTRING: String = 'CAXchgOverlapPeriod'
wszREGCAXCHGOVERLAPPERIODCOUNT: String = 'CAXchgOverlapPeriodUnits'
wszREGCRLPATH_OLD: String = 'CRLPath'
wszREGCRLEDITFLAGS: String = 'CRLEditFlags'
wszREGCRLFLAGS: String = 'CRLFlags'
wszREGCRLATTEMPTREPUBLISH: String = 'CRLAttemptRepublish'
wszREGENABLED: String = 'Enabled'
wszREGFORCETELETEX: String = 'ForceTeletex'
wszREGLOGLEVEL: String = 'LogLevel'
wszREGHIGHSERIAL: String = 'HighSerial'
wszREGPOLICYFLAGS: String = 'PolicyFlags'
wszREGNAMESEPARATOR: String = 'SubjectNameSeparator'
wszREGSUBJECTTEMPLATE: String = 'SubjectTemplate'
wszREGCAUSEDS: String = 'UseDS'
wszREGVALIDITYPERIODSTRING: String = 'ValidityPeriod'
wszREGVALIDITYPERIODCOUNT: String = 'ValidityPeriodUnits'
wszREGPARENTCAMACHINE: String = 'ParentCAMachine'
wszREGPARENTCANAME: String = 'ParentCAName'
wszREGREQUESTFILENAME: String = 'RequestFileName'
wszREGREQUESTID: String = 'RequestId'
wszREGREQUESTKEYCONTAINER: String = 'RequestKeyContainer'
wszREGREQUESTKEYINDEX: String = 'RequestKeyIndex'
wszREGCASERVERNAME: String = 'CAServerName'
wszREGCACERTFILENAME: String = 'CACertFileName'
wszREGCASECURITY: String = 'Security'
wszREGAUDITFILTER: String = 'AuditFilter'
wszREGOFFICERRIGHTS: String = 'OfficerRights'
wszENROLLMENTAGENTRIGHTS: String = 'EnrollmentAgentRights'
wszREGMAXINCOMINGMESSAGESIZE: String = 'MaxIncomingMessageSize'
wszREGMAXINCOMINGALLOCSIZE: String = 'MaxIncomingAllocSize'
wszREGROLESEPARATIONENABLED: String = 'RoleSeparationEnabled'
wszREGALTERNATEPUBLISHDOMAINS: String = 'AlternatePublishDomains'
wszREGSETUPSTATUS: String = 'SetupStatus'
wszREGINTERFACEFLAGS: String = 'InterfaceFlags'
wszREGDSCONFIGDN: String = 'DSConfigDN'
wszREGDSDOMAINDN: String = 'DSDomainDN'
wszREGVIEWAGEMINUTES: String = 'ViewAgeMinutes'
wszREGVIEWIDLEMINUTES: String = 'ViewIdleMinutes'
wszREGEKPUBLISTDIRECTORIES: String = 'EndorsementKeyListDirectories'
wszCERTIFICATETRANSPARENCYFLAGS: String = 'CertificateTransparencyFlags'
wszREGMAXSCTLISTSIZE: String = 'MaxSCTListSize'
wszREGCERTIFICATETRANSPARENCYINFOOID: String = 'CTInformationExtensionOid'
wszREGPROCESSINGFLAGS: String = 'ProcessingFlags'
wszREGUSEDEFINEDCACERTINREQ: String = 'UseDefinedCACertInRequest'
wszREGENABLEDEKUFORDEFINEDCACERT: String = 'EnabledEKUForDefinedCACert'
wszREGEKUOIDSFORPUBLISHEXPIREDCERTINCRL: String = 'EKUOIDsForPublishExpiredCertInCRL'
wszCRTFILENAMEEXT: String = '.crt'
wszPFXFILENAMEEXT: String = '.p12'
wszDATFILENAMEEXT: String = '.dat'
wszLOGFILENAMEEXT: String = '.log'
wszDBFILENAMEEXT: String = '.edb'
szDBBASENAMEPARM: String = 'edb'
wszLOGPATH: String = 'CertLog'
wszDBBACKUPSUBDIR: String = 'DataBase'
wszDBBACKUPCERTBACKDAT: String = 'certbkxp.dat'
CCLOCKSKEWMINUTESDEFAULT: UInt32 = 10
CVIEWAGEMINUTESDEFAULT: UInt32 = 16
dwVALIDITYPERIODCOUNTDEFAULT_ROOT: UInt32 = 5
dwVALIDITYPERIODCOUNTDEFAULT_ENTERPRISE: UInt32 = 2
dwVALIDITYPERIODCOUNTDEFAULT_STANDALONE: UInt32 = 1
dwCAXCHGVALIDITYPERIODCOUNTDEFAULT: UInt32 = 1
dwCAXCHGOVERLAPPERIODCOUNTDEFAULT: UInt32 = 1
dwCRLPERIODCOUNTDEFAULT: UInt32 = 1
dwCRLOVERLAPPERIODCOUNTDEFAULT: UInt32 = 0
dwCRLDELTAPERIODCOUNTDEFAULT: UInt32 = 1
dwCRLDELTAOVERLAPPERIODCOUNTDEFAULT: UInt32 = 0
SETUP_SERVER_FLAG: UInt32 = 1
SETUP_CLIENT_FLAG: UInt32 = 2
SETUP_SUSPEND_FLAG: UInt32 = 4
SETUP_REQUEST_FLAG: UInt32 = 8
SETUP_ONLINE_FLAG: UInt32 = 16
SETUP_DENIED_FLAG: UInt32 = 32
SETUP_CREATEDB_FLAG: UInt32 = 64
SETUP_ATTEMPT_VROOT_CREATE: UInt32 = 128
SETUP_FORCECRL_FLAG: UInt32 = 256
SETUP_UPDATE_CAOBJECT_SVRTYPE: UInt32 = 512
SETUP_SERVER_UPGRADED_FLAG: UInt32 = 1024
SETUP_W2K_SECURITY_NOT_UPGRADED_FLAG: UInt32 = 2048
SETUP_SECURITY_CHANGED: UInt32 = 4096
SETUP_DCOM_SECURITY_UPDATED_FLAG: UInt32 = 8192
SETUP_SERVER_IS_UP_TO_DATE_FLAG: UInt32 = 16384
CRLF_DELTA_USE_OLDEST_UNEXPIRED_BASE: UInt32 = 1
CRLF_DELETE_EXPIRED_CRLS: UInt32 = 2
CRLF_CRLNUMBER_CRITICAL: UInt32 = 4
CRLF_REVCHECK_IGNORE_OFFLINE: UInt32 = 8
CRLF_IGNORE_INVALID_POLICIES: UInt32 = 16
CRLF_REBUILD_MODIFIED_SUBJECT_ONLY: UInt32 = 32
CRLF_SAVE_FAILED_CERTS: UInt32 = 64
CRLF_IGNORE_UNKNOWN_CMC_ATTRIBUTES: UInt32 = 128
CRLF_IGNORE_CROSS_CERT_TRUST_ERROR: UInt32 = 256
CRLF_PUBLISH_EXPIRED_CERT_CRLS: UInt32 = 512
CRLF_ENFORCE_ENROLLMENT_AGENT: UInt32 = 1024
CRLF_DISABLE_RDN_REORDER: UInt32 = 2048
CRLF_DISABLE_ROOT_CROSS_CERTS: UInt32 = 4096
CRLF_LOG_FULL_RESPONSE: UInt32 = 8192
CRLF_USE_XCHG_CERT_TEMPLATE: UInt32 = 16384
CRLF_USE_CROSS_CERT_TEMPLATE: UInt32 = 32768
CRLF_ALLOW_REQUEST_ATTRIBUTE_SUBJECT: UInt32 = 65536
CRLF_REVCHECK_IGNORE_NOREVCHECK: UInt32 = 131072
CRLF_PRESERVE_EXPIRED_CA_CERTS: UInt32 = 262144
CRLF_PRESERVE_REVOKED_CA_CERTS: UInt32 = 524288
CRLF_DISABLE_CHAIN_VERIFICATION: UInt32 = 1048576
CRLF_BUILD_ROOTCA_CRLENTRIES_BASEDONKEY: UInt32 = 2097152
KRAF_ENABLEFOREIGN: UInt32 = 1
KRAF_SAVEBADREQUESTKEY: UInt32 = 2
KRAF_ENABLEARCHIVEALL: UInt32 = 4
KRAF_DISABLEUSEDEFAULTPROVIDER: UInt32 = 8
IF_LOCKICERTREQUEST: UInt32 = 1
IF_NOREMOTEICERTREQUEST: UInt32 = 2
IF_NOLOCALICERTREQUEST: UInt32 = 4
IF_NORPCICERTREQUEST: UInt32 = 8
IF_NOREMOTEICERTADMIN: UInt32 = 16
IF_NOLOCALICERTADMIN: UInt32 = 32
IF_NOREMOTEICERTADMINBACKUP: UInt32 = 64
IF_NOLOCALICERTADMINBACKUP: UInt32 = 128
IF_NOSNAPSHOTBACKUP: UInt32 = 256
IF_ENFORCEENCRYPTICERTREQUEST: UInt32 = 512
IF_ENFORCEENCRYPTICERTADMIN: UInt32 = 1024
IF_ENABLEEXITKEYRETRIEVAL: UInt32 = 2048
IF_ENABLEADMINASAUDITOR: UInt32 = 4096
PROCFLG_NONE: UInt32 = 0
PROCFLG_ENFORCEGOODKEYS: UInt32 = 1
CSURL_SERVERPUBLISH: UInt32 = 1
CSURL_ADDTOCERTCDP: UInt32 = 2
CSURL_ADDTOFRESHESTCRL: UInt32 = 4
CSURL_ADDTOCRLCDP: UInt32 = 8
CSURL_PUBLISHRETRY: UInt32 = 16
CSURL_ADDTOCERTOCSP: UInt32 = 32
CSURL_SERVERPUBLISHDELTA: UInt32 = 64
CSURL_ADDTOIDP: UInt32 = 128
wszREGKEYCSP: String = 'CSP'
wszREGKEYENCRYPTIONCSP: String = 'EncryptionCSP'
wszREGKEYEXITMODULES: String = 'ExitModules'
wszREGKEYPOLICYMODULES: String = 'PolicyModules'
wszSECUREDATTRIBUTES: String = 'SignedAttributes'
wszzDEFAULTSIGNEDATTRIBUTES: String = 'RequesterName\x00'
wszREGBACKUPLOGDIRECTORY: String = 'BackupLogDirectory'
wszREGCHECKPOINTFILE: String = 'CheckPointFile'
wszREGHIGHLOGNUMBER: String = 'HighLogNumber'
wszREGLOWLOGNUMBER: String = 'LowLogNumber'
wszREGLOGPATH: String = 'LogPath'
wszREGRESTOREMAPCOUNT: String = 'RestoreMapCount'
wszREGRESTOREMAP: String = 'RestoreMap'
wszREGDATABASERECOVERED: String = 'DatabaseRecovered'
wszREGRESTORESTATUS: String = 'RestoreStatus'
wszREGB2ICERTMANAGEMODULE: String = 'ICertManageModule'
wszREGSP4DEFAULTCONFIGURATION: String = 'DefaultConfiguration'
wszREGSP4KEYSETNAME: String = 'KeySetName'
wszREGSP4SUBJECTNAMESEPARATOR: String = 'SubjectNameSeparator'
wszREGSP4NAMES: String = 'Names'
wszREGSP4QUERIES: String = 'Queries'
wszREGNETSCAPECERTTYPE: String = 'NetscapeCertType'
wszNETSCAPEREVOCATIONTYPE: String = 'Netscape'
wszREGPROVIDERTYPE: String = 'ProviderType'
wszREGPROVIDER: String = 'Provider'
wszHASHALGORITHM: String = 'HashAlgorithm'
wszENCRYPTIONALGORITHM: String = 'EncryptionAlgorithm'
wszMACHINEKEYSET: String = 'MachineKeyset'
wszREGKEYSIZE: String = 'KeySize'
wszREGSYMMETRICKEYSIZE: String = 'SymmetricKeySize'
wszCNGPUBLICKEYALGORITHM: String = 'CNGPublicKeyAlgorithm'
wszCNGHASHALGORITHM: String = 'CNGHashAlgorithm'
wszCNGENCRYPTIONALGORITHM: String = 'CNGEncryptionAlgorithm'
wszREGALTERNATESIGNATUREALGORITHM: String = 'AlternateSignatureAlgorithm'
szNAMESEPARATORDEFAULT: String = '\n'
wszPERIODYEARS: String = 'Years'
wszPERIODMONTHS: String = 'Months'
wszPERIODWEEKS: String = 'Weeks'
wszPERIODDAYS: String = 'Days'
wszPERIODHOURS: String = 'Hours'
wszPERIODMINUTES: String = 'Minutes'
wszPERIODSECONDS: String = 'Seconds'
wszREGISSUERCERTURLFLAGS: String = 'IssuerCertURLFlags'
wszREGEDITFLAGS: String = 'EditFlags'
wszREGUPNMAP: String = 'UPNMap'
wszREGSUBJECTALTNAME: String = 'SubjectAltName'
wszREGSUBJECTALTNAME2: String = 'SubjectAltName2'
wszREGREQUESTDISPOSITION: String = 'RequestDisposition'
wszREGCAPATHLENGTH: String = 'CAPathLength'
wszREGREVOCATIONTYPE: String = 'RevocationType'
wszREGLDAPREVOCATIONCRLURL_OLD: String = 'LDAPRevocationCRLURL'
wszREGREVOCATIONCRLURL_OLD: String = 'RevocationCRLURL'
wszREGFTPREVOCATIONCRLURL_OLD: String = 'FTPRevocationCRLURL'
wszREGFILEREVOCATIONCRLURL_OLD: String = 'FileRevocationCRLURL'
wszREGREVOCATIONURL: String = 'RevocationURL'
wszREGLDAPISSUERCERTURL_OLD: String = 'LDAPIssuerCertURL'
wszREGISSUERCERTURL_OLD: String = 'IssuerCertURL'
wszREGFTPISSUERCERTURL_OLD: String = 'FTPIssuerCertURL'
wszREGFILEISSUERCERTURL_OLD: String = 'FileIssuerCertURL'
wszREGENABLEREQUESTEXTENSIONLIST: String = 'EnableRequestExtensionList'
wszREGENABLEENROLLEEREQUESTEXTENSIONLIST: String = 'EnableEnrolleeRequestExtensionList'
wszREGDISABLEEXTENSIONLIST: String = 'DisableExtensionList'
wszREGEKUOIDSFORVOLATILEREQUESTS: String = 'EKUOIDsforVolatileRequests'
wszREGLDAPSESSIONOPTIONS: String = 'LDAPSessionOptions'
wszLDAPSESSIONOPTIONVALUE: String = 'LDAPSessionOptionValue'
wszREGDEFAULTSMIME: String = 'DefaultSMIME'
CAPATHLENGTH_INFINITE: UInt32 = 4294967295
REQDISP_PENDING: UInt32 = 0
REQDISP_ISSUE: UInt32 = 1
REQDISP_DENY: UInt32 = 2
REQDISP_USEREQUESTATTRIBUTE: UInt32 = 3
REQDISP_MASK: UInt32 = 255
REQDISP_PENDINGFIRST: UInt32 = 256
REQDISP_DEFAULT_ENTERPRISE: UInt32 = 1
REVEXT_CDPLDAPURL_OLD: UInt32 = 1
REVEXT_CDPHTTPURL_OLD: UInt32 = 2
REVEXT_CDPFTPURL_OLD: UInt32 = 4
REVEXT_CDPFILEURL_OLD: UInt32 = 8
REVEXT_CDPURLMASK_OLD: UInt32 = 255
REVEXT_CDPENABLE: UInt32 = 256
REVEXT_ASPENABLE: UInt32 = 512
REVEXT_DEFAULT_NODS: UInt32 = 256
REVEXT_DEFAULT_DS: UInt32 = 256
ISSCERT_LDAPURL_OLD: UInt32 = 1
ISSCERT_HTTPURL_OLD: UInt32 = 2
ISSCERT_FTPURL_OLD: UInt32 = 4
ISSCERT_FILEURL_OLD: UInt32 = 8
ISSCERT_URLMASK_OLD: UInt32 = 255
ISSCERT_ENABLE: UInt32 = 256
ISSCERT_DEFAULT_NODS: UInt32 = 256
ISSCERT_DEFAULT_DS: UInt32 = 256
EDITF_ENABLEREQUESTEXTENSIONS: UInt32 = 1
EDITF_REQUESTEXTENSIONLIST: UInt32 = 2
EDITF_DISABLEEXTENSIONLIST: UInt32 = 4
EDITF_ADDOLDKEYUSAGE: UInt32 = 8
EDITF_ADDOLDCERTTYPE: UInt32 = 16
EDITF_ATTRIBUTEENDDATE: UInt32 = 32
EDITF_BASICCONSTRAINTSCRITICAL: UInt32 = 64
EDITF_BASICCONSTRAINTSCA: UInt32 = 128
EDITF_ENABLEAKIKEYID: UInt32 = 256
EDITF_ATTRIBUTECA: UInt32 = 512
EDITF_IGNOREREQUESTERGROUP: UInt32 = 1024
EDITF_ENABLEAKIISSUERNAME: UInt32 = 2048
EDITF_ENABLEAKIISSUERSERIAL: UInt32 = 4096
EDITF_ENABLEAKICRITICAL: UInt32 = 8192
EDITF_SERVERUPGRADED: UInt32 = 16384
EDITF_ATTRIBUTEEKU: UInt32 = 32768
EDITF_ENABLEDEFAULTSMIME: UInt32 = 65536
EDITF_EMAILOPTIONAL: UInt32 = 131072
EDITF_ATTRIBUTESUBJECTALTNAME2: UInt32 = 262144
EDITF_ENABLELDAPREFERRALS: UInt32 = 524288
EDITF_ENABLECHASECLIENTDC: UInt32 = 1048576
EDITF_AUDITCERTTEMPLATELOAD: UInt32 = 2097152
EDITF_DISABLEOLDOSCNUPN: UInt32 = 4194304
EDITF_DISABLELDAPPACKAGELIST: UInt32 = 8388608
EDITF_ENABLEUPNMAP: UInt32 = 16777216
EDITF_ENABLEOCSPREVNOCHECK: UInt32 = 33554432
EDITF_ENABLERENEWONBEHALFOF: UInt32 = 67108864
EDITF_ENABLEKEYENCIPHERMENTCACERT: UInt32 = 134217728
wszREGLDAPREVOCATIONDN_OLD: String = 'LDAPRevocationDN'
wszREGLDAPREVOCATIONDNTEMPLATE_OLD: String = 'LDAPRevocationDNTemplate'
wszCRLPUBLISHRETRYCOUNT: String = 'CRLPublishRetryCount'
wszREGCERTPUBLISHFLAGS: String = 'PublishCertFlags'
EXITPUB_FILE: UInt32 = 1
EXITPUB_ACTIVEDIRECTORY: UInt32 = 2
EXITPUB_REMOVEOLDCERTS: UInt32 = 16
EXITPUB_DEFAULT_ENTERPRISE: UInt32 = 2
EXITPUB_DEFAULT_STANDALONE: UInt32 = 1
wszCLASS_CERTADMIN: String = 'CertificateAuthority.Admin'
wszCLASS_CERTCONFIG: String = 'CertificateAuthority.Config'
wszCLASS_CERTGETCONFIG: String = 'CertificateAuthority.GetConfig'
wszCLASS_CERTENCODE: String = 'CertificateAuthority.Encode'
wszCLASS_CERTDBMEM: String = 'CertificateAuthority.DBMem'
wszCLASS_CERTREQUEST: String = 'CertificateAuthority.Request'
wszCLASS_CERTSERVEREXIT: String = 'CertificateAuthority.ServerExit'
wszCLASS_CERTSERVERPOLICY: String = 'CertificateAuthority.ServerPolicy'
wszCLASS_CERTVIEW: String = 'CertificateAuthority.View'
wszMICROSOFTCERTMODULE_PREFIX: String = 'CertificateAuthority_MicrosoftDefault'
wszCERTMANAGE_SUFFIX: String = 'Manage'
wszCERTEXITMODULE_POSTFIX: String = '.Exit'
wszCERTPOLICYMODULE_POSTFIX: String = '.Policy'
wszCAPOLICYFILE: String = 'CAPolicy.inf'
wszINFSECTION_CDP: String = 'CRLDistributionPoint'
wszINFSECTION_AIA: String = 'AuthorityInformationAccess'
wszINFSECTION_EKU: String = 'EnhancedKeyUsageExtension'
wszINFSECTION_CCDP: String = 'CrossCertificateDistributionPointsExtension'
wszINFSECTION_CERTSERVER: String = 'certsrv_server'
wszINFKEY_RENEWALKEYLENGTH: String = 'RenewalKeyLength'
wszINFKEY_RENEWALVALIDITYPERIODSTRING: String = 'RenewalValidityPeriod'
wszINFKEY_RENEWALVALIDITYPERIODCOUNT: String = 'RenewalValidityPeriodUnits'
wszINFKEY_UTF8: String = 'UTF8'
wszINFKEY_CRLPERIODSTRING: String = 'CRLPeriod'
wszINFKEY_CRLPERIODCOUNT: String = 'CRLPeriodUnits'
wszINFKEY_CRLDELTAPERIODSTRING: String = 'CRLDeltaPeriod'
wszINFKEY_CRLDELTAPERIODCOUNT: String = 'CRLDeltaPeriodUnits'
wszINFKEY_LOADDEFAULTTEMPLATES: String = 'LoadDefaultTemplates'
wszINFKEY_ENABLEKEYCOUNTING: String = 'EnableKeyCounting'
wszINFKEY_FORCEUTF8: String = 'ForceUTF8'
wszINFKEY_ALTERNATESIGNATUREALGORITHM: String = 'AlternateSignatureAlgorithm'
wszINFKEY_SHOWALLCSPS: String = 'ShowAllCSPs'
wszINFKEY_CRITICAL: String = 'Critical'
wszINFKEY_EMPTY: String = 'Empty'
wszINFKEY_CCDPSYNCDELTATIME: String = 'SyncDeltaTime'
wszINFSECTION_CAPOLICY: String = 'CAPolicy'
wszINFSECTION_POLICYSTATEMENT: String = 'PolicyStatementExtension'
wszINFSECTION_APPLICATIONPOLICYSTATEMENT: String = 'ApplicationPolicyStatementExtension'
wszINFKEY_POLICIES: String = 'Policies'
wszINFKEY_OID: String = 'OID'
wszINFKEY_NOTICE: String = 'Notice'
wszINFKEY_FLAGS: String = 'Flags'
wszINFSECTION_REQUESTATTRIBUTES: String = 'RequestAttributes'
wszINFSECTION_NAMECONSTRAINTS: String = 'NameConstraintsExtension'
wszINFKEY_INCLUDE: String = 'Include'
wszINFKEY_EXCLUDE: String = 'Exclude'
wszINFKEY_SUBTREE: String = 'SubTree'
wszINFKEY_UPN: String = 'UPN'
wszINFKEY_EMAIL: String = 'EMail'
wszINFKEY_DNS: String = 'DNS'
wszINFKEY_DIRECTORYNAME: String = 'DirectoryName'
wszINFKEY_URL: String = 'URL'
wszINFKEY_IPADDRESS: String = 'IPAddress'
wszINFKEY_REGISTEREDID: String = 'RegisteredId'
wszINFKEY_OTHERNAME: String = 'OtherName'
wszINFSECTION_POLICYMAPPINGS: String = 'PolicyMappingsExtension'
wszINFSECTION_APPLICATIONPOLICYMAPPINGS: String = 'ApplicationPolicyMappingsExtension'
wszINFSECTION_POLICYCONSTRAINTS: String = 'PolicyConstraintsExtension'
wszINFSECTION_APPLICATIONPOLICYCONSTRAINTS: String = 'ApplicationPolicyConstraintsExtension'
wszINFKEY_REQUIREEXPLICITPOLICY: String = 'RequireExplicitPolicy'
wszINFKEY_INHIBITPOLICYMAPPING: String = 'InhibitPolicyMapping'
wszINFSECTION_BASICCONSTRAINTS: String = 'BasicConstraintsExtension'
wszINFKEY_PATHLENGTH: String = 'PathLength'
wszINFSECTION_EXTENSIONS: String = 'Extensions'
wszINFSECTION_PROPERTIES: String = 'Properties'
wszINFKEY_CONTINUE: String = '_continue_'
wszINFSECTION_NEWREQUEST: String = 'NewRequest'
wszINFKEY_SUBJECT: String = 'Subject'
wszINFKEY_SUBJECTNAMEFLAGS: String = 'SubjectNameFlags'
wszINFKEY_X500NAMEFLAGS: String = 'X500NameFlags'
wszINFKEY_EXPORTABLE: String = 'Exportable'
wszINFKEY_EXPORTABLEENCRYPTED: String = 'ExportableEncrypted'
wszINFKEY_HASHALGORITHM: String = 'HashAlgorithm'
wszINFKEY_KEYALGORITHM: String = 'KeyAlgorithm'
wszINFKEY_KEYALGORITHMPARMETERS: String = 'KeyAlgorithmParameters'
wszINFKEY_KEYCONTAINER: String = 'KeyContainer'
wszINFKEY_READERNAME: String = 'ReaderName'
wszINFKEY_KEYLENGTH: String = 'KeyLength'
wszINFKEY_LEGACYKEYSPEC: String = 'KeySpec'
wszINFKEY_KEYUSAGEEXTENSION: String = 'KeyUsage'
wszINFKEY_KEYUSAGEPROPERTY: String = 'KeyUsageProperty'
wszINFKEY_MACHINEKEYSET: String = 'MachineKeySet'
wszINFKEY_PRIVATEKEYARCHIVE: String = 'PrivateKeyArchive'
wszINFKEY_ENCRYPTIONALGORITHM: String = 'EncryptionAlgorithm'
wszINFKEY_ENCRYPTIONLENGTH: String = 'EncryptionLength'
wszINFKEY_PROVIDERNAME: String = 'ProviderName'
wszINFKEY_PROVIDERTYPE: String = 'ProviderType'
wszINFKEY_RENEWALCERT: String = 'RenewalCert'
wszINFKEY_REQUESTTYPE: String = 'RequestType'
wszINFKEY_SECURITYDESCRIPTOR: String = 'SecurityDescriptor'
wszINFKEY_SILENT: String = 'Silent'
wszINFKEY_SMIME: String = 'SMIME'
wszINFKEY_SUPPRESSDEFAULTS: String = 'SuppressDefaults'
wszINFKEY_USEEXISTINGKEY: String = 'UseExistingKeySet'
wszINFKEY_USERPROTECTED: String = 'UserProtected'
wszINFKEY_KEYPROTECTION: String = 'KeyProtection'
wszINFKEY_UICONTEXTMESSAGE: String = 'UIContextMessage'
wszINFKEY_FRIENDLYNAME: String = 'FriendlyName'
wszINFKEY_NOTBEFORE: String = 'NotBefore'
wszINFKEY_NOTAFTER: String = 'NotAfter'
wszINFKEY_ATTESTPRIVATEKEY: String = 'AttestPrivateKey'
wszINFKEY_PUBLICKEY: String = 'PublicKey'
wszINFKEY_PUBLICKEYPARAMETERS: String = 'PublicKeyParameters'
wszINFKEY_ECCKEYPARAMETERS: String = 'EccKeyParameters'
wszINFKEY_ECCKEYPARAMETERS_P: String = 'EccKeyParameters_P'
wszINFKEY_ECCKEYPARAMETERS_A: String = 'EccKeyParameters_A'
wszINFKEY_ECCKEYPARAMETERS_B: String = 'EccKeyParameters_B'
wszINFKEY_ECCKEYPARAMETERS_SEED: String = 'EccKeyParameters_Seed'
wszINFKEY_ECCKEYPARAMETERS_BASE: String = 'EccKeyParameters_Base'
wszINFKEY_ECCKEYPARAMETERS_ORDER: String = 'EccKeyParameters_Order'
wszINFKEY_ECCKEYPARAMETERS_COFACTOR: String = 'EccKeyParameters_Cofactor'
wszINFKEY_ECCKEYPARAMETERSTYPE: String = 'EccKeyParametersType'
wszINFKEY_SERIALNUMBER: String = 'SerialNumber'
wszINFKEY_CATHUMBPRINT: String = 'CAThumbprint'
wszINFKEY_CACERTS: String = 'CACerts'
wszINFKEY_CACAPABILITIES: String = 'CACapabilities'
wszINFKEY_CHALLENGEPASSWORD: String = 'ChallengePassword'
wszINFVALUE_REQUESTTYPE_PKCS10: String = 'PKCS10'
wszINFVALUE_REQUESTTYPE_PKCS7: String = 'PKCS7'
wszINFVALUE_REQUESTTYPE_CMC: String = 'CMC'
wszINFVALUE_REQUESTTYPE_CERT: String = 'Cert'
wszINFVALUE_REQUESTTYPE_SCEP: String = 'SCEP'
wszINFVALUE_ENDORSEMENTKEY: String = 'EndorsementKey'
wszREGEXITSMTPKEY: String = 'SMTP'
wszREGEXITSMTPTEMPLATES: String = 'Templates'
wszREGEXITSMTPEVENTFILTER: String = 'EventFilter'
wszREGEXITSMTPSERVER: String = 'SMTPServer'
wszREGEXITSMTPAUTHENTICATE: String = 'SMTPAuthenticate'
wszREGEXITDENIEDKEY: String = 'Denied'
wszREGEXITISSUEDKEY: String = 'Issued'
wszREGEXITPENDINGKEY: String = 'Pending'
wszREGEXITREVOKEDKEY: String = 'Revoked'
wszREGEXITCRLISSUEDKEY: String = 'CRLIssued'
wszREGEXITSHUTDOWNKEY: String = 'Shutdown'
wszREGEXITSTARTUPKEY: String = 'Startup'
wszREGEXITIMPORTEDKEY: String = 'Imported'
wszREGEXITSMTPFROM: String = 'From'
wszREGEXITSMTPTO: String = 'To'
wszREGEXITSMTPCC: String = 'Cc'
wszREGEXITTITLEFORMAT: String = 'TitleFormat'
wszREGEXITTITLEARG: String = 'TitleArg'
wszREGEXITBODYFORMAT: String = 'BodyFormat'
wszREGEXITBODYARG: String = 'BodyArg'
wszREGEXITPROPNOTFOUND: String = '???'
wszREGKEYENROLLMENT: String = 'Software\\Microsoft\\Cryptography\\AutoEnrollment'
wszREGKEYGROUPPOLICYENROLLMENT: String = 'Software\\Policies\\Microsoft\\Cryptography\\AutoEnrollment'
wszREGMAXPENDINGREQUESTDAYS: String = 'MaxPendingRequestDays'
wszREGAELOGLEVEL_OLD: String = 'AEEventLogLevel'
wszREGENROLLFLAGS: String = 'EnrollFlags'
wszREGVERIFYFLAGS: String = 'VerifyFlags'
wszREGUNICODE: String = 'Unicode'
wszREGAIKCLOUDCAURL: String = 'AIKCloudCAURL'
wszREGAIKKEYALGORITHM: String = 'AIKKeyAlgorithm'
wszREGAIKKEYLENGTH: String = 'AIKKeyLength'
wszREGPRESERVESCEPDUMMYCERTS: String = 'PreserveSCEPDummyCerts'
wszREGALLPROVIDERS: String = 'All'
TP_MACHINEPOLICY: UInt32 = 1
wszREGKEYREPAIR: String = 'KeyRepair'
KR_ENABLE_MACHINE: UInt32 = 1
KR_ENABLE_USER: UInt32 = 2
wszPROPDISTINGUISHEDNAME: String = 'DistinguishedName'
wszPROPRAWNAME: String = 'RawName'
wszPROPCOUNTRY: String = 'Country'
wszPROPORGANIZATION: String = 'Organization'
wszPROPORGUNIT: String = 'OrgUnit'
wszPROPCOMMONNAME: String = 'CommonName'
wszPROPLOCALITY: String = 'Locality'
wszPROPSTATE: String = 'State'
wszPROPTITLE: String = 'Title'
wszPROPGIVENNAME: String = 'GivenName'
wszPROPINITIALS: String = 'Initials'
wszPROPSURNAME: String = 'SurName'
wszPROPDOMAINCOMPONENT: String = 'DomainComponent'
wszPROPEMAIL: String = 'EMail'
wszPROPSTREETADDRESS: String = 'StreetAddress'
wszPROPUNSTRUCTUREDNAME: String = 'UnstructuredName'
wszPROPUNSTRUCTUREDADDRESS: String = 'UnstructuredAddress'
wszPROPDEVICESERIALNUMBER: String = 'DeviceSerialNumber'
wszPROPSUBJECTDOT: String = 'Subject.'
wszPROPREQUESTDOT: String = 'Request.'
wszPROPREQUESTREQUESTID: String = 'RequestID'
wszPROPREQUESTRAWREQUEST: String = 'RawRequest'
wszPROPREQUESTRAWARCHIVEDKEY: String = 'RawArchivedKey'
wszPROPREQUESTARCHIVEDKEY: String = 'ArchivedKey'
wszPROPREQUESTKEYRECOVERYHASHES: String = 'KeyRecoveryHashes'
wszPROPREQUESTRAWOLDCERTIFICATE: String = 'RawOldCertificate'
wszPROPREQUESTATTRIBUTES: String = 'RequestAttributes'
wszPROPREQUESTTYPE: String = 'RequestType'
wszPROPREQUESTFLAGS: String = 'RequestFlags'
wszPROPREQUESTSTATUSCODE: String = 'StatusCode'
wszPROPREQUESTDISPOSITION: String = 'Disposition'
wszPROPREQUESTDISPOSITIONMESSAGE: String = 'DispositionMessage'
wszPROPREQUESTSUBMITTEDWHEN: String = 'SubmittedWhen'
wszPROPREQUESTRESOLVEDWHEN: String = 'ResolvedWhen'
wszPROPREQUESTREVOKEDWHEN: String = 'RevokedWhen'
wszPROPREQUESTREVOKEDEFFECTIVEWHEN: String = 'RevokedEffectiveWhen'
wszPROPREQUESTREVOKEDREASON: String = 'RevokedReason'
wszPROPREQUESTERNAME: String = 'RequesterName'
wszPROPCALLERNAME: String = 'CallerName'
wszPROPSIGNERPOLICIES: String = 'SignerPolicies'
wszPROPSIGNERAPPLICATIONPOLICIES: String = 'SignerApplicationPolicies'
wszPROPOFFICER: String = 'Officer'
wszPROPPUBLISHEXPIREDCERTINCRL: String = 'PublishExpiredCertInCRL'
wszPROPREQUESTERNAMEFROMOLDCERTIFICATE: String = 'RequesterNameFromOldCertificate'
wszPROPATTESTATIONCHALLENGE: String = 'AttestationChallenge'
wszPROPENDORSEMENTKEYHASH: String = 'EndorsementKeyHash'
wszPROPENDORSEMENTCERTIFICATEHASH: String = 'EndorsementCertificateHash'
wszPROPRAWPRECERTIFICATE: String = 'RawPrecertificate'
wszPROPCHALLENGE: String = 'Challenge'
wszPROPEXPECTEDCHALLENGE: String = 'ExpectedChallenge'
wszPROPDISPOSITION: String = 'Disposition'
wszPROPDISPOSITIONDENY: String = 'Deny'
wszPROPDISPOSITIONPENDING: String = 'Pending'
wszPROPVALIDITYPERIODSTRING: String = 'ValidityPeriod'
wszPROPVALIDITYPERIODCOUNT: String = 'ValidityPeriodUnits'
wszPROPEXPIRATIONDATE: String = 'ExpirationDate'
wszPROPCERTTYPE: String = 'CertType'
wszPROPCERTTEMPLATE: String = 'CertificateTemplate'
wszPROPCERTUSAGE: String = 'CertificateUsage'
wszPROPREQUESTOSVERSION: String = 'RequestOSVersion'
wszPROPREQUESTCSPPROVIDER: String = 'RequestCSPProvider'
wszPROPEXITCERTFILE: String = 'CertFile'
wszPROPCLIENTBROWSERMACHINE: String = 'cbm'
wszPROPCERTCLIENTMACHINE: String = 'ccm'
wszPROPCLIENTDCDNS: String = 'cdc'
wszPROPREQUESTMACHINEDNS: String = 'rmd'
wszPROPSUBJECTALTNAME2: String = 'san'
wszPROPDNS: String = 'dns'
wszPROPDN: String = 'dn'
wszPROPURL: String = 'url'
wszPROPIPADDRESS: String = 'ipaddress'
wszPROPGUID: String = 'guid'
wszPROPOID: String = 'oid'
wszPROPUPN: String = 'upn'
szPROPASNTAG: String = '{asn}'
wszPROPCRITICALTAG: String = '{critical}'
wszPROPUTF8TAG: String = '{utf8}'
wszPROPOCTETTAG: String = '{octet}'
wszPROPHEXTAG: String = '{hex}'
wszPROPTEXTTAG: String = '{text}'
wszPROPDECIMALTAG: String = '{decimal}'
wszPROPFILETAG: String = '{file}'
wszAT_EKCERTINF: String = '@EKCert'
wszAT_TESTROOT: String = '@TestRoot'
wszPROPCATYPE: String = 'CAType'
wszPROPSANITIZEDCANAME: String = 'SanitizedCAName'
wszPROPSANITIZEDSHORTNAME: String = 'SanitizedShortName'
wszPROPMACHINEDNSNAME: String = 'MachineDNSName'
wszPROPMODULEREGLOC: String = 'ModuleRegistryLocation'
wszPROPUSEDS: String = 'fUseDS'
wszPROPDELTACRLSDISABLED: String = 'fDeltaCRLsDisabled'
wszPROPSERVERUPGRADED: String = 'fServerUpgraded'
wszPROPCONFIGDN: String = 'ConfigDN'
wszPROPDOMAINDN: String = 'DomainDN'
wszPROPLOGLEVEL: String = 'LogLevel'
wszPROPSESSIONCOUNT: String = 'SessionCount'
wszPROPTEMPLATECHANGESEQUENCENUMBER: String = 'TemplateChangeSequenceNumber'
wszPROPVOLATILEMODE: String = 'VolatileMode'
wszLOCALIZEDTIMEPERIODUNITS: String = 'LocalizedTimePeriodUnits'
wszPROPREQUESTERCAACCESS: String = 'RequesterCAAccess'
wszPROPUSERDN: String = 'UserDN'
wszPROPKEYARCHIVED: String = 'KeyArchived'
wszPROPCERTCOUNT: String = 'CertCount'
wszPROPRAWCACERTIFICATE: String = 'RawCACertificate'
wszPROPCERTSTATE: String = 'CertState'
wszPROPCERTSUFFIX: String = 'CertSuffix'
wszPROPRAWCRL: String = 'RawCRL'
wszPROPRAWDELTACRL: String = 'RawDeltaCRL'
wszPROPCRLINDEX: String = 'CRLIndex'
wszPROPCRLSTATE: String = 'CRLState'
wszPROPCRLSUFFIX: String = 'CRLSuffix'
wszPROPEVENTLOGTERSE: String = 'EventLogTerse'
wszPROPEVENTLOGERROR: String = 'EventLogError'
wszPROPEVENTLOGWARNING: String = 'EventLogWarning'
wszPROPEVENTLOGVERBOSE: String = 'EventLogVerbose'
wszPROPEVENTLOGEXHAUSTIVE: String = 'EventLogExhaustive'
wszPROPDCNAME: String = 'DCName'
wszPROPCROSSFOREST: String = 'CrossForest'
wszPROPREQUESTERSAMNAME: String = 'RequesterSAMName'
wszPROPREQUESTERUPN: String = 'RequesterUPN'
wszPROPREQUESTERDN: String = 'RequesterDN'
wszPROPSEAUDITID: String = 'SEAuditId'
wszPROPSEAUDITFILTER: String = 'SEAuditFilter'
wszPROPCERTIFICATEREQUESTID: String = 'RequestID'
wszPROPRAWCERTIFICATE: String = 'RawCertificate'
wszPROPCERTIFICATEHASH: String = 'CertificateHash'
wszPROPCERTIFICATETEMPLATE: String = 'CertificateTemplate'
wszPROPCERTIFICATEENROLLMENTFLAGS: String = 'EnrollmentFlags'
wszPROPCERTIFICATEGENERALFLAGS: String = 'GeneralFlags'
wszPROPCERTIFICATEPRIVATEKEYFLAGS: String = 'PrivatekeyFlags'
wszPROPCERTIFICATESERIALNUMBER: String = 'SerialNumber'
wszPROPCERTIFICATENOTBEFOREDATE: String = 'NotBefore'
wszPROPCERTIFICATENOTAFTERDATE: String = 'NotAfter'
wszPROPCERTIFICATESUBJECTKEYIDENTIFIER: String = 'SubjectKeyIdentifier'
wszPROPCERTIFICATERAWPUBLICKEY: String = 'RawPublicKey'
wszPROPCERTIFICATEPUBLICKEYLENGTH: String = 'PublicKeyLength'
wszPROPCERTIFICATEPUBLICKEYALGORITHM: String = 'PublicKeyAlgorithm'
wszPROPCERTIFICATERAWPUBLICKEYALGORITHMPARAMETERS: String = 'RawPublicKeyAlgorithmParameters'
wszPROPCERTIFICATEUPN: String = 'UPN'
wszPROPCERTIFICATETYPE: String = 'CertificateType'
wszPROPCERTIFICATERAWSMIMECAPABILITIES: String = 'RawSMIMECapabilities'
wszPROPNAMETYPE: String = 'NameType'
EXTENSION_CRITICAL_FLAG: UInt32 = 1
EXTENSION_DISABLE_FLAG: UInt32 = 2
EXTENSION_DELETE_FLAG: UInt32 = 4
EXTENSION_POLICY_MASK: UInt32 = 65535
EXTENSION_ORIGIN_REQUEST: UInt32 = 65536
EXTENSION_ORIGIN_POLICY: UInt32 = 131072
EXTENSION_ORIGIN_ADMIN: UInt32 = 196608
EXTENSION_ORIGIN_SERVER: UInt32 = 262144
EXTENSION_ORIGIN_RENEWALCERT: UInt32 = 327680
EXTENSION_ORIGIN_IMPORTEDCERT: UInt32 = 393216
EXTENSION_ORIGIN_PKCS7: UInt32 = 458752
EXTENSION_ORIGIN_CMC: UInt32 = 524288
EXTENSION_ORIGIN_CACERT: UInt32 = 589824
EXTENSION_ORIGIN_MASK: UInt32 = 983040
wszPROPEXTREQUESTID: String = 'ExtensionRequestId'
wszPROPEXTNAME: String = 'ExtensionName'
wszPROPEXTFLAGS: String = 'ExtensionFlags'
wszPROPEXTRAWVALUE: String = 'ExtensionRawValue'
wszPROPATTRIBREQUESTID: String = 'AttributeRequestId'
wszPROPATTRIBNAME: String = 'AttributeName'
wszPROPATTRIBVALUE: String = 'AttributeValue'
wszPROPCRLROWID: String = 'CRLRowId'
wszPROPCRLNUMBER: String = 'CRLNumber'
wszPROPCRLMINBASE: String = 'CRLMinBase'
wszPROPCRLNAMEID: String = 'CRLNameId'
wszPROPCRLCOUNT: String = 'CRLCount'
wszPROPCRLTHISUPDATE: String = 'CRLThisUpdate'
wszPROPCRLNEXTUPDATE: String = 'CRLNextUpdate'
wszPROPCRLTHISPUBLISH: String = 'CRLThisPublish'
wszPROPCRLNEXTPUBLISH: String = 'CRLNextPublish'
wszPROPCRLEFFECTIVE: String = 'CRLEffective'
wszPROPCRLPROPAGATIONCOMPLETE: String = 'CRLPropagationComplete'
wszPROPCRLLASTPUBLISHED: String = 'CRLLastPublished'
wszPROPCRLPUBLISHATTEMPTS: String = 'CRLPublishAttempts'
wszPROPCRLPUBLISHFLAGS: String = 'CRLPublishFlags'
wszPROPCRLPUBLISHSTATUSCODE: String = 'CRLPublishStatusCode'
wszPROPCRLPUBLISHERROR: String = 'CRLPublishError'
wszPROPCRLRAWCRL: String = 'CRLRawCRL'
CPF_BASE: UInt32 = 1
CPF_DELTA: UInt32 = 2
CPF_COMPLETE: UInt32 = 4
CPF_SHADOW: UInt32 = 8
CPF_CASTORE_ERROR: UInt32 = 16
CPF_BADURL_ERROR: UInt32 = 32
CPF_MANUAL: UInt32 = 64
CPF_SIGNATURE_ERROR: UInt32 = 128
CPF_LDAP_ERROR: UInt32 = 256
CPF_FILE_ERROR: UInt32 = 512
CPF_FTP_ERROR: UInt32 = 1024
CPF_HTTP_ERROR: UInt32 = 2048
CPF_POSTPONED_BASE_LDAP_ERROR: UInt32 = 4096
CPF_POSTPONED_BASE_FILE_ERROR: UInt32 = 8192
PROPTYPE_MASK: UInt32 = 255
PROPCALLER_SERVER: UInt32 = 256
PROPCALLER_POLICY: UInt32 = 512
PROPCALLER_EXIT: UInt32 = 768
PROPCALLER_ADMIN: UInt32 = 1024
PROPCALLER_REQUEST: UInt32 = 1280
PROPCALLER_MASK: UInt32 = 3840
PROPFLAGS_INDEXED: UInt32 = 65536
CR_FLG_FORCETELETEX: UInt32 = 1
CR_FLG_RENEWAL: UInt32 = 2
CR_FLG_FORCEUTF8: UInt32 = 4
CR_FLG_CAXCHGCERT: UInt32 = 8
CR_FLG_ENROLLONBEHALFOF: UInt32 = 16
CR_FLG_SUBJECTUNMODIFIED: UInt32 = 32
CR_FLG_VALIDENCRYPTEDKEYHASH: UInt32 = 64
CR_FLG_CACROSSCERT: UInt32 = 128
CR_FLG_ENFORCEUTF8: UInt32 = 256
CR_FLG_DEFINEDCACERT: UInt32 = 512
CR_FLG_CHALLENGEPENDING: UInt32 = 1024
CR_FLG_CHALLENGESATISFIED: UInt32 = 2048
CR_FLG_TRUSTONUSE: UInt32 = 4096
CR_FLG_TRUSTEKCERT: UInt32 = 8192
CR_FLG_TRUSTEKKEY: UInt32 = 16384
CR_FLG_PUBLISHERROR: UInt32 = 2147483648
DB_DISP_ACTIVE: UInt32 = 8
DB_DISP_PENDING: UInt32 = 9
DB_DISP_QUEUE_MAX: UInt32 = 9
DB_DISP_FOREIGN: UInt32 = 12
DB_DISP_CA_CERT: UInt32 = 15
DB_DISP_CA_CERT_CHAIN: UInt32 = 16
DB_DISP_KRA_CERT: UInt32 = 17
DB_DISP_LOG_MIN: UInt32 = 20
DB_DISP_ISSUED: UInt32 = 20
DB_DISP_REVOKED: UInt32 = 21
DB_DISP_LOG_FAILED_MIN: UInt32 = 30
DB_DISP_ERROR: UInt32 = 30
DB_DISP_DENIED: UInt32 = 31
VR_PENDING: UInt32 = 0
VR_INSTANT_OK: UInt32 = 1
VR_INSTANT_BAD: UInt32 = 2
wszCERT_TYPE: String = 'RequestType'
wszCERT_TYPE_CLIENT: String = 'Client'
wszCERT_TYPE_SERVER: String = 'Server'
wszCERT_TYPE_CODESIGN: String = 'CodeSign'
wszCERT_TYPE_CUSTOMER: String = 'SetCustomer'
wszCERT_TYPE_MERCHANT: String = 'SetMerchant'
wszCERT_TYPE_PAYMENT: String = 'SetPayment'
wszCERT_VERSION: String = 'Version'
wszCERT_VERSION_1: String = '1'
wszCERT_VERSION_2: String = '2'
wszCERT_VERSION_3: String = '3'
CV_OUT_HEXRAW: UInt32 = 12
CV_OUT_ENCODEMASK: UInt32 = 255
CV_OUT_NOCRLF: UInt32 = 1073741824
CV_OUT_NOCR: UInt32 = 2147483648
CVR_SEEK_NONE: UInt32 = 0
CVR_SEEK_MASK: UInt32 = 255
CVR_SEEK_NODELTA: UInt32 = 4096
CVR_SORT_NONE: UInt32 = 0
CVR_SORT_ASCEND: UInt32 = 1
CVR_SORT_DESCEND: UInt32 = 2
CV_COLUMN_EXTENSION_DEFAULT: Int32 = -4
CV_COLUMN_ATTRIBUTE_DEFAULT: Int32 = -5
CV_COLUMN_CRL_DEFAULT: Int32 = -6
CV_COLUMN_LOG_REVOKED_DEFAULT: Int32 = -7
CVRC_TABLE_MASK: UInt32 = 61440
CVRC_TABLE_SHIFT: UInt32 = 12
CRYPT_ENUM_ALL_PROVIDERS: UInt32 = 1
XEPR_ENUM_FIRST: Int32 = -1
XEPR_DATE: UInt32 = 5
XEPR_TEMPLATENAME: UInt32 = 6
XEPR_VERSION: UInt32 = 7
XEPR_V1TEMPLATENAME: UInt32 = 9
XEPR_V2TEMPLATEOID: UInt32 = 16
XEKL_KEYSIZE_DEFAULT: UInt32 = 4
XECP_STRING_PROPERTY: UInt32 = 1
XECI_DISABLE: UInt32 = 0
XECI_XENROLL: UInt32 = 1
XECI_AUTOENROLL: UInt32 = 2
XECI_REQWIZARD: UInt32 = 3
XECI_CERTREQ: UInt32 = 4
wszCMM_PROP_NAME: String = 'Name'
wszCMM_PROP_DESCRIPTION: String = 'Description'
wszCMM_PROP_COPYRIGHT: String = 'Copyright'
wszCMM_PROP_FILEVER: String = 'File Version'
wszCMM_PROP_PRODUCTVER: String = 'Product Version'
wszCMM_PROP_DISPLAY_HWND: String = 'HWND'
wszCMM_PROP_ISMULTITHREADED: String = 'IsMultiThreaded'
@winfunctype('certadm.dll')
def CertSrvIsServerOnlineW(pwszServerName: win32more.Foundation.PWSTR, pfServerOnline: POINTER(win32more.Foundation.BOOL)) -> win32more.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvBackupGetDynamicFileListW(hbc: c_void_p, ppwszzFileList: POINTER(win32more.Foundation.PWSTR), pcbSize: POINTER(UInt32)) -> win32more.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvBackupPrepareW(pwszServerName: win32more.Foundation.PWSTR, grbitJet: UInt32, dwBackupFlags: win32more.Security.Cryptography.Certificates.CSBACKUP_TYPE, phbc: POINTER(c_void_p)) -> win32more.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvBackupGetDatabaseNamesW(hbc: c_void_p, ppwszzAttachmentInformation: POINTER(win32more.Foundation.PWSTR), pcbSize: POINTER(UInt32)) -> win32more.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvBackupOpenFileW(hbc: c_void_p, pwszAttachmentName: win32more.Foundation.PWSTR, cbReadHintSize: UInt32, pliFileSize: POINTER(win32more.Foundation.LARGE_INTEGER_head)) -> win32more.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvBackupRead(hbc: c_void_p, pvBuffer: c_void_p, cbBuffer: UInt32, pcbRead: POINTER(UInt32)) -> win32more.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvBackupClose(hbc: c_void_p) -> win32more.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvBackupGetBackupLogsW(hbc: c_void_p, ppwszzBackupLogFiles: POINTER(win32more.Foundation.PWSTR), pcbSize: POINTER(UInt32)) -> win32more.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvBackupTruncateLogs(hbc: c_void_p) -> win32more.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvBackupEnd(hbc: c_void_p) -> win32more.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvBackupFree(pv: c_void_p) -> Void: ...
@winfunctype('certadm.dll')
def CertSrvRestoreGetDatabaseLocationsW(hbc: c_void_p, ppwszzDatabaseLocationList: POINTER(win32more.Foundation.PWSTR), pcbSize: POINTER(UInt32)) -> win32more.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvRestorePrepareW(pwszServerName: win32more.Foundation.PWSTR, dwRestoreFlags: UInt32, phbc: POINTER(c_void_p)) -> win32more.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvRestoreRegisterW(hbc: c_void_p, pwszCheckPointFilePath: win32more.Foundation.PWSTR, pwszLogPath: win32more.Foundation.PWSTR, rgrstmap: POINTER(win32more.Security.Cryptography.Certificates.CSEDB_RSTMAPW_head), crstmap: Int32, pwszBackupLogPath: win32more.Foundation.PWSTR, genLow: UInt32, genHigh: UInt32) -> win32more.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvRestoreRegisterThroughFile(hbc: c_void_p, pwszCheckPointFilePath: win32more.Foundation.PWSTR, pwszLogPath: win32more.Foundation.PWSTR, rgrstmap: POINTER(win32more.Security.Cryptography.Certificates.CSEDB_RSTMAPW_head), crstmap: Int32, pwszBackupLogPath: win32more.Foundation.PWSTR, genLow: UInt32, genHigh: UInt32) -> win32more.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvRestoreRegisterComplete(hbc: c_void_p, hrRestoreState: win32more.Foundation.HRESULT) -> win32more.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvRestoreEnd(hbc: c_void_p) -> win32more.Foundation.HRESULT: ...
@winfunctype('certadm.dll')
def CertSrvServerControlW(pwszServerName: win32more.Foundation.PWSTR, dwControlFlags: UInt32, pcbOut: POINTER(UInt32), ppbOut: POINTER(c_char_p_no)) -> win32more.Foundation.HRESULT: ...
@winfunctype('certpoleng.dll')
def PstGetTrustAnchors(pTargetName: POINTER(win32more.Foundation.UNICODE_STRING_head), cCriteria: UInt32, rgpCriteria: POINTER(win32more.Security.Cryptography.CERT_SELECT_CRITERIA_head), ppTrustedIssuers: POINTER(POINTER(win32more.Security.Authentication.Identity.SecPkgContext_IssuerListInfoEx_head))) -> win32more.Foundation.NTSTATUS: ...
@winfunctype('certpoleng.dll')
def PstGetTrustAnchorsEx(pTargetName: POINTER(win32more.Foundation.UNICODE_STRING_head), cCriteria: UInt32, rgpCriteria: POINTER(win32more.Security.Cryptography.CERT_SELECT_CRITERIA_head), pCertContext: POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head), ppTrustedIssuers: POINTER(POINTER(win32more.Security.Authentication.Identity.SecPkgContext_IssuerListInfoEx_head))) -> win32more.Foundation.NTSTATUS: ...
@winfunctype('certpoleng.dll')
def PstGetCertificateChain(pCert: POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head), pTrustedIssuers: POINTER(win32more.Security.Authentication.Identity.SecPkgContext_IssuerListInfoEx_head), ppCertChainContext: POINTER(POINTER(win32more.Security.Cryptography.CERT_CHAIN_CONTEXT_head))) -> win32more.Foundation.NTSTATUS: ...
@winfunctype('certpoleng.dll')
def PstGetCertificates(pTargetName: POINTER(win32more.Foundation.UNICODE_STRING_head), cCriteria: UInt32, rgpCriteria: POINTER(win32more.Security.Cryptography.CERT_SELECT_CRITERIA_head), bIsClient: win32more.Foundation.BOOL, pdwCertChainContextCount: POINTER(UInt32), ppCertChainContexts: POINTER(POINTER(POINTER(win32more.Security.Cryptography.CERT_CHAIN_CONTEXT_head)))) -> win32more.Foundation.NTSTATUS: ...
@winfunctype('certpoleng.dll')
def PstAcquirePrivateKey(pCert: POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)) -> win32more.Foundation.NTSTATUS: ...
@winfunctype('certpoleng.dll')
def PstValidate(pTargetName: POINTER(win32more.Foundation.UNICODE_STRING_head), bIsClient: win32more.Foundation.BOOL, pRequestedIssuancePolicy: POINTER(win32more.Security.Cryptography.CERT_USAGE_MATCH_head), phAdditionalCertStore: POINTER(win32more.Security.Cryptography.HCERTSTORE), pCert: POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head), pProvGUID: POINTER(Guid)) -> win32more.Foundation.NTSTATUS: ...
@winfunctype('certpoleng.dll')
def PstMapCertificate(pCert: POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head), pTokenInformationType: POINTER(win32more.Security.Authentication.Identity.LSA_TOKEN_INFORMATION_TYPE), ppTokenInformation: POINTER(c_void_p)) -> win32more.Foundation.NTSTATUS: ...
@winfunctype('certpoleng.dll')
def PstGetUserNameForCertificate(pCertContext: POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head), UserName: POINTER(win32more.Foundation.UNICODE_STRING_head)) -> win32more.Foundation.NTSTATUS: ...
class CAINFO(Structure):
    cbSize: UInt32
    CAType: win32more.Security.Cryptography.Certificates.ENUM_CATYPES
    cCASignatureCerts: UInt32
    cCAExchangeCerts: UInt32
    cExitModules: UInt32
    lPropIdMax: Int32
    lRoleSeparationEnabled: Int32
    cKRACertUsedCount: UInt32
    cKRACertCount: UInt32
    fAdvancedServer: UInt32
CAlternativeName = Guid('884e2013-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CAlternativeNames = Guid('884e2014-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CBinaryConverter = Guid('884e2002-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CCertAdmin = Guid('37eabaf0-7fb6-11d0-88-17-00-a0-c9-03-b8-3c')
CCertConfig = Guid('372fce38-4324-11d0-88-10-00-a0-c9-03-b8-3c')
CCertEncodeAltName = Guid('1cfc4cda-1271-11d1-9b-d4-00-c0-4f-b6-83-fa')
CCertEncodeBitString = Guid('6d6b3cd8-1278-11d1-9b-d4-00-c0-4f-b6-83-fa')
CCertEncodeCRLDistInfo = Guid('01fa60a0-bbff-11d0-88-25-00-a0-c9-03-b8-3c')
CCertEncodeDateArray = Guid('301f77b0-a470-11d0-88-21-00-a0-c9-03-b8-3c')
CCertEncodeLongArray = Guid('4e0680a0-a0a2-11d0-88-21-00-a0-c9-03-b8-3c')
CCertEncodeStringArray = Guid('19a76fe0-7494-11d0-88-16-00-a0-c9-03-b8-3c')
CCertGetConfig = Guid('c6cc49b0-ce17-11d0-88-33-00-a0-c9-03-b8-3c')
CCertificateAttestationChallenge = Guid('1362ada1-eb60-456a-b6-e1-11-80-50-db-74-1b')
CCertificatePolicies = Guid('884e201f-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CCertificatePolicy = Guid('884e201e-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CCertProperties = Guid('884e202f-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CCertProperty = Guid('884e202e-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CCertPropertyArchived = Guid('884e2037-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CCertPropertyArchivedKeyHash = Guid('884e203b-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CCertPropertyAutoEnroll = Guid('884e2032-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CCertPropertyBackedUp = Guid('884e2038-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CCertPropertyDescription = Guid('884e2031-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CCertPropertyEnrollment = Guid('884e2039-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CCertPropertyEnrollmentPolicyServer = Guid('884e204c-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CCertPropertyFriendlyName = Guid('884e2030-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CCertPropertyKeyProvInfo = Guid('884e2036-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CCertPropertyRenewal = Guid('884e203a-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CCertPropertyRequestOriginator = Guid('884e2033-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CCertPropertySHA1Hash = Guid('884e2034-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CCertRequest = Guid('98aff3f0-5524-11d0-88-12-00-a0-c9-03-b8-3c')
CCertServerExit = Guid('4c4a5e40-732c-11d0-88-16-00-a0-c9-03-b8-3c')
CCertServerPolicy = Guid('aa000926-ffbe-11cf-88-00-00-a0-c9-03-b8-3c')
CCertView = Guid('a12d0f7a-1e84-11d1-9b-d6-00-c0-4f-b6-83-fa')
CCryptAttribute = Guid('884e202c-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CCryptAttributes = Guid('884e202d-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CCspInformation = Guid('884e2007-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CCspInformations = Guid('884e2008-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CCspStatus = Guid('884e2009-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CEnroll = Guid('43f8f289-7a20-11d0-8f-06-00-c0-4f-c2-95-e1')
CEnroll2 = Guid('127698e4-e730-4e5c-a2-b1-21-49-0a-70-c8-a1')
CERT_ALT_NAME = UInt32
CERT_ALT_NAME_RFC822_NAME: CERT_ALT_NAME = 2
CERT_ALT_NAME_DNS_NAME: CERT_ALT_NAME = 3
CERT_ALT_NAME_URL: CERT_ALT_NAME = 7
CERT_ALT_NAME_REGISTERED_ID: CERT_ALT_NAME = 9
CERT_ALT_NAME_DIRECTORY_NAME: CERT_ALT_NAME = 5
CERT_ALT_NAME_IP_ADDRESS: CERT_ALT_NAME = 8
CERT_ALT_NAME_OTHER_NAME: CERT_ALT_NAME = 1
CERT_CREATE_REQUEST_FLAGS = UInt32
XECR_CMC: CERT_CREATE_REQUEST_FLAGS = 3
XECR_PKCS10_V1_5: CERT_CREATE_REQUEST_FLAGS = 4
XECR_PKCS10_V2_0: CERT_CREATE_REQUEST_FLAGS = 1
XECR_PKCS7: CERT_CREATE_REQUEST_FLAGS = 2
CERT_DELETE_ROW_FLAGS = UInt32
CDR_EXPIRED: CERT_DELETE_ROW_FLAGS = 1
CDR_REQUEST_LAST_CHANGED: CERT_DELETE_ROW_FLAGS = 2
CERT_EXIT_EVENT_MASK = UInt32
EXITEVENT_CERTDENIED: CERT_EXIT_EVENT_MASK = 4
EXITEVENT_CERTISSUED: CERT_EXIT_EVENT_MASK = 1
EXITEVENT_CERTPENDING: CERT_EXIT_EVENT_MASK = 2
EXITEVENT_CERTRETRIEVEPENDING: CERT_EXIT_EVENT_MASK = 16
EXITEVENT_CERTREVOKED: CERT_EXIT_EVENT_MASK = 8
EXITEVENT_CRLISSUED: CERT_EXIT_EVENT_MASK = 32
EXITEVENT_SHUTDOWN: CERT_EXIT_EVENT_MASK = 64
CERT_GET_CONFIG_FLAGS = UInt32
CC_DEFAULTCONFIG: CERT_GET_CONFIG_FLAGS = 0
CC_FIRSTCONFIG: CERT_GET_CONFIG_FLAGS = 2
CC_LOCALACTIVECONFIG: CERT_GET_CONFIG_FLAGS = 4
CC_LOCALCONFIG: CERT_GET_CONFIG_FLAGS = 3
CC_UIPICKCONFIG: CERT_GET_CONFIG_FLAGS = 1
CC_UIPICKCONFIGSKIPLOCALCA: CERT_GET_CONFIG_FLAGS = 5
CERT_IMPORT_FLAGS = UInt32
CR_IN_BASE64HEADER: CERT_IMPORT_FLAGS = 0
CR_IN_BASE64: CERT_IMPORT_FLAGS = 1
CR_IN_BINARY: CERT_IMPORT_FLAGS = 2
CERT_PROPERTY_TYPE = UInt32
PROPTYPE_BINARY: CERT_PROPERTY_TYPE = 3
PROPTYPE_DATE: CERT_PROPERTY_TYPE = 2
PROPTYPE_LONG: CERT_PROPERTY_TYPE = 1
PROPTYPE_STRING: CERT_PROPERTY_TYPE = 4
CERT_REQUEST_OUT_TYPE = UInt32
CR_OUT_BASE64HEADER: CERT_REQUEST_OUT_TYPE = 0
CR_OUT_BASE64: CERT_REQUEST_OUT_TYPE = 1
CR_OUT_BINARY: CERT_REQUEST_OUT_TYPE = 2
CERT_VIEW_COLUMN_INDEX = Int32
CV_COLUMN_LOG_DEFAULT: CERT_VIEW_COLUMN_INDEX = -2
CV_COLUMN_LOG_FAILED_DEFAULT: CERT_VIEW_COLUMN_INDEX = -3
CV_COLUMN_QUEUE_DEFAULT: CERT_VIEW_COLUMN_INDEX = -1
CERT_VIEW_SEEK_OPERATOR_FLAGS = UInt32
CVR_SEEK_EQ: CERT_VIEW_SEEK_OPERATOR_FLAGS = 1
CVR_SEEK_LE: CERT_VIEW_SEEK_OPERATOR_FLAGS = 4
CVR_SEEK_LT: CERT_VIEW_SEEK_OPERATOR_FLAGS = 2
CVR_SEEK_GE: CERT_VIEW_SEEK_OPERATOR_FLAGS = 8
CVR_SEEK_GT: CERT_VIEW_SEEK_OPERATOR_FLAGS = 16
CERTADMIN_GET_ROLES_FLAGS = UInt32
CA_ACCESS_ADMIN: CERTADMIN_GET_ROLES_FLAGS = 1
CA_ACCESS_AUDITOR: CERTADMIN_GET_ROLES_FLAGS = 4
CA_ACCESS_ENROLL: CERTADMIN_GET_ROLES_FLAGS = 512
CA_ACCESS_OFFICER: CERTADMIN_GET_ROLES_FLAGS = 2
CA_ACCESS_OPERATOR: CERTADMIN_GET_ROLES_FLAGS = 8
CA_ACCESS_READ: CERTADMIN_GET_ROLES_FLAGS = 256
CERTENROLL_OBJECTID = Int32
XCN_OID_NONE: CERTENROLL_OBJECTID = 0
XCN_OID_RSA: CERTENROLL_OBJECTID = 1
XCN_OID_PKCS: CERTENROLL_OBJECTID = 2
XCN_OID_RSA_HASH: CERTENROLL_OBJECTID = 3
XCN_OID_RSA_ENCRYPT: CERTENROLL_OBJECTID = 4
XCN_OID_PKCS_1: CERTENROLL_OBJECTID = 5
XCN_OID_PKCS_2: CERTENROLL_OBJECTID = 6
XCN_OID_PKCS_3: CERTENROLL_OBJECTID = 7
XCN_OID_PKCS_4: CERTENROLL_OBJECTID = 8
XCN_OID_PKCS_5: CERTENROLL_OBJECTID = 9
XCN_OID_PKCS_6: CERTENROLL_OBJECTID = 10
XCN_OID_PKCS_7: CERTENROLL_OBJECTID = 11
XCN_OID_PKCS_8: CERTENROLL_OBJECTID = 12
XCN_OID_PKCS_9: CERTENROLL_OBJECTID = 13
XCN_OID_PKCS_10: CERTENROLL_OBJECTID = 14
XCN_OID_PKCS_12: CERTENROLL_OBJECTID = 15
XCN_OID_RSA_RSA: CERTENROLL_OBJECTID = 16
XCN_OID_RSA_MD2RSA: CERTENROLL_OBJECTID = 17
XCN_OID_RSA_MD4RSA: CERTENROLL_OBJECTID = 18
XCN_OID_RSA_MD5RSA: CERTENROLL_OBJECTID = 19
XCN_OID_RSA_SHA1RSA: CERTENROLL_OBJECTID = 20
XCN_OID_RSA_SETOAEP_RSA: CERTENROLL_OBJECTID = 21
XCN_OID_RSA_DH: CERTENROLL_OBJECTID = 22
XCN_OID_RSA_data: CERTENROLL_OBJECTID = 23
XCN_OID_RSA_signedData: CERTENROLL_OBJECTID = 24
XCN_OID_RSA_envelopedData: CERTENROLL_OBJECTID = 25
XCN_OID_RSA_signEnvData: CERTENROLL_OBJECTID = 26
XCN_OID_RSA_digestedData: CERTENROLL_OBJECTID = 27
XCN_OID_RSA_hashedData: CERTENROLL_OBJECTID = 28
XCN_OID_RSA_encryptedData: CERTENROLL_OBJECTID = 29
XCN_OID_RSA_emailAddr: CERTENROLL_OBJECTID = 30
XCN_OID_RSA_unstructName: CERTENROLL_OBJECTID = 31
XCN_OID_RSA_contentType: CERTENROLL_OBJECTID = 32
XCN_OID_RSA_messageDigest: CERTENROLL_OBJECTID = 33
XCN_OID_RSA_signingTime: CERTENROLL_OBJECTID = 34
XCN_OID_RSA_counterSign: CERTENROLL_OBJECTID = 35
XCN_OID_RSA_challengePwd: CERTENROLL_OBJECTID = 36
XCN_OID_RSA_unstructAddr: CERTENROLL_OBJECTID = 37
XCN_OID_RSA_extCertAttrs: CERTENROLL_OBJECTID = 38
XCN_OID_RSA_certExtensions: CERTENROLL_OBJECTID = 39
XCN_OID_RSA_SMIMECapabilities: CERTENROLL_OBJECTID = 40
XCN_OID_RSA_preferSignedData: CERTENROLL_OBJECTID = 41
XCN_OID_RSA_SMIMEalg: CERTENROLL_OBJECTID = 42
XCN_OID_RSA_SMIMEalgESDH: CERTENROLL_OBJECTID = 43
XCN_OID_RSA_SMIMEalgCMS3DESwrap: CERTENROLL_OBJECTID = 44
XCN_OID_RSA_SMIMEalgCMSRC2wrap: CERTENROLL_OBJECTID = 45
XCN_OID_RSA_MD2: CERTENROLL_OBJECTID = 46
XCN_OID_RSA_MD4: CERTENROLL_OBJECTID = 47
XCN_OID_RSA_MD5: CERTENROLL_OBJECTID = 48
XCN_OID_RSA_RC2CBC: CERTENROLL_OBJECTID = 49
XCN_OID_RSA_RC4: CERTENROLL_OBJECTID = 50
XCN_OID_RSA_DES_EDE3_CBC: CERTENROLL_OBJECTID = 51
XCN_OID_RSA_RC5_CBCPad: CERTENROLL_OBJECTID = 52
XCN_OID_ANSI_X942: CERTENROLL_OBJECTID = 53
XCN_OID_ANSI_X942_DH: CERTENROLL_OBJECTID = 54
XCN_OID_X957: CERTENROLL_OBJECTID = 55
XCN_OID_X957_DSA: CERTENROLL_OBJECTID = 56
XCN_OID_X957_SHA1DSA: CERTENROLL_OBJECTID = 57
XCN_OID_DS: CERTENROLL_OBJECTID = 58
XCN_OID_DSALG: CERTENROLL_OBJECTID = 59
XCN_OID_DSALG_CRPT: CERTENROLL_OBJECTID = 60
XCN_OID_DSALG_HASH: CERTENROLL_OBJECTID = 61
XCN_OID_DSALG_SIGN: CERTENROLL_OBJECTID = 62
XCN_OID_DSALG_RSA: CERTENROLL_OBJECTID = 63
XCN_OID_OIW: CERTENROLL_OBJECTID = 64
XCN_OID_OIWSEC: CERTENROLL_OBJECTID = 65
XCN_OID_OIWSEC_md4RSA: CERTENROLL_OBJECTID = 66
XCN_OID_OIWSEC_md5RSA: CERTENROLL_OBJECTID = 67
XCN_OID_OIWSEC_md4RSA2: CERTENROLL_OBJECTID = 68
XCN_OID_OIWSEC_desECB: CERTENROLL_OBJECTID = 69
XCN_OID_OIWSEC_desCBC: CERTENROLL_OBJECTID = 70
XCN_OID_OIWSEC_desOFB: CERTENROLL_OBJECTID = 71
XCN_OID_OIWSEC_desCFB: CERTENROLL_OBJECTID = 72
XCN_OID_OIWSEC_desMAC: CERTENROLL_OBJECTID = 73
XCN_OID_OIWSEC_rsaSign: CERTENROLL_OBJECTID = 74
XCN_OID_OIWSEC_dsa: CERTENROLL_OBJECTID = 75
XCN_OID_OIWSEC_shaDSA: CERTENROLL_OBJECTID = 76
XCN_OID_OIWSEC_mdc2RSA: CERTENROLL_OBJECTID = 77
XCN_OID_OIWSEC_shaRSA: CERTENROLL_OBJECTID = 78
XCN_OID_OIWSEC_dhCommMod: CERTENROLL_OBJECTID = 79
XCN_OID_OIWSEC_desEDE: CERTENROLL_OBJECTID = 80
XCN_OID_OIWSEC_sha: CERTENROLL_OBJECTID = 81
XCN_OID_OIWSEC_mdc2: CERTENROLL_OBJECTID = 82
XCN_OID_OIWSEC_dsaComm: CERTENROLL_OBJECTID = 83
XCN_OID_OIWSEC_dsaCommSHA: CERTENROLL_OBJECTID = 84
XCN_OID_OIWSEC_rsaXchg: CERTENROLL_OBJECTID = 85
XCN_OID_OIWSEC_keyHashSeal: CERTENROLL_OBJECTID = 86
XCN_OID_OIWSEC_md2RSASign: CERTENROLL_OBJECTID = 87
XCN_OID_OIWSEC_md5RSASign: CERTENROLL_OBJECTID = 88
XCN_OID_OIWSEC_sha1: CERTENROLL_OBJECTID = 89
XCN_OID_OIWSEC_dsaSHA1: CERTENROLL_OBJECTID = 90
XCN_OID_OIWSEC_dsaCommSHA1: CERTENROLL_OBJECTID = 91
XCN_OID_OIWSEC_sha1RSASign: CERTENROLL_OBJECTID = 92
XCN_OID_OIWDIR: CERTENROLL_OBJECTID = 93
XCN_OID_OIWDIR_CRPT: CERTENROLL_OBJECTID = 94
XCN_OID_OIWDIR_HASH: CERTENROLL_OBJECTID = 95
XCN_OID_OIWDIR_SIGN: CERTENROLL_OBJECTID = 96
XCN_OID_OIWDIR_md2: CERTENROLL_OBJECTID = 97
XCN_OID_OIWDIR_md2RSA: CERTENROLL_OBJECTID = 98
XCN_OID_INFOSEC: CERTENROLL_OBJECTID = 99
XCN_OID_INFOSEC_sdnsSignature: CERTENROLL_OBJECTID = 100
XCN_OID_INFOSEC_mosaicSignature: CERTENROLL_OBJECTID = 101
XCN_OID_INFOSEC_sdnsConfidentiality: CERTENROLL_OBJECTID = 102
XCN_OID_INFOSEC_mosaicConfidentiality: CERTENROLL_OBJECTID = 103
XCN_OID_INFOSEC_sdnsIntegrity: CERTENROLL_OBJECTID = 104
XCN_OID_INFOSEC_mosaicIntegrity: CERTENROLL_OBJECTID = 105
XCN_OID_INFOSEC_sdnsTokenProtection: CERTENROLL_OBJECTID = 106
XCN_OID_INFOSEC_mosaicTokenProtection: CERTENROLL_OBJECTID = 107
XCN_OID_INFOSEC_sdnsKeyManagement: CERTENROLL_OBJECTID = 108
XCN_OID_INFOSEC_mosaicKeyManagement: CERTENROLL_OBJECTID = 109
XCN_OID_INFOSEC_sdnsKMandSig: CERTENROLL_OBJECTID = 110
XCN_OID_INFOSEC_mosaicKMandSig: CERTENROLL_OBJECTID = 111
XCN_OID_INFOSEC_SuiteASignature: CERTENROLL_OBJECTID = 112
XCN_OID_INFOSEC_SuiteAConfidentiality: CERTENROLL_OBJECTID = 113
XCN_OID_INFOSEC_SuiteAIntegrity: CERTENROLL_OBJECTID = 114
XCN_OID_INFOSEC_SuiteATokenProtection: CERTENROLL_OBJECTID = 115
XCN_OID_INFOSEC_SuiteAKeyManagement: CERTENROLL_OBJECTID = 116
XCN_OID_INFOSEC_SuiteAKMandSig: CERTENROLL_OBJECTID = 117
XCN_OID_INFOSEC_mosaicUpdatedSig: CERTENROLL_OBJECTID = 118
XCN_OID_INFOSEC_mosaicKMandUpdSig: CERTENROLL_OBJECTID = 119
XCN_OID_INFOSEC_mosaicUpdatedInteg: CERTENROLL_OBJECTID = 120
XCN_OID_COMMON_NAME: CERTENROLL_OBJECTID = 121
XCN_OID_SUR_NAME: CERTENROLL_OBJECTID = 122
XCN_OID_DEVICE_SERIAL_NUMBER: CERTENROLL_OBJECTID = 123
XCN_OID_COUNTRY_NAME: CERTENROLL_OBJECTID = 124
XCN_OID_LOCALITY_NAME: CERTENROLL_OBJECTID = 125
XCN_OID_STATE_OR_PROVINCE_NAME: CERTENROLL_OBJECTID = 126
XCN_OID_STREET_ADDRESS: CERTENROLL_OBJECTID = 127
XCN_OID_ORGANIZATION_NAME: CERTENROLL_OBJECTID = 128
XCN_OID_ORGANIZATIONAL_UNIT_NAME: CERTENROLL_OBJECTID = 129
XCN_OID_TITLE: CERTENROLL_OBJECTID = 130
XCN_OID_DESCRIPTION: CERTENROLL_OBJECTID = 131
XCN_OID_SEARCH_GUIDE: CERTENROLL_OBJECTID = 132
XCN_OID_BUSINESS_CATEGORY: CERTENROLL_OBJECTID = 133
XCN_OID_POSTAL_ADDRESS: CERTENROLL_OBJECTID = 134
XCN_OID_POSTAL_CODE: CERTENROLL_OBJECTID = 135
XCN_OID_POST_OFFICE_BOX: CERTENROLL_OBJECTID = 136
XCN_OID_PHYSICAL_DELIVERY_OFFICE_NAME: CERTENROLL_OBJECTID = 137
XCN_OID_TELEPHONE_NUMBER: CERTENROLL_OBJECTID = 138
XCN_OID_TELEX_NUMBER: CERTENROLL_OBJECTID = 139
XCN_OID_TELETEXT_TERMINAL_IDENTIFIER: CERTENROLL_OBJECTID = 140
XCN_OID_FACSIMILE_TELEPHONE_NUMBER: CERTENROLL_OBJECTID = 141
XCN_OID_X21_ADDRESS: CERTENROLL_OBJECTID = 142
XCN_OID_INTERNATIONAL_ISDN_NUMBER: CERTENROLL_OBJECTID = 143
XCN_OID_REGISTERED_ADDRESS: CERTENROLL_OBJECTID = 144
XCN_OID_DESTINATION_INDICATOR: CERTENROLL_OBJECTID = 145
XCN_OID_PREFERRED_DELIVERY_METHOD: CERTENROLL_OBJECTID = 146
XCN_OID_PRESENTATION_ADDRESS: CERTENROLL_OBJECTID = 147
XCN_OID_SUPPORTED_APPLICATION_CONTEXT: CERTENROLL_OBJECTID = 148
XCN_OID_MEMBER: CERTENROLL_OBJECTID = 149
XCN_OID_OWNER: CERTENROLL_OBJECTID = 150
XCN_OID_ROLE_OCCUPANT: CERTENROLL_OBJECTID = 151
XCN_OID_SEE_ALSO: CERTENROLL_OBJECTID = 152
XCN_OID_USER_PASSWORD: CERTENROLL_OBJECTID = 153
XCN_OID_USER_CERTIFICATE: CERTENROLL_OBJECTID = 154
XCN_OID_CA_CERTIFICATE: CERTENROLL_OBJECTID = 155
XCN_OID_AUTHORITY_REVOCATION_LIST: CERTENROLL_OBJECTID = 156
XCN_OID_CERTIFICATE_REVOCATION_LIST: CERTENROLL_OBJECTID = 157
XCN_OID_CROSS_CERTIFICATE_PAIR: CERTENROLL_OBJECTID = 158
XCN_OID_GIVEN_NAME: CERTENROLL_OBJECTID = 159
XCN_OID_INITIALS: CERTENROLL_OBJECTID = 160
XCN_OID_DN_QUALIFIER: CERTENROLL_OBJECTID = 161
XCN_OID_DOMAIN_COMPONENT: CERTENROLL_OBJECTID = 162
XCN_OID_PKCS_12_FRIENDLY_NAME_ATTR: CERTENROLL_OBJECTID = 163
XCN_OID_PKCS_12_LOCAL_KEY_ID: CERTENROLL_OBJECTID = 164
XCN_OID_PKCS_12_KEY_PROVIDER_NAME_ATTR: CERTENROLL_OBJECTID = 165
XCN_OID_LOCAL_MACHINE_KEYSET: CERTENROLL_OBJECTID = 166
XCN_OID_PKCS_12_EXTENDED_ATTRIBUTES: CERTENROLL_OBJECTID = 167
XCN_OID_KEYID_RDN: CERTENROLL_OBJECTID = 168
XCN_OID_AUTHORITY_KEY_IDENTIFIER: CERTENROLL_OBJECTID = 169
XCN_OID_KEY_ATTRIBUTES: CERTENROLL_OBJECTID = 170
XCN_OID_CERT_POLICIES_95: CERTENROLL_OBJECTID = 171
XCN_OID_KEY_USAGE_RESTRICTION: CERTENROLL_OBJECTID = 172
XCN_OID_SUBJECT_ALT_NAME: CERTENROLL_OBJECTID = 173
XCN_OID_ISSUER_ALT_NAME: CERTENROLL_OBJECTID = 174
XCN_OID_BASIC_CONSTRAINTS: CERTENROLL_OBJECTID = 175
XCN_OID_KEY_USAGE: CERTENROLL_OBJECTID = 176
XCN_OID_PRIVATEKEY_USAGE_PERIOD: CERTENROLL_OBJECTID = 177
XCN_OID_BASIC_CONSTRAINTS2: CERTENROLL_OBJECTID = 178
XCN_OID_CERT_POLICIES: CERTENROLL_OBJECTID = 179
XCN_OID_ANY_CERT_POLICY: CERTENROLL_OBJECTID = 180
XCN_OID_AUTHORITY_KEY_IDENTIFIER2: CERTENROLL_OBJECTID = 181
XCN_OID_SUBJECT_KEY_IDENTIFIER: CERTENROLL_OBJECTID = 182
XCN_OID_SUBJECT_ALT_NAME2: CERTENROLL_OBJECTID = 183
XCN_OID_ISSUER_ALT_NAME2: CERTENROLL_OBJECTID = 184
XCN_OID_CRL_REASON_CODE: CERTENROLL_OBJECTID = 185
XCN_OID_REASON_CODE_HOLD: CERTENROLL_OBJECTID = 186
XCN_OID_CRL_DIST_POINTS: CERTENROLL_OBJECTID = 187
XCN_OID_ENHANCED_KEY_USAGE: CERTENROLL_OBJECTID = 188
XCN_OID_CRL_NUMBER: CERTENROLL_OBJECTID = 189
XCN_OID_DELTA_CRL_INDICATOR: CERTENROLL_OBJECTID = 190
XCN_OID_ISSUING_DIST_POINT: CERTENROLL_OBJECTID = 191
XCN_OID_FRESHEST_CRL: CERTENROLL_OBJECTID = 192
XCN_OID_NAME_CONSTRAINTS: CERTENROLL_OBJECTID = 193
XCN_OID_POLICY_MAPPINGS: CERTENROLL_OBJECTID = 194
XCN_OID_LEGACY_POLICY_MAPPINGS: CERTENROLL_OBJECTID = 195
XCN_OID_POLICY_CONSTRAINTS: CERTENROLL_OBJECTID = 196
XCN_OID_RENEWAL_CERTIFICATE: CERTENROLL_OBJECTID = 197
XCN_OID_ENROLLMENT_NAME_VALUE_PAIR: CERTENROLL_OBJECTID = 198
XCN_OID_ENROLLMENT_CSP_PROVIDER: CERTENROLL_OBJECTID = 199
XCN_OID_OS_VERSION: CERTENROLL_OBJECTID = 200
XCN_OID_ENROLLMENT_AGENT: CERTENROLL_OBJECTID = 201
XCN_OID_PKIX: CERTENROLL_OBJECTID = 202
XCN_OID_PKIX_PE: CERTENROLL_OBJECTID = 203
XCN_OID_AUTHORITY_INFO_ACCESS: CERTENROLL_OBJECTID = 204
XCN_OID_BIOMETRIC_EXT: CERTENROLL_OBJECTID = 205
XCN_OID_LOGOTYPE_EXT: CERTENROLL_OBJECTID = 206
XCN_OID_CERT_EXTENSIONS: CERTENROLL_OBJECTID = 207
XCN_OID_NEXT_UPDATE_LOCATION: CERTENROLL_OBJECTID = 208
XCN_OID_REMOVE_CERTIFICATE: CERTENROLL_OBJECTID = 209
XCN_OID_CROSS_CERT_DIST_POINTS: CERTENROLL_OBJECTID = 210
XCN_OID_CTL: CERTENROLL_OBJECTID = 211
XCN_OID_SORTED_CTL: CERTENROLL_OBJECTID = 212
XCN_OID_SERIALIZED: CERTENROLL_OBJECTID = 213
XCN_OID_NT_PRINCIPAL_NAME: CERTENROLL_OBJECTID = 214
XCN_OID_PRODUCT_UPDATE: CERTENROLL_OBJECTID = 215
XCN_OID_ANY_APPLICATION_POLICY: CERTENROLL_OBJECTID = 216
XCN_OID_AUTO_ENROLL_CTL_USAGE: CERTENROLL_OBJECTID = 217
XCN_OID_ENROLL_CERTTYPE_EXTENSION: CERTENROLL_OBJECTID = 218
XCN_OID_CERT_MANIFOLD: CERTENROLL_OBJECTID = 219
XCN_OID_CERTSRV_CA_VERSION: CERTENROLL_OBJECTID = 220
XCN_OID_CERTSRV_PREVIOUS_CERT_HASH: CERTENROLL_OBJECTID = 221
XCN_OID_CRL_VIRTUAL_BASE: CERTENROLL_OBJECTID = 222
XCN_OID_CRL_NEXT_PUBLISH: CERTENROLL_OBJECTID = 223
XCN_OID_KP_CA_EXCHANGE: CERTENROLL_OBJECTID = 224
XCN_OID_KP_KEY_RECOVERY_AGENT: CERTENROLL_OBJECTID = 225
XCN_OID_CERTIFICATE_TEMPLATE: CERTENROLL_OBJECTID = 226
XCN_OID_ENTERPRISE_OID_ROOT: CERTENROLL_OBJECTID = 227
XCN_OID_RDN_DUMMY_SIGNER: CERTENROLL_OBJECTID = 228
XCN_OID_APPLICATION_CERT_POLICIES: CERTENROLL_OBJECTID = 229
XCN_OID_APPLICATION_POLICY_MAPPINGS: CERTENROLL_OBJECTID = 230
XCN_OID_APPLICATION_POLICY_CONSTRAINTS: CERTENROLL_OBJECTID = 231
XCN_OID_ARCHIVED_KEY_ATTR: CERTENROLL_OBJECTID = 232
XCN_OID_CRL_SELF_CDP: CERTENROLL_OBJECTID = 233
XCN_OID_REQUIRE_CERT_CHAIN_POLICY: CERTENROLL_OBJECTID = 234
XCN_OID_ARCHIVED_KEY_CERT_HASH: CERTENROLL_OBJECTID = 235
XCN_OID_ISSUED_CERT_HASH: CERTENROLL_OBJECTID = 236
XCN_OID_DS_EMAIL_REPLICATION: CERTENROLL_OBJECTID = 237
XCN_OID_REQUEST_CLIENT_INFO: CERTENROLL_OBJECTID = 238
XCN_OID_ENCRYPTED_KEY_HASH: CERTENROLL_OBJECTID = 239
XCN_OID_CERTSRV_CROSSCA_VERSION: CERTENROLL_OBJECTID = 240
XCN_OID_NTDS_REPLICATION: CERTENROLL_OBJECTID = 241
XCN_OID_SUBJECT_DIR_ATTRS: CERTENROLL_OBJECTID = 242
XCN_OID_PKIX_KP: CERTENROLL_OBJECTID = 243
XCN_OID_PKIX_KP_SERVER_AUTH: CERTENROLL_OBJECTID = 244
XCN_OID_PKIX_KP_CLIENT_AUTH: CERTENROLL_OBJECTID = 245
XCN_OID_PKIX_KP_CODE_SIGNING: CERTENROLL_OBJECTID = 246
XCN_OID_PKIX_KP_EMAIL_PROTECTION: CERTENROLL_OBJECTID = 247
XCN_OID_PKIX_KP_IPSEC_END_SYSTEM: CERTENROLL_OBJECTID = 248
XCN_OID_PKIX_KP_IPSEC_TUNNEL: CERTENROLL_OBJECTID = 249
XCN_OID_PKIX_KP_IPSEC_USER: CERTENROLL_OBJECTID = 250
XCN_OID_PKIX_KP_TIMESTAMP_SIGNING: CERTENROLL_OBJECTID = 251
XCN_OID_PKIX_KP_OCSP_SIGNING: CERTENROLL_OBJECTID = 252
XCN_OID_PKIX_OCSP_NOCHECK: CERTENROLL_OBJECTID = 253
XCN_OID_IPSEC_KP_IKE_INTERMEDIATE: CERTENROLL_OBJECTID = 254
XCN_OID_KP_CTL_USAGE_SIGNING: CERTENROLL_OBJECTID = 255
XCN_OID_KP_TIME_STAMP_SIGNING: CERTENROLL_OBJECTID = 256
XCN_OID_SERVER_GATED_CRYPTO: CERTENROLL_OBJECTID = 257
XCN_OID_SGC_NETSCAPE: CERTENROLL_OBJECTID = 258
XCN_OID_KP_EFS: CERTENROLL_OBJECTID = 259
XCN_OID_EFS_RECOVERY: CERTENROLL_OBJECTID = 260
XCN_OID_WHQL_CRYPTO: CERTENROLL_OBJECTID = 261
XCN_OID_NT5_CRYPTO: CERTENROLL_OBJECTID = 262
XCN_OID_OEM_WHQL_CRYPTO: CERTENROLL_OBJECTID = 263
XCN_OID_EMBEDDED_NT_CRYPTO: CERTENROLL_OBJECTID = 264
XCN_OID_ROOT_LIST_SIGNER: CERTENROLL_OBJECTID = 265
XCN_OID_KP_QUALIFIED_SUBORDINATION: CERTENROLL_OBJECTID = 266
XCN_OID_KP_KEY_RECOVERY: CERTENROLL_OBJECTID = 267
XCN_OID_KP_DOCUMENT_SIGNING: CERTENROLL_OBJECTID = 268
XCN_OID_KP_LIFETIME_SIGNING: CERTENROLL_OBJECTID = 269
XCN_OID_KP_MOBILE_DEVICE_SOFTWARE: CERTENROLL_OBJECTID = 270
XCN_OID_KP_SMART_DISPLAY: CERTENROLL_OBJECTID = 271
XCN_OID_KP_CSP_SIGNATURE: CERTENROLL_OBJECTID = 272
XCN_OID_DRM: CERTENROLL_OBJECTID = 273
XCN_OID_DRM_INDIVIDUALIZATION: CERTENROLL_OBJECTID = 274
XCN_OID_LICENSES: CERTENROLL_OBJECTID = 275
XCN_OID_LICENSE_SERVER: CERTENROLL_OBJECTID = 276
XCN_OID_KP_SMARTCARD_LOGON: CERTENROLL_OBJECTID = 277
XCN_OID_YESNO_TRUST_ATTR: CERTENROLL_OBJECTID = 278
XCN_OID_PKIX_POLICY_QUALIFIER_CPS: CERTENROLL_OBJECTID = 279
XCN_OID_PKIX_POLICY_QUALIFIER_USERNOTICE: CERTENROLL_OBJECTID = 280
XCN_OID_CERT_POLICIES_95_QUALIFIER1: CERTENROLL_OBJECTID = 281
XCN_OID_PKIX_ACC_DESCR: CERTENROLL_OBJECTID = 282
XCN_OID_PKIX_OCSP: CERTENROLL_OBJECTID = 283
XCN_OID_PKIX_CA_ISSUERS: CERTENROLL_OBJECTID = 284
XCN_OID_VERISIGN_PRIVATE_6_9: CERTENROLL_OBJECTID = 285
XCN_OID_VERISIGN_ONSITE_JURISDICTION_HASH: CERTENROLL_OBJECTID = 286
XCN_OID_VERISIGN_BITSTRING_6_13: CERTENROLL_OBJECTID = 287
XCN_OID_VERISIGN_ISS_STRONG_CRYPTO: CERTENROLL_OBJECTID = 288
XCN_OID_NETSCAPE: CERTENROLL_OBJECTID = 289
XCN_OID_NETSCAPE_CERT_EXTENSION: CERTENROLL_OBJECTID = 290
XCN_OID_NETSCAPE_CERT_TYPE: CERTENROLL_OBJECTID = 291
XCN_OID_NETSCAPE_BASE_URL: CERTENROLL_OBJECTID = 292
XCN_OID_NETSCAPE_REVOCATION_URL: CERTENROLL_OBJECTID = 293
XCN_OID_NETSCAPE_CA_REVOCATION_URL: CERTENROLL_OBJECTID = 294
XCN_OID_NETSCAPE_CERT_RENEWAL_URL: CERTENROLL_OBJECTID = 295
XCN_OID_NETSCAPE_CA_POLICY_URL: CERTENROLL_OBJECTID = 296
XCN_OID_NETSCAPE_SSL_SERVER_NAME: CERTENROLL_OBJECTID = 297
XCN_OID_NETSCAPE_COMMENT: CERTENROLL_OBJECTID = 298
XCN_OID_NETSCAPE_DATA_TYPE: CERTENROLL_OBJECTID = 299
XCN_OID_NETSCAPE_CERT_SEQUENCE: CERTENROLL_OBJECTID = 300
XCN_OID_CT_PKI_DATA: CERTENROLL_OBJECTID = 301
XCN_OID_CT_PKI_RESPONSE: CERTENROLL_OBJECTID = 302
XCN_OID_PKIX_NO_SIGNATURE: CERTENROLL_OBJECTID = 303
XCN_OID_CMC: CERTENROLL_OBJECTID = 304
XCN_OID_CMC_STATUS_INFO: CERTENROLL_OBJECTID = 305
XCN_OID_CMC_IDENTIFICATION: CERTENROLL_OBJECTID = 306
XCN_OID_CMC_IDENTITY_PROOF: CERTENROLL_OBJECTID = 307
XCN_OID_CMC_DATA_RETURN: CERTENROLL_OBJECTID = 308
XCN_OID_CMC_TRANSACTION_ID: CERTENROLL_OBJECTID = 309
XCN_OID_CMC_SENDER_NONCE: CERTENROLL_OBJECTID = 310
XCN_OID_CMC_RECIPIENT_NONCE: CERTENROLL_OBJECTID = 311
XCN_OID_CMC_ADD_EXTENSIONS: CERTENROLL_OBJECTID = 312
XCN_OID_CMC_ENCRYPTED_POP: CERTENROLL_OBJECTID = 313
XCN_OID_CMC_DECRYPTED_POP: CERTENROLL_OBJECTID = 314
XCN_OID_CMC_LRA_POP_WITNESS: CERTENROLL_OBJECTID = 315
XCN_OID_CMC_GET_CERT: CERTENROLL_OBJECTID = 316
XCN_OID_CMC_GET_CRL: CERTENROLL_OBJECTID = 317
XCN_OID_CMC_REVOKE_REQUEST: CERTENROLL_OBJECTID = 318
XCN_OID_CMC_REG_INFO: CERTENROLL_OBJECTID = 319
XCN_OID_CMC_RESPONSE_INFO: CERTENROLL_OBJECTID = 320
XCN_OID_CMC_QUERY_PENDING: CERTENROLL_OBJECTID = 321
XCN_OID_CMC_ID_POP_LINK_RANDOM: CERTENROLL_OBJECTID = 322
XCN_OID_CMC_ID_POP_LINK_WITNESS: CERTENROLL_OBJECTID = 323
XCN_OID_CMC_ID_CONFIRM_CERT_ACCEPTANCE: CERTENROLL_OBJECTID = 324
XCN_OID_CMC_ADD_ATTRIBUTES: CERTENROLL_OBJECTID = 325
XCN_OID_LOYALTY_OTHER_LOGOTYPE: CERTENROLL_OBJECTID = 326
XCN_OID_BACKGROUND_OTHER_LOGOTYPE: CERTENROLL_OBJECTID = 327
XCN_OID_PKIX_OCSP_BASIC_SIGNED_RESPONSE: CERTENROLL_OBJECTID = 328
XCN_OID_PKCS_7_DATA: CERTENROLL_OBJECTID = 329
XCN_OID_PKCS_7_SIGNED: CERTENROLL_OBJECTID = 330
XCN_OID_PKCS_7_ENVELOPED: CERTENROLL_OBJECTID = 331
XCN_OID_PKCS_7_SIGNEDANDENVELOPED: CERTENROLL_OBJECTID = 332
XCN_OID_PKCS_7_DIGESTED: CERTENROLL_OBJECTID = 333
XCN_OID_PKCS_7_ENCRYPTED: CERTENROLL_OBJECTID = 334
XCN_OID_PKCS_9_CONTENT_TYPE: CERTENROLL_OBJECTID = 335
XCN_OID_PKCS_9_MESSAGE_DIGEST: CERTENROLL_OBJECTID = 336
XCN_OID_CERT_PROP_ID_PREFIX: CERTENROLL_OBJECTID = 337
XCN_OID_CERT_KEY_IDENTIFIER_PROP_ID: CERTENROLL_OBJECTID = 338
XCN_OID_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID: CERTENROLL_OBJECTID = 339
XCN_OID_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID: CERTENROLL_OBJECTID = 340
XCN_OID_CERT_MD5_HASH_PROP_ID: CERTENROLL_OBJECTID = 341
XCN_OID_RSA_SHA256RSA: CERTENROLL_OBJECTID = 342
XCN_OID_RSA_SHA384RSA: CERTENROLL_OBJECTID = 343
XCN_OID_RSA_SHA512RSA: CERTENROLL_OBJECTID = 344
XCN_OID_NIST_sha256: CERTENROLL_OBJECTID = 345
XCN_OID_NIST_sha384: CERTENROLL_OBJECTID = 346
XCN_OID_NIST_sha512: CERTENROLL_OBJECTID = 347
XCN_OID_RSA_MGF1: CERTENROLL_OBJECTID = 348
XCN_OID_ECC_PUBLIC_KEY: CERTENROLL_OBJECTID = 349
XCN_OID_ECDSA_SHA1: CERTENROLL_OBJECTID = 350
XCN_OID_ECDSA_SPECIFIED: CERTENROLL_OBJECTID = 351
XCN_OID_ANY_ENHANCED_KEY_USAGE: CERTENROLL_OBJECTID = 352
XCN_OID_RSA_SSA_PSS: CERTENROLL_OBJECTID = 353
XCN_OID_ATTR_SUPPORTED_ALGORITHMS: CERTENROLL_OBJECTID = 355
XCN_OID_ATTR_TPM_SECURITY_ASSERTIONS: CERTENROLL_OBJECTID = 356
XCN_OID_ATTR_TPM_SPECIFICATION: CERTENROLL_OBJECTID = 357
XCN_OID_CERT_DISALLOWED_FILETIME_PROP_ID: CERTENROLL_OBJECTID = 358
XCN_OID_CERT_SIGNATURE_HASH_PROP_ID: CERTENROLL_OBJECTID = 359
XCN_OID_CERT_STRONG_KEY_OS_1: CERTENROLL_OBJECTID = 360
XCN_OID_CERT_STRONG_KEY_OS_CURRENT: CERTENROLL_OBJECTID = 361
XCN_OID_CERT_STRONG_KEY_OS_PREFIX: CERTENROLL_OBJECTID = 362
XCN_OID_CERT_STRONG_SIGN_OS_1: CERTENROLL_OBJECTID = 363
XCN_OID_CERT_STRONG_SIGN_OS_CURRENT: CERTENROLL_OBJECTID = 364
XCN_OID_CERT_STRONG_SIGN_OS_PREFIX: CERTENROLL_OBJECTID = 365
XCN_OID_DH_SINGLE_PASS_STDDH_SHA1_KDF: CERTENROLL_OBJECTID = 366
XCN_OID_DH_SINGLE_PASS_STDDH_SHA256_KDF: CERTENROLL_OBJECTID = 367
XCN_OID_DH_SINGLE_PASS_STDDH_SHA384_KDF: CERTENROLL_OBJECTID = 368
XCN_OID_DISALLOWED_HASH: CERTENROLL_OBJECTID = 369
XCN_OID_DISALLOWED_LIST: CERTENROLL_OBJECTID = 370
XCN_OID_ECC_CURVE_P256: CERTENROLL_OBJECTID = 371
XCN_OID_ECC_CURVE_P384: CERTENROLL_OBJECTID = 372
XCN_OID_ECC_CURVE_P521: CERTENROLL_OBJECTID = 373
XCN_OID_ECDSA_SHA256: CERTENROLL_OBJECTID = 374
XCN_OID_ECDSA_SHA384: CERTENROLL_OBJECTID = 375
XCN_OID_ECDSA_SHA512: CERTENROLL_OBJECTID = 376
XCN_OID_ENROLL_CAXCHGCERT_HASH: CERTENROLL_OBJECTID = 377
XCN_OID_ENROLL_EK_INFO: CERTENROLL_OBJECTID = 378
XCN_OID_ENROLL_EKPUB_CHALLENGE: CERTENROLL_OBJECTID = 379
XCN_OID_ENROLL_EKVERIFYCERT: CERTENROLL_OBJECTID = 380
XCN_OID_ENROLL_EKVERIFYCREDS: CERTENROLL_OBJECTID = 381
XCN_OID_ENROLL_EKVERIFYKEY: CERTENROLL_OBJECTID = 382
XCN_OID_EV_RDN_COUNTRY: CERTENROLL_OBJECTID = 383
XCN_OID_EV_RDN_LOCALE: CERTENROLL_OBJECTID = 384
XCN_OID_EV_RDN_STATE_OR_PROVINCE: CERTENROLL_OBJECTID = 385
XCN_OID_INHIBIT_ANY_POLICY: CERTENROLL_OBJECTID = 386
XCN_OID_INTERNATIONALIZED_EMAIL_ADDRESS: CERTENROLL_OBJECTID = 387
XCN_OID_KP_KERNEL_MODE_CODE_SIGNING: CERTENROLL_OBJECTID = 388
XCN_OID_KP_KERNEL_MODE_HAL_EXTENSION_SIGNING: CERTENROLL_OBJECTID = 389
XCN_OID_KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING: CERTENROLL_OBJECTID = 390
XCN_OID_KP_TPM_AIK_CERTIFICATE: CERTENROLL_OBJECTID = 391
XCN_OID_KP_TPM_EK_CERTIFICATE: CERTENROLL_OBJECTID = 392
XCN_OID_KP_TPM_PLATFORM_CERTIFICATE: CERTENROLL_OBJECTID = 393
XCN_OID_NIST_AES128_CBC: CERTENROLL_OBJECTID = 394
XCN_OID_NIST_AES128_WRAP: CERTENROLL_OBJECTID = 395
XCN_OID_NIST_AES192_CBC: CERTENROLL_OBJECTID = 396
XCN_OID_NIST_AES192_WRAP: CERTENROLL_OBJECTID = 397
XCN_OID_NIST_AES256_CBC: CERTENROLL_OBJECTID = 398
XCN_OID_NIST_AES256_WRAP: CERTENROLL_OBJECTID = 399
XCN_OID_PKCS_12_PbeIds: CERTENROLL_OBJECTID = 400
XCN_OID_PKCS_12_pbeWithSHA1And128BitRC2: CERTENROLL_OBJECTID = 401
XCN_OID_PKCS_12_pbeWithSHA1And128BitRC4: CERTENROLL_OBJECTID = 402
XCN_OID_PKCS_12_pbeWithSHA1And2KeyTripleDES: CERTENROLL_OBJECTID = 403
XCN_OID_PKCS_12_pbeWithSHA1And3KeyTripleDES: CERTENROLL_OBJECTID = 404
XCN_OID_PKCS_12_pbeWithSHA1And40BitRC2: CERTENROLL_OBJECTID = 405
XCN_OID_PKCS_12_pbeWithSHA1And40BitRC4: CERTENROLL_OBJECTID = 406
XCN_OID_PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID: CERTENROLL_OBJECTID = 407
XCN_OID_PKINIT_KP_KDC: CERTENROLL_OBJECTID = 408
XCN_OID_PKIX_CA_REPOSITORY: CERTENROLL_OBJECTID = 409
XCN_OID_PKIX_OCSP_NONCE: CERTENROLL_OBJECTID = 410
XCN_OID_PKIX_TIME_STAMPING: CERTENROLL_OBJECTID = 411
XCN_OID_QC_EU_COMPLIANCE: CERTENROLL_OBJECTID = 412
XCN_OID_QC_SSCD: CERTENROLL_OBJECTID = 413
XCN_OID_QC_STATEMENTS_EXT: CERTENROLL_OBJECTID = 414
XCN_OID_RDN_TPM_MANUFACTURER: CERTENROLL_OBJECTID = 415
XCN_OID_RDN_TPM_MODEL: CERTENROLL_OBJECTID = 416
XCN_OID_RDN_TPM_VERSION: CERTENROLL_OBJECTID = 417
XCN_OID_REVOKED_LIST_SIGNER: CERTENROLL_OBJECTID = 418
XCN_OID_RFC3161_counterSign: CERTENROLL_OBJECTID = 419
XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION: CERTENROLL_OBJECTID = 420
XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION: CERTENROLL_OBJECTID = 421
XCN_OID_ROOT_PROGRAM_FLAGS: CERTENROLL_OBJECTID = 422
XCN_OID_ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL: CERTENROLL_OBJECTID = 423
XCN_OID_RSA_PSPECIFIED: CERTENROLL_OBJECTID = 424
XCN_OID_RSAES_OAEP: CERTENROLL_OBJECTID = 425
XCN_OID_SUBJECT_INFO_ACCESS: CERTENROLL_OBJECTID = 426
XCN_OID_TIMESTAMP_TOKEN: CERTENROLL_OBJECTID = 427
XCN_OID_ENROLL_SCEP_ERROR: CERTENROLL_OBJECTID = 428
XCN_OIDVerisign_MessageType: CERTENROLL_OBJECTID = 429
XCN_OIDVerisign_PkiStatus: CERTENROLL_OBJECTID = 430
XCN_OIDVerisign_FailInfo: CERTENROLL_OBJECTID = 431
XCN_OIDVerisign_SenderNonce: CERTENROLL_OBJECTID = 432
XCN_OIDVerisign_RecipientNonce: CERTENROLL_OBJECTID = 433
XCN_OIDVerisign_TransactionID: CERTENROLL_OBJECTID = 434
XCN_OID_ENROLL_ATTESTATION_CHALLENGE: CERTENROLL_OBJECTID = 435
XCN_OID_ENROLL_ATTESTATION_STATEMENT: CERTENROLL_OBJECTID = 436
XCN_OID_ENROLL_ENCRYPTION_ALGORITHM: CERTENROLL_OBJECTID = 437
XCN_OID_ENROLL_KSP_NAME: CERTENROLL_OBJECTID = 438
CERTENROLL_PROPERTYID = Int32
XCN_PROPERTYID_NONE: CERTENROLL_PROPERTYID = 0
XCN_CERT_KEY_PROV_HANDLE_PROP_ID: CERTENROLL_PROPERTYID = 1
XCN_CERT_KEY_PROV_INFO_PROP_ID: CERTENROLL_PROPERTYID = 2
XCN_CERT_SHA1_HASH_PROP_ID: CERTENROLL_PROPERTYID = 3
XCN_CERT_MD5_HASH_PROP_ID: CERTENROLL_PROPERTYID = 4
XCN_CERT_HASH_PROP_ID: CERTENROLL_PROPERTYID = 3
XCN_CERT_KEY_CONTEXT_PROP_ID: CERTENROLL_PROPERTYID = 5
XCN_CERT_KEY_SPEC_PROP_ID: CERTENROLL_PROPERTYID = 6
XCN_CERT_IE30_RESERVED_PROP_ID: CERTENROLL_PROPERTYID = 7
XCN_CERT_PUBKEY_HASH_RESERVED_PROP_ID: CERTENROLL_PROPERTYID = 8
XCN_CERT_ENHKEY_USAGE_PROP_ID: CERTENROLL_PROPERTYID = 9
XCN_CERT_CTL_USAGE_PROP_ID: CERTENROLL_PROPERTYID = 9
XCN_CERT_NEXT_UPDATE_LOCATION_PROP_ID: CERTENROLL_PROPERTYID = 10
XCN_CERT_FRIENDLY_NAME_PROP_ID: CERTENROLL_PROPERTYID = 11
XCN_CERT_PVK_FILE_PROP_ID: CERTENROLL_PROPERTYID = 12
XCN_CERT_DESCRIPTION_PROP_ID: CERTENROLL_PROPERTYID = 13
XCN_CERT_ACCESS_STATE_PROP_ID: CERTENROLL_PROPERTYID = 14
XCN_CERT_SIGNATURE_HASH_PROP_ID: CERTENROLL_PROPERTYID = 15
XCN_CERT_SMART_CARD_DATA_PROP_ID: CERTENROLL_PROPERTYID = 16
XCN_CERT_EFS_PROP_ID: CERTENROLL_PROPERTYID = 17
XCN_CERT_FORTEZZA_DATA_PROP_ID: CERTENROLL_PROPERTYID = 18
XCN_CERT_ARCHIVED_PROP_ID: CERTENROLL_PROPERTYID = 19
XCN_CERT_KEY_IDENTIFIER_PROP_ID: CERTENROLL_PROPERTYID = 20
XCN_CERT_AUTO_ENROLL_PROP_ID: CERTENROLL_PROPERTYID = 21
XCN_CERT_PUBKEY_ALG_PARA_PROP_ID: CERTENROLL_PROPERTYID = 22
XCN_CERT_CROSS_CERT_DIST_POINTS_PROP_ID: CERTENROLL_PROPERTYID = 23
XCN_CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID: CERTENROLL_PROPERTYID = 24
XCN_CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID: CERTENROLL_PROPERTYID = 25
XCN_CERT_ENROLLMENT_PROP_ID: CERTENROLL_PROPERTYID = 26
XCN_CERT_DATE_STAMP_PROP_ID: CERTENROLL_PROPERTYID = 27
XCN_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID: CERTENROLL_PROPERTYID = 28
XCN_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID: CERTENROLL_PROPERTYID = 29
XCN_CERT_EXTENDED_ERROR_INFO_PROP_ID: CERTENROLL_PROPERTYID = 30
XCN_CERT_RENEWAL_PROP_ID: CERTENROLL_PROPERTYID = 64
XCN_CERT_ARCHIVED_KEY_HASH_PROP_ID: CERTENROLL_PROPERTYID = 65
XCN_CERT_AUTO_ENROLL_RETRY_PROP_ID: CERTENROLL_PROPERTYID = 66
XCN_CERT_AIA_URL_RETRIEVED_PROP_ID: CERTENROLL_PROPERTYID = 67
XCN_CERT_AUTHORITY_INFO_ACCESS_PROP_ID: CERTENROLL_PROPERTYID = 68
XCN_CERT_BACKED_UP_PROP_ID: CERTENROLL_PROPERTYID = 69
XCN_CERT_OCSP_RESPONSE_PROP_ID: CERTENROLL_PROPERTYID = 70
XCN_CERT_REQUEST_ORIGINATOR_PROP_ID: CERTENROLL_PROPERTYID = 71
XCN_CERT_SOURCE_LOCATION_PROP_ID: CERTENROLL_PROPERTYID = 72
XCN_CERT_SOURCE_URL_PROP_ID: CERTENROLL_PROPERTYID = 73
XCN_CERT_NEW_KEY_PROP_ID: CERTENROLL_PROPERTYID = 74
XCN_CERT_OCSP_CACHE_PREFIX_PROP_ID: CERTENROLL_PROPERTYID = 75
XCN_CERT_SMART_CARD_ROOT_INFO_PROP_ID: CERTENROLL_PROPERTYID = 76
XCN_CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID: CERTENROLL_PROPERTYID = 77
XCN_CERT_NCRYPT_KEY_HANDLE_PROP_ID: CERTENROLL_PROPERTYID = 78
XCN_CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID: CERTENROLL_PROPERTYID = 79
XCN_CERT_SUBJECT_INFO_ACCESS_PROP_ID: CERTENROLL_PROPERTYID = 80
XCN_CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID: CERTENROLL_PROPERTYID = 81
XCN_CERT_CA_DISABLE_CRL_PROP_ID: CERTENROLL_PROPERTYID = 82
XCN_CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID: CERTENROLL_PROPERTYID = 83
XCN_CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID: CERTENROLL_PROPERTYID = 84
XCN_CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID: CERTENROLL_PROPERTYID = 85
XCN_CERT_SUBJECT_DISABLE_CRL_PROP_ID: CERTENROLL_PROPERTYID = 86
XCN_CERT_CEP_PROP_ID: CERTENROLL_PROPERTYID = 87
XCN_CERT_SIGN_HASH_CNG_ALG_PROP_ID: CERTENROLL_PROPERTYID = 89
XCN_CERT_SCARD_PIN_ID_PROP_ID: CERTENROLL_PROPERTYID = 90
XCN_CERT_SCARD_PIN_INFO_PROP_ID: CERTENROLL_PROPERTYID = 91
XCN_CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID: CERTENROLL_PROPERTYID = 92
XCN_CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID: CERTENROLL_PROPERTYID = 93
XCN_CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID: CERTENROLL_PROPERTYID = 94
XCN_CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID: CERTENROLL_PROPERTYID = 95
XCN_CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID: CERTENROLL_PROPERTYID = 96
XCN_CERT_NO_EXPIRE_NOTIFICATION_PROP_ID: CERTENROLL_PROPERTYID = 97
XCN_CERT_AUTH_ROOT_SHA256_HASH_PROP_ID: CERTENROLL_PROPERTYID = 98
XCN_CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID: CERTENROLL_PROPERTYID = 99
XCN_CERT_HCRYPTPROV_TRANSFER_PROP_ID: CERTENROLL_PROPERTYID = 100
XCN_CERT_SMART_CARD_READER_PROP_ID: CERTENROLL_PROPERTYID = 101
XCN_CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID: CERTENROLL_PROPERTYID = 102
XCN_CERT_KEY_REPAIR_ATTEMPTED_PROP_ID: CERTENROLL_PROPERTYID = 103
XCN_CERT_DISALLOWED_FILETIME_PROP_ID: CERTENROLL_PROPERTYID = 104
XCN_CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID: CERTENROLL_PROPERTYID = 105
XCN_CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID: CERTENROLL_PROPERTYID = 106
XCN_CERT_SHA256_HASH_PROP_ID: CERTENROLL_PROPERTYID = 107
XCN_CERT_SCEP_SERVER_CERTS_PROP_ID: CERTENROLL_PROPERTYID = 108
XCN_CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID: CERTENROLL_PROPERTYID = 109
XCN_CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID: CERTENROLL_PROPERTYID = 110
XCN_CERT_SCEP_CA_CERT_PROP_ID: CERTENROLL_PROPERTYID = 111
XCN_CERT_SCEP_SIGNER_CERT_PROP_ID: CERTENROLL_PROPERTYID = 112
XCN_CERT_SCEP_NONCE_PROP_ID: CERTENROLL_PROPERTYID = 113
XCN_CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID: CERTENROLL_PROPERTYID = 114
XCN_CERT_SCEP_FLAGS_PROP_ID: CERTENROLL_PROPERTYID = 115
XCN_CERT_SCEP_GUID_PROP_ID: CERTENROLL_PROPERTYID = 116
XCN_CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID: CERTENROLL_PROPERTYID = 117
XCN_CERT_ISOLATED_KEY_PROP_ID: CERTENROLL_PROPERTYID = 118
XCN_CERT_SERIAL_CHAIN_PROP_ID: CERTENROLL_PROPERTYID = 119
XCN_CERT_KEY_CLASSIFICATION_PROP_ID: CERTENROLL_PROPERTYID = 120
XCN_CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID: CERTENROLL_PROPERTYID = 122
XCN_CERT_NONCOMPLIANT_ROOT_URL_PROP_ID: CERTENROLL_PROPERTYID = 123
XCN_CERT_PIN_SHA256_HASH_PROP_ID: CERTENROLL_PROPERTYID = 124
XCN_CERT_CLR_DELETE_KEY_PROP_ID: CERTENROLL_PROPERTYID = 125
XCN_CERT_NOT_BEFORE_FILETIME_PROP_ID: CERTENROLL_PROPERTYID = 126
XCN_CERT_CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID: CERTENROLL_PROPERTYID = 127
XCN_CERT_FIRST_RESERVED_PROP_ID: CERTENROLL_PROPERTYID = 128
XCN_CERT_LAST_RESERVED_PROP_ID: CERTENROLL_PROPERTYID = 32767
XCN_CERT_FIRST_USER_PROP_ID: CERTENROLL_PROPERTYID = 32768
XCN_CERT_LAST_USER_PROP_ID: CERTENROLL_PROPERTYID = 65535
XCN_CERT_STORE_LOCALIZED_NAME_PROP_ID: CERTENROLL_PROPERTYID = 4096
class CERTTRANSBLOB(Structure):
    cb: UInt32
    pb: c_char_p_no
class CERTVIEWRESTRICTION(Structure):
    ColumnIndex: UInt32
    SeekOperator: Int32
    SortOrder: Int32
    pbValue: c_char_p_no
    cbValue: UInt32
CObjectId = Guid('884e2000-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CObjectIds = Guid('884e2001-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CommitTemplateFlags = Int32
CommitTemplateFlags_CommitFlagSaveTemplateGenerateOID: CommitTemplateFlags = 1
CommitTemplateFlags_CommitFlagSaveTemplateUseCurrentOID: CommitTemplateFlags = 2
CommitTemplateFlags_CommitFlagSaveTemplateOverwrite: CommitTemplateFlags = 3
CommitTemplateFlags_CommitFlagDeleteTemplate: CommitTemplateFlags = 4
CPolicyQualifier = Guid('884e201c-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CPolicyQualifiers = Guid('884e201d-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CR_DISP = UInt32
CR_DISP_DENIED: CR_DISP = 2
CR_DISP_ERROR: CR_DISP = 1
CR_DISP_INCOMPLETE: CR_DISP = 0
CR_DISP_ISSUED: CR_DISP = 3
CR_DISP_ISSUED_OUT_OF_BAND: CR_DISP = 4
CR_DISP_UNDER_SUBMISSION: CR_DISP = 5
CRLRevocationReason = Int32
XCN_CRL_REASON_UNSPECIFIED: CRLRevocationReason = 0
XCN_CRL_REASON_KEY_COMPROMISE: CRLRevocationReason = 1
XCN_CRL_REASON_CA_COMPROMISE: CRLRevocationReason = 2
XCN_CRL_REASON_AFFILIATION_CHANGED: CRLRevocationReason = 3
XCN_CRL_REASON_SUPERSEDED: CRLRevocationReason = 4
XCN_CRL_REASON_CESSATION_OF_OPERATION: CRLRevocationReason = 5
XCN_CRL_REASON_CERTIFICATE_HOLD: CRLRevocationReason = 6
XCN_CRL_REASON_REMOVE_FROM_CRL: CRLRevocationReason = 8
XCN_CRL_REASON_PRIVILEGE_WITHDRAWN: CRLRevocationReason = 9
XCN_CRL_REASON_AA_COMPROMISE: CRLRevocationReason = 10
CSBACKUP_TYPE = UInt32
CSBACKUP_TYPE_FULL: CSBACKUP_TYPE = 1
CSBACKUP_TYPE_LOGS_ONLY: CSBACKUP_TYPE = 2
class CSEDB_RSTMAPW(Structure):
    pwszDatabaseName: win32more.Foundation.PWSTR
    pwszNewDatabaseName: win32more.Foundation.PWSTR
CSignerCertificate = Guid('884e203d-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CSmimeCapabilities = Guid('884e201a-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CSmimeCapability = Guid('884e2019-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CVRC_COLUMN = UInt32
CVRC_COLUMN_SCHEMA: CVRC_COLUMN = 0
CVRC_COLUMN_RESULT: CVRC_COLUMN = 1
CVRC_COLUMN_VALUE: CVRC_COLUMN = 2
CVRC_COLUMN_MASK: CVRC_COLUMN = 4095
CVRC_TABLE = UInt32
CVRC_TABLE_ATTRIBUTES: CVRC_TABLE = 16384
CVRC_TABLE_CRL: CVRC_TABLE = 20480
CVRC_TABLE_EXTENSIONS: CVRC_TABLE = 12288
CVRC_TABLE_REQCERT: CVRC_TABLE = 0
CX500DistinguishedName = Guid('884e2003-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509Attribute = Guid('884e2022-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509AttributeArchiveKey = Guid('884e2027-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509AttributeArchiveKeyHash = Guid('884e2028-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509AttributeClientId = Guid('884e2025-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509AttributeCspProvider = Guid('884e202b-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509AttributeExtensions = Guid('884e2024-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509AttributeOSVersion = Guid('884e202a-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509AttributeRenewalCertificate = Guid('884e2026-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509Attributes = Guid('884e2023-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509CertificateRequestCertificate = Guid('884e2043-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509CertificateRequestCmc = Guid('884e2045-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509CertificateRequestPkcs10 = Guid('884e2042-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509CertificateRequestPkcs7 = Guid('884e2044-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509CertificateRevocationList = Guid('884e2060-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509CertificateRevocationListEntries = Guid('884e205f-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509CertificateRevocationListEntry = Guid('884e205e-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509CertificateTemplateADWritable = Guid('8336e323-2e6a-4a04-93-7c-54-8f-68-18-39-b3')
CX509EndorsementKey = Guid('11a25a1d-b9a3-4edd-af-83-3b-59-ad-be-d3-61')
CX509Enrollment = Guid('884e2046-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509EnrollmentHelper = Guid('884e2050-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509EnrollmentPolicyActiveDirectory = Guid('91f39027-217f-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509EnrollmentPolicyWebService = Guid('91f39028-217f-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509EnrollmentWebClassFactory = Guid('884e2049-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509Extension = Guid('884e200d-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509ExtensionAlternativeNames = Guid('884e2015-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509ExtensionAuthorityKeyIdentifier = Guid('884e2018-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509ExtensionBasicConstraints = Guid('884e2016-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509ExtensionCertificatePolicies = Guid('884e2020-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509ExtensionEnhancedKeyUsage = Guid('884e2010-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509ExtensionKeyUsage = Guid('884e200f-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509ExtensionMSApplicationPolicies = Guid('884e2021-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509Extensions = Guid('884e200e-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509ExtensionSmimeCapabilities = Guid('884e201b-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509ExtensionSubjectKeyIdentifier = Guid('884e2017-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509ExtensionTemplate = Guid('884e2012-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509ExtensionTemplateName = Guid('884e2011-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509MachineEnrollmentFactory = Guid('884e2051-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509NameValuePair = Guid('884e203f-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509PolicyServerListManager = Guid('91f39029-217f-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509PolicyServerUrl = Guid('91f3902a-217f-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509PrivateKey = Guid('884e200c-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509PublicKey = Guid('884e200b-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509SCEPEnrollment = Guid('884e2061-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
CX509SCEPEnrollmentHelper = Guid('884e2062-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
DelayRetryAction = Int32
DelayRetryAction_DelayRetryUnknown: DelayRetryAction = 0
DelayRetryAction_DelayRetryNone: DelayRetryAction = 1
DelayRetryAction_DelayRetryShort: DelayRetryAction = 2
DelayRetryAction_DelayRetryLong: DelayRetryAction = 3
DelayRetryAction_DelayRetrySuccess: DelayRetryAction = 4
DelayRetryAction_DelayRetryPastSuccess: DelayRetryAction = 5
EncodingType = Int32
XCN_CRYPT_STRING_BASE64HEADER: EncodingType = 0
XCN_CRYPT_STRING_BASE64: EncodingType = 1
XCN_CRYPT_STRING_BINARY: EncodingType = 2
XCN_CRYPT_STRING_BASE64REQUESTHEADER: EncodingType = 3
XCN_CRYPT_STRING_HEX: EncodingType = 4
XCN_CRYPT_STRING_HEXASCII: EncodingType = 5
XCN_CRYPT_STRING_BASE64_ANY: EncodingType = 6
XCN_CRYPT_STRING_ANY: EncodingType = 7
XCN_CRYPT_STRING_HEX_ANY: EncodingType = 8
XCN_CRYPT_STRING_BASE64X509CRLHEADER: EncodingType = 9
XCN_CRYPT_STRING_HEXADDR: EncodingType = 10
XCN_CRYPT_STRING_HEXASCIIADDR: EncodingType = 11
XCN_CRYPT_STRING_HEXRAW: EncodingType = 12
XCN_CRYPT_STRING_BASE64URI: EncodingType = 13
XCN_CRYPT_STRING_ENCODEMASK: EncodingType = 255
XCN_CRYPT_STRING_CHAIN: EncodingType = 256
XCN_CRYPT_STRING_TEXT: EncodingType = 512
XCN_CRYPT_STRING_PERCENTESCAPE: EncodingType = 134217728
XCN_CRYPT_STRING_HASHDATA: EncodingType = 268435456
XCN_CRYPT_STRING_STRICT: EncodingType = 536870912
XCN_CRYPT_STRING_NOCRLF: EncodingType = 1073741824
XCN_CRYPT_STRING_NOCR: EncodingType = -2147483648
EnrollmentCAProperty = Int32
EnrollmentCAProperty_CAPropCommonName: EnrollmentCAProperty = 1
EnrollmentCAProperty_CAPropDistinguishedName: EnrollmentCAProperty = 2
EnrollmentCAProperty_CAPropSanitizedName: EnrollmentCAProperty = 3
EnrollmentCAProperty_CAPropSanitizedShortName: EnrollmentCAProperty = 4
EnrollmentCAProperty_CAPropDNSName: EnrollmentCAProperty = 5
EnrollmentCAProperty_CAPropCertificateTypes: EnrollmentCAProperty = 6
EnrollmentCAProperty_CAPropCertificate: EnrollmentCAProperty = 7
EnrollmentCAProperty_CAPropDescription: EnrollmentCAProperty = 8
EnrollmentCAProperty_CAPropWebServers: EnrollmentCAProperty = 9
EnrollmentCAProperty_CAPropSiteName: EnrollmentCAProperty = 10
EnrollmentCAProperty_CAPropSecurity: EnrollmentCAProperty = 11
EnrollmentCAProperty_CAPropRenewalOnly: EnrollmentCAProperty = 12
EnrollmentDisplayStatus = Int32
EnrollmentDisplayStatus_DisplayNo: EnrollmentDisplayStatus = 0
EnrollmentDisplayStatus_DisplayYes: EnrollmentDisplayStatus = 1
EnrollmentEnrollStatus = Int32
EnrollmentEnrollStatus_Enrolled: EnrollmentEnrollStatus = 1
EnrollmentEnrollStatus_EnrollPended: EnrollmentEnrollStatus = 2
EnrollmentEnrollStatus_EnrollUIDeferredEnrollmentRequired: EnrollmentEnrollStatus = 4
EnrollmentEnrollStatus_EnrollError: EnrollmentEnrollStatus = 16
EnrollmentEnrollStatus_EnrollUnknown: EnrollmentEnrollStatus = 32
EnrollmentEnrollStatus_EnrollSkipped: EnrollmentEnrollStatus = 64
EnrollmentEnrollStatus_EnrollDenied: EnrollmentEnrollStatus = 256
EnrollmentPolicyFlags = Int32
EnrollmentPolicyFlags_DisableGroupPolicyList: EnrollmentPolicyFlags = 2
EnrollmentPolicyFlags_DisableUserServerList: EnrollmentPolicyFlags = 4
EnrollmentPolicyServerPropertyFlags = Int32
EnrollmentPolicyServerPropertyFlags_DefaultNone: EnrollmentPolicyServerPropertyFlags = 0
EnrollmentPolicyServerPropertyFlags_DefaultPolicyServer: EnrollmentPolicyServerPropertyFlags = 1
EnrollmentSelectionStatus = Int32
EnrollmentSelectionStatus_SelectedNo: EnrollmentSelectionStatus = 0
EnrollmentSelectionStatus_SelectedYes: EnrollmentSelectionStatus = 1
EnrollmentTemplateProperty = Int32
EnrollmentTemplateProperty_TemplatePropCommonName: EnrollmentTemplateProperty = 1
EnrollmentTemplateProperty_TemplatePropFriendlyName: EnrollmentTemplateProperty = 2
EnrollmentTemplateProperty_TemplatePropEKUs: EnrollmentTemplateProperty = 3
EnrollmentTemplateProperty_TemplatePropCryptoProviders: EnrollmentTemplateProperty = 4
EnrollmentTemplateProperty_TemplatePropMajorRevision: EnrollmentTemplateProperty = 5
EnrollmentTemplateProperty_TemplatePropDescription: EnrollmentTemplateProperty = 6
EnrollmentTemplateProperty_TemplatePropKeySpec: EnrollmentTemplateProperty = 7
EnrollmentTemplateProperty_TemplatePropSchemaVersion: EnrollmentTemplateProperty = 8
EnrollmentTemplateProperty_TemplatePropMinorRevision: EnrollmentTemplateProperty = 9
EnrollmentTemplateProperty_TemplatePropRASignatureCount: EnrollmentTemplateProperty = 10
EnrollmentTemplateProperty_TemplatePropMinimumKeySize: EnrollmentTemplateProperty = 11
EnrollmentTemplateProperty_TemplatePropOID: EnrollmentTemplateProperty = 12
EnrollmentTemplateProperty_TemplatePropSupersede: EnrollmentTemplateProperty = 13
EnrollmentTemplateProperty_TemplatePropRACertificatePolicies: EnrollmentTemplateProperty = 14
EnrollmentTemplateProperty_TemplatePropRAEKUs: EnrollmentTemplateProperty = 15
EnrollmentTemplateProperty_TemplatePropCertificatePolicies: EnrollmentTemplateProperty = 16
EnrollmentTemplateProperty_TemplatePropV1ApplicationPolicy: EnrollmentTemplateProperty = 17
EnrollmentTemplateProperty_TemplatePropAsymmetricAlgorithm: EnrollmentTemplateProperty = 18
EnrollmentTemplateProperty_TemplatePropKeySecurityDescriptor: EnrollmentTemplateProperty = 19
EnrollmentTemplateProperty_TemplatePropSymmetricAlgorithm: EnrollmentTemplateProperty = 20
EnrollmentTemplateProperty_TemplatePropSymmetricKeyLength: EnrollmentTemplateProperty = 21
EnrollmentTemplateProperty_TemplatePropHashAlgorithm: EnrollmentTemplateProperty = 22
EnrollmentTemplateProperty_TemplatePropKeyUsage: EnrollmentTemplateProperty = 23
EnrollmentTemplateProperty_TemplatePropEnrollmentFlags: EnrollmentTemplateProperty = 24
EnrollmentTemplateProperty_TemplatePropSubjectNameFlags: EnrollmentTemplateProperty = 25
EnrollmentTemplateProperty_TemplatePropPrivateKeyFlags: EnrollmentTemplateProperty = 26
EnrollmentTemplateProperty_TemplatePropGeneralFlags: EnrollmentTemplateProperty = 27
EnrollmentTemplateProperty_TemplatePropSecurityDescriptor: EnrollmentTemplateProperty = 28
EnrollmentTemplateProperty_TemplatePropExtensions: EnrollmentTemplateProperty = 29
EnrollmentTemplateProperty_TemplatePropValidityPeriod: EnrollmentTemplateProperty = 30
EnrollmentTemplateProperty_TemplatePropRenewalPeriod: EnrollmentTemplateProperty = 31
ENUM_CATYPES = Int32
ENUM_ENTERPRISE_ROOTCA: ENUM_CATYPES = 0
ENUM_ENTERPRISE_SUBCA: ENUM_CATYPES = 1
ENUM_STANDALONE_ROOTCA: ENUM_CATYPES = 3
ENUM_STANDALONE_SUBCA: ENUM_CATYPES = 4
ENUM_UNKNOWN_CA: ENUM_CATYPES = 5
ENUM_CERT_COLUMN_VALUE_FLAGS = UInt32
CV_OUT_BASE64: ENUM_CERT_COLUMN_VALUE_FLAGS = 1
CV_OUT_BASE64HEADER: ENUM_CERT_COLUMN_VALUE_FLAGS = 0
CV_OUT_BASE64REQUESTHEADER: ENUM_CERT_COLUMN_VALUE_FLAGS = 3
CV_OUT_BASE64X509CRLHEADER: ENUM_CERT_COLUMN_VALUE_FLAGS = 9
CV_OUT_BINARY: ENUM_CERT_COLUMN_VALUE_FLAGS = 2
CV_OUT_HEX: ENUM_CERT_COLUMN_VALUE_FLAGS = 4
CV_OUT_HEXADDR: ENUM_CERT_COLUMN_VALUE_FLAGS = 10
CV_OUT_HEXASCII: ENUM_CERT_COLUMN_VALUE_FLAGS = 5
CV_OUT_HEXASCIIADDR: ENUM_CERT_COLUMN_VALUE_FLAGS = 11
@winfunctype_pointer
def FNCERTSRVBACKUPCLOSE(hbc: c_void_p) -> win32more.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVBACKUPEND(hbc: c_void_p) -> win32more.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVBACKUPFREE(pv: c_void_p) -> Void: ...
@winfunctype_pointer
def FNCERTSRVBACKUPGETBACKUPLOGSW(hbc: c_void_p, ppwszzBackupLogFiles: POINTER(POINTER(UInt16)), pcbSize: POINTER(UInt32)) -> win32more.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVBACKUPGETDATABASENAMESW(hbc: c_void_p, ppwszzAttachmentInformation: POINTER(POINTER(UInt16)), pcbSize: POINTER(UInt32)) -> win32more.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVBACKUPGETDYNAMICFILELISTW(hbc: c_void_p, ppwszzFileList: POINTER(POINTER(UInt16)), pcbSize: POINTER(UInt32)) -> win32more.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVBACKUPOPENFILEW(hbc: c_void_p, pwszAttachmentName: win32more.Foundation.PWSTR, cbReadHintSize: UInt32, pliFileSize: POINTER(win32more.Foundation.LARGE_INTEGER_head)) -> win32more.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVBACKUPPREPAREW(pwszServerName: win32more.Foundation.PWSTR, grbitJet: UInt32, dwBackupFlags: UInt32, phbc: POINTER(c_void_p)) -> win32more.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVBACKUPREAD(hbc: c_void_p, pvBuffer: c_void_p, cbBuffer: UInt32, pcbRead: POINTER(UInt32)) -> win32more.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVBACKUPTRUNCATELOGS(hbc: c_void_p) -> win32more.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVISSERVERONLINEW(pwszServerName: win32more.Foundation.PWSTR, pfServerOnline: POINTER(win32more.Foundation.BOOL)) -> win32more.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVRESTOREEND(hbc: c_void_p) -> win32more.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVRESTOREGETDATABASELOCATIONSW(hbc: c_void_p, ppwszzDatabaseLocationList: POINTER(POINTER(UInt16)), pcbSize: POINTER(UInt32)) -> win32more.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVRESTOREPREPAREW(pwszServerName: win32more.Foundation.PWSTR, dwRestoreFlags: UInt32, phbc: POINTER(c_void_p)) -> win32more.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVRESTOREREGISTERCOMPLETE(hbc: c_void_p, hrRestoreState: win32more.Foundation.HRESULT) -> win32more.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVRESTOREREGISTERW(hbc: c_void_p, pwszCheckPointFilePath: win32more.Foundation.PWSTR, pwszLogPath: win32more.Foundation.PWSTR, rgrstmap: POINTER(win32more.Security.Cryptography.Certificates.CSEDB_RSTMAPW_head), crstmap: Int32, pwszBackupLogPath: win32more.Foundation.PWSTR, genLow: UInt32, genHigh: UInt32) -> win32more.Foundation.HRESULT: ...
@winfunctype_pointer
def FNCERTSRVSERVERCONTROLW(pwszServerName: win32more.Foundation.PWSTR, dwControlFlags: UInt32, pcbOut: POINTER(UInt32), ppbOut: POINTER(c_char_p_no)) -> win32more.Foundation.HRESULT: ...
@winfunctype_pointer
def FNIMPORTPFXTOPROVIDER(hWndParent: win32more.Foundation.HWND, pbPFX: c_char_p_no, cbPFX: UInt32, ImportFlags: win32more.Security.Cryptography.Certificates.ImportPFXFlags, pwszPassword: win32more.Foundation.PWSTR, pwszProviderName: win32more.Foundation.PWSTR, pwszReaderName: win32more.Foundation.PWSTR, pwszContainerNamePrefix: win32more.Foundation.PWSTR, pwszPin: win32more.Foundation.PWSTR, pwszFriendlyName: win32more.Foundation.PWSTR, pcCertOut: POINTER(UInt32), prgpCertOut: POINTER(POINTER(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)))) -> win32more.Foundation.HRESULT: ...
@winfunctype_pointer
def FNIMPORTPFXTOPROVIDERFREEDATA(cCert: UInt32, rgpCert: POINTER(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head))) -> Void: ...
FULL_RESPONSE_PROPERTY_ID = UInt32
FR_PROP_NONE: FULL_RESPONSE_PROPERTY_ID = 0
FR_PROP_FULLRESPONSE: FULL_RESPONSE_PROPERTY_ID = 1
FR_PROP_STATUSINFOCOUNT: FULL_RESPONSE_PROPERTY_ID = 2
FR_PROP_BODYPARTSTRING: FULL_RESPONSE_PROPERTY_ID = 3
FR_PROP_STATUS: FULL_RESPONSE_PROPERTY_ID = 4
FR_PROP_STATUSSTRING: FULL_RESPONSE_PROPERTY_ID = 5
FR_PROP_OTHERINFOCHOICE: FULL_RESPONSE_PROPERTY_ID = 6
FR_PROP_FAILINFO: FULL_RESPONSE_PROPERTY_ID = 7
FR_PROP_PENDINFOTOKEN: FULL_RESPONSE_PROPERTY_ID = 8
FR_PROP_PENDINFOTIME: FULL_RESPONSE_PROPERTY_ID = 9
FR_PROP_ISSUEDCERTIFICATEHASH: FULL_RESPONSE_PROPERTY_ID = 10
FR_PROP_ISSUEDCERTIFICATE: FULL_RESPONSE_PROPERTY_ID = 11
FR_PROP_ISSUEDCERTIFICATECHAIN: FULL_RESPONSE_PROPERTY_ID = 12
FR_PROP_ISSUEDCERTIFICATECRLCHAIN: FULL_RESPONSE_PROPERTY_ID = 13
FR_PROP_ENCRYPTEDKEYHASH: FULL_RESPONSE_PROPERTY_ID = 14
FR_PROP_FULLRESPONSENOPKCS7: FULL_RESPONSE_PROPERTY_ID = 15
FR_PROP_CAEXCHANGECERTIFICATEHASH: FULL_RESPONSE_PROPERTY_ID = 16
FR_PROP_CAEXCHANGECERTIFICATE: FULL_RESPONSE_PROPERTY_ID = 17
FR_PROP_CAEXCHANGECERTIFICATECHAIN: FULL_RESPONSE_PROPERTY_ID = 18
FR_PROP_CAEXCHANGECERTIFICATECRLCHAIN: FULL_RESPONSE_PROPERTY_ID = 19
FR_PROP_ATTESTATIONCHALLENGE: FULL_RESPONSE_PROPERTY_ID = 20
FR_PROP_ATTESTATIONPROVIDERNAME: FULL_RESPONSE_PROPERTY_ID = 21
class IAlternativeName(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab313-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def InitializeFromString(Type: win32more.Security.Cryptography.Certificates.AlternativeNameType, strValue: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def InitializeFromRawData(Type: win32more.Security.Cryptography.Certificates.AlternativeNameType, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strRawData: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def InitializeFromOtherName(pObjectId: win32more.Security.Cryptography.Certificates.IObjectId_head, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strRawData: win32more.Foundation.BSTR, ToBeWrapped: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def get_Type(pValue: POINTER(win32more.Security.Cryptography.Certificates.AlternativeNameType)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def get_StrValue(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def get_ObjectId(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectId_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def get_RawData(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class IAlternativeNames(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab314-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def get_ItemByIndex(Index: Int32, pVal: POINTER(win32more.Security.Cryptography.Certificates.IAlternativeName_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(pVal: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(pVal: POINTER(win32more.System.Com.IUnknown_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def Add(pVal: win32more.Security.Cryptography.Certificates.IAlternativeName_head) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(Index: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Clear() -> win32more.Foundation.HRESULT: ...
class IBinaryConverter(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab302-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def StringToString(strEncodedIn: win32more.Foundation.BSTR, EncodingIn: win32more.Security.Cryptography.Certificates.EncodingType, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pstrEncoded: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def VariantByteArrayToString(pvarByteArray: POINTER(win32more.System.Com.VARIANT_head), Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pstrEncoded: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def StringToVariantByteArray(strEncoded: win32more.Foundation.BSTR, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pvarByteArray: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
class IBinaryConverter2(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IBinaryConverter
    Guid = Guid('8d7928b4-4e17-428d-9a-17-72-8d-f0-0d-1b-2b')
    @commethod(10)
    def StringArrayToVariantArray(pvarStringArray: POINTER(win32more.System.Com.VARIANT_head), pvarVariantArray: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def VariantArrayToStringArray(pvarVariantArray: POINTER(win32more.System.Com.VARIANT_head), pvarStringArray: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
class ICEnroll(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('43f8f288-7a20-11d0-8f-06-00-c0-4f-c2-95-e1')
    @commethod(7)
    def createFilePKCS10(DNName: win32more.Foundation.BSTR, Usage: win32more.Foundation.BSTR, wszPKCS10FileName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def acceptFilePKCS7(wszPKCS7FileName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def createPKCS10(DNName: win32more.Foundation.BSTR, Usage: win32more.Foundation.BSTR, pPKCS10: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def acceptPKCS7(PKCS7: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def getCertFromPKCS7(wszPKCS7: win32more.Foundation.BSTR, pbstrCert: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def enumProviders(dwIndex: Int32, dwFlags: Int32, pbstrProvName: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def enumContainers(dwIndex: Int32, pbstr: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def freeRequestInfo(PKCS7OrPKCS10: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def get_MyStoreName(pbstrName: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def put_MyStoreName(bstrName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(17)
    def get_MyStoreType(pbstrType: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(18)
    def put_MyStoreType(bstrType: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(19)
    def get_MyStoreFlags(pdwFlags: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(20)
    def put_MyStoreFlags(dwFlags: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(21)
    def get_CAStoreName(pbstrName: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(22)
    def put_CAStoreName(bstrName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(23)
    def get_CAStoreType(pbstrType: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(24)
    def put_CAStoreType(bstrType: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(25)
    def get_CAStoreFlags(pdwFlags: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(26)
    def put_CAStoreFlags(dwFlags: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(27)
    def get_RootStoreName(pbstrName: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(28)
    def put_RootStoreName(bstrName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(29)
    def get_RootStoreType(pbstrType: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(30)
    def put_RootStoreType(bstrType: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(31)
    def get_RootStoreFlags(pdwFlags: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(32)
    def put_RootStoreFlags(dwFlags: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(33)
    def get_RequestStoreName(pbstrName: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(34)
    def put_RequestStoreName(bstrName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(35)
    def get_RequestStoreType(pbstrType: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(36)
    def put_RequestStoreType(bstrType: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(37)
    def get_RequestStoreFlags(pdwFlags: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(38)
    def put_RequestStoreFlags(dwFlags: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(39)
    def get_ContainerName(pbstrContainer: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(40)
    def put_ContainerName(bstrContainer: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(41)
    def get_ProviderName(pbstrProvider: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(42)
    def put_ProviderName(bstrProvider: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(43)
    def get_ProviderType(pdwType: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(44)
    def put_ProviderType(dwType: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(45)
    def get_KeySpec(pdw: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(46)
    def put_KeySpec(dw: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(47)
    def get_ProviderFlags(pdwFlags: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(48)
    def put_ProviderFlags(dwFlags: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(49)
    def get_UseExistingKeySet(fUseExistingKeys: POINTER(win32more.Foundation.BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(50)
    def put_UseExistingKeySet(fUseExistingKeys: win32more.Foundation.BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(51)
    def get_GenKeyFlags(pdwFlags: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(52)
    def put_GenKeyFlags(dwFlags: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(53)
    def get_DeleteRequestCert(fDelete: POINTER(win32more.Foundation.BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(54)
    def put_DeleteRequestCert(fDelete: win32more.Foundation.BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(55)
    def get_WriteCertToCSP(fBool: POINTER(win32more.Foundation.BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(56)
    def put_WriteCertToCSP(fBool: win32more.Foundation.BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(57)
    def get_SPCFileName(pbstr: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(58)
    def put_SPCFileName(bstr: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(59)
    def get_PVKFileName(pbstr: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(60)
    def put_PVKFileName(bstr: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(61)
    def get_HashAlgorithm(pbstr: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(62)
    def put_HashAlgorithm(bstr: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
class ICEnroll2(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICEnroll
    Guid = Guid('704ca730-c90b-11d1-9b-ec-00-c0-4f-c2-95-e1')
    @commethod(63)
    def addCertTypeToRequest(CertType: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(64)
    def addNameValuePairToSignature(Name: win32more.Foundation.BSTR, Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(65)
    def get_WriteCertToUserDS(fBool: POINTER(win32more.Foundation.BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(66)
    def put_WriteCertToUserDS(fBool: win32more.Foundation.BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(67)
    def get_EnableT61DNEncoding(fBool: POINTER(win32more.Foundation.BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(68)
    def put_EnableT61DNEncoding(fBool: win32more.Foundation.BOOL) -> win32more.Foundation.HRESULT: ...
class ICEnroll3(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICEnroll2
    Guid = Guid('c28c2d95-b7de-11d2-a4-21-00-c0-4f-79-fe-8e')
    @commethod(69)
    def InstallPKCS7(PKCS7: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(70)
    def Reset() -> win32more.Foundation.HRESULT: ...
    @commethod(71)
    def GetSupportedKeySpec(pdwKeySpec: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(72)
    def GetKeyLen(fMin: win32more.Foundation.BOOL, fExchange: win32more.Foundation.BOOL, pdwKeySize: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(73)
    def EnumAlgs(dwIndex: Int32, algClass: Int32, pdwAlgID: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(74)
    def GetAlgName(algID: Int32, pbstr: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(75)
    def put_ReuseHardwareKeyIfUnableToGenNew(fReuseHardwareKeyIfUnableToGenNew: win32more.Foundation.BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(76)
    def get_ReuseHardwareKeyIfUnableToGenNew(fReuseHardwareKeyIfUnableToGenNew: POINTER(win32more.Foundation.BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(77)
    def put_HashAlgID(hashAlgID: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(78)
    def get_HashAlgID(hashAlgID: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(79)
    def put_LimitExchangeKeyToEncipherment(fLimitExchangeKeyToEncipherment: win32more.Foundation.BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(80)
    def get_LimitExchangeKeyToEncipherment(fLimitExchangeKeyToEncipherment: POINTER(win32more.Foundation.BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(81)
    def put_EnableSMIMECapabilities(fEnableSMIMECapabilities: win32more.Foundation.BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(82)
    def get_EnableSMIMECapabilities(fEnableSMIMECapabilities: POINTER(win32more.Foundation.BOOL)) -> win32more.Foundation.HRESULT: ...
class ICEnroll4(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICEnroll3
    Guid = Guid('c1f1188a-2eb5-4a80-84-1b-7e-72-9a-35-6d-90')
    @commethod(83)
    def put_PrivateKeyArchiveCertificate(bstrCert: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(84)
    def get_PrivateKeyArchiveCertificate(pbstrCert: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(85)
    def put_ThumbPrint(bstrThumbPrint: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(86)
    def get_ThumbPrint(pbstrThumbPrint: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(87)
    def binaryToString(Flags: Int32, strBinary: win32more.Foundation.BSTR, pstrEncoded: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(88)
    def stringToBinary(Flags: Int32, strEncoded: win32more.Foundation.BSTR, pstrBinary: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(89)
    def addExtensionToRequest(Flags: Int32, strName: win32more.Foundation.BSTR, strValue: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(90)
    def addAttributeToRequest(Flags: Int32, strName: win32more.Foundation.BSTR, strValue: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(91)
    def addNameValuePairToRequest(Flags: Int32, strName: win32more.Foundation.BSTR, strValue: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(92)
    def resetExtensions() -> win32more.Foundation.HRESULT: ...
    @commethod(93)
    def resetAttributes() -> win32more.Foundation.HRESULT: ...
    @commethod(94)
    def createRequest(Flags: win32more.Security.Cryptography.Certificates.CERT_CREATE_REQUEST_FLAGS, strDNName: win32more.Foundation.BSTR, Usage: win32more.Foundation.BSTR, pstrRequest: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(95)
    def createFileRequest(Flags: win32more.Security.Cryptography.Certificates.CERT_CREATE_REQUEST_FLAGS, strDNName: win32more.Foundation.BSTR, strUsage: win32more.Foundation.BSTR, strRequestFileName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(96)
    def acceptResponse(strResponse: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(97)
    def acceptFileResponse(strResponseFileName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(98)
    def getCertFromResponse(strResponse: win32more.Foundation.BSTR, pstrCert: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(99)
    def getCertFromFileResponse(strResponseFileName: win32more.Foundation.BSTR, pstrCert: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(100)
    def createPFX(strPassword: win32more.Foundation.BSTR, pstrPFX: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(101)
    def createFilePFX(strPassword: win32more.Foundation.BSTR, strPFXFileName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(102)
    def setPendingRequestInfo(lRequestID: Int32, strCADNS: win32more.Foundation.BSTR, strCAName: win32more.Foundation.BSTR, strFriendlyName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(103)
    def enumPendingRequest(lIndex: Int32, lDesiredProperty: win32more.Security.Cryptography.Certificates.PENDING_REQUEST_DESIRED_PROPERTY, pvarProperty: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(104)
    def removePendingRequest(strThumbprint: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(105)
    def GetKeyLenEx(lSizeSpec: win32more.Security.Cryptography.Certificates.XEKL_KEYSIZE, lKeySpec: win32more.Security.Cryptography.Certificates.XEKL_KEYSPEC, pdwKeySize: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(106)
    def InstallPKCS7Ex(PKCS7: win32more.Foundation.BSTR, plCertInstalled: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(107)
    def addCertTypeToRequestEx(lType: win32more.Security.Cryptography.Certificates.ADDED_CERT_TYPE, bstrOIDOrName: win32more.Foundation.BSTR, lMajorVersion: Int32, fMinorVersion: win32more.Foundation.BOOL, lMinorVersion: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(108)
    def getProviderType(strProvName: win32more.Foundation.BSTR, plProvType: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(109)
    def put_SignerCertificate(bstrCert: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(110)
    def put_ClientId(lClientId: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(111)
    def get_ClientId(plClientId: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(112)
    def addBlobPropertyToCertificate(lPropertyId: Int32, lReserved: Int32, bstrProperty: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(113)
    def resetBlobProperties() -> win32more.Foundation.HRESULT: ...
    @commethod(114)
    def put_IncludeSubjectKeyID(fInclude: win32more.Foundation.BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(115)
    def get_IncludeSubjectKeyID(pfInclude: POINTER(win32more.Foundation.BOOL)) -> win32more.Foundation.HRESULT: ...
class ICertAdmin(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('34df6950-7fb6-11d0-88-17-00-a0-c9-03-b8-3c')
    @commethod(7)
    def IsValidCertificate(strConfig: win32more.Foundation.BSTR, strSerialNumber: win32more.Foundation.BSTR, pDisposition: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def GetRevocationReason(pReason: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def RevokeCertificate(strConfig: win32more.Foundation.BSTR, strSerialNumber: win32more.Foundation.BSTR, Reason: Int32, Date: Double) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def SetRequestAttributes(strConfig: win32more.Foundation.BSTR, RequestId: Int32, strAttributes: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def SetCertificateExtension(strConfig: win32more.Foundation.BSTR, RequestId: Int32, strExtensionName: win32more.Foundation.BSTR, Type: win32more.Security.Cryptography.Certificates.CERT_PROPERTY_TYPE, Flags: Int32, pvarValue: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def DenyRequest(strConfig: win32more.Foundation.BSTR, RequestId: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def ResubmitRequest(strConfig: win32more.Foundation.BSTR, RequestId: Int32, pDisposition: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def PublishCRL(strConfig: win32more.Foundation.BSTR, Date: Double) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def GetCRL(strConfig: win32more.Foundation.BSTR, Flags: Int32, pstrCRL: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def ImportCertificate(strConfig: win32more.Foundation.BSTR, strCertificate: win32more.Foundation.BSTR, Flags: win32more.Security.Cryptography.Certificates.CERT_IMPORT_FLAGS, pRequestId: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
class ICertAdmin2(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertAdmin
    Guid = Guid('f7c3ac41-b8ce-4fb4-aa-58-3d-1d-c0-e3-6b-39')
    @commethod(17)
    def PublishCRLs(strConfig: win32more.Foundation.BSTR, Date: Double, CRLFlags: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(18)
    def GetCAProperty(strConfig: win32more.Foundation.BSTR, PropId: Int32, PropIndex: Int32, PropType: Int32, Flags: Int32, pvarPropertyValue: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(19)
    def SetCAProperty(strConfig: win32more.Foundation.BSTR, PropId: Int32, PropIndex: Int32, PropType: win32more.Security.Cryptography.Certificates.CERT_PROPERTY_TYPE, pvarPropertyValue: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(20)
    def GetCAPropertyFlags(strConfig: win32more.Foundation.BSTR, PropId: Int32, pPropFlags: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(21)
    def GetCAPropertyDisplayName(strConfig: win32more.Foundation.BSTR, PropId: Int32, pstrDisplayName: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(22)
    def GetArchivedKey(strConfig: win32more.Foundation.BSTR, RequestId: Int32, Flags: Int32, pstrArchivedKey: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(23)
    def GetConfigEntry(strConfig: win32more.Foundation.BSTR, strNodePath: win32more.Foundation.BSTR, strEntryName: win32more.Foundation.BSTR, pvarEntry: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(24)
    def SetConfigEntry(strConfig: win32more.Foundation.BSTR, strNodePath: win32more.Foundation.BSTR, strEntryName: win32more.Foundation.BSTR, pvarEntry: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(25)
    def ImportKey(strConfig: win32more.Foundation.BSTR, RequestId: Int32, strCertHash: win32more.Foundation.BSTR, Flags: win32more.Security.Cryptography.Certificates.CERT_IMPORT_FLAGS, strKey: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(26)
    def GetMyRoles(strConfig: win32more.Foundation.BSTR, pRoles: POINTER(win32more.Security.Cryptography.Certificates.CERTADMIN_GET_ROLES_FLAGS)) -> win32more.Foundation.HRESULT: ...
    @commethod(27)
    def DeleteRow(strConfig: win32more.Foundation.BSTR, Flags: win32more.Security.Cryptography.Certificates.CERT_DELETE_ROW_FLAGS, Date: Double, Table: win32more.Security.Cryptography.Certificates.CVRC_TABLE, RowId: Int32, pcDeleted: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
class ICertConfig(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('372fce34-4324-11d0-88-10-00-a0-c9-03-b8-3c')
    @commethod(7)
    def Reset(Index: Int32, pCount: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def Next(pIndex: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def GetField(strFieldName: win32more.Foundation.BSTR, pstrOut: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def GetConfig(Flags: Int32, pstrOut: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class ICertConfig2(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertConfig
    Guid = Guid('7a18edde-7e78-4163-8d-ed-78-e2-c9-ce-e9-24')
    @commethod(11)
    def SetSharedFolder(strSharedFolder: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
class ICertEncodeAltName(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('1c9a8c70-1271-11d1-9b-d4-00-c0-4f-b6-83-fa')
    @commethod(7)
    def Decode(strBinary: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def GetNameCount(pNameCount: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def GetNameChoice(NameIndex: Int32, pNameChoice: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def GetName(NameIndex: Int32, pstrName: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def Reset(NameCount: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def SetNameEntry(NameIndex: Int32, NameChoice: win32more.Security.Cryptography.Certificates.CERT_ALT_NAME, strName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def Encode(pstrBinary: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class ICertEncodeAltName2(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertEncodeAltName
    Guid = Guid('f67fe177-5ef1-4535-b4-ce-29-df-15-e2-e0-c3')
    @commethod(14)
    def DecodeBlob(strEncodedData: win32more.Foundation.BSTR, Encoding: win32more.Security.Cryptography.Certificates.EncodingType) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def EncodeBlob(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pstrEncodedData: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def GetNameBlob(NameIndex: Int32, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pstrName: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(17)
    def SetNameEntryBlob(NameIndex: Int32, NameChoice: Int32, strName: win32more.Foundation.BSTR, Encoding: win32more.Security.Cryptography.Certificates.EncodingType) -> win32more.Foundation.HRESULT: ...
class ICertEncodeBitString(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('6db525be-1278-11d1-9b-d4-00-c0-4f-b6-83-fa')
    @commethod(7)
    def Decode(strBinary: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def GetBitCount(pBitCount: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def GetBitString(pstrBitString: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def Encode(BitCount: Int32, strBitString: win32more.Foundation.BSTR, pstrBinary: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class ICertEncodeBitString2(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertEncodeBitString
    Guid = Guid('e070d6e7-23ef-4dd2-82-42-eb-d9-c9-28-cb-30')
    @commethod(11)
    def DecodeBlob(strEncodedData: win32more.Foundation.BSTR, Encoding: win32more.Security.Cryptography.Certificates.EncodingType) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def EncodeBlob(BitCount: Int32, strBitString: win32more.Foundation.BSTR, EncodingIn: win32more.Security.Cryptography.Certificates.EncodingType, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pstrEncodedData: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def GetBitStringBlob(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pstrBitString: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class ICertEncodeCRLDistInfo(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('01958640-bbff-11d0-88-25-00-a0-c9-03-b8-3c')
    @commethod(7)
    def Decode(strBinary: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def GetDistPointCount(pDistPointCount: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def GetNameCount(DistPointIndex: Int32, pNameCount: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def GetNameChoice(DistPointIndex: Int32, NameIndex: Int32, pNameChoice: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def GetName(DistPointIndex: Int32, NameIndex: Int32, pstrName: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Reset(DistPointCount: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def SetNameCount(DistPointIndex: Int32, NameCount: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def SetNameEntry(DistPointIndex: Int32, NameIndex: Int32, NameChoice: win32more.Security.Cryptography.Certificates.CERT_ALT_NAME, strName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def Encode(pstrBinary: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class ICertEncodeCRLDistInfo2(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertEncodeCRLDistInfo
    Guid = Guid('b4275d4b-3e30-446f-ad-36-09-d0-31-20-b0-78')
    @commethod(16)
    def DecodeBlob(strEncodedData: win32more.Foundation.BSTR, Encoding: win32more.Security.Cryptography.Certificates.EncodingType) -> win32more.Foundation.HRESULT: ...
    @commethod(17)
    def EncodeBlob(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pstrEncodedData: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class ICertEncodeDateArray(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('2f9469a0-a470-11d0-88-21-00-a0-c9-03-b8-3c')
    @commethod(7)
    def Decode(strBinary: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def GetCount(pCount: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def GetValue(Index: Int32, pValue: POINTER(Double)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def Reset(Count: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def SetValue(Index: Int32, Value: Double) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Encode(pstrBinary: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class ICertEncodeDateArray2(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertEncodeDateArray
    Guid = Guid('99a4edb5-2b8e-448d-bf-95-bb-a8-d7-78-9d-c8')
    @commethod(13)
    def DecodeBlob(strEncodedData: win32more.Foundation.BSTR, Encoding: win32more.Security.Cryptography.Certificates.EncodingType) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def EncodeBlob(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pstrEncodedData: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class ICertEncodeLongArray(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('15e2f230-a0a2-11d0-88-21-00-a0-c9-03-b8-3c')
    @commethod(7)
    def Decode(strBinary: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def GetCount(pCount: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def GetValue(Index: Int32, pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def Reset(Count: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def SetValue(Index: Int32, Value: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Encode(pstrBinary: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class ICertEncodeLongArray2(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertEncodeLongArray
    Guid = Guid('4efde84a-bd9b-4fc2-a1-08-c3-47-d4-78-84-0f')
    @commethod(13)
    def DecodeBlob(strEncodedData: win32more.Foundation.BSTR, Encoding: win32more.Security.Cryptography.Certificates.EncodingType) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def EncodeBlob(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pstrEncodedData: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class ICertEncodeStringArray(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('12a88820-7494-11d0-88-16-00-a0-c9-03-b8-3c')
    @commethod(7)
    def Decode(strBinary: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def GetStringType(pStringType: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def GetCount(pCount: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def GetValue(Index: Int32, pstr: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def Reset(Count: Int32, StringType: win32more.Security.Cryptography.CERT_RDN_ATTR_VALUE_TYPE) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def SetValue(Index: Int32, str: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def Encode(pstrBinary: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class ICertEncodeStringArray2(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertEncodeStringArray
    Guid = Guid('9c680d93-9b7d-4e95-90-18-4f-fe-10-ba-5a-da')
    @commethod(14)
    def DecodeBlob(strEncodedData: win32more.Foundation.BSTR, Encoding: win32more.Security.Cryptography.Certificates.EncodingType) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def EncodeBlob(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pstrEncodedData: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class ICertExit(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('e19ae1a0-7364-11d0-88-16-00-a0-c9-03-b8-3c')
    @commethod(7)
    def Initialize(strConfig: win32more.Foundation.BSTR, pEventMask: POINTER(win32more.Security.Cryptography.Certificates.CERT_EXIT_EVENT_MASK)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def Notify(ExitEvent: Int32, Context: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def GetDescription(pstrDescription: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class ICertExit2(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertExit
    Guid = Guid('0abf484b-d049-464d-a7-ed-55-2e-75-29-b0-ff')
    @commethod(10)
    def GetManageModule(ppManageModule: POINTER(win32more.Security.Cryptography.Certificates.ICertManageModule_head)) -> win32more.Foundation.HRESULT: ...
class ICertGetConfig(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('c7ea09c0-ce17-11d0-88-33-00-a0-c9-03-b8-3c')
    @commethod(7)
    def GetConfig(Flags: win32more.Security.Cryptography.Certificates.CERT_GET_CONFIG_FLAGS, pstrOut: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class ICertificateAttestationChallenge(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('6f175a7c-4a3a-40ae-9d-ba-59-2f-d6-bb-f9-b8')
    @commethod(7)
    def Initialize(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strPendingFullCmcResponseWithChallenge: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def DecryptChallenge(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pstrEnvelopedPkcs7ReencryptedToCA: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get_RequestID(pstrRequestID: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class ICertificateAttestationChallenge2(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertificateAttestationChallenge
    Guid = Guid('4631334d-e266-47d6-bd-79-be-53-cb-2e-27-53')
    @commethod(10)
    def put_KeyContainerName(Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def put_KeyBlob(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
class ICertificatePolicies(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab31f-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def get_ItemByIndex(Index: Int32, pVal: POINTER(win32more.Security.Cryptography.Certificates.ICertificatePolicy_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(pVal: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(pVal: POINTER(win32more.System.Com.IUnknown_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def Add(pVal: win32more.Security.Cryptography.Certificates.ICertificatePolicy_head) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(Index: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Clear() -> win32more.Foundation.HRESULT: ...
class ICertificatePolicy(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab31e-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def Initialize(pValue: win32more.Security.Cryptography.Certificates.IObjectId_head) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_ObjectId(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectId_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get_PolicyQualifiers(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IPolicyQualifiers_head)) -> win32more.Foundation.HRESULT: ...
class ICertificationAuthorities(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('13b79005-2181-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def get_ItemByIndex(Index: Int32, pVal: POINTER(win32more.Security.Cryptography.Certificates.ICertificationAuthority_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(pVal: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(pVal: POINTER(win32more.System.Com.IUnknown_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def Add(pVal: win32more.Security.Cryptography.Certificates.ICertificationAuthority_head) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(Index: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Clear() -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def ComputeSiteCosts() -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_ItemByName(strName: win32more.Foundation.BSTR, ppValue: POINTER(win32more.Security.Cryptography.Certificates.ICertificationAuthority_head)) -> win32more.Foundation.HRESULT: ...
class ICertificationAuthority(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('835d1f61-1e95-4bc8-b4-d3-97-6c-42-b9-68-f7')
    @commethod(7)
    def get_Property(property: win32more.Security.Cryptography.Certificates.EnrollmentCAProperty, pValue: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
class ICertManageModule(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('e7d7ad42-bd3d-11d1-9a-4d-00-c0-4f-c2-97-eb')
    @commethod(7)
    def GetProperty(strConfig: win32more.Foundation.BSTR, strStorageLocation: win32more.Foundation.BSTR, strPropertyName: win32more.Foundation.BSTR, Flags: Int32, pvarProperty: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def SetProperty(strConfig: win32more.Foundation.BSTR, strStorageLocation: win32more.Foundation.BSTR, strPropertyName: win32more.Foundation.BSTR, Flags: Int32, pvarProperty: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def Configure(strConfig: win32more.Foundation.BSTR, strStorageLocation: win32more.Foundation.BSTR, Flags: Int32) -> win32more.Foundation.HRESULT: ...
class ICertPolicy(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('38bb5a00-7636-11d0-b4-13-00-a0-c9-1b-bf-8c')
    @commethod(7)
    def Initialize(strConfig: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def VerifyRequest(strConfig: win32more.Foundation.BSTR, Context: Int32, bNewRequest: Int32, Flags: Int32, pDisposition: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def GetDescription(pstrDescription: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def ShutDown() -> win32more.Foundation.HRESULT: ...
class ICertPolicy2(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertPolicy
    Guid = Guid('3db4910e-8001-4bf1-aa-1b-f4-3a-80-83-17-a0')
    @commethod(11)
    def GetManageModule(ppManageModule: POINTER(win32more.Security.Cryptography.Certificates.ICertManageModule_head)) -> win32more.Foundation.HRESULT: ...
class ICertProperties(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab32f-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def get_ItemByIndex(Index: Int32, pVal: POINTER(win32more.Security.Cryptography.Certificates.ICertProperty_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(pVal: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(pVal: POINTER(win32more.System.Com.IUnknown_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def Add(pVal: win32more.Security.Cryptography.Certificates.ICertProperty_head) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(Index: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Clear() -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeFromCertificate(MachineContext: win32more.Foundation.VARIANT_BOOL, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strCertificate: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
class ICertProperty(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab32e-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def InitializeFromCertificate(MachineContext: win32more.Foundation.VARIANT_BOOL, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strCertificate: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def InitializeDecode(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get_PropertyId(pValue: POINTER(win32more.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def put_PropertyId(Value: win32more.Security.Cryptography.Certificates.CERTENROLL_PROPERTYID) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def get_RawData(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def RemoveFromCertificate(MachineContext: win32more.Foundation.VARIANT_BOOL, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strCertificate: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def SetValueOnCertificate(MachineContext: win32more.Foundation.VARIANT_BOOL, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strCertificate: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
class ICertPropertyArchived(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertProperty
    Guid = Guid('728ab337-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(14)
    def Initialize(ArchivedValue: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def get_Archived(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
class ICertPropertyArchivedKeyHash(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertProperty
    Guid = Guid('728ab33b-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(14)
    def Initialize(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strArchivedKeyHashValue: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def get_ArchivedKeyHash(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class ICertPropertyAutoEnroll(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertProperty
    Guid = Guid('728ab332-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(14)
    def Initialize(strTemplateName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def get_TemplateName(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class ICertPropertyBackedUp(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertProperty
    Guid = Guid('728ab338-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(14)
    def InitializeFromCurrentTime(BackedUpValue: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def Initialize(BackedUpValue: win32more.Foundation.VARIANT_BOOL, Date: Double) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def get_BackedUpValue(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(17)
    def get_BackedUpTime(pDate: POINTER(Double)) -> win32more.Foundation.HRESULT: ...
class ICertPropertyDescription(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertProperty
    Guid = Guid('728ab331-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(14)
    def Initialize(strDescription: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def get_Description(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class ICertPropertyEnrollment(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertProperty
    Guid = Guid('728ab339-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(14)
    def Initialize(RequestId: Int32, strCADnsName: win32more.Foundation.BSTR, strCAName: win32more.Foundation.BSTR, strFriendlyName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def get_RequestId(pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def get_CADnsName(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(17)
    def get_CAName(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(18)
    def get_FriendlyName(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class ICertPropertyEnrollmentPolicyServer(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertProperty
    Guid = Guid('728ab34a-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(14)
    def Initialize(PropertyFlags: win32more.Security.Cryptography.Certificates.EnrollmentPolicyServerPropertyFlags, AuthFlags: win32more.Security.Cryptography.Certificates.X509EnrollmentAuthFlags, EnrollmentServerAuthFlags: win32more.Security.Cryptography.Certificates.X509EnrollmentAuthFlags, UrlFlags: win32more.Security.Cryptography.Certificates.PolicyServerUrlFlags, strRequestId: win32more.Foundation.BSTR, strUrl: win32more.Foundation.BSTR, strId: win32more.Foundation.BSTR, strEnrollmentServerUrl: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def GetPolicyServerUrl(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def GetPolicyServerId(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(17)
    def GetEnrollmentServerUrl(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(18)
    def GetRequestIdString(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(19)
    def GetPropertyFlags(pValue: POINTER(win32more.Security.Cryptography.Certificates.EnrollmentPolicyServerPropertyFlags)) -> win32more.Foundation.HRESULT: ...
    @commethod(20)
    def GetUrlFlags(pValue: POINTER(win32more.Security.Cryptography.Certificates.PolicyServerUrlFlags)) -> win32more.Foundation.HRESULT: ...
    @commethod(21)
    def GetAuthentication(pValue: POINTER(win32more.Security.Cryptography.Certificates.X509EnrollmentAuthFlags)) -> win32more.Foundation.HRESULT: ...
    @commethod(22)
    def GetEnrollmentServerAuthentication(pValue: POINTER(win32more.Security.Cryptography.Certificates.X509EnrollmentAuthFlags)) -> win32more.Foundation.HRESULT: ...
class ICertPropertyFriendlyName(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertProperty
    Guid = Guid('728ab330-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(14)
    def Initialize(strFriendlyName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def get_FriendlyName(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class ICertPropertyKeyProvInfo(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertProperty
    Guid = Guid('728ab336-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(14)
    def Initialize(pValue: win32more.Security.Cryptography.Certificates.IX509PrivateKey_head) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def get_PrivateKey(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509PrivateKey_head)) -> win32more.Foundation.HRESULT: ...
class ICertPropertyRenewal(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertProperty
    Guid = Guid('728ab33a-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(14)
    def Initialize(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strRenewalValue: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def InitializeFromCertificateHash(MachineContext: win32more.Foundation.VARIANT_BOOL, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strCertificate: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def get_Renewal(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class ICertPropertyRequestOriginator(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertProperty
    Guid = Guid('728ab333-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(14)
    def Initialize(strRequestOriginator: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def InitializeFromLocalRequestOriginator() -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def get_RequestOriginator(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class ICertPropertySHA1Hash(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertProperty
    Guid = Guid('728ab334-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(14)
    def Initialize(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strRenewalValue: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def get_SHA1Hash(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class ICertRequest(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('014e4840-5523-11d0-88-12-00-a0-c9-03-b8-3c')
    @commethod(7)
    def Submit(Flags: Int32, strRequest: win32more.Foundation.BSTR, strAttributes: win32more.Foundation.BSTR, strConfig: win32more.Foundation.BSTR, pDisposition: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def RetrievePending(RequestId: Int32, strConfig: win32more.Foundation.BSTR, pDisposition: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def GetLastStatus(pStatus: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def GetRequestId(pRequestId: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def GetDispositionMessage(pstrDispositionMessage: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def GetCACertificate(fExchangeCertificate: Int32, strConfig: win32more.Foundation.BSTR, Flags: Int32, pstrCertificate: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def GetCertificate(Flags: Int32, pstrCertificate: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class ICertRequest2(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertRequest
    Guid = Guid('a4772988-4a85-4fa9-82-4e-b5-cf-5c-16-40-5a')
    @commethod(14)
    def GetIssuedCertificate(strConfig: win32more.Foundation.BSTR, RequestId: Int32, strSerialNumber: win32more.Foundation.BSTR, pDisposition: POINTER(win32more.Security.Cryptography.Certificates.CR_DISP)) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def GetErrorMessageText(hrMessage: Int32, Flags: Int32, pstrErrorMessageText: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def GetCAProperty(strConfig: win32more.Foundation.BSTR, PropId: Int32, PropIndex: Int32, PropType: Int32, Flags: Int32, pvarPropertyValue: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(17)
    def GetCAPropertyFlags(strConfig: win32more.Foundation.BSTR, PropId: Int32, pPropFlags: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(18)
    def GetCAPropertyDisplayName(strConfig: win32more.Foundation.BSTR, PropId: Int32, pstrDisplayName: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(19)
    def GetFullResponseProperty(PropId: win32more.Security.Cryptography.Certificates.FULL_RESPONSE_PROPERTY_ID, PropIndex: Int32, PropType: win32more.Security.Cryptography.Certificates.CERT_PROPERTY_TYPE, Flags: win32more.Security.Cryptography.Certificates.CERT_REQUEST_OUT_TYPE, pvarPropertyValue: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
class ICertRequest3(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertRequest2
    Guid = Guid('afc8f92b-33a2-4861-bf-36-29-33-b7-cd-67-b3')
    @commethod(20)
    def SetCredential(hWnd: Int32, AuthType: win32more.Security.Cryptography.Certificates.X509EnrollmentAuthFlags, strCredential: win32more.Foundation.BSTR, strPassword: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(21)
    def GetRequestIdString(pstrRequestId: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(22)
    def GetIssuedCertificate2(strConfig: win32more.Foundation.BSTR, strRequestId: win32more.Foundation.BSTR, strSerialNumber: win32more.Foundation.BSTR, pDisposition: POINTER(win32more.Security.Cryptography.Certificates.CR_DISP)) -> win32more.Foundation.HRESULT: ...
    @commethod(23)
    def GetRefreshPolicy(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
class ICertRequestD(c_void_p):
    extends: win32more.System.Com.IUnknown
    Guid = Guid('d99e6e70-fc88-11d0-b4-98-00-a0-c9-03-12-f3')
    @commethod(3)
    def Request(dwFlags: UInt32, pwszAuthority: win32more.Foundation.PWSTR, pdwRequestId: POINTER(UInt32), pdwDisposition: POINTER(UInt32), pwszAttributes: win32more.Foundation.PWSTR, pctbRequest: POINTER(win32more.Security.Cryptography.Certificates.CERTTRANSBLOB_head), pctbCertChain: POINTER(win32more.Security.Cryptography.Certificates.CERTTRANSBLOB_head), pctbEncodedCert: POINTER(win32more.Security.Cryptography.Certificates.CERTTRANSBLOB_head), pctbDispositionMessage: POINTER(win32more.Security.Cryptography.Certificates.CERTTRANSBLOB_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(4)
    def GetCACert(fchain: UInt32, pwszAuthority: win32more.Foundation.PWSTR, pctbOut: POINTER(win32more.Security.Cryptography.Certificates.CERTTRANSBLOB_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(5)
    def Ping(pwszAuthority: win32more.Foundation.PWSTR) -> win32more.Foundation.HRESULT: ...
class ICertRequestD2(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertRequestD
    Guid = Guid('5422fd3a-d4b8-4cef-a1-2e-e8-7d-4c-a2-2e-90')
    @commethod(6)
    def Request2(pwszAuthority: win32more.Foundation.PWSTR, dwFlags: UInt32, pwszSerialNumber: win32more.Foundation.PWSTR, pdwRequestId: POINTER(UInt32), pdwDisposition: POINTER(UInt32), pwszAttributes: win32more.Foundation.PWSTR, pctbRequest: POINTER(win32more.Security.Cryptography.Certificates.CERTTRANSBLOB_head), pctbFullResponse: POINTER(win32more.Security.Cryptography.Certificates.CERTTRANSBLOB_head), pctbEncodedCert: POINTER(win32more.Security.Cryptography.Certificates.CERTTRANSBLOB_head), pctbDispositionMessage: POINTER(win32more.Security.Cryptography.Certificates.CERTTRANSBLOB_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(7)
    def GetCAProperty(pwszAuthority: win32more.Foundation.PWSTR, PropId: Int32, PropIndex: Int32, PropType: Int32, pctbPropertyValue: POINTER(win32more.Security.Cryptography.Certificates.CERTTRANSBLOB_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def GetCAPropertyInfo(pwszAuthority: win32more.Foundation.PWSTR, pcProperty: POINTER(Int32), pctbPropInfo: POINTER(win32more.Security.Cryptography.Certificates.CERTTRANSBLOB_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def Ping2(pwszAuthority: win32more.Foundation.PWSTR) -> win32more.Foundation.HRESULT: ...
class ICertServerExit(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('4ba9eb90-732c-11d0-88-16-00-a0-c9-03-b8-3c')
    @commethod(7)
    def SetContext(Context: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def GetRequestProperty(strPropertyName: win32more.Foundation.BSTR, PropertyType: Int32, pvarPropertyValue: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def GetRequestAttribute(strAttributeName: win32more.Foundation.BSTR, pstrAttributeValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def GetCertificateProperty(strPropertyName: win32more.Foundation.BSTR, PropertyType: Int32, pvarPropertyValue: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def GetCertificateExtension(strExtensionName: win32more.Foundation.BSTR, Type: Int32, pvarValue: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def GetCertificateExtensionFlags(pExtFlags: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def EnumerateExtensionsSetup(Flags: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def EnumerateExtensions(pstrExtensionName: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def EnumerateExtensionsClose() -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def EnumerateAttributesSetup(Flags: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(17)
    def EnumerateAttributes(pstrAttributeName: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(18)
    def EnumerateAttributesClose() -> win32more.Foundation.HRESULT: ...
class ICertServerPolicy(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('aa000922-ffbe-11cf-88-00-00-a0-c9-03-b8-3c')
    @commethod(7)
    def SetContext(Context: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def GetRequestProperty(strPropertyName: win32more.Foundation.BSTR, PropertyType: Int32, pvarPropertyValue: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def GetRequestAttribute(strAttributeName: win32more.Foundation.BSTR, pstrAttributeValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def GetCertificateProperty(strPropertyName: win32more.Foundation.BSTR, PropertyType: win32more.Security.Cryptography.Certificates.CERT_PROPERTY_TYPE, pvarPropertyValue: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def SetCertificateProperty(strPropertyName: win32more.Foundation.BSTR, PropertyType: Int32, pvarPropertyValue: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def GetCertificateExtension(strExtensionName: win32more.Foundation.BSTR, Type: win32more.Security.Cryptography.Certificates.CERT_PROPERTY_TYPE, pvarValue: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def GetCertificateExtensionFlags(pExtFlags: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def SetCertificateExtension(strExtensionName: win32more.Foundation.BSTR, Type: Int32, ExtFlags: Int32, pvarValue: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def EnumerateExtensionsSetup(Flags: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def EnumerateExtensions(pstrExtensionName: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(17)
    def EnumerateExtensionsClose() -> win32more.Foundation.HRESULT: ...
    @commethod(18)
    def EnumerateAttributesSetup(Flags: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(19)
    def EnumerateAttributes(pstrAttributeName: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(20)
    def EnumerateAttributesClose() -> win32more.Foundation.HRESULT: ...
class ICertView(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('c3fac344-1e84-11d1-9b-d6-00-c0-4f-b6-83-fa')
    @commethod(7)
    def OpenConnection(strConfig: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def EnumCertViewColumn(fResultColumn: win32more.Security.Cryptography.Certificates.CVRC_COLUMN, ppenum: POINTER(win32more.Security.Cryptography.Certificates.IEnumCERTVIEWCOLUMN_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def GetColumnCount(fResultColumn: win32more.Security.Cryptography.Certificates.CVRC_COLUMN, pcColumn: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def GetColumnIndex(fResultColumn: win32more.Security.Cryptography.Certificates.CVRC_COLUMN, strColumnName: win32more.Foundation.BSTR, pColumnIndex: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def SetResultColumnCount(cResultColumn: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def SetResultColumn(ColumnIndex: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def SetRestriction(ColumnIndex: win32more.Security.Cryptography.Certificates.CERT_VIEW_COLUMN_INDEX, SeekOperator: win32more.Security.Cryptography.Certificates.CERT_VIEW_SEEK_OPERATOR_FLAGS, SortOrder: Int32, pvarValue: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def OpenView(ppenum: POINTER(win32more.Security.Cryptography.Certificates.IEnumCERTVIEWROW_head)) -> win32more.Foundation.HRESULT: ...
class ICertView2(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.ICertView
    Guid = Guid('d594b282-8851-4b61-9c-66-3e-da-df-84-88-63')
    @commethod(15)
    def SetTable(Table: win32more.Security.Cryptography.Certificates.CVRC_TABLE) -> win32more.Foundation.HRESULT: ...
class ICryptAttribute(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab32c-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def InitializeFromObjectId(pObjectId: win32more.Security.Cryptography.Certificates.IObjectId_head) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def InitializeFromValues(pAttributes: win32more.Security.Cryptography.Certificates.IX509Attributes_head) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get_ObjectId(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectId_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def get_Values(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509Attributes_head)) -> win32more.Foundation.HRESULT: ...
class ICryptAttributes(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab32d-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def get_ItemByIndex(Index: Int32, pVal: POINTER(win32more.Security.Cryptography.Certificates.ICryptAttribute_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(pVal: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(pVal: POINTER(win32more.System.Com.IUnknown_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def Add(pVal: win32more.Security.Cryptography.Certificates.ICryptAttribute_head) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(Index: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Clear() -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def get_IndexByObjectId(pObjectId: win32more.Security.Cryptography.Certificates.IObjectId_head, pIndex: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def AddRange(pValue: win32more.Security.Cryptography.Certificates.ICryptAttributes_head) -> win32more.Foundation.HRESULT: ...
class ICspAlgorithm(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab305-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def GetAlgorithmOid(Length: Int32, AlgFlags: win32more.Security.Cryptography.Certificates.AlgorithmFlags, ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectId_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_DefaultLength(pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get_IncrementLength(pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def get_LongName(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def get_Valid(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def get_MaxLength(pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def get_MinLength(pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_Name(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def get_Type(pValue: POINTER(win32more.Security.Cryptography.Certificates.AlgorithmType)) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def get_Operations(pValue: POINTER(win32more.Security.Cryptography.Certificates.AlgorithmOperationFlags)) -> win32more.Foundation.HRESULT: ...
class ICspAlgorithms(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab306-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def get_ItemByIndex(Index: Int32, pVal: POINTER(win32more.Security.Cryptography.Certificates.ICspAlgorithm_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(pVal: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(pVal: POINTER(win32more.System.Com.IUnknown_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def Add(pVal: win32more.Security.Cryptography.Certificates.ICspAlgorithm_head) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(Index: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Clear() -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def get_ItemByName(strName: win32more.Foundation.BSTR, ppValue: POINTER(win32more.Security.Cryptography.Certificates.ICspAlgorithm_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_IndexByObjectId(pObjectId: win32more.Security.Cryptography.Certificates.IObjectId_head, pIndex: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
class ICspInformation(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab307-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def InitializeFromName(strName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def InitializeFromType(Type: win32more.Security.Cryptography.Certificates.X509ProviderType, pAlgorithm: win32more.Security.Cryptography.Certificates.IObjectId_head, MachineContext: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get_CspAlgorithms(ppValue: POINTER(win32more.Security.Cryptography.Certificates.ICspAlgorithms_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def get_HasHardwareRandomNumberGenerator(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def get_IsHardwareDevice(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def get_IsRemovable(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def get_IsSoftwareDevice(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_Valid(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def get_MaxKeyContainerNameLength(pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def get_Name(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(17)
    def get_Type(pValue: POINTER(win32more.Security.Cryptography.Certificates.X509ProviderType)) -> win32more.Foundation.HRESULT: ...
    @commethod(18)
    def get_Version(pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(19)
    def get_KeySpec(pValue: POINTER(win32more.Security.Cryptography.Certificates.X509KeySpec)) -> win32more.Foundation.HRESULT: ...
    @commethod(20)
    def get_IsSmartCard(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(21)
    def GetDefaultSecurityDescriptor(MachineContext: win32more.Foundation.VARIANT_BOOL, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(22)
    def get_LegacyCsp(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(23)
    def GetCspStatusFromOperations(pAlgorithm: win32more.Security.Cryptography.Certificates.IObjectId_head, Operations: win32more.Security.Cryptography.Certificates.AlgorithmOperationFlags, ppValue: POINTER(win32more.Security.Cryptography.Certificates.ICspStatus_head)) -> win32more.Foundation.HRESULT: ...
class ICspInformations(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab308-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def get_ItemByIndex(Index: Int32, pVal: POINTER(win32more.Security.Cryptography.Certificates.ICspInformation_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(pVal: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(pVal: POINTER(win32more.System.Com.IUnknown_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def Add(pVal: win32more.Security.Cryptography.Certificates.ICspInformation_head) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(Index: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Clear() -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def AddAvailableCsps() -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_ItemByName(strName: win32more.Foundation.BSTR, ppCspInformation: POINTER(win32more.Security.Cryptography.Certificates.ICspInformation_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def GetCspStatusFromProviderName(strProviderName: win32more.Foundation.BSTR, LegacyKeySpec: win32more.Security.Cryptography.Certificates.X509KeySpec, ppValue: POINTER(win32more.Security.Cryptography.Certificates.ICspStatus_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def GetCspStatusesFromOperations(Operations: win32more.Security.Cryptography.Certificates.AlgorithmOperationFlags, pCspInformation: win32more.Security.Cryptography.Certificates.ICspInformation_head, ppValue: POINTER(win32more.Security.Cryptography.Certificates.ICspStatuses_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(17)
    def GetEncryptionCspAlgorithms(pCspInformation: win32more.Security.Cryptography.Certificates.ICspInformation_head, ppValue: POINTER(win32more.Security.Cryptography.Certificates.ICspAlgorithms_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(18)
    def GetHashAlgorithms(pCspInformation: win32more.Security.Cryptography.Certificates.ICspInformation_head, ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectIds_head)) -> win32more.Foundation.HRESULT: ...
class ICspStatus(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab309-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def Initialize(pCsp: win32more.Security.Cryptography.Certificates.ICspInformation_head, pAlgorithm: win32more.Security.Cryptography.Certificates.ICspAlgorithm_head) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Ordinal(pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def put_Ordinal(Value: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def get_CspAlgorithm(ppValue: POINTER(win32more.Security.Cryptography.Certificates.ICspAlgorithm_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def get_CspInformation(ppValue: POINTER(win32more.Security.Cryptography.Certificates.ICspInformation_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def get_EnrollmentStatus(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509EnrollmentStatus_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def get_DisplayName(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class ICspStatuses(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab30a-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def get_ItemByIndex(Index: Int32, pVal: POINTER(win32more.Security.Cryptography.Certificates.ICspStatus_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(pVal: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(pVal: POINTER(win32more.System.Com.IUnknown_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def Add(pVal: win32more.Security.Cryptography.Certificates.ICspStatus_head) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(Index: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Clear() -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def get_ItemByName(strCspName: win32more.Foundation.BSTR, strAlgorithmName: win32more.Foundation.BSTR, ppValue: POINTER(win32more.Security.Cryptography.Certificates.ICspStatus_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_ItemByOrdinal(Ordinal: Int32, ppValue: POINTER(win32more.Security.Cryptography.Certificates.ICspStatus_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def get_ItemByOperations(strCspName: win32more.Foundation.BSTR, strAlgorithmName: win32more.Foundation.BSTR, Operations: win32more.Security.Cryptography.Certificates.AlgorithmOperationFlags, ppValue: POINTER(win32more.Security.Cryptography.Certificates.ICspStatus_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def get_ItemByProvider(pCspStatus: win32more.Security.Cryptography.Certificates.ICspStatus_head, ppValue: POINTER(win32more.Security.Cryptography.Certificates.ICspStatus_head)) -> win32more.Foundation.HRESULT: ...
class IEnroll(c_void_p):
    extends: win32more.System.Com.IUnknown
    Guid = Guid('acaa7838-4585-11d1-ab-57-00-c0-4f-c2-95-e1')
    @commethod(3)
    def createFilePKCS10WStr(DNName: win32more.Foundation.PWSTR, Usage: win32more.Foundation.PWSTR, wszPKCS10FileName: win32more.Foundation.PWSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(4)
    def acceptFilePKCS7WStr(wszPKCS7FileName: win32more.Foundation.PWSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(5)
    def createPKCS10WStr(DNName: win32more.Foundation.PWSTR, Usage: win32more.Foundation.PWSTR, pPkcs10Blob: POINTER(win32more.Security.Cryptography.CRYPT_INTEGER_BLOB_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(6)
    def acceptPKCS7Blob(pBlobPKCS7: POINTER(win32more.Security.Cryptography.CRYPT_INTEGER_BLOB_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(7)
    def getCertContextFromPKCS7(pBlobPKCS7: POINTER(win32more.Security.Cryptography.CRYPT_INTEGER_BLOB_head)) -> POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head): ...
    @commethod(8)
    def getMyStore() -> win32more.Security.Cryptography.HCERTSTORE: ...
    @commethod(9)
    def getCAStore() -> win32more.Security.Cryptography.HCERTSTORE: ...
    @commethod(10)
    def getROOTHStore() -> win32more.Security.Cryptography.HCERTSTORE: ...
    @commethod(11)
    def enumProvidersWStr(dwIndex: Int32, dwFlags: Int32, pbstrProvName: POINTER(win32more.Foundation.PWSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def enumContainersWStr(dwIndex: Int32, pbstr: POINTER(win32more.Foundation.PWSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def freeRequestInfoBlob(pkcs7OrPkcs10: win32more.Security.Cryptography.CRYPT_INTEGER_BLOB) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_MyStoreNameWStr(szwName: POINTER(win32more.Foundation.PWSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def put_MyStoreNameWStr(szwName: win32more.Foundation.PWSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def get_MyStoreTypeWStr(szwType: POINTER(win32more.Foundation.PWSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(17)
    def put_MyStoreTypeWStr(szwType: win32more.Foundation.PWSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(18)
    def get_MyStoreFlags(pdwFlags: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(19)
    def put_MyStoreFlags(dwFlags: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(20)
    def get_CAStoreNameWStr(szwName: POINTER(win32more.Foundation.PWSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(21)
    def put_CAStoreNameWStr(szwName: win32more.Foundation.PWSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(22)
    def get_CAStoreTypeWStr(szwType: POINTER(win32more.Foundation.PWSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(23)
    def put_CAStoreTypeWStr(szwType: win32more.Foundation.PWSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(24)
    def get_CAStoreFlags(pdwFlags: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(25)
    def put_CAStoreFlags(dwFlags: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(26)
    def get_RootStoreNameWStr(szwName: POINTER(win32more.Foundation.PWSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(27)
    def put_RootStoreNameWStr(szwName: win32more.Foundation.PWSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(28)
    def get_RootStoreTypeWStr(szwType: POINTER(win32more.Foundation.PWSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(29)
    def put_RootStoreTypeWStr(szwType: win32more.Foundation.PWSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(30)
    def get_RootStoreFlags(pdwFlags: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(31)
    def put_RootStoreFlags(dwFlags: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(32)
    def get_RequestStoreNameWStr(szwName: POINTER(win32more.Foundation.PWSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(33)
    def put_RequestStoreNameWStr(szwName: win32more.Foundation.PWSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(34)
    def get_RequestStoreTypeWStr(szwType: POINTER(win32more.Foundation.PWSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(35)
    def put_RequestStoreTypeWStr(szwType: win32more.Foundation.PWSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(36)
    def get_RequestStoreFlags(pdwFlags: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(37)
    def put_RequestStoreFlags(dwFlags: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(38)
    def get_ContainerNameWStr(szwContainer: POINTER(win32more.Foundation.PWSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(39)
    def put_ContainerNameWStr(szwContainer: win32more.Foundation.PWSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(40)
    def get_ProviderNameWStr(szwProvider: POINTER(win32more.Foundation.PWSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(41)
    def put_ProviderNameWStr(szwProvider: win32more.Foundation.PWSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(42)
    def get_ProviderType(pdwType: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(43)
    def put_ProviderType(dwType: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(44)
    def get_KeySpec(pdw: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(45)
    def put_KeySpec(dw: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(46)
    def get_ProviderFlags(pdwFlags: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(47)
    def put_ProviderFlags(dwFlags: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(48)
    def get_UseExistingKeySet(fUseExistingKeys: POINTER(win32more.Foundation.BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(49)
    def put_UseExistingKeySet(fUseExistingKeys: win32more.Foundation.BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(50)
    def get_GenKeyFlags(pdwFlags: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(51)
    def put_GenKeyFlags(dwFlags: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(52)
    def get_DeleteRequestCert(fDelete: POINTER(win32more.Foundation.BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(53)
    def put_DeleteRequestCert(fDelete: win32more.Foundation.BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(54)
    def get_WriteCertToUserDS(fBool: POINTER(win32more.Foundation.BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(55)
    def put_WriteCertToUserDS(fBool: win32more.Foundation.BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(56)
    def get_EnableT61DNEncoding(fBool: POINTER(win32more.Foundation.BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(57)
    def put_EnableT61DNEncoding(fBool: win32more.Foundation.BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(58)
    def get_WriteCertToCSP(fBool: POINTER(win32more.Foundation.BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(59)
    def put_WriteCertToCSP(fBool: win32more.Foundation.BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(60)
    def get_SPCFileNameWStr(szw: POINTER(win32more.Foundation.PWSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(61)
    def put_SPCFileNameWStr(szw: win32more.Foundation.PWSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(62)
    def get_PVKFileNameWStr(szw: POINTER(win32more.Foundation.PWSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(63)
    def put_PVKFileNameWStr(szw: win32more.Foundation.PWSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(64)
    def get_HashAlgorithmWStr(szw: POINTER(win32more.Foundation.PWSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(65)
    def put_HashAlgorithmWStr(szw: win32more.Foundation.PWSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(66)
    def get_RenewalCertificate(ppCertContext: POINTER(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head))) -> win32more.Foundation.HRESULT: ...
    @commethod(67)
    def put_RenewalCertificate(pCertContext: POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(68)
    def AddCertTypeToRequestWStr(szw: win32more.Foundation.PWSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(69)
    def AddNameValuePairToSignatureWStr(Name: win32more.Foundation.PWSTR, Value: win32more.Foundation.PWSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(70)
    def AddExtensionsToRequest(pCertExtensions: POINTER(win32more.Security.Cryptography.CERT_EXTENSIONS_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(71)
    def AddAuthenticatedAttributesToPKCS7Request(pAttributes: POINTER(win32more.Security.Cryptography.CRYPT_ATTRIBUTES_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(72)
    def CreatePKCS7RequestFromRequest(pRequest: POINTER(win32more.Security.Cryptography.CRYPT_INTEGER_BLOB_head), pSigningCertContext: POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head), pPkcs7Blob: POINTER(win32more.Security.Cryptography.CRYPT_INTEGER_BLOB_head)) -> win32more.Foundation.HRESULT: ...
class IEnroll2(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IEnroll
    Guid = Guid('c080e199-b7df-11d2-a4-21-00-c0-4f-79-fe-8e')
    @commethod(73)
    def InstallPKCS7Blob(pBlobPKCS7: POINTER(win32more.Security.Cryptography.CRYPT_INTEGER_BLOB_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(74)
    def Reset() -> win32more.Foundation.HRESULT: ...
    @commethod(75)
    def GetSupportedKeySpec(pdwKeySpec: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(76)
    def GetKeyLen(fMin: win32more.Foundation.BOOL, fExchange: win32more.Foundation.BOOL, pdwKeySize: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(77)
    def EnumAlgs(dwIndex: Int32, algClass: Int32, pdwAlgID: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(78)
    def GetAlgNameWStr(algID: Int32, ppwsz: POINTER(win32more.Foundation.PWSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(79)
    def put_ReuseHardwareKeyIfUnableToGenNew(fReuseHardwareKeyIfUnableToGenNew: win32more.Foundation.BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(80)
    def get_ReuseHardwareKeyIfUnableToGenNew(fReuseHardwareKeyIfUnableToGenNew: POINTER(win32more.Foundation.BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(81)
    def put_HashAlgID(hashAlgID: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(82)
    def get_HashAlgID(hashAlgID: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(83)
    def SetHStoreMy(hStore: win32more.Security.Cryptography.HCERTSTORE) -> win32more.Foundation.HRESULT: ...
    @commethod(84)
    def SetHStoreCA(hStore: win32more.Security.Cryptography.HCERTSTORE) -> win32more.Foundation.HRESULT: ...
    @commethod(85)
    def SetHStoreROOT(hStore: win32more.Security.Cryptography.HCERTSTORE) -> win32more.Foundation.HRESULT: ...
    @commethod(86)
    def SetHStoreRequest(hStore: win32more.Security.Cryptography.HCERTSTORE) -> win32more.Foundation.HRESULT: ...
    @commethod(87)
    def put_LimitExchangeKeyToEncipherment(fLimitExchangeKeyToEncipherment: win32more.Foundation.BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(88)
    def get_LimitExchangeKeyToEncipherment(fLimitExchangeKeyToEncipherment: POINTER(win32more.Foundation.BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(89)
    def put_EnableSMIMECapabilities(fEnableSMIMECapabilities: win32more.Foundation.BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(90)
    def get_EnableSMIMECapabilities(fEnableSMIMECapabilities: POINTER(win32more.Foundation.BOOL)) -> win32more.Foundation.HRESULT: ...
class IEnroll4(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IEnroll2
    Guid = Guid('f8053fe5-78f4-448f-a0-db-41-d6-1b-73-44-6b')
    @commethod(91)
    def put_ThumbPrintWStr(thumbPrintBlob: win32more.Security.Cryptography.CRYPT_INTEGER_BLOB) -> win32more.Foundation.HRESULT: ...
    @commethod(92)
    def get_ThumbPrintWStr(thumbPrintBlob: POINTER(win32more.Security.Cryptography.CRYPT_INTEGER_BLOB_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(93)
    def SetPrivateKeyArchiveCertificate(pPrivateKeyArchiveCert: POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(94)
    def GetPrivateKeyArchiveCertificate() -> POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head): ...
    @commethod(95)
    def binaryBlobToString(Flags: Int32, pblobBinary: POINTER(win32more.Security.Cryptography.CRYPT_INTEGER_BLOB_head), ppwszString: POINTER(win32more.Foundation.PWSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(96)
    def stringToBinaryBlob(Flags: Int32, pwszString: win32more.Foundation.PWSTR, pblobBinary: POINTER(win32more.Security.Cryptography.CRYPT_INTEGER_BLOB_head), pdwSkip: POINTER(Int32), pdwFlags: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(97)
    def addExtensionToRequestWStr(Flags: Int32, pwszName: win32more.Foundation.PWSTR, pblobValue: POINTER(win32more.Security.Cryptography.CRYPT_INTEGER_BLOB_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(98)
    def addAttributeToRequestWStr(Flags: Int32, pwszName: win32more.Foundation.PWSTR, pblobValue: POINTER(win32more.Security.Cryptography.CRYPT_INTEGER_BLOB_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(99)
    def addNameValuePairToRequestWStr(Flags: Int32, pwszName: win32more.Foundation.PWSTR, pwszValue: win32more.Foundation.PWSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(100)
    def resetExtensions() -> win32more.Foundation.HRESULT: ...
    @commethod(101)
    def resetAttributes() -> win32more.Foundation.HRESULT: ...
    @commethod(102)
    def createRequestWStr(Flags: win32more.Security.Cryptography.Certificates.CERT_CREATE_REQUEST_FLAGS, pwszDNName: win32more.Foundation.PWSTR, pwszUsage: win32more.Foundation.PWSTR, pblobRequest: POINTER(win32more.Security.Cryptography.CRYPT_INTEGER_BLOB_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(103)
    def createFileRequestWStr(Flags: win32more.Security.Cryptography.Certificates.CERT_CREATE_REQUEST_FLAGS, pwszDNName: win32more.Foundation.PWSTR, pwszUsage: win32more.Foundation.PWSTR, pwszRequestFileName: win32more.Foundation.PWSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(104)
    def acceptResponseBlob(pblobResponse: POINTER(win32more.Security.Cryptography.CRYPT_INTEGER_BLOB_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(105)
    def acceptFileResponseWStr(pwszResponseFileName: win32more.Foundation.PWSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(106)
    def getCertContextFromResponseBlob(pblobResponse: POINTER(win32more.Security.Cryptography.CRYPT_INTEGER_BLOB_head), ppCertContext: POINTER(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head))) -> win32more.Foundation.HRESULT: ...
    @commethod(107)
    def getCertContextFromFileResponseWStr(pwszResponseFileName: win32more.Foundation.PWSTR, ppCertContext: POINTER(POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head))) -> win32more.Foundation.HRESULT: ...
    @commethod(108)
    def createPFXWStr(pwszPassword: win32more.Foundation.PWSTR, pblobPFX: POINTER(win32more.Security.Cryptography.CRYPT_INTEGER_BLOB_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(109)
    def createFilePFXWStr(pwszPassword: win32more.Foundation.PWSTR, pwszPFXFileName: win32more.Foundation.PWSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(110)
    def setPendingRequestInfoWStr(lRequestID: Int32, pwszCADNS: win32more.Foundation.PWSTR, pwszCAName: win32more.Foundation.PWSTR, pwszFriendlyName: win32more.Foundation.PWSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(111)
    def enumPendingRequestWStr(lIndex: Int32, lDesiredProperty: win32more.Security.Cryptography.Certificates.PENDING_REQUEST_DESIRED_PROPERTY, ppProperty: c_void_p) -> win32more.Foundation.HRESULT: ...
    @commethod(112)
    def removePendingRequestWStr(thumbPrintBlob: win32more.Security.Cryptography.CRYPT_INTEGER_BLOB) -> win32more.Foundation.HRESULT: ...
    @commethod(113)
    def GetKeyLenEx(lSizeSpec: win32more.Security.Cryptography.Certificates.XEKL_KEYSIZE, lKeySpec: win32more.Security.Cryptography.Certificates.XEKL_KEYSPEC, pdwKeySize: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(114)
    def InstallPKCS7BlobEx(pBlobPKCS7: POINTER(win32more.Security.Cryptography.CRYPT_INTEGER_BLOB_head), plCertInstalled: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(115)
    def AddCertTypeToRequestWStrEx(lType: win32more.Security.Cryptography.Certificates.ADDED_CERT_TYPE, pwszOIDOrName: win32more.Foundation.PWSTR, lMajorVersion: Int32, fMinorVersion: win32more.Foundation.BOOL, lMinorVersion: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(116)
    def getProviderTypeWStr(pwszProvName: win32more.Foundation.PWSTR, plProvType: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(117)
    def addBlobPropertyToCertificateWStr(lPropertyId: Int32, lReserved: Int32, pBlobProperty: POINTER(win32more.Security.Cryptography.CRYPT_INTEGER_BLOB_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(118)
    def SetSignerCertificate(pSignerCert: POINTER(win32more.Security.Cryptography.CERT_CONTEXT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(119)
    def put_ClientId(lClientId: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(120)
    def get_ClientId(plClientId: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(121)
    def put_IncludeSubjectKeyID(fInclude: win32more.Foundation.BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(122)
    def get_IncludeSubjectKeyID(pfInclude: POINTER(win32more.Foundation.BOOL)) -> win32more.Foundation.HRESULT: ...
class IEnumCERTVIEWATTRIBUTE(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('e77db656-7653-11d1-9b-de-00-c0-4f-b6-83-fa')
    @commethod(7)
    def Next(pIndex: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def GetName(pstrOut: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def GetValue(pstrOut: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def Skip(celt: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def Reset() -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Clone(ppenum: POINTER(win32more.Security.Cryptography.Certificates.IEnumCERTVIEWATTRIBUTE_head)) -> win32more.Foundation.HRESULT: ...
class IEnumCERTVIEWCOLUMN(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('9c735be2-57a5-11d1-9b-db-00-c0-4f-b6-83-fa')
    @commethod(7)
    def Next(pIndex: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def GetName(pstrOut: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def GetDisplayName(pstrOut: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def GetType(pType: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def IsIndexed(pIndexed: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def GetMaxLength(pMaxLength: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def GetValue(Flags: win32more.Security.Cryptography.Certificates.ENUM_CERT_COLUMN_VALUE_FLAGS, pvarValue: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def Skip(celt: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def Reset() -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def Clone(ppenum: POINTER(win32more.Security.Cryptography.Certificates.IEnumCERTVIEWCOLUMN_head)) -> win32more.Foundation.HRESULT: ...
class IEnumCERTVIEWEXTENSION(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('e7dd1466-7653-11d1-9b-de-00-c0-4f-b6-83-fa')
    @commethod(7)
    def Next(pIndex: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def GetName(pstrOut: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def GetFlags(pFlags: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def GetValue(Type: win32more.Security.Cryptography.Certificates.CERT_PROPERTY_TYPE, Flags: win32more.Security.Cryptography.Certificates.ENUM_CERT_COLUMN_VALUE_FLAGS, pvarValue: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def Skip(celt: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Reset() -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def Clone(ppenum: POINTER(win32more.Security.Cryptography.Certificates.IEnumCERTVIEWEXTENSION_head)) -> win32more.Foundation.HRESULT: ...
class IEnumCERTVIEWROW(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('d1157f4c-5af2-11d1-9b-dc-00-c0-4f-b6-83-fa')
    @commethod(7)
    def Next(pIndex: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def EnumCertViewColumn(ppenum: POINTER(win32more.Security.Cryptography.Certificates.IEnumCERTVIEWCOLUMN_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def EnumCertViewAttribute(Flags: Int32, ppenum: POINTER(win32more.Security.Cryptography.Certificates.IEnumCERTVIEWATTRIBUTE_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def EnumCertViewExtension(Flags: Int32, ppenum: POINTER(win32more.Security.Cryptography.Certificates.IEnumCERTVIEWEXTENSION_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def Skip(celt: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Reset() -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def Clone(ppenum: POINTER(win32more.Security.Cryptography.Certificates.IEnumCERTVIEWROW_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def GetMaxIndex(pIndex: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
ImportPFXFlags = Int32
ImportPFXFlags_ImportNone: ImportPFXFlags = 0
ImportPFXFlags_ImportMachineContext: ImportPFXFlags = 1
ImportPFXFlags_ImportForceOverwrite: ImportPFXFlags = 2
ImportPFXFlags_ImportSilent: ImportPFXFlags = 4
ImportPFXFlags_ImportSaveProperties: ImportPFXFlags = 8
ImportPFXFlags_ImportExportable: ImportPFXFlags = 16
ImportPFXFlags_ImportExportableEncrypted: ImportPFXFlags = 32
ImportPFXFlags_ImportNoUserProtected: ImportPFXFlags = 64
ImportPFXFlags_ImportUserProtected: ImportPFXFlags = 128
ImportPFXFlags_ImportUserProtectedHigh: ImportPFXFlags = 256
ImportPFXFlags_ImportInstallCertificate: ImportPFXFlags = 512
ImportPFXFlags_ImportInstallChain: ImportPFXFlags = 1024
ImportPFXFlags_ImportInstallChainAndRoot: ImportPFXFlags = 2048
class INDESPolicy(c_void_p):
    extends: win32more.System.Com.IUnknown
    Guid = Guid('13ca515d-431d-46cc-8c-2e-1d-a2-69-bb-d6-25')
    @commethod(3)
    def Initialize() -> win32more.Foundation.HRESULT: ...
    @commethod(4)
    def Uninitialize() -> win32more.Foundation.HRESULT: ...
    @commethod(5)
    def GenerateChallenge(pwszTemplate: win32more.Foundation.PWSTR, pwszParams: win32more.Foundation.PWSTR, ppwszResponse: POINTER(win32more.Foundation.PWSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(6)
    def VerifyRequest(pctbRequest: POINTER(win32more.Security.Cryptography.Certificates.CERTTRANSBLOB_head), pctbSigningCertEncoded: POINTER(win32more.Security.Cryptography.Certificates.CERTTRANSBLOB_head), pwszTemplate: win32more.Foundation.PWSTR, pwszTransactionId: win32more.Foundation.PWSTR, pfVerified: POINTER(win32more.Foundation.BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(7)
    def Notify(pwszChallenge: win32more.Foundation.PWSTR, pwszTransactionId: win32more.Foundation.PWSTR, disposition: win32more.Security.Cryptography.Certificates.X509SCEPDisposition, lastHResult: Int32, pctbIssuedCertEncoded: POINTER(win32more.Security.Cryptography.Certificates.CERTTRANSBLOB_head)) -> win32more.Foundation.HRESULT: ...
InnerRequestLevel = Int32
InnerRequestLevel_LevelInnermost: InnerRequestLevel = 0
InnerRequestLevel_LevelNext: InnerRequestLevel = 1
InstallResponseRestrictionFlags = Int32
InstallResponseRestrictionFlags_AllowNone: InstallResponseRestrictionFlags = 0
InstallResponseRestrictionFlags_AllowNoOutstandingRequest: InstallResponseRestrictionFlags = 1
InstallResponseRestrictionFlags_AllowUntrustedCertificate: InstallResponseRestrictionFlags = 2
InstallResponseRestrictionFlags_AllowUntrustedRoot: InstallResponseRestrictionFlags = 4
class IObjectId(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab300-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def InitializeFromName(Name: win32more.Security.Cryptography.Certificates.CERTENROLL_OBJECTID) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def InitializeFromValue(strValue: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def InitializeFromAlgorithmName(GroupId: win32more.Security.Cryptography.Certificates.ObjectIdGroupId, KeyFlags: win32more.Security.Cryptography.Certificates.ObjectIdPublicKeyFlags, AlgFlags: win32more.Security.Cryptography.Certificates.AlgorithmFlags, strAlgorithmName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def get_Name(pValue: POINTER(win32more.Security.Cryptography.Certificates.CERTENROLL_OBJECTID)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def get_FriendlyName(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def put_FriendlyName(Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def get_Value(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def GetAlgorithmName(GroupId: win32more.Security.Cryptography.Certificates.ObjectIdGroupId, KeyFlags: win32more.Security.Cryptography.Certificates.ObjectIdPublicKeyFlags, pstrAlgorithmName: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class IObjectIds(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab301-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def get_ItemByIndex(Index: Int32, pVal: POINTER(win32more.Security.Cryptography.Certificates.IObjectId_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(pVal: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(pVal: POINTER(win32more.System.Com.IUnknown_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def Add(pVal: win32more.Security.Cryptography.Certificates.IObjectId_head) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(Index: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Clear() -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def AddRange(pValue: win32more.Security.Cryptography.Certificates.IObjectIds_head) -> win32more.Foundation.HRESULT: ...
class IOCSPAdmin(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('322e830d-67db-4fe9-95-77-45-96-d9-f0-92-94')
    @commethod(7)
    def get_OCSPServiceProperties(ppVal: POINTER(win32more.Security.Cryptography.Certificates.IOCSPPropertyCollection_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_OCSPCAConfigurationCollection(pVal: POINTER(win32more.Security.Cryptography.Certificates.IOCSPCAConfigurationCollection_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def GetConfiguration(bstrServerName: win32more.Foundation.BSTR, bForce: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def SetConfiguration(bstrServerName: win32more.Foundation.BSTR, bForce: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def GetMyRoles(bstrServerName: win32more.Foundation.BSTR, pRoles: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Ping(bstrServerName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def SetSecurity(bstrServerName: win32more.Foundation.BSTR, bstrVal: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def GetSecurity(bstrServerName: win32more.Foundation.BSTR, pVal: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def GetSigningCertificates(bstrServerName: win32more.Foundation.BSTR, pCACertVar: POINTER(win32more.System.Com.VARIANT_head), pVal: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def GetHashAlgorithms(bstrServerName: win32more.Foundation.BSTR, bstrCAId: win32more.Foundation.BSTR, pVal: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
class IOCSPCAConfiguration(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('aec92b40-3d46-433f-87-d1-b8-4d-5c-1e-79-0d')
    @commethod(7)
    def get_Identifier(pVal: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_CACertificate(pVal: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get_HashAlgorithm(pVal: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def put_HashAlgorithm(newVal: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def get_SigningFlags(pVal: POINTER(UInt32)) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def put_SigningFlags(newVal: UInt32) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def get_SigningCertificate(pVal: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def put_SigningCertificate(newVal: win32more.System.Com.VARIANT) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def get_ReminderDuration(pVal: POINTER(UInt32)) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def put_ReminderDuration(newVal: UInt32) -> win32more.Foundation.HRESULT: ...
    @commethod(17)
    def get_ErrorCode(pVal: POINTER(UInt32)) -> win32more.Foundation.HRESULT: ...
    @commethod(18)
    def get_CSPName(pVal: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(19)
    def get_KeySpec(pVal: POINTER(UInt32)) -> win32more.Foundation.HRESULT: ...
    @commethod(20)
    def get_ProviderCLSID(pVal: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(21)
    def put_ProviderCLSID(newVal: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(22)
    def get_ProviderProperties(pVal: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(23)
    def put_ProviderProperties(newVal: win32more.System.Com.VARIANT) -> win32more.Foundation.HRESULT: ...
    @commethod(24)
    def get_Modified(pVal: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(25)
    def get_LocalRevocationInformation(pVal: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(26)
    def put_LocalRevocationInformation(newVal: win32more.System.Com.VARIANT) -> win32more.Foundation.HRESULT: ...
    @commethod(27)
    def get_SigningCertificateTemplate(pVal: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(28)
    def put_SigningCertificateTemplate(newVal: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(29)
    def get_CAConfig(pVal: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(30)
    def put_CAConfig(newVal: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
class IOCSPCAConfigurationCollection(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('2bebea0b-5ece-4f28-a9-1c-86-b4-bb-20-f0-d3')
    @commethod(7)
    def get__NewEnum(pVal: POINTER(win32more.System.Com.IUnknown_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Item(Index: Int32, pVal: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get_Count(pVal: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def get_ItemByName(bstrIdentifier: win32more.Foundation.BSTR, pVal: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def CreateCAConfiguration(bstrIdentifier: win32more.Foundation.BSTR, varCACert: win32more.System.Com.VARIANT, ppVal: POINTER(win32more.Security.Cryptography.Certificates.IOCSPCAConfiguration_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def DeleteCAConfiguration(bstrIdentifier: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
class IOCSPProperty(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('66fb7839-5f04-4c25-ad-18-9f-f1-a8-37-6e-e0')
    @commethod(7)
    def get_Name(pVal: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Value(pVal: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def put_Value(newVal: win32more.System.Com.VARIANT) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def get_Modified(pVal: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
class IOCSPPropertyCollection(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('2597c18d-54e6-4b74-9f-a9-a6-bf-da-99-cb-be')
    @commethod(7)
    def get__NewEnum(ppVal: POINTER(win32more.System.Com.IUnknown_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Item(Index: Int32, pVal: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get_Count(pVal: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def get_ItemByName(bstrPropName: win32more.Foundation.BSTR, pVal: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def CreateProperty(bstrPropName: win32more.Foundation.BSTR, pVarPropValue: POINTER(win32more.System.Com.VARIANT_head), ppVal: POINTER(win32more.Security.Cryptography.Certificates.IOCSPProperty_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def DeleteProperty(bstrPropName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeFromProperties(pVarProperties: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def GetAllProperties(pVarProperties: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
class IPolicyQualifier(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab31c-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def InitializeEncode(strQualifier: win32more.Foundation.BSTR, Type: win32more.Security.Cryptography.Certificates.PolicyQualifierType) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_ObjectId(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectId_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get_Qualifier(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def get_Type(pValue: POINTER(win32more.Security.Cryptography.Certificates.PolicyQualifierType)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def get_RawData(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class IPolicyQualifiers(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab31d-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def get_ItemByIndex(Index: Int32, pVal: POINTER(win32more.Security.Cryptography.Certificates.IPolicyQualifier_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(pVal: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(pVal: POINTER(win32more.System.Com.IUnknown_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def Add(pVal: win32more.Security.Cryptography.Certificates.IPolicyQualifier_head) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(Index: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Clear() -> win32more.Foundation.HRESULT: ...
class ISignerCertificate(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab33d-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def Initialize(MachineContext: win32more.Foundation.VARIANT_BOOL, VerifyType: win32more.Security.Cryptography.Certificates.X509PrivateKeyVerify, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strCertificate: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Certificate(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get_PrivateKey(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509PrivateKey_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def get_Silent(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def put_Silent(Value: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def get_ParentWindow(pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def put_ParentWindow(Value: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_UIContextMessage(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def put_UIContextMessage(Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def put_Pin(Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(17)
    def get_SignatureInformation(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509SignatureInformation_head)) -> win32more.Foundation.HRESULT: ...
class ISignerCertificates(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab33e-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def get_ItemByIndex(Index: Int32, pVal: POINTER(win32more.Security.Cryptography.Certificates.ISignerCertificate_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(pVal: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(pVal: POINTER(win32more.System.Com.IUnknown_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def Add(pVal: win32more.Security.Cryptography.Certificates.ISignerCertificate_head) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(Index: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Clear() -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def Find(pSignerCert: win32more.Security.Cryptography.Certificates.ISignerCertificate_head, piSignerCert: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
class ISmimeCapabilities(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab31a-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def get_ItemByIndex(Index: Int32, pVal: POINTER(win32more.Security.Cryptography.Certificates.ISmimeCapability_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(pVal: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(pVal: POINTER(win32more.System.Com.IUnknown_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def Add(pVal: win32more.Security.Cryptography.Certificates.ISmimeCapability_head) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(Index: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Clear() -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def AddFromCsp(pValue: win32more.Security.Cryptography.Certificates.ICspInformation_head) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def AddAvailableSmimeCapabilities(MachineContext: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
class ISmimeCapability(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab319-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def Initialize(pObjectId: win32more.Security.Cryptography.Certificates.IObjectId_head, BitCount: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_ObjectId(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectId_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get_BitCount(pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
class IX500DistinguishedName(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab303-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def Decode(strEncodedName: win32more.Foundation.BSTR, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, NameFlags: win32more.Security.Cryptography.Certificates.X500NameFlags) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def Encode(strName: win32more.Foundation.BSTR, NameFlags: win32more.Security.Cryptography.Certificates.X500NameFlags) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get_Name(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def get_EncodedName(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class IX509Attribute(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab322-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def Initialize(pObjectId: win32more.Security.Cryptography.Certificates.IObjectId_head, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_ObjectId(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectId_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get_RawData(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class IX509AttributeArchiveKey(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509Attribute
    Guid = Guid('728ab327-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(10)
    def InitializeEncode(pKey: win32more.Security.Cryptography.Certificates.IX509PrivateKey_head, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strCAXCert: win32more.Foundation.BSTR, pAlgorithm: win32more.Security.Cryptography.Certificates.IObjectId_head, EncryptionStrength: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def InitializeDecode(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def get_EncryptedKeyBlob(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def get_EncryptionAlgorithm(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectId_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_EncryptionStrength(pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
class IX509AttributeArchiveKeyHash(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509Attribute
    Guid = Guid('728ab328-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(10)
    def InitializeEncodeFromEncryptedKeyBlob(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strEncryptedKeyBlob: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def InitializeDecode(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def get_EncryptedKeyHashBlob(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class IX509AttributeClientId(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509Attribute
    Guid = Guid('728ab325-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(10)
    def InitializeEncode(ClientId: win32more.Security.Cryptography.Certificates.RequestClientInfoClientId, strMachineDnsName: win32more.Foundation.BSTR, strUserSamName: win32more.Foundation.BSTR, strProcessName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def InitializeDecode(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def get_ClientId(pValue: POINTER(win32more.Security.Cryptography.Certificates.RequestClientInfoClientId)) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def get_MachineDnsName(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_UserSamName(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def get_ProcessName(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class IX509AttributeCspProvider(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509Attribute
    Guid = Guid('728ab32b-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(10)
    def InitializeEncode(KeySpec: win32more.Security.Cryptography.Certificates.X509KeySpec, strProviderName: win32more.Foundation.BSTR, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strSignature: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def InitializeDecode(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def get_KeySpec(pValue: POINTER(win32more.Security.Cryptography.Certificates.X509KeySpec)) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def get_ProviderName(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_Signature(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class IX509AttributeExtensions(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509Attribute
    Guid = Guid('728ab324-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(10)
    def InitializeEncode(pExtensions: win32more.Security.Cryptography.Certificates.IX509Extensions_head) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def InitializeDecode(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def get_X509Extensions(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509Extensions_head)) -> win32more.Foundation.HRESULT: ...
class IX509AttributeOSVersion(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509Attribute
    Guid = Guid('728ab32a-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(10)
    def InitializeEncode(strOSVersion: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def InitializeDecode(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def get_OSVersion(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class IX509AttributeRenewalCertificate(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509Attribute
    Guid = Guid('728ab326-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(10)
    def InitializeEncode(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strCert: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def InitializeDecode(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def get_RenewalCertificate(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class IX509Attributes(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab323-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def get_ItemByIndex(Index: Int32, pVal: POINTER(win32more.Security.Cryptography.Certificates.IX509Attribute_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(pVal: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(pVal: POINTER(win32more.System.Com.IUnknown_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def Add(pVal: win32more.Security.Cryptography.Certificates.IX509Attribute_head) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(Index: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Clear() -> win32more.Foundation.HRESULT: ...
class IX509CertificateRequest(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab341-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def Initialize(Context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def Encode() -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def ResetForEncode() -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def GetInnerRequest(Level: win32more.Security.Cryptography.Certificates.InnerRequestLevel, ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509CertificateRequest_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def get_Type(pValue: POINTER(win32more.Security.Cryptography.Certificates.X509RequestType)) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def get_EnrollmentContext(pValue: POINTER(win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext)) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def get_Silent(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def put_Silent(Value: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def get_ParentWindow(pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def put_ParentWindow(Value: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(17)
    def get_UIContextMessage(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(18)
    def put_UIContextMessage(Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(19)
    def get_SuppressDefaults(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(20)
    def put_SuppressDefaults(Value: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(21)
    def get_RenewalCertificate(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(22)
    def put_RenewalCertificate(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(23)
    def get_ClientId(pValue: POINTER(win32more.Security.Cryptography.Certificates.RequestClientInfoClientId)) -> win32more.Foundation.HRESULT: ...
    @commethod(24)
    def put_ClientId(Value: win32more.Security.Cryptography.Certificates.RequestClientInfoClientId) -> win32more.Foundation.HRESULT: ...
    @commethod(25)
    def get_CspInformations(ppValue: POINTER(win32more.Security.Cryptography.Certificates.ICspInformations_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(26)
    def put_CspInformations(pValue: win32more.Security.Cryptography.Certificates.ICspInformations_head) -> win32more.Foundation.HRESULT: ...
    @commethod(27)
    def get_HashAlgorithm(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectId_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(28)
    def put_HashAlgorithm(pValue: win32more.Security.Cryptography.Certificates.IObjectId_head) -> win32more.Foundation.HRESULT: ...
    @commethod(29)
    def get_AlternateSignatureAlgorithm(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(30)
    def put_AlternateSignatureAlgorithm(Value: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(31)
    def get_RawData(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class IX509CertificateRequestCertificate(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509CertificateRequestPkcs10
    Guid = Guid('728ab343-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(60)
    def CheckPublicKeySignature(pPublicKey: win32more.Security.Cryptography.Certificates.IX509PublicKey_head) -> win32more.Foundation.HRESULT: ...
    @commethod(61)
    def get_Issuer(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX500DistinguishedName_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(62)
    def put_Issuer(pValue: win32more.Security.Cryptography.Certificates.IX500DistinguishedName_head) -> win32more.Foundation.HRESULT: ...
    @commethod(63)
    def get_NotBefore(pValue: POINTER(Double)) -> win32more.Foundation.HRESULT: ...
    @commethod(64)
    def put_NotBefore(Value: Double) -> win32more.Foundation.HRESULT: ...
    @commethod(65)
    def get_NotAfter(pValue: POINTER(Double)) -> win32more.Foundation.HRESULT: ...
    @commethod(66)
    def put_NotAfter(Value: Double) -> win32more.Foundation.HRESULT: ...
    @commethod(67)
    def get_SerialNumber(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(68)
    def put_SerialNumber(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(69)
    def get_SignerCertificate(ppValue: POINTER(win32more.Security.Cryptography.Certificates.ISignerCertificate_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(70)
    def put_SignerCertificate(pValue: win32more.Security.Cryptography.Certificates.ISignerCertificate_head) -> win32more.Foundation.HRESULT: ...
class IX509CertificateRequestCertificate2(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509CertificateRequestCertificate
    Guid = Guid('728ab35a-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(71)
    def InitializeFromTemplate(context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, pPolicyServer: win32more.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer_head, pTemplate: win32more.Security.Cryptography.Certificates.IX509CertificateTemplate_head) -> win32more.Foundation.HRESULT: ...
    @commethod(72)
    def InitializeFromPrivateKeyTemplate(Context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, pPrivateKey: win32more.Security.Cryptography.Certificates.IX509PrivateKey_head, pPolicyServer: win32more.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer_head, pTemplate: win32more.Security.Cryptography.Certificates.IX509CertificateTemplate_head) -> win32more.Foundation.HRESULT: ...
    @commethod(73)
    def get_PolicyServer(ppPolicyServer: POINTER(win32more.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(74)
    def get_Template(ppTemplate: POINTER(win32more.Security.Cryptography.Certificates.IX509CertificateTemplate_head)) -> win32more.Foundation.HRESULT: ...
class IX509CertificateRequestCmc(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509CertificateRequestPkcs7
    Guid = Guid('728ab345-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(40)
    def InitializeFromInnerRequestTemplateName(pInnerRequest: win32more.Security.Cryptography.Certificates.IX509CertificateRequest_head, strTemplateName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(41)
    def get_TemplateObjectId(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectId_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(42)
    def get_NullSigned(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(43)
    def get_CryptAttributes(ppValue: POINTER(win32more.Security.Cryptography.Certificates.ICryptAttributes_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(44)
    def get_NameValuePairs(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509NameValuePairs_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(45)
    def get_X509Extensions(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509Extensions_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(46)
    def get_CriticalExtensions(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectIds_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(47)
    def get_SuppressOids(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectIds_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(48)
    def get_TransactionId(pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(49)
    def put_TransactionId(Value: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(50)
    def get_SenderNonce(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(51)
    def put_SenderNonce(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(52)
    def get_SignatureInformation(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509SignatureInformation_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(53)
    def get_ArchivePrivateKey(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(54)
    def put_ArchivePrivateKey(Value: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(55)
    def get_KeyArchivalCertificate(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(56)
    def put_KeyArchivalCertificate(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(57)
    def get_EncryptionAlgorithm(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectId_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(58)
    def put_EncryptionAlgorithm(pValue: win32more.Security.Cryptography.Certificates.IObjectId_head) -> win32more.Foundation.HRESULT: ...
    @commethod(59)
    def get_EncryptionStrength(pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(60)
    def put_EncryptionStrength(Value: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(61)
    def get_EncryptedKeyHash(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(62)
    def get_SignerCertificates(ppValue: POINTER(win32more.Security.Cryptography.Certificates.ISignerCertificates_head)) -> win32more.Foundation.HRESULT: ...
class IX509CertificateRequestCmc2(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509CertificateRequestCmc
    Guid = Guid('728ab35d-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(63)
    def InitializeFromTemplate(context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, pPolicyServer: win32more.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer_head, pTemplate: win32more.Security.Cryptography.Certificates.IX509CertificateTemplate_head) -> win32more.Foundation.HRESULT: ...
    @commethod(64)
    def InitializeFromInnerRequestTemplate(pInnerRequest: win32more.Security.Cryptography.Certificates.IX509CertificateRequest_head, pPolicyServer: win32more.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer_head, pTemplate: win32more.Security.Cryptography.Certificates.IX509CertificateTemplate_head) -> win32more.Foundation.HRESULT: ...
    @commethod(65)
    def get_PolicyServer(ppPolicyServer: POINTER(win32more.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(66)
    def get_Template(ppTemplate: POINTER(win32more.Security.Cryptography.Certificates.IX509CertificateTemplate_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(67)
    def CheckSignature(AllowedSignatureTypes: win32more.Security.Cryptography.Certificates.Pkcs10AllowedSignatureTypes) -> win32more.Foundation.HRESULT: ...
    @commethod(68)
    def CheckCertificateSignature(pSignerCertificate: win32more.Security.Cryptography.Certificates.ISignerCertificate_head, ValidateCertificateChain: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
class IX509CertificateRequestPkcs10(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509CertificateRequest
    Guid = Guid('728ab342-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(32)
    def InitializeFromTemplateName(Context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, strTemplateName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(33)
    def InitializeFromPrivateKey(Context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, pPrivateKey: win32more.Security.Cryptography.Certificates.IX509PrivateKey_head, strTemplateName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(34)
    def InitializeFromPublicKey(Context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, pPublicKey: win32more.Security.Cryptography.Certificates.IX509PublicKey_head, strTemplateName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(35)
    def InitializeFromCertificate(Context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, strCertificate: win32more.Foundation.BSTR, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, InheritOptions: win32more.Security.Cryptography.Certificates.X509RequestInheritOptions) -> win32more.Foundation.HRESULT: ...
    @commethod(36)
    def InitializeDecode(strEncodedData: win32more.Foundation.BSTR, Encoding: win32more.Security.Cryptography.Certificates.EncodingType) -> win32more.Foundation.HRESULT: ...
    @commethod(37)
    def CheckSignature(AllowedSignatureTypes: win32more.Security.Cryptography.Certificates.Pkcs10AllowedSignatureTypes) -> win32more.Foundation.HRESULT: ...
    @commethod(38)
    def IsSmartCard(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(39)
    def get_TemplateObjectId(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectId_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(40)
    def get_PublicKey(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509PublicKey_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(41)
    def get_PrivateKey(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509PrivateKey_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(42)
    def get_NullSigned(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(43)
    def get_ReuseKey(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(44)
    def get_OldCertificate(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(45)
    def get_Subject(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX500DistinguishedName_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(46)
    def put_Subject(pValue: win32more.Security.Cryptography.Certificates.IX500DistinguishedName_head) -> win32more.Foundation.HRESULT: ...
    @commethod(47)
    def get_CspStatuses(ppValue: POINTER(win32more.Security.Cryptography.Certificates.ICspStatuses_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(48)
    def get_SmimeCapabilities(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(49)
    def put_SmimeCapabilities(Value: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(50)
    def get_SignatureInformation(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509SignatureInformation_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(51)
    def get_KeyContainerNamePrefix(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(52)
    def put_KeyContainerNamePrefix(Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(53)
    def get_CryptAttributes(ppValue: POINTER(win32more.Security.Cryptography.Certificates.ICryptAttributes_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(54)
    def get_X509Extensions(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509Extensions_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(55)
    def get_CriticalExtensions(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectIds_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(56)
    def get_SuppressOids(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectIds_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(57)
    def get_RawDataToBeSigned(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(58)
    def get_Signature(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(59)
    def GetCspStatuses(KeySpec: win32more.Security.Cryptography.Certificates.X509KeySpec, ppCspStatuses: POINTER(win32more.Security.Cryptography.Certificates.ICspStatuses_head)) -> win32more.Foundation.HRESULT: ...
class IX509CertificateRequestPkcs10V2(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509CertificateRequestPkcs10
    Guid = Guid('728ab35b-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(60)
    def InitializeFromTemplate(context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, pPolicyServer: win32more.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer_head, pTemplate: win32more.Security.Cryptography.Certificates.IX509CertificateTemplate_head) -> win32more.Foundation.HRESULT: ...
    @commethod(61)
    def InitializeFromPrivateKeyTemplate(Context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, pPrivateKey: win32more.Security.Cryptography.Certificates.IX509PrivateKey_head, pPolicyServer: win32more.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer_head, pTemplate: win32more.Security.Cryptography.Certificates.IX509CertificateTemplate_head) -> win32more.Foundation.HRESULT: ...
    @commethod(62)
    def InitializeFromPublicKeyTemplate(Context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, pPublicKey: win32more.Security.Cryptography.Certificates.IX509PublicKey_head, pPolicyServer: win32more.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer_head, pTemplate: win32more.Security.Cryptography.Certificates.IX509CertificateTemplate_head) -> win32more.Foundation.HRESULT: ...
    @commethod(63)
    def get_PolicyServer(ppPolicyServer: POINTER(win32more.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(64)
    def get_Template(ppTemplate: POINTER(win32more.Security.Cryptography.Certificates.IX509CertificateTemplate_head)) -> win32more.Foundation.HRESULT: ...
class IX509CertificateRequestPkcs10V3(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509CertificateRequestPkcs10V2
    Guid = Guid('54ea9942-3d66-4530-b7-6e-7c-91-70-d3-ec-52')
    @commethod(65)
    def get_AttestPrivateKey(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(66)
    def put_AttestPrivateKey(Value: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(67)
    def get_AttestationEncryptionCertificate(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(68)
    def put_AttestationEncryptionCertificate(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(69)
    def get_EncryptionAlgorithm(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectId_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(70)
    def put_EncryptionAlgorithm(pValue: win32more.Security.Cryptography.Certificates.IObjectId_head) -> win32more.Foundation.HRESULT: ...
    @commethod(71)
    def get_EncryptionStrength(pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(72)
    def put_EncryptionStrength(Value: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(73)
    def get_ChallengePassword(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(74)
    def put_ChallengePassword(Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(75)
    def get_NameValuePairs(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509NameValuePairs_head)) -> win32more.Foundation.HRESULT: ...
class IX509CertificateRequestPkcs10V4(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509CertificateRequestPkcs10V3
    Guid = Guid('728ab363-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(76)
    def get_ClaimType(pValue: POINTER(win32more.Security.Cryptography.Certificates.KeyAttestationClaimType)) -> win32more.Foundation.HRESULT: ...
    @commethod(77)
    def put_ClaimType(Value: win32more.Security.Cryptography.Certificates.KeyAttestationClaimType) -> win32more.Foundation.HRESULT: ...
    @commethod(78)
    def get_AttestPrivateKeyPreferred(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(79)
    def put_AttestPrivateKeyPreferred(Value: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
class IX509CertificateRequestPkcs7(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509CertificateRequest
    Guid = Guid('728ab344-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(32)
    def InitializeFromTemplateName(Context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, strTemplateName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(33)
    def InitializeFromCertificate(Context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, RenewalRequest: win32more.Foundation.VARIANT_BOOL, strCertificate: win32more.Foundation.BSTR, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, InheritOptions: win32more.Security.Cryptography.Certificates.X509RequestInheritOptions) -> win32more.Foundation.HRESULT: ...
    @commethod(34)
    def InitializeFromInnerRequest(pInnerRequest: win32more.Security.Cryptography.Certificates.IX509CertificateRequest_head) -> win32more.Foundation.HRESULT: ...
    @commethod(35)
    def InitializeDecode(strEncodedData: win32more.Foundation.BSTR, Encoding: win32more.Security.Cryptography.Certificates.EncodingType) -> win32more.Foundation.HRESULT: ...
    @commethod(36)
    def get_RequesterName(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(37)
    def put_RequesterName(Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(38)
    def get_SignerCertificate(ppValue: POINTER(win32more.Security.Cryptography.Certificates.ISignerCertificate_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(39)
    def put_SignerCertificate(pValue: win32more.Security.Cryptography.Certificates.ISignerCertificate_head) -> win32more.Foundation.HRESULT: ...
class IX509CertificateRequestPkcs7V2(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509CertificateRequestPkcs7
    Guid = Guid('728ab35c-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(40)
    def InitializeFromTemplate(context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, pPolicyServer: win32more.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer_head, pTemplate: win32more.Security.Cryptography.Certificates.IX509CertificateTemplate_head) -> win32more.Foundation.HRESULT: ...
    @commethod(41)
    def get_PolicyServer(ppPolicyServer: POINTER(win32more.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(42)
    def get_Template(ppTemplate: POINTER(win32more.Security.Cryptography.Certificates.IX509CertificateTemplate_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(43)
    def CheckCertificateSignature(ValidateCertificateChain: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
class IX509CertificateRevocationList(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab360-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def Initialize() -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def InitializeDecode(strEncodedData: win32more.Foundation.BSTR, Encoding: win32more.Security.Cryptography.Certificates.EncodingType) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def Encode() -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def ResetForEncode() -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def CheckPublicKeySignature(pPublicKey: win32more.Security.Cryptography.Certificates.IX509PublicKey_head) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def CheckSignature() -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def get_Issuer(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX500DistinguishedName_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def put_Issuer(pValue: win32more.Security.Cryptography.Certificates.IX500DistinguishedName_head) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def get_ThisUpdate(pValue: POINTER(Double)) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def put_ThisUpdate(Value: Double) -> win32more.Foundation.HRESULT: ...
    @commethod(17)
    def get_NextUpdate(pValue: POINTER(Double)) -> win32more.Foundation.HRESULT: ...
    @commethod(18)
    def put_NextUpdate(Value: Double) -> win32more.Foundation.HRESULT: ...
    @commethod(19)
    def get_X509CRLEntries(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509CertificateRevocationListEntries_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(20)
    def get_X509Extensions(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509Extensions_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(21)
    def get_CriticalExtensions(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectIds_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(22)
    def get_SignerCertificate(ppValue: POINTER(win32more.Security.Cryptography.Certificates.ISignerCertificate_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(23)
    def put_SignerCertificate(pValue: win32more.Security.Cryptography.Certificates.ISignerCertificate_head) -> win32more.Foundation.HRESULT: ...
    @commethod(24)
    def get_CRLNumber(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(25)
    def put_CRLNumber(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(26)
    def get_CAVersion(pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(27)
    def put_CAVersion(pValue: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(28)
    def get_BaseCRL(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(29)
    def get_NullSigned(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(30)
    def get_HashAlgorithm(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectId_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(31)
    def put_HashAlgorithm(pValue: win32more.Security.Cryptography.Certificates.IObjectId_head) -> win32more.Foundation.HRESULT: ...
    @commethod(32)
    def get_AlternateSignatureAlgorithm(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(33)
    def put_AlternateSignatureAlgorithm(Value: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(34)
    def get_SignatureInformation(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509SignatureInformation_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(35)
    def get_RawData(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(36)
    def get_RawDataToBeSigned(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(37)
    def get_Signature(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class IX509CertificateRevocationListEntries(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab35f-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def get_ItemByIndex(Index: Int32, pVal: POINTER(win32more.Security.Cryptography.Certificates.IX509CertificateRevocationListEntry_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(pVal: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(pVal: POINTER(win32more.System.Com.IUnknown_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def Add(pVal: win32more.Security.Cryptography.Certificates.IX509CertificateRevocationListEntry_head) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(Index: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Clear() -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def get_IndexBySerialNumber(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, SerialNumber: win32more.Foundation.BSTR, pIndex: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def AddRange(pValue: win32more.Security.Cryptography.Certificates.IX509CertificateRevocationListEntries_head) -> win32more.Foundation.HRESULT: ...
class IX509CertificateRevocationListEntry(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab35e-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def Initialize(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, SerialNumber: win32more.Foundation.BSTR, RevocationDate: Double) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_SerialNumber(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get_RevocationDate(pValue: POINTER(Double)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def get_RevocationReason(pValue: POINTER(win32more.Security.Cryptography.Certificates.CRLRevocationReason)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def put_RevocationReason(Value: win32more.Security.Cryptography.Certificates.CRLRevocationReason) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def get_X509Extensions(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509Extensions_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def get_CriticalExtensions(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectIds_head)) -> win32more.Foundation.HRESULT: ...
class IX509CertificateTemplate(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('54244a13-555a-4e22-89-6d-1b-0e-52-f7-64-06')
    @commethod(7)
    def get_Property(property: win32more.Security.Cryptography.Certificates.EnrollmentTemplateProperty, pValue: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
class IX509CertificateTemplates(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('13b79003-2181-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def get_ItemByIndex(Index: Int32, pVal: POINTER(win32more.Security.Cryptography.Certificates.IX509CertificateTemplate_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(pVal: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(pVal: POINTER(win32more.System.Com.IUnknown_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def Add(pVal: win32more.Security.Cryptography.Certificates.IX509CertificateTemplate_head) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(Index: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Clear() -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def get_ItemByName(bstrName: win32more.Foundation.BSTR, ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509CertificateTemplate_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_ItemByOid(pOid: win32more.Security.Cryptography.Certificates.IObjectId_head, ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509CertificateTemplate_head)) -> win32more.Foundation.HRESULT: ...
class IX509CertificateTemplateWritable(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('f49466a7-395a-4e9e-b6-e7-32-b3-31-60-0d-c0')
    @commethod(7)
    def Initialize(pValue: win32more.Security.Cryptography.Certificates.IX509CertificateTemplate_head) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def Commit(commitFlags: win32more.Security.Cryptography.Certificates.CommitTemplateFlags, strServerContext: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get_Property(property: win32more.Security.Cryptography.Certificates.EnrollmentTemplateProperty, pValue: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def put_Property(property: win32more.Security.Cryptography.Certificates.EnrollmentTemplateProperty, value: win32more.System.Com.VARIANT) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def get_Template(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509CertificateTemplate_head)) -> win32more.Foundation.HRESULT: ...
class IX509EndorsementKey(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('b11cd855-f4c4-4fc6-b7-10-44-22-23-7f-09-e9')
    @commethod(7)
    def get_ProviderName(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def put_ProviderName(Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get_Length(pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def get_Opened(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def AddCertificate(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strCertificate: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def RemoveCertificate(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strCertificate: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def GetCertificateByIndex(ManufacturerOnly: win32more.Foundation.VARIANT_BOOL, dwIndex: Int32, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def GetCertificateCount(ManufacturerOnly: win32more.Foundation.VARIANT_BOOL, pCount: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def ExportPublicKey(ppPublicKey: POINTER(win32more.Security.Cryptography.Certificates.IX509PublicKey_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def Open() -> win32more.Foundation.HRESULT: ...
    @commethod(17)
    def Close() -> win32more.Foundation.HRESULT: ...
class IX509Enrollment(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab346-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def Initialize(Context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def InitializeFromTemplateName(Context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, strTemplateName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def InitializeFromRequest(pRequest: win32more.Security.Cryptography.Certificates.IX509CertificateRequest_head) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def CreateRequest(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def Enroll() -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def InstallResponse(Restrictions: win32more.Security.Cryptography.Certificates.InstallResponseRestrictionFlags, strResponse: win32more.Foundation.BSTR, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strPassword: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def CreatePFX(strPassword: win32more.Foundation.BSTR, ExportOptions: win32more.Security.Cryptography.Certificates.PFXExportOptions, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_Request(pValue: POINTER(win32more.Security.Cryptography.Certificates.IX509CertificateRequest_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def get_Silent(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def put_Silent(Value: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(17)
    def get_ParentWindow(pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(18)
    def put_ParentWindow(Value: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(19)
    def get_NameValuePairs(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509NameValuePairs_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(20)
    def get_EnrollmentContext(pValue: POINTER(win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext)) -> win32more.Foundation.HRESULT: ...
    @commethod(21)
    def get_Status(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509EnrollmentStatus_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(22)
    def get_Certificate(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(23)
    def get_Response(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(24)
    def get_CertificateFriendlyName(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(25)
    def put_CertificateFriendlyName(strValue: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(26)
    def get_CertificateDescription(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(27)
    def put_CertificateDescription(strValue: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(28)
    def get_RequestId(pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(29)
    def get_CAConfigString(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class IX509Enrollment2(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509Enrollment
    Guid = Guid('728ab350-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(30)
    def InitializeFromTemplate(context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, pPolicyServer: win32more.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer_head, pTemplate: win32more.Security.Cryptography.Certificates.IX509CertificateTemplate_head) -> win32more.Foundation.HRESULT: ...
    @commethod(31)
    def InstallResponse2(Restrictions: win32more.Security.Cryptography.Certificates.InstallResponseRestrictionFlags, strResponse: win32more.Foundation.BSTR, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strPassword: win32more.Foundation.BSTR, strEnrollmentPolicyServerUrl: win32more.Foundation.BSTR, strEnrollmentPolicyServerID: win32more.Foundation.BSTR, EnrollmentPolicyServerFlags: win32more.Security.Cryptography.Certificates.PolicyServerUrlFlags, authFlags: win32more.Security.Cryptography.Certificates.X509EnrollmentAuthFlags) -> win32more.Foundation.HRESULT: ...
    @commethod(32)
    def get_PolicyServer(ppPolicyServer: POINTER(win32more.Security.Cryptography.Certificates.IX509EnrollmentPolicyServer_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(33)
    def get_Template(ppTemplate: POINTER(win32more.Security.Cryptography.Certificates.IX509CertificateTemplate_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(34)
    def get_RequestIdString(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class IX509EnrollmentHelper(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab351-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def AddPolicyServer(strEnrollmentPolicyServerURI: win32more.Foundation.BSTR, strEnrollmentPolicyID: win32more.Foundation.BSTR, EnrollmentPolicyServerFlags: win32more.Security.Cryptography.Certificates.PolicyServerUrlFlags, authFlags: win32more.Security.Cryptography.Certificates.X509EnrollmentAuthFlags, strCredential: win32more.Foundation.BSTR, strPassword: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def AddEnrollmentServer(strEnrollmentServerURI: win32more.Foundation.BSTR, authFlags: win32more.Security.Cryptography.Certificates.X509EnrollmentAuthFlags, strCredential: win32more.Foundation.BSTR, strPassword: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def Enroll(strEnrollmentPolicyServerURI: win32more.Foundation.BSTR, strTemplateName: win32more.Foundation.BSTR, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, enrollFlags: win32more.Security.Cryptography.Certificates.WebEnrollmentFlags, pstrCertificate: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def Initialize(Context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext) -> win32more.Foundation.HRESULT: ...
class IX509EnrollmentPolicyServer(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('13b79026-2181-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def Initialize(bstrPolicyServerUrl: win32more.Foundation.BSTR, bstrPolicyServerId: win32more.Foundation.BSTR, authFlags: win32more.Security.Cryptography.Certificates.X509EnrollmentAuthFlags, fIsUnTrusted: win32more.Foundation.VARIANT_BOOL, context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def LoadPolicy(option: win32more.Security.Cryptography.Certificates.X509EnrollmentPolicyLoadOption) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def GetTemplates(pTemplates: POINTER(win32more.Security.Cryptography.Certificates.IX509CertificateTemplates_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def GetCAsForTemplate(pTemplate: win32more.Security.Cryptography.Certificates.IX509CertificateTemplate_head, ppCAs: POINTER(win32more.Security.Cryptography.Certificates.ICertificationAuthorities_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def GetCAs(ppCAs: POINTER(win32more.Security.Cryptography.Certificates.ICertificationAuthorities_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Validate() -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def GetCustomOids(ppObjectIds: POINTER(win32more.Security.Cryptography.Certificates.IObjectIds_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def GetNextUpdateTime(pDate: POINTER(Double)) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def GetLastUpdateTime(pDate: POINTER(Double)) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def GetPolicyServerUrl(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(17)
    def GetPolicyServerId(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(18)
    def GetFriendlyName(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(19)
    def GetIsDefaultCEP(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(20)
    def GetUseClientId(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(21)
    def GetAllowUnTrustedCA(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(22)
    def GetCachePath(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(23)
    def GetCacheDir(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(24)
    def GetAuthFlags(pValue: POINTER(win32more.Security.Cryptography.Certificates.X509EnrollmentAuthFlags)) -> win32more.Foundation.HRESULT: ...
    @commethod(25)
    def SetCredential(hWndParent: Int32, flag: win32more.Security.Cryptography.Certificates.X509EnrollmentAuthFlags, strCredential: win32more.Foundation.BSTR, strPassword: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(26)
    def QueryChanges(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(27)
    def InitializeImport(val: win32more.System.Com.VARIANT) -> win32more.Foundation.HRESULT: ...
    @commethod(28)
    def Export(exportFlags: win32more.Security.Cryptography.Certificates.X509EnrollmentPolicyExportFlags, pVal: POINTER(win32more.System.Com.VARIANT_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(29)
    def get_Cost(pValue: POINTER(UInt32)) -> win32more.Foundation.HRESULT: ...
    @commethod(30)
    def put_Cost(value: UInt32) -> win32more.Foundation.HRESULT: ...
class IX509EnrollmentStatus(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab304-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def AppendText(strText: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Text(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def put_Text(Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def get_Selected(pValue: POINTER(win32more.Security.Cryptography.Certificates.EnrollmentSelectionStatus)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def put_Selected(Value: win32more.Security.Cryptography.Certificates.EnrollmentSelectionStatus) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def get_Display(pValue: POINTER(win32more.Security.Cryptography.Certificates.EnrollmentDisplayStatus)) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def put_Display(Value: win32more.Security.Cryptography.Certificates.EnrollmentDisplayStatus) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_Status(pValue: POINTER(win32more.Security.Cryptography.Certificates.EnrollmentEnrollStatus)) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def put_Status(Value: win32more.Security.Cryptography.Certificates.EnrollmentEnrollStatus) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def get_Error(pValue: POINTER(win32more.Foundation.HRESULT)) -> win32more.Foundation.HRESULT: ...
    @commethod(17)
    def put_Error(Value: win32more.Foundation.HRESULT) -> win32more.Foundation.HRESULT: ...
    @commethod(18)
    def get_ErrorText(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class IX509EnrollmentWebClassFactory(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab349-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def CreateObject(strProgID: win32more.Foundation.BSTR, ppIUnknown: POINTER(win32more.System.Com.IUnknown_head)) -> win32more.Foundation.HRESULT: ...
class IX509Extension(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab30d-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def Initialize(pObjectId: win32more.Security.Cryptography.Certificates.IObjectId_head, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_ObjectId(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectId_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get_RawData(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def get_Critical(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def put_Critical(Value: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
class IX509ExtensionAlternativeNames(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509Extension
    Guid = Guid('728ab315-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(12)
    def InitializeEncode(pValue: win32more.Security.Cryptography.Certificates.IAlternativeNames_head) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeDecode(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_AlternativeNames(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IAlternativeNames_head)) -> win32more.Foundation.HRESULT: ...
class IX509ExtensionAuthorityKeyIdentifier(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509Extension
    Guid = Guid('728ab318-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(12)
    def InitializeEncode(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strKeyIdentifier: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeDecode(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_AuthorityKeyIdentifier(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class IX509ExtensionBasicConstraints(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509Extension
    Guid = Guid('728ab316-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(12)
    def InitializeEncode(IsCA: win32more.Foundation.VARIANT_BOOL, PathLenConstraint: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeDecode(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_IsCA(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def get_PathLenConstraint(pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
class IX509ExtensionCertificatePolicies(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509Extension
    Guid = Guid('728ab320-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(12)
    def InitializeEncode(pValue: win32more.Security.Cryptography.Certificates.ICertificatePolicies_head) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeDecode(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_Policies(ppValue: POINTER(win32more.Security.Cryptography.Certificates.ICertificatePolicies_head)) -> win32more.Foundation.HRESULT: ...
class IX509ExtensionEnhancedKeyUsage(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509Extension
    Guid = Guid('728ab310-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(12)
    def InitializeEncode(pValue: win32more.Security.Cryptography.Certificates.IObjectIds_head) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeDecode(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_EnhancedKeyUsage(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectIds_head)) -> win32more.Foundation.HRESULT: ...
class IX509ExtensionKeyUsage(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509Extension
    Guid = Guid('728ab30f-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(12)
    def InitializeEncode(UsageFlags: win32more.Security.Cryptography.Certificates.X509KeyUsageFlags) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeDecode(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_KeyUsage(pValue: POINTER(win32more.Security.Cryptography.Certificates.X509KeyUsageFlags)) -> win32more.Foundation.HRESULT: ...
class IX509ExtensionMSApplicationPolicies(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509Extension
    Guid = Guid('728ab321-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(12)
    def InitializeEncode(pValue: win32more.Security.Cryptography.Certificates.ICertificatePolicies_head) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeDecode(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_Policies(ppValue: POINTER(win32more.Security.Cryptography.Certificates.ICertificatePolicies_head)) -> win32more.Foundation.HRESULT: ...
class IX509Extensions(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab30e-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def get_ItemByIndex(Index: Int32, pVal: POINTER(win32more.Security.Cryptography.Certificates.IX509Extension_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(pVal: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(pVal: POINTER(win32more.System.Com.IUnknown_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def Add(pVal: win32more.Security.Cryptography.Certificates.IX509Extension_head) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(Index: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Clear() -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def get_IndexByObjectId(pObjectId: win32more.Security.Cryptography.Certificates.IObjectId_head, pIndex: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def AddRange(pValue: win32more.Security.Cryptography.Certificates.IX509Extensions_head) -> win32more.Foundation.HRESULT: ...
class IX509ExtensionSmimeCapabilities(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509Extension
    Guid = Guid('728ab31b-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(12)
    def InitializeEncode(pValue: win32more.Security.Cryptography.Certificates.ISmimeCapabilities_head) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeDecode(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_SmimeCapabilities(ppValue: POINTER(win32more.Security.Cryptography.Certificates.ISmimeCapabilities_head)) -> win32more.Foundation.HRESULT: ...
class IX509ExtensionSubjectKeyIdentifier(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509Extension
    Guid = Guid('728ab317-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(12)
    def InitializeEncode(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strKeyIdentifier: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeDecode(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_SubjectKeyIdentifier(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class IX509ExtensionTemplate(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509Extension
    Guid = Guid('728ab312-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(12)
    def InitializeEncode(pTemplateOid: win32more.Security.Cryptography.Certificates.IObjectId_head, MajorVersion: Int32, MinorVersion: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeDecode(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_TemplateOid(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectId_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def get_MajorVersion(pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def get_MinorVersion(pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
class IX509ExtensionTemplateName(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509Extension
    Guid = Guid('728ab311-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(12)
    def InitializeEncode(strTemplateName: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def InitializeDecode(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, strEncodedData: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_TemplateName(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class IX509MachineEnrollmentFactory(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab352-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def CreateObject(strProgID: win32more.Foundation.BSTR, ppIHelper: POINTER(win32more.Security.Cryptography.Certificates.IX509EnrollmentHelper_head)) -> win32more.Foundation.HRESULT: ...
class IX509NameValuePair(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab33f-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def Initialize(strName: win32more.Foundation.BSTR, strValue: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Value(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get_Name(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class IX509NameValuePairs(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab340-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def get_ItemByIndex(Index: Int32, pVal: POINTER(win32more.Security.Cryptography.Certificates.IX509NameValuePair_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(pVal: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(pVal: POINTER(win32more.System.Com.IUnknown_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def Add(pVal: win32more.Security.Cryptography.Certificates.IX509NameValuePair_head) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(Index: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Clear() -> win32more.Foundation.HRESULT: ...
class IX509PolicyServerListManager(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('884e204b-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def get_ItemByIndex(Index: Int32, pVal: POINTER(win32more.Security.Cryptography.Certificates.IX509PolicyServerUrl_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Count(pVal: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get__NewEnum(pVal: POINTER(win32more.System.Com.IUnknown_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def Add(pVal: win32more.Security.Cryptography.Certificates.IX509PolicyServerUrl_head) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def Remove(Index: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Clear() -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def Initialize(context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, Flags: win32more.Security.Cryptography.Certificates.PolicyServerUrlFlags) -> win32more.Foundation.HRESULT: ...
class IX509PolicyServerUrl(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('884e204a-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def Initialize(context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def get_Url(ppValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def put_Url(pValue: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def get_Default(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def put_Default(value: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def get_Flags(pValue: POINTER(win32more.Security.Cryptography.Certificates.PolicyServerUrlFlags)) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def put_Flags(Flags: win32more.Security.Cryptography.Certificates.PolicyServerUrlFlags) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_AuthFlags(pValue: POINTER(win32more.Security.Cryptography.Certificates.X509EnrollmentAuthFlags)) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def put_AuthFlags(Flags: win32more.Security.Cryptography.Certificates.X509EnrollmentAuthFlags) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def get_Cost(pValue: POINTER(UInt32)) -> win32more.Foundation.HRESULT: ...
    @commethod(17)
    def put_Cost(value: UInt32) -> win32more.Foundation.HRESULT: ...
    @commethod(18)
    def GetStringProperty(propertyId: win32more.Security.Cryptography.Certificates.PolicyServerUrlPropertyID, ppValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(19)
    def SetStringProperty(propertyId: win32more.Security.Cryptography.Certificates.PolicyServerUrlPropertyID, pValue: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(20)
    def UpdateRegistry(context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext) -> win32more.Foundation.HRESULT: ...
    @commethod(21)
    def RemoveFromRegistry(context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext) -> win32more.Foundation.HRESULT: ...
class IX509PrivateKey(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab30c-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def Open() -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def Create() -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def Close() -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def Delete() -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def Verify(VerifyType: win32more.Security.Cryptography.Certificates.X509PrivateKeyVerify) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def Import(strExportType: win32more.Foundation.BSTR, strEncodedKey: win32more.Foundation.BSTR, Encoding: win32more.Security.Cryptography.Certificates.EncodingType) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def Export(strExportType: win32more.Foundation.BSTR, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pstrEncodedKey: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def ExportPublicKey(ppPublicKey: POINTER(win32more.Security.Cryptography.Certificates.IX509PublicKey_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def get_ContainerName(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def put_ContainerName(Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(17)
    def get_ContainerNamePrefix(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(18)
    def put_ContainerNamePrefix(Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(19)
    def get_ReaderName(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(20)
    def put_ReaderName(Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(21)
    def get_CspInformations(ppValue: POINTER(win32more.Security.Cryptography.Certificates.ICspInformations_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(22)
    def put_CspInformations(pValue: win32more.Security.Cryptography.Certificates.ICspInformations_head) -> win32more.Foundation.HRESULT: ...
    @commethod(23)
    def get_CspStatus(ppValue: POINTER(win32more.Security.Cryptography.Certificates.ICspStatus_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(24)
    def put_CspStatus(pValue: win32more.Security.Cryptography.Certificates.ICspStatus_head) -> win32more.Foundation.HRESULT: ...
    @commethod(25)
    def get_ProviderName(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(26)
    def put_ProviderName(Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(27)
    def get_ProviderType(pValue: POINTER(win32more.Security.Cryptography.Certificates.X509ProviderType)) -> win32more.Foundation.HRESULT: ...
    @commethod(28)
    def put_ProviderType(Value: win32more.Security.Cryptography.Certificates.X509ProviderType) -> win32more.Foundation.HRESULT: ...
    @commethod(29)
    def get_LegacyCsp(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(30)
    def put_LegacyCsp(Value: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(31)
    def get_Algorithm(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectId_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(32)
    def put_Algorithm(pValue: win32more.Security.Cryptography.Certificates.IObjectId_head) -> win32more.Foundation.HRESULT: ...
    @commethod(33)
    def get_KeySpec(pValue: POINTER(win32more.Security.Cryptography.Certificates.X509KeySpec)) -> win32more.Foundation.HRESULT: ...
    @commethod(34)
    def put_KeySpec(Value: win32more.Security.Cryptography.Certificates.X509KeySpec) -> win32more.Foundation.HRESULT: ...
    @commethod(35)
    def get_Length(pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(36)
    def put_Length(Value: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(37)
    def get_ExportPolicy(pValue: POINTER(win32more.Security.Cryptography.Certificates.X509PrivateKeyExportFlags)) -> win32more.Foundation.HRESULT: ...
    @commethod(38)
    def put_ExportPolicy(Value: win32more.Security.Cryptography.Certificates.X509PrivateKeyExportFlags) -> win32more.Foundation.HRESULT: ...
    @commethod(39)
    def get_KeyUsage(pValue: POINTER(win32more.Security.Cryptography.Certificates.X509PrivateKeyUsageFlags)) -> win32more.Foundation.HRESULT: ...
    @commethod(40)
    def put_KeyUsage(Value: win32more.Security.Cryptography.Certificates.X509PrivateKeyUsageFlags) -> win32more.Foundation.HRESULT: ...
    @commethod(41)
    def get_KeyProtection(pValue: POINTER(win32more.Security.Cryptography.Certificates.X509PrivateKeyProtection)) -> win32more.Foundation.HRESULT: ...
    @commethod(42)
    def put_KeyProtection(Value: win32more.Security.Cryptography.Certificates.X509PrivateKeyProtection) -> win32more.Foundation.HRESULT: ...
    @commethod(43)
    def get_MachineContext(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(44)
    def put_MachineContext(Value: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(45)
    def get_SecurityDescriptor(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(46)
    def put_SecurityDescriptor(Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(47)
    def get_Certificate(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(48)
    def put_Certificate(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(49)
    def get_UniqueContainerName(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(50)
    def get_Opened(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(51)
    def get_DefaultContainer(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(52)
    def get_Existing(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(53)
    def put_Existing(Value: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(54)
    def get_Silent(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(55)
    def put_Silent(Value: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(56)
    def get_ParentWindow(pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(57)
    def put_ParentWindow(Value: Int32) -> win32more.Foundation.HRESULT: ...
    @commethod(58)
    def get_UIContextMessage(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(59)
    def put_UIContextMessage(Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(60)
    def put_Pin(Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(61)
    def get_FriendlyName(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(62)
    def put_FriendlyName(Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(63)
    def get_Description(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(64)
    def put_Description(Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
class IX509PrivateKey2(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509PrivateKey
    Guid = Guid('728ab362-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(65)
    def get_HardwareKeyUsage(pValue: POINTER(win32more.Security.Cryptography.Certificates.X509HardwareKeyUsageFlags)) -> win32more.Foundation.HRESULT: ...
    @commethod(66)
    def put_HardwareKeyUsage(Value: win32more.Security.Cryptography.Certificates.X509HardwareKeyUsageFlags) -> win32more.Foundation.HRESULT: ...
    @commethod(67)
    def get_AlternateStorageLocation(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(68)
    def put_AlternateStorageLocation(Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(69)
    def get_AlgorithmName(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(70)
    def put_AlgorithmName(Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(71)
    def get_AlgorithmParameters(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(72)
    def put_AlgorithmParameters(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(73)
    def get_ParametersExportType(pValue: POINTER(win32more.Security.Cryptography.Certificates.X509KeyParametersExportType)) -> win32more.Foundation.HRESULT: ...
    @commethod(74)
    def put_ParametersExportType(Value: win32more.Security.Cryptography.Certificates.X509KeyParametersExportType) -> win32more.Foundation.HRESULT: ...
class IX509PublicKey(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab30b-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def Initialize(pObjectId: win32more.Security.Cryptography.Certificates.IObjectId_head, strEncodedKey: win32more.Foundation.BSTR, strEncodedParameters: win32more.Foundation.BSTR, Encoding: win32more.Security.Cryptography.Certificates.EncodingType) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def InitializeFromEncodedPublicKeyInfo(strEncodedPublicKeyInfo: win32more.Foundation.BSTR, Encoding: win32more.Security.Cryptography.Certificates.EncodingType) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get_Algorithm(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectId_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def get_Length(pValue: POINTER(Int32)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def get_EncodedKey(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def get_EncodedParameters(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def ComputeKeyIdentifier(Algorithm: win32more.Security.Cryptography.Certificates.KeyIdentifierHashAlgorithm, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class IX509SCEPEnrollment(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab361-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def Initialize(pRequest: win32more.Security.Cryptography.Certificates.IX509CertificateRequestPkcs10_head, strThumbprint: win32more.Foundation.BSTR, ThumprintEncoding: win32more.Security.Cryptography.Certificates.EncodingType, strServerCertificates: win32more.Foundation.BSTR, Encoding: win32more.Security.Cryptography.Certificates.EncodingType) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def InitializeForPending(Context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def CreateRequestMessage(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def CreateRetrievePendingMessage(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def CreateRetrieveCertificateMessage(Context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, strIssuer: win32more.Foundation.BSTR, IssuerEncoding: win32more.Security.Cryptography.Certificates.EncodingType, strSerialNumber: win32more.Foundation.BSTR, SerialNumberEncoding: win32more.Security.Cryptography.Certificates.EncodingType, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def ProcessResponseMessage(strResponse: win32more.Foundation.BSTR, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pDisposition: POINTER(win32more.Security.Cryptography.Certificates.X509SCEPDisposition)) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def put_ServerCapabilities(Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def get_FailInfo(pValue: POINTER(win32more.Security.Cryptography.Certificates.X509SCEPFailInfo)) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def get_SignerCertificate(ppValue: POINTER(win32more.Security.Cryptography.Certificates.ISignerCertificate_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def put_SignerCertificate(pValue: win32more.Security.Cryptography.Certificates.ISignerCertificate_head) -> win32more.Foundation.HRESULT: ...
    @commethod(17)
    def get_OldCertificate(ppValue: POINTER(win32more.Security.Cryptography.Certificates.ISignerCertificate_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(18)
    def put_OldCertificate(pValue: win32more.Security.Cryptography.Certificates.ISignerCertificate_head) -> win32more.Foundation.HRESULT: ...
    @commethod(19)
    def get_TransactionId(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(20)
    def put_TransactionId(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(21)
    def get_Request(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509CertificateRequestPkcs10_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(22)
    def get_CertificateFriendlyName(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(23)
    def put_CertificateFriendlyName(Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(24)
    def get_Status(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509EnrollmentStatus_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(25)
    def get_Certificate(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(26)
    def get_Silent(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(27)
    def put_Silent(Value: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(28)
    def DeleteRequest() -> win32more.Foundation.HRESULT: ...
class IX509SCEPEnrollment2(c_void_p):
    extends: win32more.Security.Cryptography.Certificates.IX509SCEPEnrollment
    Guid = Guid('728ab364-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(29)
    def CreateChallengeAnswerMessage(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(30)
    def ProcessResponseMessage2(Flags: win32more.Security.Cryptography.Certificates.X509SCEPProcessMessageFlags, strResponse: win32more.Foundation.BSTR, Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pDisposition: POINTER(win32more.Security.Cryptography.Certificates.X509SCEPDisposition)) -> win32more.Foundation.HRESULT: ...
    @commethod(31)
    def get_ResultMessageText(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(32)
    def get_DelayRetry(pValue: POINTER(win32more.Security.Cryptography.Certificates.DelayRetryAction)) -> win32more.Foundation.HRESULT: ...
    @commethod(33)
    def get_ActivityId(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(34)
    def put_ActivityId(Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
class IX509SCEPEnrollmentHelper(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab365-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def Initialize(strServerUrl: win32more.Foundation.BSTR, strRequestHeaders: win32more.Foundation.BSTR, pRequest: win32more.Security.Cryptography.Certificates.IX509CertificateRequestPkcs10_head, strCACertificateThumbprint: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def InitializeForPending(strServerUrl: win32more.Foundation.BSTR, strRequestHeaders: win32more.Foundation.BSTR, Context: win32more.Security.Cryptography.Certificates.X509CertificateEnrollmentContext, strTransactionId: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def Enroll(ProcessFlags: win32more.Security.Cryptography.Certificates.X509SCEPProcessMessageFlags, pDisposition: POINTER(win32more.Security.Cryptography.Certificates.X509SCEPDisposition)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def FetchPending(ProcessFlags: win32more.Security.Cryptography.Certificates.X509SCEPProcessMessageFlags, pDisposition: POINTER(win32more.Security.Cryptography.Certificates.X509SCEPDisposition)) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def get_X509SCEPEnrollment(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IX509SCEPEnrollment_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def get_ResultMessageText(pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
class IX509SignatureInformation(c_void_p):
    extends: win32more.System.Com.IDispatch
    Guid = Guid('728ab33c-217d-11da-b2-a4-00-0e-7b-bb-2b-09')
    @commethod(7)
    def get_HashAlgorithm(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectId_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(8)
    def put_HashAlgorithm(pValue: win32more.Security.Cryptography.Certificates.IObjectId_head) -> win32more.Foundation.HRESULT: ...
    @commethod(9)
    def get_PublicKeyAlgorithm(ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectId_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(10)
    def put_PublicKeyAlgorithm(pValue: win32more.Security.Cryptography.Certificates.IObjectId_head) -> win32more.Foundation.HRESULT: ...
    @commethod(11)
    def get_Parameters(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, pValue: POINTER(win32more.Foundation.BSTR)) -> win32more.Foundation.HRESULT: ...
    @commethod(12)
    def put_Parameters(Encoding: win32more.Security.Cryptography.Certificates.EncodingType, Value: win32more.Foundation.BSTR) -> win32more.Foundation.HRESULT: ...
    @commethod(13)
    def get_AlternateSignatureAlgorithm(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(14)
    def put_AlternateSignatureAlgorithm(Value: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(15)
    def get_AlternateSignatureAlgorithmSet(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(16)
    def get_NullSigned(pValue: POINTER(win32more.Foundation.VARIANT_BOOL)) -> win32more.Foundation.HRESULT: ...
    @commethod(17)
    def put_NullSigned(Value: win32more.Foundation.VARIANT_BOOL) -> win32more.Foundation.HRESULT: ...
    @commethod(18)
    def GetSignatureAlgorithm(Pkcs7Signature: win32more.Foundation.VARIANT_BOOL, SignatureKey: win32more.Foundation.VARIANT_BOOL, ppValue: POINTER(win32more.Security.Cryptography.Certificates.IObjectId_head)) -> win32more.Foundation.HRESULT: ...
    @commethod(19)
    def SetDefaultValues() -> win32more.Foundation.HRESULT: ...
KeyAttestationClaimType = Int32
XCN_NCRYPT_CLAIM_NONE: KeyAttestationClaimType = 0
XCN_NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT: KeyAttestationClaimType = 3
XCN_NCRYPT_CLAIM_AUTHORITY_ONLY: KeyAttestationClaimType = 1
XCN_NCRYPT_CLAIM_SUBJECT_ONLY: KeyAttestationClaimType = 2
XCN_NCRYPT_CLAIM_UNKNOWN: KeyAttestationClaimType = 4096
KeyIdentifierHashAlgorithm = Int32
KeyIdentifierHashAlgorithm_SKIHashDefault: KeyIdentifierHashAlgorithm = 0
KeyIdentifierHashAlgorithm_SKIHashSha1: KeyIdentifierHashAlgorithm = 1
KeyIdentifierHashAlgorithm_SKIHashCapiSha1: KeyIdentifierHashAlgorithm = 2
KeyIdentifierHashAlgorithm_SKIHashSha256: KeyIdentifierHashAlgorithm = 3
KeyIdentifierHashAlgorithm_SKIHashHPKP: KeyIdentifierHashAlgorithm = 5
ObjectIdGroupId = Int32
XCN_CRYPT_ANY_GROUP_ID: ObjectIdGroupId = 0
XCN_CRYPT_HASH_ALG_OID_GROUP_ID: ObjectIdGroupId = 1
XCN_CRYPT_ENCRYPT_ALG_OID_GROUP_ID: ObjectIdGroupId = 2
XCN_CRYPT_PUBKEY_ALG_OID_GROUP_ID: ObjectIdGroupId = 3
XCN_CRYPT_SIGN_ALG_OID_GROUP_ID: ObjectIdGroupId = 4
XCN_CRYPT_RDN_ATTR_OID_GROUP_ID: ObjectIdGroupId = 5
XCN_CRYPT_EXT_OR_ATTR_OID_GROUP_ID: ObjectIdGroupId = 6
XCN_CRYPT_ENHKEY_USAGE_OID_GROUP_ID: ObjectIdGroupId = 7
XCN_CRYPT_POLICY_OID_GROUP_ID: ObjectIdGroupId = 8
XCN_CRYPT_TEMPLATE_OID_GROUP_ID: ObjectIdGroupId = 9
XCN_CRYPT_KDF_OID_GROUP_ID: ObjectIdGroupId = 10
XCN_CRYPT_LAST_OID_GROUP_ID: ObjectIdGroupId = 10
XCN_CRYPT_FIRST_ALG_OID_GROUP_ID: ObjectIdGroupId = 1
XCN_CRYPT_LAST_ALG_OID_GROUP_ID: ObjectIdGroupId = 4
XCN_CRYPT_GROUP_ID_MASK: ObjectIdGroupId = 65535
XCN_CRYPT_OID_PREFER_CNG_ALGID_FLAG: ObjectIdGroupId = 1073741824
XCN_CRYPT_OID_DISABLE_SEARCH_DS_FLAG: ObjectIdGroupId = -2147483648
XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK: ObjectIdGroupId = 268369920
XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT: ObjectIdGroupId = 16
XCN_CRYPT_KEY_LENGTH_MASK: ObjectIdGroupId = 268369920
ObjectIdPublicKeyFlags = Int32
XCN_CRYPT_OID_INFO_PUBKEY_ANY: ObjectIdPublicKeyFlags = 0
XCN_CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG: ObjectIdPublicKeyFlags = -2147483648
XCN_CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG: ObjectIdPublicKeyFlags = 1073741824
OCSPAdmin = Guid('d3f73511-92c9-47cb-8f-f2-8d-89-1a-7c-4d-e4')
OCSPPropertyCollection = Guid('f935a528-ba8a-4dd9-ba-79-f2-83-27-5c-b2-de')
OCSPRequestFlag = Int32
OCSP_RF_REJECT_SIGNED_REQUESTS: OCSPRequestFlag = 1
OCSPSigningFlag = Int32
OCSP_SF_SILENT: OCSPSigningFlag = 1
OCSP_SF_USE_CACERT: OCSPSigningFlag = 2
OCSP_SF_ALLOW_SIGNINGCERT_AUTORENEWAL: OCSPSigningFlag = 4
OCSP_SF_FORCE_SIGNINGCERT_ISSUER_ISCA: OCSPSigningFlag = 8
OCSP_SF_AUTODISCOVER_SIGNINGCERT: OCSPSigningFlag = 16
OCSP_SF_MANUAL_ASSIGN_SIGNINGCERT: OCSPSigningFlag = 32
OCSP_SF_RESPONDER_ID_KEYHASH: OCSPSigningFlag = 64
OCSP_SF_RESPONDER_ID_NAME: OCSPSigningFlag = 128
OCSP_SF_ALLOW_NONCE_EXTENSION: OCSPSigningFlag = 256
OCSP_SF_ALLOW_SIGNINGCERT_AUTOENROLLMENT: OCSPSigningFlag = 512
PENDING_REQUEST_DESIRED_PROPERTY = UInt32
XEPR_CADNS: PENDING_REQUEST_DESIRED_PROPERTY = 1
XEPR_CAFRIENDLYNAME: PENDING_REQUEST_DESIRED_PROPERTY = 3
XEPR_CANAME: PENDING_REQUEST_DESIRED_PROPERTY = 2
XEPR_HASH: PENDING_REQUEST_DESIRED_PROPERTY = 8
XEPR_REQUESTID: PENDING_REQUEST_DESIRED_PROPERTY = 4
PFXExportOptions = Int32
PFXExportOptions_PFXExportEEOnly: PFXExportOptions = 0
PFXExportOptions_PFXExportChainNoRoot: PFXExportOptions = 1
PFXExportOptions_PFXExportChainWithRoot: PFXExportOptions = 2
Pkcs10AllowedSignatureTypes = Int32
Pkcs10AllowedSignatureTypes_AllowedKeySignature: Pkcs10AllowedSignatureTypes = 1
Pkcs10AllowedSignatureTypes_AllowedNullSignature: Pkcs10AllowedSignatureTypes = 2
PolicyQualifierType = Int32
PolicyQualifierType_PolicyQualifierTypeUnknown: PolicyQualifierType = 0
PolicyQualifierType_PolicyQualifierTypeUrl: PolicyQualifierType = 1
PolicyQualifierType_PolicyQualifierTypeUserNotice: PolicyQualifierType = 2
PolicyQualifierType_PolicyQualifierTypeFlags: PolicyQualifierType = 3
PolicyServerUrlFlags = Int32
PolicyServerUrlFlags_PsfNone: PolicyServerUrlFlags = 0
PolicyServerUrlFlags_PsfLocationGroupPolicy: PolicyServerUrlFlags = 1
PolicyServerUrlFlags_PsfLocationRegistry: PolicyServerUrlFlags = 2
PolicyServerUrlFlags_PsfUseClientId: PolicyServerUrlFlags = 4
PolicyServerUrlFlags_PsfAutoEnrollmentEnabled: PolicyServerUrlFlags = 16
PolicyServerUrlFlags_PsfAllowUnTrustedCA: PolicyServerUrlFlags = 32
PolicyServerUrlPropertyID = Int32
PolicyServerUrlPropertyID_PsPolicyID: PolicyServerUrlPropertyID = 0
PolicyServerUrlPropertyID_PsFriendlyName: PolicyServerUrlPropertyID = 1
RequestClientInfoClientId = Int32
RequestClientInfoClientId_ClientIdNone: RequestClientInfoClientId = 0
RequestClientInfoClientId_ClientIdXEnroll2003: RequestClientInfoClientId = 1
RequestClientInfoClientId_ClientIdAutoEnroll2003: RequestClientInfoClientId = 2
RequestClientInfoClientId_ClientIdWizard2003: RequestClientInfoClientId = 3
RequestClientInfoClientId_ClientIdCertReq2003: RequestClientInfoClientId = 4
RequestClientInfoClientId_ClientIdDefaultRequest: RequestClientInfoClientId = 5
RequestClientInfoClientId_ClientIdAutoEnroll: RequestClientInfoClientId = 6
RequestClientInfoClientId_ClientIdRequestWizard: RequestClientInfoClientId = 7
RequestClientInfoClientId_ClientIdEOBO: RequestClientInfoClientId = 8
RequestClientInfoClientId_ClientIdCertReq: RequestClientInfoClientId = 9
RequestClientInfoClientId_ClientIdTest: RequestClientInfoClientId = 10
RequestClientInfoClientId_ClientIdWinRT: RequestClientInfoClientId = 11
RequestClientInfoClientId_ClientIdUserStart: RequestClientInfoClientId = 1000
WebEnrollmentFlags = Int32
WebEnrollmentFlags_EnrollPrompt: WebEnrollmentFlags = 1
WebSecurityLevel = Int32
WebSecurityLevel_LevelUnsafe: WebSecurityLevel = 0
WebSecurityLevel_LevelSafe: WebSecurityLevel = 1
X500NameFlags = Int32
XCN_CERT_NAME_STR_NONE: X500NameFlags = 0
XCN_CERT_SIMPLE_NAME_STR: X500NameFlags = 1
XCN_CERT_OID_NAME_STR: X500NameFlags = 2
XCN_CERT_X500_NAME_STR: X500NameFlags = 3
XCN_CERT_XML_NAME_STR: X500NameFlags = 4
XCN_CERT_NAME_STR_SEMICOLON_FLAG: X500NameFlags = 1073741824
XCN_CERT_NAME_STR_NO_PLUS_FLAG: X500NameFlags = 536870912
XCN_CERT_NAME_STR_NO_QUOTING_FLAG: X500NameFlags = 268435456
XCN_CERT_NAME_STR_CRLF_FLAG: X500NameFlags = 134217728
XCN_CERT_NAME_STR_COMMA_FLAG: X500NameFlags = 67108864
XCN_CERT_NAME_STR_REVERSE_FLAG: X500NameFlags = 33554432
XCN_CERT_NAME_STR_FORWARD_FLAG: X500NameFlags = 16777216
XCN_CERT_NAME_STR_AMBIGUOUS_SEPARATOR_FLAGS: X500NameFlags = 1275068416
XCN_CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG: X500NameFlags = 65536
XCN_CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG: X500NameFlags = 131072
XCN_CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG: X500NameFlags = 262144
XCN_CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG: X500NameFlags = 524288
XCN_CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG: X500NameFlags = 1048576
XCN_CERT_NAME_STR_ENABLE_PUNYCODE_FLAG: X500NameFlags = 2097152
XCN_CERT_NAME_STR_DS_ESCAPED: X500NameFlags = 8388608
X509CertificateEnrollmentContext = Int32
X509CertificateEnrollmentContext_ContextNone: X509CertificateEnrollmentContext = 0
X509CertificateEnrollmentContext_ContextUser: X509CertificateEnrollmentContext = 1
X509CertificateEnrollmentContext_ContextMachine: X509CertificateEnrollmentContext = 2
X509CertificateEnrollmentContext_ContextAdministratorForceMachine: X509CertificateEnrollmentContext = 3
X509CertificateTemplateEnrollmentFlag = Int32
X509CertificateTemplateEnrollmentFlag_EnrollmentIncludeSymmetricAlgorithms: X509CertificateTemplateEnrollmentFlag = 1
X509CertificateTemplateEnrollmentFlag_EnrollmentPendAllRequests: X509CertificateTemplateEnrollmentFlag = 2
X509CertificateTemplateEnrollmentFlag_EnrollmentPublishToKRAContainer: X509CertificateTemplateEnrollmentFlag = 4
X509CertificateTemplateEnrollmentFlag_EnrollmentPublishToDS: X509CertificateTemplateEnrollmentFlag = 8
X509CertificateTemplateEnrollmentFlag_EnrollmentAutoEnrollmentCheckUserDSCertificate: X509CertificateTemplateEnrollmentFlag = 16
X509CertificateTemplateEnrollmentFlag_EnrollmentAutoEnrollment: X509CertificateTemplateEnrollmentFlag = 32
X509CertificateTemplateEnrollmentFlag_EnrollmentDomainAuthenticationNotRequired: X509CertificateTemplateEnrollmentFlag = 128
X509CertificateTemplateEnrollmentFlag_EnrollmentPreviousApprovalValidateReenrollment: X509CertificateTemplateEnrollmentFlag = 64
X509CertificateTemplateEnrollmentFlag_EnrollmentUserInteractionRequired: X509CertificateTemplateEnrollmentFlag = 256
X509CertificateTemplateEnrollmentFlag_EnrollmentAddTemplateName: X509CertificateTemplateEnrollmentFlag = 512
X509CertificateTemplateEnrollmentFlag_EnrollmentRemoveInvalidCertificateFromPersonalStore: X509CertificateTemplateEnrollmentFlag = 1024
X509CertificateTemplateEnrollmentFlag_EnrollmentAllowEnrollOnBehalfOf: X509CertificateTemplateEnrollmentFlag = 2048
X509CertificateTemplateEnrollmentFlag_EnrollmentAddOCSPNoCheck: X509CertificateTemplateEnrollmentFlag = 4096
X509CertificateTemplateEnrollmentFlag_EnrollmentReuseKeyOnFullSmartCard: X509CertificateTemplateEnrollmentFlag = 8192
X509CertificateTemplateEnrollmentFlag_EnrollmentNoRevocationInfoInCerts: X509CertificateTemplateEnrollmentFlag = 16384
X509CertificateTemplateEnrollmentFlag_EnrollmentIncludeBasicConstraintsForEECerts: X509CertificateTemplateEnrollmentFlag = 32768
X509CertificateTemplateEnrollmentFlag_EnrollmentPreviousApprovalKeyBasedValidateReenrollment: X509CertificateTemplateEnrollmentFlag = 65536
X509CertificateTemplateEnrollmentFlag_EnrollmentCertificateIssuancePoliciesFromRequest: X509CertificateTemplateEnrollmentFlag = 131072
X509CertificateTemplateEnrollmentFlag_EnrollmentSkipAutoRenewal: X509CertificateTemplateEnrollmentFlag = 262144
X509CertificateTemplateGeneralFlag = Int32
X509CertificateTemplateGeneralFlag_GeneralMachineType: X509CertificateTemplateGeneralFlag = 64
X509CertificateTemplateGeneralFlag_GeneralCA: X509CertificateTemplateGeneralFlag = 128
X509CertificateTemplateGeneralFlag_GeneralCrossCA: X509CertificateTemplateGeneralFlag = 2048
X509CertificateTemplateGeneralFlag_GeneralDefault: X509CertificateTemplateGeneralFlag = 65536
X509CertificateTemplateGeneralFlag_GeneralModified: X509CertificateTemplateGeneralFlag = 131072
X509CertificateTemplateGeneralFlag_GeneralDonotPersist: X509CertificateTemplateGeneralFlag = 4096
X509CertificateTemplatePrivateKeyFlag = Int32
X509CertificateTemplatePrivateKeyFlag_PrivateKeyRequireArchival: X509CertificateTemplatePrivateKeyFlag = 1
X509CertificateTemplatePrivateKeyFlag_PrivateKeyExportable: X509CertificateTemplatePrivateKeyFlag = 16
X509CertificateTemplatePrivateKeyFlag_PrivateKeyRequireStrongKeyProtection: X509CertificateTemplatePrivateKeyFlag = 32
X509CertificateTemplatePrivateKeyFlag_PrivateKeyRequireAlternateSignatureAlgorithm: X509CertificateTemplatePrivateKeyFlag = 64
X509CertificateTemplatePrivateKeyFlag_PrivateKeyRequireSameKeyRenewal: X509CertificateTemplatePrivateKeyFlag = 128
X509CertificateTemplatePrivateKeyFlag_PrivateKeyUseLegacyProvider: X509CertificateTemplatePrivateKeyFlag = 256
X509CertificateTemplatePrivateKeyFlag_PrivateKeyEKTrustOnUse: X509CertificateTemplatePrivateKeyFlag = 512
X509CertificateTemplatePrivateKeyFlag_PrivateKeyEKValidateCert: X509CertificateTemplatePrivateKeyFlag = 1024
X509CertificateTemplatePrivateKeyFlag_PrivateKeyEKValidateKey: X509CertificateTemplatePrivateKeyFlag = 2048
X509CertificateTemplatePrivateKeyFlag_PrivateKeyAttestNone: X509CertificateTemplatePrivateKeyFlag = 0
X509CertificateTemplatePrivateKeyFlag_PrivateKeyAttestPreferred: X509CertificateTemplatePrivateKeyFlag = 4096
X509CertificateTemplatePrivateKeyFlag_PrivateKeyAttestRequired: X509CertificateTemplatePrivateKeyFlag = 8192
X509CertificateTemplatePrivateKeyFlag_PrivateKeyAttestMask: X509CertificateTemplatePrivateKeyFlag = 12288
X509CertificateTemplatePrivateKeyFlag_PrivateKeyAttestWithoutPolicy: X509CertificateTemplatePrivateKeyFlag = 16384
X509CertificateTemplatePrivateKeyFlag_PrivateKeyServerVersionMask: X509CertificateTemplatePrivateKeyFlag = 983040
X509CertificateTemplatePrivateKeyFlag_PrivateKeyServerVersionShift: X509CertificateTemplatePrivateKeyFlag = 16
X509CertificateTemplatePrivateKeyFlag_PrivateKeyHelloKspKey: X509CertificateTemplatePrivateKeyFlag = 1048576
X509CertificateTemplatePrivateKeyFlag_PrivateKeyHelloLogonKey: X509CertificateTemplatePrivateKeyFlag = 2097152
X509CertificateTemplatePrivateKeyFlag_PrivateKeyClientVersionMask: X509CertificateTemplatePrivateKeyFlag = 251658240
X509CertificateTemplatePrivateKeyFlag_PrivateKeyClientVersionShift: X509CertificateTemplatePrivateKeyFlag = 24
X509CertificateTemplateSubjectNameFlag = Int32
X509CertificateTemplateSubjectNameFlag_SubjectNameEnrolleeSupplies: X509CertificateTemplateSubjectNameFlag = 1
X509CertificateTemplateSubjectNameFlag_SubjectNameRequireDirectoryPath: X509CertificateTemplateSubjectNameFlag = -2147483648
X509CertificateTemplateSubjectNameFlag_SubjectNameRequireCommonName: X509CertificateTemplateSubjectNameFlag = 1073741824
X509CertificateTemplateSubjectNameFlag_SubjectNameRequireEmail: X509CertificateTemplateSubjectNameFlag = 536870912
X509CertificateTemplateSubjectNameFlag_SubjectNameRequireDNS: X509CertificateTemplateSubjectNameFlag = 268435456
X509CertificateTemplateSubjectNameFlag_SubjectNameAndAlternativeNameOldCertSupplies: X509CertificateTemplateSubjectNameFlag = 8
X509CertificateTemplateSubjectNameFlag_SubjectAlternativeNameEnrolleeSupplies: X509CertificateTemplateSubjectNameFlag = 65536
X509CertificateTemplateSubjectNameFlag_SubjectAlternativeNameRequireDirectoryGUID: X509CertificateTemplateSubjectNameFlag = 16777216
X509CertificateTemplateSubjectNameFlag_SubjectAlternativeNameRequireUPN: X509CertificateTemplateSubjectNameFlag = 33554432
X509CertificateTemplateSubjectNameFlag_SubjectAlternativeNameRequireEmail: X509CertificateTemplateSubjectNameFlag = 67108864
X509CertificateTemplateSubjectNameFlag_SubjectAlternativeNameRequireSPN: X509CertificateTemplateSubjectNameFlag = 8388608
X509CertificateTemplateSubjectNameFlag_SubjectAlternativeNameRequireDNS: X509CertificateTemplateSubjectNameFlag = 134217728
X509CertificateTemplateSubjectNameFlag_SubjectAlternativeNameRequireDomainDNS: X509CertificateTemplateSubjectNameFlag = 4194304
X509EnrollmentAuthFlags = Int32
X509EnrollmentAuthFlags_X509AuthNone: X509EnrollmentAuthFlags = 0
X509EnrollmentAuthFlags_X509AuthAnonymous: X509EnrollmentAuthFlags = 1
X509EnrollmentAuthFlags_X509AuthKerberos: X509EnrollmentAuthFlags = 2
X509EnrollmentAuthFlags_X509AuthUsername: X509EnrollmentAuthFlags = 4
X509EnrollmentAuthFlags_X509AuthCertificate: X509EnrollmentAuthFlags = 8
X509EnrollmentPolicyExportFlags = Int32
X509EnrollmentPolicyExportFlags_ExportTemplates: X509EnrollmentPolicyExportFlags = 1
X509EnrollmentPolicyExportFlags_ExportOIDs: X509EnrollmentPolicyExportFlags = 2
X509EnrollmentPolicyExportFlags_ExportCAs: X509EnrollmentPolicyExportFlags = 4
X509EnrollmentPolicyLoadOption = Int32
X509EnrollmentPolicyLoadOption_LoadOptionDefault: X509EnrollmentPolicyLoadOption = 0
X509EnrollmentPolicyLoadOption_LoadOptionCacheOnly: X509EnrollmentPolicyLoadOption = 1
X509EnrollmentPolicyLoadOption_LoadOptionReload: X509EnrollmentPolicyLoadOption = 2
X509EnrollmentPolicyLoadOption_LoadOptionRegisterForADChanges: X509EnrollmentPolicyLoadOption = 4
X509HardwareKeyUsageFlags = Int32
XCN_NCRYPT_PCP_NONE: X509HardwareKeyUsageFlags = 0
XCN_NCRYPT_TPM12_PROVIDER: X509HardwareKeyUsageFlags = 65536
XCN_NCRYPT_PCP_SIGNATURE_KEY: X509HardwareKeyUsageFlags = 1
XCN_NCRYPT_PCP_ENCRYPTION_KEY: X509HardwareKeyUsageFlags = 2
XCN_NCRYPT_PCP_GENERIC_KEY: X509HardwareKeyUsageFlags = 3
XCN_NCRYPT_PCP_STORAGE_KEY: X509HardwareKeyUsageFlags = 4
XCN_NCRYPT_PCP_IDENTITY_KEY: X509HardwareKeyUsageFlags = 8
X509KeyParametersExportType = Int32
XCN_CRYPT_OID_USE_CURVE_NONE: X509KeyParametersExportType = 0
XCN_CRYPT_OID_USE_CURVE_NAME_FOR_ENCODE_FLAG: X509KeyParametersExportType = 536870912
XCN_CRYPT_OID_USE_CURVE_PARAMETERS_FOR_ENCODE_FLAG: X509KeyParametersExportType = 268435456
X509KeySpec = Int32
XCN_AT_NONE: X509KeySpec = 0
XCN_AT_KEYEXCHANGE: X509KeySpec = 1
XCN_AT_SIGNATURE: X509KeySpec = 2
X509KeyUsageFlags = Int32
XCN_CERT_NO_KEY_USAGE: X509KeyUsageFlags = 0
XCN_CERT_DIGITAL_SIGNATURE_KEY_USAGE: X509KeyUsageFlags = 128
XCN_CERT_NON_REPUDIATION_KEY_USAGE: X509KeyUsageFlags = 64
XCN_CERT_KEY_ENCIPHERMENT_KEY_USAGE: X509KeyUsageFlags = 32
XCN_CERT_DATA_ENCIPHERMENT_KEY_USAGE: X509KeyUsageFlags = 16
XCN_CERT_KEY_AGREEMENT_KEY_USAGE: X509KeyUsageFlags = 8
XCN_CERT_KEY_CERT_SIGN_KEY_USAGE: X509KeyUsageFlags = 4
XCN_CERT_OFFLINE_CRL_SIGN_KEY_USAGE: X509KeyUsageFlags = 2
XCN_CERT_CRL_SIGN_KEY_USAGE: X509KeyUsageFlags = 2
XCN_CERT_ENCIPHER_ONLY_KEY_USAGE: X509KeyUsageFlags = 1
XCN_CERT_DECIPHER_ONLY_KEY_USAGE: X509KeyUsageFlags = 32768
X509PrivateKeyExportFlags = Int32
XCN_NCRYPT_ALLOW_EXPORT_NONE: X509PrivateKeyExportFlags = 0
XCN_NCRYPT_ALLOW_EXPORT_FLAG: X509PrivateKeyExportFlags = 1
XCN_NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG: X509PrivateKeyExportFlags = 2
XCN_NCRYPT_ALLOW_ARCHIVING_FLAG: X509PrivateKeyExportFlags = 4
XCN_NCRYPT_ALLOW_PLAINTEXT_ARCHIVING_FLAG: X509PrivateKeyExportFlags = 8
X509PrivateKeyProtection = Int32
XCN_NCRYPT_UI_NO_PROTECTION_FLAG: X509PrivateKeyProtection = 0
XCN_NCRYPT_UI_PROTECT_KEY_FLAG: X509PrivateKeyProtection = 1
XCN_NCRYPT_UI_FORCE_HIGH_PROTECTION_FLAG: X509PrivateKeyProtection = 2
XCN_NCRYPT_UI_FINGERPRINT_PROTECTION_FLAG: X509PrivateKeyProtection = 4
XCN_NCRYPT_UI_APPCONTAINER_ACCESS_MEDIUM_FLAG: X509PrivateKeyProtection = 8
X509PrivateKeyUsageFlags = Int32
XCN_NCRYPT_ALLOW_USAGES_NONE: X509PrivateKeyUsageFlags = 0
XCN_NCRYPT_ALLOW_DECRYPT_FLAG: X509PrivateKeyUsageFlags = 1
XCN_NCRYPT_ALLOW_SIGNING_FLAG: X509PrivateKeyUsageFlags = 2
XCN_NCRYPT_ALLOW_KEY_AGREEMENT_FLAG: X509PrivateKeyUsageFlags = 4
XCN_NCRYPT_ALLOW_KEY_IMPORT_FLAG: X509PrivateKeyUsageFlags = 8
XCN_NCRYPT_ALLOW_ALL_USAGES: X509PrivateKeyUsageFlags = 16777215
X509PrivateKeyVerify = Int32
X509PrivateKeyVerify_VerifyNone: X509PrivateKeyVerify = 0
X509PrivateKeyVerify_VerifySilent: X509PrivateKeyVerify = 1
X509PrivateKeyVerify_VerifySmartCardNone: X509PrivateKeyVerify = 2
X509PrivateKeyVerify_VerifySmartCardSilent: X509PrivateKeyVerify = 3
X509PrivateKeyVerify_VerifyAllowUI: X509PrivateKeyVerify = 4
X509ProviderType = Int32
XCN_PROV_NONE: X509ProviderType = 0
XCN_PROV_RSA_FULL: X509ProviderType = 1
XCN_PROV_RSA_SIG: X509ProviderType = 2
XCN_PROV_DSS: X509ProviderType = 3
XCN_PROV_FORTEZZA: X509ProviderType = 4
XCN_PROV_MS_EXCHANGE: X509ProviderType = 5
XCN_PROV_SSL: X509ProviderType = 6
XCN_PROV_RSA_SCHANNEL: X509ProviderType = 12
XCN_PROV_DSS_DH: X509ProviderType = 13
XCN_PROV_EC_ECDSA_SIG: X509ProviderType = 14
XCN_PROV_EC_ECNRA_SIG: X509ProviderType = 15
XCN_PROV_EC_ECDSA_FULL: X509ProviderType = 16
XCN_PROV_EC_ECNRA_FULL: X509ProviderType = 17
XCN_PROV_DH_SCHANNEL: X509ProviderType = 18
XCN_PROV_SPYRUS_LYNKS: X509ProviderType = 20
XCN_PROV_RNG: X509ProviderType = 21
XCN_PROV_INTEL_SEC: X509ProviderType = 22
XCN_PROV_REPLACE_OWF: X509ProviderType = 23
XCN_PROV_RSA_AES: X509ProviderType = 24
X509RequestInheritOptions = Int32
X509RequestInheritOptions_InheritDefault: X509RequestInheritOptions = 0
X509RequestInheritOptions_InheritNewDefaultKey: X509RequestInheritOptions = 1
X509RequestInheritOptions_InheritNewSimilarKey: X509RequestInheritOptions = 2
X509RequestInheritOptions_InheritPrivateKey: X509RequestInheritOptions = 3
X509RequestInheritOptions_InheritPublicKey: X509RequestInheritOptions = 4
X509RequestInheritOptions_InheritKeyMask: X509RequestInheritOptions = 15
X509RequestInheritOptions_InheritNone: X509RequestInheritOptions = 16
X509RequestInheritOptions_InheritRenewalCertificateFlag: X509RequestInheritOptions = 32
X509RequestInheritOptions_InheritTemplateFlag: X509RequestInheritOptions = 64
X509RequestInheritOptions_InheritSubjectFlag: X509RequestInheritOptions = 128
X509RequestInheritOptions_InheritExtensionsFlag: X509RequestInheritOptions = 256
X509RequestInheritOptions_InheritSubjectAltNameFlag: X509RequestInheritOptions = 512
X509RequestInheritOptions_InheritValidityPeriodFlag: X509RequestInheritOptions = 1024
X509RequestInheritOptions_InheritReserved80000000: X509RequestInheritOptions = -2147483648
X509RequestType = Int32
X509RequestType_TypeAny: X509RequestType = 0
X509RequestType_TypePkcs10: X509RequestType = 1
X509RequestType_TypePkcs7: X509RequestType = 2
X509RequestType_TypeCmc: X509RequestType = 3
X509RequestType_TypeCertificate: X509RequestType = 4
X509SCEPDisposition = Int32
X509SCEPDisposition_SCEPDispositionUnknown: X509SCEPDisposition = -1
X509SCEPDisposition_SCEPDispositionSuccess: X509SCEPDisposition = 0
X509SCEPDisposition_SCEPDispositionFailure: X509SCEPDisposition = 2
X509SCEPDisposition_SCEPDispositionPending: X509SCEPDisposition = 3
X509SCEPDisposition_SCEPDispositionPendingChallenge: X509SCEPDisposition = 11
X509SCEPFailInfo = Int32
X509SCEPFailInfo_SCEPFailUnknown: X509SCEPFailInfo = -1
X509SCEPFailInfo_SCEPFailBadAlgorithm: X509SCEPFailInfo = 0
X509SCEPFailInfo_SCEPFailBadMessageCheck: X509SCEPFailInfo = 1
X509SCEPFailInfo_SCEPFailBadRequest: X509SCEPFailInfo = 2
X509SCEPFailInfo_SCEPFailBadTime: X509SCEPFailInfo = 3
X509SCEPFailInfo_SCEPFailBadCertId: X509SCEPFailInfo = 4
X509SCEPMessageType = Int32
X509SCEPMessageType_SCEPMessageUnknown: X509SCEPMessageType = -1
X509SCEPMessageType_SCEPMessageCertResponse: X509SCEPMessageType = 3
X509SCEPMessageType_SCEPMessagePKCSRequest: X509SCEPMessageType = 19
X509SCEPMessageType_SCEPMessageGetCertInitial: X509SCEPMessageType = 20
X509SCEPMessageType_SCEPMessageGetCert: X509SCEPMessageType = 21
X509SCEPMessageType_SCEPMessageGetCRL: X509SCEPMessageType = 22
X509SCEPMessageType_SCEPMessageClaimChallengeAnswer: X509SCEPMessageType = 41
X509SCEPProcessMessageFlags = Int32
X509SCEPProcessMessageFlags_SCEPProcessDefault: X509SCEPProcessMessageFlags = 0
X509SCEPProcessMessageFlags_SCEPProcessSkipCertInstall: X509SCEPProcessMessageFlags = 1
XEKL_KEYSIZE = UInt32
XEKL_KEYSIZE_MIN: XEKL_KEYSIZE = 1
XEKL_KEYSIZE_MAX: XEKL_KEYSIZE = 2
XEKL_KEYSIZE_INC: XEKL_KEYSIZE = 3
XEKL_KEYSPEC = UInt32
XEKL_KEYSPEC_KEYX: XEKL_KEYSPEC = 1
XEKL_KEYSPEC_SIG: XEKL_KEYSPEC = 2
make_head(_module, 'CAINFO')
make_head(_module, 'CERTTRANSBLOB')
make_head(_module, 'CERTVIEWRESTRICTION')
make_head(_module, 'CSEDB_RSTMAPW')
make_head(_module, 'FNCERTSRVBACKUPCLOSE')
make_head(_module, 'FNCERTSRVBACKUPEND')
make_head(_module, 'FNCERTSRVBACKUPFREE')
make_head(_module, 'FNCERTSRVBACKUPGETBACKUPLOGSW')
make_head(_module, 'FNCERTSRVBACKUPGETDATABASENAMESW')
make_head(_module, 'FNCERTSRVBACKUPGETDYNAMICFILELISTW')
make_head(_module, 'FNCERTSRVBACKUPOPENFILEW')
make_head(_module, 'FNCERTSRVBACKUPPREPAREW')
make_head(_module, 'FNCERTSRVBACKUPREAD')
make_head(_module, 'FNCERTSRVBACKUPTRUNCATELOGS')
make_head(_module, 'FNCERTSRVISSERVERONLINEW')
make_head(_module, 'FNCERTSRVRESTOREEND')
make_head(_module, 'FNCERTSRVRESTOREGETDATABASELOCATIONSW')
make_head(_module, 'FNCERTSRVRESTOREPREPAREW')
make_head(_module, 'FNCERTSRVRESTOREREGISTERCOMPLETE')
make_head(_module, 'FNCERTSRVRESTOREREGISTERW')
make_head(_module, 'FNCERTSRVSERVERCONTROLW')
make_head(_module, 'FNIMPORTPFXTOPROVIDER')
make_head(_module, 'FNIMPORTPFXTOPROVIDERFREEDATA')
make_head(_module, 'IAlternativeName')
make_head(_module, 'IAlternativeNames')
make_head(_module, 'IBinaryConverter')
make_head(_module, 'IBinaryConverter2')
make_head(_module, 'ICEnroll')
make_head(_module, 'ICEnroll2')
make_head(_module, 'ICEnroll3')
make_head(_module, 'ICEnroll4')
make_head(_module, 'ICertAdmin')
make_head(_module, 'ICertAdmin2')
make_head(_module, 'ICertConfig')
make_head(_module, 'ICertConfig2')
make_head(_module, 'ICertEncodeAltName')
make_head(_module, 'ICertEncodeAltName2')
make_head(_module, 'ICertEncodeBitString')
make_head(_module, 'ICertEncodeBitString2')
make_head(_module, 'ICertEncodeCRLDistInfo')
make_head(_module, 'ICertEncodeCRLDistInfo2')
make_head(_module, 'ICertEncodeDateArray')
make_head(_module, 'ICertEncodeDateArray2')
make_head(_module, 'ICertEncodeLongArray')
make_head(_module, 'ICertEncodeLongArray2')
make_head(_module, 'ICertEncodeStringArray')
make_head(_module, 'ICertEncodeStringArray2')
make_head(_module, 'ICertExit')
make_head(_module, 'ICertExit2')
make_head(_module, 'ICertGetConfig')
make_head(_module, 'ICertificateAttestationChallenge')
make_head(_module, 'ICertificateAttestationChallenge2')
make_head(_module, 'ICertificatePolicies')
make_head(_module, 'ICertificatePolicy')
make_head(_module, 'ICertificationAuthorities')
make_head(_module, 'ICertificationAuthority')
make_head(_module, 'ICertManageModule')
make_head(_module, 'ICertPolicy')
make_head(_module, 'ICertPolicy2')
make_head(_module, 'ICertProperties')
make_head(_module, 'ICertProperty')
make_head(_module, 'ICertPropertyArchived')
make_head(_module, 'ICertPropertyArchivedKeyHash')
make_head(_module, 'ICertPropertyAutoEnroll')
make_head(_module, 'ICertPropertyBackedUp')
make_head(_module, 'ICertPropertyDescription')
make_head(_module, 'ICertPropertyEnrollment')
make_head(_module, 'ICertPropertyEnrollmentPolicyServer')
make_head(_module, 'ICertPropertyFriendlyName')
make_head(_module, 'ICertPropertyKeyProvInfo')
make_head(_module, 'ICertPropertyRenewal')
make_head(_module, 'ICertPropertyRequestOriginator')
make_head(_module, 'ICertPropertySHA1Hash')
make_head(_module, 'ICertRequest')
make_head(_module, 'ICertRequest2')
make_head(_module, 'ICertRequest3')
make_head(_module, 'ICertRequestD')
make_head(_module, 'ICertRequestD2')
make_head(_module, 'ICertServerExit')
make_head(_module, 'ICertServerPolicy')
make_head(_module, 'ICertView')
make_head(_module, 'ICertView2')
make_head(_module, 'ICryptAttribute')
make_head(_module, 'ICryptAttributes')
make_head(_module, 'ICspAlgorithm')
make_head(_module, 'ICspAlgorithms')
make_head(_module, 'ICspInformation')
make_head(_module, 'ICspInformations')
make_head(_module, 'ICspStatus')
make_head(_module, 'ICspStatuses')
make_head(_module, 'IEnroll')
make_head(_module, 'IEnroll2')
make_head(_module, 'IEnroll4')
make_head(_module, 'IEnumCERTVIEWATTRIBUTE')
make_head(_module, 'IEnumCERTVIEWCOLUMN')
make_head(_module, 'IEnumCERTVIEWEXTENSION')
make_head(_module, 'IEnumCERTVIEWROW')
make_head(_module, 'INDESPolicy')
make_head(_module, 'IObjectId')
make_head(_module, 'IObjectIds')
make_head(_module, 'IOCSPAdmin')
make_head(_module, 'IOCSPCAConfiguration')
make_head(_module, 'IOCSPCAConfigurationCollection')
make_head(_module, 'IOCSPProperty')
make_head(_module, 'IOCSPPropertyCollection')
make_head(_module, 'IPolicyQualifier')
make_head(_module, 'IPolicyQualifiers')
make_head(_module, 'ISignerCertificate')
make_head(_module, 'ISignerCertificates')
make_head(_module, 'ISmimeCapabilities')
make_head(_module, 'ISmimeCapability')
make_head(_module, 'IX500DistinguishedName')
make_head(_module, 'IX509Attribute')
make_head(_module, 'IX509AttributeArchiveKey')
make_head(_module, 'IX509AttributeArchiveKeyHash')
make_head(_module, 'IX509AttributeClientId')
make_head(_module, 'IX509AttributeCspProvider')
make_head(_module, 'IX509AttributeExtensions')
make_head(_module, 'IX509AttributeOSVersion')
make_head(_module, 'IX509AttributeRenewalCertificate')
make_head(_module, 'IX509Attributes')
make_head(_module, 'IX509CertificateRequest')
make_head(_module, 'IX509CertificateRequestCertificate')
make_head(_module, 'IX509CertificateRequestCertificate2')
make_head(_module, 'IX509CertificateRequestCmc')
make_head(_module, 'IX509CertificateRequestCmc2')
make_head(_module, 'IX509CertificateRequestPkcs10')
make_head(_module, 'IX509CertificateRequestPkcs10V2')
make_head(_module, 'IX509CertificateRequestPkcs10V3')
make_head(_module, 'IX509CertificateRequestPkcs10V4')
make_head(_module, 'IX509CertificateRequestPkcs7')
make_head(_module, 'IX509CertificateRequestPkcs7V2')
make_head(_module, 'IX509CertificateRevocationList')
make_head(_module, 'IX509CertificateRevocationListEntries')
make_head(_module, 'IX509CertificateRevocationListEntry')
make_head(_module, 'IX509CertificateTemplate')
make_head(_module, 'IX509CertificateTemplates')
make_head(_module, 'IX509CertificateTemplateWritable')
make_head(_module, 'IX509EndorsementKey')
make_head(_module, 'IX509Enrollment')
make_head(_module, 'IX509Enrollment2')
make_head(_module, 'IX509EnrollmentHelper')
make_head(_module, 'IX509EnrollmentPolicyServer')
make_head(_module, 'IX509EnrollmentStatus')
make_head(_module, 'IX509EnrollmentWebClassFactory')
make_head(_module, 'IX509Extension')
make_head(_module, 'IX509ExtensionAlternativeNames')
make_head(_module, 'IX509ExtensionAuthorityKeyIdentifier')
make_head(_module, 'IX509ExtensionBasicConstraints')
make_head(_module, 'IX509ExtensionCertificatePolicies')
make_head(_module, 'IX509ExtensionEnhancedKeyUsage')
make_head(_module, 'IX509ExtensionKeyUsage')
make_head(_module, 'IX509ExtensionMSApplicationPolicies')
make_head(_module, 'IX509Extensions')
make_head(_module, 'IX509ExtensionSmimeCapabilities')
make_head(_module, 'IX509ExtensionSubjectKeyIdentifier')
make_head(_module, 'IX509ExtensionTemplate')
make_head(_module, 'IX509ExtensionTemplateName')
make_head(_module, 'IX509MachineEnrollmentFactory')
make_head(_module, 'IX509NameValuePair')
make_head(_module, 'IX509NameValuePairs')
make_head(_module, 'IX509PolicyServerListManager')
make_head(_module, 'IX509PolicyServerUrl')
make_head(_module, 'IX509PrivateKey')
make_head(_module, 'IX509PrivateKey2')
make_head(_module, 'IX509PublicKey')
make_head(_module, 'IX509SCEPEnrollment')
make_head(_module, 'IX509SCEPEnrollment2')
make_head(_module, 'IX509SCEPEnrollmentHelper')
make_head(_module, 'IX509SignatureInformation')
__all__ = [
    "ADDED_CERT_TYPE",
    "AlgorithmFlags",
    "AlgorithmFlags_AlgorithmFlagsNone",
    "AlgorithmFlags_AlgorithmFlagsWrap",
    "AlgorithmOperationFlags",
    "AlgorithmType",
    "AlternativeNameType",
    "CAIF_DSENTRY",
    "CAIF_LOCAL",
    "CAIF_REGISTRY",
    "CAIF_REGISTRYPARENT",
    "CAIF_SHAREDFOLDERENTRY",
    "CAINFO",
    "CAPATHLENGTH_INFINITE",
    "CA_ACCESS_ADMIN",
    "CA_ACCESS_AUDITOR",
    "CA_ACCESS_ENROLL",
    "CA_ACCESS_MASKROLES",
    "CA_ACCESS_OFFICER",
    "CA_ACCESS_OPERATOR",
    "CA_ACCESS_READ",
    "CA_CRL_BASE",
    "CA_CRL_DELTA",
    "CA_CRL_REPUBLISH",
    "CA_DISP_ERROR",
    "CA_DISP_INCOMPLETE",
    "CA_DISP_INVALID",
    "CA_DISP_REVOKED",
    "CA_DISP_UNDER_SUBMISSION",
    "CA_DISP_VALID",
    "CAlternativeName",
    "CAlternativeNames",
    "CBinaryConverter",
    "CCLOCKSKEWMINUTESDEFAULT",
    "CC_DEFAULTCONFIG",
    "CC_FIRSTCONFIG",
    "CC_LOCALACTIVECONFIG",
    "CC_LOCALCONFIG",
    "CC_UIPICKCONFIG",
    "CC_UIPICKCONFIGSKIPLOCALCA",
    "CCertAdmin",
    "CCertConfig",
    "CCertEncodeAltName",
    "CCertEncodeBitString",
    "CCertEncodeCRLDistInfo",
    "CCertEncodeDateArray",
    "CCertEncodeLongArray",
    "CCertEncodeStringArray",
    "CCertGetConfig",
    "CCertProperties",
    "CCertProperty",
    "CCertPropertyArchived",
    "CCertPropertyArchivedKeyHash",
    "CCertPropertyAutoEnroll",
    "CCertPropertyBackedUp",
    "CCertPropertyDescription",
    "CCertPropertyEnrollment",
    "CCertPropertyEnrollmentPolicyServer",
    "CCertPropertyFriendlyName",
    "CCertPropertyKeyProvInfo",
    "CCertPropertyRenewal",
    "CCertPropertyRequestOriginator",
    "CCertPropertySHA1Hash",
    "CCertRequest",
    "CCertServerExit",
    "CCertServerPolicy",
    "CCertView",
    "CCertificateAttestationChallenge",
    "CCertificatePolicies",
    "CCertificatePolicy",
    "CCryptAttribute",
    "CCryptAttributes",
    "CCspInformation",
    "CCspInformations",
    "CCspStatus",
    "CDR_EXPIRED",
    "CDR_REQUEST_LAST_CHANGED",
    "CERTADMIN_GET_ROLES_FLAGS",
    "CERTENROLL_INDEX_BASE",
    "CERTENROLL_OBJECTID",
    "CERTENROLL_PROPERTYID",
    "CERTTRANSBLOB",
    "CERTVIEWRESTRICTION",
    "CERT_ALT_NAME",
    "CERT_ALT_NAME_DIRECTORY_NAME",
    "CERT_ALT_NAME_DNS_NAME",
    "CERT_ALT_NAME_IP_ADDRESS",
    "CERT_ALT_NAME_OTHER_NAME",
    "CERT_ALT_NAME_REGISTERED_ID",
    "CERT_ALT_NAME_RFC822_NAME",
    "CERT_ALT_NAME_URL",
    "CERT_CREATE_REQUEST_FLAGS",
    "CERT_DELETE_ROW_FLAGS",
    "CERT_EXIT_EVENT_MASK",
    "CERT_GET_CONFIG_FLAGS",
    "CERT_IMPORT_FLAGS",
    "CERT_PROPERTY_TYPE",
    "CERT_REQUEST_OUT_TYPE",
    "CERT_VIEW_COLUMN_INDEX",
    "CERT_VIEW_SEEK_OPERATOR_FLAGS",
    "CEnroll",
    "CEnroll2",
    "CMM_READONLY",
    "CMM_REFRESHONLY",
    "CObjectId",
    "CObjectIds",
    "CPF_BADURL_ERROR",
    "CPF_BASE",
    "CPF_CASTORE_ERROR",
    "CPF_COMPLETE",
    "CPF_DELTA",
    "CPF_FILE_ERROR",
    "CPF_FTP_ERROR",
    "CPF_HTTP_ERROR",
    "CPF_LDAP_ERROR",
    "CPF_MANUAL",
    "CPF_POSTPONED_BASE_FILE_ERROR",
    "CPF_POSTPONED_BASE_LDAP_ERROR",
    "CPF_SHADOW",
    "CPF_SIGNATURE_ERROR",
    "CPolicyQualifier",
    "CPolicyQualifiers",
    "CRLF_ALLOW_REQUEST_ATTRIBUTE_SUBJECT",
    "CRLF_BUILD_ROOTCA_CRLENTRIES_BASEDONKEY",
    "CRLF_CRLNUMBER_CRITICAL",
    "CRLF_DELETE_EXPIRED_CRLS",
    "CRLF_DELTA_USE_OLDEST_UNEXPIRED_BASE",
    "CRLF_DISABLE_CHAIN_VERIFICATION",
    "CRLF_DISABLE_RDN_REORDER",
    "CRLF_DISABLE_ROOT_CROSS_CERTS",
    "CRLF_ENFORCE_ENROLLMENT_AGENT",
    "CRLF_IGNORE_CROSS_CERT_TRUST_ERROR",
    "CRLF_IGNORE_INVALID_POLICIES",
    "CRLF_IGNORE_UNKNOWN_CMC_ATTRIBUTES",
    "CRLF_LOG_FULL_RESPONSE",
    "CRLF_PRESERVE_EXPIRED_CA_CERTS",
    "CRLF_PRESERVE_REVOKED_CA_CERTS",
    "CRLF_PUBLISH_EXPIRED_CERT_CRLS",
    "CRLF_REBUILD_MODIFIED_SUBJECT_ONLY",
    "CRLF_REVCHECK_IGNORE_NOREVCHECK",
    "CRLF_REVCHECK_IGNORE_OFFLINE",
    "CRLF_SAVE_FAILED_CERTS",
    "CRLF_USE_CROSS_CERT_TEMPLATE",
    "CRLF_USE_XCHG_CERT_TEMPLATE",
    "CRLRevocationReason",
    "CRYPT_ENUM_ALL_PROVIDERS",
    "CR_DISP",
    "CR_DISP_DENIED",
    "CR_DISP_ERROR",
    "CR_DISP_INCOMPLETE",
    "CR_DISP_ISSUED",
    "CR_DISP_ISSUED_OUT_OF_BAND",
    "CR_DISP_REVOKED",
    "CR_DISP_UNDER_SUBMISSION",
    "CR_FLG_CACROSSCERT",
    "CR_FLG_CAXCHGCERT",
    "CR_FLG_CHALLENGEPENDING",
    "CR_FLG_CHALLENGESATISFIED",
    "CR_FLG_DEFINEDCACERT",
    "CR_FLG_ENFORCEUTF8",
    "CR_FLG_ENROLLONBEHALFOF",
    "CR_FLG_FORCETELETEX",
    "CR_FLG_FORCEUTF8",
    "CR_FLG_PUBLISHERROR",
    "CR_FLG_RENEWAL",
    "CR_FLG_SUBJECTUNMODIFIED",
    "CR_FLG_TRUSTEKCERT",
    "CR_FLG_TRUSTEKKEY",
    "CR_FLG_TRUSTONUSE",
    "CR_FLG_VALIDENCRYPTEDKEYHASH",
    "CR_GEMT_DEFAULT",
    "CR_GEMT_HRESULT_STRING",
    "CR_GEMT_HTTP_ERROR",
    "CR_IN_BASE64",
    "CR_IN_BASE64HEADER",
    "CR_IN_BINARY",
    "CR_IN_CERTIFICATETRANSPARENCY",
    "CR_IN_CHALLENGERESPONSE",
    "CR_IN_CLIENTIDNONE",
    "CR_IN_CMC",
    "CR_IN_CONNECTONLY",
    "CR_IN_CRLS",
    "CR_IN_ENCODEANY",
    "CR_IN_ENCODEMASK",
    "CR_IN_FORMATANY",
    "CR_IN_FORMATMASK",
    "CR_IN_FULLRESPONSE",
    "CR_IN_HTTP",
    "CR_IN_KEYGEN",
    "CR_IN_MACHINE",
    "CR_IN_PKCS10",
    "CR_IN_PKCS7",
    "CR_IN_RETURNCHALLENGE",
    "CR_IN_ROBO",
    "CR_IN_RPC",
    "CR_IN_SCEP",
    "CR_IN_SCEPPOST",
    "CR_IN_SIGNEDCERTIFICATETIMESTAMPLIST",
    "CR_OUT_BASE64",
    "CR_OUT_BASE64HEADER",
    "CR_OUT_BASE64REQUESTHEADER",
    "CR_OUT_BASE64X509CRLHEADER",
    "CR_OUT_BINARY",
    "CR_OUT_CHAIN",
    "CR_OUT_CRLS",
    "CR_OUT_ENCODEMASK",
    "CR_OUT_HEX",
    "CR_OUT_HEXADDR",
    "CR_OUT_HEXASCII",
    "CR_OUT_HEXASCIIADDR",
    "CR_OUT_HEXRAW",
    "CR_OUT_NOCR",
    "CR_OUT_NOCRLF",
    "CR_PROP_ADVANCEDSERVER",
    "CR_PROP_BASECRL",
    "CR_PROP_BASECRLPUBLISHSTATUS",
    "CR_PROP_CABACKWARDCROSSCERT",
    "CR_PROP_CABACKWARDCROSSCERTSTATE",
    "CR_PROP_CACERTSTATE",
    "CR_PROP_CACERTSTATUSCODE",
    "CR_PROP_CACERTVERSION",
    "CR_PROP_CAFORWARDCROSSCERT",
    "CR_PROP_CAFORWARDCROSSCERTSTATE",
    "CR_PROP_CANAME",
    "CR_PROP_CAPROPIDMAX",
    "CR_PROP_CASIGCERT",
    "CR_PROP_CASIGCERTCHAIN",
    "CR_PROP_CASIGCERTCOUNT",
    "CR_PROP_CASIGCERTCRLCHAIN",
    "CR_PROP_CATYPE",
    "CR_PROP_CAXCHGCERT",
    "CR_PROP_CAXCHGCERTCHAIN",
    "CR_PROP_CAXCHGCERTCOUNT",
    "CR_PROP_CAXCHGCERTCRLCHAIN",
    "CR_PROP_CERTAIAOCSPURLS",
    "CR_PROP_CERTAIAURLS",
    "CR_PROP_CERTCDPURLS",
    "CR_PROP_CRLSTATE",
    "CR_PROP_DELTACRL",
    "CR_PROP_DELTACRLPUBLISHSTATUS",
    "CR_PROP_DNSNAME",
    "CR_PROP_EXITCOUNT",
    "CR_PROP_EXITDESCRIPTION",
    "CR_PROP_FILEVERSION",
    "CR_PROP_KRACERT",
    "CR_PROP_KRACERTCOUNT",
    "CR_PROP_KRACERTSTATE",
    "CR_PROP_KRACERTUSEDCOUNT",
    "CR_PROP_LOCALENAME",
    "CR_PROP_NONE",
    "CR_PROP_PARENTCA",
    "CR_PROP_POLICYDESCRIPTION",
    "CR_PROP_PRODUCTVERSION",
    "CR_PROP_ROLESEPARATIONENABLED",
    "CR_PROP_SANITIZEDCANAME",
    "CR_PROP_SANITIZEDCASHORTNAME",
    "CR_PROP_SCEPMAX",
    "CR_PROP_SCEPMIN",
    "CR_PROP_SCEPSERVERCAPABILITIES",
    "CR_PROP_SCEPSERVERCERTS",
    "CR_PROP_SCEPSERVERCERTSCHAIN",
    "CR_PROP_SHAREDFOLDER",
    "CR_PROP_SUBJECTTEMPLATE_OIDS",
    "CR_PROP_TEMPLATES",
    "CSBACKUP_DISABLE_INCREMENTAL",
    "CSBACKUP_TYPE",
    "CSBACKUP_TYPE_FULL",
    "CSBACKUP_TYPE_LOGS_ONLY",
    "CSBACKUP_TYPE_MASK",
    "CSBFT_DATABASE_DIRECTORY",
    "CSBFT_DIRECTORY",
    "CSBFT_LOG_DIRECTORY",
    "CSCONTROL_RESTART",
    "CSCONTROL_SHUTDOWN",
    "CSCONTROL_SUSPEND",
    "CSEDB_RSTMAPW",
    "CSRESTORE_TYPE_CATCHUP",
    "CSRESTORE_TYPE_FULL",
    "CSRESTORE_TYPE_MASK",
    "CSRESTORE_TYPE_ONLINE",
    "CSURL_ADDTOCERTCDP",
    "CSURL_ADDTOCERTOCSP",
    "CSURL_ADDTOCRLCDP",
    "CSURL_ADDTOFRESHESTCRL",
    "CSURL_ADDTOIDP",
    "CSURL_PUBLISHRETRY",
    "CSURL_SERVERPUBLISH",
    "CSURL_SERVERPUBLISHDELTA",
    "CSVER_MAJOR",
    "CSVER_MAJOR_LONGHORN",
    "CSVER_MAJOR_THRESHOLD",
    "CSVER_MAJOR_WHISTLER",
    "CSVER_MAJOR_WIN2K",
    "CSVER_MAJOR_WIN7",
    "CSVER_MAJOR_WIN8",
    "CSVER_MAJOR_WINBLUE",
    "CSVER_MINOR",
    "CSVER_MINOR_LONGHORN_BETA1",
    "CSVER_MINOR_THRESHOLD",
    "CSVER_MINOR_WHISTLER_BETA2",
    "CSVER_MINOR_WHISTLER_BETA3",
    "CSVER_MINOR_WIN2K",
    "CSVER_MINOR_WIN7",
    "CSVER_MINOR_WIN8",
    "CSVER_MINOR_WINBLUE",
    "CSignerCertificate",
    "CSmimeCapabilities",
    "CSmimeCapability",
    "CVIEWAGEMINUTESDEFAULT",
    "CVRC_COLUMN",
    "CVRC_COLUMN_MASK",
    "CVRC_COLUMN_RESULT",
    "CVRC_COLUMN_SCHEMA",
    "CVRC_COLUMN_VALUE",
    "CVRC_TABLE",
    "CVRC_TABLE_ATTRIBUTES",
    "CVRC_TABLE_CRL",
    "CVRC_TABLE_EXTENSIONS",
    "CVRC_TABLE_MASK",
    "CVRC_TABLE_REQCERT",
    "CVRC_TABLE_SHIFT",
    "CVR_SEEK_EQ",
    "CVR_SEEK_GE",
    "CVR_SEEK_GT",
    "CVR_SEEK_LE",
    "CVR_SEEK_LT",
    "CVR_SEEK_MASK",
    "CVR_SEEK_NODELTA",
    "CVR_SEEK_NONE",
    "CVR_SORT_ASCEND",
    "CVR_SORT_DESCEND",
    "CVR_SORT_NONE",
    "CV_COLUMN_ATTRIBUTE_DEFAULT",
    "CV_COLUMN_CRL_DEFAULT",
    "CV_COLUMN_EXTENSION_DEFAULT",
    "CV_COLUMN_LOG_DEFAULT",
    "CV_COLUMN_LOG_FAILED_DEFAULT",
    "CV_COLUMN_LOG_REVOKED_DEFAULT",
    "CV_COLUMN_QUEUE_DEFAULT",
    "CV_OUT_BASE64",
    "CV_OUT_BASE64HEADER",
    "CV_OUT_BASE64REQUESTHEADER",
    "CV_OUT_BASE64X509CRLHEADER",
    "CV_OUT_BINARY",
    "CV_OUT_ENCODEMASK",
    "CV_OUT_HEX",
    "CV_OUT_HEXADDR",
    "CV_OUT_HEXASCII",
    "CV_OUT_HEXASCIIADDR",
    "CV_OUT_HEXRAW",
    "CV_OUT_NOCR",
    "CV_OUT_NOCRLF",
    "CX500DistinguishedName",
    "CX509Attribute",
    "CX509AttributeArchiveKey",
    "CX509AttributeArchiveKeyHash",
    "CX509AttributeClientId",
    "CX509AttributeCspProvider",
    "CX509AttributeExtensions",
    "CX509AttributeOSVersion",
    "CX509AttributeRenewalCertificate",
    "CX509Attributes",
    "CX509CertificateRequestCertificate",
    "CX509CertificateRequestCmc",
    "CX509CertificateRequestPkcs10",
    "CX509CertificateRequestPkcs7",
    "CX509CertificateRevocationList",
    "CX509CertificateRevocationListEntries",
    "CX509CertificateRevocationListEntry",
    "CX509CertificateTemplateADWritable",
    "CX509EndorsementKey",
    "CX509Enrollment",
    "CX509EnrollmentHelper",
    "CX509EnrollmentPolicyActiveDirectory",
    "CX509EnrollmentPolicyWebService",
    "CX509EnrollmentWebClassFactory",
    "CX509Extension",
    "CX509ExtensionAlternativeNames",
    "CX509ExtensionAuthorityKeyIdentifier",
    "CX509ExtensionBasicConstraints",
    "CX509ExtensionCertificatePolicies",
    "CX509ExtensionEnhancedKeyUsage",
    "CX509ExtensionKeyUsage",
    "CX509ExtensionMSApplicationPolicies",
    "CX509ExtensionSmimeCapabilities",
    "CX509ExtensionSubjectKeyIdentifier",
    "CX509ExtensionTemplate",
    "CX509ExtensionTemplateName",
    "CX509Extensions",
    "CX509MachineEnrollmentFactory",
    "CX509NameValuePair",
    "CX509PolicyServerListManager",
    "CX509PolicyServerUrl",
    "CX509PrivateKey",
    "CX509PublicKey",
    "CX509SCEPEnrollment",
    "CX509SCEPEnrollmentHelper",
    "CertSrvBackupClose",
    "CertSrvBackupEnd",
    "CertSrvBackupFree",
    "CertSrvBackupGetBackupLogsW",
    "CertSrvBackupGetDatabaseNamesW",
    "CertSrvBackupGetDynamicFileListW",
    "CertSrvBackupOpenFileW",
    "CertSrvBackupPrepareW",
    "CertSrvBackupRead",
    "CertSrvBackupTruncateLogs",
    "CertSrvIsServerOnlineW",
    "CertSrvRestoreEnd",
    "CertSrvRestoreGetDatabaseLocationsW",
    "CertSrvRestorePrepareW",
    "CertSrvRestoreRegisterComplete",
    "CertSrvRestoreRegisterThroughFile",
    "CertSrvRestoreRegisterW",
    "CertSrvServerControlW",
    "CommitTemplateFlags",
    "CommitTemplateFlags_CommitFlagDeleteTemplate",
    "CommitTemplateFlags_CommitFlagSaveTemplateGenerateOID",
    "CommitTemplateFlags_CommitFlagSaveTemplateOverwrite",
    "CommitTemplateFlags_CommitFlagSaveTemplateUseCurrentOID",
    "DBFLAGS_CHECKPOINTDEPTH60MB",
    "DBFLAGS_CIRCULARLOGGING",
    "DBFLAGS_CREATEIFNEEDED",
    "DBFLAGS_DISABLESNAPSHOTBACKUP",
    "DBFLAGS_ENABLEVOLATILEREQUESTS",
    "DBFLAGS_LAZYFLUSH",
    "DBFLAGS_LOGBUFFERSHUGE",
    "DBFLAGS_LOGBUFFERSLARGE",
    "DBFLAGS_LOGFILESIZE16MB",
    "DBFLAGS_MAXCACHESIZEX100",
    "DBFLAGS_MULTITHREADTRANSACTIONS",
    "DBFLAGS_READONLY",
    "DBG_CERTSRV",
    "DBSESSIONCOUNTDEFAULT",
    "DB_DISP_ACTIVE",
    "DB_DISP_CA_CERT",
    "DB_DISP_CA_CERT_CHAIN",
    "DB_DISP_DENIED",
    "DB_DISP_ERROR",
    "DB_DISP_FOREIGN",
    "DB_DISP_ISSUED",
    "DB_DISP_KRA_CERT",
    "DB_DISP_LOG_FAILED_MIN",
    "DB_DISP_LOG_MIN",
    "DB_DISP_PENDING",
    "DB_DISP_QUEUE_MAX",
    "DB_DISP_REVOKED",
    "DelayRetryAction",
    "DelayRetryAction_DelayRetryLong",
    "DelayRetryAction_DelayRetryNone",
    "DelayRetryAction_DelayRetryPastSuccess",
    "DelayRetryAction_DelayRetryShort",
    "DelayRetryAction_DelayRetrySuccess",
    "DelayRetryAction_DelayRetryUnknown",
    "EANR_SUPPRESS_IA5CONVERSION",
    "EAN_NAMEOBJECTID",
    "EDITF_ADDOLDCERTTYPE",
    "EDITF_ADDOLDKEYUSAGE",
    "EDITF_ATTRIBUTECA",
    "EDITF_ATTRIBUTEEKU",
    "EDITF_ATTRIBUTEENDDATE",
    "EDITF_ATTRIBUTESUBJECTALTNAME2",
    "EDITF_AUDITCERTTEMPLATELOAD",
    "EDITF_BASICCONSTRAINTSCA",
    "EDITF_BASICCONSTRAINTSCRITICAL",
    "EDITF_DISABLEEXTENSIONLIST",
    "EDITF_DISABLELDAPPACKAGELIST",
    "EDITF_DISABLEOLDOSCNUPN",
    "EDITF_EMAILOPTIONAL",
    "EDITF_ENABLEAKICRITICAL",
    "EDITF_ENABLEAKIISSUERNAME",
    "EDITF_ENABLEAKIISSUERSERIAL",
    "EDITF_ENABLEAKIKEYID",
    "EDITF_ENABLECHASECLIENTDC",
    "EDITF_ENABLEDEFAULTSMIME",
    "EDITF_ENABLEKEYENCIPHERMENTCACERT",
    "EDITF_ENABLELDAPREFERRALS",
    "EDITF_ENABLEOCSPREVNOCHECK",
    "EDITF_ENABLERENEWONBEHALFOF",
    "EDITF_ENABLEREQUESTEXTENSIONS",
    "EDITF_ENABLEUPNMAP",
    "EDITF_IGNOREREQUESTERGROUP",
    "EDITF_REQUESTEXTENSIONLIST",
    "EDITF_SERVERUPGRADED",
    "ENUMEXT_OBJECTID",
    "ENUM_CATYPES",
    "ENUM_CERT_COLUMN_VALUE_FLAGS",
    "ENUM_ENTERPRISE_ROOTCA",
    "ENUM_ENTERPRISE_SUBCA",
    "ENUM_STANDALONE_ROOTCA",
    "ENUM_STANDALONE_SUBCA",
    "ENUM_UNKNOWN_CA",
    "EXITEVENT_CERTDENIED",
    "EXITEVENT_CERTIMPORTED",
    "EXITEVENT_CERTISSUED",
    "EXITEVENT_CERTPENDING",
    "EXITEVENT_CERTRETRIEVEPENDING",
    "EXITEVENT_CERTREVOKED",
    "EXITEVENT_CRLISSUED",
    "EXITEVENT_INVALID",
    "EXITEVENT_SHUTDOWN",
    "EXITEVENT_STARTUP",
    "EXITPUB_ACTIVEDIRECTORY",
    "EXITPUB_DEFAULT_ENTERPRISE",
    "EXITPUB_DEFAULT_STANDALONE",
    "EXITPUB_FILE",
    "EXITPUB_REMOVEOLDCERTS",
    "EXTENSION_CRITICAL_FLAG",
    "EXTENSION_DELETE_FLAG",
    "EXTENSION_DISABLE_FLAG",
    "EXTENSION_ORIGIN_ADMIN",
    "EXTENSION_ORIGIN_CACERT",
    "EXTENSION_ORIGIN_CMC",
    "EXTENSION_ORIGIN_IMPORTEDCERT",
    "EXTENSION_ORIGIN_MASK",
    "EXTENSION_ORIGIN_PKCS7",
    "EXTENSION_ORIGIN_POLICY",
    "EXTENSION_ORIGIN_RENEWALCERT",
    "EXTENSION_ORIGIN_REQUEST",
    "EXTENSION_ORIGIN_SERVER",
    "EXTENSION_POLICY_MASK",
    "EncodingType",
    "EnrollmentCAProperty",
    "EnrollmentCAProperty_CAPropCertificate",
    "EnrollmentCAProperty_CAPropCertificateTypes",
    "EnrollmentCAProperty_CAPropCommonName",
    "EnrollmentCAProperty_CAPropDNSName",
    "EnrollmentCAProperty_CAPropDescription",
    "EnrollmentCAProperty_CAPropDistinguishedName",
    "EnrollmentCAProperty_CAPropRenewalOnly",
    "EnrollmentCAProperty_CAPropSanitizedName",
    "EnrollmentCAProperty_CAPropSanitizedShortName",
    "EnrollmentCAProperty_CAPropSecurity",
    "EnrollmentCAProperty_CAPropSiteName",
    "EnrollmentCAProperty_CAPropWebServers",
    "EnrollmentDisplayStatus",
    "EnrollmentDisplayStatus_DisplayNo",
    "EnrollmentDisplayStatus_DisplayYes",
    "EnrollmentEnrollStatus",
    "EnrollmentEnrollStatus_EnrollDenied",
    "EnrollmentEnrollStatus_EnrollError",
    "EnrollmentEnrollStatus_EnrollPended",
    "EnrollmentEnrollStatus_EnrollSkipped",
    "EnrollmentEnrollStatus_EnrollUIDeferredEnrollmentRequired",
    "EnrollmentEnrollStatus_EnrollUnknown",
    "EnrollmentEnrollStatus_Enrolled",
    "EnrollmentPolicyFlags",
    "EnrollmentPolicyFlags_DisableGroupPolicyList",
    "EnrollmentPolicyFlags_DisableUserServerList",
    "EnrollmentPolicyServerPropertyFlags",
    "EnrollmentPolicyServerPropertyFlags_DefaultNone",
    "EnrollmentPolicyServerPropertyFlags_DefaultPolicyServer",
    "EnrollmentSelectionStatus",
    "EnrollmentSelectionStatus_SelectedNo",
    "EnrollmentSelectionStatus_SelectedYes",
    "EnrollmentTemplateProperty",
    "EnrollmentTemplateProperty_TemplatePropAsymmetricAlgorithm",
    "EnrollmentTemplateProperty_TemplatePropCertificatePolicies",
    "EnrollmentTemplateProperty_TemplatePropCommonName",
    "EnrollmentTemplateProperty_TemplatePropCryptoProviders",
    "EnrollmentTemplateProperty_TemplatePropDescription",
    "EnrollmentTemplateProperty_TemplatePropEKUs",
    "EnrollmentTemplateProperty_TemplatePropEnrollmentFlags",
    "EnrollmentTemplateProperty_TemplatePropExtensions",
    "EnrollmentTemplateProperty_TemplatePropFriendlyName",
    "EnrollmentTemplateProperty_TemplatePropGeneralFlags",
    "EnrollmentTemplateProperty_TemplatePropHashAlgorithm",
    "EnrollmentTemplateProperty_TemplatePropKeySecurityDescriptor",
    "EnrollmentTemplateProperty_TemplatePropKeySpec",
    "EnrollmentTemplateProperty_TemplatePropKeyUsage",
    "EnrollmentTemplateProperty_TemplatePropMajorRevision",
    "EnrollmentTemplateProperty_TemplatePropMinimumKeySize",
    "EnrollmentTemplateProperty_TemplatePropMinorRevision",
    "EnrollmentTemplateProperty_TemplatePropOID",
    "EnrollmentTemplateProperty_TemplatePropPrivateKeyFlags",
    "EnrollmentTemplateProperty_TemplatePropRACertificatePolicies",
    "EnrollmentTemplateProperty_TemplatePropRAEKUs",
    "EnrollmentTemplateProperty_TemplatePropRASignatureCount",
    "EnrollmentTemplateProperty_TemplatePropRenewalPeriod",
    "EnrollmentTemplateProperty_TemplatePropSchemaVersion",
    "EnrollmentTemplateProperty_TemplatePropSecurityDescriptor",
    "EnrollmentTemplateProperty_TemplatePropSubjectNameFlags",
    "EnrollmentTemplateProperty_TemplatePropSupersede",
    "EnrollmentTemplateProperty_TemplatePropSymmetricAlgorithm",
    "EnrollmentTemplateProperty_TemplatePropSymmetricKeyLength",
    "EnrollmentTemplateProperty_TemplatePropV1ApplicationPolicy",
    "EnrollmentTemplateProperty_TemplatePropValidityPeriod",
    "FNCERTSRVBACKUPCLOSE",
    "FNCERTSRVBACKUPEND",
    "FNCERTSRVBACKUPFREE",
    "FNCERTSRVBACKUPGETBACKUPLOGSW",
    "FNCERTSRVBACKUPGETDATABASENAMESW",
    "FNCERTSRVBACKUPGETDYNAMICFILELISTW",
    "FNCERTSRVBACKUPOPENFILEW",
    "FNCERTSRVBACKUPPREPAREW",
    "FNCERTSRVBACKUPREAD",
    "FNCERTSRVBACKUPTRUNCATELOGS",
    "FNCERTSRVISSERVERONLINEW",
    "FNCERTSRVRESTOREEND",
    "FNCERTSRVRESTOREGETDATABASELOCATIONSW",
    "FNCERTSRVRESTOREPREPAREW",
    "FNCERTSRVRESTOREREGISTERCOMPLETE",
    "FNCERTSRVRESTOREREGISTERW",
    "FNCERTSRVSERVERCONTROLW",
    "FNIMPORTPFXTOPROVIDER",
    "FNIMPORTPFXTOPROVIDERFREEDATA",
    "FR_PROP_ATTESTATIONCHALLENGE",
    "FR_PROP_ATTESTATIONPROVIDERNAME",
    "FR_PROP_BODYPARTSTRING",
    "FR_PROP_CAEXCHANGECERTIFICATE",
    "FR_PROP_CAEXCHANGECERTIFICATECHAIN",
    "FR_PROP_CAEXCHANGECERTIFICATECRLCHAIN",
    "FR_PROP_CAEXCHANGECERTIFICATEHASH",
    "FR_PROP_CLAIMCHALLENGE",
    "FR_PROP_ENCRYPTEDKEYHASH",
    "FR_PROP_FAILINFO",
    "FR_PROP_FULLRESPONSE",
    "FR_PROP_FULLRESPONSENOPKCS7",
    "FR_PROP_ISSUEDCERTIFICATE",
    "FR_PROP_ISSUEDCERTIFICATECHAIN",
    "FR_PROP_ISSUEDCERTIFICATECRLCHAIN",
    "FR_PROP_ISSUEDCERTIFICATEHASH",
    "FR_PROP_NONE",
    "FR_PROP_OTHERINFOCHOICE",
    "FR_PROP_PENDINFOTIME",
    "FR_PROP_PENDINFOTOKEN",
    "FR_PROP_STATUS",
    "FR_PROP_STATUSINFOCOUNT",
    "FR_PROP_STATUSSTRING",
    "FULL_RESPONSE_PROPERTY_ID",
    "IAlternativeName",
    "IAlternativeNames",
    "IBinaryConverter",
    "IBinaryConverter2",
    "ICEnroll",
    "ICEnroll2",
    "ICEnroll3",
    "ICEnroll4",
    "ICF_ALLOWFOREIGN",
    "ICF_EXISTINGROW",
    "ICertAdmin",
    "ICertAdmin2",
    "ICertConfig",
    "ICertConfig2",
    "ICertEncodeAltName",
    "ICertEncodeAltName2",
    "ICertEncodeBitString",
    "ICertEncodeBitString2",
    "ICertEncodeCRLDistInfo",
    "ICertEncodeCRLDistInfo2",
    "ICertEncodeDateArray",
    "ICertEncodeDateArray2",
    "ICertEncodeLongArray",
    "ICertEncodeLongArray2",
    "ICertEncodeStringArray",
    "ICertEncodeStringArray2",
    "ICertExit",
    "ICertExit2",
    "ICertGetConfig",
    "ICertManageModule",
    "ICertPolicy",
    "ICertPolicy2",
    "ICertProperties",
    "ICertProperty",
    "ICertPropertyArchived",
    "ICertPropertyArchivedKeyHash",
    "ICertPropertyAutoEnroll",
    "ICertPropertyBackedUp",
    "ICertPropertyDescription",
    "ICertPropertyEnrollment",
    "ICertPropertyEnrollmentPolicyServer",
    "ICertPropertyFriendlyName",
    "ICertPropertyKeyProvInfo",
    "ICertPropertyRenewal",
    "ICertPropertyRequestOriginator",
    "ICertPropertySHA1Hash",
    "ICertRequest",
    "ICertRequest2",
    "ICertRequest3",
    "ICertRequestD",
    "ICertRequestD2",
    "ICertServerExit",
    "ICertServerPolicy",
    "ICertView",
    "ICertView2",
    "ICertificateAttestationChallenge",
    "ICertificateAttestationChallenge2",
    "ICertificatePolicies",
    "ICertificatePolicy",
    "ICertificationAuthorities",
    "ICertificationAuthority",
    "ICryptAttribute",
    "ICryptAttributes",
    "ICspAlgorithm",
    "ICspAlgorithms",
    "ICspInformation",
    "ICspInformations",
    "ICspStatus",
    "ICspStatuses",
    "IEnroll",
    "IEnroll2",
    "IEnroll4",
    "IEnumCERTVIEWATTRIBUTE",
    "IEnumCERTVIEWCOLUMN",
    "IEnumCERTVIEWEXTENSION",
    "IEnumCERTVIEWROW",
    "IF_ENABLEADMINASAUDITOR",
    "IF_ENABLEEXITKEYRETRIEVAL",
    "IF_ENFORCEENCRYPTICERTADMIN",
    "IF_ENFORCEENCRYPTICERTREQUEST",
    "IF_LOCKICERTREQUEST",
    "IF_NOLOCALICERTADMIN",
    "IF_NOLOCALICERTADMINBACKUP",
    "IF_NOLOCALICERTREQUEST",
    "IF_NOREMOTEICERTADMIN",
    "IF_NOREMOTEICERTADMINBACKUP",
    "IF_NOREMOTEICERTREQUEST",
    "IF_NORPCICERTREQUEST",
    "IF_NOSNAPSHOTBACKUP",
    "IKF_OVERWRITE",
    "INDESPolicy",
    "IOCSPAdmin",
    "IOCSPCAConfiguration",
    "IOCSPCAConfigurationCollection",
    "IOCSPProperty",
    "IOCSPPropertyCollection",
    "IObjectId",
    "IObjectIds",
    "IPolicyQualifier",
    "IPolicyQualifiers",
    "ISSCERT_DEFAULT_DS",
    "ISSCERT_DEFAULT_NODS",
    "ISSCERT_ENABLE",
    "ISSCERT_FILEURL_OLD",
    "ISSCERT_FTPURL_OLD",
    "ISSCERT_HTTPURL_OLD",
    "ISSCERT_LDAPURL_OLD",
    "ISSCERT_URLMASK_OLD",
    "ISignerCertificate",
    "ISignerCertificates",
    "ISmimeCapabilities",
    "ISmimeCapability",
    "IX500DistinguishedName",
    "IX509Attribute",
    "IX509AttributeArchiveKey",
    "IX509AttributeArchiveKeyHash",
    "IX509AttributeClientId",
    "IX509AttributeCspProvider",
    "IX509AttributeExtensions",
    "IX509AttributeOSVersion",
    "IX509AttributeRenewalCertificate",
    "IX509Attributes",
    "IX509CertificateRequest",
    "IX509CertificateRequestCertificate",
    "IX509CertificateRequestCertificate2",
    "IX509CertificateRequestCmc",
    "IX509CertificateRequestCmc2",
    "IX509CertificateRequestPkcs10",
    "IX509CertificateRequestPkcs10V2",
    "IX509CertificateRequestPkcs10V3",
    "IX509CertificateRequestPkcs10V4",
    "IX509CertificateRequestPkcs7",
    "IX509CertificateRequestPkcs7V2",
    "IX509CertificateRevocationList",
    "IX509CertificateRevocationListEntries",
    "IX509CertificateRevocationListEntry",
    "IX509CertificateTemplate",
    "IX509CertificateTemplateWritable",
    "IX509CertificateTemplates",
    "IX509EndorsementKey",
    "IX509Enrollment",
    "IX509Enrollment2",
    "IX509EnrollmentHelper",
    "IX509EnrollmentPolicyServer",
    "IX509EnrollmentStatus",
    "IX509EnrollmentWebClassFactory",
    "IX509Extension",
    "IX509ExtensionAlternativeNames",
    "IX509ExtensionAuthorityKeyIdentifier",
    "IX509ExtensionBasicConstraints",
    "IX509ExtensionCertificatePolicies",
    "IX509ExtensionEnhancedKeyUsage",
    "IX509ExtensionKeyUsage",
    "IX509ExtensionMSApplicationPolicies",
    "IX509ExtensionSmimeCapabilities",
    "IX509ExtensionSubjectKeyIdentifier",
    "IX509ExtensionTemplate",
    "IX509ExtensionTemplateName",
    "IX509Extensions",
    "IX509MachineEnrollmentFactory",
    "IX509NameValuePair",
    "IX509NameValuePairs",
    "IX509PolicyServerListManager",
    "IX509PolicyServerUrl",
    "IX509PrivateKey",
    "IX509PrivateKey2",
    "IX509PublicKey",
    "IX509SCEPEnrollment",
    "IX509SCEPEnrollment2",
    "IX509SCEPEnrollmentHelper",
    "IX509SignatureInformation",
    "ImportPFXFlags",
    "ImportPFXFlags_ImportExportable",
    "ImportPFXFlags_ImportExportableEncrypted",
    "ImportPFXFlags_ImportForceOverwrite",
    "ImportPFXFlags_ImportInstallCertificate",
    "ImportPFXFlags_ImportInstallChain",
    "ImportPFXFlags_ImportInstallChainAndRoot",
    "ImportPFXFlags_ImportMachineContext",
    "ImportPFXFlags_ImportNoUserProtected",
    "ImportPFXFlags_ImportNone",
    "ImportPFXFlags_ImportSaveProperties",
    "ImportPFXFlags_ImportSilent",
    "ImportPFXFlags_ImportUserProtected",
    "ImportPFXFlags_ImportUserProtectedHigh",
    "InnerRequestLevel",
    "InnerRequestLevel_LevelInnermost",
    "InnerRequestLevel_LevelNext",
    "InstallResponseRestrictionFlags",
    "InstallResponseRestrictionFlags_AllowNoOutstandingRequest",
    "InstallResponseRestrictionFlags_AllowNone",
    "InstallResponseRestrictionFlags_AllowUntrustedCertificate",
    "InstallResponseRestrictionFlags_AllowUntrustedRoot",
    "KRAF_DISABLEUSEDEFAULTPROVIDER",
    "KRAF_ENABLEARCHIVEALL",
    "KRAF_ENABLEFOREIGN",
    "KRAF_SAVEBADREQUESTKEY",
    "KRA_DISP_EXPIRED",
    "KRA_DISP_INVALID",
    "KRA_DISP_NOTFOUND",
    "KRA_DISP_NOTLOADED",
    "KRA_DISP_REVOKED",
    "KRA_DISP_UNTRUSTED",
    "KRA_DISP_VALID",
    "KR_ENABLE_MACHINE",
    "KR_ENABLE_USER",
    "KeyAttestationClaimType",
    "KeyIdentifierHashAlgorithm",
    "KeyIdentifierHashAlgorithm_SKIHashCapiSha1",
    "KeyIdentifierHashAlgorithm_SKIHashDefault",
    "KeyIdentifierHashAlgorithm_SKIHashHPKP",
    "KeyIdentifierHashAlgorithm_SKIHashSha1",
    "KeyIdentifierHashAlgorithm_SKIHashSha256",
    "LDAPF_SIGNDISABLE",
    "LDAPF_SSLENABLE",
    "OCSPAdmin",
    "OCSPPropertyCollection",
    "OCSPRequestFlag",
    "OCSPSigningFlag",
    "OCSP_RF_REJECT_SIGNED_REQUESTS",
    "OCSP_SF_ALLOW_NONCE_EXTENSION",
    "OCSP_SF_ALLOW_SIGNINGCERT_AUTOENROLLMENT",
    "OCSP_SF_ALLOW_SIGNINGCERT_AUTORENEWAL",
    "OCSP_SF_AUTODISCOVER_SIGNINGCERT",
    "OCSP_SF_FORCE_SIGNINGCERT_ISSUER_ISCA",
    "OCSP_SF_MANUAL_ASSIGN_SIGNINGCERT",
    "OCSP_SF_RESPONDER_ID_KEYHASH",
    "OCSP_SF_RESPONDER_ID_NAME",
    "OCSP_SF_SILENT",
    "OCSP_SF_USE_CACERT",
    "ObjectIdGroupId",
    "ObjectIdPublicKeyFlags",
    "PENDING_REQUEST_DESIRED_PROPERTY",
    "PFXExportOptions",
    "PFXExportOptions_PFXExportChainNoRoot",
    "PFXExportOptions_PFXExportChainWithRoot",
    "PFXExportOptions_PFXExportEEOnly",
    "PROCFLG_ENFORCEGOODKEYS",
    "PROCFLG_NONE",
    "PROPCALLER_ADMIN",
    "PROPCALLER_EXIT",
    "PROPCALLER_MASK",
    "PROPCALLER_POLICY",
    "PROPCALLER_REQUEST",
    "PROPCALLER_SERVER",
    "PROPFLAGS_INDEXED",
    "PROPTYPE_BINARY",
    "PROPTYPE_DATE",
    "PROPTYPE_LONG",
    "PROPTYPE_MASK",
    "PROPTYPE_STRING",
    "Pkcs10AllowedSignatureTypes",
    "Pkcs10AllowedSignatureTypes_AllowedKeySignature",
    "Pkcs10AllowedSignatureTypes_AllowedNullSignature",
    "PolicyQualifierType",
    "PolicyQualifierType_PolicyQualifierTypeFlags",
    "PolicyQualifierType_PolicyQualifierTypeUnknown",
    "PolicyQualifierType_PolicyQualifierTypeUrl",
    "PolicyQualifierType_PolicyQualifierTypeUserNotice",
    "PolicyServerUrlFlags",
    "PolicyServerUrlFlags_PsfAllowUnTrustedCA",
    "PolicyServerUrlFlags_PsfAutoEnrollmentEnabled",
    "PolicyServerUrlFlags_PsfLocationGroupPolicy",
    "PolicyServerUrlFlags_PsfLocationRegistry",
    "PolicyServerUrlFlags_PsfNone",
    "PolicyServerUrlFlags_PsfUseClientId",
    "PolicyServerUrlPropertyID",
    "PolicyServerUrlPropertyID_PsFriendlyName",
    "PolicyServerUrlPropertyID_PsPolicyID",
    "PstAcquirePrivateKey",
    "PstGetCertificateChain",
    "PstGetCertificates",
    "PstGetTrustAnchors",
    "PstGetTrustAnchorsEx",
    "PstGetUserNameForCertificate",
    "PstMapCertificate",
    "PstValidate",
    "REQDISP_DEFAULT_ENTERPRISE",
    "REQDISP_DENY",
    "REQDISP_ISSUE",
    "REQDISP_MASK",
    "REQDISP_PENDING",
    "REQDISP_PENDINGFIRST",
    "REQDISP_USEREQUESTATTRIBUTE",
    "REVEXT_ASPENABLE",
    "REVEXT_CDPENABLE",
    "REVEXT_CDPFILEURL_OLD",
    "REVEXT_CDPFTPURL_OLD",
    "REVEXT_CDPHTTPURL_OLD",
    "REVEXT_CDPLDAPURL_OLD",
    "REVEXT_CDPURLMASK_OLD",
    "REVEXT_DEFAULT_DS",
    "REVEXT_DEFAULT_NODS",
    "RequestClientInfoClientId",
    "RequestClientInfoClientId_ClientIdAutoEnroll",
    "RequestClientInfoClientId_ClientIdAutoEnroll2003",
    "RequestClientInfoClientId_ClientIdCertReq",
    "RequestClientInfoClientId_ClientIdCertReq2003",
    "RequestClientInfoClientId_ClientIdDefaultRequest",
    "RequestClientInfoClientId_ClientIdEOBO",
    "RequestClientInfoClientId_ClientIdNone",
    "RequestClientInfoClientId_ClientIdRequestWizard",
    "RequestClientInfoClientId_ClientIdTest",
    "RequestClientInfoClientId_ClientIdUserStart",
    "RequestClientInfoClientId_ClientIdWinRT",
    "RequestClientInfoClientId_ClientIdWizard2003",
    "RequestClientInfoClientId_ClientIdXEnroll2003",
    "SETUP_ATTEMPT_VROOT_CREATE",
    "SETUP_CLIENT_FLAG",
    "SETUP_CREATEDB_FLAG",
    "SETUP_DCOM_SECURITY_UPDATED_FLAG",
    "SETUP_DENIED_FLAG",
    "SETUP_FORCECRL_FLAG",
    "SETUP_ONLINE_FLAG",
    "SETUP_REQUEST_FLAG",
    "SETUP_SECURITY_CHANGED",
    "SETUP_SERVER_FLAG",
    "SETUP_SERVER_IS_UP_TO_DATE_FLAG",
    "SETUP_SERVER_UPGRADED_FLAG",
    "SETUP_SUSPEND_FLAG",
    "SETUP_UPDATE_CAOBJECT_SVRTYPE",
    "SETUP_W2K_SECURITY_NOT_UPGRADED_FLAG",
    "TP_MACHINEPOLICY",
    "VR_INSTANT_BAD",
    "VR_INSTANT_OK",
    "VR_PENDING",
    "WebEnrollmentFlags",
    "WebEnrollmentFlags_EnrollPrompt",
    "WebSecurityLevel",
    "WebSecurityLevel_LevelSafe",
    "WebSecurityLevel_LevelUnsafe",
    "X500NameFlags",
    "X509CertificateEnrollmentContext",
    "X509CertificateEnrollmentContext_ContextAdministratorForceMachine",
    "X509CertificateEnrollmentContext_ContextMachine",
    "X509CertificateEnrollmentContext_ContextNone",
    "X509CertificateEnrollmentContext_ContextUser",
    "X509CertificateTemplateEnrollmentFlag",
    "X509CertificateTemplateEnrollmentFlag_EnrollmentAddOCSPNoCheck",
    "X509CertificateTemplateEnrollmentFlag_EnrollmentAddTemplateName",
    "X509CertificateTemplateEnrollmentFlag_EnrollmentAllowEnrollOnBehalfOf",
    "X509CertificateTemplateEnrollmentFlag_EnrollmentAutoEnrollment",
    "X509CertificateTemplateEnrollmentFlag_EnrollmentAutoEnrollmentCheckUserDSCertificate",
    "X509CertificateTemplateEnrollmentFlag_EnrollmentCertificateIssuancePoliciesFromRequest",
    "X509CertificateTemplateEnrollmentFlag_EnrollmentDomainAuthenticationNotRequired",
    "X509CertificateTemplateEnrollmentFlag_EnrollmentIncludeBasicConstraintsForEECerts",
    "X509CertificateTemplateEnrollmentFlag_EnrollmentIncludeSymmetricAlgorithms",
    "X509CertificateTemplateEnrollmentFlag_EnrollmentNoRevocationInfoInCerts",
    "X509CertificateTemplateEnrollmentFlag_EnrollmentPendAllRequests",
    "X509CertificateTemplateEnrollmentFlag_EnrollmentPreviousApprovalKeyBasedValidateReenrollment",
    "X509CertificateTemplateEnrollmentFlag_EnrollmentPreviousApprovalValidateReenrollment",
    "X509CertificateTemplateEnrollmentFlag_EnrollmentPublishToDS",
    "X509CertificateTemplateEnrollmentFlag_EnrollmentPublishToKRAContainer",
    "X509CertificateTemplateEnrollmentFlag_EnrollmentRemoveInvalidCertificateFromPersonalStore",
    "X509CertificateTemplateEnrollmentFlag_EnrollmentReuseKeyOnFullSmartCard",
    "X509CertificateTemplateEnrollmentFlag_EnrollmentSkipAutoRenewal",
    "X509CertificateTemplateEnrollmentFlag_EnrollmentUserInteractionRequired",
    "X509CertificateTemplateGeneralFlag",
    "X509CertificateTemplateGeneralFlag_GeneralCA",
    "X509CertificateTemplateGeneralFlag_GeneralCrossCA",
    "X509CertificateTemplateGeneralFlag_GeneralDefault",
    "X509CertificateTemplateGeneralFlag_GeneralDonotPersist",
    "X509CertificateTemplateGeneralFlag_GeneralMachineType",
    "X509CertificateTemplateGeneralFlag_GeneralModified",
    "X509CertificateTemplatePrivateKeyFlag",
    "X509CertificateTemplatePrivateKeyFlag_PrivateKeyAttestMask",
    "X509CertificateTemplatePrivateKeyFlag_PrivateKeyAttestNone",
    "X509CertificateTemplatePrivateKeyFlag_PrivateKeyAttestPreferred",
    "X509CertificateTemplatePrivateKeyFlag_PrivateKeyAttestRequired",
    "X509CertificateTemplatePrivateKeyFlag_PrivateKeyAttestWithoutPolicy",
    "X509CertificateTemplatePrivateKeyFlag_PrivateKeyClientVersionMask",
    "X509CertificateTemplatePrivateKeyFlag_PrivateKeyClientVersionShift",
    "X509CertificateTemplatePrivateKeyFlag_PrivateKeyEKTrustOnUse",
    "X509CertificateTemplatePrivateKeyFlag_PrivateKeyEKValidateCert",
    "X509CertificateTemplatePrivateKeyFlag_PrivateKeyEKValidateKey",
    "X509CertificateTemplatePrivateKeyFlag_PrivateKeyExportable",
    "X509CertificateTemplatePrivateKeyFlag_PrivateKeyHelloKspKey",
    "X509CertificateTemplatePrivateKeyFlag_PrivateKeyHelloLogonKey",
    "X509CertificateTemplatePrivateKeyFlag_PrivateKeyRequireAlternateSignatureAlgorithm",
    "X509CertificateTemplatePrivateKeyFlag_PrivateKeyRequireArchival",
    "X509CertificateTemplatePrivateKeyFlag_PrivateKeyRequireSameKeyRenewal",
    "X509CertificateTemplatePrivateKeyFlag_PrivateKeyRequireStrongKeyProtection",
    "X509CertificateTemplatePrivateKeyFlag_PrivateKeyServerVersionMask",
    "X509CertificateTemplatePrivateKeyFlag_PrivateKeyServerVersionShift",
    "X509CertificateTemplatePrivateKeyFlag_PrivateKeyUseLegacyProvider",
    "X509CertificateTemplateSubjectNameFlag",
    "X509CertificateTemplateSubjectNameFlag_SubjectAlternativeNameEnrolleeSupplies",
    "X509CertificateTemplateSubjectNameFlag_SubjectAlternativeNameRequireDNS",
    "X509CertificateTemplateSubjectNameFlag_SubjectAlternativeNameRequireDirectoryGUID",
    "X509CertificateTemplateSubjectNameFlag_SubjectAlternativeNameRequireDomainDNS",
    "X509CertificateTemplateSubjectNameFlag_SubjectAlternativeNameRequireEmail",
    "X509CertificateTemplateSubjectNameFlag_SubjectAlternativeNameRequireSPN",
    "X509CertificateTemplateSubjectNameFlag_SubjectAlternativeNameRequireUPN",
    "X509CertificateTemplateSubjectNameFlag_SubjectNameAndAlternativeNameOldCertSupplies",
    "X509CertificateTemplateSubjectNameFlag_SubjectNameEnrolleeSupplies",
    "X509CertificateTemplateSubjectNameFlag_SubjectNameRequireCommonName",
    "X509CertificateTemplateSubjectNameFlag_SubjectNameRequireDNS",
    "X509CertificateTemplateSubjectNameFlag_SubjectNameRequireDirectoryPath",
    "X509CertificateTemplateSubjectNameFlag_SubjectNameRequireEmail",
    "X509EnrollmentAuthFlags",
    "X509EnrollmentAuthFlags_X509AuthAnonymous",
    "X509EnrollmentAuthFlags_X509AuthCertificate",
    "X509EnrollmentAuthFlags_X509AuthKerberos",
    "X509EnrollmentAuthFlags_X509AuthNone",
    "X509EnrollmentAuthFlags_X509AuthUsername",
    "X509EnrollmentPolicyExportFlags",
    "X509EnrollmentPolicyExportFlags_ExportCAs",
    "X509EnrollmentPolicyExportFlags_ExportOIDs",
    "X509EnrollmentPolicyExportFlags_ExportTemplates",
    "X509EnrollmentPolicyLoadOption",
    "X509EnrollmentPolicyLoadOption_LoadOptionCacheOnly",
    "X509EnrollmentPolicyLoadOption_LoadOptionDefault",
    "X509EnrollmentPolicyLoadOption_LoadOptionRegisterForADChanges",
    "X509EnrollmentPolicyLoadOption_LoadOptionReload",
    "X509HardwareKeyUsageFlags",
    "X509KeyParametersExportType",
    "X509KeySpec",
    "X509KeyUsageFlags",
    "X509PrivateKeyExportFlags",
    "X509PrivateKeyProtection",
    "X509PrivateKeyUsageFlags",
    "X509PrivateKeyVerify",
    "X509PrivateKeyVerify_VerifyAllowUI",
    "X509PrivateKeyVerify_VerifyNone",
    "X509PrivateKeyVerify_VerifySilent",
    "X509PrivateKeyVerify_VerifySmartCardNone",
    "X509PrivateKeyVerify_VerifySmartCardSilent",
    "X509ProviderType",
    "X509RequestInheritOptions",
    "X509RequestInheritOptions_InheritDefault",
    "X509RequestInheritOptions_InheritExtensionsFlag",
    "X509RequestInheritOptions_InheritKeyMask",
    "X509RequestInheritOptions_InheritNewDefaultKey",
    "X509RequestInheritOptions_InheritNewSimilarKey",
    "X509RequestInheritOptions_InheritNone",
    "X509RequestInheritOptions_InheritPrivateKey",
    "X509RequestInheritOptions_InheritPublicKey",
    "X509RequestInheritOptions_InheritRenewalCertificateFlag",
    "X509RequestInheritOptions_InheritReserved80000000",
    "X509RequestInheritOptions_InheritSubjectAltNameFlag",
    "X509RequestInheritOptions_InheritSubjectFlag",
    "X509RequestInheritOptions_InheritTemplateFlag",
    "X509RequestInheritOptions_InheritValidityPeriodFlag",
    "X509RequestType",
    "X509RequestType_TypeAny",
    "X509RequestType_TypeCertificate",
    "X509RequestType_TypeCmc",
    "X509RequestType_TypePkcs10",
    "X509RequestType_TypePkcs7",
    "X509SCEPDisposition",
    "X509SCEPDisposition_SCEPDispositionFailure",
    "X509SCEPDisposition_SCEPDispositionPending",
    "X509SCEPDisposition_SCEPDispositionPendingChallenge",
    "X509SCEPDisposition_SCEPDispositionSuccess",
    "X509SCEPDisposition_SCEPDispositionUnknown",
    "X509SCEPFailInfo",
    "X509SCEPFailInfo_SCEPFailBadAlgorithm",
    "X509SCEPFailInfo_SCEPFailBadCertId",
    "X509SCEPFailInfo_SCEPFailBadMessageCheck",
    "X509SCEPFailInfo_SCEPFailBadRequest",
    "X509SCEPFailInfo_SCEPFailBadTime",
    "X509SCEPFailInfo_SCEPFailUnknown",
    "X509SCEPMessageType",
    "X509SCEPMessageType_SCEPMessageCertResponse",
    "X509SCEPMessageType_SCEPMessageClaimChallengeAnswer",
    "X509SCEPMessageType_SCEPMessageGetCRL",
    "X509SCEPMessageType_SCEPMessageGetCert",
    "X509SCEPMessageType_SCEPMessageGetCertInitial",
    "X509SCEPMessageType_SCEPMessagePKCSRequest",
    "X509SCEPMessageType_SCEPMessageUnknown",
    "X509SCEPProcessMessageFlags",
    "X509SCEPProcessMessageFlags_SCEPProcessDefault",
    "X509SCEPProcessMessageFlags_SCEPProcessSkipCertInstall",
    "XCN_AT_KEYEXCHANGE",
    "XCN_AT_NONE",
    "XCN_AT_SIGNATURE",
    "XCN_BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE",
    "XCN_BCRYPT_CIPHER_INTERFACE",
    "XCN_BCRYPT_HASH_INTERFACE",
    "XCN_BCRYPT_KEY_DERIVATION_INTERFACE",
    "XCN_BCRYPT_RNG_INTERFACE",
    "XCN_BCRYPT_SECRET_AGREEMENT_INTERFACE",
    "XCN_BCRYPT_SIGNATURE_INTERFACE",
    "XCN_BCRYPT_UNKNOWN_INTERFACE",
    "XCN_CERT_ACCESS_STATE_PROP_ID",
    "XCN_CERT_AIA_URL_RETRIEVED_PROP_ID",
    "XCN_CERT_ALT_NAME_DIRECTORY_NAME",
    "XCN_CERT_ALT_NAME_DNS_NAME",
    "XCN_CERT_ALT_NAME_EDI_PARTY_NAME",
    "XCN_CERT_ALT_NAME_GUID",
    "XCN_CERT_ALT_NAME_IP_ADDRESS",
    "XCN_CERT_ALT_NAME_OTHER_NAME",
    "XCN_CERT_ALT_NAME_REGISTERED_ID",
    "XCN_CERT_ALT_NAME_RFC822_NAME",
    "XCN_CERT_ALT_NAME_UNKNOWN",
    "XCN_CERT_ALT_NAME_URL",
    "XCN_CERT_ALT_NAME_USER_PRINCIPLE_NAME",
    "XCN_CERT_ALT_NAME_X400_ADDRESS",
    "XCN_CERT_ARCHIVED_KEY_HASH_PROP_ID",
    "XCN_CERT_ARCHIVED_PROP_ID",
    "XCN_CERT_AUTHORITY_INFO_ACCESS_PROP_ID",
    "XCN_CERT_AUTH_ROOT_SHA256_HASH_PROP_ID",
    "XCN_CERT_AUTO_ENROLL_PROP_ID",
    "XCN_CERT_AUTO_ENROLL_RETRY_PROP_ID",
    "XCN_CERT_BACKED_UP_PROP_ID",
    "XCN_CERT_CA_DISABLE_CRL_PROP_ID",
    "XCN_CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID",
    "XCN_CERT_CEP_PROP_ID",
    "XCN_CERT_CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID",
    "XCN_CERT_CLR_DELETE_KEY_PROP_ID",
    "XCN_CERT_CRL_SIGN_KEY_USAGE",
    "XCN_CERT_CROSS_CERT_DIST_POINTS_PROP_ID",
    "XCN_CERT_CTL_USAGE_PROP_ID",
    "XCN_CERT_DATA_ENCIPHERMENT_KEY_USAGE",
    "XCN_CERT_DATE_STAMP_PROP_ID",
    "XCN_CERT_DECIPHER_ONLY_KEY_USAGE",
    "XCN_CERT_DESCRIPTION_PROP_ID",
    "XCN_CERT_DIGITAL_SIGNATURE_KEY_USAGE",
    "XCN_CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID",
    "XCN_CERT_DISALLOWED_FILETIME_PROP_ID",
    "XCN_CERT_EFS_PROP_ID",
    "XCN_CERT_ENCIPHER_ONLY_KEY_USAGE",
    "XCN_CERT_ENHKEY_USAGE_PROP_ID",
    "XCN_CERT_ENROLLMENT_PROP_ID",
    "XCN_CERT_EXTENDED_ERROR_INFO_PROP_ID",
    "XCN_CERT_FIRST_RESERVED_PROP_ID",
    "XCN_CERT_FIRST_USER_PROP_ID",
    "XCN_CERT_FORTEZZA_DATA_PROP_ID",
    "XCN_CERT_FRIENDLY_NAME_PROP_ID",
    "XCN_CERT_HASH_PROP_ID",
    "XCN_CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID",
    "XCN_CERT_HCRYPTPROV_TRANSFER_PROP_ID",
    "XCN_CERT_IE30_RESERVED_PROP_ID",
    "XCN_CERT_ISOLATED_KEY_PROP_ID",
    "XCN_CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID",
    "XCN_CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID",
    "XCN_CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID",
    "XCN_CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID",
    "XCN_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID",
    "XCN_CERT_KEY_AGREEMENT_KEY_USAGE",
    "XCN_CERT_KEY_CERT_SIGN_KEY_USAGE",
    "XCN_CERT_KEY_CLASSIFICATION_PROP_ID",
    "XCN_CERT_KEY_CONTEXT_PROP_ID",
    "XCN_CERT_KEY_ENCIPHERMENT_KEY_USAGE",
    "XCN_CERT_KEY_IDENTIFIER_PROP_ID",
    "XCN_CERT_KEY_PROV_HANDLE_PROP_ID",
    "XCN_CERT_KEY_PROV_INFO_PROP_ID",
    "XCN_CERT_KEY_REPAIR_ATTEMPTED_PROP_ID",
    "XCN_CERT_KEY_SPEC_PROP_ID",
    "XCN_CERT_LAST_RESERVED_PROP_ID",
    "XCN_CERT_LAST_USER_PROP_ID",
    "XCN_CERT_MD5_HASH_PROP_ID",
    "XCN_CERT_NAME_STR_AMBIGUOUS_SEPARATOR_FLAGS",
    "XCN_CERT_NAME_STR_COMMA_FLAG",
    "XCN_CERT_NAME_STR_CRLF_FLAG",
    "XCN_CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG",
    "XCN_CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG",
    "XCN_CERT_NAME_STR_DS_ESCAPED",
    "XCN_CERT_NAME_STR_ENABLE_PUNYCODE_FLAG",
    "XCN_CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG",
    "XCN_CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG",
    "XCN_CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG",
    "XCN_CERT_NAME_STR_FORWARD_FLAG",
    "XCN_CERT_NAME_STR_NONE",
    "XCN_CERT_NAME_STR_NO_PLUS_FLAG",
    "XCN_CERT_NAME_STR_NO_QUOTING_FLAG",
    "XCN_CERT_NAME_STR_REVERSE_FLAG",
    "XCN_CERT_NAME_STR_SEMICOLON_FLAG",
    "XCN_CERT_NCRYPT_KEY_HANDLE_PROP_ID",
    "XCN_CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID",
    "XCN_CERT_NEW_KEY_PROP_ID",
    "XCN_CERT_NEXT_UPDATE_LOCATION_PROP_ID",
    "XCN_CERT_NONCOMPLIANT_ROOT_URL_PROP_ID",
    "XCN_CERT_NON_REPUDIATION_KEY_USAGE",
    "XCN_CERT_NOT_BEFORE_FILETIME_PROP_ID",
    "XCN_CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID",
    "XCN_CERT_NO_EXPIRE_NOTIFICATION_PROP_ID",
    "XCN_CERT_NO_KEY_USAGE",
    "XCN_CERT_OCSP_CACHE_PREFIX_PROP_ID",
    "XCN_CERT_OCSP_RESPONSE_PROP_ID",
    "XCN_CERT_OFFLINE_CRL_SIGN_KEY_USAGE",
    "XCN_CERT_OID_NAME_STR",
    "XCN_CERT_PIN_SHA256_HASH_PROP_ID",
    "XCN_CERT_PUBKEY_ALG_PARA_PROP_ID",
    "XCN_CERT_PUBKEY_HASH_RESERVED_PROP_ID",
    "XCN_CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID",
    "XCN_CERT_PVK_FILE_PROP_ID",
    "XCN_CERT_RENEWAL_PROP_ID",
    "XCN_CERT_REQUEST_ORIGINATOR_PROP_ID",
    "XCN_CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID",
    "XCN_CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID",
    "XCN_CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID",
    "XCN_CERT_SCARD_PIN_ID_PROP_ID",
    "XCN_CERT_SCARD_PIN_INFO_PROP_ID",
    "XCN_CERT_SCEP_CA_CERT_PROP_ID",
    "XCN_CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID",
    "XCN_CERT_SCEP_FLAGS_PROP_ID",
    "XCN_CERT_SCEP_GUID_PROP_ID",
    "XCN_CERT_SCEP_NONCE_PROP_ID",
    "XCN_CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID",
    "XCN_CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID",
    "XCN_CERT_SCEP_SERVER_CERTS_PROP_ID",
    "XCN_CERT_SCEP_SIGNER_CERT_PROP_ID",
    "XCN_CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID",
    "XCN_CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID",
    "XCN_CERT_SERIAL_CHAIN_PROP_ID",
    "XCN_CERT_SHA1_HASH_PROP_ID",
    "XCN_CERT_SHA256_HASH_PROP_ID",
    "XCN_CERT_SIGNATURE_HASH_PROP_ID",
    "XCN_CERT_SIGN_HASH_CNG_ALG_PROP_ID",
    "XCN_CERT_SIMPLE_NAME_STR",
    "XCN_CERT_SMART_CARD_DATA_PROP_ID",
    "XCN_CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID",
    "XCN_CERT_SMART_CARD_READER_PROP_ID",
    "XCN_CERT_SMART_CARD_ROOT_INFO_PROP_ID",
    "XCN_CERT_SOURCE_LOCATION_PROP_ID",
    "XCN_CERT_SOURCE_URL_PROP_ID",
    "XCN_CERT_STORE_LOCALIZED_NAME_PROP_ID",
    "XCN_CERT_SUBJECT_DISABLE_CRL_PROP_ID",
    "XCN_CERT_SUBJECT_INFO_ACCESS_PROP_ID",
    "XCN_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID",
    "XCN_CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID",
    "XCN_CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID",
    "XCN_CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID",
    "XCN_CERT_X500_NAME_STR",
    "XCN_CERT_XML_NAME_STR",
    "XCN_CRL_REASON_AA_COMPROMISE",
    "XCN_CRL_REASON_AFFILIATION_CHANGED",
    "XCN_CRL_REASON_CA_COMPROMISE",
    "XCN_CRL_REASON_CERTIFICATE_HOLD",
    "XCN_CRL_REASON_CESSATION_OF_OPERATION",
    "XCN_CRL_REASON_KEY_COMPROMISE",
    "XCN_CRL_REASON_PRIVILEGE_WITHDRAWN",
    "XCN_CRL_REASON_REMOVE_FROM_CRL",
    "XCN_CRL_REASON_SUPERSEDED",
    "XCN_CRL_REASON_UNSPECIFIED",
    "XCN_CRYPT_ANY_GROUP_ID",
    "XCN_CRYPT_ENCRYPT_ALG_OID_GROUP_ID",
    "XCN_CRYPT_ENHKEY_USAGE_OID_GROUP_ID",
    "XCN_CRYPT_EXT_OR_ATTR_OID_GROUP_ID",
    "XCN_CRYPT_FIRST_ALG_OID_GROUP_ID",
    "XCN_CRYPT_GROUP_ID_MASK",
    "XCN_CRYPT_HASH_ALG_OID_GROUP_ID",
    "XCN_CRYPT_KDF_OID_GROUP_ID",
    "XCN_CRYPT_KEY_LENGTH_MASK",
    "XCN_CRYPT_LAST_ALG_OID_GROUP_ID",
    "XCN_CRYPT_LAST_OID_GROUP_ID",
    "XCN_CRYPT_OID_DISABLE_SEARCH_DS_FLAG",
    "XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK",
    "XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT",
    "XCN_CRYPT_OID_INFO_PUBKEY_ANY",
    "XCN_CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG",
    "XCN_CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG",
    "XCN_CRYPT_OID_PREFER_CNG_ALGID_FLAG",
    "XCN_CRYPT_OID_USE_CURVE_NAME_FOR_ENCODE_FLAG",
    "XCN_CRYPT_OID_USE_CURVE_NONE",
    "XCN_CRYPT_OID_USE_CURVE_PARAMETERS_FOR_ENCODE_FLAG",
    "XCN_CRYPT_POLICY_OID_GROUP_ID",
    "XCN_CRYPT_PUBKEY_ALG_OID_GROUP_ID",
    "XCN_CRYPT_RDN_ATTR_OID_GROUP_ID",
    "XCN_CRYPT_SIGN_ALG_OID_GROUP_ID",
    "XCN_CRYPT_STRING_ANY",
    "XCN_CRYPT_STRING_BASE64",
    "XCN_CRYPT_STRING_BASE64HEADER",
    "XCN_CRYPT_STRING_BASE64REQUESTHEADER",
    "XCN_CRYPT_STRING_BASE64URI",
    "XCN_CRYPT_STRING_BASE64X509CRLHEADER",
    "XCN_CRYPT_STRING_BASE64_ANY",
    "XCN_CRYPT_STRING_BINARY",
    "XCN_CRYPT_STRING_CHAIN",
    "XCN_CRYPT_STRING_ENCODEMASK",
    "XCN_CRYPT_STRING_HASHDATA",
    "XCN_CRYPT_STRING_HEX",
    "XCN_CRYPT_STRING_HEXADDR",
    "XCN_CRYPT_STRING_HEXASCII",
    "XCN_CRYPT_STRING_HEXASCIIADDR",
    "XCN_CRYPT_STRING_HEXRAW",
    "XCN_CRYPT_STRING_HEX_ANY",
    "XCN_CRYPT_STRING_NOCR",
    "XCN_CRYPT_STRING_NOCRLF",
    "XCN_CRYPT_STRING_PERCENTESCAPE",
    "XCN_CRYPT_STRING_STRICT",
    "XCN_CRYPT_STRING_TEXT",
    "XCN_CRYPT_TEMPLATE_OID_GROUP_ID",
    "XCN_NCRYPT_ALLOW_ALL_USAGES",
    "XCN_NCRYPT_ALLOW_ARCHIVING_FLAG",
    "XCN_NCRYPT_ALLOW_DECRYPT_FLAG",
    "XCN_NCRYPT_ALLOW_EXPORT_FLAG",
    "XCN_NCRYPT_ALLOW_EXPORT_NONE",
    "XCN_NCRYPT_ALLOW_KEY_AGREEMENT_FLAG",
    "XCN_NCRYPT_ALLOW_KEY_IMPORT_FLAG",
    "XCN_NCRYPT_ALLOW_PLAINTEXT_ARCHIVING_FLAG",
    "XCN_NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG",
    "XCN_NCRYPT_ALLOW_SIGNING_FLAG",
    "XCN_NCRYPT_ALLOW_USAGES_NONE",
    "XCN_NCRYPT_ANY_ASYMMETRIC_OPERATION",
    "XCN_NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION",
    "XCN_NCRYPT_CIPHER_OPERATION",
    "XCN_NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT",
    "XCN_NCRYPT_CLAIM_AUTHORITY_ONLY",
    "XCN_NCRYPT_CLAIM_NONE",
    "XCN_NCRYPT_CLAIM_SUBJECT_ONLY",
    "XCN_NCRYPT_CLAIM_UNKNOWN",
    "XCN_NCRYPT_EXACT_MATCH_OPERATION",
    "XCN_NCRYPT_HASH_OPERATION",
    "XCN_NCRYPT_KEY_DERIVATION_OPERATION",
    "XCN_NCRYPT_NO_OPERATION",
    "XCN_NCRYPT_PCP_ENCRYPTION_KEY",
    "XCN_NCRYPT_PCP_GENERIC_KEY",
    "XCN_NCRYPT_PCP_IDENTITY_KEY",
    "XCN_NCRYPT_PCP_NONE",
    "XCN_NCRYPT_PCP_SIGNATURE_KEY",
    "XCN_NCRYPT_PCP_STORAGE_KEY",
    "XCN_NCRYPT_PREFERENCE_MASK_OPERATION",
    "XCN_NCRYPT_PREFER_NON_SIGNATURE_OPERATION",
    "XCN_NCRYPT_PREFER_SIGNATURE_ONLY_OPERATION",
    "XCN_NCRYPT_RNG_OPERATION",
    "XCN_NCRYPT_SECRET_AGREEMENT_OPERATION",
    "XCN_NCRYPT_SIGNATURE_OPERATION",
    "XCN_NCRYPT_TPM12_PROVIDER",
    "XCN_NCRYPT_UI_APPCONTAINER_ACCESS_MEDIUM_FLAG",
    "XCN_NCRYPT_UI_FINGERPRINT_PROTECTION_FLAG",
    "XCN_NCRYPT_UI_FORCE_HIGH_PROTECTION_FLAG",
    "XCN_NCRYPT_UI_NO_PROTECTION_FLAG",
    "XCN_NCRYPT_UI_PROTECT_KEY_FLAG",
    "XCN_OIDVerisign_FailInfo",
    "XCN_OIDVerisign_MessageType",
    "XCN_OIDVerisign_PkiStatus",
    "XCN_OIDVerisign_RecipientNonce",
    "XCN_OIDVerisign_SenderNonce",
    "XCN_OIDVerisign_TransactionID",
    "XCN_OID_ANSI_X942",
    "XCN_OID_ANSI_X942_DH",
    "XCN_OID_ANY_APPLICATION_POLICY",
    "XCN_OID_ANY_CERT_POLICY",
    "XCN_OID_ANY_ENHANCED_KEY_USAGE",
    "XCN_OID_APPLICATION_CERT_POLICIES",
    "XCN_OID_APPLICATION_POLICY_CONSTRAINTS",
    "XCN_OID_APPLICATION_POLICY_MAPPINGS",
    "XCN_OID_ARCHIVED_KEY_ATTR",
    "XCN_OID_ARCHIVED_KEY_CERT_HASH",
    "XCN_OID_ATTR_SUPPORTED_ALGORITHMS",
    "XCN_OID_ATTR_TPM_SECURITY_ASSERTIONS",
    "XCN_OID_ATTR_TPM_SPECIFICATION",
    "XCN_OID_AUTHORITY_INFO_ACCESS",
    "XCN_OID_AUTHORITY_KEY_IDENTIFIER",
    "XCN_OID_AUTHORITY_KEY_IDENTIFIER2",
    "XCN_OID_AUTHORITY_REVOCATION_LIST",
    "XCN_OID_AUTO_ENROLL_CTL_USAGE",
    "XCN_OID_BACKGROUND_OTHER_LOGOTYPE",
    "XCN_OID_BASIC_CONSTRAINTS",
    "XCN_OID_BASIC_CONSTRAINTS2",
    "XCN_OID_BIOMETRIC_EXT",
    "XCN_OID_BUSINESS_CATEGORY",
    "XCN_OID_CA_CERTIFICATE",
    "XCN_OID_CERTIFICATE_REVOCATION_LIST",
    "XCN_OID_CERTIFICATE_TEMPLATE",
    "XCN_OID_CERTSRV_CA_VERSION",
    "XCN_OID_CERTSRV_CROSSCA_VERSION",
    "XCN_OID_CERTSRV_PREVIOUS_CERT_HASH",
    "XCN_OID_CERT_DISALLOWED_FILETIME_PROP_ID",
    "XCN_OID_CERT_EXTENSIONS",
    "XCN_OID_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID",
    "XCN_OID_CERT_KEY_IDENTIFIER_PROP_ID",
    "XCN_OID_CERT_MANIFOLD",
    "XCN_OID_CERT_MD5_HASH_PROP_ID",
    "XCN_OID_CERT_POLICIES",
    "XCN_OID_CERT_POLICIES_95",
    "XCN_OID_CERT_POLICIES_95_QUALIFIER1",
    "XCN_OID_CERT_PROP_ID_PREFIX",
    "XCN_OID_CERT_SIGNATURE_HASH_PROP_ID",
    "XCN_OID_CERT_STRONG_KEY_OS_1",
    "XCN_OID_CERT_STRONG_KEY_OS_CURRENT",
    "XCN_OID_CERT_STRONG_KEY_OS_PREFIX",
    "XCN_OID_CERT_STRONG_SIGN_OS_1",
    "XCN_OID_CERT_STRONG_SIGN_OS_CURRENT",
    "XCN_OID_CERT_STRONG_SIGN_OS_PREFIX",
    "XCN_OID_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID",
    "XCN_OID_CMC",
    "XCN_OID_CMC_ADD_ATTRIBUTES",
    "XCN_OID_CMC_ADD_EXTENSIONS",
    "XCN_OID_CMC_DATA_RETURN",
    "XCN_OID_CMC_DECRYPTED_POP",
    "XCN_OID_CMC_ENCRYPTED_POP",
    "XCN_OID_CMC_GET_CERT",
    "XCN_OID_CMC_GET_CRL",
    "XCN_OID_CMC_IDENTIFICATION",
    "XCN_OID_CMC_IDENTITY_PROOF",
    "XCN_OID_CMC_ID_CONFIRM_CERT_ACCEPTANCE",
    "XCN_OID_CMC_ID_POP_LINK_RANDOM",
    "XCN_OID_CMC_ID_POP_LINK_WITNESS",
    "XCN_OID_CMC_LRA_POP_WITNESS",
    "XCN_OID_CMC_QUERY_PENDING",
    "XCN_OID_CMC_RECIPIENT_NONCE",
    "XCN_OID_CMC_REG_INFO",
    "XCN_OID_CMC_RESPONSE_INFO",
    "XCN_OID_CMC_REVOKE_REQUEST",
    "XCN_OID_CMC_SENDER_NONCE",
    "XCN_OID_CMC_STATUS_INFO",
    "XCN_OID_CMC_TRANSACTION_ID",
    "XCN_OID_COMMON_NAME",
    "XCN_OID_COUNTRY_NAME",
    "XCN_OID_CRL_DIST_POINTS",
    "XCN_OID_CRL_NEXT_PUBLISH",
    "XCN_OID_CRL_NUMBER",
    "XCN_OID_CRL_REASON_CODE",
    "XCN_OID_CRL_SELF_CDP",
    "XCN_OID_CRL_VIRTUAL_BASE",
    "XCN_OID_CROSS_CERTIFICATE_PAIR",
    "XCN_OID_CROSS_CERT_DIST_POINTS",
    "XCN_OID_CTL",
    "XCN_OID_CT_PKI_DATA",
    "XCN_OID_CT_PKI_RESPONSE",
    "XCN_OID_DELTA_CRL_INDICATOR",
    "XCN_OID_DESCRIPTION",
    "XCN_OID_DESTINATION_INDICATOR",
    "XCN_OID_DEVICE_SERIAL_NUMBER",
    "XCN_OID_DH_SINGLE_PASS_STDDH_SHA1_KDF",
    "XCN_OID_DH_SINGLE_PASS_STDDH_SHA256_KDF",
    "XCN_OID_DH_SINGLE_PASS_STDDH_SHA384_KDF",
    "XCN_OID_DISALLOWED_HASH",
    "XCN_OID_DISALLOWED_LIST",
    "XCN_OID_DN_QUALIFIER",
    "XCN_OID_DOMAIN_COMPONENT",
    "XCN_OID_DRM",
    "XCN_OID_DRM_INDIVIDUALIZATION",
    "XCN_OID_DS",
    "XCN_OID_DSALG",
    "XCN_OID_DSALG_CRPT",
    "XCN_OID_DSALG_HASH",
    "XCN_OID_DSALG_RSA",
    "XCN_OID_DSALG_SIGN",
    "XCN_OID_DS_EMAIL_REPLICATION",
    "XCN_OID_ECC_CURVE_P256",
    "XCN_OID_ECC_CURVE_P384",
    "XCN_OID_ECC_CURVE_P521",
    "XCN_OID_ECC_PUBLIC_KEY",
    "XCN_OID_ECDSA_SHA1",
    "XCN_OID_ECDSA_SHA256",
    "XCN_OID_ECDSA_SHA384",
    "XCN_OID_ECDSA_SHA512",
    "XCN_OID_ECDSA_SPECIFIED",
    "XCN_OID_EFS_RECOVERY",
    "XCN_OID_EMBEDDED_NT_CRYPTO",
    "XCN_OID_ENCRYPTED_KEY_HASH",
    "XCN_OID_ENHANCED_KEY_USAGE",
    "XCN_OID_ENROLLMENT_AGENT",
    "XCN_OID_ENROLLMENT_CSP_PROVIDER",
    "XCN_OID_ENROLLMENT_NAME_VALUE_PAIR",
    "XCN_OID_ENROLL_ATTESTATION_CHALLENGE",
    "XCN_OID_ENROLL_ATTESTATION_STATEMENT",
    "XCN_OID_ENROLL_CAXCHGCERT_HASH",
    "XCN_OID_ENROLL_CERTTYPE_EXTENSION",
    "XCN_OID_ENROLL_EKPUB_CHALLENGE",
    "XCN_OID_ENROLL_EKVERIFYCERT",
    "XCN_OID_ENROLL_EKVERIFYCREDS",
    "XCN_OID_ENROLL_EKVERIFYKEY",
    "XCN_OID_ENROLL_EK_INFO",
    "XCN_OID_ENROLL_ENCRYPTION_ALGORITHM",
    "XCN_OID_ENROLL_KSP_NAME",
    "XCN_OID_ENROLL_SCEP_ERROR",
    "XCN_OID_ENTERPRISE_OID_ROOT",
    "XCN_OID_EV_RDN_COUNTRY",
    "XCN_OID_EV_RDN_LOCALE",
    "XCN_OID_EV_RDN_STATE_OR_PROVINCE",
    "XCN_OID_FACSIMILE_TELEPHONE_NUMBER",
    "XCN_OID_FRESHEST_CRL",
    "XCN_OID_GIVEN_NAME",
    "XCN_OID_INFOSEC",
    "XCN_OID_INFOSEC_SuiteAConfidentiality",
    "XCN_OID_INFOSEC_SuiteAIntegrity",
    "XCN_OID_INFOSEC_SuiteAKMandSig",
    "XCN_OID_INFOSEC_SuiteAKeyManagement",
    "XCN_OID_INFOSEC_SuiteASignature",
    "XCN_OID_INFOSEC_SuiteATokenProtection",
    "XCN_OID_INFOSEC_mosaicConfidentiality",
    "XCN_OID_INFOSEC_mosaicIntegrity",
    "XCN_OID_INFOSEC_mosaicKMandSig",
    "XCN_OID_INFOSEC_mosaicKMandUpdSig",
    "XCN_OID_INFOSEC_mosaicKeyManagement",
    "XCN_OID_INFOSEC_mosaicSignature",
    "XCN_OID_INFOSEC_mosaicTokenProtection",
    "XCN_OID_INFOSEC_mosaicUpdatedInteg",
    "XCN_OID_INFOSEC_mosaicUpdatedSig",
    "XCN_OID_INFOSEC_sdnsConfidentiality",
    "XCN_OID_INFOSEC_sdnsIntegrity",
    "XCN_OID_INFOSEC_sdnsKMandSig",
    "XCN_OID_INFOSEC_sdnsKeyManagement",
    "XCN_OID_INFOSEC_sdnsSignature",
    "XCN_OID_INFOSEC_sdnsTokenProtection",
    "XCN_OID_INHIBIT_ANY_POLICY",
    "XCN_OID_INITIALS",
    "XCN_OID_INTERNATIONALIZED_EMAIL_ADDRESS",
    "XCN_OID_INTERNATIONAL_ISDN_NUMBER",
    "XCN_OID_IPSEC_KP_IKE_INTERMEDIATE",
    "XCN_OID_ISSUED_CERT_HASH",
    "XCN_OID_ISSUER_ALT_NAME",
    "XCN_OID_ISSUER_ALT_NAME2",
    "XCN_OID_ISSUING_DIST_POINT",
    "XCN_OID_KEYID_RDN",
    "XCN_OID_KEY_ATTRIBUTES",
    "XCN_OID_KEY_USAGE",
    "XCN_OID_KEY_USAGE_RESTRICTION",
    "XCN_OID_KP_CA_EXCHANGE",
    "XCN_OID_KP_CSP_SIGNATURE",
    "XCN_OID_KP_CTL_USAGE_SIGNING",
    "XCN_OID_KP_DOCUMENT_SIGNING",
    "XCN_OID_KP_EFS",
    "XCN_OID_KP_KERNEL_MODE_CODE_SIGNING",
    "XCN_OID_KP_KERNEL_MODE_HAL_EXTENSION_SIGNING",
    "XCN_OID_KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING",
    "XCN_OID_KP_KEY_RECOVERY",
    "XCN_OID_KP_KEY_RECOVERY_AGENT",
    "XCN_OID_KP_LIFETIME_SIGNING",
    "XCN_OID_KP_MOBILE_DEVICE_SOFTWARE",
    "XCN_OID_KP_QUALIFIED_SUBORDINATION",
    "XCN_OID_KP_SMARTCARD_LOGON",
    "XCN_OID_KP_SMART_DISPLAY",
    "XCN_OID_KP_TIME_STAMP_SIGNING",
    "XCN_OID_KP_TPM_AIK_CERTIFICATE",
    "XCN_OID_KP_TPM_EK_CERTIFICATE",
    "XCN_OID_KP_TPM_PLATFORM_CERTIFICATE",
    "XCN_OID_LEGACY_POLICY_MAPPINGS",
    "XCN_OID_LICENSES",
    "XCN_OID_LICENSE_SERVER",
    "XCN_OID_LOCALITY_NAME",
    "XCN_OID_LOCAL_MACHINE_KEYSET",
    "XCN_OID_LOGOTYPE_EXT",
    "XCN_OID_LOYALTY_OTHER_LOGOTYPE",
    "XCN_OID_MEMBER",
    "XCN_OID_NAME_CONSTRAINTS",
    "XCN_OID_NETSCAPE",
    "XCN_OID_NETSCAPE_BASE_URL",
    "XCN_OID_NETSCAPE_CA_POLICY_URL",
    "XCN_OID_NETSCAPE_CA_REVOCATION_URL",
    "XCN_OID_NETSCAPE_CERT_EXTENSION",
    "XCN_OID_NETSCAPE_CERT_RENEWAL_URL",
    "XCN_OID_NETSCAPE_CERT_SEQUENCE",
    "XCN_OID_NETSCAPE_CERT_TYPE",
    "XCN_OID_NETSCAPE_COMMENT",
    "XCN_OID_NETSCAPE_DATA_TYPE",
    "XCN_OID_NETSCAPE_REVOCATION_URL",
    "XCN_OID_NETSCAPE_SSL_SERVER_NAME",
    "XCN_OID_NEXT_UPDATE_LOCATION",
    "XCN_OID_NIST_AES128_CBC",
    "XCN_OID_NIST_AES128_WRAP",
    "XCN_OID_NIST_AES192_CBC",
    "XCN_OID_NIST_AES192_WRAP",
    "XCN_OID_NIST_AES256_CBC",
    "XCN_OID_NIST_AES256_WRAP",
    "XCN_OID_NIST_sha256",
    "XCN_OID_NIST_sha384",
    "XCN_OID_NIST_sha512",
    "XCN_OID_NONE",
    "XCN_OID_NT5_CRYPTO",
    "XCN_OID_NTDS_REPLICATION",
    "XCN_OID_NT_PRINCIPAL_NAME",
    "XCN_OID_OEM_WHQL_CRYPTO",
    "XCN_OID_OIW",
    "XCN_OID_OIWDIR",
    "XCN_OID_OIWDIR_CRPT",
    "XCN_OID_OIWDIR_HASH",
    "XCN_OID_OIWDIR_SIGN",
    "XCN_OID_OIWDIR_md2",
    "XCN_OID_OIWDIR_md2RSA",
    "XCN_OID_OIWSEC",
    "XCN_OID_OIWSEC_desCBC",
    "XCN_OID_OIWSEC_desCFB",
    "XCN_OID_OIWSEC_desECB",
    "XCN_OID_OIWSEC_desEDE",
    "XCN_OID_OIWSEC_desMAC",
    "XCN_OID_OIWSEC_desOFB",
    "XCN_OID_OIWSEC_dhCommMod",
    "XCN_OID_OIWSEC_dsa",
    "XCN_OID_OIWSEC_dsaComm",
    "XCN_OID_OIWSEC_dsaCommSHA",
    "XCN_OID_OIWSEC_dsaCommSHA1",
    "XCN_OID_OIWSEC_dsaSHA1",
    "XCN_OID_OIWSEC_keyHashSeal",
    "XCN_OID_OIWSEC_md2RSASign",
    "XCN_OID_OIWSEC_md4RSA",
    "XCN_OID_OIWSEC_md4RSA2",
    "XCN_OID_OIWSEC_md5RSA",
    "XCN_OID_OIWSEC_md5RSASign",
    "XCN_OID_OIWSEC_mdc2",
    "XCN_OID_OIWSEC_mdc2RSA",
    "XCN_OID_OIWSEC_rsaSign",
    "XCN_OID_OIWSEC_rsaXchg",
    "XCN_OID_OIWSEC_sha",
    "XCN_OID_OIWSEC_sha1",
    "XCN_OID_OIWSEC_sha1RSASign",
    "XCN_OID_OIWSEC_shaDSA",
    "XCN_OID_OIWSEC_shaRSA",
    "XCN_OID_ORGANIZATIONAL_UNIT_NAME",
    "XCN_OID_ORGANIZATION_NAME",
    "XCN_OID_OS_VERSION",
    "XCN_OID_OWNER",
    "XCN_OID_PHYSICAL_DELIVERY_OFFICE_NAME",
    "XCN_OID_PKCS",
    "XCN_OID_PKCS_1",
    "XCN_OID_PKCS_10",
    "XCN_OID_PKCS_12",
    "XCN_OID_PKCS_12_EXTENDED_ATTRIBUTES",
    "XCN_OID_PKCS_12_FRIENDLY_NAME_ATTR",
    "XCN_OID_PKCS_12_KEY_PROVIDER_NAME_ATTR",
    "XCN_OID_PKCS_12_LOCAL_KEY_ID",
    "XCN_OID_PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID",
    "XCN_OID_PKCS_12_PbeIds",
    "XCN_OID_PKCS_12_pbeWithSHA1And128BitRC2",
    "XCN_OID_PKCS_12_pbeWithSHA1And128BitRC4",
    "XCN_OID_PKCS_12_pbeWithSHA1And2KeyTripleDES",
    "XCN_OID_PKCS_12_pbeWithSHA1And3KeyTripleDES",
    "XCN_OID_PKCS_12_pbeWithSHA1And40BitRC2",
    "XCN_OID_PKCS_12_pbeWithSHA1And40BitRC4",
    "XCN_OID_PKCS_2",
    "XCN_OID_PKCS_3",
    "XCN_OID_PKCS_4",
    "XCN_OID_PKCS_5",
    "XCN_OID_PKCS_6",
    "XCN_OID_PKCS_7",
    "XCN_OID_PKCS_7_DATA",
    "XCN_OID_PKCS_7_DIGESTED",
    "XCN_OID_PKCS_7_ENCRYPTED",
    "XCN_OID_PKCS_7_ENVELOPED",
    "XCN_OID_PKCS_7_SIGNED",
    "XCN_OID_PKCS_7_SIGNEDANDENVELOPED",
    "XCN_OID_PKCS_8",
    "XCN_OID_PKCS_9",
    "XCN_OID_PKCS_9_CONTENT_TYPE",
    "XCN_OID_PKCS_9_MESSAGE_DIGEST",
    "XCN_OID_PKINIT_KP_KDC",
    "XCN_OID_PKIX",
    "XCN_OID_PKIX_ACC_DESCR",
    "XCN_OID_PKIX_CA_ISSUERS",
    "XCN_OID_PKIX_CA_REPOSITORY",
    "XCN_OID_PKIX_KP",
    "XCN_OID_PKIX_KP_CLIENT_AUTH",
    "XCN_OID_PKIX_KP_CODE_SIGNING",
    "XCN_OID_PKIX_KP_EMAIL_PROTECTION",
    "XCN_OID_PKIX_KP_IPSEC_END_SYSTEM",
    "XCN_OID_PKIX_KP_IPSEC_TUNNEL",
    "XCN_OID_PKIX_KP_IPSEC_USER",
    "XCN_OID_PKIX_KP_OCSP_SIGNING",
    "XCN_OID_PKIX_KP_SERVER_AUTH",
    "XCN_OID_PKIX_KP_TIMESTAMP_SIGNING",
    "XCN_OID_PKIX_NO_SIGNATURE",
    "XCN_OID_PKIX_OCSP",
    "XCN_OID_PKIX_OCSP_BASIC_SIGNED_RESPONSE",
    "XCN_OID_PKIX_OCSP_NOCHECK",
    "XCN_OID_PKIX_OCSP_NONCE",
    "XCN_OID_PKIX_PE",
    "XCN_OID_PKIX_POLICY_QUALIFIER_CPS",
    "XCN_OID_PKIX_POLICY_QUALIFIER_USERNOTICE",
    "XCN_OID_PKIX_TIME_STAMPING",
    "XCN_OID_POLICY_CONSTRAINTS",
    "XCN_OID_POLICY_MAPPINGS",
    "XCN_OID_POSTAL_ADDRESS",
    "XCN_OID_POSTAL_CODE",
    "XCN_OID_POST_OFFICE_BOX",
    "XCN_OID_PREFERRED_DELIVERY_METHOD",
    "XCN_OID_PRESENTATION_ADDRESS",
    "XCN_OID_PRIVATEKEY_USAGE_PERIOD",
    "XCN_OID_PRODUCT_UPDATE",
    "XCN_OID_QC_EU_COMPLIANCE",
    "XCN_OID_QC_SSCD",
    "XCN_OID_QC_STATEMENTS_EXT",
    "XCN_OID_RDN_DUMMY_SIGNER",
    "XCN_OID_RDN_TPM_MANUFACTURER",
    "XCN_OID_RDN_TPM_MODEL",
    "XCN_OID_RDN_TPM_VERSION",
    "XCN_OID_REASON_CODE_HOLD",
    "XCN_OID_REGISTERED_ADDRESS",
    "XCN_OID_REMOVE_CERTIFICATE",
    "XCN_OID_RENEWAL_CERTIFICATE",
    "XCN_OID_REQUEST_CLIENT_INFO",
    "XCN_OID_REQUIRE_CERT_CHAIN_POLICY",
    "XCN_OID_REVOKED_LIST_SIGNER",
    "XCN_OID_RFC3161_counterSign",
    "XCN_OID_ROLE_OCCUPANT",
    "XCN_OID_ROOT_LIST_SIGNER",
    "XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION",
    "XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION",
    "XCN_OID_ROOT_PROGRAM_FLAGS",
    "XCN_OID_ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL",
    "XCN_OID_RSA",
    "XCN_OID_RSAES_OAEP",
    "XCN_OID_RSA_DES_EDE3_CBC",
    "XCN_OID_RSA_DH",
    "XCN_OID_RSA_ENCRYPT",
    "XCN_OID_RSA_HASH",
    "XCN_OID_RSA_MD2",
    "XCN_OID_RSA_MD2RSA",
    "XCN_OID_RSA_MD4",
    "XCN_OID_RSA_MD4RSA",
    "XCN_OID_RSA_MD5",
    "XCN_OID_RSA_MD5RSA",
    "XCN_OID_RSA_MGF1",
    "XCN_OID_RSA_PSPECIFIED",
    "XCN_OID_RSA_RC2CBC",
    "XCN_OID_RSA_RC4",
    "XCN_OID_RSA_RC5_CBCPad",
    "XCN_OID_RSA_RSA",
    "XCN_OID_RSA_SETOAEP_RSA",
    "XCN_OID_RSA_SHA1RSA",
    "XCN_OID_RSA_SHA256RSA",
    "XCN_OID_RSA_SHA384RSA",
    "XCN_OID_RSA_SHA512RSA",
    "XCN_OID_RSA_SMIMECapabilities",
    "XCN_OID_RSA_SMIMEalg",
    "XCN_OID_RSA_SMIMEalgCMS3DESwrap",
    "XCN_OID_RSA_SMIMEalgCMSRC2wrap",
    "XCN_OID_RSA_SMIMEalgESDH",
    "XCN_OID_RSA_SSA_PSS",
    "XCN_OID_RSA_certExtensions",
    "XCN_OID_RSA_challengePwd",
    "XCN_OID_RSA_contentType",
    "XCN_OID_RSA_counterSign",
    "XCN_OID_RSA_data",
    "XCN_OID_RSA_digestedData",
    "XCN_OID_RSA_emailAddr",
    "XCN_OID_RSA_encryptedData",
    "XCN_OID_RSA_envelopedData",
    "XCN_OID_RSA_extCertAttrs",
    "XCN_OID_RSA_hashedData",
    "XCN_OID_RSA_messageDigest",
    "XCN_OID_RSA_preferSignedData",
    "XCN_OID_RSA_signEnvData",
    "XCN_OID_RSA_signedData",
    "XCN_OID_RSA_signingTime",
    "XCN_OID_RSA_unstructAddr",
    "XCN_OID_RSA_unstructName",
    "XCN_OID_SEARCH_GUIDE",
    "XCN_OID_SEE_ALSO",
    "XCN_OID_SERIALIZED",
    "XCN_OID_SERVER_GATED_CRYPTO",
    "XCN_OID_SGC_NETSCAPE",
    "XCN_OID_SORTED_CTL",
    "XCN_OID_STATE_OR_PROVINCE_NAME",
    "XCN_OID_STREET_ADDRESS",
    "XCN_OID_SUBJECT_ALT_NAME",
    "XCN_OID_SUBJECT_ALT_NAME2",
    "XCN_OID_SUBJECT_DIR_ATTRS",
    "XCN_OID_SUBJECT_INFO_ACCESS",
    "XCN_OID_SUBJECT_KEY_IDENTIFIER",
    "XCN_OID_SUPPORTED_APPLICATION_CONTEXT",
    "XCN_OID_SUR_NAME",
    "XCN_OID_TELEPHONE_NUMBER",
    "XCN_OID_TELETEXT_TERMINAL_IDENTIFIER",
    "XCN_OID_TELEX_NUMBER",
    "XCN_OID_TIMESTAMP_TOKEN",
    "XCN_OID_TITLE",
    "XCN_OID_USER_CERTIFICATE",
    "XCN_OID_USER_PASSWORD",
    "XCN_OID_VERISIGN_BITSTRING_6_13",
    "XCN_OID_VERISIGN_ISS_STRONG_CRYPTO",
    "XCN_OID_VERISIGN_ONSITE_JURISDICTION_HASH",
    "XCN_OID_VERISIGN_PRIVATE_6_9",
    "XCN_OID_WHQL_CRYPTO",
    "XCN_OID_X21_ADDRESS",
    "XCN_OID_X957",
    "XCN_OID_X957_DSA",
    "XCN_OID_X957_SHA1DSA",
    "XCN_OID_YESNO_TRUST_ATTR",
    "XCN_PROPERTYID_NONE",
    "XCN_PROV_DH_SCHANNEL",
    "XCN_PROV_DSS",
    "XCN_PROV_DSS_DH",
    "XCN_PROV_EC_ECDSA_FULL",
    "XCN_PROV_EC_ECDSA_SIG",
    "XCN_PROV_EC_ECNRA_FULL",
    "XCN_PROV_EC_ECNRA_SIG",
    "XCN_PROV_FORTEZZA",
    "XCN_PROV_INTEL_SEC",
    "XCN_PROV_MS_EXCHANGE",
    "XCN_PROV_NONE",
    "XCN_PROV_REPLACE_OWF",
    "XCN_PROV_RNG",
    "XCN_PROV_RSA_AES",
    "XCN_PROV_RSA_FULL",
    "XCN_PROV_RSA_SCHANNEL",
    "XCN_PROV_RSA_SIG",
    "XCN_PROV_SPYRUS_LYNKS",
    "XCN_PROV_SSL",
    "XECI_AUTOENROLL",
    "XECI_CERTREQ",
    "XECI_DISABLE",
    "XECI_REQWIZARD",
    "XECI_XENROLL",
    "XECP_STRING_PROPERTY",
    "XECR_CMC",
    "XECR_PKCS10_V1_5",
    "XECR_PKCS10_V2_0",
    "XECR_PKCS7",
    "XECT_EXTENSION_V1",
    "XECT_EXTENSION_V2",
    "XEKL_KEYSIZE",
    "XEKL_KEYSIZE_DEFAULT",
    "XEKL_KEYSIZE_INC",
    "XEKL_KEYSIZE_MAX",
    "XEKL_KEYSIZE_MIN",
    "XEKL_KEYSPEC",
    "XEKL_KEYSPEC_KEYX",
    "XEKL_KEYSPEC_SIG",
    "XEPR_CADNS",
    "XEPR_CAFRIENDLYNAME",
    "XEPR_CANAME",
    "XEPR_DATE",
    "XEPR_ENUM_FIRST",
    "XEPR_HASH",
    "XEPR_REQUESTID",
    "XEPR_TEMPLATENAME",
    "XEPR_V1TEMPLATENAME",
    "XEPR_V2TEMPLATEOID",
    "XEPR_VERSION",
    "dwCAXCHGOVERLAPPERIODCOUNTDEFAULT",
    "dwCAXCHGVALIDITYPERIODCOUNTDEFAULT",
    "dwCRLDELTAOVERLAPPERIODCOUNTDEFAULT",
    "dwCRLDELTAPERIODCOUNTDEFAULT",
    "dwCRLOVERLAPPERIODCOUNTDEFAULT",
    "dwCRLPERIODCOUNTDEFAULT",
    "dwVALIDITYPERIODCOUNTDEFAULT_ENTERPRISE",
    "dwVALIDITYPERIODCOUNTDEFAULT_ROOT",
    "dwVALIDITYPERIODCOUNTDEFAULT_STANDALONE",
    "szBACKUPANNOTATION",
    "szDBBASENAMEPARM",
    "szNAMESEPARATORDEFAULT",
    "szPROPASNTAG",
    "szRESTOREANNOTATION",
    "wszAT_EKCERTINF",
    "wszAT_TESTROOT",
    "wszCAPOLICYFILE",
    "wszCERTEXITMODULE_POSTFIX",
    "wszCERTIFICATETRANSPARENCYFLAGS",
    "wszCERTMANAGE_SUFFIX",
    "wszCERTPOLICYMODULE_POSTFIX",
    "wszCERT_TYPE",
    "wszCERT_TYPE_CLIENT",
    "wszCERT_TYPE_CODESIGN",
    "wszCERT_TYPE_CUSTOMER",
    "wszCERT_TYPE_MERCHANT",
    "wszCERT_TYPE_PAYMENT",
    "wszCERT_TYPE_SERVER",
    "wszCERT_VERSION",
    "wszCERT_VERSION_1",
    "wszCERT_VERSION_2",
    "wszCERT_VERSION_3",
    "wszCLASS_CERTADMIN",
    "wszCLASS_CERTCONFIG",
    "wszCLASS_CERTDBMEM",
    "wszCLASS_CERTENCODE",
    "wszCLASS_CERTGETCONFIG",
    "wszCLASS_CERTREQUEST",
    "wszCLASS_CERTSERVEREXIT",
    "wszCLASS_CERTSERVERPOLICY",
    "wszCLASS_CERTVIEW",
    "wszCMM_PROP_COPYRIGHT",
    "wszCMM_PROP_DESCRIPTION",
    "wszCMM_PROP_DISPLAY_HWND",
    "wszCMM_PROP_FILEVER",
    "wszCMM_PROP_ISMULTITHREADED",
    "wszCMM_PROP_NAME",
    "wszCMM_PROP_PRODUCTVER",
    "wszCNGENCRYPTIONALGORITHM",
    "wszCNGHASHALGORITHM",
    "wszCNGPUBLICKEYALGORITHM",
    "wszCONFIG_AUTHORITY",
    "wszCONFIG_COMMENT",
    "wszCONFIG_COMMONNAME",
    "wszCONFIG_CONFIG",
    "wszCONFIG_COUNTRY",
    "wszCONFIG_DESCRIPTION",
    "wszCONFIG_EXCHANGECERTIFICATE",
    "wszCONFIG_FLAGS",
    "wszCONFIG_LOCALITY",
    "wszCONFIG_ORGANIZATION",
    "wszCONFIG_ORGUNIT",
    "wszCONFIG_SANITIZEDNAME",
    "wszCONFIG_SANITIZEDSHORTNAME",
    "wszCONFIG_SERVER",
    "wszCONFIG_SHORTNAME",
    "wszCONFIG_SIGNATURECERTIFICATE",
    "wszCONFIG_STATE",
    "wszCONFIG_WEBENROLLMENTSERVERS",
    "wszCRLPUBLISHRETRYCOUNT",
    "wszCRTFILENAMEEXT",
    "wszDATFILENAMEEXT",
    "wszDBBACKUPCERTBACKDAT",
    "wszDBBACKUPSUBDIR",
    "wszDBFILENAMEEXT",
    "wszENCRYPTIONALGORITHM",
    "wszENROLLMENTAGENTRIGHTS",
    "wszHASHALGORITHM",
    "wszINFKEY_ALTERNATESIGNATUREALGORITHM",
    "wszINFKEY_ATTESTPRIVATEKEY",
    "wszINFKEY_CACAPABILITIES",
    "wszINFKEY_CACERTS",
    "wszINFKEY_CATHUMBPRINT",
    "wszINFKEY_CCDPSYNCDELTATIME",
    "wszINFKEY_CHALLENGEPASSWORD",
    "wszINFKEY_CONTINUE",
    "wszINFKEY_CRITICAL",
    "wszINFKEY_CRLDELTAPERIODCOUNT",
    "wszINFKEY_CRLDELTAPERIODSTRING",
    "wszINFKEY_CRLPERIODCOUNT",
    "wszINFKEY_CRLPERIODSTRING",
    "wszINFKEY_DIRECTORYNAME",
    "wszINFKEY_DNS",
    "wszINFKEY_ECCKEYPARAMETERS",
    "wszINFKEY_ECCKEYPARAMETERSTYPE",
    "wszINFKEY_ECCKEYPARAMETERS_A",
    "wszINFKEY_ECCKEYPARAMETERS_B",
    "wszINFKEY_ECCKEYPARAMETERS_BASE",
    "wszINFKEY_ECCKEYPARAMETERS_COFACTOR",
    "wszINFKEY_ECCKEYPARAMETERS_ORDER",
    "wszINFKEY_ECCKEYPARAMETERS_P",
    "wszINFKEY_ECCKEYPARAMETERS_SEED",
    "wszINFKEY_EMAIL",
    "wszINFKEY_EMPTY",
    "wszINFKEY_ENABLEKEYCOUNTING",
    "wszINFKEY_ENCRYPTIONALGORITHM",
    "wszINFKEY_ENCRYPTIONLENGTH",
    "wszINFKEY_EXCLUDE",
    "wszINFKEY_EXPORTABLE",
    "wszINFKEY_EXPORTABLEENCRYPTED",
    "wszINFKEY_FLAGS",
    "wszINFKEY_FORCEUTF8",
    "wszINFKEY_FRIENDLYNAME",
    "wszINFKEY_HASHALGORITHM",
    "wszINFKEY_INCLUDE",
    "wszINFKEY_INHIBITPOLICYMAPPING",
    "wszINFKEY_IPADDRESS",
    "wszINFKEY_KEYALGORITHM",
    "wszINFKEY_KEYALGORITHMPARMETERS",
    "wszINFKEY_KEYCONTAINER",
    "wszINFKEY_KEYLENGTH",
    "wszINFKEY_KEYPROTECTION",
    "wszINFKEY_KEYUSAGEEXTENSION",
    "wszINFKEY_KEYUSAGEPROPERTY",
    "wszINFKEY_LEGACYKEYSPEC",
    "wszINFKEY_LOADDEFAULTTEMPLATES",
    "wszINFKEY_MACHINEKEYSET",
    "wszINFKEY_NOTAFTER",
    "wszINFKEY_NOTBEFORE",
    "wszINFKEY_NOTICE",
    "wszINFKEY_OID",
    "wszINFKEY_OTHERNAME",
    "wszINFKEY_PATHLENGTH",
    "wszINFKEY_POLICIES",
    "wszINFKEY_PRIVATEKEYARCHIVE",
    "wszINFKEY_PROVIDERNAME",
    "wszINFKEY_PROVIDERTYPE",
    "wszINFKEY_PUBLICKEY",
    "wszINFKEY_PUBLICKEYPARAMETERS",
    "wszINFKEY_READERNAME",
    "wszINFKEY_REGISTEREDID",
    "wszINFKEY_RENEWALCERT",
    "wszINFKEY_RENEWALKEYLENGTH",
    "wszINFKEY_RENEWALVALIDITYPERIODCOUNT",
    "wszINFKEY_RENEWALVALIDITYPERIODSTRING",
    "wszINFKEY_REQUESTTYPE",
    "wszINFKEY_REQUIREEXPLICITPOLICY",
    "wszINFKEY_SECURITYDESCRIPTOR",
    "wszINFKEY_SERIALNUMBER",
    "wszINFKEY_SHOWALLCSPS",
    "wszINFKEY_SILENT",
    "wszINFKEY_SMIME",
    "wszINFKEY_SUBJECT",
    "wszINFKEY_SUBJECTNAMEFLAGS",
    "wszINFKEY_SUBTREE",
    "wszINFKEY_SUPPRESSDEFAULTS",
    "wszINFKEY_UICONTEXTMESSAGE",
    "wszINFKEY_UPN",
    "wszINFKEY_URL",
    "wszINFKEY_USEEXISTINGKEY",
    "wszINFKEY_USERPROTECTED",
    "wszINFKEY_UTF8",
    "wszINFKEY_X500NAMEFLAGS",
    "wszINFSECTION_AIA",
    "wszINFSECTION_APPLICATIONPOLICYCONSTRAINTS",
    "wszINFSECTION_APPLICATIONPOLICYMAPPINGS",
    "wszINFSECTION_APPLICATIONPOLICYSTATEMENT",
    "wszINFSECTION_BASICCONSTRAINTS",
    "wszINFSECTION_CAPOLICY",
    "wszINFSECTION_CCDP",
    "wszINFSECTION_CDP",
    "wszINFSECTION_CERTSERVER",
    "wszINFSECTION_EKU",
    "wszINFSECTION_EXTENSIONS",
    "wszINFSECTION_NAMECONSTRAINTS",
    "wszINFSECTION_NEWREQUEST",
    "wszINFSECTION_POLICYCONSTRAINTS",
    "wszINFSECTION_POLICYMAPPINGS",
    "wszINFSECTION_POLICYSTATEMENT",
    "wszINFSECTION_PROPERTIES",
    "wszINFSECTION_REQUESTATTRIBUTES",
    "wszINFVALUE_ENDORSEMENTKEY",
    "wszINFVALUE_REQUESTTYPE_CERT",
    "wszINFVALUE_REQUESTTYPE_CMC",
    "wszINFVALUE_REQUESTTYPE_PKCS10",
    "wszINFVALUE_REQUESTTYPE_PKCS7",
    "wszINFVALUE_REQUESTTYPE_SCEP",
    "wszLDAPSESSIONOPTIONVALUE",
    "wszLOCALIZEDTIMEPERIODUNITS",
    "wszLOGFILENAMEEXT",
    "wszLOGPATH",
    "wszMACHINEKEYSET",
    "wszMICROSOFTCERTMODULE_PREFIX",
    "wszNETSCAPEREVOCATIONTYPE",
    "wszOCSPCAPROP_CACERTIFICATE",
    "wszOCSPCAPROP_CACONFIG",
    "wszOCSPCAPROP_CSPNAME",
    "wszOCSPCAPROP_ERRORCODE",
    "wszOCSPCAPROP_HASHALGORITHMID",
    "wszOCSPCAPROP_KEYSPEC",
    "wszOCSPCAPROP_LOCALREVOCATIONINFORMATION",
    "wszOCSPCAPROP_PROVIDERCLSID",
    "wszOCSPCAPROP_PROVIDERPROPERTIES",
    "wszOCSPCAPROP_REMINDERDURATION",
    "wszOCSPCAPROP_SIGNINGCERTIFICATE",
    "wszOCSPCAPROP_SIGNINGCERTIFICATETEMPLATE",
    "wszOCSPCAPROP_SIGNINGFLAGS",
    "wszOCSPCOMMONPROP_MAXINCOMINGMESSAGESIZE",
    "wszOCSPCOMMONPROP_MAXNUMOFREQUESTENTRIES",
    "wszOCSPCOMMONPROP_REQFLAGS",
    "wszOCSPISAPIPROP_DEBUG",
    "wszOCSPISAPIPROP_MAXAGE",
    "wszOCSPISAPIPROP_MAXNUMOFCACHEENTRIES",
    "wszOCSPISAPIPROP_NUMOFBACKENDCONNECTIONS",
    "wszOCSPISAPIPROP_NUMOFTHREADS",
    "wszOCSPISAPIPROP_REFRESHRATE",
    "wszOCSPISAPIPROP_VIRTUALROOTNAME",
    "wszOCSPPROP_ARRAYCONTROLLER",
    "wszOCSPPROP_ARRAYMEMBERS",
    "wszOCSPPROP_AUDITFILTER",
    "wszOCSPPROP_DEBUG",
    "wszOCSPPROP_ENROLLPOLLINTERVAL",
    "wszOCSPPROP_LOGLEVEL",
    "wszOCSPREVPROP_BASECRL",
    "wszOCSPREVPROP_BASECRLURLS",
    "wszOCSPREVPROP_CRLURLTIMEOUT",
    "wszOCSPREVPROP_DELTACRL",
    "wszOCSPREVPROP_DELTACRLURLS",
    "wszOCSPREVPROP_ERRORCODE",
    "wszOCSPREVPROP_REFRESHTIMEOUT",
    "wszOCSPREVPROP_SERIALNUMBERSDIRS",
    "wszPERIODDAYS",
    "wszPERIODHOURS",
    "wszPERIODMINUTES",
    "wszPERIODMONTHS",
    "wszPERIODSECONDS",
    "wszPERIODWEEKS",
    "wszPERIODYEARS",
    "wszPFXFILENAMEEXT",
    "wszPROPATTESTATIONCHALLENGE",
    "wszPROPATTRIBNAME",
    "wszPROPATTRIBREQUESTID",
    "wszPROPATTRIBVALUE",
    "wszPROPCALLERNAME",
    "wszPROPCATYPE",
    "wszPROPCERTCLIENTMACHINE",
    "wszPROPCERTCOUNT",
    "wszPROPCERTIFICATEENROLLMENTFLAGS",
    "wszPROPCERTIFICATEGENERALFLAGS",
    "wszPROPCERTIFICATEHASH",
    "wszPROPCERTIFICATENOTAFTERDATE",
    "wszPROPCERTIFICATENOTBEFOREDATE",
    "wszPROPCERTIFICATEPRIVATEKEYFLAGS",
    "wszPROPCERTIFICATEPUBLICKEYALGORITHM",
    "wszPROPCERTIFICATEPUBLICKEYLENGTH",
    "wszPROPCERTIFICATERAWPUBLICKEY",
    "wszPROPCERTIFICATERAWPUBLICKEYALGORITHMPARAMETERS",
    "wszPROPCERTIFICATERAWSMIMECAPABILITIES",
    "wszPROPCERTIFICATEREQUESTID",
    "wszPROPCERTIFICATESERIALNUMBER",
    "wszPROPCERTIFICATESUBJECTKEYIDENTIFIER",
    "wszPROPCERTIFICATETEMPLATE",
    "wszPROPCERTIFICATETYPE",
    "wszPROPCERTIFICATEUPN",
    "wszPROPCERTSTATE",
    "wszPROPCERTSUFFIX",
    "wszPROPCERTTEMPLATE",
    "wszPROPCERTTYPE",
    "wszPROPCERTUSAGE",
    "wszPROPCHALLENGE",
    "wszPROPCLIENTBROWSERMACHINE",
    "wszPROPCLIENTDCDNS",
    "wszPROPCOMMONNAME",
    "wszPROPCONFIGDN",
    "wszPROPCOUNTRY",
    "wszPROPCRITICALTAG",
    "wszPROPCRLCOUNT",
    "wszPROPCRLEFFECTIVE",
    "wszPROPCRLINDEX",
    "wszPROPCRLLASTPUBLISHED",
    "wszPROPCRLMINBASE",
    "wszPROPCRLNAMEID",
    "wszPROPCRLNEXTPUBLISH",
    "wszPROPCRLNEXTUPDATE",
    "wszPROPCRLNUMBER",
    "wszPROPCRLPROPAGATIONCOMPLETE",
    "wszPROPCRLPUBLISHATTEMPTS",
    "wszPROPCRLPUBLISHERROR",
    "wszPROPCRLPUBLISHFLAGS",
    "wszPROPCRLPUBLISHSTATUSCODE",
    "wszPROPCRLRAWCRL",
    "wszPROPCRLROWID",
    "wszPROPCRLSTATE",
    "wszPROPCRLSUFFIX",
    "wszPROPCRLTHISPUBLISH",
    "wszPROPCRLTHISUPDATE",
    "wszPROPCROSSFOREST",
    "wszPROPDCNAME",
    "wszPROPDECIMALTAG",
    "wszPROPDELTACRLSDISABLED",
    "wszPROPDEVICESERIALNUMBER",
    "wszPROPDISPOSITION",
    "wszPROPDISPOSITIONDENY",
    "wszPROPDISPOSITIONPENDING",
    "wszPROPDISTINGUISHEDNAME",
    "wszPROPDN",
    "wszPROPDNS",
    "wszPROPDOMAINCOMPONENT",
    "wszPROPDOMAINDN",
    "wszPROPEMAIL",
    "wszPROPENDORSEMENTCERTIFICATEHASH",
    "wszPROPENDORSEMENTKEYHASH",
    "wszPROPEVENTLOGERROR",
    "wszPROPEVENTLOGEXHAUSTIVE",
    "wszPROPEVENTLOGTERSE",
    "wszPROPEVENTLOGVERBOSE",
    "wszPROPEVENTLOGWARNING",
    "wszPROPEXITCERTFILE",
    "wszPROPEXPECTEDCHALLENGE",
    "wszPROPEXPIRATIONDATE",
    "wszPROPEXTFLAGS",
    "wszPROPEXTNAME",
    "wszPROPEXTRAWVALUE",
    "wszPROPEXTREQUESTID",
    "wszPROPFILETAG",
    "wszPROPGIVENNAME",
    "wszPROPGUID",
    "wszPROPHEXTAG",
    "wszPROPINITIALS",
    "wszPROPIPADDRESS",
    "wszPROPKEYARCHIVED",
    "wszPROPLOCALITY",
    "wszPROPLOGLEVEL",
    "wszPROPMACHINEDNSNAME",
    "wszPROPMODULEREGLOC",
    "wszPROPNAMETYPE",
    "wszPROPOCTETTAG",
    "wszPROPOFFICER",
    "wszPROPOID",
    "wszPROPORGANIZATION",
    "wszPROPORGUNIT",
    "wszPROPPUBLISHEXPIREDCERTINCRL",
    "wszPROPRAWCACERTIFICATE",
    "wszPROPRAWCERTIFICATE",
    "wszPROPRAWCRL",
    "wszPROPRAWDELTACRL",
    "wszPROPRAWNAME",
    "wszPROPRAWPRECERTIFICATE",
    "wszPROPREQUESTARCHIVEDKEY",
    "wszPROPREQUESTATTRIBUTES",
    "wszPROPREQUESTCSPPROVIDER",
    "wszPROPREQUESTDISPOSITION",
    "wszPROPREQUESTDISPOSITIONMESSAGE",
    "wszPROPREQUESTDOT",
    "wszPROPREQUESTERCAACCESS",
    "wszPROPREQUESTERDN",
    "wszPROPREQUESTERNAME",
    "wszPROPREQUESTERNAMEFROMOLDCERTIFICATE",
    "wszPROPREQUESTERSAMNAME",
    "wszPROPREQUESTERUPN",
    "wszPROPREQUESTFLAGS",
    "wszPROPREQUESTKEYRECOVERYHASHES",
    "wszPROPREQUESTMACHINEDNS",
    "wszPROPREQUESTOSVERSION",
    "wszPROPREQUESTRAWARCHIVEDKEY",
    "wszPROPREQUESTRAWOLDCERTIFICATE",
    "wszPROPREQUESTRAWREQUEST",
    "wszPROPREQUESTREQUESTID",
    "wszPROPREQUESTRESOLVEDWHEN",
    "wszPROPREQUESTREVOKEDEFFECTIVEWHEN",
    "wszPROPREQUESTREVOKEDREASON",
    "wszPROPREQUESTREVOKEDWHEN",
    "wszPROPREQUESTSTATUSCODE",
    "wszPROPREQUESTSUBMITTEDWHEN",
    "wszPROPREQUESTTYPE",
    "wszPROPSANITIZEDCANAME",
    "wszPROPSANITIZEDSHORTNAME",
    "wszPROPSEAUDITFILTER",
    "wszPROPSEAUDITID",
    "wszPROPSERVERUPGRADED",
    "wszPROPSESSIONCOUNT",
    "wszPROPSIGNERAPPLICATIONPOLICIES",
    "wszPROPSIGNERPOLICIES",
    "wszPROPSTATE",
    "wszPROPSTREETADDRESS",
    "wszPROPSUBJECTALTNAME2",
    "wszPROPSUBJECTDOT",
    "wszPROPSURNAME",
    "wszPROPTEMPLATECHANGESEQUENCENUMBER",
    "wszPROPTEXTTAG",
    "wszPROPTITLE",
    "wszPROPUNSTRUCTUREDADDRESS",
    "wszPROPUNSTRUCTUREDNAME",
    "wszPROPUPN",
    "wszPROPURL",
    "wszPROPUSEDS",
    "wszPROPUSERDN",
    "wszPROPUTF8TAG",
    "wszPROPVALIDITYPERIODCOUNT",
    "wszPROPVALIDITYPERIODSTRING",
    "wszPROPVOLATILEMODE",
    "wszREGACTIVE",
    "wszREGAELOGLEVEL_OLD",
    "wszREGAIKCLOUDCAURL",
    "wszREGAIKKEYALGORITHM",
    "wszREGAIKKEYLENGTH",
    "wszREGALLPROVIDERS",
    "wszREGALTERNATEPUBLISHDOMAINS",
    "wszREGALTERNATESIGNATUREALGORITHM",
    "wszREGAUDITFILTER",
    "wszREGB2ICERTMANAGEMODULE",
    "wszREGBACKUPLOGDIRECTORY",
    "wszREGCACERTFILENAME",
    "wszREGCACERTHASH",
    "wszREGCACERTPUBLICATIONURLS",
    "wszREGCADESCRIPTION",
    "wszREGCAPATHLENGTH",
    "wszREGCASECURITY",
    "wszREGCASERIALNUMBER",
    "wszREGCASERVERNAME",
    "wszREGCATYPE",
    "wszREGCAUSEDS",
    "wszREGCAXCHGCERTHASH",
    "wszREGCAXCHGOVERLAPPERIODCOUNT",
    "wszREGCAXCHGOVERLAPPERIODSTRING",
    "wszREGCAXCHGVALIDITYPERIODCOUNT",
    "wszREGCAXCHGVALIDITYPERIODSTRING",
    "wszREGCERTENROLLCOMPATIBLE",
    "wszREGCERTIFICATETRANSPARENCYINFOOID",
    "wszREGCERTPUBLISHFLAGS",
    "wszREGCERTSRVDEBUG",
    "wszREGCHECKPOINTFILE",
    "wszREGCLOCKSKEWMINUTES",
    "wszREGCOMMONNAME",
    "wszREGCRLATTEMPTREPUBLISH",
    "wszREGCRLDELTANEXTPUBLISH",
    "wszREGCRLDELTAOVERLAPPERIODCOUNT",
    "wszREGCRLDELTAOVERLAPPERIODSTRING",
    "wszREGCRLDELTAPERIODCOUNT",
    "wszREGCRLDELTAPERIODSTRING",
    "wszREGCRLEDITFLAGS",
    "wszREGCRLFLAGS",
    "wszREGCRLNEXTPUBLISH",
    "wszREGCRLOVERLAPPERIODCOUNT",
    "wszREGCRLOVERLAPPERIODSTRING",
    "wszREGCRLPATH_OLD",
    "wszREGCRLPERIODCOUNT",
    "wszREGCRLPERIODSTRING",
    "wszREGCRLPUBLICATIONURLS",
    "wszREGDATABASERECOVERED",
    "wszREGDBDIRECTORY",
    "wszREGDBFLAGS",
    "wszREGDBLASTFULLBACKUP",
    "wszREGDBLASTINCREMENTALBACKUP",
    "wszREGDBLASTRECOVERY",
    "wszREGDBLOGDIRECTORY",
    "wszREGDBMAXREADSESSIONCOUNT",
    "wszREGDBSESSIONCOUNT",
    "wszREGDBSYSDIRECTORY",
    "wszREGDBTEMPDIRECTORY",
    "wszREGDEFAULTSMIME",
    "wszREGDIRECTORY",
    "wszREGDISABLEEXTENSIONLIST",
    "wszREGDSCONFIGDN",
    "wszREGDSDOMAINDN",
    "wszREGEDITFLAGS",
    "wszREGEKPUBLISTDIRECTORIES",
    "wszREGEKUOIDSFORPUBLISHEXPIREDCERTINCRL",
    "wszREGEKUOIDSFORVOLATILEREQUESTS",
    "wszREGENABLED",
    "wszREGENABLEDEKUFORDEFINEDCACERT",
    "wszREGENABLEENROLLEEREQUESTEXTENSIONLIST",
    "wszREGENABLEREQUESTEXTENSIONLIST",
    "wszREGENFORCEX500NAMELENGTHS",
    "wszREGENROLLFLAGS",
    "wszREGEXITBODYARG",
    "wszREGEXITBODYFORMAT",
    "wszREGEXITCRLISSUEDKEY",
    "wszREGEXITDENIEDKEY",
    "wszREGEXITIMPORTEDKEY",
    "wszREGEXITISSUEDKEY",
    "wszREGEXITPENDINGKEY",
    "wszREGEXITPROPNOTFOUND",
    "wszREGEXITREVOKEDKEY",
    "wszREGEXITSHUTDOWNKEY",
    "wszREGEXITSMTPAUTHENTICATE",
    "wszREGEXITSMTPCC",
    "wszREGEXITSMTPEVENTFILTER",
    "wszREGEXITSMTPFROM",
    "wszREGEXITSMTPKEY",
    "wszREGEXITSMTPSERVER",
    "wszREGEXITSMTPTEMPLATES",
    "wszREGEXITSMTPTO",
    "wszREGEXITSTARTUPKEY",
    "wszREGEXITTITLEARG",
    "wszREGEXITTITLEFORMAT",
    "wszREGFILEISSUERCERTURL_OLD",
    "wszREGFILEREVOCATIONCRLURL_OLD",
    "wszREGFORCETELETEX",
    "wszREGFTPISSUERCERTURL_OLD",
    "wszREGFTPREVOCATIONCRLURL_OLD",
    "wszREGHIGHLOGNUMBER",
    "wszREGHIGHSERIAL",
    "wszREGINTERFACEFLAGS",
    "wszREGISSUERCERTURLFLAGS",
    "wszREGISSUERCERTURL_OLD",
    "wszREGKEYBASE",
    "wszREGKEYCERTSVCPATH",
    "wszREGKEYCONFIG",
    "wszREGKEYCSP",
    "wszREGKEYDBPARAMETERS",
    "wszREGKEYENCRYPTIONCSP",
    "wszREGKEYENROLLMENT",
    "wszREGKEYEXITMODULES",
    "wszREGKEYGROUPPOLICYENROLLMENT",
    "wszREGKEYNOSYSTEMCERTSVCPATH",
    "wszREGKEYPOLICYMODULES",
    "wszREGKEYREPAIR",
    "wszREGKEYRESTOREINPROGRESS",
    "wszREGKEYSIZE",
    "wszREGKRACERTCOUNT",
    "wszREGKRACERTHASH",
    "wszREGKRAFLAGS",
    "wszREGLDAPFLAGS",
    "wszREGLDAPISSUERCERTURL_OLD",
    "wszREGLDAPREVOCATIONCRLURL_OLD",
    "wszREGLDAPREVOCATIONDNTEMPLATE_OLD",
    "wszREGLDAPREVOCATIONDN_OLD",
    "wszREGLDAPSESSIONOPTIONS",
    "wszREGLOGLEVEL",
    "wszREGLOGPATH",
    "wszREGLOWLOGNUMBER",
    "wszREGMAXINCOMINGALLOCSIZE",
    "wszREGMAXINCOMINGMESSAGESIZE",
    "wszREGMAXPENDINGREQUESTDAYS",
    "wszREGMAXSCTLISTSIZE",
    "wszREGNAMESEPARATOR",
    "wszREGNETSCAPECERTTYPE",
    "wszREGOFFICERRIGHTS",
    "wszREGPARENTCAMACHINE",
    "wszREGPARENTCANAME",
    "wszREGPOLICYFLAGS",
    "wszREGPRESERVESCEPDUMMYCERTS",
    "wszREGPROCESSINGFLAGS",
    "wszREGPROVIDER",
    "wszREGPROVIDERTYPE",
    "wszREGREQUESTDISPOSITION",
    "wszREGREQUESTFILENAME",
    "wszREGREQUESTID",
    "wszREGREQUESTKEYCONTAINER",
    "wszREGREQUESTKEYINDEX",
    "wszREGRESTOREMAP",
    "wszREGRESTOREMAPCOUNT",
    "wszREGRESTORESTATUS",
    "wszREGREVOCATIONCRLURL_OLD",
    "wszREGREVOCATIONTYPE",
    "wszREGREVOCATIONURL",
    "wszREGROLESEPARATIONENABLED",
    "wszREGSETUPSTATUS",
    "wszREGSP4DEFAULTCONFIGURATION",
    "wszREGSP4KEYSETNAME",
    "wszREGSP4NAMES",
    "wszREGSP4QUERIES",
    "wszREGSP4SUBJECTNAMESEPARATOR",
    "wszREGSUBJECTALTNAME",
    "wszREGSUBJECTALTNAME2",
    "wszREGSUBJECTTEMPLATE",
    "wszREGSYMMETRICKEYSIZE",
    "wszREGUNICODE",
    "wszREGUPNMAP",
    "wszREGUSEDEFINEDCACERTINREQ",
    "wszREGVALIDITYPERIODCOUNT",
    "wszREGVALIDITYPERIODSTRING",
    "wszREGVERIFYFLAGS",
    "wszREGVERSION",
    "wszREGVIEWAGEMINUTES",
    "wszREGVIEWIDLEMINUTES",
    "wszREGWEBCLIENTCAMACHINE",
    "wszREGWEBCLIENTCANAME",
    "wszREGWEBCLIENTCATYPE",
    "wszSECUREDATTRIBUTES",
    "wszSERVICE_NAME",
    "wszzDEFAULTSIGNEDATTRIBUTES",
]
_arch_optional = [
]
