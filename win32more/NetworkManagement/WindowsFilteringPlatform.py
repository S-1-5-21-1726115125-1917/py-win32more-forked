from win32more import *
import win32more.Foundation
import win32more.NetworkManagement.WindowsFilteringPlatform
import win32more.Networking.WinSock
import win32more.Security
import win32more.System.Kernel
import win32more.System.Rpc

import sys
_module = sys.modules[__name__]
def __getattr__(name):
    try:
        f = globals()[f"_define_{name}"]
    except KeyError:
        raise AttributeError(f"module '{__name__}' has no attribute '{name}'") from None
    setattr(_module, name, f())
    return getattr(_module, name)
def __dir__():
    return __all__
FWPM_NET_EVENT_KEYWORD_INBOUND_MCAST = 1
FWPM_NET_EVENT_KEYWORD_INBOUND_BCAST = 2
FWPM_NET_EVENT_KEYWORD_CAPABILITY_DROP = 4
FWPM_NET_EVENT_KEYWORD_CAPABILITY_ALLOW = 8
FWPM_NET_EVENT_KEYWORD_CLASSIFY_ALLOW = 16
FWPM_NET_EVENT_KEYWORD_PORT_SCANNING_DROP = 32
FWPM_ENGINE_OPTION_PACKET_QUEUE_NONE = 0
FWPM_ENGINE_OPTION_PACKET_QUEUE_INBOUND = 1
FWPM_ENGINE_OPTION_PACKET_QUEUE_FORWARD = 2
FWPM_ENGINE_OPTION_PACKET_BATCH_INBOUND = 4
FWPM_SESSION_FLAG_DYNAMIC = 1
FWPM_SESSION_FLAG_RESERVED = 268435456
FWPM_PROVIDER_FLAG_PERSISTENT = 1
FWPM_PROVIDER_FLAG_DISABLED = 16
FWPM_PROVIDER_CONTEXT_FLAG_PERSISTENT = 1
FWPM_PROVIDER_CONTEXT_FLAG_DOWNLEVEL = 2
FWPM_SUBLAYER_FLAG_PERSISTENT = 1
FWPM_LAYER_FLAG_KERNEL = 1
FWPM_LAYER_FLAG_BUILTIN = 2
FWPM_LAYER_FLAG_CLASSIFY_MOSTLY = 4
FWPM_LAYER_FLAG_BUFFERED = 8
FWPM_CALLOUT_FLAG_PERSISTENT = 65536
FWPM_CALLOUT_FLAG_USES_PROVIDER_CONTEXT = 131072
FWPM_CALLOUT_FLAG_REGISTERED = 262144
FWPM_FILTER_FLAG_HAS_SECURITY_REALM_PROVIDER_CONTEXT = 128
FWPM_FILTER_FLAG_SYSTEMOS_ONLY = 256
FWPM_FILTER_FLAG_GAMEOS_ONLY = 512
FWPM_FILTER_FLAG_SILENT_MODE = 1024
FWPM_FILTER_FLAG_IPSEC_NO_ACQUIRE_INITIATE = 2048
FWPM_FILTER_FLAG_RESERVED0 = 4096
FWPM_FILTER_FLAG_RESERVED1 = 8192
FWPM_NET_EVENT_FLAG_IP_PROTOCOL_SET = 1
FWPM_NET_EVENT_FLAG_LOCAL_ADDR_SET = 2
FWPM_NET_EVENT_FLAG_REMOTE_ADDR_SET = 4
FWPM_NET_EVENT_FLAG_LOCAL_PORT_SET = 8
FWPM_NET_EVENT_FLAG_REMOTE_PORT_SET = 16
FWPM_NET_EVENT_FLAG_APP_ID_SET = 32
FWPM_NET_EVENT_FLAG_USER_ID_SET = 64
FWPM_NET_EVENT_FLAG_SCOPE_ID_SET = 128
FWPM_NET_EVENT_FLAG_IP_VERSION_SET = 256
FWPM_NET_EVENT_FLAG_REAUTH_REASON_SET = 512
FWPM_NET_EVENT_FLAG_PACKAGE_ID_SET = 1024
FWPM_NET_EVENT_FLAG_ENTERPRISE_ID_SET = 2048
FWPM_NET_EVENT_FLAG_POLICY_FLAGS_SET = 4096
FWPM_NET_EVENT_FLAG_EFFECTIVE_NAME_SET = 8192
IKEEXT_CERT_HASH_LEN = 20
FWPM_NET_EVENT_IKEEXT_MM_FAILURE_FLAG_BENIGN = 1
FWPM_NET_EVENT_IKEEXT_MM_FAILURE_FLAG_MULTIPLE = 2
FWPM_NET_EVENT_IKEEXT_EM_FAILURE_FLAG_MULTIPLE = 1
FWPM_NET_EVENT_IKEEXT_EM_FAILURE_FLAG_BENIGN = 2
FWPM_CONNECTION_ENUM_FLAG_QUERY_BYTES_TRANSFERRED = 1
FWPS_FILTER_FLAG_CLEAR_ACTION_RIGHT = 1
FWPS_FILTER_FLAG_PERMIT_IF_CALLOUT_UNREGISTERED = 2
FWPS_FILTER_FLAG_OR_CONDITIONS = 4
FWPS_FILTER_FLAG_HAS_SECURITY_REALM_PROVIDER_CONTEXT = 8
FWPS_FILTER_FLAG_SILENT_MODE = 16
FWPS_FILTER_FLAG_IPSEC_NO_ACQUIRE_INITIATE = 32
FWPS_FILTER_FLAG_RESERVED0 = 64
FWPS_FILTER_FLAG_RESERVED1 = 128
FWPS_INCOMING_FLAG_CACHE_SAFE = 1
FWPS_INCOMING_FLAG_ENFORCE_QUERY = 2
FWPS_INCOMING_FLAG_ABSORB = 4
FWPS_INCOMING_FLAG_CONNECTION_FAILING_INDICATION = 8
FWPS_INCOMING_FLAG_MID_STREAM_INSPECTION = 16
FWPS_INCOMING_FLAG_RECLASSIFY = 32
FWPS_INCOMING_FLAG_IS_LOOSE_SOURCE_FLOW = 64
FWPS_INCOMING_FLAG_IS_LOCAL_ONLY_FLOW = 128
FWPS_L2_INCOMING_FLAG_IS_RAW_IPV4_FRAMING = 1
FWPS_L2_INCOMING_FLAG_IS_RAW_IPV6_FRAMING = 2
FWPS_L2_INCOMING_FLAG_RECLASSIFY_MULTI_DESTINATION = 8
FWPS_INCOMING_FLAG_RESERVED0 = 256
FWPS_RIGHT_ACTION_WRITE = 1
FWPS_CLASSIFY_OUT_FLAG_ABSORB = 1
FWPS_CLASSIFY_OUT_FLAG_BUFFER_LIMIT_REACHED = 2
FWPS_CLASSIFY_OUT_FLAG_NO_MORE_DATA = 4
FWPS_CLASSIFY_OUT_FLAG_ALE_FAST_CACHE_CHECK = 8
FWPS_CLASSIFY_OUT_FLAG_ALE_FAST_CACHE_POSSIBLE = 16
FWPS_ALE_ENDPOINT_FLAG_IPSEC_SECURED = 1
FWP_BYTEMAP_ARRAY64_SIZE = 8
FWP_BYTE_ARRAY6_SIZE = 6
FWP_V6_ADDR_SIZE = 16
FWP_ACTRL_MATCH_FILTER = 1
FWP_OPTION_VALUE_ALLOW_MULTICAST_STATE = 0
FWP_OPTION_VALUE_DENY_MULTICAST_STATE = 1
FWP_OPTION_VALUE_ALLOW_GLOBAL_MULTICAST_STATE = 2
FWP_OPTION_VALUE_DISABLE_LOOSE_SOURCE = 0
FWP_OPTION_VALUE_ENABLE_LOOSE_SOURCE = 1
FWP_OPTION_VALUE_DISABLE_LOCAL_ONLY_MAPPING = 0
FWP_OPTION_VALUE_ENABLE_LOCAL_ONLY_MAPPING = 1
FWP_ACTION_FLAG_TERMINATING = 4096
FWP_ACTION_FLAG_NON_TERMINATING = 8192
FWP_ACTION_FLAG_CALLOUT = 16384
FWP_ACTION_NONE = 7
FWP_ACTION_NONE_NO_MATCH = 8
FWP_CONDITION_FLAG_IS_LOOPBACK = 1
FWP_CONDITION_FLAG_IS_IPSEC_SECURED = 2
FWP_CONDITION_FLAG_IS_REAUTHORIZE = 4
FWP_CONDITION_FLAG_IS_WILDCARD_BIND = 8
FWP_CONDITION_FLAG_IS_RAW_ENDPOINT = 16
FWP_CONDITION_FLAG_IS_FRAGMENT = 32
FWP_CONDITION_FLAG_IS_FRAGMENT_GROUP = 64
FWP_CONDITION_FLAG_IS_IPSEC_NATT_RECLASSIFY = 128
FWP_CONDITION_FLAG_REQUIRES_ALE_CLASSIFY = 256
FWP_CONDITION_FLAG_IS_IMPLICIT_BIND = 512
FWP_CONDITION_FLAG_IS_REASSEMBLED = 1024
FWP_CONDITION_FLAG_IS_NAME_APP_SPECIFIED = 16384
FWP_CONDITION_FLAG_IS_PROMISCUOUS = 32768
FWP_CONDITION_FLAG_IS_AUTH_FW = 65536
FWP_CONDITION_FLAG_IS_RECLASSIFY = 131072
FWP_CONDITION_FLAG_IS_OUTBOUND_PASS_THRU = 262144
FWP_CONDITION_FLAG_IS_INBOUND_PASS_THRU = 524288
FWP_CONDITION_FLAG_IS_CONNECTION_REDIRECTED = 1048576
FWP_CONDITION_FLAG_IS_PROXY_CONNECTION = 2097152
FWP_CONDITION_FLAG_IS_APPCONTAINER_LOOPBACK = 4194304
FWP_CONDITION_FLAG_IS_NON_APPCONTAINER_LOOPBACK = 8388608
FWP_CONDITION_FLAG_IS_RESERVED = 16777216
FWP_CONDITION_FLAG_IS_HONORING_POLICY_AUTHORIZE = 33554432
FWP_CONDITION_REAUTHORIZE_REASON_POLICY_CHANGE = 1
FWP_CONDITION_REAUTHORIZE_REASON_NEW_ARRIVAL_INTERFACE = 2
FWP_CONDITION_REAUTHORIZE_REASON_NEW_NEXTHOP_INTERFACE = 4
FWP_CONDITION_REAUTHORIZE_REASON_PROFILE_CROSSING = 8
FWP_CONDITION_REAUTHORIZE_REASON_CLASSIFY_COMPLETION = 16
FWP_CONDITION_REAUTHORIZE_REASON_IPSEC_PROPERTIES_CHANGED = 32
FWP_CONDITION_REAUTHORIZE_REASON_MID_STREAM_INSPECTION = 64
FWP_CONDITION_REAUTHORIZE_REASON_SOCKET_PROPERTY_CHANGED = 128
FWP_CONDITION_REAUTHORIZE_REASON_NEW_INBOUND_MCAST_BCAST_PACKET = 256
FWP_CONDITION_REAUTHORIZE_REASON_EDP_POLICY_CHANGED = 512
FWP_CONDITION_REAUTHORIZE_REASON_PROXY_HANDLE_CHANGED = 16384
FWP_CONDITION_REAUTHORIZE_REASON_CHECK_OFFLOAD = 65536
FWP_CONDITION_SOCKET_PROPERTY_FLAG_IS_SYSTEM_PORT_RPC = 1
FWP_CONDITION_SOCKET_PROPERTY_FLAG_ALLOW_EDGE_TRAFFIC = 2
FWP_CONDITION_SOCKET_PROPERTY_FLAG_DENY_EDGE_TRAFFIC = 4
FWP_CONDITION_L2_IS_NATIVE_ETHERNET = 1
FWP_CONDITION_L2_IS_WIFI = 2
FWP_CONDITION_L2_IS_MOBILE_BROADBAND = 4
FWP_CONDITION_L2_IS_WIFI_DIRECT_DATA = 8
FWP_CONDITION_L2_IS_VM2VM = 16
FWP_CONDITION_L2_IS_MALFORMED_PACKET = 32
FWP_CONDITION_L2_IS_IP_FRAGMENT_GROUP = 64
FWP_CONDITION_L2_IF_CONNECTOR_PRESENT = 128
FWP_FILTER_ENUM_FLAG_BEST_TERMINATING_MATCH = 1
FWP_FILTER_ENUM_FLAG_SORTED = 2
FWP_FILTER_ENUM_FLAG_BOOTTIME_ONLY = 4
FWP_FILTER_ENUM_FLAG_INCLUDE_BOOTTIME = 8
FWP_FILTER_ENUM_FLAG_INCLUDE_DISABLED = 16
FWP_FILTER_ENUM_FLAG_RESERVED1 = 32
FWP_CALLOUT_FLAG_CONDITIONAL_ON_FLOW = 1
FWP_CALLOUT_FLAG_ALLOW_OFFLOAD = 2
FWP_CALLOUT_FLAG_ENABLE_COMMIT_ADD_NOTIFY = 4
FWP_CALLOUT_FLAG_ALLOW_MID_STREAM_INSPECTION = 8
FWP_CALLOUT_FLAG_ALLOW_RECLASSIFY = 16
FWP_CALLOUT_FLAG_RESERVED1 = 32
FWP_CALLOUT_FLAG_ALLOW_RSC = 64
FWP_CALLOUT_FLAG_ALLOW_L2_BATCH_CLASSIFY = 128
FWP_CALLOUT_FLAG_ALLOW_USO = 256
FWP_CALLOUT_FLAG_ALLOW_URO = 512
FWP_CALLOUT_FLAG_RESERVED2 = 1024
IKEEXT_CERT_AUTH_FLAG_DISABLE_CRL_CHECK = 2
IKEEXT_CERT_AUTH_FLAG_DISABLE_REQUEST_PAYLOAD = 64
IKEEXT_KERB_AUTH_FORCE_PROXY_ON_INITIATOR = 4
IKEEXT_NTLM_V2_AUTH_DONT_ACCEPT_EXPLICIT_CREDENTIALS = 1
IKEEXT_POLICY_FLAG_MOBIKE_NOT_SUPPORTED = 16
IKEEXT_POLICY_FLAG_SITE_TO_SITE = 32
IKEEXT_POLICY_FLAG_IMS_VPN = 64
IKEEXT_POLICY_ENABLE_IKEV2_FRAGMENTATION = 128
IKEEXT_POLICY_SUPPORT_LOW_POWER_MODE = 256
IKEEXT_CERT_CREDENTIAL_FLAG_NAP_CERT = 1
IPSEC_AUTH_CONFIG_HMAC_MD5_96 = 0
IPSEC_AUTH_CONFIG_HMAC_SHA_1_96 = 1
IPSEC_AUTH_CONFIG_HMAC_SHA_256_128 = 2
IPSEC_AUTH_CONFIG_GCM_AES_128 = 3
IPSEC_AUTH_CONFIG_GCM_AES_192 = 4
IPSEC_AUTH_CONFIG_GCM_AES_256 = 5
IPSEC_AUTH_CONFIG_MAX = 6
IPSEC_CIPHER_CONFIG_CBC_DES = 1
IPSEC_CIPHER_CONFIG_CBC_3DES = 2
IPSEC_CIPHER_CONFIG_CBC_AES_128 = 3
IPSEC_CIPHER_CONFIG_CBC_AES_192 = 4
IPSEC_CIPHER_CONFIG_CBC_AES_256 = 5
IPSEC_CIPHER_CONFIG_GCM_AES_128 = 6
IPSEC_CIPHER_CONFIG_GCM_AES_192 = 7
IPSEC_CIPHER_CONFIG_GCM_AES_256 = 8
IPSEC_CIPHER_CONFIG_MAX = 9
IPSEC_POLICY_FLAG_KEY_MANAGER_ALLOW_NOTIFY_KEY = 16384
IPSEC_POLICY_FLAG_RESERVED1 = 32768
IPSEC_POLICY_FLAG_SITE_TO_SITE_TUNNEL = 65536
IPSEC_KEYING_POLICY_FLAG_TERMINATING_MATCH = 1
IPSEC_SA_BUNDLE_FLAG_NLB = 16
IPSEC_SA_BUNDLE_FLAG_NO_MACHINE_LUID_VERIFY = 32
IPSEC_SA_BUNDLE_FLAG_NO_IMPERSONATION_LUID_VERIFY = 64
IPSEC_SA_BUNDLE_FLAG_NO_EXPLICIT_CRED_MATCH = 128
IPSEC_SA_BUNDLE_FLAG_FORCE_INBOUND_CONNECTIONS = 32768
IPSEC_SA_BUNDLE_FLAG_FORCE_OUTBOUND_CONNECTIONS = 65536
IPSEC_SA_BUNDLE_FLAG_FORWARD_PATH_INITIATOR = 131072
IPSEC_SA_BUNDLE_FLAG_ENABLE_OPTIONAL_ASYMMETRIC_IDLE = 262144
IPSEC_SA_BUNDLE_FLAG_USING_DICTATED_KEYS = 524288
IPSEC_SA_BUNDLE_FLAG_LOCALLY_DICTATED_KEYS = 1048576
IPSEC_SA_BUNDLE_FLAG_SA_OFFLOADED = 2097152
IPSEC_SA_BUNDLE_FLAG_IP_IN_IP_PKT = 4194304
IPSEC_SA_BUNDLE_FLAG_LOW_POWER_MODE_SUPPORT = 8388608
IPSEC_DOSP_DSCP_DISABLE_VALUE = 255
IPSEC_DOSP_RATE_LIMIT_DISABLE_VALUE = 0
IPSEC_KEY_MANAGER_FLAG_DICTATE_KEY = 1
_LITTLE_ENDIAN = 1234
_BIG_ENDIAN = 4321
_PDP_ENDIAN = 3412
BYTE_ORDER = 1234
DL_ADDRESS_LENGTH_MAXIMUM = 32
DL_HEADER_LENGTH_MAXIMUM = 64
SNAP_DSAP = 170
SNAP_SSAP = 170
SNAP_CONTROL = 3
SNAP_OUI = 0
ETH_LENGTH_OF_HEADER = 14
ETH_LENGTH_OF_VLAN_HEADER = 4
ETH_LENGTH_OF_SNAP_HEADER = 8
ETHERNET_TYPE_MINIMUM = 1536
ETHERNET_TYPE_IPV4 = 2048
ETHERNET_TYPE_ARP = 2054
ETHERNET_TYPE_IPV6 = 34525
ETHERNET_TYPE_802_1Q = 33024
ETHERNET_TYPE_802_1AD = 34984
IP_VER_MASK = 240
IPV4_VERSION = 4
MAX_IPV4_PACKET = 65535
MAX_IPV4_HLEN = 60
IPV4_MINIMUM_MTU = 576
IPV4_MIN_MINIMUM_MTU = 352
IPV4_MAX_MINIMUM_MTU = 576
SIZEOF_IP_OPT_ROUTING_HEADER = 3
SIZEOF_IP_OPT_TIMESTAMP_HEADER = 4
SIZEOF_IP_OPT_SECURITY = 11
SIZEOF_IP_OPT_STREAMIDENTIFIER = 4
SIZEOF_IP_OPT_ROUTERALERT = 4
IP4_OFF_MASK = 65311
ICMPV4_INVALID_PREFERENCE_LEVEL = 2147483648
IGMP_QUERY_TYPE = 17
IGMP_VERSION1_REPORT_TYPE = 18
IGMP_VERSION2_REPORT_TYPE = 22
IGMP_LEAVE_GROUP_TYPE = 23
IGMP_VERSION3_REPORT_TYPE = 34
IPV6_VERSION = 96
IPV6_TRAFFIC_CLASS_MASK = 49167
IPV6_FULL_TRAFFIC_CLASS_MASK = 61455
IPV6_ECN_MASK = 12288
IPV6_FLOW_LABEL_MASK = 4294905600
MAX_IPV6_PAYLOAD = 65535
IPV6_ECN_SHIFT = 12
IPV6_MINIMUM_MTU = 1280
IP6F_OFF_MASK = 63743
IP6F_RESERVED_MASK = 1536
IP6F_MORE_FRAG = 256
EXT_LEN_UNIT = 8
IP6OPT_TYPE_SKIP = 0
IP6OPT_TYPE_DISCARD = 64
IP6OPT_TYPE_FORCEICMP = 128
IP6OPT_TYPE_ICMP = 192
IP6OPT_MUTABLE = 32
ICMP6_DST_UNREACH_NOROUTE = 0
ICMP6_DST_UNREACH_ADMIN = 1
ICMP6_DST_UNREACH_BEYONDSCOPE = 2
ICMP6_DST_UNREACH_ADDR = 3
ICMP6_DST_UNREACH_NOPORT = 4
ICMP6_TIME_EXCEED_TRANSIT = 0
ICMP6_TIME_EXCEED_REASSEMBLY = 1
ICMP6_PARAMPROB_HEADER = 0
ICMP6_PARAMPROB_NEXTHEADER = 1
ICMP6_PARAMPROB_OPTION = 2
ICMPV6_ECHO_REQUEST_FLAG_REVERSE = 1
ND_RA_FLAG_MANAGED = 128
ND_RA_FLAG_OTHER = 64
ND_RA_FLAG_HOME_AGENT = 32
ND_RA_FLAG_PREFERENCE = 24
ND_NA_FLAG_ROUTER = 2147483648
ND_NA_FLAG_SOLICITED = 1073741824
ND_NA_FLAG_OVERRIDE = 536870912
ND_OPT_PI_FLAG_ONLINK = 128
ND_OPT_PI_FLAG_AUTO = 64
ND_OPT_PI_FLAG_ROUTER_ADDR = 32
ND_OPT_PI_FLAG_SITE_PREFIX = 16
ND_OPT_PI_FLAG_ROUTE = 1
ND_OPT_RI_FLAG_PREFERENCE = 24
ND_OPT_RDNSS_MIN_LEN = 24
ND_OPT_DNSSL_MIN_LEN = 16
IN6_EMBEDDEDV4_UOCTET_POSITION = 8
IN6_EMBEDDEDV4_BITS_IN_BYTE = 8
TH_FIN = 1
TH_SYN = 2
TH_RST = 4
TH_PSH = 8
TH_ACK = 16
TH_URG = 32
TH_ECE = 64
TH_CWR = 128
TH_OPT_EOL = 0
TH_OPT_NOP = 1
TH_OPT_MSS = 2
TH_OPT_WS = 3
TH_OPT_SACK_PERMITTED = 4
TH_OPT_SACK = 5
TH_OPT_TS = 8
TH_OPT_FASTOPEN = 34
FWPM_LAYER_INBOUND_IPPACKET_V4 = 'c86fd1bf-21cd-497e-a0bb-17425c885c58'
FWPM_LAYER_INBOUND_IPPACKET_V4_DISCARD = 'b5a230d0-a8c0-44f2-916e-991b53ded1f7'
FWPM_LAYER_INBOUND_IPPACKET_V6 = 'f52032cb-991c-46e7-971d-2601459a91ca'
FWPM_LAYER_INBOUND_IPPACKET_V6_DISCARD = 'bb24c279-93b4-47a2-83ad-ae1698b50885'
FWPM_LAYER_OUTBOUND_IPPACKET_V4 = '1e5c9fae-8a84-4135-a331-950b54229ecd'
FWPM_LAYER_OUTBOUND_IPPACKET_V4_DISCARD = '08e4bcb5-b647-48f3-953c-e5ddbd03937e'
FWPM_LAYER_OUTBOUND_IPPACKET_V6 = 'a3b3ab6b-3564-488c-9117-f34e82142763'
FWPM_LAYER_OUTBOUND_IPPACKET_V6_DISCARD = '9513d7c4-a934-49dc-91a7-6ccb80cc02e3'
FWPM_LAYER_IPFORWARD_V4 = 'a82acc24-4ee1-4ee1-b465-fd1d25cb10a4'
FWPM_LAYER_IPFORWARD_V4_DISCARD = '9e9ea773-2fae-4210-8f17-34129ef369eb'
FWPM_LAYER_IPFORWARD_V6 = '7b964818-19c7-493a-b71f-832c3684d28c'
FWPM_LAYER_IPFORWARD_V6_DISCARD = '31524a5d-1dfe-472f-bb93-518ee945d8a2'
FWPM_LAYER_INBOUND_TRANSPORT_V4 = '5926dfc8-e3cf-4426-a283-dc393f5d0f9d'
FWPM_LAYER_INBOUND_TRANSPORT_V4_DISCARD = 'ac4a9833-f69d-4648-b261-6dc84835ef39'
FWPM_LAYER_INBOUND_TRANSPORT_V6 = '634a869f-fc23-4b90-b0c1-bf620a36ae6f'
FWPM_LAYER_INBOUND_TRANSPORT_V6_DISCARD = '2a6ff955-3b2b-49d2-9848-ad9d72dcaab7'
FWPM_LAYER_OUTBOUND_TRANSPORT_V4 = '09e61aea-d214-46e2-9b21-b26b0b2f28c8'
FWPM_LAYER_OUTBOUND_TRANSPORT_V4_DISCARD = 'c5f10551-bdb0-43d7-a313-50e211f4d68a'
FWPM_LAYER_OUTBOUND_TRANSPORT_V6 = 'e1735bde-013f-4655-b351-a49e15762df0'
FWPM_LAYER_OUTBOUND_TRANSPORT_V6_DISCARD = 'f433df69-ccbd-482e-b9b2-57165658c3b3'
FWPM_LAYER_STREAM_V4 = '3b89653c-c170-49e4-b1cd-e0eeeee19a3e'
FWPM_LAYER_STREAM_V4_DISCARD = '25c4c2c2-25ff-4352-82f9-c54a4a4726dc'
FWPM_LAYER_STREAM_V6 = '47c9137a-7ec4-46b3-b6e4-48e926b1eda4'
FWPM_LAYER_STREAM_V6_DISCARD = '10a59fc7-b628-4c41-9eb8-cf37d55103cf'
FWPM_LAYER_DATAGRAM_DATA_V4 = '3d08bf4e-45f6-4930-a922-417098e20027'
FWPM_LAYER_DATAGRAM_DATA_V4_DISCARD = '18e330c6-7248-4e52-aaab-472ed67704fd'
FWPM_LAYER_DATAGRAM_DATA_V6 = 'fa45fe2f-3cba-4427-87fc-57b9a4b10d00'
FWPM_LAYER_DATAGRAM_DATA_V6_DISCARD = '09d1dfe1-9b86-4a42-be9d-8c315b92a5d0'
FWPM_LAYER_INBOUND_ICMP_ERROR_V4 = '61499990-3cb6-4e84-b950-53b94b6964f3'
FWPM_LAYER_INBOUND_ICMP_ERROR_V4_DISCARD = 'a6b17075-ebaf-4053-a4e7-213c8121ede5'
FWPM_LAYER_INBOUND_ICMP_ERROR_V6 = '65f9bdff-3b2d-4e5d-b8c6-c720651fe898'
FWPM_LAYER_INBOUND_ICMP_ERROR_V6_DISCARD = 'a6e7ccc0-08fb-468d-a472-9771d5595e09'
FWPM_LAYER_OUTBOUND_ICMP_ERROR_V4 = '41390100-564c-4b32-bc1d-718048354d7c'
FWPM_LAYER_OUTBOUND_ICMP_ERROR_V4_DISCARD = 'b3598d36-0561-4588-a6bf-e955e3f6264b'
FWPM_LAYER_OUTBOUND_ICMP_ERROR_V6 = '7fb03b60-7b8d-4dfa-badd-980176fc4e12'
FWPM_LAYER_OUTBOUND_ICMP_ERROR_V6_DISCARD = '65f2e647-8d0c-4f47-b19b-33a4d3f1357c'
FWPM_LAYER_ALE_RESOURCE_ASSIGNMENT_V4 = '1247d66d-0b60-4a15-8d44-7155d0f53a0c'
FWPM_LAYER_ALE_RESOURCE_ASSIGNMENT_V4_DISCARD = '0b5812a2-c3ff-4eca-b88d-c79e20ac6322'
FWPM_LAYER_ALE_RESOURCE_ASSIGNMENT_V6 = '55a650e1-5f0a-4eca-a653-88f53b26aa8c'
FWPM_LAYER_ALE_RESOURCE_ASSIGNMENT_V6_DISCARD = 'cbc998bb-c51f-4c1a-bb4f-9775fcacab2f'
FWPM_LAYER_ALE_AUTH_LISTEN_V4 = '88bb5dad-76d7-4227-9c71-df0a3ed7be7e'
FWPM_LAYER_ALE_AUTH_LISTEN_V4_DISCARD = '371dfada-9f26-45fd-b4eb-c29eb212893f'
FWPM_LAYER_ALE_AUTH_LISTEN_V6 = '7ac9de24-17dd-4814-b4bd-a9fbc95a321b'
FWPM_LAYER_ALE_AUTH_LISTEN_V6_DISCARD = '60703b07-63c8-48e9-ada3-12b1af40a617'
FWPM_LAYER_ALE_AUTH_RECV_ACCEPT_V4 = 'e1cd9fe7-f4b5-4273-96c0-592e487b8650'
FWPM_LAYER_ALE_AUTH_RECV_ACCEPT_V4_DISCARD = '9eeaa99b-bd22-4227-919f-0073c63357b1'
FWPM_LAYER_ALE_AUTH_RECV_ACCEPT_V6 = 'a3b42c97-9f04-4672-b87e-cee9c483257f'
FWPM_LAYER_ALE_AUTH_RECV_ACCEPT_V6_DISCARD = '89455b97-dbe1-453f-a224-13da895af396'
FWPM_LAYER_ALE_AUTH_CONNECT_V4 = 'c38d57d1-05a7-4c33-904f-7fbceee60e82'
FWPM_LAYER_ALE_AUTH_CONNECT_V4_DISCARD = 'd632a801-f5ba-4ad6-96e3-607017d9836a'
FWPM_LAYER_ALE_AUTH_CONNECT_V6 = '4a72393b-319f-44bc-84c3-ba54dcb3b6b4'
FWPM_LAYER_ALE_AUTH_CONNECT_V6_DISCARD = 'c97bc3b8-c9a3-4e33-8695-8e17aad4de09'
FWPM_LAYER_ALE_FLOW_ESTABLISHED_V4 = 'af80470a-5596-4c13-9992-539e6fe57967'
FWPM_LAYER_ALE_FLOW_ESTABLISHED_V4_DISCARD = '146ae4a9-a1d2-4d43-a31a-4c42682b8e4f'
FWPM_LAYER_ALE_FLOW_ESTABLISHED_V6 = '7021d2b3-dfa4-406e-afeb-6afaf7e70efd'
FWPM_LAYER_ALE_FLOW_ESTABLISHED_V6_DISCARD = '46928636-bbca-4b76-941d-0fa7f5d7d372'
FWPM_LAYER_INBOUND_MAC_FRAME_ETHERNET = 'effb7edb-0055-4f9a-a231-4ff8131ad191'
FWPM_LAYER_OUTBOUND_MAC_FRAME_ETHERNET = '694673bc-d6db-4870-adee-0acdbdb7f4b2'
FWPM_LAYER_INBOUND_MAC_FRAME_NATIVE = 'd4220bd3-62ce-4f08-ae88-b56e8526df50'
FWPM_LAYER_OUTBOUND_MAC_FRAME_NATIVE = '94c44912-9d6f-4ebf-b995-05ab8a088d1b'
FWPM_LAYER_INGRESS_VSWITCH_ETHERNET = '7d98577a-9a87-41ec-9718-7cf589c9f32d'
FWPM_LAYER_EGRESS_VSWITCH_ETHERNET = '86c872b0-76fa-4b79-93a4-0750530ae292'
FWPM_LAYER_INGRESS_VSWITCH_TRANSPORT_V4 = 'b2696ff6-774f-4554-9f7d-3da3945f8e85'
FWPM_LAYER_INGRESS_VSWITCH_TRANSPORT_V6 = '5ee314fc-7d8a-47f4-b7e3-291a36da4e12'
FWPM_LAYER_EGRESS_VSWITCH_TRANSPORT_V4 = 'b92350b6-91f0-46b6-bdc4-871dfd4a7c98'
FWPM_LAYER_EGRESS_VSWITCH_TRANSPORT_V6 = '1b2def23-1881-40bd-82f4-4254e63141cb'
FWPM_LAYER_INBOUND_TRANSPORT_FAST = 'e41d2719-05c7-40f0-8983-ea8d17bbc2f6'
FWPM_LAYER_OUTBOUND_TRANSPORT_FAST = '13ed4388-a070-4815-9935-7a9be6408b78'
FWPM_LAYER_INBOUND_MAC_FRAME_NATIVE_FAST = '853aaa8e-2b78-4d24-a804-36db08b29711'
FWPM_LAYER_OUTBOUND_MAC_FRAME_NATIVE_FAST = '470df946-c962-486f-9446-8293cbc75eb8'
FWPM_LAYER_IPSEC_KM_DEMUX_V4 = 'f02b1526-a459-4a51-b9e3-759de52b9d2c'
FWPM_LAYER_IPSEC_KM_DEMUX_V6 = '2f755cf6-2fd4-4e88-b3e4-a91bca495235'
FWPM_LAYER_IPSEC_V4 = 'eda65c74-610d-4bc5-948f-3c4f89556867'
FWPM_LAYER_IPSEC_V6 = '13c48442-8d87-4261-9a29-59d2abc348b4'
FWPM_LAYER_IKEEXT_V4 = 'b14b7bdb-dbbd-473e-bed4-8b4708d4f270'
FWPM_LAYER_IKEEXT_V6 = 'b64786b3-f687-4eb9-89d2-8ef32acdabe2'
FWPM_LAYER_RPC_UM = '75a89dda-95e4-40f3-adc7-7688a9c847e1'
FWPM_LAYER_RPC_EPMAP = '9247bc61-eb07-47ee-872c-bfd78bfd1616'
FWPM_LAYER_RPC_EP_ADD = '618dffc7-c450-4943-95db-99b4c16a55d4'
FWPM_LAYER_RPC_PROXY_CONN = '94a4b50b-ba5c-4f27-907a-229fac0c2a7a'
FWPM_LAYER_RPC_PROXY_IF = 'f8a38615-e12c-41ac-98df-121ad981aade'
FWPM_LAYER_KM_AUTHORIZATION = '4aa226e9-9020-45fb-956a-c0249d841195'
FWPM_LAYER_NAME_RESOLUTION_CACHE_V4 = '0c2aa681-905b-4ccd-a467-4dd811d07b7b'
FWPM_LAYER_NAME_RESOLUTION_CACHE_V6 = '92d592fa-6b01-434a-9dea-d1e96ea97da9'
FWPM_LAYER_ALE_RESOURCE_RELEASE_V4 = '74365cce-ccb0-401a-bfc1-b89934ad7e15'
FWPM_LAYER_ALE_RESOURCE_RELEASE_V6 = 'f4e5ce80-edcc-4e13-8a2f-b91454bb057b'
FWPM_LAYER_ALE_ENDPOINT_CLOSURE_V4 = 'b4766427-e2a2-467a-bd7e-dbcd1bd85a09'
FWPM_LAYER_ALE_ENDPOINT_CLOSURE_V6 = 'bb536ccd-4755-4ba9-9ff7-f9edf8699c7b'
FWPM_LAYER_ALE_CONNECT_REDIRECT_V4 = 'c6e63c8c-b784-4562-aa7d-0a67cfcaf9a3'
FWPM_LAYER_ALE_CONNECT_REDIRECT_V6 = '587e54a7-8046-42ba-a0aa-b716250fc7fd'
FWPM_LAYER_ALE_BIND_REDIRECT_V4 = '66978cad-c704-42ac-86ac-7c1a231bd253'
FWPM_LAYER_ALE_BIND_REDIRECT_V6 = 'bef02c9c-606b-4536-8c26-1c2fc7b631d4'
FWPM_LAYER_STREAM_PACKET_V4 = 'af52d8ec-cb2d-44e5-ad92-f8dc38d2eb29'
FWPM_LAYER_STREAM_PACKET_V6 = '779a8ca3-f099-468f-b5d4-83535c461c02'
FWPM_LAYER_INBOUND_RESERVED2 = 'f4fb8d55-c076-46d8-a2c7-6a4c722ca4ed'
FWPM_SUBLAYER_RPC_AUDIT = '758c84f4-fb48-4de9-9aeb-3ed9551ab1fd'
FWPM_SUBLAYER_IPSEC_TUNNEL = '83f299ed-9ff4-4967-aff4-c309f4dab827'
FWPM_SUBLAYER_UNIVERSAL = 'eebecc03-ced4-4380-819a-2734397b2b74'
FWPM_SUBLAYER_LIPS = '1b75c0ce-ff60-4711-a70f-b4958cc3b2d0'
FWPM_SUBLAYER_SECURE_SOCKET = '15a66e17-3f3c-4f7b-aa6c-812aa613dd82'
FWPM_SUBLAYER_TCP_CHIMNEY_OFFLOAD = '337608b9-b7d5-4d5f-82f9-3618618bc058'
FWPM_SUBLAYER_INSPECTION = '877519e1-e6a9-41a5-81b4-8c4f118e4a60'
FWPM_SUBLAYER_TEREDO = 'ba69dc66-5176-4979-9c89-26a7b46a8327'
FWPM_SUBLAYER_IPSEC_FORWARD_OUTBOUND_TUNNEL = 'a5082e73-8f71-4559-8a9a-101cea04ef87'
FWPM_SUBLAYER_IPSEC_DOSP = 'e076d572-5d3d-48ef-802b-909eddb098bd'
FWPM_SUBLAYER_TCP_TEMPLATES = '24421dcf-0ac5-4caa-9e14-50f6e3636af0'
FWPM_SUBLAYER_IPSEC_SECURITY_REALM = '37a57701-5884-4964-92b8-3e704688b0ad'
FWPM_SUBLAYER_MPSSVC_WSH = 'b3cdd441-af90-41ba-a745-7c6008ff2300'
FWPM_SUBLAYER_MPSSVC_WF = 'b3cdd441-af90-41ba-a745-7c6008ff2301'
FWPM_SUBLAYER_MPSSVC_QUARANTINE = 'b3cdd441-af90-41ba-a745-7c6008ff2302'
FWPM_SUBLAYER_MPSSVC_EDP = '09a47e38-fa97-471b-b123-18bcd7e65071'
FWPM_SUBLAYER_MPSSVC_TENANT_RESTRICTIONS = '1ec6c7e1-fdd9-478a-b55f-ff8ba1d2c17d'
FWPM_CONDITION_INTERFACE_MAC_ADDRESS = 'f6e63dce-1f4b-4c6b-b6ef-1165e71f8ee7'
FWPM_CONDITION_MAC_LOCAL_ADDRESS = 'd999e981-7948-4c83-b742-c84e3b678f8f'
FWPM_CONDITION_MAC_REMOTE_ADDRESS = '408f2ed4-3a70-4b4d-92a6-415ac20e2f12'
FWPM_CONDITION_ETHER_TYPE = 'fd08948d-a219-4d52-bb98-1a5540ee7b4e'
FWPM_CONDITION_VLAN_ID = '938eab21-3618-4e64-9ca5-2141ebda1ca2'
FWPM_CONDITION_VSWITCH_TENANT_NETWORK_ID = 'dc04843c-79e6-4e44-a025-65b9bb0f9f94'
FWPM_CONDITION_NDIS_PORT = 'db7bb42b-2dac-4cd4-a59a-e0bdce1e6834'
FWPM_CONDITION_NDIS_MEDIA_TYPE = 'cb31cef1-791d-473b-89d1-61c5984304a0'
FWPM_CONDITION_NDIS_PHYSICAL_MEDIA_TYPE = '34c79823-c229-44f2-b83c-74020882ae77'
FWPM_CONDITION_L2_FLAGS = '7bc43cbf-37ba-45f1-b74a-82ff518eeb10'
FWPM_CONDITION_MAC_LOCAL_ADDRESS_TYPE = 'cc31355c-3073-4ffb-a14f-79415cb1ead1'
FWPM_CONDITION_MAC_REMOTE_ADDRESS_TYPE = '027fedb4-f1c1-4030-b564-ee777fd867ea'
FWPM_CONDITION_ALE_PACKAGE_ID = '71bc78fa-f17c-4997-a602-6abb261f351c'
FWPM_CONDITION_MAC_SOURCE_ADDRESS = '7b795451-f1f6-4d05-b7cb-21779d802336'
FWPM_CONDITION_MAC_DESTINATION_ADDRESS = '04ea2a93-858c-4027-b613-b43180c7859e'
FWPM_CONDITION_MAC_SOURCE_ADDRESS_TYPE = '5c1b72e4-299e-4437-a298-bc3f014b3dc2'
FWPM_CONDITION_MAC_DESTINATION_ADDRESS_TYPE = 'ae052932-ef42-4e99-b129-f3b3139e34f7'
FWPM_CONDITION_IP_SOURCE_PORT = 'a6afef91-3df4-4730-a214-f5426aebf821'
FWPM_CONDITION_IP_DESTINATION_PORT = 'ce6def45-60fb-4a7b-a304-af30a117000e'
FWPM_CONDITION_VSWITCH_ID = 'c4a414ba-437b-4de6-9946-d99c1b95b312'
FWPM_CONDITION_VSWITCH_NETWORK_TYPE = '11d48b4b-e77a-40b4-9155-392c906c2608'
FWPM_CONDITION_VSWITCH_SOURCE_INTERFACE_ID = '7f4ef24b-b2c1-4938-ba33-a1ecbed512ba'
FWPM_CONDITION_VSWITCH_DESTINATION_INTERFACE_ID = '8ed48be4-c926-49f6-a4f6-ef3030e3fc16'
FWPM_CONDITION_VSWITCH_SOURCE_VM_ID = '9c2a9ec2-9fc6-42bc-bdd8-406d4da0be64'
FWPM_CONDITION_VSWITCH_DESTINATION_VM_ID = '6106aace-4de1-4c84-9671-3637f8bcf731'
FWPM_CONDITION_VSWITCH_SOURCE_INTERFACE_TYPE = 'e6b040a2-edaf-4c36-908b-f2f58ae43807'
FWPM_CONDITION_VSWITCH_DESTINATION_INTERFACE_TYPE = 'fa9b3f06-2f1a-4c57-9e68-a7098b28dbfe'
FWPM_CONDITION_ALE_SECURITY_ATTRIBUTE_FQBN_VALUE = '37a57699-5883-4963-92b8-3e704688b0ad'
FWPM_CONDITION_IPSEC_SECURITY_REALM_ID = '37a57700-5884-4964-92b8-3e704688b0ad'
FWPM_CONDITION_ALE_EFFECTIVE_NAME = 'b1277b9a-b781-40fc-9671-e5f1b989f34e'
FWPM_CONDITION_IP_LOCAL_ADDRESS = 'd9ee00de-c1ef-4617-bfe3-ffd8f5a08957'
FWPM_CONDITION_IP_REMOTE_ADDRESS = 'b235ae9a-1d64-49b8-a44c-5ff3d9095045'
FWPM_CONDITION_IP_SOURCE_ADDRESS = 'ae96897e-2e94-4bc9-b313-b27ee80e574d'
FWPM_CONDITION_IP_DESTINATION_ADDRESS = '2d79133b-b390-45c6-8699-acaceaafed33'
FWPM_CONDITION_IP_LOCAL_ADDRESS_TYPE = '6ec7f6c4-376b-45d7-9e9c-d337cedcd237'
FWPM_CONDITION_IP_DESTINATION_ADDRESS_TYPE = '1ec1b7c9-4eea-4f5e-b9ef-76beaaaf17ee'
FWPM_CONDITION_IP_NEXTHOP_ADDRESS = 'eabe448a-a711-4d64-85b7-3f76b65299c7'
FWPM_CONDITION_IP_LOCAL_INTERFACE = '4cd62a49-59c3-4969-b7f3-bda5d32890a4'
FWPM_CONDITION_IP_ARRIVAL_INTERFACE = '618a9b6d-386b-4136-ad6e-b51587cfb1cd'
FWPM_CONDITION_ARRIVAL_INTERFACE_TYPE = '89f990de-e798-4e6d-ab76-7c9558292e6f'
FWPM_CONDITION_ARRIVAL_TUNNEL_TYPE = '511166dc-7a8c-4aa7-b533-95ab59fb0340'
FWPM_CONDITION_ARRIVAL_INTERFACE_INDEX = 'cc088db3-1792-4a71-b0f9-037d21cd828b'
FWPM_CONDITION_NEXTHOP_SUB_INTERFACE_INDEX = 'ef8a6122-0577-45a7-9aaf-825fbeb4fb95'
FWPM_CONDITION_IP_NEXTHOP_INTERFACE = '93ae8f5b-7f6f-4719-98c8-14e97429ef04'
FWPM_CONDITION_NEXTHOP_INTERFACE_TYPE = '97537c6c-d9a3-4767-a381-e942675cd920'
FWPM_CONDITION_NEXTHOP_TUNNEL_TYPE = '72b1a111-987b-4720-99dd-c7c576fa2d4c'
FWPM_CONDITION_NEXTHOP_INTERFACE_INDEX = '138e6888-7ab8-4d65-9ee8-0591bcf6a494'
FWPM_CONDITION_ORIGINAL_PROFILE_ID = '46ea1551-2255-492b-8019-aabeee349f40'
FWPM_CONDITION_CURRENT_PROFILE_ID = 'ab3033c9-c0e3-4759-937d-5758c65d4ae3'
FWPM_CONDITION_LOCAL_INTERFACE_PROFILE_ID = '4ebf7562-9f18-4d06-9941-a7a625744d71'
FWPM_CONDITION_ARRIVAL_INTERFACE_PROFILE_ID = 'cdfe6aab-c083-4142-8679-c08f95329c61'
FWPM_CONDITION_NEXTHOP_INTERFACE_PROFILE_ID = 'd7ff9a56-cdaa-472b-84db-d23963c1d1bf'
FWPM_CONDITION_REAUTHORIZE_REASON = '11205e8c-11ae-457a-8a44-477026dd764a'
FWPM_CONDITION_ORIGINAL_ICMP_TYPE = '076dfdbe-c56c-4f72-ae8a-2cfe7e5c8286'
FWPM_CONDITION_IP_PHYSICAL_ARRIVAL_INTERFACE = 'da50d5c8-fa0d-4c89-b032-6e62136d1e96'
FWPM_CONDITION_IP_PHYSICAL_NEXTHOP_INTERFACE = 'f09bd5ce-5150-48be-b098-c25152fb1f92'
FWPM_CONDITION_INTERFACE_QUARANTINE_EPOCH = 'cce68d5e-053b-43a8-9a6f-33384c28e4f6'
FWPM_CONDITION_INTERFACE_TYPE = 'daf8cd14-e09e-4c93-a5ae-c5c13b73ffca'
FWPM_CONDITION_TUNNEL_TYPE = '77a40437-8779-4868-a261-f5a902f1c0cd'
FWPM_CONDITION_IP_FORWARD_INTERFACE = '1076b8a5-6323-4c5e-9810-e8d3fc9e6136'
FWPM_CONDITION_IP_PROTOCOL = '3971ef2b-623e-4f9a-8cb1-6e79b806b9a7'
FWPM_CONDITION_IP_LOCAL_PORT = '0c1ba1af-5765-453f-af22-a8f791ac775b'
FWPM_CONDITION_IP_REMOTE_PORT = 'c35a604d-d22b-4e1a-91b4-68f674ee674b'
FWPM_CONDITION_EMBEDDED_LOCAL_ADDRESS_TYPE = '4672a468-8a0a-4202-abb4-849e92e66809'
FWPM_CONDITION_EMBEDDED_REMOTE_ADDRESS = '77ee4b39-3273-4671-b63b-ab6feb66eeb6'
FWPM_CONDITION_EMBEDDED_PROTOCOL = '07784107-a29e-4c7b-9ec7-29c44afafdbc'
FWPM_CONDITION_EMBEDDED_LOCAL_PORT = 'bfca394d-acdb-484e-b8e6-2aff79757345'
FWPM_CONDITION_EMBEDDED_REMOTE_PORT = 'cae4d6a1-2968-40ed-a4ce-547160dda88d'
FWPM_CONDITION_FLAGS = '632ce23b-5167-435c-86d7-e903684aa80c'
FWPM_CONDITION_DIRECTION = '8784c146-ca97-44d6-9fd1-19fb1840cbf7'
FWPM_CONDITION_INTERFACE_INDEX = '667fd755-d695-434a-8af5-d3835a1259bc'
FWPM_CONDITION_SUB_INTERFACE_INDEX = '0cd42473-d621-4be3-ae8c-72a348d283e1'
FWPM_CONDITION_SOURCE_INTERFACE_INDEX = '2311334d-c92d-45bf-9496-edf447820e2d'
FWPM_CONDITION_SOURCE_SUB_INTERFACE_INDEX = '055edd9d-acd2-4361-8dab-f9525d97662f'
FWPM_CONDITION_DESTINATION_INTERFACE_INDEX = '35cf6522-4139-45ee-a0d5-67b80949d879'
FWPM_CONDITION_DESTINATION_SUB_INTERFACE_INDEX = '2b7d4399-d4c7-4738-a2f5-e994b43da388'
FWPM_CONDITION_ALE_APP_ID = 'd78e1e87-8644-4ea5-9437-d809ecefc971'
FWPM_CONDITION_ALE_ORIGINAL_APP_ID = '0e6cd086-e1fb-4212-842f-8a9f993fb3f6'
FWPM_CONDITION_ALE_USER_ID = 'af043a0a-b34d-4f86-979c-c90371af6e66'
FWPM_CONDITION_ALE_REMOTE_USER_ID = 'f63073b7-0189-4ab0-95a4-6123cbfab862'
FWPM_CONDITION_ALE_REMOTE_MACHINE_ID = '1aa47f51-7f93-4508-a271-81abb00c9cab'
FWPM_CONDITION_ALE_PROMISCUOUS_MODE = '1c974776-7182-46e9-afd3-b02910e30334'
FWPM_CONDITION_ALE_SIO_FIREWALL_SYSTEM_PORT = 'b9f4e088-cb98-4efb-a2c7-ad07332643db'
FWPM_CONDITION_ALE_REAUTH_REASON = 'b482d227-1979-4a98-8044-18bbe6237542'
FWPM_CONDITION_ALE_NAP_CONTEXT = '46275a9d-c03f-4d77-b784-1c57f4d02753'
FWPM_CONDITION_KM_AUTH_NAP_CONTEXT = '35d0ea0e-15ca-492b-900e-97fd46352cce'
FWPM_CONDITION_REMOTE_USER_TOKEN = '9bf0ee66-06c9-41b9-84da-288cb43af51f'
FWPM_CONDITION_RPC_IF_UUID = '7c9c7d9f-0075-4d35-a0d1-8311c4cf6af1'
FWPM_CONDITION_RPC_IF_VERSION = 'eabfd9b7-1262-4a2e-adaa-5f96f6fe326d'
FWPM_CONDITION_RPC_IF_FLAG = '238a8a32-3199-467d-871c-272621ab3896'
FWPM_CONDITION_DCOM_APP_ID = 'ff2e7b4d-3112-4770-b636-4d24ae3a6af2'
FWPM_CONDITION_IMAGE_NAME = 'd024de4d-deaa-4317-9c85-e40ef6e140c3'
FWPM_CONDITION_RPC_PROTOCOL = '2717bc74-3a35-4ce7-b7ef-c838fabdec45'
FWPM_CONDITION_RPC_AUTH_TYPE = 'daba74ab-0d67-43e7-986e-75b84f82f594'
FWPM_CONDITION_RPC_AUTH_LEVEL = 'e5a0aed5-59ac-46ea-be05-a5f05ecf446e'
FWPM_CONDITION_SEC_ENCRYPT_ALGORITHM = '0d306ef0-e974-4f74-b5c7-591b0da7d562'
FWPM_CONDITION_SEC_KEY_SIZE = '4772183b-ccf8-4aeb-bce1-c6c6161c8fe4'
FWPM_CONDITION_IP_LOCAL_ADDRESS_V4 = '03a629cb-6e52-49f8-9c41-5709633c09cf'
FWPM_CONDITION_IP_LOCAL_ADDRESS_V6 = '2381be84-7524-45b3-a05b-1e637d9c7a6a'
FWPM_CONDITION_PIPE = '1bd0741d-e3df-4e24-8634-762046eef6eb'
FWPM_CONDITION_IP_REMOTE_ADDRESS_V4 = '1febb610-3bcc-45e1-bc36-2e067e2cb186'
FWPM_CONDITION_IP_REMOTE_ADDRESS_V6 = '246e1d8c-8bee-4018-9b98-31d4582f3361'
FWPM_CONDITION_PROCESS_WITH_RPC_IF_UUID = 'e31180a8-bbbd-4d14-a65e-7157b06233bb'
FWPM_CONDITION_RPC_EP_VALUE = 'dccea0b9-0886-4360-9c6a-ab043a24fba9'
FWPM_CONDITION_RPC_EP_FLAGS = '218b814a-0a39-49b8-8e71-c20c39c7dd2e'
FWPM_CONDITION_CLIENT_TOKEN = 'c228fc1e-403a-4478-be05-c9baa4c05ace'
FWPM_CONDITION_RPC_SERVER_NAME = 'b605a225-c3b3-48c7-9833-7aefa9527546'
FWPM_CONDITION_RPC_SERVER_PORT = '8090f645-9ad5-4e3b-9f9f-8023ca097909'
FWPM_CONDITION_RPC_PROXY_AUTH_TYPE = '40953fe2-8565-4759-8488-1771b4b4b5db'
FWPM_CONDITION_CLIENT_CERT_KEY_LENGTH = 'a3ec00c7-05f4-4df7-91f2-5f60d91ff443'
FWPM_CONDITION_CLIENT_CERT_OID = 'c491ad5e-f882-4283-b916-436b103ff4ad'
FWPM_CONDITION_NET_EVENT_TYPE = '206e9996-490e-40cf-b831-b38641eb6fcb'
FWPM_CONDITION_PEER_NAME = '9b539082-eb90-4186-a6cc-de5b63235016'
FWPM_CONDITION_REMOTE_ID = 'f68166fd-0682-4c89-b8f5-86436c7ef9b7'
FWPM_CONDITION_AUTHENTICATION_TYPE = 'eb458cd5-da7b-4ef9-8d43-7b0a840332f2'
FWPM_CONDITION_KM_TYPE = 'ff0f5f49-0ceb-481b-8638-1479791f3f2c'
FWPM_CONDITION_KM_MODE = 'feef4582-ef8f-4f7b-858b-9077d122de47'
FWPM_CONDITION_IPSEC_POLICY_KEY = 'ad37dee3-722f-45cc-a4e3-068048124452'
FWPM_CONDITION_QM_MODE = 'f64fc6d1-f9cb-43d2-8a5f-e13bc894f265'
FWPM_CONDITION_COMPARTMENT_ID = '35a791ab-04ac-4ff2-a6bb-da6cfac71806'
FWPM_CONDITION_RESERVED0 = '678f4deb-45af-4882-93fe-19d4729d9834'
FWPM_CONDITION_RESERVED1 = 'd818f827-5c69-48eb-bf80-d86b17755f97'
FWPM_CONDITION_RESERVED2 = '53d4123d-e15b-4e84-b7a8-dce16f7b62d9'
FWPM_CONDITION_RESERVED3 = '7f6e8ca3-6606-4932-97c7-e1f20710af3b'
FWPM_CONDITION_RESERVED4 = '5f58e642-b937-495e-a94b-f6b051a49250'
FWPM_CONDITION_RESERVED5 = '9ba8f6cd-f77c-43e6-8847-11939dc5db5a'
FWPM_CONDITION_RESERVED6 = 'f13d84bd-59d5-44c4-8817-5ecdae1805bd'
FWPM_CONDITION_RESERVED7 = '65a0f930-45dd-4983-aa33-efc7b611af08'
FWPM_CONDITION_RESERVED8 = '4f424974-0c12-4816-9b47-9a547db39a32'
FWPM_CONDITION_RESERVED9 = 'ce78e10f-13ff-4c70-8643-36ad1879afa3'
FWPM_CONDITION_RESERVED10 = 'b979e282-d621-4c8c-b184-b105a61c36ce'
FWPM_CONDITION_RESERVED11 = '2d62ee4d-023d-411f-9582-43acbb795975'
FWPM_CONDITION_RESERVED12 = 'a3677c32-7e35-4ddc-93da-e8c33fc923c7'
FWPM_CONDITION_RESERVED13 = '335a3e90-84aa-42f5-9e6f-59309536a44c'
FWPM_CONDITION_RESERVED14 = '30e44da2-2f1a-4116-a559-f907de83604a'
FWPM_CONDITION_RESERVED15 = 'bab8340f-afe0-43d1-80d8-5ca456962de3'
FWPM_PROVIDER_IKEEXT = '10ad9216-ccde-456c-8b16-e9f04e60a90b'
FWPM_PROVIDER_IPSEC_DOSP_CONFIG = '3c6c05a9-c05c-4bb9-8338-2327814ce8bf'
FWPM_PROVIDER_TCP_CHIMNEY_OFFLOAD = '896aa19e-9a34-4bcb-ae79-beb9127c84b9'
FWPM_PROVIDER_TCP_TEMPLATES = '76cfcd30-3394-432d-bed3-441ae50e63c3'
FWPM_PROVIDER_MPSSVC_WSH = '4b153735-1049-4480-aab4-d1b9bdc03710'
FWPM_PROVIDER_MPSSVC_WF = 'decc16ca-3f33-4346-be1e-8fb4ae0f3d62'
FWPM_PROVIDER_MPSSVC_EDP = 'a90296f7-46b8-4457-8f84-b05e05d3c622'
FWPM_PROVIDER_MPSSVC_TENANT_RESTRICTIONS = 'd0718ff9-44da-4f50-9dc2-c963a4247613'
FWPM_CALLOUT_IPSEC_INBOUND_TRANSPORT_V4 = '5132900d-5e84-4b5f-80e4-01741e81ff10'
FWPM_CALLOUT_IPSEC_INBOUND_TRANSPORT_V6 = '49d3ac92-2a6c-4dcf-955f-1c3be009dd99'
FWPM_CALLOUT_IPSEC_OUTBOUND_TRANSPORT_V4 = '4b46bf0a-4523-4e57-aa38-a87987c910d9'
FWPM_CALLOUT_IPSEC_OUTBOUND_TRANSPORT_V6 = '38d87722-ad83-4f11-a91f-df0fb077225b'
FWPM_CALLOUT_IPSEC_INBOUND_TUNNEL_V4 = '191a8a46-0bf8-46cf-b045-4b45dfa6a324'
FWPM_CALLOUT_IPSEC_INBOUND_TUNNEL_V6 = '80c342e3-1e53-4d6f-9b44-03df5aeee154'
FWPM_CALLOUT_IPSEC_OUTBOUND_TUNNEL_V4 = '70a4196c-835b-4fb0-98e8-075f4d977d46'
FWPM_CALLOUT_IPSEC_OUTBOUND_TUNNEL_V6 = 'f1835363-a6a5-4e62-b180-23db789d8da6'
FWPM_CALLOUT_IPSEC_FORWARD_INBOUND_TUNNEL_V4 = '28829633-c4f0-4e66-873f-844db2a899c7'
FWPM_CALLOUT_IPSEC_FORWARD_INBOUND_TUNNEL_V6 = 'af50bec2-c686-429a-884d-b74443e7b0b4'
FWPM_CALLOUT_IPSEC_FORWARD_OUTBOUND_TUNNEL_V4 = 'fb532136-15cb-440b-937c-1717ca320c40'
FWPM_CALLOUT_IPSEC_FORWARD_OUTBOUND_TUNNEL_V6 = 'dae640cc-e021-4bee-9eb6-a48b275c8c1d'
FWPM_CALLOUT_IPSEC_INBOUND_INITIATE_SECURE_V4 = '7dff309b-ba7d-4aba-91aa-ae5c6640c944'
FWPM_CALLOUT_IPSEC_INBOUND_INITIATE_SECURE_V6 = 'a9a0d6d9-c58c-474e-8aeb-3cfe99d6d53d'
FWPM_CALLOUT_IPSEC_INBOUND_TUNNEL_ALE_ACCEPT_V4 = '3df6e7de-fd20-48f2-9f26-f854444cba79'
FWPM_CALLOUT_IPSEC_INBOUND_TUNNEL_ALE_ACCEPT_V6 = 'a1e392d3-72ac-47bb-87a7-0122c69434ab'
FWPM_CALLOUT_IPSEC_ALE_CONNECT_V4 = '6ac141fc-f75d-4203-b9c8-48e6149c2712'
FWPM_CALLOUT_IPSEC_ALE_CONNECT_V6 = '4c0dda05-e31f-4666-90b0-b3dfad34129a'
FWPM_CALLOUT_IPSEC_DOSP_FORWARD_V6 = '6d08a342-db9e-4fbe-9ed2-57374ce89f79'
FWPM_CALLOUT_IPSEC_DOSP_FORWARD_V4 = '2fcb56ec-cd37-4b4f-b108-62c2b1850a0c'
FWPM_CALLOUT_WFP_TRANSPORT_LAYER_V4_SILENT_DROP = 'eda08606-2494-4d78-89bc-67837c03b969'
FWPM_CALLOUT_WFP_TRANSPORT_LAYER_V6_SILENT_DROP = '8693cc74-a075-4156-b476-9286eece814e'
FWPM_CALLOUT_TCP_CHIMNEY_CONNECT_LAYER_V4 = 'f3e10ab3-2c25-4279-ac36-c30fc181bec4'
FWPM_CALLOUT_TCP_CHIMNEY_CONNECT_LAYER_V6 = '39e22085-a341-42fc-a279-aec94e689c56'
FWPM_CALLOUT_TCP_CHIMNEY_ACCEPT_LAYER_V4 = 'e183ecb2-3a7f-4b54-8ad9-76050ed880ca'
FWPM_CALLOUT_TCP_CHIMNEY_ACCEPT_LAYER_V6 = '0378cf41-bf98-4603-81f2-7f12586079f6'
FWPM_CALLOUT_SET_OPTIONS_AUTH_CONNECT_LAYER_V4 = 'bc582280-1677-41e9-94ab-c2fcb15c2eeb'
FWPM_CALLOUT_SET_OPTIONS_AUTH_CONNECT_LAYER_V6 = '98e5373c-b884-490f-b65f-2f6a4a575195'
FWPM_CALLOUT_SET_OPTIONS_AUTH_RECV_ACCEPT_LAYER_V4 = '2d55f008-0c01-4f92-b26e-a08a94569b8d'
FWPM_CALLOUT_SET_OPTIONS_AUTH_RECV_ACCEPT_LAYER_V6 = '63018537-f281-4dc4-83d3-8dec18b7ade2'
FWPM_CALLOUT_RESERVED_AUTH_CONNECT_LAYER_V4 = '288b524d-0566-4e19-b612-8f441a2e5949'
FWPM_CALLOUT_RESERVED_AUTH_CONNECT_LAYER_V6 = '00b84b92-2b5e-4b71-ab0e-aaca43e387e6'
FWPM_CALLOUT_TEREDO_ALE_RESOURCE_ASSIGNMENT_V6 = '31b95392-066e-42a2-b7db-92f8acdd56f9'
FWPM_CALLOUT_EDGE_TRAVERSAL_ALE_RESOURCE_ASSIGNMENT_V4 = '079b1010-f1c5-4fcd-ae05-da41107abd0b'
FWPM_CALLOUT_TEREDO_ALE_LISTEN_V6 = '81a434e7-f60c-4378-bab8-c625a30f0197'
FWPM_CALLOUT_EDGE_TRAVERSAL_ALE_LISTEN_V4 = '33486ab5-6d5e-4e65-a00b-a7afed0ba9a1'
FWPM_CALLOUT_TCP_TEMPLATES_CONNECT_LAYER_V4 = '215a0b39-4b7e-4eda-8ce4-179679df6224'
FWPM_CALLOUT_TCP_TEMPLATES_CONNECT_LAYER_V6 = '838b37a1-5c12-4d34-8b38-078728b2d25c'
FWPM_CALLOUT_TCP_TEMPLATES_ACCEPT_LAYER_V4 = '2f23f5d0-40c4-4c41-a254-46d8dba8957c'
FWPM_CALLOUT_TCP_TEMPLATES_ACCEPT_LAYER_V6 = 'b25152f0-991c-4f53-bbe7-d24b45fe632c'
FWPM_CALLOUT_POLICY_SILENT_MODE_AUTH_CONNECT_LAYER_V4 = '5fbfc31d-a51c-44dc-acb6-0624a030a700'
FWPM_CALLOUT_POLICY_SILENT_MODE_AUTH_CONNECT_LAYER_V6 = '5fbfc31d-a51c-44dc-acb6-0624a030a701'
FWPM_CALLOUT_POLICY_SILENT_MODE_AUTH_RECV_ACCEPT_LAYER_V4 = '5fbfc31d-a51c-44dc-acb6-0624a030a702'
FWPM_CALLOUT_POLICY_SILENT_MODE_AUTH_RECV_ACCEPT_LAYER_V6 = '5fbfc31d-a51c-44dc-acb6-0624a030a703'
FWPM_CALLOUT_HTTP_TEMPLATE_SSL_HANDSHAKE = 'b3423249-8d09-4858-9210-95c7fda8e30f'
FWPM_CALLOUT_BUILT_IN_RESERVED_1 = '779719a4-e695-47b6-a199-7999fec9163b'
FWPM_CALLOUT_BUILT_IN_RESERVED_2 = 'ef9661b6-7c5e-48fd-a130-96678ceacc41'
FWPM_CALLOUT_BUILT_IN_RESERVED_3 = '18729c7a-2f62-4be0-966f-974b21b86df1'
FWPM_CALLOUT_BUILT_IN_RESERVED_4 = '6c3fb801-daff-40e9-91e6-f7ff7e52f7d9'
FWPM_PROVIDER_CONTEXT_SECURE_SOCKET_AUTHIP = 'b25ea800-0d02-46ed-92bd-7fa84bb73e9d'
FWPM_PROVIDER_CONTEXT_SECURE_SOCKET_IPSEC = '8c2d4144-f8e0-42c0-94ce-7ccfc63b2f9b'
FWPM_KEYING_MODULE_IKE = 'a9bbf787-82a8-45bb-a400-5d7e5952c7a9'
FWPM_KEYING_MODULE_AUTHIP = '11e3dae0-dd26-4590-857d-ab4b28d1a095'
FWPM_KEYING_MODULE_IKEV2 = '041792cc-8f07-419d-a394-716968cb1647'
FWPM_AUTO_WEIGHT_BITS = 60
FWPM_WEIGHT_RANGE_IPSEC = 0
FWPM_WEIGHT_RANGE_IKE_EXEMPTIONS = 12
FWPM_ACTRL_ADD = 1
FWPM_ACTRL_ADD_LINK = 2
FWPM_ACTRL_BEGIN_READ_TXN = 4
FWPM_ACTRL_BEGIN_WRITE_TXN = 8
FWPM_ACTRL_CLASSIFY = 16
FWPM_ACTRL_ENUM = 32
FWPM_ACTRL_OPEN = 64
FWPM_ACTRL_READ = 128
FWPM_ACTRL_READ_STATS = 256
FWPM_ACTRL_SUBSCRIBE = 512
FWPM_ACTRL_WRITE = 1024
FWPM_TXN_READ_ONLY = 1
FWPM_TUNNEL_FLAG_POINT_TO_POINT = 1
FWPM_TUNNEL_FLAG_ENABLE_VIRTUAL_IF_TUNNELING = 2
FWPM_TUNNEL_FLAG_RESERVED0 = 4
FWPS_METADATA_FIELD_DISCARD_REASON = 1
FWPS_METADATA_FIELD_FLOW_HANDLE = 2
FWPS_METADATA_FIELD_IP_HEADER_SIZE = 4
FWPS_METADATA_FIELD_PROCESS_PATH = 8
FWPS_METADATA_FIELD_TOKEN = 16
FWPS_METADATA_FIELD_PROCESS_ID = 32
FWPS_METADATA_FIELD_SYSTEM_FLAGS = 64
FWPS_METADATA_FIELD_RESERVED = 128
FWPS_METADATA_FIELD_SOURCE_INTERFACE_INDEX = 256
FWPS_METADATA_FIELD_DESTINATION_INTERFACE_INDEX = 512
FWPS_METADATA_FIELD_TRANSPORT_HEADER_SIZE = 1024
FWPS_METADATA_FIELD_COMPARTMENT_ID = 2048
FWPS_METADATA_FIELD_FRAGMENT_DATA = 4096
FWPS_METADATA_FIELD_PATH_MTU = 8192
FWPS_METADATA_FIELD_COMPLETION_HANDLE = 16384
FWPS_METADATA_FIELD_TRANSPORT_ENDPOINT_HANDLE = 32768
FWPS_METADATA_FIELD_TRANSPORT_CONTROL_DATA = 65536
FWPS_METADATA_FIELD_REMOTE_SCOPE_ID = 131072
FWPS_METADATA_FIELD_PACKET_DIRECTION = 262144
FWPS_METADATA_FIELD_PACKET_SYSTEM_CRITICAL = 524288
FWPS_METADATA_FIELD_FORWARD_LAYER_OUTBOUND_PASS_THRU = 1048576
FWPS_METADATA_FIELD_FORWARD_LAYER_INBOUND_PASS_THRU = 2097152
FWPS_METADATA_FIELD_ALE_CLASSIFY_REQUIRED = 4194304
FWPS_METADATA_FIELD_TRANSPORT_HEADER_INCLUDE_HEADER = 8388608
FWPS_METADATA_FIELD_DESTINATION_PREFIX = 16777216
FWPS_METADATA_FIELD_ETHER_FRAME_LENGTH = 33554432
FWPS_METADATA_FIELD_PARENT_ENDPOINT_HANDLE = 67108864
FWPS_METADATA_FIELD_ICMP_ID_AND_SEQUENCE = 134217728
FWPS_METADATA_FIELD_LOCAL_REDIRECT_TARGET_PID = 268435456
FWPS_METADATA_FIELD_ORIGINAL_DESTINATION = 536870912
FWPS_METADATA_FIELD_REDIRECT_RECORD_HANDLE = 1073741824
FWPS_METADATA_FIELD_SUB_PROCESS_TAG = 2147483648
FWPS_L2_METADATA_FIELD_ETHERNET_MAC_HEADER_SIZE = 1
FWPS_L2_METADATA_FIELD_WIFI_OPERATION_MODE = 2
FWPS_L2_METADATA_FIELD_VSWITCH_SOURCE_PORT_ID = 4
FWPS_L2_METADATA_FIELD_VSWITCH_SOURCE_NIC_INDEX = 8
FWPS_L2_METADATA_FIELD_VSWITCH_PACKET_CONTEXT = 16
FWPS_L2_METADATA_FIELD_VSWITCH_DESTINATION_PORT_ID = 32
FWPS_L2_METADATA_FIELD_RESERVED = 2147483648
IPSEC_SA_BUNDLE_FLAGS = UInt32
IPSEC_SA_BUNDLE_FLAG_ND_SECURE = 1
IPSEC_SA_BUNDLE_FLAG_ND_BOUNDARY = 2
IPSEC_SA_BUNDLE_FLAG_ND_PEER_NAT_BOUNDARY = 4
IPSEC_SA_BUNDLE_FLAG_GUARANTEE_ENCRYPTION = 8
IPSEC_SA_BUNDLE_FLAG_ALLOW_NULL_TARGET_NAME_MATCH = 512
IPSEC_SA_BUNDLE_FLAG_CLEAR_DF_ON_TUNNEL = 1024
IPSEC_SA_BUNDLE_FLAG_ASSUME_UDP_CONTEXT_OUTBOUND = 2048
IPSEC_SA_BUNDLE_FLAG_ND_PEER_BOUNDARY = 4096
IPSEC_SA_BUNDLE_FLAG_SUPPRESS_DUPLICATE_DELETION = 8192
IPSEC_SA_BUNDLE_FLAG_PEER_SUPPORTS_GUARANTEE_ENCRYPTION = 16384
IPSEC_POLICY_FLAG = UInt32
IPSEC_POLICY_FLAG_ND_SECURE = 2
IPSEC_POLICY_FLAG_ND_BOUNDARY = 4
IPSEC_POLICY_FLAG_NAT_ENCAP_ALLOW_PEER_BEHIND_NAT = 16
IPSEC_POLICY_FLAG_NAT_ENCAP_ALLOW_GENERAL_NAT_TRAVERSAL = 32
IPSEC_POLICY_FLAG_DONT_NEGOTIATE_SECOND_LIFETIME = 64
IPSEC_POLICY_FLAG_DONT_NEGOTIATE_BYTE_LIFETIME = 128
IPSEC_POLICY_FLAG_CLEAR_DF_ON_TUNNEL = 8
IPSEC_POLICY_FLAG_ENABLE_V6_IN_V4_TUNNELING = 256
IPSEC_POLICY_FLAG_ENABLE_SERVER_ADDR_ASSIGNMENT = 512
IPSEC_POLICY_FLAG_TUNNEL_ALLOW_OUTBOUND_CLEAR_CONNECTION = 1024
IPSEC_POLICY_FLAG_TUNNEL_BYPASS_ALREADY_SECURE_CONNECTION = 2048
IPSEC_POLICY_FLAG_TUNNEL_BYPASS_ICMPV6 = 4096
IPSEC_POLICY_FLAG_KEY_MANAGER_ALLOW_DICTATE_KEY = 8192
IKEEXT_CERT_AUTH = UInt32
IKEEXT_CERT_AUTH_FLAG_SSL_ONE_WAY = 1
IKEEXT_CERT_AUTH_ENABLE_CRL_CHECK_STRONG = 4
IKEEXT_CERT_AUTH_DISABLE_SSL_CERT_VALIDATION = 8
IKEEXT_CERT_AUTH_ALLOW_HTTP_CERT_LOOKUP = 16
IKEEXT_CERT_AUTH_URL_CONTAINS_BUNDLE = 32
IKEEXT_PRESHARED_KEY_AUTHENTICATION_FLAGS = UInt32
IKEEXT_PSK_FLAG_LOCAL_AUTH_ONLY = 1
IKEEXT_PSK_FLAG_REMOTE_AUTH_ONLY = 2
IKEEXT_POLICY_FLAG = UInt32
IKEEXT_POLICY_FLAG_DISABLE_DIAGNOSTICS = 1
IKEEXT_POLICY_FLAG_NO_MACHINE_LUID_VERIFY = 2
IKEEXT_POLICY_FLAG_NO_IMPERSONATION_LUID_VERIFY = 4
IKEEXT_POLICY_FLAG_ENABLE_OPTIONAL_DH = 8
FWPM_SUBSCRIPTION_FLAGS = UInt32
FWPM_SUBSCRIPTION_FLAG_NOTIFY_ON_ADD = 1
FWPM_SUBSCRIPTION_FLAG_NOTIFY_ON_DELETE = 2
IKEEXT_CERT_FLAGS = UInt32
IKEEXT_CERT_FLAG_ENABLE_ACCOUNT_MAPPING = 1
IKEEXT_CERT_FLAG_DISABLE_REQUEST_PAYLOAD = 2
IKEEXT_CERT_FLAG_USE_NAP_CERTIFICATE = 4
IKEEXT_CERT_FLAG_INTERMEDIATE_CA = 8
IKEEXT_CERT_FLAG_IGNORE_INIT_CERT_MAP_FAILURE = 16
IKEEXT_CERT_FLAG_PREFER_NAP_CERTIFICATE_OUTBOUND = 32
IKEEXT_CERT_FLAG_SELECT_NAP_CERTIFICATE = 64
IKEEXT_CERT_FLAG_VERIFY_NAP_CERTIFICATE = 128
IKEEXT_CERT_FLAG_FOLLOW_RENEWAL_CERTIFICATE = 256
IPSEC_DOSP_FLAGS = UInt32
IPSEC_DOSP_FLAG_ENABLE_IKEV1 = 1
IPSEC_DOSP_FLAG_ENABLE_IKEV2 = 2
IPSEC_DOSP_FLAG_DISABLE_AUTHIP = 4
IPSEC_DOSP_FLAG_DISABLE_DEFAULT_BLOCK = 8
IPSEC_DOSP_FLAG_FILTER_BLOCK = 16
IPSEC_DOSP_FLAG_FILTER_EXEMPT = 32
IKEEXT_KERBEROS_AUTHENTICATION_FLAGS = UInt32
IKEEXT_KERB_AUTH_DISABLE_INITIATOR_TOKEN_GENERATION = 1
IKEEXT_KERB_AUTH_DONT_ACCEPT_EXPLICIT_CREDENTIALS = 2
IKEEXT_RESERVED_AUTHENTICATION_FLAGS = UInt32
IKEEXT_RESERVED_AUTH_DISABLE_INITIATOR_TOKEN_GENERATION = 1
IKEEXT_EAP_AUTHENTICATION_FLAGS = UInt32
IKEEXT_EAP_FLAG_LOCAL_AUTH_ONLY = 1
IKEEXT_EAP_FLAG_REMOTE_AUTH_ONLY = 2
FWPM_FILTER_FLAGS = UInt32
FWPM_FILTER_FLAG_NONE = 0
FWPM_FILTER_FLAG_PERSISTENT = 1
FWPM_FILTER_FLAG_BOOTTIME = 2
FWPM_FILTER_FLAG_HAS_PROVIDER_CONTEXT = 4
FWPM_FILTER_FLAG_CLEAR_ACTION_RIGHT = 8
FWPM_FILTER_FLAG_PERMIT_IF_CALLOUT_UNREGISTERED = 16
FWPM_FILTER_FLAG_DISABLED = 32
FWPM_FILTER_FLAG_INDEXED = 64
FWP_DIRECTION = Int32
FWP_DIRECTION_OUTBOUND = 0
FWP_DIRECTION_INBOUND = 1
FWP_DIRECTION_MAX = 2
FWP_IP_VERSION = Int32
FWP_IP_VERSION_V4 = 0
FWP_IP_VERSION_V6 = 1
FWP_IP_VERSION_NONE = 2
FWP_IP_VERSION_MAX = 3
FWP_AF = Int32
FWP_AF_INET = 0
FWP_AF_INET6 = 1
FWP_AF_ETHER = 2
FWP_AF_NONE = 3
FWP_ETHER_ENCAP_METHOD = Int32
FWP_ETHER_ENCAP_METHOD_ETHER_V2 = 0
FWP_ETHER_ENCAP_METHOD_SNAP = 1
FWP_ETHER_ENCAP_METHOD_SNAP_W_OUI_ZERO = 3
FWP_DATA_TYPE = Int32
FWP_EMPTY = 0
FWP_UINT8 = 1
FWP_UINT16 = 2
FWP_UINT32 = 3
FWP_UINT64 = 4
FWP_INT8 = 5
FWP_INT16 = 6
FWP_INT32 = 7
FWP_INT64 = 8
FWP_FLOAT = 9
FWP_DOUBLE = 10
FWP_BYTE_ARRAY16_TYPE = 11
FWP_BYTE_BLOB_TYPE = 12
FWP_SID = 13
FWP_SECURITY_DESCRIPTOR_TYPE = 14
FWP_TOKEN_INFORMATION_TYPE = 15
FWP_TOKEN_ACCESS_INFORMATION_TYPE = 16
FWP_UNICODE_STRING_TYPE = 17
FWP_BYTE_ARRAY6_TYPE = 18
FWP_SINGLE_DATA_TYPE_MAX = 255
FWP_V4_ADDR_MASK = 256
FWP_V6_ADDR_MASK = 257
FWP_RANGE_TYPE = 258
FWP_DATA_TYPE_MAX = 259
def _define_FWP_BYTE_ARRAY6_head():
    class FWP_BYTE_ARRAY6(Structure):
        pass
    return FWP_BYTE_ARRAY6
def _define_FWP_BYTE_ARRAY6():
    FWP_BYTE_ARRAY6 = win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_ARRAY6_head
    FWP_BYTE_ARRAY6._fields_ = [
        ("byteArray6", Byte * 6),
    ]
    return FWP_BYTE_ARRAY6
def _define_FWP_BYTE_ARRAY16_head():
    class FWP_BYTE_ARRAY16(Structure):
        pass
    return FWP_BYTE_ARRAY16
def _define_FWP_BYTE_ARRAY16():
    FWP_BYTE_ARRAY16 = win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_ARRAY16_head
    FWP_BYTE_ARRAY16._fields_ = [
        ("byteArray16", Byte * 16),
    ]
    return FWP_BYTE_ARRAY16
def _define_FWP_BYTE_BLOB_head():
    class FWP_BYTE_BLOB(Structure):
        pass
    return FWP_BYTE_BLOB
def _define_FWP_BYTE_BLOB():
    FWP_BYTE_BLOB = win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB_head
    FWP_BYTE_BLOB._fields_ = [
        ("size", UInt32),
        ("data", c_char_p_no),
    ]
    return FWP_BYTE_BLOB
def _define_FWP_TOKEN_INFORMATION_head():
    class FWP_TOKEN_INFORMATION(Structure):
        pass
    return FWP_TOKEN_INFORMATION
def _define_FWP_TOKEN_INFORMATION():
    FWP_TOKEN_INFORMATION = win32more.NetworkManagement.WindowsFilteringPlatform.FWP_TOKEN_INFORMATION_head
    FWP_TOKEN_INFORMATION._fields_ = [
        ("sidCount", UInt32),
        ("sids", POINTER(win32more.Security.SID_AND_ATTRIBUTES_head)),
        ("restrictedSidCount", UInt32),
        ("restrictedSids", POINTER(win32more.Security.SID_AND_ATTRIBUTES_head)),
    ]
    return FWP_TOKEN_INFORMATION
def _define_FWP_VALUE0_head():
    class FWP_VALUE0(Structure):
        pass
    return FWP_VALUE0
def _define_FWP_VALUE0():
    FWP_VALUE0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWP_VALUE0_head
    class FWP_VALUE0__Anonymous_e__Union(Union):
        pass
    FWP_VALUE0__Anonymous_e__Union._fields_ = [
        ("uint8", Byte),
        ("uint16", UInt16),
        ("uint32", UInt32),
        ("uint64", POINTER(UInt64)),
        ("int8", SByte),
        ("int16", Int16),
        ("int32", Int32),
        ("int64", POINTER(Int64)),
        ("float32", Single),
        ("double64", POINTER(Double)),
        ("byteArray16", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_ARRAY16_head)),
        ("byteBlob", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB_head)),
        ("sid", POINTER(win32more.Security.SID_head)),
        ("sd", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB_head)),
        ("tokenInformation", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWP_TOKEN_INFORMATION_head)),
        ("tokenAccessInformation", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB_head)),
        ("unicodeString", win32more.Foundation.PWSTR),
        ("byteArray6", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_ARRAY6_head)),
    ]
    FWP_VALUE0._anonymous_ = [
        'Anonymous',
    ]
    FWP_VALUE0._fields_ = [
        ("type", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_DATA_TYPE),
        ("Anonymous", FWP_VALUE0__Anonymous_e__Union),
    ]
    return FWP_VALUE0
FWP_MATCH_TYPE = Int32
FWP_MATCH_EQUAL = 0
FWP_MATCH_GREATER = 1
FWP_MATCH_LESS = 2
FWP_MATCH_GREATER_OR_EQUAL = 3
FWP_MATCH_LESS_OR_EQUAL = 4
FWP_MATCH_RANGE = 5
FWP_MATCH_FLAGS_ALL_SET = 6
FWP_MATCH_FLAGS_ANY_SET = 7
FWP_MATCH_FLAGS_NONE_SET = 8
FWP_MATCH_EQUAL_CASE_INSENSITIVE = 9
FWP_MATCH_NOT_EQUAL = 10
FWP_MATCH_PREFIX = 11
FWP_MATCH_NOT_PREFIX = 12
FWP_MATCH_TYPE_MAX = 13
def _define_FWP_V4_ADDR_AND_MASK_head():
    class FWP_V4_ADDR_AND_MASK(Structure):
        pass
    return FWP_V4_ADDR_AND_MASK
def _define_FWP_V4_ADDR_AND_MASK():
    FWP_V4_ADDR_AND_MASK = win32more.NetworkManagement.WindowsFilteringPlatform.FWP_V4_ADDR_AND_MASK_head
    FWP_V4_ADDR_AND_MASK._fields_ = [
        ("addr", UInt32),
        ("mask", UInt32),
    ]
    return FWP_V4_ADDR_AND_MASK
def _define_FWP_V6_ADDR_AND_MASK_head():
    class FWP_V6_ADDR_AND_MASK(Structure):
        pass
    return FWP_V6_ADDR_AND_MASK
def _define_FWP_V6_ADDR_AND_MASK():
    FWP_V6_ADDR_AND_MASK = win32more.NetworkManagement.WindowsFilteringPlatform.FWP_V6_ADDR_AND_MASK_head
    FWP_V6_ADDR_AND_MASK._fields_ = [
        ("addr", Byte * 16),
        ("prefixLength", Byte),
    ]
    return FWP_V6_ADDR_AND_MASK
def _define_FWP_RANGE0_head():
    class FWP_RANGE0(Structure):
        pass
    return FWP_RANGE0
def _define_FWP_RANGE0():
    FWP_RANGE0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWP_RANGE0_head
    FWP_RANGE0._fields_ = [
        ("valueLow", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_VALUE0),
        ("valueHigh", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_VALUE0),
    ]
    return FWP_RANGE0
def _define_FWP_CONDITION_VALUE0_head():
    class FWP_CONDITION_VALUE0(Structure):
        pass
    return FWP_CONDITION_VALUE0
def _define_FWP_CONDITION_VALUE0():
    FWP_CONDITION_VALUE0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWP_CONDITION_VALUE0_head
    class FWP_CONDITION_VALUE0__Anonymous_e__Union(Union):
        pass
    FWP_CONDITION_VALUE0__Anonymous_e__Union._fields_ = [
        ("uint8", Byte),
        ("uint16", UInt16),
        ("uint32", UInt32),
        ("uint64", POINTER(UInt64)),
        ("int8", SByte),
        ("int16", Int16),
        ("int32", Int32),
        ("int64", POINTER(Int64)),
        ("float32", Single),
        ("double64", POINTER(Double)),
        ("byteArray16", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_ARRAY16_head)),
        ("byteBlob", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB_head)),
        ("sid", POINTER(win32more.Security.SID_head)),
        ("sd", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB_head)),
        ("tokenInformation", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWP_TOKEN_INFORMATION_head)),
        ("tokenAccessInformation", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB_head)),
        ("unicodeString", win32more.Foundation.PWSTR),
        ("byteArray6", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_ARRAY6_head)),
        ("v4AddrMask", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWP_V4_ADDR_AND_MASK_head)),
        ("v6AddrMask", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWP_V6_ADDR_AND_MASK_head)),
        ("rangeValue", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWP_RANGE0_head)),
    ]
    FWP_CONDITION_VALUE0._anonymous_ = [
        'Anonymous',
    ]
    FWP_CONDITION_VALUE0._fields_ = [
        ("type", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_DATA_TYPE),
        ("Anonymous", FWP_CONDITION_VALUE0__Anonymous_e__Union),
    ]
    return FWP_CONDITION_VALUE0
FWP_CLASSIFY_OPTION_TYPE = Int32
FWP_CLASSIFY_OPTION_MULTICAST_STATE = 0
FWP_CLASSIFY_OPTION_LOOSE_SOURCE_MAPPING = 1
FWP_CLASSIFY_OPTION_UNICAST_LIFETIME = 2
FWP_CLASSIFY_OPTION_MCAST_BCAST_LIFETIME = 3
FWP_CLASSIFY_OPTION_SECURE_SOCKET_SECURITY_FLAGS = 4
FWP_CLASSIFY_OPTION_SECURE_SOCKET_AUTHIP_MM_POLICY_KEY = 5
FWP_CLASSIFY_OPTION_SECURE_SOCKET_AUTHIP_QM_POLICY_KEY = 6
FWP_CLASSIFY_OPTION_LOCAL_ONLY_MAPPING = 7
FWP_CLASSIFY_OPTION_MAX = 8
FWP_VSWITCH_NETWORK_TYPE = Int32
FWP_VSWITCH_NETWORK_TYPE_UNKNOWN = 0
FWP_VSWITCH_NETWORK_TYPE_PRIVATE = 1
FWP_VSWITCH_NETWORK_TYPE_INTERNAL = 2
FWP_VSWITCH_NETWORK_TYPE_EXTERNAL = 3
FWP_FILTER_ENUM_TYPE = Int32
FWP_FILTER_ENUM_FULLY_CONTAINED = 0
FWP_FILTER_ENUM_OVERLAPPING = 1
FWP_FILTER_ENUM_TYPE_MAX = 2
def _define_FWPM_DISPLAY_DATA0_head():
    class FWPM_DISPLAY_DATA0(Structure):
        pass
    return FWPM_DISPLAY_DATA0
def _define_FWPM_DISPLAY_DATA0():
    FWPM_DISPLAY_DATA0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_DISPLAY_DATA0_head
    FWPM_DISPLAY_DATA0._fields_ = [
        ("name", win32more.Foundation.PWSTR),
        ("description", win32more.Foundation.PWSTR),
    ]
    return FWPM_DISPLAY_DATA0
def _define_IPSEC_VIRTUAL_IF_TUNNEL_INFO0_head():
    class IPSEC_VIRTUAL_IF_TUNNEL_INFO0(Structure):
        pass
    return IPSEC_VIRTUAL_IF_TUNNEL_INFO0
def _define_IPSEC_VIRTUAL_IF_TUNNEL_INFO0():
    IPSEC_VIRTUAL_IF_TUNNEL_INFO0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_VIRTUAL_IF_TUNNEL_INFO0_head
    IPSEC_VIRTUAL_IF_TUNNEL_INFO0._fields_ = [
        ("virtualIfTunnelId", UInt64),
        ("trafficSelectorId", UInt64),
    ]
    return IPSEC_VIRTUAL_IF_TUNNEL_INFO0
IKEEXT_KEY_MODULE_TYPE = Int32
IKEEXT_KEY_MODULE_IKE = 0
IKEEXT_KEY_MODULE_AUTHIP = 1
IKEEXT_KEY_MODULE_IKEV2 = 2
IKEEXT_KEY_MODULE_MAX = 3
IKEEXT_AUTHENTICATION_METHOD_TYPE = Int32
IKEEXT_PRESHARED_KEY = 0
IKEEXT_CERTIFICATE = 1
IKEEXT_KERBEROS = 2
IKEEXT_ANONYMOUS = 3
IKEEXT_SSL = 4
IKEEXT_NTLM_V2 = 5
IKEEXT_IPV6_CGA = 6
IKEEXT_CERTIFICATE_ECDSA_P256 = 7
IKEEXT_CERTIFICATE_ECDSA_P384 = 8
IKEEXT_SSL_ECDSA_P256 = 9
IKEEXT_SSL_ECDSA_P384 = 10
IKEEXT_EAP = 11
IKEEXT_RESERVED = 12
IKEEXT_AUTHENTICATION_METHOD_TYPE_MAX = 13
IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE = Int32
IKEEXT_IMPERSONATION_NONE = 0
IKEEXT_IMPERSONATION_SOCKET_PRINCIPAL = 1
IKEEXT_IMPERSONATION_MAX = 2
def _define_IKEEXT_PRESHARED_KEY_AUTHENTICATION0_head():
    class IKEEXT_PRESHARED_KEY_AUTHENTICATION0(Structure):
        pass
    return IKEEXT_PRESHARED_KEY_AUTHENTICATION0
def _define_IKEEXT_PRESHARED_KEY_AUTHENTICATION0():
    IKEEXT_PRESHARED_KEY_AUTHENTICATION0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_PRESHARED_KEY_AUTHENTICATION0_head
    IKEEXT_PRESHARED_KEY_AUTHENTICATION0._fields_ = [
        ("presharedKey", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
    ]
    return IKEEXT_PRESHARED_KEY_AUTHENTICATION0
def _define_IKEEXT_PRESHARED_KEY_AUTHENTICATION1_head():
    class IKEEXT_PRESHARED_KEY_AUTHENTICATION1(Structure):
        pass
    return IKEEXT_PRESHARED_KEY_AUTHENTICATION1
def _define_IKEEXT_PRESHARED_KEY_AUTHENTICATION1():
    IKEEXT_PRESHARED_KEY_AUTHENTICATION1 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_PRESHARED_KEY_AUTHENTICATION1_head
    IKEEXT_PRESHARED_KEY_AUTHENTICATION1._fields_ = [
        ("presharedKey", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
        ("flags", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_PRESHARED_KEY_AUTHENTICATION_FLAGS),
    ]
    return IKEEXT_PRESHARED_KEY_AUTHENTICATION1
def _define_IKEEXT_CERT_ROOT_CONFIG0_head():
    class IKEEXT_CERT_ROOT_CONFIG0(Structure):
        pass
    return IKEEXT_CERT_ROOT_CONFIG0
def _define_IKEEXT_CERT_ROOT_CONFIG0():
    IKEEXT_CERT_ROOT_CONFIG0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_ROOT_CONFIG0_head
    IKEEXT_CERT_ROOT_CONFIG0._fields_ = [
        ("certData", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
        ("flags", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_FLAGS),
    ]
    return IKEEXT_CERT_ROOT_CONFIG0
IKEEXT_CERT_CONFIG_TYPE = Int32
IKEEXT_CERT_CONFIG_EXPLICIT_TRUST_LIST = 0
IKEEXT_CERT_CONFIG_ENTERPRISE_STORE = 1
IKEEXT_CERT_CONFIG_TRUSTED_ROOT_STORE = 2
IKEEXT_CERT_CONFIG_UNSPECIFIED = 3
IKEEXT_CERT_CONFIG_TYPE_MAX = 4
def _define_IKEEXT_CERTIFICATE_AUTHENTICATION0_head():
    class IKEEXT_CERTIFICATE_AUTHENTICATION0(Structure):
        pass
    return IKEEXT_CERTIFICATE_AUTHENTICATION0
def _define_IKEEXT_CERTIFICATE_AUTHENTICATION0():
    IKEEXT_CERTIFICATE_AUTHENTICATION0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_AUTHENTICATION0_head
    class IKEEXT_CERTIFICATE_AUTHENTICATION0__Anonymous2_e__Union(Union):
        pass
    class IKEEXT_CERTIFICATE_AUTHENTICATION0__Anonymous2_e__Union__Anonymous_e__Struct(Structure):
        pass
    IKEEXT_CERTIFICATE_AUTHENTICATION0__Anonymous2_e__Union__Anonymous_e__Struct._fields_ = [
        ("outboundRootArraySize", UInt32),
        ("outboundRootArray", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_ROOT_CONFIG0_head)),
    ]
    IKEEXT_CERTIFICATE_AUTHENTICATION0__Anonymous2_e__Union._anonymous_ = [
        'Anonymous',
    ]
    IKEEXT_CERTIFICATE_AUTHENTICATION0__Anonymous2_e__Union._fields_ = [
        ("Anonymous", IKEEXT_CERTIFICATE_AUTHENTICATION0__Anonymous2_e__Union__Anonymous_e__Struct),
        ("outboundEnterpriseStoreConfig", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_ROOT_CONFIG0_head)),
        ("outboundTrustedRootStoreConfig", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_ROOT_CONFIG0_head)),
    ]
    class IKEEXT_CERTIFICATE_AUTHENTICATION0__Anonymous1_e__Union(Union):
        pass
    class IKEEXT_CERTIFICATE_AUTHENTICATION0__Anonymous1_e__Union__Anonymous_e__Struct(Structure):
        pass
    IKEEXT_CERTIFICATE_AUTHENTICATION0__Anonymous1_e__Union__Anonymous_e__Struct._fields_ = [
        ("inboundRootArraySize", UInt32),
        ("inboundRootArray", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_ROOT_CONFIG0_head)),
    ]
    IKEEXT_CERTIFICATE_AUTHENTICATION0__Anonymous1_e__Union._anonymous_ = [
        'Anonymous',
    ]
    IKEEXT_CERTIFICATE_AUTHENTICATION0__Anonymous1_e__Union._fields_ = [
        ("Anonymous", IKEEXT_CERTIFICATE_AUTHENTICATION0__Anonymous1_e__Union__Anonymous_e__Struct),
        ("inboundEnterpriseStoreConfig", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_ROOT_CONFIG0_head)),
        ("inboundTrustedRootStoreConfig", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_ROOT_CONFIG0_head)),
    ]
    IKEEXT_CERTIFICATE_AUTHENTICATION0._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
    ]
    IKEEXT_CERTIFICATE_AUTHENTICATION0._fields_ = [
        ("inboundConfigType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_CONFIG_TYPE),
        ("Anonymous1", IKEEXT_CERTIFICATE_AUTHENTICATION0__Anonymous1_e__Union),
        ("outboundConfigType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_CONFIG_TYPE),
        ("Anonymous2", IKEEXT_CERTIFICATE_AUTHENTICATION0__Anonymous2_e__Union),
        ("flags", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_AUTH),
    ]
    return IKEEXT_CERTIFICATE_AUTHENTICATION0
def _define_IKEEXT_CERTIFICATE_AUTHENTICATION1_head():
    class IKEEXT_CERTIFICATE_AUTHENTICATION1(Structure):
        pass
    return IKEEXT_CERTIFICATE_AUTHENTICATION1
def _define_IKEEXT_CERTIFICATE_AUTHENTICATION1():
    IKEEXT_CERTIFICATE_AUTHENTICATION1 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_AUTHENTICATION1_head
    class IKEEXT_CERTIFICATE_AUTHENTICATION1__Anonymous2_e__Union(Union):
        pass
    class IKEEXT_CERTIFICATE_AUTHENTICATION1__Anonymous2_e__Union__Anonymous_e__Struct(Structure):
        pass
    IKEEXT_CERTIFICATE_AUTHENTICATION1__Anonymous2_e__Union__Anonymous_e__Struct._fields_ = [
        ("outboundRootArraySize", UInt32),
        ("outboundRootArray", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_ROOT_CONFIG0_head)),
    ]
    IKEEXT_CERTIFICATE_AUTHENTICATION1__Anonymous2_e__Union._anonymous_ = [
        'Anonymous',
    ]
    IKEEXT_CERTIFICATE_AUTHENTICATION1__Anonymous2_e__Union._fields_ = [
        ("Anonymous", IKEEXT_CERTIFICATE_AUTHENTICATION1__Anonymous2_e__Union__Anonymous_e__Struct),
        ("outboundEnterpriseStoreConfig", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_ROOT_CONFIG0_head)),
        ("outboundTrustedRootStoreConfig", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_ROOT_CONFIG0_head)),
    ]
    class IKEEXT_CERTIFICATE_AUTHENTICATION1__Anonymous1_e__Union(Union):
        pass
    class IKEEXT_CERTIFICATE_AUTHENTICATION1__Anonymous1_e__Union__Anonymous_e__Struct(Structure):
        pass
    IKEEXT_CERTIFICATE_AUTHENTICATION1__Anonymous1_e__Union__Anonymous_e__Struct._fields_ = [
        ("inboundRootArraySize", UInt32),
        ("inboundRootArray", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_ROOT_CONFIG0_head)),
    ]
    IKEEXT_CERTIFICATE_AUTHENTICATION1__Anonymous1_e__Union._anonymous_ = [
        'Anonymous',
    ]
    IKEEXT_CERTIFICATE_AUTHENTICATION1__Anonymous1_e__Union._fields_ = [
        ("Anonymous", IKEEXT_CERTIFICATE_AUTHENTICATION1__Anonymous1_e__Union__Anonymous_e__Struct),
        ("inboundEnterpriseStoreConfig", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_ROOT_CONFIG0_head)),
        ("inboundTrustedRootStoreConfig", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_ROOT_CONFIG0_head)),
    ]
    IKEEXT_CERTIFICATE_AUTHENTICATION1._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
    ]
    IKEEXT_CERTIFICATE_AUTHENTICATION1._fields_ = [
        ("inboundConfigType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_CONFIG_TYPE),
        ("Anonymous1", IKEEXT_CERTIFICATE_AUTHENTICATION1__Anonymous1_e__Union),
        ("outboundConfigType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_CONFIG_TYPE),
        ("Anonymous2", IKEEXT_CERTIFICATE_AUTHENTICATION1__Anonymous2_e__Union),
        ("flags", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_AUTH),
        ("localCertLocationUrl", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
    ]
    return IKEEXT_CERTIFICATE_AUTHENTICATION1
IKEEXT_CERT_CRITERIA_NAME_TYPE = Int32
IKEEXT_CERT_CRITERIA_DNS = 0
IKEEXT_CERT_CRITERIA_UPN = 1
IKEEXT_CERT_CRITERIA_RFC822 = 2
IKEEXT_CERT_CRITERIA_CN = 3
IKEEXT_CERT_CRITERIA_OU = 4
IKEEXT_CERT_CRITERIA_O = 5
IKEEXT_CERT_CRITERIA_DC = 6
IKEEXT_CERT_CRITERIA_NAME_TYPE_MAX = 7
def _define_IKEEXT_CERT_EKUS0_head():
    class IKEEXT_CERT_EKUS0(Structure):
        pass
    return IKEEXT_CERT_EKUS0
def _define_IKEEXT_CERT_EKUS0():
    IKEEXT_CERT_EKUS0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_EKUS0_head
    IKEEXT_CERT_EKUS0._fields_ = [
        ("numEku", UInt32),
        ("eku", POINTER(win32more.Foundation.PSTR)),
    ]
    return IKEEXT_CERT_EKUS0
def _define_IKEEXT_CERT_NAME0_head():
    class IKEEXT_CERT_NAME0(Structure):
        pass
    return IKEEXT_CERT_NAME0
def _define_IKEEXT_CERT_NAME0():
    IKEEXT_CERT_NAME0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_NAME0_head
    IKEEXT_CERT_NAME0._fields_ = [
        ("nameType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_CRITERIA_NAME_TYPE),
        ("certName", win32more.Foundation.PWSTR),
    ]
    return IKEEXT_CERT_NAME0
def _define_IKEEXT_CERTIFICATE_CRITERIA0_head():
    class IKEEXT_CERTIFICATE_CRITERIA0(Structure):
        pass
    return IKEEXT_CERTIFICATE_CRITERIA0
def _define_IKEEXT_CERTIFICATE_CRITERIA0():
    IKEEXT_CERTIFICATE_CRITERIA0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_CRITERIA0_head
    IKEEXT_CERTIFICATE_CRITERIA0._fields_ = [
        ("certData", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
        ("certHash", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
        ("eku", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_EKUS0_head)),
        ("name", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_NAME0_head)),
        ("flags", UInt32),
    ]
    return IKEEXT_CERTIFICATE_CRITERIA0
def _define_IKEEXT_CERTIFICATE_AUTHENTICATION2_head():
    class IKEEXT_CERTIFICATE_AUTHENTICATION2(Structure):
        pass
    return IKEEXT_CERTIFICATE_AUTHENTICATION2
def _define_IKEEXT_CERTIFICATE_AUTHENTICATION2():
    IKEEXT_CERTIFICATE_AUTHENTICATION2 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_AUTHENTICATION2_head
    class IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous2_e__Union(Union):
        pass
    class IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous2_e__Union__Anonymous2_e__Struct(Structure):
        pass
    IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous2_e__Union__Anonymous2_e__Struct._fields_ = [
        ("outboundEnterpriseStoreArraySize", UInt32),
        ("outboundEnterpriseStoreCriteria", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_CRITERIA0_head)),
    ]
    class IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous2_e__Union__Anonymous3_e__Struct(Structure):
        pass
    IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous2_e__Union__Anonymous3_e__Struct._fields_ = [
        ("outboundRootStoreArraySize", UInt32),
        ("outboundTrustedRootStoreCriteria", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_CRITERIA0_head)),
    ]
    class IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous2_e__Union__Anonymous1_e__Struct(Structure):
        pass
    IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous2_e__Union__Anonymous1_e__Struct._fields_ = [
        ("outboundRootArraySize", UInt32),
        ("outboundRootCriteria", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_CRITERIA0_head)),
    ]
    IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous2_e__Union._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
        'Anonymous3',
    ]
    IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous2_e__Union._fields_ = [
        ("Anonymous1", IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous2_e__Union__Anonymous1_e__Struct),
        ("Anonymous2", IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous2_e__Union__Anonymous2_e__Struct),
        ("Anonymous3", IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous2_e__Union__Anonymous3_e__Struct),
    ]
    class IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous1_e__Union(Union):
        pass
    class IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous1_e__Union__Anonymous3_e__Struct(Structure):
        pass
    IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous1_e__Union__Anonymous3_e__Struct._fields_ = [
        ("inboundRootStoreArraySize", UInt32),
        ("inboundTrustedRootStoreCriteria", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_CRITERIA0_head)),
    ]
    class IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous1_e__Union__Anonymous1_e__Struct(Structure):
        pass
    IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous1_e__Union__Anonymous1_e__Struct._fields_ = [
        ("inboundRootArraySize", UInt32),
        ("inboundRootCriteria", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_CRITERIA0_head)),
    ]
    class IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous1_e__Union__Anonymous2_e__Struct(Structure):
        pass
    IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous1_e__Union__Anonymous2_e__Struct._fields_ = [
        ("inboundEnterpriseStoreArraySize", UInt32),
        ("inboundEnterpriseStoreCriteria", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_CRITERIA0_head)),
    ]
    IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous1_e__Union._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
        'Anonymous3',
    ]
    IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous1_e__Union._fields_ = [
        ("Anonymous1", IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous1_e__Union__Anonymous1_e__Struct),
        ("Anonymous2", IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous1_e__Union__Anonymous2_e__Struct),
        ("Anonymous3", IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous1_e__Union__Anonymous3_e__Struct),
    ]
    IKEEXT_CERTIFICATE_AUTHENTICATION2._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
    ]
    IKEEXT_CERTIFICATE_AUTHENTICATION2._fields_ = [
        ("inboundConfigType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_CONFIG_TYPE),
        ("Anonymous1", IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous1_e__Union),
        ("outboundConfigType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_CONFIG_TYPE),
        ("Anonymous2", IKEEXT_CERTIFICATE_AUTHENTICATION2__Anonymous2_e__Union),
        ("flags", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_AUTH),
        ("localCertLocationUrl", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
    ]
    return IKEEXT_CERTIFICATE_AUTHENTICATION2
def _define_IKEEXT_IPV6_CGA_AUTHENTICATION0_head():
    class IKEEXT_IPV6_CGA_AUTHENTICATION0(Structure):
        pass
    return IKEEXT_IPV6_CGA_AUTHENTICATION0
def _define_IKEEXT_IPV6_CGA_AUTHENTICATION0():
    IKEEXT_IPV6_CGA_AUTHENTICATION0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IPV6_CGA_AUTHENTICATION0_head
    IKEEXT_IPV6_CGA_AUTHENTICATION0._fields_ = [
        ("keyContainerName", win32more.Foundation.PWSTR),
        ("cspName", win32more.Foundation.PWSTR),
        ("cspType", UInt32),
        ("cgaModifier", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_ARRAY16),
        ("cgaCollisionCount", Byte),
    ]
    return IKEEXT_IPV6_CGA_AUTHENTICATION0
def _define_IKEEXT_KERBEROS_AUTHENTICATION0_head():
    class IKEEXT_KERBEROS_AUTHENTICATION0(Structure):
        pass
    return IKEEXT_KERBEROS_AUTHENTICATION0
def _define_IKEEXT_KERBEROS_AUTHENTICATION0():
    IKEEXT_KERBEROS_AUTHENTICATION0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KERBEROS_AUTHENTICATION0_head
    IKEEXT_KERBEROS_AUTHENTICATION0._fields_ = [
        ("flags", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KERBEROS_AUTHENTICATION_FLAGS),
    ]
    return IKEEXT_KERBEROS_AUTHENTICATION0
def _define_IKEEXT_KERBEROS_AUTHENTICATION1_head():
    class IKEEXT_KERBEROS_AUTHENTICATION1(Structure):
        pass
    return IKEEXT_KERBEROS_AUTHENTICATION1
def _define_IKEEXT_KERBEROS_AUTHENTICATION1():
    IKEEXT_KERBEROS_AUTHENTICATION1 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KERBEROS_AUTHENTICATION1_head
    IKEEXT_KERBEROS_AUTHENTICATION1._fields_ = [
        ("flags", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KERBEROS_AUTHENTICATION_FLAGS),
        ("proxyServer", win32more.Foundation.PWSTR),
    ]
    return IKEEXT_KERBEROS_AUTHENTICATION1
def _define_IKEEXT_RESERVED_AUTHENTICATION0_head():
    class IKEEXT_RESERVED_AUTHENTICATION0(Structure):
        pass
    return IKEEXT_RESERVED_AUTHENTICATION0
def _define_IKEEXT_RESERVED_AUTHENTICATION0():
    IKEEXT_RESERVED_AUTHENTICATION0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_RESERVED_AUTHENTICATION0_head
    IKEEXT_RESERVED_AUTHENTICATION0._fields_ = [
        ("flags", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_RESERVED_AUTHENTICATION_FLAGS),
    ]
    return IKEEXT_RESERVED_AUTHENTICATION0
def _define_IKEEXT_NTLM_V2_AUTHENTICATION0_head():
    class IKEEXT_NTLM_V2_AUTHENTICATION0(Structure):
        pass
    return IKEEXT_NTLM_V2_AUTHENTICATION0
def _define_IKEEXT_NTLM_V2_AUTHENTICATION0():
    IKEEXT_NTLM_V2_AUTHENTICATION0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_NTLM_V2_AUTHENTICATION0_head
    IKEEXT_NTLM_V2_AUTHENTICATION0._fields_ = [
        ("flags", UInt32),
    ]
    return IKEEXT_NTLM_V2_AUTHENTICATION0
def _define_IKEEXT_EAP_AUTHENTICATION0_head():
    class IKEEXT_EAP_AUTHENTICATION0(Structure):
        pass
    return IKEEXT_EAP_AUTHENTICATION0
def _define_IKEEXT_EAP_AUTHENTICATION0():
    IKEEXT_EAP_AUTHENTICATION0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_EAP_AUTHENTICATION0_head
    IKEEXT_EAP_AUTHENTICATION0._fields_ = [
        ("flags", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_EAP_AUTHENTICATION_FLAGS),
    ]
    return IKEEXT_EAP_AUTHENTICATION0
def _define_IKEEXT_AUTHENTICATION_METHOD0_head():
    class IKEEXT_AUTHENTICATION_METHOD0(Structure):
        pass
    return IKEEXT_AUTHENTICATION_METHOD0
def _define_IKEEXT_AUTHENTICATION_METHOD0():
    IKEEXT_AUTHENTICATION_METHOD0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD0_head
    class IKEEXT_AUTHENTICATION_METHOD0__Anonymous_e__Union(Union):
        pass
    IKEEXT_AUTHENTICATION_METHOD0__Anonymous_e__Union._fields_ = [
        ("presharedKeyAuthentication", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_PRESHARED_KEY_AUTHENTICATION0),
        ("certificateAuthentication", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_AUTHENTICATION0),
        ("kerberosAuthentication", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KERBEROS_AUTHENTICATION0),
        ("ntlmV2Authentication", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_NTLM_V2_AUTHENTICATION0),
        ("sslAuthentication", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_AUTHENTICATION0),
        ("cgaAuthentication", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IPV6_CGA_AUTHENTICATION0),
    ]
    IKEEXT_AUTHENTICATION_METHOD0._anonymous_ = [
        'Anonymous',
    ]
    IKEEXT_AUTHENTICATION_METHOD0._fields_ = [
        ("authenticationMethodType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD_TYPE),
        ("Anonymous", IKEEXT_AUTHENTICATION_METHOD0__Anonymous_e__Union),
    ]
    return IKEEXT_AUTHENTICATION_METHOD0
def _define_IKEEXT_AUTHENTICATION_METHOD1_head():
    class IKEEXT_AUTHENTICATION_METHOD1(Structure):
        pass
    return IKEEXT_AUTHENTICATION_METHOD1
def _define_IKEEXT_AUTHENTICATION_METHOD1():
    IKEEXT_AUTHENTICATION_METHOD1 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD1_head
    class IKEEXT_AUTHENTICATION_METHOD1__Anonymous_e__Union(Union):
        pass
    IKEEXT_AUTHENTICATION_METHOD1__Anonymous_e__Union._fields_ = [
        ("presharedKeyAuthentication", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_PRESHARED_KEY_AUTHENTICATION1),
        ("certificateAuthentication", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_AUTHENTICATION1),
        ("kerberosAuthentication", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KERBEROS_AUTHENTICATION0),
        ("ntlmV2Authentication", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_NTLM_V2_AUTHENTICATION0),
        ("sslAuthentication", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_AUTHENTICATION1),
        ("cgaAuthentication", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IPV6_CGA_AUTHENTICATION0),
        ("eapAuthentication", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_EAP_AUTHENTICATION0),
    ]
    IKEEXT_AUTHENTICATION_METHOD1._anonymous_ = [
        'Anonymous',
    ]
    IKEEXT_AUTHENTICATION_METHOD1._fields_ = [
        ("authenticationMethodType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD_TYPE),
        ("Anonymous", IKEEXT_AUTHENTICATION_METHOD1__Anonymous_e__Union),
    ]
    return IKEEXT_AUTHENTICATION_METHOD1
def _define_IKEEXT_AUTHENTICATION_METHOD2_head():
    class IKEEXT_AUTHENTICATION_METHOD2(Structure):
        pass
    return IKEEXT_AUTHENTICATION_METHOD2
def _define_IKEEXT_AUTHENTICATION_METHOD2():
    IKEEXT_AUTHENTICATION_METHOD2 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD2_head
    class IKEEXT_AUTHENTICATION_METHOD2__Anonymous_e__Union(Union):
        pass
    IKEEXT_AUTHENTICATION_METHOD2__Anonymous_e__Union._fields_ = [
        ("presharedKeyAuthentication", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_PRESHARED_KEY_AUTHENTICATION1),
        ("certificateAuthentication", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_AUTHENTICATION2),
        ("kerberosAuthentication", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KERBEROS_AUTHENTICATION1),
        ("reservedAuthentication", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_RESERVED_AUTHENTICATION0),
        ("ntlmV2Authentication", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_NTLM_V2_AUTHENTICATION0),
        ("sslAuthentication", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_AUTHENTICATION2),
        ("cgaAuthentication", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IPV6_CGA_AUTHENTICATION0),
        ("eapAuthentication", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_EAP_AUTHENTICATION0),
    ]
    IKEEXT_AUTHENTICATION_METHOD2._anonymous_ = [
        'Anonymous',
    ]
    IKEEXT_AUTHENTICATION_METHOD2._fields_ = [
        ("authenticationMethodType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD_TYPE),
        ("Anonymous", IKEEXT_AUTHENTICATION_METHOD2__Anonymous_e__Union),
    ]
    return IKEEXT_AUTHENTICATION_METHOD2
IKEEXT_CIPHER_TYPE = Int32
IKEEXT_CIPHER_DES = 0
IKEEXT_CIPHER_3DES = 1
IKEEXT_CIPHER_AES_128 = 2
IKEEXT_CIPHER_AES_192 = 3
IKEEXT_CIPHER_AES_256 = 4
IKEEXT_CIPHER_AES_GCM_128_16ICV = 5
IKEEXT_CIPHER_AES_GCM_256_16ICV = 6
IKEEXT_CIPHER_TYPE_MAX = 7
def _define_IKEEXT_CIPHER_ALGORITHM0_head():
    class IKEEXT_CIPHER_ALGORITHM0(Structure):
        pass
    return IKEEXT_CIPHER_ALGORITHM0
def _define_IKEEXT_CIPHER_ALGORITHM0():
    IKEEXT_CIPHER_ALGORITHM0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CIPHER_ALGORITHM0_head
    IKEEXT_CIPHER_ALGORITHM0._fields_ = [
        ("algoIdentifier", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CIPHER_TYPE),
        ("keyLen", UInt32),
        ("rounds", UInt32),
    ]
    return IKEEXT_CIPHER_ALGORITHM0
IKEEXT_INTEGRITY_TYPE = Int32
IKEEXT_INTEGRITY_MD5 = 0
IKEEXT_INTEGRITY_SHA1 = 1
IKEEXT_INTEGRITY_SHA_256 = 2
IKEEXT_INTEGRITY_SHA_384 = 3
IKEEXT_INTEGRITY_TYPE_MAX = 4
def _define_IKEEXT_INTEGRITY_ALGORITHM0_head():
    class IKEEXT_INTEGRITY_ALGORITHM0(Structure):
        pass
    return IKEEXT_INTEGRITY_ALGORITHM0
def _define_IKEEXT_INTEGRITY_ALGORITHM0():
    IKEEXT_INTEGRITY_ALGORITHM0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_INTEGRITY_ALGORITHM0_head
    IKEEXT_INTEGRITY_ALGORITHM0._fields_ = [
        ("algoIdentifier", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_INTEGRITY_TYPE),
    ]
    return IKEEXT_INTEGRITY_ALGORITHM0
IKEEXT_DH_GROUP = Int32
IKEEXT_DH_GROUP_NONE = 0
IKEEXT_DH_GROUP_1 = 1
IKEEXT_DH_GROUP_2 = 2
IKEEXT_DH_GROUP_14 = 3
IKEEXT_DH_GROUP_2048 = 3
IKEEXT_DH_ECP_256 = 4
IKEEXT_DH_ECP_384 = 5
IKEEXT_DH_GROUP_24 = 6
IKEEXT_DH_GROUP_MAX = 7
def _define_IKEEXT_PROPOSAL0_head():
    class IKEEXT_PROPOSAL0(Structure):
        pass
    return IKEEXT_PROPOSAL0
def _define_IKEEXT_PROPOSAL0():
    IKEEXT_PROPOSAL0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_PROPOSAL0_head
    IKEEXT_PROPOSAL0._fields_ = [
        ("cipherAlgorithm", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CIPHER_ALGORITHM0),
        ("integrityAlgorithm", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_INTEGRITY_ALGORITHM0),
        ("maxLifetimeSeconds", UInt32),
        ("dhGroup", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_DH_GROUP),
        ("quickModeLimit", UInt32),
    ]
    return IKEEXT_PROPOSAL0
def _define_IKEEXT_POLICY0_head():
    class IKEEXT_POLICY0(Structure):
        pass
    return IKEEXT_POLICY0
def _define_IKEEXT_POLICY0():
    IKEEXT_POLICY0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_POLICY0_head
    IKEEXT_POLICY0._fields_ = [
        ("softExpirationTime", UInt32),
        ("numAuthenticationMethods", UInt32),
        ("authenticationMethods", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD0_head)),
        ("initiatorImpersonationType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE),
        ("numIkeProposals", UInt32),
        ("ikeProposals", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_PROPOSAL0_head)),
        ("flags", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_POLICY_FLAG),
        ("maxDynamicFilters", UInt32),
    ]
    return IKEEXT_POLICY0
def _define_IKEEXT_POLICY1_head():
    class IKEEXT_POLICY1(Structure):
        pass
    return IKEEXT_POLICY1
def _define_IKEEXT_POLICY1():
    IKEEXT_POLICY1 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_POLICY1_head
    IKEEXT_POLICY1._fields_ = [
        ("softExpirationTime", UInt32),
        ("numAuthenticationMethods", UInt32),
        ("authenticationMethods", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD1_head)),
        ("initiatorImpersonationType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE),
        ("numIkeProposals", UInt32),
        ("ikeProposals", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_PROPOSAL0_head)),
        ("flags", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_POLICY_FLAG),
        ("maxDynamicFilters", UInt32),
        ("retransmitDurationSecs", UInt32),
    ]
    return IKEEXT_POLICY1
def _define_IKEEXT_POLICY2_head():
    class IKEEXT_POLICY2(Structure):
        pass
    return IKEEXT_POLICY2
def _define_IKEEXT_POLICY2():
    IKEEXT_POLICY2 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_POLICY2_head
    IKEEXT_POLICY2._fields_ = [
        ("softExpirationTime", UInt32),
        ("numAuthenticationMethods", UInt32),
        ("authenticationMethods", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD2_head)),
        ("initiatorImpersonationType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE),
        ("numIkeProposals", UInt32),
        ("ikeProposals", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_PROPOSAL0_head)),
        ("flags", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_POLICY_FLAG),
        ("maxDynamicFilters", UInt32),
        ("retransmitDurationSecs", UInt32),
    ]
    return IKEEXT_POLICY2
def _define_IKEEXT_EM_POLICY0_head():
    class IKEEXT_EM_POLICY0(Structure):
        pass
    return IKEEXT_EM_POLICY0
def _define_IKEEXT_EM_POLICY0():
    IKEEXT_EM_POLICY0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_EM_POLICY0_head
    IKEEXT_EM_POLICY0._fields_ = [
        ("numAuthenticationMethods", UInt32),
        ("authenticationMethods", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD0_head)),
        ("initiatorImpersonationType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE),
    ]
    return IKEEXT_EM_POLICY0
def _define_IKEEXT_EM_POLICY1_head():
    class IKEEXT_EM_POLICY1(Structure):
        pass
    return IKEEXT_EM_POLICY1
def _define_IKEEXT_EM_POLICY1():
    IKEEXT_EM_POLICY1 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_EM_POLICY1_head
    IKEEXT_EM_POLICY1._fields_ = [
        ("numAuthenticationMethods", UInt32),
        ("authenticationMethods", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD1_head)),
        ("initiatorImpersonationType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE),
    ]
    return IKEEXT_EM_POLICY1
def _define_IKEEXT_EM_POLICY2_head():
    class IKEEXT_EM_POLICY2(Structure):
        pass
    return IKEEXT_EM_POLICY2
def _define_IKEEXT_EM_POLICY2():
    IKEEXT_EM_POLICY2 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_EM_POLICY2_head
    IKEEXT_EM_POLICY2._fields_ = [
        ("numAuthenticationMethods", UInt32),
        ("authenticationMethods", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD2_head)),
        ("initiatorImpersonationType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE),
    ]
    return IKEEXT_EM_POLICY2
def _define_IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0_head():
    class IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0(Structure):
        pass
    return IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0
def _define_IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0():
    IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0_head
    IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0._fields_ = [
        ("currentActiveMainModes", UInt32),
        ("totalMainModesStarted", UInt32),
        ("totalSuccessfulMainModes", UInt32),
        ("totalFailedMainModes", UInt32),
        ("totalResponderMainModes", UInt32),
        ("currentNewResponderMainModes", UInt32),
        ("currentActiveQuickModes", UInt32),
        ("totalQuickModesStarted", UInt32),
        ("totalSuccessfulQuickModes", UInt32),
        ("totalFailedQuickModes", UInt32),
        ("totalAcquires", UInt32),
        ("totalReinitAcquires", UInt32),
        ("currentActiveExtendedModes", UInt32),
        ("totalExtendedModesStarted", UInt32),
        ("totalSuccessfulExtendedModes", UInt32),
        ("totalFailedExtendedModes", UInt32),
        ("totalImpersonationExtendedModes", UInt32),
        ("totalImpersonationMainModes", UInt32),
    ]
    return IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0
def _define_IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1_head():
    class IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1(Structure):
        pass
    return IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1
def _define_IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1():
    IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1_head
    IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1._fields_ = [
        ("currentActiveMainModes", UInt32),
        ("totalMainModesStarted", UInt32),
        ("totalSuccessfulMainModes", UInt32),
        ("totalFailedMainModes", UInt32),
        ("totalResponderMainModes", UInt32),
        ("currentNewResponderMainModes", UInt32),
        ("currentActiveQuickModes", UInt32),
        ("totalQuickModesStarted", UInt32),
        ("totalSuccessfulQuickModes", UInt32),
        ("totalFailedQuickModes", UInt32),
        ("totalAcquires", UInt32),
        ("totalReinitAcquires", UInt32),
        ("currentActiveExtendedModes", UInt32),
        ("totalExtendedModesStarted", UInt32),
        ("totalSuccessfulExtendedModes", UInt32),
        ("totalFailedExtendedModes", UInt32),
        ("totalImpersonationExtendedModes", UInt32),
        ("totalImpersonationMainModes", UInt32),
    ]
    return IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1
def _define_IKEEXT_KEYMODULE_STATISTICS0_head():
    class IKEEXT_KEYMODULE_STATISTICS0(Structure):
        pass
    return IKEEXT_KEYMODULE_STATISTICS0
def _define_IKEEXT_KEYMODULE_STATISTICS0():
    IKEEXT_KEYMODULE_STATISTICS0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEYMODULE_STATISTICS0_head
    IKEEXT_KEYMODULE_STATISTICS0._fields_ = [
        ("v4Statistics", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0),
        ("v6Statistics", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0),
        ("errorFrequencyTable", UInt32 * 97),
        ("mainModeNegotiationTime", UInt32),
        ("quickModeNegotiationTime", UInt32),
        ("extendedModeNegotiationTime", UInt32),
    ]
    return IKEEXT_KEYMODULE_STATISTICS0
def _define_IKEEXT_KEYMODULE_STATISTICS1_head():
    class IKEEXT_KEYMODULE_STATISTICS1(Structure):
        pass
    return IKEEXT_KEYMODULE_STATISTICS1
def _define_IKEEXT_KEYMODULE_STATISTICS1():
    IKEEXT_KEYMODULE_STATISTICS1 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEYMODULE_STATISTICS1_head
    IKEEXT_KEYMODULE_STATISTICS1._fields_ = [
        ("v4Statistics", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1),
        ("v6Statistics", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1),
        ("errorFrequencyTable", UInt32 * 97),
        ("mainModeNegotiationTime", UInt32),
        ("quickModeNegotiationTime", UInt32),
        ("extendedModeNegotiationTime", UInt32),
    ]
    return IKEEXT_KEYMODULE_STATISTICS1
def _define_IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0_head():
    class IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0(Structure):
        pass
    return IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0
def _define_IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0():
    IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0_head
    IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0._fields_ = [
        ("totalSocketReceiveFailures", UInt32),
        ("totalSocketSendFailures", UInt32),
    ]
    return IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0
def _define_IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1_head():
    class IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1(Structure):
        pass
    return IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1
def _define_IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1():
    IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1_head
    IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1._fields_ = [
        ("totalSocketReceiveFailures", UInt32),
        ("totalSocketSendFailures", UInt32),
    ]
    return IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1
def _define_IKEEXT_COMMON_STATISTICS0_head():
    class IKEEXT_COMMON_STATISTICS0(Structure):
        pass
    return IKEEXT_COMMON_STATISTICS0
def _define_IKEEXT_COMMON_STATISTICS0():
    IKEEXT_COMMON_STATISTICS0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_COMMON_STATISTICS0_head
    IKEEXT_COMMON_STATISTICS0._fields_ = [
        ("v4Statistics", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0),
        ("v6Statistics", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0),
        ("totalPacketsReceived", UInt32),
        ("totalInvalidPacketsReceived", UInt32),
        ("currentQueuedWorkitems", UInt32),
    ]
    return IKEEXT_COMMON_STATISTICS0
def _define_IKEEXT_COMMON_STATISTICS1_head():
    class IKEEXT_COMMON_STATISTICS1(Structure):
        pass
    return IKEEXT_COMMON_STATISTICS1
def _define_IKEEXT_COMMON_STATISTICS1():
    IKEEXT_COMMON_STATISTICS1 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_COMMON_STATISTICS1_head
    IKEEXT_COMMON_STATISTICS1._fields_ = [
        ("v4Statistics", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1),
        ("v6Statistics", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1),
        ("totalPacketsReceived", UInt32),
        ("totalInvalidPacketsReceived", UInt32),
        ("currentQueuedWorkitems", UInt32),
    ]
    return IKEEXT_COMMON_STATISTICS1
def _define_IKEEXT_STATISTICS0_head():
    class IKEEXT_STATISTICS0(Structure):
        pass
    return IKEEXT_STATISTICS0
def _define_IKEEXT_STATISTICS0():
    IKEEXT_STATISTICS0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_STATISTICS0_head
    IKEEXT_STATISTICS0._fields_ = [
        ("ikeStatistics", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEYMODULE_STATISTICS0),
        ("authipStatistics", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEYMODULE_STATISTICS0),
        ("commonStatistics", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_COMMON_STATISTICS0),
    ]
    return IKEEXT_STATISTICS0
def _define_IKEEXT_STATISTICS1_head():
    class IKEEXT_STATISTICS1(Structure):
        pass
    return IKEEXT_STATISTICS1
def _define_IKEEXT_STATISTICS1():
    IKEEXT_STATISTICS1 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_STATISTICS1_head
    IKEEXT_STATISTICS1._fields_ = [
        ("ikeStatistics", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEYMODULE_STATISTICS1),
        ("authipStatistics", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEYMODULE_STATISTICS1),
        ("ikeV2Statistics", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEYMODULE_STATISTICS1),
        ("commonStatistics", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_COMMON_STATISTICS1),
    ]
    return IKEEXT_STATISTICS1
def _define_IKEEXT_TRAFFIC0_head():
    class IKEEXT_TRAFFIC0(Structure):
        pass
    return IKEEXT_TRAFFIC0
def _define_IKEEXT_TRAFFIC0():
    IKEEXT_TRAFFIC0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_TRAFFIC0_head
    class IKEEXT_TRAFFIC0__Anonymous2_e__Union(Union):
        pass
    IKEEXT_TRAFFIC0__Anonymous2_e__Union._fields_ = [
        ("remoteV4Address", UInt32),
        ("remoteV6Address", Byte * 16),
    ]
    class IKEEXT_TRAFFIC0__Anonymous1_e__Union(Union):
        pass
    IKEEXT_TRAFFIC0__Anonymous1_e__Union._fields_ = [
        ("localV4Address", UInt32),
        ("localV6Address", Byte * 16),
    ]
    IKEEXT_TRAFFIC0._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
    ]
    IKEEXT_TRAFFIC0._fields_ = [
        ("ipVersion", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION),
        ("Anonymous1", IKEEXT_TRAFFIC0__Anonymous1_e__Union),
        ("Anonymous2", IKEEXT_TRAFFIC0__Anonymous2_e__Union),
        ("authIpFilterId", UInt64),
    ]
    return IKEEXT_TRAFFIC0
def _define_IKEEXT_COOKIE_PAIR0_head():
    class IKEEXT_COOKIE_PAIR0(Structure):
        pass
    return IKEEXT_COOKIE_PAIR0
def _define_IKEEXT_COOKIE_PAIR0():
    IKEEXT_COOKIE_PAIR0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_COOKIE_PAIR0_head
    IKEEXT_COOKIE_PAIR0._fields_ = [
        ("initiator", UInt64),
        ("responder", UInt64),
    ]
    return IKEEXT_COOKIE_PAIR0
def _define_IKEEXT_CERTIFICATE_CREDENTIAL0_head():
    class IKEEXT_CERTIFICATE_CREDENTIAL0(Structure):
        pass
    return IKEEXT_CERTIFICATE_CREDENTIAL0
def _define_IKEEXT_CERTIFICATE_CREDENTIAL0():
    IKEEXT_CERTIFICATE_CREDENTIAL0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_CREDENTIAL0_head
    IKEEXT_CERTIFICATE_CREDENTIAL0._fields_ = [
        ("subjectName", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
        ("certHash", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
        ("flags", UInt32),
    ]
    return IKEEXT_CERTIFICATE_CREDENTIAL0
def _define_IKEEXT_NAME_CREDENTIAL0_head():
    class IKEEXT_NAME_CREDENTIAL0(Structure):
        pass
    return IKEEXT_NAME_CREDENTIAL0
def _define_IKEEXT_NAME_CREDENTIAL0():
    IKEEXT_NAME_CREDENTIAL0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_NAME_CREDENTIAL0_head
    IKEEXT_NAME_CREDENTIAL0._fields_ = [
        ("principalName", win32more.Foundation.PWSTR),
    ]
    return IKEEXT_NAME_CREDENTIAL0
def _define_IKEEXT_CREDENTIAL0_head():
    class IKEEXT_CREDENTIAL0(Structure):
        pass
    return IKEEXT_CREDENTIAL0
def _define_IKEEXT_CREDENTIAL0():
    IKEEXT_CREDENTIAL0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL0_head
    class IKEEXT_CREDENTIAL0__Anonymous_e__Union(Union):
        pass
    IKEEXT_CREDENTIAL0__Anonymous_e__Union._fields_ = [
        ("presharedKey", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_PRESHARED_KEY_AUTHENTICATION0_head)),
        ("certificate", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_CREDENTIAL0_head)),
        ("name", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_NAME_CREDENTIAL0_head)),
    ]
    IKEEXT_CREDENTIAL0._anonymous_ = [
        'Anonymous',
    ]
    IKEEXT_CREDENTIAL0._fields_ = [
        ("authenticationMethodType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD_TYPE),
        ("impersonationType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE),
        ("Anonymous", IKEEXT_CREDENTIAL0__Anonymous_e__Union),
    ]
    return IKEEXT_CREDENTIAL0
def _define_IKEEXT_CREDENTIAL_PAIR0_head():
    class IKEEXT_CREDENTIAL_PAIR0(Structure):
        pass
    return IKEEXT_CREDENTIAL_PAIR0
def _define_IKEEXT_CREDENTIAL_PAIR0():
    IKEEXT_CREDENTIAL_PAIR0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL_PAIR0_head
    IKEEXT_CREDENTIAL_PAIR0._fields_ = [
        ("localCredentials", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL0),
        ("peerCredentials", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL0),
    ]
    return IKEEXT_CREDENTIAL_PAIR0
def _define_IKEEXT_CREDENTIALS0_head():
    class IKEEXT_CREDENTIALS0(Structure):
        pass
    return IKEEXT_CREDENTIALS0
def _define_IKEEXT_CREDENTIALS0():
    IKEEXT_CREDENTIALS0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIALS0_head
    IKEEXT_CREDENTIALS0._fields_ = [
        ("numCredentials", UInt32),
        ("credentials", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL_PAIR0_head)),
    ]
    return IKEEXT_CREDENTIALS0
def _define_IKEEXT_SA_DETAILS0_head():
    class IKEEXT_SA_DETAILS0(Structure):
        pass
    return IKEEXT_SA_DETAILS0
def _define_IKEEXT_SA_DETAILS0():
    IKEEXT_SA_DETAILS0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_DETAILS0_head
    class IKEEXT_SA_DETAILS0__Anonymous_e__Union(Union):
        pass
    IKEEXT_SA_DETAILS0__Anonymous_e__Union._fields_ = [
        ("v4UdpEncapsulation", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_V4_UDP_ENCAPSULATION0_head)),
    ]
    IKEEXT_SA_DETAILS0._anonymous_ = [
        'Anonymous',
    ]
    IKEEXT_SA_DETAILS0._fields_ = [
        ("saId", UInt64),
        ("keyModuleType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEY_MODULE_TYPE),
        ("ipVersion", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION),
        ("Anonymous", IKEEXT_SA_DETAILS0__Anonymous_e__Union),
        ("ikeTraffic", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_TRAFFIC0),
        ("ikeProposal", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_PROPOSAL0),
        ("cookiePair", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_COOKIE_PAIR0),
        ("ikeCredentials", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIALS0),
        ("ikePolicyKey", Guid),
        ("virtualIfTunnelId", UInt64),
    ]
    return IKEEXT_SA_DETAILS0
def _define_IKEEXT_CERTIFICATE_CREDENTIAL1_head():
    class IKEEXT_CERTIFICATE_CREDENTIAL1(Structure):
        pass
    return IKEEXT_CERTIFICATE_CREDENTIAL1
def _define_IKEEXT_CERTIFICATE_CREDENTIAL1():
    IKEEXT_CERTIFICATE_CREDENTIAL1 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_CREDENTIAL1_head
    IKEEXT_CERTIFICATE_CREDENTIAL1._fields_ = [
        ("subjectName", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
        ("certHash", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
        ("flags", UInt32),
        ("certificate", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
    ]
    return IKEEXT_CERTIFICATE_CREDENTIAL1
def _define_IKEEXT_CREDENTIAL1_head():
    class IKEEXT_CREDENTIAL1(Structure):
        pass
    return IKEEXT_CREDENTIAL1
def _define_IKEEXT_CREDENTIAL1():
    IKEEXT_CREDENTIAL1 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL1_head
    class IKEEXT_CREDENTIAL1__Anonymous_e__Union(Union):
        pass
    IKEEXT_CREDENTIAL1__Anonymous_e__Union._fields_ = [
        ("presharedKey", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_PRESHARED_KEY_AUTHENTICATION1_head)),
        ("certificate", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_CREDENTIAL1_head)),
        ("name", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_NAME_CREDENTIAL0_head)),
    ]
    IKEEXT_CREDENTIAL1._anonymous_ = [
        'Anonymous',
    ]
    IKEEXT_CREDENTIAL1._fields_ = [
        ("authenticationMethodType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD_TYPE),
        ("impersonationType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE),
        ("Anonymous", IKEEXT_CREDENTIAL1__Anonymous_e__Union),
    ]
    return IKEEXT_CREDENTIAL1
def _define_IKEEXT_CREDENTIAL_PAIR1_head():
    class IKEEXT_CREDENTIAL_PAIR1(Structure):
        pass
    return IKEEXT_CREDENTIAL_PAIR1
def _define_IKEEXT_CREDENTIAL_PAIR1():
    IKEEXT_CREDENTIAL_PAIR1 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL_PAIR1_head
    IKEEXT_CREDENTIAL_PAIR1._fields_ = [
        ("localCredentials", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL1),
        ("peerCredentials", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL1),
    ]
    return IKEEXT_CREDENTIAL_PAIR1
def _define_IKEEXT_CREDENTIALS1_head():
    class IKEEXT_CREDENTIALS1(Structure):
        pass
    return IKEEXT_CREDENTIALS1
def _define_IKEEXT_CREDENTIALS1():
    IKEEXT_CREDENTIALS1 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIALS1_head
    IKEEXT_CREDENTIALS1._fields_ = [
        ("numCredentials", UInt32),
        ("credentials", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL_PAIR1_head)),
    ]
    return IKEEXT_CREDENTIALS1
def _define_IKEEXT_SA_DETAILS1_head():
    class IKEEXT_SA_DETAILS1(Structure):
        pass
    return IKEEXT_SA_DETAILS1
def _define_IKEEXT_SA_DETAILS1():
    IKEEXT_SA_DETAILS1 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_DETAILS1_head
    class IKEEXT_SA_DETAILS1__Anonymous_e__Union(Union):
        pass
    IKEEXT_SA_DETAILS1__Anonymous_e__Union._fields_ = [
        ("v4UdpEncapsulation", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_V4_UDP_ENCAPSULATION0_head)),
    ]
    IKEEXT_SA_DETAILS1._anonymous_ = [
        'Anonymous',
    ]
    IKEEXT_SA_DETAILS1._fields_ = [
        ("saId", UInt64),
        ("keyModuleType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEY_MODULE_TYPE),
        ("ipVersion", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION),
        ("Anonymous", IKEEXT_SA_DETAILS1__Anonymous_e__Union),
        ("ikeTraffic", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_TRAFFIC0),
        ("ikeProposal", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_PROPOSAL0),
        ("cookiePair", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_COOKIE_PAIR0),
        ("ikeCredentials", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIALS1),
        ("ikePolicyKey", Guid),
        ("virtualIfTunnelId", UInt64),
        ("correlationKey", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
    ]
    return IKEEXT_SA_DETAILS1
def _define_IKEEXT_CREDENTIAL2_head():
    class IKEEXT_CREDENTIAL2(Structure):
        pass
    return IKEEXT_CREDENTIAL2
def _define_IKEEXT_CREDENTIAL2():
    IKEEXT_CREDENTIAL2 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL2_head
    class IKEEXT_CREDENTIAL2__Anonymous_e__Union(Union):
        pass
    IKEEXT_CREDENTIAL2__Anonymous_e__Union._fields_ = [
        ("presharedKey", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_PRESHARED_KEY_AUTHENTICATION1_head)),
        ("certificate", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_CREDENTIAL1_head)),
        ("name", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_NAME_CREDENTIAL0_head)),
    ]
    IKEEXT_CREDENTIAL2._anonymous_ = [
        'Anonymous',
    ]
    IKEEXT_CREDENTIAL2._fields_ = [
        ("authenticationMethodType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD_TYPE),
        ("impersonationType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE),
        ("Anonymous", IKEEXT_CREDENTIAL2__Anonymous_e__Union),
    ]
    return IKEEXT_CREDENTIAL2
def _define_IKEEXT_CREDENTIAL_PAIR2_head():
    class IKEEXT_CREDENTIAL_PAIR2(Structure):
        pass
    return IKEEXT_CREDENTIAL_PAIR2
def _define_IKEEXT_CREDENTIAL_PAIR2():
    IKEEXT_CREDENTIAL_PAIR2 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL_PAIR2_head
    IKEEXT_CREDENTIAL_PAIR2._fields_ = [
        ("localCredentials", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL2),
        ("peerCredentials", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL2),
    ]
    return IKEEXT_CREDENTIAL_PAIR2
def _define_IKEEXT_CREDENTIALS2_head():
    class IKEEXT_CREDENTIALS2(Structure):
        pass
    return IKEEXT_CREDENTIALS2
def _define_IKEEXT_CREDENTIALS2():
    IKEEXT_CREDENTIALS2 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIALS2_head
    IKEEXT_CREDENTIALS2._fields_ = [
        ("numCredentials", UInt32),
        ("credentials", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL_PAIR2_head)),
    ]
    return IKEEXT_CREDENTIALS2
def _define_IKEEXT_SA_DETAILS2_head():
    class IKEEXT_SA_DETAILS2(Structure):
        pass
    return IKEEXT_SA_DETAILS2
def _define_IKEEXT_SA_DETAILS2():
    IKEEXT_SA_DETAILS2 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_DETAILS2_head
    class IKEEXT_SA_DETAILS2__Anonymous_e__Union(Union):
        pass
    IKEEXT_SA_DETAILS2__Anonymous_e__Union._fields_ = [
        ("v4UdpEncapsulation", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_V4_UDP_ENCAPSULATION0_head)),
    ]
    IKEEXT_SA_DETAILS2._anonymous_ = [
        'Anonymous',
    ]
    IKEEXT_SA_DETAILS2._fields_ = [
        ("saId", UInt64),
        ("keyModuleType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEY_MODULE_TYPE),
        ("ipVersion", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION),
        ("Anonymous", IKEEXT_SA_DETAILS2__Anonymous_e__Union),
        ("ikeTraffic", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_TRAFFIC0),
        ("ikeProposal", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_PROPOSAL0),
        ("cookiePair", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_COOKIE_PAIR0),
        ("ikeCredentials", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIALS2),
        ("ikePolicyKey", Guid),
        ("virtualIfTunnelId", UInt64),
        ("correlationKey", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
    ]
    return IKEEXT_SA_DETAILS2
def _define_IKEEXT_SA_ENUM_TEMPLATE0_head():
    class IKEEXT_SA_ENUM_TEMPLATE0(Structure):
        pass
    return IKEEXT_SA_ENUM_TEMPLATE0
def _define_IKEEXT_SA_ENUM_TEMPLATE0():
    IKEEXT_SA_ENUM_TEMPLATE0 = win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_ENUM_TEMPLATE0_head
    IKEEXT_SA_ENUM_TEMPLATE0._fields_ = [
        ("localSubNet", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_CONDITION_VALUE0),
        ("remoteSubNet", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_CONDITION_VALUE0),
        ("localMainModeCertHash", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
    ]
    return IKEEXT_SA_ENUM_TEMPLATE0
IKEEXT_MM_SA_STATE = Int32
IKEEXT_MM_SA_STATE_NONE = 0
IKEEXT_MM_SA_STATE_SA_SENT = 1
IKEEXT_MM_SA_STATE_SSPI_SENT = 2
IKEEXT_MM_SA_STATE_FINAL = 3
IKEEXT_MM_SA_STATE_FINAL_SENT = 4
IKEEXT_MM_SA_STATE_COMPLETE = 5
IKEEXT_MM_SA_STATE_MAX = 6
IKEEXT_QM_SA_STATE = Int32
IKEEXT_QM_SA_STATE_NONE = 0
IKEEXT_QM_SA_STATE_INITIAL = 1
IKEEXT_QM_SA_STATE_FINAL = 2
IKEEXT_QM_SA_STATE_COMPLETE = 3
IKEEXT_QM_SA_STATE_MAX = 4
IKEEXT_EM_SA_STATE = Int32
IKEEXT_EM_SA_STATE_NONE = 0
IKEEXT_EM_SA_STATE_SENT_ATTS = 1
IKEEXT_EM_SA_STATE_SSPI_SENT = 2
IKEEXT_EM_SA_STATE_AUTH_COMPLETE = 3
IKEEXT_EM_SA_STATE_FINAL = 4
IKEEXT_EM_SA_STATE_COMPLETE = 5
IKEEXT_EM_SA_STATE_MAX = 6
IKEEXT_SA_ROLE = Int32
IKEEXT_SA_ROLE_INITIATOR = 0
IKEEXT_SA_ROLE_RESPONDER = 1
IKEEXT_SA_ROLE_MAX = 2
def _define_IPSEC_SA_LIFETIME0_head():
    class IPSEC_SA_LIFETIME0(Structure):
        pass
    return IPSEC_SA_LIFETIME0
def _define_IPSEC_SA_LIFETIME0():
    IPSEC_SA_LIFETIME0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_LIFETIME0_head
    IPSEC_SA_LIFETIME0._fields_ = [
        ("lifetimeSeconds", UInt32),
        ("lifetimeKilobytes", UInt32),
        ("lifetimePackets", UInt32),
    ]
    return IPSEC_SA_LIFETIME0
IPSEC_TRANSFORM_TYPE = Int32
IPSEC_TRANSFORM_AH = 1
IPSEC_TRANSFORM_ESP_AUTH = 2
IPSEC_TRANSFORM_ESP_CIPHER = 3
IPSEC_TRANSFORM_ESP_AUTH_AND_CIPHER = 4
IPSEC_TRANSFORM_ESP_AUTH_FW = 5
IPSEC_TRANSFORM_TYPE_MAX = 6
IPSEC_AUTH_TYPE = Int32
IPSEC_AUTH_MD5 = 0
IPSEC_AUTH_SHA_1 = 1
IPSEC_AUTH_SHA_256 = 2
IPSEC_AUTH_AES_128 = 3
IPSEC_AUTH_AES_192 = 4
IPSEC_AUTH_AES_256 = 5
IPSEC_AUTH_MAX = 6
def _define_IPSEC_AUTH_TRANSFORM_ID0_head():
    class IPSEC_AUTH_TRANSFORM_ID0(Structure):
        pass
    return IPSEC_AUTH_TRANSFORM_ID0
def _define_IPSEC_AUTH_TRANSFORM_ID0():
    IPSEC_AUTH_TRANSFORM_ID0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_AUTH_TRANSFORM_ID0_head
    IPSEC_AUTH_TRANSFORM_ID0._fields_ = [
        ("authType", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_AUTH_TYPE),
        ("authConfig", Byte),
    ]
    return IPSEC_AUTH_TRANSFORM_ID0
def _define_IPSEC_AUTH_TRANSFORM0_head():
    class IPSEC_AUTH_TRANSFORM0(Structure):
        pass
    return IPSEC_AUTH_TRANSFORM0
def _define_IPSEC_AUTH_TRANSFORM0():
    IPSEC_AUTH_TRANSFORM0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_AUTH_TRANSFORM0_head
    IPSEC_AUTH_TRANSFORM0._fields_ = [
        ("authTransformId", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_AUTH_TRANSFORM_ID0),
        ("cryptoModuleId", POINTER(Guid)),
    ]
    return IPSEC_AUTH_TRANSFORM0
IPSEC_CIPHER_TYPE = Int32
IPSEC_CIPHER_TYPE_DES = 1
IPSEC_CIPHER_TYPE_3DES = 2
IPSEC_CIPHER_TYPE_AES_128 = 3
IPSEC_CIPHER_TYPE_AES_192 = 4
IPSEC_CIPHER_TYPE_AES_256 = 5
IPSEC_CIPHER_TYPE_MAX = 6
def _define_IPSEC_CIPHER_TRANSFORM_ID0_head():
    class IPSEC_CIPHER_TRANSFORM_ID0(Structure):
        pass
    return IPSEC_CIPHER_TRANSFORM_ID0
def _define_IPSEC_CIPHER_TRANSFORM_ID0():
    IPSEC_CIPHER_TRANSFORM_ID0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_CIPHER_TRANSFORM_ID0_head
    IPSEC_CIPHER_TRANSFORM_ID0._fields_ = [
        ("cipherType", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_CIPHER_TYPE),
        ("cipherConfig", Byte),
    ]
    return IPSEC_CIPHER_TRANSFORM_ID0
def _define_IPSEC_CIPHER_TRANSFORM0_head():
    class IPSEC_CIPHER_TRANSFORM0(Structure):
        pass
    return IPSEC_CIPHER_TRANSFORM0
def _define_IPSEC_CIPHER_TRANSFORM0():
    IPSEC_CIPHER_TRANSFORM0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_CIPHER_TRANSFORM0_head
    IPSEC_CIPHER_TRANSFORM0._fields_ = [
        ("cipherTransformId", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_CIPHER_TRANSFORM_ID0),
        ("cryptoModuleId", POINTER(Guid)),
    ]
    return IPSEC_CIPHER_TRANSFORM0
def _define_IPSEC_AUTH_AND_CIPHER_TRANSFORM0_head():
    class IPSEC_AUTH_AND_CIPHER_TRANSFORM0(Structure):
        pass
    return IPSEC_AUTH_AND_CIPHER_TRANSFORM0
def _define_IPSEC_AUTH_AND_CIPHER_TRANSFORM0():
    IPSEC_AUTH_AND_CIPHER_TRANSFORM0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_AUTH_AND_CIPHER_TRANSFORM0_head
    IPSEC_AUTH_AND_CIPHER_TRANSFORM0._fields_ = [
        ("authTransform", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_AUTH_TRANSFORM0),
        ("cipherTransform", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_CIPHER_TRANSFORM0),
    ]
    return IPSEC_AUTH_AND_CIPHER_TRANSFORM0
def _define_IPSEC_SA_TRANSFORM0_head():
    class IPSEC_SA_TRANSFORM0(Structure):
        pass
    return IPSEC_SA_TRANSFORM0
def _define_IPSEC_SA_TRANSFORM0():
    IPSEC_SA_TRANSFORM0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_TRANSFORM0_head
    class IPSEC_SA_TRANSFORM0__Anonymous_e__Union(Union):
        pass
    IPSEC_SA_TRANSFORM0__Anonymous_e__Union._fields_ = [
        ("ahTransform", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_AUTH_TRANSFORM0_head)),
        ("espAuthTransform", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_AUTH_TRANSFORM0_head)),
        ("espCipherTransform", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_CIPHER_TRANSFORM0_head)),
        ("espAuthAndCipherTransform", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_AUTH_AND_CIPHER_TRANSFORM0_head)),
        ("espAuthFwTransform", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_AUTH_TRANSFORM0_head)),
    ]
    IPSEC_SA_TRANSFORM0._anonymous_ = [
        'Anonymous',
    ]
    IPSEC_SA_TRANSFORM0._fields_ = [
        ("ipsecTransformType", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRANSFORM_TYPE),
        ("Anonymous", IPSEC_SA_TRANSFORM0__Anonymous_e__Union),
    ]
    return IPSEC_SA_TRANSFORM0
IPSEC_PFS_GROUP = Int32
IPSEC_PFS_NONE = 0
IPSEC_PFS_1 = 1
IPSEC_PFS_2 = 2
IPSEC_PFS_2048 = 3
IPSEC_PFS_14 = 3
IPSEC_PFS_ECP_256 = 4
IPSEC_PFS_ECP_384 = 5
IPSEC_PFS_MM = 6
IPSEC_PFS_24 = 7
IPSEC_PFS_MAX = 8
def _define_IPSEC_PROPOSAL0_head():
    class IPSEC_PROPOSAL0(Structure):
        pass
    return IPSEC_PROPOSAL0
def _define_IPSEC_PROPOSAL0():
    IPSEC_PROPOSAL0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_PROPOSAL0_head
    IPSEC_PROPOSAL0._fields_ = [
        ("lifetime", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_LIFETIME0),
        ("numSaTransforms", UInt32),
        ("saTransforms", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_TRANSFORM0_head)),
        ("pfsGroup", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_PFS_GROUP),
    ]
    return IPSEC_PROPOSAL0
def _define_IPSEC_SA_IDLE_TIMEOUT0_head():
    class IPSEC_SA_IDLE_TIMEOUT0(Structure):
        pass
    return IPSEC_SA_IDLE_TIMEOUT0
def _define_IPSEC_SA_IDLE_TIMEOUT0():
    IPSEC_SA_IDLE_TIMEOUT0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_IDLE_TIMEOUT0_head
    IPSEC_SA_IDLE_TIMEOUT0._fields_ = [
        ("idleTimeoutSeconds", UInt32),
        ("idleTimeoutSecondsFailOver", UInt32),
    ]
    return IPSEC_SA_IDLE_TIMEOUT0
def _define_IPSEC_TRAFFIC_SELECTOR0__head():
    class IPSEC_TRAFFIC_SELECTOR0_(Structure):
        pass
    return IPSEC_TRAFFIC_SELECTOR0_
def _define_IPSEC_TRAFFIC_SELECTOR0_():
    IPSEC_TRAFFIC_SELECTOR0_ = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_SELECTOR0__head
    class IPSEC_TRAFFIC_SELECTOR0___Anonymous1_e__Union(Union):
        pass
    IPSEC_TRAFFIC_SELECTOR0___Anonymous1_e__Union._fields_ = [
        ("startV4Address", UInt32),
        ("startV6Address", Byte * 16),
    ]
    class IPSEC_TRAFFIC_SELECTOR0___Anonymous2_e__Union(Union):
        pass
    IPSEC_TRAFFIC_SELECTOR0___Anonymous2_e__Union._fields_ = [
        ("endV4Address", UInt32),
        ("endV6Address", Byte * 16),
    ]
    IPSEC_TRAFFIC_SELECTOR0_._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
    ]
    IPSEC_TRAFFIC_SELECTOR0_._fields_ = [
        ("protocolId", Byte),
        ("portStart", UInt16),
        ("portEnd", UInt16),
        ("ipVersion", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION),
        ("Anonymous1", IPSEC_TRAFFIC_SELECTOR0___Anonymous1_e__Union),
        ("Anonymous2", IPSEC_TRAFFIC_SELECTOR0___Anonymous2_e__Union),
    ]
    return IPSEC_TRAFFIC_SELECTOR0_
def _define_IPSEC_TRAFFIC_SELECTOR_POLICY0__head():
    class IPSEC_TRAFFIC_SELECTOR_POLICY0_(Structure):
        pass
    return IPSEC_TRAFFIC_SELECTOR_POLICY0_
def _define_IPSEC_TRAFFIC_SELECTOR_POLICY0_():
    IPSEC_TRAFFIC_SELECTOR_POLICY0_ = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_SELECTOR_POLICY0__head
    IPSEC_TRAFFIC_SELECTOR_POLICY0_._fields_ = [
        ("flags", UInt32),
        ("numLocalTrafficSelectors", UInt32),
        ("localTrafficSelectors", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_SELECTOR0__head)),
        ("numRemoteTrafficSelectors", UInt32),
        ("remoteTrafficSelectors", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_SELECTOR0__head)),
    ]
    return IPSEC_TRAFFIC_SELECTOR_POLICY0_
def _define_IPSEC_TRANSPORT_POLICY0_head():
    class IPSEC_TRANSPORT_POLICY0(Structure):
        pass
    return IPSEC_TRANSPORT_POLICY0
def _define_IPSEC_TRANSPORT_POLICY0():
    IPSEC_TRANSPORT_POLICY0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRANSPORT_POLICY0_head
    IPSEC_TRANSPORT_POLICY0._fields_ = [
        ("numIpsecProposals", UInt32),
        ("ipsecProposals", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_PROPOSAL0_head)),
        ("flags", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_POLICY_FLAG),
        ("ndAllowClearTimeoutSeconds", UInt32),
        ("saIdleTimeout", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_IDLE_TIMEOUT0),
        ("emPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_EM_POLICY0_head)),
    ]
    return IPSEC_TRANSPORT_POLICY0
def _define_IPSEC_TRANSPORT_POLICY1_head():
    class IPSEC_TRANSPORT_POLICY1(Structure):
        pass
    return IPSEC_TRANSPORT_POLICY1
def _define_IPSEC_TRANSPORT_POLICY1():
    IPSEC_TRANSPORT_POLICY1 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRANSPORT_POLICY1_head
    IPSEC_TRANSPORT_POLICY1._fields_ = [
        ("numIpsecProposals", UInt32),
        ("ipsecProposals", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_PROPOSAL0_head)),
        ("flags", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_POLICY_FLAG),
        ("ndAllowClearTimeoutSeconds", UInt32),
        ("saIdleTimeout", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_IDLE_TIMEOUT0),
        ("emPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_EM_POLICY1_head)),
    ]
    return IPSEC_TRANSPORT_POLICY1
def _define_IPSEC_TRANSPORT_POLICY2_head():
    class IPSEC_TRANSPORT_POLICY2(Structure):
        pass
    return IPSEC_TRANSPORT_POLICY2
def _define_IPSEC_TRANSPORT_POLICY2():
    IPSEC_TRANSPORT_POLICY2 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRANSPORT_POLICY2_head
    IPSEC_TRANSPORT_POLICY2._fields_ = [
        ("numIpsecProposals", UInt32),
        ("ipsecProposals", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_PROPOSAL0_head)),
        ("flags", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_POLICY_FLAG),
        ("ndAllowClearTimeoutSeconds", UInt32),
        ("saIdleTimeout", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_IDLE_TIMEOUT0),
        ("emPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_EM_POLICY2_head)),
    ]
    return IPSEC_TRANSPORT_POLICY2
def _define_IPSEC_TUNNEL_ENDPOINTS0_head():
    class IPSEC_TUNNEL_ENDPOINTS0(Structure):
        pass
    return IPSEC_TUNNEL_ENDPOINTS0
def _define_IPSEC_TUNNEL_ENDPOINTS0():
    IPSEC_TUNNEL_ENDPOINTS0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_ENDPOINTS0_head
    class IPSEC_TUNNEL_ENDPOINTS0__Anonymous1_e__Union(Union):
        pass
    IPSEC_TUNNEL_ENDPOINTS0__Anonymous1_e__Union._fields_ = [
        ("localV4Address", UInt32),
        ("localV6Address", Byte * 16),
    ]
    class IPSEC_TUNNEL_ENDPOINTS0__Anonymous2_e__Union(Union):
        pass
    IPSEC_TUNNEL_ENDPOINTS0__Anonymous2_e__Union._fields_ = [
        ("remoteV4Address", UInt32),
        ("remoteV6Address", Byte * 16),
    ]
    IPSEC_TUNNEL_ENDPOINTS0._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
    ]
    IPSEC_TUNNEL_ENDPOINTS0._fields_ = [
        ("ipVersion", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION),
        ("Anonymous1", IPSEC_TUNNEL_ENDPOINTS0__Anonymous1_e__Union),
        ("Anonymous2", IPSEC_TUNNEL_ENDPOINTS0__Anonymous2_e__Union),
    ]
    return IPSEC_TUNNEL_ENDPOINTS0
def _define_IPSEC_TUNNEL_ENDPOINT0_head():
    class IPSEC_TUNNEL_ENDPOINT0(Structure):
        pass
    return IPSEC_TUNNEL_ENDPOINT0
def _define_IPSEC_TUNNEL_ENDPOINT0():
    IPSEC_TUNNEL_ENDPOINT0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_ENDPOINT0_head
    class IPSEC_TUNNEL_ENDPOINT0__Anonymous_e__Union(Union):
        pass
    IPSEC_TUNNEL_ENDPOINT0__Anonymous_e__Union._fields_ = [
        ("v4Address", UInt32),
        ("v6Address", Byte * 16),
    ]
    IPSEC_TUNNEL_ENDPOINT0._anonymous_ = [
        'Anonymous',
    ]
    IPSEC_TUNNEL_ENDPOINT0._fields_ = [
        ("ipVersion", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION),
        ("Anonymous", IPSEC_TUNNEL_ENDPOINT0__Anonymous_e__Union),
    ]
    return IPSEC_TUNNEL_ENDPOINT0
def _define_IPSEC_TUNNEL_ENDPOINTS2_head():
    class IPSEC_TUNNEL_ENDPOINTS2(Structure):
        pass
    return IPSEC_TUNNEL_ENDPOINTS2
def _define_IPSEC_TUNNEL_ENDPOINTS2():
    IPSEC_TUNNEL_ENDPOINTS2 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_ENDPOINTS2_head
    class IPSEC_TUNNEL_ENDPOINTS2__Anonymous2_e__Union(Union):
        pass
    IPSEC_TUNNEL_ENDPOINTS2__Anonymous2_e__Union._fields_ = [
        ("remoteV4Address", UInt32),
        ("remoteV6Address", Byte * 16),
    ]
    class IPSEC_TUNNEL_ENDPOINTS2__Anonymous1_e__Union(Union):
        pass
    IPSEC_TUNNEL_ENDPOINTS2__Anonymous1_e__Union._fields_ = [
        ("localV4Address", UInt32),
        ("localV6Address", Byte * 16),
    ]
    IPSEC_TUNNEL_ENDPOINTS2._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
    ]
    IPSEC_TUNNEL_ENDPOINTS2._fields_ = [
        ("ipVersion", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION),
        ("Anonymous1", IPSEC_TUNNEL_ENDPOINTS2__Anonymous1_e__Union),
        ("Anonymous2", IPSEC_TUNNEL_ENDPOINTS2__Anonymous2_e__Union),
        ("localIfLuid", UInt64),
        ("remoteFqdn", win32more.Foundation.PWSTR),
        ("numAddresses", UInt32),
        ("remoteAddresses", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_ENDPOINT0_head)),
    ]
    return IPSEC_TUNNEL_ENDPOINTS2
def _define_IPSEC_TUNNEL_ENDPOINTS1_head():
    class IPSEC_TUNNEL_ENDPOINTS1(Structure):
        pass
    return IPSEC_TUNNEL_ENDPOINTS1
def _define_IPSEC_TUNNEL_ENDPOINTS1():
    IPSEC_TUNNEL_ENDPOINTS1 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_ENDPOINTS1_head
    class IPSEC_TUNNEL_ENDPOINTS1__Anonymous2_e__Union(Union):
        pass
    IPSEC_TUNNEL_ENDPOINTS1__Anonymous2_e__Union._fields_ = [
        ("remoteV4Address", UInt32),
        ("remoteV6Address", Byte * 16),
    ]
    class IPSEC_TUNNEL_ENDPOINTS1__Anonymous1_e__Union(Union):
        pass
    IPSEC_TUNNEL_ENDPOINTS1__Anonymous1_e__Union._fields_ = [
        ("localV4Address", UInt32),
        ("localV6Address", Byte * 16),
    ]
    IPSEC_TUNNEL_ENDPOINTS1._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
    ]
    IPSEC_TUNNEL_ENDPOINTS1._fields_ = [
        ("ipVersion", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION),
        ("Anonymous1", IPSEC_TUNNEL_ENDPOINTS1__Anonymous1_e__Union),
        ("Anonymous2", IPSEC_TUNNEL_ENDPOINTS1__Anonymous2_e__Union),
        ("localIfLuid", UInt64),
    ]
    return IPSEC_TUNNEL_ENDPOINTS1
def _define_IPSEC_TUNNEL_POLICY0_head():
    class IPSEC_TUNNEL_POLICY0(Structure):
        pass
    return IPSEC_TUNNEL_POLICY0
def _define_IPSEC_TUNNEL_POLICY0():
    IPSEC_TUNNEL_POLICY0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_POLICY0_head
    IPSEC_TUNNEL_POLICY0._fields_ = [
        ("flags", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_POLICY_FLAG),
        ("numIpsecProposals", UInt32),
        ("ipsecProposals", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_PROPOSAL0_head)),
        ("tunnelEndpoints", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_ENDPOINTS0),
        ("saIdleTimeout", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_IDLE_TIMEOUT0),
        ("emPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_EM_POLICY0_head)),
    ]
    return IPSEC_TUNNEL_POLICY0
def _define_IPSEC_TUNNEL_POLICY1_head():
    class IPSEC_TUNNEL_POLICY1(Structure):
        pass
    return IPSEC_TUNNEL_POLICY1
def _define_IPSEC_TUNNEL_POLICY1():
    IPSEC_TUNNEL_POLICY1 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_POLICY1_head
    IPSEC_TUNNEL_POLICY1._fields_ = [
        ("flags", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_POLICY_FLAG),
        ("numIpsecProposals", UInt32),
        ("ipsecProposals", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_PROPOSAL0_head)),
        ("tunnelEndpoints", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_ENDPOINTS1),
        ("saIdleTimeout", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_IDLE_TIMEOUT0),
        ("emPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_EM_POLICY1_head)),
    ]
    return IPSEC_TUNNEL_POLICY1
def _define_IPSEC_TUNNEL_POLICY2_head():
    class IPSEC_TUNNEL_POLICY2(Structure):
        pass
    return IPSEC_TUNNEL_POLICY2
def _define_IPSEC_TUNNEL_POLICY2():
    IPSEC_TUNNEL_POLICY2 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_POLICY2_head
    IPSEC_TUNNEL_POLICY2._fields_ = [
        ("flags", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_POLICY_FLAG),
        ("numIpsecProposals", UInt32),
        ("ipsecProposals", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_PROPOSAL0_head)),
        ("tunnelEndpoints", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_ENDPOINTS2),
        ("saIdleTimeout", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_IDLE_TIMEOUT0),
        ("emPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_EM_POLICY2_head)),
        ("fwdPathSaLifetime", UInt32),
    ]
    return IPSEC_TUNNEL_POLICY2
def _define_IPSEC_TUNNEL_POLICY3__head():
    class IPSEC_TUNNEL_POLICY3_(Structure):
        pass
    return IPSEC_TUNNEL_POLICY3_
def _define_IPSEC_TUNNEL_POLICY3_():
    IPSEC_TUNNEL_POLICY3_ = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_POLICY3__head
    IPSEC_TUNNEL_POLICY3_._fields_ = [
        ("flags", UInt32),
        ("numIpsecProposals", UInt32),
        ("ipsecProposals", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_PROPOSAL0_head)),
        ("tunnelEndpoints", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_ENDPOINTS2),
        ("saIdleTimeout", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_IDLE_TIMEOUT0),
        ("emPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_EM_POLICY2_head)),
        ("fwdPathSaLifetime", UInt32),
        ("compartmentId", UInt32),
        ("numTrafficSelectorPolicy", UInt32),
        ("trafficSelectorPolicies", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_SELECTOR_POLICY0__head)),
    ]
    return IPSEC_TUNNEL_POLICY3_
def _define_IPSEC_KEYING_POLICY0_head():
    class IPSEC_KEYING_POLICY0(Structure):
        pass
    return IPSEC_KEYING_POLICY0
def _define_IPSEC_KEYING_POLICY0():
    IPSEC_KEYING_POLICY0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_KEYING_POLICY0_head
    IPSEC_KEYING_POLICY0._fields_ = [
        ("numKeyMods", UInt32),
        ("keyModKeys", POINTER(Guid)),
    ]
    return IPSEC_KEYING_POLICY0
def _define_IPSEC_KEYING_POLICY1_head():
    class IPSEC_KEYING_POLICY1(Structure):
        pass
    return IPSEC_KEYING_POLICY1
def _define_IPSEC_KEYING_POLICY1():
    IPSEC_KEYING_POLICY1 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_KEYING_POLICY1_head
    IPSEC_KEYING_POLICY1._fields_ = [
        ("numKeyMods", UInt32),
        ("keyModKeys", POINTER(Guid)),
        ("flags", UInt32),
    ]
    return IPSEC_KEYING_POLICY1
def _define_IPSEC_AGGREGATE_SA_STATISTICS0_head():
    class IPSEC_AGGREGATE_SA_STATISTICS0(Structure):
        pass
    return IPSEC_AGGREGATE_SA_STATISTICS0
def _define_IPSEC_AGGREGATE_SA_STATISTICS0():
    IPSEC_AGGREGATE_SA_STATISTICS0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_AGGREGATE_SA_STATISTICS0_head
    IPSEC_AGGREGATE_SA_STATISTICS0._fields_ = [
        ("activeSas", UInt32),
        ("pendingSaNegotiations", UInt32),
        ("totalSasAdded", UInt32),
        ("totalSasDeleted", UInt32),
        ("successfulRekeys", UInt32),
        ("activeTunnels", UInt32),
        ("offloadedSas", UInt32),
    ]
    return IPSEC_AGGREGATE_SA_STATISTICS0
def _define_IPSEC_ESP_DROP_PACKET_STATISTICS0_head():
    class IPSEC_ESP_DROP_PACKET_STATISTICS0(Structure):
        pass
    return IPSEC_ESP_DROP_PACKET_STATISTICS0
def _define_IPSEC_ESP_DROP_PACKET_STATISTICS0():
    IPSEC_ESP_DROP_PACKET_STATISTICS0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_ESP_DROP_PACKET_STATISTICS0_head
    IPSEC_ESP_DROP_PACKET_STATISTICS0._fields_ = [
        ("invalidSpisOnInbound", UInt32),
        ("decryptionFailuresOnInbound", UInt32),
        ("authenticationFailuresOnInbound", UInt32),
        ("replayCheckFailuresOnInbound", UInt32),
        ("saNotInitializedOnInbound", UInt32),
    ]
    return IPSEC_ESP_DROP_PACKET_STATISTICS0
def _define_IPSEC_AH_DROP_PACKET_STATISTICS0_head():
    class IPSEC_AH_DROP_PACKET_STATISTICS0(Structure):
        pass
    return IPSEC_AH_DROP_PACKET_STATISTICS0
def _define_IPSEC_AH_DROP_PACKET_STATISTICS0():
    IPSEC_AH_DROP_PACKET_STATISTICS0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_AH_DROP_PACKET_STATISTICS0_head
    IPSEC_AH_DROP_PACKET_STATISTICS0._fields_ = [
        ("invalidSpisOnInbound", UInt32),
        ("authenticationFailuresOnInbound", UInt32),
        ("replayCheckFailuresOnInbound", UInt32),
        ("saNotInitializedOnInbound", UInt32),
    ]
    return IPSEC_AH_DROP_PACKET_STATISTICS0
def _define_IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0_head():
    class IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0(Structure):
        pass
    return IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0
def _define_IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0():
    IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0_head
    IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0._fields_ = [
        ("invalidSpisOnInbound", UInt32),
        ("decryptionFailuresOnInbound", UInt32),
        ("authenticationFailuresOnInbound", UInt32),
        ("udpEspValidationFailuresOnInbound", UInt32),
        ("replayCheckFailuresOnInbound", UInt32),
        ("invalidClearTextInbound", UInt32),
        ("saNotInitializedOnInbound", UInt32),
        ("receiveOverIncorrectSaInbound", UInt32),
        ("secureReceivesNotMatchingFilters", UInt32),
    ]
    return IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0
def _define_IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1_head():
    class IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1(Structure):
        pass
    return IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1
def _define_IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1():
    IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1_head
    IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1._fields_ = [
        ("invalidSpisOnInbound", UInt32),
        ("decryptionFailuresOnInbound", UInt32),
        ("authenticationFailuresOnInbound", UInt32),
        ("udpEspValidationFailuresOnInbound", UInt32),
        ("replayCheckFailuresOnInbound", UInt32),
        ("invalidClearTextInbound", UInt32),
        ("saNotInitializedOnInbound", UInt32),
        ("receiveOverIncorrectSaInbound", UInt32),
        ("secureReceivesNotMatchingFilters", UInt32),
        ("totalDropPacketsInbound", UInt32),
    ]
    return IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1
def _define_IPSEC_TRAFFIC_STATISTICS0_head():
    class IPSEC_TRAFFIC_STATISTICS0(Structure):
        pass
    return IPSEC_TRAFFIC_STATISTICS0
def _define_IPSEC_TRAFFIC_STATISTICS0():
    IPSEC_TRAFFIC_STATISTICS0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_STATISTICS0_head
    IPSEC_TRAFFIC_STATISTICS0._fields_ = [
        ("encryptedByteCount", UInt64),
        ("authenticatedAHByteCount", UInt64),
        ("authenticatedESPByteCount", UInt64),
        ("transportByteCount", UInt64),
        ("tunnelByteCount", UInt64),
        ("offloadByteCount", UInt64),
    ]
    return IPSEC_TRAFFIC_STATISTICS0
def _define_IPSEC_TRAFFIC_STATISTICS1_head():
    class IPSEC_TRAFFIC_STATISTICS1(Structure):
        pass
    return IPSEC_TRAFFIC_STATISTICS1
def _define_IPSEC_TRAFFIC_STATISTICS1():
    IPSEC_TRAFFIC_STATISTICS1 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_STATISTICS1_head
    IPSEC_TRAFFIC_STATISTICS1._fields_ = [
        ("encryptedByteCount", UInt64),
        ("authenticatedAHByteCount", UInt64),
        ("authenticatedESPByteCount", UInt64),
        ("transportByteCount", UInt64),
        ("tunnelByteCount", UInt64),
        ("offloadByteCount", UInt64),
        ("totalSuccessfulPackets", UInt64),
    ]
    return IPSEC_TRAFFIC_STATISTICS1
def _define_IPSEC_STATISTICS0_head():
    class IPSEC_STATISTICS0(Structure):
        pass
    return IPSEC_STATISTICS0
def _define_IPSEC_STATISTICS0():
    IPSEC_STATISTICS0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_STATISTICS0_head
    IPSEC_STATISTICS0._fields_ = [
        ("aggregateSaStatistics", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_AGGREGATE_SA_STATISTICS0),
        ("espDropPacketStatistics", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_ESP_DROP_PACKET_STATISTICS0),
        ("ahDropPacketStatistics", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_AH_DROP_PACKET_STATISTICS0),
        ("aggregateDropPacketStatistics", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0),
        ("inboundTrafficStatistics", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_STATISTICS0),
        ("outboundTrafficStatistics", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_STATISTICS0),
    ]
    return IPSEC_STATISTICS0
def _define_IPSEC_STATISTICS1_head():
    class IPSEC_STATISTICS1(Structure):
        pass
    return IPSEC_STATISTICS1
def _define_IPSEC_STATISTICS1():
    IPSEC_STATISTICS1 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_STATISTICS1_head
    IPSEC_STATISTICS1._fields_ = [
        ("aggregateSaStatistics", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_AGGREGATE_SA_STATISTICS0),
        ("espDropPacketStatistics", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_ESP_DROP_PACKET_STATISTICS0),
        ("ahDropPacketStatistics", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_AH_DROP_PACKET_STATISTICS0),
        ("aggregateDropPacketStatistics", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1),
        ("inboundTrafficStatistics", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_STATISTICS1),
        ("outboundTrafficStatistics", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_STATISTICS1),
    ]
    return IPSEC_STATISTICS1
def _define_IPSEC_SA_AUTH_INFORMATION0_head():
    class IPSEC_SA_AUTH_INFORMATION0(Structure):
        pass
    return IPSEC_SA_AUTH_INFORMATION0
def _define_IPSEC_SA_AUTH_INFORMATION0():
    IPSEC_SA_AUTH_INFORMATION0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_AUTH_INFORMATION0_head
    IPSEC_SA_AUTH_INFORMATION0._fields_ = [
        ("authTransform", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_AUTH_TRANSFORM0),
        ("authKey", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
    ]
    return IPSEC_SA_AUTH_INFORMATION0
def _define_IPSEC_SA_CIPHER_INFORMATION0_head():
    class IPSEC_SA_CIPHER_INFORMATION0(Structure):
        pass
    return IPSEC_SA_CIPHER_INFORMATION0
def _define_IPSEC_SA_CIPHER_INFORMATION0():
    IPSEC_SA_CIPHER_INFORMATION0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CIPHER_INFORMATION0_head
    IPSEC_SA_CIPHER_INFORMATION0._fields_ = [
        ("cipherTransform", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_CIPHER_TRANSFORM0),
        ("cipherKey", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
    ]
    return IPSEC_SA_CIPHER_INFORMATION0
def _define_IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0_head():
    class IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0(Structure):
        pass
    return IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0
def _define_IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0():
    IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0_head
    IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0._fields_ = [
        ("saCipherInformation", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CIPHER_INFORMATION0),
        ("saAuthInformation", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_AUTH_INFORMATION0),
    ]
    return IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0
def _define_IPSEC_SA0_head():
    class IPSEC_SA0(Structure):
        pass
    return IPSEC_SA0
def _define_IPSEC_SA0():
    IPSEC_SA0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA0_head
    class IPSEC_SA0__Anonymous_e__Union(Union):
        pass
    IPSEC_SA0__Anonymous_e__Union._fields_ = [
        ("ahInformation", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_AUTH_INFORMATION0_head)),
        ("espAuthInformation", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_AUTH_INFORMATION0_head)),
        ("espCipherInformation", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CIPHER_INFORMATION0_head)),
        ("espAuthAndCipherInformation", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0_head)),
        ("espAuthFwInformation", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_AUTH_INFORMATION0_head)),
    ]
    IPSEC_SA0._anonymous_ = [
        'Anonymous',
    ]
    IPSEC_SA0._fields_ = [
        ("spi", UInt32),
        ("saTransformType", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRANSFORM_TYPE),
        ("Anonymous", IPSEC_SA0__Anonymous_e__Union),
    ]
    return IPSEC_SA0
def _define_IPSEC_KEYMODULE_STATE0_head():
    class IPSEC_KEYMODULE_STATE0(Structure):
        pass
    return IPSEC_KEYMODULE_STATE0
def _define_IPSEC_KEYMODULE_STATE0():
    IPSEC_KEYMODULE_STATE0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_KEYMODULE_STATE0_head
    IPSEC_KEYMODULE_STATE0._fields_ = [
        ("keyModuleKey", Guid),
        ("stateBlob", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
    ]
    return IPSEC_KEYMODULE_STATE0
IPSEC_TOKEN_TYPE = Int32
IPSEC_TOKEN_TYPE_MACHINE = 0
IPSEC_TOKEN_TYPE_IMPERSONATION = 1
IPSEC_TOKEN_TYPE_MAX = 2
IPSEC_TOKEN_PRINCIPAL = Int32
IPSEC_TOKEN_PRINCIPAL_LOCAL = 0
IPSEC_TOKEN_PRINCIPAL_PEER = 1
IPSEC_TOKEN_PRINCIPAL_MAX = 2
IPSEC_TOKEN_MODE = Int32
IPSEC_TOKEN_MODE_MAIN = 0
IPSEC_TOKEN_MODE_EXTENDED = 1
IPSEC_TOKEN_MODE_MAX = 2
def _define_IPSEC_TOKEN0_head():
    class IPSEC_TOKEN0(Structure):
        pass
    return IPSEC_TOKEN0
def _define_IPSEC_TOKEN0():
    IPSEC_TOKEN0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TOKEN0_head
    IPSEC_TOKEN0._fields_ = [
        ("type", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TOKEN_TYPE),
        ("principal", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TOKEN_PRINCIPAL),
        ("mode", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TOKEN_MODE),
        ("token", UInt64),
    ]
    return IPSEC_TOKEN0
def _define_IPSEC_ID0_head():
    class IPSEC_ID0(Structure):
        pass
    return IPSEC_ID0
def _define_IPSEC_ID0():
    IPSEC_ID0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_ID0_head
    IPSEC_ID0._fields_ = [
        ("mmTargetName", win32more.Foundation.PWSTR),
        ("emTargetName", win32more.Foundation.PWSTR),
        ("numTokens", UInt32),
        ("tokens", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TOKEN0_head)),
        ("explicitCredentials", UInt64),
        ("logonId", UInt64),
    ]
    return IPSEC_ID0
def _define_IPSEC_SA_BUNDLE0_head():
    class IPSEC_SA_BUNDLE0(Structure):
        pass
    return IPSEC_SA_BUNDLE0
def _define_IPSEC_SA_BUNDLE0():
    IPSEC_SA_BUNDLE0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_BUNDLE0_head
    class IPSEC_SA_BUNDLE0__Anonymous_e__Union(Union):
        pass
    IPSEC_SA_BUNDLE0__Anonymous_e__Union._fields_ = [
        ("peerV4PrivateAddress", UInt32),
    ]
    IPSEC_SA_BUNDLE0._anonymous_ = [
        'Anonymous',
    ]
    IPSEC_SA_BUNDLE0._fields_ = [
        ("flags", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_BUNDLE_FLAGS),
        ("lifetime", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_LIFETIME0),
        ("idleTimeoutSeconds", UInt32),
        ("ndAllowClearTimeoutSeconds", UInt32),
        ("ipsecId", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_ID0_head)),
        ("napContext", UInt32),
        ("qmSaId", UInt32),
        ("numSAs", UInt32),
        ("saList", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA0_head)),
        ("keyModuleState", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_KEYMODULE_STATE0_head)),
        ("ipVersion", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION),
        ("Anonymous", IPSEC_SA_BUNDLE0__Anonymous_e__Union),
        ("mmSaId", UInt64),
        ("pfsGroup", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_PFS_GROUP),
    ]
    return IPSEC_SA_BUNDLE0
def _define_IPSEC_SA_BUNDLE1_head():
    class IPSEC_SA_BUNDLE1(Structure):
        pass
    return IPSEC_SA_BUNDLE1
def _define_IPSEC_SA_BUNDLE1():
    IPSEC_SA_BUNDLE1 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_BUNDLE1_head
    class IPSEC_SA_BUNDLE1__Anonymous_e__Union(Union):
        pass
    IPSEC_SA_BUNDLE1__Anonymous_e__Union._fields_ = [
        ("peerV4PrivateAddress", UInt32),
    ]
    IPSEC_SA_BUNDLE1._anonymous_ = [
        'Anonymous',
    ]
    IPSEC_SA_BUNDLE1._fields_ = [
        ("flags", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_BUNDLE_FLAGS),
        ("lifetime", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_LIFETIME0),
        ("idleTimeoutSeconds", UInt32),
        ("ndAllowClearTimeoutSeconds", UInt32),
        ("ipsecId", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_ID0_head)),
        ("napContext", UInt32),
        ("qmSaId", UInt32),
        ("numSAs", UInt32),
        ("saList", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA0_head)),
        ("keyModuleState", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_KEYMODULE_STATE0_head)),
        ("ipVersion", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION),
        ("Anonymous", IPSEC_SA_BUNDLE1__Anonymous_e__Union),
        ("mmSaId", UInt64),
        ("pfsGroup", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_PFS_GROUP),
        ("saLookupContext", Guid),
        ("qmFilterId", UInt64),
    ]
    return IPSEC_SA_BUNDLE1
IPSEC_TRAFFIC_TYPE = Int32
IPSEC_TRAFFIC_TYPE_TRANSPORT = 0
IPSEC_TRAFFIC_TYPE_TUNNEL = 1
IPSEC_TRAFFIC_TYPE_MAX = 2
def _define_IPSEC_TRAFFIC0_head():
    class IPSEC_TRAFFIC0(Structure):
        pass
    return IPSEC_TRAFFIC0
def _define_IPSEC_TRAFFIC0():
    IPSEC_TRAFFIC0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC0_head
    class IPSEC_TRAFFIC0__Anonymous3_e__Union(Union):
        pass
    IPSEC_TRAFFIC0__Anonymous3_e__Union._fields_ = [
        ("ipsecFilterId", UInt64),
        ("tunnelPolicyId", UInt64),
    ]
    class IPSEC_TRAFFIC0__Anonymous1_e__Union(Union):
        pass
    IPSEC_TRAFFIC0__Anonymous1_e__Union._fields_ = [
        ("localV4Address", UInt32),
        ("localV6Address", Byte * 16),
    ]
    class IPSEC_TRAFFIC0__Anonymous2_e__Union(Union):
        pass
    IPSEC_TRAFFIC0__Anonymous2_e__Union._fields_ = [
        ("remoteV4Address", UInt32),
        ("remoteV6Address", Byte * 16),
    ]
    IPSEC_TRAFFIC0._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
        'Anonymous3',
    ]
    IPSEC_TRAFFIC0._fields_ = [
        ("ipVersion", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION),
        ("Anonymous1", IPSEC_TRAFFIC0__Anonymous1_e__Union),
        ("Anonymous2", IPSEC_TRAFFIC0__Anonymous2_e__Union),
        ("trafficType", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_TYPE),
        ("Anonymous3", IPSEC_TRAFFIC0__Anonymous3_e__Union),
        ("remotePort", UInt16),
    ]
    return IPSEC_TRAFFIC0
def _define_IPSEC_TRAFFIC1_head():
    class IPSEC_TRAFFIC1(Structure):
        pass
    return IPSEC_TRAFFIC1
def _define_IPSEC_TRAFFIC1():
    IPSEC_TRAFFIC1 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC1_head
    class IPSEC_TRAFFIC1__Anonymous2_e__Union(Union):
        pass
    IPSEC_TRAFFIC1__Anonymous2_e__Union._fields_ = [
        ("remoteV4Address", UInt32),
        ("remoteV6Address", Byte * 16),
    ]
    class IPSEC_TRAFFIC1__Anonymous3_e__Union(Union):
        pass
    IPSEC_TRAFFIC1__Anonymous3_e__Union._fields_ = [
        ("ipsecFilterId", UInt64),
        ("tunnelPolicyId", UInt64),
    ]
    class IPSEC_TRAFFIC1__Anonymous1_e__Union(Union):
        pass
    IPSEC_TRAFFIC1__Anonymous1_e__Union._fields_ = [
        ("localV4Address", UInt32),
        ("localV6Address", Byte * 16),
    ]
    IPSEC_TRAFFIC1._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
        'Anonymous3',
    ]
    IPSEC_TRAFFIC1._fields_ = [
        ("ipVersion", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION),
        ("Anonymous1", IPSEC_TRAFFIC1__Anonymous1_e__Union),
        ("Anonymous2", IPSEC_TRAFFIC1__Anonymous2_e__Union),
        ("trafficType", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_TYPE),
        ("Anonymous3", IPSEC_TRAFFIC1__Anonymous3_e__Union),
        ("remotePort", UInt16),
        ("localPort", UInt16),
        ("ipProtocol", Byte),
        ("localIfLuid", UInt64),
        ("realIfProfileId", UInt32),
    ]
    return IPSEC_TRAFFIC1
def _define_IPSEC_V4_UDP_ENCAPSULATION0_head():
    class IPSEC_V4_UDP_ENCAPSULATION0(Structure):
        pass
    return IPSEC_V4_UDP_ENCAPSULATION0
def _define_IPSEC_V4_UDP_ENCAPSULATION0():
    IPSEC_V4_UDP_ENCAPSULATION0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_V4_UDP_ENCAPSULATION0_head
    IPSEC_V4_UDP_ENCAPSULATION0._fields_ = [
        ("localUdpEncapPort", UInt16),
        ("remoteUdpEncapPort", UInt16),
    ]
    return IPSEC_V4_UDP_ENCAPSULATION0
def _define_IPSEC_GETSPI0_head():
    class IPSEC_GETSPI0(Structure):
        pass
    return IPSEC_GETSPI0
def _define_IPSEC_GETSPI0():
    IPSEC_GETSPI0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_GETSPI0_head
    class IPSEC_GETSPI0__Anonymous_e__Union(Union):
        pass
    IPSEC_GETSPI0__Anonymous_e__Union._fields_ = [
        ("inboundUdpEncapsulation", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_V4_UDP_ENCAPSULATION0_head)),
    ]
    IPSEC_GETSPI0._anonymous_ = [
        'Anonymous',
    ]
    IPSEC_GETSPI0._fields_ = [
        ("inboundIpsecTraffic", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC0),
        ("ipVersion", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION),
        ("Anonymous", IPSEC_GETSPI0__Anonymous_e__Union),
        ("rngCryptoModuleID", POINTER(Guid)),
    ]
    return IPSEC_GETSPI0
def _define_IPSEC_GETSPI1_head():
    class IPSEC_GETSPI1(Structure):
        pass
    return IPSEC_GETSPI1
def _define_IPSEC_GETSPI1():
    IPSEC_GETSPI1 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_GETSPI1_head
    class IPSEC_GETSPI1__Anonymous_e__Union(Union):
        pass
    IPSEC_GETSPI1__Anonymous_e__Union._fields_ = [
        ("inboundUdpEncapsulation", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_V4_UDP_ENCAPSULATION0_head)),
    ]
    IPSEC_GETSPI1._anonymous_ = [
        'Anonymous',
    ]
    IPSEC_GETSPI1._fields_ = [
        ("inboundIpsecTraffic", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC1),
        ("ipVersion", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION),
        ("Anonymous", IPSEC_GETSPI1__Anonymous_e__Union),
        ("rngCryptoModuleID", POINTER(Guid)),
    ]
    return IPSEC_GETSPI1
def _define_IPSEC_SA_DETAILS0_head():
    class IPSEC_SA_DETAILS0(Structure):
        pass
    return IPSEC_SA_DETAILS0
def _define_IPSEC_SA_DETAILS0():
    IPSEC_SA_DETAILS0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_DETAILS0_head
    class IPSEC_SA_DETAILS0__Anonymous_e__Union(Union):
        pass
    IPSEC_SA_DETAILS0__Anonymous_e__Union._fields_ = [
        ("udpEncapsulation", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_V4_UDP_ENCAPSULATION0_head)),
    ]
    IPSEC_SA_DETAILS0._anonymous_ = [
        'Anonymous',
    ]
    IPSEC_SA_DETAILS0._fields_ = [
        ("ipVersion", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION),
        ("saDirection", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_DIRECTION),
        ("traffic", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC0),
        ("saBundle", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_BUNDLE0),
        ("Anonymous", IPSEC_SA_DETAILS0__Anonymous_e__Union),
        ("transportFilter", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER0_head)),
    ]
    return IPSEC_SA_DETAILS0
def _define_IPSEC_SA_DETAILS1_head():
    class IPSEC_SA_DETAILS1(Structure):
        pass
    return IPSEC_SA_DETAILS1
def _define_IPSEC_SA_DETAILS1():
    IPSEC_SA_DETAILS1 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_DETAILS1_head
    class IPSEC_SA_DETAILS1__Anonymous_e__Union(Union):
        pass
    IPSEC_SA_DETAILS1__Anonymous_e__Union._fields_ = [
        ("udpEncapsulation", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_V4_UDP_ENCAPSULATION0_head)),
    ]
    IPSEC_SA_DETAILS1._anonymous_ = [
        'Anonymous',
    ]
    IPSEC_SA_DETAILS1._fields_ = [
        ("ipVersion", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION),
        ("saDirection", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_DIRECTION),
        ("traffic", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC1),
        ("saBundle", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_BUNDLE1),
        ("Anonymous", IPSEC_SA_DETAILS1__Anonymous_e__Union),
        ("transportFilter", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER0_head)),
        ("virtualIfTunnelInfo", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_VIRTUAL_IF_TUNNEL_INFO0),
    ]
    return IPSEC_SA_DETAILS1
def _define_IPSEC_SA_CONTEXT0_head():
    class IPSEC_SA_CONTEXT0(Structure):
        pass
    return IPSEC_SA_CONTEXT0
def _define_IPSEC_SA_CONTEXT0():
    IPSEC_SA_CONTEXT0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CONTEXT0_head
    IPSEC_SA_CONTEXT0._fields_ = [
        ("saContextId", UInt64),
        ("inboundSa", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_DETAILS0_head)),
        ("outboundSa", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_DETAILS0_head)),
    ]
    return IPSEC_SA_CONTEXT0
def _define_IPSEC_SA_CONTEXT1_head():
    class IPSEC_SA_CONTEXT1(Structure):
        pass
    return IPSEC_SA_CONTEXT1
def _define_IPSEC_SA_CONTEXT1():
    IPSEC_SA_CONTEXT1 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CONTEXT1_head
    IPSEC_SA_CONTEXT1._fields_ = [
        ("saContextId", UInt64),
        ("inboundSa", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_DETAILS1_head)),
        ("outboundSa", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_DETAILS1_head)),
    ]
    return IPSEC_SA_CONTEXT1
def _define_IPSEC_SA_CONTEXT_ENUM_TEMPLATE0_head():
    class IPSEC_SA_CONTEXT_ENUM_TEMPLATE0(Structure):
        pass
    return IPSEC_SA_CONTEXT_ENUM_TEMPLATE0
def _define_IPSEC_SA_CONTEXT_ENUM_TEMPLATE0():
    IPSEC_SA_CONTEXT_ENUM_TEMPLATE0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CONTEXT_ENUM_TEMPLATE0_head
    IPSEC_SA_CONTEXT_ENUM_TEMPLATE0._fields_ = [
        ("localSubNet", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_CONDITION_VALUE0),
        ("remoteSubNet", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_CONDITION_VALUE0),
    ]
    return IPSEC_SA_CONTEXT_ENUM_TEMPLATE0
def _define_IPSEC_SA_ENUM_TEMPLATE0_head():
    class IPSEC_SA_ENUM_TEMPLATE0(Structure):
        pass
    return IPSEC_SA_ENUM_TEMPLATE0
def _define_IPSEC_SA_ENUM_TEMPLATE0():
    IPSEC_SA_ENUM_TEMPLATE0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_ENUM_TEMPLATE0_head
    IPSEC_SA_ENUM_TEMPLATE0._fields_ = [
        ("saDirection", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_DIRECTION),
    ]
    return IPSEC_SA_ENUM_TEMPLATE0
def _define_IPSEC_SA_CONTEXT_SUBSCRIPTION0_head():
    class IPSEC_SA_CONTEXT_SUBSCRIPTION0(Structure):
        pass
    return IPSEC_SA_CONTEXT_SUBSCRIPTION0
def _define_IPSEC_SA_CONTEXT_SUBSCRIPTION0():
    IPSEC_SA_CONTEXT_SUBSCRIPTION0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CONTEXT_SUBSCRIPTION0_head
    IPSEC_SA_CONTEXT_SUBSCRIPTION0._fields_ = [
        ("enumTemplate", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CONTEXT_ENUM_TEMPLATE0_head)),
        ("flags", UInt32),
        ("sessionKey", Guid),
    ]
    return IPSEC_SA_CONTEXT_SUBSCRIPTION0
IPSEC_SA_CONTEXT_EVENT_TYPE0 = Int32
IPSEC_SA_CONTEXT_EVENT_ADD = 1
IPSEC_SA_CONTEXT_EVENT_DELETE = 2
IPSEC_SA_CONTEXT_EVENT_MAX = 3
def _define_IPSEC_SA_CONTEXT_CHANGE0_head():
    class IPSEC_SA_CONTEXT_CHANGE0(Structure):
        pass
    return IPSEC_SA_CONTEXT_CHANGE0
def _define_IPSEC_SA_CONTEXT_CHANGE0():
    IPSEC_SA_CONTEXT_CHANGE0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CONTEXT_CHANGE0_head
    IPSEC_SA_CONTEXT_CHANGE0._fields_ = [
        ("changeType", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CONTEXT_EVENT_TYPE0),
        ("saContextId", UInt64),
    ]
    return IPSEC_SA_CONTEXT_CHANGE0
IPSEC_FAILURE_POINT = Int32
IPSEC_FAILURE_NONE = 0
IPSEC_FAILURE_ME = 1
IPSEC_FAILURE_PEER = 2
IPSEC_FAILURE_POINT_MAX = 3
def _define_IPSEC_ADDRESS_INFO0_head():
    class IPSEC_ADDRESS_INFO0(Structure):
        pass
    return IPSEC_ADDRESS_INFO0
def _define_IPSEC_ADDRESS_INFO0():
    IPSEC_ADDRESS_INFO0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_ADDRESS_INFO0_head
    IPSEC_ADDRESS_INFO0._fields_ = [
        ("numV4Addresses", UInt32),
        ("v4Addresses", POINTER(UInt32)),
        ("numV6Addresses", UInt32),
        ("v6Addresses", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_ARRAY16_head)),
    ]
    return IPSEC_ADDRESS_INFO0
def _define_IPSEC_DOSP_OPTIONS0_head():
    class IPSEC_DOSP_OPTIONS0(Structure):
        pass
    return IPSEC_DOSP_OPTIONS0
def _define_IPSEC_DOSP_OPTIONS0():
    IPSEC_DOSP_OPTIONS0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_DOSP_OPTIONS0_head
    IPSEC_DOSP_OPTIONS0._fields_ = [
        ("stateIdleTimeoutSeconds", UInt32),
        ("perIPRateLimitQueueIdleTimeoutSeconds", UInt32),
        ("ipV6IPsecUnauthDscp", Byte),
        ("ipV6IPsecUnauthRateLimitBytesPerSec", UInt32),
        ("ipV6IPsecUnauthPerIPRateLimitBytesPerSec", UInt32),
        ("ipV6IPsecAuthDscp", Byte),
        ("ipV6IPsecAuthRateLimitBytesPerSec", UInt32),
        ("icmpV6Dscp", Byte),
        ("icmpV6RateLimitBytesPerSec", UInt32),
        ("ipV6FilterExemptDscp", Byte),
        ("ipV6FilterExemptRateLimitBytesPerSec", UInt32),
        ("defBlockExemptDscp", Byte),
        ("defBlockExemptRateLimitBytesPerSec", UInt32),
        ("maxStateEntries", UInt32),
        ("maxPerIPRateLimitQueues", UInt32),
        ("flags", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_DOSP_FLAGS),
        ("numPublicIFLuids", UInt32),
        ("publicIFLuids", POINTER(UInt64)),
        ("numInternalIFLuids", UInt32),
        ("internalIFLuids", POINTER(UInt64)),
        ("publicV6AddrMask", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_V6_ADDR_AND_MASK),
        ("internalV6AddrMask", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_V6_ADDR_AND_MASK),
    ]
    return IPSEC_DOSP_OPTIONS0
def _define_IPSEC_DOSP_STATISTICS0_head():
    class IPSEC_DOSP_STATISTICS0(Structure):
        pass
    return IPSEC_DOSP_STATISTICS0
def _define_IPSEC_DOSP_STATISTICS0():
    IPSEC_DOSP_STATISTICS0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_DOSP_STATISTICS0_head
    IPSEC_DOSP_STATISTICS0._fields_ = [
        ("totalStateEntriesCreated", UInt64),
        ("currentStateEntries", UInt64),
        ("totalInboundAllowedIPv6IPsecUnauthPkts", UInt64),
        ("totalInboundRatelimitDiscardedIPv6IPsecUnauthPkts", UInt64),
        ("totalInboundPerIPRatelimitDiscardedIPv6IPsecUnauthPkts", UInt64),
        ("totalInboundOtherDiscardedIPv6IPsecUnauthPkts", UInt64),
        ("totalInboundAllowedIPv6IPsecAuthPkts", UInt64),
        ("totalInboundRatelimitDiscardedIPv6IPsecAuthPkts", UInt64),
        ("totalInboundOtherDiscardedIPv6IPsecAuthPkts", UInt64),
        ("totalInboundAllowedICMPv6Pkts", UInt64),
        ("totalInboundRatelimitDiscardedICMPv6Pkts", UInt64),
        ("totalInboundAllowedIPv6FilterExemptPkts", UInt64),
        ("totalInboundRatelimitDiscardedIPv6FilterExemptPkts", UInt64),
        ("totalInboundDiscardedIPv6FilterBlockPkts", UInt64),
        ("totalInboundAllowedDefBlockExemptPkts", UInt64),
        ("totalInboundRatelimitDiscardedDefBlockExemptPkts", UInt64),
        ("totalInboundDiscardedDefBlockPkts", UInt64),
        ("currentInboundIPv6IPsecUnauthPerIPRateLimitQueues", UInt64),
    ]
    return IPSEC_DOSP_STATISTICS0
def _define_IPSEC_DOSP_STATE0_head():
    class IPSEC_DOSP_STATE0(Structure):
        pass
    return IPSEC_DOSP_STATE0
def _define_IPSEC_DOSP_STATE0():
    IPSEC_DOSP_STATE0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_DOSP_STATE0_head
    IPSEC_DOSP_STATE0._fields_ = [
        ("publicHostV6Addr", Byte * 16),
        ("internalHostV6Addr", Byte * 16),
        ("totalInboundIPv6IPsecAuthPackets", UInt64),
        ("totalOutboundIPv6IPsecAuthPackets", UInt64),
        ("durationSecs", UInt32),
    ]
    return IPSEC_DOSP_STATE0
def _define_IPSEC_DOSP_STATE_ENUM_TEMPLATE0_head():
    class IPSEC_DOSP_STATE_ENUM_TEMPLATE0(Structure):
        pass
    return IPSEC_DOSP_STATE_ENUM_TEMPLATE0
def _define_IPSEC_DOSP_STATE_ENUM_TEMPLATE0():
    IPSEC_DOSP_STATE_ENUM_TEMPLATE0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_DOSP_STATE_ENUM_TEMPLATE0_head
    IPSEC_DOSP_STATE_ENUM_TEMPLATE0._fields_ = [
        ("publicV6AddrMask", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_V6_ADDR_AND_MASK),
        ("internalV6AddrMask", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_V6_ADDR_AND_MASK),
    ]
    return IPSEC_DOSP_STATE_ENUM_TEMPLATE0
def _define_IPSEC_KEY_MANAGER0_head():
    class IPSEC_KEY_MANAGER0(Structure):
        pass
    return IPSEC_KEY_MANAGER0
def _define_IPSEC_KEY_MANAGER0():
    IPSEC_KEY_MANAGER0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_KEY_MANAGER0_head
    IPSEC_KEY_MANAGER0._fields_ = [
        ("keyManagerKey", Guid),
        ("displayData", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_DISPLAY_DATA0),
        ("flags", UInt32),
        ("keyDictationTimeoutHint", Byte),
    ]
    return IPSEC_KEY_MANAGER0
DL_ADDRESS_TYPE = Int32
DL_ADDRESS_TYPE_DlUnicast = 0
DL_ADDRESS_TYPE_DlMulticast = 1
DL_ADDRESS_TYPE_DlBroadcast = 2
FWPM_CHANGE_TYPE = Int32
FWPM_CHANGE_ADD = 1
FWPM_CHANGE_DELETE = 2
FWPM_CHANGE_TYPE_MAX = 3
FWPM_SERVICE_STATE = Int32
FWPM_SERVICE_STOPPED = 0
FWPM_SERVICE_START_PENDING = 1
FWPM_SERVICE_STOP_PENDING = 2
FWPM_SERVICE_RUNNING = 3
FWPM_SERVICE_STATE_MAX = 4
FWPM_ENGINE_OPTION = Int32
FWPM_ENGINE_COLLECT_NET_EVENTS = 0
FWPM_ENGINE_NET_EVENT_MATCH_ANY_KEYWORDS = 1
FWPM_ENGINE_NAME_CACHE = 2
FWPM_ENGINE_MONITOR_IPSEC_CONNECTIONS = 3
FWPM_ENGINE_PACKET_QUEUING = 4
FWPM_ENGINE_TXN_WATCHDOG_TIMEOUT_IN_MSEC = 5
FWPM_ENGINE_OPTION_MAX = 6
def _define_FWPM_SESSION0_head():
    class FWPM_SESSION0(Structure):
        pass
    return FWPM_SESSION0
def _define_FWPM_SESSION0():
    FWPM_SESSION0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SESSION0_head
    FWPM_SESSION0._fields_ = [
        ("sessionKey", Guid),
        ("displayData", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_DISPLAY_DATA0),
        ("flags", UInt32),
        ("txnWaitTimeoutInMSec", UInt32),
        ("processId", UInt32),
        ("sid", POINTER(win32more.Security.SID_head)),
        ("username", win32more.Foundation.PWSTR),
        ("kernelMode", win32more.Foundation.BOOL),
    ]
    return FWPM_SESSION0
def _define_FWPM_SESSION_ENUM_TEMPLATE0_head():
    class FWPM_SESSION_ENUM_TEMPLATE0(Structure):
        pass
    return FWPM_SESSION_ENUM_TEMPLATE0
def _define_FWPM_SESSION_ENUM_TEMPLATE0():
    FWPM_SESSION_ENUM_TEMPLATE0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SESSION_ENUM_TEMPLATE0_head
    FWPM_SESSION_ENUM_TEMPLATE0._fields_ = [
        ("reserved", UInt64),
    ]
    return FWPM_SESSION_ENUM_TEMPLATE0
def _define_FWPM_PROVIDER0_head():
    class FWPM_PROVIDER0(Structure):
        pass
    return FWPM_PROVIDER0
def _define_FWPM_PROVIDER0():
    FWPM_PROVIDER0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER0_head
    FWPM_PROVIDER0._fields_ = [
        ("providerKey", Guid),
        ("displayData", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_DISPLAY_DATA0),
        ("flags", UInt32),
        ("providerData", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
        ("serviceName", win32more.Foundation.PWSTR),
    ]
    return FWPM_PROVIDER0
def _define_FWPM_PROVIDER_ENUM_TEMPLATE0_head():
    class FWPM_PROVIDER_ENUM_TEMPLATE0(Structure):
        pass
    return FWPM_PROVIDER_ENUM_TEMPLATE0
def _define_FWPM_PROVIDER_ENUM_TEMPLATE0():
    FWPM_PROVIDER_ENUM_TEMPLATE0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_ENUM_TEMPLATE0_head
    FWPM_PROVIDER_ENUM_TEMPLATE0._fields_ = [
        ("reserved", UInt64),
    ]
    return FWPM_PROVIDER_ENUM_TEMPLATE0
def _define_FWPM_PROVIDER_CHANGE0_head():
    class FWPM_PROVIDER_CHANGE0(Structure):
        pass
    return FWPM_PROVIDER_CHANGE0
def _define_FWPM_PROVIDER_CHANGE0():
    FWPM_PROVIDER_CHANGE0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CHANGE0_head
    FWPM_PROVIDER_CHANGE0._fields_ = [
        ("changeType", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CHANGE_TYPE),
        ("providerKey", Guid),
    ]
    return FWPM_PROVIDER_CHANGE0
def _define_FWPM_PROVIDER_SUBSCRIPTION0_head():
    class FWPM_PROVIDER_SUBSCRIPTION0(Structure):
        pass
    return FWPM_PROVIDER_SUBSCRIPTION0
def _define_FWPM_PROVIDER_SUBSCRIPTION0():
    FWPM_PROVIDER_SUBSCRIPTION0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_SUBSCRIPTION0_head
    FWPM_PROVIDER_SUBSCRIPTION0._fields_ = [
        ("enumTemplate", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_ENUM_TEMPLATE0_head)),
        ("flags", UInt32),
        ("sessionKey", Guid),
    ]
    return FWPM_PROVIDER_SUBSCRIPTION0
def _define_FWPM_CLASSIFY_OPTION0_head():
    class FWPM_CLASSIFY_OPTION0(Structure):
        pass
    return FWPM_CLASSIFY_OPTION0
def _define_FWPM_CLASSIFY_OPTION0():
    FWPM_CLASSIFY_OPTION0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CLASSIFY_OPTION0_head
    FWPM_CLASSIFY_OPTION0._fields_ = [
        ("type", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_CLASSIFY_OPTION_TYPE),
        ("value", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_VALUE0),
    ]
    return FWPM_CLASSIFY_OPTION0
def _define_FWPM_CLASSIFY_OPTIONS0_head():
    class FWPM_CLASSIFY_OPTIONS0(Structure):
        pass
    return FWPM_CLASSIFY_OPTIONS0
def _define_FWPM_CLASSIFY_OPTIONS0():
    FWPM_CLASSIFY_OPTIONS0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CLASSIFY_OPTIONS0_head
    FWPM_CLASSIFY_OPTIONS0._fields_ = [
        ("numOptions", UInt32),
        ("options", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CLASSIFY_OPTION0_head)),
    ]
    return FWPM_CLASSIFY_OPTIONS0
FWPM_PROVIDER_CONTEXT_TYPE = Int32
FWPM_IPSEC_KEYING_CONTEXT = 0
FWPM_IPSEC_IKE_QM_TRANSPORT_CONTEXT = 1
FWPM_IPSEC_IKE_QM_TUNNEL_CONTEXT = 2
FWPM_IPSEC_AUTHIP_QM_TRANSPORT_CONTEXT = 3
FWPM_IPSEC_AUTHIP_QM_TUNNEL_CONTEXT = 4
FWPM_IPSEC_IKE_MM_CONTEXT = 5
FWPM_IPSEC_AUTHIP_MM_CONTEXT = 6
FWPM_CLASSIFY_OPTIONS_CONTEXT = 7
FWPM_GENERAL_CONTEXT = 8
FWPM_IPSEC_IKEV2_QM_TUNNEL_CONTEXT = 9
FWPM_IPSEC_IKEV2_MM_CONTEXT = 10
FWPM_IPSEC_DOSP_CONTEXT = 11
FWPM_IPSEC_IKEV2_QM_TRANSPORT_CONTEXT = 12
FWPM_PROVIDER_CONTEXT_TYPE_MAX = 13
def _define_FWPM_PROVIDER_CONTEXT0_head():
    class FWPM_PROVIDER_CONTEXT0(Structure):
        pass
    return FWPM_PROVIDER_CONTEXT0
def _define_FWPM_PROVIDER_CONTEXT0():
    FWPM_PROVIDER_CONTEXT0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT0_head
    class FWPM_PROVIDER_CONTEXT0__Anonymous_e__Union(Union):
        pass
    FWPM_PROVIDER_CONTEXT0__Anonymous_e__Union._fields_ = [
        ("keyingPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_KEYING_POLICY0_head)),
        ("ikeQmTransportPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRANSPORT_POLICY0_head)),
        ("ikeQmTunnelPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_POLICY0_head)),
        ("authipQmTransportPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRANSPORT_POLICY0_head)),
        ("authipQmTunnelPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_POLICY0_head)),
        ("ikeMmPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_POLICY0_head)),
        ("authIpMmPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_POLICY0_head)),
        ("dataBuffer", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB_head)),
        ("classifyOptions", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CLASSIFY_OPTIONS0_head)),
    ]
    FWPM_PROVIDER_CONTEXT0._anonymous_ = [
        'Anonymous',
    ]
    FWPM_PROVIDER_CONTEXT0._fields_ = [
        ("providerContextKey", Guid),
        ("displayData", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_DISPLAY_DATA0),
        ("flags", UInt32),
        ("providerKey", POINTER(Guid)),
        ("providerData", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
        ("type", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT_TYPE),
        ("Anonymous", FWPM_PROVIDER_CONTEXT0__Anonymous_e__Union),
        ("providerContextId", UInt64),
    ]
    return FWPM_PROVIDER_CONTEXT0
def _define_FWPM_PROVIDER_CONTEXT1_head():
    class FWPM_PROVIDER_CONTEXT1(Structure):
        pass
    return FWPM_PROVIDER_CONTEXT1
def _define_FWPM_PROVIDER_CONTEXT1():
    FWPM_PROVIDER_CONTEXT1 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT1_head
    class FWPM_PROVIDER_CONTEXT1__Anonymous_e__Union(Union):
        pass
    FWPM_PROVIDER_CONTEXT1__Anonymous_e__Union._fields_ = [
        ("keyingPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_KEYING_POLICY0_head)),
        ("ikeQmTransportPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRANSPORT_POLICY1_head)),
        ("ikeQmTunnelPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_POLICY1_head)),
        ("authipQmTransportPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRANSPORT_POLICY1_head)),
        ("authipQmTunnelPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_POLICY1_head)),
        ("ikeMmPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_POLICY1_head)),
        ("authIpMmPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_POLICY1_head)),
        ("dataBuffer", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB_head)),
        ("classifyOptions", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CLASSIFY_OPTIONS0_head)),
        ("ikeV2QmTunnelPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_POLICY1_head)),
        ("ikeV2MmPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_POLICY1_head)),
        ("idpOptions", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_DOSP_OPTIONS0_head)),
    ]
    FWPM_PROVIDER_CONTEXT1._anonymous_ = [
        'Anonymous',
    ]
    FWPM_PROVIDER_CONTEXT1._fields_ = [
        ("providerContextKey", Guid),
        ("displayData", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_DISPLAY_DATA0),
        ("flags", UInt32),
        ("providerKey", POINTER(Guid)),
        ("providerData", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
        ("type", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT_TYPE),
        ("Anonymous", FWPM_PROVIDER_CONTEXT1__Anonymous_e__Union),
        ("providerContextId", UInt64),
    ]
    return FWPM_PROVIDER_CONTEXT1
def _define_FWPM_PROVIDER_CONTEXT2_head():
    class FWPM_PROVIDER_CONTEXT2(Structure):
        pass
    return FWPM_PROVIDER_CONTEXT2
def _define_FWPM_PROVIDER_CONTEXT2():
    FWPM_PROVIDER_CONTEXT2 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT2_head
    class FWPM_PROVIDER_CONTEXT2__Anonymous_e__Union(Union):
        pass
    FWPM_PROVIDER_CONTEXT2__Anonymous_e__Union._fields_ = [
        ("keyingPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_KEYING_POLICY1_head)),
        ("ikeQmTransportPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRANSPORT_POLICY2_head)),
        ("ikeQmTunnelPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_POLICY2_head)),
        ("authipQmTransportPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRANSPORT_POLICY2_head)),
        ("authipQmTunnelPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_POLICY2_head)),
        ("ikeMmPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_POLICY2_head)),
        ("authIpMmPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_POLICY2_head)),
        ("dataBuffer", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB_head)),
        ("classifyOptions", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CLASSIFY_OPTIONS0_head)),
        ("ikeV2QmTunnelPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_POLICY2_head)),
        ("ikeV2QmTransportPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRANSPORT_POLICY2_head)),
        ("ikeV2MmPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_POLICY2_head)),
        ("idpOptions", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_DOSP_OPTIONS0_head)),
    ]
    FWPM_PROVIDER_CONTEXT2._anonymous_ = [
        'Anonymous',
    ]
    FWPM_PROVIDER_CONTEXT2._fields_ = [
        ("providerContextKey", Guid),
        ("displayData", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_DISPLAY_DATA0),
        ("flags", UInt32),
        ("providerKey", POINTER(Guid)),
        ("providerData", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
        ("type", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT_TYPE),
        ("Anonymous", FWPM_PROVIDER_CONTEXT2__Anonymous_e__Union),
        ("providerContextId", UInt64),
    ]
    return FWPM_PROVIDER_CONTEXT2
def _define_FWPM_PROVIDER_CONTEXT3__head():
    class FWPM_PROVIDER_CONTEXT3_(Structure):
        pass
    return FWPM_PROVIDER_CONTEXT3_
def _define_FWPM_PROVIDER_CONTEXT3_():
    FWPM_PROVIDER_CONTEXT3_ = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT3__head
    class FWPM_PROVIDER_CONTEXT3___Anonymous_e__Union(Union):
        pass
    FWPM_PROVIDER_CONTEXT3___Anonymous_e__Union._fields_ = [
        ("keyingPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_KEYING_POLICY1_head)),
        ("ikeQmTransportPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRANSPORT_POLICY2_head)),
        ("ikeQmTunnelPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_POLICY3__head)),
        ("authipQmTransportPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRANSPORT_POLICY2_head)),
        ("authipQmTunnelPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_POLICY3__head)),
        ("ikeMmPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_POLICY2_head)),
        ("authIpMmPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_POLICY2_head)),
        ("dataBuffer", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB_head)),
        ("classifyOptions", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CLASSIFY_OPTIONS0_head)),
        ("ikeV2QmTunnelPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_POLICY3__head)),
        ("ikeV2QmTransportPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRANSPORT_POLICY2_head)),
        ("ikeV2MmPolicy", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_POLICY2_head)),
        ("idpOptions", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_DOSP_OPTIONS0_head)),
    ]
    FWPM_PROVIDER_CONTEXT3_._anonymous_ = [
        'Anonymous',
    ]
    FWPM_PROVIDER_CONTEXT3_._fields_ = [
        ("providerContextKey", Guid),
        ("displayData", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_DISPLAY_DATA0),
        ("flags", UInt32),
        ("providerKey", POINTER(Guid)),
        ("providerData", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
        ("type", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT_TYPE),
        ("Anonymous", FWPM_PROVIDER_CONTEXT3___Anonymous_e__Union),
        ("providerContextId", UInt64),
    ]
    return FWPM_PROVIDER_CONTEXT3_
def _define_FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0_head():
    class FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0(Structure):
        pass
    return FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0
def _define_FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0():
    FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0_head
    FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0._fields_ = [
        ("providerKey", POINTER(Guid)),
        ("providerContextType", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT_TYPE),
    ]
    return FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0
def _define_FWPM_PROVIDER_CONTEXT_CHANGE0_head():
    class FWPM_PROVIDER_CONTEXT_CHANGE0(Structure):
        pass
    return FWPM_PROVIDER_CONTEXT_CHANGE0
def _define_FWPM_PROVIDER_CONTEXT_CHANGE0():
    FWPM_PROVIDER_CONTEXT_CHANGE0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT_CHANGE0_head
    FWPM_PROVIDER_CONTEXT_CHANGE0._fields_ = [
        ("changeType", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CHANGE_TYPE),
        ("providerContextKey", Guid),
        ("providerContextId", UInt64),
    ]
    return FWPM_PROVIDER_CONTEXT_CHANGE0
def _define_FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0_head():
    class FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0(Structure):
        pass
    return FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0
def _define_FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0():
    FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0_head
    FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0._fields_ = [
        ("enumTemplate", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0_head)),
        ("flags", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SUBSCRIPTION_FLAGS),
        ("sessionKey", Guid),
    ]
    return FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0
def _define_FWPM_SUBLAYER0_head():
    class FWPM_SUBLAYER0(Structure):
        pass
    return FWPM_SUBLAYER0
def _define_FWPM_SUBLAYER0():
    FWPM_SUBLAYER0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SUBLAYER0_head
    FWPM_SUBLAYER0._fields_ = [
        ("subLayerKey", Guid),
        ("displayData", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_DISPLAY_DATA0),
        ("flags", UInt32),
        ("providerKey", POINTER(Guid)),
        ("providerData", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
        ("weight", UInt16),
    ]
    return FWPM_SUBLAYER0
def _define_FWPM_SUBLAYER_ENUM_TEMPLATE0_head():
    class FWPM_SUBLAYER_ENUM_TEMPLATE0(Structure):
        pass
    return FWPM_SUBLAYER_ENUM_TEMPLATE0
def _define_FWPM_SUBLAYER_ENUM_TEMPLATE0():
    FWPM_SUBLAYER_ENUM_TEMPLATE0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SUBLAYER_ENUM_TEMPLATE0_head
    FWPM_SUBLAYER_ENUM_TEMPLATE0._fields_ = [
        ("providerKey", POINTER(Guid)),
    ]
    return FWPM_SUBLAYER_ENUM_TEMPLATE0
def _define_FWPM_SUBLAYER_CHANGE0_head():
    class FWPM_SUBLAYER_CHANGE0(Structure):
        pass
    return FWPM_SUBLAYER_CHANGE0
def _define_FWPM_SUBLAYER_CHANGE0():
    FWPM_SUBLAYER_CHANGE0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SUBLAYER_CHANGE0_head
    FWPM_SUBLAYER_CHANGE0._fields_ = [
        ("changeType", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CHANGE_TYPE),
        ("subLayerKey", Guid),
    ]
    return FWPM_SUBLAYER_CHANGE0
def _define_FWPM_SUBLAYER_SUBSCRIPTION0_head():
    class FWPM_SUBLAYER_SUBSCRIPTION0(Structure):
        pass
    return FWPM_SUBLAYER_SUBSCRIPTION0
def _define_FWPM_SUBLAYER_SUBSCRIPTION0():
    FWPM_SUBLAYER_SUBSCRIPTION0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SUBLAYER_SUBSCRIPTION0_head
    FWPM_SUBLAYER_SUBSCRIPTION0._fields_ = [
        ("enumTemplate", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SUBLAYER_ENUM_TEMPLATE0_head)),
        ("flags", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SUBSCRIPTION_FLAGS),
        ("sessionKey", Guid),
    ]
    return FWPM_SUBLAYER_SUBSCRIPTION0
FWPM_FIELD_TYPE = Int32
FWPM_FIELD_RAW_DATA = 0
FWPM_FIELD_IP_ADDRESS = 1
FWPM_FIELD_FLAGS = 2
FWPM_FIELD_TYPE_MAX = 3
def _define_FWPM_FIELD0_head():
    class FWPM_FIELD0(Structure):
        pass
    return FWPM_FIELD0
def _define_FWPM_FIELD0():
    FWPM_FIELD0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FIELD0_head
    FWPM_FIELD0._fields_ = [
        ("fieldKey", POINTER(Guid)),
        ("type", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FIELD_TYPE),
        ("dataType", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_DATA_TYPE),
    ]
    return FWPM_FIELD0
def _define_FWPM_LAYER0_head():
    class FWPM_LAYER0(Structure):
        pass
    return FWPM_LAYER0
def _define_FWPM_LAYER0():
    FWPM_LAYER0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_LAYER0_head
    FWPM_LAYER0._fields_ = [
        ("layerKey", Guid),
        ("displayData", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_DISPLAY_DATA0),
        ("flags", UInt32),
        ("numFields", UInt32),
        ("field", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FIELD0_head)),
        ("defaultSubLayerKey", Guid),
        ("layerId", UInt16),
    ]
    return FWPM_LAYER0
def _define_FWPM_LAYER_ENUM_TEMPLATE0_head():
    class FWPM_LAYER_ENUM_TEMPLATE0(Structure):
        pass
    return FWPM_LAYER_ENUM_TEMPLATE0
def _define_FWPM_LAYER_ENUM_TEMPLATE0():
    FWPM_LAYER_ENUM_TEMPLATE0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_LAYER_ENUM_TEMPLATE0_head
    FWPM_LAYER_ENUM_TEMPLATE0._fields_ = [
        ("reserved", UInt64),
    ]
    return FWPM_LAYER_ENUM_TEMPLATE0
def _define_FWPM_CALLOUT0_head():
    class FWPM_CALLOUT0(Structure):
        pass
    return FWPM_CALLOUT0
def _define_FWPM_CALLOUT0():
    FWPM_CALLOUT0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CALLOUT0_head
    FWPM_CALLOUT0._fields_ = [
        ("calloutKey", Guid),
        ("displayData", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_DISPLAY_DATA0),
        ("flags", UInt32),
        ("providerKey", POINTER(Guid)),
        ("providerData", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
        ("applicableLayer", Guid),
        ("calloutId", UInt32),
    ]
    return FWPM_CALLOUT0
def _define_FWPM_CALLOUT_ENUM_TEMPLATE0_head():
    class FWPM_CALLOUT_ENUM_TEMPLATE0(Structure):
        pass
    return FWPM_CALLOUT_ENUM_TEMPLATE0
def _define_FWPM_CALLOUT_ENUM_TEMPLATE0():
    FWPM_CALLOUT_ENUM_TEMPLATE0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CALLOUT_ENUM_TEMPLATE0_head
    FWPM_CALLOUT_ENUM_TEMPLATE0._fields_ = [
        ("providerKey", POINTER(Guid)),
        ("layerKey", Guid),
    ]
    return FWPM_CALLOUT_ENUM_TEMPLATE0
def _define_FWPM_CALLOUT_CHANGE0_head():
    class FWPM_CALLOUT_CHANGE0(Structure):
        pass
    return FWPM_CALLOUT_CHANGE0
def _define_FWPM_CALLOUT_CHANGE0():
    FWPM_CALLOUT_CHANGE0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CALLOUT_CHANGE0_head
    FWPM_CALLOUT_CHANGE0._fields_ = [
        ("changeType", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CHANGE_TYPE),
        ("calloutKey", Guid),
        ("calloutId", UInt32),
    ]
    return FWPM_CALLOUT_CHANGE0
def _define_FWPM_CALLOUT_SUBSCRIPTION0_head():
    class FWPM_CALLOUT_SUBSCRIPTION0(Structure):
        pass
    return FWPM_CALLOUT_SUBSCRIPTION0
def _define_FWPM_CALLOUT_SUBSCRIPTION0():
    FWPM_CALLOUT_SUBSCRIPTION0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CALLOUT_SUBSCRIPTION0_head
    FWPM_CALLOUT_SUBSCRIPTION0._fields_ = [
        ("enumTemplate", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CALLOUT_ENUM_TEMPLATE0_head)),
        ("flags", UInt32),
        ("sessionKey", Guid),
    ]
    return FWPM_CALLOUT_SUBSCRIPTION0
def _define_FWPM_ACTION0_head():
    class FWPM_ACTION0(Structure):
        pass
    return FWPM_ACTION0
def _define_FWPM_ACTION0():
    FWPM_ACTION0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_ACTION0_head
    class FWPM_ACTION0__Anonymous_e__Union(Union):
        pass
    FWPM_ACTION0__Anonymous_e__Union._fields_ = [
        ("filterType", Guid),
        ("calloutKey", Guid),
    ]
    FWPM_ACTION0._anonymous_ = [
        'Anonymous',
    ]
    FWPM_ACTION0._fields_ = [
        ("type", UInt32),
        ("Anonymous", FWPM_ACTION0__Anonymous_e__Union),
    ]
    return FWPM_ACTION0
def _define_FWPM_FILTER_CONDITION0_head():
    class FWPM_FILTER_CONDITION0(Structure):
        pass
    return FWPM_FILTER_CONDITION0
def _define_FWPM_FILTER_CONDITION0():
    FWPM_FILTER_CONDITION0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER_CONDITION0_head
    FWPM_FILTER_CONDITION0._fields_ = [
        ("fieldKey", Guid),
        ("matchType", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_MATCH_TYPE),
        ("conditionValue", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_CONDITION_VALUE0),
    ]
    return FWPM_FILTER_CONDITION0
def _define_FWPM_FILTER0_head():
    class FWPM_FILTER0(Structure):
        pass
    return FWPM_FILTER0
def _define_FWPM_FILTER0():
    FWPM_FILTER0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER0_head
    class FWPM_FILTER0__Anonymous_e__Union(Union):
        pass
    FWPM_FILTER0__Anonymous_e__Union._fields_ = [
        ("rawContext", UInt64),
        ("providerContextKey", Guid),
    ]
    FWPM_FILTER0._anonymous_ = [
        'Anonymous',
    ]
    FWPM_FILTER0._fields_ = [
        ("filterKey", Guid),
        ("displayData", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_DISPLAY_DATA0),
        ("flags", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER_FLAGS),
        ("providerKey", POINTER(Guid)),
        ("providerData", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
        ("layerKey", Guid),
        ("subLayerKey", Guid),
        ("weight", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_VALUE0),
        ("numFilterConditions", UInt32),
        ("filterCondition", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER_CONDITION0_head)),
        ("action", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_ACTION0),
        ("Anonymous", FWPM_FILTER0__Anonymous_e__Union),
        ("reserved", POINTER(Guid)),
        ("filterId", UInt64),
        ("effectiveWeight", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_VALUE0),
    ]
    return FWPM_FILTER0
def _define_FWPM_FILTER_ENUM_TEMPLATE0_head():
    class FWPM_FILTER_ENUM_TEMPLATE0(Structure):
        pass
    return FWPM_FILTER_ENUM_TEMPLATE0
def _define_FWPM_FILTER_ENUM_TEMPLATE0():
    FWPM_FILTER_ENUM_TEMPLATE0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER_ENUM_TEMPLATE0_head
    FWPM_FILTER_ENUM_TEMPLATE0._fields_ = [
        ("providerKey", POINTER(Guid)),
        ("layerKey", Guid),
        ("enumType", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_FILTER_ENUM_TYPE),
        ("flags", UInt32),
        ("providerContextTemplate", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0_head)),
        ("numFilterConditions", UInt32),
        ("filterCondition", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER_CONDITION0_head)),
        ("actionMask", UInt32),
        ("calloutKey", POINTER(Guid)),
    ]
    return FWPM_FILTER_ENUM_TEMPLATE0
def _define_FWPM_FILTER_CHANGE0_head():
    class FWPM_FILTER_CHANGE0(Structure):
        pass
    return FWPM_FILTER_CHANGE0
def _define_FWPM_FILTER_CHANGE0():
    FWPM_FILTER_CHANGE0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER_CHANGE0_head
    FWPM_FILTER_CHANGE0._fields_ = [
        ("changeType", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CHANGE_TYPE),
        ("filterKey", Guid),
        ("filterId", UInt64),
    ]
    return FWPM_FILTER_CHANGE0
def _define_FWPM_FILTER_SUBSCRIPTION0_head():
    class FWPM_FILTER_SUBSCRIPTION0(Structure):
        pass
    return FWPM_FILTER_SUBSCRIPTION0
def _define_FWPM_FILTER_SUBSCRIPTION0():
    FWPM_FILTER_SUBSCRIPTION0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER_SUBSCRIPTION0_head
    FWPM_FILTER_SUBSCRIPTION0._fields_ = [
        ("enumTemplate", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER_ENUM_TEMPLATE0_head)),
        ("flags", UInt32),
        ("sessionKey", Guid),
    ]
    return FWPM_FILTER_SUBSCRIPTION0
def _define_FWPM_LAYER_STATISTICS0_head():
    class FWPM_LAYER_STATISTICS0(Structure):
        pass
    return FWPM_LAYER_STATISTICS0
def _define_FWPM_LAYER_STATISTICS0():
    FWPM_LAYER_STATISTICS0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_LAYER_STATISTICS0_head
    FWPM_LAYER_STATISTICS0._fields_ = [
        ("layerId", Guid),
        ("classifyPermitCount", UInt32),
        ("classifyBlockCount", UInt32),
        ("classifyVetoCount", UInt32),
        ("numCacheEntries", UInt32),
    ]
    return FWPM_LAYER_STATISTICS0
def _define_FWPM_STATISTICS0_head():
    class FWPM_STATISTICS0(Structure):
        pass
    return FWPM_STATISTICS0
def _define_FWPM_STATISTICS0():
    FWPM_STATISTICS0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_STATISTICS0_head
    FWPM_STATISTICS0._fields_ = [
        ("numLayerStatistics", UInt32),
        ("layerStatistics", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_LAYER_STATISTICS0_head)),
        ("inboundAllowedConnectionsV4", UInt32),
        ("inboundBlockedConnectionsV4", UInt32),
        ("outboundAllowedConnectionsV4", UInt32),
        ("outboundBlockedConnectionsV4", UInt32),
        ("inboundAllowedConnectionsV6", UInt32),
        ("inboundBlockedConnectionsV6", UInt32),
        ("outboundAllowedConnectionsV6", UInt32),
        ("outboundBlockedConnectionsV6", UInt32),
        ("inboundActiveConnectionsV4", UInt32),
        ("outboundActiveConnectionsV4", UInt32),
        ("inboundActiveConnectionsV6", UInt32),
        ("outboundActiveConnectionsV6", UInt32),
        ("reauthDirInbound", UInt64),
        ("reauthDirOutbound", UInt64),
        ("reauthFamilyV4", UInt64),
        ("reauthFamilyV6", UInt64),
        ("reauthProtoOther", UInt64),
        ("reauthProtoIPv4", UInt64),
        ("reauthProtoIPv6", UInt64),
        ("reauthProtoICMP", UInt64),
        ("reauthProtoICMP6", UInt64),
        ("reauthProtoUDP", UInt64),
        ("reauthProtoTCP", UInt64),
        ("reauthReasonPolicyChange", UInt64),
        ("reauthReasonNewArrivalInterface", UInt64),
        ("reauthReasonNewNextHopInterface", UInt64),
        ("reauthReasonProfileCrossing", UInt64),
        ("reauthReasonClassifyCompletion", UInt64),
        ("reauthReasonIPSecPropertiesChanged", UInt64),
        ("reauthReasonMidStreamInspection", UInt64),
        ("reauthReasonSocketPropertyChanged", UInt64),
        ("reauthReasonNewInboundMCastBCastPacket", UInt64),
        ("reauthReasonEDPPolicyChanged", UInt64),
        ("reauthReasonProxyHandleChanged", UInt64),
    ]
    return FWPM_STATISTICS0
def _define_FWPM_NET_EVENT_HEADER0_head():
    class FWPM_NET_EVENT_HEADER0(Structure):
        pass
    return FWPM_NET_EVENT_HEADER0
def _define_FWPM_NET_EVENT_HEADER0():
    FWPM_NET_EVENT_HEADER0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_HEADER0_head
    class FWPM_NET_EVENT_HEADER0__Anonymous1_e__Union(Union):
        pass
    FWPM_NET_EVENT_HEADER0__Anonymous1_e__Union._fields_ = [
        ("localAddrV4", UInt32),
        ("localAddrV6", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_ARRAY16),
    ]
    class FWPM_NET_EVENT_HEADER0__Anonymous2_e__Union(Union):
        pass
    FWPM_NET_EVENT_HEADER0__Anonymous2_e__Union._fields_ = [
        ("remoteAddrV4", UInt32),
        ("remoteAddrV6", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_ARRAY16),
    ]
    FWPM_NET_EVENT_HEADER0._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
    ]
    FWPM_NET_EVENT_HEADER0._fields_ = [
        ("timeStamp", win32more.Foundation.FILETIME),
        ("flags", UInt32),
        ("ipVersion", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION),
        ("ipProtocol", Byte),
        ("Anonymous1", FWPM_NET_EVENT_HEADER0__Anonymous1_e__Union),
        ("Anonymous2", FWPM_NET_EVENT_HEADER0__Anonymous2_e__Union),
        ("localPort", UInt16),
        ("remotePort", UInt16),
        ("scopeId", UInt32),
        ("appId", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
        ("userId", POINTER(win32more.Security.SID_head)),
    ]
    return FWPM_NET_EVENT_HEADER0
def _define_FWPM_NET_EVENT_HEADER1_head():
    class FWPM_NET_EVENT_HEADER1(Structure):
        pass
    return FWPM_NET_EVENT_HEADER1
def _define_FWPM_NET_EVENT_HEADER1():
    FWPM_NET_EVENT_HEADER1 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_HEADER1_head
    class FWPM_NET_EVENT_HEADER1__Anonymous3_e__Union(Union):
        pass
    class FWPM_NET_EVENT_HEADER1__Anonymous3_e__Union__Anonymous_e__Struct(Structure):
        pass
    class FWPM_NET_EVENT_HEADER1__Anonymous3_e__Union__Anonymous_e__Struct__Anonymous_e__Union(Union):
        pass
    class FWPM_NET_EVENT_HEADER1__Anonymous3_e__Union__Anonymous_e__Struct__Anonymous_e__Union__Anonymous_e__Struct(Structure):
        pass
    FWPM_NET_EVENT_HEADER1__Anonymous3_e__Union__Anonymous_e__Struct__Anonymous_e__Union__Anonymous_e__Struct._fields_ = [
        ("reserved2", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_ARRAY6),
        ("reserved3", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_ARRAY6),
        ("reserved4", UInt32),
        ("reserved5", UInt32),
        ("reserved6", UInt16),
        ("reserved7", UInt32),
        ("reserved8", UInt32),
        ("reserved9", UInt16),
        ("reserved10", UInt64),
    ]
    FWPM_NET_EVENT_HEADER1__Anonymous3_e__Union__Anonymous_e__Struct__Anonymous_e__Union._anonymous_ = [
        'Anonymous',
    ]
    FWPM_NET_EVENT_HEADER1__Anonymous3_e__Union__Anonymous_e__Struct__Anonymous_e__Union._fields_ = [
        ("Anonymous", FWPM_NET_EVENT_HEADER1__Anonymous3_e__Union__Anonymous_e__Struct__Anonymous_e__Union__Anonymous_e__Struct),
    ]
    FWPM_NET_EVENT_HEADER1__Anonymous3_e__Union__Anonymous_e__Struct._anonymous_ = [
        'Anonymous',
    ]
    FWPM_NET_EVENT_HEADER1__Anonymous3_e__Union__Anonymous_e__Struct._fields_ = [
        ("reserved1", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_AF),
        ("Anonymous", FWPM_NET_EVENT_HEADER1__Anonymous3_e__Union__Anonymous_e__Struct__Anonymous_e__Union),
    ]
    FWPM_NET_EVENT_HEADER1__Anonymous3_e__Union._anonymous_ = [
        'Anonymous',
    ]
    FWPM_NET_EVENT_HEADER1__Anonymous3_e__Union._fields_ = [
        ("Anonymous", FWPM_NET_EVENT_HEADER1__Anonymous3_e__Union__Anonymous_e__Struct),
    ]
    class FWPM_NET_EVENT_HEADER1__Anonymous1_e__Union(Union):
        pass
    FWPM_NET_EVENT_HEADER1__Anonymous1_e__Union._fields_ = [
        ("localAddrV4", UInt32),
        ("localAddrV6", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_ARRAY16),
    ]
    class FWPM_NET_EVENT_HEADER1__Anonymous2_e__Union(Union):
        pass
    FWPM_NET_EVENT_HEADER1__Anonymous2_e__Union._fields_ = [
        ("remoteAddrV4", UInt32),
        ("remoteAddrV6", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_ARRAY16),
    ]
    FWPM_NET_EVENT_HEADER1._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
        'Anonymous3',
    ]
    FWPM_NET_EVENT_HEADER1._fields_ = [
        ("timeStamp", win32more.Foundation.FILETIME),
        ("flags", UInt32),
        ("ipVersion", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION),
        ("ipProtocol", Byte),
        ("Anonymous1", FWPM_NET_EVENT_HEADER1__Anonymous1_e__Union),
        ("Anonymous2", FWPM_NET_EVENT_HEADER1__Anonymous2_e__Union),
        ("localPort", UInt16),
        ("remotePort", UInt16),
        ("scopeId", UInt32),
        ("appId", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
        ("userId", POINTER(win32more.Security.SID_head)),
        ("Anonymous3", FWPM_NET_EVENT_HEADER1__Anonymous3_e__Union),
    ]
    return FWPM_NET_EVENT_HEADER1
def _define_FWPM_NET_EVENT_HEADER2_head():
    class FWPM_NET_EVENT_HEADER2(Structure):
        pass
    return FWPM_NET_EVENT_HEADER2
def _define_FWPM_NET_EVENT_HEADER2():
    FWPM_NET_EVENT_HEADER2 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_HEADER2_head
    class FWPM_NET_EVENT_HEADER2__Anonymous1_e__Union(Union):
        pass
    FWPM_NET_EVENT_HEADER2__Anonymous1_e__Union._fields_ = [
        ("localAddrV4", UInt32),
        ("localAddrV6", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_ARRAY16),
    ]
    class FWPM_NET_EVENT_HEADER2__Anonymous2_e__Union(Union):
        pass
    FWPM_NET_EVENT_HEADER2__Anonymous2_e__Union._fields_ = [
        ("remoteAddrV4", UInt32),
        ("remoteAddrV6", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_ARRAY16),
    ]
    FWPM_NET_EVENT_HEADER2._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
    ]
    FWPM_NET_EVENT_HEADER2._fields_ = [
        ("timeStamp", win32more.Foundation.FILETIME),
        ("flags", UInt32),
        ("ipVersion", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION),
        ("ipProtocol", Byte),
        ("Anonymous1", FWPM_NET_EVENT_HEADER2__Anonymous1_e__Union),
        ("Anonymous2", FWPM_NET_EVENT_HEADER2__Anonymous2_e__Union),
        ("localPort", UInt16),
        ("remotePort", UInt16),
        ("scopeId", UInt32),
        ("appId", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
        ("userId", POINTER(win32more.Security.SID_head)),
        ("addressFamily", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_AF),
        ("packageSid", POINTER(win32more.Security.SID_head)),
    ]
    return FWPM_NET_EVENT_HEADER2
def _define_FWPM_NET_EVENT_HEADER3_head():
    class FWPM_NET_EVENT_HEADER3(Structure):
        pass
    return FWPM_NET_EVENT_HEADER3
def _define_FWPM_NET_EVENT_HEADER3():
    FWPM_NET_EVENT_HEADER3 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_HEADER3_head
    class FWPM_NET_EVENT_HEADER3__Anonymous1_e__Union(Union):
        pass
    FWPM_NET_EVENT_HEADER3__Anonymous1_e__Union._fields_ = [
        ("localAddrV4", UInt32),
        ("localAddrV6", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_ARRAY16),
    ]
    class FWPM_NET_EVENT_HEADER3__Anonymous2_e__Union(Union):
        pass
    FWPM_NET_EVENT_HEADER3__Anonymous2_e__Union._fields_ = [
        ("remoteAddrV4", UInt32),
        ("remoteAddrV6", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_ARRAY16),
    ]
    FWPM_NET_EVENT_HEADER3._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
    ]
    FWPM_NET_EVENT_HEADER3._fields_ = [
        ("timeStamp", win32more.Foundation.FILETIME),
        ("flags", UInt32),
        ("ipVersion", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION),
        ("ipProtocol", Byte),
        ("Anonymous1", FWPM_NET_EVENT_HEADER3__Anonymous1_e__Union),
        ("Anonymous2", FWPM_NET_EVENT_HEADER3__Anonymous2_e__Union),
        ("localPort", UInt16),
        ("remotePort", UInt16),
        ("scopeId", UInt32),
        ("appId", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
        ("userId", POINTER(win32more.Security.SID_head)),
        ("addressFamily", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_AF),
        ("packageSid", POINTER(win32more.Security.SID_head)),
        ("enterpriseId", win32more.Foundation.PWSTR),
        ("policyFlags", UInt64),
        ("effectiveName", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
    ]
    return FWPM_NET_EVENT_HEADER3
FWPM_NET_EVENT_TYPE = Int32
FWPM_NET_EVENT_TYPE_IKEEXT_MM_FAILURE = 0
FWPM_NET_EVENT_TYPE_IKEEXT_QM_FAILURE = 1
FWPM_NET_EVENT_TYPE_IKEEXT_EM_FAILURE = 2
FWPM_NET_EVENT_TYPE_CLASSIFY_DROP = 3
FWPM_NET_EVENT_TYPE_IPSEC_KERNEL_DROP = 4
FWPM_NET_EVENT_TYPE_IPSEC_DOSP_DROP = 5
FWPM_NET_EVENT_TYPE_CLASSIFY_ALLOW = 6
FWPM_NET_EVENT_TYPE_CAPABILITY_DROP = 7
FWPM_NET_EVENT_TYPE_CAPABILITY_ALLOW = 8
FWPM_NET_EVENT_TYPE_CLASSIFY_DROP_MAC = 9
FWPM_NET_EVENT_TYPE_LPM_PACKET_ARRIVAL = 10
FWPM_NET_EVENT_TYPE_MAX = 11
def _define_FWPM_NET_EVENT_IKEEXT_MM_FAILURE0_head():
    class FWPM_NET_EVENT_IKEEXT_MM_FAILURE0(Structure):
        pass
    return FWPM_NET_EVENT_IKEEXT_MM_FAILURE0
def _define_FWPM_NET_EVENT_IKEEXT_MM_FAILURE0():
    FWPM_NET_EVENT_IKEEXT_MM_FAILURE0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_MM_FAILURE0_head
    FWPM_NET_EVENT_IKEEXT_MM_FAILURE0._fields_ = [
        ("failureErrorCode", UInt32),
        ("failurePoint", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_FAILURE_POINT),
        ("flags", UInt32),
        ("keyingModuleType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEY_MODULE_TYPE),
        ("mmState", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_MM_SA_STATE),
        ("saRole", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_ROLE),
        ("mmAuthMethod", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD_TYPE),
        ("endCertHash", Byte * 20),
        ("mmId", UInt64),
        ("mmFilterId", UInt64),
    ]
    return FWPM_NET_EVENT_IKEEXT_MM_FAILURE0
def _define_FWPM_NET_EVENT_IKEEXT_MM_FAILURE1_head():
    class FWPM_NET_EVENT_IKEEXT_MM_FAILURE1(Structure):
        pass
    return FWPM_NET_EVENT_IKEEXT_MM_FAILURE1
def _define_FWPM_NET_EVENT_IKEEXT_MM_FAILURE1():
    FWPM_NET_EVENT_IKEEXT_MM_FAILURE1 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_MM_FAILURE1_head
    FWPM_NET_EVENT_IKEEXT_MM_FAILURE1._fields_ = [
        ("failureErrorCode", UInt32),
        ("failurePoint", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_FAILURE_POINT),
        ("flags", UInt32),
        ("keyingModuleType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEY_MODULE_TYPE),
        ("mmState", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_MM_SA_STATE),
        ("saRole", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_ROLE),
        ("mmAuthMethod", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD_TYPE),
        ("endCertHash", Byte * 20),
        ("mmId", UInt64),
        ("mmFilterId", UInt64),
        ("localPrincipalNameForAuth", win32more.Foundation.PWSTR),
        ("remotePrincipalNameForAuth", win32more.Foundation.PWSTR),
        ("numLocalPrincipalGroupSids", UInt32),
        ("localPrincipalGroupSids", POINTER(win32more.Foundation.PWSTR)),
        ("numRemotePrincipalGroupSids", UInt32),
        ("remotePrincipalGroupSids", POINTER(win32more.Foundation.PWSTR)),
    ]
    return FWPM_NET_EVENT_IKEEXT_MM_FAILURE1
def _define_FWPM_NET_EVENT_IKEEXT_MM_FAILURE2__head():
    class FWPM_NET_EVENT_IKEEXT_MM_FAILURE2_(Structure):
        pass
    return FWPM_NET_EVENT_IKEEXT_MM_FAILURE2_
def _define_FWPM_NET_EVENT_IKEEXT_MM_FAILURE2_():
    FWPM_NET_EVENT_IKEEXT_MM_FAILURE2_ = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_MM_FAILURE2__head
    FWPM_NET_EVENT_IKEEXT_MM_FAILURE2_._fields_ = [
        ("failureErrorCode", UInt32),
        ("failurePoint", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_FAILURE_POINT),
        ("flags", UInt32),
        ("keyingModuleType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEY_MODULE_TYPE),
        ("mmState", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_MM_SA_STATE),
        ("saRole", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_ROLE),
        ("mmAuthMethod", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD_TYPE),
        ("endCertHash", Byte * 20),
        ("mmId", UInt64),
        ("mmFilterId", UInt64),
        ("localPrincipalNameForAuth", win32more.Foundation.PWSTR),
        ("remotePrincipalNameForAuth", win32more.Foundation.PWSTR),
        ("numLocalPrincipalGroupSids", UInt32),
        ("localPrincipalGroupSids", POINTER(win32more.Foundation.PWSTR)),
        ("numRemotePrincipalGroupSids", UInt32),
        ("remotePrincipalGroupSids", POINTER(win32more.Foundation.PWSTR)),
        ("providerContextKey", POINTER(Guid)),
    ]
    return FWPM_NET_EVENT_IKEEXT_MM_FAILURE2_
def _define_FWPM_NET_EVENT_IKEEXT_QM_FAILURE0_head():
    class FWPM_NET_EVENT_IKEEXT_QM_FAILURE0(Structure):
        pass
    return FWPM_NET_EVENT_IKEEXT_QM_FAILURE0
def _define_FWPM_NET_EVENT_IKEEXT_QM_FAILURE0():
    FWPM_NET_EVENT_IKEEXT_QM_FAILURE0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_QM_FAILURE0_head
    class FWPM_NET_EVENT_IKEEXT_QM_FAILURE0__Anonymous1_e__Union(Union):
        pass
    FWPM_NET_EVENT_IKEEXT_QM_FAILURE0__Anonymous1_e__Union._fields_ = [
        ("localSubNet", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_CONDITION_VALUE0),
    ]
    class FWPM_NET_EVENT_IKEEXT_QM_FAILURE0__Anonymous2_e__Union(Union):
        pass
    FWPM_NET_EVENT_IKEEXT_QM_FAILURE0__Anonymous2_e__Union._fields_ = [
        ("remoteSubNet", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_CONDITION_VALUE0),
    ]
    FWPM_NET_EVENT_IKEEXT_QM_FAILURE0._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
    ]
    FWPM_NET_EVENT_IKEEXT_QM_FAILURE0._fields_ = [
        ("failureErrorCode", UInt32),
        ("failurePoint", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_FAILURE_POINT),
        ("keyingModuleType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEY_MODULE_TYPE),
        ("qmState", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_QM_SA_STATE),
        ("saRole", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_ROLE),
        ("saTrafficType", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_TYPE),
        ("Anonymous1", FWPM_NET_EVENT_IKEEXT_QM_FAILURE0__Anonymous1_e__Union),
        ("Anonymous2", FWPM_NET_EVENT_IKEEXT_QM_FAILURE0__Anonymous2_e__Union),
        ("qmFilterId", UInt64),
    ]
    return FWPM_NET_EVENT_IKEEXT_QM_FAILURE0
def _define_FWPM_NET_EVENT_IKEEXT_QM_FAILURE1__head():
    class FWPM_NET_EVENT_IKEEXT_QM_FAILURE1_(Structure):
        pass
    return FWPM_NET_EVENT_IKEEXT_QM_FAILURE1_
def _define_FWPM_NET_EVENT_IKEEXT_QM_FAILURE1_():
    FWPM_NET_EVENT_IKEEXT_QM_FAILURE1_ = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_QM_FAILURE1__head
    class FWPM_NET_EVENT_IKEEXT_QM_FAILURE1___Anonymous1_e__Union(Union):
        pass
    FWPM_NET_EVENT_IKEEXT_QM_FAILURE1___Anonymous1_e__Union._fields_ = [
        ("localSubNet", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_CONDITION_VALUE0),
    ]
    class FWPM_NET_EVENT_IKEEXT_QM_FAILURE1___Anonymous2_e__Union(Union):
        pass
    FWPM_NET_EVENT_IKEEXT_QM_FAILURE1___Anonymous2_e__Union._fields_ = [
        ("remoteSubNet", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_CONDITION_VALUE0),
    ]
    FWPM_NET_EVENT_IKEEXT_QM_FAILURE1_._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
    ]
    FWPM_NET_EVENT_IKEEXT_QM_FAILURE1_._fields_ = [
        ("failureErrorCode", UInt32),
        ("failurePoint", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_FAILURE_POINT),
        ("keyingModuleType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEY_MODULE_TYPE),
        ("qmState", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_QM_SA_STATE),
        ("saRole", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_ROLE),
        ("saTrafficType", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_TYPE),
        ("Anonymous1", FWPM_NET_EVENT_IKEEXT_QM_FAILURE1___Anonymous1_e__Union),
        ("Anonymous2", FWPM_NET_EVENT_IKEEXT_QM_FAILURE1___Anonymous2_e__Union),
        ("qmFilterId", UInt64),
        ("mmSaLuid", UInt64),
        ("mmProviderContextKey", Guid),
    ]
    return FWPM_NET_EVENT_IKEEXT_QM_FAILURE1_
def _define_FWPM_NET_EVENT_IKEEXT_EM_FAILURE0_head():
    class FWPM_NET_EVENT_IKEEXT_EM_FAILURE0(Structure):
        pass
    return FWPM_NET_EVENT_IKEEXT_EM_FAILURE0
def _define_FWPM_NET_EVENT_IKEEXT_EM_FAILURE0():
    FWPM_NET_EVENT_IKEEXT_EM_FAILURE0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_EM_FAILURE0_head
    FWPM_NET_EVENT_IKEEXT_EM_FAILURE0._fields_ = [
        ("failureErrorCode", UInt32),
        ("failurePoint", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_FAILURE_POINT),
        ("flags", UInt32),
        ("emState", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_EM_SA_STATE),
        ("saRole", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_ROLE),
        ("emAuthMethod", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD_TYPE),
        ("endCertHash", Byte * 20),
        ("mmId", UInt64),
        ("qmFilterId", UInt64),
    ]
    return FWPM_NET_EVENT_IKEEXT_EM_FAILURE0
def _define_FWPM_NET_EVENT_IKEEXT_EM_FAILURE1_head():
    class FWPM_NET_EVENT_IKEEXT_EM_FAILURE1(Structure):
        pass
    return FWPM_NET_EVENT_IKEEXT_EM_FAILURE1
def _define_FWPM_NET_EVENT_IKEEXT_EM_FAILURE1():
    FWPM_NET_EVENT_IKEEXT_EM_FAILURE1 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_EM_FAILURE1_head
    FWPM_NET_EVENT_IKEEXT_EM_FAILURE1._fields_ = [
        ("failureErrorCode", UInt32),
        ("failurePoint", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_FAILURE_POINT),
        ("flags", UInt32),
        ("emState", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_EM_SA_STATE),
        ("saRole", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_ROLE),
        ("emAuthMethod", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD_TYPE),
        ("endCertHash", Byte * 20),
        ("mmId", UInt64),
        ("qmFilterId", UInt64),
        ("localPrincipalNameForAuth", win32more.Foundation.PWSTR),
        ("remotePrincipalNameForAuth", win32more.Foundation.PWSTR),
        ("numLocalPrincipalGroupSids", UInt32),
        ("localPrincipalGroupSids", POINTER(win32more.Foundation.PWSTR)),
        ("numRemotePrincipalGroupSids", UInt32),
        ("remotePrincipalGroupSids", POINTER(win32more.Foundation.PWSTR)),
        ("saTrafficType", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_TYPE),
    ]
    return FWPM_NET_EVENT_IKEEXT_EM_FAILURE1
def _define_FWPM_NET_EVENT_CLASSIFY_DROP0_head():
    class FWPM_NET_EVENT_CLASSIFY_DROP0(Structure):
        pass
    return FWPM_NET_EVENT_CLASSIFY_DROP0
def _define_FWPM_NET_EVENT_CLASSIFY_DROP0():
    FWPM_NET_EVENT_CLASSIFY_DROP0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CLASSIFY_DROP0_head
    FWPM_NET_EVENT_CLASSIFY_DROP0._fields_ = [
        ("filterId", UInt64),
        ("layerId", UInt16),
    ]
    return FWPM_NET_EVENT_CLASSIFY_DROP0
def _define_FWPM_NET_EVENT_CLASSIFY_DROP1_head():
    class FWPM_NET_EVENT_CLASSIFY_DROP1(Structure):
        pass
    return FWPM_NET_EVENT_CLASSIFY_DROP1
def _define_FWPM_NET_EVENT_CLASSIFY_DROP1():
    FWPM_NET_EVENT_CLASSIFY_DROP1 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CLASSIFY_DROP1_head
    FWPM_NET_EVENT_CLASSIFY_DROP1._fields_ = [
        ("filterId", UInt64),
        ("layerId", UInt16),
        ("reauthReason", UInt32),
        ("originalProfile", UInt32),
        ("currentProfile", UInt32),
        ("msFwpDirection", UInt32),
        ("isLoopback", win32more.Foundation.BOOL),
    ]
    return FWPM_NET_EVENT_CLASSIFY_DROP1
def _define_FWPM_NET_EVENT_CLASSIFY_DROP2_head():
    class FWPM_NET_EVENT_CLASSIFY_DROP2(Structure):
        pass
    return FWPM_NET_EVENT_CLASSIFY_DROP2
def _define_FWPM_NET_EVENT_CLASSIFY_DROP2():
    FWPM_NET_EVENT_CLASSIFY_DROP2 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CLASSIFY_DROP2_head
    FWPM_NET_EVENT_CLASSIFY_DROP2._fields_ = [
        ("filterId", UInt64),
        ("layerId", UInt16),
        ("reauthReason", UInt32),
        ("originalProfile", UInt32),
        ("currentProfile", UInt32),
        ("msFwpDirection", UInt32),
        ("isLoopback", win32more.Foundation.BOOL),
        ("vSwitchId", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
        ("vSwitchSourcePort", UInt32),
        ("vSwitchDestinationPort", UInt32),
    ]
    return FWPM_NET_EVENT_CLASSIFY_DROP2
def _define_FWPM_NET_EVENT_CLASSIFY_DROP_MAC0_head():
    class FWPM_NET_EVENT_CLASSIFY_DROP_MAC0(Structure):
        pass
    return FWPM_NET_EVENT_CLASSIFY_DROP_MAC0
def _define_FWPM_NET_EVENT_CLASSIFY_DROP_MAC0():
    FWPM_NET_EVENT_CLASSIFY_DROP_MAC0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CLASSIFY_DROP_MAC0_head
    FWPM_NET_EVENT_CLASSIFY_DROP_MAC0._fields_ = [
        ("localMacAddr", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_ARRAY6),
        ("remoteMacAddr", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_ARRAY6),
        ("mediaType", UInt32),
        ("ifType", UInt32),
        ("etherType", UInt16),
        ("ndisPortNumber", UInt32),
        ("reserved", UInt32),
        ("vlanTag", UInt16),
        ("ifLuid", UInt64),
        ("filterId", UInt64),
        ("layerId", UInt16),
        ("reauthReason", UInt32),
        ("originalProfile", UInt32),
        ("currentProfile", UInt32),
        ("msFwpDirection", UInt32),
        ("isLoopback", win32more.Foundation.BOOL),
        ("vSwitchId", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB),
        ("vSwitchSourcePort", UInt32),
        ("vSwitchDestinationPort", UInt32),
    ]
    return FWPM_NET_EVENT_CLASSIFY_DROP_MAC0
def _define_FWPM_NET_EVENT_CLASSIFY_ALLOW0_head():
    class FWPM_NET_EVENT_CLASSIFY_ALLOW0(Structure):
        pass
    return FWPM_NET_EVENT_CLASSIFY_ALLOW0
def _define_FWPM_NET_EVENT_CLASSIFY_ALLOW0():
    FWPM_NET_EVENT_CLASSIFY_ALLOW0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CLASSIFY_ALLOW0_head
    FWPM_NET_EVENT_CLASSIFY_ALLOW0._fields_ = [
        ("filterId", UInt64),
        ("layerId", UInt16),
        ("reauthReason", UInt32),
        ("originalProfile", UInt32),
        ("currentProfile", UInt32),
        ("msFwpDirection", UInt32),
        ("isLoopback", win32more.Foundation.BOOL),
    ]
    return FWPM_NET_EVENT_CLASSIFY_ALLOW0
def _define_FWPM_NET_EVENT_IPSEC_KERNEL_DROP0_head():
    class FWPM_NET_EVENT_IPSEC_KERNEL_DROP0(Structure):
        pass
    return FWPM_NET_EVENT_IPSEC_KERNEL_DROP0
def _define_FWPM_NET_EVENT_IPSEC_KERNEL_DROP0():
    FWPM_NET_EVENT_IPSEC_KERNEL_DROP0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IPSEC_KERNEL_DROP0_head
    FWPM_NET_EVENT_IPSEC_KERNEL_DROP0._fields_ = [
        ("failureStatus", Int32),
        ("direction", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_DIRECTION),
        ("spi", UInt32),
        ("filterId", UInt64),
        ("layerId", UInt16),
    ]
    return FWPM_NET_EVENT_IPSEC_KERNEL_DROP0
def _define_FWPM_NET_EVENT_IPSEC_DOSP_DROP0_head():
    class FWPM_NET_EVENT_IPSEC_DOSP_DROP0(Structure):
        pass
    return FWPM_NET_EVENT_IPSEC_DOSP_DROP0
def _define_FWPM_NET_EVENT_IPSEC_DOSP_DROP0():
    FWPM_NET_EVENT_IPSEC_DOSP_DROP0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IPSEC_DOSP_DROP0_head
    class FWPM_NET_EVENT_IPSEC_DOSP_DROP0__Anonymous1_e__Union(Union):
        pass
    FWPM_NET_EVENT_IPSEC_DOSP_DROP0__Anonymous1_e__Union._fields_ = [
        ("publicHostV4Addr", UInt32),
        ("publicHostV6Addr", Byte * 16),
    ]
    class FWPM_NET_EVENT_IPSEC_DOSP_DROP0__Anonymous2_e__Union(Union):
        pass
    FWPM_NET_EVENT_IPSEC_DOSP_DROP0__Anonymous2_e__Union._fields_ = [
        ("internalHostV4Addr", UInt32),
        ("internalHostV6Addr", Byte * 16),
    ]
    FWPM_NET_EVENT_IPSEC_DOSP_DROP0._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
    ]
    FWPM_NET_EVENT_IPSEC_DOSP_DROP0._fields_ = [
        ("ipVersion", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION),
        ("Anonymous1", FWPM_NET_EVENT_IPSEC_DOSP_DROP0__Anonymous1_e__Union),
        ("Anonymous2", FWPM_NET_EVENT_IPSEC_DOSP_DROP0__Anonymous2_e__Union),
        ("failureStatus", Int32),
        ("direction", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_DIRECTION),
    ]
    return FWPM_NET_EVENT_IPSEC_DOSP_DROP0
FWPM_APPC_NETWORK_CAPABILITY_TYPE = Int32
FWPM_APPC_NETWORK_CAPABILITY_INTERNET_CLIENT = 0
FWPM_APPC_NETWORK_CAPABILITY_INTERNET_CLIENT_SERVER = 1
FWPM_APPC_NETWORK_CAPABILITY_INTERNET_PRIVATE_NETWORK = 2
def _define_FWPM_NET_EVENT_CAPABILITY_DROP0_head():
    class FWPM_NET_EVENT_CAPABILITY_DROP0(Structure):
        pass
    return FWPM_NET_EVENT_CAPABILITY_DROP0
def _define_FWPM_NET_EVENT_CAPABILITY_DROP0():
    FWPM_NET_EVENT_CAPABILITY_DROP0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CAPABILITY_DROP0_head
    FWPM_NET_EVENT_CAPABILITY_DROP0._fields_ = [
        ("networkCapabilityId", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_APPC_NETWORK_CAPABILITY_TYPE),
        ("filterId", UInt64),
        ("isLoopback", win32more.Foundation.BOOL),
    ]
    return FWPM_NET_EVENT_CAPABILITY_DROP0
def _define_FWPM_NET_EVENT_CAPABILITY_ALLOW0_head():
    class FWPM_NET_EVENT_CAPABILITY_ALLOW0(Structure):
        pass
    return FWPM_NET_EVENT_CAPABILITY_ALLOW0
def _define_FWPM_NET_EVENT_CAPABILITY_ALLOW0():
    FWPM_NET_EVENT_CAPABILITY_ALLOW0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CAPABILITY_ALLOW0_head
    FWPM_NET_EVENT_CAPABILITY_ALLOW0._fields_ = [
        ("networkCapabilityId", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_APPC_NETWORK_CAPABILITY_TYPE),
        ("filterId", UInt64),
        ("isLoopback", win32more.Foundation.BOOL),
    ]
    return FWPM_NET_EVENT_CAPABILITY_ALLOW0
def _define_FWPM_NET_EVENT_LPM_PACKET_ARRIVAL0__head():
    class FWPM_NET_EVENT_LPM_PACKET_ARRIVAL0_(Structure):
        pass
    return FWPM_NET_EVENT_LPM_PACKET_ARRIVAL0_
def _define_FWPM_NET_EVENT_LPM_PACKET_ARRIVAL0_():
    FWPM_NET_EVENT_LPM_PACKET_ARRIVAL0_ = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_LPM_PACKET_ARRIVAL0__head
    FWPM_NET_EVENT_LPM_PACKET_ARRIVAL0_._fields_ = [
        ("spi", UInt32),
    ]
    return FWPM_NET_EVENT_LPM_PACKET_ARRIVAL0_
def _define_FWPM_NET_EVENT0_head():
    class FWPM_NET_EVENT0(Structure):
        pass
    return FWPM_NET_EVENT0
def _define_FWPM_NET_EVENT0():
    FWPM_NET_EVENT0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT0_head
    class FWPM_NET_EVENT0__Anonymous_e__Union(Union):
        pass
    FWPM_NET_EVENT0__Anonymous_e__Union._fields_ = [
        ("ikeMmFailure", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_MM_FAILURE0_head)),
        ("ikeQmFailure", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_QM_FAILURE0_head)),
        ("ikeEmFailure", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_EM_FAILURE0_head)),
        ("classifyDrop", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CLASSIFY_DROP0_head)),
        ("ipsecDrop", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IPSEC_KERNEL_DROP0_head)),
        ("idpDrop", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IPSEC_DOSP_DROP0_head)),
    ]
    FWPM_NET_EVENT0._anonymous_ = [
        'Anonymous',
    ]
    FWPM_NET_EVENT0._fields_ = [
        ("header", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_HEADER0),
        ("type", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_TYPE),
        ("Anonymous", FWPM_NET_EVENT0__Anonymous_e__Union),
    ]
    return FWPM_NET_EVENT0
def _define_FWPM_NET_EVENT1_head():
    class FWPM_NET_EVENT1(Structure):
        pass
    return FWPM_NET_EVENT1
def _define_FWPM_NET_EVENT1():
    FWPM_NET_EVENT1 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT1_head
    class FWPM_NET_EVENT1__Anonymous_e__Union(Union):
        pass
    FWPM_NET_EVENT1__Anonymous_e__Union._fields_ = [
        ("ikeMmFailure", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_MM_FAILURE1_head)),
        ("ikeQmFailure", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_QM_FAILURE0_head)),
        ("ikeEmFailure", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_EM_FAILURE1_head)),
        ("classifyDrop", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CLASSIFY_DROP1_head)),
        ("ipsecDrop", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IPSEC_KERNEL_DROP0_head)),
        ("idpDrop", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IPSEC_DOSP_DROP0_head)),
    ]
    FWPM_NET_EVENT1._anonymous_ = [
        'Anonymous',
    ]
    FWPM_NET_EVENT1._fields_ = [
        ("header", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_HEADER1),
        ("type", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_TYPE),
        ("Anonymous", FWPM_NET_EVENT1__Anonymous_e__Union),
    ]
    return FWPM_NET_EVENT1
def _define_FWPM_NET_EVENT2_head():
    class FWPM_NET_EVENT2(Structure):
        pass
    return FWPM_NET_EVENT2
def _define_FWPM_NET_EVENT2():
    FWPM_NET_EVENT2 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT2_head
    class FWPM_NET_EVENT2__Anonymous_e__Union(Union):
        pass
    FWPM_NET_EVENT2__Anonymous_e__Union._fields_ = [
        ("ikeMmFailure", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_MM_FAILURE1_head)),
        ("ikeQmFailure", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_QM_FAILURE0_head)),
        ("ikeEmFailure", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_EM_FAILURE1_head)),
        ("classifyDrop", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CLASSIFY_DROP2_head)),
        ("ipsecDrop", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IPSEC_KERNEL_DROP0_head)),
        ("idpDrop", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IPSEC_DOSP_DROP0_head)),
        ("classifyAllow", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CLASSIFY_ALLOW0_head)),
        ("capabilityDrop", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CAPABILITY_DROP0_head)),
        ("capabilityAllow", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CAPABILITY_ALLOW0_head)),
        ("classifyDropMac", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CLASSIFY_DROP_MAC0_head)),
    ]
    FWPM_NET_EVENT2._anonymous_ = [
        'Anonymous',
    ]
    FWPM_NET_EVENT2._fields_ = [
        ("header", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_HEADER2),
        ("type", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_TYPE),
        ("Anonymous", FWPM_NET_EVENT2__Anonymous_e__Union),
    ]
    return FWPM_NET_EVENT2
def _define_FWPM_NET_EVENT3_head():
    class FWPM_NET_EVENT3(Structure):
        pass
    return FWPM_NET_EVENT3
def _define_FWPM_NET_EVENT3():
    FWPM_NET_EVENT3 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT3_head
    class FWPM_NET_EVENT3__Anonymous_e__Union(Union):
        pass
    FWPM_NET_EVENT3__Anonymous_e__Union._fields_ = [
        ("ikeMmFailure", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_MM_FAILURE1_head)),
        ("ikeQmFailure", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_QM_FAILURE0_head)),
        ("ikeEmFailure", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_EM_FAILURE1_head)),
        ("classifyDrop", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CLASSIFY_DROP2_head)),
        ("ipsecDrop", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IPSEC_KERNEL_DROP0_head)),
        ("idpDrop", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IPSEC_DOSP_DROP0_head)),
        ("classifyAllow", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CLASSIFY_ALLOW0_head)),
        ("capabilityDrop", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CAPABILITY_DROP0_head)),
        ("capabilityAllow", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CAPABILITY_ALLOW0_head)),
        ("classifyDropMac", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CLASSIFY_DROP_MAC0_head)),
    ]
    FWPM_NET_EVENT3._anonymous_ = [
        'Anonymous',
    ]
    FWPM_NET_EVENT3._fields_ = [
        ("header", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_HEADER3),
        ("type", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_TYPE),
        ("Anonymous", FWPM_NET_EVENT3__Anonymous_e__Union),
    ]
    return FWPM_NET_EVENT3
def _define_FWPM_NET_EVENT4__head():
    class FWPM_NET_EVENT4_(Structure):
        pass
    return FWPM_NET_EVENT4_
def _define_FWPM_NET_EVENT4_():
    FWPM_NET_EVENT4_ = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT4__head
    class FWPM_NET_EVENT4___Anonymous_e__Union(Union):
        pass
    FWPM_NET_EVENT4___Anonymous_e__Union._fields_ = [
        ("ikeMmFailure", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_MM_FAILURE2__head)),
        ("ikeQmFailure", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_QM_FAILURE1__head)),
        ("ikeEmFailure", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_EM_FAILURE1_head)),
        ("classifyDrop", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CLASSIFY_DROP2_head)),
        ("ipsecDrop", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IPSEC_KERNEL_DROP0_head)),
        ("idpDrop", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IPSEC_DOSP_DROP0_head)),
        ("classifyAllow", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CLASSIFY_ALLOW0_head)),
        ("capabilityDrop", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CAPABILITY_DROP0_head)),
        ("capabilityAllow", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CAPABILITY_ALLOW0_head)),
        ("classifyDropMac", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CLASSIFY_DROP_MAC0_head)),
    ]
    FWPM_NET_EVENT4_._anonymous_ = [
        'Anonymous',
    ]
    FWPM_NET_EVENT4_._fields_ = [
        ("header", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_HEADER3),
        ("type", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_TYPE),
        ("Anonymous", FWPM_NET_EVENT4___Anonymous_e__Union),
    ]
    return FWPM_NET_EVENT4_
def _define_FWPM_NET_EVENT5__head():
    class FWPM_NET_EVENT5_(Structure):
        pass
    return FWPM_NET_EVENT5_
def _define_FWPM_NET_EVENT5_():
    FWPM_NET_EVENT5_ = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT5__head
    class FWPM_NET_EVENT5___Anonymous_e__Union(Union):
        pass
    FWPM_NET_EVENT5___Anonymous_e__Union._fields_ = [
        ("ikeMmFailure", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_MM_FAILURE2__head)),
        ("ikeQmFailure", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_QM_FAILURE1__head)),
        ("ikeEmFailure", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_EM_FAILURE1_head)),
        ("classifyDrop", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CLASSIFY_DROP2_head)),
        ("ipsecDrop", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IPSEC_KERNEL_DROP0_head)),
        ("idpDrop", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IPSEC_DOSP_DROP0_head)),
        ("classifyAllow", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CLASSIFY_ALLOW0_head)),
        ("capabilityDrop", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CAPABILITY_DROP0_head)),
        ("capabilityAllow", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CAPABILITY_ALLOW0_head)),
        ("classifyDropMac", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CLASSIFY_DROP_MAC0_head)),
        ("lpmPacketArrival", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_LPM_PACKET_ARRIVAL0__head)),
    ]
    FWPM_NET_EVENT5_._anonymous_ = [
        'Anonymous',
    ]
    FWPM_NET_EVENT5_._fields_ = [
        ("header", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_HEADER3),
        ("type", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_TYPE),
        ("Anonymous", FWPM_NET_EVENT5___Anonymous_e__Union),
    ]
    return FWPM_NET_EVENT5_
def _define_FWPM_NET_EVENT_ENUM_TEMPLATE0_head():
    class FWPM_NET_EVENT_ENUM_TEMPLATE0(Structure):
        pass
    return FWPM_NET_EVENT_ENUM_TEMPLATE0
def _define_FWPM_NET_EVENT_ENUM_TEMPLATE0():
    FWPM_NET_EVENT_ENUM_TEMPLATE0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_ENUM_TEMPLATE0_head
    FWPM_NET_EVENT_ENUM_TEMPLATE0._fields_ = [
        ("startTime", win32more.Foundation.FILETIME),
        ("endTime", win32more.Foundation.FILETIME),
        ("numFilterConditions", UInt32),
        ("filterCondition", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER_CONDITION0_head)),
    ]
    return FWPM_NET_EVENT_ENUM_TEMPLATE0
def _define_FWPM_NET_EVENT_SUBSCRIPTION0_head():
    class FWPM_NET_EVENT_SUBSCRIPTION0(Structure):
        pass
    return FWPM_NET_EVENT_SUBSCRIPTION0
def _define_FWPM_NET_EVENT_SUBSCRIPTION0():
    FWPM_NET_EVENT_SUBSCRIPTION0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_SUBSCRIPTION0_head
    FWPM_NET_EVENT_SUBSCRIPTION0._fields_ = [
        ("enumTemplate", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_ENUM_TEMPLATE0_head)),
        ("flags", UInt32),
        ("sessionKey", Guid),
    ]
    return FWPM_NET_EVENT_SUBSCRIPTION0
FWPM_SYSTEM_PORT_TYPE = Int32
FWPM_SYSTEM_PORT_RPC_EPMAP = 0
FWPM_SYSTEM_PORT_TEREDO = 1
FWPM_SYSTEM_PORT_IPHTTPS_IN = 2
FWPM_SYSTEM_PORT_IPHTTPS_OUT = 3
FWPM_SYSTEM_PORT_TYPE_MAX = 4
def _define_FWPM_SYSTEM_PORTS_BY_TYPE0_head():
    class FWPM_SYSTEM_PORTS_BY_TYPE0(Structure):
        pass
    return FWPM_SYSTEM_PORTS_BY_TYPE0
def _define_FWPM_SYSTEM_PORTS_BY_TYPE0():
    FWPM_SYSTEM_PORTS_BY_TYPE0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SYSTEM_PORTS_BY_TYPE0_head
    FWPM_SYSTEM_PORTS_BY_TYPE0._fields_ = [
        ("type", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SYSTEM_PORT_TYPE),
        ("numPorts", UInt32),
        ("ports", POINTER(UInt16)),
    ]
    return FWPM_SYSTEM_PORTS_BY_TYPE0
def _define_FWPM_SYSTEM_PORTS0_head():
    class FWPM_SYSTEM_PORTS0(Structure):
        pass
    return FWPM_SYSTEM_PORTS0
def _define_FWPM_SYSTEM_PORTS0():
    FWPM_SYSTEM_PORTS0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SYSTEM_PORTS0_head
    FWPM_SYSTEM_PORTS0._fields_ = [
        ("numTypes", UInt32),
        ("types", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SYSTEM_PORTS_BY_TYPE0_head)),
    ]
    return FWPM_SYSTEM_PORTS0
def _define_FWPM_CONNECTION0_head():
    class FWPM_CONNECTION0(Structure):
        pass
    return FWPM_CONNECTION0
def _define_FWPM_CONNECTION0():
    FWPM_CONNECTION0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CONNECTION0_head
    class FWPM_CONNECTION0__Anonymous1_e__Union(Union):
        pass
    FWPM_CONNECTION0__Anonymous1_e__Union._fields_ = [
        ("localV4Address", UInt32),
        ("localV6Address", Byte * 16),
    ]
    class FWPM_CONNECTION0__Anonymous2_e__Union(Union):
        pass
    FWPM_CONNECTION0__Anonymous2_e__Union._fields_ = [
        ("remoteV4Address", UInt32),
        ("remoteV6Address", Byte * 16),
    ]
    FWPM_CONNECTION0._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
    ]
    FWPM_CONNECTION0._fields_ = [
        ("connectionId", UInt64),
        ("ipVersion", win32more.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION),
        ("Anonymous1", FWPM_CONNECTION0__Anonymous1_e__Union),
        ("Anonymous2", FWPM_CONNECTION0__Anonymous2_e__Union),
        ("providerKey", POINTER(Guid)),
        ("ipsecTrafficModeType", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_TYPE),
        ("keyModuleType", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEY_MODULE_TYPE),
        ("mmCrypto", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_PROPOSAL0),
        ("mmPeer", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL2),
        ("emPeer", win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL2),
        ("bytesTransferredIn", UInt64),
        ("bytesTransferredOut", UInt64),
        ("bytesTransferredTotal", UInt64),
        ("startSysTime", win32more.Foundation.FILETIME),
    ]
    return FWPM_CONNECTION0
def _define_FWPM_CONNECTION_ENUM_TEMPLATE0_head():
    class FWPM_CONNECTION_ENUM_TEMPLATE0(Structure):
        pass
    return FWPM_CONNECTION_ENUM_TEMPLATE0
def _define_FWPM_CONNECTION_ENUM_TEMPLATE0():
    FWPM_CONNECTION_ENUM_TEMPLATE0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CONNECTION_ENUM_TEMPLATE0_head
    FWPM_CONNECTION_ENUM_TEMPLATE0._fields_ = [
        ("connectionId", UInt64),
        ("flags", UInt32),
    ]
    return FWPM_CONNECTION_ENUM_TEMPLATE0
def _define_FWPM_CONNECTION_SUBSCRIPTION0_head():
    class FWPM_CONNECTION_SUBSCRIPTION0(Structure):
        pass
    return FWPM_CONNECTION_SUBSCRIPTION0
def _define_FWPM_CONNECTION_SUBSCRIPTION0():
    FWPM_CONNECTION_SUBSCRIPTION0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CONNECTION_SUBSCRIPTION0_head
    FWPM_CONNECTION_SUBSCRIPTION0._fields_ = [
        ("enumTemplate", POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CONNECTION_ENUM_TEMPLATE0_head)),
        ("flags", UInt32),
        ("sessionKey", Guid),
    ]
    return FWPM_CONNECTION_SUBSCRIPTION0
FWPM_CONNECTION_EVENT_TYPE = Int32
FWPM_CONNECTION_EVENT_ADD = 0
FWPM_CONNECTION_EVENT_DELETE = 1
FWPM_CONNECTION_EVENT_MAX = 2
FWPM_VSWITCH_EVENT_TYPE = Int32
FWPM_VSWITCH_EVENT_FILTER_ADD_TO_INCOMPLETE_LAYER = 0
FWPM_VSWITCH_EVENT_FILTER_ENGINE_NOT_IN_REQUIRED_POSITION = 1
FWPM_VSWITCH_EVENT_ENABLED_FOR_INSPECTION = 2
FWPM_VSWITCH_EVENT_DISABLED_FOR_INSPECTION = 3
FWPM_VSWITCH_EVENT_FILTER_ENGINE_REORDER = 4
FWPM_VSWITCH_EVENT_MAX = 5
def _define_FWPM_VSWITCH_EVENT0_head():
    class FWPM_VSWITCH_EVENT0(Structure):
        pass
    return FWPM_VSWITCH_EVENT0
def _define_FWPM_VSWITCH_EVENT0():
    FWPM_VSWITCH_EVENT0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_VSWITCH_EVENT0_head
    class FWPM_VSWITCH_EVENT0__Anonymous_e__Union(Union):
        pass
    class FWPM_VSWITCH_EVENT0__Anonymous_e__Union__reorderInfo_e__Struct(Structure):
        pass
    FWPM_VSWITCH_EVENT0__Anonymous_e__Union__reorderInfo_e__Struct._fields_ = [
        ("inRequiredPosition", win32more.Foundation.BOOL),
        ("numvSwitchFilterExtensions", UInt32),
        ("vSwitchFilterExtensions", POINTER(win32more.Foundation.PWSTR)),
    ]
    class FWPM_VSWITCH_EVENT0__Anonymous_e__Union__positionInfo_e__Struct(Structure):
        pass
    FWPM_VSWITCH_EVENT0__Anonymous_e__Union__positionInfo_e__Struct._fields_ = [
        ("numvSwitchFilterExtensions", UInt32),
        ("vSwitchFilterExtensions", POINTER(win32more.Foundation.PWSTR)),
    ]
    FWPM_VSWITCH_EVENT0__Anonymous_e__Union._fields_ = [
        ("positionInfo", FWPM_VSWITCH_EVENT0__Anonymous_e__Union__positionInfo_e__Struct),
        ("reorderInfo", FWPM_VSWITCH_EVENT0__Anonymous_e__Union__reorderInfo_e__Struct),
    ]
    FWPM_VSWITCH_EVENT0._anonymous_ = [
        'Anonymous',
    ]
    FWPM_VSWITCH_EVENT0._fields_ = [
        ("eventType", win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_VSWITCH_EVENT_TYPE),
        ("vSwitchId", win32more.Foundation.PWSTR),
        ("Anonymous", FWPM_VSWITCH_EVENT0__Anonymous_e__Union),
    ]
    return FWPM_VSWITCH_EVENT0
def _define_FWPM_VSWITCH_EVENT_SUBSCRIPTION0_head():
    class FWPM_VSWITCH_EVENT_SUBSCRIPTION0(Structure):
        pass
    return FWPM_VSWITCH_EVENT_SUBSCRIPTION0
def _define_FWPM_VSWITCH_EVENT_SUBSCRIPTION0():
    FWPM_VSWITCH_EVENT_SUBSCRIPTION0 = win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_VSWITCH_EVENT_SUBSCRIPTION0_head
    FWPM_VSWITCH_EVENT_SUBSCRIPTION0._fields_ = [
        ("flags", UInt32),
        ("sessionKey", Guid),
    ]
    return FWPM_VSWITCH_EVENT_SUBSCRIPTION0
def _define_FWPM_PROVIDER_CHANGE_CALLBACK0():
    return CFUNCTYPE(Void,c_void_p,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CHANGE0_head), use_last_error=False)
def _define_FWPM_PROVIDER_CONTEXT_CHANGE_CALLBACK0():
    return CFUNCTYPE(Void,c_void_p,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT_CHANGE0_head), use_last_error=False)
def _define_FWPM_SUBLAYER_CHANGE_CALLBACK0():
    return CFUNCTYPE(Void,c_void_p,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SUBLAYER_CHANGE0_head), use_last_error=False)
def _define_FWPM_CALLOUT_CHANGE_CALLBACK0():
    return CFUNCTYPE(Void,c_void_p,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CALLOUT_CHANGE0_head), use_last_error=False)
def _define_FWPM_FILTER_CHANGE_CALLBACK0():
    return CFUNCTYPE(Void,c_void_p,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER_CHANGE0_head), use_last_error=False)
def _define_IPSEC_SA_CONTEXT_CALLBACK0():
    return CFUNCTYPE(Void,c_void_p,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CONTEXT_CHANGE0_head), use_last_error=False)
def _define_IPSEC_KEY_MANAGER_KEY_DICTATION_CHECK0():
    return CFUNCTYPE(Void,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_TRAFFIC0_head),POINTER(win32more.Foundation.BOOL),POINTER(UInt32), use_last_error=False)
def _define_IPSEC_KEY_MANAGER_DICTATE_KEY0():
    return CFUNCTYPE(UInt32,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_DETAILS1_head),POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_DETAILS1_head),POINTER(win32more.Foundation.BOOL), use_last_error=False)
def _define_IPSEC_KEY_MANAGER_NOTIFY_KEY0():
    return CFUNCTYPE(Void,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_DETAILS1_head),POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_DETAILS1_head), use_last_error=False)
def _define_IPSEC_KEY_MANAGER_CALLBACKS0_head():
    class IPSEC_KEY_MANAGER_CALLBACKS0(Structure):
        pass
    return IPSEC_KEY_MANAGER_CALLBACKS0
def _define_IPSEC_KEY_MANAGER_CALLBACKS0():
    IPSEC_KEY_MANAGER_CALLBACKS0 = win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_KEY_MANAGER_CALLBACKS0_head
    IPSEC_KEY_MANAGER_CALLBACKS0._fields_ = [
        ("reserved", Guid),
        ("flags", UInt32),
        ("keyDictationCheck", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_KEY_MANAGER_KEY_DICTATION_CHECK0),
        ("keyDictation", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_KEY_MANAGER_DICTATE_KEY0),
        ("keyNotify", win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_KEY_MANAGER_NOTIFY_KEY0),
    ]
    return IPSEC_KEY_MANAGER_CALLBACKS0
def _define_FWPM_NET_EVENT_CALLBACK0():
    return CFUNCTYPE(Void,c_void_p,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT1_head), use_last_error=False)
def _define_FWPM_NET_EVENT_CALLBACK1():
    return CFUNCTYPE(Void,c_void_p,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT2_head), use_last_error=False)
def _define_FWPM_NET_EVENT_CALLBACK2():
    return CFUNCTYPE(Void,c_void_p,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT3_head), use_last_error=False)
def _define_FWPM_NET_EVENT_CALLBACK3():
    return CFUNCTYPE(Void,c_void_p,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT4__head), use_last_error=False)
def _define_FWPM_NET_EVENT_CALLBACK4():
    return CFUNCTYPE(Void,c_void_p,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT5__head), use_last_error=False)
def _define_FWPM_DYNAMIC_KEYWORD_CALLBACK0():
    return CFUNCTYPE(Void,c_void_p,c_void_p, use_last_error=False)
def _define_FWPM_SYSTEM_PORTS_CALLBACK0():
    return CFUNCTYPE(Void,c_void_p,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SYSTEM_PORTS0_head), use_last_error=False)
def _define_FWPM_CONNECTION_CALLBACK0():
    return CFUNCTYPE(Void,c_void_p,win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CONNECTION_EVENT_TYPE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CONNECTION0_head), use_last_error=False)
def _define_FWPM_VSWITCH_EVENT_CALLBACK0():
    return CFUNCTYPE(UInt32,c_void_p,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_VSWITCH_EVENT0_head), use_last_error=False)
def _define_DL_OUI_head():
    class DL_OUI(Union):
        pass
    return DL_OUI
def _define_DL_OUI():
    DL_OUI = win32more.NetworkManagement.WindowsFilteringPlatform.DL_OUI_head
    class DL_OUI__Anonymous_e__Struct(Structure):
        pass
    DL_OUI__Anonymous_e__Struct._fields_ = [
        ("_bitfield", Byte),
    ]
    DL_OUI._anonymous_ = [
        'Anonymous',
    ]
    DL_OUI._fields_ = [
        ("Byte", Byte * 3),
        ("Anonymous", DL_OUI__Anonymous_e__Struct),
    ]
    return DL_OUI
def _define_DL_EI48_head():
    class DL_EI48(Union):
        pass
    return DL_EI48
def _define_DL_EI48():
    DL_EI48 = win32more.NetworkManagement.WindowsFilteringPlatform.DL_EI48_head
    DL_EI48._fields_ = [
        ("Byte", Byte * 3),
    ]
    return DL_EI48
def _define_DL_EUI48_head():
    class DL_EUI48(Union):
        pass
    return DL_EUI48
def _define_DL_EUI48():
    DL_EUI48 = win32more.NetworkManagement.WindowsFilteringPlatform.DL_EUI48_head
    class DL_EUI48__Anonymous_e__Struct(Structure):
        pass
    DL_EUI48__Anonymous_e__Struct._fields_ = [
        ("Oui", win32more.NetworkManagement.WindowsFilteringPlatform.DL_OUI),
        ("Ei48", win32more.NetworkManagement.WindowsFilteringPlatform.DL_EI48),
    ]
    DL_EUI48._anonymous_ = [
        'Anonymous',
    ]
    DL_EUI48._fields_ = [
        ("Byte", Byte * 6),
        ("Anonymous", DL_EUI48__Anonymous_e__Struct),
    ]
    return DL_EUI48
def _define_DL_EI64_head():
    class DL_EI64(Union):
        pass
    return DL_EI64
def _define_DL_EI64():
    DL_EI64 = win32more.NetworkManagement.WindowsFilteringPlatform.DL_EI64_head
    DL_EI64._fields_ = [
        ("Byte", Byte * 5),
    ]
    return DL_EI64
def _define_DL_EUI64_head():
    class DL_EUI64(Union):
        pass
    return DL_EUI64
def _define_DL_EUI64():
    DL_EUI64 = win32more.NetworkManagement.WindowsFilteringPlatform.DL_EUI64_head
    class DL_EUI64__Anonymous_e__Struct(Structure):
        pass
    class DL_EUI64__Anonymous_e__Struct__Anonymous_e__Union(Union):
        pass
    class DL_EUI64__Anonymous_e__Struct__Anonymous_e__Union__Anonymous_e__Struct(Structure):
        pass
    DL_EUI64__Anonymous_e__Struct__Anonymous_e__Union__Anonymous_e__Struct._fields_ = [
        ("Type", Byte),
        ("Tse", Byte),
        ("Ei48", win32more.NetworkManagement.WindowsFilteringPlatform.DL_EI48),
    ]
    DL_EUI64__Anonymous_e__Struct__Anonymous_e__Union._anonymous_ = [
        'Anonymous',
    ]
    DL_EUI64__Anonymous_e__Struct__Anonymous_e__Union._fields_ = [
        ("Ei64", win32more.NetworkManagement.WindowsFilteringPlatform.DL_EI64),
        ("Anonymous", DL_EUI64__Anonymous_e__Struct__Anonymous_e__Union__Anonymous_e__Struct),
    ]
    DL_EUI64__Anonymous_e__Struct._anonymous_ = [
        'Anonymous',
    ]
    DL_EUI64__Anonymous_e__Struct._fields_ = [
        ("Oui", win32more.NetworkManagement.WindowsFilteringPlatform.DL_OUI),
        ("Anonymous", DL_EUI64__Anonymous_e__Struct__Anonymous_e__Union),
    ]
    DL_EUI64._anonymous_ = [
        'Anonymous',
    ]
    DL_EUI64._fields_ = [
        ("Byte", Byte * 8),
        ("Value", UInt64),
        ("Anonymous", DL_EUI64__Anonymous_e__Struct),
    ]
    return DL_EUI64
def _define_SNAP_HEADER_head():
    class SNAP_HEADER(Structure):
        pass
    return SNAP_HEADER
def _define_SNAP_HEADER():
    SNAP_HEADER = win32more.NetworkManagement.WindowsFilteringPlatform.SNAP_HEADER_head
    SNAP_HEADER._fields_ = [
        ("Dsap", Byte),
        ("Ssap", Byte),
        ("Control", Byte),
        ("Oui", Byte * 3),
        ("Type", UInt16),
    ]
    return SNAP_HEADER
def _define_ETHERNET_HEADER_head():
    class ETHERNET_HEADER(Structure):
        pass
    return ETHERNET_HEADER
def _define_ETHERNET_HEADER():
    ETHERNET_HEADER = win32more.NetworkManagement.WindowsFilteringPlatform.ETHERNET_HEADER_head
    class ETHERNET_HEADER__Anonymous_e__Union(Union):
        pass
    ETHERNET_HEADER__Anonymous_e__Union._fields_ = [
        ("Type", UInt16),
        ("Length", UInt16),
    ]
    ETHERNET_HEADER._anonymous_ = [
        'Anonymous',
    ]
    ETHERNET_HEADER._fields_ = [
        ("Destination", win32more.NetworkManagement.WindowsFilteringPlatform.DL_EUI48),
        ("Source", win32more.NetworkManagement.WindowsFilteringPlatform.DL_EUI48),
        ("Anonymous", ETHERNET_HEADER__Anonymous_e__Union),
    ]
    return ETHERNET_HEADER
def _define_VLAN_TAG_head():
    class VLAN_TAG(Structure):
        pass
    return VLAN_TAG
def _define_VLAN_TAG():
    VLAN_TAG = win32more.NetworkManagement.WindowsFilteringPlatform.VLAN_TAG_head
    class VLAN_TAG__Anonymous_e__Union(Union):
        pass
    class VLAN_TAG__Anonymous_e__Union__Anonymous_e__Struct(Structure):
        pass
    VLAN_TAG__Anonymous_e__Union__Anonymous_e__Struct._fields_ = [
        ("_bitfield", UInt16),
    ]
    VLAN_TAG__Anonymous_e__Union._anonymous_ = [
        'Anonymous',
    ]
    VLAN_TAG__Anonymous_e__Union._fields_ = [
        ("Tag", UInt16),
        ("Anonymous", VLAN_TAG__Anonymous_e__Union__Anonymous_e__Struct),
    ]
    VLAN_TAG._anonymous_ = [
        'Anonymous',
    ]
    VLAN_TAG._fields_ = [
        ("Anonymous", VLAN_TAG__Anonymous_e__Union),
        ("Type", UInt16),
    ]
    return VLAN_TAG
def _define_ICMP_HEADER_head():
    class ICMP_HEADER(Structure):
        pass
    return ICMP_HEADER
def _define_ICMP_HEADER():
    ICMP_HEADER = win32more.NetworkManagement.WindowsFilteringPlatform.ICMP_HEADER_head
    ICMP_HEADER._fields_ = [
        ("Type", Byte),
        ("Code", Byte),
        ("Checksum", UInt16),
    ]
    return ICMP_HEADER
def _define_ICMP_MESSAGE_head():
    class ICMP_MESSAGE(Structure):
        pass
    return ICMP_MESSAGE
def _define_ICMP_MESSAGE():
    ICMP_MESSAGE = win32more.NetworkManagement.WindowsFilteringPlatform.ICMP_MESSAGE_head
    class ICMP_MESSAGE__Data_e__Union(Union):
        pass
    ICMP_MESSAGE__Data_e__Union._fields_ = [
        ("Data32", UInt32 * 0),
        ("Data16", UInt16 * 2),
        ("Data8", Byte * 4),
    ]
    ICMP_MESSAGE._fields_ = [
        ("Header", win32more.NetworkManagement.WindowsFilteringPlatform.ICMP_HEADER),
        ("Data", ICMP_MESSAGE__Data_e__Union),
    ]
    return ICMP_MESSAGE
def _define_IPV4_HEADER_head():
    class IPV4_HEADER(Structure):
        pass
    return IPV4_HEADER
def _define_IPV4_HEADER():
    IPV4_HEADER = win32more.NetworkManagement.WindowsFilteringPlatform.IPV4_HEADER_head
    class IPV4_HEADER__Anonymous3_e__Union(Union):
        pass
    class IPV4_HEADER__Anonymous3_e__Union__Anonymous_e__Struct(Structure):
        pass
    IPV4_HEADER__Anonymous3_e__Union__Anonymous_e__Struct._fields_ = [
        ("_bitfield", UInt16),
    ]
    IPV4_HEADER__Anonymous3_e__Union._anonymous_ = [
        'Anonymous',
    ]
    IPV4_HEADER__Anonymous3_e__Union._fields_ = [
        ("FlagsAndOffset", UInt16),
        ("Anonymous", IPV4_HEADER__Anonymous3_e__Union__Anonymous_e__Struct),
    ]
    class IPV4_HEADER__Anonymous2_e__Union(Union):
        pass
    class IPV4_HEADER__Anonymous2_e__Union__Anonymous_e__Struct(Structure):
        pass
    IPV4_HEADER__Anonymous2_e__Union__Anonymous_e__Struct._fields_ = [
        ("_bitfield", Byte),
    ]
    IPV4_HEADER__Anonymous2_e__Union._anonymous_ = [
        'Anonymous',
    ]
    IPV4_HEADER__Anonymous2_e__Union._fields_ = [
        ("TypeOfServiceAndEcnField", Byte),
        ("Anonymous", IPV4_HEADER__Anonymous2_e__Union__Anonymous_e__Struct),
    ]
    class IPV4_HEADER__Anonymous1_e__Union(Union):
        pass
    class IPV4_HEADER__Anonymous1_e__Union__Anonymous_e__Struct(Structure):
        pass
    IPV4_HEADER__Anonymous1_e__Union__Anonymous_e__Struct._fields_ = [
        ("_bitfield", Byte),
    ]
    IPV4_HEADER__Anonymous1_e__Union._anonymous_ = [
        'Anonymous',
    ]
    IPV4_HEADER__Anonymous1_e__Union._fields_ = [
        ("VersionAndHeaderLength", Byte),
        ("Anonymous", IPV4_HEADER__Anonymous1_e__Union__Anonymous_e__Struct),
    ]
    IPV4_HEADER._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
        'Anonymous3',
    ]
    IPV4_HEADER._fields_ = [
        ("Anonymous1", IPV4_HEADER__Anonymous1_e__Union),
        ("Anonymous2", IPV4_HEADER__Anonymous2_e__Union),
        ("TotalLength", UInt16),
        ("Identification", UInt16),
        ("Anonymous3", IPV4_HEADER__Anonymous3_e__Union),
        ("TimeToLive", Byte),
        ("Protocol", Byte),
        ("HeaderChecksum", UInt16),
        ("SourceAddress", win32more.Networking.WinSock.IN_ADDR),
        ("DestinationAddress", win32more.Networking.WinSock.IN_ADDR),
    ]
    return IPV4_HEADER
def _define_IPV4_OPTION_HEADER_head():
    class IPV4_OPTION_HEADER(Structure):
        pass
    return IPV4_OPTION_HEADER
def _define_IPV4_OPTION_HEADER():
    IPV4_OPTION_HEADER = win32more.NetworkManagement.WindowsFilteringPlatform.IPV4_OPTION_HEADER_head
    class IPV4_OPTION_HEADER__Anonymous_e__Union(Union):
        pass
    class IPV4_OPTION_HEADER__Anonymous_e__Union__Anonymous_e__Struct(Structure):
        pass
    IPV4_OPTION_HEADER__Anonymous_e__Union__Anonymous_e__Struct._fields_ = [
        ("_bitfield", Byte),
    ]
    IPV4_OPTION_HEADER__Anonymous_e__Union._anonymous_ = [
        'Anonymous',
    ]
    IPV4_OPTION_HEADER__Anonymous_e__Union._fields_ = [
        ("OptionType", Byte),
        ("Anonymous", IPV4_OPTION_HEADER__Anonymous_e__Union__Anonymous_e__Struct),
    ]
    IPV4_OPTION_HEADER._anonymous_ = [
        'Anonymous',
    ]
    IPV4_OPTION_HEADER._fields_ = [
        ("Anonymous", IPV4_OPTION_HEADER__Anonymous_e__Union),
        ("OptionLength", Byte),
    ]
    return IPV4_OPTION_HEADER
IPV4_OPTION_TYPE = Int32
IP_OPT_EOL = 0
IP_OPT_NOP = 1
IP_OPT_SECURITY = 130
IP_OPT_LSRR = 131
IP_OPT_TS = 68
IP_OPT_RR = 7
IP_OPT_SSRR = 137
IP_OPT_SID = 136
IP_OPT_ROUTER_ALERT = 148
IP_OPT_MULTIDEST = 149
def _define_IPV4_TIMESTAMP_OPTION_head():
    class IPV4_TIMESTAMP_OPTION(Structure):
        pass
    return IPV4_TIMESTAMP_OPTION
def _define_IPV4_TIMESTAMP_OPTION():
    IPV4_TIMESTAMP_OPTION = win32more.NetworkManagement.WindowsFilteringPlatform.IPV4_TIMESTAMP_OPTION_head
    class IPV4_TIMESTAMP_OPTION__Anonymous_e__Union(Union):
        pass
    class IPV4_TIMESTAMP_OPTION__Anonymous_e__Union__Anonymous_e__Struct(Structure):
        pass
    IPV4_TIMESTAMP_OPTION__Anonymous_e__Union__Anonymous_e__Struct._fields_ = [
        ("_bitfield", Byte),
    ]
    IPV4_TIMESTAMP_OPTION__Anonymous_e__Union._anonymous_ = [
        'Anonymous',
    ]
    IPV4_TIMESTAMP_OPTION__Anonymous_e__Union._fields_ = [
        ("FlagsOverflow", Byte),
        ("Anonymous", IPV4_TIMESTAMP_OPTION__Anonymous_e__Union__Anonymous_e__Struct),
    ]
    IPV4_TIMESTAMP_OPTION._anonymous_ = [
        'Anonymous',
    ]
    IPV4_TIMESTAMP_OPTION._fields_ = [
        ("OptionHeader", win32more.NetworkManagement.WindowsFilteringPlatform.IPV4_OPTION_HEADER),
        ("Pointer", Byte),
        ("Anonymous", IPV4_TIMESTAMP_OPTION__Anonymous_e__Union),
    ]
    return IPV4_TIMESTAMP_OPTION
IP_OPTION_TIMESTAMP_FLAGS = Int32
IP_OPTION_TIMESTAMP_ONLY = 0
IP_OPTION_TIMESTAMP_ADDRESS = 1
IP_OPTION_TIMESTAMP_SPECIFIC_ADDRESS = 3
def _define_IPV4_ROUTING_HEADER_head():
    class IPV4_ROUTING_HEADER(Structure):
        pass
    return IPV4_ROUTING_HEADER
def _define_IPV4_ROUTING_HEADER():
    IPV4_ROUTING_HEADER = win32more.NetworkManagement.WindowsFilteringPlatform.IPV4_ROUTING_HEADER_head
    IPV4_ROUTING_HEADER._fields_ = [
        ("OptionHeader", win32more.NetworkManagement.WindowsFilteringPlatform.IPV4_OPTION_HEADER),
        ("Pointer", Byte),
    ]
    return IPV4_ROUTING_HEADER
ICMP4_UNREACH_CODE = Int32
ICMP4_UNREACH_NET = 0
ICMP4_UNREACH_HOST = 1
ICMP4_UNREACH_PROTOCOL = 2
ICMP4_UNREACH_PORT = 3
ICMP4_UNREACH_FRAG_NEEDED = 4
ICMP4_UNREACH_SOURCEROUTE_FAILED = 5
ICMP4_UNREACH_NET_UNKNOWN = 6
ICMP4_UNREACH_HOST_UNKNOWN = 7
ICMP4_UNREACH_ISOLATED = 8
ICMP4_UNREACH_NET_ADMIN = 9
ICMP4_UNREACH_HOST_ADMIN = 10
ICMP4_UNREACH_NET_TOS = 11
ICMP4_UNREACH_HOST_TOS = 12
ICMP4_UNREACH_ADMIN = 13
ICMP4_TIME_EXCEED_CODE = Int32
ICMP4_TIME_EXCEED_TRANSIT = 0
ICMP4_TIME_EXCEED_REASSEMBLY = 1
def _define_ICMPV4_ROUTER_SOLICIT_head():
    class ICMPV4_ROUTER_SOLICIT(Structure):
        pass
    return ICMPV4_ROUTER_SOLICIT
def _define_ICMPV4_ROUTER_SOLICIT():
    ICMPV4_ROUTER_SOLICIT = win32more.NetworkManagement.WindowsFilteringPlatform.ICMPV4_ROUTER_SOLICIT_head
    ICMPV4_ROUTER_SOLICIT._fields_ = [
        ("RsHeader", win32more.NetworkManagement.WindowsFilteringPlatform.ICMP_MESSAGE),
    ]
    return ICMPV4_ROUTER_SOLICIT
def _define_ICMPV4_ROUTER_ADVERT_HEADER_head():
    class ICMPV4_ROUTER_ADVERT_HEADER(Structure):
        pass
    return ICMPV4_ROUTER_ADVERT_HEADER
def _define_ICMPV4_ROUTER_ADVERT_HEADER():
    ICMPV4_ROUTER_ADVERT_HEADER = win32more.NetworkManagement.WindowsFilteringPlatform.ICMPV4_ROUTER_ADVERT_HEADER_head
    ICMPV4_ROUTER_ADVERT_HEADER._fields_ = [
        ("RaHeader", win32more.NetworkManagement.WindowsFilteringPlatform.ICMP_MESSAGE),
    ]
    return ICMPV4_ROUTER_ADVERT_HEADER
def _define_ICMPV4_ROUTER_ADVERT_ENTRY_head():
    class ICMPV4_ROUTER_ADVERT_ENTRY(Structure):
        pass
    return ICMPV4_ROUTER_ADVERT_ENTRY
def _define_ICMPV4_ROUTER_ADVERT_ENTRY():
    ICMPV4_ROUTER_ADVERT_ENTRY = win32more.NetworkManagement.WindowsFilteringPlatform.ICMPV4_ROUTER_ADVERT_ENTRY_head
    ICMPV4_ROUTER_ADVERT_ENTRY._fields_ = [
        ("RouterAdvertAddr", win32more.Networking.WinSock.IN_ADDR),
        ("PreferenceLevel", Int32),
    ]
    return ICMPV4_ROUTER_ADVERT_ENTRY
def _define_ICMPV4_TIMESTAMP_MESSAGE_head():
    class ICMPV4_TIMESTAMP_MESSAGE(Structure):
        pass
    return ICMPV4_TIMESTAMP_MESSAGE
def _define_ICMPV4_TIMESTAMP_MESSAGE():
    ICMPV4_TIMESTAMP_MESSAGE = win32more.NetworkManagement.WindowsFilteringPlatform.ICMPV4_TIMESTAMP_MESSAGE_head
    ICMPV4_TIMESTAMP_MESSAGE._fields_ = [
        ("Header", win32more.NetworkManagement.WindowsFilteringPlatform.ICMP_MESSAGE),
        ("OriginateTimestamp", UInt32),
        ("ReceiveTimestamp", UInt32),
        ("TransmitTimestamp", UInt32),
    ]
    return ICMPV4_TIMESTAMP_MESSAGE
def _define_ICMPV4_ADDRESS_MASK_MESSAGE_head():
    class ICMPV4_ADDRESS_MASK_MESSAGE(Structure):
        pass
    return ICMPV4_ADDRESS_MASK_MESSAGE
def _define_ICMPV4_ADDRESS_MASK_MESSAGE():
    ICMPV4_ADDRESS_MASK_MESSAGE = win32more.NetworkManagement.WindowsFilteringPlatform.ICMPV4_ADDRESS_MASK_MESSAGE_head
    ICMPV4_ADDRESS_MASK_MESSAGE._fields_ = [
        ("Header", win32more.NetworkManagement.WindowsFilteringPlatform.ICMP_MESSAGE),
        ("AddressMask", UInt32),
    ]
    return ICMPV4_ADDRESS_MASK_MESSAGE
def _define_ARP_HEADER_head():
    class ARP_HEADER(Structure):
        pass
    return ARP_HEADER
def _define_ARP_HEADER():
    ARP_HEADER = win32more.NetworkManagement.WindowsFilteringPlatform.ARP_HEADER_head
    ARP_HEADER._fields_ = [
        ("HardwareAddressSpace", UInt16),
        ("ProtocolAddressSpace", UInt16),
        ("HardwareAddressLength", Byte),
        ("ProtocolAddressLength", Byte),
        ("Opcode", UInt16),
        ("SenderHardwareAddress", Byte * 0),
    ]
    return ARP_HEADER
ARP_OPCODE = Int32
ARP_REQUEST = 1
ARP_RESPONSE = 2
ARP_HARDWARE_TYPE = Int32
ARP_HW_ENET = 1
ARP_HW_802 = 6
def _define_IGMP_HEADER_head():
    class IGMP_HEADER(Structure):
        pass
    return IGMP_HEADER
def _define_IGMP_HEADER():
    IGMP_HEADER = win32more.NetworkManagement.WindowsFilteringPlatform.IGMP_HEADER_head
    class IGMP_HEADER__Anonymous1_e__Union(Union):
        pass
    class IGMP_HEADER__Anonymous1_e__Union__Anonymous_e__Struct(Structure):
        pass
    IGMP_HEADER__Anonymous1_e__Union__Anonymous_e__Struct._fields_ = [
        ("_bitfield", Byte),
    ]
    IGMP_HEADER__Anonymous1_e__Union._anonymous_ = [
        'Anonymous',
    ]
    IGMP_HEADER__Anonymous1_e__Union._fields_ = [
        ("Anonymous", IGMP_HEADER__Anonymous1_e__Union__Anonymous_e__Struct),
        ("VersionType", Byte),
    ]
    class IGMP_HEADER__Anonymous2_e__Union(Union):
        pass
    IGMP_HEADER__Anonymous2_e__Union._fields_ = [
        ("Reserved", Byte),
        ("MaxRespTime", Byte),
        ("Code", Byte),
    ]
    IGMP_HEADER._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
    ]
    IGMP_HEADER._fields_ = [
        ("Anonymous1", IGMP_HEADER__Anonymous1_e__Union),
        ("Anonymous2", IGMP_HEADER__Anonymous2_e__Union),
        ("Checksum", UInt16),
        ("MulticastAddress", win32more.Networking.WinSock.IN_ADDR),
    ]
    return IGMP_HEADER
IGMP_MAX_RESP_CODE_TYPE = Int32
IGMP_MAX_RESP_CODE_TYPE_NORMAL = 0
IGMP_MAX_RESP_CODE_TYPE_FLOAT = 1
def _define_IGMPV3_QUERY_HEADER_head():
    class IGMPV3_QUERY_HEADER(Structure):
        pass
    return IGMPV3_QUERY_HEADER
def _define_IGMPV3_QUERY_HEADER():
    IGMPV3_QUERY_HEADER = win32more.NetworkManagement.WindowsFilteringPlatform.IGMPV3_QUERY_HEADER_head
    class IGMPV3_QUERY_HEADER__Anonymous2_e__Union(Union):
        pass
    class IGMPV3_QUERY_HEADER__Anonymous2_e__Union__Anonymous_e__Struct(Structure):
        pass
    IGMPV3_QUERY_HEADER__Anonymous2_e__Union__Anonymous_e__Struct._fields_ = [
        ("_bitfield", Byte),
    ]
    IGMPV3_QUERY_HEADER__Anonymous2_e__Union._anonymous_ = [
        'Anonymous',
    ]
    IGMPV3_QUERY_HEADER__Anonymous2_e__Union._fields_ = [
        ("QueriersQueryInterfaceCode", Byte),
        ("Anonymous", IGMPV3_QUERY_HEADER__Anonymous2_e__Union__Anonymous_e__Struct),
    ]
    class IGMPV3_QUERY_HEADER__Anonymous1_e__Union(Union):
        pass
    class IGMPV3_QUERY_HEADER__Anonymous1_e__Union__Anonymous_e__Struct(Structure):
        pass
    IGMPV3_QUERY_HEADER__Anonymous1_e__Union__Anonymous_e__Struct._fields_ = [
        ("_bitfield", Byte),
    ]
    IGMPV3_QUERY_HEADER__Anonymous1_e__Union._anonymous_ = [
        'Anonymous',
    ]
    IGMPV3_QUERY_HEADER__Anonymous1_e__Union._fields_ = [
        ("MaxRespCode", Byte),
        ("Anonymous", IGMPV3_QUERY_HEADER__Anonymous1_e__Union__Anonymous_e__Struct),
    ]
    IGMPV3_QUERY_HEADER._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
    ]
    IGMPV3_QUERY_HEADER._fields_ = [
        ("Type", Byte),
        ("Anonymous1", IGMPV3_QUERY_HEADER__Anonymous1_e__Union),
        ("Checksum", UInt16),
        ("MulticastAddress", win32more.Networking.WinSock.IN_ADDR),
        ("_bitfield", Byte),
        ("Anonymous2", IGMPV3_QUERY_HEADER__Anonymous2_e__Union),
        ("SourceCount", UInt16),
    ]
    return IGMPV3_QUERY_HEADER
def _define_IGMPV3_REPORT_RECORD_HEADER_head():
    class IGMPV3_REPORT_RECORD_HEADER(Structure):
        pass
    return IGMPV3_REPORT_RECORD_HEADER
def _define_IGMPV3_REPORT_RECORD_HEADER():
    IGMPV3_REPORT_RECORD_HEADER = win32more.NetworkManagement.WindowsFilteringPlatform.IGMPV3_REPORT_RECORD_HEADER_head
    IGMPV3_REPORT_RECORD_HEADER._fields_ = [
        ("Type", Byte),
        ("AuxillaryDataLength", Byte),
        ("SourceCount", UInt16),
        ("MulticastAddress", win32more.Networking.WinSock.IN_ADDR),
    ]
    return IGMPV3_REPORT_RECORD_HEADER
def _define_IGMPV3_REPORT_HEADER_head():
    class IGMPV3_REPORT_HEADER(Structure):
        pass
    return IGMPV3_REPORT_HEADER
def _define_IGMPV3_REPORT_HEADER():
    IGMPV3_REPORT_HEADER = win32more.NetworkManagement.WindowsFilteringPlatform.IGMPV3_REPORT_HEADER_head
    IGMPV3_REPORT_HEADER._fields_ = [
        ("Type", Byte),
        ("Reserved", Byte),
        ("Checksum", UInt16),
        ("Reserved2", UInt16),
        ("RecordCount", UInt16),
    ]
    return IGMPV3_REPORT_HEADER
def _define_IPV6_HEADER_head():
    class IPV6_HEADER(Structure):
        pass
    return IPV6_HEADER
def _define_IPV6_HEADER():
    IPV6_HEADER = win32more.NetworkManagement.WindowsFilteringPlatform.IPV6_HEADER_head
    class IPV6_HEADER__Anonymous_e__Union(Union):
        pass
    class IPV6_HEADER__Anonymous_e__Union__Anonymous_e__Struct(Structure):
        pass
    IPV6_HEADER__Anonymous_e__Union__Anonymous_e__Struct._fields_ = [
        ("_bitfield", UInt32),
    ]
    IPV6_HEADER__Anonymous_e__Union._anonymous_ = [
        'Anonymous',
    ]
    IPV6_HEADER__Anonymous_e__Union._fields_ = [
        ("VersionClassFlow", UInt32),
        ("Anonymous", IPV6_HEADER__Anonymous_e__Union__Anonymous_e__Struct),
    ]
    IPV6_HEADER._anonymous_ = [
        'Anonymous',
    ]
    IPV6_HEADER._fields_ = [
        ("Anonymous", IPV6_HEADER__Anonymous_e__Union),
        ("PayloadLength", UInt16),
        ("NextHeader", Byte),
        ("HopLimit", Byte),
        ("SourceAddress", win32more.Networking.WinSock.IN6_ADDR),
        ("DestinationAddress", win32more.Networking.WinSock.IN6_ADDR),
    ]
    return IPV6_HEADER
def _define_IPV6_FRAGMENT_HEADER_head():
    class IPV6_FRAGMENT_HEADER(Structure):
        pass
    return IPV6_FRAGMENT_HEADER
def _define_IPV6_FRAGMENT_HEADER():
    IPV6_FRAGMENT_HEADER = win32more.NetworkManagement.WindowsFilteringPlatform.IPV6_FRAGMENT_HEADER_head
    class IPV6_FRAGMENT_HEADER__Anonymous_e__Union(Union):
        pass
    class IPV6_FRAGMENT_HEADER__Anonymous_e__Union__Anonymous_e__Struct(Structure):
        pass
    IPV6_FRAGMENT_HEADER__Anonymous_e__Union__Anonymous_e__Struct._fields_ = [
        ("_bitfield", UInt16),
    ]
    IPV6_FRAGMENT_HEADER__Anonymous_e__Union._anonymous_ = [
        'Anonymous',
    ]
    IPV6_FRAGMENT_HEADER__Anonymous_e__Union._fields_ = [
        ("Anonymous", IPV6_FRAGMENT_HEADER__Anonymous_e__Union__Anonymous_e__Struct),
        ("OffsetAndFlags", UInt16),
    ]
    IPV6_FRAGMENT_HEADER._anonymous_ = [
        'Anonymous',
    ]
    IPV6_FRAGMENT_HEADER._fields_ = [
        ("NextHeader", Byte),
        ("Reserved", Byte),
        ("Anonymous", IPV6_FRAGMENT_HEADER__Anonymous_e__Union),
        ("Id", UInt32),
    ]
    return IPV6_FRAGMENT_HEADER
def _define_IPV6_EXTENSION_HEADER_head():
    class IPV6_EXTENSION_HEADER(Structure):
        pass
    return IPV6_EXTENSION_HEADER
def _define_IPV6_EXTENSION_HEADER():
    IPV6_EXTENSION_HEADER = win32more.NetworkManagement.WindowsFilteringPlatform.IPV6_EXTENSION_HEADER_head
    IPV6_EXTENSION_HEADER._fields_ = [
        ("NextHeader", Byte),
        ("Length", Byte),
    ]
    return IPV6_EXTENSION_HEADER
def _define_IPV6_OPTION_HEADER_head():
    class IPV6_OPTION_HEADER(Structure):
        pass
    return IPV6_OPTION_HEADER
def _define_IPV6_OPTION_HEADER():
    IPV6_OPTION_HEADER = win32more.NetworkManagement.WindowsFilteringPlatform.IPV6_OPTION_HEADER_head
    IPV6_OPTION_HEADER._fields_ = [
        ("Type", Byte),
        ("DataLength", Byte),
    ]
    return IPV6_OPTION_HEADER
IPV6_OPTION_TYPE = Int32
IP6OPT_PAD1 = 0
IP6OPT_PADN = 1
IP6OPT_TUNNEL_LIMIT = 4
IP6OPT_ROUTER_ALERT = 5
IP6OPT_JUMBO = 194
IP6OPT_NSAP_ADDR = 195
def _define_IPV6_OPTION_JUMBOGRAM_head():
    class IPV6_OPTION_JUMBOGRAM(Structure):
        pass
    return IPV6_OPTION_JUMBOGRAM
def _define_IPV6_OPTION_JUMBOGRAM():
    IPV6_OPTION_JUMBOGRAM = win32more.NetworkManagement.WindowsFilteringPlatform.IPV6_OPTION_JUMBOGRAM_head
    IPV6_OPTION_JUMBOGRAM._fields_ = [
        ("Header", win32more.NetworkManagement.WindowsFilteringPlatform.IPV6_OPTION_HEADER),
        ("JumbogramLength", Byte * 4),
    ]
    return IPV6_OPTION_JUMBOGRAM
def _define_IPV6_OPTION_ROUTER_ALERT_head():
    class IPV6_OPTION_ROUTER_ALERT(Structure):
        pass
    return IPV6_OPTION_ROUTER_ALERT
def _define_IPV6_OPTION_ROUTER_ALERT():
    IPV6_OPTION_ROUTER_ALERT = win32more.NetworkManagement.WindowsFilteringPlatform.IPV6_OPTION_ROUTER_ALERT_head
    IPV6_OPTION_ROUTER_ALERT._fields_ = [
        ("Header", win32more.NetworkManagement.WindowsFilteringPlatform.IPV6_OPTION_HEADER),
        ("Value", Byte * 2),
    ]
    return IPV6_OPTION_ROUTER_ALERT
def _define_IPV6_ROUTING_HEADER_head():
    class IPV6_ROUTING_HEADER(Structure):
        pass
    return IPV6_ROUTING_HEADER
def _define_IPV6_ROUTING_HEADER():
    IPV6_ROUTING_HEADER = win32more.NetworkManagement.WindowsFilteringPlatform.IPV6_ROUTING_HEADER_head
    IPV6_ROUTING_HEADER._fields_ = [
        ("NextHeader", Byte),
        ("Length", Byte),
        ("RoutingType", Byte),
        ("SegmentsLeft", Byte),
        ("Reserved", Byte * 4),
    ]
    return IPV6_ROUTING_HEADER
def _define_nd_router_solicit_head():
    class nd_router_solicit(Structure):
        pass
    return nd_router_solicit
def _define_nd_router_solicit():
    nd_router_solicit = win32more.NetworkManagement.WindowsFilteringPlatform.nd_router_solicit_head
    nd_router_solicit._fields_ = [
        ("nd_rs_hdr", win32more.NetworkManagement.WindowsFilteringPlatform.ICMP_MESSAGE),
    ]
    return nd_router_solicit
def _define_nd_router_advert_head():
    class nd_router_advert(Structure):
        pass
    return nd_router_advert
def _define_nd_router_advert():
    nd_router_advert = win32more.NetworkManagement.WindowsFilteringPlatform.nd_router_advert_head
    nd_router_advert._fields_ = [
        ("nd_ra_hdr", win32more.NetworkManagement.WindowsFilteringPlatform.ICMP_MESSAGE),
        ("nd_ra_reachable", UInt32),
        ("nd_ra_retransmit", UInt32),
    ]
    return nd_router_advert
def _define_IPV6_ROUTER_ADVERTISEMENT_FLAGS_head():
    class IPV6_ROUTER_ADVERTISEMENT_FLAGS(Union):
        pass
    return IPV6_ROUTER_ADVERTISEMENT_FLAGS
def _define_IPV6_ROUTER_ADVERTISEMENT_FLAGS():
    IPV6_ROUTER_ADVERTISEMENT_FLAGS = win32more.NetworkManagement.WindowsFilteringPlatform.IPV6_ROUTER_ADVERTISEMENT_FLAGS_head
    class IPV6_ROUTER_ADVERTISEMENT_FLAGS__Anonymous_e__Struct(Structure):
        pass
    IPV6_ROUTER_ADVERTISEMENT_FLAGS__Anonymous_e__Struct._fields_ = [
        ("_bitfield", Byte),
    ]
    IPV6_ROUTER_ADVERTISEMENT_FLAGS._anonymous_ = [
        'Anonymous',
    ]
    IPV6_ROUTER_ADVERTISEMENT_FLAGS._fields_ = [
        ("Anonymous", IPV6_ROUTER_ADVERTISEMENT_FLAGS__Anonymous_e__Struct),
        ("Value", Byte),
    ]
    return IPV6_ROUTER_ADVERTISEMENT_FLAGS
def _define_nd_neighbor_solicit_head():
    class nd_neighbor_solicit(Structure):
        pass
    return nd_neighbor_solicit
def _define_nd_neighbor_solicit():
    nd_neighbor_solicit = win32more.NetworkManagement.WindowsFilteringPlatform.nd_neighbor_solicit_head
    nd_neighbor_solicit._fields_ = [
        ("nd_ns_hdr", win32more.NetworkManagement.WindowsFilteringPlatform.ICMP_MESSAGE),
        ("nd_ns_target", win32more.Networking.WinSock.IN6_ADDR),
    ]
    return nd_neighbor_solicit
def _define_nd_neighbor_advert_head():
    class nd_neighbor_advert(Structure):
        pass
    return nd_neighbor_advert
def _define_nd_neighbor_advert():
    nd_neighbor_advert = win32more.NetworkManagement.WindowsFilteringPlatform.nd_neighbor_advert_head
    nd_neighbor_advert._fields_ = [
        ("nd_na_hdr", win32more.NetworkManagement.WindowsFilteringPlatform.ICMP_MESSAGE),
        ("nd_na_target", win32more.Networking.WinSock.IN6_ADDR),
    ]
    return nd_neighbor_advert
def _define_IPV6_NEIGHBOR_ADVERTISEMENT_FLAGS_head():
    class IPV6_NEIGHBOR_ADVERTISEMENT_FLAGS(Union):
        pass
    return IPV6_NEIGHBOR_ADVERTISEMENT_FLAGS
def _define_IPV6_NEIGHBOR_ADVERTISEMENT_FLAGS():
    IPV6_NEIGHBOR_ADVERTISEMENT_FLAGS = win32more.NetworkManagement.WindowsFilteringPlatform.IPV6_NEIGHBOR_ADVERTISEMENT_FLAGS_head
    class IPV6_NEIGHBOR_ADVERTISEMENT_FLAGS__Anonymous_e__Struct(Structure):
        pass
    IPV6_NEIGHBOR_ADVERTISEMENT_FLAGS__Anonymous_e__Struct._fields_ = [
        ("_bitfield", Byte),
        ("Reserved2", Byte * 3),
    ]
    IPV6_NEIGHBOR_ADVERTISEMENT_FLAGS._anonymous_ = [
        'Anonymous',
    ]
    IPV6_NEIGHBOR_ADVERTISEMENT_FLAGS._fields_ = [
        ("Anonymous", IPV6_NEIGHBOR_ADVERTISEMENT_FLAGS__Anonymous_e__Struct),
        ("Value", UInt32),
    ]
    return IPV6_NEIGHBOR_ADVERTISEMENT_FLAGS
def _define_nd_redirect_head():
    class nd_redirect(Structure):
        pass
    return nd_redirect
def _define_nd_redirect():
    nd_redirect = win32more.NetworkManagement.WindowsFilteringPlatform.nd_redirect_head
    nd_redirect._fields_ = [
        ("nd_rd_hdr", win32more.NetworkManagement.WindowsFilteringPlatform.ICMP_MESSAGE),
        ("nd_rd_target", win32more.Networking.WinSock.IN6_ADDR),
        ("nd_rd_dst", win32more.Networking.WinSock.IN6_ADDR),
    ]
    return nd_redirect
def _define_nd_opt_hdr_head():
    class nd_opt_hdr(Structure):
        pass
    return nd_opt_hdr
def _define_nd_opt_hdr():
    nd_opt_hdr = win32more.NetworkManagement.WindowsFilteringPlatform.nd_opt_hdr_head
    nd_opt_hdr._fields_ = [
        ("nd_opt_type", Byte),
        ("nd_opt_len", Byte),
    ]
    return nd_opt_hdr
ND_OPTION_TYPE = Int32
ND_OPT_SOURCE_LINKADDR = 1
ND_OPT_TARGET_LINKADDR = 2
ND_OPT_PREFIX_INFORMATION = 3
ND_OPT_REDIRECTED_HEADER = 4
ND_OPT_MTU = 5
ND_OPT_NBMA_SHORTCUT_LIMIT = 6
ND_OPT_ADVERTISEMENT_INTERVAL = 7
ND_OPT_HOME_AGENT_INFORMATION = 8
ND_OPT_SOURCE_ADDR_LIST = 9
ND_OPT_TARGET_ADDR_LIST = 10
ND_OPT_ROUTE_INFO = 24
ND_OPT_RDNSS = 25
ND_OPT_DNSSL = 31
def _define_nd_opt_prefix_info_head():
    class nd_opt_prefix_info(Structure):
        pass
    return nd_opt_prefix_info
def _define_nd_opt_prefix_info():
    nd_opt_prefix_info = win32more.NetworkManagement.WindowsFilteringPlatform.nd_opt_prefix_info_head
    class nd_opt_prefix_info__Anonymous2_e__Union(Union):
        pass
    class nd_opt_prefix_info__Anonymous2_e__Union__Anonymous_e__Struct(Structure):
        pass
    nd_opt_prefix_info__Anonymous2_e__Union__Anonymous_e__Struct._fields_ = [
        ("nd_opt_pi_reserved3", Byte * 3),
        ("nd_opt_pi_site_prefix_len", Byte),
    ]
    nd_opt_prefix_info__Anonymous2_e__Union._anonymous_ = [
        'Anonymous',
    ]
    nd_opt_prefix_info__Anonymous2_e__Union._fields_ = [
        ("nd_opt_pi_reserved2", UInt32),
        ("Anonymous", nd_opt_prefix_info__Anonymous2_e__Union__Anonymous_e__Struct),
    ]
    class nd_opt_prefix_info__Anonymous1_e__Union(Union):
        pass
    class nd_opt_prefix_info__Anonymous1_e__Union__Flags_e__Struct(Structure):
        pass
    nd_opt_prefix_info__Anonymous1_e__Union__Flags_e__Struct._fields_ = [
        ("_bitfield", Byte),
    ]
    nd_opt_prefix_info__Anonymous1_e__Union._fields_ = [
        ("nd_opt_pi_flags_reserved", Byte),
        ("Flags", nd_opt_prefix_info__Anonymous1_e__Union__Flags_e__Struct),
    ]
    nd_opt_prefix_info._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
    ]
    nd_opt_prefix_info._fields_ = [
        ("nd_opt_pi_type", Byte),
        ("nd_opt_pi_len", Byte),
        ("nd_opt_pi_prefix_len", Byte),
        ("Anonymous1", nd_opt_prefix_info__Anonymous1_e__Union),
        ("nd_opt_pi_valid_time", UInt32),
        ("nd_opt_pi_preferred_time", UInt32),
        ("Anonymous2", nd_opt_prefix_info__Anonymous2_e__Union),
        ("nd_opt_pi_prefix", win32more.Networking.WinSock.IN6_ADDR),
    ]
    return nd_opt_prefix_info
def _define_nd_opt_rd_hdr_head():
    class nd_opt_rd_hdr(Structure):
        pass
    return nd_opt_rd_hdr
def _define_nd_opt_rd_hdr():
    nd_opt_rd_hdr = win32more.NetworkManagement.WindowsFilteringPlatform.nd_opt_rd_hdr_head
    nd_opt_rd_hdr._fields_ = [
        ("nd_opt_rh_type", Byte),
        ("nd_opt_rh_len", Byte),
        ("nd_opt_rh_reserved1", UInt16),
        ("nd_opt_rh_reserved2", UInt32),
    ]
    return nd_opt_rd_hdr
def _define_nd_opt_mtu_head():
    class nd_opt_mtu(Structure):
        pass
    return nd_opt_mtu
def _define_nd_opt_mtu():
    nd_opt_mtu = win32more.NetworkManagement.WindowsFilteringPlatform.nd_opt_mtu_head
    nd_opt_mtu._fields_ = [
        ("nd_opt_mtu_type", Byte),
        ("nd_opt_mtu_len", Byte),
        ("nd_opt_mtu_reserved", UInt16),
        ("nd_opt_mtu_mtu", UInt32),
    ]
    return nd_opt_mtu
def _define_nd_opt_route_info_head():
    class nd_opt_route_info(Structure):
        pass
    return nd_opt_route_info
def _define_nd_opt_route_info():
    nd_opt_route_info = win32more.NetworkManagement.WindowsFilteringPlatform.nd_opt_route_info_head
    class nd_opt_route_info__Anonymous_e__Union(Union):
        pass
    class nd_opt_route_info__Anonymous_e__Union__Flags_e__Struct(Structure):
        pass
    nd_opt_route_info__Anonymous_e__Union__Flags_e__Struct._fields_ = [
        ("_bitfield", Byte),
    ]
    nd_opt_route_info__Anonymous_e__Union._fields_ = [
        ("nd_opt_ri_flags_reserved", Byte),
        ("Flags", nd_opt_route_info__Anonymous_e__Union__Flags_e__Struct),
    ]
    nd_opt_route_info._anonymous_ = [
        'Anonymous',
    ]
    nd_opt_route_info._fields_ = [
        ("nd_opt_ri_type", Byte),
        ("nd_opt_ri_len", Byte),
        ("nd_opt_ri_prefix_len", Byte),
        ("Anonymous", nd_opt_route_info__Anonymous_e__Union),
        ("nd_opt_ri_route_lifetime", UInt32),
        ("nd_opt_ri_prefix", win32more.Networking.WinSock.IN6_ADDR),
    ]
    return nd_opt_route_info
def _define_nd_opt_rdnss_head():
    class nd_opt_rdnss(Structure):
        pass
    return nd_opt_rdnss
def _define_nd_opt_rdnss():
    nd_opt_rdnss = win32more.NetworkManagement.WindowsFilteringPlatform.nd_opt_rdnss_head
    nd_opt_rdnss._fields_ = [
        ("nd_opt_rdnss_type", Byte),
        ("nd_opt_rdnss_len", Byte),
        ("nd_opt_rdnss_reserved", UInt16),
        ("nd_opt_rdnss_lifetime", UInt32),
    ]
    return nd_opt_rdnss
def _define_nd_opt_dnssl_head():
    class nd_opt_dnssl(Structure):
        pass
    return nd_opt_dnssl
def _define_nd_opt_dnssl():
    nd_opt_dnssl = win32more.NetworkManagement.WindowsFilteringPlatform.nd_opt_dnssl_head
    nd_opt_dnssl._fields_ = [
        ("nd_opt_dnssl_type", Byte),
        ("nd_opt_dnssl_len", Byte),
        ("nd_opt_dnssl_reserved", UInt16),
        ("nd_opt_dnssl_lifetime", UInt32),
    ]
    return nd_opt_dnssl
def _define_MLD_HEADER_head():
    class MLD_HEADER(Structure):
        pass
    return MLD_HEADER
def _define_MLD_HEADER():
    MLD_HEADER = win32more.NetworkManagement.WindowsFilteringPlatform.MLD_HEADER_head
    MLD_HEADER._fields_ = [
        ("IcmpHeader", win32more.NetworkManagement.WindowsFilteringPlatform.ICMP_HEADER),
        ("MaxRespTime", UInt16),
        ("Reserved", UInt16),
        ("MulticastAddress", win32more.Networking.WinSock.IN6_ADDR),
    ]
    return MLD_HEADER
MLD_MAX_RESP_CODE_TYPE = Int32
MLD_MAX_RESP_CODE_TYPE_NORMAL = 0
MLD_MAX_RESP_CODE_TYPE_FLOAT = 1
def _define_MLDV2_QUERY_HEADER_head():
    class MLDV2_QUERY_HEADER(Structure):
        pass
    return MLDV2_QUERY_HEADER
def _define_MLDV2_QUERY_HEADER():
    MLDV2_QUERY_HEADER = win32more.NetworkManagement.WindowsFilteringPlatform.MLDV2_QUERY_HEADER_head
    class MLDV2_QUERY_HEADER__Anonymous2_e__Union(Union):
        pass
    class MLDV2_QUERY_HEADER__Anonymous2_e__Union__Anonymous_e__Struct(Structure):
        pass
    MLDV2_QUERY_HEADER__Anonymous2_e__Union__Anonymous_e__Struct._fields_ = [
        ("_bitfield", Byte),
    ]
    MLDV2_QUERY_HEADER__Anonymous2_e__Union._anonymous_ = [
        'Anonymous',
    ]
    MLDV2_QUERY_HEADER__Anonymous2_e__Union._fields_ = [
        ("QueriersQueryInterfaceCode", Byte),
        ("Anonymous", MLDV2_QUERY_HEADER__Anonymous2_e__Union__Anonymous_e__Struct),
    ]
    class MLDV2_QUERY_HEADER__Anonymous1_e__Union(Union):
        pass
    class MLDV2_QUERY_HEADER__Anonymous1_e__Union__Anonymous_e__Struct(Structure):
        pass
    MLDV2_QUERY_HEADER__Anonymous1_e__Union__Anonymous_e__Struct._fields_ = [
        ("_bitfield", UInt16),
    ]
    MLDV2_QUERY_HEADER__Anonymous1_e__Union._anonymous_ = [
        'Anonymous',
    ]
    MLDV2_QUERY_HEADER__Anonymous1_e__Union._fields_ = [
        ("MaxRespCode", UInt16),
        ("Anonymous", MLDV2_QUERY_HEADER__Anonymous1_e__Union__Anonymous_e__Struct),
    ]
    MLDV2_QUERY_HEADER._anonymous_ = [
        'Anonymous1',
        'Anonymous2',
    ]
    MLDV2_QUERY_HEADER._fields_ = [
        ("IcmpHeader", win32more.NetworkManagement.WindowsFilteringPlatform.ICMP_HEADER),
        ("Anonymous1", MLDV2_QUERY_HEADER__Anonymous1_e__Union),
        ("Reserved", UInt16),
        ("MulticastAddress", win32more.Networking.WinSock.IN6_ADDR),
        ("_bitfield", Byte),
        ("Anonymous2", MLDV2_QUERY_HEADER__Anonymous2_e__Union),
        ("SourceCount", UInt16),
    ]
    return MLDV2_QUERY_HEADER
def _define_MLDV2_REPORT_RECORD_HEADER_head():
    class MLDV2_REPORT_RECORD_HEADER(Structure):
        pass
    return MLDV2_REPORT_RECORD_HEADER
def _define_MLDV2_REPORT_RECORD_HEADER():
    MLDV2_REPORT_RECORD_HEADER = win32more.NetworkManagement.WindowsFilteringPlatform.MLDV2_REPORT_RECORD_HEADER_head
    MLDV2_REPORT_RECORD_HEADER._fields_ = [
        ("Type", Byte),
        ("AuxillaryDataLength", Byte),
        ("SourceCount", UInt16),
        ("MulticastAddress", win32more.Networking.WinSock.IN6_ADDR),
    ]
    return MLDV2_REPORT_RECORD_HEADER
def _define_MLDV2_REPORT_HEADER_head():
    class MLDV2_REPORT_HEADER(Structure):
        pass
    return MLDV2_REPORT_HEADER
def _define_MLDV2_REPORT_HEADER():
    MLDV2_REPORT_HEADER = win32more.NetworkManagement.WindowsFilteringPlatform.MLDV2_REPORT_HEADER_head
    MLDV2_REPORT_HEADER._fields_ = [
        ("IcmpHeader", win32more.NetworkManagement.WindowsFilteringPlatform.ICMP_HEADER),
        ("Reserved", UInt16),
        ("RecordCount", UInt16),
    ]
    return MLDV2_REPORT_HEADER
def _define_tcp_hdr_head():
    class tcp_hdr(Structure):
        pass
    return tcp_hdr
def _define_tcp_hdr():
    tcp_hdr = win32more.NetworkManagement.WindowsFilteringPlatform.tcp_hdr_head
    tcp_hdr._pack_ = 1
    tcp_hdr._fields_ = [
        ("th_sport", UInt16),
        ("th_dport", UInt16),
        ("th_seq", UInt32),
        ("th_ack", UInt32),
        ("_bitfield", Byte),
        ("th_flags", Byte),
        ("th_win", UInt16),
        ("th_sum", UInt16),
        ("th_urp", UInt16),
    ]
    return tcp_hdr
def _define_tcp_opt_mss_head():
    class tcp_opt_mss(Structure):
        pass
    return tcp_opt_mss
def _define_tcp_opt_mss():
    tcp_opt_mss = win32more.NetworkManagement.WindowsFilteringPlatform.tcp_opt_mss_head
    tcp_opt_mss._pack_ = 1
    tcp_opt_mss._fields_ = [
        ("Kind", Byte),
        ("Length", Byte),
        ("Mss", UInt16),
    ]
    return tcp_opt_mss
def _define_tcp_opt_ws_head():
    class tcp_opt_ws(Structure):
        pass
    return tcp_opt_ws
def _define_tcp_opt_ws():
    tcp_opt_ws = win32more.NetworkManagement.WindowsFilteringPlatform.tcp_opt_ws_head
    tcp_opt_ws._fields_ = [
        ("Kind", Byte),
        ("Length", Byte),
        ("ShiftCnt", Byte),
    ]
    return tcp_opt_ws
def _define_tcp_opt_sack_permitted_head():
    class tcp_opt_sack_permitted(Structure):
        pass
    return tcp_opt_sack_permitted
def _define_tcp_opt_sack_permitted():
    tcp_opt_sack_permitted = win32more.NetworkManagement.WindowsFilteringPlatform.tcp_opt_sack_permitted_head
    tcp_opt_sack_permitted._fields_ = [
        ("Kind", Byte),
        ("Length", Byte),
    ]
    return tcp_opt_sack_permitted
def _define_tcp_opt_sack_head():
    class tcp_opt_sack(Structure):
        pass
    return tcp_opt_sack
def _define_tcp_opt_sack():
    tcp_opt_sack = win32more.NetworkManagement.WindowsFilteringPlatform.tcp_opt_sack_head
    class tcp_opt_sack_tcp_opt_sack_block(Structure):
        pass
    tcp_opt_sack_tcp_opt_sack_block._pack_ = 1
    tcp_opt_sack_tcp_opt_sack_block._fields_ = [
        ("Left", UInt32),
        ("Right", UInt32),
    ]
    tcp_opt_sack._fields_ = [
        ("Kind", Byte),
        ("Length", Byte),
        ("Block", tcp_opt_sack_tcp_opt_sack_block * 0),
    ]
    return tcp_opt_sack
def _define_tcp_opt_ts_head():
    class tcp_opt_ts(Structure):
        pass
    return tcp_opt_ts
def _define_tcp_opt_ts():
    tcp_opt_ts = win32more.NetworkManagement.WindowsFilteringPlatform.tcp_opt_ts_head
    tcp_opt_ts._pack_ = 1
    tcp_opt_ts._fields_ = [
        ("Kind", Byte),
        ("Length", Byte),
        ("Val", UInt32),
        ("EcR", UInt32),
    ]
    return tcp_opt_ts
def _define_tcp_opt_unknown_head():
    class tcp_opt_unknown(Structure):
        pass
    return tcp_opt_unknown
def _define_tcp_opt_unknown():
    tcp_opt_unknown = win32more.NetworkManagement.WindowsFilteringPlatform.tcp_opt_unknown_head
    tcp_opt_unknown._fields_ = [
        ("Kind", Byte),
        ("Length", Byte),
    ]
    return tcp_opt_unknown
def _define_tcp_opt_fastopen_head():
    class tcp_opt_fastopen(Structure):
        pass
    return tcp_opt_fastopen
def _define_tcp_opt_fastopen():
    tcp_opt_fastopen = win32more.NetworkManagement.WindowsFilteringPlatform.tcp_opt_fastopen_head
    tcp_opt_fastopen._fields_ = [
        ("Kind", Byte),
        ("Length", Byte),
        ("Cookie", Byte * 0),
    ]
    return tcp_opt_fastopen
def _define_DL_TUNNEL_ADDRESS_head():
    class DL_TUNNEL_ADDRESS(Structure):
        pass
    return DL_TUNNEL_ADDRESS
def _define_DL_TUNNEL_ADDRESS():
    DL_TUNNEL_ADDRESS = win32more.NetworkManagement.WindowsFilteringPlatform.DL_TUNNEL_ADDRESS_head
    DL_TUNNEL_ADDRESS._fields_ = [
        ("CompartmentId", win32more.System.Kernel.COMPARTMENT_ID),
        ("ScopeId", win32more.Networking.WinSock.SCOPE_ID),
        ("IpAddress", Byte * 0),
    ]
    return DL_TUNNEL_ADDRESS
TUNNEL_SUB_TYPE = Int32
TUNNEL_SUB_TYPE_NONE = 0
TUNNEL_SUB_TYPE_CP = 1
TUNNEL_SUB_TYPE_IPTLS = 2
TUNNEL_SUB_TYPE_HA = 3
def _define_DL_TEREDO_ADDRESS_head():
    class DL_TEREDO_ADDRESS(Structure):
        pass
    return DL_TEREDO_ADDRESS
def _define_DL_TEREDO_ADDRESS():
    DL_TEREDO_ADDRESS = win32more.NetworkManagement.WindowsFilteringPlatform.DL_TEREDO_ADDRESS_head
    class DL_TEREDO_ADDRESS__Anonymous_e__Union(Union):
        pass
    class DL_TEREDO_ADDRESS__Anonymous_e__Union__Anonymous_e__Struct(Structure):
        pass
    DL_TEREDO_ADDRESS__Anonymous_e__Union__Anonymous_e__Struct._pack_ = 1
    DL_TEREDO_ADDRESS__Anonymous_e__Union__Anonymous_e__Struct._fields_ = [
        ("Flags", UInt16),
        ("MappedPort", UInt16),
        ("MappedAddress", win32more.Networking.WinSock.IN_ADDR),
    ]
    DL_TEREDO_ADDRESS__Anonymous_e__Union._pack_ = 1
    DL_TEREDO_ADDRESS__Anonymous_e__Union._anonymous_ = [
        'Anonymous',
    ]
    DL_TEREDO_ADDRESS__Anonymous_e__Union._fields_ = [
        ("Eui64", win32more.NetworkManagement.WindowsFilteringPlatform.DL_EUI64),
        ("Anonymous", DL_TEREDO_ADDRESS__Anonymous_e__Union__Anonymous_e__Struct),
    ]
    DL_TEREDO_ADDRESS._anonymous_ = [
        'Anonymous',
    ]
    DL_TEREDO_ADDRESS._fields_ = [
        ("Reserved", Byte * 6),
        ("Anonymous", DL_TEREDO_ADDRESS__Anonymous_e__Union),
    ]
    return DL_TEREDO_ADDRESS
def _define_DL_TEREDO_ADDRESS_PRV_head():
    class DL_TEREDO_ADDRESS_PRV(Structure):
        pass
    return DL_TEREDO_ADDRESS_PRV
def _define_DL_TEREDO_ADDRESS_PRV():
    DL_TEREDO_ADDRESS_PRV = win32more.NetworkManagement.WindowsFilteringPlatform.DL_TEREDO_ADDRESS_PRV_head
    class DL_TEREDO_ADDRESS_PRV__Anonymous_e__Union(Union):
        pass
    class DL_TEREDO_ADDRESS_PRV__Anonymous_e__Union__Anonymous_e__Struct(Structure):
        pass
    DL_TEREDO_ADDRESS_PRV__Anonymous_e__Union__Anonymous_e__Struct._pack_ = 1
    DL_TEREDO_ADDRESS_PRV__Anonymous_e__Union__Anonymous_e__Struct._fields_ = [
        ("Flags", UInt16),
        ("MappedPort", UInt16),
        ("MappedAddress", win32more.Networking.WinSock.IN_ADDR),
        ("LocalAddress", win32more.Networking.WinSock.IN_ADDR),
        ("InterfaceIndex", UInt32),
        ("LocalPort", UInt16),
        ("DlDestination", win32more.NetworkManagement.WindowsFilteringPlatform.DL_EUI48),
    ]
    DL_TEREDO_ADDRESS_PRV__Anonymous_e__Union._pack_ = 1
    DL_TEREDO_ADDRESS_PRV__Anonymous_e__Union._anonymous_ = [
        'Anonymous',
    ]
    DL_TEREDO_ADDRESS_PRV__Anonymous_e__Union._fields_ = [
        ("Eui64", win32more.NetworkManagement.WindowsFilteringPlatform.DL_EUI64),
        ("Anonymous", DL_TEREDO_ADDRESS_PRV__Anonymous_e__Union__Anonymous_e__Struct),
    ]
    DL_TEREDO_ADDRESS_PRV._anonymous_ = [
        'Anonymous',
    ]
    DL_TEREDO_ADDRESS_PRV._fields_ = [
        ("Reserved", Byte * 6),
        ("Anonymous", DL_TEREDO_ADDRESS_PRV__Anonymous_e__Union),
    ]
    return DL_TEREDO_ADDRESS_PRV
def _define_IPTLS_METADATA_head():
    class IPTLS_METADATA(Structure):
        pass
    return IPTLS_METADATA
def _define_IPTLS_METADATA():
    IPTLS_METADATA = win32more.NetworkManagement.WindowsFilteringPlatform.IPTLS_METADATA_head
    IPTLS_METADATA._pack_ = 1
    IPTLS_METADATA._fields_ = [
        ("SequenceNumber", UInt64),
    ]
    return IPTLS_METADATA
NPI_MODULEID_TYPE = Int32
MIT_GUID = 1
MIT_IF_LUID = 2
def _define_NPI_MODULEID_head():
    class NPI_MODULEID(Structure):
        pass
    return NPI_MODULEID
def _define_NPI_MODULEID():
    NPI_MODULEID = win32more.NetworkManagement.WindowsFilteringPlatform.NPI_MODULEID_head
    class NPI_MODULEID__Anonymous_e__Union(Union):
        pass
    NPI_MODULEID__Anonymous_e__Union._fields_ = [
        ("Guid", Guid),
        ("IfLuid", win32more.Foundation.LUID),
    ]
    NPI_MODULEID._anonymous_ = [
        'Anonymous',
    ]
    NPI_MODULEID._fields_ = [
        ("Length", UInt16),
        ("Type", win32more.NetworkManagement.WindowsFilteringPlatform.NPI_MODULEID_TYPE),
        ("Anonymous", NPI_MODULEID__Anonymous_e__Union),
    ]
    return NPI_MODULEID
FALLBACK_INDEX = Int32
FALLBACK_INDEX_FallbackIndexTcpFastopen = 0
FALLBACK_INDEX_FallbackIndexMax = 1
def _define_FwpmFreeMemory0():
    try:
        return WINFUNCTYPE(Void,POINTER(c_void_p), use_last_error=False)(("FwpmFreeMemory0", windll["fwpuclnt"]), ((1, 'p'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmEngineOpen0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.PWSTR,UInt32,POINTER(win32more.System.Rpc.SEC_WINNT_AUTH_IDENTITY_W_head),POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SESSION0_head),POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("FwpmEngineOpen0", windll["fwpuclnt"]), ((1, 'serverName'),(1, 'authnService'),(1, 'authIdentity'),(1, 'session'),(1, 'engineHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmEngineClose0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE, use_last_error=False)(("FwpmEngineClose0", windll["fwpuclnt"]), ((1, 'engineHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmEngineGetOption0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_ENGINE_OPTION,POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWP_VALUE0_head)), use_last_error=False)(("FwpmEngineGetOption0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'option'),(1, 'value'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmEngineSetOption0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_ENGINE_OPTION,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWP_VALUE0_head), use_last_error=False)(("FwpmEngineSetOption0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'option'),(1, 'newValue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmEngineGetSecurityInfo0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt32,POINTER(win32more.Foundation.PSID),POINTER(win32more.Foundation.PSID),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.SECURITY_DESCRIPTOR_head)), use_last_error=False)(("FwpmEngineGetSecurityInfo0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),(1, 'securityDescriptor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmEngineSetSecurityInfo0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt32,POINTER(win32more.Security.SID_head),POINTER(win32more.Security.SID_head),POINTER(win32more.Security.ACL_head),POINTER(win32more.Security.ACL_head), use_last_error=False)(("FwpmEngineSetSecurityInfo0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmSessionCreateEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SESSION_ENUM_TEMPLATE0_head),POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("FwpmSessionCreateEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumTemplate'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmSessionEnum0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SESSION0_head))),POINTER(UInt32), use_last_error=False)(("FwpmSessionEnum0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),(1, 'numEntriesRequested'),(1, 'entries'),(1, 'numEntriesReturned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmSessionDestroyEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE, use_last_error=False)(("FwpmSessionDestroyEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmTransactionBegin0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt32, use_last_error=False)(("FwpmTransactionBegin0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmTransactionCommit0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE, use_last_error=False)(("FwpmTransactionCommit0", windll["fwpuclnt"]), ((1, 'engineHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmTransactionAbort0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE, use_last_error=False)(("FwpmTransactionAbort0", windll["fwpuclnt"]), ((1, 'engineHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderAdd0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER0_head),POINTER(win32more.Security.SECURITY_DESCRIPTOR_head), use_last_error=False)(("FwpmProviderAdd0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'provider'),(1, 'sd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderDeleteByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid), use_last_error=False)(("FwpmProviderDeleteByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderGetByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid),POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER0_head)), use_last_error=False)(("FwpmProviderGetByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),(1, 'provider'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderCreateEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_ENUM_TEMPLATE0_head),POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("FwpmProviderCreateEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumTemplate'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderEnum0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER0_head))),POINTER(UInt32), use_last_error=False)(("FwpmProviderEnum0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),(1, 'numEntriesRequested'),(1, 'entries'),(1, 'numEntriesReturned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderDestroyEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE, use_last_error=False)(("FwpmProviderDestroyEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderGetSecurityInfoByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid),UInt32,POINTER(win32more.Foundation.PSID),POINTER(win32more.Foundation.PSID),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.SECURITY_DESCRIPTOR_head)), use_last_error=False)(("FwpmProviderGetSecurityInfoByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),(1, 'securityDescriptor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderSetSecurityInfoByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid),UInt32,POINTER(win32more.Security.SID_head),POINTER(win32more.Security.SID_head),POINTER(win32more.Security.ACL_head),POINTER(win32more.Security.ACL_head), use_last_error=False)(("FwpmProviderSetSecurityInfoByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderSubscribeChanges0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_SUBSCRIPTION0_head),win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CHANGE_CALLBACK0,c_void_p,POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("FwpmProviderSubscribeChanges0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'subscription'),(1, 'callback'),(1, 'context'),(1, 'changeHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderUnsubscribeChanges0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE, use_last_error=False)(("FwpmProviderUnsubscribeChanges0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'changeHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderSubscriptionsGet0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_SUBSCRIPTION0_head))),POINTER(UInt32), use_last_error=False)(("FwpmProviderSubscriptionsGet0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'entries'),(1, 'numEntries'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderContextAdd0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT0_head),POINTER(win32more.Security.SECURITY_DESCRIPTOR_head),POINTER(UInt64), use_last_error=False)(("FwpmProviderContextAdd0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'providerContext'),(1, 'sd'),(1, 'id'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderContextAdd1():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT1_head),POINTER(win32more.Security.SECURITY_DESCRIPTOR_head),POINTER(UInt64), use_last_error=False)(("FwpmProviderContextAdd1", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'providerContext'),(1, 'sd'),(1, 'id'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderContextAdd2():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT2_head),POINTER(win32more.Security.SECURITY_DESCRIPTOR_head),POINTER(UInt64), use_last_error=False)(("FwpmProviderContextAdd2", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'providerContext'),(1, 'sd'),(1, 'id'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderContextAdd3():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT3__head),POINTER(win32more.Security.SECURITY_DESCRIPTOR_head),POINTER(UInt64), use_last_error=False)(("FwpmProviderContextAdd3", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'providerContext'),(1, 'sd'),(1, 'id'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderContextDeleteById0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt64, use_last_error=False)(("FwpmProviderContextDeleteById0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderContextDeleteByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid), use_last_error=False)(("FwpmProviderContextDeleteByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderContextGetById0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt64,POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT0_head)), use_last_error=False)(("FwpmProviderContextGetById0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),(1, 'providerContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderContextGetById1():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt64,POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT1_head)), use_last_error=False)(("FwpmProviderContextGetById1", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),(1, 'providerContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderContextGetById2():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt64,POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT2_head)), use_last_error=False)(("FwpmProviderContextGetById2", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),(1, 'providerContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderContextGetById3():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt64,POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT3__head)), use_last_error=False)(("FwpmProviderContextGetById3", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),(1, 'providerContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderContextGetByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid),POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT0_head)), use_last_error=False)(("FwpmProviderContextGetByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),(1, 'providerContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderContextGetByKey1():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid),POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT1_head)), use_last_error=False)(("FwpmProviderContextGetByKey1", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),(1, 'providerContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderContextGetByKey2():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid),POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT2_head)), use_last_error=False)(("FwpmProviderContextGetByKey2", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),(1, 'providerContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderContextGetByKey3():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid),POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT3__head)), use_last_error=False)(("FwpmProviderContextGetByKey3", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),(1, 'providerContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderContextCreateEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0_head),POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("FwpmProviderContextCreateEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumTemplate'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderContextEnum0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT0_head))),POINTER(UInt32), use_last_error=False)(("FwpmProviderContextEnum0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),(1, 'numEntriesRequested'),(1, 'entries'),(1, 'numEntriesReturned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderContextEnum1():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT1_head))),POINTER(UInt32), use_last_error=False)(("FwpmProviderContextEnum1", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),(1, 'numEntriesRequested'),(1, 'entries'),(1, 'numEntriesReturned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderContextEnum2():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT2_head))),POINTER(UInt32), use_last_error=False)(("FwpmProviderContextEnum2", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),(1, 'numEntriesRequested'),(1, 'entries'),(1, 'numEntriesReturned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderContextEnum3():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT3__head))),POINTER(UInt32), use_last_error=False)(("FwpmProviderContextEnum3", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),(1, 'numEntriesRequested'),(1, 'entries'),(1, 'numEntriesReturned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderContextDestroyEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE, use_last_error=False)(("FwpmProviderContextDestroyEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderContextGetSecurityInfoByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid),UInt32,POINTER(win32more.Foundation.PSID),POINTER(win32more.Foundation.PSID),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.SECURITY_DESCRIPTOR_head)), use_last_error=False)(("FwpmProviderContextGetSecurityInfoByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),(1, 'securityDescriptor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderContextSetSecurityInfoByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid),UInt32,POINTER(win32more.Security.SID_head),POINTER(win32more.Security.SID_head),POINTER(win32more.Security.ACL_head),POINTER(win32more.Security.ACL_head), use_last_error=False)(("FwpmProviderContextSetSecurityInfoByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderContextSubscribeChanges0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0_head),win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT_CHANGE_CALLBACK0,c_void_p,POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("FwpmProviderContextSubscribeChanges0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'subscription'),(1, 'callback'),(1, 'context'),(1, 'changeHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderContextUnsubscribeChanges0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE, use_last_error=False)(("FwpmProviderContextUnsubscribeChanges0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'changeHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmProviderContextSubscriptionsGet0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0_head))),POINTER(UInt32), use_last_error=False)(("FwpmProviderContextSubscriptionsGet0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'entries'),(1, 'numEntries'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmSubLayerAdd0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SUBLAYER0_head),POINTER(win32more.Security.SECURITY_DESCRIPTOR_head), use_last_error=False)(("FwpmSubLayerAdd0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'subLayer'),(1, 'sd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmSubLayerDeleteByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid), use_last_error=False)(("FwpmSubLayerDeleteByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmSubLayerGetByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid),POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SUBLAYER0_head)), use_last_error=False)(("FwpmSubLayerGetByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),(1, 'subLayer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmSubLayerCreateEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SUBLAYER_ENUM_TEMPLATE0_head),POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("FwpmSubLayerCreateEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumTemplate'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmSubLayerEnum0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SUBLAYER0_head))),POINTER(UInt32), use_last_error=False)(("FwpmSubLayerEnum0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),(1, 'numEntriesRequested'),(1, 'entries'),(1, 'numEntriesReturned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmSubLayerDestroyEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE, use_last_error=False)(("FwpmSubLayerDestroyEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmSubLayerGetSecurityInfoByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid),UInt32,POINTER(win32more.Foundation.PSID),POINTER(win32more.Foundation.PSID),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.SECURITY_DESCRIPTOR_head)), use_last_error=False)(("FwpmSubLayerGetSecurityInfoByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),(1, 'securityDescriptor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmSubLayerSetSecurityInfoByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid),UInt32,POINTER(win32more.Security.SID_head),POINTER(win32more.Security.SID_head),POINTER(win32more.Security.ACL_head),POINTER(win32more.Security.ACL_head), use_last_error=False)(("FwpmSubLayerSetSecurityInfoByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmSubLayerSubscribeChanges0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SUBLAYER_SUBSCRIPTION0_head),win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SUBLAYER_CHANGE_CALLBACK0,c_void_p,POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("FwpmSubLayerSubscribeChanges0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'subscription'),(1, 'callback'),(1, 'context'),(1, 'changeHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmSubLayerUnsubscribeChanges0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE, use_last_error=False)(("FwpmSubLayerUnsubscribeChanges0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'changeHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmSubLayerSubscriptionsGet0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SUBLAYER_SUBSCRIPTION0_head))),POINTER(UInt32), use_last_error=False)(("FwpmSubLayerSubscriptionsGet0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'entries'),(1, 'numEntries'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmLayerGetById0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt16,POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_LAYER0_head)), use_last_error=False)(("FwpmLayerGetById0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),(1, 'layer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmLayerGetByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid),POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_LAYER0_head)), use_last_error=False)(("FwpmLayerGetByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),(1, 'layer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmLayerCreateEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_LAYER_ENUM_TEMPLATE0_head),POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("FwpmLayerCreateEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumTemplate'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmLayerEnum0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_LAYER0_head))),POINTER(UInt32), use_last_error=False)(("FwpmLayerEnum0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),(1, 'numEntriesRequested'),(1, 'entries'),(1, 'numEntriesReturned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmLayerDestroyEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE, use_last_error=False)(("FwpmLayerDestroyEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmLayerGetSecurityInfoByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid),UInt32,POINTER(win32more.Foundation.PSID),POINTER(win32more.Foundation.PSID),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.SECURITY_DESCRIPTOR_head)), use_last_error=False)(("FwpmLayerGetSecurityInfoByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),(1, 'securityDescriptor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmLayerSetSecurityInfoByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid),UInt32,POINTER(win32more.Security.SID_head),POINTER(win32more.Security.SID_head),POINTER(win32more.Security.ACL_head),POINTER(win32more.Security.ACL_head), use_last_error=False)(("FwpmLayerSetSecurityInfoByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmCalloutAdd0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CALLOUT0_head),POINTER(win32more.Security.SECURITY_DESCRIPTOR_head),POINTER(UInt32), use_last_error=False)(("FwpmCalloutAdd0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'callout'),(1, 'sd'),(1, 'id'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmCalloutDeleteById0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt32, use_last_error=False)(("FwpmCalloutDeleteById0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmCalloutDeleteByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid), use_last_error=False)(("FwpmCalloutDeleteByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmCalloutGetById0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CALLOUT0_head)), use_last_error=False)(("FwpmCalloutGetById0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),(1, 'callout'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmCalloutGetByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid),POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CALLOUT0_head)), use_last_error=False)(("FwpmCalloutGetByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),(1, 'callout'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmCalloutCreateEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CALLOUT_ENUM_TEMPLATE0_head),POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("FwpmCalloutCreateEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumTemplate'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmCalloutEnum0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CALLOUT0_head))),POINTER(UInt32), use_last_error=False)(("FwpmCalloutEnum0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),(1, 'numEntriesRequested'),(1, 'entries'),(1, 'numEntriesReturned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmCalloutDestroyEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE, use_last_error=False)(("FwpmCalloutDestroyEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmCalloutGetSecurityInfoByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid),UInt32,POINTER(win32more.Foundation.PSID),POINTER(win32more.Foundation.PSID),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.SECURITY_DESCRIPTOR_head)), use_last_error=False)(("FwpmCalloutGetSecurityInfoByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),(1, 'securityDescriptor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmCalloutSetSecurityInfoByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid),UInt32,POINTER(win32more.Security.SID_head),POINTER(win32more.Security.SID_head),POINTER(win32more.Security.ACL_head),POINTER(win32more.Security.ACL_head), use_last_error=False)(("FwpmCalloutSetSecurityInfoByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmCalloutSubscribeChanges0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CALLOUT_SUBSCRIPTION0_head),win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CALLOUT_CHANGE_CALLBACK0,c_void_p,POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("FwpmCalloutSubscribeChanges0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'subscription'),(1, 'callback'),(1, 'context'),(1, 'changeHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmCalloutUnsubscribeChanges0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE, use_last_error=False)(("FwpmCalloutUnsubscribeChanges0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'changeHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmCalloutSubscriptionsGet0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CALLOUT_SUBSCRIPTION0_head))),POINTER(UInt32), use_last_error=False)(("FwpmCalloutSubscriptionsGet0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'entries'),(1, 'numEntries'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmFilterAdd0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER0_head),POINTER(win32more.Security.SECURITY_DESCRIPTOR_head),POINTER(UInt64), use_last_error=False)(("FwpmFilterAdd0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'filter'),(1, 'sd'),(1, 'id'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmFilterDeleteById0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt64, use_last_error=False)(("FwpmFilterDeleteById0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmFilterDeleteByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid), use_last_error=False)(("FwpmFilterDeleteByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmFilterGetById0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt64,POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER0_head)), use_last_error=False)(("FwpmFilterGetById0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),(1, 'filter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmFilterGetByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid),POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER0_head)), use_last_error=False)(("FwpmFilterGetByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),(1, 'filter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmFilterCreateEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER_ENUM_TEMPLATE0_head),POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("FwpmFilterCreateEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumTemplate'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmFilterEnum0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER0_head))),POINTER(UInt32), use_last_error=False)(("FwpmFilterEnum0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),(1, 'numEntriesRequested'),(1, 'entries'),(1, 'numEntriesReturned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmFilterDestroyEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE, use_last_error=False)(("FwpmFilterDestroyEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmFilterGetSecurityInfoByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid),UInt32,POINTER(win32more.Foundation.PSID),POINTER(win32more.Foundation.PSID),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.SECURITY_DESCRIPTOR_head)), use_last_error=False)(("FwpmFilterGetSecurityInfoByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),(1, 'securityDescriptor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmFilterSetSecurityInfoByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid),UInt32,POINTER(win32more.Security.SID_head),POINTER(win32more.Security.SID_head),POINTER(win32more.Security.ACL_head),POINTER(win32more.Security.ACL_head), use_last_error=False)(("FwpmFilterSetSecurityInfoByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmFilterSubscribeChanges0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER_SUBSCRIPTION0_head),win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER_CHANGE_CALLBACK0,c_void_p,POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("FwpmFilterSubscribeChanges0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'subscription'),(1, 'callback'),(1, 'context'),(1, 'changeHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmFilterUnsubscribeChanges0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE, use_last_error=False)(("FwpmFilterUnsubscribeChanges0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'changeHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmFilterSubscriptionsGet0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER_SUBSCRIPTION0_head))),POINTER(UInt32), use_last_error=False)(("FwpmFilterSubscriptionsGet0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'entries'),(1, 'numEntries'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmGetAppIdFromFileName0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.PWSTR,POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB_head)), use_last_error=False)(("FwpmGetAppIdFromFileName0", windll["fwpuclnt"]), ((1, 'fileName'),(1, 'appId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmIPsecTunnelAdd0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt32,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT0_head),POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT0_head),UInt32,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER_CONDITION0),POINTER(win32more.Security.SECURITY_DESCRIPTOR_head), use_last_error=False)(("FwpmIPsecTunnelAdd0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'flags'),(1, 'mainModePolicy'),(1, 'tunnelPolicy'),(1, 'numFilterConditions'),(1, 'filterConditions'),(1, 'sd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmIPsecTunnelAdd1():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt32,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT1_head),POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT1_head),UInt32,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER_CONDITION0),POINTER(Guid),POINTER(win32more.Security.SECURITY_DESCRIPTOR_head), use_last_error=False)(("FwpmIPsecTunnelAdd1", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'flags'),(1, 'mainModePolicy'),(1, 'tunnelPolicy'),(1, 'numFilterConditions'),(1, 'filterConditions'),(1, 'keyModKey'),(1, 'sd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmIPsecTunnelAdd2():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt32,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT2_head),POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT2_head),UInt32,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER_CONDITION0),POINTER(Guid),POINTER(win32more.Security.SECURITY_DESCRIPTOR_head), use_last_error=False)(("FwpmIPsecTunnelAdd2", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'flags'),(1, 'mainModePolicy'),(1, 'tunnelPolicy'),(1, 'numFilterConditions'),(1, 'filterConditions'),(1, 'keyModKey'),(1, 'sd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmIPsecTunnelAdd3():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt32,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT3__head),POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT3__head),UInt32,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER_CONDITION0),POINTER(Guid),POINTER(win32more.Security.SECURITY_DESCRIPTOR_head), use_last_error=False)(("FwpmIPsecTunnelAdd3", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'flags'),(1, 'mainModePolicy'),(1, 'tunnelPolicy'),(1, 'numFilterConditions'),(1, 'filterConditions'),(1, 'keyModKey'),(1, 'sd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmIPsecTunnelDeleteByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(Guid), use_last_error=False)(("FwpmIPsecTunnelDeleteByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'key'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecGetStatistics0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_STATISTICS0_head), use_last_error=False)(("IPsecGetStatistics0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'ipsecStatistics'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecGetStatistics1():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_STATISTICS1_head), use_last_error=False)(("IPsecGetStatistics1", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'ipsecStatistics'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaContextCreate0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC0_head),POINTER(UInt64),POINTER(UInt64), use_last_error=False)(("IPsecSaContextCreate0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'outboundTraffic'),(1, 'inboundFilterId'),(1, 'id'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaContextCreate1():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC1_head),POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_VIRTUAL_IF_TUNNEL_INFO0_head),POINTER(UInt64),POINTER(UInt64), use_last_error=False)(("IPsecSaContextCreate1", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'outboundTraffic'),(1, 'virtualIfTunnelInfo'),(1, 'inboundFilterId'),(1, 'id'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaContextDeleteById0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt64, use_last_error=False)(("IPsecSaContextDeleteById0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaContextGetById0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt64,POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CONTEXT0_head)), use_last_error=False)(("IPsecSaContextGetById0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),(1, 'saContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaContextGetById1():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt64,POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CONTEXT1_head)), use_last_error=False)(("IPsecSaContextGetById1", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),(1, 'saContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaContextGetSpi0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt64,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_GETSPI0_head),POINTER(UInt32), use_last_error=False)(("IPsecSaContextGetSpi0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),(1, 'getSpi'),(1, 'inboundSpi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaContextGetSpi1():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt64,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_GETSPI1_head),POINTER(UInt32), use_last_error=False)(("IPsecSaContextGetSpi1", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),(1, 'getSpi'),(1, 'inboundSpi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaContextSetSpi0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt64,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_GETSPI1_head),UInt32, use_last_error=False)(("IPsecSaContextSetSpi0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),(1, 'getSpi'),(1, 'inboundSpi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaContextAddInbound0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt64,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_BUNDLE0_head), use_last_error=False)(("IPsecSaContextAddInbound0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),(1, 'inboundBundle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaContextAddOutbound0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt64,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_BUNDLE0_head), use_last_error=False)(("IPsecSaContextAddOutbound0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),(1, 'outboundBundle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaContextAddInbound1():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt64,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_BUNDLE1_head), use_last_error=False)(("IPsecSaContextAddInbound1", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),(1, 'inboundBundle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaContextAddOutbound1():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt64,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_BUNDLE1_head), use_last_error=False)(("IPsecSaContextAddOutbound1", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),(1, 'outboundBundle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaContextExpire0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt64, use_last_error=False)(("IPsecSaContextExpire0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaContextUpdate0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt64,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CONTEXT1_head), use_last_error=False)(("IPsecSaContextUpdate0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'flags'),(1, 'newValues'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaContextCreateEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CONTEXT_ENUM_TEMPLATE0_head),POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("IPsecSaContextCreateEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumTemplate'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaContextEnum0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CONTEXT0_head))),POINTER(UInt32), use_last_error=False)(("IPsecSaContextEnum0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),(1, 'numEntriesRequested'),(1, 'entries'),(1, 'numEntriesReturned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaContextEnum1():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CONTEXT1_head))),POINTER(UInt32), use_last_error=False)(("IPsecSaContextEnum1", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),(1, 'numEntriesRequested'),(1, 'entries'),(1, 'numEntriesReturned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaContextDestroyEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE, use_last_error=False)(("IPsecSaContextDestroyEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaContextSubscribe0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CONTEXT_SUBSCRIPTION0_head),win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CONTEXT_CALLBACK0,c_void_p,POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("IPsecSaContextSubscribe0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'subscription'),(1, 'callback'),(1, 'context'),(1, 'eventsHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaContextUnsubscribe0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE, use_last_error=False)(("IPsecSaContextUnsubscribe0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'eventsHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaContextSubscriptionsGet0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CONTEXT_SUBSCRIPTION0_head))),POINTER(UInt32), use_last_error=False)(("IPsecSaContextSubscriptionsGet0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'entries'),(1, 'numEntries'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaCreateEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_ENUM_TEMPLATE0_head),POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("IPsecSaCreateEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumTemplate'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaEnum0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_DETAILS0_head))),POINTER(UInt32), use_last_error=False)(("IPsecSaEnum0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),(1, 'numEntriesRequested'),(1, 'entries'),(1, 'numEntriesReturned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaEnum1():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_DETAILS1_head))),POINTER(UInt32), use_last_error=False)(("IPsecSaEnum1", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),(1, 'numEntriesRequested'),(1, 'entries'),(1, 'numEntriesReturned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaDestroyEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE, use_last_error=False)(("IPsecSaDestroyEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaDbGetSecurityInfo0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt32,POINTER(win32more.Foundation.PSID),POINTER(win32more.Foundation.PSID),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.SECURITY_DESCRIPTOR_head)), use_last_error=False)(("IPsecSaDbGetSecurityInfo0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),(1, 'securityDescriptor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecSaDbSetSecurityInfo0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt32,POINTER(win32more.Security.SID_head),POINTER(win32more.Security.SID_head),POINTER(win32more.Security.ACL_head),POINTER(win32more.Security.ACL_head), use_last_error=False)(("IPsecSaDbSetSecurityInfo0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecDospGetStatistics0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_DOSP_STATISTICS0_head), use_last_error=False)(("IPsecDospGetStatistics0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'idpStatistics'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecDospStateCreateEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_DOSP_STATE_ENUM_TEMPLATE0_head),POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("IPsecDospStateCreateEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumTemplate'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecDospStateEnum0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_DOSP_STATE0_head))),POINTER(UInt32), use_last_error=False)(("IPsecDospStateEnum0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),(1, 'numEntriesRequested'),(1, 'entries'),(1, 'numEntries'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecDospStateDestroyEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE, use_last_error=False)(("IPsecDospStateDestroyEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecDospGetSecurityInfo0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt32,POINTER(win32more.Foundation.PSID),POINTER(win32more.Foundation.PSID),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.SECURITY_DESCRIPTOR_head)), use_last_error=False)(("IPsecDospGetSecurityInfo0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),(1, 'securityDescriptor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecDospSetSecurityInfo0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt32,POINTER(win32more.Security.SID_head),POINTER(win32more.Security.SID_head),POINTER(win32more.Security.ACL_head),POINTER(win32more.Security.ACL_head), use_last_error=False)(("IPsecDospSetSecurityInfo0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecKeyManagerAddAndRegister0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_KEY_MANAGER0_head),POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_KEY_MANAGER_CALLBACKS0_head),POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("IPsecKeyManagerAddAndRegister0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'keyManager'),(1, 'keyManagerCallbacks'),(1, 'keyMgmtHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecKeyManagerUnregisterAndDelete0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE, use_last_error=False)(("IPsecKeyManagerUnregisterAndDelete0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'keyMgmtHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecKeyManagersGet0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IPSEC_KEY_MANAGER0_head))),POINTER(UInt32), use_last_error=False)(("IPsecKeyManagersGet0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'entries'),(1, 'numEntries'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecKeyManagerGetSecurityInfoByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,c_void_p,UInt32,POINTER(win32more.Foundation.PSID),POINTER(win32more.Foundation.PSID),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.SECURITY_DESCRIPTOR_head)), use_last_error=False)(("IPsecKeyManagerGetSecurityInfoByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'reserved'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),(1, 'securityDescriptor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IPsecKeyManagerSetSecurityInfoByKey0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,c_void_p,UInt32,POINTER(win32more.Security.SID_head),POINTER(win32more.Security.SID_head),POINTER(win32more.Security.ACL_head),POINTER(win32more.Security.ACL_head), use_last_error=False)(("IPsecKeyManagerSetSecurityInfoByKey0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'reserved'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IkeextGetStatistics0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_STATISTICS0_head), use_last_error=False)(("IkeextGetStatistics0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'ikeextStatistics'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IkeextGetStatistics1():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_STATISTICS1_head), use_last_error=False)(("IkeextGetStatistics1", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'ikeextStatistics'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IkeextSaDeleteById0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt64, use_last_error=False)(("IkeextSaDeleteById0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IkeextSaGetById0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt64,POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_DETAILS0_head)), use_last_error=False)(("IkeextSaGetById0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),(1, 'sa'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IkeextSaGetById1():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt64,POINTER(Guid),POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_DETAILS1_head)), use_last_error=False)(("IkeextSaGetById1", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),(1, 'saLookupContext'),(1, 'sa'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IkeextSaGetById2():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt64,POINTER(Guid),POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_DETAILS2_head)), use_last_error=False)(("IkeextSaGetById2", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),(1, 'saLookupContext'),(1, 'sa'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IkeextSaCreateEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_ENUM_TEMPLATE0_head),POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("IkeextSaCreateEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumTemplate'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IkeextSaEnum0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_DETAILS0_head))),POINTER(UInt32), use_last_error=False)(("IkeextSaEnum0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),(1, 'numEntriesRequested'),(1, 'entries'),(1, 'numEntriesReturned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IkeextSaEnum1():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_DETAILS1_head))),POINTER(UInt32), use_last_error=False)(("IkeextSaEnum1", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),(1, 'numEntriesRequested'),(1, 'entries'),(1, 'numEntriesReturned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IkeextSaEnum2():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_DETAILS2_head))),POINTER(UInt32), use_last_error=False)(("IkeextSaEnum2", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),(1, 'numEntriesRequested'),(1, 'entries'),(1, 'numEntriesReturned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IkeextSaDestroyEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE, use_last_error=False)(("IkeextSaDestroyEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IkeextSaDbGetSecurityInfo0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt32,POINTER(win32more.Foundation.PSID),POINTER(win32more.Foundation.PSID),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.SECURITY_DESCRIPTOR_head)), use_last_error=False)(("IkeextSaDbGetSecurityInfo0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),(1, 'securityDescriptor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IkeextSaDbSetSecurityInfo0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt32,POINTER(win32more.Security.SID_head),POINTER(win32more.Security.SID_head),POINTER(win32more.Security.ACL_head),POINTER(win32more.Security.ACL_head), use_last_error=False)(("IkeextSaDbSetSecurityInfo0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmNetEventCreateEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_ENUM_TEMPLATE0_head),POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("FwpmNetEventCreateEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumTemplate'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmNetEventEnum0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT0_head))),POINTER(UInt32), use_last_error=False)(("FwpmNetEventEnum0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),(1, 'numEntriesRequested'),(1, 'entries'),(1, 'numEntriesReturned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmNetEventEnum1():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT1_head))),POINTER(UInt32), use_last_error=False)(("FwpmNetEventEnum1", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),(1, 'numEntriesRequested'),(1, 'entries'),(1, 'numEntriesReturned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmNetEventEnum2():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT2_head))),POINTER(UInt32), use_last_error=False)(("FwpmNetEventEnum2", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),(1, 'numEntriesRequested'),(1, 'entries'),(1, 'numEntriesReturned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmNetEventEnum3():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT3_head))),POINTER(UInt32), use_last_error=False)(("FwpmNetEventEnum3", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),(1, 'numEntriesRequested'),(1, 'entries'),(1, 'numEntriesReturned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmNetEventEnum4():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT4__head))),POINTER(UInt32), use_last_error=False)(("FwpmNetEventEnum4", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),(1, 'numEntriesRequested'),(1, 'entries'),(1, 'numEntriesReturned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmNetEventEnum5():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT5__head))),POINTER(UInt32), use_last_error=False)(("FwpmNetEventEnum5", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),(1, 'numEntriesRequested'),(1, 'entries'),(1, 'numEntriesReturned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmNetEventDestroyEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE, use_last_error=False)(("FwpmNetEventDestroyEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmNetEventsGetSecurityInfo0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt32,POINTER(win32more.Foundation.PSID),POINTER(win32more.Foundation.PSID),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.SECURITY_DESCRIPTOR_head)), use_last_error=False)(("FwpmNetEventsGetSecurityInfo0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),(1, 'securityDescriptor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmNetEventsSetSecurityInfo0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt32,POINTER(win32more.Security.SID_head),POINTER(win32more.Security.SID_head),POINTER(win32more.Security.ACL_head),POINTER(win32more.Security.ACL_head), use_last_error=False)(("FwpmNetEventsSetSecurityInfo0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmNetEventSubscribe0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_SUBSCRIPTION0_head),win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CALLBACK0,c_void_p,POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("FwpmNetEventSubscribe0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'subscription'),(1, 'callback'),(1, 'context'),(1, 'eventsHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmNetEventUnsubscribe0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE, use_last_error=False)(("FwpmNetEventUnsubscribe0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'eventsHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmNetEventSubscriptionsGet0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_SUBSCRIPTION0_head))),POINTER(UInt32), use_last_error=False)(("FwpmNetEventSubscriptionsGet0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'entries'),(1, 'numEntries'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmNetEventSubscribe1():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_SUBSCRIPTION0_head),win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CALLBACK1,c_void_p,POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("FwpmNetEventSubscribe1", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'subscription'),(1, 'callback'),(1, 'context'),(1, 'eventsHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmNetEventSubscribe2():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_SUBSCRIPTION0_head),win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CALLBACK2,c_void_p,POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("FwpmNetEventSubscribe2", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'subscription'),(1, 'callback'),(1, 'context'),(1, 'eventsHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmNetEventSubscribe3():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_SUBSCRIPTION0_head),win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CALLBACK3,c_void_p,POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("FwpmNetEventSubscribe3", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'subscription'),(1, 'callback'),(1, 'context'),(1, 'eventsHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmNetEventSubscribe4():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_SUBSCRIPTION0_head),win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CALLBACK4,c_void_p,POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("FwpmNetEventSubscribe4", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'subscription'),(1, 'callback'),(1, 'context'),(1, 'eventsHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmDynamicKeywordSubscribe0():
    try:
        return WINFUNCTYPE(UInt32,UInt32,win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_DYNAMIC_KEYWORD_CALLBACK0,c_void_p,POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("FwpmDynamicKeywordSubscribe0", windll["fwpuclnt"]), ((1, 'flags'),(1, 'callback'),(1, 'context'),(1, 'subscriptionHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmDynamicKeywordUnsubscribe0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE, use_last_error=False)(("FwpmDynamicKeywordUnsubscribe0", windll["fwpuclnt"]), ((1, 'subscriptionHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmSystemPortsGet0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SYSTEM_PORTS0_head)), use_last_error=False)(("FwpmSystemPortsGet0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'sysPorts'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmSystemPortsSubscribe0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,c_void_p,win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_SYSTEM_PORTS_CALLBACK0,c_void_p,POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("FwpmSystemPortsSubscribe0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'reserved'),(1, 'callback'),(1, 'context'),(1, 'sysPortsHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmSystemPortsUnsubscribe0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE, use_last_error=False)(("FwpmSystemPortsUnsubscribe0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'sysPortsHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmConnectionGetById0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt64,POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CONNECTION0_head)), use_last_error=False)(("FwpmConnectionGetById0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'id'),(1, 'connection'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmConnectionEnum0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE,UInt32,POINTER(POINTER(POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CONNECTION0_head))),POINTER(UInt32), use_last_error=False)(("FwpmConnectionEnum0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),(1, 'numEntriesRequested'),(1, 'entries'),(1, 'numEntriesReturned'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmConnectionCreateEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CONNECTION_ENUM_TEMPLATE0_head),POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("FwpmConnectionCreateEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumTemplate'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmConnectionDestroyEnumHandle0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE, use_last_error=False)(("FwpmConnectionDestroyEnumHandle0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'enumHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmConnectionGetSecurityInfo0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt32,POINTER(win32more.Foundation.PSID),POINTER(win32more.Foundation.PSID),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.SECURITY_DESCRIPTOR_head)), use_last_error=False)(("FwpmConnectionGetSecurityInfo0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),(1, 'securityDescriptor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmConnectionSetSecurityInfo0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt32,POINTER(win32more.Security.SID_head),POINTER(win32more.Security.SID_head),POINTER(win32more.Security.ACL_head),POINTER(win32more.Security.ACL_head), use_last_error=False)(("FwpmConnectionSetSecurityInfo0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmConnectionSubscribe0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CONNECTION_SUBSCRIPTION0_head),win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_CONNECTION_CALLBACK0,c_void_p,POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("FwpmConnectionSubscribe0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'subscription'),(1, 'callback'),(1, 'context'),(1, 'eventsHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmConnectionUnsubscribe0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE, use_last_error=False)(("FwpmConnectionUnsubscribe0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'eventsHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmvSwitchEventSubscribe0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,POINTER(win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_VSWITCH_EVENT_SUBSCRIPTION0_head),win32more.NetworkManagement.WindowsFilteringPlatform.FWPM_VSWITCH_EVENT_CALLBACK0,c_void_p,POINTER(win32more.Foundation.HANDLE), use_last_error=False)(("FwpmvSwitchEventSubscribe0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'subscription'),(1, 'callback'),(1, 'context'),(1, 'subscriptionHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmvSwitchEventUnsubscribe0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,win32more.Foundation.HANDLE, use_last_error=False)(("FwpmvSwitchEventUnsubscribe0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'subscriptionHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmvSwitchEventsGetSecurityInfo0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt32,POINTER(win32more.Foundation.PSID),POINTER(win32more.Foundation.PSID),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.ACL_head)),POINTER(POINTER(win32more.Security.SECURITY_DESCRIPTOR_head)), use_last_error=False)(("FwpmvSwitchEventsGetSecurityInfo0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),(1, 'securityDescriptor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FwpmvSwitchEventsSetSecurityInfo0():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HANDLE,UInt32,POINTER(win32more.Security.SID_head),POINTER(win32more.Security.SID_head),POINTER(win32more.Security.ACL_head),POINTER(win32more.Security.ACL_head), use_last_error=False)(("FwpmvSwitchEventsSetSecurityInfo0", windll["fwpuclnt"]), ((1, 'engineHandle'),(1, 'securityInfo'),(1, 'sidOwner'),(1, 'sidGroup'),(1, 'dacl'),(1, 'sacl'),))
    except (FileNotFoundError, AttributeError):
        return None
__all__ = [
    "FWPM_NET_EVENT_KEYWORD_INBOUND_MCAST",
    "FWPM_NET_EVENT_KEYWORD_INBOUND_BCAST",
    "FWPM_NET_EVENT_KEYWORD_CAPABILITY_DROP",
    "FWPM_NET_EVENT_KEYWORD_CAPABILITY_ALLOW",
    "FWPM_NET_EVENT_KEYWORD_CLASSIFY_ALLOW",
    "FWPM_NET_EVENT_KEYWORD_PORT_SCANNING_DROP",
    "FWPM_ENGINE_OPTION_PACKET_QUEUE_NONE",
    "FWPM_ENGINE_OPTION_PACKET_QUEUE_INBOUND",
    "FWPM_ENGINE_OPTION_PACKET_QUEUE_FORWARD",
    "FWPM_ENGINE_OPTION_PACKET_BATCH_INBOUND",
    "FWPM_SESSION_FLAG_DYNAMIC",
    "FWPM_SESSION_FLAG_RESERVED",
    "FWPM_PROVIDER_FLAG_PERSISTENT",
    "FWPM_PROVIDER_FLAG_DISABLED",
    "FWPM_PROVIDER_CONTEXT_FLAG_PERSISTENT",
    "FWPM_PROVIDER_CONTEXT_FLAG_DOWNLEVEL",
    "FWPM_SUBLAYER_FLAG_PERSISTENT",
    "FWPM_LAYER_FLAG_KERNEL",
    "FWPM_LAYER_FLAG_BUILTIN",
    "FWPM_LAYER_FLAG_CLASSIFY_MOSTLY",
    "FWPM_LAYER_FLAG_BUFFERED",
    "FWPM_CALLOUT_FLAG_PERSISTENT",
    "FWPM_CALLOUT_FLAG_USES_PROVIDER_CONTEXT",
    "FWPM_CALLOUT_FLAG_REGISTERED",
    "FWPM_FILTER_FLAG_HAS_SECURITY_REALM_PROVIDER_CONTEXT",
    "FWPM_FILTER_FLAG_SYSTEMOS_ONLY",
    "FWPM_FILTER_FLAG_GAMEOS_ONLY",
    "FWPM_FILTER_FLAG_SILENT_MODE",
    "FWPM_FILTER_FLAG_IPSEC_NO_ACQUIRE_INITIATE",
    "FWPM_FILTER_FLAG_RESERVED0",
    "FWPM_FILTER_FLAG_RESERVED1",
    "FWPM_NET_EVENT_FLAG_IP_PROTOCOL_SET",
    "FWPM_NET_EVENT_FLAG_LOCAL_ADDR_SET",
    "FWPM_NET_EVENT_FLAG_REMOTE_ADDR_SET",
    "FWPM_NET_EVENT_FLAG_LOCAL_PORT_SET",
    "FWPM_NET_EVENT_FLAG_REMOTE_PORT_SET",
    "FWPM_NET_EVENT_FLAG_APP_ID_SET",
    "FWPM_NET_EVENT_FLAG_USER_ID_SET",
    "FWPM_NET_EVENT_FLAG_SCOPE_ID_SET",
    "FWPM_NET_EVENT_FLAG_IP_VERSION_SET",
    "FWPM_NET_EVENT_FLAG_REAUTH_REASON_SET",
    "FWPM_NET_EVENT_FLAG_PACKAGE_ID_SET",
    "FWPM_NET_EVENT_FLAG_ENTERPRISE_ID_SET",
    "FWPM_NET_EVENT_FLAG_POLICY_FLAGS_SET",
    "FWPM_NET_EVENT_FLAG_EFFECTIVE_NAME_SET",
    "IKEEXT_CERT_HASH_LEN",
    "FWPM_NET_EVENT_IKEEXT_MM_FAILURE_FLAG_BENIGN",
    "FWPM_NET_EVENT_IKEEXT_MM_FAILURE_FLAG_MULTIPLE",
    "FWPM_NET_EVENT_IKEEXT_EM_FAILURE_FLAG_MULTIPLE",
    "FWPM_NET_EVENT_IKEEXT_EM_FAILURE_FLAG_BENIGN",
    "FWPM_CONNECTION_ENUM_FLAG_QUERY_BYTES_TRANSFERRED",
    "FWPS_FILTER_FLAG_CLEAR_ACTION_RIGHT",
    "FWPS_FILTER_FLAG_PERMIT_IF_CALLOUT_UNREGISTERED",
    "FWPS_FILTER_FLAG_OR_CONDITIONS",
    "FWPS_FILTER_FLAG_HAS_SECURITY_REALM_PROVIDER_CONTEXT",
    "FWPS_FILTER_FLAG_SILENT_MODE",
    "FWPS_FILTER_FLAG_IPSEC_NO_ACQUIRE_INITIATE",
    "FWPS_FILTER_FLAG_RESERVED0",
    "FWPS_FILTER_FLAG_RESERVED1",
    "FWPS_INCOMING_FLAG_CACHE_SAFE",
    "FWPS_INCOMING_FLAG_ENFORCE_QUERY",
    "FWPS_INCOMING_FLAG_ABSORB",
    "FWPS_INCOMING_FLAG_CONNECTION_FAILING_INDICATION",
    "FWPS_INCOMING_FLAG_MID_STREAM_INSPECTION",
    "FWPS_INCOMING_FLAG_RECLASSIFY",
    "FWPS_INCOMING_FLAG_IS_LOOSE_SOURCE_FLOW",
    "FWPS_INCOMING_FLAG_IS_LOCAL_ONLY_FLOW",
    "FWPS_L2_INCOMING_FLAG_IS_RAW_IPV4_FRAMING",
    "FWPS_L2_INCOMING_FLAG_IS_RAW_IPV6_FRAMING",
    "FWPS_L2_INCOMING_FLAG_RECLASSIFY_MULTI_DESTINATION",
    "FWPS_INCOMING_FLAG_RESERVED0",
    "FWPS_RIGHT_ACTION_WRITE",
    "FWPS_CLASSIFY_OUT_FLAG_ABSORB",
    "FWPS_CLASSIFY_OUT_FLAG_BUFFER_LIMIT_REACHED",
    "FWPS_CLASSIFY_OUT_FLAG_NO_MORE_DATA",
    "FWPS_CLASSIFY_OUT_FLAG_ALE_FAST_CACHE_CHECK",
    "FWPS_CLASSIFY_OUT_FLAG_ALE_FAST_CACHE_POSSIBLE",
    "FWPS_ALE_ENDPOINT_FLAG_IPSEC_SECURED",
    "FWP_BYTEMAP_ARRAY64_SIZE",
    "FWP_BYTE_ARRAY6_SIZE",
    "FWP_V6_ADDR_SIZE",
    "FWP_ACTRL_MATCH_FILTER",
    "FWP_OPTION_VALUE_ALLOW_MULTICAST_STATE",
    "FWP_OPTION_VALUE_DENY_MULTICAST_STATE",
    "FWP_OPTION_VALUE_ALLOW_GLOBAL_MULTICAST_STATE",
    "FWP_OPTION_VALUE_DISABLE_LOOSE_SOURCE",
    "FWP_OPTION_VALUE_ENABLE_LOOSE_SOURCE",
    "FWP_OPTION_VALUE_DISABLE_LOCAL_ONLY_MAPPING",
    "FWP_OPTION_VALUE_ENABLE_LOCAL_ONLY_MAPPING",
    "FWP_ACTION_FLAG_TERMINATING",
    "FWP_ACTION_FLAG_NON_TERMINATING",
    "FWP_ACTION_FLAG_CALLOUT",
    "FWP_ACTION_NONE",
    "FWP_ACTION_NONE_NO_MATCH",
    "FWP_CONDITION_FLAG_IS_LOOPBACK",
    "FWP_CONDITION_FLAG_IS_IPSEC_SECURED",
    "FWP_CONDITION_FLAG_IS_REAUTHORIZE",
    "FWP_CONDITION_FLAG_IS_WILDCARD_BIND",
    "FWP_CONDITION_FLAG_IS_RAW_ENDPOINT",
    "FWP_CONDITION_FLAG_IS_FRAGMENT",
    "FWP_CONDITION_FLAG_IS_FRAGMENT_GROUP",
    "FWP_CONDITION_FLAG_IS_IPSEC_NATT_RECLASSIFY",
    "FWP_CONDITION_FLAG_REQUIRES_ALE_CLASSIFY",
    "FWP_CONDITION_FLAG_IS_IMPLICIT_BIND",
    "FWP_CONDITION_FLAG_IS_REASSEMBLED",
    "FWP_CONDITION_FLAG_IS_NAME_APP_SPECIFIED",
    "FWP_CONDITION_FLAG_IS_PROMISCUOUS",
    "FWP_CONDITION_FLAG_IS_AUTH_FW",
    "FWP_CONDITION_FLAG_IS_RECLASSIFY",
    "FWP_CONDITION_FLAG_IS_OUTBOUND_PASS_THRU",
    "FWP_CONDITION_FLAG_IS_INBOUND_PASS_THRU",
    "FWP_CONDITION_FLAG_IS_CONNECTION_REDIRECTED",
    "FWP_CONDITION_FLAG_IS_PROXY_CONNECTION",
    "FWP_CONDITION_FLAG_IS_APPCONTAINER_LOOPBACK",
    "FWP_CONDITION_FLAG_IS_NON_APPCONTAINER_LOOPBACK",
    "FWP_CONDITION_FLAG_IS_RESERVED",
    "FWP_CONDITION_FLAG_IS_HONORING_POLICY_AUTHORIZE",
    "FWP_CONDITION_REAUTHORIZE_REASON_POLICY_CHANGE",
    "FWP_CONDITION_REAUTHORIZE_REASON_NEW_ARRIVAL_INTERFACE",
    "FWP_CONDITION_REAUTHORIZE_REASON_NEW_NEXTHOP_INTERFACE",
    "FWP_CONDITION_REAUTHORIZE_REASON_PROFILE_CROSSING",
    "FWP_CONDITION_REAUTHORIZE_REASON_CLASSIFY_COMPLETION",
    "FWP_CONDITION_REAUTHORIZE_REASON_IPSEC_PROPERTIES_CHANGED",
    "FWP_CONDITION_REAUTHORIZE_REASON_MID_STREAM_INSPECTION",
    "FWP_CONDITION_REAUTHORIZE_REASON_SOCKET_PROPERTY_CHANGED",
    "FWP_CONDITION_REAUTHORIZE_REASON_NEW_INBOUND_MCAST_BCAST_PACKET",
    "FWP_CONDITION_REAUTHORIZE_REASON_EDP_POLICY_CHANGED",
    "FWP_CONDITION_REAUTHORIZE_REASON_PROXY_HANDLE_CHANGED",
    "FWP_CONDITION_REAUTHORIZE_REASON_CHECK_OFFLOAD",
    "FWP_CONDITION_SOCKET_PROPERTY_FLAG_IS_SYSTEM_PORT_RPC",
    "FWP_CONDITION_SOCKET_PROPERTY_FLAG_ALLOW_EDGE_TRAFFIC",
    "FWP_CONDITION_SOCKET_PROPERTY_FLAG_DENY_EDGE_TRAFFIC",
    "FWP_CONDITION_L2_IS_NATIVE_ETHERNET",
    "FWP_CONDITION_L2_IS_WIFI",
    "FWP_CONDITION_L2_IS_MOBILE_BROADBAND",
    "FWP_CONDITION_L2_IS_WIFI_DIRECT_DATA",
    "FWP_CONDITION_L2_IS_VM2VM",
    "FWP_CONDITION_L2_IS_MALFORMED_PACKET",
    "FWP_CONDITION_L2_IS_IP_FRAGMENT_GROUP",
    "FWP_CONDITION_L2_IF_CONNECTOR_PRESENT",
    "FWP_FILTER_ENUM_FLAG_BEST_TERMINATING_MATCH",
    "FWP_FILTER_ENUM_FLAG_SORTED",
    "FWP_FILTER_ENUM_FLAG_BOOTTIME_ONLY",
    "FWP_FILTER_ENUM_FLAG_INCLUDE_BOOTTIME",
    "FWP_FILTER_ENUM_FLAG_INCLUDE_DISABLED",
    "FWP_FILTER_ENUM_FLAG_RESERVED1",
    "FWP_CALLOUT_FLAG_CONDITIONAL_ON_FLOW",
    "FWP_CALLOUT_FLAG_ALLOW_OFFLOAD",
    "FWP_CALLOUT_FLAG_ENABLE_COMMIT_ADD_NOTIFY",
    "FWP_CALLOUT_FLAG_ALLOW_MID_STREAM_INSPECTION",
    "FWP_CALLOUT_FLAG_ALLOW_RECLASSIFY",
    "FWP_CALLOUT_FLAG_RESERVED1",
    "FWP_CALLOUT_FLAG_ALLOW_RSC",
    "FWP_CALLOUT_FLAG_ALLOW_L2_BATCH_CLASSIFY",
    "FWP_CALLOUT_FLAG_ALLOW_USO",
    "FWP_CALLOUT_FLAG_ALLOW_URO",
    "FWP_CALLOUT_FLAG_RESERVED2",
    "IKEEXT_CERT_AUTH_FLAG_DISABLE_CRL_CHECK",
    "IKEEXT_CERT_AUTH_FLAG_DISABLE_REQUEST_PAYLOAD",
    "IKEEXT_KERB_AUTH_FORCE_PROXY_ON_INITIATOR",
    "IKEEXT_NTLM_V2_AUTH_DONT_ACCEPT_EXPLICIT_CREDENTIALS",
    "IKEEXT_POLICY_FLAG_MOBIKE_NOT_SUPPORTED",
    "IKEEXT_POLICY_FLAG_SITE_TO_SITE",
    "IKEEXT_POLICY_FLAG_IMS_VPN",
    "IKEEXT_POLICY_ENABLE_IKEV2_FRAGMENTATION",
    "IKEEXT_POLICY_SUPPORT_LOW_POWER_MODE",
    "IKEEXT_CERT_CREDENTIAL_FLAG_NAP_CERT",
    "IPSEC_AUTH_CONFIG_HMAC_MD5_96",
    "IPSEC_AUTH_CONFIG_HMAC_SHA_1_96",
    "IPSEC_AUTH_CONFIG_HMAC_SHA_256_128",
    "IPSEC_AUTH_CONFIG_GCM_AES_128",
    "IPSEC_AUTH_CONFIG_GCM_AES_192",
    "IPSEC_AUTH_CONFIG_GCM_AES_256",
    "IPSEC_AUTH_CONFIG_MAX",
    "IPSEC_CIPHER_CONFIG_CBC_DES",
    "IPSEC_CIPHER_CONFIG_CBC_3DES",
    "IPSEC_CIPHER_CONFIG_CBC_AES_128",
    "IPSEC_CIPHER_CONFIG_CBC_AES_192",
    "IPSEC_CIPHER_CONFIG_CBC_AES_256",
    "IPSEC_CIPHER_CONFIG_GCM_AES_128",
    "IPSEC_CIPHER_CONFIG_GCM_AES_192",
    "IPSEC_CIPHER_CONFIG_GCM_AES_256",
    "IPSEC_CIPHER_CONFIG_MAX",
    "IPSEC_POLICY_FLAG_KEY_MANAGER_ALLOW_NOTIFY_KEY",
    "IPSEC_POLICY_FLAG_RESERVED1",
    "IPSEC_POLICY_FLAG_SITE_TO_SITE_TUNNEL",
    "IPSEC_KEYING_POLICY_FLAG_TERMINATING_MATCH",
    "IPSEC_SA_BUNDLE_FLAG_NLB",
    "IPSEC_SA_BUNDLE_FLAG_NO_MACHINE_LUID_VERIFY",
    "IPSEC_SA_BUNDLE_FLAG_NO_IMPERSONATION_LUID_VERIFY",
    "IPSEC_SA_BUNDLE_FLAG_NO_EXPLICIT_CRED_MATCH",
    "IPSEC_SA_BUNDLE_FLAG_FORCE_INBOUND_CONNECTIONS",
    "IPSEC_SA_BUNDLE_FLAG_FORCE_OUTBOUND_CONNECTIONS",
    "IPSEC_SA_BUNDLE_FLAG_FORWARD_PATH_INITIATOR",
    "IPSEC_SA_BUNDLE_FLAG_ENABLE_OPTIONAL_ASYMMETRIC_IDLE",
    "IPSEC_SA_BUNDLE_FLAG_USING_DICTATED_KEYS",
    "IPSEC_SA_BUNDLE_FLAG_LOCALLY_DICTATED_KEYS",
    "IPSEC_SA_BUNDLE_FLAG_SA_OFFLOADED",
    "IPSEC_SA_BUNDLE_FLAG_IP_IN_IP_PKT",
    "IPSEC_SA_BUNDLE_FLAG_LOW_POWER_MODE_SUPPORT",
    "IPSEC_DOSP_DSCP_DISABLE_VALUE",
    "IPSEC_DOSP_RATE_LIMIT_DISABLE_VALUE",
    "IPSEC_KEY_MANAGER_FLAG_DICTATE_KEY",
    "_LITTLE_ENDIAN",
    "_BIG_ENDIAN",
    "_PDP_ENDIAN",
    "BYTE_ORDER",
    "DL_ADDRESS_LENGTH_MAXIMUM",
    "DL_HEADER_LENGTH_MAXIMUM",
    "SNAP_DSAP",
    "SNAP_SSAP",
    "SNAP_CONTROL",
    "SNAP_OUI",
    "ETH_LENGTH_OF_HEADER",
    "ETH_LENGTH_OF_VLAN_HEADER",
    "ETH_LENGTH_OF_SNAP_HEADER",
    "ETHERNET_TYPE_MINIMUM",
    "ETHERNET_TYPE_IPV4",
    "ETHERNET_TYPE_ARP",
    "ETHERNET_TYPE_IPV6",
    "ETHERNET_TYPE_802_1Q",
    "ETHERNET_TYPE_802_1AD",
    "IP_VER_MASK",
    "IPV4_VERSION",
    "MAX_IPV4_PACKET",
    "MAX_IPV4_HLEN",
    "IPV4_MINIMUM_MTU",
    "IPV4_MIN_MINIMUM_MTU",
    "IPV4_MAX_MINIMUM_MTU",
    "SIZEOF_IP_OPT_ROUTING_HEADER",
    "SIZEOF_IP_OPT_TIMESTAMP_HEADER",
    "SIZEOF_IP_OPT_SECURITY",
    "SIZEOF_IP_OPT_STREAMIDENTIFIER",
    "SIZEOF_IP_OPT_ROUTERALERT",
    "IP4_OFF_MASK",
    "ICMPV4_INVALID_PREFERENCE_LEVEL",
    "IGMP_QUERY_TYPE",
    "IGMP_VERSION1_REPORT_TYPE",
    "IGMP_VERSION2_REPORT_TYPE",
    "IGMP_LEAVE_GROUP_TYPE",
    "IGMP_VERSION3_REPORT_TYPE",
    "IPV6_VERSION",
    "IPV6_TRAFFIC_CLASS_MASK",
    "IPV6_FULL_TRAFFIC_CLASS_MASK",
    "IPV6_ECN_MASK",
    "IPV6_FLOW_LABEL_MASK",
    "MAX_IPV6_PAYLOAD",
    "IPV6_ECN_SHIFT",
    "IPV6_MINIMUM_MTU",
    "IP6F_OFF_MASK",
    "IP6F_RESERVED_MASK",
    "IP6F_MORE_FRAG",
    "EXT_LEN_UNIT",
    "IP6OPT_TYPE_SKIP",
    "IP6OPT_TYPE_DISCARD",
    "IP6OPT_TYPE_FORCEICMP",
    "IP6OPT_TYPE_ICMP",
    "IP6OPT_MUTABLE",
    "ICMP6_DST_UNREACH_NOROUTE",
    "ICMP6_DST_UNREACH_ADMIN",
    "ICMP6_DST_UNREACH_BEYONDSCOPE",
    "ICMP6_DST_UNREACH_ADDR",
    "ICMP6_DST_UNREACH_NOPORT",
    "ICMP6_TIME_EXCEED_TRANSIT",
    "ICMP6_TIME_EXCEED_REASSEMBLY",
    "ICMP6_PARAMPROB_HEADER",
    "ICMP6_PARAMPROB_NEXTHEADER",
    "ICMP6_PARAMPROB_OPTION",
    "ICMPV6_ECHO_REQUEST_FLAG_REVERSE",
    "ND_RA_FLAG_MANAGED",
    "ND_RA_FLAG_OTHER",
    "ND_RA_FLAG_HOME_AGENT",
    "ND_RA_FLAG_PREFERENCE",
    "ND_NA_FLAG_ROUTER",
    "ND_NA_FLAG_SOLICITED",
    "ND_NA_FLAG_OVERRIDE",
    "ND_OPT_PI_FLAG_ONLINK",
    "ND_OPT_PI_FLAG_AUTO",
    "ND_OPT_PI_FLAG_ROUTER_ADDR",
    "ND_OPT_PI_FLAG_SITE_PREFIX",
    "ND_OPT_PI_FLAG_ROUTE",
    "ND_OPT_RI_FLAG_PREFERENCE",
    "ND_OPT_RDNSS_MIN_LEN",
    "ND_OPT_DNSSL_MIN_LEN",
    "IN6_EMBEDDEDV4_UOCTET_POSITION",
    "IN6_EMBEDDEDV4_BITS_IN_BYTE",
    "TH_FIN",
    "TH_SYN",
    "TH_RST",
    "TH_PSH",
    "TH_ACK",
    "TH_URG",
    "TH_ECE",
    "TH_CWR",
    "TH_OPT_EOL",
    "TH_OPT_NOP",
    "TH_OPT_MSS",
    "TH_OPT_WS",
    "TH_OPT_SACK_PERMITTED",
    "TH_OPT_SACK",
    "TH_OPT_TS",
    "TH_OPT_FASTOPEN",
    "FWPM_LAYER_INBOUND_IPPACKET_V4",
    "FWPM_LAYER_INBOUND_IPPACKET_V4_DISCARD",
    "FWPM_LAYER_INBOUND_IPPACKET_V6",
    "FWPM_LAYER_INBOUND_IPPACKET_V6_DISCARD",
    "FWPM_LAYER_OUTBOUND_IPPACKET_V4",
    "FWPM_LAYER_OUTBOUND_IPPACKET_V4_DISCARD",
    "FWPM_LAYER_OUTBOUND_IPPACKET_V6",
    "FWPM_LAYER_OUTBOUND_IPPACKET_V6_DISCARD",
    "FWPM_LAYER_IPFORWARD_V4",
    "FWPM_LAYER_IPFORWARD_V4_DISCARD",
    "FWPM_LAYER_IPFORWARD_V6",
    "FWPM_LAYER_IPFORWARD_V6_DISCARD",
    "FWPM_LAYER_INBOUND_TRANSPORT_V4",
    "FWPM_LAYER_INBOUND_TRANSPORT_V4_DISCARD",
    "FWPM_LAYER_INBOUND_TRANSPORT_V6",
    "FWPM_LAYER_INBOUND_TRANSPORT_V6_DISCARD",
    "FWPM_LAYER_OUTBOUND_TRANSPORT_V4",
    "FWPM_LAYER_OUTBOUND_TRANSPORT_V4_DISCARD",
    "FWPM_LAYER_OUTBOUND_TRANSPORT_V6",
    "FWPM_LAYER_OUTBOUND_TRANSPORT_V6_DISCARD",
    "FWPM_LAYER_STREAM_V4",
    "FWPM_LAYER_STREAM_V4_DISCARD",
    "FWPM_LAYER_STREAM_V6",
    "FWPM_LAYER_STREAM_V6_DISCARD",
    "FWPM_LAYER_DATAGRAM_DATA_V4",
    "FWPM_LAYER_DATAGRAM_DATA_V4_DISCARD",
    "FWPM_LAYER_DATAGRAM_DATA_V6",
    "FWPM_LAYER_DATAGRAM_DATA_V6_DISCARD",
    "FWPM_LAYER_INBOUND_ICMP_ERROR_V4",
    "FWPM_LAYER_INBOUND_ICMP_ERROR_V4_DISCARD",
    "FWPM_LAYER_INBOUND_ICMP_ERROR_V6",
    "FWPM_LAYER_INBOUND_ICMP_ERROR_V6_DISCARD",
    "FWPM_LAYER_OUTBOUND_ICMP_ERROR_V4",
    "FWPM_LAYER_OUTBOUND_ICMP_ERROR_V4_DISCARD",
    "FWPM_LAYER_OUTBOUND_ICMP_ERROR_V6",
    "FWPM_LAYER_OUTBOUND_ICMP_ERROR_V6_DISCARD",
    "FWPM_LAYER_ALE_RESOURCE_ASSIGNMENT_V4",
    "FWPM_LAYER_ALE_RESOURCE_ASSIGNMENT_V4_DISCARD",
    "FWPM_LAYER_ALE_RESOURCE_ASSIGNMENT_V6",
    "FWPM_LAYER_ALE_RESOURCE_ASSIGNMENT_V6_DISCARD",
    "FWPM_LAYER_ALE_AUTH_LISTEN_V4",
    "FWPM_LAYER_ALE_AUTH_LISTEN_V4_DISCARD",
    "FWPM_LAYER_ALE_AUTH_LISTEN_V6",
    "FWPM_LAYER_ALE_AUTH_LISTEN_V6_DISCARD",
    "FWPM_LAYER_ALE_AUTH_RECV_ACCEPT_V4",
    "FWPM_LAYER_ALE_AUTH_RECV_ACCEPT_V4_DISCARD",
    "FWPM_LAYER_ALE_AUTH_RECV_ACCEPT_V6",
    "FWPM_LAYER_ALE_AUTH_RECV_ACCEPT_V6_DISCARD",
    "FWPM_LAYER_ALE_AUTH_CONNECT_V4",
    "FWPM_LAYER_ALE_AUTH_CONNECT_V4_DISCARD",
    "FWPM_LAYER_ALE_AUTH_CONNECT_V6",
    "FWPM_LAYER_ALE_AUTH_CONNECT_V6_DISCARD",
    "FWPM_LAYER_ALE_FLOW_ESTABLISHED_V4",
    "FWPM_LAYER_ALE_FLOW_ESTABLISHED_V4_DISCARD",
    "FWPM_LAYER_ALE_FLOW_ESTABLISHED_V6",
    "FWPM_LAYER_ALE_FLOW_ESTABLISHED_V6_DISCARD",
    "FWPM_LAYER_INBOUND_MAC_FRAME_ETHERNET",
    "FWPM_LAYER_OUTBOUND_MAC_FRAME_ETHERNET",
    "FWPM_LAYER_INBOUND_MAC_FRAME_NATIVE",
    "FWPM_LAYER_OUTBOUND_MAC_FRAME_NATIVE",
    "FWPM_LAYER_INGRESS_VSWITCH_ETHERNET",
    "FWPM_LAYER_EGRESS_VSWITCH_ETHERNET",
    "FWPM_LAYER_INGRESS_VSWITCH_TRANSPORT_V4",
    "FWPM_LAYER_INGRESS_VSWITCH_TRANSPORT_V6",
    "FWPM_LAYER_EGRESS_VSWITCH_TRANSPORT_V4",
    "FWPM_LAYER_EGRESS_VSWITCH_TRANSPORT_V6",
    "FWPM_LAYER_INBOUND_TRANSPORT_FAST",
    "FWPM_LAYER_OUTBOUND_TRANSPORT_FAST",
    "FWPM_LAYER_INBOUND_MAC_FRAME_NATIVE_FAST",
    "FWPM_LAYER_OUTBOUND_MAC_FRAME_NATIVE_FAST",
    "FWPM_LAYER_IPSEC_KM_DEMUX_V4",
    "FWPM_LAYER_IPSEC_KM_DEMUX_V6",
    "FWPM_LAYER_IPSEC_V4",
    "FWPM_LAYER_IPSEC_V6",
    "FWPM_LAYER_IKEEXT_V4",
    "FWPM_LAYER_IKEEXT_V6",
    "FWPM_LAYER_RPC_UM",
    "FWPM_LAYER_RPC_EPMAP",
    "FWPM_LAYER_RPC_EP_ADD",
    "FWPM_LAYER_RPC_PROXY_CONN",
    "FWPM_LAYER_RPC_PROXY_IF",
    "FWPM_LAYER_KM_AUTHORIZATION",
    "FWPM_LAYER_NAME_RESOLUTION_CACHE_V4",
    "FWPM_LAYER_NAME_RESOLUTION_CACHE_V6",
    "FWPM_LAYER_ALE_RESOURCE_RELEASE_V4",
    "FWPM_LAYER_ALE_RESOURCE_RELEASE_V6",
    "FWPM_LAYER_ALE_ENDPOINT_CLOSURE_V4",
    "FWPM_LAYER_ALE_ENDPOINT_CLOSURE_V6",
    "FWPM_LAYER_ALE_CONNECT_REDIRECT_V4",
    "FWPM_LAYER_ALE_CONNECT_REDIRECT_V6",
    "FWPM_LAYER_ALE_BIND_REDIRECT_V4",
    "FWPM_LAYER_ALE_BIND_REDIRECT_V6",
    "FWPM_LAYER_STREAM_PACKET_V4",
    "FWPM_LAYER_STREAM_PACKET_V6",
    "FWPM_LAYER_INBOUND_RESERVED2",
    "FWPM_SUBLAYER_RPC_AUDIT",
    "FWPM_SUBLAYER_IPSEC_TUNNEL",
    "FWPM_SUBLAYER_UNIVERSAL",
    "FWPM_SUBLAYER_LIPS",
    "FWPM_SUBLAYER_SECURE_SOCKET",
    "FWPM_SUBLAYER_TCP_CHIMNEY_OFFLOAD",
    "FWPM_SUBLAYER_INSPECTION",
    "FWPM_SUBLAYER_TEREDO",
    "FWPM_SUBLAYER_IPSEC_FORWARD_OUTBOUND_TUNNEL",
    "FWPM_SUBLAYER_IPSEC_DOSP",
    "FWPM_SUBLAYER_TCP_TEMPLATES",
    "FWPM_SUBLAYER_IPSEC_SECURITY_REALM",
    "FWPM_SUBLAYER_MPSSVC_WSH",
    "FWPM_SUBLAYER_MPSSVC_WF",
    "FWPM_SUBLAYER_MPSSVC_QUARANTINE",
    "FWPM_SUBLAYER_MPSSVC_EDP",
    "FWPM_SUBLAYER_MPSSVC_TENANT_RESTRICTIONS",
    "FWPM_CONDITION_INTERFACE_MAC_ADDRESS",
    "FWPM_CONDITION_MAC_LOCAL_ADDRESS",
    "FWPM_CONDITION_MAC_REMOTE_ADDRESS",
    "FWPM_CONDITION_ETHER_TYPE",
    "FWPM_CONDITION_VLAN_ID",
    "FWPM_CONDITION_VSWITCH_TENANT_NETWORK_ID",
    "FWPM_CONDITION_NDIS_PORT",
    "FWPM_CONDITION_NDIS_MEDIA_TYPE",
    "FWPM_CONDITION_NDIS_PHYSICAL_MEDIA_TYPE",
    "FWPM_CONDITION_L2_FLAGS",
    "FWPM_CONDITION_MAC_LOCAL_ADDRESS_TYPE",
    "FWPM_CONDITION_MAC_REMOTE_ADDRESS_TYPE",
    "FWPM_CONDITION_ALE_PACKAGE_ID",
    "FWPM_CONDITION_MAC_SOURCE_ADDRESS",
    "FWPM_CONDITION_MAC_DESTINATION_ADDRESS",
    "FWPM_CONDITION_MAC_SOURCE_ADDRESS_TYPE",
    "FWPM_CONDITION_MAC_DESTINATION_ADDRESS_TYPE",
    "FWPM_CONDITION_IP_SOURCE_PORT",
    "FWPM_CONDITION_IP_DESTINATION_PORT",
    "FWPM_CONDITION_VSWITCH_ID",
    "FWPM_CONDITION_VSWITCH_NETWORK_TYPE",
    "FWPM_CONDITION_VSWITCH_SOURCE_INTERFACE_ID",
    "FWPM_CONDITION_VSWITCH_DESTINATION_INTERFACE_ID",
    "FWPM_CONDITION_VSWITCH_SOURCE_VM_ID",
    "FWPM_CONDITION_VSWITCH_DESTINATION_VM_ID",
    "FWPM_CONDITION_VSWITCH_SOURCE_INTERFACE_TYPE",
    "FWPM_CONDITION_VSWITCH_DESTINATION_INTERFACE_TYPE",
    "FWPM_CONDITION_ALE_SECURITY_ATTRIBUTE_FQBN_VALUE",
    "FWPM_CONDITION_IPSEC_SECURITY_REALM_ID",
    "FWPM_CONDITION_ALE_EFFECTIVE_NAME",
    "FWPM_CONDITION_IP_LOCAL_ADDRESS",
    "FWPM_CONDITION_IP_REMOTE_ADDRESS",
    "FWPM_CONDITION_IP_SOURCE_ADDRESS",
    "FWPM_CONDITION_IP_DESTINATION_ADDRESS",
    "FWPM_CONDITION_IP_LOCAL_ADDRESS_TYPE",
    "FWPM_CONDITION_IP_DESTINATION_ADDRESS_TYPE",
    "FWPM_CONDITION_IP_NEXTHOP_ADDRESS",
    "FWPM_CONDITION_IP_LOCAL_INTERFACE",
    "FWPM_CONDITION_IP_ARRIVAL_INTERFACE",
    "FWPM_CONDITION_ARRIVAL_INTERFACE_TYPE",
    "FWPM_CONDITION_ARRIVAL_TUNNEL_TYPE",
    "FWPM_CONDITION_ARRIVAL_INTERFACE_INDEX",
    "FWPM_CONDITION_NEXTHOP_SUB_INTERFACE_INDEX",
    "FWPM_CONDITION_IP_NEXTHOP_INTERFACE",
    "FWPM_CONDITION_NEXTHOP_INTERFACE_TYPE",
    "FWPM_CONDITION_NEXTHOP_TUNNEL_TYPE",
    "FWPM_CONDITION_NEXTHOP_INTERFACE_INDEX",
    "FWPM_CONDITION_ORIGINAL_PROFILE_ID",
    "FWPM_CONDITION_CURRENT_PROFILE_ID",
    "FWPM_CONDITION_LOCAL_INTERFACE_PROFILE_ID",
    "FWPM_CONDITION_ARRIVAL_INTERFACE_PROFILE_ID",
    "FWPM_CONDITION_NEXTHOP_INTERFACE_PROFILE_ID",
    "FWPM_CONDITION_REAUTHORIZE_REASON",
    "FWPM_CONDITION_ORIGINAL_ICMP_TYPE",
    "FWPM_CONDITION_IP_PHYSICAL_ARRIVAL_INTERFACE",
    "FWPM_CONDITION_IP_PHYSICAL_NEXTHOP_INTERFACE",
    "FWPM_CONDITION_INTERFACE_QUARANTINE_EPOCH",
    "FWPM_CONDITION_INTERFACE_TYPE",
    "FWPM_CONDITION_TUNNEL_TYPE",
    "FWPM_CONDITION_IP_FORWARD_INTERFACE",
    "FWPM_CONDITION_IP_PROTOCOL",
    "FWPM_CONDITION_IP_LOCAL_PORT",
    "FWPM_CONDITION_IP_REMOTE_PORT",
    "FWPM_CONDITION_EMBEDDED_LOCAL_ADDRESS_TYPE",
    "FWPM_CONDITION_EMBEDDED_REMOTE_ADDRESS",
    "FWPM_CONDITION_EMBEDDED_PROTOCOL",
    "FWPM_CONDITION_EMBEDDED_LOCAL_PORT",
    "FWPM_CONDITION_EMBEDDED_REMOTE_PORT",
    "FWPM_CONDITION_FLAGS",
    "FWPM_CONDITION_DIRECTION",
    "FWPM_CONDITION_INTERFACE_INDEX",
    "FWPM_CONDITION_SUB_INTERFACE_INDEX",
    "FWPM_CONDITION_SOURCE_INTERFACE_INDEX",
    "FWPM_CONDITION_SOURCE_SUB_INTERFACE_INDEX",
    "FWPM_CONDITION_DESTINATION_INTERFACE_INDEX",
    "FWPM_CONDITION_DESTINATION_SUB_INTERFACE_INDEX",
    "FWPM_CONDITION_ALE_APP_ID",
    "FWPM_CONDITION_ALE_ORIGINAL_APP_ID",
    "FWPM_CONDITION_ALE_USER_ID",
    "FWPM_CONDITION_ALE_REMOTE_USER_ID",
    "FWPM_CONDITION_ALE_REMOTE_MACHINE_ID",
    "FWPM_CONDITION_ALE_PROMISCUOUS_MODE",
    "FWPM_CONDITION_ALE_SIO_FIREWALL_SYSTEM_PORT",
    "FWPM_CONDITION_ALE_REAUTH_REASON",
    "FWPM_CONDITION_ALE_NAP_CONTEXT",
    "FWPM_CONDITION_KM_AUTH_NAP_CONTEXT",
    "FWPM_CONDITION_REMOTE_USER_TOKEN",
    "FWPM_CONDITION_RPC_IF_UUID",
    "FWPM_CONDITION_RPC_IF_VERSION",
    "FWPM_CONDITION_RPC_IF_FLAG",
    "FWPM_CONDITION_DCOM_APP_ID",
    "FWPM_CONDITION_IMAGE_NAME",
    "FWPM_CONDITION_RPC_PROTOCOL",
    "FWPM_CONDITION_RPC_AUTH_TYPE",
    "FWPM_CONDITION_RPC_AUTH_LEVEL",
    "FWPM_CONDITION_SEC_ENCRYPT_ALGORITHM",
    "FWPM_CONDITION_SEC_KEY_SIZE",
    "FWPM_CONDITION_IP_LOCAL_ADDRESS_V4",
    "FWPM_CONDITION_IP_LOCAL_ADDRESS_V6",
    "FWPM_CONDITION_PIPE",
    "FWPM_CONDITION_IP_REMOTE_ADDRESS_V4",
    "FWPM_CONDITION_IP_REMOTE_ADDRESS_V6",
    "FWPM_CONDITION_PROCESS_WITH_RPC_IF_UUID",
    "FWPM_CONDITION_RPC_EP_VALUE",
    "FWPM_CONDITION_RPC_EP_FLAGS",
    "FWPM_CONDITION_CLIENT_TOKEN",
    "FWPM_CONDITION_RPC_SERVER_NAME",
    "FWPM_CONDITION_RPC_SERVER_PORT",
    "FWPM_CONDITION_RPC_PROXY_AUTH_TYPE",
    "FWPM_CONDITION_CLIENT_CERT_KEY_LENGTH",
    "FWPM_CONDITION_CLIENT_CERT_OID",
    "FWPM_CONDITION_NET_EVENT_TYPE",
    "FWPM_CONDITION_PEER_NAME",
    "FWPM_CONDITION_REMOTE_ID",
    "FWPM_CONDITION_AUTHENTICATION_TYPE",
    "FWPM_CONDITION_KM_TYPE",
    "FWPM_CONDITION_KM_MODE",
    "FWPM_CONDITION_IPSEC_POLICY_KEY",
    "FWPM_CONDITION_QM_MODE",
    "FWPM_CONDITION_COMPARTMENT_ID",
    "FWPM_CONDITION_RESERVED0",
    "FWPM_CONDITION_RESERVED1",
    "FWPM_CONDITION_RESERVED2",
    "FWPM_CONDITION_RESERVED3",
    "FWPM_CONDITION_RESERVED4",
    "FWPM_CONDITION_RESERVED5",
    "FWPM_CONDITION_RESERVED6",
    "FWPM_CONDITION_RESERVED7",
    "FWPM_CONDITION_RESERVED8",
    "FWPM_CONDITION_RESERVED9",
    "FWPM_CONDITION_RESERVED10",
    "FWPM_CONDITION_RESERVED11",
    "FWPM_CONDITION_RESERVED12",
    "FWPM_CONDITION_RESERVED13",
    "FWPM_CONDITION_RESERVED14",
    "FWPM_CONDITION_RESERVED15",
    "FWPM_PROVIDER_IKEEXT",
    "FWPM_PROVIDER_IPSEC_DOSP_CONFIG",
    "FWPM_PROVIDER_TCP_CHIMNEY_OFFLOAD",
    "FWPM_PROVIDER_TCP_TEMPLATES",
    "FWPM_PROVIDER_MPSSVC_WSH",
    "FWPM_PROVIDER_MPSSVC_WF",
    "FWPM_PROVIDER_MPSSVC_EDP",
    "FWPM_PROVIDER_MPSSVC_TENANT_RESTRICTIONS",
    "FWPM_CALLOUT_IPSEC_INBOUND_TRANSPORT_V4",
    "FWPM_CALLOUT_IPSEC_INBOUND_TRANSPORT_V6",
    "FWPM_CALLOUT_IPSEC_OUTBOUND_TRANSPORT_V4",
    "FWPM_CALLOUT_IPSEC_OUTBOUND_TRANSPORT_V6",
    "FWPM_CALLOUT_IPSEC_INBOUND_TUNNEL_V4",
    "FWPM_CALLOUT_IPSEC_INBOUND_TUNNEL_V6",
    "FWPM_CALLOUT_IPSEC_OUTBOUND_TUNNEL_V4",
    "FWPM_CALLOUT_IPSEC_OUTBOUND_TUNNEL_V6",
    "FWPM_CALLOUT_IPSEC_FORWARD_INBOUND_TUNNEL_V4",
    "FWPM_CALLOUT_IPSEC_FORWARD_INBOUND_TUNNEL_V6",
    "FWPM_CALLOUT_IPSEC_FORWARD_OUTBOUND_TUNNEL_V4",
    "FWPM_CALLOUT_IPSEC_FORWARD_OUTBOUND_TUNNEL_V6",
    "FWPM_CALLOUT_IPSEC_INBOUND_INITIATE_SECURE_V4",
    "FWPM_CALLOUT_IPSEC_INBOUND_INITIATE_SECURE_V6",
    "FWPM_CALLOUT_IPSEC_INBOUND_TUNNEL_ALE_ACCEPT_V4",
    "FWPM_CALLOUT_IPSEC_INBOUND_TUNNEL_ALE_ACCEPT_V6",
    "FWPM_CALLOUT_IPSEC_ALE_CONNECT_V4",
    "FWPM_CALLOUT_IPSEC_ALE_CONNECT_V6",
    "FWPM_CALLOUT_IPSEC_DOSP_FORWARD_V6",
    "FWPM_CALLOUT_IPSEC_DOSP_FORWARD_V4",
    "FWPM_CALLOUT_WFP_TRANSPORT_LAYER_V4_SILENT_DROP",
    "FWPM_CALLOUT_WFP_TRANSPORT_LAYER_V6_SILENT_DROP",
    "FWPM_CALLOUT_TCP_CHIMNEY_CONNECT_LAYER_V4",
    "FWPM_CALLOUT_TCP_CHIMNEY_CONNECT_LAYER_V6",
    "FWPM_CALLOUT_TCP_CHIMNEY_ACCEPT_LAYER_V4",
    "FWPM_CALLOUT_TCP_CHIMNEY_ACCEPT_LAYER_V6",
    "FWPM_CALLOUT_SET_OPTIONS_AUTH_CONNECT_LAYER_V4",
    "FWPM_CALLOUT_SET_OPTIONS_AUTH_CONNECT_LAYER_V6",
    "FWPM_CALLOUT_SET_OPTIONS_AUTH_RECV_ACCEPT_LAYER_V4",
    "FWPM_CALLOUT_SET_OPTIONS_AUTH_RECV_ACCEPT_LAYER_V6",
    "FWPM_CALLOUT_RESERVED_AUTH_CONNECT_LAYER_V4",
    "FWPM_CALLOUT_RESERVED_AUTH_CONNECT_LAYER_V6",
    "FWPM_CALLOUT_TEREDO_ALE_RESOURCE_ASSIGNMENT_V6",
    "FWPM_CALLOUT_EDGE_TRAVERSAL_ALE_RESOURCE_ASSIGNMENT_V4",
    "FWPM_CALLOUT_TEREDO_ALE_LISTEN_V6",
    "FWPM_CALLOUT_EDGE_TRAVERSAL_ALE_LISTEN_V4",
    "FWPM_CALLOUT_TCP_TEMPLATES_CONNECT_LAYER_V4",
    "FWPM_CALLOUT_TCP_TEMPLATES_CONNECT_LAYER_V6",
    "FWPM_CALLOUT_TCP_TEMPLATES_ACCEPT_LAYER_V4",
    "FWPM_CALLOUT_TCP_TEMPLATES_ACCEPT_LAYER_V6",
    "FWPM_CALLOUT_POLICY_SILENT_MODE_AUTH_CONNECT_LAYER_V4",
    "FWPM_CALLOUT_POLICY_SILENT_MODE_AUTH_CONNECT_LAYER_V6",
    "FWPM_CALLOUT_POLICY_SILENT_MODE_AUTH_RECV_ACCEPT_LAYER_V4",
    "FWPM_CALLOUT_POLICY_SILENT_MODE_AUTH_RECV_ACCEPT_LAYER_V6",
    "FWPM_CALLOUT_HTTP_TEMPLATE_SSL_HANDSHAKE",
    "FWPM_CALLOUT_BUILT_IN_RESERVED_1",
    "FWPM_CALLOUT_BUILT_IN_RESERVED_2",
    "FWPM_CALLOUT_BUILT_IN_RESERVED_3",
    "FWPM_CALLOUT_BUILT_IN_RESERVED_4",
    "FWPM_PROVIDER_CONTEXT_SECURE_SOCKET_AUTHIP",
    "FWPM_PROVIDER_CONTEXT_SECURE_SOCKET_IPSEC",
    "FWPM_KEYING_MODULE_IKE",
    "FWPM_KEYING_MODULE_AUTHIP",
    "FWPM_KEYING_MODULE_IKEV2",
    "FWPM_AUTO_WEIGHT_BITS",
    "FWPM_WEIGHT_RANGE_IPSEC",
    "FWPM_WEIGHT_RANGE_IKE_EXEMPTIONS",
    "FWPM_ACTRL_ADD",
    "FWPM_ACTRL_ADD_LINK",
    "FWPM_ACTRL_BEGIN_READ_TXN",
    "FWPM_ACTRL_BEGIN_WRITE_TXN",
    "FWPM_ACTRL_CLASSIFY",
    "FWPM_ACTRL_ENUM",
    "FWPM_ACTRL_OPEN",
    "FWPM_ACTRL_READ",
    "FWPM_ACTRL_READ_STATS",
    "FWPM_ACTRL_SUBSCRIBE",
    "FWPM_ACTRL_WRITE",
    "FWPM_TXN_READ_ONLY",
    "FWPM_TUNNEL_FLAG_POINT_TO_POINT",
    "FWPM_TUNNEL_FLAG_ENABLE_VIRTUAL_IF_TUNNELING",
    "FWPM_TUNNEL_FLAG_RESERVED0",
    "FWPS_METADATA_FIELD_DISCARD_REASON",
    "FWPS_METADATA_FIELD_FLOW_HANDLE",
    "FWPS_METADATA_FIELD_IP_HEADER_SIZE",
    "FWPS_METADATA_FIELD_PROCESS_PATH",
    "FWPS_METADATA_FIELD_TOKEN",
    "FWPS_METADATA_FIELD_PROCESS_ID",
    "FWPS_METADATA_FIELD_SYSTEM_FLAGS",
    "FWPS_METADATA_FIELD_RESERVED",
    "FWPS_METADATA_FIELD_SOURCE_INTERFACE_INDEX",
    "FWPS_METADATA_FIELD_DESTINATION_INTERFACE_INDEX",
    "FWPS_METADATA_FIELD_TRANSPORT_HEADER_SIZE",
    "FWPS_METADATA_FIELD_COMPARTMENT_ID",
    "FWPS_METADATA_FIELD_FRAGMENT_DATA",
    "FWPS_METADATA_FIELD_PATH_MTU",
    "FWPS_METADATA_FIELD_COMPLETION_HANDLE",
    "FWPS_METADATA_FIELD_TRANSPORT_ENDPOINT_HANDLE",
    "FWPS_METADATA_FIELD_TRANSPORT_CONTROL_DATA",
    "FWPS_METADATA_FIELD_REMOTE_SCOPE_ID",
    "FWPS_METADATA_FIELD_PACKET_DIRECTION",
    "FWPS_METADATA_FIELD_PACKET_SYSTEM_CRITICAL",
    "FWPS_METADATA_FIELD_FORWARD_LAYER_OUTBOUND_PASS_THRU",
    "FWPS_METADATA_FIELD_FORWARD_LAYER_INBOUND_PASS_THRU",
    "FWPS_METADATA_FIELD_ALE_CLASSIFY_REQUIRED",
    "FWPS_METADATA_FIELD_TRANSPORT_HEADER_INCLUDE_HEADER",
    "FWPS_METADATA_FIELD_DESTINATION_PREFIX",
    "FWPS_METADATA_FIELD_ETHER_FRAME_LENGTH",
    "FWPS_METADATA_FIELD_PARENT_ENDPOINT_HANDLE",
    "FWPS_METADATA_FIELD_ICMP_ID_AND_SEQUENCE",
    "FWPS_METADATA_FIELD_LOCAL_REDIRECT_TARGET_PID",
    "FWPS_METADATA_FIELD_ORIGINAL_DESTINATION",
    "FWPS_METADATA_FIELD_REDIRECT_RECORD_HANDLE",
    "FWPS_METADATA_FIELD_SUB_PROCESS_TAG",
    "FWPS_L2_METADATA_FIELD_ETHERNET_MAC_HEADER_SIZE",
    "FWPS_L2_METADATA_FIELD_WIFI_OPERATION_MODE",
    "FWPS_L2_METADATA_FIELD_VSWITCH_SOURCE_PORT_ID",
    "FWPS_L2_METADATA_FIELD_VSWITCH_SOURCE_NIC_INDEX",
    "FWPS_L2_METADATA_FIELD_VSWITCH_PACKET_CONTEXT",
    "FWPS_L2_METADATA_FIELD_VSWITCH_DESTINATION_PORT_ID",
    "FWPS_L2_METADATA_FIELD_RESERVED",
    "IPSEC_SA_BUNDLE_FLAGS",
    "IPSEC_SA_BUNDLE_FLAG_ND_SECURE",
    "IPSEC_SA_BUNDLE_FLAG_ND_BOUNDARY",
    "IPSEC_SA_BUNDLE_FLAG_ND_PEER_NAT_BOUNDARY",
    "IPSEC_SA_BUNDLE_FLAG_GUARANTEE_ENCRYPTION",
    "IPSEC_SA_BUNDLE_FLAG_ALLOW_NULL_TARGET_NAME_MATCH",
    "IPSEC_SA_BUNDLE_FLAG_CLEAR_DF_ON_TUNNEL",
    "IPSEC_SA_BUNDLE_FLAG_ASSUME_UDP_CONTEXT_OUTBOUND",
    "IPSEC_SA_BUNDLE_FLAG_ND_PEER_BOUNDARY",
    "IPSEC_SA_BUNDLE_FLAG_SUPPRESS_DUPLICATE_DELETION",
    "IPSEC_SA_BUNDLE_FLAG_PEER_SUPPORTS_GUARANTEE_ENCRYPTION",
    "IPSEC_POLICY_FLAG",
    "IPSEC_POLICY_FLAG_ND_SECURE",
    "IPSEC_POLICY_FLAG_ND_BOUNDARY",
    "IPSEC_POLICY_FLAG_NAT_ENCAP_ALLOW_PEER_BEHIND_NAT",
    "IPSEC_POLICY_FLAG_NAT_ENCAP_ALLOW_GENERAL_NAT_TRAVERSAL",
    "IPSEC_POLICY_FLAG_DONT_NEGOTIATE_SECOND_LIFETIME",
    "IPSEC_POLICY_FLAG_DONT_NEGOTIATE_BYTE_LIFETIME",
    "IPSEC_POLICY_FLAG_CLEAR_DF_ON_TUNNEL",
    "IPSEC_POLICY_FLAG_ENABLE_V6_IN_V4_TUNNELING",
    "IPSEC_POLICY_FLAG_ENABLE_SERVER_ADDR_ASSIGNMENT",
    "IPSEC_POLICY_FLAG_TUNNEL_ALLOW_OUTBOUND_CLEAR_CONNECTION",
    "IPSEC_POLICY_FLAG_TUNNEL_BYPASS_ALREADY_SECURE_CONNECTION",
    "IPSEC_POLICY_FLAG_TUNNEL_BYPASS_ICMPV6",
    "IPSEC_POLICY_FLAG_KEY_MANAGER_ALLOW_DICTATE_KEY",
    "IKEEXT_CERT_AUTH",
    "IKEEXT_CERT_AUTH_FLAG_SSL_ONE_WAY",
    "IKEEXT_CERT_AUTH_ENABLE_CRL_CHECK_STRONG",
    "IKEEXT_CERT_AUTH_DISABLE_SSL_CERT_VALIDATION",
    "IKEEXT_CERT_AUTH_ALLOW_HTTP_CERT_LOOKUP",
    "IKEEXT_CERT_AUTH_URL_CONTAINS_BUNDLE",
    "IKEEXT_PRESHARED_KEY_AUTHENTICATION_FLAGS",
    "IKEEXT_PSK_FLAG_LOCAL_AUTH_ONLY",
    "IKEEXT_PSK_FLAG_REMOTE_AUTH_ONLY",
    "IKEEXT_POLICY_FLAG",
    "IKEEXT_POLICY_FLAG_DISABLE_DIAGNOSTICS",
    "IKEEXT_POLICY_FLAG_NO_MACHINE_LUID_VERIFY",
    "IKEEXT_POLICY_FLAG_NO_IMPERSONATION_LUID_VERIFY",
    "IKEEXT_POLICY_FLAG_ENABLE_OPTIONAL_DH",
    "FWPM_SUBSCRIPTION_FLAGS",
    "FWPM_SUBSCRIPTION_FLAG_NOTIFY_ON_ADD",
    "FWPM_SUBSCRIPTION_FLAG_NOTIFY_ON_DELETE",
    "IKEEXT_CERT_FLAGS",
    "IKEEXT_CERT_FLAG_ENABLE_ACCOUNT_MAPPING",
    "IKEEXT_CERT_FLAG_DISABLE_REQUEST_PAYLOAD",
    "IKEEXT_CERT_FLAG_USE_NAP_CERTIFICATE",
    "IKEEXT_CERT_FLAG_INTERMEDIATE_CA",
    "IKEEXT_CERT_FLAG_IGNORE_INIT_CERT_MAP_FAILURE",
    "IKEEXT_CERT_FLAG_PREFER_NAP_CERTIFICATE_OUTBOUND",
    "IKEEXT_CERT_FLAG_SELECT_NAP_CERTIFICATE",
    "IKEEXT_CERT_FLAG_VERIFY_NAP_CERTIFICATE",
    "IKEEXT_CERT_FLAG_FOLLOW_RENEWAL_CERTIFICATE",
    "IPSEC_DOSP_FLAGS",
    "IPSEC_DOSP_FLAG_ENABLE_IKEV1",
    "IPSEC_DOSP_FLAG_ENABLE_IKEV2",
    "IPSEC_DOSP_FLAG_DISABLE_AUTHIP",
    "IPSEC_DOSP_FLAG_DISABLE_DEFAULT_BLOCK",
    "IPSEC_DOSP_FLAG_FILTER_BLOCK",
    "IPSEC_DOSP_FLAG_FILTER_EXEMPT",
    "IKEEXT_KERBEROS_AUTHENTICATION_FLAGS",
    "IKEEXT_KERB_AUTH_DISABLE_INITIATOR_TOKEN_GENERATION",
    "IKEEXT_KERB_AUTH_DONT_ACCEPT_EXPLICIT_CREDENTIALS",
    "IKEEXT_RESERVED_AUTHENTICATION_FLAGS",
    "IKEEXT_RESERVED_AUTH_DISABLE_INITIATOR_TOKEN_GENERATION",
    "IKEEXT_EAP_AUTHENTICATION_FLAGS",
    "IKEEXT_EAP_FLAG_LOCAL_AUTH_ONLY",
    "IKEEXT_EAP_FLAG_REMOTE_AUTH_ONLY",
    "FWPM_FILTER_FLAGS",
    "FWPM_FILTER_FLAG_NONE",
    "FWPM_FILTER_FLAG_PERSISTENT",
    "FWPM_FILTER_FLAG_BOOTTIME",
    "FWPM_FILTER_FLAG_HAS_PROVIDER_CONTEXT",
    "FWPM_FILTER_FLAG_CLEAR_ACTION_RIGHT",
    "FWPM_FILTER_FLAG_PERMIT_IF_CALLOUT_UNREGISTERED",
    "FWPM_FILTER_FLAG_DISABLED",
    "FWPM_FILTER_FLAG_INDEXED",
    "FWP_DIRECTION",
    "FWP_DIRECTION_OUTBOUND",
    "FWP_DIRECTION_INBOUND",
    "FWP_DIRECTION_MAX",
    "FWP_IP_VERSION",
    "FWP_IP_VERSION_V4",
    "FWP_IP_VERSION_V6",
    "FWP_IP_VERSION_NONE",
    "FWP_IP_VERSION_MAX",
    "FWP_AF",
    "FWP_AF_INET",
    "FWP_AF_INET6",
    "FWP_AF_ETHER",
    "FWP_AF_NONE",
    "FWP_ETHER_ENCAP_METHOD",
    "FWP_ETHER_ENCAP_METHOD_ETHER_V2",
    "FWP_ETHER_ENCAP_METHOD_SNAP",
    "FWP_ETHER_ENCAP_METHOD_SNAP_W_OUI_ZERO",
    "FWP_DATA_TYPE",
    "FWP_EMPTY",
    "FWP_UINT8",
    "FWP_UINT16",
    "FWP_UINT32",
    "FWP_UINT64",
    "FWP_INT8",
    "FWP_INT16",
    "FWP_INT32",
    "FWP_INT64",
    "FWP_FLOAT",
    "FWP_DOUBLE",
    "FWP_BYTE_ARRAY16_TYPE",
    "FWP_BYTE_BLOB_TYPE",
    "FWP_SID",
    "FWP_SECURITY_DESCRIPTOR_TYPE",
    "FWP_TOKEN_INFORMATION_TYPE",
    "FWP_TOKEN_ACCESS_INFORMATION_TYPE",
    "FWP_UNICODE_STRING_TYPE",
    "FWP_BYTE_ARRAY6_TYPE",
    "FWP_SINGLE_DATA_TYPE_MAX",
    "FWP_V4_ADDR_MASK",
    "FWP_V6_ADDR_MASK",
    "FWP_RANGE_TYPE",
    "FWP_DATA_TYPE_MAX",
    "FWP_BYTE_ARRAY6",
    "FWP_BYTE_ARRAY16",
    "FWP_BYTE_BLOB",
    "FWP_TOKEN_INFORMATION",
    "FWP_VALUE0",
    "FWP_MATCH_TYPE",
    "FWP_MATCH_EQUAL",
    "FWP_MATCH_GREATER",
    "FWP_MATCH_LESS",
    "FWP_MATCH_GREATER_OR_EQUAL",
    "FWP_MATCH_LESS_OR_EQUAL",
    "FWP_MATCH_RANGE",
    "FWP_MATCH_FLAGS_ALL_SET",
    "FWP_MATCH_FLAGS_ANY_SET",
    "FWP_MATCH_FLAGS_NONE_SET",
    "FWP_MATCH_EQUAL_CASE_INSENSITIVE",
    "FWP_MATCH_NOT_EQUAL",
    "FWP_MATCH_PREFIX",
    "FWP_MATCH_NOT_PREFIX",
    "FWP_MATCH_TYPE_MAX",
    "FWP_V4_ADDR_AND_MASK",
    "FWP_V6_ADDR_AND_MASK",
    "FWP_RANGE0",
    "FWP_CONDITION_VALUE0",
    "FWP_CLASSIFY_OPTION_TYPE",
    "FWP_CLASSIFY_OPTION_MULTICAST_STATE",
    "FWP_CLASSIFY_OPTION_LOOSE_SOURCE_MAPPING",
    "FWP_CLASSIFY_OPTION_UNICAST_LIFETIME",
    "FWP_CLASSIFY_OPTION_MCAST_BCAST_LIFETIME",
    "FWP_CLASSIFY_OPTION_SECURE_SOCKET_SECURITY_FLAGS",
    "FWP_CLASSIFY_OPTION_SECURE_SOCKET_AUTHIP_MM_POLICY_KEY",
    "FWP_CLASSIFY_OPTION_SECURE_SOCKET_AUTHIP_QM_POLICY_KEY",
    "FWP_CLASSIFY_OPTION_LOCAL_ONLY_MAPPING",
    "FWP_CLASSIFY_OPTION_MAX",
    "FWP_VSWITCH_NETWORK_TYPE",
    "FWP_VSWITCH_NETWORK_TYPE_UNKNOWN",
    "FWP_VSWITCH_NETWORK_TYPE_PRIVATE",
    "FWP_VSWITCH_NETWORK_TYPE_INTERNAL",
    "FWP_VSWITCH_NETWORK_TYPE_EXTERNAL",
    "FWP_FILTER_ENUM_TYPE",
    "FWP_FILTER_ENUM_FULLY_CONTAINED",
    "FWP_FILTER_ENUM_OVERLAPPING",
    "FWP_FILTER_ENUM_TYPE_MAX",
    "FWPM_DISPLAY_DATA0",
    "IPSEC_VIRTUAL_IF_TUNNEL_INFO0",
    "IKEEXT_KEY_MODULE_TYPE",
    "IKEEXT_KEY_MODULE_IKE",
    "IKEEXT_KEY_MODULE_AUTHIP",
    "IKEEXT_KEY_MODULE_IKEV2",
    "IKEEXT_KEY_MODULE_MAX",
    "IKEEXT_AUTHENTICATION_METHOD_TYPE",
    "IKEEXT_PRESHARED_KEY",
    "IKEEXT_CERTIFICATE",
    "IKEEXT_KERBEROS",
    "IKEEXT_ANONYMOUS",
    "IKEEXT_SSL",
    "IKEEXT_NTLM_V2",
    "IKEEXT_IPV6_CGA",
    "IKEEXT_CERTIFICATE_ECDSA_P256",
    "IKEEXT_CERTIFICATE_ECDSA_P384",
    "IKEEXT_SSL_ECDSA_P256",
    "IKEEXT_SSL_ECDSA_P384",
    "IKEEXT_EAP",
    "IKEEXT_RESERVED",
    "IKEEXT_AUTHENTICATION_METHOD_TYPE_MAX",
    "IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE",
    "IKEEXT_IMPERSONATION_NONE",
    "IKEEXT_IMPERSONATION_SOCKET_PRINCIPAL",
    "IKEEXT_IMPERSONATION_MAX",
    "IKEEXT_PRESHARED_KEY_AUTHENTICATION0",
    "IKEEXT_PRESHARED_KEY_AUTHENTICATION1",
    "IKEEXT_CERT_ROOT_CONFIG0",
    "IKEEXT_CERT_CONFIG_TYPE",
    "IKEEXT_CERT_CONFIG_EXPLICIT_TRUST_LIST",
    "IKEEXT_CERT_CONFIG_ENTERPRISE_STORE",
    "IKEEXT_CERT_CONFIG_TRUSTED_ROOT_STORE",
    "IKEEXT_CERT_CONFIG_UNSPECIFIED",
    "IKEEXT_CERT_CONFIG_TYPE_MAX",
    "IKEEXT_CERTIFICATE_AUTHENTICATION0",
    "IKEEXT_CERTIFICATE_AUTHENTICATION1",
    "IKEEXT_CERT_CRITERIA_NAME_TYPE",
    "IKEEXT_CERT_CRITERIA_DNS",
    "IKEEXT_CERT_CRITERIA_UPN",
    "IKEEXT_CERT_CRITERIA_RFC822",
    "IKEEXT_CERT_CRITERIA_CN",
    "IKEEXT_CERT_CRITERIA_OU",
    "IKEEXT_CERT_CRITERIA_O",
    "IKEEXT_CERT_CRITERIA_DC",
    "IKEEXT_CERT_CRITERIA_NAME_TYPE_MAX",
    "IKEEXT_CERT_EKUS0",
    "IKEEXT_CERT_NAME0",
    "IKEEXT_CERTIFICATE_CRITERIA0",
    "IKEEXT_CERTIFICATE_AUTHENTICATION2",
    "IKEEXT_IPV6_CGA_AUTHENTICATION0",
    "IKEEXT_KERBEROS_AUTHENTICATION0",
    "IKEEXT_KERBEROS_AUTHENTICATION1",
    "IKEEXT_RESERVED_AUTHENTICATION0",
    "IKEEXT_NTLM_V2_AUTHENTICATION0",
    "IKEEXT_EAP_AUTHENTICATION0",
    "IKEEXT_AUTHENTICATION_METHOD0",
    "IKEEXT_AUTHENTICATION_METHOD1",
    "IKEEXT_AUTHENTICATION_METHOD2",
    "IKEEXT_CIPHER_TYPE",
    "IKEEXT_CIPHER_DES",
    "IKEEXT_CIPHER_3DES",
    "IKEEXT_CIPHER_AES_128",
    "IKEEXT_CIPHER_AES_192",
    "IKEEXT_CIPHER_AES_256",
    "IKEEXT_CIPHER_AES_GCM_128_16ICV",
    "IKEEXT_CIPHER_AES_GCM_256_16ICV",
    "IKEEXT_CIPHER_TYPE_MAX",
    "IKEEXT_CIPHER_ALGORITHM0",
    "IKEEXT_INTEGRITY_TYPE",
    "IKEEXT_INTEGRITY_MD5",
    "IKEEXT_INTEGRITY_SHA1",
    "IKEEXT_INTEGRITY_SHA_256",
    "IKEEXT_INTEGRITY_SHA_384",
    "IKEEXT_INTEGRITY_TYPE_MAX",
    "IKEEXT_INTEGRITY_ALGORITHM0",
    "IKEEXT_DH_GROUP",
    "IKEEXT_DH_GROUP_NONE",
    "IKEEXT_DH_GROUP_1",
    "IKEEXT_DH_GROUP_2",
    "IKEEXT_DH_GROUP_14",
    "IKEEXT_DH_GROUP_2048",
    "IKEEXT_DH_ECP_256",
    "IKEEXT_DH_ECP_384",
    "IKEEXT_DH_GROUP_24",
    "IKEEXT_DH_GROUP_MAX",
    "IKEEXT_PROPOSAL0",
    "IKEEXT_POLICY0",
    "IKEEXT_POLICY1",
    "IKEEXT_POLICY2",
    "IKEEXT_EM_POLICY0",
    "IKEEXT_EM_POLICY1",
    "IKEEXT_EM_POLICY2",
    "IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0",
    "IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1",
    "IKEEXT_KEYMODULE_STATISTICS0",
    "IKEEXT_KEYMODULE_STATISTICS1",
    "IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0",
    "IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1",
    "IKEEXT_COMMON_STATISTICS0",
    "IKEEXT_COMMON_STATISTICS1",
    "IKEEXT_STATISTICS0",
    "IKEEXT_STATISTICS1",
    "IKEEXT_TRAFFIC0",
    "IKEEXT_COOKIE_PAIR0",
    "IKEEXT_CERTIFICATE_CREDENTIAL0",
    "IKEEXT_NAME_CREDENTIAL0",
    "IKEEXT_CREDENTIAL0",
    "IKEEXT_CREDENTIAL_PAIR0",
    "IKEEXT_CREDENTIALS0",
    "IKEEXT_SA_DETAILS0",
    "IKEEXT_CERTIFICATE_CREDENTIAL1",
    "IKEEXT_CREDENTIAL1",
    "IKEEXT_CREDENTIAL_PAIR1",
    "IKEEXT_CREDENTIALS1",
    "IKEEXT_SA_DETAILS1",
    "IKEEXT_CREDENTIAL2",
    "IKEEXT_CREDENTIAL_PAIR2",
    "IKEEXT_CREDENTIALS2",
    "IKEEXT_SA_DETAILS2",
    "IKEEXT_SA_ENUM_TEMPLATE0",
    "IKEEXT_MM_SA_STATE",
    "IKEEXT_MM_SA_STATE_NONE",
    "IKEEXT_MM_SA_STATE_SA_SENT",
    "IKEEXT_MM_SA_STATE_SSPI_SENT",
    "IKEEXT_MM_SA_STATE_FINAL",
    "IKEEXT_MM_SA_STATE_FINAL_SENT",
    "IKEEXT_MM_SA_STATE_COMPLETE",
    "IKEEXT_MM_SA_STATE_MAX",
    "IKEEXT_QM_SA_STATE",
    "IKEEXT_QM_SA_STATE_NONE",
    "IKEEXT_QM_SA_STATE_INITIAL",
    "IKEEXT_QM_SA_STATE_FINAL",
    "IKEEXT_QM_SA_STATE_COMPLETE",
    "IKEEXT_QM_SA_STATE_MAX",
    "IKEEXT_EM_SA_STATE",
    "IKEEXT_EM_SA_STATE_NONE",
    "IKEEXT_EM_SA_STATE_SENT_ATTS",
    "IKEEXT_EM_SA_STATE_SSPI_SENT",
    "IKEEXT_EM_SA_STATE_AUTH_COMPLETE",
    "IKEEXT_EM_SA_STATE_FINAL",
    "IKEEXT_EM_SA_STATE_COMPLETE",
    "IKEEXT_EM_SA_STATE_MAX",
    "IKEEXT_SA_ROLE",
    "IKEEXT_SA_ROLE_INITIATOR",
    "IKEEXT_SA_ROLE_RESPONDER",
    "IKEEXT_SA_ROLE_MAX",
    "IPSEC_SA_LIFETIME0",
    "IPSEC_TRANSFORM_TYPE",
    "IPSEC_TRANSFORM_AH",
    "IPSEC_TRANSFORM_ESP_AUTH",
    "IPSEC_TRANSFORM_ESP_CIPHER",
    "IPSEC_TRANSFORM_ESP_AUTH_AND_CIPHER",
    "IPSEC_TRANSFORM_ESP_AUTH_FW",
    "IPSEC_TRANSFORM_TYPE_MAX",
    "IPSEC_AUTH_TYPE",
    "IPSEC_AUTH_MD5",
    "IPSEC_AUTH_SHA_1",
    "IPSEC_AUTH_SHA_256",
    "IPSEC_AUTH_AES_128",
    "IPSEC_AUTH_AES_192",
    "IPSEC_AUTH_AES_256",
    "IPSEC_AUTH_MAX",
    "IPSEC_AUTH_TRANSFORM_ID0",
    "IPSEC_AUTH_TRANSFORM0",
    "IPSEC_CIPHER_TYPE",
    "IPSEC_CIPHER_TYPE_DES",
    "IPSEC_CIPHER_TYPE_3DES",
    "IPSEC_CIPHER_TYPE_AES_128",
    "IPSEC_CIPHER_TYPE_AES_192",
    "IPSEC_CIPHER_TYPE_AES_256",
    "IPSEC_CIPHER_TYPE_MAX",
    "IPSEC_CIPHER_TRANSFORM_ID0",
    "IPSEC_CIPHER_TRANSFORM0",
    "IPSEC_AUTH_AND_CIPHER_TRANSFORM0",
    "IPSEC_SA_TRANSFORM0",
    "IPSEC_PFS_GROUP",
    "IPSEC_PFS_NONE",
    "IPSEC_PFS_1",
    "IPSEC_PFS_2",
    "IPSEC_PFS_2048",
    "IPSEC_PFS_14",
    "IPSEC_PFS_ECP_256",
    "IPSEC_PFS_ECP_384",
    "IPSEC_PFS_MM",
    "IPSEC_PFS_24",
    "IPSEC_PFS_MAX",
    "IPSEC_PROPOSAL0",
    "IPSEC_SA_IDLE_TIMEOUT0",
    "IPSEC_TRAFFIC_SELECTOR0_",
    "IPSEC_TRAFFIC_SELECTOR_POLICY0_",
    "IPSEC_TRANSPORT_POLICY0",
    "IPSEC_TRANSPORT_POLICY1",
    "IPSEC_TRANSPORT_POLICY2",
    "IPSEC_TUNNEL_ENDPOINTS0",
    "IPSEC_TUNNEL_ENDPOINT0",
    "IPSEC_TUNNEL_ENDPOINTS2",
    "IPSEC_TUNNEL_ENDPOINTS1",
    "IPSEC_TUNNEL_POLICY0",
    "IPSEC_TUNNEL_POLICY1",
    "IPSEC_TUNNEL_POLICY2",
    "IPSEC_TUNNEL_POLICY3_",
    "IPSEC_KEYING_POLICY0",
    "IPSEC_KEYING_POLICY1",
    "IPSEC_AGGREGATE_SA_STATISTICS0",
    "IPSEC_ESP_DROP_PACKET_STATISTICS0",
    "IPSEC_AH_DROP_PACKET_STATISTICS0",
    "IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0",
    "IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1",
    "IPSEC_TRAFFIC_STATISTICS0",
    "IPSEC_TRAFFIC_STATISTICS1",
    "IPSEC_STATISTICS0",
    "IPSEC_STATISTICS1",
    "IPSEC_SA_AUTH_INFORMATION0",
    "IPSEC_SA_CIPHER_INFORMATION0",
    "IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0",
    "IPSEC_SA0",
    "IPSEC_KEYMODULE_STATE0",
    "IPSEC_TOKEN_TYPE",
    "IPSEC_TOKEN_TYPE_MACHINE",
    "IPSEC_TOKEN_TYPE_IMPERSONATION",
    "IPSEC_TOKEN_TYPE_MAX",
    "IPSEC_TOKEN_PRINCIPAL",
    "IPSEC_TOKEN_PRINCIPAL_LOCAL",
    "IPSEC_TOKEN_PRINCIPAL_PEER",
    "IPSEC_TOKEN_PRINCIPAL_MAX",
    "IPSEC_TOKEN_MODE",
    "IPSEC_TOKEN_MODE_MAIN",
    "IPSEC_TOKEN_MODE_EXTENDED",
    "IPSEC_TOKEN_MODE_MAX",
    "IPSEC_TOKEN0",
    "IPSEC_ID0",
    "IPSEC_SA_BUNDLE0",
    "IPSEC_SA_BUNDLE1",
    "IPSEC_TRAFFIC_TYPE",
    "IPSEC_TRAFFIC_TYPE_TRANSPORT",
    "IPSEC_TRAFFIC_TYPE_TUNNEL",
    "IPSEC_TRAFFIC_TYPE_MAX",
    "IPSEC_TRAFFIC0",
    "IPSEC_TRAFFIC1",
    "IPSEC_V4_UDP_ENCAPSULATION0",
    "IPSEC_GETSPI0",
    "IPSEC_GETSPI1",
    "IPSEC_SA_DETAILS0",
    "IPSEC_SA_DETAILS1",
    "IPSEC_SA_CONTEXT0",
    "IPSEC_SA_CONTEXT1",
    "IPSEC_SA_CONTEXT_ENUM_TEMPLATE0",
    "IPSEC_SA_ENUM_TEMPLATE0",
    "IPSEC_SA_CONTEXT_SUBSCRIPTION0",
    "IPSEC_SA_CONTEXT_EVENT_TYPE0",
    "IPSEC_SA_CONTEXT_EVENT_ADD",
    "IPSEC_SA_CONTEXT_EVENT_DELETE",
    "IPSEC_SA_CONTEXT_EVENT_MAX",
    "IPSEC_SA_CONTEXT_CHANGE0",
    "IPSEC_FAILURE_POINT",
    "IPSEC_FAILURE_NONE",
    "IPSEC_FAILURE_ME",
    "IPSEC_FAILURE_PEER",
    "IPSEC_FAILURE_POINT_MAX",
    "IPSEC_ADDRESS_INFO0",
    "IPSEC_DOSP_OPTIONS0",
    "IPSEC_DOSP_STATISTICS0",
    "IPSEC_DOSP_STATE0",
    "IPSEC_DOSP_STATE_ENUM_TEMPLATE0",
    "IPSEC_KEY_MANAGER0",
    "DL_ADDRESS_TYPE",
    "DL_ADDRESS_TYPE_DlUnicast",
    "DL_ADDRESS_TYPE_DlMulticast",
    "DL_ADDRESS_TYPE_DlBroadcast",
    "FWPM_CHANGE_TYPE",
    "FWPM_CHANGE_ADD",
    "FWPM_CHANGE_DELETE",
    "FWPM_CHANGE_TYPE_MAX",
    "FWPM_SERVICE_STATE",
    "FWPM_SERVICE_STOPPED",
    "FWPM_SERVICE_START_PENDING",
    "FWPM_SERVICE_STOP_PENDING",
    "FWPM_SERVICE_RUNNING",
    "FWPM_SERVICE_STATE_MAX",
    "FWPM_ENGINE_OPTION",
    "FWPM_ENGINE_COLLECT_NET_EVENTS",
    "FWPM_ENGINE_NET_EVENT_MATCH_ANY_KEYWORDS",
    "FWPM_ENGINE_NAME_CACHE",
    "FWPM_ENGINE_MONITOR_IPSEC_CONNECTIONS",
    "FWPM_ENGINE_PACKET_QUEUING",
    "FWPM_ENGINE_TXN_WATCHDOG_TIMEOUT_IN_MSEC",
    "FWPM_ENGINE_OPTION_MAX",
    "FWPM_SESSION0",
    "FWPM_SESSION_ENUM_TEMPLATE0",
    "FWPM_PROVIDER0",
    "FWPM_PROVIDER_ENUM_TEMPLATE0",
    "FWPM_PROVIDER_CHANGE0",
    "FWPM_PROVIDER_SUBSCRIPTION0",
    "FWPM_CLASSIFY_OPTION0",
    "FWPM_CLASSIFY_OPTIONS0",
    "FWPM_PROVIDER_CONTEXT_TYPE",
    "FWPM_IPSEC_KEYING_CONTEXT",
    "FWPM_IPSEC_IKE_QM_TRANSPORT_CONTEXT",
    "FWPM_IPSEC_IKE_QM_TUNNEL_CONTEXT",
    "FWPM_IPSEC_AUTHIP_QM_TRANSPORT_CONTEXT",
    "FWPM_IPSEC_AUTHIP_QM_TUNNEL_CONTEXT",
    "FWPM_IPSEC_IKE_MM_CONTEXT",
    "FWPM_IPSEC_AUTHIP_MM_CONTEXT",
    "FWPM_CLASSIFY_OPTIONS_CONTEXT",
    "FWPM_GENERAL_CONTEXT",
    "FWPM_IPSEC_IKEV2_QM_TUNNEL_CONTEXT",
    "FWPM_IPSEC_IKEV2_MM_CONTEXT",
    "FWPM_IPSEC_DOSP_CONTEXT",
    "FWPM_IPSEC_IKEV2_QM_TRANSPORT_CONTEXT",
    "FWPM_PROVIDER_CONTEXT_TYPE_MAX",
    "FWPM_PROVIDER_CONTEXT0",
    "FWPM_PROVIDER_CONTEXT1",
    "FWPM_PROVIDER_CONTEXT2",
    "FWPM_PROVIDER_CONTEXT3_",
    "FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0",
    "FWPM_PROVIDER_CONTEXT_CHANGE0",
    "FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0",
    "FWPM_SUBLAYER0",
    "FWPM_SUBLAYER_ENUM_TEMPLATE0",
    "FWPM_SUBLAYER_CHANGE0",
    "FWPM_SUBLAYER_SUBSCRIPTION0",
    "FWPM_FIELD_TYPE",
    "FWPM_FIELD_RAW_DATA",
    "FWPM_FIELD_IP_ADDRESS",
    "FWPM_FIELD_FLAGS",
    "FWPM_FIELD_TYPE_MAX",
    "FWPM_FIELD0",
    "FWPM_LAYER0",
    "FWPM_LAYER_ENUM_TEMPLATE0",
    "FWPM_CALLOUT0",
    "FWPM_CALLOUT_ENUM_TEMPLATE0",
    "FWPM_CALLOUT_CHANGE0",
    "FWPM_CALLOUT_SUBSCRIPTION0",
    "FWPM_ACTION0",
    "FWPM_FILTER_CONDITION0",
    "FWPM_FILTER0",
    "FWPM_FILTER_ENUM_TEMPLATE0",
    "FWPM_FILTER_CHANGE0",
    "FWPM_FILTER_SUBSCRIPTION0",
    "FWPM_LAYER_STATISTICS0",
    "FWPM_STATISTICS0",
    "FWPM_NET_EVENT_HEADER0",
    "FWPM_NET_EVENT_HEADER1",
    "FWPM_NET_EVENT_HEADER2",
    "FWPM_NET_EVENT_HEADER3",
    "FWPM_NET_EVENT_TYPE",
    "FWPM_NET_EVENT_TYPE_IKEEXT_MM_FAILURE",
    "FWPM_NET_EVENT_TYPE_IKEEXT_QM_FAILURE",
    "FWPM_NET_EVENT_TYPE_IKEEXT_EM_FAILURE",
    "FWPM_NET_EVENT_TYPE_CLASSIFY_DROP",
    "FWPM_NET_EVENT_TYPE_IPSEC_KERNEL_DROP",
    "FWPM_NET_EVENT_TYPE_IPSEC_DOSP_DROP",
    "FWPM_NET_EVENT_TYPE_CLASSIFY_ALLOW",
    "FWPM_NET_EVENT_TYPE_CAPABILITY_DROP",
    "FWPM_NET_EVENT_TYPE_CAPABILITY_ALLOW",
    "FWPM_NET_EVENT_TYPE_CLASSIFY_DROP_MAC",
    "FWPM_NET_EVENT_TYPE_LPM_PACKET_ARRIVAL",
    "FWPM_NET_EVENT_TYPE_MAX",
    "FWPM_NET_EVENT_IKEEXT_MM_FAILURE0",
    "FWPM_NET_EVENT_IKEEXT_MM_FAILURE1",
    "FWPM_NET_EVENT_IKEEXT_MM_FAILURE2_",
    "FWPM_NET_EVENT_IKEEXT_QM_FAILURE0",
    "FWPM_NET_EVENT_IKEEXT_QM_FAILURE1_",
    "FWPM_NET_EVENT_IKEEXT_EM_FAILURE0",
    "FWPM_NET_EVENT_IKEEXT_EM_FAILURE1",
    "FWPM_NET_EVENT_CLASSIFY_DROP0",
    "FWPM_NET_EVENT_CLASSIFY_DROP1",
    "FWPM_NET_EVENT_CLASSIFY_DROP2",
    "FWPM_NET_EVENT_CLASSIFY_DROP_MAC0",
    "FWPM_NET_EVENT_CLASSIFY_ALLOW0",
    "FWPM_NET_EVENT_IPSEC_KERNEL_DROP0",
    "FWPM_NET_EVENT_IPSEC_DOSP_DROP0",
    "FWPM_APPC_NETWORK_CAPABILITY_TYPE",
    "FWPM_APPC_NETWORK_CAPABILITY_INTERNET_CLIENT",
    "FWPM_APPC_NETWORK_CAPABILITY_INTERNET_CLIENT_SERVER",
    "FWPM_APPC_NETWORK_CAPABILITY_INTERNET_PRIVATE_NETWORK",
    "FWPM_NET_EVENT_CAPABILITY_DROP0",
    "FWPM_NET_EVENT_CAPABILITY_ALLOW0",
    "FWPM_NET_EVENT_LPM_PACKET_ARRIVAL0_",
    "FWPM_NET_EVENT0",
    "FWPM_NET_EVENT1",
    "FWPM_NET_EVENT2",
    "FWPM_NET_EVENT3",
    "FWPM_NET_EVENT4_",
    "FWPM_NET_EVENT5_",
    "FWPM_NET_EVENT_ENUM_TEMPLATE0",
    "FWPM_NET_EVENT_SUBSCRIPTION0",
    "FWPM_SYSTEM_PORT_TYPE",
    "FWPM_SYSTEM_PORT_RPC_EPMAP",
    "FWPM_SYSTEM_PORT_TEREDO",
    "FWPM_SYSTEM_PORT_IPHTTPS_IN",
    "FWPM_SYSTEM_PORT_IPHTTPS_OUT",
    "FWPM_SYSTEM_PORT_TYPE_MAX",
    "FWPM_SYSTEM_PORTS_BY_TYPE0",
    "FWPM_SYSTEM_PORTS0",
    "FWPM_CONNECTION0",
    "FWPM_CONNECTION_ENUM_TEMPLATE0",
    "FWPM_CONNECTION_SUBSCRIPTION0",
    "FWPM_CONNECTION_EVENT_TYPE",
    "FWPM_CONNECTION_EVENT_ADD",
    "FWPM_CONNECTION_EVENT_DELETE",
    "FWPM_CONNECTION_EVENT_MAX",
    "FWPM_VSWITCH_EVENT_TYPE",
    "FWPM_VSWITCH_EVENT_FILTER_ADD_TO_INCOMPLETE_LAYER",
    "FWPM_VSWITCH_EVENT_FILTER_ENGINE_NOT_IN_REQUIRED_POSITION",
    "FWPM_VSWITCH_EVENT_ENABLED_FOR_INSPECTION",
    "FWPM_VSWITCH_EVENT_DISABLED_FOR_INSPECTION",
    "FWPM_VSWITCH_EVENT_FILTER_ENGINE_REORDER",
    "FWPM_VSWITCH_EVENT_MAX",
    "FWPM_VSWITCH_EVENT0",
    "FWPM_VSWITCH_EVENT_SUBSCRIPTION0",
    "FWPM_PROVIDER_CHANGE_CALLBACK0",
    "FWPM_PROVIDER_CONTEXT_CHANGE_CALLBACK0",
    "FWPM_SUBLAYER_CHANGE_CALLBACK0",
    "FWPM_CALLOUT_CHANGE_CALLBACK0",
    "FWPM_FILTER_CHANGE_CALLBACK0",
    "IPSEC_SA_CONTEXT_CALLBACK0",
    "IPSEC_KEY_MANAGER_KEY_DICTATION_CHECK0",
    "IPSEC_KEY_MANAGER_DICTATE_KEY0",
    "IPSEC_KEY_MANAGER_NOTIFY_KEY0",
    "IPSEC_KEY_MANAGER_CALLBACKS0",
    "FWPM_NET_EVENT_CALLBACK0",
    "FWPM_NET_EVENT_CALLBACK1",
    "FWPM_NET_EVENT_CALLBACK2",
    "FWPM_NET_EVENT_CALLBACK3",
    "FWPM_NET_EVENT_CALLBACK4",
    "FWPM_DYNAMIC_KEYWORD_CALLBACK0",
    "FWPM_SYSTEM_PORTS_CALLBACK0",
    "FWPM_CONNECTION_CALLBACK0",
    "FWPM_VSWITCH_EVENT_CALLBACK0",
    "DL_OUI",
    "DL_EI48",
    "DL_EUI48",
    "DL_EI64",
    "DL_EUI64",
    "SNAP_HEADER",
    "ETHERNET_HEADER",
    "VLAN_TAG",
    "ICMP_HEADER",
    "ICMP_MESSAGE",
    "IPV4_HEADER",
    "IPV4_OPTION_HEADER",
    "IPV4_OPTION_TYPE",
    "IP_OPT_EOL",
    "IP_OPT_NOP",
    "IP_OPT_SECURITY",
    "IP_OPT_LSRR",
    "IP_OPT_TS",
    "IP_OPT_RR",
    "IP_OPT_SSRR",
    "IP_OPT_SID",
    "IP_OPT_ROUTER_ALERT",
    "IP_OPT_MULTIDEST",
    "IPV4_TIMESTAMP_OPTION",
    "IP_OPTION_TIMESTAMP_FLAGS",
    "IP_OPTION_TIMESTAMP_ONLY",
    "IP_OPTION_TIMESTAMP_ADDRESS",
    "IP_OPTION_TIMESTAMP_SPECIFIC_ADDRESS",
    "IPV4_ROUTING_HEADER",
    "ICMP4_UNREACH_CODE",
    "ICMP4_UNREACH_NET",
    "ICMP4_UNREACH_HOST",
    "ICMP4_UNREACH_PROTOCOL",
    "ICMP4_UNREACH_PORT",
    "ICMP4_UNREACH_FRAG_NEEDED",
    "ICMP4_UNREACH_SOURCEROUTE_FAILED",
    "ICMP4_UNREACH_NET_UNKNOWN",
    "ICMP4_UNREACH_HOST_UNKNOWN",
    "ICMP4_UNREACH_ISOLATED",
    "ICMP4_UNREACH_NET_ADMIN",
    "ICMP4_UNREACH_HOST_ADMIN",
    "ICMP4_UNREACH_NET_TOS",
    "ICMP4_UNREACH_HOST_TOS",
    "ICMP4_UNREACH_ADMIN",
    "ICMP4_TIME_EXCEED_CODE",
    "ICMP4_TIME_EXCEED_TRANSIT",
    "ICMP4_TIME_EXCEED_REASSEMBLY",
    "ICMPV4_ROUTER_SOLICIT",
    "ICMPV4_ROUTER_ADVERT_HEADER",
    "ICMPV4_ROUTER_ADVERT_ENTRY",
    "ICMPV4_TIMESTAMP_MESSAGE",
    "ICMPV4_ADDRESS_MASK_MESSAGE",
    "ARP_HEADER",
    "ARP_OPCODE",
    "ARP_REQUEST",
    "ARP_RESPONSE",
    "ARP_HARDWARE_TYPE",
    "ARP_HW_ENET",
    "ARP_HW_802",
    "IGMP_HEADER",
    "IGMP_MAX_RESP_CODE_TYPE",
    "IGMP_MAX_RESP_CODE_TYPE_NORMAL",
    "IGMP_MAX_RESP_CODE_TYPE_FLOAT",
    "IGMPV3_QUERY_HEADER",
    "IGMPV3_REPORT_RECORD_HEADER",
    "IGMPV3_REPORT_HEADER",
    "IPV6_HEADER",
    "IPV6_FRAGMENT_HEADER",
    "IPV6_EXTENSION_HEADER",
    "IPV6_OPTION_HEADER",
    "IPV6_OPTION_TYPE",
    "IP6OPT_PAD1",
    "IP6OPT_PADN",
    "IP6OPT_TUNNEL_LIMIT",
    "IP6OPT_ROUTER_ALERT",
    "IP6OPT_JUMBO",
    "IP6OPT_NSAP_ADDR",
    "IPV6_OPTION_JUMBOGRAM",
    "IPV6_OPTION_ROUTER_ALERT",
    "IPV6_ROUTING_HEADER",
    "nd_router_solicit",
    "nd_router_advert",
    "IPV6_ROUTER_ADVERTISEMENT_FLAGS",
    "nd_neighbor_solicit",
    "nd_neighbor_advert",
    "IPV6_NEIGHBOR_ADVERTISEMENT_FLAGS",
    "nd_redirect",
    "nd_opt_hdr",
    "ND_OPTION_TYPE",
    "ND_OPT_SOURCE_LINKADDR",
    "ND_OPT_TARGET_LINKADDR",
    "ND_OPT_PREFIX_INFORMATION",
    "ND_OPT_REDIRECTED_HEADER",
    "ND_OPT_MTU",
    "ND_OPT_NBMA_SHORTCUT_LIMIT",
    "ND_OPT_ADVERTISEMENT_INTERVAL",
    "ND_OPT_HOME_AGENT_INFORMATION",
    "ND_OPT_SOURCE_ADDR_LIST",
    "ND_OPT_TARGET_ADDR_LIST",
    "ND_OPT_ROUTE_INFO",
    "ND_OPT_RDNSS",
    "ND_OPT_DNSSL",
    "nd_opt_prefix_info",
    "nd_opt_rd_hdr",
    "nd_opt_mtu",
    "nd_opt_route_info",
    "nd_opt_rdnss",
    "nd_opt_dnssl",
    "MLD_HEADER",
    "MLD_MAX_RESP_CODE_TYPE",
    "MLD_MAX_RESP_CODE_TYPE_NORMAL",
    "MLD_MAX_RESP_CODE_TYPE_FLOAT",
    "MLDV2_QUERY_HEADER",
    "MLDV2_REPORT_RECORD_HEADER",
    "MLDV2_REPORT_HEADER",
    "tcp_hdr",
    "tcp_opt_mss",
    "tcp_opt_ws",
    "tcp_opt_sack_permitted",
    "tcp_opt_sack",
    "tcp_opt_ts",
    "tcp_opt_unknown",
    "tcp_opt_fastopen",
    "DL_TUNNEL_ADDRESS",
    "TUNNEL_SUB_TYPE",
    "TUNNEL_SUB_TYPE_NONE",
    "TUNNEL_SUB_TYPE_CP",
    "TUNNEL_SUB_TYPE_IPTLS",
    "TUNNEL_SUB_TYPE_HA",
    "DL_TEREDO_ADDRESS",
    "DL_TEREDO_ADDRESS_PRV",
    "IPTLS_METADATA",
    "NPI_MODULEID_TYPE",
    "MIT_GUID",
    "MIT_IF_LUID",
    "NPI_MODULEID",
    "FALLBACK_INDEX",
    "FALLBACK_INDEX_FallbackIndexTcpFastopen",
    "FALLBACK_INDEX_FallbackIndexMax",
    "FwpmFreeMemory0",
    "FwpmEngineOpen0",
    "FwpmEngineClose0",
    "FwpmEngineGetOption0",
    "FwpmEngineSetOption0",
    "FwpmEngineGetSecurityInfo0",
    "FwpmEngineSetSecurityInfo0",
    "FwpmSessionCreateEnumHandle0",
    "FwpmSessionEnum0",
    "FwpmSessionDestroyEnumHandle0",
    "FwpmTransactionBegin0",
    "FwpmTransactionCommit0",
    "FwpmTransactionAbort0",
    "FwpmProviderAdd0",
    "FwpmProviderDeleteByKey0",
    "FwpmProviderGetByKey0",
    "FwpmProviderCreateEnumHandle0",
    "FwpmProviderEnum0",
    "FwpmProviderDestroyEnumHandle0",
    "FwpmProviderGetSecurityInfoByKey0",
    "FwpmProviderSetSecurityInfoByKey0",
    "FwpmProviderSubscribeChanges0",
    "FwpmProviderUnsubscribeChanges0",
    "FwpmProviderSubscriptionsGet0",
    "FwpmProviderContextAdd0",
    "FwpmProviderContextAdd1",
    "FwpmProviderContextAdd2",
    "FwpmProviderContextAdd3",
    "FwpmProviderContextDeleteById0",
    "FwpmProviderContextDeleteByKey0",
    "FwpmProviderContextGetById0",
    "FwpmProviderContextGetById1",
    "FwpmProviderContextGetById2",
    "FwpmProviderContextGetById3",
    "FwpmProviderContextGetByKey0",
    "FwpmProviderContextGetByKey1",
    "FwpmProviderContextGetByKey2",
    "FwpmProviderContextGetByKey3",
    "FwpmProviderContextCreateEnumHandle0",
    "FwpmProviderContextEnum0",
    "FwpmProviderContextEnum1",
    "FwpmProviderContextEnum2",
    "FwpmProviderContextEnum3",
    "FwpmProviderContextDestroyEnumHandle0",
    "FwpmProviderContextGetSecurityInfoByKey0",
    "FwpmProviderContextSetSecurityInfoByKey0",
    "FwpmProviderContextSubscribeChanges0",
    "FwpmProviderContextUnsubscribeChanges0",
    "FwpmProviderContextSubscriptionsGet0",
    "FwpmSubLayerAdd0",
    "FwpmSubLayerDeleteByKey0",
    "FwpmSubLayerGetByKey0",
    "FwpmSubLayerCreateEnumHandle0",
    "FwpmSubLayerEnum0",
    "FwpmSubLayerDestroyEnumHandle0",
    "FwpmSubLayerGetSecurityInfoByKey0",
    "FwpmSubLayerSetSecurityInfoByKey0",
    "FwpmSubLayerSubscribeChanges0",
    "FwpmSubLayerUnsubscribeChanges0",
    "FwpmSubLayerSubscriptionsGet0",
    "FwpmLayerGetById0",
    "FwpmLayerGetByKey0",
    "FwpmLayerCreateEnumHandle0",
    "FwpmLayerEnum0",
    "FwpmLayerDestroyEnumHandle0",
    "FwpmLayerGetSecurityInfoByKey0",
    "FwpmLayerSetSecurityInfoByKey0",
    "FwpmCalloutAdd0",
    "FwpmCalloutDeleteById0",
    "FwpmCalloutDeleteByKey0",
    "FwpmCalloutGetById0",
    "FwpmCalloutGetByKey0",
    "FwpmCalloutCreateEnumHandle0",
    "FwpmCalloutEnum0",
    "FwpmCalloutDestroyEnumHandle0",
    "FwpmCalloutGetSecurityInfoByKey0",
    "FwpmCalloutSetSecurityInfoByKey0",
    "FwpmCalloutSubscribeChanges0",
    "FwpmCalloutUnsubscribeChanges0",
    "FwpmCalloutSubscriptionsGet0",
    "FwpmFilterAdd0",
    "FwpmFilterDeleteById0",
    "FwpmFilterDeleteByKey0",
    "FwpmFilterGetById0",
    "FwpmFilterGetByKey0",
    "FwpmFilterCreateEnumHandle0",
    "FwpmFilterEnum0",
    "FwpmFilterDestroyEnumHandle0",
    "FwpmFilterGetSecurityInfoByKey0",
    "FwpmFilterSetSecurityInfoByKey0",
    "FwpmFilterSubscribeChanges0",
    "FwpmFilterUnsubscribeChanges0",
    "FwpmFilterSubscriptionsGet0",
    "FwpmGetAppIdFromFileName0",
    "FwpmIPsecTunnelAdd0",
    "FwpmIPsecTunnelAdd1",
    "FwpmIPsecTunnelAdd2",
    "FwpmIPsecTunnelAdd3",
    "FwpmIPsecTunnelDeleteByKey0",
    "IPsecGetStatistics0",
    "IPsecGetStatistics1",
    "IPsecSaContextCreate0",
    "IPsecSaContextCreate1",
    "IPsecSaContextDeleteById0",
    "IPsecSaContextGetById0",
    "IPsecSaContextGetById1",
    "IPsecSaContextGetSpi0",
    "IPsecSaContextGetSpi1",
    "IPsecSaContextSetSpi0",
    "IPsecSaContextAddInbound0",
    "IPsecSaContextAddOutbound0",
    "IPsecSaContextAddInbound1",
    "IPsecSaContextAddOutbound1",
    "IPsecSaContextExpire0",
    "IPsecSaContextUpdate0",
    "IPsecSaContextCreateEnumHandle0",
    "IPsecSaContextEnum0",
    "IPsecSaContextEnum1",
    "IPsecSaContextDestroyEnumHandle0",
    "IPsecSaContextSubscribe0",
    "IPsecSaContextUnsubscribe0",
    "IPsecSaContextSubscriptionsGet0",
    "IPsecSaCreateEnumHandle0",
    "IPsecSaEnum0",
    "IPsecSaEnum1",
    "IPsecSaDestroyEnumHandle0",
    "IPsecSaDbGetSecurityInfo0",
    "IPsecSaDbSetSecurityInfo0",
    "IPsecDospGetStatistics0",
    "IPsecDospStateCreateEnumHandle0",
    "IPsecDospStateEnum0",
    "IPsecDospStateDestroyEnumHandle0",
    "IPsecDospGetSecurityInfo0",
    "IPsecDospSetSecurityInfo0",
    "IPsecKeyManagerAddAndRegister0",
    "IPsecKeyManagerUnregisterAndDelete0",
    "IPsecKeyManagersGet0",
    "IPsecKeyManagerGetSecurityInfoByKey0",
    "IPsecKeyManagerSetSecurityInfoByKey0",
    "IkeextGetStatistics0",
    "IkeextGetStatistics1",
    "IkeextSaDeleteById0",
    "IkeextSaGetById0",
    "IkeextSaGetById1",
    "IkeextSaGetById2",
    "IkeextSaCreateEnumHandle0",
    "IkeextSaEnum0",
    "IkeextSaEnum1",
    "IkeextSaEnum2",
    "IkeextSaDestroyEnumHandle0",
    "IkeextSaDbGetSecurityInfo0",
    "IkeextSaDbSetSecurityInfo0",
    "FwpmNetEventCreateEnumHandle0",
    "FwpmNetEventEnum0",
    "FwpmNetEventEnum1",
    "FwpmNetEventEnum2",
    "FwpmNetEventEnum3",
    "FwpmNetEventEnum4",
    "FwpmNetEventEnum5",
    "FwpmNetEventDestroyEnumHandle0",
    "FwpmNetEventsGetSecurityInfo0",
    "FwpmNetEventsSetSecurityInfo0",
    "FwpmNetEventSubscribe0",
    "FwpmNetEventUnsubscribe0",
    "FwpmNetEventSubscriptionsGet0",
    "FwpmNetEventSubscribe1",
    "FwpmNetEventSubscribe2",
    "FwpmNetEventSubscribe3",
    "FwpmNetEventSubscribe4",
    "FwpmDynamicKeywordSubscribe0",
    "FwpmDynamicKeywordUnsubscribe0",
    "FwpmSystemPortsGet0",
    "FwpmSystemPortsSubscribe0",
    "FwpmSystemPortsUnsubscribe0",
    "FwpmConnectionGetById0",
    "FwpmConnectionEnum0",
    "FwpmConnectionCreateEnumHandle0",
    "FwpmConnectionDestroyEnumHandle0",
    "FwpmConnectionGetSecurityInfo0",
    "FwpmConnectionSetSecurityInfo0",
    "FwpmConnectionSubscribe0",
    "FwpmConnectionUnsubscribe0",
    "FwpmvSwitchEventSubscribe0",
    "FwpmvSwitchEventUnsubscribe0",
    "FwpmvSwitchEventsGetSecurityInfo0",
    "FwpmvSwitchEventsSetSecurityInfo0",
]
