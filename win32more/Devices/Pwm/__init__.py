from __future__ import annotations
from ctypes import c_void_p, Structure, Union, POINTER, CFUNCTYPE, WINFUNCTYPE, cdll, windll
from win32more.base import ARCH, MissingType, c_char_p_no, c_wchar_p_no, Byte, SByte, Char, Int16, UInt16, Int32, UInt32, Int64, UInt64, IntPtr, UIntPtr, Single, Double, String, Boolean, Void, Guid, SUCCEEDED, FAILED, cfunctype, winfunctype, commethod, cfunctype_pointer, winfunctype_pointer, press, make_head
import win32more.Devices.Pwm
import win32more.Foundation
import sys
_module = sys.modules[__name__]
def __getattr__(name):
    try:
        prototype = globals()[f'{name}_head']
    except KeyError:
        if name in _arch_optional:
            return None
        raise AttributeError(f"module '{__name__}' has no attribute '{name}'") from None
    setattr(_module, name, press(prototype))
    return getattr(_module, name)
def __dir__():
    return __all__
GUID_DEVINTERFACE_PWM_CONTROLLER: Guid = Guid('60824b4c-eed1-4c9c-b4-9c-1b-96-14-61-a8-19')
GUID_DEVINTERFACE_PWM_CONTROLLER_WSZ: String = '{60824B4C-EED1-4C9C-B49C-1B961461A819}'
IOCTL_PWM_CONTROLLER_GET_INFO: UInt32 = 262144
IOCTL_PWM_CONTROLLER_GET_ACTUAL_PERIOD: UInt32 = 262148
IOCTL_PWM_CONTROLLER_SET_DESIRED_PERIOD: UInt32 = 294920
IOCTL_PWM_PIN_GET_ACTIVE_DUTY_CYCLE_PERCENTAGE: UInt32 = 262544
IOCTL_PWM_PIN_SET_ACTIVE_DUTY_CYCLE_PERCENTAGE: UInt32 = 295316
IOCTL_PWM_PIN_GET_POLARITY: UInt32 = 262552
IOCTL_PWM_PIN_SET_POLARITY: UInt32 = 295324
IOCTL_PWM_PIN_START: UInt32 = 295331
IOCTL_PWM_PIN_STOP: UInt32 = 295335
IOCTL_PWM_PIN_IS_STARTED: UInt32 = 262568
PWM_IOCTL_ID_CONTROLLER_GET_INFO: Int32 = 0
PWM_IOCTL_ID_CONTROLLER_GET_ACTUAL_PERIOD: Int32 = 1
PWM_IOCTL_ID_CONTROLLER_SET_DESIRED_PERIOD: Int32 = 2
PWM_IOCTL_ID_PIN_GET_ACTIVE_DUTY_CYCLE_PERCENTAGE: Int32 = 100
PWM_IOCTL_ID_PIN_SET_ACTIVE_DUTY_CYCLE_PERCENTAGE: Int32 = 101
PWM_IOCTL_ID_PIN_GET_POLARITY: Int32 = 102
PWM_IOCTL_ID_PIN_SET_POLARITY: Int32 = 103
PWM_IOCTL_ID_PIN_START: Int32 = 104
PWM_IOCTL_ID_PIN_STOP: Int32 = 105
PWM_IOCTL_ID_PIN_IS_STARTED: Int32 = 106
class PWM_CONTROLLER_GET_ACTUAL_PERIOD_OUTPUT(Structure):
    ActualPeriod: UInt64
class PWM_CONTROLLER_INFO(Structure):
    Size: UIntPtr
    PinCount: UInt32
    MinimumPeriod: UInt64
    MaximumPeriod: UInt64
class PWM_CONTROLLER_SET_DESIRED_PERIOD_INPUT(Structure):
    DesiredPeriod: UInt64
class PWM_CONTROLLER_SET_DESIRED_PERIOD_OUTPUT(Structure):
    ActualPeriod: UInt64
class PWM_PIN_GET_ACTIVE_DUTY_CYCLE_PERCENTAGE_OUTPUT(Structure):
    Percentage: UInt64
class PWM_PIN_GET_POLARITY_OUTPUT(Structure):
    Polarity: win32more.Devices.Pwm.PWM_POLARITY
class PWM_PIN_IS_STARTED_OUTPUT(Structure):
    IsStarted: win32more.Foundation.BOOLEAN
class PWM_PIN_SET_ACTIVE_DUTY_CYCLE_PERCENTAGE_INPUT(Structure):
    Percentage: UInt64
class PWM_PIN_SET_POLARITY_INPUT(Structure):
    Polarity: win32more.Devices.Pwm.PWM_POLARITY
PWM_POLARITY = Int32
PWM_ACTIVE_HIGH: PWM_POLARITY = 0
PWM_ACTIVE_LOW: PWM_POLARITY = 1
make_head(_module, 'PWM_CONTROLLER_GET_ACTUAL_PERIOD_OUTPUT')
make_head(_module, 'PWM_CONTROLLER_INFO')
make_head(_module, 'PWM_CONTROLLER_SET_DESIRED_PERIOD_INPUT')
make_head(_module, 'PWM_CONTROLLER_SET_DESIRED_PERIOD_OUTPUT')
make_head(_module, 'PWM_PIN_GET_ACTIVE_DUTY_CYCLE_PERCENTAGE_OUTPUT')
make_head(_module, 'PWM_PIN_GET_POLARITY_OUTPUT')
make_head(_module, 'PWM_PIN_IS_STARTED_OUTPUT')
make_head(_module, 'PWM_PIN_SET_ACTIVE_DUTY_CYCLE_PERCENTAGE_INPUT')
make_head(_module, 'PWM_PIN_SET_POLARITY_INPUT')
__all__ = [
    "GUID_DEVINTERFACE_PWM_CONTROLLER",
    "GUID_DEVINTERFACE_PWM_CONTROLLER_WSZ",
    "IOCTL_PWM_CONTROLLER_GET_ACTUAL_PERIOD",
    "IOCTL_PWM_CONTROLLER_GET_INFO",
    "IOCTL_PWM_CONTROLLER_SET_DESIRED_PERIOD",
    "IOCTL_PWM_PIN_GET_ACTIVE_DUTY_CYCLE_PERCENTAGE",
    "IOCTL_PWM_PIN_GET_POLARITY",
    "IOCTL_PWM_PIN_IS_STARTED",
    "IOCTL_PWM_PIN_SET_ACTIVE_DUTY_CYCLE_PERCENTAGE",
    "IOCTL_PWM_PIN_SET_POLARITY",
    "IOCTL_PWM_PIN_START",
    "IOCTL_PWM_PIN_STOP",
    "PWM_ACTIVE_HIGH",
    "PWM_ACTIVE_LOW",
    "PWM_CONTROLLER_GET_ACTUAL_PERIOD_OUTPUT",
    "PWM_CONTROLLER_INFO",
    "PWM_CONTROLLER_SET_DESIRED_PERIOD_INPUT",
    "PWM_CONTROLLER_SET_DESIRED_PERIOD_OUTPUT",
    "PWM_IOCTL_ID_CONTROLLER_GET_ACTUAL_PERIOD",
    "PWM_IOCTL_ID_CONTROLLER_GET_INFO",
    "PWM_IOCTL_ID_CONTROLLER_SET_DESIRED_PERIOD",
    "PWM_IOCTL_ID_PIN_GET_ACTIVE_DUTY_CYCLE_PERCENTAGE",
    "PWM_IOCTL_ID_PIN_GET_POLARITY",
    "PWM_IOCTL_ID_PIN_IS_STARTED",
    "PWM_IOCTL_ID_PIN_SET_ACTIVE_DUTY_CYCLE_PERCENTAGE",
    "PWM_IOCTL_ID_PIN_SET_POLARITY",
    "PWM_IOCTL_ID_PIN_START",
    "PWM_IOCTL_ID_PIN_STOP",
    "PWM_PIN_GET_ACTIVE_DUTY_CYCLE_PERCENTAGE_OUTPUT",
    "PWM_PIN_GET_POLARITY_OUTPUT",
    "PWM_PIN_IS_STARTED_OUTPUT",
    "PWM_PIN_SET_ACTIVE_DUTY_CYCLE_PERCENTAGE_INPUT",
    "PWM_PIN_SET_POLARITY_INPUT",
    "PWM_POLARITY",
]
_arch_optional = [
]
