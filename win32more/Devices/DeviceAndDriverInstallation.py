from win32more import *
import win32more.Devices.DeviceAndDriverInstallation
import win32more.Data.HtmlHelp
import win32more.Devices.Properties
import win32more.Foundation
import win32more.Graphics.Gdi
import win32more.System.Diagnostics.Debug
import win32more.System.Registry
import win32more.UI.Controls
import win32more.UI.WindowsAndMessaging

def __getattr__(name):
    if name == "__path__":
        raise AttributeError()
    setattr(win32more.Devices.DeviceAndDriverInstallation, name, eval(f"_define_{name}()"))
    return getattr(win32more.Devices.DeviceAndDriverInstallation, name)
CM_PROB_NOT_CONFIGURED = 1
CM_PROB_DEVLOADER_FAILED = 2
CM_PROB_OUT_OF_MEMORY = 3
CM_PROB_ENTRY_IS_WRONG_TYPE = 4
CM_PROB_LACKED_ARBITRATOR = 5
CM_PROB_BOOT_CONFIG_CONFLICT = 6
CM_PROB_FAILED_FILTER = 7
CM_PROB_DEVLOADER_NOT_FOUND = 8
CM_PROB_INVALID_DATA = 9
CM_PROB_FAILED_START = 10
CM_PROB_LIAR = 11
CM_PROB_NORMAL_CONFLICT = 12
CM_PROB_NOT_VERIFIED = 13
CM_PROB_NEED_RESTART = 14
CM_PROB_REENUMERATION = 15
CM_PROB_PARTIAL_LOG_CONF = 16
CM_PROB_UNKNOWN_RESOURCE = 17
CM_PROB_REINSTALL = 18
CM_PROB_REGISTRY = 19
CM_PROB_VXDLDR = 20
CM_PROB_WILL_BE_REMOVED = 21
CM_PROB_DISABLED = 22
CM_PROB_DEVLOADER_NOT_READY = 23
CM_PROB_DEVICE_NOT_THERE = 24
CM_PROB_MOVED = 25
CM_PROB_TOO_EARLY = 26
CM_PROB_NO_VALID_LOG_CONF = 27
CM_PROB_FAILED_INSTALL = 28
CM_PROB_HARDWARE_DISABLED = 29
CM_PROB_CANT_SHARE_IRQ = 30
CM_PROB_FAILED_ADD = 31
CM_PROB_DISABLED_SERVICE = 32
CM_PROB_TRANSLATION_FAILED = 33
CM_PROB_NO_SOFTCONFIG = 34
CM_PROB_BIOS_TABLE = 35
CM_PROB_IRQ_TRANSLATION_FAILED = 36
CM_PROB_FAILED_DRIVER_ENTRY = 37
CM_PROB_DRIVER_FAILED_PRIOR_UNLOAD = 38
CM_PROB_DRIVER_FAILED_LOAD = 39
CM_PROB_DRIVER_SERVICE_KEY_INVALID = 40
CM_PROB_LEGACY_SERVICE_NO_DEVICES = 41
CM_PROB_DUPLICATE_DEVICE = 42
CM_PROB_FAILED_POST_START = 43
CM_PROB_HALTED = 44
CM_PROB_PHANTOM = 45
CM_PROB_SYSTEM_SHUTDOWN = 46
CM_PROB_HELD_FOR_EJECT = 47
CM_PROB_DRIVER_BLOCKED = 48
CM_PROB_REGISTRY_TOO_LARGE = 49
CM_PROB_SETPROPERTIES_FAILED = 50
CM_PROB_WAITING_ON_DEPENDENCY = 51
CM_PROB_UNSIGNED_DRIVER = 52
CM_PROB_USED_BY_DEBUGGER = 53
CM_PROB_DEVICE_RESET = 54
CM_PROB_CONSOLE_LOCKED = 55
CM_PROB_NEED_CLASS_CONFIG = 56
CM_PROB_GUEST_ASSIGNMENT_FAILED = 57
NUM_CM_PROB_V1 = 37
NUM_CM_PROB_V2 = 50
NUM_CM_PROB_V3 = 51
NUM_CM_PROB_V4 = 52
NUM_CM_PROB_V5 = 53
NUM_CM_PROB_V6 = 54
NUM_CM_PROB_V7 = 55
NUM_CM_PROB_V8 = 57
NUM_CM_PROB_V9 = 58
NUM_CM_PROB = 58
DN_ROOT_ENUMERATED = 1
DN_DRIVER_LOADED = 2
DN_ENUM_LOADED = 4
DN_STARTED = 8
DN_MANUAL = 16
DN_NEED_TO_ENUM = 32
DN_NOT_FIRST_TIME = 64
DN_HARDWARE_ENUM = 128
DN_LIAR = 256
DN_HAS_MARK = 512
DN_HAS_PROBLEM = 1024
DN_FILTERED = 2048
DN_MOVED = 4096
DN_DISABLEABLE = 8192
DN_REMOVABLE = 16384
DN_PRIVATE_PROBLEM = 32768
DN_MF_PARENT = 65536
DN_MF_CHILD = 131072
DN_WILL_BE_REMOVED = 262144
DN_NOT_FIRST_TIMEE = 524288
DN_STOP_FREE_RES = 1048576
DN_REBAL_CANDIDATE = 2097152
DN_BAD_PARTIAL = 4194304
DN_NT_ENUMERATOR = 8388608
DN_NT_DRIVER = 16777216
DN_NEEDS_LOCKING = 33554432
DN_ARM_WAKEUP = 67108864
DN_APM_ENUMERATOR = 134217728
DN_APM_DRIVER = 268435456
DN_SILENT_INSTALL = 536870912
DN_NO_SHOW_IN_DM = 1073741824
DN_BOOT_LOG_PROB = 2147483648
DN_NEED_RESTART = 256
DN_DRIVER_BLOCKED = 64
DN_LEGACY_DRIVER = 4096
DN_CHILD_WITH_INVALID_ID = 512
DN_DEVICE_DISCONNECTED = 33554432
DN_QUERY_REMOVE_PENDING = 65536
DN_QUERY_REMOVE_ACTIVE = 131072
LCPRI_FORCECONFIG = 0
LCPRI_BOOTCONFIG = 1
LCPRI_DESIRED = 8192
LCPRI_NORMAL = 12288
LCPRI_LASTBESTCONFIG = 16383
LCPRI_SUBOPTIMAL = 20480
LCPRI_LASTSOFTCONFIG = 32767
LCPRI_RESTART = 32768
LCPRI_REBOOT = 36864
LCPRI_POWEROFF = 40960
LCPRI_HARDRECONFIG = 49152
LCPRI_HARDWIRED = 57344
LCPRI_IMPOSSIBLE = 61440
LCPRI_DISABLED = 65535
MAX_LCPRI = 65535
CM_DEVICE_PANEL_SIDE_UNKNOWN = 0
CM_DEVICE_PANEL_SIDE_TOP = 1
CM_DEVICE_PANEL_SIDE_BOTTOM = 2
CM_DEVICE_PANEL_SIDE_LEFT = 3
CM_DEVICE_PANEL_SIDE_RIGHT = 4
CM_DEVICE_PANEL_SIDE_FRONT = 5
CM_DEVICE_PANEL_SIDE_BACK = 6
CM_DEVICE_PANEL_EDGE_UNKNOWN = 0
CM_DEVICE_PANEL_EDGE_TOP = 1
CM_DEVICE_PANEL_EDGE_BOTTOM = 2
CM_DEVICE_PANEL_EDGE_LEFT = 3
CM_DEVICE_PANEL_EDGE_RIGHT = 4
CM_DEVICE_PANEL_SHAPE_UNKNOWN = 0
CM_DEVICE_PANEL_SHAPE_RECTANGLE = 1
CM_DEVICE_PANEL_SHAPE_OVAL = 2
CM_DEVICE_PANEL_ORIENTATION_HORIZONTAL = 0
CM_DEVICE_PANEL_ORIENTATION_VERTICAL = 1
CM_DEVICE_PANEL_JOINT_TYPE_UNKNOWN = 0
CM_DEVICE_PANEL_JOINT_TYPE_PLANAR = 1
CM_DEVICE_PANEL_JOINT_TYPE_HINGE = 2
CM_DEVICE_PANEL_JOINT_TYPE_PIVOT = 3
CM_DEVICE_PANEL_JOINT_TYPE_SWIVEL = 4
GUID_DEVCLASS_1394 = '6bdd1fc1-810f-11d0-bec7-08002be2092f'
GUID_DEVCLASS_1394DEBUG = '66f250d6-7801-4a64-b139-eea80a450b24'
GUID_DEVCLASS_61883 = '7ebefbc0-3200-11d2-b4c2-00a0c9697d07'
GUID_DEVCLASS_ADAPTER = '4d36e964-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_APMSUPPORT = 'd45b1c18-c8fa-11d1-9f77-0000f805f530'
GUID_DEVCLASS_AVC = 'c06ff265-ae09-48f0-812c-16753d7cba83'
GUID_DEVCLASS_BATTERY = '72631e54-78a4-11d0-bcf7-00aa00b7b32a'
GUID_DEVCLASS_BIOMETRIC = '53d29ef7-377c-4d14-864b-eb3a85769359'
GUID_DEVCLASS_BLUETOOTH = 'e0cbf06c-cd8b-4647-bb8a-263b43f0f974'
GUID_DEVCLASS_CAMERA = 'ca3e7ab9-b4c3-4ae6-8251-579ef933890f'
GUID_DEVCLASS_CDROM = '4d36e965-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_COMPUTEACCELERATOR = 'f01a9d53-3ff6-48d2-9f97-c8a7004be10c'
GUID_DEVCLASS_COMPUTER = '4d36e966-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_DECODER = '6bdd1fc2-810f-11d0-bec7-08002be2092f'
GUID_DEVCLASS_DISKDRIVE = '4d36e967-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_DISPLAY = '4d36e968-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_DOT4 = '48721b56-6795-11d2-b1a8-0080c72e74a2'
GUID_DEVCLASS_DOT4PRINT = '49ce6ac8-6f86-11d2-b1e5-0080c72e74a2'
GUID_DEVCLASS_EHSTORAGESILO = '9da2b80f-f89f-4a49-a5c2-511b085b9e8a'
GUID_DEVCLASS_ENUM1394 = 'c459df55-db08-11d1-b009-00a0c9081ff6'
GUID_DEVCLASS_EXTENSION = 'e2f84ce7-8efa-411c-aa69-97454ca4cb57'
GUID_DEVCLASS_FDC = '4d36e969-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_FIRMWARE = 'f2e7dd72-6468-4e36-b6f1-6488f42c1b52'
GUID_DEVCLASS_FLOPPYDISK = '4d36e980-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_GPS = '6bdd1fc3-810f-11d0-bec7-08002be2092f'
GUID_DEVCLASS_HDC = '4d36e96a-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_HIDCLASS = '745a17a0-74d3-11d0-b6fe-00a0c90f57da'
GUID_DEVCLASS_HOLOGRAPHIC = 'd612553d-06b1-49ca-8938-e39ef80eb16f'
GUID_DEVCLASS_IMAGE = '6bdd1fc6-810f-11d0-bec7-08002be2092f'
GUID_DEVCLASS_INFINIBAND = '30ef7132-d858-4a0c-ac24-b9028a5cca3f'
GUID_DEVCLASS_INFRARED = '6bdd1fc5-810f-11d0-bec7-08002be2092f'
GUID_DEVCLASS_KEYBOARD = '4d36e96b-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_LEGACYDRIVER = '8ecc055d-047f-11d1-a537-0000f8753ed1'
GUID_DEVCLASS_MEDIA = '4d36e96c-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_MEDIUM_CHANGER = 'ce5939ae-ebde-11d0-b181-0000f8753ec4'
GUID_DEVCLASS_MEMORY = '5099944a-f6b9-4057-a056-8c550228544c'
GUID_DEVCLASS_MODEM = '4d36e96d-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_MONITOR = '4d36e96e-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_MOUSE = '4d36e96f-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_MTD = '4d36e970-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_MULTIFUNCTION = '4d36e971-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_MULTIPORTSERIAL = '50906cb8-ba12-11d1-bf5d-0000f805f530'
GUID_DEVCLASS_NET = '4d36e972-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_NETCLIENT = '4d36e973-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_NETDRIVER = '87ef9ad1-8f70-49ee-b215-ab1fcadcbe3c'
GUID_DEVCLASS_NETSERVICE = '4d36e974-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_NETTRANS = '4d36e975-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_NETUIO = '78912bc1-cb8e-4b28-a329-f322ebadbe0f'
GUID_DEVCLASS_NODRIVER = '4d36e976-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_PCMCIA = '4d36e977-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_PNPPRINTERS = '4658ee7e-f050-11d1-b6bd-00c04fa372a7'
GUID_DEVCLASS_PORTS = '4d36e978-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_PRINTER = '4d36e979-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_PRINTERUPGRADE = '4d36e97a-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_PRINTQUEUE = '1ed2bbf9-11f0-4084-b21f-ad83a8e6dcdc'
GUID_DEVCLASS_PROCESSOR = '50127dc3-0f36-415e-a6cc-4cb3be910b65'
GUID_DEVCLASS_SBP2 = 'd48179be-ec20-11d1-b6b8-00c04fa372a7'
GUID_DEVCLASS_SCMDISK = '53966cb1-4d46-4166-bf23-c522403cd495'
GUID_DEVCLASS_SCMVOLUME = '53ccb149-e543-4c84-b6e0-bce4f6b7e806'
GUID_DEVCLASS_SCSIADAPTER = '4d36e97b-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_SECURITYACCELERATOR = '268c95a1-edfe-11d3-95c3-0010dc4050a5'
GUID_DEVCLASS_SENSOR = '5175d334-c371-4806-b3ba-71fd53c9258d'
GUID_DEVCLASS_SIDESHOW = '997b5d8d-c442-4f2e-baf3-9c8e671e9e21'
GUID_DEVCLASS_SMARTCARDREADER = '50dd5230-ba8a-11d1-bf5d-0000f805f530'
GUID_DEVCLASS_SMRDISK = '53487c23-680f-4585-acc3-1f10d6777e82'
GUID_DEVCLASS_SMRVOLUME = '53b3cf03-8f5a-4788-91b6-d19ed9fcccbf'
GUID_DEVCLASS_SOFTWARECOMPONENT = '5c4c3332-344d-483c-8739-259e934c9cc8'
GUID_DEVCLASS_SOUND = '4d36e97c-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_SYSTEM = '4d36e97d-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_TAPEDRIVE = '6d807884-7d21-11cf-801c-08002be10318'
GUID_DEVCLASS_UNKNOWN = '4d36e97e-e325-11ce-bfc1-08002be10318'
GUID_DEVCLASS_UCM = 'e6f1aa1c-7f3b-4473-b2e8-c97d8ac71d53'
GUID_DEVCLASS_USB = '36fc9e60-c465-11cf-8056-444553540000'
GUID_DEVCLASS_VOLUME = '71a27cdd-812a-11d0-bec7-08002be2092f'
GUID_DEVCLASS_VOLUMESNAPSHOT = '533c5b84-ec70-11d2-9505-00c04f79deaf'
GUID_DEVCLASS_WCEUSBS = '25dbce51-6c8f-4a72-8a6d-b54c2b4fc835'
GUID_DEVCLASS_WPD = 'eec5ad98-8080-425f-922a-dabf3de3f69a'
GUID_DEVCLASS_FSFILTER_TOP = 'b369baf4-5568-4e82-a87e-a93eb16bca87'
GUID_DEVCLASS_FSFILTER_ACTIVITYMONITOR = 'b86dff51-a31e-4bac-b3cf-e8cfe75c9fc2'
GUID_DEVCLASS_FSFILTER_UNDELETE = 'fe8f1572-c67a-48c0-bbac-0b5c6d66cafb'
GUID_DEVCLASS_FSFILTER_ANTIVIRUS = 'b1d1a169-c54f-4379-81db-bee7d88d7454'
GUID_DEVCLASS_FSFILTER_REPLICATION = '48d3ebc4-4cf8-48ff-b869-9c68ad42eb9f'
GUID_DEVCLASS_FSFILTER_CONTINUOUSBACKUP = '71aa14f8-6fad-4622-ad77-92bb9d7e6947'
GUID_DEVCLASS_FSFILTER_CONTENTSCREENER = '3e3f0674-c83c-4558-bb26-9820e1eba5c5'
GUID_DEVCLASS_FSFILTER_QUOTAMANAGEMENT = '8503c911-a6c7-4919-8f79-5028f5866b0c'
GUID_DEVCLASS_FSFILTER_SYSTEMRECOVERY = '2db15374-706e-4131-a0c7-d7c78eb0289a'
GUID_DEVCLASS_FSFILTER_CFSMETADATASERVER = 'cdcf0939-b75b-4630-bf76-80f7ba655884'
GUID_DEVCLASS_FSFILTER_HSM = 'd546500a-2aeb-45f6-9482-f4b1799c3177'
GUID_DEVCLASS_FSFILTER_COMPRESSION = 'f3586baf-b5aa-49b5-8d6c-0569284c639f'
GUID_DEVCLASS_FSFILTER_ENCRYPTION = 'a0a701c0-a511-42ff-aa6c-06dc0395576f'
GUID_DEVCLASS_FSFILTER_VIRTUALIZATION = 'f75a86c0-10d8-4c3a-b233-ed60e4cdfaac'
GUID_DEVCLASS_FSFILTER_PHYSICALQUOTAMANAGEMENT = '6a0a8e78-bba6-4fc4-a709-1e33cd09d67e'
GUID_DEVCLASS_FSFILTER_OPENFILEBACKUP = 'f8ecafa6-66d1-41a5-899b-66585d7216b7'
GUID_DEVCLASS_FSFILTER_SECURITYENHANCER = 'd02bc3da-0c8e-4945-9bd5-f1883c226c8c'
GUID_DEVCLASS_FSFILTER_COPYPROTECTION = '89786ff1-9c12-402f-9c9e-17753c7f4375'
GUID_DEVCLASS_FSFILTER_BOTTOM = '37765ea0-5958-4fc9-b04b-2fdfef97e59e'
GUID_DEVCLASS_FSFILTER_SYSTEM = '5d1b9aaa-01e2-46af-849f-272b3f324c46'
GUID_DEVCLASS_FSFILTER_INFRASTRUCTURE = 'e55fa6f9-128c-4d04-abab-630c74b1453a'
LINE_LEN = 256
MAX_INF_STRING_LENGTH = 4096
MAX_INF_SECTION_NAME_LENGTH = 255
MAX_TITLE_LEN = 60
MAX_INSTRUCTION_LEN = 256
MAX_LABEL_LEN = 30
MAX_SERVICE_NAME_LEN = 256
MAX_SUBTITLE_LEN = 256
SP_MAX_MACHINENAME_LENGTH = 263
SP_ALTPLATFORM_FLAGS_VERSION_RANGE = 1
SP_ALTPLATFORM_FLAGS_SUITE_MASK = 2
INF_STYLE_CACHE_ENABLE = 16
INF_STYLE_CACHE_DISABLE = 32
INF_STYLE_CACHE_IGNORE = 64
DIRID_ABSOLUTE = -1
DIRID_ABSOLUTE_16BIT = 65535
DIRID_NULL = 0
DIRID_SRCPATH = 1
DIRID_WINDOWS = 10
DIRID_SYSTEM = 11
DIRID_DRIVERS = 12
DIRID_IOSUBSYS = 12
DIRID_DRIVER_STORE = 13
DIRID_INF = 17
DIRID_HELP = 18
DIRID_FONTS = 20
DIRID_VIEWERS = 21
DIRID_COLOR = 23
DIRID_APPS = 24
DIRID_SHARED = 25
DIRID_BOOT = 30
DIRID_SYSTEM16 = 50
DIRID_SPOOL = 51
DIRID_SPOOLDRIVERS = 52
DIRID_USERPROFILE = 53
DIRID_LOADER = 54
DIRID_PRINTPROCESSOR = 55
DIRID_DEFAULT = 11
DIRID_COMMON_STARTMENU = 16406
DIRID_COMMON_PROGRAMS = 16407
DIRID_COMMON_STARTUP = 16408
DIRID_COMMON_DESKTOPDIRECTORY = 16409
DIRID_COMMON_FAVORITES = 16415
DIRID_COMMON_APPDATA = 16419
DIRID_PROGRAM_FILES = 16422
DIRID_SYSTEM_X86 = 16425
DIRID_PROGRAM_FILES_X86 = 16426
DIRID_PROGRAM_FILES_COMMON = 16427
DIRID_PROGRAM_FILES_COMMONX86 = 16428
DIRID_COMMON_TEMPLATES = 16429
DIRID_COMMON_DOCUMENTS = 16430
DIRID_USER = 32768
SPFILENOTIFY_STARTQUEUE = 1
SPFILENOTIFY_ENDQUEUE = 2
SPFILENOTIFY_STARTSUBQUEUE = 3
SPFILENOTIFY_ENDSUBQUEUE = 4
SPFILENOTIFY_STARTDELETE = 5
SPFILENOTIFY_ENDDELETE = 6
SPFILENOTIFY_DELETEERROR = 7
SPFILENOTIFY_STARTRENAME = 8
SPFILENOTIFY_ENDRENAME = 9
SPFILENOTIFY_RENAMEERROR = 10
SPFILENOTIFY_STARTCOPY = 11
SPFILENOTIFY_ENDCOPY = 12
SPFILENOTIFY_COPYERROR = 13
SPFILENOTIFY_NEEDMEDIA = 14
SPFILENOTIFY_QUEUESCAN = 15
SPFILENOTIFY_CABINETINFO = 16
SPFILENOTIFY_FILEINCABINET = 17
SPFILENOTIFY_NEEDNEWCABINET = 18
SPFILENOTIFY_FILEEXTRACTED = 19
SPFILENOTIFY_FILEOPDELAYED = 20
SPFILENOTIFY_STARTBACKUP = 21
SPFILENOTIFY_BACKUPERROR = 22
SPFILENOTIFY_ENDBACKUP = 23
SPFILENOTIFY_QUEUESCAN_EX = 24
SPFILENOTIFY_STARTREGISTRATION = 25
SPFILENOTIFY_ENDREGISTRATION = 32
SPFILENOTIFY_QUEUESCAN_SIGNERINFO = 64
SPFILENOTIFY_LANGMISMATCH = 65536
SPFILENOTIFY_TARGETEXISTS = 131072
SPFILENOTIFY_TARGETNEWER = 262144
FILEOP_RENAME = 1
FILEOP_BACKUP = 3
FILEOP_ABORT = 0
FILEOP_DOIT = 1
FILEOP_SKIP = 2
FILEOP_RETRY = 1
FILEOP_NEWPATH = 4
COPYFLG_WARN_IF_SKIP = 1
COPYFLG_NOSKIP = 2
COPYFLG_NOVERSIONCHECK = 4
COPYFLG_FORCE_FILE_IN_USE = 8
COPYFLG_NO_OVERWRITE = 16
COPYFLG_NO_VERSION_DIALOG = 32
COPYFLG_OVERWRITE_OLDER_ONLY = 64
COPYFLG_PROTECTED_WINDOWS_DRIVER_FILE = 256
COPYFLG_REPLACEONLY = 1024
COPYFLG_NODECOMP = 2048
COPYFLG_REPLACE_BOOT_FILE = 4096
COPYFLG_NOPRUNE = 8192
COPYFLG_IN_USE_TRY_RENAME = 16384
DELFLG_IN_USE = 1
DELFLG_IN_USE1 = 65536
SPREG_SUCCESS = 0
SPREG_LOADLIBRARY = 1
SPREG_GETPROCADDR = 2
SPREG_REGSVR = 3
SPREG_DLLINSTALL = 4
SPREG_TIMEOUT = 5
SPREG_UNKNOWN = 4294967295
SPINT_ACTIVE = 1
SPINT_DEFAULT = 2
SPINT_REMOVED = 4
SPID_ACTIVE = 1
SPID_DEFAULT = 2
SPID_REMOVED = 4
DIF_SELECTDEVICE = 1
DIF_INSTALLDEVICE = 2
DIF_ASSIGNRESOURCES = 3
DIF_PROPERTIES = 4
DIF_REMOVE = 5
DIF_FIRSTTIMESETUP = 6
DIF_FOUNDDEVICE = 7
DIF_SELECTCLASSDRIVERS = 8
DIF_VALIDATECLASSDRIVERS = 9
DIF_INSTALLCLASSDRIVERS = 10
DIF_CALCDISKSPACE = 11
DIF_DESTROYPRIVATEDATA = 12
DIF_VALIDATEDRIVER = 13
DIF_DETECT = 15
DIF_INSTALLWIZARD = 16
DIF_DESTROYWIZARDDATA = 17
DIF_PROPERTYCHANGE = 18
DIF_ENABLECLASS = 19
DIF_DETECTVERIFY = 20
DIF_INSTALLDEVICEFILES = 21
DIF_UNREMOVE = 22
DIF_SELECTBESTCOMPATDRV = 23
DIF_ALLOW_INSTALL = 24
DIF_REGISTERDEVICE = 25
DIF_NEWDEVICEWIZARD_PRESELECT = 26
DIF_NEWDEVICEWIZARD_SELECT = 27
DIF_NEWDEVICEWIZARD_PREANALYZE = 28
DIF_NEWDEVICEWIZARD_POSTANALYZE = 29
DIF_NEWDEVICEWIZARD_FINISHINSTALL = 30
DIF_UNUSED1 = 31
DIF_INSTALLINTERFACES = 32
DIF_DETECTCANCEL = 33
DIF_REGISTER_COINSTALLERS = 34
DIF_ADDPROPERTYPAGE_ADVANCED = 35
DIF_ADDPROPERTYPAGE_BASIC = 36
DIF_RESERVED1 = 37
DIF_TROUBLESHOOTER = 38
DIF_POWERMESSAGEWAKE = 39
DIF_ADDREMOTEPROPERTYPAGE_ADVANCED = 40
DIF_UPDATEDRIVER_UI = 41
DIF_FINISHINSTALL_ACTION = 42
DIF_RESERVED2 = 48
DIF_MOVEDEVICE = 14
DI_SHOWOEM = 1
DI_SHOWCOMPAT = 2
DI_SHOWCLASS = 4
DI_SHOWALL = 7
DI_NOVCP = 8
DI_DIDCOMPAT = 16
DI_DIDCLASS = 32
DI_AUTOASSIGNRES = 64
DI_NEEDRESTART = 128
DI_NEEDREBOOT = 256
DI_NOBROWSE = 512
DI_MULTMFGS = 1024
DI_DISABLED = 2048
DI_GENERALPAGE_ADDED = 4096
DI_RESOURCEPAGE_ADDED = 8192
DI_PROPERTIES_CHANGE = 16384
DI_INF_IS_SORTED = 32768
DI_ENUMSINGLEINF = 65536
DI_DONOTCALLCONFIGMG = 131072
DI_INSTALLDISABLED = 262144
DI_COMPAT_FROM_CLASS = 524288
DI_CLASSINSTALLPARAMS = 1048576
DI_NODI_DEFAULTACTION = 2097152
DI_QUIETINSTALL = 8388608
DI_NOFILECOPY = 16777216
DI_FORCECOPY = 33554432
DI_DRIVERPAGE_ADDED = 67108864
DI_USECI_SELECTSTRINGS = 134217728
DI_OVERRIDE_INFFLAGS = 268435456
DI_PROPS_NOCHANGEUSAGE = 536870912
DI_NOSELECTICONS = 1073741824
DI_NOWRITE_IDS = -2147483648
DI_FLAGSEX_RESERVED2 = 1
DI_FLAGSEX_RESERVED3 = 2
DI_FLAGSEX_CI_FAILED = 4
DI_FLAGSEX_FINISHINSTALL_ACTION = 8
DI_FLAGSEX_DIDINFOLIST = 16
DI_FLAGSEX_DIDCOMPATINFO = 32
DI_FLAGSEX_FILTERCLASSES = 64
DI_FLAGSEX_SETFAILEDINSTALL = 128
DI_FLAGSEX_DEVICECHANGE = 256
DI_FLAGSEX_ALWAYSWRITEIDS = 512
DI_FLAGSEX_PROPCHANGE_PENDING = 1024
DI_FLAGSEX_ALLOWEXCLUDEDDRVS = 2048
DI_FLAGSEX_NOUIONQUERYREMOVE = 4096
DI_FLAGSEX_USECLASSFORCOMPAT = 8192
DI_FLAGSEX_RESERVED4 = 16384
DI_FLAGSEX_NO_DRVREG_MODIFY = 32768
DI_FLAGSEX_IN_SYSTEM_SETUP = 65536
DI_FLAGSEX_INET_DRIVER = 131072
DI_FLAGSEX_APPENDDRIVERLIST = 262144
DI_FLAGSEX_PREINSTALLBACKUP = 524288
DI_FLAGSEX_BACKUPONREPLACE = 1048576
DI_FLAGSEX_DRIVERLIST_FROM_URL = 2097152
DI_FLAGSEX_RESERVED1 = 4194304
DI_FLAGSEX_EXCLUDE_OLD_INET_DRIVERS = 8388608
DI_FLAGSEX_POWERPAGE_ADDED = 16777216
DI_FLAGSEX_FILTERSIMILARDRIVERS = 33554432
DI_FLAGSEX_INSTALLEDDRIVER = 67108864
DI_FLAGSEX_NO_CLASSLIST_NODE_MERGE = 134217728
DI_FLAGSEX_ALTPLATFORM_DRVSEARCH = 268435456
DI_FLAGSEX_RESTART_DEVICE_ONLY = 536870912
DI_FLAGSEX_RECURSIVESEARCH = 1073741824
DI_FLAGSEX_SEARCH_PUBLISHED_INFS = -2147483648
ENABLECLASS_QUERY = 0
ENABLECLASS_SUCCESS = 1
ENABLECLASS_FAILURE = 2
DICS_ENABLE = 1
DICS_DISABLE = 2
DICS_PROPCHANGE = 3
DICS_START = 4
DICS_STOP = 5
DICS_FLAG_GLOBAL = 1
DICS_FLAG_CONFIGSPECIFIC = 2
DICS_FLAG_CONFIGGENERAL = 4
DI_REMOVEDEVICE_GLOBAL = 1
DI_REMOVEDEVICE_CONFIGSPECIFIC = 2
DI_UNREMOVEDEVICE_CONFIGSPECIFIC = 2
MAX_INSTALLWIZARD_DYNAPAGES = 20
NDW_INSTALLFLAG_DIDFACTDEFS = 1
NDW_INSTALLFLAG_HARDWAREALLREADYIN = 2
NDW_INSTALLFLAG_NEEDRESTART = 128
NDW_INSTALLFLAG_NEEDREBOOT = 256
NDW_INSTALLFLAG_NEEDSHUTDOWN = 512
NDW_INSTALLFLAG_EXPRESSINTRO = 1024
NDW_INSTALLFLAG_SKIPISDEVINSTALLED = 2048
NDW_INSTALLFLAG_NODETECTEDDEVS = 4096
NDW_INSTALLFLAG_INSTALLSPECIFIC = 8192
NDW_INSTALLFLAG_SKIPCLASSLIST = 16384
NDW_INSTALLFLAG_CI_PICKED_OEM = 32768
NDW_INSTALLFLAG_PCMCIAMODE = 65536
NDW_INSTALLFLAG_PCMCIADEVICE = 131072
NDW_INSTALLFLAG_USERCANCEL = 262144
NDW_INSTALLFLAG_KNOWNCLASS = 524288
DYNAWIZ_FLAG_PAGESADDED = 1
DYNAWIZ_FLAG_ANALYZE_HANDLECONFLICT = 8
DYNAWIZ_FLAG_INSTALLDET_NEXT = 2
DYNAWIZ_FLAG_INSTALLDET_PREV = 4
MIN_IDD_DYNAWIZ_RESOURCE_ID = 10000
MAX_IDD_DYNAWIZ_RESOURCE_ID = 11000
IDD_DYNAWIZ_FIRSTPAGE = 10000
IDD_DYNAWIZ_SELECT_PREVPAGE = 10001
IDD_DYNAWIZ_SELECT_NEXTPAGE = 10002
IDD_DYNAWIZ_ANALYZE_PREVPAGE = 10003
IDD_DYNAWIZ_ANALYZE_NEXTPAGE = 10004
IDD_DYNAWIZ_SELECTDEV_PAGE = 10009
IDD_DYNAWIZ_ANALYZEDEV_PAGE = 10010
IDD_DYNAWIZ_INSTALLDETECTEDDEVS_PAGE = 10011
IDD_DYNAWIZ_SELECTCLASS_PAGE = 10012
IDD_DYNAWIZ_INSTALLDETECTED_PREVPAGE = 10006
IDD_DYNAWIZ_INSTALLDETECTED_NEXTPAGE = 10007
IDD_DYNAWIZ_INSTALLDETECTED_NODEVS = 10008
DNF_DUPDESC = 1
DNF_OLDDRIVER = 2
DNF_EXCLUDEFROMLIST = 4
DNF_NODRIVER = 8
DNF_LEGACYINF = 16
DNF_CLASS_DRIVER = 32
DNF_COMPATIBLE_DRIVER = 64
DNF_INET_DRIVER = 128
DNF_UNUSED1 = 256
DNF_UNUSED2 = 512
DNF_OLD_INET_DRIVER = 1024
DNF_BAD_DRIVER = 2048
DNF_DUPPROVIDER = 4096
DNF_INF_IS_SIGNED = 8192
DNF_OEM_F6_INF = 16384
DNF_DUPDRIVERVER = 32768
DNF_BASIC_DRIVER = 65536
DNF_AUTHENTICODE_SIGNED = 131072
DNF_INSTALLEDDRIVER = 262144
DNF_ALWAYSEXCLUDEFROMLIST = 524288
DNF_INBOX_DRIVER = 1048576
DNF_REQUESTADDITIONALSOFTWARE = 2097152
DNF_UNUSED_22 = 4194304
DNF_UNUSED_23 = 8388608
DNF_UNUSED_24 = 16777216
DNF_UNUSED_25 = 33554432
DNF_UNUSED_26 = 67108864
DNF_UNUSED_27 = 134217728
DNF_UNUSED_28 = 268435456
DNF_UNUSED_29 = 536870912
DNF_UNUSED_30 = 1073741824
DNF_UNUSED_31 = 2147483648
DRIVER_HARDWAREID_RANK = 4095
DRIVER_HARDWAREID_MASK = 2147487743
DRIVER_UNTRUSTED_RANK = 2147483648
DRIVER_W9X_SUSPECT_RANK = 3221225472
DRIVER_COMPATID_RANK = 16383
DRIVER_UNTRUSTED_HARDWAREID_RANK = 36863
DRIVER_UNTRUSTED_COMPATID_RANK = 49151
DRIVER_W9X_SUSPECT_HARDWAREID_RANK = 53247
DRIVER_W9X_SUSPECT_COMPATID_RANK = 65535
SPPSR_SELECT_DEVICE_RESOURCES = 1
SPPSR_ENUM_BASIC_DEVICE_PROPERTIES = 2
SPPSR_ENUM_ADV_DEVICE_PROPERTIES = 3
INFINFO_INF_SPEC_IS_HINF = 1
INFINFO_INF_NAME_IS_ABSOLUTE = 2
INFINFO_DEFAULT_SEARCH = 3
INFINFO_REVERSE_DEFAULT_SEARCH = 4
INFINFO_INF_PATH_LIST_SEARCH = 5
FILE_COMPRESSION_NONE = 0
FILE_COMPRESSION_WINLZA = 1
FILE_COMPRESSION_MSZIP = 2
FILE_COMPRESSION_NTCAB = 3
SRCLIST_TEMPORARY = 1
SRCLIST_NOBROWSE = 2
SRCLIST_SYSTEM = 16
SRCLIST_USER = 32
SRCLIST_SYSIFADMIN = 64
SRCLIST_SUBDIRS = 256
SRCLIST_APPEND = 512
SRCLIST_NOSTRIPPLATFORM = 1024
IDF_NOBROWSE = 1
IDF_NOSKIP = 2
IDF_NODETAILS = 4
IDF_NOCOMPRESSED = 8
IDF_CHECKFIRST = 256
IDF_NOBEEP = 512
IDF_NOFOREGROUND = 1024
IDF_WARNIFSKIP = 2048
IDF_NOREMOVABLEMEDIAPROMPT = 4096
IDF_USEDISKNAMEASPROMPT = 8192
IDF_OEMDISK = 2147483648
DPROMPT_SUCCESS = 0
DPROMPT_CANCEL = 1
DPROMPT_SKIPFILE = 2
DPROMPT_BUFFERTOOSMALL = 3
DPROMPT_OUTOFMEMORY = 4
SETDIRID_NOT_FULL_PATH = 1
SRCINFO_PATH = 1
SRCINFO_TAGFILE = 2
SRCINFO_DESCRIPTION = 3
SRCINFO_FLAGS = 4
SRCINFO_TAGFILE2 = 5
SRC_FLAGS_CABFILE = 16
SP_FLAG_CABINETCONTINUATION = 2048
SP_BACKUP_BACKUPPASS = 1
SP_BACKUP_DEMANDPASS = 2
SP_BACKUP_SPECIAL = 4
SP_BACKUP_BOOTFILE = 8
SPQ_SCAN_FILE_PRESENCE = 1
SPQ_SCAN_FILE_VALIDITY = 2
SPQ_SCAN_USE_CALLBACK = 4
SPQ_SCAN_USE_CALLBACKEX = 8
SPQ_SCAN_INFORM_USER = 16
SPQ_SCAN_PRUNE_COPY_QUEUE = 32
SPQ_SCAN_USE_CALLBACK_SIGNERINFO = 64
SPQ_SCAN_PRUNE_DELREN = 128
SPQ_SCAN_FILE_PRESENCE_WITHOUT_SOURCE = 256
SPQ_SCAN_FILE_COMPARISON = 512
SPQ_SCAN_ACTIVATE_DRP = 1024
SPQ_DELAYED_COPY = 1
SPQ_FLAG_BACKUP_AWARE = 1
SPQ_FLAG_ABORT_IF_UNSIGNED = 2
SPQ_FLAG_FILES_MODIFIED = 4
SPQ_FLAG_DO_SHUFFLEMOVE = 8
SPQ_FLAG_VALID = 15
SPOST_MAX = 3
SUOI_FORCEDELETE = 1
SUOI_INTERNAL1 = 2
SPDSL_IGNORE_DISK = 1
SPDSL_DISALLOW_NEGATIVE_ADJUST = 2
SPFILEQ_FILE_IN_USE = 1
SPFILEQ_REBOOT_RECOMMENDED = 2
SPFILEQ_REBOOT_IN_PROGRESS = 4
FLG_ADDREG_DELREG_BIT = 32768
FLG_ADDREG_BINVALUETYPE = 1
FLG_ADDREG_NOCLOBBER = 2
FLG_ADDREG_DELVAL = 4
FLG_ADDREG_APPEND = 8
FLG_ADDREG_KEYONLY = 16
FLG_ADDREG_OVERWRITEONLY = 32
FLG_ADDREG_64BITKEY = 4096
FLG_ADDREG_KEYONLY_COMMON = 8192
FLG_ADDREG_32BITKEY = 16384
FLG_ADDREG_TYPE_SZ = 0
FLG_ADDREG_TYPE_MULTI_SZ = 65536
FLG_ADDREG_TYPE_EXPAND_SZ = 131072
FLG_DELREG_VALUE = 0
FLG_DELREG_TYPE_SZ = 0
FLG_DELREG_TYPE_MULTI_SZ = 65536
FLG_DELREG_TYPE_EXPAND_SZ = 131072
FLG_DELREG_64BITKEY = 4096
FLG_DELREG_KEYONLY_COMMON = 8192
FLG_DELREG_32BITKEY = 16384
FLG_DELREG_OPERATION_MASK = 254
FLG_BITREG_CLEARBITS = 0
FLG_BITREG_SETBITS = 1
FLG_BITREG_64BITKEY = 4096
FLG_BITREG_32BITKEY = 16384
FLG_INI2REG_64BITKEY = 4096
FLG_INI2REG_32BITKEY = 16384
FLG_REGSVR_DLLREGISTER = 1
FLG_REGSVR_DLLINSTALL = 2
FLG_PROFITEM_CURRENTUSER = 1
FLG_PROFITEM_DELETE = 2
FLG_PROFITEM_GROUP = 4
FLG_PROFITEM_CSIDL = 8
FLG_ADDPROPERTY_NOCLOBBER = 1
FLG_ADDPROPERTY_OVERWRITEONLY = 2
FLG_ADDPROPERTY_APPEND = 4
FLG_ADDPROPERTY_OR = 8
FLG_ADDPROPERTY_AND = 16
FLG_DELPROPERTY_MULTI_SZ_DELSTRING = 1
SPINST_LOGCONFIG = 1
SPINST_INIFILES = 2
SPINST_REGISTRY = 4
SPINST_INI2REG = 8
SPINST_FILES = 16
SPINST_BITREG = 32
SPINST_REGSVR = 64
SPINST_UNREGSVR = 128
SPINST_PROFILEITEMS = 256
SPINST_COPYINF = 512
SPINST_PROPERTIES = 1024
SPINST_ALL = 2047
SPINST_SINGLESECTION = 65536
SPINST_LOGCONFIG_IS_FORCED = 131072
SPINST_LOGCONFIGS_ARE_OVERRIDES = 262144
SPINST_REGISTERCALLBACKAWARE = 524288
SPINST_DEVICEINSTALL = 1048576
SPSVCINST_TAGTOFRONT = 1
SPSVCINST_ASSOCSERVICE = 2
SPSVCINST_DELETEEVENTLOGENTRY = 4
SPSVCINST_NOCLOBBER_DISPLAYNAME = 8
SPSVCINST_NOCLOBBER_STARTTYPE = 16
SPSVCINST_NOCLOBBER_ERRORCONTROL = 32
SPSVCINST_NOCLOBBER_LOADORDERGROUP = 64
SPSVCINST_NOCLOBBER_DEPENDENCIES = 128
SPSVCINST_NOCLOBBER_DESCRIPTION = 256
SPSVCINST_STOPSERVICE = 512
SPSVCINST_CLOBBER_SECURITY = 1024
SPSVCINST_STARTSERVICE = 2048
SPSVCINST_NOCLOBBER_REQUIREDPRIVILEGES = 4096
SPSVCINST_NOCLOBBER_TRIGGERS = 8192
SPSVCINST_NOCLOBBER_SERVICESIDTYPE = 16384
SPSVCINST_NOCLOBBER_DELAYEDAUTOSTART = 32768
SPSVCINST_UNIQUE_NAME = 65536
SPFILELOG_SYSTEMLOG = 1
SPFILELOG_FORCENEW = 2
SPFILELOG_QUERYONLY = 4
SPFILELOG_OEMFILE = 1
LogSevInformation = 0
LogSevWarning = 1
LogSevError = 2
LogSevFatalError = 3
LogSevMaximum = 4
DICD_GENERATE_ID = 1
DICD_INHERIT_CLASSDRVS = 2
DIOD_INHERIT_CLASSDRVS = 2
DIOD_CANCEL_REMOVE = 4
DIODI_NO_ADD = 1
SPRDI_FIND_DUPS = 1
SPDIT_NODRIVER = 0
DIGCF_DEFAULT = 1
DIGCF_PRESENT = 2
DIGCF_ALLCLASSES = 4
DIGCF_PROFILE = 8
DIGCF_DEVICEINTERFACE = 16
DIGCF_INTERFACEDEVICE = 16
DIBCI_NOINSTALLCLASS = 1
DIBCI_NODISPLAYCLASS = 2
DIOCR_INSTALLER = 1
DIOCR_INTERFACE = 2
DIREG_DEV = 1
DIREG_DRV = 2
DIREG_BOTH = 4
DICLASSPROP_INSTALLER = 1
DICLASSPROP_INTERFACE = 2
SPDRP_DEVICEDESC = 0
SPDRP_HARDWAREID = 1
SPDRP_COMPATIBLEIDS = 2
SPDRP_UNUSED0 = 3
SPDRP_SERVICE = 4
SPDRP_UNUSED1 = 5
SPDRP_UNUSED2 = 6
SPDRP_CLASS = 7
SPDRP_CLASSGUID = 8
SPDRP_DRIVER = 9
SPDRP_CONFIGFLAGS = 10
SPDRP_MFG = 11
SPDRP_FRIENDLYNAME = 12
SPDRP_LOCATION_INFORMATION = 13
SPDRP_PHYSICAL_DEVICE_OBJECT_NAME = 14
SPDRP_CAPABILITIES = 15
SPDRP_UI_NUMBER = 16
SPDRP_UPPERFILTERS = 17
SPDRP_LOWERFILTERS = 18
SPDRP_BUSTYPEGUID = 19
SPDRP_LEGACYBUSTYPE = 20
SPDRP_BUSNUMBER = 21
SPDRP_ENUMERATOR_NAME = 22
SPDRP_SECURITY = 23
SPDRP_SECURITY_SDS = 24
SPDRP_DEVTYPE = 25
SPDRP_EXCLUSIVE = 26
SPDRP_CHARACTERISTICS = 27
SPDRP_ADDRESS = 28
SPDRP_UI_NUMBER_DESC_FORMAT = 29
SPDRP_DEVICE_POWER_DATA = 30
SPDRP_REMOVAL_POLICY = 31
SPDRP_REMOVAL_POLICY_HW_DEFAULT = 32
SPDRP_REMOVAL_POLICY_OVERRIDE = 33
SPDRP_INSTALL_STATE = 34
SPDRP_LOCATION_PATHS = 35
SPDRP_BASE_CONTAINERID = 36
SPDRP_MAXIMUM_PROPERTY = 37
SPCRP_UPPERFILTERS = 17
SPCRP_LOWERFILTERS = 18
SPCRP_SECURITY = 23
SPCRP_SECURITY_SDS = 24
SPCRP_DEVTYPE = 25
SPCRP_EXCLUSIVE = 26
SPCRP_CHARACTERISTICS = 27
SPCRP_MAXIMUM_PROPERTY = 28
DMI_MASK = 1
DMI_BKCOLOR = 2
DMI_USERECT = 4
DIGCDP_FLAG_BASIC = 1
DIGCDP_FLAG_ADVANCED = 2
DIGCDP_FLAG_REMOTE_BASIC = 3
DIGCDP_FLAG_REMOTE_ADVANCED = 4
IDI_RESOURCEFIRST = 159
IDI_RESOURCE = 159
IDI_RESOURCELAST = 161
IDI_RESOURCEOVERLAYFIRST = 161
IDI_RESOURCEOVERLAYLAST = 161
IDI_CONFLICT = 161
IDI_CLASSICON_OVERLAYFIRST = 500
IDI_CLASSICON_OVERLAYLAST = 502
IDI_PROBLEM_OVL = 500
IDI_DISABLED_OVL = 501
IDI_FORCED_OVL = 502
SPWPT_SELECTDEVICE = 1
SPWP_USE_DEVINFO_DATA = 1
SIGNERSCORE_UNKNOWN = 4278190080
SIGNERSCORE_W9X_SUSPECT = 3221225472
SIGNERSCORE_UNSIGNED = 2147483648
SIGNERSCORE_AUTHENTICODE = 251658240
SIGNERSCORE_WHQL = 218103813
SIGNERSCORE_UNCLASSIFIED = 218103812
SIGNERSCORE_INBOX = 218103811
SIGNERSCORE_LOGO_STANDARD = 218103810
SIGNERSCORE_LOGO_PREMIUM = 218103809
SIGNERSCORE_MASK = 4278190080
SIGNERSCORE_SIGNED_MASK = 4026531840
DICUSTOMDEVPROP_MERGE_MULTISZ = 1
SCWMI_CLOBBER_SECURITY = 1
MAX_DEVICE_ID_LEN = 200
MAX_DEVNODE_ID_LEN = 200
MAX_GUID_STRING_LEN = 39
MAX_CLASS_NAME_LEN = 32
MAX_PROFILE_LEN = 80
MAX_CONFIG_VALUE = 9999
MAX_INSTANCE_VALUE = 9999
MAX_MEM_REGISTERS = 9
MAX_IO_PORTS = 20
MAX_IRQS = 7
MAX_DMA_CHANNELS = 7
DWORD_MAX = 4294967295
CONFIGMG_VERSION = 1024
CM_CDMASK_DEVINST = 1
CM_CDMASK_RESDES = 2
CM_CDMASK_FLAGS = 4
CM_CDMASK_DESCRIPTION = 8
CM_CDMASK_VALID = 15
CM_CDFLAGS_DRIVER = 1
CM_CDFLAGS_ROOT_OWNED = 2
CM_CDFLAGS_RESERVED = 4
IO_ALIAS_10_BIT_DECODE = 4
IO_ALIAS_12_BIT_DECODE = 16
IO_ALIAS_16_BIT_DECODE = 0
IO_ALIAS_POSITIVE_DECODE = 255
IOA_Local = 255
CM_RESDES_WIDTH_DEFAULT = 0
CM_RESDES_WIDTH_32 = 1
CM_RESDES_WIDTH_64 = 2
CM_RESDES_WIDTH_BITS = 3
PCD_MAX_MEMORY = 2
PCD_MAX_IO = 2
CM_HWPI_NOT_DOCKABLE = 0
CM_HWPI_UNDOCKED = 1
CM_HWPI_DOCKED = 2
ResType_All = 0
ResType_None = 0
ResType_Mem = 1
ResType_IO = 2
ResType_DMA = 3
ResType_IRQ = 4
ResType_DoNotUse = 5
ResType_BusNumber = 6
ResType_MemLarge = 7
ResType_MAX = 7
ResType_Ignored_Bit = 32768
ResType_ClassSpecific = 65535
ResType_Reserved = 32768
ResType_DevicePrivate = 32769
ResType_PcCardConfig = 32770
ResType_MfCardConfig = 32771
ResType_Connection = 32772
CM_ADD_RANGE_ADDIFCONFLICT = 0
CM_ADD_RANGE_DONOTADDIFCONFLICT = 1
CM_ADD_RANGE_BITS = 1
BASIC_LOG_CONF = 0
FILTERED_LOG_CONF = 1
ALLOC_LOG_CONF = 2
BOOT_LOG_CONF = 3
FORCED_LOG_CONF = 4
OVERRIDE_LOG_CONF = 5
NUM_LOG_CONF = 6
LOG_CONF_BITS = 7
PRIORITY_EQUAL_FIRST = 8
PRIORITY_EQUAL_LAST = 0
PRIORITY_BIT = 8
RegDisposition_OpenAlways = 0
RegDisposition_OpenExisting = 1
RegDisposition_Bits = 1
CM_ADD_ID_HARDWARE = 0
CM_ADD_ID_COMPATIBLE = 1
CM_ADD_ID_BITS = 1
CM_CREATE_DEVNODE_NORMAL = 0
CM_CREATE_DEVNODE_NO_WAIT_INSTALL = 1
CM_CREATE_DEVNODE_PHANTOM = 2
CM_CREATE_DEVNODE_GENERATE_ID = 4
CM_CREATE_DEVNODE_DO_NOT_INSTALL = 8
CM_CREATE_DEVNODE_BITS = 15
CM_CREATE_DEVINST_NORMAL = 0
CM_CREATE_DEVINST_NO_WAIT_INSTALL = 1
CM_CREATE_DEVINST_PHANTOM = 2
CM_CREATE_DEVINST_GENERATE_ID = 4
CM_CREATE_DEVINST_DO_NOT_INSTALL = 8
CM_CREATE_DEVINST_BITS = 15
CM_DELETE_CLASS_ONLY = 0
CM_DELETE_CLASS_SUBKEYS = 1
CM_DELETE_CLASS_INTERFACE = 2
CM_DELETE_CLASS_BITS = 3
CM_ENUMERATE_CLASSES_INSTALLER = 0
CM_ENUMERATE_CLASSES_INTERFACE = 1
CM_ENUMERATE_CLASSES_BITS = 1
CM_DETECT_NEW_PROFILE = 1
CM_DETECT_CRASHED = 2
CM_DETECT_HWPROF_FIRST_BOOT = 4
CM_DETECT_RUN = 2147483648
CM_DETECT_BITS = 2147483655
CM_DISABLE_POLITE = 0
CM_DISABLE_ABSOLUTE = 1
CM_DISABLE_HARDWARE = 2
CM_DISABLE_UI_NOT_OK = 4
CM_DISABLE_PERSIST = 8
CM_DISABLE_BITS = 15
CM_GETIDLIST_FILTER_NONE = 0
CM_GETIDLIST_FILTER_ENUMERATOR = 1
CM_GETIDLIST_FILTER_SERVICE = 2
CM_GETIDLIST_FILTER_EJECTRELATIONS = 4
CM_GETIDLIST_FILTER_REMOVALRELATIONS = 8
CM_GETIDLIST_FILTER_POWERRELATIONS = 16
CM_GETIDLIST_FILTER_BUSRELATIONS = 32
CM_GETIDLIST_DONOTGENERATE = 268435520
CM_GETIDLIST_FILTER_BITS = 268435583
CM_GETIDLIST_FILTER_TRANSPORTRELATIONS = 128
CM_GETIDLIST_FILTER_PRESENT = 256
CM_GETIDLIST_FILTER_CLASS = 512
CM_GET_DEVICE_INTERFACE_LIST_PRESENT = 0
CM_GET_DEVICE_INTERFACE_LIST_ALL_DEVICES = 1
CM_GET_DEVICE_INTERFACE_LIST_BITS = 1
CM_DRP_DEVICEDESC = 1
CM_DRP_HARDWAREID = 2
CM_DRP_COMPATIBLEIDS = 3
CM_DRP_UNUSED0 = 4
CM_DRP_SERVICE = 5
CM_DRP_UNUSED1 = 6
CM_DRP_UNUSED2 = 7
CM_DRP_CLASS = 8
CM_DRP_CLASSGUID = 9
CM_DRP_DRIVER = 10
CM_DRP_CONFIGFLAGS = 11
CM_DRP_MFG = 12
CM_DRP_FRIENDLYNAME = 13
CM_DRP_LOCATION_INFORMATION = 14
CM_DRP_PHYSICAL_DEVICE_OBJECT_NAME = 15
CM_DRP_CAPABILITIES = 16
CM_DRP_UI_NUMBER = 17
CM_DRP_UPPERFILTERS = 18
CM_CRP_UPPERFILTERS = 18
CM_DRP_LOWERFILTERS = 19
CM_CRP_LOWERFILTERS = 19
CM_DRP_BUSTYPEGUID = 20
CM_DRP_LEGACYBUSTYPE = 21
CM_DRP_BUSNUMBER = 22
CM_DRP_ENUMERATOR_NAME = 23
CM_DRP_SECURITY = 24
CM_CRP_SECURITY = 24
CM_DRP_SECURITY_SDS = 25
CM_CRP_SECURITY_SDS = 25
CM_DRP_DEVTYPE = 26
CM_CRP_DEVTYPE = 26
CM_DRP_EXCLUSIVE = 27
CM_CRP_EXCLUSIVE = 27
CM_DRP_CHARACTERISTICS = 28
CM_CRP_CHARACTERISTICS = 28
CM_DRP_ADDRESS = 29
CM_DRP_UI_NUMBER_DESC_FORMAT = 30
CM_DRP_DEVICE_POWER_DATA = 31
CM_DRP_REMOVAL_POLICY = 32
CM_DRP_REMOVAL_POLICY_HW_DEFAULT = 33
CM_DRP_REMOVAL_POLICY_OVERRIDE = 34
CM_DRP_INSTALL_STATE = 35
CM_DRP_LOCATION_PATHS = 36
CM_DRP_BASE_CONTAINERID = 37
CM_DRP_MIN = 1
CM_CRP_MIN = 1
CM_DRP_MAX = 37
CM_CRP_MAX = 37
CM_DEVCAP_LOCKSUPPORTED = 1
CM_DEVCAP_EJECTSUPPORTED = 2
CM_DEVCAP_REMOVABLE = 4
CM_DEVCAP_DOCKDEVICE = 8
CM_DEVCAP_UNIQUEID = 16
CM_DEVCAP_SILENTINSTALL = 32
CM_DEVCAP_RAWDEVICEOK = 64
CM_DEVCAP_SURPRISEREMOVALOK = 128
CM_DEVCAP_HARDWAREDISABLED = 256
CM_DEVCAP_NONDYNAMIC = 512
CM_DEVCAP_SECUREDEVICE = 1024
CM_REMOVAL_POLICY_EXPECT_NO_REMOVAL = 1
CM_REMOVAL_POLICY_EXPECT_ORDERLY_REMOVAL = 2
CM_REMOVAL_POLICY_EXPECT_SURPRISE_REMOVAL = 3
CM_INSTALL_STATE_INSTALLED = 0
CM_INSTALL_STATE_NEEDS_REINSTALL = 1
CM_INSTALL_STATE_FAILED_INSTALL = 2
CM_INSTALL_STATE_FINISH_INSTALL = 3
CM_LOCATE_DEVNODE_NORMAL = 0
CM_LOCATE_DEVNODE_PHANTOM = 1
CM_LOCATE_DEVNODE_CANCELREMOVE = 2
CM_LOCATE_DEVNODE_NOVALIDATION = 4
CM_LOCATE_DEVNODE_BITS = 7
CM_LOCATE_DEVINST_NORMAL = 0
CM_LOCATE_DEVINST_PHANTOM = 1
CM_LOCATE_DEVINST_CANCELREMOVE = 2
CM_LOCATE_DEVINST_NOVALIDATION = 4
CM_LOCATE_DEVINST_BITS = 7
CM_OPEN_CLASS_KEY_INSTALLER = 0
CM_OPEN_CLASS_KEY_INTERFACE = 1
CM_OPEN_CLASS_KEY_BITS = 1
CM_REMOVE_UI_OK = 0
CM_REMOVE_UI_NOT_OK = 1
CM_REMOVE_NO_RESTART = 2
CM_REMOVE_DISABLE = 4
CM_REMOVE_BITS = 7
CM_QUERY_REMOVE_UI_OK = 0
CM_QUERY_REMOVE_UI_NOT_OK = 1
CM_REENUMERATE_NORMAL = 0
CM_REENUMERATE_SYNCHRONOUS = 1
CM_REENUMERATE_RETRY_INSTALLATION = 2
CM_REENUMERATE_ASYNCHRONOUS = 4
CM_REENUMERATE_BITS = 7
CM_REGISTER_DEVICE_DRIVER_STATIC = 0
CM_REGISTER_DEVICE_DRIVER_DISABLEABLE = 1
CM_REGISTER_DEVICE_DRIVER_REMOVABLE = 2
CM_REGISTER_DEVICE_DRIVER_BITS = 3
CM_REGISTRY_HARDWARE = 0
CM_REGISTRY_SOFTWARE = 1
CM_REGISTRY_USER = 256
CM_REGISTRY_CONFIG = 512
CM_REGISTRY_BITS = 769
CM_SET_DEVNODE_PROBLEM_NORMAL = 0
CM_SET_DEVNODE_PROBLEM_OVERRIDE = 1
CM_SET_DEVNODE_PROBLEM_BITS = 1
CM_SET_DEVINST_PROBLEM_NORMAL = 0
CM_SET_DEVINST_PROBLEM_OVERRIDE = 1
CM_SET_DEVINST_PROBLEM_BITS = 1
CM_SET_HW_PROF_FLAGS_UI_NOT_OK = 1
CM_SET_HW_PROF_FLAGS_BITS = 1
CM_SETUP_DEVNODE_READY = 0
CM_SETUP_DEVINST_READY = 0
CM_SETUP_DOWNLOAD = 1
CM_SETUP_WRITE_LOG_CONFS = 2
CM_SETUP_PROP_CHANGE = 3
CM_SETUP_DEVNODE_RESET = 4
CM_SETUP_DEVINST_RESET = 4
CM_SETUP_DEVNODE_CONFIG = 5
CM_SETUP_DEVINST_CONFIG = 5
CM_SETUP_DEVNODE_CONFIG_CLASS = 6
CM_SETUP_DEVINST_CONFIG_CLASS = 6
CM_SETUP_DEVNODE_CONFIG_EXTENSIONS = 7
CM_SETUP_DEVINST_CONFIG_EXTENSIONS = 7
CM_SETUP_DEVNODE_CONFIG_RESET = 8
CM_SETUP_DEVINST_CONFIG_RESET = 8
CM_SETUP_BITS = 15
CM_QUERY_ARBITRATOR_RAW = 0
CM_QUERY_ARBITRATOR_TRANSLATED = 1
CM_QUERY_ARBITRATOR_BITS = 1
CM_CUSTOMDEVPROP_MERGE_MULTISZ = 1
CM_CUSTOMDEVPROP_BITS = 1
CM_NAME_ATTRIBUTE_NAME_RETRIEVED_FROM_DEVICE = 1
CM_NAME_ATTRIBUTE_USER_ASSIGNED_NAME = 2
CM_CLASS_PROPERTY_INSTALLER = 0
CM_CLASS_PROPERTY_INTERFACE = 1
CM_CLASS_PROPERTY_BITS = 1
CM_NOTIFY_FILTER_FLAG_ALL_INTERFACE_CLASSES = 1
CM_NOTIFY_FILTER_FLAG_ALL_DEVICE_INSTANCES = 2
CM_GLOBAL_STATE_CAN_DO_UI = 1
CM_GLOBAL_STATE_ON_BIG_STACK = 2
CM_GLOBAL_STATE_SERVICES_AVAILABLE = 4
CM_GLOBAL_STATE_SHUTTING_DOWN = 8
CM_GLOBAL_STATE_DETECTION_PENDING = 16
CM_GLOBAL_STATE_REBOOT_REQUIRED = 32
INSTALLFLAG_FORCE = 1
INSTALLFLAG_READONLY = 2
INSTALLFLAG_NONINTERACTIVE = 4
INSTALLFLAG_BITS = 7
DIIDFLAG_SHOWSEARCHUI = 1
DIIDFLAG_NOFINISHINSTALLUI = 2
DIIDFLAG_INSTALLNULLDRIVER = 4
DIIDFLAG_INSTALLCOPYINFDRIVERS = 8
DIIDFLAG_BITS = 15
DIIRFLAG_INF_ALREADY_COPIED = 1
DIIRFLAG_FORCE_INF = 2
DIIRFLAG_HW_USING_THE_INF = 4
DIIRFLAG_HOTPATCH = 8
DIIRFLAG_NOBACKUP = 16
DIIRFLAG_PRE_CONFIGURE_INF = 32
DIIRFLAG_INSTALL_AS_SET = 64
DIURFLAG_NO_REMOVE_INF = 1
DIURFLAG_RESERVED = 2
ROLLBACK_FLAG_NO_UI = 1
ROLLBACK_BITS = 1
MAX_KEY_LEN = 100
MAX_PRIORITYSTR_LEN = 16
MAX_INF_FLAG = 20
MAX_INFSTR_STRKEY_LEN = 32
GUID_HWPROFILE_QUERY_CHANGE = 'cb3a4001-46f0-11d0-b08f-00609713053f'
GUID_HWPROFILE_CHANGE_CANCELLED = 'cb3a4002-46f0-11d0-b08f-00609713053f'
GUID_HWPROFILE_CHANGE_COMPLETE = 'cb3a4003-46f0-11d0-b08f-00609713053f'
GUID_DEVICE_INTERFACE_ARRIVAL = 'cb3a4004-46f0-11d0-b08f-00609713053f'
GUID_DEVICE_INTERFACE_REMOVAL = 'cb3a4005-46f0-11d0-b08f-00609713053f'
GUID_TARGET_DEVICE_QUERY_REMOVE = 'cb3a4006-46f0-11d0-b08f-00609713053f'
GUID_TARGET_DEVICE_REMOVE_CANCELLED = 'cb3a4007-46f0-11d0-b08f-00609713053f'
GUID_TARGET_DEVICE_REMOVE_COMPLETE = 'cb3a4008-46f0-11d0-b08f-00609713053f'
GUID_PNP_CUSTOM_NOTIFICATION = 'aca73f8e-8d23-11d1-ac7d-0000f87571d0'
GUID_PNP_POWER_NOTIFICATION = 'c2cf0660-eb7a-11d1-bd7f-0000f87571d0'
GUID_PNP_POWER_SETTING_CHANGE = '29c69b3e-c79a-43bf-bbde-a932fa1bea7e'
GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED = 'fcf528f6-a82f-47b1-ad3a-8050594cad28'
GUID_KERNEL_SOFT_RESTART_PREPARE = 'de373def-a85c-4f76-8cbf-f96bea8bd10f'
GUID_KERNEL_SOFT_RESTART_CANCEL = '31d737e7-8c0b-468a-956e-9f433ec358fb'
GUID_RECOVERY_PCI_PREPARE_SHUTDOWN = '90d889de-8704-44cf-8115-ed8528d2b2da'
GUID_RECOVERY_NVMED_PREPARE_SHUTDOWN = '4b9770ea-bde7-400b-a9b9-4f684f54cc2a'
GUID_KERNEL_SOFT_RESTART_FINALIZE = '20e91abd-350a-4d4f-8577-99c81507473a'
GUID_BUS_INTERFACE_STANDARD = '496b8280-6f25-11d0-beaf-08002be2092f'
GUID_PCI_BUS_INTERFACE_STANDARD = '496b8281-6f25-11d0-beaf-08002be2092f'
GUID_PCI_BUS_INTERFACE_STANDARD2 = 'de94e966-fdff-4c9c-9998-6747b150e74c'
GUID_ARBITER_INTERFACE_STANDARD = 'e644f185-8c0e-11d0-becf-08002be2092f'
GUID_TRANSLATOR_INTERFACE_STANDARD = '6c154a92-aacf-11d0-8d2a-00a0c906b244'
GUID_ACPI_INTERFACE_STANDARD = 'b091a08a-ba97-11d0-bd14-00aa00b7b32a'
GUID_INT_ROUTE_INTERFACE_STANDARD = '70941bf4-0073-11d1-a09e-00c04fc340b1'
GUID_PCMCIA_BUS_INTERFACE_STANDARD = '76173af0-c504-11d1-947f-00c04fb960ee'
GUID_ACPI_REGS_INTERFACE_STANDARD = '06141966-7245-6369-462e-4e656c736f6e'
GUID_LEGACY_DEVICE_DETECTION_STANDARD = '50feb0de-596a-11d2-a5b8-0000f81a4619'
GUID_PCI_DEVICE_PRESENT_INTERFACE = 'd1b82c26-bf49-45ef-b216-71cbd7889b57'
GUID_MF_ENUMERATION_INTERFACE = 'aeb895f0-5586-11d1-8d84-00a0c906b244'
GUID_REENUMERATE_SELF_INTERFACE_STANDARD = '2aeb0243-6a6e-486b-82fc-d815f6b97006'
GUID_AGP_TARGET_BUS_INTERFACE_STANDARD = 'b15cfce8-06d1-4d37-9d4c-bedde0c2a6ff'
GUID_ACPI_CMOS_INTERFACE_STANDARD = '3a8d0384-6505-40ca-bc39-56c15f8c5fed'
GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD = 'f14f609b-cbbd-4957-a674-bc00213f1c97'
GUID_ACPI_INTERFACE_STANDARD2 = 'e8695f63-1831-4870-a8cf-9c2f03f9dcb5'
GUID_PNP_LOCATION_INTERFACE = '70211b0e-0afb-47db-afc1-410bf842497a'
GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE = '146cd41c-dae3-4437-8aff-2af3f038099b'
GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE = '83a7734a-84c7-4161-9a98-6000ed0c4a33'
GUID_MSIX_TABLE_CONFIG_INTERFACE = '1a6a460b-194f-455d-b34b-b84c5b05712b'
GUID_D3COLD_SUPPORT_INTERFACE = 'b38290e5-3cd0-4f9d-9937-f5fe2b44d47a'
GUID_PROCESSOR_PCC_INTERFACE_STANDARD = '37b17e9a-c21c-4296-972d-11c4b32b28f0'
GUID_PCI_VIRTUALIZATION_INTERFACE = '64897b47-3a4a-4d75-bc74-89dd6c078293'
GUID_PCC_INTERFACE_STANDARD = '3ee8ba63-0f59-4a24-8a45-35808bdd1249'
GUID_PCC_INTERFACE_INTERNAL = '7cce62ce-c189-4814-a6a7-12112089e938'
GUID_THERMAL_COOLING_INTERFACE = 'ecbe47a8-c498-4bb9-bd70-e867e0940d22'
GUID_DMA_CACHE_COHERENCY_INTERFACE = 'b520f7fa-8a5a-4e40-a3f6-6be1e162d935'
GUID_DEVICE_RESET_INTERFACE_STANDARD = '649fdf26-3bc0-4813-ad24-7e0c1eda3fa3'
GUID_IOMMU_BUS_INTERFACE = '1efee0b2-d278-4ae4-bddc-1b34dd648043'
GUID_PCI_SECURITY_INTERFACE = '6e7f1451-199e-4acc-ba2d-762b4edf4674'
GUID_SCM_BUS_INTERFACE = '25944783-ce79-4232-815e-4a30014e8eb4'
GUID_SECURE_DRIVER_INTERFACE = '370f67e1-4ff5-4a94-9a35-06c5d9cc30e2'
GUID_SDEV_IDENTIFIER_INTERFACE = '49d67af8-916c-4ee8-9df1-889f17d21e91'
GUID_SCM_BUS_NVD_INTERFACE = '8de064ff-b630-42e4-88ea-6f24c8641175'
GUID_SCM_BUS_LD_INTERFACE = '9b89307d-d76b-4f48-b186-54041ae92e8d'
GUID_SCM_PHYSICAL_NVDIMM_INTERFACE = '0079c21b-917e-405e-a9ce-0732b5bbcebd'
GUID_PNP_EXTENDED_ADDRESS_INTERFACE = 'b8e992ec-a797-4dc4-8846-84d041707446'
GUID_D3COLD_AUX_POWER_AND_TIMING_INTERFACE = '0044d8aa-f664-4588-9ffc-2afeaf5950b9'
GUID_PCI_FPGA_CONTROL_INTERFACE = '2df3f7a8-b9b3-4063-9215-b5d14a0b266e'
GUID_PCI_PTM_CONTROL_INTERFACE = '348a5ebb-ba24-44b7-9916-285687735117'
GUID_BUS_RESOURCE_UPDATE_INTERFACE = '27d0102d-bfb2-4164-81dd-dbb82f968b48'
GUID_NPEM_CONTROL_INTERFACE = '4d95573d-b774-488a-b120-4f284a9eff51'
GUID_PCI_ATS_INTERFACE = '010a7fe8-96f5-4943-bedf-95e651b93412'
GUID_BUS_TYPE_INTERNAL = '1530ea73-086b-11d1-a09f-00c04fc340b1'
GUID_BUS_TYPE_PCMCIA = '09343630-af9f-11d0-92e9-0000f81e1b30'
GUID_BUS_TYPE_PCI = 'c8ebdfb0-b510-11d0-80e5-00a0c92542e3'
GUID_BUS_TYPE_ISAPNP = 'e676f854-d87d-11d0-92b2-00a0c9055fc5'
GUID_BUS_TYPE_EISA = 'ddc35509-f3fc-11d0-a537-0000f8753ed1'
GUID_BUS_TYPE_MCA = '1c75997a-dc33-11d0-92b2-00a0c9055fc5'
GUID_BUS_TYPE_SERENUM = '77114a87-8944-11d1-bd90-00a0c906be2d'
GUID_BUS_TYPE_USB = '9d7debbc-c85d-11d1-9eb4-006008c3a19a'
GUID_BUS_TYPE_LPTENUM = 'c4ca1000-2ddc-11d5-a17a-00c04f60524d'
GUID_BUS_TYPE_USBPRINT = '441ee000-4342-11d5-a184-00c04f60524d'
GUID_BUS_TYPE_DOT4PRT = '441ee001-4342-11d5-a184-00c04f60524d'
GUID_BUS_TYPE_1394 = 'f74e73eb-9ac5-45eb-be4d-772cc71ddfb3'
GUID_BUS_TYPE_HID = 'eeaf37d0-1963-47c4-aa48-72476db7cf49'
GUID_BUS_TYPE_AVC = 'c06ff265-ae09-48f0-812c-16753d7cba83'
GUID_BUS_TYPE_IRDA = '7ae17dc1-c944-44d6-881f-4c2e61053bc1'
GUID_BUS_TYPE_SD = 'e700cc04-4036-4e89-9579-89ebf45f00cd'
GUID_BUS_TYPE_ACPI = 'd7b46895-001a-4942-891f-a7d46610a843'
GUID_BUS_TYPE_SW_DEVICE = '06d10322-7de0-4cef-8e25-197d0e7442e2'
GUID_BUS_TYPE_SCM = '375a5912-804c-45aa-bdc2-fdd25a1d9512'
GUID_POWER_DEVICE_ENABLE = '827c0a6f-feb0-11d0-bd26-00aa00b7b32a'
GUID_POWER_DEVICE_TIMEOUTS = 'a45da735-feb0-11d0-bd26-00aa00b7b32a'
GUID_POWER_DEVICE_WAKE_ENABLE = 'a9546a82-feb0-11d0-bd26-00aa00b7b32a'
GUID_WUDF_DEVICE_HOST_PROBLEM = 'c43d25bd-9346-40ee-a2d2-d70c15f8b75b'
GUID_PARTITION_UNIT_INTERFACE_STANDARD = '52363f5b-d891-429b-8195-aec5fef6853c'
GUID_QUERY_CRASHDUMP_FUNCTIONS = '9cc6b8ff-32e2-4834-b1de-b32ef8880a4b'
SP_COPY_STYLE = UInt32
SP_COPY_DELETESOURCE = 1
SP_COPY_REPLACEONLY = 2
SP_COPY_NEWER_OR_SAME = 4
SP_COPY_NEWER_ONLY = 65536
SP_COPY_NOOVERWRITE = 8
SP_COPY_NODECOMP = 16
SP_COPY_LANGUAGEAWARE = 32
SP_COPY_SOURCE_ABSOLUTE = 64
SP_COPY_SOURCEPATH_ABSOLUTE = 128
SP_COPY_FORCE_IN_USE = 512
SP_COPY_IN_USE_NEEDS_REBOOT = 256
SP_COPY_NOSKIP = 1024
SP_COPY_FORCE_NOOVERWRITE = 4096
SP_COPY_FORCE_NEWER = 8192
SP_COPY_WARNIFSKIP = 16384
SP_COPY_NOBROWSE = 32768
SP_COPY_NEWER = 4
SP_COPY_RESERVED = 131072
SP_COPY_OEMINF_CATALOG_ONLY = 262144
SP_COPY_REPLACE_BOOT_FILE = 524288
SP_COPY_NOPRUNE = 1048576
SP_COPY_OEM_F6_INF = 2097152
SP_COPY_ALREADYDECOMP = 4194304
SP_COPY_WINDOWS_SIGNED = 16777216
SP_COPY_PNPLOCKED = 33554432
SP_COPY_IN_USE_TRY_RENAME = 67108864
SP_COPY_INBOX_INF = 134217728
SP_COPY_HARDLINK = 268435456
SETUP_FILE_OPERATION = UInt32
FILEOP_DELETE = 2
FILEOP_COPY = 0
OEM_SOURCE_MEDIA_TYPE = UInt32
SPOST_NONE = 0
SPOST_PATH = 1
SPOST_URL = 2
SETUP_DI_BUILD_DRIVER_DRIVER_TYPE = UInt32
SPDIT_CLASSDRIVER = 1
SPDIT_COMPATDRIVER = 2
SP_INF_STYLE = UInt32
INF_STYLE_NONE = 0
INF_STYLE_OLDNT = 1
INF_STYLE_WIN4 = 2
CONFIGRET = UInt32
CR_SUCCESS = 0
CR_DEFAULT = 1
CR_OUT_OF_MEMORY = 2
CR_INVALID_POINTER = 3
CR_INVALID_FLAG = 4
CR_INVALID_DEVNODE = 5
CR_INVALID_DEVINST = 5
CR_INVALID_RES_DES = 6
CR_INVALID_LOG_CONF = 7
CR_INVALID_ARBITRATOR = 8
CR_INVALID_NODELIST = 9
CR_DEVNODE_HAS_REQS = 10
CR_DEVINST_HAS_REQS = 10
CR_INVALID_RESOURCEID = 11
CR_DLVXD_NOT_FOUND = 12
CR_NO_SUCH_DEVNODE = 13
CR_NO_SUCH_DEVINST = 13
CR_NO_MORE_LOG_CONF = 14
CR_NO_MORE_RES_DES = 15
CR_ALREADY_SUCH_DEVNODE = 16
CR_ALREADY_SUCH_DEVINST = 16
CR_INVALID_RANGE_LIST = 17
CR_INVALID_RANGE = 18
CR_FAILURE = 19
CR_NO_SUCH_LOGICAL_DEV = 20
CR_CREATE_BLOCKED = 21
CR_NOT_SYSTEM_VM = 22
CR_REMOVE_VETOED = 23
CR_APM_VETOED = 24
CR_INVALID_LOAD_TYPE = 25
CR_BUFFER_SMALL = 26
CR_NO_ARBITRATOR = 27
CR_NO_REGISTRY_HANDLE = 28
CR_REGISTRY_ERROR = 29
CR_INVALID_DEVICE_ID = 30
CR_INVALID_DATA = 31
CR_INVALID_API = 32
CR_DEVLOADER_NOT_READY = 33
CR_NEED_RESTART = 34
CR_NO_MORE_HW_PROFILES = 35
CR_DEVICE_NOT_THERE = 36
CR_NO_SUCH_VALUE = 37
CR_WRONG_TYPE = 38
CR_INVALID_PRIORITY = 39
CR_NOT_DISABLEABLE = 40
CR_FREE_RESOURCES = 41
CR_QUERY_VETOED = 42
CR_CANT_SHARE_IRQ = 43
CR_NO_DEPENDENT = 44
CR_SAME_RESOURCES = 45
CR_NO_SUCH_REGISTRY_KEY = 46
CR_INVALID_MACHINENAME = 47
CR_REMOTE_COMM_FAILURE = 48
CR_MACHINE_UNAVAILABLE = 49
CR_NO_CM_SERVICES = 50
CR_ACCESS_DENIED = 51
CR_CALL_NOT_IMPLEMENTED = 52
CR_INVALID_PROPERTY = 53
CR_DEVICE_INTERFACE_ACTIVE = 54
CR_NO_SUCH_DEVICE_INTERFACE = 55
CR_INVALID_REFERENCE_STRING = 56
CR_INVALID_CONFLICT_LIST = 57
CR_INVALID_INDEX = 58
CR_INVALID_STRUCTURE_SIZE = 59
NUM_CR_RESULTS = 60
HCMNOTIFICATION = IntPtr
def _define_INFCONTEXT_head():
    class INFCONTEXT(Structure):
        pass
    return INFCONTEXT
def _define_INFCONTEXT():
    INFCONTEXT = win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head
    INFCONTEXT._fields_ = [
        ("Inf", c_void_p),
        ("CurrentInf", c_void_p),
        ("Section", UInt32),
        ("Line", UInt32),
    ]
    return INFCONTEXT
def _define_SP_INF_INFORMATION_head():
    class SP_INF_INFORMATION(Structure):
        pass
    return SP_INF_INFORMATION
def _define_SP_INF_INFORMATION():
    SP_INF_INFORMATION = win32more.Devices.DeviceAndDriverInstallation.SP_INF_INFORMATION_head
    SP_INF_INFORMATION._fields_ = [
        ("InfStyle", win32more.Devices.DeviceAndDriverInstallation.SP_INF_STYLE),
        ("InfCount", UInt32),
        ("VersionData", Byte * 0),
    ]
    return SP_INF_INFORMATION
def _define_SP_ALTPLATFORM_INFO_V3_head():
    class SP_ALTPLATFORM_INFO_V3(Structure):
        pass
    return SP_ALTPLATFORM_INFO_V3
def _define_SP_ALTPLATFORM_INFO_V3():
    SP_ALTPLATFORM_INFO_V3 = win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V3_head
    class SP_ALTPLATFORM_INFO_V3__Anonymous_e__Union(Union):
        pass
    SP_ALTPLATFORM_INFO_V3__Anonymous_e__Union._fields_ = [
        ("Reserved", UInt16),
        ("Flags", UInt16),
    ]
    SP_ALTPLATFORM_INFO_V3._anonymous_ = [
        'Anonymous',
    ]
    SP_ALTPLATFORM_INFO_V3._fields_ = [
        ("cbSize", UInt32),
        ("Platform", UInt32),
        ("MajorVersion", UInt32),
        ("MinorVersion", UInt32),
        ("ProcessorArchitecture", UInt16),
        ("Anonymous", SP_ALTPLATFORM_INFO_V3__Anonymous_e__Union),
        ("FirstValidatedMajorVersion", UInt32),
        ("FirstValidatedMinorVersion", UInt32),
        ("ProductType", Byte),
        ("SuiteMask", UInt16),
        ("BuildNumber", UInt32),
    ]
    return SP_ALTPLATFORM_INFO_V3
def _define_SP_ALTPLATFORM_INFO_V2_head():
    class SP_ALTPLATFORM_INFO_V2(Structure):
        pass
    return SP_ALTPLATFORM_INFO_V2
def _define_SP_ALTPLATFORM_INFO_V2():
    SP_ALTPLATFORM_INFO_V2 = win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head
    class SP_ALTPLATFORM_INFO_V2__Anonymous_e__Union(Union):
        pass
    SP_ALTPLATFORM_INFO_V2__Anonymous_e__Union._fields_ = [
        ("Reserved", UInt16),
        ("Flags", UInt16),
    ]
    SP_ALTPLATFORM_INFO_V2._anonymous_ = [
        'Anonymous',
    ]
    SP_ALTPLATFORM_INFO_V2._fields_ = [
        ("cbSize", UInt32),
        ("Platform", win32more.System.Diagnostics.Debug.VER_PLATFORM),
        ("MajorVersion", UInt32),
        ("MinorVersion", UInt32),
        ("ProcessorArchitecture", UInt16),
        ("Anonymous", SP_ALTPLATFORM_INFO_V2__Anonymous_e__Union),
        ("FirstValidatedMajorVersion", UInt32),
        ("FirstValidatedMinorVersion", UInt32),
    ]
    return SP_ALTPLATFORM_INFO_V2
def _define_SP_ALTPLATFORM_INFO_V1_head():
    class SP_ALTPLATFORM_INFO_V1(Structure):
        pass
    return SP_ALTPLATFORM_INFO_V1
def _define_SP_ALTPLATFORM_INFO_V1():
    SP_ALTPLATFORM_INFO_V1 = win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V1_head
    SP_ALTPLATFORM_INFO_V1._fields_ = [
        ("cbSize", UInt32),
        ("Platform", win32more.System.Diagnostics.Debug.VER_PLATFORM),
        ("MajorVersion", UInt32),
        ("MinorVersion", UInt32),
        ("ProcessorArchitecture", UInt16),
        ("Reserved", UInt16),
    ]
    return SP_ALTPLATFORM_INFO_V1
def _define_SP_ORIGINAL_FILE_INFO_A_head():
    class SP_ORIGINAL_FILE_INFO_A(Structure):
        pass
    return SP_ORIGINAL_FILE_INFO_A
def _define_SP_ORIGINAL_FILE_INFO_A():
    SP_ORIGINAL_FILE_INFO_A = win32more.Devices.DeviceAndDriverInstallation.SP_ORIGINAL_FILE_INFO_A_head
    SP_ORIGINAL_FILE_INFO_A._fields_ = [
        ("cbSize", UInt32),
        ("OriginalInfName", win32more.Foundation.CHAR * 260),
        ("OriginalCatalogName", win32more.Foundation.CHAR * 260),
    ]
    return SP_ORIGINAL_FILE_INFO_A
def _define_SP_ORIGINAL_FILE_INFO_W_head():
    class SP_ORIGINAL_FILE_INFO_W(Structure):
        pass
    return SP_ORIGINAL_FILE_INFO_W
def _define_SP_ORIGINAL_FILE_INFO_W():
    SP_ORIGINAL_FILE_INFO_W = win32more.Devices.DeviceAndDriverInstallation.SP_ORIGINAL_FILE_INFO_W_head
    SP_ORIGINAL_FILE_INFO_W._fields_ = [
        ("cbSize", UInt32),
        ("OriginalInfName", Char * 260),
        ("OriginalCatalogName", Char * 260),
    ]
    return SP_ORIGINAL_FILE_INFO_W
def _define_PSP_FILE_CALLBACK_A():
    return CFUNCTYPE(UInt32,c_void_p,UInt32,UIntPtr,UIntPtr, use_last_error=False)
def _define_PSP_FILE_CALLBACK_W():
    return CFUNCTYPE(UInt32,c_void_p,UInt32,UIntPtr,UIntPtr, use_last_error=False)
def _define_FILEPATHS_A_head():
    class FILEPATHS_A(Structure):
        pass
    return FILEPATHS_A
def _define_FILEPATHS_A():
    FILEPATHS_A = win32more.Devices.DeviceAndDriverInstallation.FILEPATHS_A_head
    FILEPATHS_A._fields_ = [
        ("Target", win32more.Foundation.PSTR),
        ("Source", win32more.Foundation.PSTR),
        ("Win32Error", UInt32),
        ("Flags", UInt32),
    ]
    return FILEPATHS_A
def _define_FILEPATHS_W_head():
    class FILEPATHS_W(Structure):
        pass
    return FILEPATHS_W
def _define_FILEPATHS_W():
    FILEPATHS_W = win32more.Devices.DeviceAndDriverInstallation.FILEPATHS_W_head
    FILEPATHS_W._fields_ = [
        ("Target", win32more.Foundation.PWSTR),
        ("Source", win32more.Foundation.PWSTR),
        ("Win32Error", UInt32),
        ("Flags", UInt32),
    ]
    return FILEPATHS_W
def _define_FILEPATHS_SIGNERINFO_A_head():
    class FILEPATHS_SIGNERINFO_A(Structure):
        pass
    return FILEPATHS_SIGNERINFO_A
def _define_FILEPATHS_SIGNERINFO_A():
    FILEPATHS_SIGNERINFO_A = win32more.Devices.DeviceAndDriverInstallation.FILEPATHS_SIGNERINFO_A_head
    FILEPATHS_SIGNERINFO_A._fields_ = [
        ("Target", win32more.Foundation.PSTR),
        ("Source", win32more.Foundation.PSTR),
        ("Win32Error", UInt32),
        ("Flags", UInt32),
        ("DigitalSigner", win32more.Foundation.PSTR),
        ("Version", win32more.Foundation.PSTR),
        ("CatalogFile", win32more.Foundation.PSTR),
    ]
    return FILEPATHS_SIGNERINFO_A
def _define_FILEPATHS_SIGNERINFO_W_head():
    class FILEPATHS_SIGNERINFO_W(Structure):
        pass
    return FILEPATHS_SIGNERINFO_W
def _define_FILEPATHS_SIGNERINFO_W():
    FILEPATHS_SIGNERINFO_W = win32more.Devices.DeviceAndDriverInstallation.FILEPATHS_SIGNERINFO_W_head
    FILEPATHS_SIGNERINFO_W._fields_ = [
        ("Target", win32more.Foundation.PWSTR),
        ("Source", win32more.Foundation.PWSTR),
        ("Win32Error", UInt32),
        ("Flags", UInt32),
        ("DigitalSigner", win32more.Foundation.PWSTR),
        ("Version", win32more.Foundation.PWSTR),
        ("CatalogFile", win32more.Foundation.PWSTR),
    ]
    return FILEPATHS_SIGNERINFO_W
def _define_SOURCE_MEDIA_A_head():
    class SOURCE_MEDIA_A(Structure):
        pass
    return SOURCE_MEDIA_A
def _define_SOURCE_MEDIA_A():
    SOURCE_MEDIA_A = win32more.Devices.DeviceAndDriverInstallation.SOURCE_MEDIA_A_head
    SOURCE_MEDIA_A._fields_ = [
        ("Reserved", win32more.Foundation.PSTR),
        ("Tagfile", win32more.Foundation.PSTR),
        ("Description", win32more.Foundation.PSTR),
        ("SourcePath", win32more.Foundation.PSTR),
        ("SourceFile", win32more.Foundation.PSTR),
        ("Flags", UInt32),
    ]
    return SOURCE_MEDIA_A
def _define_SOURCE_MEDIA_W_head():
    class SOURCE_MEDIA_W(Structure):
        pass
    return SOURCE_MEDIA_W
def _define_SOURCE_MEDIA_W():
    SOURCE_MEDIA_W = win32more.Devices.DeviceAndDriverInstallation.SOURCE_MEDIA_W_head
    SOURCE_MEDIA_W._fields_ = [
        ("Reserved", win32more.Foundation.PWSTR),
        ("Tagfile", win32more.Foundation.PWSTR),
        ("Description", win32more.Foundation.PWSTR),
        ("SourcePath", win32more.Foundation.PWSTR),
        ("SourceFile", win32more.Foundation.PWSTR),
        ("Flags", UInt32),
    ]
    return SOURCE_MEDIA_W
def _define_CABINET_INFO_A_head():
    class CABINET_INFO_A(Structure):
        pass
    return CABINET_INFO_A
def _define_CABINET_INFO_A():
    CABINET_INFO_A = win32more.Devices.DeviceAndDriverInstallation.CABINET_INFO_A_head
    CABINET_INFO_A._fields_ = [
        ("CabinetPath", win32more.Foundation.PSTR),
        ("CabinetFile", win32more.Foundation.PSTR),
        ("DiskName", win32more.Foundation.PSTR),
        ("SetId", UInt16),
        ("CabinetNumber", UInt16),
    ]
    return CABINET_INFO_A
def _define_CABINET_INFO_W_head():
    class CABINET_INFO_W(Structure):
        pass
    return CABINET_INFO_W
def _define_CABINET_INFO_W():
    CABINET_INFO_W = win32more.Devices.DeviceAndDriverInstallation.CABINET_INFO_W_head
    CABINET_INFO_W._fields_ = [
        ("CabinetPath", win32more.Foundation.PWSTR),
        ("CabinetFile", win32more.Foundation.PWSTR),
        ("DiskName", win32more.Foundation.PWSTR),
        ("SetId", UInt16),
        ("CabinetNumber", UInt16),
    ]
    return CABINET_INFO_W
def _define_FILE_IN_CABINET_INFO_A_head():
    class FILE_IN_CABINET_INFO_A(Structure):
        pass
    return FILE_IN_CABINET_INFO_A
def _define_FILE_IN_CABINET_INFO_A():
    FILE_IN_CABINET_INFO_A = win32more.Devices.DeviceAndDriverInstallation.FILE_IN_CABINET_INFO_A_head
    FILE_IN_CABINET_INFO_A._fields_ = [
        ("NameInCabinet", win32more.Foundation.PSTR),
        ("FileSize", UInt32),
        ("Win32Error", UInt32),
        ("DosDate", UInt16),
        ("DosTime", UInt16),
        ("DosAttribs", UInt16),
        ("FullTargetName", win32more.Foundation.CHAR * 260),
    ]
    return FILE_IN_CABINET_INFO_A
def _define_FILE_IN_CABINET_INFO_W_head():
    class FILE_IN_CABINET_INFO_W(Structure):
        pass
    return FILE_IN_CABINET_INFO_W
def _define_FILE_IN_CABINET_INFO_W():
    FILE_IN_CABINET_INFO_W = win32more.Devices.DeviceAndDriverInstallation.FILE_IN_CABINET_INFO_W_head
    FILE_IN_CABINET_INFO_W._fields_ = [
        ("NameInCabinet", win32more.Foundation.PWSTR),
        ("FileSize", UInt32),
        ("Win32Error", UInt32),
        ("DosDate", UInt16),
        ("DosTime", UInt16),
        ("DosAttribs", UInt16),
        ("FullTargetName", Char * 260),
    ]
    return FILE_IN_CABINET_INFO_W
def _define_SP_REGISTER_CONTROL_STATUSA_head():
    class SP_REGISTER_CONTROL_STATUSA(Structure):
        pass
    return SP_REGISTER_CONTROL_STATUSA
def _define_SP_REGISTER_CONTROL_STATUSA():
    SP_REGISTER_CONTROL_STATUSA = win32more.Devices.DeviceAndDriverInstallation.SP_REGISTER_CONTROL_STATUSA_head
    SP_REGISTER_CONTROL_STATUSA._fields_ = [
        ("cbSize", UInt32),
        ("FileName", win32more.Foundation.PSTR),
        ("Win32Error", UInt32),
        ("FailureCode", UInt32),
    ]
    return SP_REGISTER_CONTROL_STATUSA
def _define_SP_REGISTER_CONTROL_STATUSW_head():
    class SP_REGISTER_CONTROL_STATUSW(Structure):
        pass
    return SP_REGISTER_CONTROL_STATUSW
def _define_SP_REGISTER_CONTROL_STATUSW():
    SP_REGISTER_CONTROL_STATUSW = win32more.Devices.DeviceAndDriverInstallation.SP_REGISTER_CONTROL_STATUSW_head
    SP_REGISTER_CONTROL_STATUSW._fields_ = [
        ("cbSize", UInt32),
        ("FileName", win32more.Foundation.PWSTR),
        ("Win32Error", UInt32),
        ("FailureCode", UInt32),
    ]
    return SP_REGISTER_CONTROL_STATUSW
def _define_SP_FILE_COPY_PARAMS_A_head():
    class SP_FILE_COPY_PARAMS_A(Structure):
        pass
    return SP_FILE_COPY_PARAMS_A
def _define_SP_FILE_COPY_PARAMS_A():
    SP_FILE_COPY_PARAMS_A = win32more.Devices.DeviceAndDriverInstallation.SP_FILE_COPY_PARAMS_A_head
    SP_FILE_COPY_PARAMS_A._fields_ = [
        ("cbSize", UInt32),
        ("QueueHandle", c_void_p),
        ("SourceRootPath", win32more.Foundation.PSTR),
        ("SourcePath", win32more.Foundation.PSTR),
        ("SourceFilename", win32more.Foundation.PSTR),
        ("SourceDescription", win32more.Foundation.PSTR),
        ("SourceTagfile", win32more.Foundation.PSTR),
        ("TargetDirectory", win32more.Foundation.PSTR),
        ("TargetFilename", win32more.Foundation.PSTR),
        ("CopyStyle", UInt32),
        ("LayoutInf", c_void_p),
        ("SecurityDescriptor", win32more.Foundation.PSTR),
    ]
    return SP_FILE_COPY_PARAMS_A
def _define_SP_FILE_COPY_PARAMS_W_head():
    class SP_FILE_COPY_PARAMS_W(Structure):
        pass
    return SP_FILE_COPY_PARAMS_W
def _define_SP_FILE_COPY_PARAMS_W():
    SP_FILE_COPY_PARAMS_W = win32more.Devices.DeviceAndDriverInstallation.SP_FILE_COPY_PARAMS_W_head
    SP_FILE_COPY_PARAMS_W._fields_ = [
        ("cbSize", UInt32),
        ("QueueHandle", c_void_p),
        ("SourceRootPath", win32more.Foundation.PWSTR),
        ("SourcePath", win32more.Foundation.PWSTR),
        ("SourceFilename", win32more.Foundation.PWSTR),
        ("SourceDescription", win32more.Foundation.PWSTR),
        ("SourceTagfile", win32more.Foundation.PWSTR),
        ("TargetDirectory", win32more.Foundation.PWSTR),
        ("TargetFilename", win32more.Foundation.PWSTR),
        ("CopyStyle", UInt32),
        ("LayoutInf", c_void_p),
        ("SecurityDescriptor", win32more.Foundation.PWSTR),
    ]
    return SP_FILE_COPY_PARAMS_W
def _define_SP_DEVINFO_DATA_head():
    class SP_DEVINFO_DATA(Structure):
        pass
    return SP_DEVINFO_DATA
def _define_SP_DEVINFO_DATA():
    SP_DEVINFO_DATA = win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head
    SP_DEVINFO_DATA._fields_ = [
        ("cbSize", UInt32),
        ("ClassGuid", Guid),
        ("DevInst", UInt32),
        ("Reserved", UIntPtr),
    ]
    return SP_DEVINFO_DATA
def _define_SP_DEVICE_INTERFACE_DATA_head():
    class SP_DEVICE_INTERFACE_DATA(Structure):
        pass
    return SP_DEVICE_INTERFACE_DATA
def _define_SP_DEVICE_INTERFACE_DATA():
    SP_DEVICE_INTERFACE_DATA = win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head
    SP_DEVICE_INTERFACE_DATA._fields_ = [
        ("cbSize", UInt32),
        ("InterfaceClassGuid", Guid),
        ("Flags", UInt32),
        ("Reserved", UIntPtr),
    ]
    return SP_DEVICE_INTERFACE_DATA
def _define_SP_DEVICE_INTERFACE_DETAIL_DATA_A_head():
    class SP_DEVICE_INTERFACE_DETAIL_DATA_A(Structure):
        pass
    return SP_DEVICE_INTERFACE_DETAIL_DATA_A
def _define_SP_DEVICE_INTERFACE_DETAIL_DATA_A():
    SP_DEVICE_INTERFACE_DETAIL_DATA_A = win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DETAIL_DATA_A_head
    SP_DEVICE_INTERFACE_DETAIL_DATA_A._fields_ = [
        ("cbSize", UInt32),
        ("DevicePath", win32more.Foundation.CHAR * 0),
    ]
    return SP_DEVICE_INTERFACE_DETAIL_DATA_A
def _define_SP_DEVICE_INTERFACE_DETAIL_DATA_W_head():
    class SP_DEVICE_INTERFACE_DETAIL_DATA_W(Structure):
        pass
    return SP_DEVICE_INTERFACE_DETAIL_DATA_W
def _define_SP_DEVICE_INTERFACE_DETAIL_DATA_W():
    SP_DEVICE_INTERFACE_DETAIL_DATA_W = win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DETAIL_DATA_W_head
    SP_DEVICE_INTERFACE_DETAIL_DATA_W._fields_ = [
        ("cbSize", UInt32),
        ("DevicePath", Char * 0),
    ]
    return SP_DEVICE_INTERFACE_DETAIL_DATA_W
def _define_SP_DEVINFO_LIST_DETAIL_DATA_A_head():
    class SP_DEVINFO_LIST_DETAIL_DATA_A(Structure):
        pass
    return SP_DEVINFO_LIST_DETAIL_DATA_A
def _define_SP_DEVINFO_LIST_DETAIL_DATA_A():
    SP_DEVINFO_LIST_DETAIL_DATA_A = win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_LIST_DETAIL_DATA_A_head
    SP_DEVINFO_LIST_DETAIL_DATA_A._fields_ = [
        ("cbSize", UInt32),
        ("ClassGuid", Guid),
        ("RemoteMachineHandle", win32more.Foundation.HANDLE),
        ("RemoteMachineName", win32more.Foundation.CHAR * 263),
    ]
    return SP_DEVINFO_LIST_DETAIL_DATA_A
def _define_SP_DEVINFO_LIST_DETAIL_DATA_W_head():
    class SP_DEVINFO_LIST_DETAIL_DATA_W(Structure):
        pass
    return SP_DEVINFO_LIST_DETAIL_DATA_W
def _define_SP_DEVINFO_LIST_DETAIL_DATA_W():
    SP_DEVINFO_LIST_DETAIL_DATA_W = win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_LIST_DETAIL_DATA_W_head
    SP_DEVINFO_LIST_DETAIL_DATA_W._fields_ = [
        ("cbSize", UInt32),
        ("ClassGuid", Guid),
        ("RemoteMachineHandle", win32more.Foundation.HANDLE),
        ("RemoteMachineName", Char * 263),
    ]
    return SP_DEVINFO_LIST_DETAIL_DATA_W
def _define_SP_DEVINSTALL_PARAMS_A_head():
    class SP_DEVINSTALL_PARAMS_A(Structure):
        pass
    return SP_DEVINSTALL_PARAMS_A
def _define_SP_DEVINSTALL_PARAMS_A():
    SP_DEVINSTALL_PARAMS_A = win32more.Devices.DeviceAndDriverInstallation.SP_DEVINSTALL_PARAMS_A_head
    SP_DEVINSTALL_PARAMS_A._fields_ = [
        ("cbSize", UInt32),
        ("Flags", UInt32),
        ("FlagsEx", UInt32),
        ("hwndParent", win32more.Foundation.HWND),
        ("InstallMsgHandler", win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_A),
        ("InstallMsgHandlerContext", c_void_p),
        ("FileQueue", c_void_p),
        ("ClassInstallReserved", UIntPtr),
        ("Reserved", UInt32),
        ("DriverPath", win32more.Foundation.CHAR * 260),
    ]
    return SP_DEVINSTALL_PARAMS_A
def _define_SP_DEVINSTALL_PARAMS_W_head():
    class SP_DEVINSTALL_PARAMS_W(Structure):
        pass
    return SP_DEVINSTALL_PARAMS_W
def _define_SP_DEVINSTALL_PARAMS_W():
    SP_DEVINSTALL_PARAMS_W = win32more.Devices.DeviceAndDriverInstallation.SP_DEVINSTALL_PARAMS_W_head
    SP_DEVINSTALL_PARAMS_W._fields_ = [
        ("cbSize", UInt32),
        ("Flags", UInt32),
        ("FlagsEx", UInt32),
        ("hwndParent", win32more.Foundation.HWND),
        ("InstallMsgHandler", win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_A),
        ("InstallMsgHandlerContext", c_void_p),
        ("FileQueue", c_void_p),
        ("ClassInstallReserved", UIntPtr),
        ("Reserved", UInt32),
        ("DriverPath", Char * 260),
    ]
    return SP_DEVINSTALL_PARAMS_W
def _define_SP_CLASSINSTALL_HEADER_head():
    class SP_CLASSINSTALL_HEADER(Structure):
        pass
    return SP_CLASSINSTALL_HEADER
def _define_SP_CLASSINSTALL_HEADER():
    SP_CLASSINSTALL_HEADER = win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER_head
    SP_CLASSINSTALL_HEADER._fields_ = [
        ("cbSize", UInt32),
        ("InstallFunction", UInt32),
    ]
    return SP_CLASSINSTALL_HEADER
def _define_SP_ENABLECLASS_PARAMS_head():
    class SP_ENABLECLASS_PARAMS(Structure):
        pass
    return SP_ENABLECLASS_PARAMS
def _define_SP_ENABLECLASS_PARAMS():
    SP_ENABLECLASS_PARAMS = win32more.Devices.DeviceAndDriverInstallation.SP_ENABLECLASS_PARAMS_head
    SP_ENABLECLASS_PARAMS._fields_ = [
        ("ClassInstallHeader", win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ("ClassGuid", Guid),
        ("EnableMessage", UInt32),
    ]
    return SP_ENABLECLASS_PARAMS
def _define_SP_PROPCHANGE_PARAMS_head():
    class SP_PROPCHANGE_PARAMS(Structure):
        pass
    return SP_PROPCHANGE_PARAMS
def _define_SP_PROPCHANGE_PARAMS():
    SP_PROPCHANGE_PARAMS = win32more.Devices.DeviceAndDriverInstallation.SP_PROPCHANGE_PARAMS_head
    SP_PROPCHANGE_PARAMS._fields_ = [
        ("ClassInstallHeader", win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ("StateChange", UInt32),
        ("Scope", UInt32),
        ("HwProfile", UInt32),
    ]
    return SP_PROPCHANGE_PARAMS
def _define_SP_REMOVEDEVICE_PARAMS_head():
    class SP_REMOVEDEVICE_PARAMS(Structure):
        pass
    return SP_REMOVEDEVICE_PARAMS
def _define_SP_REMOVEDEVICE_PARAMS():
    SP_REMOVEDEVICE_PARAMS = win32more.Devices.DeviceAndDriverInstallation.SP_REMOVEDEVICE_PARAMS_head
    SP_REMOVEDEVICE_PARAMS._fields_ = [
        ("ClassInstallHeader", win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ("Scope", UInt32),
        ("HwProfile", UInt32),
    ]
    return SP_REMOVEDEVICE_PARAMS
def _define_SP_UNREMOVEDEVICE_PARAMS_head():
    class SP_UNREMOVEDEVICE_PARAMS(Structure):
        pass
    return SP_UNREMOVEDEVICE_PARAMS
def _define_SP_UNREMOVEDEVICE_PARAMS():
    SP_UNREMOVEDEVICE_PARAMS = win32more.Devices.DeviceAndDriverInstallation.SP_UNREMOVEDEVICE_PARAMS_head
    SP_UNREMOVEDEVICE_PARAMS._fields_ = [
        ("ClassInstallHeader", win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ("Scope", UInt32),
        ("HwProfile", UInt32),
    ]
    return SP_UNREMOVEDEVICE_PARAMS
def _define_SP_SELECTDEVICE_PARAMS_A_head():
    class SP_SELECTDEVICE_PARAMS_A(Structure):
        pass
    return SP_SELECTDEVICE_PARAMS_A
def _define_SP_SELECTDEVICE_PARAMS_A():
    SP_SELECTDEVICE_PARAMS_A = win32more.Devices.DeviceAndDriverInstallation.SP_SELECTDEVICE_PARAMS_A_head
    SP_SELECTDEVICE_PARAMS_A._fields_ = [
        ("ClassInstallHeader", win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ("Title", win32more.Foundation.CHAR * 60),
        ("Instructions", win32more.Foundation.CHAR * 256),
        ("ListLabel", win32more.Foundation.CHAR * 30),
        ("SubTitle", win32more.Foundation.CHAR * 256),
        ("Reserved", Byte * 2),
    ]
    return SP_SELECTDEVICE_PARAMS_A
def _define_SP_SELECTDEVICE_PARAMS_W_head():
    class SP_SELECTDEVICE_PARAMS_W(Structure):
        pass
    return SP_SELECTDEVICE_PARAMS_W
def _define_SP_SELECTDEVICE_PARAMS_W():
    SP_SELECTDEVICE_PARAMS_W = win32more.Devices.DeviceAndDriverInstallation.SP_SELECTDEVICE_PARAMS_W_head
    SP_SELECTDEVICE_PARAMS_W._fields_ = [
        ("ClassInstallHeader", win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ("Title", Char * 60),
        ("Instructions", Char * 256),
        ("ListLabel", Char * 30),
        ("SubTitle", Char * 256),
    ]
    return SP_SELECTDEVICE_PARAMS_W
def _define_PDETECT_PROGRESS_NOTIFY():
    return CFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32, use_last_error=False)
def _define_SP_DETECTDEVICE_PARAMS_head():
    class SP_DETECTDEVICE_PARAMS(Structure):
        pass
    return SP_DETECTDEVICE_PARAMS
def _define_SP_DETECTDEVICE_PARAMS():
    SP_DETECTDEVICE_PARAMS = win32more.Devices.DeviceAndDriverInstallation.SP_DETECTDEVICE_PARAMS_head
    SP_DETECTDEVICE_PARAMS._fields_ = [
        ("ClassInstallHeader", win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ("DetectProgressNotify", win32more.Devices.DeviceAndDriverInstallation.PDETECT_PROGRESS_NOTIFY),
        ("ProgressNotifyParam", c_void_p),
    ]
    return SP_DETECTDEVICE_PARAMS
def _define_SP_INSTALLWIZARD_DATA_head():
    class SP_INSTALLWIZARD_DATA(Structure):
        pass
    return SP_INSTALLWIZARD_DATA
def _define_SP_INSTALLWIZARD_DATA():
    SP_INSTALLWIZARD_DATA = win32more.Devices.DeviceAndDriverInstallation.SP_INSTALLWIZARD_DATA_head
    SP_INSTALLWIZARD_DATA._fields_ = [
        ("ClassInstallHeader", win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ("Flags", UInt32),
        ("DynamicPages", win32more.UI.Controls.HPROPSHEETPAGE * 20),
        ("NumDynamicPages", UInt32),
        ("DynamicPageFlags", UInt32),
        ("PrivateFlags", UInt32),
        ("PrivateData", win32more.Foundation.LPARAM),
        ("hwndWizardDlg", win32more.Foundation.HWND),
    ]
    return SP_INSTALLWIZARD_DATA
def _define_SP_NEWDEVICEWIZARD_DATA_head():
    class SP_NEWDEVICEWIZARD_DATA(Structure):
        pass
    return SP_NEWDEVICEWIZARD_DATA
def _define_SP_NEWDEVICEWIZARD_DATA():
    SP_NEWDEVICEWIZARD_DATA = win32more.Devices.DeviceAndDriverInstallation.SP_NEWDEVICEWIZARD_DATA_head
    SP_NEWDEVICEWIZARD_DATA._fields_ = [
        ("ClassInstallHeader", win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ("Flags", UInt32),
        ("DynamicPages", win32more.UI.Controls.HPROPSHEETPAGE * 20),
        ("NumDynamicPages", UInt32),
        ("hwndWizardDlg", win32more.Foundation.HWND),
    ]
    return SP_NEWDEVICEWIZARD_DATA
def _define_SP_TROUBLESHOOTER_PARAMS_A_head():
    class SP_TROUBLESHOOTER_PARAMS_A(Structure):
        pass
    return SP_TROUBLESHOOTER_PARAMS_A
def _define_SP_TROUBLESHOOTER_PARAMS_A():
    SP_TROUBLESHOOTER_PARAMS_A = win32more.Devices.DeviceAndDriverInstallation.SP_TROUBLESHOOTER_PARAMS_A_head
    SP_TROUBLESHOOTER_PARAMS_A._fields_ = [
        ("ClassInstallHeader", win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ("ChmFile", win32more.Foundation.CHAR * 260),
        ("HtmlTroubleShooter", win32more.Foundation.CHAR * 260),
    ]
    return SP_TROUBLESHOOTER_PARAMS_A
def _define_SP_TROUBLESHOOTER_PARAMS_W_head():
    class SP_TROUBLESHOOTER_PARAMS_W(Structure):
        pass
    return SP_TROUBLESHOOTER_PARAMS_W
def _define_SP_TROUBLESHOOTER_PARAMS_W():
    SP_TROUBLESHOOTER_PARAMS_W = win32more.Devices.DeviceAndDriverInstallation.SP_TROUBLESHOOTER_PARAMS_W_head
    SP_TROUBLESHOOTER_PARAMS_W._fields_ = [
        ("ClassInstallHeader", win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ("ChmFile", Char * 260),
        ("HtmlTroubleShooter", Char * 260),
    ]
    return SP_TROUBLESHOOTER_PARAMS_W
def _define_SP_POWERMESSAGEWAKE_PARAMS_A_head():
    class SP_POWERMESSAGEWAKE_PARAMS_A(Structure):
        pass
    return SP_POWERMESSAGEWAKE_PARAMS_A
def _define_SP_POWERMESSAGEWAKE_PARAMS_A():
    SP_POWERMESSAGEWAKE_PARAMS_A = win32more.Devices.DeviceAndDriverInstallation.SP_POWERMESSAGEWAKE_PARAMS_A_head
    SP_POWERMESSAGEWAKE_PARAMS_A._fields_ = [
        ("ClassInstallHeader", win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ("PowerMessageWake", win32more.Foundation.CHAR * 512),
    ]
    return SP_POWERMESSAGEWAKE_PARAMS_A
def _define_SP_POWERMESSAGEWAKE_PARAMS_W_head():
    class SP_POWERMESSAGEWAKE_PARAMS_W(Structure):
        pass
    return SP_POWERMESSAGEWAKE_PARAMS_W
def _define_SP_POWERMESSAGEWAKE_PARAMS_W():
    SP_POWERMESSAGEWAKE_PARAMS_W = win32more.Devices.DeviceAndDriverInstallation.SP_POWERMESSAGEWAKE_PARAMS_W_head
    SP_POWERMESSAGEWAKE_PARAMS_W._fields_ = [
        ("ClassInstallHeader", win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ("PowerMessageWake", Char * 512),
    ]
    return SP_POWERMESSAGEWAKE_PARAMS_W
def _define_SP_DRVINFO_DATA_V2_A_head():
    class SP_DRVINFO_DATA_V2_A(Structure):
        pass
    return SP_DRVINFO_DATA_V2_A
def _define_SP_DRVINFO_DATA_V2_A():
    SP_DRVINFO_DATA_V2_A = win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_A_head
    SP_DRVINFO_DATA_V2_A._fields_ = [
        ("cbSize", UInt32),
        ("DriverType", UInt32),
        ("Reserved", UIntPtr),
        ("Description", win32more.Foundation.CHAR * 256),
        ("MfgName", win32more.Foundation.CHAR * 256),
        ("ProviderName", win32more.Foundation.CHAR * 256),
        ("DriverDate", win32more.Foundation.FILETIME),
        ("DriverVersion", UInt64),
    ]
    return SP_DRVINFO_DATA_V2_A
def _define_SP_DRVINFO_DATA_V2_W_head():
    class SP_DRVINFO_DATA_V2_W(Structure):
        pass
    return SP_DRVINFO_DATA_V2_W
def _define_SP_DRVINFO_DATA_V2_W():
    SP_DRVINFO_DATA_V2_W = win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_W_head
    SP_DRVINFO_DATA_V2_W._fields_ = [
        ("cbSize", UInt32),
        ("DriverType", UInt32),
        ("Reserved", UIntPtr),
        ("Description", Char * 256),
        ("MfgName", Char * 256),
        ("ProviderName", Char * 256),
        ("DriverDate", win32more.Foundation.FILETIME),
        ("DriverVersion", UInt64),
    ]
    return SP_DRVINFO_DATA_V2_W
def _define_SP_DRVINFO_DATA_V1_A_head():
    class SP_DRVINFO_DATA_V1_A(Structure):
        pass
    return SP_DRVINFO_DATA_V1_A
def _define_SP_DRVINFO_DATA_V1_A():
    SP_DRVINFO_DATA_V1_A = win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V1_A_head
    SP_DRVINFO_DATA_V1_A._fields_ = [
        ("cbSize", UInt32),
        ("DriverType", UInt32),
        ("Reserved", UIntPtr),
        ("Description", win32more.Foundation.CHAR * 256),
        ("MfgName", win32more.Foundation.CHAR * 256),
        ("ProviderName", win32more.Foundation.CHAR * 256),
    ]
    return SP_DRVINFO_DATA_V1_A
def _define_SP_DRVINFO_DATA_V1_W_head():
    class SP_DRVINFO_DATA_V1_W(Structure):
        pass
    return SP_DRVINFO_DATA_V1_W
def _define_SP_DRVINFO_DATA_V1_W():
    SP_DRVINFO_DATA_V1_W = win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V1_W_head
    SP_DRVINFO_DATA_V1_W._fields_ = [
        ("cbSize", UInt32),
        ("DriverType", UInt32),
        ("Reserved", UIntPtr),
        ("Description", Char * 256),
        ("MfgName", Char * 256),
        ("ProviderName", Char * 256),
    ]
    return SP_DRVINFO_DATA_V1_W
def _define_SP_DRVINFO_DETAIL_DATA_A_head():
    class SP_DRVINFO_DETAIL_DATA_A(Structure):
        pass
    return SP_DRVINFO_DETAIL_DATA_A
def _define_SP_DRVINFO_DETAIL_DATA_A():
    SP_DRVINFO_DETAIL_DATA_A = win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DETAIL_DATA_A_head
    SP_DRVINFO_DETAIL_DATA_A._fields_ = [
        ("cbSize", UInt32),
        ("InfDate", win32more.Foundation.FILETIME),
        ("CompatIDsOffset", UInt32),
        ("CompatIDsLength", UInt32),
        ("Reserved", UIntPtr),
        ("SectionName", win32more.Foundation.CHAR * 256),
        ("InfFileName", win32more.Foundation.CHAR * 260),
        ("DrvDescription", win32more.Foundation.CHAR * 256),
        ("HardwareID", win32more.Foundation.CHAR * 0),
    ]
    return SP_DRVINFO_DETAIL_DATA_A
def _define_SP_DRVINFO_DETAIL_DATA_W_head():
    class SP_DRVINFO_DETAIL_DATA_W(Structure):
        pass
    return SP_DRVINFO_DETAIL_DATA_W
def _define_SP_DRVINFO_DETAIL_DATA_W():
    SP_DRVINFO_DETAIL_DATA_W = win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DETAIL_DATA_W_head
    SP_DRVINFO_DETAIL_DATA_W._fields_ = [
        ("cbSize", UInt32),
        ("InfDate", win32more.Foundation.FILETIME),
        ("CompatIDsOffset", UInt32),
        ("CompatIDsLength", UInt32),
        ("Reserved", UIntPtr),
        ("SectionName", Char * 256),
        ("InfFileName", Char * 260),
        ("DrvDescription", Char * 256),
        ("HardwareID", Char * 0),
    ]
    return SP_DRVINFO_DETAIL_DATA_W
def _define_SP_DRVINSTALL_PARAMS_head():
    class SP_DRVINSTALL_PARAMS(Structure):
        pass
    return SP_DRVINSTALL_PARAMS
def _define_SP_DRVINSTALL_PARAMS():
    SP_DRVINSTALL_PARAMS = win32more.Devices.DeviceAndDriverInstallation.SP_DRVINSTALL_PARAMS_head
    SP_DRVINSTALL_PARAMS._fields_ = [
        ("cbSize", UInt32),
        ("Rank", UInt32),
        ("Flags", UInt32),
        ("PrivateData", UIntPtr),
        ("Reserved", UInt32),
    ]
    return SP_DRVINSTALL_PARAMS
def _define_PSP_DETSIG_CMPPROC():
    return CFUNCTYPE(UInt32,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),c_void_p, use_last_error=False)
def _define_COINSTALLER_CONTEXT_DATA_head():
    class COINSTALLER_CONTEXT_DATA(Structure):
        pass
    return COINSTALLER_CONTEXT_DATA
def _define_COINSTALLER_CONTEXT_DATA():
    COINSTALLER_CONTEXT_DATA = win32more.Devices.DeviceAndDriverInstallation.COINSTALLER_CONTEXT_DATA_head
    COINSTALLER_CONTEXT_DATA._fields_ = [
        ("PostProcessing", win32more.Foundation.BOOL),
        ("InstallResult", UInt32),
        ("PrivateData", c_void_p),
    ]
    return COINSTALLER_CONTEXT_DATA
def _define_SP_CLASSIMAGELIST_DATA_head():
    class SP_CLASSIMAGELIST_DATA(Structure):
        pass
    return SP_CLASSIMAGELIST_DATA
def _define_SP_CLASSIMAGELIST_DATA():
    SP_CLASSIMAGELIST_DATA = win32more.Devices.DeviceAndDriverInstallation.SP_CLASSIMAGELIST_DATA_head
    SP_CLASSIMAGELIST_DATA._fields_ = [
        ("cbSize", UInt32),
        ("ImageList", win32more.UI.Controls.HIMAGELIST),
        ("Reserved", UIntPtr),
    ]
    return SP_CLASSIMAGELIST_DATA
def _define_SP_PROPSHEETPAGE_REQUEST_head():
    class SP_PROPSHEETPAGE_REQUEST(Structure):
        pass
    return SP_PROPSHEETPAGE_REQUEST
def _define_SP_PROPSHEETPAGE_REQUEST():
    SP_PROPSHEETPAGE_REQUEST = win32more.Devices.DeviceAndDriverInstallation.SP_PROPSHEETPAGE_REQUEST_head
    SP_PROPSHEETPAGE_REQUEST._fields_ = [
        ("cbSize", UInt32),
        ("PageRequested", UInt32),
        ("DeviceInfoSet", c_void_p),
        ("DeviceInfoData", POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head)),
    ]
    return SP_PROPSHEETPAGE_REQUEST
def _define_SP_BACKUP_QUEUE_PARAMS_V2_A_head():
    class SP_BACKUP_QUEUE_PARAMS_V2_A(Structure):
        pass
    return SP_BACKUP_QUEUE_PARAMS_V2_A
def _define_SP_BACKUP_QUEUE_PARAMS_V2_A():
    SP_BACKUP_QUEUE_PARAMS_V2_A = win32more.Devices.DeviceAndDriverInstallation.SP_BACKUP_QUEUE_PARAMS_V2_A_head
    SP_BACKUP_QUEUE_PARAMS_V2_A._fields_ = [
        ("cbSize", UInt32),
        ("FullInfPath", win32more.Foundation.CHAR * 260),
        ("FilenameOffset", Int32),
        ("ReinstallInstance", win32more.Foundation.CHAR * 260),
    ]
    return SP_BACKUP_QUEUE_PARAMS_V2_A
def _define_SP_BACKUP_QUEUE_PARAMS_V2_W_head():
    class SP_BACKUP_QUEUE_PARAMS_V2_W(Structure):
        pass
    return SP_BACKUP_QUEUE_PARAMS_V2_W
def _define_SP_BACKUP_QUEUE_PARAMS_V2_W():
    SP_BACKUP_QUEUE_PARAMS_V2_W = win32more.Devices.DeviceAndDriverInstallation.SP_BACKUP_QUEUE_PARAMS_V2_W_head
    SP_BACKUP_QUEUE_PARAMS_V2_W._fields_ = [
        ("cbSize", UInt32),
        ("FullInfPath", Char * 260),
        ("FilenameOffset", Int32),
        ("ReinstallInstance", Char * 260),
    ]
    return SP_BACKUP_QUEUE_PARAMS_V2_W
def _define_SP_BACKUP_QUEUE_PARAMS_V1_A_head():
    class SP_BACKUP_QUEUE_PARAMS_V1_A(Structure):
        pass
    return SP_BACKUP_QUEUE_PARAMS_V1_A
def _define_SP_BACKUP_QUEUE_PARAMS_V1_A():
    SP_BACKUP_QUEUE_PARAMS_V1_A = win32more.Devices.DeviceAndDriverInstallation.SP_BACKUP_QUEUE_PARAMS_V1_A_head
    SP_BACKUP_QUEUE_PARAMS_V1_A._fields_ = [
        ("cbSize", UInt32),
        ("FullInfPath", win32more.Foundation.CHAR * 260),
        ("FilenameOffset", Int32),
    ]
    return SP_BACKUP_QUEUE_PARAMS_V1_A
def _define_SP_BACKUP_QUEUE_PARAMS_V1_W_head():
    class SP_BACKUP_QUEUE_PARAMS_V1_W(Structure):
        pass
    return SP_BACKUP_QUEUE_PARAMS_V1_W
def _define_SP_BACKUP_QUEUE_PARAMS_V1_W():
    SP_BACKUP_QUEUE_PARAMS_V1_W = win32more.Devices.DeviceAndDriverInstallation.SP_BACKUP_QUEUE_PARAMS_V1_W_head
    SP_BACKUP_QUEUE_PARAMS_V1_W._fields_ = [
        ("cbSize", UInt32),
        ("FullInfPath", Char * 260),
        ("FilenameOffset", Int32),
    ]
    return SP_BACKUP_QUEUE_PARAMS_V1_W
SetupFileLogInfo = Int32
SetupFileLogInfo_SetupFileLogSourceFilename = 0
SetupFileLogInfo_SetupFileLogChecksum = 1
SetupFileLogInfo_SetupFileLogDiskTagfile = 2
SetupFileLogInfo_SetupFileLogDiskDescription = 3
SetupFileLogInfo_SetupFileLogOtherInfo = 4
SetupFileLogInfo_SetupFileLogMax = 5
def _define_SP_INF_SIGNER_INFO_V1_A_head():
    class SP_INF_SIGNER_INFO_V1_A(Structure):
        pass
    return SP_INF_SIGNER_INFO_V1_A
def _define_SP_INF_SIGNER_INFO_V1_A():
    SP_INF_SIGNER_INFO_V1_A = win32more.Devices.DeviceAndDriverInstallation.SP_INF_SIGNER_INFO_V1_A_head
    SP_INF_SIGNER_INFO_V1_A._fields_ = [
        ("cbSize", UInt32),
        ("CatalogFile", win32more.Foundation.CHAR * 260),
        ("DigitalSigner", win32more.Foundation.CHAR * 260),
        ("DigitalSignerVersion", win32more.Foundation.CHAR * 260),
    ]
    return SP_INF_SIGNER_INFO_V1_A
def _define_SP_INF_SIGNER_INFO_V1_W_head():
    class SP_INF_SIGNER_INFO_V1_W(Structure):
        pass
    return SP_INF_SIGNER_INFO_V1_W
def _define_SP_INF_SIGNER_INFO_V1_W():
    SP_INF_SIGNER_INFO_V1_W = win32more.Devices.DeviceAndDriverInstallation.SP_INF_SIGNER_INFO_V1_W_head
    SP_INF_SIGNER_INFO_V1_W._fields_ = [
        ("cbSize", UInt32),
        ("CatalogFile", Char * 260),
        ("DigitalSigner", Char * 260),
        ("DigitalSignerVersion", Char * 260),
    ]
    return SP_INF_SIGNER_INFO_V1_W
def _define_SP_INF_SIGNER_INFO_V2_A_head():
    class SP_INF_SIGNER_INFO_V2_A(Structure):
        pass
    return SP_INF_SIGNER_INFO_V2_A
def _define_SP_INF_SIGNER_INFO_V2_A():
    SP_INF_SIGNER_INFO_V2_A = win32more.Devices.DeviceAndDriverInstallation.SP_INF_SIGNER_INFO_V2_A_head
    SP_INF_SIGNER_INFO_V2_A._fields_ = [
        ("cbSize", UInt32),
        ("CatalogFile", win32more.Foundation.CHAR * 260),
        ("DigitalSigner", win32more.Foundation.CHAR * 260),
        ("DigitalSignerVersion", win32more.Foundation.CHAR * 260),
        ("SignerScore", UInt32),
    ]
    return SP_INF_SIGNER_INFO_V2_A
def _define_SP_INF_SIGNER_INFO_V2_W_head():
    class SP_INF_SIGNER_INFO_V2_W(Structure):
        pass
    return SP_INF_SIGNER_INFO_V2_W
def _define_SP_INF_SIGNER_INFO_V2_W():
    SP_INF_SIGNER_INFO_V2_W = win32more.Devices.DeviceAndDriverInstallation.SP_INF_SIGNER_INFO_V2_W_head
    SP_INF_SIGNER_INFO_V2_W._fields_ = [
        ("cbSize", UInt32),
        ("CatalogFile", Char * 260),
        ("DigitalSigner", Char * 260),
        ("DigitalSignerVersion", Char * 260),
        ("SignerScore", UInt32),
    ]
    return SP_INF_SIGNER_INFO_V2_W
PNP_VETO_TYPE = Int32
PNP_VetoTypeUnknown = 0
PNP_VetoLegacyDevice = 1
PNP_VetoPendingClose = 2
PNP_VetoWindowsApp = 3
PNP_VetoWindowsService = 4
PNP_VetoOutstandingOpen = 5
PNP_VetoDevice = 6
PNP_VetoDriver = 7
PNP_VetoIllegalDeviceRequest = 8
PNP_VetoInsufficientPower = 9
PNP_VetoNonDisableable = 10
PNP_VetoLegacyDriver = 11
PNP_VetoInsufficientRights = 12
PNP_VetoAlreadyRemoved = 13
def _define_CONFLICT_DETAILS_A_head():
    class CONFLICT_DETAILS_A(Structure):
        pass
    return CONFLICT_DETAILS_A
def _define_CONFLICT_DETAILS_A():
    CONFLICT_DETAILS_A = win32more.Devices.DeviceAndDriverInstallation.CONFLICT_DETAILS_A_head
    CONFLICT_DETAILS_A._fields_ = [
        ("CD_ulSize", UInt32),
        ("CD_ulMask", UInt32),
        ("CD_dnDevInst", UInt32),
        ("CD_rdResDes", UIntPtr),
        ("CD_ulFlags", UInt32),
        ("CD_szDescription", win32more.Foundation.CHAR * 260),
    ]
    return CONFLICT_DETAILS_A
def _define_CONFLICT_DETAILS_W_head():
    class CONFLICT_DETAILS_W(Structure):
        pass
    return CONFLICT_DETAILS_W
def _define_CONFLICT_DETAILS_W():
    CONFLICT_DETAILS_W = win32more.Devices.DeviceAndDriverInstallation.CONFLICT_DETAILS_W_head
    CONFLICT_DETAILS_W._fields_ = [
        ("CD_ulSize", UInt32),
        ("CD_ulMask", UInt32),
        ("CD_dnDevInst", UInt32),
        ("CD_rdResDes", UIntPtr),
        ("CD_ulFlags", UInt32),
        ("CD_szDescription", Char * 260),
    ]
    return CONFLICT_DETAILS_W
def _define_MEM_RANGE_head():
    class MEM_RANGE(Structure):
        pass
    return MEM_RANGE
def _define_MEM_RANGE():
    MEM_RANGE = win32more.Devices.DeviceAndDriverInstallation.MEM_RANGE_head
    MEM_RANGE._pack_ = 1
    MEM_RANGE._fields_ = [
        ("MR_Align", UInt64),
        ("MR_nBytes", UInt32),
        ("MR_Min", UInt64),
        ("MR_Max", UInt64),
        ("MR_Flags", UInt32),
        ("MR_Reserved", UInt32),
    ]
    return MEM_RANGE
def _define_MEM_DES_head():
    class MEM_DES(Structure):
        pass
    return MEM_DES
def _define_MEM_DES():
    MEM_DES = win32more.Devices.DeviceAndDriverInstallation.MEM_DES_head
    MEM_DES._pack_ = 1
    MEM_DES._fields_ = [
        ("MD_Count", UInt32),
        ("MD_Type", UInt32),
        ("MD_Alloc_Base", UInt64),
        ("MD_Alloc_End", UInt64),
        ("MD_Flags", UInt32),
        ("MD_Reserved", UInt32),
    ]
    return MEM_DES
def _define_MEM_RESOURCE_head():
    class MEM_RESOURCE(Structure):
        pass
    return MEM_RESOURCE
def _define_MEM_RESOURCE():
    MEM_RESOURCE = win32more.Devices.DeviceAndDriverInstallation.MEM_RESOURCE_head
    MEM_RESOURCE._fields_ = [
        ("MEM_Header", win32more.Devices.DeviceAndDriverInstallation.MEM_DES),
        ("MEM_Data", win32more.Devices.DeviceAndDriverInstallation.MEM_RANGE * 0),
    ]
    return MEM_RESOURCE
def _define_Mem_Large_Range_s_head():
    class Mem_Large_Range_s(Structure):
        pass
    return Mem_Large_Range_s
def _define_Mem_Large_Range_s():
    Mem_Large_Range_s = win32more.Devices.DeviceAndDriverInstallation.Mem_Large_Range_s_head
    Mem_Large_Range_s._pack_ = 1
    Mem_Large_Range_s._fields_ = [
        ("MLR_Align", UInt64),
        ("MLR_nBytes", UInt64),
        ("MLR_Min", UInt64),
        ("MLR_Max", UInt64),
        ("MLR_Flags", UInt32),
        ("MLR_Reserved", UInt32),
    ]
    return Mem_Large_Range_s
def _define_Mem_Large_Des_s_head():
    class Mem_Large_Des_s(Structure):
        pass
    return Mem_Large_Des_s
def _define_Mem_Large_Des_s():
    Mem_Large_Des_s = win32more.Devices.DeviceAndDriverInstallation.Mem_Large_Des_s_head
    Mem_Large_Des_s._pack_ = 1
    Mem_Large_Des_s._fields_ = [
        ("MLD_Count", UInt32),
        ("MLD_Type", UInt32),
        ("MLD_Alloc_Base", UInt64),
        ("MLD_Alloc_End", UInt64),
        ("MLD_Flags", UInt32),
        ("MLD_Reserved", UInt32),
    ]
    return Mem_Large_Des_s
def _define_Mem_Large_Resource_s_head():
    class Mem_Large_Resource_s(Structure):
        pass
    return Mem_Large_Resource_s
def _define_Mem_Large_Resource_s():
    Mem_Large_Resource_s = win32more.Devices.DeviceAndDriverInstallation.Mem_Large_Resource_s_head
    Mem_Large_Resource_s._fields_ = [
        ("MEM_LARGE_Header", win32more.Devices.DeviceAndDriverInstallation.Mem_Large_Des_s),
        ("MEM_LARGE_Data", win32more.Devices.DeviceAndDriverInstallation.Mem_Large_Range_s * 0),
    ]
    return Mem_Large_Resource_s
def _define_IO_RANGE_head():
    class IO_RANGE(Structure):
        pass
    return IO_RANGE
def _define_IO_RANGE():
    IO_RANGE = win32more.Devices.DeviceAndDriverInstallation.IO_RANGE_head
    IO_RANGE._pack_ = 1
    IO_RANGE._fields_ = [
        ("IOR_Align", UInt64),
        ("IOR_nPorts", UInt32),
        ("IOR_Min", UInt64),
        ("IOR_Max", UInt64),
        ("IOR_RangeFlags", UInt32),
        ("IOR_Alias", UInt64),
    ]
    return IO_RANGE
def _define_IO_DES_head():
    class IO_DES(Structure):
        pass
    return IO_DES
def _define_IO_DES():
    IO_DES = win32more.Devices.DeviceAndDriverInstallation.IO_DES_head
    IO_DES._pack_ = 1
    IO_DES._fields_ = [
        ("IOD_Count", UInt32),
        ("IOD_Type", UInt32),
        ("IOD_Alloc_Base", UInt64),
        ("IOD_Alloc_End", UInt64),
        ("IOD_DesFlags", UInt32),
    ]
    return IO_DES
def _define_IO_RESOURCE_head():
    class IO_RESOURCE(Structure):
        pass
    return IO_RESOURCE
def _define_IO_RESOURCE():
    IO_RESOURCE = win32more.Devices.DeviceAndDriverInstallation.IO_RESOURCE_head
    IO_RESOURCE._fields_ = [
        ("IO_Header", win32more.Devices.DeviceAndDriverInstallation.IO_DES),
        ("IO_Data", win32more.Devices.DeviceAndDriverInstallation.IO_RANGE * 0),
    ]
    return IO_RESOURCE
def _define_DMA_RANGE_head():
    class DMA_RANGE(Structure):
        pass
    return DMA_RANGE
def _define_DMA_RANGE():
    DMA_RANGE = win32more.Devices.DeviceAndDriverInstallation.DMA_RANGE_head
    DMA_RANGE._pack_ = 1
    DMA_RANGE._fields_ = [
        ("DR_Min", UInt32),
        ("DR_Max", UInt32),
        ("DR_Flags", UInt32),
    ]
    return DMA_RANGE
def _define_DMA_DES_head():
    class DMA_DES(Structure):
        pass
    return DMA_DES
def _define_DMA_DES():
    DMA_DES = win32more.Devices.DeviceAndDriverInstallation.DMA_DES_head
    DMA_DES._pack_ = 1
    DMA_DES._fields_ = [
        ("DD_Count", UInt32),
        ("DD_Type", UInt32),
        ("DD_Flags", UInt32),
        ("DD_Alloc_Chan", UInt32),
    ]
    return DMA_DES
def _define_DMA_RESOURCE_head():
    class DMA_RESOURCE(Structure):
        pass
    return DMA_RESOURCE
def _define_DMA_RESOURCE():
    DMA_RESOURCE = win32more.Devices.DeviceAndDriverInstallation.DMA_RESOURCE_head
    DMA_RESOURCE._fields_ = [
        ("DMA_Header", win32more.Devices.DeviceAndDriverInstallation.DMA_DES),
        ("DMA_Data", win32more.Devices.DeviceAndDriverInstallation.DMA_RANGE * 0),
    ]
    return DMA_RESOURCE
def _define_IRQ_RANGE_head():
    class IRQ_RANGE(Structure):
        pass
    return IRQ_RANGE
def _define_IRQ_RANGE():
    IRQ_RANGE = win32more.Devices.DeviceAndDriverInstallation.IRQ_RANGE_head
    IRQ_RANGE._pack_ = 1
    IRQ_RANGE._fields_ = [
        ("IRQR_Min", UInt32),
        ("IRQR_Max", UInt32),
        ("IRQR_Flags", UInt32),
    ]
    return IRQ_RANGE
def _define_IRQ_DES_32_head():
    class IRQ_DES_32(Structure):
        pass
    return IRQ_DES_32
def _define_IRQ_DES_32():
    IRQ_DES_32 = win32more.Devices.DeviceAndDriverInstallation.IRQ_DES_32_head
    IRQ_DES_32._pack_ = 1
    IRQ_DES_32._fields_ = [
        ("IRQD_Count", UInt32),
        ("IRQD_Type", UInt32),
        ("IRQD_Flags", UInt32),
        ("IRQD_Alloc_Num", UInt32),
        ("IRQD_Affinity", UInt32),
    ]
    return IRQ_DES_32
def _define_IRQ_DES_64_head():
    class IRQ_DES_64(Structure):
        pass
    return IRQ_DES_64
def _define_IRQ_DES_64():
    IRQ_DES_64 = win32more.Devices.DeviceAndDriverInstallation.IRQ_DES_64_head
    IRQ_DES_64._pack_ = 1
    IRQ_DES_64._fields_ = [
        ("IRQD_Count", UInt32),
        ("IRQD_Type", UInt32),
        ("IRQD_Flags", UInt32),
        ("IRQD_Alloc_Num", UInt32),
        ("IRQD_Affinity", UInt64),
    ]
    return IRQ_DES_64
def _define_IRQ_RESOURCE_32_head():
    class IRQ_RESOURCE_32(Structure):
        pass
    return IRQ_RESOURCE_32
def _define_IRQ_RESOURCE_32():
    IRQ_RESOURCE_32 = win32more.Devices.DeviceAndDriverInstallation.IRQ_RESOURCE_32_head
    IRQ_RESOURCE_32._fields_ = [
        ("IRQ_Header", win32more.Devices.DeviceAndDriverInstallation.IRQ_DES_32),
        ("IRQ_Data", win32more.Devices.DeviceAndDriverInstallation.IRQ_RANGE * 0),
    ]
    return IRQ_RESOURCE_32
def _define_IRQ_RESOURCE_64_head():
    class IRQ_RESOURCE_64(Structure):
        pass
    return IRQ_RESOURCE_64
def _define_IRQ_RESOURCE_64():
    IRQ_RESOURCE_64 = win32more.Devices.DeviceAndDriverInstallation.IRQ_RESOURCE_64_head
    IRQ_RESOURCE_64._fields_ = [
        ("IRQ_Header", win32more.Devices.DeviceAndDriverInstallation.IRQ_DES_64),
        ("IRQ_Data", win32more.Devices.DeviceAndDriverInstallation.IRQ_RANGE * 0),
    ]
    return IRQ_RESOURCE_64
def _define_DevPrivate_Range_s_head():
    class DevPrivate_Range_s(Structure):
        pass
    return DevPrivate_Range_s
def _define_DevPrivate_Range_s():
    DevPrivate_Range_s = win32more.Devices.DeviceAndDriverInstallation.DevPrivate_Range_s_head
    DevPrivate_Range_s._pack_ = 1
    DevPrivate_Range_s._fields_ = [
        ("PR_Data1", UInt32),
        ("PR_Data2", UInt32),
        ("PR_Data3", UInt32),
    ]
    return DevPrivate_Range_s
def _define_DevPrivate_Des_s_head():
    class DevPrivate_Des_s(Structure):
        pass
    return DevPrivate_Des_s
def _define_DevPrivate_Des_s():
    DevPrivate_Des_s = win32more.Devices.DeviceAndDriverInstallation.DevPrivate_Des_s_head
    DevPrivate_Des_s._pack_ = 1
    DevPrivate_Des_s._fields_ = [
        ("PD_Count", UInt32),
        ("PD_Type", UInt32),
        ("PD_Data1", UInt32),
        ("PD_Data2", UInt32),
        ("PD_Data3", UInt32),
        ("PD_Flags", UInt32),
    ]
    return DevPrivate_Des_s
def _define_DevPrivate_Resource_s_head():
    class DevPrivate_Resource_s(Structure):
        pass
    return DevPrivate_Resource_s
def _define_DevPrivate_Resource_s():
    DevPrivate_Resource_s = win32more.Devices.DeviceAndDriverInstallation.DevPrivate_Resource_s_head
    DevPrivate_Resource_s._fields_ = [
        ("PRV_Header", win32more.Devices.DeviceAndDriverInstallation.DevPrivate_Des_s),
        ("PRV_Data", win32more.Devices.DeviceAndDriverInstallation.DevPrivate_Range_s * 0),
    ]
    return DevPrivate_Resource_s
def _define_CS_DES_head():
    class CS_DES(Structure):
        pass
    return CS_DES
def _define_CS_DES():
    CS_DES = win32more.Devices.DeviceAndDriverInstallation.CS_DES_head
    CS_DES._pack_ = 1
    CS_DES._fields_ = [
        ("CSD_SignatureLength", UInt32),
        ("CSD_LegacyDataOffset", UInt32),
        ("CSD_LegacyDataSize", UInt32),
        ("CSD_Flags", UInt32),
        ("CSD_ClassGuid", Guid),
        ("CSD_Signature", Byte * 0),
    ]
    return CS_DES
def _define_CS_RESOURCE_head():
    class CS_RESOURCE(Structure):
        pass
    return CS_RESOURCE
def _define_CS_RESOURCE():
    CS_RESOURCE = win32more.Devices.DeviceAndDriverInstallation.CS_RESOURCE_head
    CS_RESOURCE._fields_ = [
        ("CS_Header", win32more.Devices.DeviceAndDriverInstallation.CS_DES),
    ]
    return CS_RESOURCE
def _define_PCCARD_DES_head():
    class PCCARD_DES(Structure):
        pass
    return PCCARD_DES
def _define_PCCARD_DES():
    PCCARD_DES = win32more.Devices.DeviceAndDriverInstallation.PCCARD_DES_head
    PCCARD_DES._pack_ = 1
    PCCARD_DES._fields_ = [
        ("PCD_Count", UInt32),
        ("PCD_Type", UInt32),
        ("PCD_Flags", UInt32),
        ("PCD_ConfigIndex", Byte),
        ("PCD_Reserved", Byte * 3),
        ("PCD_MemoryCardBase1", UInt32),
        ("PCD_MemoryCardBase2", UInt32),
        ("PCD_MemoryCardBase", UInt32 * 2),
        ("PCD_MemoryFlags", UInt16 * 2),
        ("PCD_IoFlags", Byte * 2),
    ]
    return PCCARD_DES
def _define_PCCARD_RESOURCE_head():
    class PCCARD_RESOURCE(Structure):
        pass
    return PCCARD_RESOURCE
def _define_PCCARD_RESOURCE():
    PCCARD_RESOURCE = win32more.Devices.DeviceAndDriverInstallation.PCCARD_RESOURCE_head
    PCCARD_RESOURCE._fields_ = [
        ("PcCard_Header", win32more.Devices.DeviceAndDriverInstallation.PCCARD_DES),
    ]
    return PCCARD_RESOURCE
def _define_MFCARD_DES_head():
    class MFCARD_DES(Structure):
        pass
    return MFCARD_DES
def _define_MFCARD_DES():
    MFCARD_DES = win32more.Devices.DeviceAndDriverInstallation.MFCARD_DES_head
    MFCARD_DES._pack_ = 1
    MFCARD_DES._fields_ = [
        ("PMF_Count", UInt32),
        ("PMF_Type", UInt32),
        ("PMF_Flags", UInt32),
        ("PMF_ConfigOptions", Byte),
        ("PMF_IoResourceIndex", Byte),
        ("PMF_Reserved", Byte * 2),
        ("PMF_ConfigRegisterBase", UInt32),
    ]
    return MFCARD_DES
def _define_MFCARD_RESOURCE_head():
    class MFCARD_RESOURCE(Structure):
        pass
    return MFCARD_RESOURCE
def _define_MFCARD_RESOURCE():
    MFCARD_RESOURCE = win32more.Devices.DeviceAndDriverInstallation.MFCARD_RESOURCE_head
    MFCARD_RESOURCE._fields_ = [
        ("MfCard_Header", win32more.Devices.DeviceAndDriverInstallation.MFCARD_DES),
    ]
    return MFCARD_RESOURCE
def _define_BUSNUMBER_RANGE_head():
    class BUSNUMBER_RANGE(Structure):
        pass
    return BUSNUMBER_RANGE
def _define_BUSNUMBER_RANGE():
    BUSNUMBER_RANGE = win32more.Devices.DeviceAndDriverInstallation.BUSNUMBER_RANGE_head
    BUSNUMBER_RANGE._pack_ = 1
    BUSNUMBER_RANGE._fields_ = [
        ("BUSR_Min", UInt32),
        ("BUSR_Max", UInt32),
        ("BUSR_nBusNumbers", UInt32),
        ("BUSR_Flags", UInt32),
    ]
    return BUSNUMBER_RANGE
def _define_BUSNUMBER_DES_head():
    class BUSNUMBER_DES(Structure):
        pass
    return BUSNUMBER_DES
def _define_BUSNUMBER_DES():
    BUSNUMBER_DES = win32more.Devices.DeviceAndDriverInstallation.BUSNUMBER_DES_head
    BUSNUMBER_DES._pack_ = 1
    BUSNUMBER_DES._fields_ = [
        ("BUSD_Count", UInt32),
        ("BUSD_Type", UInt32),
        ("BUSD_Flags", UInt32),
        ("BUSD_Alloc_Base", UInt32),
        ("BUSD_Alloc_End", UInt32),
    ]
    return BUSNUMBER_DES
def _define_BUSNUMBER_RESOURCE_head():
    class BUSNUMBER_RESOURCE(Structure):
        pass
    return BUSNUMBER_RESOURCE
def _define_BUSNUMBER_RESOURCE():
    BUSNUMBER_RESOURCE = win32more.Devices.DeviceAndDriverInstallation.BUSNUMBER_RESOURCE_head
    BUSNUMBER_RESOURCE._fields_ = [
        ("BusNumber_Header", win32more.Devices.DeviceAndDriverInstallation.BUSNUMBER_DES),
        ("BusNumber_Data", win32more.Devices.DeviceAndDriverInstallation.BUSNUMBER_RANGE * 0),
    ]
    return BUSNUMBER_RESOURCE
def _define_Connection_Des_s_head():
    class Connection_Des_s(Structure):
        pass
    return Connection_Des_s
def _define_Connection_Des_s():
    Connection_Des_s = win32more.Devices.DeviceAndDriverInstallation.Connection_Des_s_head
    Connection_Des_s._pack_ = 1
    Connection_Des_s._fields_ = [
        ("COND_Type", UInt32),
        ("COND_Flags", UInt32),
        ("COND_Class", Byte),
        ("COND_ClassType", Byte),
        ("COND_Reserved1", Byte),
        ("COND_Reserved2", Byte),
        ("COND_Id", win32more.Foundation.LARGE_INTEGER),
    ]
    return Connection_Des_s
def _define_Connection_Resource_s_head():
    class Connection_Resource_s(Structure):
        pass
    return Connection_Resource_s
def _define_Connection_Resource_s():
    Connection_Resource_s = win32more.Devices.DeviceAndDriverInstallation.Connection_Resource_s_head
    Connection_Resource_s._fields_ = [
        ("Connection_Header", win32more.Devices.DeviceAndDriverInstallation.Connection_Des_s),
    ]
    return Connection_Resource_s
def _define_HWProfileInfo_sA_head():
    class HWProfileInfo_sA(Structure):
        pass
    return HWProfileInfo_sA
def _define_HWProfileInfo_sA():
    HWProfileInfo_sA = win32more.Devices.DeviceAndDriverInstallation.HWProfileInfo_sA_head
    HWProfileInfo_sA._pack_ = 1
    HWProfileInfo_sA._fields_ = [
        ("HWPI_ulHWProfile", UInt32),
        ("HWPI_szFriendlyName", win32more.Foundation.CHAR * 80),
        ("HWPI_dwFlags", UInt32),
    ]
    return HWProfileInfo_sA
def _define_HWProfileInfo_sW_head():
    class HWProfileInfo_sW(Structure):
        pass
    return HWProfileInfo_sW
def _define_HWProfileInfo_sW():
    HWProfileInfo_sW = win32more.Devices.DeviceAndDriverInstallation.HWProfileInfo_sW_head
    HWProfileInfo_sW._pack_ = 1
    HWProfileInfo_sW._fields_ = [
        ("HWPI_ulHWProfile", UInt32),
        ("HWPI_szFriendlyName", Char * 80),
        ("HWPI_dwFlags", UInt32),
    ]
    return HWProfileInfo_sW
CM_NOTIFY_FILTER_TYPE = Int32
CM_NOTIFY_FILTER_TYPE_DEVICEINTERFACE = 0
CM_NOTIFY_FILTER_TYPE_DEVICEHANDLE = 1
CM_NOTIFY_FILTER_TYPE_DEVICEINSTANCE = 2
CM_NOTIFY_FILTER_TYPE_MAX = 3
def _define_CM_NOTIFY_FILTER_head():
    class CM_NOTIFY_FILTER(Structure):
        pass
    return CM_NOTIFY_FILTER
def _define_CM_NOTIFY_FILTER():
    CM_NOTIFY_FILTER = win32more.Devices.DeviceAndDriverInstallation.CM_NOTIFY_FILTER_head
    class CM_NOTIFY_FILTER__u_e__Union(Union):
        pass
    class CM_NOTIFY_FILTER__u_e__Union__DeviceHandle_e__Struct(Structure):
        pass
    CM_NOTIFY_FILTER__u_e__Union__DeviceHandle_e__Struct._fields_ = [
        ("hTarget", win32more.Foundation.HANDLE),
    ]
    class CM_NOTIFY_FILTER__u_e__Union__DeviceInstance_e__Struct(Structure):
        pass
    CM_NOTIFY_FILTER__u_e__Union__DeviceInstance_e__Struct._fields_ = [
        ("InstanceId", Char * 200),
    ]
    class CM_NOTIFY_FILTER__u_e__Union__DeviceInterface_e__Struct(Structure):
        pass
    CM_NOTIFY_FILTER__u_e__Union__DeviceInterface_e__Struct._fields_ = [
        ("ClassGuid", Guid),
    ]
    CM_NOTIFY_FILTER__u_e__Union._fields_ = [
        ("DeviceInterface", CM_NOTIFY_FILTER__u_e__Union__DeviceInterface_e__Struct),
        ("DeviceHandle", CM_NOTIFY_FILTER__u_e__Union__DeviceHandle_e__Struct),
        ("DeviceInstance", CM_NOTIFY_FILTER__u_e__Union__DeviceInstance_e__Struct),
    ]
    CM_NOTIFY_FILTER._fields_ = [
        ("cbSize", UInt32),
        ("Flags", UInt32),
        ("FilterType", win32more.Devices.DeviceAndDriverInstallation.CM_NOTIFY_FILTER_TYPE),
        ("Reserved", UInt32),
        ("u", CM_NOTIFY_FILTER__u_e__Union),
    ]
    return CM_NOTIFY_FILTER
CM_NOTIFY_ACTION = Int32
CM_NOTIFY_ACTION_DEVICEINTERFACEARRIVAL = 0
CM_NOTIFY_ACTION_DEVICEINTERFACEREMOVAL = 1
CM_NOTIFY_ACTION_DEVICEQUERYREMOVE = 2
CM_NOTIFY_ACTION_DEVICEQUERYREMOVEFAILED = 3
CM_NOTIFY_ACTION_DEVICEREMOVEPENDING = 4
CM_NOTIFY_ACTION_DEVICEREMOVECOMPLETE = 5
CM_NOTIFY_ACTION_DEVICECUSTOMEVENT = 6
CM_NOTIFY_ACTION_DEVICEINSTANCEENUMERATED = 7
CM_NOTIFY_ACTION_DEVICEINSTANCESTARTED = 8
CM_NOTIFY_ACTION_DEVICEINSTANCEREMOVED = 9
CM_NOTIFY_ACTION_MAX = 10
def _define_CM_NOTIFY_EVENT_DATA_head():
    class CM_NOTIFY_EVENT_DATA(Structure):
        pass
    return CM_NOTIFY_EVENT_DATA
def _define_CM_NOTIFY_EVENT_DATA():
    CM_NOTIFY_EVENT_DATA = win32more.Devices.DeviceAndDriverInstallation.CM_NOTIFY_EVENT_DATA_head
    class CM_NOTIFY_EVENT_DATA__u_e__Union(Union):
        pass
    class CM_NOTIFY_EVENT_DATA__u_e__Union__DeviceInstance_e__Struct(Structure):
        pass
    CM_NOTIFY_EVENT_DATA__u_e__Union__DeviceInstance_e__Struct._fields_ = [
        ("InstanceId", Char * 0),
    ]
    class CM_NOTIFY_EVENT_DATA__u_e__Union__DeviceInterface_e__Struct(Structure):
        pass
    CM_NOTIFY_EVENT_DATA__u_e__Union__DeviceInterface_e__Struct._fields_ = [
        ("ClassGuid", Guid),
        ("SymbolicLink", Char * 0),
    ]
    class CM_NOTIFY_EVENT_DATA__u_e__Union__DeviceHandle_e__Struct(Structure):
        pass
    CM_NOTIFY_EVENT_DATA__u_e__Union__DeviceHandle_e__Struct._fields_ = [
        ("EventGuid", Guid),
        ("NameOffset", Int32),
        ("DataSize", UInt32),
        ("Data", Byte * 0),
    ]
    CM_NOTIFY_EVENT_DATA__u_e__Union._fields_ = [
        ("DeviceInterface", CM_NOTIFY_EVENT_DATA__u_e__Union__DeviceInterface_e__Struct),
        ("DeviceHandle", CM_NOTIFY_EVENT_DATA__u_e__Union__DeviceHandle_e__Struct),
        ("DeviceInstance", CM_NOTIFY_EVENT_DATA__u_e__Union__DeviceInstance_e__Struct),
    ]
    CM_NOTIFY_EVENT_DATA._fields_ = [
        ("FilterType", win32more.Devices.DeviceAndDriverInstallation.CM_NOTIFY_FILTER_TYPE),
        ("Reserved", UInt32),
        ("u", CM_NOTIFY_EVENT_DATA__u_e__Union),
    ]
    return CM_NOTIFY_EVENT_DATA
def _define_PCM_NOTIFY_CALLBACK():
    return CFUNCTYPE(UInt32,win32more.Devices.DeviceAndDriverInstallation.HCMNOTIFICATION,c_void_p,win32more.Devices.DeviceAndDriverInstallation.CM_NOTIFY_ACTION,POINTER(win32more.Devices.DeviceAndDriverInstallation.CM_NOTIFY_EVENT_DATA_head),UInt32, use_last_error=False)
def _define_SetupGetInfInformationA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_INF_INFORMATION_head),UInt32,POINTER(UInt32), use_last_error=True)(("SetupGetInfInformationA", windll["SETUPAPI"]), ((1, 'InfSpec'),(1, 'SearchControl'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetInfInformationW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_INF_INFORMATION_head),UInt32,POINTER(UInt32), use_last_error=True)(("SetupGetInfInformationW", windll["SETUPAPI"]), ((1, 'InfSpec'),(1, 'SearchControl'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetInfInformation():
    return win32more.Devices.DeviceAndDriverInstallation.SetupGetInfInformationW
def _define_SetupQueryInfFileInformationA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_INF_INFORMATION_head),UInt32,POINTER(Byte),UInt32,POINTER(UInt32), use_last_error=True)(("SetupQueryInfFileInformationA", windll["SETUPAPI"]), ((1, 'InfInformation'),(1, 'InfIndex'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueryInfFileInformationW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_INF_INFORMATION_head),UInt32,POINTER(Char),UInt32,POINTER(UInt32), use_last_error=True)(("SetupQueryInfFileInformationW", windll["SETUPAPI"]), ((1, 'InfInformation'),(1, 'InfIndex'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueryInfFileInformation():
    return win32more.Devices.DeviceAndDriverInstallation.SetupQueryInfFileInformationW
def _define_SetupQueryInfOriginalFileInformationA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_INF_INFORMATION_head),UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ORIGINAL_FILE_INFO_A_head), use_last_error=True)(("SetupQueryInfOriginalFileInformationA", windll["SETUPAPI"]), ((1, 'InfInformation'),(1, 'InfIndex'),(1, 'AlternatePlatformInfo'),(1, 'OriginalFileInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueryInfOriginalFileInformationW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_INF_INFORMATION_head),UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ORIGINAL_FILE_INFO_W_head), use_last_error=True)(("SetupQueryInfOriginalFileInformationW", windll["SETUPAPI"]), ((1, 'InfInformation'),(1, 'InfIndex'),(1, 'AlternatePlatformInfo'),(1, 'OriginalFileInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueryInfOriginalFileInformation():
    return win32more.Devices.DeviceAndDriverInstallation.SetupQueryInfOriginalFileInformationW
def _define_SetupQueryInfVersionInformationA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_INF_INFORMATION_head),UInt32,win32more.Foundation.PSTR,POINTER(Byte),UInt32,POINTER(UInt32), use_last_error=True)(("SetupQueryInfVersionInformationA", windll["SETUPAPI"]), ((1, 'InfInformation'),(1, 'InfIndex'),(1, 'Key'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueryInfVersionInformationW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_INF_INFORMATION_head),UInt32,win32more.Foundation.PWSTR,POINTER(Char),UInt32,POINTER(UInt32), use_last_error=True)(("SetupQueryInfVersionInformationW", windll["SETUPAPI"]), ((1, 'InfInformation'),(1, 'InfIndex'),(1, 'Key'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueryInfVersionInformation():
    return win32more.Devices.DeviceAndDriverInstallation.SetupQueryInfVersionInformationW
def _define_SetupGetInfDriverStoreLocationA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head),win32more.Foundation.PSTR,POINTER(Byte),UInt32,POINTER(UInt32), use_last_error=True)(("SetupGetInfDriverStoreLocationA", windll["SETUPAPI"]), ((1, 'FileName'),(1, 'AlternatePlatformInfo'),(1, 'LocaleName'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetInfDriverStoreLocationW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head),win32more.Foundation.PWSTR,POINTER(Char),UInt32,POINTER(UInt32), use_last_error=True)(("SetupGetInfDriverStoreLocationW", windll["SETUPAPI"]), ((1, 'FileName'),(1, 'AlternatePlatformInfo'),(1, 'LocaleName'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetInfDriverStoreLocation():
    return win32more.Devices.DeviceAndDriverInstallation.SetupGetInfDriverStoreLocationW
def _define_SetupGetInfPublishedNameA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,POINTER(Byte),UInt32,POINTER(UInt32), use_last_error=True)(("SetupGetInfPublishedNameA", windll["SETUPAPI"]), ((1, 'DriverStoreLocation'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetInfPublishedNameW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,POINTER(Char),UInt32,POINTER(UInt32), use_last_error=True)(("SetupGetInfPublishedNameW", windll["SETUPAPI"]), ((1, 'DriverStoreLocation'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetInfPublishedName():
    return win32more.Devices.DeviceAndDriverInstallation.SetupGetInfPublishedNameW
def _define_SetupGetInfFileListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,UInt32,POINTER(Byte),UInt32,POINTER(UInt32), use_last_error=True)(("SetupGetInfFileListA", windll["SETUPAPI"]), ((1, 'DirectoryPath'),(1, 'InfStyle'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetInfFileListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,UInt32,POINTER(Char),UInt32,POINTER(UInt32), use_last_error=True)(("SetupGetInfFileListW", windll["SETUPAPI"]), ((1, 'DirectoryPath'),(1, 'InfStyle'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetInfFileList():
    return win32more.Devices.DeviceAndDriverInstallation.SetupGetInfFileListW
def _define_SetupOpenInfFileW():
    try:
        return WINFUNCTYPE(c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32), use_last_error=True)(("SetupOpenInfFileW", windll["SETUPAPI"]), ((1, 'FileName'),(1, 'InfClass'),(1, 'InfStyle'),(1, 'ErrorLine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupOpenInfFile():
    return win32more.Devices.DeviceAndDriverInstallation.SetupOpenInfFileW
def _define_SetupOpenInfFileA():
    try:
        return WINFUNCTYPE(c_void_p,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,POINTER(UInt32), use_last_error=True)(("SetupOpenInfFileA", windll["SETUPAPI"]), ((1, 'FileName'),(1, 'InfClass'),(1, 'InfStyle'),(1, 'ErrorLine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupOpenMasterInf():
    try:
        return WINFUNCTYPE(c_void_p, use_last_error=True)(("SetupOpenMasterInf", windll["SETUPAPI"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupOpenAppendInfFileW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,c_void_p,POINTER(UInt32), use_last_error=True)(("SetupOpenAppendInfFileW", windll["SETUPAPI"]), ((1, 'FileName'),(1, 'InfHandle'),(1, 'ErrorLine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupOpenAppendInfFile():
    return win32more.Devices.DeviceAndDriverInstallation.SetupOpenAppendInfFileW
def _define_SetupOpenAppendInfFileA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,c_void_p,POINTER(UInt32), use_last_error=True)(("SetupOpenAppendInfFileA", windll["SETUPAPI"]), ((1, 'FileName'),(1, 'InfHandle'),(1, 'ErrorLine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupCloseInfFile():
    try:
        return WINFUNCTYPE(Void,c_void_p, use_last_error=False)(("SetupCloseInfFile", windll["SETUPAPI"]), ((1, 'InfHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupFindFirstLineA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head), use_last_error=True)(("SetupFindFirstLineA", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'Section'),(1, 'Key'),(1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupFindFirstLineW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head), use_last_error=True)(("SetupFindFirstLineW", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'Section'),(1, 'Key'),(1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupFindFirstLine():
    return win32more.Devices.DeviceAndDriverInstallation.SetupFindFirstLineW
def _define_SetupFindNextLine():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head), use_last_error=True)(("SetupFindNextLine", windll["SETUPAPI"]), ((1, 'ContextIn'),(1, 'ContextOut'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupFindNextMatchLineA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),win32more.Foundation.PSTR,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head), use_last_error=True)(("SetupFindNextMatchLineA", windll["SETUPAPI"]), ((1, 'ContextIn'),(1, 'Key'),(1, 'ContextOut'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupFindNextMatchLineW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),win32more.Foundation.PWSTR,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head), use_last_error=True)(("SetupFindNextMatchLineW", windll["SETUPAPI"]), ((1, 'ContextIn'),(1, 'Key'),(1, 'ContextOut'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupFindNextMatchLine():
    return win32more.Devices.DeviceAndDriverInstallation.SetupFindNextMatchLineW
def _define_SetupGetLineByIndexA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head), use_last_error=True)(("SetupGetLineByIndexA", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'Section'),(1, 'Index'),(1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetLineByIndexW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head), use_last_error=True)(("SetupGetLineByIndexW", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'Section'),(1, 'Index'),(1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetLineByIndex():
    return win32more.Devices.DeviceAndDriverInstallation.SetupGetLineByIndexW
def _define_SetupGetLineCountA():
    try:
        return WINFUNCTYPE(Int32,c_void_p,win32more.Foundation.PSTR, use_last_error=True)(("SetupGetLineCountA", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'Section'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetLineCountW():
    try:
        return WINFUNCTYPE(Int32,c_void_p,win32more.Foundation.PWSTR, use_last_error=True)(("SetupGetLineCountW", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'Section'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetLineCount():
    return win32more.Devices.DeviceAndDriverInstallation.SetupGetLineCountW
def _define_SetupGetLineTextA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),c_void_p,win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(Byte),UInt32,POINTER(UInt32), use_last_error=True)(("SetupGetLineTextA", windll["SETUPAPI"]), ((1, 'Context'),(1, 'InfHandle'),(1, 'Section'),(1, 'Key'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetLineTextW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,POINTER(Char),UInt32,POINTER(UInt32), use_last_error=True)(("SetupGetLineTextW", windll["SETUPAPI"]), ((1, 'Context'),(1, 'InfHandle'),(1, 'Section'),(1, 'Key'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetLineText():
    return win32more.Devices.DeviceAndDriverInstallation.SetupGetLineTextW
def _define_SetupGetFieldCount():
    try:
        return WINFUNCTYPE(UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head), use_last_error=True)(("SetupGetFieldCount", windll["SETUPAPI"]), ((1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetStringFieldA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),UInt32,POINTER(Byte),UInt32,POINTER(UInt32), use_last_error=True)(("SetupGetStringFieldA", windll["SETUPAPI"]), ((1, 'Context'),(1, 'FieldIndex'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetStringFieldW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),UInt32,POINTER(Char),UInt32,POINTER(UInt32), use_last_error=True)(("SetupGetStringFieldW", windll["SETUPAPI"]), ((1, 'Context'),(1, 'FieldIndex'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetStringField():
    return win32more.Devices.DeviceAndDriverInstallation.SetupGetStringFieldW
def _define_SetupGetIntField():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),UInt32,POINTER(Int32), use_last_error=True)(("SetupGetIntField", windll["SETUPAPI"]), ((1, 'Context'),(1, 'FieldIndex'),(1, 'IntegerValue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetMultiSzFieldA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),UInt32,POINTER(Byte),UInt32,POINTER(UInt32), use_last_error=True)(("SetupGetMultiSzFieldA", windll["SETUPAPI"]), ((1, 'Context'),(1, 'FieldIndex'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetMultiSzFieldW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),UInt32,POINTER(Char),UInt32,POINTER(UInt32), use_last_error=True)(("SetupGetMultiSzFieldW", windll["SETUPAPI"]), ((1, 'Context'),(1, 'FieldIndex'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetMultiSzField():
    return win32more.Devices.DeviceAndDriverInstallation.SetupGetMultiSzFieldW
def _define_SetupGetBinaryField():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),UInt32,c_char_p_no,UInt32,POINTER(UInt32), use_last_error=True)(("SetupGetBinaryField", windll["SETUPAPI"]), ((1, 'Context'),(1, 'FieldIndex'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetFileCompressionInfoA():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.PSTR,POINTER(win32more.Foundation.PSTR),POINTER(UInt32),POINTER(UInt32),POINTER(UInt32), use_last_error=True)(("SetupGetFileCompressionInfoA", windll["SETUPAPI"]), ((1, 'SourceFileName'),(1, 'ActualSourceFileName'),(1, 'SourceFileSize'),(1, 'TargetFileSize'),(1, 'CompressionType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetFileCompressionInfoW():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.PWSTR,POINTER(win32more.Foundation.PWSTR),POINTER(UInt32),POINTER(UInt32),POINTER(UInt32), use_last_error=True)(("SetupGetFileCompressionInfoW", windll["SETUPAPI"]), ((1, 'SourceFileName'),(1, 'ActualSourceFileName'),(1, 'SourceFileSize'),(1, 'TargetFileSize'),(1, 'CompressionType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetFileCompressionInfo():
    return win32more.Devices.DeviceAndDriverInstallation.SetupGetFileCompressionInfoW
def _define_SetupGetFileCompressionInfoExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,POINTER(Byte),UInt32,POINTER(UInt32),POINTER(UInt32),POINTER(UInt32),POINTER(UInt32), use_last_error=True)(("SetupGetFileCompressionInfoExA", windll["SETUPAPI"]), ((1, 'SourceFileName'),(1, 'ActualSourceFileNameBuffer'),(1, 'ActualSourceFileNameBufferLen'),(1, 'RequiredBufferLen'),(1, 'SourceFileSize'),(1, 'TargetFileSize'),(1, 'CompressionType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetFileCompressionInfoExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,POINTER(Char),UInt32,POINTER(UInt32),POINTER(UInt32),POINTER(UInt32),POINTER(UInt32), use_last_error=True)(("SetupGetFileCompressionInfoExW", windll["SETUPAPI"]), ((1, 'SourceFileName'),(1, 'ActualSourceFileNameBuffer'),(1, 'ActualSourceFileNameBufferLen'),(1, 'RequiredBufferLen'),(1, 'SourceFileSize'),(1, 'TargetFileSize'),(1, 'CompressionType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetFileCompressionInfoEx():
    return win32more.Devices.DeviceAndDriverInstallation.SetupGetFileCompressionInfoExW
def _define_SetupDecompressOrCopyFileA():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(UInt32), use_last_error=True)(("SetupDecompressOrCopyFileA", windll["SETUPAPI"]), ((1, 'SourceFileName'),(1, 'TargetFileName'),(1, 'CompressionType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDecompressOrCopyFileW():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,POINTER(UInt32), use_last_error=True)(("SetupDecompressOrCopyFileW", windll["SETUPAPI"]), ((1, 'SourceFileName'),(1, 'TargetFileName'),(1, 'CompressionType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDecompressOrCopyFile():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDecompressOrCopyFileW
def _define_SetupGetSourceFileLocationA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),win32more.Foundation.PSTR,POINTER(UInt32),POINTER(Byte),UInt32,POINTER(UInt32), use_last_error=True)(("SetupGetSourceFileLocationA", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'InfContext'),(1, 'FileName'),(1, 'SourceId'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetSourceFileLocationW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),win32more.Foundation.PWSTR,POINTER(UInt32),POINTER(Char),UInt32,POINTER(UInt32), use_last_error=True)(("SetupGetSourceFileLocationW", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'InfContext'),(1, 'FileName'),(1, 'SourceId'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetSourceFileLocation():
    return win32more.Devices.DeviceAndDriverInstallation.SetupGetSourceFileLocationW
def _define_SetupGetSourceFileSizeA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(UInt32),UInt32, use_last_error=True)(("SetupGetSourceFileSizeA", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'InfContext'),(1, 'FileName'),(1, 'Section'),(1, 'FileSize'),(1, 'RoundingFactor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetSourceFileSizeW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,POINTER(UInt32),UInt32, use_last_error=True)(("SetupGetSourceFileSizeW", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'InfContext'),(1, 'FileName'),(1, 'Section'),(1, 'FileSize'),(1, 'RoundingFactor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetSourceFileSize():
    return win32more.Devices.DeviceAndDriverInstallation.SetupGetSourceFileSizeW
def _define_SetupGetTargetPathA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),win32more.Foundation.PSTR,POINTER(Byte),UInt32,POINTER(UInt32), use_last_error=True)(("SetupGetTargetPathA", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'InfContext'),(1, 'Section'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetTargetPathW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),win32more.Foundation.PWSTR,POINTER(Char),UInt32,POINTER(UInt32), use_last_error=True)(("SetupGetTargetPathW", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'InfContext'),(1, 'Section'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetTargetPath():
    return win32more.Devices.DeviceAndDriverInstallation.SetupGetTargetPathW
def _define_SetupSetSourceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(win32more.Foundation.PSTR),UInt32, use_last_error=True)(("SetupSetSourceListA", windll["SETUPAPI"]), ((1, 'Flags'),(1, 'SourceList'),(1, 'SourceCount'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetSourceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(win32more.Foundation.PWSTR),UInt32, use_last_error=True)(("SetupSetSourceListW", windll["SETUPAPI"]), ((1, 'Flags'),(1, 'SourceList'),(1, 'SourceCount'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetSourceList():
    return win32more.Devices.DeviceAndDriverInstallation.SetupSetSourceListW
def _define_SetupCancelTemporarySourceList():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=True)(("SetupCancelTemporarySourceList", windll["SETUPAPI"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupAddToSourceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PSTR, use_last_error=True)(("SetupAddToSourceListA", windll["SETUPAPI"]), ((1, 'Flags'),(1, 'Source'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupAddToSourceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PWSTR, use_last_error=True)(("SetupAddToSourceListW", windll["SETUPAPI"]), ((1, 'Flags'),(1, 'Source'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupAddToSourceList():
    return win32more.Devices.DeviceAndDriverInstallation.SetupAddToSourceListW
def _define_SetupRemoveFromSourceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PSTR, use_last_error=True)(("SetupRemoveFromSourceListA", windll["SETUPAPI"]), ((1, 'Flags'),(1, 'Source'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupRemoveFromSourceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PWSTR, use_last_error=True)(("SetupRemoveFromSourceListW", windll["SETUPAPI"]), ((1, 'Flags'),(1, 'Source'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupRemoveFromSourceList():
    return win32more.Devices.DeviceAndDriverInstallation.SetupRemoveFromSourceListW
def _define_SetupQuerySourceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(POINTER(win32more.Foundation.PSTR)),POINTER(UInt32), use_last_error=True)(("SetupQuerySourceListA", windll["SETUPAPI"]), ((1, 'Flags'),(1, 'List'),(1, 'Count'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQuerySourceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(POINTER(win32more.Foundation.PWSTR)),POINTER(UInt32), use_last_error=True)(("SetupQuerySourceListW", windll["SETUPAPI"]), ((1, 'Flags'),(1, 'List'),(1, 'Count'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQuerySourceList():
    return win32more.Devices.DeviceAndDriverInstallation.SetupQuerySourceListW
def _define_SetupFreeSourceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(POINTER(win32more.Foundation.PSTR)),UInt32, use_last_error=True)(("SetupFreeSourceListA", windll["SETUPAPI"]), ((1, 'List'),(1, 'Count'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupFreeSourceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(POINTER(win32more.Foundation.PWSTR)),UInt32, use_last_error=True)(("SetupFreeSourceListW", windll["SETUPAPI"]), ((1, 'List'),(1, 'Count'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupFreeSourceList():
    return win32more.Devices.DeviceAndDriverInstallation.SetupFreeSourceListW
def _define_SetupPromptForDiskA():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,POINTER(Byte),UInt32,POINTER(UInt32), use_last_error=True)(("SetupPromptForDiskA", windll["SETUPAPI"]), ((1, 'hwndParent'),(1, 'DialogTitle'),(1, 'DiskName'),(1, 'PathToSource'),(1, 'FileSought'),(1, 'TagFile'),(1, 'DiskPromptStyle'),(1, 'PathBuffer'),(1, 'PathBufferSize'),(1, 'PathRequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupPromptForDiskW():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,POINTER(Char),UInt32,POINTER(UInt32), use_last_error=True)(("SetupPromptForDiskW", windll["SETUPAPI"]), ((1, 'hwndParent'),(1, 'DialogTitle'),(1, 'DiskName'),(1, 'PathToSource'),(1, 'FileSought'),(1, 'TagFile'),(1, 'DiskPromptStyle'),(1, 'PathBuffer'),(1, 'PathBufferSize'),(1, 'PathRequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupPromptForDisk():
    return win32more.Devices.DeviceAndDriverInstallation.SetupPromptForDiskW
def _define_SetupCopyErrorA():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,UInt32,POINTER(Byte),UInt32,POINTER(UInt32), use_last_error=True)(("SetupCopyErrorA", windll["SETUPAPI"]), ((1, 'hwndParent'),(1, 'DialogTitle'),(1, 'DiskName'),(1, 'PathToSource'),(1, 'SourceFile'),(1, 'TargetPathFile'),(1, 'Win32ErrorCode'),(1, 'Style'),(1, 'PathBuffer'),(1, 'PathBufferSize'),(1, 'PathRequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupCopyErrorW():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,UInt32,POINTER(Char),UInt32,POINTER(UInt32), use_last_error=True)(("SetupCopyErrorW", windll["SETUPAPI"]), ((1, 'hwndParent'),(1, 'DialogTitle'),(1, 'DiskName'),(1, 'PathToSource'),(1, 'SourceFile'),(1, 'TargetPathFile'),(1, 'Win32ErrorCode'),(1, 'Style'),(1, 'PathBuffer'),(1, 'PathBufferSize'),(1, 'PathRequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupCopyError():
    return win32more.Devices.DeviceAndDriverInstallation.SetupCopyErrorW
def _define_SetupRenameErrorA():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,UInt32, use_last_error=True)(("SetupRenameErrorA", windll["SETUPAPI"]), ((1, 'hwndParent'),(1, 'DialogTitle'),(1, 'SourceFile'),(1, 'TargetFile'),(1, 'Win32ErrorCode'),(1, 'Style'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupRenameErrorW():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,UInt32, use_last_error=True)(("SetupRenameErrorW", windll["SETUPAPI"]), ((1, 'hwndParent'),(1, 'DialogTitle'),(1, 'SourceFile'),(1, 'TargetFile'),(1, 'Win32ErrorCode'),(1, 'Style'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupRenameError():
    return win32more.Devices.DeviceAndDriverInstallation.SetupRenameErrorW
def _define_SetupDeleteErrorA():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,UInt32, use_last_error=True)(("SetupDeleteErrorA", windll["SETUPAPI"]), ((1, 'hwndParent'),(1, 'DialogTitle'),(1, 'File'),(1, 'Win32ErrorCode'),(1, 'Style'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDeleteErrorW():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,UInt32, use_last_error=True)(("SetupDeleteErrorW", windll["SETUPAPI"]), ((1, 'hwndParent'),(1, 'DialogTitle'),(1, 'File'),(1, 'Win32ErrorCode'),(1, 'Style'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDeleteError():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDeleteErrorW
def _define_SetupBackupErrorA():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,UInt32, use_last_error=True)(("SetupBackupErrorA", windll["SETUPAPI"]), ((1, 'hwndParent'),(1, 'DialogTitle'),(1, 'SourceFile'),(1, 'TargetFile'),(1, 'Win32ErrorCode'),(1, 'Style'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupBackupErrorW():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,UInt32, use_last_error=True)(("SetupBackupErrorW", windll["SETUPAPI"]), ((1, 'hwndParent'),(1, 'DialogTitle'),(1, 'SourceFile'),(1, 'TargetFile'),(1, 'Win32ErrorCode'),(1, 'Style'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupBackupError():
    return win32more.Devices.DeviceAndDriverInstallation.SetupBackupErrorW
def _define_SetupSetDirectoryIdA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,win32more.Foundation.PSTR, use_last_error=True)(("SetupSetDirectoryIdA", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'Id'),(1, 'Directory'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetDirectoryIdW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,win32more.Foundation.PWSTR, use_last_error=True)(("SetupSetDirectoryIdW", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'Id'),(1, 'Directory'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetDirectoryId():
    return win32more.Devices.DeviceAndDriverInstallation.SetupSetDirectoryIdW
def _define_SetupSetDirectoryIdExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,win32more.Foundation.PSTR,UInt32,UInt32,c_void_p, use_last_error=True)(("SetupSetDirectoryIdExA", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'Id'),(1, 'Directory'),(1, 'Flags'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetDirectoryIdExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,win32more.Foundation.PWSTR,UInt32,UInt32,c_void_p, use_last_error=True)(("SetupSetDirectoryIdExW", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'Id'),(1, 'Directory'),(1, 'Flags'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetDirectoryIdEx():
    return win32more.Devices.DeviceAndDriverInstallation.SetupSetDirectoryIdExW
def _define_SetupGetSourceInfoA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,UInt32,POINTER(Byte),UInt32,POINTER(UInt32), use_last_error=True)(("SetupGetSourceInfoA", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'SourceId'),(1, 'InfoDesired'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetSourceInfoW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,UInt32,POINTER(Char),UInt32,POINTER(UInt32), use_last_error=True)(("SetupGetSourceInfoW", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'SourceId'),(1, 'InfoDesired'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetSourceInfo():
    return win32more.Devices.DeviceAndDriverInstallation.SetupGetSourceInfoW
def _define_SetupInstallFileA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Devices.DeviceAndDriverInstallation.SP_COPY_STYLE,win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_A,c_void_p, use_last_error=True)(("SetupInstallFileA", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'InfContext'),(1, 'SourceFile'),(1, 'SourcePathRoot'),(1, 'DestinationName'),(1, 'CopyStyle'),(1, 'CopyMsgHandler'),(1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInstallFileW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Devices.DeviceAndDriverInstallation.SP_COPY_STYLE,win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_W,c_void_p, use_last_error=True)(("SetupInstallFileW", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'InfContext'),(1, 'SourceFile'),(1, 'SourcePathRoot'),(1, 'DestinationName'),(1, 'CopyStyle'),(1, 'CopyMsgHandler'),(1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInstallFile():
    return win32more.Devices.DeviceAndDriverInstallation.SetupInstallFileW
def _define_SetupInstallFileExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Devices.DeviceAndDriverInstallation.SP_COPY_STYLE,win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_A,c_void_p,POINTER(win32more.Foundation.BOOL), use_last_error=True)(("SetupInstallFileExA", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'InfContext'),(1, 'SourceFile'),(1, 'SourcePathRoot'),(1, 'DestinationName'),(1, 'CopyStyle'),(1, 'CopyMsgHandler'),(1, 'Context'),(1, 'FileWasInUse'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInstallFileExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Devices.DeviceAndDriverInstallation.SP_COPY_STYLE,win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_W,c_void_p,POINTER(win32more.Foundation.BOOL), use_last_error=True)(("SetupInstallFileExW", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'InfContext'),(1, 'SourceFile'),(1, 'SourcePathRoot'),(1, 'DestinationName'),(1, 'CopyStyle'),(1, 'CopyMsgHandler'),(1, 'Context'),(1, 'FileWasInUse'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInstallFileEx():
    return win32more.Devices.DeviceAndDriverInstallation.SetupInstallFileExW
def _define_SetupOpenFileQueue():
    try:
        return WINFUNCTYPE(c_void_p, use_last_error=True)(("SetupOpenFileQueue", windll["SETUPAPI"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupCloseFileQueue():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p, use_last_error=False)(("SetupCloseFileQueue", windll["SETUPAPI"]), ((1, 'QueueHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetFileQueueAlternatePlatformA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head),win32more.Foundation.PSTR, use_last_error=True)(("SetupSetFileQueueAlternatePlatformA", windll["SETUPAPI"]), ((1, 'QueueHandle'),(1, 'AlternatePlatformInfo'),(1, 'AlternateDefaultCatalogFile'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetFileQueueAlternatePlatformW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head),win32more.Foundation.PWSTR, use_last_error=True)(("SetupSetFileQueueAlternatePlatformW", windll["SETUPAPI"]), ((1, 'QueueHandle'),(1, 'AlternatePlatformInfo'),(1, 'AlternateDefaultCatalogFile'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetFileQueueAlternatePlatform():
    return win32more.Devices.DeviceAndDriverInstallation.SetupSetFileQueueAlternatePlatformW
def _define_SetupSetPlatformPathOverrideA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR, use_last_error=True)(("SetupSetPlatformPathOverrideA", windll["SETUPAPI"]), ((1, 'Override'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetPlatformPathOverrideW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR, use_last_error=True)(("SetupSetPlatformPathOverrideW", windll["SETUPAPI"]), ((1, 'Override'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetPlatformPathOverride():
    return win32more.Devices.DeviceAndDriverInstallation.SetupSetPlatformPathOverrideW
def _define_SetupQueueCopyA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32, use_last_error=True)(("SetupQueueCopyA", windll["SETUPAPI"]), ((1, 'QueueHandle'),(1, 'SourceRootPath'),(1, 'SourcePath'),(1, 'SourceFilename'),(1, 'SourceDescription'),(1, 'SourceTagfile'),(1, 'TargetDirectory'),(1, 'TargetFilename'),(1, 'CopyStyle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueCopyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32, use_last_error=True)(("SetupQueueCopyW", windll["SETUPAPI"]), ((1, 'QueueHandle'),(1, 'SourceRootPath'),(1, 'SourcePath'),(1, 'SourceFilename'),(1, 'SourceDescription'),(1, 'SourceTagfile'),(1, 'TargetDirectory'),(1, 'TargetFilename'),(1, 'CopyStyle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueCopy():
    return win32more.Devices.DeviceAndDriverInstallation.SetupQueueCopyW
def _define_SetupQueueCopyIndirectA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_FILE_COPY_PARAMS_A_head), use_last_error=True)(("SetupQueueCopyIndirectA", windll["SETUPAPI"]), ((1, 'CopyParams'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueCopyIndirectW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_FILE_COPY_PARAMS_W_head), use_last_error=True)(("SetupQueueCopyIndirectW", windll["SETUPAPI"]), ((1, 'CopyParams'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueCopyIndirect():
    return win32more.Devices.DeviceAndDriverInstallation.SetupQueueCopyIndirectW
def _define_SetupQueueDefaultCopyA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32, use_last_error=True)(("SetupQueueDefaultCopyA", windll["SETUPAPI"]), ((1, 'QueueHandle'),(1, 'InfHandle'),(1, 'SourceRootPath'),(1, 'SourceFilename'),(1, 'TargetFilename'),(1, 'CopyStyle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueDefaultCopyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32, use_last_error=True)(("SetupQueueDefaultCopyW", windll["SETUPAPI"]), ((1, 'QueueHandle'),(1, 'InfHandle'),(1, 'SourceRootPath'),(1, 'SourceFilename'),(1, 'TargetFilename'),(1, 'CopyStyle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueDefaultCopy():
    return win32more.Devices.DeviceAndDriverInstallation.SetupQueueDefaultCopyW
def _define_SetupQueueCopySectionA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,c_void_p,c_void_p,win32more.Foundation.PSTR,UInt32, use_last_error=True)(("SetupQueueCopySectionA", windll["SETUPAPI"]), ((1, 'QueueHandle'),(1, 'SourceRootPath'),(1, 'InfHandle'),(1, 'ListInfHandle'),(1, 'Section'),(1, 'CopyStyle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueCopySectionW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,c_void_p,c_void_p,win32more.Foundation.PWSTR,UInt32, use_last_error=True)(("SetupQueueCopySectionW", windll["SETUPAPI"]), ((1, 'QueueHandle'),(1, 'SourceRootPath'),(1, 'InfHandle'),(1, 'ListInfHandle'),(1, 'Section'),(1, 'CopyStyle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueCopySection():
    return win32more.Devices.DeviceAndDriverInstallation.SetupQueueCopySectionW
def _define_SetupQueueDeleteA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,win32more.Foundation.PSTR, use_last_error=True)(("SetupQueueDeleteA", windll["SETUPAPI"]), ((1, 'QueueHandle'),(1, 'PathPart1'),(1, 'PathPart2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueDeleteW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR, use_last_error=True)(("SetupQueueDeleteW", windll["SETUPAPI"]), ((1, 'QueueHandle'),(1, 'PathPart1'),(1, 'PathPart2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueDelete():
    return win32more.Devices.DeviceAndDriverInstallation.SetupQueueDeleteW
def _define_SetupQueueDeleteSectionA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PSTR, use_last_error=True)(("SetupQueueDeleteSectionA", windll["SETUPAPI"]), ((1, 'QueueHandle'),(1, 'InfHandle'),(1, 'ListInfHandle'),(1, 'Section'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueDeleteSectionW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PWSTR, use_last_error=True)(("SetupQueueDeleteSectionW", windll["SETUPAPI"]), ((1, 'QueueHandle'),(1, 'InfHandle'),(1, 'ListInfHandle'),(1, 'Section'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueDeleteSection():
    return win32more.Devices.DeviceAndDriverInstallation.SetupQueueDeleteSectionW
def _define_SetupQueueRenameA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR, use_last_error=True)(("SetupQueueRenameA", windll["SETUPAPI"]), ((1, 'QueueHandle'),(1, 'SourcePath'),(1, 'SourceFilename'),(1, 'TargetPath'),(1, 'TargetFilename'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueRenameW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR, use_last_error=True)(("SetupQueueRenameW", windll["SETUPAPI"]), ((1, 'QueueHandle'),(1, 'SourcePath'),(1, 'SourceFilename'),(1, 'TargetPath'),(1, 'TargetFilename'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueRename():
    return win32more.Devices.DeviceAndDriverInstallation.SetupQueueRenameW
def _define_SetupQueueRenameSectionA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PSTR, use_last_error=True)(("SetupQueueRenameSectionA", windll["SETUPAPI"]), ((1, 'QueueHandle'),(1, 'InfHandle'),(1, 'ListInfHandle'),(1, 'Section'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueRenameSectionW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PWSTR, use_last_error=True)(("SetupQueueRenameSectionW", windll["SETUPAPI"]), ((1, 'QueueHandle'),(1, 'InfHandle'),(1, 'ListInfHandle'),(1, 'Section'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueRenameSection():
    return win32more.Devices.DeviceAndDriverInstallation.SetupQueueRenameSectionW
def _define_SetupCommitFileQueueA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,c_void_p,win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_A,c_void_p, use_last_error=True)(("SetupCommitFileQueueA", windll["SETUPAPI"]), ((1, 'Owner'),(1, 'QueueHandle'),(1, 'MsgHandler'),(1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupCommitFileQueueW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,c_void_p,win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_W,c_void_p, use_last_error=True)(("SetupCommitFileQueueW", windll["SETUPAPI"]), ((1, 'Owner'),(1, 'QueueHandle'),(1, 'MsgHandler'),(1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupCommitFileQueue():
    return win32more.Devices.DeviceAndDriverInstallation.SetupCommitFileQueueW
def _define_SetupScanFileQueueA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,win32more.Foundation.HWND,win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_A,c_void_p,POINTER(UInt32), use_last_error=True)(("SetupScanFileQueueA", windll["SETUPAPI"]), ((1, 'FileQueue'),(1, 'Flags'),(1, 'Window'),(1, 'CallbackRoutine'),(1, 'CallbackContext'),(1, 'Result'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupScanFileQueueW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,win32more.Foundation.HWND,win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_W,c_void_p,POINTER(UInt32), use_last_error=True)(("SetupScanFileQueueW", windll["SETUPAPI"]), ((1, 'FileQueue'),(1, 'Flags'),(1, 'Window'),(1, 'CallbackRoutine'),(1, 'CallbackContext'),(1, 'Result'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupScanFileQueue():
    return win32more.Devices.DeviceAndDriverInstallation.SetupScanFileQueueW
def _define_SetupGetFileQueueCount():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,POINTER(UInt32), use_last_error=True)(("SetupGetFileQueueCount", windll["SETUPAPI"]), ((1, 'FileQueue'),(1, 'SubQueueFileOp'),(1, 'NumOperations'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetFileQueueFlags():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(UInt32), use_last_error=True)(("SetupGetFileQueueFlags", windll["SETUPAPI"]), ((1, 'FileQueue'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetFileQueueFlags():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,UInt32, use_last_error=True)(("SetupSetFileQueueFlags", windll["SETUPAPI"]), ((1, 'FileQueue'),(1, 'FlagMask'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupCopyOEMInfA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Devices.DeviceAndDriverInstallation.OEM_SOURCE_MEDIA_TYPE,UInt32,POINTER(Byte),UInt32,POINTER(UInt32),POINTER(win32more.Foundation.PSTR), use_last_error=True)(("SetupCopyOEMInfA", windll["SETUPAPI"]), ((1, 'SourceInfFileName'),(1, 'OEMSourceMediaLocation'),(1, 'OEMSourceMediaType'),(1, 'CopyStyle'),(1, 'DestinationInfFileName'),(1, 'DestinationInfFileNameSize'),(1, 'RequiredSize'),(1, 'DestinationInfFileNameComponent'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupCopyOEMInfW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Devices.DeviceAndDriverInstallation.OEM_SOURCE_MEDIA_TYPE,UInt32,POINTER(Char),UInt32,POINTER(UInt32),POINTER(win32more.Foundation.PWSTR), use_last_error=True)(("SetupCopyOEMInfW", windll["SETUPAPI"]), ((1, 'SourceInfFileName'),(1, 'OEMSourceMediaLocation'),(1, 'OEMSourceMediaType'),(1, 'CopyStyle'),(1, 'DestinationInfFileName'),(1, 'DestinationInfFileNameSize'),(1, 'RequiredSize'),(1, 'DestinationInfFileNameComponent'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupCopyOEMInf():
    return win32more.Devices.DeviceAndDriverInstallation.SetupCopyOEMInfW
def _define_SetupUninstallOEMInfA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,UInt32,c_void_p, use_last_error=False)(("SetupUninstallOEMInfA", windll["SETUPAPI"]), ((1, 'InfFileName'),(1, 'Flags'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupUninstallOEMInfW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,UInt32,c_void_p, use_last_error=False)(("SetupUninstallOEMInfW", windll["SETUPAPI"]), ((1, 'InfFileName'),(1, 'Flags'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupUninstallOEMInf():
    return win32more.Devices.DeviceAndDriverInstallation.SetupUninstallOEMInfW
def _define_SetupUninstallNewlyCopiedInfs():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,c_void_p, use_last_error=True)(("SetupUninstallNewlyCopiedInfs", windll["SETUPAPI"]), ((1, 'FileQueue'),(1, 'Flags'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupCreateDiskSpaceListA():
    try:
        return WINFUNCTYPE(c_void_p,c_void_p,UInt32,UInt32, use_last_error=True)(("SetupCreateDiskSpaceListA", windll["SETUPAPI"]), ((1, 'Reserved1'),(1, 'Reserved2'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupCreateDiskSpaceListW():
    try:
        return WINFUNCTYPE(c_void_p,c_void_p,UInt32,UInt32, use_last_error=True)(("SetupCreateDiskSpaceListW", windll["SETUPAPI"]), ((1, 'Reserved1'),(1, 'Reserved2'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupCreateDiskSpaceList():
    return win32more.Devices.DeviceAndDriverInstallation.SetupCreateDiskSpaceListW
def _define_SetupDuplicateDiskSpaceListA():
    try:
        return WINFUNCTYPE(c_void_p,c_void_p,c_void_p,UInt32,UInt32, use_last_error=True)(("SetupDuplicateDiskSpaceListA", windll["SETUPAPI"]), ((1, 'DiskSpace'),(1, 'Reserved1'),(1, 'Reserved2'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDuplicateDiskSpaceListW():
    try:
        return WINFUNCTYPE(c_void_p,c_void_p,c_void_p,UInt32,UInt32, use_last_error=True)(("SetupDuplicateDiskSpaceListW", windll["SETUPAPI"]), ((1, 'DiskSpace'),(1, 'Reserved1'),(1, 'Reserved2'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDuplicateDiskSpaceList():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDuplicateDiskSpaceListW
def _define_SetupDestroyDiskSpaceList():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p, use_last_error=True)(("SetupDestroyDiskSpaceList", windll["SETUPAPI"]), ((1, 'DiskSpace'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueryDrivesInDiskSpaceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(Byte),UInt32,POINTER(UInt32), use_last_error=True)(("SetupQueryDrivesInDiskSpaceListA", windll["SETUPAPI"]), ((1, 'DiskSpace'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueryDrivesInDiskSpaceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(Char),UInt32,POINTER(UInt32), use_last_error=True)(("SetupQueryDrivesInDiskSpaceListW", windll["SETUPAPI"]), ((1, 'DiskSpace'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueryDrivesInDiskSpaceList():
    return win32more.Devices.DeviceAndDriverInstallation.SetupQueryDrivesInDiskSpaceListW
def _define_SetupQuerySpaceRequiredOnDriveA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,POINTER(Int64),c_void_p,UInt32, use_last_error=True)(("SetupQuerySpaceRequiredOnDriveA", windll["SETUPAPI"]), ((1, 'DiskSpace'),(1, 'DriveSpec'),(1, 'SpaceRequired'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQuerySpaceRequiredOnDriveW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,POINTER(Int64),c_void_p,UInt32, use_last_error=True)(("SetupQuerySpaceRequiredOnDriveW", windll["SETUPAPI"]), ((1, 'DiskSpace'),(1, 'DriveSpec'),(1, 'SpaceRequired'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQuerySpaceRequiredOnDrive():
    return win32more.Devices.DeviceAndDriverInstallation.SetupQuerySpaceRequiredOnDriveW
def _define_SetupAdjustDiskSpaceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,Int64,c_void_p,UInt32, use_last_error=True)(("SetupAdjustDiskSpaceListA", windll["SETUPAPI"]), ((1, 'DiskSpace'),(1, 'DriveRoot'),(1, 'Amount'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupAdjustDiskSpaceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,Int64,c_void_p,UInt32, use_last_error=True)(("SetupAdjustDiskSpaceListW", windll["SETUPAPI"]), ((1, 'DiskSpace'),(1, 'DriveRoot'),(1, 'Amount'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupAdjustDiskSpaceList():
    return win32more.Devices.DeviceAndDriverInstallation.SetupAdjustDiskSpaceListW
def _define_SetupAddToDiskSpaceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,Int64,win32more.Devices.DeviceAndDriverInstallation.SETUP_FILE_OPERATION,c_void_p,UInt32, use_last_error=True)(("SetupAddToDiskSpaceListA", windll["SETUPAPI"]), ((1, 'DiskSpace'),(1, 'TargetFilespec'),(1, 'FileSize'),(1, 'Operation'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupAddToDiskSpaceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,Int64,win32more.Devices.DeviceAndDriverInstallation.SETUP_FILE_OPERATION,c_void_p,UInt32, use_last_error=True)(("SetupAddToDiskSpaceListW", windll["SETUPAPI"]), ((1, 'DiskSpace'),(1, 'TargetFilespec'),(1, 'FileSize'),(1, 'Operation'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupAddToDiskSpaceList():
    return win32more.Devices.DeviceAndDriverInstallation.SetupAddToDiskSpaceListW
def _define_SetupAddSectionToDiskSpaceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PSTR,win32more.Devices.DeviceAndDriverInstallation.SETUP_FILE_OPERATION,c_void_p,UInt32, use_last_error=True)(("SetupAddSectionToDiskSpaceListA", windll["SETUPAPI"]), ((1, 'DiskSpace'),(1, 'InfHandle'),(1, 'ListInfHandle'),(1, 'SectionName'),(1, 'Operation'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupAddSectionToDiskSpaceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PWSTR,win32more.Devices.DeviceAndDriverInstallation.SETUP_FILE_OPERATION,c_void_p,UInt32, use_last_error=True)(("SetupAddSectionToDiskSpaceListW", windll["SETUPAPI"]), ((1, 'DiskSpace'),(1, 'InfHandle'),(1, 'ListInfHandle'),(1, 'SectionName'),(1, 'Operation'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupAddSectionToDiskSpaceList():
    return win32more.Devices.DeviceAndDriverInstallation.SetupAddSectionToDiskSpaceListW
def _define_SetupAddInstallSectionToDiskSpaceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PSTR,c_void_p,UInt32, use_last_error=True)(("SetupAddInstallSectionToDiskSpaceListA", windll["SETUPAPI"]), ((1, 'DiskSpace'),(1, 'InfHandle'),(1, 'LayoutInfHandle'),(1, 'SectionName'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupAddInstallSectionToDiskSpaceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PWSTR,c_void_p,UInt32, use_last_error=True)(("SetupAddInstallSectionToDiskSpaceListW", windll["SETUPAPI"]), ((1, 'DiskSpace'),(1, 'InfHandle'),(1, 'LayoutInfHandle'),(1, 'SectionName'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupAddInstallSectionToDiskSpaceList():
    return win32more.Devices.DeviceAndDriverInstallation.SetupAddInstallSectionToDiskSpaceListW
def _define_SetupRemoveFromDiskSpaceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,win32more.Devices.DeviceAndDriverInstallation.SETUP_FILE_OPERATION,c_void_p,UInt32, use_last_error=True)(("SetupRemoveFromDiskSpaceListA", windll["SETUPAPI"]), ((1, 'DiskSpace'),(1, 'TargetFilespec'),(1, 'Operation'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupRemoveFromDiskSpaceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,win32more.Devices.DeviceAndDriverInstallation.SETUP_FILE_OPERATION,c_void_p,UInt32, use_last_error=True)(("SetupRemoveFromDiskSpaceListW", windll["SETUPAPI"]), ((1, 'DiskSpace'),(1, 'TargetFilespec'),(1, 'Operation'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupRemoveFromDiskSpaceList():
    return win32more.Devices.DeviceAndDriverInstallation.SetupRemoveFromDiskSpaceListW
def _define_SetupRemoveSectionFromDiskSpaceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PSTR,win32more.Devices.DeviceAndDriverInstallation.SETUP_FILE_OPERATION,c_void_p,UInt32, use_last_error=True)(("SetupRemoveSectionFromDiskSpaceListA", windll["SETUPAPI"]), ((1, 'DiskSpace'),(1, 'InfHandle'),(1, 'ListInfHandle'),(1, 'SectionName'),(1, 'Operation'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupRemoveSectionFromDiskSpaceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PWSTR,win32more.Devices.DeviceAndDriverInstallation.SETUP_FILE_OPERATION,c_void_p,UInt32, use_last_error=True)(("SetupRemoveSectionFromDiskSpaceListW", windll["SETUPAPI"]), ((1, 'DiskSpace'),(1, 'InfHandle'),(1, 'ListInfHandle'),(1, 'SectionName'),(1, 'Operation'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupRemoveSectionFromDiskSpaceList():
    return win32more.Devices.DeviceAndDriverInstallation.SetupRemoveSectionFromDiskSpaceListW
def _define_SetupRemoveInstallSectionFromDiskSpaceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PSTR,c_void_p,UInt32, use_last_error=True)(("SetupRemoveInstallSectionFromDiskSpaceListA", windll["SETUPAPI"]), ((1, 'DiskSpace'),(1, 'InfHandle'),(1, 'LayoutInfHandle'),(1, 'SectionName'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupRemoveInstallSectionFromDiskSpaceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PWSTR,c_void_p,UInt32, use_last_error=True)(("SetupRemoveInstallSectionFromDiskSpaceListW", windll["SETUPAPI"]), ((1, 'DiskSpace'),(1, 'InfHandle'),(1, 'LayoutInfHandle'),(1, 'SectionName'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupRemoveInstallSectionFromDiskSpaceList():
    return win32more.Devices.DeviceAndDriverInstallation.SetupRemoveInstallSectionFromDiskSpaceListW
def _define_SetupIterateCabinetA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,UInt32,win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_A,c_void_p, use_last_error=True)(("SetupIterateCabinetA", windll["SETUPAPI"]), ((1, 'CabinetFile'),(1, 'Reserved'),(1, 'MsgHandler'),(1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupIterateCabinetW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,UInt32,win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_W,c_void_p, use_last_error=True)(("SetupIterateCabinetW", windll["SETUPAPI"]), ((1, 'CabinetFile'),(1, 'Reserved'),(1, 'MsgHandler'),(1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupIterateCabinet():
    return win32more.Devices.DeviceAndDriverInstallation.SetupIterateCabinetW
def _define_SetupPromptReboot():
    try:
        return WINFUNCTYPE(Int32,c_void_p,win32more.Foundation.HWND,win32more.Foundation.BOOL, use_last_error=True)(("SetupPromptReboot", windll["SETUPAPI"]), ((1, 'FileQueue'),(1, 'Owner'),(1, 'ScanOnly'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInitDefaultQueueCallback():
    try:
        return WINFUNCTYPE(c_void_p,win32more.Foundation.HWND, use_last_error=True)(("SetupInitDefaultQueueCallback", windll["SETUPAPI"]), ((1, 'OwnerWindow'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInitDefaultQueueCallbackEx():
    try:
        return WINFUNCTYPE(c_void_p,win32more.Foundation.HWND,win32more.Foundation.HWND,UInt32,UInt32,c_void_p, use_last_error=False)(("SetupInitDefaultQueueCallbackEx", windll["SETUPAPI"]), ((1, 'OwnerWindow'),(1, 'AlternateProgressWindow'),(1, 'ProgressMessage'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupTermDefaultQueueCallback():
    try:
        return WINFUNCTYPE(Void,c_void_p, use_last_error=True)(("SetupTermDefaultQueueCallback", windll["SETUPAPI"]), ((1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDefaultQueueCallbackA():
    try:
        return WINFUNCTYPE(UInt32,c_void_p,UInt32,UIntPtr,UIntPtr, use_last_error=True)(("SetupDefaultQueueCallbackA", windll["SETUPAPI"]), ((1, 'Context'),(1, 'Notification'),(1, 'Param1'),(1, 'Param2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDefaultQueueCallbackW():
    try:
        return WINFUNCTYPE(UInt32,c_void_p,UInt32,UIntPtr,UIntPtr, use_last_error=True)(("SetupDefaultQueueCallbackW", windll["SETUPAPI"]), ((1, 'Context'),(1, 'Notification'),(1, 'Param1'),(1, 'Param2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDefaultQueueCallback():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDefaultQueueCallbackW
def _define_SetupInstallFromInfSectionA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,c_void_p,win32more.Foundation.PSTR,UInt32,win32more.System.Registry.HKEY,win32more.Foundation.PSTR,UInt32,win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_A,c_void_p,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=True)(("SetupInstallFromInfSectionA", windll["SETUPAPI"]), ((1, 'Owner'),(1, 'InfHandle'),(1, 'SectionName'),(1, 'Flags'),(1, 'RelativeKeyRoot'),(1, 'SourceRootPath'),(1, 'CopyFlags'),(1, 'MsgHandler'),(1, 'Context'),(1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInstallFromInfSectionW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,c_void_p,win32more.Foundation.PWSTR,UInt32,win32more.System.Registry.HKEY,win32more.Foundation.PWSTR,UInt32,win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_W,c_void_p,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=True)(("SetupInstallFromInfSectionW", windll["SETUPAPI"]), ((1, 'Owner'),(1, 'InfHandle'),(1, 'SectionName'),(1, 'Flags'),(1, 'RelativeKeyRoot'),(1, 'SourceRootPath'),(1, 'CopyFlags'),(1, 'MsgHandler'),(1, 'Context'),(1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInstallFromInfSection():
    return win32more.Devices.DeviceAndDriverInstallation.SetupInstallFromInfSectionW
def _define_SetupInstallFilesFromInfSectionA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32, use_last_error=True)(("SetupInstallFilesFromInfSectionA", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'LayoutInfHandle'),(1, 'FileQueue'),(1, 'SectionName'),(1, 'SourceRootPath'),(1, 'CopyFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInstallFilesFromInfSectionW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32, use_last_error=True)(("SetupInstallFilesFromInfSectionW", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'LayoutInfHandle'),(1, 'FileQueue'),(1, 'SectionName'),(1, 'SourceRootPath'),(1, 'CopyFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInstallFilesFromInfSection():
    return win32more.Devices.DeviceAndDriverInstallation.SetupInstallFilesFromInfSectionW
def _define_SetupInstallServicesFromInfSectionA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,UInt32, use_last_error=True)(("SetupInstallServicesFromInfSectionA", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'SectionName'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInstallServicesFromInfSectionW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,UInt32, use_last_error=True)(("SetupInstallServicesFromInfSectionW", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'SectionName'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInstallServicesFromInfSection():
    return win32more.Devices.DeviceAndDriverInstallation.SetupInstallServicesFromInfSectionW
def _define_SetupInstallServicesFromInfSectionExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,UInt32,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),c_void_p,c_void_p, use_last_error=True)(("SetupInstallServicesFromInfSectionExA", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'SectionName'),(1, 'Flags'),(1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInstallServicesFromInfSectionExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,UInt32,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),c_void_p,c_void_p, use_last_error=True)(("SetupInstallServicesFromInfSectionExW", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'SectionName'),(1, 'Flags'),(1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInstallServicesFromInfSectionEx():
    return win32more.Devices.DeviceAndDriverInstallation.SetupInstallServicesFromInfSectionExW
def _define_InstallHinfSectionA():
    try:
        return WINFUNCTYPE(Void,win32more.Foundation.HWND,win32more.Foundation.HINSTANCE,win32more.Foundation.PSTR,Int32, use_last_error=False)(("InstallHinfSectionA", windll["SETUPAPI"]), ((1, 'Window'),(1, 'ModuleHandle'),(1, 'CommandLine'),(1, 'ShowCommand'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_InstallHinfSectionW():
    try:
        return WINFUNCTYPE(Void,win32more.Foundation.HWND,win32more.Foundation.HINSTANCE,win32more.Foundation.PWSTR,Int32, use_last_error=False)(("InstallHinfSectionW", windll["SETUPAPI"]), ((1, 'Window'),(1, 'ModuleHandle'),(1, 'CommandLine'),(1, 'ShowCommand'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_InstallHinfSection():
    return win32more.Devices.DeviceAndDriverInstallation.InstallHinfSectionW
def _define_SetupInitializeFileLogA():
    try:
        return WINFUNCTYPE(c_void_p,win32more.Foundation.PSTR,UInt32, use_last_error=True)(("SetupInitializeFileLogA", windll["SETUPAPI"]), ((1, 'LogFileName'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInitializeFileLogW():
    try:
        return WINFUNCTYPE(c_void_p,win32more.Foundation.PWSTR,UInt32, use_last_error=True)(("SetupInitializeFileLogW", windll["SETUPAPI"]), ((1, 'LogFileName'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInitializeFileLog():
    return win32more.Devices.DeviceAndDriverInstallation.SetupInitializeFileLogW
def _define_SetupTerminateFileLog():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p, use_last_error=True)(("SetupTerminateFileLog", windll["SETUPAPI"]), ((1, 'FileLogHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupLogFileA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32, use_last_error=True)(("SetupLogFileA", windll["SETUPAPI"]), ((1, 'FileLogHandle'),(1, 'LogSectionName'),(1, 'SourceFilename'),(1, 'TargetFilename'),(1, 'Checksum'),(1, 'DiskTagfile'),(1, 'DiskDescription'),(1, 'OtherInfo'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupLogFileW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32, use_last_error=True)(("SetupLogFileW", windll["SETUPAPI"]), ((1, 'FileLogHandle'),(1, 'LogSectionName'),(1, 'SourceFilename'),(1, 'TargetFilename'),(1, 'Checksum'),(1, 'DiskTagfile'),(1, 'DiskDescription'),(1, 'OtherInfo'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupLogFile():
    return win32more.Devices.DeviceAndDriverInstallation.SetupLogFileW
def _define_SetupRemoveFileLogEntryA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,win32more.Foundation.PSTR, use_last_error=True)(("SetupRemoveFileLogEntryA", windll["SETUPAPI"]), ((1, 'FileLogHandle'),(1, 'LogSectionName'),(1, 'TargetFilename'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupRemoveFileLogEntryW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR, use_last_error=True)(("SetupRemoveFileLogEntryW", windll["SETUPAPI"]), ((1, 'FileLogHandle'),(1, 'LogSectionName'),(1, 'TargetFilename'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupRemoveFileLogEntry():
    return win32more.Devices.DeviceAndDriverInstallation.SetupRemoveFileLogEntryW
def _define_SetupQueryFileLogA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Devices.DeviceAndDriverInstallation.SetupFileLogInfo,POINTER(Byte),UInt32,POINTER(UInt32), use_last_error=True)(("SetupQueryFileLogA", windll["SETUPAPI"]), ((1, 'FileLogHandle'),(1, 'LogSectionName'),(1, 'TargetFilename'),(1, 'DesiredInfo'),(1, 'DataOut'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueryFileLogW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Devices.DeviceAndDriverInstallation.SetupFileLogInfo,POINTER(Char),UInt32,POINTER(UInt32), use_last_error=True)(("SetupQueryFileLogW", windll["SETUPAPI"]), ((1, 'FileLogHandle'),(1, 'LogSectionName'),(1, 'TargetFilename'),(1, 'DesiredInfo'),(1, 'DataOut'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueryFileLog():
    return win32more.Devices.DeviceAndDriverInstallation.SetupQueryFileLogW
def _define_SetupOpenLog():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.BOOL, use_last_error=True)(("SetupOpenLog", windll["SETUPAPI"]), ((1, 'Erase'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupLogErrorA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,UInt32, use_last_error=True)(("SetupLogErrorA", windll["SETUPAPI"]), ((1, 'MessageString'),(1, 'Severity'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupLogErrorW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,UInt32, use_last_error=True)(("SetupLogErrorW", windll["SETUPAPI"]), ((1, 'MessageString'),(1, 'Severity'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupLogError():
    return win32more.Devices.DeviceAndDriverInstallation.SetupLogErrorW
def _define_SetupCloseLog():
    try:
        return WINFUNCTYPE(Void, use_last_error=False)(("SetupCloseLog", windll["SETUPAPI"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetThreadLogToken():
    try:
        return WINFUNCTYPE(UInt64, use_last_error=False)(("SetupGetThreadLogToken", windll["SETUPAPI"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetThreadLogToken():
    try:
        return WINFUNCTYPE(Void,UInt64, use_last_error=False)(("SetupSetThreadLogToken", windll["SETUPAPI"]), ((1, 'LogToken'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupWriteTextLog():
    try:
        return WINFUNCTYPE(Void,UInt64,UInt32,UInt32,win32more.Foundation.PSTR, use_last_error=False)(("SetupWriteTextLog", windll["SETUPAPI"]), ((1, 'LogToken'),(1, 'Category'),(1, 'Flags'),(1, 'MessageStr'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupWriteTextLogError():
    try:
        return WINFUNCTYPE(Void,UInt64,UInt32,UInt32,UInt32,win32more.Foundation.PSTR, use_last_error=False)(("SetupWriteTextLogError", windll["SETUPAPI"]), ((1, 'LogToken'),(1, 'Category'),(1, 'LogFlags'),(1, 'Error'),(1, 'MessageStr'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupWriteTextLogInfLine():
    try:
        return WINFUNCTYPE(Void,UInt64,UInt32,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head), use_last_error=False)(("SetupWriteTextLogInfLine", windll["SETUPAPI"]), ((1, 'LogToken'),(1, 'Flags'),(1, 'InfHandle'),(1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetBackupInformationA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_BACKUP_QUEUE_PARAMS_V2_A_head), use_last_error=False)(("SetupGetBackupInformationA", windll["SETUPAPI"]), ((1, 'QueueHandle'),(1, 'BackupParams'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetBackupInformationW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_BACKUP_QUEUE_PARAMS_V2_W_head), use_last_error=False)(("SetupGetBackupInformationW", windll["SETUPAPI"]), ((1, 'QueueHandle'),(1, 'BackupParams'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetBackupInformation():
    return win32more.Devices.DeviceAndDriverInstallation.SetupGetBackupInformationW
def _define_SetupPrepareQueueForRestoreA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,UInt32, use_last_error=False)(("SetupPrepareQueueForRestoreA", windll["SETUPAPI"]), ((1, 'QueueHandle'),(1, 'BackupPath'),(1, 'RestoreFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupPrepareQueueForRestoreW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,UInt32, use_last_error=False)(("SetupPrepareQueueForRestoreW", windll["SETUPAPI"]), ((1, 'QueueHandle'),(1, 'BackupPath'),(1, 'RestoreFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupPrepareQueueForRestore():
    return win32more.Devices.DeviceAndDriverInstallation.SetupPrepareQueueForRestoreW
def _define_SetupSetNonInteractiveMode():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.BOOL, use_last_error=False)(("SetupSetNonInteractiveMode", windll["SETUPAPI"]), ((1, 'NonInteractiveFlag'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetNonInteractiveMode():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL, use_last_error=False)(("SetupGetNonInteractiveMode", windll["SETUPAPI"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCreateDeviceInfoList():
    try:
        return WINFUNCTYPE(c_void_p,POINTER(Guid),win32more.Foundation.HWND, use_last_error=True)(("SetupDiCreateDeviceInfoList", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'hwndParent'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCreateDeviceInfoListExA():
    try:
        return WINFUNCTYPE(c_void_p,POINTER(Guid),win32more.Foundation.HWND,win32more.Foundation.PSTR,c_void_p, use_last_error=True)(("SetupDiCreateDeviceInfoListExA", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'hwndParent'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCreateDeviceInfoListExW():
    try:
        return WINFUNCTYPE(c_void_p,POINTER(Guid),win32more.Foundation.HWND,win32more.Foundation.PWSTR,c_void_p, use_last_error=True)(("SetupDiCreateDeviceInfoListExW", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'hwndParent'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCreateDeviceInfoListEx():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiCreateDeviceInfoListExW
def _define_SetupDiGetDeviceInfoListClass():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(Guid), use_last_error=True)(("SetupDiGetDeviceInfoListClass", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'ClassGuid'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceInfoListDetailA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_LIST_DETAIL_DATA_A_head), use_last_error=True)(("SetupDiGetDeviceInfoListDetailA", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoSetDetailData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceInfoListDetailW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_LIST_DETAIL_DATA_W_head), use_last_error=True)(("SetupDiGetDeviceInfoListDetailW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoSetDetailData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceInfoListDetail():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiGetDeviceInfoListDetailW
def _define_SetupDiCreateDeviceInfoA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,POINTER(Guid),win32more.Foundation.PSTR,win32more.Foundation.HWND,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=True)(("SetupDiCreateDeviceInfoA", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceName'),(1, 'ClassGuid'),(1, 'DeviceDescription'),(1, 'hwndParent'),(1, 'CreationFlags'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCreateDeviceInfoW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,POINTER(Guid),win32more.Foundation.PWSTR,win32more.Foundation.HWND,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=True)(("SetupDiCreateDeviceInfoW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceName'),(1, 'ClassGuid'),(1, 'DeviceDescription'),(1, 'hwndParent'),(1, 'CreationFlags'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCreateDeviceInfo():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiCreateDeviceInfoW
def _define_SetupDiOpenDeviceInfoA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,win32more.Foundation.HWND,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=True)(("SetupDiOpenDeviceInfoA", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInstanceId'),(1, 'hwndParent'),(1, 'OpenFlags'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiOpenDeviceInfoW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.HWND,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=True)(("SetupDiOpenDeviceInfoW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInstanceId'),(1, 'hwndParent'),(1, 'OpenFlags'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiOpenDeviceInfo():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiOpenDeviceInfoW
def _define_SetupDiGetDeviceInstanceIdA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(Byte),UInt32,POINTER(UInt32), use_last_error=True)(("SetupDiGetDeviceInstanceIdA", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DeviceInstanceId'),(1, 'DeviceInstanceIdSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceInstanceIdW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(Char),UInt32,POINTER(UInt32), use_last_error=True)(("SetupDiGetDeviceInstanceIdW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DeviceInstanceId'),(1, 'DeviceInstanceIdSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceInstanceId():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiGetDeviceInstanceIdW
def _define_SetupDiDeleteDeviceInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=True)(("SetupDiDeleteDeviceInfo", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiEnumDeviceInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=True)(("SetupDiEnumDeviceInfo", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'MemberIndex'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiDestroyDeviceInfoList():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p, use_last_error=True)(("SetupDiDestroyDeviceInfoList", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiEnumDeviceInterfaces():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(Guid),UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head), use_last_error=True)(("SetupDiEnumDeviceInterfaces", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'InterfaceClassGuid'),(1, 'MemberIndex'),(1, 'DeviceInterfaceData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCreateDeviceInterfaceA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(Guid),win32more.Foundation.PSTR,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head), use_last_error=True)(("SetupDiCreateDeviceInterfaceA", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'InterfaceClassGuid'),(1, 'ReferenceString'),(1, 'CreationFlags'),(1, 'DeviceInterfaceData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCreateDeviceInterfaceW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(Guid),win32more.Foundation.PWSTR,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head), use_last_error=True)(("SetupDiCreateDeviceInterfaceW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'InterfaceClassGuid'),(1, 'ReferenceString'),(1, 'CreationFlags'),(1, 'DeviceInterfaceData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCreateDeviceInterface():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiCreateDeviceInterfaceW
def _define_SetupDiOpenDeviceInterfaceA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head), use_last_error=True)(("SetupDiOpenDeviceInterfaceA", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DevicePath'),(1, 'OpenFlags'),(1, 'DeviceInterfaceData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiOpenDeviceInterfaceW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head), use_last_error=True)(("SetupDiOpenDeviceInterfaceW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DevicePath'),(1, 'OpenFlags'),(1, 'DeviceInterfaceData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiOpenDeviceInterface():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiOpenDeviceInterfaceW
def _define_SetupDiGetDeviceInterfaceAlias():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head),POINTER(Guid),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head), use_last_error=True)(("SetupDiGetDeviceInterfaceAlias", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),(1, 'AliasInterfaceClassGuid'),(1, 'AliasDeviceInterfaceData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiDeleteDeviceInterfaceData():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head), use_last_error=True)(("SetupDiDeleteDeviceInterfaceData", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiRemoveDeviceInterface():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head), use_last_error=True)(("SetupDiRemoveDeviceInterface", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceInterfaceDetailA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DETAIL_DATA_A_head),UInt32,POINTER(UInt32),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=True)(("SetupDiGetDeviceInterfaceDetailA", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),(1, 'DeviceInterfaceDetailData'),(1, 'DeviceInterfaceDetailDataSize'),(1, 'RequiredSize'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceInterfaceDetailW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DETAIL_DATA_W_head),UInt32,POINTER(UInt32),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=True)(("SetupDiGetDeviceInterfaceDetailW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),(1, 'DeviceInterfaceDetailData'),(1, 'DeviceInterfaceDetailDataSize'),(1, 'RequiredSize'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceInterfaceDetail():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiGetDeviceInterfaceDetailW
def _define_SetupDiInstallDeviceInterfaces():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=True)(("SetupDiInstallDeviceInterfaces", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetDeviceInterfaceDefault():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head),UInt32,c_void_p, use_last_error=True)(("SetupDiSetDeviceInterfaceDefault", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),(1, 'Flags'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiRegisterDeviceInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,win32more.Devices.DeviceAndDriverInstallation.PSP_DETSIG_CMPPROC,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=True)(("SetupDiRegisterDeviceInfo", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Flags'),(1, 'CompareProc'),(1, 'CompareContext'),(1, 'DupDeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiBuildDriverInfoList():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),win32more.Devices.DeviceAndDriverInstallation.SETUP_DI_BUILD_DRIVER_DRIVER_TYPE, use_last_error=True)(("SetupDiBuildDriverInfoList", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCancelDriverInfoSearch():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p, use_last_error=True)(("SetupDiCancelDriverInfoSearch", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiEnumDriverInfoA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_A_head), use_last_error=True)(("SetupDiEnumDriverInfoA", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverType'),(1, 'MemberIndex'),(1, 'DriverInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiEnumDriverInfoW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_W_head), use_last_error=True)(("SetupDiEnumDriverInfoW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverType'),(1, 'MemberIndex'),(1, 'DriverInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiEnumDriverInfo():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiEnumDriverInfoW
def _define_SetupDiGetSelectedDriverA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_A_head), use_last_error=True)(("SetupDiGetSelectedDriverA", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetSelectedDriverW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_W_head), use_last_error=True)(("SetupDiGetSelectedDriverW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetSelectedDriver():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiGetSelectedDriverW
def _define_SetupDiSetSelectedDriverA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_A_head), use_last_error=True)(("SetupDiSetSelectedDriverA", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetSelectedDriverW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_W_head), use_last_error=True)(("SetupDiSetSelectedDriverW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetSelectedDriver():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiSetSelectedDriverW
def _define_SetupDiGetDriverInfoDetailA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_A_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DETAIL_DATA_A_head),UInt32,POINTER(UInt32), use_last_error=True)(("SetupDiGetDriverInfoDetailA", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverInfoData'),(1, 'DriverInfoDetailData'),(1, 'DriverInfoDetailDataSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDriverInfoDetailW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_W_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DETAIL_DATA_W_head),UInt32,POINTER(UInt32), use_last_error=True)(("SetupDiGetDriverInfoDetailW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverInfoData'),(1, 'DriverInfoDetailData'),(1, 'DriverInfoDetailDataSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDriverInfoDetail():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiGetDriverInfoDetailW
def _define_SetupDiDestroyDriverInfoList():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32, use_last_error=True)(("SetupDiDestroyDriverInfoList", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassDevsA():
    try:
        return WINFUNCTYPE(c_void_p,POINTER(Guid),win32more.Foundation.PSTR,win32more.Foundation.HWND,UInt32, use_last_error=True)(("SetupDiGetClassDevsA", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'Enumerator'),(1, 'hwndParent'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassDevsW():
    try:
        return WINFUNCTYPE(c_void_p,POINTER(Guid),win32more.Foundation.PWSTR,win32more.Foundation.HWND,UInt32, use_last_error=True)(("SetupDiGetClassDevsW", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'Enumerator'),(1, 'hwndParent'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassDevs():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiGetClassDevsW
def _define_SetupDiGetClassDevsExA():
    try:
        return WINFUNCTYPE(c_void_p,POINTER(Guid),win32more.Foundation.PSTR,win32more.Foundation.HWND,UInt32,c_void_p,win32more.Foundation.PSTR,c_void_p, use_last_error=True)(("SetupDiGetClassDevsExA", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'Enumerator'),(1, 'hwndParent'),(1, 'Flags'),(1, 'DeviceInfoSet'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassDevsExW():
    try:
        return WINFUNCTYPE(c_void_p,POINTER(Guid),win32more.Foundation.PWSTR,win32more.Foundation.HWND,UInt32,c_void_p,win32more.Foundation.PWSTR,c_void_p, use_last_error=True)(("SetupDiGetClassDevsExW", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'Enumerator'),(1, 'hwndParent'),(1, 'Flags'),(1, 'DeviceInfoSet'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassDevsEx():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiGetClassDevsExW
def _define_SetupDiGetINFClassA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,POINTER(Guid),POINTER(Byte),UInt32,POINTER(UInt32), use_last_error=True)(("SetupDiGetINFClassA", windll["SETUPAPI"]), ((1, 'InfName'),(1, 'ClassGuid'),(1, 'ClassName'),(1, 'ClassNameSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetINFClassW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,POINTER(Guid),POINTER(Char),UInt32,POINTER(UInt32), use_last_error=True)(("SetupDiGetINFClassW", windll["SETUPAPI"]), ((1, 'InfName'),(1, 'ClassGuid'),(1, 'ClassName'),(1, 'ClassNameSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetINFClass():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiGetINFClassW
def _define_SetupDiBuildClassInfoList():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(Guid),UInt32,POINTER(UInt32), use_last_error=True)(("SetupDiBuildClassInfoList", windll["SETUPAPI"]), ((1, 'Flags'),(1, 'ClassGuidList'),(1, 'ClassGuidListSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiBuildClassInfoListExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(Guid),UInt32,POINTER(UInt32),win32more.Foundation.PSTR,c_void_p, use_last_error=True)(("SetupDiBuildClassInfoListExA", windll["SETUPAPI"]), ((1, 'Flags'),(1, 'ClassGuidList'),(1, 'ClassGuidListSize'),(1, 'RequiredSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiBuildClassInfoListExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(Guid),UInt32,POINTER(UInt32),win32more.Foundation.PWSTR,c_void_p, use_last_error=True)(("SetupDiBuildClassInfoListExW", windll["SETUPAPI"]), ((1, 'Flags'),(1, 'ClassGuidList'),(1, 'ClassGuidListSize'),(1, 'RequiredSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiBuildClassInfoListEx():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiBuildClassInfoListExW
def _define_SetupDiGetClassDescriptionA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),POINTER(Byte),UInt32,POINTER(UInt32), use_last_error=True)(("SetupDiGetClassDescriptionA", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'ClassDescription'),(1, 'ClassDescriptionSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassDescriptionW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),POINTER(Char),UInt32,POINTER(UInt32), use_last_error=True)(("SetupDiGetClassDescriptionW", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'ClassDescription'),(1, 'ClassDescriptionSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassDescription():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiGetClassDescriptionW
def _define_SetupDiGetClassDescriptionExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),POINTER(Byte),UInt32,POINTER(UInt32),win32more.Foundation.PSTR,c_void_p, use_last_error=True)(("SetupDiGetClassDescriptionExA", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'ClassDescription'),(1, 'ClassDescriptionSize'),(1, 'RequiredSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassDescriptionExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),POINTER(Char),UInt32,POINTER(UInt32),win32more.Foundation.PWSTR,c_void_p, use_last_error=True)(("SetupDiGetClassDescriptionExW", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'ClassDescription'),(1, 'ClassDescriptionSize'),(1, 'RequiredSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassDescriptionEx():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiGetClassDescriptionExW
def _define_SetupDiCallClassInstaller():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=True)(("SetupDiCallClassInstaller", windll["SETUPAPI"]), ((1, 'InstallFunction'),(1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSelectDevice():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=True)(("SetupDiSelectDevice", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSelectBestCompatDrv():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=True)(("SetupDiSelectBestCompatDrv", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiInstallDevice():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=True)(("SetupDiInstallDevice", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiInstallDriverFiles():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=True)(("SetupDiInstallDriverFiles", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiRegisterCoDeviceInstallers():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=True)(("SetupDiRegisterCoDeviceInstallers", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiRemoveDevice():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=False)(("SetupDiRemoveDevice", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiUnremoveDevice():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=True)(("SetupDiUnremoveDevice", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiRestartDevices():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=True)(("SetupDiRestartDevices", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiChangeState():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=True)(("SetupDiChangeState", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiInstallClassA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PSTR,UInt32,c_void_p, use_last_error=True)(("SetupDiInstallClassA", windll["SETUPAPI"]), ((1, 'hwndParent'),(1, 'InfFileName'),(1, 'Flags'),(1, 'FileQueue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiInstallClassW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PWSTR,UInt32,c_void_p, use_last_error=True)(("SetupDiInstallClassW", windll["SETUPAPI"]), ((1, 'hwndParent'),(1, 'InfFileName'),(1, 'Flags'),(1, 'FileQueue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiInstallClass():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiInstallClassW
def _define_SetupDiInstallClassExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PSTR,UInt32,c_void_p,POINTER(Guid),c_void_p,c_void_p, use_last_error=True)(("SetupDiInstallClassExA", windll["SETUPAPI"]), ((1, 'hwndParent'),(1, 'InfFileName'),(1, 'Flags'),(1, 'FileQueue'),(1, 'InterfaceClassGuid'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiInstallClassExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PWSTR,UInt32,c_void_p,POINTER(Guid),c_void_p,c_void_p, use_last_error=True)(("SetupDiInstallClassExW", windll["SETUPAPI"]), ((1, 'hwndParent'),(1, 'InfFileName'),(1, 'Flags'),(1, 'FileQueue'),(1, 'InterfaceClassGuid'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiInstallClassEx():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiInstallClassExW
def _define_SetupDiOpenClassRegKey():
    try:
        return WINFUNCTYPE(win32more.System.Registry.HKEY,POINTER(Guid),UInt32, use_last_error=True)(("SetupDiOpenClassRegKey", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'samDesired'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiOpenClassRegKeyExA():
    try:
        return WINFUNCTYPE(win32more.System.Registry.HKEY,POINTER(Guid),UInt32,UInt32,win32more.Foundation.PSTR,c_void_p, use_last_error=True)(("SetupDiOpenClassRegKeyExA", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'samDesired'),(1, 'Flags'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiOpenClassRegKeyExW():
    try:
        return WINFUNCTYPE(win32more.System.Registry.HKEY,POINTER(Guid),UInt32,UInt32,win32more.Foundation.PWSTR,c_void_p, use_last_error=True)(("SetupDiOpenClassRegKeyExW", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'samDesired'),(1, 'Flags'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiOpenClassRegKeyEx():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiOpenClassRegKeyExW
def _define_SetupDiCreateDeviceInterfaceRegKeyA():
    try:
        return WINFUNCTYPE(win32more.System.Registry.HKEY,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head),UInt32,UInt32,c_void_p,win32more.Foundation.PSTR, use_last_error=True)(("SetupDiCreateDeviceInterfaceRegKeyA", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),(1, 'Reserved'),(1, 'samDesired'),(1, 'InfHandle'),(1, 'InfSectionName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCreateDeviceInterfaceRegKeyW():
    try:
        return WINFUNCTYPE(win32more.System.Registry.HKEY,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head),UInt32,UInt32,c_void_p,win32more.Foundation.PWSTR, use_last_error=True)(("SetupDiCreateDeviceInterfaceRegKeyW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),(1, 'Reserved'),(1, 'samDesired'),(1, 'InfHandle'),(1, 'InfSectionName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCreateDeviceInterfaceRegKey():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiCreateDeviceInterfaceRegKeyW
def _define_SetupDiOpenDeviceInterfaceRegKey():
    try:
        return WINFUNCTYPE(win32more.System.Registry.HKEY,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head),UInt32,UInt32, use_last_error=True)(("SetupDiOpenDeviceInterfaceRegKey", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),(1, 'Reserved'),(1, 'samDesired'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiDeleteDeviceInterfaceRegKey():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head),UInt32, use_last_error=True)(("SetupDiDeleteDeviceInterfaceRegKey", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCreateDevRegKeyA():
    try:
        return WINFUNCTYPE(win32more.System.Registry.HKEY,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,UInt32,UInt32,c_void_p,win32more.Foundation.PSTR, use_last_error=True)(("SetupDiCreateDevRegKeyA", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Scope'),(1, 'HwProfile'),(1, 'KeyType'),(1, 'InfHandle'),(1, 'InfSectionName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCreateDevRegKeyW():
    try:
        return WINFUNCTYPE(win32more.System.Registry.HKEY,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,UInt32,UInt32,c_void_p,win32more.Foundation.PWSTR, use_last_error=True)(("SetupDiCreateDevRegKeyW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Scope'),(1, 'HwProfile'),(1, 'KeyType'),(1, 'InfHandle'),(1, 'InfSectionName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCreateDevRegKey():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiCreateDevRegKeyW
def _define_SetupDiOpenDevRegKey():
    try:
        return WINFUNCTYPE(win32more.System.Registry.HKEY,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,UInt32,UInt32,UInt32, use_last_error=True)(("SetupDiOpenDevRegKey", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Scope'),(1, 'HwProfile'),(1, 'KeyType'),(1, 'samDesired'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiDeleteDevRegKey():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,UInt32,UInt32, use_last_error=True)(("SetupDiDeleteDevRegKey", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Scope'),(1, 'HwProfile'),(1, 'KeyType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetHwProfileList():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(UInt32),UInt32,POINTER(UInt32),POINTER(UInt32), use_last_error=True)(("SetupDiGetHwProfileList", windll["SETUPAPI"]), ((1, 'HwProfileList'),(1, 'HwProfileListSize'),(1, 'RequiredSize'),(1, 'CurrentlyActiveIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetHwProfileListExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(UInt32),UInt32,POINTER(UInt32),POINTER(UInt32),win32more.Foundation.PSTR,c_void_p, use_last_error=True)(("SetupDiGetHwProfileListExA", windll["SETUPAPI"]), ((1, 'HwProfileList'),(1, 'HwProfileListSize'),(1, 'RequiredSize'),(1, 'CurrentlyActiveIndex'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetHwProfileListExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(UInt32),UInt32,POINTER(UInt32),POINTER(UInt32),win32more.Foundation.PWSTR,c_void_p, use_last_error=True)(("SetupDiGetHwProfileListExW", windll["SETUPAPI"]), ((1, 'HwProfileList'),(1, 'HwProfileListSize'),(1, 'RequiredSize'),(1, 'CurrentlyActiveIndex'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetHwProfileListEx():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiGetHwProfileListExW
def _define_SetupDiGetDevicePropertyKeys():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.Properties.DEVPROPKEY),UInt32,POINTER(UInt32),UInt32, use_last_error=True)(("SetupDiGetDevicePropertyKeys", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'PropertyKeyArray'),(1, 'PropertyKeyCount'),(1, 'RequiredPropertyKeyCount'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDevicePropertyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),c_char_p_no,UInt32,POINTER(UInt32),UInt32, use_last_error=True)(("SetupDiGetDevicePropertyW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'RequiredSize'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetDevicePropertyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,c_char_p_no,UInt32,UInt32, use_last_error=True)(("SetupDiSetDevicePropertyW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceInterfacePropertyKeys():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head),POINTER(win32more.Devices.Properties.DEVPROPKEY),UInt32,POINTER(UInt32),UInt32, use_last_error=True)(("SetupDiGetDeviceInterfacePropertyKeys", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),(1, 'PropertyKeyArray'),(1, 'PropertyKeyCount'),(1, 'RequiredPropertyKeyCount'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceInterfacePropertyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),c_char_p_no,UInt32,POINTER(UInt32),UInt32, use_last_error=True)(("SetupDiGetDeviceInterfacePropertyW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'RequiredSize'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetDeviceInterfacePropertyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,c_char_p_no,UInt32,UInt32, use_last_error=True)(("SetupDiSetDeviceInterfacePropertyW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassPropertyKeys():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),POINTER(win32more.Devices.Properties.DEVPROPKEY),UInt32,POINTER(UInt32),UInt32, use_last_error=True)(("SetupDiGetClassPropertyKeys", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'PropertyKeyArray'),(1, 'PropertyKeyCount'),(1, 'RequiredPropertyKeyCount'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassPropertyKeysExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),POINTER(win32more.Devices.Properties.DEVPROPKEY),UInt32,POINTER(UInt32),UInt32,win32more.Foundation.PWSTR,c_void_p, use_last_error=True)(("SetupDiGetClassPropertyKeysExW", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'PropertyKeyArray'),(1, 'PropertyKeyCount'),(1, 'RequiredPropertyKeyCount'),(1, 'Flags'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassPropertyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),c_char_p_no,UInt32,POINTER(UInt32),UInt32, use_last_error=True)(("SetupDiGetClassPropertyW", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'RequiredSize'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassPropertyExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),c_char_p_no,UInt32,POINTER(UInt32),UInt32,win32more.Foundation.PWSTR,c_void_p, use_last_error=True)(("SetupDiGetClassPropertyExW", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'RequiredSize'),(1, 'Flags'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetClassPropertyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,c_char_p_no,UInt32,UInt32, use_last_error=True)(("SetupDiSetClassPropertyW", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetClassPropertyExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,c_char_p_no,UInt32,UInt32,win32more.Foundation.PWSTR,c_void_p, use_last_error=True)(("SetupDiSetClassPropertyExW", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'Flags'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceRegistryPropertyA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,POINTER(UInt32),c_char_p_no,UInt32,POINTER(UInt32), use_last_error=True)(("SetupDiGetDeviceRegistryPropertyA", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Property'),(1, 'PropertyRegDataType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceRegistryPropertyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,POINTER(UInt32),c_char_p_no,UInt32,POINTER(UInt32), use_last_error=True)(("SetupDiGetDeviceRegistryPropertyW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Property'),(1, 'PropertyRegDataType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceRegistryProperty():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiGetDeviceRegistryPropertyW
def _define_SetupDiGetClassRegistryPropertyA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),UInt32,POINTER(UInt32),c_char_p_no,UInt32,POINTER(UInt32),win32more.Foundation.PSTR,c_void_p, use_last_error=True)(("SetupDiGetClassRegistryPropertyA", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'Property'),(1, 'PropertyRegDataType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'RequiredSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassRegistryPropertyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),UInt32,POINTER(UInt32),c_char_p_no,UInt32,POINTER(UInt32),win32more.Foundation.PWSTR,c_void_p, use_last_error=True)(("SetupDiGetClassRegistryPropertyW", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'Property'),(1, 'PropertyRegDataType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'RequiredSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassRegistryProperty():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiGetClassRegistryPropertyW
def _define_SetupDiSetDeviceRegistryPropertyA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,c_char_p_no,UInt32, use_last_error=True)(("SetupDiSetDeviceRegistryPropertyA", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Property'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetDeviceRegistryPropertyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,c_char_p_no,UInt32, use_last_error=True)(("SetupDiSetDeviceRegistryPropertyW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Property'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetDeviceRegistryProperty():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiSetDeviceRegistryPropertyW
def _define_SetupDiSetClassRegistryPropertyA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),UInt32,c_char_p_no,UInt32,win32more.Foundation.PSTR,c_void_p, use_last_error=True)(("SetupDiSetClassRegistryPropertyA", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'Property'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetClassRegistryPropertyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),UInt32,c_char_p_no,UInt32,win32more.Foundation.PWSTR,c_void_p, use_last_error=True)(("SetupDiSetClassRegistryPropertyW", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'Property'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetClassRegistryProperty():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiSetClassRegistryPropertyW
def _define_SetupDiGetDeviceInstallParamsA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINSTALL_PARAMS_A_head), use_last_error=True)(("SetupDiGetDeviceInstallParamsA", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DeviceInstallParams'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceInstallParamsW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINSTALL_PARAMS_W_head), use_last_error=True)(("SetupDiGetDeviceInstallParamsW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DeviceInstallParams'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceInstallParams():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiGetDeviceInstallParamsW
def _define_SetupDiGetClassInstallParamsA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER_head),UInt32,POINTER(UInt32), use_last_error=True)(("SetupDiGetClassInstallParamsA", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'ClassInstallParams'),(1, 'ClassInstallParamsSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassInstallParamsW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER_head),UInt32,POINTER(UInt32), use_last_error=True)(("SetupDiGetClassInstallParamsW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'ClassInstallParams'),(1, 'ClassInstallParamsSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassInstallParams():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiGetClassInstallParamsW
def _define_SetupDiSetDeviceInstallParamsA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINSTALL_PARAMS_A_head), use_last_error=True)(("SetupDiSetDeviceInstallParamsA", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DeviceInstallParams'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetDeviceInstallParamsW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINSTALL_PARAMS_W_head), use_last_error=True)(("SetupDiSetDeviceInstallParamsW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DeviceInstallParams'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetDeviceInstallParams():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiSetDeviceInstallParamsW
def _define_SetupDiSetClassInstallParamsA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER_head),UInt32, use_last_error=True)(("SetupDiSetClassInstallParamsA", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'ClassInstallParams'),(1, 'ClassInstallParamsSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetClassInstallParamsW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER_head),UInt32, use_last_error=True)(("SetupDiSetClassInstallParamsW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'ClassInstallParams'),(1, 'ClassInstallParamsSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetClassInstallParams():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiSetClassInstallParamsW
def _define_SetupDiGetDriverInstallParamsA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_A_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINSTALL_PARAMS_head), use_last_error=True)(("SetupDiGetDriverInstallParamsA", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverInfoData'),(1, 'DriverInstallParams'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDriverInstallParamsW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_W_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINSTALL_PARAMS_head), use_last_error=True)(("SetupDiGetDriverInstallParamsW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverInfoData'),(1, 'DriverInstallParams'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDriverInstallParams():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiGetDriverInstallParamsW
def _define_SetupDiSetDriverInstallParamsA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_A_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINSTALL_PARAMS_head), use_last_error=True)(("SetupDiSetDriverInstallParamsA", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverInfoData'),(1, 'DriverInstallParams'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetDriverInstallParamsW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_W_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINSTALL_PARAMS_head), use_last_error=True)(("SetupDiSetDriverInstallParamsW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverInfoData'),(1, 'DriverInstallParams'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetDriverInstallParams():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiSetDriverInstallParamsW
def _define_SetupDiLoadClassIcon():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),POINTER(win32more.UI.WindowsAndMessaging.HICON),POINTER(Int32), use_last_error=True)(("SetupDiLoadClassIcon", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'LargeIcon'),(1, 'MiniIconIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiLoadDeviceIcon():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,UInt32,UInt32,POINTER(win32more.UI.WindowsAndMessaging.HICON), use_last_error=True)(("SetupDiLoadDeviceIcon", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'cxIcon'),(1, 'cyIcon'),(1, 'Flags'),(1, 'hIcon'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiDrawMiniIcon():
    try:
        return WINFUNCTYPE(Int32,win32more.Graphics.Gdi.HDC,win32more.Foundation.RECT,Int32,UInt32, use_last_error=False)(("SetupDiDrawMiniIcon", windll["SETUPAPI"]), ((1, 'hdc'),(1, 'rc'),(1, 'MiniIconIndex'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassBitmapIndex():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),POINTER(Int32), use_last_error=True)(("SetupDiGetClassBitmapIndex", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'MiniIconIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassImageList():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_CLASSIMAGELIST_DATA_head), use_last_error=True)(("SetupDiGetClassImageList", windll["SETUPAPI"]), ((1, 'ClassImageListData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassImageListExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_CLASSIMAGELIST_DATA_head),win32more.Foundation.PSTR,c_void_p, use_last_error=True)(("SetupDiGetClassImageListExA", windll["SETUPAPI"]), ((1, 'ClassImageListData'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassImageListExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_CLASSIMAGELIST_DATA_head),win32more.Foundation.PWSTR,c_void_p, use_last_error=True)(("SetupDiGetClassImageListExW", windll["SETUPAPI"]), ((1, 'ClassImageListData'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassImageListEx():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiGetClassImageListExW
def _define_SetupDiGetClassImageIndex():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_CLASSIMAGELIST_DATA_head),POINTER(Guid),POINTER(Int32), use_last_error=True)(("SetupDiGetClassImageIndex", windll["SETUPAPI"]), ((1, 'ClassImageListData'),(1, 'ClassGuid'),(1, 'ImageIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiDestroyClassImageList():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_CLASSIMAGELIST_DATA_head), use_last_error=True)(("SetupDiDestroyClassImageList", windll["SETUPAPI"]), ((1, 'ClassImageListData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassDevPropertySheetsA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.UI.Controls.PROPSHEETHEADERA_V2_head),UInt32,POINTER(UInt32),UInt32, use_last_error=True)(("SetupDiGetClassDevPropertySheetsA", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'PropertySheetHeader'),(1, 'PropertySheetHeaderPageListSize'),(1, 'RequiredSize'),(1, 'PropertySheetType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassDevPropertySheetsW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.UI.Controls.PROPSHEETHEADERW_V2_head),UInt32,POINTER(UInt32),UInt32, use_last_error=True)(("SetupDiGetClassDevPropertySheetsW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'PropertySheetHeader'),(1, 'PropertySheetHeaderPageListSize'),(1, 'RequiredSize'),(1, 'PropertySheetType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassDevPropertySheets():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiGetClassDevPropertySheetsW
def _define_SetupDiAskForOEMDisk():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=True)(("SetupDiAskForOEMDisk", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSelectOEMDrv():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=True)(("SetupDiSelectOEMDrv", windll["SETUPAPI"]), ((1, 'hwndParent'),(1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiClassNameFromGuidA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),POINTER(Byte),UInt32,POINTER(UInt32), use_last_error=True)(("SetupDiClassNameFromGuidA", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'ClassName'),(1, 'ClassNameSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiClassNameFromGuidW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),POINTER(Char),UInt32,POINTER(UInt32), use_last_error=True)(("SetupDiClassNameFromGuidW", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'ClassName'),(1, 'ClassNameSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiClassNameFromGuid():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiClassNameFromGuidW
def _define_SetupDiClassNameFromGuidExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),POINTER(Byte),UInt32,POINTER(UInt32),win32more.Foundation.PSTR,c_void_p, use_last_error=True)(("SetupDiClassNameFromGuidExA", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'ClassName'),(1, 'ClassNameSize'),(1, 'RequiredSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiClassNameFromGuidExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),POINTER(Char),UInt32,POINTER(UInt32),win32more.Foundation.PWSTR,c_void_p, use_last_error=True)(("SetupDiClassNameFromGuidExW", windll["SETUPAPI"]), ((1, 'ClassGuid'),(1, 'ClassName'),(1, 'ClassNameSize'),(1, 'RequiredSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiClassNameFromGuidEx():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiClassNameFromGuidExW
def _define_SetupDiClassGuidsFromNameA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,POINTER(Guid),UInt32,POINTER(UInt32), use_last_error=True)(("SetupDiClassGuidsFromNameA", windll["SETUPAPI"]), ((1, 'ClassName'),(1, 'ClassGuidList'),(1, 'ClassGuidListSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiClassGuidsFromNameW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,POINTER(Guid),UInt32,POINTER(UInt32), use_last_error=True)(("SetupDiClassGuidsFromNameW", windll["SETUPAPI"]), ((1, 'ClassName'),(1, 'ClassGuidList'),(1, 'ClassGuidListSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiClassGuidsFromName():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiClassGuidsFromNameW
def _define_SetupDiClassGuidsFromNameExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,POINTER(Guid),UInt32,POINTER(UInt32),win32more.Foundation.PSTR,c_void_p, use_last_error=True)(("SetupDiClassGuidsFromNameExA", windll["SETUPAPI"]), ((1, 'ClassName'),(1, 'ClassGuidList'),(1, 'ClassGuidListSize'),(1, 'RequiredSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiClassGuidsFromNameExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,POINTER(Guid),UInt32,POINTER(UInt32),win32more.Foundation.PWSTR,c_void_p, use_last_error=True)(("SetupDiClassGuidsFromNameExW", windll["SETUPAPI"]), ((1, 'ClassName'),(1, 'ClassGuidList'),(1, 'ClassGuidListSize'),(1, 'RequiredSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiClassGuidsFromNameEx():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiClassGuidsFromNameExW
def _define_SetupDiGetHwProfileFriendlyNameA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(Byte),UInt32,POINTER(UInt32), use_last_error=True)(("SetupDiGetHwProfileFriendlyNameA", windll["SETUPAPI"]), ((1, 'HwProfile'),(1, 'FriendlyName'),(1, 'FriendlyNameSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetHwProfileFriendlyNameW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(Char),UInt32,POINTER(UInt32), use_last_error=True)(("SetupDiGetHwProfileFriendlyNameW", windll["SETUPAPI"]), ((1, 'HwProfile'),(1, 'FriendlyName'),(1, 'FriendlyNameSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetHwProfileFriendlyName():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiGetHwProfileFriendlyNameW
def _define_SetupDiGetHwProfileFriendlyNameExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(Byte),UInt32,POINTER(UInt32),win32more.Foundation.PSTR,c_void_p, use_last_error=True)(("SetupDiGetHwProfileFriendlyNameExA", windll["SETUPAPI"]), ((1, 'HwProfile'),(1, 'FriendlyName'),(1, 'FriendlyNameSize'),(1, 'RequiredSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetHwProfileFriendlyNameExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(Char),UInt32,POINTER(UInt32),win32more.Foundation.PWSTR,c_void_p, use_last_error=True)(("SetupDiGetHwProfileFriendlyNameExW", windll["SETUPAPI"]), ((1, 'HwProfile'),(1, 'FriendlyName'),(1, 'FriendlyNameSize'),(1, 'RequiredSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetHwProfileFriendlyNameEx():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiGetHwProfileFriendlyNameExW
def _define_SetupDiGetWizardPage():
    try:
        return WINFUNCTYPE(win32more.UI.Controls.HPROPSHEETPAGE,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_INSTALLWIZARD_DATA_head),UInt32,UInt32, use_last_error=False)(("SetupDiGetWizardPage", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'InstallWizardData'),(1, 'PageType'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetSelectedDevice():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=True)(("SetupDiGetSelectedDevice", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetSelectedDevice():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head), use_last_error=True)(("SetupDiSetSelectedDevice", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetActualModelsSectionA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head),POINTER(Byte),UInt32,POINTER(UInt32),c_void_p, use_last_error=True)(("SetupDiGetActualModelsSectionA", windll["SETUPAPI"]), ((1, 'Context'),(1, 'AlternatePlatformInfo'),(1, 'InfSectionWithExt'),(1, 'InfSectionWithExtSize'),(1, 'RequiredSize'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetActualModelsSectionW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head),POINTER(Char),UInt32,POINTER(UInt32),c_void_p, use_last_error=True)(("SetupDiGetActualModelsSectionW", windll["SETUPAPI"]), ((1, 'Context'),(1, 'AlternatePlatformInfo'),(1, 'InfSectionWithExt'),(1, 'InfSectionWithExtSize'),(1, 'RequiredSize'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetActualModelsSection():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiGetActualModelsSectionW
def _define_SetupDiGetActualSectionToInstallA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,POINTER(Byte),UInt32,POINTER(UInt32),POINTER(win32more.Foundation.PSTR), use_last_error=True)(("SetupDiGetActualSectionToInstallA", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'InfSectionName'),(1, 'InfSectionWithExt'),(1, 'InfSectionWithExtSize'),(1, 'RequiredSize'),(1, 'Extension'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetActualSectionToInstallW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,POINTER(Char),UInt32,POINTER(UInt32),POINTER(win32more.Foundation.PWSTR), use_last_error=True)(("SetupDiGetActualSectionToInstallW", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'InfSectionName'),(1, 'InfSectionWithExt'),(1, 'InfSectionWithExtSize'),(1, 'RequiredSize'),(1, 'Extension'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetActualSectionToInstall():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiGetActualSectionToInstallW
def _define_SetupDiGetActualSectionToInstallExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head),POINTER(Byte),UInt32,POINTER(UInt32),POINTER(win32more.Foundation.PSTR),c_void_p, use_last_error=True)(("SetupDiGetActualSectionToInstallExA", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'InfSectionName'),(1, 'AlternatePlatformInfo'),(1, 'InfSectionWithExt'),(1, 'InfSectionWithExtSize'),(1, 'RequiredSize'),(1, 'Extension'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetActualSectionToInstallExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head),POINTER(Char),UInt32,POINTER(UInt32),POINTER(win32more.Foundation.PWSTR),c_void_p, use_last_error=True)(("SetupDiGetActualSectionToInstallExW", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'InfSectionName'),(1, 'AlternatePlatformInfo'),(1, 'InfSectionWithExt'),(1, 'InfSectionWithExtSize'),(1, 'RequiredSize'),(1, 'Extension'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetActualSectionToInstallEx():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiGetActualSectionToInstallExW
def _define_SetupEnumInfSectionsA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,POINTER(Byte),UInt32,POINTER(UInt32), use_last_error=True)(("SetupEnumInfSectionsA", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'Index'),(1, 'Buffer'),(1, 'Size'),(1, 'SizeNeeded'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupEnumInfSectionsW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,POINTER(Char),UInt32,POINTER(UInt32), use_last_error=True)(("SetupEnumInfSectionsW", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'Index'),(1, 'Buffer'),(1, 'Size'),(1, 'SizeNeeded'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupEnumInfSections():
    return win32more.Devices.DeviceAndDriverInstallation.SetupEnumInfSectionsW
def _define_SetupVerifyInfFileA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_INF_SIGNER_INFO_V2_A_head), use_last_error=False)(("SetupVerifyInfFileA", windll["SETUPAPI"]), ((1, 'InfName'),(1, 'AltPlatformInfo'),(1, 'InfSignerInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupVerifyInfFileW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_INF_SIGNER_INFO_V2_W_head), use_last_error=False)(("SetupVerifyInfFileW", windll["SETUPAPI"]), ((1, 'InfName'),(1, 'AltPlatformInfo'),(1, 'InfSignerInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupVerifyInfFile():
    return win32more.Devices.DeviceAndDriverInstallation.SetupVerifyInfFileW
def _define_SetupDiGetCustomDevicePropertyA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),win32more.Foundation.PSTR,UInt32,POINTER(UInt32),c_char_p_no,UInt32,POINTER(UInt32), use_last_error=True)(("SetupDiGetCustomDevicePropertyA", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'CustomPropertyName'),(1, 'Flags'),(1, 'PropertyRegDataType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetCustomDevicePropertyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),win32more.Foundation.PWSTR,UInt32,POINTER(UInt32),c_char_p_no,UInt32,POINTER(UInt32), use_last_error=True)(("SetupDiGetCustomDevicePropertyW", windll["SETUPAPI"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'CustomPropertyName'),(1, 'Flags'),(1, 'PropertyRegDataType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetCustomDeviceProperty():
    return win32more.Devices.DeviceAndDriverInstallation.SetupDiGetCustomDevicePropertyW
def _define_SetupConfigureWmiFromInfSectionA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,UInt32, use_last_error=False)(("SetupConfigureWmiFromInfSectionA", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'SectionName'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupConfigureWmiFromInfSectionW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,UInt32, use_last_error=False)(("SetupConfigureWmiFromInfSectionW", windll["SETUPAPI"]), ((1, 'InfHandle'),(1, 'SectionName'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupConfigureWmiFromInfSection():
    return win32more.Devices.DeviceAndDriverInstallation.SetupConfigureWmiFromInfSectionW
def _define_CM_Add_Empty_Log_Conf():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UInt32,win32more.Data.HtmlHelp.PRIORITY,UInt32, use_last_error=False)(("CM_Add_Empty_Log_Conf", windll["CFGMGR32"]), ((1, 'plcLogConf'),(1, 'dnDevInst'),(1, 'Priority'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Add_Empty_Log_Conf_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UInt32,win32more.Data.HtmlHelp.PRIORITY,UInt32,IntPtr, use_last_error=False)(("CM_Add_Empty_Log_Conf_Ex", windll["CFGMGR32"]), ((1, 'plcLogConf'),(1, 'dnDevInst'),(1, 'Priority'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Add_IDA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,win32more.Foundation.PSTR,UInt32, use_last_error=False)(("CM_Add_IDA", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'pszID'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Add_IDW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,win32more.Foundation.PWSTR,UInt32, use_last_error=False)(("CM_Add_IDW", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'pszID'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Add_ID():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Add_IDW
def _define_CM_Add_ID_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,win32more.Foundation.PSTR,UInt32,IntPtr, use_last_error=False)(("CM_Add_ID_ExA", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'pszID'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Add_ID_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,win32more.Foundation.PWSTR,UInt32,IntPtr, use_last_error=False)(("CM_Add_ID_ExW", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'pszID'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Add_ID_Ex():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Add_ID_ExW
def _define_CM_Add_Range():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt64,UInt64,UIntPtr,UInt32, use_last_error=False)(("CM_Add_Range", windll["CFGMGR32"]), ((1, 'ullStartValue'),(1, 'ullEndValue'),(1, 'rlh'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Add_Res_Des():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UIntPtr,UInt32,c_void_p,UInt32,UInt32, use_last_error=False)(("CM_Add_Res_Des", windll["CFGMGR32"]), ((1, 'prdResDes'),(1, 'lcLogConf'),(1, 'ResourceID'),(1, 'ResourceData'),(1, 'ResourceLen'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Add_Res_Des_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UIntPtr,UInt32,c_void_p,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Add_Res_Des_Ex", windll["CFGMGR32"]), ((1, 'prdResDes'),(1, 'lcLogConf'),(1, 'ResourceID'),(1, 'ResourceData'),(1, 'ResourceLen'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Connect_MachineA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,POINTER(IntPtr), use_last_error=False)(("CM_Connect_MachineA", windll["CFGMGR32"]), ((1, 'UNCServerName'),(1, 'phMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Connect_MachineW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,POINTER(IntPtr), use_last_error=False)(("CM_Connect_MachineW", windll["CFGMGR32"]), ((1, 'UNCServerName'),(1, 'phMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Connect_Machine():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Connect_MachineW
def _define_CM_Create_DevNodeA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),POINTER(SByte),UInt32,UInt32, use_last_error=False)(("CM_Create_DevNodeA", windll["CFGMGR32"]), ((1, 'pdnDevInst'),(1, 'pDeviceID'),(1, 'dnParent'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Create_DevNodeW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),POINTER(UInt16),UInt32,UInt32, use_last_error=False)(("CM_Create_DevNodeW", windll["CFGMGR32"]), ((1, 'pdnDevInst'),(1, 'pDeviceID'),(1, 'dnParent'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Create_DevNode():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Create_DevNodeW
def _define_CM_Create_DevNode_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),POINTER(SByte),UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Create_DevNode_ExA", windll["CFGMGR32"]), ((1, 'pdnDevInst'),(1, 'pDeviceID'),(1, 'dnParent'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Create_DevNode_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),POINTER(UInt16),UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Create_DevNode_ExW", windll["CFGMGR32"]), ((1, 'pdnDevInst'),(1, 'pDeviceID'),(1, 'dnParent'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Create_DevNode_Ex():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Create_DevNode_ExW
def _define_CM_Create_Range_List():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UInt32, use_last_error=False)(("CM_Create_Range_List", windll["CFGMGR32"]), ((1, 'prlh'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Delete_Class_Key():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),UInt32, use_last_error=False)(("CM_Delete_Class_Key", windll["CFGMGR32"]), ((1, 'ClassGuid'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Delete_Class_Key_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),UInt32,IntPtr, use_last_error=False)(("CM_Delete_Class_Key_Ex", windll["CFGMGR32"]), ((1, 'ClassGuid'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Delete_DevNode_Key():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,UInt32, use_last_error=False)(("CM_Delete_DevNode_Key", windll["CFGMGR32"]), ((1, 'dnDevNode'),(1, 'ulHardwareProfile'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Delete_DevNode_Key_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Delete_DevNode_Key_Ex", windll["CFGMGR32"]), ((1, 'dnDevNode'),(1, 'ulHardwareProfile'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Delete_Range():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt64,UInt64,UIntPtr,UInt32, use_last_error=False)(("CM_Delete_Range", windll["CFGMGR32"]), ((1, 'ullStartValue'),(1, 'ullEndValue'),(1, 'rlh'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Detect_Resource_Conflict():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,c_void_p,UInt32,POINTER(win32more.Foundation.BOOL),UInt32, use_last_error=False)(("CM_Detect_Resource_Conflict", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'ResourceID'),(1, 'ResourceData'),(1, 'ResourceLen'),(1, 'pbConflictDetected'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Detect_Resource_Conflict_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,c_void_p,UInt32,POINTER(win32more.Foundation.BOOL),UInt32,IntPtr, use_last_error=False)(("CM_Detect_Resource_Conflict_Ex", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'ResourceID'),(1, 'ResourceData'),(1, 'ResourceLen'),(1, 'pbConflictDetected'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Disable_DevNode():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32, use_last_error=False)(("CM_Disable_DevNode", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Disable_DevNode_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Disable_DevNode_Ex", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Disconnect_Machine():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,IntPtr, use_last_error=False)(("CM_Disconnect_Machine", windll["CFGMGR32"]), ((1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Dup_Range_List():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,UIntPtr,UInt32, use_last_error=False)(("CM_Dup_Range_List", windll["CFGMGR32"]), ((1, 'rlhOld'),(1, 'rlhNew'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Enable_DevNode():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32, use_last_error=False)(("CM_Enable_DevNode", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Enable_DevNode_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Enable_DevNode_Ex", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Enumerate_Classes():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(Guid),UInt32, use_last_error=False)(("CM_Enumerate_Classes", windll["CFGMGR32"]), ((1, 'ulClassIndex'),(1, 'ClassGuid'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Enumerate_Classes_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(Guid),UInt32,IntPtr, use_last_error=False)(("CM_Enumerate_Classes_Ex", windll["CFGMGR32"]), ((1, 'ulClassIndex'),(1, 'ClassGuid'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Enumerate_EnumeratorsA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(Byte),POINTER(UInt32),UInt32, use_last_error=False)(("CM_Enumerate_EnumeratorsA", windll["CFGMGR32"]), ((1, 'ulEnumIndex'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Enumerate_EnumeratorsW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(Char),POINTER(UInt32),UInt32, use_last_error=False)(("CM_Enumerate_EnumeratorsW", windll["CFGMGR32"]), ((1, 'ulEnumIndex'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Enumerate_Enumerators():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Enumerate_EnumeratorsW
def _define_CM_Enumerate_Enumerators_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(Byte),POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Enumerate_Enumerators_ExA", windll["CFGMGR32"]), ((1, 'ulEnumIndex'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Enumerate_Enumerators_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(Char),POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Enumerate_Enumerators_ExW", windll["CFGMGR32"]), ((1, 'ulEnumIndex'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Enumerate_Enumerators_Ex():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Enumerate_Enumerators_ExW
def _define_CM_Find_Range():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt64),UInt64,UInt32,UInt64,UInt64,UIntPtr,UInt32, use_last_error=False)(("CM_Find_Range", windll["CFGMGR32"]), ((1, 'pullStart'),(1, 'ullStart'),(1, 'ulLength'),(1, 'ullAlignment'),(1, 'ullEnd'),(1, 'rlh'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_First_Range():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,POINTER(UInt64),POINTER(UInt64),POINTER(UIntPtr),UInt32, use_last_error=False)(("CM_First_Range", windll["CFGMGR32"]), ((1, 'rlh'),(1, 'pullStart'),(1, 'pullEnd'),(1, 'preElement'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Free_Log_Conf():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,UInt32, use_last_error=False)(("CM_Free_Log_Conf", windll["CFGMGR32"]), ((1, 'lcLogConfToBeFreed'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Free_Log_Conf_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,UInt32,IntPtr, use_last_error=False)(("CM_Free_Log_Conf_Ex", windll["CFGMGR32"]), ((1, 'lcLogConfToBeFreed'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Free_Log_Conf_Handle():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr, use_last_error=False)(("CM_Free_Log_Conf_Handle", windll["CFGMGR32"]), ((1, 'lcLogConf'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Free_Range_List():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,UInt32, use_last_error=False)(("CM_Free_Range_List", windll["CFGMGR32"]), ((1, 'rlh'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Free_Res_Des():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UIntPtr,UInt32, use_last_error=False)(("CM_Free_Res_Des", windll["CFGMGR32"]), ((1, 'prdResDes'),(1, 'rdResDes'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Free_Res_Des_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UIntPtr,UInt32,IntPtr, use_last_error=False)(("CM_Free_Res_Des_Ex", windll["CFGMGR32"]), ((1, 'prdResDes'),(1, 'rdResDes'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Free_Res_Des_Handle():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr, use_last_error=False)(("CM_Free_Res_Des_Handle", windll["CFGMGR32"]), ((1, 'rdResDes'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Child():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,UInt32, use_last_error=False)(("CM_Get_Child", windll["CFGMGR32"]), ((1, 'pdnDevInst'),(1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Child_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Get_Child_Ex", windll["CFGMGR32"]), ((1, 'pdnDevInst'),(1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_NameA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),POINTER(Byte),POINTER(UInt32),UInt32, use_last_error=False)(("CM_Get_Class_NameA", windll["CFGMGR32"]), ((1, 'ClassGuid'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_NameW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),POINTER(Char),POINTER(UInt32),UInt32, use_last_error=False)(("CM_Get_Class_NameW", windll["CFGMGR32"]), ((1, 'ClassGuid'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_Name():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_Class_NameW
def _define_CM_Get_Class_Name_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),POINTER(Byte),POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Get_Class_Name_ExA", windll["CFGMGR32"]), ((1, 'ClassGuid'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_Name_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),POINTER(Char),POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Get_Class_Name_ExW", windll["CFGMGR32"]), ((1, 'ClassGuid'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_Name_Ex():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_Class_Name_ExW
def _define_CM_Get_Class_Key_NameA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),POINTER(Byte),POINTER(UInt32),UInt32, use_last_error=False)(("CM_Get_Class_Key_NameA", windll["CFGMGR32"]), ((1, 'ClassGuid'),(1, 'pszKeyName'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_Key_NameW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),POINTER(Char),POINTER(UInt32),UInt32, use_last_error=False)(("CM_Get_Class_Key_NameW", windll["CFGMGR32"]), ((1, 'ClassGuid'),(1, 'pszKeyName'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_Key_Name():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_Class_Key_NameW
def _define_CM_Get_Class_Key_Name_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),POINTER(Byte),POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Get_Class_Key_Name_ExA", windll["CFGMGR32"]), ((1, 'ClassGuid'),(1, 'pszKeyName'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_Key_Name_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),POINTER(Char),POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Get_Class_Key_Name_ExW", windll["CFGMGR32"]), ((1, 'ClassGuid'),(1, 'pszKeyName'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_Key_Name_Ex():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_Class_Key_Name_ExW
def _define_CM_Get_Depth():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,UInt32, use_last_error=False)(("CM_Get_Depth", windll["CFGMGR32"]), ((1, 'pulDepth'),(1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Depth_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Get_Depth_Ex", windll["CFGMGR32"]), ((1, 'pulDepth'),(1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_IDA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(Byte),UInt32,UInt32, use_last_error=False)(("CM_Get_Device_IDA", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_IDW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(Char),UInt32,UInt32, use_last_error=False)(("CM_Get_Device_IDW", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_ID():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_Device_IDW
def _define_CM_Get_Device_ID_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(Byte),UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Get_Device_ID_ExA", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_ID_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(Char),UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Get_Device_ID_ExW", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_ID_Ex():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_Device_ID_ExW
def _define_CM_Get_Device_ID_ListA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,POINTER(Byte),UInt32,UInt32, use_last_error=False)(("CM_Get_Device_ID_ListA", windll["CFGMGR32"]), ((1, 'pszFilter'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_ID_ListW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,POINTER(Char),UInt32,UInt32, use_last_error=False)(("CM_Get_Device_ID_ListW", windll["CFGMGR32"]), ((1, 'pszFilter'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_ID_List():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_Device_ID_ListW
def _define_CM_Get_Device_ID_List_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,POINTER(Byte),UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Get_Device_ID_List_ExA", windll["CFGMGR32"]), ((1, 'pszFilter'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_ID_List_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,POINTER(Char),UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Get_Device_ID_List_ExW", windll["CFGMGR32"]), ((1, 'pszFilter'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_ID_List_Ex():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_Device_ID_List_ExW
def _define_CM_Get_Device_ID_List_SizeA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),win32more.Foundation.PSTR,UInt32, use_last_error=False)(("CM_Get_Device_ID_List_SizeA", windll["CFGMGR32"]), ((1, 'pulLen'),(1, 'pszFilter'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_ID_List_SizeW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),win32more.Foundation.PWSTR,UInt32, use_last_error=False)(("CM_Get_Device_ID_List_SizeW", windll["CFGMGR32"]), ((1, 'pulLen'),(1, 'pszFilter'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_ID_List_Size():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_Device_ID_List_SizeW
def _define_CM_Get_Device_ID_List_Size_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),win32more.Foundation.PSTR,UInt32,IntPtr, use_last_error=False)(("CM_Get_Device_ID_List_Size_ExA", windll["CFGMGR32"]), ((1, 'pulLen'),(1, 'pszFilter'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_ID_List_Size_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),win32more.Foundation.PWSTR,UInt32,IntPtr, use_last_error=False)(("CM_Get_Device_ID_List_Size_ExW", windll["CFGMGR32"]), ((1, 'pulLen'),(1, 'pszFilter'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_ID_List_Size_Ex():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_Device_ID_List_Size_ExW
def _define_CM_Get_Device_ID_Size():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,UInt32, use_last_error=False)(("CM_Get_Device_ID_Size", windll["CFGMGR32"]), ((1, 'pulLen'),(1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_ID_Size_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Get_Device_ID_Size_Ex", windll["CFGMGR32"]), ((1, 'pulLen'),(1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_PropertyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),c_char_p_no,POINTER(UInt32),UInt32, use_last_error=False)(("CM_Get_DevNode_PropertyW", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Property_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),c_char_p_no,POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Get_DevNode_Property_ExW", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Property_Keys():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.Properties.DEVPROPKEY),POINTER(UInt32),UInt32, use_last_error=False)(("CM_Get_DevNode_Property_Keys", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'PropertyKeyArray'),(1, 'PropertyKeyCount'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Property_Keys_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.Properties.DEVPROPKEY),POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Get_DevNode_Property_Keys_Ex", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'PropertyKeyArray'),(1, 'PropertyKeyCount'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Registry_PropertyA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,POINTER(UInt32),c_void_p,POINTER(UInt32),UInt32, use_last_error=False)(("CM_Get_DevNode_Registry_PropertyA", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'ulProperty'),(1, 'pulRegDataType'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Registry_PropertyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,POINTER(UInt32),c_void_p,POINTER(UInt32),UInt32, use_last_error=False)(("CM_Get_DevNode_Registry_PropertyW", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'ulProperty'),(1, 'pulRegDataType'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Registry_Property():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_DevNode_Registry_PropertyW
def _define_CM_Get_DevNode_Registry_Property_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,POINTER(UInt32),c_void_p,POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Get_DevNode_Registry_Property_ExA", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'ulProperty'),(1, 'pulRegDataType'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Registry_Property_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,POINTER(UInt32),c_void_p,POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Get_DevNode_Registry_Property_ExW", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'ulProperty'),(1, 'pulRegDataType'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Registry_Property_Ex():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_DevNode_Registry_Property_ExW
def _define_CM_Get_DevNode_Custom_PropertyA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,win32more.Foundation.PSTR,POINTER(UInt32),c_void_p,POINTER(UInt32),UInt32, use_last_error=False)(("CM_Get_DevNode_Custom_PropertyA", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'pszCustomPropertyName'),(1, 'pulRegDataType'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Custom_PropertyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,win32more.Foundation.PWSTR,POINTER(UInt32),c_void_p,POINTER(UInt32),UInt32, use_last_error=False)(("CM_Get_DevNode_Custom_PropertyW", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'pszCustomPropertyName'),(1, 'pulRegDataType'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Custom_Property():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_DevNode_Custom_PropertyW
def _define_CM_Get_DevNode_Custom_Property_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,win32more.Foundation.PSTR,POINTER(UInt32),c_void_p,POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Get_DevNode_Custom_Property_ExA", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'pszCustomPropertyName'),(1, 'pulRegDataType'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Custom_Property_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,win32more.Foundation.PWSTR,POINTER(UInt32),c_void_p,POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Get_DevNode_Custom_Property_ExW", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'pszCustomPropertyName'),(1, 'pulRegDataType'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Custom_Property_Ex():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_DevNode_Custom_Property_ExW
def _define_CM_Get_DevNode_Status():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),POINTER(UInt32),UInt32,UInt32, use_last_error=False)(("CM_Get_DevNode_Status", windll["CFGMGR32"]), ((1, 'pulStatus'),(1, 'pulProblemNumber'),(1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Status_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),POINTER(UInt32),UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Get_DevNode_Status_Ex", windll["CFGMGR32"]), ((1, 'pulStatus'),(1, 'pulProblemNumber'),(1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_First_Log_Conf():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UInt32,UInt32, use_last_error=False)(("CM_Get_First_Log_Conf", windll["CFGMGR32"]), ((1, 'plcLogConf'),(1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_First_Log_Conf_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Get_First_Log_Conf_Ex", windll["CFGMGR32"]), ((1, 'plcLogConf'),(1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Global_State():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32, use_last_error=False)(("CM_Get_Global_State", windll["CFGMGR32"]), ((1, 'pulState'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Global_State_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Get_Global_State_Ex", windll["CFGMGR32"]), ((1, 'pulState'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Hardware_Profile_InfoA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.HWProfileInfo_sA_head),UInt32, use_last_error=False)(("CM_Get_Hardware_Profile_InfoA", windll["CFGMGR32"]), ((1, 'ulIndex'),(1, 'pHWProfileInfo'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Hardware_Profile_Info_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.HWProfileInfo_sA_head),UInt32,IntPtr, use_last_error=False)(("CM_Get_Hardware_Profile_Info_ExA", windll["CFGMGR32"]), ((1, 'ulIndex'),(1, 'pHWProfileInfo'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Hardware_Profile_InfoW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.HWProfileInfo_sW_head),UInt32, use_last_error=False)(("CM_Get_Hardware_Profile_InfoW", windll["CFGMGR32"]), ((1, 'ulIndex'),(1, 'pHWProfileInfo'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Hardware_Profile_Info():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_Hardware_Profile_InfoW
def _define_CM_Get_Hardware_Profile_Info_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.HWProfileInfo_sW_head),UInt32,IntPtr, use_last_error=False)(("CM_Get_Hardware_Profile_Info_ExW", windll["CFGMGR32"]), ((1, 'ulIndex'),(1, 'pHWProfileInfo'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Hardware_Profile_Info_Ex():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_Hardware_Profile_Info_ExW
def _define_CM_Get_HW_Prof_FlagsA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(SByte),UInt32,POINTER(UInt32),UInt32, use_last_error=False)(("CM_Get_HW_Prof_FlagsA", windll["CFGMGR32"]), ((1, 'pDeviceID'),(1, 'ulHardwareProfile'),(1, 'pulValue'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_HW_Prof_FlagsW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt16),UInt32,POINTER(UInt32),UInt32, use_last_error=False)(("CM_Get_HW_Prof_FlagsW", windll["CFGMGR32"]), ((1, 'pDeviceID'),(1, 'ulHardwareProfile'),(1, 'pulValue'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_HW_Prof_Flags():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_HW_Prof_FlagsW
def _define_CM_Get_HW_Prof_Flags_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(SByte),UInt32,POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Get_HW_Prof_Flags_ExA", windll["CFGMGR32"]), ((1, 'pDeviceID'),(1, 'ulHardwareProfile'),(1, 'pulValue'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_HW_Prof_Flags_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt16),UInt32,POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Get_HW_Prof_Flags_ExW", windll["CFGMGR32"]), ((1, 'pDeviceID'),(1, 'ulHardwareProfile'),(1, 'pulValue'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_HW_Prof_Flags_Ex():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_HW_Prof_Flags_ExW
def _define_CM_Get_Device_Interface_AliasA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,POINTER(Guid),POINTER(Byte),POINTER(UInt32),UInt32, use_last_error=False)(("CM_Get_Device_Interface_AliasA", windll["CFGMGR32"]), ((1, 'pszDeviceInterface'),(1, 'AliasInterfaceGuid'),(1, 'pszAliasDeviceInterface'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_AliasW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,POINTER(Guid),POINTER(Char),POINTER(UInt32),UInt32, use_last_error=False)(("CM_Get_Device_Interface_AliasW", windll["CFGMGR32"]), ((1, 'pszDeviceInterface'),(1, 'AliasInterfaceGuid'),(1, 'pszAliasDeviceInterface'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_Alias():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_Device_Interface_AliasW
def _define_CM_Get_Device_Interface_Alias_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,POINTER(Guid),POINTER(Byte),POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Get_Device_Interface_Alias_ExA", windll["CFGMGR32"]), ((1, 'pszDeviceInterface'),(1, 'AliasInterfaceGuid'),(1, 'pszAliasDeviceInterface'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_Alias_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,POINTER(Guid),POINTER(Char),POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Get_Device_Interface_Alias_ExW", windll["CFGMGR32"]), ((1, 'pszDeviceInterface'),(1, 'AliasInterfaceGuid'),(1, 'pszAliasDeviceInterface'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_Alias_Ex():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_Device_Interface_Alias_ExW
def _define_CM_Get_Device_Interface_ListA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),POINTER(SByte),POINTER(Byte),UInt32,UInt32, use_last_error=False)(("CM_Get_Device_Interface_ListA", windll["CFGMGR32"]), ((1, 'InterfaceClassGuid'),(1, 'pDeviceID'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_ListW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),POINTER(UInt16),POINTER(Char),UInt32,UInt32, use_last_error=False)(("CM_Get_Device_Interface_ListW", windll["CFGMGR32"]), ((1, 'InterfaceClassGuid'),(1, 'pDeviceID'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_List():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_Device_Interface_ListW
def _define_CM_Get_Device_Interface_List_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),POINTER(SByte),POINTER(Byte),UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Get_Device_Interface_List_ExA", windll["CFGMGR32"]), ((1, 'InterfaceClassGuid'),(1, 'pDeviceID'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_List_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),POINTER(UInt16),POINTER(Char),UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Get_Device_Interface_List_ExW", windll["CFGMGR32"]), ((1, 'InterfaceClassGuid'),(1, 'pDeviceID'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_List_Ex():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_Device_Interface_List_ExW
def _define_CM_Get_Device_Interface_List_SizeA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),POINTER(Guid),POINTER(SByte),UInt32, use_last_error=False)(("CM_Get_Device_Interface_List_SizeA", windll["CFGMGR32"]), ((1, 'pulLen'),(1, 'InterfaceClassGuid'),(1, 'pDeviceID'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_List_SizeW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),POINTER(Guid),POINTER(UInt16),UInt32, use_last_error=False)(("CM_Get_Device_Interface_List_SizeW", windll["CFGMGR32"]), ((1, 'pulLen'),(1, 'InterfaceClassGuid'),(1, 'pDeviceID'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_List_Size():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_Device_Interface_List_SizeW
def _define_CM_Get_Device_Interface_List_Size_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),POINTER(Guid),POINTER(SByte),UInt32,IntPtr, use_last_error=False)(("CM_Get_Device_Interface_List_Size_ExA", windll["CFGMGR32"]), ((1, 'pulLen'),(1, 'InterfaceClassGuid'),(1, 'pDeviceID'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_List_Size_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),POINTER(Guid),POINTER(UInt16),UInt32,IntPtr, use_last_error=False)(("CM_Get_Device_Interface_List_Size_ExW", windll["CFGMGR32"]), ((1, 'pulLen'),(1, 'InterfaceClassGuid'),(1, 'pDeviceID'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_List_Size_Ex():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_Device_Interface_List_Size_ExW
def _define_CM_Get_Device_Interface_PropertyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),c_char_p_no,POINTER(UInt32),UInt32, use_last_error=False)(("CM_Get_Device_Interface_PropertyW", windll["CFGMGR32"]), ((1, 'pszDeviceInterface'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_Property_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),c_char_p_no,POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Get_Device_Interface_Property_ExW", windll["CFGMGR32"]), ((1, 'pszDeviceInterface'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_Property_KeysW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,POINTER(win32more.Devices.Properties.DEVPROPKEY),POINTER(UInt32),UInt32, use_last_error=False)(("CM_Get_Device_Interface_Property_KeysW", windll["CFGMGR32"]), ((1, 'pszDeviceInterface'),(1, 'PropertyKeyArray'),(1, 'PropertyKeyCount'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_Property_Keys_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,POINTER(win32more.Devices.Properties.DEVPROPKEY),POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Get_Device_Interface_Property_Keys_ExW", windll["CFGMGR32"]), ((1, 'pszDeviceInterface'),(1, 'PropertyKeyArray'),(1, 'PropertyKeyCount'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Log_Conf_Priority():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,POINTER(UInt32),UInt32, use_last_error=False)(("CM_Get_Log_Conf_Priority", windll["CFGMGR32"]), ((1, 'lcLogConf'),(1, 'pPriority'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Log_Conf_Priority_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Get_Log_Conf_Priority_Ex", windll["CFGMGR32"]), ((1, 'lcLogConf'),(1, 'pPriority'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Next_Log_Conf():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UIntPtr,UInt32, use_last_error=False)(("CM_Get_Next_Log_Conf", windll["CFGMGR32"]), ((1, 'plcLogConf'),(1, 'lcLogConf'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Next_Log_Conf_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UIntPtr,UInt32,IntPtr, use_last_error=False)(("CM_Get_Next_Log_Conf_Ex", windll["CFGMGR32"]), ((1, 'plcLogConf'),(1, 'lcLogConf'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Parent():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,UInt32, use_last_error=False)(("CM_Get_Parent", windll["CFGMGR32"]), ((1, 'pdnDevInst'),(1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Parent_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Get_Parent_Ex", windll["CFGMGR32"]), ((1, 'pdnDevInst'),(1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Res_Des_Data():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,c_void_p,UInt32,UInt32, use_last_error=False)(("CM_Get_Res_Des_Data", windll["CFGMGR32"]), ((1, 'rdResDes'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Res_Des_Data_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,c_void_p,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Get_Res_Des_Data_Ex", windll["CFGMGR32"]), ((1, 'rdResDes'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Res_Des_Data_Size():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UIntPtr,UInt32, use_last_error=False)(("CM_Get_Res_Des_Data_Size", windll["CFGMGR32"]), ((1, 'pulSize'),(1, 'rdResDes'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Res_Des_Data_Size_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UIntPtr,UInt32,IntPtr, use_last_error=False)(("CM_Get_Res_Des_Data_Size_Ex", windll["CFGMGR32"]), ((1, 'pulSize'),(1, 'rdResDes'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Sibling():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,UInt32, use_last_error=False)(("CM_Get_Sibling", windll["CFGMGR32"]), ((1, 'pdnDevInst'),(1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Sibling_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Get_Sibling_Ex", windll["CFGMGR32"]), ((1, 'pdnDevInst'),(1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Version():
    try:
        return WINFUNCTYPE(UInt16, use_last_error=True)(("CM_Get_Version", windll["CFGMGR32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Version_Ex():
    try:
        return WINFUNCTYPE(UInt16,IntPtr, use_last_error=True)(("CM_Get_Version_Ex", windll["CFGMGR32"]), ((1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Is_Version_Available():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt16, use_last_error=False)(("CM_Is_Version_Available", windll["CFGMGR32"]), ((1, 'wVersion'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Is_Version_Available_Ex():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt16,IntPtr, use_last_error=False)(("CM_Is_Version_Available_Ex", windll["CFGMGR32"]), ((1, 'wVersion'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Intersect_Range_List():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,UIntPtr,UIntPtr,UInt32, use_last_error=False)(("CM_Intersect_Range_List", windll["CFGMGR32"]), ((1, 'rlhOld1'),(1, 'rlhOld2'),(1, 'rlhNew'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Invert_Range_List():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,UIntPtr,UInt64,UInt32, use_last_error=False)(("CM_Invert_Range_List", windll["CFGMGR32"]), ((1, 'rlhOld'),(1, 'rlhNew'),(1, 'ullMaxValue'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Locate_DevNodeA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),POINTER(SByte),UInt32, use_last_error=False)(("CM_Locate_DevNodeA", windll["CFGMGR32"]), ((1, 'pdnDevInst'),(1, 'pDeviceID'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Locate_DevNodeW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),POINTER(UInt16),UInt32, use_last_error=False)(("CM_Locate_DevNodeW", windll["CFGMGR32"]), ((1, 'pdnDevInst'),(1, 'pDeviceID'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Locate_DevNode():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Locate_DevNodeW
def _define_CM_Locate_DevNode_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),POINTER(SByte),UInt32,IntPtr, use_last_error=False)(("CM_Locate_DevNode_ExA", windll["CFGMGR32"]), ((1, 'pdnDevInst'),(1, 'pDeviceID'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Locate_DevNode_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),POINTER(UInt16),UInt32,IntPtr, use_last_error=False)(("CM_Locate_DevNode_ExW", windll["CFGMGR32"]), ((1, 'pdnDevInst'),(1, 'pDeviceID'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Locate_DevNode_Ex():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Locate_DevNode_ExW
def _define_CM_Merge_Range_List():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,UIntPtr,UIntPtr,UInt32, use_last_error=False)(("CM_Merge_Range_List", windll["CFGMGR32"]), ((1, 'rlhOld1'),(1, 'rlhOld2'),(1, 'rlhNew'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Modify_Res_Des():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UIntPtr,UInt32,c_void_p,UInt32,UInt32, use_last_error=False)(("CM_Modify_Res_Des", windll["CFGMGR32"]), ((1, 'prdResDes'),(1, 'rdResDes'),(1, 'ResourceID'),(1, 'ResourceData'),(1, 'ResourceLen'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Modify_Res_Des_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UIntPtr,UInt32,c_void_p,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Modify_Res_Des_Ex", windll["CFGMGR32"]), ((1, 'prdResDes'),(1, 'rdResDes'),(1, 'ResourceID'),(1, 'ResourceData'),(1, 'ResourceLen'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Move_DevNode():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,UInt32, use_last_error=False)(("CM_Move_DevNode", windll["CFGMGR32"]), ((1, 'dnFromDevInst'),(1, 'dnToDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Move_DevNode_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Move_DevNode_Ex", windll["CFGMGR32"]), ((1, 'dnFromDevInst'),(1, 'dnToDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Next_Range():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),POINTER(UInt64),POINTER(UInt64),UInt32, use_last_error=False)(("CM_Next_Range", windll["CFGMGR32"]), ((1, 'preElement'),(1, 'pullStart'),(1, 'pullEnd'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Next_Res_Des():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UIntPtr,UInt32,POINTER(UInt32),UInt32, use_last_error=False)(("CM_Get_Next_Res_Des", windll["CFGMGR32"]), ((1, 'prdResDes'),(1, 'rdResDes'),(1, 'ForResource'),(1, 'pResourceID'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Next_Res_Des_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UIntPtr,UInt32,POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Get_Next_Res_Des_Ex", windll["CFGMGR32"]), ((1, 'prdResDes'),(1, 'rdResDes'),(1, 'ForResource'),(1, 'pResourceID'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Open_Class_KeyA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),win32more.Foundation.PSTR,UInt32,UInt32,POINTER(win32more.System.Registry.HKEY),UInt32, use_last_error=False)(("CM_Open_Class_KeyA", windll["CFGMGR32"]), ((1, 'ClassGuid'),(1, 'pszClassName'),(1, 'samDesired'),(1, 'Disposition'),(1, 'phkClass'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Open_Class_KeyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),win32more.Foundation.PWSTR,UInt32,UInt32,POINTER(win32more.System.Registry.HKEY),UInt32, use_last_error=False)(("CM_Open_Class_KeyW", windll["CFGMGR32"]), ((1, 'ClassGuid'),(1, 'pszClassName'),(1, 'samDesired'),(1, 'Disposition'),(1, 'phkClass'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Open_Class_Key():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Open_Class_KeyW
def _define_CM_Open_Class_Key_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),win32more.Foundation.PSTR,UInt32,UInt32,POINTER(win32more.System.Registry.HKEY),UInt32,IntPtr, use_last_error=False)(("CM_Open_Class_Key_ExA", windll["CFGMGR32"]), ((1, 'ClassGuid'),(1, 'pszClassName'),(1, 'samDesired'),(1, 'Disposition'),(1, 'phkClass'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Open_Class_Key_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),win32more.Foundation.PWSTR,UInt32,UInt32,POINTER(win32more.System.Registry.HKEY),UInt32,IntPtr, use_last_error=False)(("CM_Open_Class_Key_ExW", windll["CFGMGR32"]), ((1, 'ClassGuid'),(1, 'pszClassName'),(1, 'samDesired'),(1, 'Disposition'),(1, 'phkClass'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Open_Class_Key_Ex():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Open_Class_Key_ExW
def _define_CM_Open_DevNode_Key():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,UInt32,UInt32,POINTER(win32more.System.Registry.HKEY),UInt32, use_last_error=False)(("CM_Open_DevNode_Key", windll["CFGMGR32"]), ((1, 'dnDevNode'),(1, 'samDesired'),(1, 'ulHardwareProfile'),(1, 'Disposition'),(1, 'phkDevice'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Open_DevNode_Key_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,UInt32,UInt32,POINTER(win32more.System.Registry.HKEY),UInt32,IntPtr, use_last_error=False)(("CM_Open_DevNode_Key_Ex", windll["CFGMGR32"]), ((1, 'dnDevNode'),(1, 'samDesired'),(1, 'ulHardwareProfile'),(1, 'Disposition'),(1, 'phkDevice'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Open_Device_Interface_KeyA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,UInt32,UInt32,POINTER(win32more.System.Registry.HKEY),UInt32, use_last_error=False)(("CM_Open_Device_Interface_KeyA", windll["CFGMGR32"]), ((1, 'pszDeviceInterface'),(1, 'samDesired'),(1, 'Disposition'),(1, 'phkDeviceInterface'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Open_Device_Interface_KeyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,UInt32,UInt32,POINTER(win32more.System.Registry.HKEY),UInt32, use_last_error=False)(("CM_Open_Device_Interface_KeyW", windll["CFGMGR32"]), ((1, 'pszDeviceInterface'),(1, 'samDesired'),(1, 'Disposition'),(1, 'phkDeviceInterface'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Open_Device_Interface_Key():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Open_Device_Interface_KeyW
def _define_CM_Open_Device_Interface_Key_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,UInt32,UInt32,POINTER(win32more.System.Registry.HKEY),UInt32,IntPtr, use_last_error=False)(("CM_Open_Device_Interface_Key_ExA", windll["CFGMGR32"]), ((1, 'pszDeviceInterface'),(1, 'samDesired'),(1, 'Disposition'),(1, 'phkDeviceInterface'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Open_Device_Interface_Key_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,UInt32,UInt32,POINTER(win32more.System.Registry.HKEY),UInt32,IntPtr, use_last_error=False)(("CM_Open_Device_Interface_Key_ExW", windll["CFGMGR32"]), ((1, 'pszDeviceInterface'),(1, 'samDesired'),(1, 'Disposition'),(1, 'phkDeviceInterface'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Open_Device_Interface_Key_Ex():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Open_Device_Interface_Key_ExW
def _define_CM_Delete_Device_Interface_KeyA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,UInt32, use_last_error=False)(("CM_Delete_Device_Interface_KeyA", windll["CFGMGR32"]), ((1, 'pszDeviceInterface'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Delete_Device_Interface_KeyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,UInt32, use_last_error=False)(("CM_Delete_Device_Interface_KeyW", windll["CFGMGR32"]), ((1, 'pszDeviceInterface'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Delete_Device_Interface_Key():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Delete_Device_Interface_KeyW
def _define_CM_Delete_Device_Interface_Key_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,UInt32,IntPtr, use_last_error=False)(("CM_Delete_Device_Interface_Key_ExA", windll["CFGMGR32"]), ((1, 'pszDeviceInterface'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Delete_Device_Interface_Key_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,UInt32,IntPtr, use_last_error=False)(("CM_Delete_Device_Interface_Key_ExW", windll["CFGMGR32"]), ((1, 'pszDeviceInterface'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Delete_Device_Interface_Key_Ex():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Delete_Device_Interface_Key_ExW
def _define_CM_Query_Arbitrator_Free_Data():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,c_void_p,UInt32,UInt32,UInt32,UInt32, use_last_error=False)(("CM_Query_Arbitrator_Free_Data", windll["CFGMGR32"]), ((1, 'pData'),(1, 'DataLen'),(1, 'dnDevInst'),(1, 'ResourceID'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Query_Arbitrator_Free_Data_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,c_void_p,UInt32,UInt32,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Query_Arbitrator_Free_Data_Ex", windll["CFGMGR32"]), ((1, 'pData'),(1, 'DataLen'),(1, 'dnDevInst'),(1, 'ResourceID'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Query_Arbitrator_Free_Size():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,UInt32,UInt32, use_last_error=False)(("CM_Query_Arbitrator_Free_Size", windll["CFGMGR32"]), ((1, 'pulSize'),(1, 'dnDevInst'),(1, 'ResourceID'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Query_Arbitrator_Free_Size_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Query_Arbitrator_Free_Size_Ex", windll["CFGMGR32"]), ((1, 'pulSize'),(1, 'dnDevInst'),(1, 'ResourceID'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Query_Remove_SubTree():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32, use_last_error=False)(("CM_Query_Remove_SubTree", windll["CFGMGR32"]), ((1, 'dnAncestor'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Query_Remove_SubTree_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Query_Remove_SubTree_Ex", windll["CFGMGR32"]), ((1, 'dnAncestor'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Query_And_Remove_SubTreeA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.PNP_VETO_TYPE),POINTER(Byte),UInt32,UInt32, use_last_error=False)(("CM_Query_And_Remove_SubTreeA", windll["CFGMGR32"]), ((1, 'dnAncestor'),(1, 'pVetoType'),(1, 'pszVetoName'),(1, 'ulNameLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Query_And_Remove_SubTreeW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.PNP_VETO_TYPE),POINTER(Char),UInt32,UInt32, use_last_error=False)(("CM_Query_And_Remove_SubTreeW", windll["CFGMGR32"]), ((1, 'dnAncestor'),(1, 'pVetoType'),(1, 'pszVetoName'),(1, 'ulNameLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Query_And_Remove_SubTree():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Query_And_Remove_SubTreeW
def _define_CM_Query_And_Remove_SubTree_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.PNP_VETO_TYPE),POINTER(Byte),UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Query_And_Remove_SubTree_ExA", windll["CFGMGR32"]), ((1, 'dnAncestor'),(1, 'pVetoType'),(1, 'pszVetoName'),(1, 'ulNameLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Query_And_Remove_SubTree_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.PNP_VETO_TYPE),POINTER(Char),UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Query_And_Remove_SubTree_ExW", windll["CFGMGR32"]), ((1, 'dnAncestor'),(1, 'pVetoType'),(1, 'pszVetoName'),(1, 'ulNameLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Query_And_Remove_SubTree_Ex():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Query_And_Remove_SubTree_ExW
def _define_CM_Request_Device_EjectA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.PNP_VETO_TYPE),POINTER(Byte),UInt32,UInt32, use_last_error=False)(("CM_Request_Device_EjectA", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'pVetoType'),(1, 'pszVetoName'),(1, 'ulNameLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Request_Device_Eject_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.PNP_VETO_TYPE),POINTER(Byte),UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Request_Device_Eject_ExA", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'pVetoType'),(1, 'pszVetoName'),(1, 'ulNameLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Request_Device_EjectW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.PNP_VETO_TYPE),POINTER(Char),UInt32,UInt32, use_last_error=False)(("CM_Request_Device_EjectW", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'pVetoType'),(1, 'pszVetoName'),(1, 'ulNameLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Request_Device_Eject():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Request_Device_EjectW
def _define_CM_Request_Device_Eject_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.PNP_VETO_TYPE),POINTER(Char),UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Request_Device_Eject_ExW", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'pVetoType'),(1, 'pszVetoName'),(1, 'ulNameLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Request_Device_Eject_Ex():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Request_Device_Eject_ExW
def _define_CM_Reenumerate_DevNode():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32, use_last_error=False)(("CM_Reenumerate_DevNode", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Reenumerate_DevNode_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Reenumerate_DevNode_Ex", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Register_Device_InterfaceA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(Guid),win32more.Foundation.PSTR,POINTER(Byte),POINTER(UInt32),UInt32, use_last_error=False)(("CM_Register_Device_InterfaceA", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'InterfaceClassGuid'),(1, 'pszReference'),(1, 'pszDeviceInterface'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Register_Device_InterfaceW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(Guid),win32more.Foundation.PWSTR,POINTER(Char),POINTER(UInt32),UInt32, use_last_error=False)(("CM_Register_Device_InterfaceW", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'InterfaceClassGuid'),(1, 'pszReference'),(1, 'pszDeviceInterface'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Register_Device_Interface():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Register_Device_InterfaceW
def _define_CM_Register_Device_Interface_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(Guid),win32more.Foundation.PSTR,POINTER(Byte),POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Register_Device_Interface_ExA", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'InterfaceClassGuid'),(1, 'pszReference'),(1, 'pszDeviceInterface'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Register_Device_Interface_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(Guid),win32more.Foundation.PWSTR,POINTER(Char),POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Register_Device_Interface_ExW", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'InterfaceClassGuid'),(1, 'pszReference'),(1, 'pszDeviceInterface'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Register_Device_Interface_Ex():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Register_Device_Interface_ExW
def _define_CM_Set_DevNode_Problem_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Set_DevNode_Problem_Ex", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'ulProblem'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_DevNode_Problem():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,UInt32, use_last_error=False)(("CM_Set_DevNode_Problem", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'ulProblem'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Unregister_Device_InterfaceA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,UInt32, use_last_error=False)(("CM_Unregister_Device_InterfaceA", windll["CFGMGR32"]), ((1, 'pszDeviceInterface'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Unregister_Device_InterfaceW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,UInt32, use_last_error=False)(("CM_Unregister_Device_InterfaceW", windll["CFGMGR32"]), ((1, 'pszDeviceInterface'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Unregister_Device_Interface():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Unregister_Device_InterfaceW
def _define_CM_Unregister_Device_Interface_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,UInt32,IntPtr, use_last_error=False)(("CM_Unregister_Device_Interface_ExA", windll["CFGMGR32"]), ((1, 'pszDeviceInterface'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Unregister_Device_Interface_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,UInt32,IntPtr, use_last_error=False)(("CM_Unregister_Device_Interface_ExW", windll["CFGMGR32"]), ((1, 'pszDeviceInterface'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Unregister_Device_Interface_Ex():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Unregister_Device_Interface_ExW
def _define_CM_Register_Device_Driver():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32, use_last_error=False)(("CM_Register_Device_Driver", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Register_Device_Driver_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Register_Device_Driver_Ex", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Remove_SubTree():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32, use_last_error=False)(("CM_Remove_SubTree", windll["CFGMGR32"]), ((1, 'dnAncestor'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Remove_SubTree_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Remove_SubTree_Ex", windll["CFGMGR32"]), ((1, 'dnAncestor'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_DevNode_PropertyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,c_char_p_no,UInt32,UInt32, use_last_error=False)(("CM_Set_DevNode_PropertyW", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_DevNode_Property_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,c_char_p_no,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Set_DevNode_Property_ExW", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_DevNode_Registry_PropertyA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,c_void_p,UInt32,UInt32, use_last_error=False)(("CM_Set_DevNode_Registry_PropertyA", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'ulProperty'),(1, 'Buffer'),(1, 'ulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_DevNode_Registry_PropertyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,c_void_p,UInt32,UInt32, use_last_error=False)(("CM_Set_DevNode_Registry_PropertyW", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'ulProperty'),(1, 'Buffer'),(1, 'ulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_DevNode_Registry_Property():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Set_DevNode_Registry_PropertyW
def _define_CM_Set_DevNode_Registry_Property_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,c_void_p,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Set_DevNode_Registry_Property_ExA", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'ulProperty'),(1, 'Buffer'),(1, 'ulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_DevNode_Registry_Property_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,c_void_p,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Set_DevNode_Registry_Property_ExW", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'ulProperty'),(1, 'Buffer'),(1, 'ulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_DevNode_Registry_Property_Ex():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Set_DevNode_Registry_Property_ExW
def _define_CM_Set_Device_Interface_PropertyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,c_char_p_no,UInt32,UInt32, use_last_error=False)(("CM_Set_Device_Interface_PropertyW", windll["CFGMGR32"]), ((1, 'pszDeviceInterface'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_Device_Interface_Property_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,c_char_p_no,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Set_Device_Interface_Property_ExW", windll["CFGMGR32"]), ((1, 'pszDeviceInterface'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Is_Dock_Station_Present():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(win32more.Foundation.BOOL), use_last_error=False)(("CM_Is_Dock_Station_Present", windll["CFGMGR32"]), ((1, 'pbPresent'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Is_Dock_Station_Present_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(win32more.Foundation.BOOL),IntPtr, use_last_error=False)(("CM_Is_Dock_Station_Present_Ex", windll["CFGMGR32"]), ((1, 'pbPresent'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Request_Eject_PC():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET, use_last_error=False)(("CM_Request_Eject_PC", windll["CFGMGR32"]), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Request_Eject_PC_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,IntPtr, use_last_error=False)(("CM_Request_Eject_PC_Ex", windll["CFGMGR32"]), ((1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_HW_Prof_FlagsA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(SByte),UInt32,UInt32,UInt32, use_last_error=False)(("CM_Set_HW_Prof_FlagsA", windll["CFGMGR32"]), ((1, 'pDeviceID'),(1, 'ulConfig'),(1, 'ulValue'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_HW_Prof_FlagsW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt16),UInt32,UInt32,UInt32, use_last_error=False)(("CM_Set_HW_Prof_FlagsW", windll["CFGMGR32"]), ((1, 'pDeviceID'),(1, 'ulConfig'),(1, 'ulValue'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_HW_Prof_Flags():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Set_HW_Prof_FlagsW
def _define_CM_Set_HW_Prof_Flags_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(SByte),UInt32,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Set_HW_Prof_Flags_ExA", windll["CFGMGR32"]), ((1, 'pDeviceID'),(1, 'ulConfig'),(1, 'ulValue'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_HW_Prof_Flags_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt16),UInt32,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Set_HW_Prof_Flags_ExW", windll["CFGMGR32"]), ((1, 'pDeviceID'),(1, 'ulConfig'),(1, 'ulValue'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_HW_Prof_Flags_Ex():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Set_HW_Prof_Flags_ExW
def _define_CM_Setup_DevNode():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32, use_last_error=False)(("CM_Setup_DevNode", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Setup_DevNode_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Setup_DevNode_Ex", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Test_Range_Available():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt64,UInt64,UIntPtr,UInt32, use_last_error=False)(("CM_Test_Range_Available", windll["CFGMGR32"]), ((1, 'ullStartValue'),(1, 'ullEndValue'),(1, 'rlh'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Uninstall_DevNode():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32, use_last_error=False)(("CM_Uninstall_DevNode", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Uninstall_DevNode_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Uninstall_DevNode_Ex", windll["CFGMGR32"]), ((1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Run_Detection():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32, use_last_error=False)(("CM_Run_Detection", windll["CFGMGR32"]), ((1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Run_Detection_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,IntPtr, use_last_error=False)(("CM_Run_Detection_Ex", windll["CFGMGR32"]), ((1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_HW_Prof():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32, use_last_error=False)(("CM_Set_HW_Prof", windll["CFGMGR32"]), ((1, 'ulHardwareProfile'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_HW_Prof_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Set_HW_Prof_Ex", windll["CFGMGR32"]), ((1, 'ulHardwareProfile'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Query_Resource_Conflict_List():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UInt32,UInt32,c_void_p,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Query_Resource_Conflict_List", windll["CFGMGR32"]), ((1, 'pclConflictList'),(1, 'dnDevInst'),(1, 'ResourceID'),(1, 'ResourceData'),(1, 'ResourceLen'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Free_Resource_Conflict_Handle():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr, use_last_error=False)(("CM_Free_Resource_Conflict_Handle", windll["CFGMGR32"]), ((1, 'clConflictList'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Resource_Conflict_Count():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,POINTER(UInt32), use_last_error=False)(("CM_Get_Resource_Conflict_Count", windll["CFGMGR32"]), ((1, 'clConflictList'),(1, 'pulCount'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Resource_Conflict_DetailsA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.CONFLICT_DETAILS_A_head), use_last_error=False)(("CM_Get_Resource_Conflict_DetailsA", windll["CFGMGR32"]), ((1, 'clConflictList'),(1, 'ulIndex'),(1, 'pConflictDetails'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Resource_Conflict_DetailsW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.CONFLICT_DETAILS_W_head), use_last_error=False)(("CM_Get_Resource_Conflict_DetailsW", windll["CFGMGR32"]), ((1, 'clConflictList'),(1, 'ulIndex'),(1, 'pConflictDetails'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Resource_Conflict_Details():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_Resource_Conflict_DetailsW
def _define_CM_Get_Class_PropertyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),c_char_p_no,POINTER(UInt32),UInt32, use_last_error=False)(("CM_Get_Class_PropertyW", windll["CFGMGR32"]), ((1, 'ClassGUID'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_Property_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),c_char_p_no,POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Get_Class_Property_ExW", windll["CFGMGR32"]), ((1, 'ClassGUID'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_Property_Keys():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),POINTER(win32more.Devices.Properties.DEVPROPKEY),POINTER(UInt32),UInt32, use_last_error=False)(("CM_Get_Class_Property_Keys", windll["CFGMGR32"]), ((1, 'ClassGUID'),(1, 'PropertyKeyArray'),(1, 'PropertyKeyCount'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_Property_Keys_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),POINTER(win32more.Devices.Properties.DEVPROPKEY),POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Get_Class_Property_Keys_Ex", windll["CFGMGR32"]), ((1, 'ClassGUID'),(1, 'PropertyKeyArray'),(1, 'PropertyKeyCount'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_Class_PropertyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,c_char_p_no,UInt32,UInt32, use_last_error=False)(("CM_Set_Class_PropertyW", windll["CFGMGR32"]), ((1, 'ClassGUID'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_Class_Property_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,c_char_p_no,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Set_Class_Property_ExW", windll["CFGMGR32"]), ((1, 'ClassGUID'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_Registry_PropertyA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),UInt32,POINTER(UInt32),c_void_p,POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Get_Class_Registry_PropertyA", windll["CFGMGR32"]), ((1, 'ClassGuid'),(1, 'ulProperty'),(1, 'pulRegDataType'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_Registry_PropertyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),UInt32,POINTER(UInt32),c_void_p,POINTER(UInt32),UInt32,IntPtr, use_last_error=False)(("CM_Get_Class_Registry_PropertyW", windll["CFGMGR32"]), ((1, 'ClassGuid'),(1, 'ulProperty'),(1, 'pulRegDataType'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_Registry_Property():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Get_Class_Registry_PropertyW
def _define_CM_Set_Class_Registry_PropertyA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),UInt32,c_void_p,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Set_Class_Registry_PropertyA", windll["CFGMGR32"]), ((1, 'ClassGuid'),(1, 'ulProperty'),(1, 'Buffer'),(1, 'ulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_Class_Registry_PropertyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),UInt32,c_void_p,UInt32,UInt32,IntPtr, use_last_error=False)(("CM_Set_Class_Registry_PropertyW", windll["CFGMGR32"]), ((1, 'ClassGuid'),(1, 'ulProperty'),(1, 'Buffer'),(1, 'ulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_Class_Registry_Property():
    return win32more.Devices.DeviceAndDriverInstallation.CM_Set_Class_Registry_PropertyW
def _define_CMP_WaitNoPendingInstallEvents():
    try:
        return WINFUNCTYPE(UInt32,UInt32, use_last_error=False)(("CMP_WaitNoPendingInstallEvents", windll["CFGMGR32"]), ((1, 'dwTimeout'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Register_Notification():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(win32more.Devices.DeviceAndDriverInstallation.CM_NOTIFY_FILTER_head),c_void_p,win32more.Devices.DeviceAndDriverInstallation.PCM_NOTIFY_CALLBACK,POINTER(IntPtr), use_last_error=False)(("CM_Register_Notification", windll["CFGMGR32"]), ((1, 'pFilter'),(1, 'pContext'),(1, 'pCallback'),(1, 'pNotifyContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Unregister_Notification():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Devices.DeviceAndDriverInstallation.HCMNOTIFICATION, use_last_error=False)(("CM_Unregister_Notification", windll["CFGMGR32"]), ((1, 'NotifyContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_MapCrToWin32Err():
    try:
        return WINFUNCTYPE(UInt32,win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32, use_last_error=False)(("CM_MapCrToWin32Err", windll["CFGMGR32"]), ((1, 'CmReturnCode'),(1, 'DefaultErr'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_UpdateDriverForPlugAndPlayDevicesA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,POINTER(win32more.Foundation.BOOL), use_last_error=False)(("UpdateDriverForPlugAndPlayDevicesA", windll["newdev"]), ((1, 'hwndParent'),(1, 'HardwareId'),(1, 'FullInfPath'),(1, 'InstallFlags'),(1, 'bRebootRequired'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_UpdateDriverForPlugAndPlayDevicesW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,POINTER(win32more.Foundation.BOOL), use_last_error=False)(("UpdateDriverForPlugAndPlayDevicesW", windll["newdev"]), ((1, 'hwndParent'),(1, 'HardwareId'),(1, 'FullInfPath'),(1, 'InstallFlags'),(1, 'bRebootRequired'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_UpdateDriverForPlugAndPlayDevices():
    return win32more.Devices.DeviceAndDriverInstallation.UpdateDriverForPlugAndPlayDevicesW
def _define_DiInstallDevice():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_A_head),UInt32,POINTER(win32more.Foundation.BOOL), use_last_error=False)(("DiInstallDevice", windll["newdev"]), ((1, 'hwndParent'),(1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverInfoData'),(1, 'Flags'),(1, 'NeedReboot'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DiInstallDriverW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PWSTR,UInt32,POINTER(win32more.Foundation.BOOL), use_last_error=False)(("DiInstallDriverW", windll["newdev"]), ((1, 'hwndParent'),(1, 'InfPath'),(1, 'Flags'),(1, 'NeedReboot'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DiInstallDriver():
    return win32more.Devices.DeviceAndDriverInstallation.DiInstallDriverW
def _define_DiInstallDriverA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PSTR,UInt32,POINTER(win32more.Foundation.BOOL), use_last_error=False)(("DiInstallDriverA", windll["newdev"]), ((1, 'hwndParent'),(1, 'InfPath'),(1, 'Flags'),(1, 'NeedReboot'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DiUninstallDevice():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,POINTER(win32more.Foundation.BOOL), use_last_error=True)(("DiUninstallDevice", windll["newdev"]), ((1, 'hwndParent'),(1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Flags'),(1, 'NeedReboot'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DiUninstallDriverW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PWSTR,UInt32,POINTER(win32more.Foundation.BOOL), use_last_error=False)(("DiUninstallDriverW", windll["newdev"]), ((1, 'hwndParent'),(1, 'InfPath'),(1, 'Flags'),(1, 'NeedReboot'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DiUninstallDriver():
    return win32more.Devices.DeviceAndDriverInstallation.DiUninstallDriverW
def _define_DiUninstallDriverA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PSTR,UInt32,POINTER(win32more.Foundation.BOOL), use_last_error=False)(("DiUninstallDriverA", windll["newdev"]), ((1, 'hwndParent'),(1, 'InfPath'),(1, 'Flags'),(1, 'NeedReboot'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DiShowUpdateDevice():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,POINTER(win32more.Foundation.BOOL), use_last_error=True)(("DiShowUpdateDevice", windll["newdev"]), ((1, 'hwndParent'),(1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Flags'),(1, 'NeedReboot'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DiRollbackDriver():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),win32more.Foundation.HWND,UInt32,POINTER(win32more.Foundation.BOOL), use_last_error=False)(("DiRollbackDriver", windll["newdev"]), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'hwndParent'),(1, 'Flags'),(1, 'NeedReboot'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DiShowUpdateDriver():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PWSTR,UInt32,POINTER(win32more.Foundation.BOOL), use_last_error=False)(("DiShowUpdateDriver", windll["newdev"]), ((1, 'hwndParent'),(1, 'FilePath'),(1, 'Flags'),(1, 'NeedReboot'),))
    except (FileNotFoundError, AttributeError):
        return None
__all__ = [
    "CM_PROB_NOT_CONFIGURED",
    "CM_PROB_DEVLOADER_FAILED",
    "CM_PROB_OUT_OF_MEMORY",
    "CM_PROB_ENTRY_IS_WRONG_TYPE",
    "CM_PROB_LACKED_ARBITRATOR",
    "CM_PROB_BOOT_CONFIG_CONFLICT",
    "CM_PROB_FAILED_FILTER",
    "CM_PROB_DEVLOADER_NOT_FOUND",
    "CM_PROB_INVALID_DATA",
    "CM_PROB_FAILED_START",
    "CM_PROB_LIAR",
    "CM_PROB_NORMAL_CONFLICT",
    "CM_PROB_NOT_VERIFIED",
    "CM_PROB_NEED_RESTART",
    "CM_PROB_REENUMERATION",
    "CM_PROB_PARTIAL_LOG_CONF",
    "CM_PROB_UNKNOWN_RESOURCE",
    "CM_PROB_REINSTALL",
    "CM_PROB_REGISTRY",
    "CM_PROB_VXDLDR",
    "CM_PROB_WILL_BE_REMOVED",
    "CM_PROB_DISABLED",
    "CM_PROB_DEVLOADER_NOT_READY",
    "CM_PROB_DEVICE_NOT_THERE",
    "CM_PROB_MOVED",
    "CM_PROB_TOO_EARLY",
    "CM_PROB_NO_VALID_LOG_CONF",
    "CM_PROB_FAILED_INSTALL",
    "CM_PROB_HARDWARE_DISABLED",
    "CM_PROB_CANT_SHARE_IRQ",
    "CM_PROB_FAILED_ADD",
    "CM_PROB_DISABLED_SERVICE",
    "CM_PROB_TRANSLATION_FAILED",
    "CM_PROB_NO_SOFTCONFIG",
    "CM_PROB_BIOS_TABLE",
    "CM_PROB_IRQ_TRANSLATION_FAILED",
    "CM_PROB_FAILED_DRIVER_ENTRY",
    "CM_PROB_DRIVER_FAILED_PRIOR_UNLOAD",
    "CM_PROB_DRIVER_FAILED_LOAD",
    "CM_PROB_DRIVER_SERVICE_KEY_INVALID",
    "CM_PROB_LEGACY_SERVICE_NO_DEVICES",
    "CM_PROB_DUPLICATE_DEVICE",
    "CM_PROB_FAILED_POST_START",
    "CM_PROB_HALTED",
    "CM_PROB_PHANTOM",
    "CM_PROB_SYSTEM_SHUTDOWN",
    "CM_PROB_HELD_FOR_EJECT",
    "CM_PROB_DRIVER_BLOCKED",
    "CM_PROB_REGISTRY_TOO_LARGE",
    "CM_PROB_SETPROPERTIES_FAILED",
    "CM_PROB_WAITING_ON_DEPENDENCY",
    "CM_PROB_UNSIGNED_DRIVER",
    "CM_PROB_USED_BY_DEBUGGER",
    "CM_PROB_DEVICE_RESET",
    "CM_PROB_CONSOLE_LOCKED",
    "CM_PROB_NEED_CLASS_CONFIG",
    "CM_PROB_GUEST_ASSIGNMENT_FAILED",
    "NUM_CM_PROB_V1",
    "NUM_CM_PROB_V2",
    "NUM_CM_PROB_V3",
    "NUM_CM_PROB_V4",
    "NUM_CM_PROB_V5",
    "NUM_CM_PROB_V6",
    "NUM_CM_PROB_V7",
    "NUM_CM_PROB_V8",
    "NUM_CM_PROB_V9",
    "NUM_CM_PROB",
    "DN_ROOT_ENUMERATED",
    "DN_DRIVER_LOADED",
    "DN_ENUM_LOADED",
    "DN_STARTED",
    "DN_MANUAL",
    "DN_NEED_TO_ENUM",
    "DN_NOT_FIRST_TIME",
    "DN_HARDWARE_ENUM",
    "DN_LIAR",
    "DN_HAS_MARK",
    "DN_HAS_PROBLEM",
    "DN_FILTERED",
    "DN_MOVED",
    "DN_DISABLEABLE",
    "DN_REMOVABLE",
    "DN_PRIVATE_PROBLEM",
    "DN_MF_PARENT",
    "DN_MF_CHILD",
    "DN_WILL_BE_REMOVED",
    "DN_NOT_FIRST_TIMEE",
    "DN_STOP_FREE_RES",
    "DN_REBAL_CANDIDATE",
    "DN_BAD_PARTIAL",
    "DN_NT_ENUMERATOR",
    "DN_NT_DRIVER",
    "DN_NEEDS_LOCKING",
    "DN_ARM_WAKEUP",
    "DN_APM_ENUMERATOR",
    "DN_APM_DRIVER",
    "DN_SILENT_INSTALL",
    "DN_NO_SHOW_IN_DM",
    "DN_BOOT_LOG_PROB",
    "DN_NEED_RESTART",
    "DN_DRIVER_BLOCKED",
    "DN_LEGACY_DRIVER",
    "DN_CHILD_WITH_INVALID_ID",
    "DN_DEVICE_DISCONNECTED",
    "DN_QUERY_REMOVE_PENDING",
    "DN_QUERY_REMOVE_ACTIVE",
    "LCPRI_FORCECONFIG",
    "LCPRI_BOOTCONFIG",
    "LCPRI_DESIRED",
    "LCPRI_NORMAL",
    "LCPRI_LASTBESTCONFIG",
    "LCPRI_SUBOPTIMAL",
    "LCPRI_LASTSOFTCONFIG",
    "LCPRI_RESTART",
    "LCPRI_REBOOT",
    "LCPRI_POWEROFF",
    "LCPRI_HARDRECONFIG",
    "LCPRI_HARDWIRED",
    "LCPRI_IMPOSSIBLE",
    "LCPRI_DISABLED",
    "MAX_LCPRI",
    "CM_DEVICE_PANEL_SIDE_UNKNOWN",
    "CM_DEVICE_PANEL_SIDE_TOP",
    "CM_DEVICE_PANEL_SIDE_BOTTOM",
    "CM_DEVICE_PANEL_SIDE_LEFT",
    "CM_DEVICE_PANEL_SIDE_RIGHT",
    "CM_DEVICE_PANEL_SIDE_FRONT",
    "CM_DEVICE_PANEL_SIDE_BACK",
    "CM_DEVICE_PANEL_EDGE_UNKNOWN",
    "CM_DEVICE_PANEL_EDGE_TOP",
    "CM_DEVICE_PANEL_EDGE_BOTTOM",
    "CM_DEVICE_PANEL_EDGE_LEFT",
    "CM_DEVICE_PANEL_EDGE_RIGHT",
    "CM_DEVICE_PANEL_SHAPE_UNKNOWN",
    "CM_DEVICE_PANEL_SHAPE_RECTANGLE",
    "CM_DEVICE_PANEL_SHAPE_OVAL",
    "CM_DEVICE_PANEL_ORIENTATION_HORIZONTAL",
    "CM_DEVICE_PANEL_ORIENTATION_VERTICAL",
    "CM_DEVICE_PANEL_JOINT_TYPE_UNKNOWN",
    "CM_DEVICE_PANEL_JOINT_TYPE_PLANAR",
    "CM_DEVICE_PANEL_JOINT_TYPE_HINGE",
    "CM_DEVICE_PANEL_JOINT_TYPE_PIVOT",
    "CM_DEVICE_PANEL_JOINT_TYPE_SWIVEL",
    "GUID_DEVCLASS_1394",
    "GUID_DEVCLASS_1394DEBUG",
    "GUID_DEVCLASS_61883",
    "GUID_DEVCLASS_ADAPTER",
    "GUID_DEVCLASS_APMSUPPORT",
    "GUID_DEVCLASS_AVC",
    "GUID_DEVCLASS_BATTERY",
    "GUID_DEVCLASS_BIOMETRIC",
    "GUID_DEVCLASS_BLUETOOTH",
    "GUID_DEVCLASS_CAMERA",
    "GUID_DEVCLASS_CDROM",
    "GUID_DEVCLASS_COMPUTEACCELERATOR",
    "GUID_DEVCLASS_COMPUTER",
    "GUID_DEVCLASS_DECODER",
    "GUID_DEVCLASS_DISKDRIVE",
    "GUID_DEVCLASS_DISPLAY",
    "GUID_DEVCLASS_DOT4",
    "GUID_DEVCLASS_DOT4PRINT",
    "GUID_DEVCLASS_EHSTORAGESILO",
    "GUID_DEVCLASS_ENUM1394",
    "GUID_DEVCLASS_EXTENSION",
    "GUID_DEVCLASS_FDC",
    "GUID_DEVCLASS_FIRMWARE",
    "GUID_DEVCLASS_FLOPPYDISK",
    "GUID_DEVCLASS_GPS",
    "GUID_DEVCLASS_HDC",
    "GUID_DEVCLASS_HIDCLASS",
    "GUID_DEVCLASS_HOLOGRAPHIC",
    "GUID_DEVCLASS_IMAGE",
    "GUID_DEVCLASS_INFINIBAND",
    "GUID_DEVCLASS_INFRARED",
    "GUID_DEVCLASS_KEYBOARD",
    "GUID_DEVCLASS_LEGACYDRIVER",
    "GUID_DEVCLASS_MEDIA",
    "GUID_DEVCLASS_MEDIUM_CHANGER",
    "GUID_DEVCLASS_MEMORY",
    "GUID_DEVCLASS_MODEM",
    "GUID_DEVCLASS_MONITOR",
    "GUID_DEVCLASS_MOUSE",
    "GUID_DEVCLASS_MTD",
    "GUID_DEVCLASS_MULTIFUNCTION",
    "GUID_DEVCLASS_MULTIPORTSERIAL",
    "GUID_DEVCLASS_NET",
    "GUID_DEVCLASS_NETCLIENT",
    "GUID_DEVCLASS_NETDRIVER",
    "GUID_DEVCLASS_NETSERVICE",
    "GUID_DEVCLASS_NETTRANS",
    "GUID_DEVCLASS_NETUIO",
    "GUID_DEVCLASS_NODRIVER",
    "GUID_DEVCLASS_PCMCIA",
    "GUID_DEVCLASS_PNPPRINTERS",
    "GUID_DEVCLASS_PORTS",
    "GUID_DEVCLASS_PRINTER",
    "GUID_DEVCLASS_PRINTERUPGRADE",
    "GUID_DEVCLASS_PRINTQUEUE",
    "GUID_DEVCLASS_PROCESSOR",
    "GUID_DEVCLASS_SBP2",
    "GUID_DEVCLASS_SCMDISK",
    "GUID_DEVCLASS_SCMVOLUME",
    "GUID_DEVCLASS_SCSIADAPTER",
    "GUID_DEVCLASS_SECURITYACCELERATOR",
    "GUID_DEVCLASS_SENSOR",
    "GUID_DEVCLASS_SIDESHOW",
    "GUID_DEVCLASS_SMARTCARDREADER",
    "GUID_DEVCLASS_SMRDISK",
    "GUID_DEVCLASS_SMRVOLUME",
    "GUID_DEVCLASS_SOFTWARECOMPONENT",
    "GUID_DEVCLASS_SOUND",
    "GUID_DEVCLASS_SYSTEM",
    "GUID_DEVCLASS_TAPEDRIVE",
    "GUID_DEVCLASS_UNKNOWN",
    "GUID_DEVCLASS_UCM",
    "GUID_DEVCLASS_USB",
    "GUID_DEVCLASS_VOLUME",
    "GUID_DEVCLASS_VOLUMESNAPSHOT",
    "GUID_DEVCLASS_WCEUSBS",
    "GUID_DEVCLASS_WPD",
    "GUID_DEVCLASS_FSFILTER_TOP",
    "GUID_DEVCLASS_FSFILTER_ACTIVITYMONITOR",
    "GUID_DEVCLASS_FSFILTER_UNDELETE",
    "GUID_DEVCLASS_FSFILTER_ANTIVIRUS",
    "GUID_DEVCLASS_FSFILTER_REPLICATION",
    "GUID_DEVCLASS_FSFILTER_CONTINUOUSBACKUP",
    "GUID_DEVCLASS_FSFILTER_CONTENTSCREENER",
    "GUID_DEVCLASS_FSFILTER_QUOTAMANAGEMENT",
    "GUID_DEVCLASS_FSFILTER_SYSTEMRECOVERY",
    "GUID_DEVCLASS_FSFILTER_CFSMETADATASERVER",
    "GUID_DEVCLASS_FSFILTER_HSM",
    "GUID_DEVCLASS_FSFILTER_COMPRESSION",
    "GUID_DEVCLASS_FSFILTER_ENCRYPTION",
    "GUID_DEVCLASS_FSFILTER_VIRTUALIZATION",
    "GUID_DEVCLASS_FSFILTER_PHYSICALQUOTAMANAGEMENT",
    "GUID_DEVCLASS_FSFILTER_OPENFILEBACKUP",
    "GUID_DEVCLASS_FSFILTER_SECURITYENHANCER",
    "GUID_DEVCLASS_FSFILTER_COPYPROTECTION",
    "GUID_DEVCLASS_FSFILTER_BOTTOM",
    "GUID_DEVCLASS_FSFILTER_SYSTEM",
    "GUID_DEVCLASS_FSFILTER_INFRASTRUCTURE",
    "LINE_LEN",
    "MAX_INF_STRING_LENGTH",
    "MAX_INF_SECTION_NAME_LENGTH",
    "MAX_TITLE_LEN",
    "MAX_INSTRUCTION_LEN",
    "MAX_LABEL_LEN",
    "MAX_SERVICE_NAME_LEN",
    "MAX_SUBTITLE_LEN",
    "SP_MAX_MACHINENAME_LENGTH",
    "SP_ALTPLATFORM_FLAGS_VERSION_RANGE",
    "SP_ALTPLATFORM_FLAGS_SUITE_MASK",
    "INF_STYLE_CACHE_ENABLE",
    "INF_STYLE_CACHE_DISABLE",
    "INF_STYLE_CACHE_IGNORE",
    "DIRID_ABSOLUTE",
    "DIRID_ABSOLUTE_16BIT",
    "DIRID_NULL",
    "DIRID_SRCPATH",
    "DIRID_WINDOWS",
    "DIRID_SYSTEM",
    "DIRID_DRIVERS",
    "DIRID_IOSUBSYS",
    "DIRID_DRIVER_STORE",
    "DIRID_INF",
    "DIRID_HELP",
    "DIRID_FONTS",
    "DIRID_VIEWERS",
    "DIRID_COLOR",
    "DIRID_APPS",
    "DIRID_SHARED",
    "DIRID_BOOT",
    "DIRID_SYSTEM16",
    "DIRID_SPOOL",
    "DIRID_SPOOLDRIVERS",
    "DIRID_USERPROFILE",
    "DIRID_LOADER",
    "DIRID_PRINTPROCESSOR",
    "DIRID_DEFAULT",
    "DIRID_COMMON_STARTMENU",
    "DIRID_COMMON_PROGRAMS",
    "DIRID_COMMON_STARTUP",
    "DIRID_COMMON_DESKTOPDIRECTORY",
    "DIRID_COMMON_FAVORITES",
    "DIRID_COMMON_APPDATA",
    "DIRID_PROGRAM_FILES",
    "DIRID_SYSTEM_X86",
    "DIRID_PROGRAM_FILES_X86",
    "DIRID_PROGRAM_FILES_COMMON",
    "DIRID_PROGRAM_FILES_COMMONX86",
    "DIRID_COMMON_TEMPLATES",
    "DIRID_COMMON_DOCUMENTS",
    "DIRID_USER",
    "SPFILENOTIFY_STARTQUEUE",
    "SPFILENOTIFY_ENDQUEUE",
    "SPFILENOTIFY_STARTSUBQUEUE",
    "SPFILENOTIFY_ENDSUBQUEUE",
    "SPFILENOTIFY_STARTDELETE",
    "SPFILENOTIFY_ENDDELETE",
    "SPFILENOTIFY_DELETEERROR",
    "SPFILENOTIFY_STARTRENAME",
    "SPFILENOTIFY_ENDRENAME",
    "SPFILENOTIFY_RENAMEERROR",
    "SPFILENOTIFY_STARTCOPY",
    "SPFILENOTIFY_ENDCOPY",
    "SPFILENOTIFY_COPYERROR",
    "SPFILENOTIFY_NEEDMEDIA",
    "SPFILENOTIFY_QUEUESCAN",
    "SPFILENOTIFY_CABINETINFO",
    "SPFILENOTIFY_FILEINCABINET",
    "SPFILENOTIFY_NEEDNEWCABINET",
    "SPFILENOTIFY_FILEEXTRACTED",
    "SPFILENOTIFY_FILEOPDELAYED",
    "SPFILENOTIFY_STARTBACKUP",
    "SPFILENOTIFY_BACKUPERROR",
    "SPFILENOTIFY_ENDBACKUP",
    "SPFILENOTIFY_QUEUESCAN_EX",
    "SPFILENOTIFY_STARTREGISTRATION",
    "SPFILENOTIFY_ENDREGISTRATION",
    "SPFILENOTIFY_QUEUESCAN_SIGNERINFO",
    "SPFILENOTIFY_LANGMISMATCH",
    "SPFILENOTIFY_TARGETEXISTS",
    "SPFILENOTIFY_TARGETNEWER",
    "FILEOP_RENAME",
    "FILEOP_BACKUP",
    "FILEOP_ABORT",
    "FILEOP_DOIT",
    "FILEOP_SKIP",
    "FILEOP_RETRY",
    "FILEOP_NEWPATH",
    "COPYFLG_WARN_IF_SKIP",
    "COPYFLG_NOSKIP",
    "COPYFLG_NOVERSIONCHECK",
    "COPYFLG_FORCE_FILE_IN_USE",
    "COPYFLG_NO_OVERWRITE",
    "COPYFLG_NO_VERSION_DIALOG",
    "COPYFLG_OVERWRITE_OLDER_ONLY",
    "COPYFLG_PROTECTED_WINDOWS_DRIVER_FILE",
    "COPYFLG_REPLACEONLY",
    "COPYFLG_NODECOMP",
    "COPYFLG_REPLACE_BOOT_FILE",
    "COPYFLG_NOPRUNE",
    "COPYFLG_IN_USE_TRY_RENAME",
    "DELFLG_IN_USE",
    "DELFLG_IN_USE1",
    "SPREG_SUCCESS",
    "SPREG_LOADLIBRARY",
    "SPREG_GETPROCADDR",
    "SPREG_REGSVR",
    "SPREG_DLLINSTALL",
    "SPREG_TIMEOUT",
    "SPREG_UNKNOWN",
    "SPINT_ACTIVE",
    "SPINT_DEFAULT",
    "SPINT_REMOVED",
    "SPID_ACTIVE",
    "SPID_DEFAULT",
    "SPID_REMOVED",
    "DIF_SELECTDEVICE",
    "DIF_INSTALLDEVICE",
    "DIF_ASSIGNRESOURCES",
    "DIF_PROPERTIES",
    "DIF_REMOVE",
    "DIF_FIRSTTIMESETUP",
    "DIF_FOUNDDEVICE",
    "DIF_SELECTCLASSDRIVERS",
    "DIF_VALIDATECLASSDRIVERS",
    "DIF_INSTALLCLASSDRIVERS",
    "DIF_CALCDISKSPACE",
    "DIF_DESTROYPRIVATEDATA",
    "DIF_VALIDATEDRIVER",
    "DIF_DETECT",
    "DIF_INSTALLWIZARD",
    "DIF_DESTROYWIZARDDATA",
    "DIF_PROPERTYCHANGE",
    "DIF_ENABLECLASS",
    "DIF_DETECTVERIFY",
    "DIF_INSTALLDEVICEFILES",
    "DIF_UNREMOVE",
    "DIF_SELECTBESTCOMPATDRV",
    "DIF_ALLOW_INSTALL",
    "DIF_REGISTERDEVICE",
    "DIF_NEWDEVICEWIZARD_PRESELECT",
    "DIF_NEWDEVICEWIZARD_SELECT",
    "DIF_NEWDEVICEWIZARD_PREANALYZE",
    "DIF_NEWDEVICEWIZARD_POSTANALYZE",
    "DIF_NEWDEVICEWIZARD_FINISHINSTALL",
    "DIF_UNUSED1",
    "DIF_INSTALLINTERFACES",
    "DIF_DETECTCANCEL",
    "DIF_REGISTER_COINSTALLERS",
    "DIF_ADDPROPERTYPAGE_ADVANCED",
    "DIF_ADDPROPERTYPAGE_BASIC",
    "DIF_RESERVED1",
    "DIF_TROUBLESHOOTER",
    "DIF_POWERMESSAGEWAKE",
    "DIF_ADDREMOTEPROPERTYPAGE_ADVANCED",
    "DIF_UPDATEDRIVER_UI",
    "DIF_FINISHINSTALL_ACTION",
    "DIF_RESERVED2",
    "DIF_MOVEDEVICE",
    "DI_SHOWOEM",
    "DI_SHOWCOMPAT",
    "DI_SHOWCLASS",
    "DI_SHOWALL",
    "DI_NOVCP",
    "DI_DIDCOMPAT",
    "DI_DIDCLASS",
    "DI_AUTOASSIGNRES",
    "DI_NEEDRESTART",
    "DI_NEEDREBOOT",
    "DI_NOBROWSE",
    "DI_MULTMFGS",
    "DI_DISABLED",
    "DI_GENERALPAGE_ADDED",
    "DI_RESOURCEPAGE_ADDED",
    "DI_PROPERTIES_CHANGE",
    "DI_INF_IS_SORTED",
    "DI_ENUMSINGLEINF",
    "DI_DONOTCALLCONFIGMG",
    "DI_INSTALLDISABLED",
    "DI_COMPAT_FROM_CLASS",
    "DI_CLASSINSTALLPARAMS",
    "DI_NODI_DEFAULTACTION",
    "DI_QUIETINSTALL",
    "DI_NOFILECOPY",
    "DI_FORCECOPY",
    "DI_DRIVERPAGE_ADDED",
    "DI_USECI_SELECTSTRINGS",
    "DI_OVERRIDE_INFFLAGS",
    "DI_PROPS_NOCHANGEUSAGE",
    "DI_NOSELECTICONS",
    "DI_NOWRITE_IDS",
    "DI_FLAGSEX_RESERVED2",
    "DI_FLAGSEX_RESERVED3",
    "DI_FLAGSEX_CI_FAILED",
    "DI_FLAGSEX_FINISHINSTALL_ACTION",
    "DI_FLAGSEX_DIDINFOLIST",
    "DI_FLAGSEX_DIDCOMPATINFO",
    "DI_FLAGSEX_FILTERCLASSES",
    "DI_FLAGSEX_SETFAILEDINSTALL",
    "DI_FLAGSEX_DEVICECHANGE",
    "DI_FLAGSEX_ALWAYSWRITEIDS",
    "DI_FLAGSEX_PROPCHANGE_PENDING",
    "DI_FLAGSEX_ALLOWEXCLUDEDDRVS",
    "DI_FLAGSEX_NOUIONQUERYREMOVE",
    "DI_FLAGSEX_USECLASSFORCOMPAT",
    "DI_FLAGSEX_RESERVED4",
    "DI_FLAGSEX_NO_DRVREG_MODIFY",
    "DI_FLAGSEX_IN_SYSTEM_SETUP",
    "DI_FLAGSEX_INET_DRIVER",
    "DI_FLAGSEX_APPENDDRIVERLIST",
    "DI_FLAGSEX_PREINSTALLBACKUP",
    "DI_FLAGSEX_BACKUPONREPLACE",
    "DI_FLAGSEX_DRIVERLIST_FROM_URL",
    "DI_FLAGSEX_RESERVED1",
    "DI_FLAGSEX_EXCLUDE_OLD_INET_DRIVERS",
    "DI_FLAGSEX_POWERPAGE_ADDED",
    "DI_FLAGSEX_FILTERSIMILARDRIVERS",
    "DI_FLAGSEX_INSTALLEDDRIVER",
    "DI_FLAGSEX_NO_CLASSLIST_NODE_MERGE",
    "DI_FLAGSEX_ALTPLATFORM_DRVSEARCH",
    "DI_FLAGSEX_RESTART_DEVICE_ONLY",
    "DI_FLAGSEX_RECURSIVESEARCH",
    "DI_FLAGSEX_SEARCH_PUBLISHED_INFS",
    "ENABLECLASS_QUERY",
    "ENABLECLASS_SUCCESS",
    "ENABLECLASS_FAILURE",
    "DICS_ENABLE",
    "DICS_DISABLE",
    "DICS_PROPCHANGE",
    "DICS_START",
    "DICS_STOP",
    "DICS_FLAG_GLOBAL",
    "DICS_FLAG_CONFIGSPECIFIC",
    "DICS_FLAG_CONFIGGENERAL",
    "DI_REMOVEDEVICE_GLOBAL",
    "DI_REMOVEDEVICE_CONFIGSPECIFIC",
    "DI_UNREMOVEDEVICE_CONFIGSPECIFIC",
    "MAX_INSTALLWIZARD_DYNAPAGES",
    "NDW_INSTALLFLAG_DIDFACTDEFS",
    "NDW_INSTALLFLAG_HARDWAREALLREADYIN",
    "NDW_INSTALLFLAG_NEEDRESTART",
    "NDW_INSTALLFLAG_NEEDREBOOT",
    "NDW_INSTALLFLAG_NEEDSHUTDOWN",
    "NDW_INSTALLFLAG_EXPRESSINTRO",
    "NDW_INSTALLFLAG_SKIPISDEVINSTALLED",
    "NDW_INSTALLFLAG_NODETECTEDDEVS",
    "NDW_INSTALLFLAG_INSTALLSPECIFIC",
    "NDW_INSTALLFLAG_SKIPCLASSLIST",
    "NDW_INSTALLFLAG_CI_PICKED_OEM",
    "NDW_INSTALLFLAG_PCMCIAMODE",
    "NDW_INSTALLFLAG_PCMCIADEVICE",
    "NDW_INSTALLFLAG_USERCANCEL",
    "NDW_INSTALLFLAG_KNOWNCLASS",
    "DYNAWIZ_FLAG_PAGESADDED",
    "DYNAWIZ_FLAG_ANALYZE_HANDLECONFLICT",
    "DYNAWIZ_FLAG_INSTALLDET_NEXT",
    "DYNAWIZ_FLAG_INSTALLDET_PREV",
    "MIN_IDD_DYNAWIZ_RESOURCE_ID",
    "MAX_IDD_DYNAWIZ_RESOURCE_ID",
    "IDD_DYNAWIZ_FIRSTPAGE",
    "IDD_DYNAWIZ_SELECT_PREVPAGE",
    "IDD_DYNAWIZ_SELECT_NEXTPAGE",
    "IDD_DYNAWIZ_ANALYZE_PREVPAGE",
    "IDD_DYNAWIZ_ANALYZE_NEXTPAGE",
    "IDD_DYNAWIZ_SELECTDEV_PAGE",
    "IDD_DYNAWIZ_ANALYZEDEV_PAGE",
    "IDD_DYNAWIZ_INSTALLDETECTEDDEVS_PAGE",
    "IDD_DYNAWIZ_SELECTCLASS_PAGE",
    "IDD_DYNAWIZ_INSTALLDETECTED_PREVPAGE",
    "IDD_DYNAWIZ_INSTALLDETECTED_NEXTPAGE",
    "IDD_DYNAWIZ_INSTALLDETECTED_NODEVS",
    "DNF_DUPDESC",
    "DNF_OLDDRIVER",
    "DNF_EXCLUDEFROMLIST",
    "DNF_NODRIVER",
    "DNF_LEGACYINF",
    "DNF_CLASS_DRIVER",
    "DNF_COMPATIBLE_DRIVER",
    "DNF_INET_DRIVER",
    "DNF_UNUSED1",
    "DNF_UNUSED2",
    "DNF_OLD_INET_DRIVER",
    "DNF_BAD_DRIVER",
    "DNF_DUPPROVIDER",
    "DNF_INF_IS_SIGNED",
    "DNF_OEM_F6_INF",
    "DNF_DUPDRIVERVER",
    "DNF_BASIC_DRIVER",
    "DNF_AUTHENTICODE_SIGNED",
    "DNF_INSTALLEDDRIVER",
    "DNF_ALWAYSEXCLUDEFROMLIST",
    "DNF_INBOX_DRIVER",
    "DNF_REQUESTADDITIONALSOFTWARE",
    "DNF_UNUSED_22",
    "DNF_UNUSED_23",
    "DNF_UNUSED_24",
    "DNF_UNUSED_25",
    "DNF_UNUSED_26",
    "DNF_UNUSED_27",
    "DNF_UNUSED_28",
    "DNF_UNUSED_29",
    "DNF_UNUSED_30",
    "DNF_UNUSED_31",
    "DRIVER_HARDWAREID_RANK",
    "DRIVER_HARDWAREID_MASK",
    "DRIVER_UNTRUSTED_RANK",
    "DRIVER_W9X_SUSPECT_RANK",
    "DRIVER_COMPATID_RANK",
    "DRIVER_UNTRUSTED_HARDWAREID_RANK",
    "DRIVER_UNTRUSTED_COMPATID_RANK",
    "DRIVER_W9X_SUSPECT_HARDWAREID_RANK",
    "DRIVER_W9X_SUSPECT_COMPATID_RANK",
    "SPPSR_SELECT_DEVICE_RESOURCES",
    "SPPSR_ENUM_BASIC_DEVICE_PROPERTIES",
    "SPPSR_ENUM_ADV_DEVICE_PROPERTIES",
    "INFINFO_INF_SPEC_IS_HINF",
    "INFINFO_INF_NAME_IS_ABSOLUTE",
    "INFINFO_DEFAULT_SEARCH",
    "INFINFO_REVERSE_DEFAULT_SEARCH",
    "INFINFO_INF_PATH_LIST_SEARCH",
    "FILE_COMPRESSION_NONE",
    "FILE_COMPRESSION_WINLZA",
    "FILE_COMPRESSION_MSZIP",
    "FILE_COMPRESSION_NTCAB",
    "SRCLIST_TEMPORARY",
    "SRCLIST_NOBROWSE",
    "SRCLIST_SYSTEM",
    "SRCLIST_USER",
    "SRCLIST_SYSIFADMIN",
    "SRCLIST_SUBDIRS",
    "SRCLIST_APPEND",
    "SRCLIST_NOSTRIPPLATFORM",
    "IDF_NOBROWSE",
    "IDF_NOSKIP",
    "IDF_NODETAILS",
    "IDF_NOCOMPRESSED",
    "IDF_CHECKFIRST",
    "IDF_NOBEEP",
    "IDF_NOFOREGROUND",
    "IDF_WARNIFSKIP",
    "IDF_NOREMOVABLEMEDIAPROMPT",
    "IDF_USEDISKNAMEASPROMPT",
    "IDF_OEMDISK",
    "DPROMPT_SUCCESS",
    "DPROMPT_CANCEL",
    "DPROMPT_SKIPFILE",
    "DPROMPT_BUFFERTOOSMALL",
    "DPROMPT_OUTOFMEMORY",
    "SETDIRID_NOT_FULL_PATH",
    "SRCINFO_PATH",
    "SRCINFO_TAGFILE",
    "SRCINFO_DESCRIPTION",
    "SRCINFO_FLAGS",
    "SRCINFO_TAGFILE2",
    "SRC_FLAGS_CABFILE",
    "SP_FLAG_CABINETCONTINUATION",
    "SP_BACKUP_BACKUPPASS",
    "SP_BACKUP_DEMANDPASS",
    "SP_BACKUP_SPECIAL",
    "SP_BACKUP_BOOTFILE",
    "SPQ_SCAN_FILE_PRESENCE",
    "SPQ_SCAN_FILE_VALIDITY",
    "SPQ_SCAN_USE_CALLBACK",
    "SPQ_SCAN_USE_CALLBACKEX",
    "SPQ_SCAN_INFORM_USER",
    "SPQ_SCAN_PRUNE_COPY_QUEUE",
    "SPQ_SCAN_USE_CALLBACK_SIGNERINFO",
    "SPQ_SCAN_PRUNE_DELREN",
    "SPQ_SCAN_FILE_PRESENCE_WITHOUT_SOURCE",
    "SPQ_SCAN_FILE_COMPARISON",
    "SPQ_SCAN_ACTIVATE_DRP",
    "SPQ_DELAYED_COPY",
    "SPQ_FLAG_BACKUP_AWARE",
    "SPQ_FLAG_ABORT_IF_UNSIGNED",
    "SPQ_FLAG_FILES_MODIFIED",
    "SPQ_FLAG_DO_SHUFFLEMOVE",
    "SPQ_FLAG_VALID",
    "SPOST_MAX",
    "SUOI_FORCEDELETE",
    "SUOI_INTERNAL1",
    "SPDSL_IGNORE_DISK",
    "SPDSL_DISALLOW_NEGATIVE_ADJUST",
    "SPFILEQ_FILE_IN_USE",
    "SPFILEQ_REBOOT_RECOMMENDED",
    "SPFILEQ_REBOOT_IN_PROGRESS",
    "FLG_ADDREG_DELREG_BIT",
    "FLG_ADDREG_BINVALUETYPE",
    "FLG_ADDREG_NOCLOBBER",
    "FLG_ADDREG_DELVAL",
    "FLG_ADDREG_APPEND",
    "FLG_ADDREG_KEYONLY",
    "FLG_ADDREG_OVERWRITEONLY",
    "FLG_ADDREG_64BITKEY",
    "FLG_ADDREG_KEYONLY_COMMON",
    "FLG_ADDREG_32BITKEY",
    "FLG_ADDREG_TYPE_SZ",
    "FLG_ADDREG_TYPE_MULTI_SZ",
    "FLG_ADDREG_TYPE_EXPAND_SZ",
    "FLG_DELREG_VALUE",
    "FLG_DELREG_TYPE_SZ",
    "FLG_DELREG_TYPE_MULTI_SZ",
    "FLG_DELREG_TYPE_EXPAND_SZ",
    "FLG_DELREG_64BITKEY",
    "FLG_DELREG_KEYONLY_COMMON",
    "FLG_DELREG_32BITKEY",
    "FLG_DELREG_OPERATION_MASK",
    "FLG_BITREG_CLEARBITS",
    "FLG_BITREG_SETBITS",
    "FLG_BITREG_64BITKEY",
    "FLG_BITREG_32BITKEY",
    "FLG_INI2REG_64BITKEY",
    "FLG_INI2REG_32BITKEY",
    "FLG_REGSVR_DLLREGISTER",
    "FLG_REGSVR_DLLINSTALL",
    "FLG_PROFITEM_CURRENTUSER",
    "FLG_PROFITEM_DELETE",
    "FLG_PROFITEM_GROUP",
    "FLG_PROFITEM_CSIDL",
    "FLG_ADDPROPERTY_NOCLOBBER",
    "FLG_ADDPROPERTY_OVERWRITEONLY",
    "FLG_ADDPROPERTY_APPEND",
    "FLG_ADDPROPERTY_OR",
    "FLG_ADDPROPERTY_AND",
    "FLG_DELPROPERTY_MULTI_SZ_DELSTRING",
    "SPINST_LOGCONFIG",
    "SPINST_INIFILES",
    "SPINST_REGISTRY",
    "SPINST_INI2REG",
    "SPINST_FILES",
    "SPINST_BITREG",
    "SPINST_REGSVR",
    "SPINST_UNREGSVR",
    "SPINST_PROFILEITEMS",
    "SPINST_COPYINF",
    "SPINST_PROPERTIES",
    "SPINST_ALL",
    "SPINST_SINGLESECTION",
    "SPINST_LOGCONFIG_IS_FORCED",
    "SPINST_LOGCONFIGS_ARE_OVERRIDES",
    "SPINST_REGISTERCALLBACKAWARE",
    "SPINST_DEVICEINSTALL",
    "SPSVCINST_TAGTOFRONT",
    "SPSVCINST_ASSOCSERVICE",
    "SPSVCINST_DELETEEVENTLOGENTRY",
    "SPSVCINST_NOCLOBBER_DISPLAYNAME",
    "SPSVCINST_NOCLOBBER_STARTTYPE",
    "SPSVCINST_NOCLOBBER_ERRORCONTROL",
    "SPSVCINST_NOCLOBBER_LOADORDERGROUP",
    "SPSVCINST_NOCLOBBER_DEPENDENCIES",
    "SPSVCINST_NOCLOBBER_DESCRIPTION",
    "SPSVCINST_STOPSERVICE",
    "SPSVCINST_CLOBBER_SECURITY",
    "SPSVCINST_STARTSERVICE",
    "SPSVCINST_NOCLOBBER_REQUIREDPRIVILEGES",
    "SPSVCINST_NOCLOBBER_TRIGGERS",
    "SPSVCINST_NOCLOBBER_SERVICESIDTYPE",
    "SPSVCINST_NOCLOBBER_DELAYEDAUTOSTART",
    "SPSVCINST_UNIQUE_NAME",
    "SPFILELOG_SYSTEMLOG",
    "SPFILELOG_FORCENEW",
    "SPFILELOG_QUERYONLY",
    "SPFILELOG_OEMFILE",
    "LogSevInformation",
    "LogSevWarning",
    "LogSevError",
    "LogSevFatalError",
    "LogSevMaximum",
    "DICD_GENERATE_ID",
    "DICD_INHERIT_CLASSDRVS",
    "DIOD_INHERIT_CLASSDRVS",
    "DIOD_CANCEL_REMOVE",
    "DIODI_NO_ADD",
    "SPRDI_FIND_DUPS",
    "SPDIT_NODRIVER",
    "DIGCF_DEFAULT",
    "DIGCF_PRESENT",
    "DIGCF_ALLCLASSES",
    "DIGCF_PROFILE",
    "DIGCF_DEVICEINTERFACE",
    "DIGCF_INTERFACEDEVICE",
    "DIBCI_NOINSTALLCLASS",
    "DIBCI_NODISPLAYCLASS",
    "DIOCR_INSTALLER",
    "DIOCR_INTERFACE",
    "DIREG_DEV",
    "DIREG_DRV",
    "DIREG_BOTH",
    "DICLASSPROP_INSTALLER",
    "DICLASSPROP_INTERFACE",
    "SPDRP_DEVICEDESC",
    "SPDRP_HARDWAREID",
    "SPDRP_COMPATIBLEIDS",
    "SPDRP_UNUSED0",
    "SPDRP_SERVICE",
    "SPDRP_UNUSED1",
    "SPDRP_UNUSED2",
    "SPDRP_CLASS",
    "SPDRP_CLASSGUID",
    "SPDRP_DRIVER",
    "SPDRP_CONFIGFLAGS",
    "SPDRP_MFG",
    "SPDRP_FRIENDLYNAME",
    "SPDRP_LOCATION_INFORMATION",
    "SPDRP_PHYSICAL_DEVICE_OBJECT_NAME",
    "SPDRP_CAPABILITIES",
    "SPDRP_UI_NUMBER",
    "SPDRP_UPPERFILTERS",
    "SPDRP_LOWERFILTERS",
    "SPDRP_BUSTYPEGUID",
    "SPDRP_LEGACYBUSTYPE",
    "SPDRP_BUSNUMBER",
    "SPDRP_ENUMERATOR_NAME",
    "SPDRP_SECURITY",
    "SPDRP_SECURITY_SDS",
    "SPDRP_DEVTYPE",
    "SPDRP_EXCLUSIVE",
    "SPDRP_CHARACTERISTICS",
    "SPDRP_ADDRESS",
    "SPDRP_UI_NUMBER_DESC_FORMAT",
    "SPDRP_DEVICE_POWER_DATA",
    "SPDRP_REMOVAL_POLICY",
    "SPDRP_REMOVAL_POLICY_HW_DEFAULT",
    "SPDRP_REMOVAL_POLICY_OVERRIDE",
    "SPDRP_INSTALL_STATE",
    "SPDRP_LOCATION_PATHS",
    "SPDRP_BASE_CONTAINERID",
    "SPDRP_MAXIMUM_PROPERTY",
    "SPCRP_UPPERFILTERS",
    "SPCRP_LOWERFILTERS",
    "SPCRP_SECURITY",
    "SPCRP_SECURITY_SDS",
    "SPCRP_DEVTYPE",
    "SPCRP_EXCLUSIVE",
    "SPCRP_CHARACTERISTICS",
    "SPCRP_MAXIMUM_PROPERTY",
    "DMI_MASK",
    "DMI_BKCOLOR",
    "DMI_USERECT",
    "DIGCDP_FLAG_BASIC",
    "DIGCDP_FLAG_ADVANCED",
    "DIGCDP_FLAG_REMOTE_BASIC",
    "DIGCDP_FLAG_REMOTE_ADVANCED",
    "IDI_RESOURCEFIRST",
    "IDI_RESOURCE",
    "IDI_RESOURCELAST",
    "IDI_RESOURCEOVERLAYFIRST",
    "IDI_RESOURCEOVERLAYLAST",
    "IDI_CONFLICT",
    "IDI_CLASSICON_OVERLAYFIRST",
    "IDI_CLASSICON_OVERLAYLAST",
    "IDI_PROBLEM_OVL",
    "IDI_DISABLED_OVL",
    "IDI_FORCED_OVL",
    "SPWPT_SELECTDEVICE",
    "SPWP_USE_DEVINFO_DATA",
    "SIGNERSCORE_UNKNOWN",
    "SIGNERSCORE_W9X_SUSPECT",
    "SIGNERSCORE_UNSIGNED",
    "SIGNERSCORE_AUTHENTICODE",
    "SIGNERSCORE_WHQL",
    "SIGNERSCORE_UNCLASSIFIED",
    "SIGNERSCORE_INBOX",
    "SIGNERSCORE_LOGO_STANDARD",
    "SIGNERSCORE_LOGO_PREMIUM",
    "SIGNERSCORE_MASK",
    "SIGNERSCORE_SIGNED_MASK",
    "DICUSTOMDEVPROP_MERGE_MULTISZ",
    "SCWMI_CLOBBER_SECURITY",
    "MAX_DEVICE_ID_LEN",
    "MAX_DEVNODE_ID_LEN",
    "MAX_GUID_STRING_LEN",
    "MAX_CLASS_NAME_LEN",
    "MAX_PROFILE_LEN",
    "MAX_CONFIG_VALUE",
    "MAX_INSTANCE_VALUE",
    "MAX_MEM_REGISTERS",
    "MAX_IO_PORTS",
    "MAX_IRQS",
    "MAX_DMA_CHANNELS",
    "DWORD_MAX",
    "CONFIGMG_VERSION",
    "CM_CDMASK_DEVINST",
    "CM_CDMASK_RESDES",
    "CM_CDMASK_FLAGS",
    "CM_CDMASK_DESCRIPTION",
    "CM_CDMASK_VALID",
    "CM_CDFLAGS_DRIVER",
    "CM_CDFLAGS_ROOT_OWNED",
    "CM_CDFLAGS_RESERVED",
    "IO_ALIAS_10_BIT_DECODE",
    "IO_ALIAS_12_BIT_DECODE",
    "IO_ALIAS_16_BIT_DECODE",
    "IO_ALIAS_POSITIVE_DECODE",
    "IOA_Local",
    "CM_RESDES_WIDTH_DEFAULT",
    "CM_RESDES_WIDTH_32",
    "CM_RESDES_WIDTH_64",
    "CM_RESDES_WIDTH_BITS",
    "PCD_MAX_MEMORY",
    "PCD_MAX_IO",
    "CM_HWPI_NOT_DOCKABLE",
    "CM_HWPI_UNDOCKED",
    "CM_HWPI_DOCKED",
    "ResType_All",
    "ResType_None",
    "ResType_Mem",
    "ResType_IO",
    "ResType_DMA",
    "ResType_IRQ",
    "ResType_DoNotUse",
    "ResType_BusNumber",
    "ResType_MemLarge",
    "ResType_MAX",
    "ResType_Ignored_Bit",
    "ResType_ClassSpecific",
    "ResType_Reserved",
    "ResType_DevicePrivate",
    "ResType_PcCardConfig",
    "ResType_MfCardConfig",
    "ResType_Connection",
    "CM_ADD_RANGE_ADDIFCONFLICT",
    "CM_ADD_RANGE_DONOTADDIFCONFLICT",
    "CM_ADD_RANGE_BITS",
    "BASIC_LOG_CONF",
    "FILTERED_LOG_CONF",
    "ALLOC_LOG_CONF",
    "BOOT_LOG_CONF",
    "FORCED_LOG_CONF",
    "OVERRIDE_LOG_CONF",
    "NUM_LOG_CONF",
    "LOG_CONF_BITS",
    "PRIORITY_EQUAL_FIRST",
    "PRIORITY_EQUAL_LAST",
    "PRIORITY_BIT",
    "RegDisposition_OpenAlways",
    "RegDisposition_OpenExisting",
    "RegDisposition_Bits",
    "CM_ADD_ID_HARDWARE",
    "CM_ADD_ID_COMPATIBLE",
    "CM_ADD_ID_BITS",
    "CM_CREATE_DEVNODE_NORMAL",
    "CM_CREATE_DEVNODE_NO_WAIT_INSTALL",
    "CM_CREATE_DEVNODE_PHANTOM",
    "CM_CREATE_DEVNODE_GENERATE_ID",
    "CM_CREATE_DEVNODE_DO_NOT_INSTALL",
    "CM_CREATE_DEVNODE_BITS",
    "CM_CREATE_DEVINST_NORMAL",
    "CM_CREATE_DEVINST_NO_WAIT_INSTALL",
    "CM_CREATE_DEVINST_PHANTOM",
    "CM_CREATE_DEVINST_GENERATE_ID",
    "CM_CREATE_DEVINST_DO_NOT_INSTALL",
    "CM_CREATE_DEVINST_BITS",
    "CM_DELETE_CLASS_ONLY",
    "CM_DELETE_CLASS_SUBKEYS",
    "CM_DELETE_CLASS_INTERFACE",
    "CM_DELETE_CLASS_BITS",
    "CM_ENUMERATE_CLASSES_INSTALLER",
    "CM_ENUMERATE_CLASSES_INTERFACE",
    "CM_ENUMERATE_CLASSES_BITS",
    "CM_DETECT_NEW_PROFILE",
    "CM_DETECT_CRASHED",
    "CM_DETECT_HWPROF_FIRST_BOOT",
    "CM_DETECT_RUN",
    "CM_DETECT_BITS",
    "CM_DISABLE_POLITE",
    "CM_DISABLE_ABSOLUTE",
    "CM_DISABLE_HARDWARE",
    "CM_DISABLE_UI_NOT_OK",
    "CM_DISABLE_PERSIST",
    "CM_DISABLE_BITS",
    "CM_GETIDLIST_FILTER_NONE",
    "CM_GETIDLIST_FILTER_ENUMERATOR",
    "CM_GETIDLIST_FILTER_SERVICE",
    "CM_GETIDLIST_FILTER_EJECTRELATIONS",
    "CM_GETIDLIST_FILTER_REMOVALRELATIONS",
    "CM_GETIDLIST_FILTER_POWERRELATIONS",
    "CM_GETIDLIST_FILTER_BUSRELATIONS",
    "CM_GETIDLIST_DONOTGENERATE",
    "CM_GETIDLIST_FILTER_BITS",
    "CM_GETIDLIST_FILTER_TRANSPORTRELATIONS",
    "CM_GETIDLIST_FILTER_PRESENT",
    "CM_GETIDLIST_FILTER_CLASS",
    "CM_GET_DEVICE_INTERFACE_LIST_PRESENT",
    "CM_GET_DEVICE_INTERFACE_LIST_ALL_DEVICES",
    "CM_GET_DEVICE_INTERFACE_LIST_BITS",
    "CM_DRP_DEVICEDESC",
    "CM_DRP_HARDWAREID",
    "CM_DRP_COMPATIBLEIDS",
    "CM_DRP_UNUSED0",
    "CM_DRP_SERVICE",
    "CM_DRP_UNUSED1",
    "CM_DRP_UNUSED2",
    "CM_DRP_CLASS",
    "CM_DRP_CLASSGUID",
    "CM_DRP_DRIVER",
    "CM_DRP_CONFIGFLAGS",
    "CM_DRP_MFG",
    "CM_DRP_FRIENDLYNAME",
    "CM_DRP_LOCATION_INFORMATION",
    "CM_DRP_PHYSICAL_DEVICE_OBJECT_NAME",
    "CM_DRP_CAPABILITIES",
    "CM_DRP_UI_NUMBER",
    "CM_DRP_UPPERFILTERS",
    "CM_CRP_UPPERFILTERS",
    "CM_DRP_LOWERFILTERS",
    "CM_CRP_LOWERFILTERS",
    "CM_DRP_BUSTYPEGUID",
    "CM_DRP_LEGACYBUSTYPE",
    "CM_DRP_BUSNUMBER",
    "CM_DRP_ENUMERATOR_NAME",
    "CM_DRP_SECURITY",
    "CM_CRP_SECURITY",
    "CM_DRP_SECURITY_SDS",
    "CM_CRP_SECURITY_SDS",
    "CM_DRP_DEVTYPE",
    "CM_CRP_DEVTYPE",
    "CM_DRP_EXCLUSIVE",
    "CM_CRP_EXCLUSIVE",
    "CM_DRP_CHARACTERISTICS",
    "CM_CRP_CHARACTERISTICS",
    "CM_DRP_ADDRESS",
    "CM_DRP_UI_NUMBER_DESC_FORMAT",
    "CM_DRP_DEVICE_POWER_DATA",
    "CM_DRP_REMOVAL_POLICY",
    "CM_DRP_REMOVAL_POLICY_HW_DEFAULT",
    "CM_DRP_REMOVAL_POLICY_OVERRIDE",
    "CM_DRP_INSTALL_STATE",
    "CM_DRP_LOCATION_PATHS",
    "CM_DRP_BASE_CONTAINERID",
    "CM_DRP_MIN",
    "CM_CRP_MIN",
    "CM_DRP_MAX",
    "CM_CRP_MAX",
    "CM_DEVCAP_LOCKSUPPORTED",
    "CM_DEVCAP_EJECTSUPPORTED",
    "CM_DEVCAP_REMOVABLE",
    "CM_DEVCAP_DOCKDEVICE",
    "CM_DEVCAP_UNIQUEID",
    "CM_DEVCAP_SILENTINSTALL",
    "CM_DEVCAP_RAWDEVICEOK",
    "CM_DEVCAP_SURPRISEREMOVALOK",
    "CM_DEVCAP_HARDWAREDISABLED",
    "CM_DEVCAP_NONDYNAMIC",
    "CM_DEVCAP_SECUREDEVICE",
    "CM_REMOVAL_POLICY_EXPECT_NO_REMOVAL",
    "CM_REMOVAL_POLICY_EXPECT_ORDERLY_REMOVAL",
    "CM_REMOVAL_POLICY_EXPECT_SURPRISE_REMOVAL",
    "CM_INSTALL_STATE_INSTALLED",
    "CM_INSTALL_STATE_NEEDS_REINSTALL",
    "CM_INSTALL_STATE_FAILED_INSTALL",
    "CM_INSTALL_STATE_FINISH_INSTALL",
    "CM_LOCATE_DEVNODE_NORMAL",
    "CM_LOCATE_DEVNODE_PHANTOM",
    "CM_LOCATE_DEVNODE_CANCELREMOVE",
    "CM_LOCATE_DEVNODE_NOVALIDATION",
    "CM_LOCATE_DEVNODE_BITS",
    "CM_LOCATE_DEVINST_NORMAL",
    "CM_LOCATE_DEVINST_PHANTOM",
    "CM_LOCATE_DEVINST_CANCELREMOVE",
    "CM_LOCATE_DEVINST_NOVALIDATION",
    "CM_LOCATE_DEVINST_BITS",
    "CM_OPEN_CLASS_KEY_INSTALLER",
    "CM_OPEN_CLASS_KEY_INTERFACE",
    "CM_OPEN_CLASS_KEY_BITS",
    "CM_REMOVE_UI_OK",
    "CM_REMOVE_UI_NOT_OK",
    "CM_REMOVE_NO_RESTART",
    "CM_REMOVE_DISABLE",
    "CM_REMOVE_BITS",
    "CM_QUERY_REMOVE_UI_OK",
    "CM_QUERY_REMOVE_UI_NOT_OK",
    "CM_REENUMERATE_NORMAL",
    "CM_REENUMERATE_SYNCHRONOUS",
    "CM_REENUMERATE_RETRY_INSTALLATION",
    "CM_REENUMERATE_ASYNCHRONOUS",
    "CM_REENUMERATE_BITS",
    "CM_REGISTER_DEVICE_DRIVER_STATIC",
    "CM_REGISTER_DEVICE_DRIVER_DISABLEABLE",
    "CM_REGISTER_DEVICE_DRIVER_REMOVABLE",
    "CM_REGISTER_DEVICE_DRIVER_BITS",
    "CM_REGISTRY_HARDWARE",
    "CM_REGISTRY_SOFTWARE",
    "CM_REGISTRY_USER",
    "CM_REGISTRY_CONFIG",
    "CM_REGISTRY_BITS",
    "CM_SET_DEVNODE_PROBLEM_NORMAL",
    "CM_SET_DEVNODE_PROBLEM_OVERRIDE",
    "CM_SET_DEVNODE_PROBLEM_BITS",
    "CM_SET_DEVINST_PROBLEM_NORMAL",
    "CM_SET_DEVINST_PROBLEM_OVERRIDE",
    "CM_SET_DEVINST_PROBLEM_BITS",
    "CM_SET_HW_PROF_FLAGS_UI_NOT_OK",
    "CM_SET_HW_PROF_FLAGS_BITS",
    "CM_SETUP_DEVNODE_READY",
    "CM_SETUP_DEVINST_READY",
    "CM_SETUP_DOWNLOAD",
    "CM_SETUP_WRITE_LOG_CONFS",
    "CM_SETUP_PROP_CHANGE",
    "CM_SETUP_DEVNODE_RESET",
    "CM_SETUP_DEVINST_RESET",
    "CM_SETUP_DEVNODE_CONFIG",
    "CM_SETUP_DEVINST_CONFIG",
    "CM_SETUP_DEVNODE_CONFIG_CLASS",
    "CM_SETUP_DEVINST_CONFIG_CLASS",
    "CM_SETUP_DEVNODE_CONFIG_EXTENSIONS",
    "CM_SETUP_DEVINST_CONFIG_EXTENSIONS",
    "CM_SETUP_DEVNODE_CONFIG_RESET",
    "CM_SETUP_DEVINST_CONFIG_RESET",
    "CM_SETUP_BITS",
    "CM_QUERY_ARBITRATOR_RAW",
    "CM_QUERY_ARBITRATOR_TRANSLATED",
    "CM_QUERY_ARBITRATOR_BITS",
    "CM_CUSTOMDEVPROP_MERGE_MULTISZ",
    "CM_CUSTOMDEVPROP_BITS",
    "CM_NAME_ATTRIBUTE_NAME_RETRIEVED_FROM_DEVICE",
    "CM_NAME_ATTRIBUTE_USER_ASSIGNED_NAME",
    "CM_CLASS_PROPERTY_INSTALLER",
    "CM_CLASS_PROPERTY_INTERFACE",
    "CM_CLASS_PROPERTY_BITS",
    "CM_NOTIFY_FILTER_FLAG_ALL_INTERFACE_CLASSES",
    "CM_NOTIFY_FILTER_FLAG_ALL_DEVICE_INSTANCES",
    "CM_GLOBAL_STATE_CAN_DO_UI",
    "CM_GLOBAL_STATE_ON_BIG_STACK",
    "CM_GLOBAL_STATE_SERVICES_AVAILABLE",
    "CM_GLOBAL_STATE_SHUTTING_DOWN",
    "CM_GLOBAL_STATE_DETECTION_PENDING",
    "CM_GLOBAL_STATE_REBOOT_REQUIRED",
    "INSTALLFLAG_FORCE",
    "INSTALLFLAG_READONLY",
    "INSTALLFLAG_NONINTERACTIVE",
    "INSTALLFLAG_BITS",
    "DIIDFLAG_SHOWSEARCHUI",
    "DIIDFLAG_NOFINISHINSTALLUI",
    "DIIDFLAG_INSTALLNULLDRIVER",
    "DIIDFLAG_INSTALLCOPYINFDRIVERS",
    "DIIDFLAG_BITS",
    "DIIRFLAG_INF_ALREADY_COPIED",
    "DIIRFLAG_FORCE_INF",
    "DIIRFLAG_HW_USING_THE_INF",
    "DIIRFLAG_HOTPATCH",
    "DIIRFLAG_NOBACKUP",
    "DIIRFLAG_PRE_CONFIGURE_INF",
    "DIIRFLAG_INSTALL_AS_SET",
    "DIURFLAG_NO_REMOVE_INF",
    "DIURFLAG_RESERVED",
    "ROLLBACK_FLAG_NO_UI",
    "ROLLBACK_BITS",
    "MAX_KEY_LEN",
    "MAX_PRIORITYSTR_LEN",
    "MAX_INF_FLAG",
    "MAX_INFSTR_STRKEY_LEN",
    "GUID_HWPROFILE_QUERY_CHANGE",
    "GUID_HWPROFILE_CHANGE_CANCELLED",
    "GUID_HWPROFILE_CHANGE_COMPLETE",
    "GUID_DEVICE_INTERFACE_ARRIVAL",
    "GUID_DEVICE_INTERFACE_REMOVAL",
    "GUID_TARGET_DEVICE_QUERY_REMOVE",
    "GUID_TARGET_DEVICE_REMOVE_CANCELLED",
    "GUID_TARGET_DEVICE_REMOVE_COMPLETE",
    "GUID_PNP_CUSTOM_NOTIFICATION",
    "GUID_PNP_POWER_NOTIFICATION",
    "GUID_PNP_POWER_SETTING_CHANGE",
    "GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED",
    "GUID_KERNEL_SOFT_RESTART_PREPARE",
    "GUID_KERNEL_SOFT_RESTART_CANCEL",
    "GUID_RECOVERY_PCI_PREPARE_SHUTDOWN",
    "GUID_RECOVERY_NVMED_PREPARE_SHUTDOWN",
    "GUID_KERNEL_SOFT_RESTART_FINALIZE",
    "GUID_BUS_INTERFACE_STANDARD",
    "GUID_PCI_BUS_INTERFACE_STANDARD",
    "GUID_PCI_BUS_INTERFACE_STANDARD2",
    "GUID_ARBITER_INTERFACE_STANDARD",
    "GUID_TRANSLATOR_INTERFACE_STANDARD",
    "GUID_ACPI_INTERFACE_STANDARD",
    "GUID_INT_ROUTE_INTERFACE_STANDARD",
    "GUID_PCMCIA_BUS_INTERFACE_STANDARD",
    "GUID_ACPI_REGS_INTERFACE_STANDARD",
    "GUID_LEGACY_DEVICE_DETECTION_STANDARD",
    "GUID_PCI_DEVICE_PRESENT_INTERFACE",
    "GUID_MF_ENUMERATION_INTERFACE",
    "GUID_REENUMERATE_SELF_INTERFACE_STANDARD",
    "GUID_AGP_TARGET_BUS_INTERFACE_STANDARD",
    "GUID_ACPI_CMOS_INTERFACE_STANDARD",
    "GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD",
    "GUID_ACPI_INTERFACE_STANDARD2",
    "GUID_PNP_LOCATION_INTERFACE",
    "GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE",
    "GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE",
    "GUID_MSIX_TABLE_CONFIG_INTERFACE",
    "GUID_D3COLD_SUPPORT_INTERFACE",
    "GUID_PROCESSOR_PCC_INTERFACE_STANDARD",
    "GUID_PCI_VIRTUALIZATION_INTERFACE",
    "GUID_PCC_INTERFACE_STANDARD",
    "GUID_PCC_INTERFACE_INTERNAL",
    "GUID_THERMAL_COOLING_INTERFACE",
    "GUID_DMA_CACHE_COHERENCY_INTERFACE",
    "GUID_DEVICE_RESET_INTERFACE_STANDARD",
    "GUID_IOMMU_BUS_INTERFACE",
    "GUID_PCI_SECURITY_INTERFACE",
    "GUID_SCM_BUS_INTERFACE",
    "GUID_SECURE_DRIVER_INTERFACE",
    "GUID_SDEV_IDENTIFIER_INTERFACE",
    "GUID_SCM_BUS_NVD_INTERFACE",
    "GUID_SCM_BUS_LD_INTERFACE",
    "GUID_SCM_PHYSICAL_NVDIMM_INTERFACE",
    "GUID_PNP_EXTENDED_ADDRESS_INTERFACE",
    "GUID_D3COLD_AUX_POWER_AND_TIMING_INTERFACE",
    "GUID_PCI_FPGA_CONTROL_INTERFACE",
    "GUID_PCI_PTM_CONTROL_INTERFACE",
    "GUID_BUS_RESOURCE_UPDATE_INTERFACE",
    "GUID_NPEM_CONTROL_INTERFACE",
    "GUID_PCI_ATS_INTERFACE",
    "GUID_BUS_TYPE_INTERNAL",
    "GUID_BUS_TYPE_PCMCIA",
    "GUID_BUS_TYPE_PCI",
    "GUID_BUS_TYPE_ISAPNP",
    "GUID_BUS_TYPE_EISA",
    "GUID_BUS_TYPE_MCA",
    "GUID_BUS_TYPE_SERENUM",
    "GUID_BUS_TYPE_USB",
    "GUID_BUS_TYPE_LPTENUM",
    "GUID_BUS_TYPE_USBPRINT",
    "GUID_BUS_TYPE_DOT4PRT",
    "GUID_BUS_TYPE_1394",
    "GUID_BUS_TYPE_HID",
    "GUID_BUS_TYPE_AVC",
    "GUID_BUS_TYPE_IRDA",
    "GUID_BUS_TYPE_SD",
    "GUID_BUS_TYPE_ACPI",
    "GUID_BUS_TYPE_SW_DEVICE",
    "GUID_BUS_TYPE_SCM",
    "GUID_POWER_DEVICE_ENABLE",
    "GUID_POWER_DEVICE_TIMEOUTS",
    "GUID_POWER_DEVICE_WAKE_ENABLE",
    "GUID_WUDF_DEVICE_HOST_PROBLEM",
    "GUID_PARTITION_UNIT_INTERFACE_STANDARD",
    "GUID_QUERY_CRASHDUMP_FUNCTIONS",
    "SP_COPY_STYLE",
    "SP_COPY_DELETESOURCE",
    "SP_COPY_REPLACEONLY",
    "SP_COPY_NEWER_OR_SAME",
    "SP_COPY_NEWER_ONLY",
    "SP_COPY_NOOVERWRITE",
    "SP_COPY_NODECOMP",
    "SP_COPY_LANGUAGEAWARE",
    "SP_COPY_SOURCE_ABSOLUTE",
    "SP_COPY_SOURCEPATH_ABSOLUTE",
    "SP_COPY_FORCE_IN_USE",
    "SP_COPY_IN_USE_NEEDS_REBOOT",
    "SP_COPY_NOSKIP",
    "SP_COPY_FORCE_NOOVERWRITE",
    "SP_COPY_FORCE_NEWER",
    "SP_COPY_WARNIFSKIP",
    "SP_COPY_NOBROWSE",
    "SP_COPY_NEWER",
    "SP_COPY_RESERVED",
    "SP_COPY_OEMINF_CATALOG_ONLY",
    "SP_COPY_REPLACE_BOOT_FILE",
    "SP_COPY_NOPRUNE",
    "SP_COPY_OEM_F6_INF",
    "SP_COPY_ALREADYDECOMP",
    "SP_COPY_WINDOWS_SIGNED",
    "SP_COPY_PNPLOCKED",
    "SP_COPY_IN_USE_TRY_RENAME",
    "SP_COPY_INBOX_INF",
    "SP_COPY_HARDLINK",
    "SETUP_FILE_OPERATION",
    "FILEOP_DELETE",
    "FILEOP_COPY",
    "OEM_SOURCE_MEDIA_TYPE",
    "SPOST_NONE",
    "SPOST_PATH",
    "SPOST_URL",
    "SETUP_DI_BUILD_DRIVER_DRIVER_TYPE",
    "SPDIT_CLASSDRIVER",
    "SPDIT_COMPATDRIVER",
    "SP_INF_STYLE",
    "INF_STYLE_NONE",
    "INF_STYLE_OLDNT",
    "INF_STYLE_WIN4",
    "CONFIGRET",
    "CR_SUCCESS",
    "CR_DEFAULT",
    "CR_OUT_OF_MEMORY",
    "CR_INVALID_POINTER",
    "CR_INVALID_FLAG",
    "CR_INVALID_DEVNODE",
    "CR_INVALID_DEVINST",
    "CR_INVALID_RES_DES",
    "CR_INVALID_LOG_CONF",
    "CR_INVALID_ARBITRATOR",
    "CR_INVALID_NODELIST",
    "CR_DEVNODE_HAS_REQS",
    "CR_DEVINST_HAS_REQS",
    "CR_INVALID_RESOURCEID",
    "CR_DLVXD_NOT_FOUND",
    "CR_NO_SUCH_DEVNODE",
    "CR_NO_SUCH_DEVINST",
    "CR_NO_MORE_LOG_CONF",
    "CR_NO_MORE_RES_DES",
    "CR_ALREADY_SUCH_DEVNODE",
    "CR_ALREADY_SUCH_DEVINST",
    "CR_INVALID_RANGE_LIST",
    "CR_INVALID_RANGE",
    "CR_FAILURE",
    "CR_NO_SUCH_LOGICAL_DEV",
    "CR_CREATE_BLOCKED",
    "CR_NOT_SYSTEM_VM",
    "CR_REMOVE_VETOED",
    "CR_APM_VETOED",
    "CR_INVALID_LOAD_TYPE",
    "CR_BUFFER_SMALL",
    "CR_NO_ARBITRATOR",
    "CR_NO_REGISTRY_HANDLE",
    "CR_REGISTRY_ERROR",
    "CR_INVALID_DEVICE_ID",
    "CR_INVALID_DATA",
    "CR_INVALID_API",
    "CR_DEVLOADER_NOT_READY",
    "CR_NEED_RESTART",
    "CR_NO_MORE_HW_PROFILES",
    "CR_DEVICE_NOT_THERE",
    "CR_NO_SUCH_VALUE",
    "CR_WRONG_TYPE",
    "CR_INVALID_PRIORITY",
    "CR_NOT_DISABLEABLE",
    "CR_FREE_RESOURCES",
    "CR_QUERY_VETOED",
    "CR_CANT_SHARE_IRQ",
    "CR_NO_DEPENDENT",
    "CR_SAME_RESOURCES",
    "CR_NO_SUCH_REGISTRY_KEY",
    "CR_INVALID_MACHINENAME",
    "CR_REMOTE_COMM_FAILURE",
    "CR_MACHINE_UNAVAILABLE",
    "CR_NO_CM_SERVICES",
    "CR_ACCESS_DENIED",
    "CR_CALL_NOT_IMPLEMENTED",
    "CR_INVALID_PROPERTY",
    "CR_DEVICE_INTERFACE_ACTIVE",
    "CR_NO_SUCH_DEVICE_INTERFACE",
    "CR_INVALID_REFERENCE_STRING",
    "CR_INVALID_CONFLICT_LIST",
    "CR_INVALID_INDEX",
    "CR_INVALID_STRUCTURE_SIZE",
    "NUM_CR_RESULTS",
    "HCMNOTIFICATION",
    "INFCONTEXT",
    "SP_INF_INFORMATION",
    "SP_ALTPLATFORM_INFO_V3",
    "SP_ALTPLATFORM_INFO_V2",
    "SP_ALTPLATFORM_INFO_V1",
    "SP_ORIGINAL_FILE_INFO_A",
    "SP_ORIGINAL_FILE_INFO_W",
    "PSP_FILE_CALLBACK_A",
    "PSP_FILE_CALLBACK_W",
    "FILEPATHS_A",
    "FILEPATHS_W",
    "FILEPATHS_SIGNERINFO_A",
    "FILEPATHS_SIGNERINFO_W",
    "SOURCE_MEDIA_A",
    "SOURCE_MEDIA_W",
    "CABINET_INFO_A",
    "CABINET_INFO_W",
    "FILE_IN_CABINET_INFO_A",
    "FILE_IN_CABINET_INFO_W",
    "SP_REGISTER_CONTROL_STATUSA",
    "SP_REGISTER_CONTROL_STATUSW",
    "SP_FILE_COPY_PARAMS_A",
    "SP_FILE_COPY_PARAMS_W",
    "SP_DEVINFO_DATA",
    "SP_DEVICE_INTERFACE_DATA",
    "SP_DEVICE_INTERFACE_DETAIL_DATA_A",
    "SP_DEVICE_INTERFACE_DETAIL_DATA_W",
    "SP_DEVINFO_LIST_DETAIL_DATA_A",
    "SP_DEVINFO_LIST_DETAIL_DATA_W",
    "SP_DEVINSTALL_PARAMS_A",
    "SP_DEVINSTALL_PARAMS_W",
    "SP_CLASSINSTALL_HEADER",
    "SP_ENABLECLASS_PARAMS",
    "SP_PROPCHANGE_PARAMS",
    "SP_REMOVEDEVICE_PARAMS",
    "SP_UNREMOVEDEVICE_PARAMS",
    "SP_SELECTDEVICE_PARAMS_A",
    "SP_SELECTDEVICE_PARAMS_W",
    "PDETECT_PROGRESS_NOTIFY",
    "SP_DETECTDEVICE_PARAMS",
    "SP_INSTALLWIZARD_DATA",
    "SP_NEWDEVICEWIZARD_DATA",
    "SP_TROUBLESHOOTER_PARAMS_A",
    "SP_TROUBLESHOOTER_PARAMS_W",
    "SP_POWERMESSAGEWAKE_PARAMS_A",
    "SP_POWERMESSAGEWAKE_PARAMS_W",
    "SP_DRVINFO_DATA_V2_A",
    "SP_DRVINFO_DATA_V2_W",
    "SP_DRVINFO_DATA_V1_A",
    "SP_DRVINFO_DATA_V1_W",
    "SP_DRVINFO_DETAIL_DATA_A",
    "SP_DRVINFO_DETAIL_DATA_W",
    "SP_DRVINSTALL_PARAMS",
    "PSP_DETSIG_CMPPROC",
    "COINSTALLER_CONTEXT_DATA",
    "SP_CLASSIMAGELIST_DATA",
    "SP_PROPSHEETPAGE_REQUEST",
    "SP_BACKUP_QUEUE_PARAMS_V2_A",
    "SP_BACKUP_QUEUE_PARAMS_V2_W",
    "SP_BACKUP_QUEUE_PARAMS_V1_A",
    "SP_BACKUP_QUEUE_PARAMS_V1_W",
    "SetupFileLogInfo",
    "SetupFileLogInfo_SetupFileLogSourceFilename",
    "SetupFileLogInfo_SetupFileLogChecksum",
    "SetupFileLogInfo_SetupFileLogDiskTagfile",
    "SetupFileLogInfo_SetupFileLogDiskDescription",
    "SetupFileLogInfo_SetupFileLogOtherInfo",
    "SetupFileLogInfo_SetupFileLogMax",
    "SP_INF_SIGNER_INFO_V1_A",
    "SP_INF_SIGNER_INFO_V1_W",
    "SP_INF_SIGNER_INFO_V2_A",
    "SP_INF_SIGNER_INFO_V2_W",
    "PNP_VETO_TYPE",
    "PNP_VetoTypeUnknown",
    "PNP_VetoLegacyDevice",
    "PNP_VetoPendingClose",
    "PNP_VetoWindowsApp",
    "PNP_VetoWindowsService",
    "PNP_VetoOutstandingOpen",
    "PNP_VetoDevice",
    "PNP_VetoDriver",
    "PNP_VetoIllegalDeviceRequest",
    "PNP_VetoInsufficientPower",
    "PNP_VetoNonDisableable",
    "PNP_VetoLegacyDriver",
    "PNP_VetoInsufficientRights",
    "PNP_VetoAlreadyRemoved",
    "CONFLICT_DETAILS_A",
    "CONFLICT_DETAILS_W",
    "MEM_RANGE",
    "MEM_DES",
    "MEM_RESOURCE",
    "Mem_Large_Range_s",
    "Mem_Large_Des_s",
    "Mem_Large_Resource_s",
    "IO_RANGE",
    "IO_DES",
    "IO_RESOURCE",
    "DMA_RANGE",
    "DMA_DES",
    "DMA_RESOURCE",
    "IRQ_RANGE",
    "IRQ_DES_32",
    "IRQ_DES_64",
    "IRQ_RESOURCE_32",
    "IRQ_RESOURCE_64",
    "DevPrivate_Range_s",
    "DevPrivate_Des_s",
    "DevPrivate_Resource_s",
    "CS_DES",
    "CS_RESOURCE",
    "PCCARD_DES",
    "PCCARD_RESOURCE",
    "MFCARD_DES",
    "MFCARD_RESOURCE",
    "BUSNUMBER_RANGE",
    "BUSNUMBER_DES",
    "BUSNUMBER_RESOURCE",
    "Connection_Des_s",
    "Connection_Resource_s",
    "HWProfileInfo_sA",
    "HWProfileInfo_sW",
    "CM_NOTIFY_FILTER_TYPE",
    "CM_NOTIFY_FILTER_TYPE_DEVICEINTERFACE",
    "CM_NOTIFY_FILTER_TYPE_DEVICEHANDLE",
    "CM_NOTIFY_FILTER_TYPE_DEVICEINSTANCE",
    "CM_NOTIFY_FILTER_TYPE_MAX",
    "CM_NOTIFY_FILTER",
    "CM_NOTIFY_ACTION",
    "CM_NOTIFY_ACTION_DEVICEINTERFACEARRIVAL",
    "CM_NOTIFY_ACTION_DEVICEINTERFACEREMOVAL",
    "CM_NOTIFY_ACTION_DEVICEQUERYREMOVE",
    "CM_NOTIFY_ACTION_DEVICEQUERYREMOVEFAILED",
    "CM_NOTIFY_ACTION_DEVICEREMOVEPENDING",
    "CM_NOTIFY_ACTION_DEVICEREMOVECOMPLETE",
    "CM_NOTIFY_ACTION_DEVICECUSTOMEVENT",
    "CM_NOTIFY_ACTION_DEVICEINSTANCEENUMERATED",
    "CM_NOTIFY_ACTION_DEVICEINSTANCESTARTED",
    "CM_NOTIFY_ACTION_DEVICEINSTANCEREMOVED",
    "CM_NOTIFY_ACTION_MAX",
    "CM_NOTIFY_EVENT_DATA",
    "PCM_NOTIFY_CALLBACK",
    "SetupGetInfInformationA",
    "SetupGetInfInformationW",
    "SetupGetInfInformation",
    "SetupQueryInfFileInformationA",
    "SetupQueryInfFileInformationW",
    "SetupQueryInfFileInformation",
    "SetupQueryInfOriginalFileInformationA",
    "SetupQueryInfOriginalFileInformationW",
    "SetupQueryInfOriginalFileInformation",
    "SetupQueryInfVersionInformationA",
    "SetupQueryInfVersionInformationW",
    "SetupQueryInfVersionInformation",
    "SetupGetInfDriverStoreLocationA",
    "SetupGetInfDriverStoreLocationW",
    "SetupGetInfDriverStoreLocation",
    "SetupGetInfPublishedNameA",
    "SetupGetInfPublishedNameW",
    "SetupGetInfPublishedName",
    "SetupGetInfFileListA",
    "SetupGetInfFileListW",
    "SetupGetInfFileList",
    "SetupOpenInfFileW",
    "SetupOpenInfFile",
    "SetupOpenInfFileA",
    "SetupOpenMasterInf",
    "SetupOpenAppendInfFileW",
    "SetupOpenAppendInfFile",
    "SetupOpenAppendInfFileA",
    "SetupCloseInfFile",
    "SetupFindFirstLineA",
    "SetupFindFirstLineW",
    "SetupFindFirstLine",
    "SetupFindNextLine",
    "SetupFindNextMatchLineA",
    "SetupFindNextMatchLineW",
    "SetupFindNextMatchLine",
    "SetupGetLineByIndexA",
    "SetupGetLineByIndexW",
    "SetupGetLineByIndex",
    "SetupGetLineCountA",
    "SetupGetLineCountW",
    "SetupGetLineCount",
    "SetupGetLineTextA",
    "SetupGetLineTextW",
    "SetupGetLineText",
    "SetupGetFieldCount",
    "SetupGetStringFieldA",
    "SetupGetStringFieldW",
    "SetupGetStringField",
    "SetupGetIntField",
    "SetupGetMultiSzFieldA",
    "SetupGetMultiSzFieldW",
    "SetupGetMultiSzField",
    "SetupGetBinaryField",
    "SetupGetFileCompressionInfoA",
    "SetupGetFileCompressionInfoW",
    "SetupGetFileCompressionInfo",
    "SetupGetFileCompressionInfoExA",
    "SetupGetFileCompressionInfoExW",
    "SetupGetFileCompressionInfoEx",
    "SetupDecompressOrCopyFileA",
    "SetupDecompressOrCopyFileW",
    "SetupDecompressOrCopyFile",
    "SetupGetSourceFileLocationA",
    "SetupGetSourceFileLocationW",
    "SetupGetSourceFileLocation",
    "SetupGetSourceFileSizeA",
    "SetupGetSourceFileSizeW",
    "SetupGetSourceFileSize",
    "SetupGetTargetPathA",
    "SetupGetTargetPathW",
    "SetupGetTargetPath",
    "SetupSetSourceListA",
    "SetupSetSourceListW",
    "SetupSetSourceList",
    "SetupCancelTemporarySourceList",
    "SetupAddToSourceListA",
    "SetupAddToSourceListW",
    "SetupAddToSourceList",
    "SetupRemoveFromSourceListA",
    "SetupRemoveFromSourceListW",
    "SetupRemoveFromSourceList",
    "SetupQuerySourceListA",
    "SetupQuerySourceListW",
    "SetupQuerySourceList",
    "SetupFreeSourceListA",
    "SetupFreeSourceListW",
    "SetupFreeSourceList",
    "SetupPromptForDiskA",
    "SetupPromptForDiskW",
    "SetupPromptForDisk",
    "SetupCopyErrorA",
    "SetupCopyErrorW",
    "SetupCopyError",
    "SetupRenameErrorA",
    "SetupRenameErrorW",
    "SetupRenameError",
    "SetupDeleteErrorA",
    "SetupDeleteErrorW",
    "SetupDeleteError",
    "SetupBackupErrorA",
    "SetupBackupErrorW",
    "SetupBackupError",
    "SetupSetDirectoryIdA",
    "SetupSetDirectoryIdW",
    "SetupSetDirectoryId",
    "SetupSetDirectoryIdExA",
    "SetupSetDirectoryIdExW",
    "SetupSetDirectoryIdEx",
    "SetupGetSourceInfoA",
    "SetupGetSourceInfoW",
    "SetupGetSourceInfo",
    "SetupInstallFileA",
    "SetupInstallFileW",
    "SetupInstallFile",
    "SetupInstallFileExA",
    "SetupInstallFileExW",
    "SetupInstallFileEx",
    "SetupOpenFileQueue",
    "SetupCloseFileQueue",
    "SetupSetFileQueueAlternatePlatformA",
    "SetupSetFileQueueAlternatePlatformW",
    "SetupSetFileQueueAlternatePlatform",
    "SetupSetPlatformPathOverrideA",
    "SetupSetPlatformPathOverrideW",
    "SetupSetPlatformPathOverride",
    "SetupQueueCopyA",
    "SetupQueueCopyW",
    "SetupQueueCopy",
    "SetupQueueCopyIndirectA",
    "SetupQueueCopyIndirectW",
    "SetupQueueCopyIndirect",
    "SetupQueueDefaultCopyA",
    "SetupQueueDefaultCopyW",
    "SetupQueueDefaultCopy",
    "SetupQueueCopySectionA",
    "SetupQueueCopySectionW",
    "SetupQueueCopySection",
    "SetupQueueDeleteA",
    "SetupQueueDeleteW",
    "SetupQueueDelete",
    "SetupQueueDeleteSectionA",
    "SetupQueueDeleteSectionW",
    "SetupQueueDeleteSection",
    "SetupQueueRenameA",
    "SetupQueueRenameW",
    "SetupQueueRename",
    "SetupQueueRenameSectionA",
    "SetupQueueRenameSectionW",
    "SetupQueueRenameSection",
    "SetupCommitFileQueueA",
    "SetupCommitFileQueueW",
    "SetupCommitFileQueue",
    "SetupScanFileQueueA",
    "SetupScanFileQueueW",
    "SetupScanFileQueue",
    "SetupGetFileQueueCount",
    "SetupGetFileQueueFlags",
    "SetupSetFileQueueFlags",
    "SetupCopyOEMInfA",
    "SetupCopyOEMInfW",
    "SetupCopyOEMInf",
    "SetupUninstallOEMInfA",
    "SetupUninstallOEMInfW",
    "SetupUninstallOEMInf",
    "SetupUninstallNewlyCopiedInfs",
    "SetupCreateDiskSpaceListA",
    "SetupCreateDiskSpaceListW",
    "SetupCreateDiskSpaceList",
    "SetupDuplicateDiskSpaceListA",
    "SetupDuplicateDiskSpaceListW",
    "SetupDuplicateDiskSpaceList",
    "SetupDestroyDiskSpaceList",
    "SetupQueryDrivesInDiskSpaceListA",
    "SetupQueryDrivesInDiskSpaceListW",
    "SetupQueryDrivesInDiskSpaceList",
    "SetupQuerySpaceRequiredOnDriveA",
    "SetupQuerySpaceRequiredOnDriveW",
    "SetupQuerySpaceRequiredOnDrive",
    "SetupAdjustDiskSpaceListA",
    "SetupAdjustDiskSpaceListW",
    "SetupAdjustDiskSpaceList",
    "SetupAddToDiskSpaceListA",
    "SetupAddToDiskSpaceListW",
    "SetupAddToDiskSpaceList",
    "SetupAddSectionToDiskSpaceListA",
    "SetupAddSectionToDiskSpaceListW",
    "SetupAddSectionToDiskSpaceList",
    "SetupAddInstallSectionToDiskSpaceListA",
    "SetupAddInstallSectionToDiskSpaceListW",
    "SetupAddInstallSectionToDiskSpaceList",
    "SetupRemoveFromDiskSpaceListA",
    "SetupRemoveFromDiskSpaceListW",
    "SetupRemoveFromDiskSpaceList",
    "SetupRemoveSectionFromDiskSpaceListA",
    "SetupRemoveSectionFromDiskSpaceListW",
    "SetupRemoveSectionFromDiskSpaceList",
    "SetupRemoveInstallSectionFromDiskSpaceListA",
    "SetupRemoveInstallSectionFromDiskSpaceListW",
    "SetupRemoveInstallSectionFromDiskSpaceList",
    "SetupIterateCabinetA",
    "SetupIterateCabinetW",
    "SetupIterateCabinet",
    "SetupPromptReboot",
    "SetupInitDefaultQueueCallback",
    "SetupInitDefaultQueueCallbackEx",
    "SetupTermDefaultQueueCallback",
    "SetupDefaultQueueCallbackA",
    "SetupDefaultQueueCallbackW",
    "SetupDefaultQueueCallback",
    "SetupInstallFromInfSectionA",
    "SetupInstallFromInfSectionW",
    "SetupInstallFromInfSection",
    "SetupInstallFilesFromInfSectionA",
    "SetupInstallFilesFromInfSectionW",
    "SetupInstallFilesFromInfSection",
    "SetupInstallServicesFromInfSectionA",
    "SetupInstallServicesFromInfSectionW",
    "SetupInstallServicesFromInfSection",
    "SetupInstallServicesFromInfSectionExA",
    "SetupInstallServicesFromInfSectionExW",
    "SetupInstallServicesFromInfSectionEx",
    "InstallHinfSectionA",
    "InstallHinfSectionW",
    "InstallHinfSection",
    "SetupInitializeFileLogA",
    "SetupInitializeFileLogW",
    "SetupInitializeFileLog",
    "SetupTerminateFileLog",
    "SetupLogFileA",
    "SetupLogFileW",
    "SetupLogFile",
    "SetupRemoveFileLogEntryA",
    "SetupRemoveFileLogEntryW",
    "SetupRemoveFileLogEntry",
    "SetupQueryFileLogA",
    "SetupQueryFileLogW",
    "SetupQueryFileLog",
    "SetupOpenLog",
    "SetupLogErrorA",
    "SetupLogErrorW",
    "SetupLogError",
    "SetupCloseLog",
    "SetupGetThreadLogToken",
    "SetupSetThreadLogToken",
    "SetupWriteTextLog",
    "SetupWriteTextLogError",
    "SetupWriteTextLogInfLine",
    "SetupGetBackupInformationA",
    "SetupGetBackupInformationW",
    "SetupGetBackupInformation",
    "SetupPrepareQueueForRestoreA",
    "SetupPrepareQueueForRestoreW",
    "SetupPrepareQueueForRestore",
    "SetupSetNonInteractiveMode",
    "SetupGetNonInteractiveMode",
    "SetupDiCreateDeviceInfoList",
    "SetupDiCreateDeviceInfoListExA",
    "SetupDiCreateDeviceInfoListExW",
    "SetupDiCreateDeviceInfoListEx",
    "SetupDiGetDeviceInfoListClass",
    "SetupDiGetDeviceInfoListDetailA",
    "SetupDiGetDeviceInfoListDetailW",
    "SetupDiGetDeviceInfoListDetail",
    "SetupDiCreateDeviceInfoA",
    "SetupDiCreateDeviceInfoW",
    "SetupDiCreateDeviceInfo",
    "SetupDiOpenDeviceInfoA",
    "SetupDiOpenDeviceInfoW",
    "SetupDiOpenDeviceInfo",
    "SetupDiGetDeviceInstanceIdA",
    "SetupDiGetDeviceInstanceIdW",
    "SetupDiGetDeviceInstanceId",
    "SetupDiDeleteDeviceInfo",
    "SetupDiEnumDeviceInfo",
    "SetupDiDestroyDeviceInfoList",
    "SetupDiEnumDeviceInterfaces",
    "SetupDiCreateDeviceInterfaceA",
    "SetupDiCreateDeviceInterfaceW",
    "SetupDiCreateDeviceInterface",
    "SetupDiOpenDeviceInterfaceA",
    "SetupDiOpenDeviceInterfaceW",
    "SetupDiOpenDeviceInterface",
    "SetupDiGetDeviceInterfaceAlias",
    "SetupDiDeleteDeviceInterfaceData",
    "SetupDiRemoveDeviceInterface",
    "SetupDiGetDeviceInterfaceDetailA",
    "SetupDiGetDeviceInterfaceDetailW",
    "SetupDiGetDeviceInterfaceDetail",
    "SetupDiInstallDeviceInterfaces",
    "SetupDiSetDeviceInterfaceDefault",
    "SetupDiRegisterDeviceInfo",
    "SetupDiBuildDriverInfoList",
    "SetupDiCancelDriverInfoSearch",
    "SetupDiEnumDriverInfoA",
    "SetupDiEnumDriverInfoW",
    "SetupDiEnumDriverInfo",
    "SetupDiGetSelectedDriverA",
    "SetupDiGetSelectedDriverW",
    "SetupDiGetSelectedDriver",
    "SetupDiSetSelectedDriverA",
    "SetupDiSetSelectedDriverW",
    "SetupDiSetSelectedDriver",
    "SetupDiGetDriverInfoDetailA",
    "SetupDiGetDriverInfoDetailW",
    "SetupDiGetDriverInfoDetail",
    "SetupDiDestroyDriverInfoList",
    "SetupDiGetClassDevsA",
    "SetupDiGetClassDevsW",
    "SetupDiGetClassDevs",
    "SetupDiGetClassDevsExA",
    "SetupDiGetClassDevsExW",
    "SetupDiGetClassDevsEx",
    "SetupDiGetINFClassA",
    "SetupDiGetINFClassW",
    "SetupDiGetINFClass",
    "SetupDiBuildClassInfoList",
    "SetupDiBuildClassInfoListExA",
    "SetupDiBuildClassInfoListExW",
    "SetupDiBuildClassInfoListEx",
    "SetupDiGetClassDescriptionA",
    "SetupDiGetClassDescriptionW",
    "SetupDiGetClassDescription",
    "SetupDiGetClassDescriptionExA",
    "SetupDiGetClassDescriptionExW",
    "SetupDiGetClassDescriptionEx",
    "SetupDiCallClassInstaller",
    "SetupDiSelectDevice",
    "SetupDiSelectBestCompatDrv",
    "SetupDiInstallDevice",
    "SetupDiInstallDriverFiles",
    "SetupDiRegisterCoDeviceInstallers",
    "SetupDiRemoveDevice",
    "SetupDiUnremoveDevice",
    "SetupDiRestartDevices",
    "SetupDiChangeState",
    "SetupDiInstallClassA",
    "SetupDiInstallClassW",
    "SetupDiInstallClass",
    "SetupDiInstallClassExA",
    "SetupDiInstallClassExW",
    "SetupDiInstallClassEx",
    "SetupDiOpenClassRegKey",
    "SetupDiOpenClassRegKeyExA",
    "SetupDiOpenClassRegKeyExW",
    "SetupDiOpenClassRegKeyEx",
    "SetupDiCreateDeviceInterfaceRegKeyA",
    "SetupDiCreateDeviceInterfaceRegKeyW",
    "SetupDiCreateDeviceInterfaceRegKey",
    "SetupDiOpenDeviceInterfaceRegKey",
    "SetupDiDeleteDeviceInterfaceRegKey",
    "SetupDiCreateDevRegKeyA",
    "SetupDiCreateDevRegKeyW",
    "SetupDiCreateDevRegKey",
    "SetupDiOpenDevRegKey",
    "SetupDiDeleteDevRegKey",
    "SetupDiGetHwProfileList",
    "SetupDiGetHwProfileListExA",
    "SetupDiGetHwProfileListExW",
    "SetupDiGetHwProfileListEx",
    "SetupDiGetDevicePropertyKeys",
    "SetupDiGetDevicePropertyW",
    "SetupDiSetDevicePropertyW",
    "SetupDiGetDeviceInterfacePropertyKeys",
    "SetupDiGetDeviceInterfacePropertyW",
    "SetupDiSetDeviceInterfacePropertyW",
    "SetupDiGetClassPropertyKeys",
    "SetupDiGetClassPropertyKeysExW",
    "SetupDiGetClassPropertyW",
    "SetupDiGetClassPropertyExW",
    "SetupDiSetClassPropertyW",
    "SetupDiSetClassPropertyExW",
    "SetupDiGetDeviceRegistryPropertyA",
    "SetupDiGetDeviceRegistryPropertyW",
    "SetupDiGetDeviceRegistryProperty",
    "SetupDiGetClassRegistryPropertyA",
    "SetupDiGetClassRegistryPropertyW",
    "SetupDiGetClassRegistryProperty",
    "SetupDiSetDeviceRegistryPropertyA",
    "SetupDiSetDeviceRegistryPropertyW",
    "SetupDiSetDeviceRegistryProperty",
    "SetupDiSetClassRegistryPropertyA",
    "SetupDiSetClassRegistryPropertyW",
    "SetupDiSetClassRegistryProperty",
    "SetupDiGetDeviceInstallParamsA",
    "SetupDiGetDeviceInstallParamsW",
    "SetupDiGetDeviceInstallParams",
    "SetupDiGetClassInstallParamsA",
    "SetupDiGetClassInstallParamsW",
    "SetupDiGetClassInstallParams",
    "SetupDiSetDeviceInstallParamsA",
    "SetupDiSetDeviceInstallParamsW",
    "SetupDiSetDeviceInstallParams",
    "SetupDiSetClassInstallParamsA",
    "SetupDiSetClassInstallParamsW",
    "SetupDiSetClassInstallParams",
    "SetupDiGetDriverInstallParamsA",
    "SetupDiGetDriverInstallParamsW",
    "SetupDiGetDriverInstallParams",
    "SetupDiSetDriverInstallParamsA",
    "SetupDiSetDriverInstallParamsW",
    "SetupDiSetDriverInstallParams",
    "SetupDiLoadClassIcon",
    "SetupDiLoadDeviceIcon",
    "SetupDiDrawMiniIcon",
    "SetupDiGetClassBitmapIndex",
    "SetupDiGetClassImageList",
    "SetupDiGetClassImageListExA",
    "SetupDiGetClassImageListExW",
    "SetupDiGetClassImageListEx",
    "SetupDiGetClassImageIndex",
    "SetupDiDestroyClassImageList",
    "SetupDiGetClassDevPropertySheetsA",
    "SetupDiGetClassDevPropertySheetsW",
    "SetupDiGetClassDevPropertySheets",
    "SetupDiAskForOEMDisk",
    "SetupDiSelectOEMDrv",
    "SetupDiClassNameFromGuidA",
    "SetupDiClassNameFromGuidW",
    "SetupDiClassNameFromGuid",
    "SetupDiClassNameFromGuidExA",
    "SetupDiClassNameFromGuidExW",
    "SetupDiClassNameFromGuidEx",
    "SetupDiClassGuidsFromNameA",
    "SetupDiClassGuidsFromNameW",
    "SetupDiClassGuidsFromName",
    "SetupDiClassGuidsFromNameExA",
    "SetupDiClassGuidsFromNameExW",
    "SetupDiClassGuidsFromNameEx",
    "SetupDiGetHwProfileFriendlyNameA",
    "SetupDiGetHwProfileFriendlyNameW",
    "SetupDiGetHwProfileFriendlyName",
    "SetupDiGetHwProfileFriendlyNameExA",
    "SetupDiGetHwProfileFriendlyNameExW",
    "SetupDiGetHwProfileFriendlyNameEx",
    "SetupDiGetWizardPage",
    "SetupDiGetSelectedDevice",
    "SetupDiSetSelectedDevice",
    "SetupDiGetActualModelsSectionA",
    "SetupDiGetActualModelsSectionW",
    "SetupDiGetActualModelsSection",
    "SetupDiGetActualSectionToInstallA",
    "SetupDiGetActualSectionToInstallW",
    "SetupDiGetActualSectionToInstall",
    "SetupDiGetActualSectionToInstallExA",
    "SetupDiGetActualSectionToInstallExW",
    "SetupDiGetActualSectionToInstallEx",
    "SetupEnumInfSectionsA",
    "SetupEnumInfSectionsW",
    "SetupEnumInfSections",
    "SetupVerifyInfFileA",
    "SetupVerifyInfFileW",
    "SetupVerifyInfFile",
    "SetupDiGetCustomDevicePropertyA",
    "SetupDiGetCustomDevicePropertyW",
    "SetupDiGetCustomDeviceProperty",
    "SetupConfigureWmiFromInfSectionA",
    "SetupConfigureWmiFromInfSectionW",
    "SetupConfigureWmiFromInfSection",
    "CM_Add_Empty_Log_Conf",
    "CM_Add_Empty_Log_Conf_Ex",
    "CM_Add_IDA",
    "CM_Add_IDW",
    "CM_Add_ID",
    "CM_Add_ID_ExA",
    "CM_Add_ID_ExW",
    "CM_Add_ID_Ex",
    "CM_Add_Range",
    "CM_Add_Res_Des",
    "CM_Add_Res_Des_Ex",
    "CM_Connect_MachineA",
    "CM_Connect_MachineW",
    "CM_Connect_Machine",
    "CM_Create_DevNodeA",
    "CM_Create_DevNodeW",
    "CM_Create_DevNode",
    "CM_Create_DevNode_ExA",
    "CM_Create_DevNode_ExW",
    "CM_Create_DevNode_Ex",
    "CM_Create_Range_List",
    "CM_Delete_Class_Key",
    "CM_Delete_Class_Key_Ex",
    "CM_Delete_DevNode_Key",
    "CM_Delete_DevNode_Key_Ex",
    "CM_Delete_Range",
    "CM_Detect_Resource_Conflict",
    "CM_Detect_Resource_Conflict_Ex",
    "CM_Disable_DevNode",
    "CM_Disable_DevNode_Ex",
    "CM_Disconnect_Machine",
    "CM_Dup_Range_List",
    "CM_Enable_DevNode",
    "CM_Enable_DevNode_Ex",
    "CM_Enumerate_Classes",
    "CM_Enumerate_Classes_Ex",
    "CM_Enumerate_EnumeratorsA",
    "CM_Enumerate_EnumeratorsW",
    "CM_Enumerate_Enumerators",
    "CM_Enumerate_Enumerators_ExA",
    "CM_Enumerate_Enumerators_ExW",
    "CM_Enumerate_Enumerators_Ex",
    "CM_Find_Range",
    "CM_First_Range",
    "CM_Free_Log_Conf",
    "CM_Free_Log_Conf_Ex",
    "CM_Free_Log_Conf_Handle",
    "CM_Free_Range_List",
    "CM_Free_Res_Des",
    "CM_Free_Res_Des_Ex",
    "CM_Free_Res_Des_Handle",
    "CM_Get_Child",
    "CM_Get_Child_Ex",
    "CM_Get_Class_NameA",
    "CM_Get_Class_NameW",
    "CM_Get_Class_Name",
    "CM_Get_Class_Name_ExA",
    "CM_Get_Class_Name_ExW",
    "CM_Get_Class_Name_Ex",
    "CM_Get_Class_Key_NameA",
    "CM_Get_Class_Key_NameW",
    "CM_Get_Class_Key_Name",
    "CM_Get_Class_Key_Name_ExA",
    "CM_Get_Class_Key_Name_ExW",
    "CM_Get_Class_Key_Name_Ex",
    "CM_Get_Depth",
    "CM_Get_Depth_Ex",
    "CM_Get_Device_IDA",
    "CM_Get_Device_IDW",
    "CM_Get_Device_ID",
    "CM_Get_Device_ID_ExA",
    "CM_Get_Device_ID_ExW",
    "CM_Get_Device_ID_Ex",
    "CM_Get_Device_ID_ListA",
    "CM_Get_Device_ID_ListW",
    "CM_Get_Device_ID_List",
    "CM_Get_Device_ID_List_ExA",
    "CM_Get_Device_ID_List_ExW",
    "CM_Get_Device_ID_List_Ex",
    "CM_Get_Device_ID_List_SizeA",
    "CM_Get_Device_ID_List_SizeW",
    "CM_Get_Device_ID_List_Size",
    "CM_Get_Device_ID_List_Size_ExA",
    "CM_Get_Device_ID_List_Size_ExW",
    "CM_Get_Device_ID_List_Size_Ex",
    "CM_Get_Device_ID_Size",
    "CM_Get_Device_ID_Size_Ex",
    "CM_Get_DevNode_PropertyW",
    "CM_Get_DevNode_Property_ExW",
    "CM_Get_DevNode_Property_Keys",
    "CM_Get_DevNode_Property_Keys_Ex",
    "CM_Get_DevNode_Registry_PropertyA",
    "CM_Get_DevNode_Registry_PropertyW",
    "CM_Get_DevNode_Registry_Property",
    "CM_Get_DevNode_Registry_Property_ExA",
    "CM_Get_DevNode_Registry_Property_ExW",
    "CM_Get_DevNode_Registry_Property_Ex",
    "CM_Get_DevNode_Custom_PropertyA",
    "CM_Get_DevNode_Custom_PropertyW",
    "CM_Get_DevNode_Custom_Property",
    "CM_Get_DevNode_Custom_Property_ExA",
    "CM_Get_DevNode_Custom_Property_ExW",
    "CM_Get_DevNode_Custom_Property_Ex",
    "CM_Get_DevNode_Status",
    "CM_Get_DevNode_Status_Ex",
    "CM_Get_First_Log_Conf",
    "CM_Get_First_Log_Conf_Ex",
    "CM_Get_Global_State",
    "CM_Get_Global_State_Ex",
    "CM_Get_Hardware_Profile_InfoA",
    "CM_Get_Hardware_Profile_Info_ExA",
    "CM_Get_Hardware_Profile_InfoW",
    "CM_Get_Hardware_Profile_Info",
    "CM_Get_Hardware_Profile_Info_ExW",
    "CM_Get_Hardware_Profile_Info_Ex",
    "CM_Get_HW_Prof_FlagsA",
    "CM_Get_HW_Prof_FlagsW",
    "CM_Get_HW_Prof_Flags",
    "CM_Get_HW_Prof_Flags_ExA",
    "CM_Get_HW_Prof_Flags_ExW",
    "CM_Get_HW_Prof_Flags_Ex",
    "CM_Get_Device_Interface_AliasA",
    "CM_Get_Device_Interface_AliasW",
    "CM_Get_Device_Interface_Alias",
    "CM_Get_Device_Interface_Alias_ExA",
    "CM_Get_Device_Interface_Alias_ExW",
    "CM_Get_Device_Interface_Alias_Ex",
    "CM_Get_Device_Interface_ListA",
    "CM_Get_Device_Interface_ListW",
    "CM_Get_Device_Interface_List",
    "CM_Get_Device_Interface_List_ExA",
    "CM_Get_Device_Interface_List_ExW",
    "CM_Get_Device_Interface_List_Ex",
    "CM_Get_Device_Interface_List_SizeA",
    "CM_Get_Device_Interface_List_SizeW",
    "CM_Get_Device_Interface_List_Size",
    "CM_Get_Device_Interface_List_Size_ExA",
    "CM_Get_Device_Interface_List_Size_ExW",
    "CM_Get_Device_Interface_List_Size_Ex",
    "CM_Get_Device_Interface_PropertyW",
    "CM_Get_Device_Interface_Property_ExW",
    "CM_Get_Device_Interface_Property_KeysW",
    "CM_Get_Device_Interface_Property_Keys_ExW",
    "CM_Get_Log_Conf_Priority",
    "CM_Get_Log_Conf_Priority_Ex",
    "CM_Get_Next_Log_Conf",
    "CM_Get_Next_Log_Conf_Ex",
    "CM_Get_Parent",
    "CM_Get_Parent_Ex",
    "CM_Get_Res_Des_Data",
    "CM_Get_Res_Des_Data_Ex",
    "CM_Get_Res_Des_Data_Size",
    "CM_Get_Res_Des_Data_Size_Ex",
    "CM_Get_Sibling",
    "CM_Get_Sibling_Ex",
    "CM_Get_Version",
    "CM_Get_Version_Ex",
    "CM_Is_Version_Available",
    "CM_Is_Version_Available_Ex",
    "CM_Intersect_Range_List",
    "CM_Invert_Range_List",
    "CM_Locate_DevNodeA",
    "CM_Locate_DevNodeW",
    "CM_Locate_DevNode",
    "CM_Locate_DevNode_ExA",
    "CM_Locate_DevNode_ExW",
    "CM_Locate_DevNode_Ex",
    "CM_Merge_Range_List",
    "CM_Modify_Res_Des",
    "CM_Modify_Res_Des_Ex",
    "CM_Move_DevNode",
    "CM_Move_DevNode_Ex",
    "CM_Next_Range",
    "CM_Get_Next_Res_Des",
    "CM_Get_Next_Res_Des_Ex",
    "CM_Open_Class_KeyA",
    "CM_Open_Class_KeyW",
    "CM_Open_Class_Key",
    "CM_Open_Class_Key_ExA",
    "CM_Open_Class_Key_ExW",
    "CM_Open_Class_Key_Ex",
    "CM_Open_DevNode_Key",
    "CM_Open_DevNode_Key_Ex",
    "CM_Open_Device_Interface_KeyA",
    "CM_Open_Device_Interface_KeyW",
    "CM_Open_Device_Interface_Key",
    "CM_Open_Device_Interface_Key_ExA",
    "CM_Open_Device_Interface_Key_ExW",
    "CM_Open_Device_Interface_Key_Ex",
    "CM_Delete_Device_Interface_KeyA",
    "CM_Delete_Device_Interface_KeyW",
    "CM_Delete_Device_Interface_Key",
    "CM_Delete_Device_Interface_Key_ExA",
    "CM_Delete_Device_Interface_Key_ExW",
    "CM_Delete_Device_Interface_Key_Ex",
    "CM_Query_Arbitrator_Free_Data",
    "CM_Query_Arbitrator_Free_Data_Ex",
    "CM_Query_Arbitrator_Free_Size",
    "CM_Query_Arbitrator_Free_Size_Ex",
    "CM_Query_Remove_SubTree",
    "CM_Query_Remove_SubTree_Ex",
    "CM_Query_And_Remove_SubTreeA",
    "CM_Query_And_Remove_SubTreeW",
    "CM_Query_And_Remove_SubTree",
    "CM_Query_And_Remove_SubTree_ExA",
    "CM_Query_And_Remove_SubTree_ExW",
    "CM_Query_And_Remove_SubTree_Ex",
    "CM_Request_Device_EjectA",
    "CM_Request_Device_Eject_ExA",
    "CM_Request_Device_EjectW",
    "CM_Request_Device_Eject",
    "CM_Request_Device_Eject_ExW",
    "CM_Request_Device_Eject_Ex",
    "CM_Reenumerate_DevNode",
    "CM_Reenumerate_DevNode_Ex",
    "CM_Register_Device_InterfaceA",
    "CM_Register_Device_InterfaceW",
    "CM_Register_Device_Interface",
    "CM_Register_Device_Interface_ExA",
    "CM_Register_Device_Interface_ExW",
    "CM_Register_Device_Interface_Ex",
    "CM_Set_DevNode_Problem_Ex",
    "CM_Set_DevNode_Problem",
    "CM_Unregister_Device_InterfaceA",
    "CM_Unregister_Device_InterfaceW",
    "CM_Unregister_Device_Interface",
    "CM_Unregister_Device_Interface_ExA",
    "CM_Unregister_Device_Interface_ExW",
    "CM_Unregister_Device_Interface_Ex",
    "CM_Register_Device_Driver",
    "CM_Register_Device_Driver_Ex",
    "CM_Remove_SubTree",
    "CM_Remove_SubTree_Ex",
    "CM_Set_DevNode_PropertyW",
    "CM_Set_DevNode_Property_ExW",
    "CM_Set_DevNode_Registry_PropertyA",
    "CM_Set_DevNode_Registry_PropertyW",
    "CM_Set_DevNode_Registry_Property",
    "CM_Set_DevNode_Registry_Property_ExA",
    "CM_Set_DevNode_Registry_Property_ExW",
    "CM_Set_DevNode_Registry_Property_Ex",
    "CM_Set_Device_Interface_PropertyW",
    "CM_Set_Device_Interface_Property_ExW",
    "CM_Is_Dock_Station_Present",
    "CM_Is_Dock_Station_Present_Ex",
    "CM_Request_Eject_PC",
    "CM_Request_Eject_PC_Ex",
    "CM_Set_HW_Prof_FlagsA",
    "CM_Set_HW_Prof_FlagsW",
    "CM_Set_HW_Prof_Flags",
    "CM_Set_HW_Prof_Flags_ExA",
    "CM_Set_HW_Prof_Flags_ExW",
    "CM_Set_HW_Prof_Flags_Ex",
    "CM_Setup_DevNode",
    "CM_Setup_DevNode_Ex",
    "CM_Test_Range_Available",
    "CM_Uninstall_DevNode",
    "CM_Uninstall_DevNode_Ex",
    "CM_Run_Detection",
    "CM_Run_Detection_Ex",
    "CM_Set_HW_Prof",
    "CM_Set_HW_Prof_Ex",
    "CM_Query_Resource_Conflict_List",
    "CM_Free_Resource_Conflict_Handle",
    "CM_Get_Resource_Conflict_Count",
    "CM_Get_Resource_Conflict_DetailsA",
    "CM_Get_Resource_Conflict_DetailsW",
    "CM_Get_Resource_Conflict_Details",
    "CM_Get_Class_PropertyW",
    "CM_Get_Class_Property_ExW",
    "CM_Get_Class_Property_Keys",
    "CM_Get_Class_Property_Keys_Ex",
    "CM_Set_Class_PropertyW",
    "CM_Set_Class_Property_ExW",
    "CM_Get_Class_Registry_PropertyA",
    "CM_Get_Class_Registry_PropertyW",
    "CM_Get_Class_Registry_Property",
    "CM_Set_Class_Registry_PropertyA",
    "CM_Set_Class_Registry_PropertyW",
    "CM_Set_Class_Registry_Property",
    "CMP_WaitNoPendingInstallEvents",
    "CM_Register_Notification",
    "CM_Unregister_Notification",
    "CM_MapCrToWin32Err",
    "UpdateDriverForPlugAndPlayDevicesA",
    "UpdateDriverForPlugAndPlayDevicesW",
    "UpdateDriverForPlugAndPlayDevices",
    "DiInstallDevice",
    "DiInstallDriverW",
    "DiInstallDriver",
    "DiInstallDriverA",
    "DiUninstallDevice",
    "DiUninstallDriverW",
    "DiUninstallDriver",
    "DiUninstallDriverA",
    "DiShowUpdateDevice",
    "DiRollbackDriver",
    "DiShowUpdateDriver",
]
