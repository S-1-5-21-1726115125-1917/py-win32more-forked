from ctypes import c_void_p, Structure, Union, POINTER, CFUNCTYPE, WINFUNCTYPE, cdll, windll
from win32more.base import MissingType, c_char_p_no, c_wchar_p_no, Byte, SByte, Char, Int16, UInt16, Int32, UInt32, Int64, UInt64, IntPtr, UIntPtr, Single, Double, String, Boolean, Void, Guid, COMMETHOD, SUCCEEDED, FAILED
import win32more.Data.HtmlHelp
import win32more.Devices.DeviceAndDriverInstallation
import win32more.Devices.Properties
import win32more.Foundation
import win32more.Graphics.Gdi
import win32more.System.Diagnostics.Debug
import win32more.System.Registry
import win32more.UI.Controls
import win32more.UI.WindowsAndMessaging
import sys
_module = sys.modules[__name__]
def __getattr__(name):
    try:
        f = globals()[f'_define_{name}']
    except KeyError:
        raise AttributeError(f"module '{__name__}' has no attribute '{name}'") from None
    setattr(_module, name, f())
    return getattr(_module, name)
def __dir__():
    return __all__
CM_PROB_NOT_CONFIGURED = 1
CM_PROB_DEVLOADER_FAILED = 2
CM_PROB_OUT_OF_MEMORY = 3
CM_PROB_ENTRY_IS_WRONG_TYPE = 4
CM_PROB_LACKED_ARBITRATOR = 5
CM_PROB_BOOT_CONFIG_CONFLICT = 6
CM_PROB_FAILED_FILTER = 7
CM_PROB_DEVLOADER_NOT_FOUND = 8
CM_PROB_INVALID_DATA = 9
CM_PROB_FAILED_START = 10
CM_PROB_LIAR = 11
CM_PROB_NORMAL_CONFLICT = 12
CM_PROB_NOT_VERIFIED = 13
CM_PROB_NEED_RESTART = 14
CM_PROB_REENUMERATION = 15
CM_PROB_PARTIAL_LOG_CONF = 16
CM_PROB_UNKNOWN_RESOURCE = 17
CM_PROB_REINSTALL = 18
CM_PROB_REGISTRY = 19
CM_PROB_VXDLDR = 20
CM_PROB_WILL_BE_REMOVED = 21
CM_PROB_DISABLED = 22
CM_PROB_DEVLOADER_NOT_READY = 23
CM_PROB_DEVICE_NOT_THERE = 24
CM_PROB_MOVED = 25
CM_PROB_TOO_EARLY = 26
CM_PROB_NO_VALID_LOG_CONF = 27
CM_PROB_FAILED_INSTALL = 28
CM_PROB_HARDWARE_DISABLED = 29
CM_PROB_CANT_SHARE_IRQ = 30
CM_PROB_FAILED_ADD = 31
CM_PROB_DISABLED_SERVICE = 32
CM_PROB_TRANSLATION_FAILED = 33
CM_PROB_NO_SOFTCONFIG = 34
CM_PROB_BIOS_TABLE = 35
CM_PROB_IRQ_TRANSLATION_FAILED = 36
CM_PROB_FAILED_DRIVER_ENTRY = 37
CM_PROB_DRIVER_FAILED_PRIOR_UNLOAD = 38
CM_PROB_DRIVER_FAILED_LOAD = 39
CM_PROB_DRIVER_SERVICE_KEY_INVALID = 40
CM_PROB_LEGACY_SERVICE_NO_DEVICES = 41
CM_PROB_DUPLICATE_DEVICE = 42
CM_PROB_FAILED_POST_START = 43
CM_PROB_HALTED = 44
CM_PROB_PHANTOM = 45
CM_PROB_SYSTEM_SHUTDOWN = 46
CM_PROB_HELD_FOR_EJECT = 47
CM_PROB_DRIVER_BLOCKED = 48
CM_PROB_REGISTRY_TOO_LARGE = 49
CM_PROB_SETPROPERTIES_FAILED = 50
CM_PROB_WAITING_ON_DEPENDENCY = 51
CM_PROB_UNSIGNED_DRIVER = 52
CM_PROB_USED_BY_DEBUGGER = 53
CM_PROB_DEVICE_RESET = 54
CM_PROB_CONSOLE_LOCKED = 55
CM_PROB_NEED_CLASS_CONFIG = 56
CM_PROB_GUEST_ASSIGNMENT_FAILED = 57
NUM_CM_PROB_V1 = 37
NUM_CM_PROB_V2 = 50
NUM_CM_PROB_V3 = 51
NUM_CM_PROB_V4 = 52
NUM_CM_PROB_V5 = 53
NUM_CM_PROB_V6 = 54
NUM_CM_PROB_V7 = 55
NUM_CM_PROB_V8 = 57
NUM_CM_PROB_V9 = 58
NUM_CM_PROB = 58
DN_ROOT_ENUMERATED = 1
DN_DRIVER_LOADED = 2
DN_ENUM_LOADED = 4
DN_STARTED = 8
DN_MANUAL = 16
DN_NEED_TO_ENUM = 32
DN_NOT_FIRST_TIME = 64
DN_HARDWARE_ENUM = 128
DN_LIAR = 256
DN_HAS_MARK = 512
DN_HAS_PROBLEM = 1024
DN_FILTERED = 2048
DN_MOVED = 4096
DN_DISABLEABLE = 8192
DN_REMOVABLE = 16384
DN_PRIVATE_PROBLEM = 32768
DN_MF_PARENT = 65536
DN_MF_CHILD = 131072
DN_WILL_BE_REMOVED = 262144
DN_NOT_FIRST_TIMEE = 524288
DN_STOP_FREE_RES = 1048576
DN_REBAL_CANDIDATE = 2097152
DN_BAD_PARTIAL = 4194304
DN_NT_ENUMERATOR = 8388608
DN_NT_DRIVER = 16777216
DN_NEEDS_LOCKING = 33554432
DN_ARM_WAKEUP = 67108864
DN_APM_ENUMERATOR = 134217728
DN_APM_DRIVER = 268435456
DN_SILENT_INSTALL = 536870912
DN_NO_SHOW_IN_DM = 1073741824
DN_BOOT_LOG_PROB = 2147483648
DN_NEED_RESTART = 256
DN_DRIVER_BLOCKED = 64
DN_LEGACY_DRIVER = 4096
DN_CHILD_WITH_INVALID_ID = 512
DN_DEVICE_DISCONNECTED = 33554432
DN_QUERY_REMOVE_PENDING = 65536
DN_QUERY_REMOVE_ACTIVE = 131072
LCPRI_FORCECONFIG = 0
LCPRI_BOOTCONFIG = 1
LCPRI_DESIRED = 8192
LCPRI_NORMAL = 12288
LCPRI_LASTBESTCONFIG = 16383
LCPRI_SUBOPTIMAL = 20480
LCPRI_LASTSOFTCONFIG = 32767
LCPRI_RESTART = 32768
LCPRI_REBOOT = 36864
LCPRI_POWEROFF = 40960
LCPRI_HARDRECONFIG = 49152
LCPRI_HARDWIRED = 57344
LCPRI_IMPOSSIBLE = 61440
LCPRI_DISABLED = 65535
MAX_LCPRI = 65535
CM_DEVICE_PANEL_SIDE_UNKNOWN = 0
CM_DEVICE_PANEL_SIDE_TOP = 1
CM_DEVICE_PANEL_SIDE_BOTTOM = 2
CM_DEVICE_PANEL_SIDE_LEFT = 3
CM_DEVICE_PANEL_SIDE_RIGHT = 4
CM_DEVICE_PANEL_SIDE_FRONT = 5
CM_DEVICE_PANEL_SIDE_BACK = 6
CM_DEVICE_PANEL_EDGE_UNKNOWN = 0
CM_DEVICE_PANEL_EDGE_TOP = 1
CM_DEVICE_PANEL_EDGE_BOTTOM = 2
CM_DEVICE_PANEL_EDGE_LEFT = 3
CM_DEVICE_PANEL_EDGE_RIGHT = 4
CM_DEVICE_PANEL_SHAPE_UNKNOWN = 0
CM_DEVICE_PANEL_SHAPE_RECTANGLE = 1
CM_DEVICE_PANEL_SHAPE_OVAL = 2
CM_DEVICE_PANEL_ORIENTATION_HORIZONTAL = 0
CM_DEVICE_PANEL_ORIENTATION_VERTICAL = 1
CM_DEVICE_PANEL_JOINT_TYPE_UNKNOWN = 0
CM_DEVICE_PANEL_JOINT_TYPE_PLANAR = 1
CM_DEVICE_PANEL_JOINT_TYPE_HINGE = 2
CM_DEVICE_PANEL_JOINT_TYPE_PIVOT = 3
CM_DEVICE_PANEL_JOINT_TYPE_SWIVEL = 4
def _define_GUID_DEVCLASS_1394():
    return Guid('6bdd1fc1-810f-11d0-be-c7-08-00-2b-e2-09-2f')
def _define_GUID_DEVCLASS_1394DEBUG():
    return Guid('66f250d6-7801-4a64-b1-39-ee-a8-0a-45-0b-24')
def _define_GUID_DEVCLASS_61883():
    return Guid('7ebefbc0-3200-11d2-b4-c2-00-a0-c9-69-7d-07')
def _define_GUID_DEVCLASS_ADAPTER():
    return Guid('4d36e964-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_APMSUPPORT():
    return Guid('d45b1c18-c8fa-11d1-9f-77-00-00-f8-05-f5-30')
def _define_GUID_DEVCLASS_AVC():
    return Guid('c06ff265-ae09-48f0-81-2c-16-75-3d-7c-ba-83')
def _define_GUID_DEVCLASS_BATTERY():
    return Guid('72631e54-78a4-11d0-bc-f7-00-aa-00-b7-b3-2a')
def _define_GUID_DEVCLASS_BIOMETRIC():
    return Guid('53d29ef7-377c-4d14-86-4b-eb-3a-85-76-93-59')
def _define_GUID_DEVCLASS_BLUETOOTH():
    return Guid('e0cbf06c-cd8b-4647-bb-8a-26-3b-43-f0-f9-74')
def _define_GUID_DEVCLASS_CAMERA():
    return Guid('ca3e7ab9-b4c3-4ae6-82-51-57-9e-f9-33-89-0f')
def _define_GUID_DEVCLASS_CDROM():
    return Guid('4d36e965-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_COMPUTEACCELERATOR():
    return Guid('f01a9d53-3ff6-48d2-9f-97-c8-a7-00-4b-e1-0c')
def _define_GUID_DEVCLASS_COMPUTER():
    return Guid('4d36e966-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_DECODER():
    return Guid('6bdd1fc2-810f-11d0-be-c7-08-00-2b-e2-09-2f')
def _define_GUID_DEVCLASS_DISKDRIVE():
    return Guid('4d36e967-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_DISPLAY():
    return Guid('4d36e968-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_DOT4():
    return Guid('48721b56-6795-11d2-b1-a8-00-80-c7-2e-74-a2')
def _define_GUID_DEVCLASS_DOT4PRINT():
    return Guid('49ce6ac8-6f86-11d2-b1-e5-00-80-c7-2e-74-a2')
def _define_GUID_DEVCLASS_EHSTORAGESILO():
    return Guid('9da2b80f-f89f-4a49-a5-c2-51-1b-08-5b-9e-8a')
def _define_GUID_DEVCLASS_ENUM1394():
    return Guid('c459df55-db08-11d1-b0-09-00-a0-c9-08-1f-f6')
def _define_GUID_DEVCLASS_EXTENSION():
    return Guid('e2f84ce7-8efa-411c-aa-69-97-45-4c-a4-cb-57')
def _define_GUID_DEVCLASS_FDC():
    return Guid('4d36e969-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_FIRMWARE():
    return Guid('f2e7dd72-6468-4e36-b6-f1-64-88-f4-2c-1b-52')
def _define_GUID_DEVCLASS_FLOPPYDISK():
    return Guid('4d36e980-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_GPS():
    return Guid('6bdd1fc3-810f-11d0-be-c7-08-00-2b-e2-09-2f')
def _define_GUID_DEVCLASS_HDC():
    return Guid('4d36e96a-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_HIDCLASS():
    return Guid('745a17a0-74d3-11d0-b6-fe-00-a0-c9-0f-57-da')
def _define_GUID_DEVCLASS_HOLOGRAPHIC():
    return Guid('d612553d-06b1-49ca-89-38-e3-9e-f8-0e-b1-6f')
def _define_GUID_DEVCLASS_IMAGE():
    return Guid('6bdd1fc6-810f-11d0-be-c7-08-00-2b-e2-09-2f')
def _define_GUID_DEVCLASS_INFINIBAND():
    return Guid('30ef7132-d858-4a0c-ac-24-b9-02-8a-5c-ca-3f')
def _define_GUID_DEVCLASS_INFRARED():
    return Guid('6bdd1fc5-810f-11d0-be-c7-08-00-2b-e2-09-2f')
def _define_GUID_DEVCLASS_KEYBOARD():
    return Guid('4d36e96b-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_LEGACYDRIVER():
    return Guid('8ecc055d-047f-11d1-a5-37-00-00-f8-75-3e-d1')
def _define_GUID_DEVCLASS_MEDIA():
    return Guid('4d36e96c-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_MEDIUM_CHANGER():
    return Guid('ce5939ae-ebde-11d0-b1-81-00-00-f8-75-3e-c4')
def _define_GUID_DEVCLASS_MEMORY():
    return Guid('5099944a-f6b9-4057-a0-56-8c-55-02-28-54-4c')
def _define_GUID_DEVCLASS_MODEM():
    return Guid('4d36e96d-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_MONITOR():
    return Guid('4d36e96e-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_MOUSE():
    return Guid('4d36e96f-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_MTD():
    return Guid('4d36e970-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_MULTIFUNCTION():
    return Guid('4d36e971-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_MULTIPORTSERIAL():
    return Guid('50906cb8-ba12-11d1-bf-5d-00-00-f8-05-f5-30')
def _define_GUID_DEVCLASS_NET():
    return Guid('4d36e972-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_NETCLIENT():
    return Guid('4d36e973-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_NETDRIVER():
    return Guid('87ef9ad1-8f70-49ee-b2-15-ab-1f-ca-dc-be-3c')
def _define_GUID_DEVCLASS_NETSERVICE():
    return Guid('4d36e974-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_NETTRANS():
    return Guid('4d36e975-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_NETUIO():
    return Guid('78912bc1-cb8e-4b28-a3-29-f3-22-eb-ad-be-0f')
def _define_GUID_DEVCLASS_NODRIVER():
    return Guid('4d36e976-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_PCMCIA():
    return Guid('4d36e977-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_PNPPRINTERS():
    return Guid('4658ee7e-f050-11d1-b6-bd-00-c0-4f-a3-72-a7')
def _define_GUID_DEVCLASS_PORTS():
    return Guid('4d36e978-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_PRINTER():
    return Guid('4d36e979-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_PRINTERUPGRADE():
    return Guid('4d36e97a-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_PRINTQUEUE():
    return Guid('1ed2bbf9-11f0-4084-b2-1f-ad-83-a8-e6-dc-dc')
def _define_GUID_DEVCLASS_PROCESSOR():
    return Guid('50127dc3-0f36-415e-a6-cc-4c-b3-be-91-0b-65')
def _define_GUID_DEVCLASS_SBP2():
    return Guid('d48179be-ec20-11d1-b6-b8-00-c0-4f-a3-72-a7')
def _define_GUID_DEVCLASS_SCMDISK():
    return Guid('53966cb1-4d46-4166-bf-23-c5-22-40-3c-d4-95')
def _define_GUID_DEVCLASS_SCMVOLUME():
    return Guid('53ccb149-e543-4c84-b6-e0-bc-e4-f6-b7-e8-06')
def _define_GUID_DEVCLASS_SCSIADAPTER():
    return Guid('4d36e97b-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_SECURITYACCELERATOR():
    return Guid('268c95a1-edfe-11d3-95-c3-00-10-dc-40-50-a5')
def _define_GUID_DEVCLASS_SENSOR():
    return Guid('5175d334-c371-4806-b3-ba-71-fd-53-c9-25-8d')
def _define_GUID_DEVCLASS_SIDESHOW():
    return Guid('997b5d8d-c442-4f2e-ba-f3-9c-8e-67-1e-9e-21')
def _define_GUID_DEVCLASS_SMARTCARDREADER():
    return Guid('50dd5230-ba8a-11d1-bf-5d-00-00-f8-05-f5-30')
def _define_GUID_DEVCLASS_SMRDISK():
    return Guid('53487c23-680f-4585-ac-c3-1f-10-d6-77-7e-82')
def _define_GUID_DEVCLASS_SMRVOLUME():
    return Guid('53b3cf03-8f5a-4788-91-b6-d1-9e-d9-fc-cc-bf')
def _define_GUID_DEVCLASS_SOFTWARECOMPONENT():
    return Guid('5c4c3332-344d-483c-87-39-25-9e-93-4c-9c-c8')
def _define_GUID_DEVCLASS_SOUND():
    return Guid('4d36e97c-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_SYSTEM():
    return Guid('4d36e97d-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_TAPEDRIVE():
    return Guid('6d807884-7d21-11cf-80-1c-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_UNKNOWN():
    return Guid('4d36e97e-e325-11ce-bf-c1-08-00-2b-e1-03-18')
def _define_GUID_DEVCLASS_UCM():
    return Guid('e6f1aa1c-7f3b-4473-b2-e8-c9-7d-8a-c7-1d-53')
def _define_GUID_DEVCLASS_USB():
    return Guid('36fc9e60-c465-11cf-80-56-44-45-53-54-00-00')
def _define_GUID_DEVCLASS_VOLUME():
    return Guid('71a27cdd-812a-11d0-be-c7-08-00-2b-e2-09-2f')
def _define_GUID_DEVCLASS_VOLUMESNAPSHOT():
    return Guid('533c5b84-ec70-11d2-95-05-00-c0-4f-79-de-af')
def _define_GUID_DEVCLASS_WCEUSBS():
    return Guid('25dbce51-6c8f-4a72-8a-6d-b5-4c-2b-4f-c8-35')
def _define_GUID_DEVCLASS_WPD():
    return Guid('eec5ad98-8080-425f-92-2a-da-bf-3d-e3-f6-9a')
def _define_GUID_DEVCLASS_FSFILTER_TOP():
    return Guid('b369baf4-5568-4e82-a8-7e-a9-3e-b1-6b-ca-87')
def _define_GUID_DEVCLASS_FSFILTER_ACTIVITYMONITOR():
    return Guid('b86dff51-a31e-4bac-b3-cf-e8-cf-e7-5c-9f-c2')
def _define_GUID_DEVCLASS_FSFILTER_UNDELETE():
    return Guid('fe8f1572-c67a-48c0-bb-ac-0b-5c-6d-66-ca-fb')
def _define_GUID_DEVCLASS_FSFILTER_ANTIVIRUS():
    return Guid('b1d1a169-c54f-4379-81-db-be-e7-d8-8d-74-54')
def _define_GUID_DEVCLASS_FSFILTER_REPLICATION():
    return Guid('48d3ebc4-4cf8-48ff-b8-69-9c-68-ad-42-eb-9f')
def _define_GUID_DEVCLASS_FSFILTER_CONTINUOUSBACKUP():
    return Guid('71aa14f8-6fad-4622-ad-77-92-bb-9d-7e-69-47')
def _define_GUID_DEVCLASS_FSFILTER_CONTENTSCREENER():
    return Guid('3e3f0674-c83c-4558-bb-26-98-20-e1-eb-a5-c5')
def _define_GUID_DEVCLASS_FSFILTER_QUOTAMANAGEMENT():
    return Guid('8503c911-a6c7-4919-8f-79-50-28-f5-86-6b-0c')
def _define_GUID_DEVCLASS_FSFILTER_SYSTEMRECOVERY():
    return Guid('2db15374-706e-4131-a0-c7-d7-c7-8e-b0-28-9a')
def _define_GUID_DEVCLASS_FSFILTER_CFSMETADATASERVER():
    return Guid('cdcf0939-b75b-4630-bf-76-80-f7-ba-65-58-84')
def _define_GUID_DEVCLASS_FSFILTER_HSM():
    return Guid('d546500a-2aeb-45f6-94-82-f4-b1-79-9c-31-77')
def _define_GUID_DEVCLASS_FSFILTER_COMPRESSION():
    return Guid('f3586baf-b5aa-49b5-8d-6c-05-69-28-4c-63-9f')
def _define_GUID_DEVCLASS_FSFILTER_ENCRYPTION():
    return Guid('a0a701c0-a511-42ff-aa-6c-06-dc-03-95-57-6f')
def _define_GUID_DEVCLASS_FSFILTER_VIRTUALIZATION():
    return Guid('f75a86c0-10d8-4c3a-b2-33-ed-60-e4-cd-fa-ac')
def _define_GUID_DEVCLASS_FSFILTER_PHYSICALQUOTAMANAGEMENT():
    return Guid('6a0a8e78-bba6-4fc4-a7-09-1e-33-cd-09-d6-7e')
def _define_GUID_DEVCLASS_FSFILTER_OPENFILEBACKUP():
    return Guid('f8ecafa6-66d1-41a5-89-9b-66-58-5d-72-16-b7')
def _define_GUID_DEVCLASS_FSFILTER_SECURITYENHANCER():
    return Guid('d02bc3da-0c8e-4945-9b-d5-f1-88-3c-22-6c-8c')
def _define_GUID_DEVCLASS_FSFILTER_COPYPROTECTION():
    return Guid('89786ff1-9c12-402f-9c-9e-17-75-3c-7f-43-75')
def _define_GUID_DEVCLASS_FSFILTER_BOTTOM():
    return Guid('37765ea0-5958-4fc9-b0-4b-2f-df-ef-97-e5-9e')
def _define_GUID_DEVCLASS_FSFILTER_SYSTEM():
    return Guid('5d1b9aaa-01e2-46af-84-9f-27-2b-3f-32-4c-46')
def _define_GUID_DEVCLASS_FSFILTER_INFRASTRUCTURE():
    return Guid('e55fa6f9-128c-4d04-ab-ab-63-0c-74-b1-45-3a')
LINE_LEN = 256
MAX_INF_STRING_LENGTH = 4096
MAX_INF_SECTION_NAME_LENGTH = 255
MAX_TITLE_LEN = 60
MAX_INSTRUCTION_LEN = 256
MAX_LABEL_LEN = 30
MAX_SERVICE_NAME_LEN = 256
MAX_SUBTITLE_LEN = 256
SP_MAX_MACHINENAME_LENGTH = 263
SP_ALTPLATFORM_FLAGS_VERSION_RANGE = 1
SP_ALTPLATFORM_FLAGS_SUITE_MASK = 2
INF_STYLE_CACHE_ENABLE = 16
INF_STYLE_CACHE_DISABLE = 32
INF_STYLE_CACHE_IGNORE = 64
DIRID_ABSOLUTE = -1
DIRID_ABSOLUTE_16BIT = 65535
DIRID_NULL = 0
DIRID_SRCPATH = 1
DIRID_WINDOWS = 10
DIRID_SYSTEM = 11
DIRID_DRIVERS = 12
DIRID_IOSUBSYS = 12
DIRID_DRIVER_STORE = 13
DIRID_INF = 17
DIRID_HELP = 18
DIRID_FONTS = 20
DIRID_VIEWERS = 21
DIRID_COLOR = 23
DIRID_APPS = 24
DIRID_SHARED = 25
DIRID_BOOT = 30
DIRID_SYSTEM16 = 50
DIRID_SPOOL = 51
DIRID_SPOOLDRIVERS = 52
DIRID_USERPROFILE = 53
DIRID_LOADER = 54
DIRID_PRINTPROCESSOR = 55
DIRID_DEFAULT = 11
DIRID_COMMON_STARTMENU = 16406
DIRID_COMMON_PROGRAMS = 16407
DIRID_COMMON_STARTUP = 16408
DIRID_COMMON_DESKTOPDIRECTORY = 16409
DIRID_COMMON_FAVORITES = 16415
DIRID_COMMON_APPDATA = 16419
DIRID_PROGRAM_FILES = 16422
DIRID_SYSTEM_X86 = 16425
DIRID_PROGRAM_FILES_X86 = 16426
DIRID_PROGRAM_FILES_COMMON = 16427
DIRID_PROGRAM_FILES_COMMONX86 = 16428
DIRID_COMMON_TEMPLATES = 16429
DIRID_COMMON_DOCUMENTS = 16430
DIRID_USER = 32768
SPFILENOTIFY_STARTQUEUE = 1
SPFILENOTIFY_ENDQUEUE = 2
SPFILENOTIFY_STARTSUBQUEUE = 3
SPFILENOTIFY_ENDSUBQUEUE = 4
SPFILENOTIFY_STARTDELETE = 5
SPFILENOTIFY_ENDDELETE = 6
SPFILENOTIFY_DELETEERROR = 7
SPFILENOTIFY_STARTRENAME = 8
SPFILENOTIFY_ENDRENAME = 9
SPFILENOTIFY_RENAMEERROR = 10
SPFILENOTIFY_STARTCOPY = 11
SPFILENOTIFY_ENDCOPY = 12
SPFILENOTIFY_COPYERROR = 13
SPFILENOTIFY_NEEDMEDIA = 14
SPFILENOTIFY_QUEUESCAN = 15
SPFILENOTIFY_CABINETINFO = 16
SPFILENOTIFY_FILEINCABINET = 17
SPFILENOTIFY_NEEDNEWCABINET = 18
SPFILENOTIFY_FILEEXTRACTED = 19
SPFILENOTIFY_FILEOPDELAYED = 20
SPFILENOTIFY_STARTBACKUP = 21
SPFILENOTIFY_BACKUPERROR = 22
SPFILENOTIFY_ENDBACKUP = 23
SPFILENOTIFY_QUEUESCAN_EX = 24
SPFILENOTIFY_STARTREGISTRATION = 25
SPFILENOTIFY_ENDREGISTRATION = 32
SPFILENOTIFY_QUEUESCAN_SIGNERINFO = 64
SPFILENOTIFY_LANGMISMATCH = 65536
SPFILENOTIFY_TARGETEXISTS = 131072
SPFILENOTIFY_TARGETNEWER = 262144
FILEOP_RENAME = 1
FILEOP_BACKUP = 3
FILEOP_ABORT = 0
FILEOP_DOIT = 1
FILEOP_SKIP = 2
FILEOP_RETRY = 1
FILEOP_NEWPATH = 4
COPYFLG_WARN_IF_SKIP = 1
COPYFLG_NOSKIP = 2
COPYFLG_NOVERSIONCHECK = 4
COPYFLG_FORCE_FILE_IN_USE = 8
COPYFLG_NO_OVERWRITE = 16
COPYFLG_NO_VERSION_DIALOG = 32
COPYFLG_OVERWRITE_OLDER_ONLY = 64
COPYFLG_PROTECTED_WINDOWS_DRIVER_FILE = 256
COPYFLG_REPLACEONLY = 1024
COPYFLG_NODECOMP = 2048
COPYFLG_REPLACE_BOOT_FILE = 4096
COPYFLG_NOPRUNE = 8192
COPYFLG_IN_USE_TRY_RENAME = 16384
DELFLG_IN_USE = 1
DELFLG_IN_USE1 = 65536
SPREG_SUCCESS = 0
SPREG_LOADLIBRARY = 1
SPREG_GETPROCADDR = 2
SPREG_REGSVR = 3
SPREG_DLLINSTALL = 4
SPREG_TIMEOUT = 5
SPREG_UNKNOWN = 4294967295
SPINT_ACTIVE = 1
SPINT_DEFAULT = 2
SPINT_REMOVED = 4
SPID_ACTIVE = 1
SPID_DEFAULT = 2
SPID_REMOVED = 4
DIF_SELECTDEVICE = 1
DIF_INSTALLDEVICE = 2
DIF_ASSIGNRESOURCES = 3
DIF_PROPERTIES = 4
DIF_REMOVE = 5
DIF_FIRSTTIMESETUP = 6
DIF_FOUNDDEVICE = 7
DIF_SELECTCLASSDRIVERS = 8
DIF_VALIDATECLASSDRIVERS = 9
DIF_INSTALLCLASSDRIVERS = 10
DIF_CALCDISKSPACE = 11
DIF_DESTROYPRIVATEDATA = 12
DIF_VALIDATEDRIVER = 13
DIF_DETECT = 15
DIF_INSTALLWIZARD = 16
DIF_DESTROYWIZARDDATA = 17
DIF_PROPERTYCHANGE = 18
DIF_ENABLECLASS = 19
DIF_DETECTVERIFY = 20
DIF_INSTALLDEVICEFILES = 21
DIF_UNREMOVE = 22
DIF_SELECTBESTCOMPATDRV = 23
DIF_ALLOW_INSTALL = 24
DIF_REGISTERDEVICE = 25
DIF_NEWDEVICEWIZARD_PRESELECT = 26
DIF_NEWDEVICEWIZARD_SELECT = 27
DIF_NEWDEVICEWIZARD_PREANALYZE = 28
DIF_NEWDEVICEWIZARD_POSTANALYZE = 29
DIF_NEWDEVICEWIZARD_FINISHINSTALL = 30
DIF_UNUSED1 = 31
DIF_INSTALLINTERFACES = 32
DIF_DETECTCANCEL = 33
DIF_REGISTER_COINSTALLERS = 34
DIF_ADDPROPERTYPAGE_ADVANCED = 35
DIF_ADDPROPERTYPAGE_BASIC = 36
DIF_RESERVED1 = 37
DIF_TROUBLESHOOTER = 38
DIF_POWERMESSAGEWAKE = 39
DIF_ADDREMOTEPROPERTYPAGE_ADVANCED = 40
DIF_UPDATEDRIVER_UI = 41
DIF_FINISHINSTALL_ACTION = 42
DIF_RESERVED2 = 48
DIF_MOVEDEVICE = 14
DI_SHOWOEM = 1
DI_SHOWCOMPAT = 2
DI_SHOWCLASS = 4
DI_SHOWALL = 7
DI_NOVCP = 8
DI_DIDCOMPAT = 16
DI_DIDCLASS = 32
DI_AUTOASSIGNRES = 64
DI_NEEDRESTART = 128
DI_NEEDREBOOT = 256
DI_NOBROWSE = 512
DI_MULTMFGS = 1024
DI_DISABLED = 2048
DI_GENERALPAGE_ADDED = 4096
DI_RESOURCEPAGE_ADDED = 8192
DI_PROPERTIES_CHANGE = 16384
DI_INF_IS_SORTED = 32768
DI_ENUMSINGLEINF = 65536
DI_DONOTCALLCONFIGMG = 131072
DI_INSTALLDISABLED = 262144
DI_COMPAT_FROM_CLASS = 524288
DI_CLASSINSTALLPARAMS = 1048576
DI_NODI_DEFAULTACTION = 2097152
DI_QUIETINSTALL = 8388608
DI_NOFILECOPY = 16777216
DI_FORCECOPY = 33554432
DI_DRIVERPAGE_ADDED = 67108864
DI_USECI_SELECTSTRINGS = 134217728
DI_OVERRIDE_INFFLAGS = 268435456
DI_PROPS_NOCHANGEUSAGE = 536870912
DI_NOSELECTICONS = 1073741824
DI_NOWRITE_IDS = -2147483648
DI_FLAGSEX_RESERVED2 = 1
DI_FLAGSEX_RESERVED3 = 2
DI_FLAGSEX_CI_FAILED = 4
DI_FLAGSEX_FINISHINSTALL_ACTION = 8
DI_FLAGSEX_DIDINFOLIST = 16
DI_FLAGSEX_DIDCOMPATINFO = 32
DI_FLAGSEX_FILTERCLASSES = 64
DI_FLAGSEX_SETFAILEDINSTALL = 128
DI_FLAGSEX_DEVICECHANGE = 256
DI_FLAGSEX_ALWAYSWRITEIDS = 512
DI_FLAGSEX_PROPCHANGE_PENDING = 1024
DI_FLAGSEX_ALLOWEXCLUDEDDRVS = 2048
DI_FLAGSEX_NOUIONQUERYREMOVE = 4096
DI_FLAGSEX_USECLASSFORCOMPAT = 8192
DI_FLAGSEX_RESERVED4 = 16384
DI_FLAGSEX_NO_DRVREG_MODIFY = 32768
DI_FLAGSEX_IN_SYSTEM_SETUP = 65536
DI_FLAGSEX_INET_DRIVER = 131072
DI_FLAGSEX_APPENDDRIVERLIST = 262144
DI_FLAGSEX_PREINSTALLBACKUP = 524288
DI_FLAGSEX_BACKUPONREPLACE = 1048576
DI_FLAGSEX_DRIVERLIST_FROM_URL = 2097152
DI_FLAGSEX_RESERVED1 = 4194304
DI_FLAGSEX_EXCLUDE_OLD_INET_DRIVERS = 8388608
DI_FLAGSEX_POWERPAGE_ADDED = 16777216
DI_FLAGSEX_FILTERSIMILARDRIVERS = 33554432
DI_FLAGSEX_INSTALLEDDRIVER = 67108864
DI_FLAGSEX_NO_CLASSLIST_NODE_MERGE = 134217728
DI_FLAGSEX_ALTPLATFORM_DRVSEARCH = 268435456
DI_FLAGSEX_RESTART_DEVICE_ONLY = 536870912
DI_FLAGSEX_RECURSIVESEARCH = 1073741824
DI_FLAGSEX_SEARCH_PUBLISHED_INFS = -2147483648
ENABLECLASS_QUERY = 0
ENABLECLASS_SUCCESS = 1
ENABLECLASS_FAILURE = 2
DICS_ENABLE = 1
DICS_DISABLE = 2
DICS_PROPCHANGE = 3
DICS_START = 4
DICS_STOP = 5
DICS_FLAG_GLOBAL = 1
DICS_FLAG_CONFIGSPECIFIC = 2
DICS_FLAG_CONFIGGENERAL = 4
DI_REMOVEDEVICE_GLOBAL = 1
DI_REMOVEDEVICE_CONFIGSPECIFIC = 2
DI_UNREMOVEDEVICE_CONFIGSPECIFIC = 2
MAX_INSTALLWIZARD_DYNAPAGES = 20
NDW_INSTALLFLAG_DIDFACTDEFS = 1
NDW_INSTALLFLAG_HARDWAREALLREADYIN = 2
NDW_INSTALLFLAG_NEEDRESTART = 128
NDW_INSTALLFLAG_NEEDREBOOT = 256
NDW_INSTALLFLAG_NEEDSHUTDOWN = 512
NDW_INSTALLFLAG_EXPRESSINTRO = 1024
NDW_INSTALLFLAG_SKIPISDEVINSTALLED = 2048
NDW_INSTALLFLAG_NODETECTEDDEVS = 4096
NDW_INSTALLFLAG_INSTALLSPECIFIC = 8192
NDW_INSTALLFLAG_SKIPCLASSLIST = 16384
NDW_INSTALLFLAG_CI_PICKED_OEM = 32768
NDW_INSTALLFLAG_PCMCIAMODE = 65536
NDW_INSTALLFLAG_PCMCIADEVICE = 131072
NDW_INSTALLFLAG_USERCANCEL = 262144
NDW_INSTALLFLAG_KNOWNCLASS = 524288
DYNAWIZ_FLAG_PAGESADDED = 1
DYNAWIZ_FLAG_ANALYZE_HANDLECONFLICT = 8
DYNAWIZ_FLAG_INSTALLDET_NEXT = 2
DYNAWIZ_FLAG_INSTALLDET_PREV = 4
MIN_IDD_DYNAWIZ_RESOURCE_ID = 10000
MAX_IDD_DYNAWIZ_RESOURCE_ID = 11000
IDD_DYNAWIZ_FIRSTPAGE = 10000
IDD_DYNAWIZ_SELECT_PREVPAGE = 10001
IDD_DYNAWIZ_SELECT_NEXTPAGE = 10002
IDD_DYNAWIZ_ANALYZE_PREVPAGE = 10003
IDD_DYNAWIZ_ANALYZE_NEXTPAGE = 10004
IDD_DYNAWIZ_SELECTDEV_PAGE = 10009
IDD_DYNAWIZ_ANALYZEDEV_PAGE = 10010
IDD_DYNAWIZ_INSTALLDETECTEDDEVS_PAGE = 10011
IDD_DYNAWIZ_SELECTCLASS_PAGE = 10012
IDD_DYNAWIZ_INSTALLDETECTED_PREVPAGE = 10006
IDD_DYNAWIZ_INSTALLDETECTED_NEXTPAGE = 10007
IDD_DYNAWIZ_INSTALLDETECTED_NODEVS = 10008
DNF_DUPDESC = 1
DNF_OLDDRIVER = 2
DNF_EXCLUDEFROMLIST = 4
DNF_NODRIVER = 8
DNF_LEGACYINF = 16
DNF_CLASS_DRIVER = 32
DNF_COMPATIBLE_DRIVER = 64
DNF_INET_DRIVER = 128
DNF_UNUSED1 = 256
DNF_UNUSED2 = 512
DNF_OLD_INET_DRIVER = 1024
DNF_BAD_DRIVER = 2048
DNF_DUPPROVIDER = 4096
DNF_INF_IS_SIGNED = 8192
DNF_OEM_F6_INF = 16384
DNF_DUPDRIVERVER = 32768
DNF_BASIC_DRIVER = 65536
DNF_AUTHENTICODE_SIGNED = 131072
DNF_INSTALLEDDRIVER = 262144
DNF_ALWAYSEXCLUDEFROMLIST = 524288
DNF_INBOX_DRIVER = 1048576
DNF_REQUESTADDITIONALSOFTWARE = 2097152
DNF_UNUSED_22 = 4194304
DNF_UNUSED_23 = 8388608
DNF_UNUSED_24 = 16777216
DNF_UNUSED_25 = 33554432
DNF_UNUSED_26 = 67108864
DNF_UNUSED_27 = 134217728
DNF_UNUSED_28 = 268435456
DNF_UNUSED_29 = 536870912
DNF_UNUSED_30 = 1073741824
DNF_UNUSED_31 = 2147483648
DRIVER_HARDWAREID_RANK = 4095
DRIVER_HARDWAREID_MASK = 2147487743
DRIVER_UNTRUSTED_RANK = 2147483648
DRIVER_W9X_SUSPECT_RANK = 3221225472
DRIVER_COMPATID_RANK = 16383
DRIVER_UNTRUSTED_HARDWAREID_RANK = 36863
DRIVER_UNTRUSTED_COMPATID_RANK = 49151
DRIVER_W9X_SUSPECT_HARDWAREID_RANK = 53247
DRIVER_W9X_SUSPECT_COMPATID_RANK = 65535
SPPSR_SELECT_DEVICE_RESOURCES = 1
SPPSR_ENUM_BASIC_DEVICE_PROPERTIES = 2
SPPSR_ENUM_ADV_DEVICE_PROPERTIES = 3
INFINFO_INF_SPEC_IS_HINF = 1
INFINFO_INF_NAME_IS_ABSOLUTE = 2
INFINFO_DEFAULT_SEARCH = 3
INFINFO_REVERSE_DEFAULT_SEARCH = 4
INFINFO_INF_PATH_LIST_SEARCH = 5
FILE_COMPRESSION_NONE = 0
FILE_COMPRESSION_WINLZA = 1
FILE_COMPRESSION_MSZIP = 2
FILE_COMPRESSION_NTCAB = 3
SRCLIST_TEMPORARY = 1
SRCLIST_NOBROWSE = 2
SRCLIST_SYSTEM = 16
SRCLIST_USER = 32
SRCLIST_SYSIFADMIN = 64
SRCLIST_SUBDIRS = 256
SRCLIST_APPEND = 512
SRCLIST_NOSTRIPPLATFORM = 1024
IDF_NOBROWSE = 1
IDF_NOSKIP = 2
IDF_NODETAILS = 4
IDF_NOCOMPRESSED = 8
IDF_CHECKFIRST = 256
IDF_NOBEEP = 512
IDF_NOFOREGROUND = 1024
IDF_WARNIFSKIP = 2048
IDF_NOREMOVABLEMEDIAPROMPT = 4096
IDF_USEDISKNAMEASPROMPT = 8192
IDF_OEMDISK = 2147483648
DPROMPT_SUCCESS = 0
DPROMPT_CANCEL = 1
DPROMPT_SKIPFILE = 2
DPROMPT_BUFFERTOOSMALL = 3
DPROMPT_OUTOFMEMORY = 4
SETDIRID_NOT_FULL_PATH = 1
SRCINFO_PATH = 1
SRCINFO_TAGFILE = 2
SRCINFO_DESCRIPTION = 3
SRCINFO_FLAGS = 4
SRCINFO_TAGFILE2 = 5
SRC_FLAGS_CABFILE = 16
SP_FLAG_CABINETCONTINUATION = 2048
SP_BACKUP_BACKUPPASS = 1
SP_BACKUP_DEMANDPASS = 2
SP_BACKUP_SPECIAL = 4
SP_BACKUP_BOOTFILE = 8
SPQ_SCAN_FILE_PRESENCE = 1
SPQ_SCAN_FILE_VALIDITY = 2
SPQ_SCAN_USE_CALLBACK = 4
SPQ_SCAN_USE_CALLBACKEX = 8
SPQ_SCAN_INFORM_USER = 16
SPQ_SCAN_PRUNE_COPY_QUEUE = 32
SPQ_SCAN_USE_CALLBACK_SIGNERINFO = 64
SPQ_SCAN_PRUNE_DELREN = 128
SPQ_SCAN_FILE_PRESENCE_WITHOUT_SOURCE = 256
SPQ_SCAN_FILE_COMPARISON = 512
SPQ_SCAN_ACTIVATE_DRP = 1024
SPQ_DELAYED_COPY = 1
SPQ_FLAG_BACKUP_AWARE = 1
SPQ_FLAG_ABORT_IF_UNSIGNED = 2
SPQ_FLAG_FILES_MODIFIED = 4
SPQ_FLAG_DO_SHUFFLEMOVE = 8
SPQ_FLAG_VALID = 15
SPOST_MAX = 3
SUOI_FORCEDELETE = 1
SUOI_INTERNAL1 = 2
SPDSL_IGNORE_DISK = 1
SPDSL_DISALLOW_NEGATIVE_ADJUST = 2
SPFILEQ_FILE_IN_USE = 1
SPFILEQ_REBOOT_RECOMMENDED = 2
SPFILEQ_REBOOT_IN_PROGRESS = 4
FLG_ADDREG_DELREG_BIT = 32768
FLG_ADDREG_BINVALUETYPE = 1
FLG_ADDREG_NOCLOBBER = 2
FLG_ADDREG_DELVAL = 4
FLG_ADDREG_APPEND = 8
FLG_ADDREG_KEYONLY = 16
FLG_ADDREG_OVERWRITEONLY = 32
FLG_ADDREG_64BITKEY = 4096
FLG_ADDREG_KEYONLY_COMMON = 8192
FLG_ADDREG_32BITKEY = 16384
FLG_ADDREG_TYPE_SZ = 0
FLG_ADDREG_TYPE_MULTI_SZ = 65536
FLG_ADDREG_TYPE_EXPAND_SZ = 131072
FLG_DELREG_VALUE = 0
FLG_DELREG_TYPE_SZ = 0
FLG_DELREG_TYPE_MULTI_SZ = 65536
FLG_DELREG_TYPE_EXPAND_SZ = 131072
FLG_DELREG_64BITKEY = 4096
FLG_DELREG_KEYONLY_COMMON = 8192
FLG_DELREG_32BITKEY = 16384
FLG_DELREG_OPERATION_MASK = 254
FLG_BITREG_CLEARBITS = 0
FLG_BITREG_SETBITS = 1
FLG_BITREG_64BITKEY = 4096
FLG_BITREG_32BITKEY = 16384
FLG_INI2REG_64BITKEY = 4096
FLG_INI2REG_32BITKEY = 16384
FLG_REGSVR_DLLREGISTER = 1
FLG_REGSVR_DLLINSTALL = 2
FLG_PROFITEM_CURRENTUSER = 1
FLG_PROFITEM_DELETE = 2
FLG_PROFITEM_GROUP = 4
FLG_PROFITEM_CSIDL = 8
FLG_ADDPROPERTY_NOCLOBBER = 1
FLG_ADDPROPERTY_OVERWRITEONLY = 2
FLG_ADDPROPERTY_APPEND = 4
FLG_ADDPROPERTY_OR = 8
FLG_ADDPROPERTY_AND = 16
FLG_DELPROPERTY_MULTI_SZ_DELSTRING = 1
SPINST_LOGCONFIG = 1
SPINST_INIFILES = 2
SPINST_REGISTRY = 4
SPINST_INI2REG = 8
SPINST_FILES = 16
SPINST_BITREG = 32
SPINST_REGSVR = 64
SPINST_UNREGSVR = 128
SPINST_PROFILEITEMS = 256
SPINST_COPYINF = 512
SPINST_PROPERTIES = 1024
SPINST_ALL = 2047
SPINST_SINGLESECTION = 65536
SPINST_LOGCONFIG_IS_FORCED = 131072
SPINST_LOGCONFIGS_ARE_OVERRIDES = 262144
SPINST_REGISTERCALLBACKAWARE = 524288
SPINST_DEVICEINSTALL = 1048576
SPSVCINST_TAGTOFRONT = 1
SPSVCINST_ASSOCSERVICE = 2
SPSVCINST_DELETEEVENTLOGENTRY = 4
SPSVCINST_NOCLOBBER_DISPLAYNAME = 8
SPSVCINST_NOCLOBBER_STARTTYPE = 16
SPSVCINST_NOCLOBBER_ERRORCONTROL = 32
SPSVCINST_NOCLOBBER_LOADORDERGROUP = 64
SPSVCINST_NOCLOBBER_DEPENDENCIES = 128
SPSVCINST_NOCLOBBER_DESCRIPTION = 256
SPSVCINST_STOPSERVICE = 512
SPSVCINST_CLOBBER_SECURITY = 1024
SPSVCINST_STARTSERVICE = 2048
SPSVCINST_NOCLOBBER_REQUIREDPRIVILEGES = 4096
SPSVCINST_NOCLOBBER_TRIGGERS = 8192
SPSVCINST_NOCLOBBER_SERVICESIDTYPE = 16384
SPSVCINST_NOCLOBBER_DELAYEDAUTOSTART = 32768
SPSVCINST_UNIQUE_NAME = 65536
SPFILELOG_SYSTEMLOG = 1
SPFILELOG_FORCENEW = 2
SPFILELOG_QUERYONLY = 4
SPFILELOG_OEMFILE = 1
LogSevInformation = 0
LogSevWarning = 1
LogSevError = 2
LogSevFatalError = 3
LogSevMaximum = 4
DICD_GENERATE_ID = 1
DICD_INHERIT_CLASSDRVS = 2
DIOD_INHERIT_CLASSDRVS = 2
DIOD_CANCEL_REMOVE = 4
DIODI_NO_ADD = 1
SPRDI_FIND_DUPS = 1
SPDIT_NODRIVER = 0
DIGCF_DEFAULT = 1
DIGCF_PRESENT = 2
DIGCF_ALLCLASSES = 4
DIGCF_PROFILE = 8
DIGCF_DEVICEINTERFACE = 16
DIGCF_INTERFACEDEVICE = 16
DIBCI_NOINSTALLCLASS = 1
DIBCI_NODISPLAYCLASS = 2
DIOCR_INSTALLER = 1
DIOCR_INTERFACE = 2
DIREG_DEV = 1
DIREG_DRV = 2
DIREG_BOTH = 4
DICLASSPROP_INSTALLER = 1
DICLASSPROP_INTERFACE = 2
SPDRP_DEVICEDESC = 0
SPDRP_HARDWAREID = 1
SPDRP_COMPATIBLEIDS = 2
SPDRP_UNUSED0 = 3
SPDRP_SERVICE = 4
SPDRP_UNUSED1 = 5
SPDRP_UNUSED2 = 6
SPDRP_CLASS = 7
SPDRP_CLASSGUID = 8
SPDRP_DRIVER = 9
SPDRP_CONFIGFLAGS = 10
SPDRP_MFG = 11
SPDRP_FRIENDLYNAME = 12
SPDRP_LOCATION_INFORMATION = 13
SPDRP_PHYSICAL_DEVICE_OBJECT_NAME = 14
SPDRP_CAPABILITIES = 15
SPDRP_UI_NUMBER = 16
SPDRP_UPPERFILTERS = 17
SPDRP_LOWERFILTERS = 18
SPDRP_BUSTYPEGUID = 19
SPDRP_LEGACYBUSTYPE = 20
SPDRP_BUSNUMBER = 21
SPDRP_ENUMERATOR_NAME = 22
SPDRP_SECURITY = 23
SPDRP_SECURITY_SDS = 24
SPDRP_DEVTYPE = 25
SPDRP_EXCLUSIVE = 26
SPDRP_CHARACTERISTICS = 27
SPDRP_ADDRESS = 28
SPDRP_UI_NUMBER_DESC_FORMAT = 29
SPDRP_DEVICE_POWER_DATA = 30
SPDRP_REMOVAL_POLICY = 31
SPDRP_REMOVAL_POLICY_HW_DEFAULT = 32
SPDRP_REMOVAL_POLICY_OVERRIDE = 33
SPDRP_INSTALL_STATE = 34
SPDRP_LOCATION_PATHS = 35
SPDRP_BASE_CONTAINERID = 36
SPDRP_MAXIMUM_PROPERTY = 37
SPCRP_UPPERFILTERS = 17
SPCRP_LOWERFILTERS = 18
SPCRP_SECURITY = 23
SPCRP_SECURITY_SDS = 24
SPCRP_DEVTYPE = 25
SPCRP_EXCLUSIVE = 26
SPCRP_CHARACTERISTICS = 27
SPCRP_MAXIMUM_PROPERTY = 28
DMI_MASK = 1
DMI_BKCOLOR = 2
DMI_USERECT = 4
DIGCDP_FLAG_BASIC = 1
DIGCDP_FLAG_ADVANCED = 2
DIGCDP_FLAG_REMOTE_BASIC = 3
DIGCDP_FLAG_REMOTE_ADVANCED = 4
IDI_RESOURCEFIRST = 159
IDI_RESOURCE = 159
IDI_RESOURCELAST = 161
IDI_RESOURCEOVERLAYFIRST = 161
IDI_RESOURCEOVERLAYLAST = 161
IDI_CONFLICT = 161
IDI_CLASSICON_OVERLAYFIRST = 500
IDI_CLASSICON_OVERLAYLAST = 502
IDI_PROBLEM_OVL = 500
IDI_DISABLED_OVL = 501
IDI_FORCED_OVL = 502
SPWPT_SELECTDEVICE = 1
SPWP_USE_DEVINFO_DATA = 1
SIGNERSCORE_UNKNOWN = 4278190080
SIGNERSCORE_W9X_SUSPECT = 3221225472
SIGNERSCORE_UNSIGNED = 2147483648
SIGNERSCORE_AUTHENTICODE = 251658240
SIGNERSCORE_WHQL = 218103813
SIGNERSCORE_UNCLASSIFIED = 218103812
SIGNERSCORE_INBOX = 218103811
SIGNERSCORE_LOGO_STANDARD = 218103810
SIGNERSCORE_LOGO_PREMIUM = 218103809
SIGNERSCORE_MASK = 4278190080
SIGNERSCORE_SIGNED_MASK = 4026531840
DICUSTOMDEVPROP_MERGE_MULTISZ = 1
SCWMI_CLOBBER_SECURITY = 1
MAX_DEVICE_ID_LEN = 200
MAX_DEVNODE_ID_LEN = 200
MAX_GUID_STRING_LEN = 39
MAX_CLASS_NAME_LEN = 32
MAX_PROFILE_LEN = 80
MAX_CONFIG_VALUE = 9999
MAX_INSTANCE_VALUE = 9999
MAX_MEM_REGISTERS = 9
MAX_IO_PORTS = 20
MAX_IRQS = 7
MAX_DMA_CHANNELS = 7
DWORD_MAX = 4294967295
CONFIGMG_VERSION = 1024
CM_CDMASK_DEVINST = 1
CM_CDMASK_RESDES = 2
CM_CDMASK_FLAGS = 4
CM_CDMASK_DESCRIPTION = 8
CM_CDMASK_VALID = 15
CM_CDFLAGS_DRIVER = 1
CM_CDFLAGS_ROOT_OWNED = 2
CM_CDFLAGS_RESERVED = 4
mMD_MemoryType = 1
fMD_MemoryType = 1
fMD_ROM = 0
fMD_RAM = 1
mMD_32_24 = 2
fMD_32_24 = 2
fMD_24 = 0
fMD_32 = 2
mMD_Prefetchable = 4
fMD_Prefetchable = 4
fMD_Pref = 4
fMD_PrefetchDisallowed = 0
fMD_PrefetchAllowed = 4
mMD_Readable = 8
fMD_Readable = 8
fMD_ReadAllowed = 0
fMD_ReadDisallowed = 8
mMD_CombinedWrite = 16
fMD_CombinedWrite = 16
fMD_CombinedWriteDisallowed = 0
fMD_CombinedWriteAllowed = 16
mMD_Cacheable = 32
fMD_NonCacheable = 0
fMD_Cacheable = 32
fMD_WINDOW_DECODE = 64
fMD_MEMORY_BAR = 128
fIOD_PortType = 1
fIOD_Memory = 0
fIOD_IO = 1
fIOD_DECODE = 252
fIOD_10_BIT_DECODE = 4
fIOD_12_BIT_DECODE = 8
fIOD_16_BIT_DECODE = 16
fIOD_POSITIVE_DECODE = 32
fIOD_PASSIVE_DECODE = 64
fIOD_WINDOW_DECODE = 128
fIOD_PORT_BAR = 256
IO_ALIAS_10_BIT_DECODE = 4
IO_ALIAS_12_BIT_DECODE = 16
IO_ALIAS_16_BIT_DECODE = 0
IO_ALIAS_POSITIVE_DECODE = 255
IOA_Local = 255
mDD_Width = 3
fDD_BYTE = 0
fDD_WORD = 1
fDD_DWORD = 2
fDD_BYTE_AND_WORD = 3
mDD_BusMaster = 4
fDD_NoBusMaster = 0
fDD_BusMaster = 4
mDD_Type = 24
fDD_TypeStandard = 0
fDD_TypeA = 8
fDD_TypeB = 16
fDD_TypeF = 24
mIRQD_Share = 1
fIRQD_Exclusive = 0
fIRQD_Share = 1
fIRQD_Share_Bit = 0
fIRQD_Level_Bit = 1
mIRQD_Edge_Level = 2
fIRQD_Level = 0
fIRQD_Edge = 2
CM_RESDES_WIDTH_DEFAULT = 0
CM_RESDES_WIDTH_32 = 1
CM_RESDES_WIDTH_64 = 2
CM_RESDES_WIDTH_BITS = 3
mPCD_IO_8_16 = 1
fPCD_IO_8 = 0
fPCD_IO_16 = 1
mPCD_MEM_8_16 = 2
fPCD_MEM_8 = 0
fPCD_MEM_16 = 2
mPCD_MEM_A_C = 12
fPCD_MEM1_A = 4
fPCD_MEM2_A = 8
fPCD_IO_ZW_8 = 16
fPCD_IO_SRC_16 = 32
fPCD_IO_WS_16 = 64
mPCD_MEM_WS = 768
fPCD_MEM_WS_ONE = 256
fPCD_MEM_WS_TWO = 512
fPCD_MEM_WS_THREE = 768
fPCD_MEM_A = 4
fPCD_ATTRIBUTES_PER_WINDOW = 32768
fPCD_IO1_16 = 65536
fPCD_IO1_ZW_8 = 131072
fPCD_IO1_SRC_16 = 262144
fPCD_IO1_WS_16 = 524288
fPCD_IO2_16 = 1048576
fPCD_IO2_ZW_8 = 2097152
fPCD_IO2_SRC_16 = 4194304
fPCD_IO2_WS_16 = 8388608
mPCD_MEM1_WS = 50331648
fPCD_MEM1_WS_ONE = 16777216
fPCD_MEM1_WS_TWO = 33554432
fPCD_MEM1_WS_THREE = 50331648
fPCD_MEM1_16 = 67108864
mPCD_MEM2_WS = 805306368
fPCD_MEM2_WS_ONE = 268435456
fPCD_MEM2_WS_TWO = 536870912
fPCD_MEM2_WS_THREE = 805306368
fPCD_MEM2_16 = 1073741824
PCD_MAX_MEMORY = 2
PCD_MAX_IO = 2
mPMF_AUDIO_ENABLE = 8
fPMF_AUDIO_ENABLE = 8
CM_HWPI_NOT_DOCKABLE = 0
CM_HWPI_UNDOCKED = 1
CM_HWPI_DOCKED = 2
ResType_All = 0
ResType_None = 0
ResType_Mem = 1
ResType_IO = 2
ResType_DMA = 3
ResType_IRQ = 4
ResType_DoNotUse = 5
ResType_BusNumber = 6
ResType_MemLarge = 7
ResType_MAX = 7
ResType_Ignored_Bit = 32768
ResType_ClassSpecific = 65535
ResType_Reserved = 32768
ResType_DevicePrivate = 32769
ResType_PcCardConfig = 32770
ResType_MfCardConfig = 32771
ResType_Connection = 32772
CM_ADD_RANGE_ADDIFCONFLICT = 0
CM_ADD_RANGE_DONOTADDIFCONFLICT = 1
CM_ADD_RANGE_BITS = 1
BASIC_LOG_CONF = 0
FILTERED_LOG_CONF = 1
ALLOC_LOG_CONF = 2
BOOT_LOG_CONF = 3
FORCED_LOG_CONF = 4
OVERRIDE_LOG_CONF = 5
NUM_LOG_CONF = 6
LOG_CONF_BITS = 7
PRIORITY_EQUAL_FIRST = 8
PRIORITY_EQUAL_LAST = 0
PRIORITY_BIT = 8
RegDisposition_OpenAlways = 0
RegDisposition_OpenExisting = 1
RegDisposition_Bits = 1
CM_ADD_ID_HARDWARE = 0
CM_ADD_ID_COMPATIBLE = 1
CM_ADD_ID_BITS = 1
CM_CREATE_DEVNODE_NORMAL = 0
CM_CREATE_DEVNODE_NO_WAIT_INSTALL = 1
CM_CREATE_DEVNODE_PHANTOM = 2
CM_CREATE_DEVNODE_GENERATE_ID = 4
CM_CREATE_DEVNODE_DO_NOT_INSTALL = 8
CM_CREATE_DEVNODE_BITS = 15
CM_CREATE_DEVINST_NORMAL = 0
CM_CREATE_DEVINST_NO_WAIT_INSTALL = 1
CM_CREATE_DEVINST_PHANTOM = 2
CM_CREATE_DEVINST_GENERATE_ID = 4
CM_CREATE_DEVINST_DO_NOT_INSTALL = 8
CM_CREATE_DEVINST_BITS = 15
CM_DELETE_CLASS_ONLY = 0
CM_DELETE_CLASS_SUBKEYS = 1
CM_DELETE_CLASS_INTERFACE = 2
CM_DELETE_CLASS_BITS = 3
CM_ENUMERATE_CLASSES_INSTALLER = 0
CM_ENUMERATE_CLASSES_INTERFACE = 1
CM_ENUMERATE_CLASSES_BITS = 1
CM_DETECT_NEW_PROFILE = 1
CM_DETECT_CRASHED = 2
CM_DETECT_HWPROF_FIRST_BOOT = 4
CM_DETECT_RUN = 2147483648
CM_DETECT_BITS = 2147483655
CM_DISABLE_POLITE = 0
CM_DISABLE_ABSOLUTE = 1
CM_DISABLE_HARDWARE = 2
CM_DISABLE_UI_NOT_OK = 4
CM_DISABLE_PERSIST = 8
CM_DISABLE_BITS = 15
CM_GETIDLIST_FILTER_NONE = 0
CM_GETIDLIST_FILTER_ENUMERATOR = 1
CM_GETIDLIST_FILTER_SERVICE = 2
CM_GETIDLIST_FILTER_EJECTRELATIONS = 4
CM_GETIDLIST_FILTER_REMOVALRELATIONS = 8
CM_GETIDLIST_FILTER_POWERRELATIONS = 16
CM_GETIDLIST_FILTER_BUSRELATIONS = 32
CM_GETIDLIST_DONOTGENERATE = 268435520
CM_GETIDLIST_FILTER_BITS = 268435583
CM_GETIDLIST_FILTER_TRANSPORTRELATIONS = 128
CM_GETIDLIST_FILTER_PRESENT = 256
CM_GETIDLIST_FILTER_CLASS = 512
CM_GET_DEVICE_INTERFACE_LIST_PRESENT = 0
CM_GET_DEVICE_INTERFACE_LIST_ALL_DEVICES = 1
CM_GET_DEVICE_INTERFACE_LIST_BITS = 1
CM_DRP_DEVICEDESC = 1
CM_DRP_HARDWAREID = 2
CM_DRP_COMPATIBLEIDS = 3
CM_DRP_UNUSED0 = 4
CM_DRP_SERVICE = 5
CM_DRP_UNUSED1 = 6
CM_DRP_UNUSED2 = 7
CM_DRP_CLASS = 8
CM_DRP_CLASSGUID = 9
CM_DRP_DRIVER = 10
CM_DRP_CONFIGFLAGS = 11
CM_DRP_MFG = 12
CM_DRP_FRIENDLYNAME = 13
CM_DRP_LOCATION_INFORMATION = 14
CM_DRP_PHYSICAL_DEVICE_OBJECT_NAME = 15
CM_DRP_CAPABILITIES = 16
CM_DRP_UI_NUMBER = 17
CM_DRP_UPPERFILTERS = 18
CM_CRP_UPPERFILTERS = 18
CM_DRP_LOWERFILTERS = 19
CM_CRP_LOWERFILTERS = 19
CM_DRP_BUSTYPEGUID = 20
CM_DRP_LEGACYBUSTYPE = 21
CM_DRP_BUSNUMBER = 22
CM_DRP_ENUMERATOR_NAME = 23
CM_DRP_SECURITY = 24
CM_CRP_SECURITY = 24
CM_DRP_SECURITY_SDS = 25
CM_CRP_SECURITY_SDS = 25
CM_DRP_DEVTYPE = 26
CM_CRP_DEVTYPE = 26
CM_DRP_EXCLUSIVE = 27
CM_CRP_EXCLUSIVE = 27
CM_DRP_CHARACTERISTICS = 28
CM_CRP_CHARACTERISTICS = 28
CM_DRP_ADDRESS = 29
CM_DRP_UI_NUMBER_DESC_FORMAT = 30
CM_DRP_DEVICE_POWER_DATA = 31
CM_DRP_REMOVAL_POLICY = 32
CM_DRP_REMOVAL_POLICY_HW_DEFAULT = 33
CM_DRP_REMOVAL_POLICY_OVERRIDE = 34
CM_DRP_INSTALL_STATE = 35
CM_DRP_LOCATION_PATHS = 36
CM_DRP_BASE_CONTAINERID = 37
CM_DRP_MIN = 1
CM_CRP_MIN = 1
CM_DRP_MAX = 37
CM_CRP_MAX = 37
CM_DEVCAP_LOCKSUPPORTED = 1
CM_DEVCAP_EJECTSUPPORTED = 2
CM_DEVCAP_REMOVABLE = 4
CM_DEVCAP_DOCKDEVICE = 8
CM_DEVCAP_UNIQUEID = 16
CM_DEVCAP_SILENTINSTALL = 32
CM_DEVCAP_RAWDEVICEOK = 64
CM_DEVCAP_SURPRISEREMOVALOK = 128
CM_DEVCAP_HARDWAREDISABLED = 256
CM_DEVCAP_NONDYNAMIC = 512
CM_DEVCAP_SECUREDEVICE = 1024
CM_REMOVAL_POLICY_EXPECT_NO_REMOVAL = 1
CM_REMOVAL_POLICY_EXPECT_ORDERLY_REMOVAL = 2
CM_REMOVAL_POLICY_EXPECT_SURPRISE_REMOVAL = 3
CM_INSTALL_STATE_INSTALLED = 0
CM_INSTALL_STATE_NEEDS_REINSTALL = 1
CM_INSTALL_STATE_FAILED_INSTALL = 2
CM_INSTALL_STATE_FINISH_INSTALL = 3
CM_LOCATE_DEVNODE_NORMAL = 0
CM_LOCATE_DEVNODE_PHANTOM = 1
CM_LOCATE_DEVNODE_CANCELREMOVE = 2
CM_LOCATE_DEVNODE_NOVALIDATION = 4
CM_LOCATE_DEVNODE_BITS = 7
CM_LOCATE_DEVINST_NORMAL = 0
CM_LOCATE_DEVINST_PHANTOM = 1
CM_LOCATE_DEVINST_CANCELREMOVE = 2
CM_LOCATE_DEVINST_NOVALIDATION = 4
CM_LOCATE_DEVINST_BITS = 7
CM_OPEN_CLASS_KEY_INSTALLER = 0
CM_OPEN_CLASS_KEY_INTERFACE = 1
CM_OPEN_CLASS_KEY_BITS = 1
CM_REMOVE_UI_OK = 0
CM_REMOVE_UI_NOT_OK = 1
CM_REMOVE_NO_RESTART = 2
CM_REMOVE_DISABLE = 4
CM_REMOVE_BITS = 7
CM_QUERY_REMOVE_UI_OK = 0
CM_QUERY_REMOVE_UI_NOT_OK = 1
CM_REENUMERATE_NORMAL = 0
CM_REENUMERATE_SYNCHRONOUS = 1
CM_REENUMERATE_RETRY_INSTALLATION = 2
CM_REENUMERATE_ASYNCHRONOUS = 4
CM_REENUMERATE_BITS = 7
CM_REGISTER_DEVICE_DRIVER_STATIC = 0
CM_REGISTER_DEVICE_DRIVER_DISABLEABLE = 1
CM_REGISTER_DEVICE_DRIVER_REMOVABLE = 2
CM_REGISTER_DEVICE_DRIVER_BITS = 3
CM_REGISTRY_HARDWARE = 0
CM_REGISTRY_SOFTWARE = 1
CM_REGISTRY_USER = 256
CM_REGISTRY_CONFIG = 512
CM_REGISTRY_BITS = 769
CM_SET_DEVNODE_PROBLEM_NORMAL = 0
CM_SET_DEVNODE_PROBLEM_OVERRIDE = 1
CM_SET_DEVNODE_PROBLEM_BITS = 1
CM_SET_DEVINST_PROBLEM_NORMAL = 0
CM_SET_DEVINST_PROBLEM_OVERRIDE = 1
CM_SET_DEVINST_PROBLEM_BITS = 1
CM_SET_HW_PROF_FLAGS_UI_NOT_OK = 1
CM_SET_HW_PROF_FLAGS_BITS = 1
CM_SETUP_DEVNODE_READY = 0
CM_SETUP_DEVINST_READY = 0
CM_SETUP_DOWNLOAD = 1
CM_SETUP_WRITE_LOG_CONFS = 2
CM_SETUP_PROP_CHANGE = 3
CM_SETUP_DEVNODE_RESET = 4
CM_SETUP_DEVINST_RESET = 4
CM_SETUP_DEVNODE_CONFIG = 5
CM_SETUP_DEVINST_CONFIG = 5
CM_SETUP_DEVNODE_CONFIG_CLASS = 6
CM_SETUP_DEVINST_CONFIG_CLASS = 6
CM_SETUP_DEVNODE_CONFIG_EXTENSIONS = 7
CM_SETUP_DEVINST_CONFIG_EXTENSIONS = 7
CM_SETUP_DEVNODE_CONFIG_RESET = 8
CM_SETUP_DEVINST_CONFIG_RESET = 8
CM_SETUP_BITS = 15
CM_QUERY_ARBITRATOR_RAW = 0
CM_QUERY_ARBITRATOR_TRANSLATED = 1
CM_QUERY_ARBITRATOR_BITS = 1
CM_CUSTOMDEVPROP_MERGE_MULTISZ = 1
CM_CUSTOMDEVPROP_BITS = 1
CM_NAME_ATTRIBUTE_NAME_RETRIEVED_FROM_DEVICE = 1
CM_NAME_ATTRIBUTE_USER_ASSIGNED_NAME = 2
CM_CLASS_PROPERTY_INSTALLER = 0
CM_CLASS_PROPERTY_INTERFACE = 1
CM_CLASS_PROPERTY_BITS = 1
CM_NOTIFY_FILTER_FLAG_ALL_INTERFACE_CLASSES = 1
CM_NOTIFY_FILTER_FLAG_ALL_DEVICE_INSTANCES = 2
CM_GLOBAL_STATE_CAN_DO_UI = 1
CM_GLOBAL_STATE_ON_BIG_STACK = 2
CM_GLOBAL_STATE_SERVICES_AVAILABLE = 4
CM_GLOBAL_STATE_SHUTTING_DOWN = 8
CM_GLOBAL_STATE_DETECTION_PENDING = 16
CM_GLOBAL_STATE_REBOOT_REQUIRED = 32
INSTALLFLAG_FORCE = 1
INSTALLFLAG_READONLY = 2
INSTALLFLAG_NONINTERACTIVE = 4
INSTALLFLAG_BITS = 7
DIIDFLAG_SHOWSEARCHUI = 1
DIIDFLAG_NOFINISHINSTALLUI = 2
DIIDFLAG_INSTALLNULLDRIVER = 4
DIIDFLAG_INSTALLCOPYINFDRIVERS = 8
DIIDFLAG_BITS = 15
DIIRFLAG_INF_ALREADY_COPIED = 1
DIIRFLAG_FORCE_INF = 2
DIIRFLAG_HW_USING_THE_INF = 4
DIIRFLAG_HOTPATCH = 8
DIIRFLAG_NOBACKUP = 16
DIIRFLAG_PRE_CONFIGURE_INF = 32
DIIRFLAG_INSTALL_AS_SET = 64
DIURFLAG_NO_REMOVE_INF = 1
DIURFLAG_RESERVED = 2
ROLLBACK_FLAG_NO_UI = 1
ROLLBACK_BITS = 1
MAX_KEY_LEN = 100
SZ_KEY_OPTIONDESC = 'OptionDesc'
SZ_KEY_LDIDOEM = 'LdidOEM'
SZ_KEY_SRCDISKFILES = 'SourceDisksFiles'
SZ_KEY_SRCDISKNAMES = 'SourceDisksNames'
SZ_KEY_STRINGS = 'Strings'
SZ_KEY_DESTDIRS = 'DestinationDirs'
SZ_KEY_LAYOUT_FILE = 'LayoutFile'
SZ_KEY_DEFDESTDIR = 'DefaultDestDir'
SZ_KEY_LFN_SECTION = 'VarLDID.LFN'
SZ_KEY_SFN_SECTION = 'VarLDID.SFN'
SZ_KEY_UPDATEINIS = 'UpdateInis'
SZ_KEY_UPDATEINIFIELDS = 'UpdateIniFields'
SZ_KEY_INI2REG = 'Ini2Reg'
SZ_KEY_COPYFILES = 'CopyFiles'
SZ_KEY_RENFILES = 'RenFiles'
SZ_KEY_DELFILES = 'DelFiles'
SZ_KEY_ADDREG = 'AddReg'
SZ_KEY_ADDREGNOCLOBBER = 'AddRegNoClobber'
SZ_KEY_DELREG = 'DelReg'
SZ_KEY_BITREG = 'BitReg'
SZ_KEY_COPYINF = 'CopyINF'
SZ_KEY_LOGCONFIG = 'LogConfig'
SZ_KEY_ADDSERVICE = 'AddService'
SZ_KEY_DELSERVICE = 'DelService'
SZ_KEY_ADDTRIGGER = 'AddTrigger'
SZ_KEY_ADDINTERFACE = 'AddInterface'
SZ_KEY_ADDIME = 'AddIme'
SZ_KEY_DELIME = 'DelIme'
SZ_KEY_REGSVR = 'RegisterDlls'
SZ_KEY_UNREGSVR = 'UnregisterDlls'
SZ_KEY_PROFILEITEMS = 'ProfileItems'
SZ_KEY_MODULES = 'Modules'
SZ_KEY_DEFAULTOPTION = 'DefaultOption'
SZ_KEY_LISTOPTIONS = 'ListOptions'
SZ_KEY_CLEANONLY = 'CleanOnly'
SZ_KEY_UPGRADEONLY = 'UpgradeOnly'
SZ_KEY_EXCLUDEID = 'ExcludeId'
SZ_KEY_ADDPOWERSETTING = 'AddPowerSetting'
SZ_KEY_ADDPROP = 'AddProperty'
SZ_KEY_DELPROP = 'DelProperty'
SZ_KEY_FEATURESCORE = 'FeatureScore'
SZ_KEY_ADDEVENTPROVIDER = 'AddEventProvider'
SZ_KEY_ADDCHANNEL = 'AddChannel'
SZ_KEY_IMPORTCHANNEL = 'ImportChannel'
SZ_KEY_ADDAUTOLOGGER = 'AddAutoLogger'
SZ_KEY_UPDATEAUTOLOGGER = 'UpdateAutoLogger'
SZ_KEY_ADDAUTOLOGGERPROVIDER = 'AddAutoLoggerProvider'
SZ_KEY_ADDFILTER = 'AddFilter'
SZ_KEY_FILTERLEVEL = 'FilterLevel'
SZ_KEY_FILTERPOSITION = 'FilterPosition'
SZ_KEY_PHASE1 = 'Phase1'
SZ_KEY_HARDWARE = 'Hardware'
INFSTR_KEY_CONFIGPRIORITY = 'ConfigPriority'
MAX_PRIORITYSTR_LEN = 16
INFSTR_CFGPRI_HARDWIRED = 'HARDWIRED'
INFSTR_CFGPRI_DESIRED = 'DESIRED'
INFSTR_CFGPRI_NORMAL = 'NORMAL'
INFSTR_CFGPRI_SUBOPTIMAL = 'SUBOPTIMAL'
INFSTR_CFGPRI_DISABLED = 'DISABLED'
INFSTR_CFGPRI_RESTART = 'RESTART'
INFSTR_CFGPRI_REBOOT = 'REBOOT'
INFSTR_CFGPRI_POWEROFF = 'POWEROFF'
INFSTR_CFGPRI_HARDRECONFIG = 'HARDRECONFIG'
INFSTR_CFGPRI_FORCECONFIG = 'FORCECONFIG'
INFSTR_CFGTYPE_BASIC = 'BASIC'
INFSTR_CFGTYPE_FORCED = 'FORCED'
INFSTR_CFGTYPE_OVERRIDE = 'OVERRIDE'
INFSTR_KEY_MEMCONFIG = 'MemConfig'
INFSTR_KEY_MEMLARGECONFIG = 'MemLargeConfig'
INFSTR_KEY_IOCONFIG = 'IOConfig'
INFSTR_KEY_IRQCONFIG = 'IRQConfig'
INFSTR_KEY_DMACONFIG = 'DMAConfig'
INFSTR_KEY_PCCARDCONFIG = 'PcCardConfig'
INFSTR_KEY_MFCARDCONFIG = 'MfCardConfig'
INFSTR_SECT_CLASS_INSTALL = 'ClassInstall'
INFSTR_SECT_CLASS_INSTALL_32 = 'ClassInstall32'
INFSTR_SECT_DEFAULT_INSTALL = 'DefaultInstall'
INFSTR_SECT_DEFAULT_UNINSTALL = 'DefaultUninstall'
INFSTR_SECT_INTERFACE_INSTALL_32 = 'InterfaceInstall32'
INFSTR_SECT_VERSION = 'Version'
INFSTR_KEY_PROVIDER = 'Provider'
INFSTR_KEY_SIGNATURE = 'Signature'
INFSTR_KEY_DRIVERSET = 'DriverSet'
MAX_INF_FLAG = 20
INFSTR_KEY_HARDWARE_CLASS = 'Class'
INFSTR_KEY_HARDWARE_CLASSGUID = 'ClassGUID'
INFSTR_KEY_NOSETUPINF = 'NoSetupInf'
INFSTR_KEY_FROMINET = 'FromINet'
INFSTR_KEY_CATALOGFILE = 'CatalogFile'
INFSTR_KEY_PNPLOCKDOWN = 'PnpLockDown'
INFSTR_KEY_EXTENSIONID = 'ExtensionId'
INFSTR_SECT_MFG = 'Manufacturer'
INFSTR_SECT_TARGETCOMPUTERS = 'TargetComputers'
INFSTR_SECT_EXTENSIONCONTRACTS = 'ExtensionContracts'
INFSTR_KEY_CLASS = 'Class'
INFSTR_KEY_CLASSGUID = 'ClassGUID'
INFSTR_RESTART = 'Restart'
INFSTR_REBOOT = 'Reboot'
INFSTR_KEY_DISPLAYNAME = 'DisplayName'
INFSTR_KEY_SERVICETYPE = 'ServiceType'
INFSTR_KEY_STARTTYPE = 'StartType'
INFSTR_KEY_ERRORCONTROL = 'ErrorControl'
INFSTR_KEY_SERVICEBINARY = 'ServiceBinary'
INFSTR_KEY_LOADORDERGROUP = 'LoadOrderGroup'
INFSTR_KEY_DEPENDENCIES = 'Dependencies'
INFSTR_KEY_REQUIREDPRIVILEGES = 'RequiredPrivileges'
INFSTR_KEY_STARTNAME = 'StartName'
INFSTR_KEY_SECURITY = 'Security'
INFSTR_KEY_DESCRIPTION = 'Description'
INFSTR_KEY_SERVICESIDTYPE = 'ServiceSidType'
INFSTR_KEY_DELAYEDAUTOSTART = 'DelayedAutoStart'
INFSTR_KEY_TRIGGER_TYPE = 'TriggerType'
INFSTR_KEY_ACTION = 'Action'
INFSTR_KEY_SUB_TYPE = 'SubType'
INFSTR_KEY_DATA_ITEM = 'DataItem'
INFSTR_KEY_PROVIDER_NAME = 'ProviderName'
INFSTR_KEY_RESOURCE_FILE = 'ResourceFile'
INFSTR_KEY_MESSAGE_FILE = 'MessageFile'
INFSTR_KEY_PARAMETER_FILE = 'ParameterFile'
INFSTR_KEY_CHANNEL_ACCESS = 'Access'
INFSTR_KEY_CHANNEL_ISOLATION = 'Isolation'
INFSTR_KEY_CHANNEL_ENABLED = 'Enabled'
INFSTR_KEY_CHANNEL_VALUE = 'Value'
INFSTR_KEY_LOGGING_MAXSIZE = 'LoggingMaxSize'
INFSTR_KEY_LOGGING_RETENTION = 'LoggingRetention'
INFSTR_KEY_LOGGING_AUTOBACKUP = 'LoggingAutoBackup'
INFSTR_KEY_START = 'Start'
INFSTR_KEY_BUFFER_SIZE = 'BufferSize'
INFSTR_KEY_CLOCK_TYPE = 'ClockType'
INFSTR_KEY_DISABLE_REALTIME_PERSISTENCE = 'DisableRealtimePersistence'
INFSTR_KEY_FILE_NAME = 'FileName'
INFSTR_KEY_FILE_MAX = 'FileMax'
INFSTR_KEY_FLUSH_TIMER = 'FlushTimer'
INFSTR_KEY_LOG_FILE_MODE = 'LogFileMode'
INFSTR_KEY_MAX_FILE_SIZE = 'MaxFileSize'
INFSTR_KEY_MAXIMUM_BUFFERS = 'MaximumBuffers'
INFSTR_KEY_MINIMUM_BUFFERS = 'MinimumBuffers'
INFSTR_KEY_ENABLED = 'Enabled'
INFSTR_KEY_ENABLE_FLAGS = 'EnableFlags'
INFSTR_KEY_ENABLE_LEVEL = 'EnableLevel'
INFSTR_KEY_ENABLE_PROPERTY = 'EnableProperty'
INFSTR_KEY_MATCH_ANY_KEYWORD = 'MatchAnyKeyword'
INFSTR_KEY_MATCH_ALL_KEYWORD = 'MatchAllKeyword'
INFSTR_SECT_DETMODULES = 'Det.Modules'
INFSTR_SECT_DETCLASSINFO = 'Det.ClassInfo'
INFSTR_SECT_MANUALDEV = 'Det.ManualDev'
INFSTR_SECT_AVOIDCFGSYSDEV = 'Det.AvoidCfgSysDev'
INFSTR_SECT_REGCFGSYSDEV = 'Det.RegCfgSysDev'
INFSTR_SECT_DEVINFS = 'Det.DevINFs'
INFSTR_SECT_AVOIDINIDEV = 'Det.AvoidIniDev'
INFSTR_SECT_AVOIDENVDEV = 'Det.AvoidEnvDev'
INFSTR_SECT_REGINIDEV = 'Det.RegIniDev'
INFSTR_SECT_REGENVDEV = 'Det.RegEnvDev'
INFSTR_SECT_HPOMNIBOOK = 'Det.HPOmnibook'
INFSTR_SECT_FORCEHWVERIFY = 'Det.ForceHWVerify'
INFSTR_SECT_DETOPTIONS = 'Det.Options'
INFSTR_SECT_BADPNPBIOS = 'BadPnpBios'
INFSTR_SECT_GOODACPIBIOS = 'GoodACPIBios'
INFSTR_SECT_BADACPIBIOS = 'BadACPIBios'
INFSTR_SECT_BADROUTINGTABLEBIOS = 'BadPCIIRQRoutingTableBios'
INFSTR_SECT_BADPMCALLBIOS = 'BadProtectedModeCallBios'
INFSTR_SECT_BADRMCALLBIOS = 'BadRealModeCallBios'
INFSTR_SECT_MACHINEIDBIOS = 'MachineIDBios'
INFSTR_SECT_BADDISKBIOS = 'BadDiskBios'
INFSTR_SECT_BADDSBIOS = 'BadDSBios'
INFSTR_KEY_DETPARAMS = 'Params'
INFSTR_KEY_SKIPLIST = 'SkipList'
INFSTR_KEY_DETECTLIST = 'DetectList'
INFSTR_KEY_EXCLUDERES = 'ExcludeRes'
INFSTR_SUBKEY_LOGCONFIG = 'LogConfig'
INFSTR_SUBKEY_DET = 'Det'
INFSTR_SUBKEY_FACTDEF = 'FactDef'
INFSTR_SUBKEY_POSSIBLEDUPS = 'PosDup'
INFSTR_SUBKEY_NORESOURCEDUPS = 'NoResDup'
INFSTR_SUBKEY_HW = 'Hw'
INFSTR_SUBKEY_CTL = 'CTL'
INFSTR_SUBKEY_SERVICES = 'Services'
INFSTR_SUBKEY_SOFTWARE = 'Software'
INFSTR_SUBKEY_INTERFACES = 'Interfaces'
INFSTR_SUBKEY_COINSTALLERS = 'CoInstallers'
INFSTR_SUBKEY_LOGCONFIGOVERRIDE = 'LogConfigOverride'
INFSTR_SUBKEY_WMI = 'WMI'
INFSTR_SUBKEY_EVENTS = 'Events'
INFSTR_SUBKEY_FILTERS = 'Filters'
INFSTR_CONTROLFLAGS_SECTION = 'ControlFlags'
INFSTR_KEY_COPYFILESONLY = 'CopyFilesOnly'
INFSTR_KEY_EXCLUDEFROMSELECT = 'ExcludeFromSelect'
INFSTR_KEY_ALWAYSEXCLUDEFROMSELECT = 'AlwaysExcludeFromSelect'
INFSTR_KEY_INTERACTIVEINSTALL = 'InteractiveInstall'
INFSTR_KEY_REQUESTADDITIONALSOFTWARE = 'RequestAdditionalSoftware'
INFSTR_PLATFORM_WIN = 'Win'
INFSTR_PLATFORM_NT = 'NT'
INFSTR_PLATFORM_NTX86 = 'NTx86'
INFSTR_PLATFORM_NTMIPS = 'NTMIPS'
INFSTR_PLATFORM_NTALPHA = 'NTAlpha'
INFSTR_PLATFORM_NTPPC = 'NTPPC'
INFSTR_PLATFORM_NTIA64 = 'NTIA64'
INFSTR_PLATFORM_NTAXP64 = 'NTAXP64'
INFSTR_PLATFORM_NTAMD64 = 'NTAMD64'
INFSTR_PLATFORM_NTARM = 'NTARM'
INFSTR_PLATFORM_NTARM64 = 'NTARM64'
MAX_INFSTR_STRKEY_LEN = 32
INFSTR_STRKEY_DRVDESC = 'DriverDesc'
INFSTR_DRIVERSELECT_SECTION = 'DriverSelect'
INFSTR_DRIVERSELECT_FUNCTIONS = 'DriverSelectFunctions'
INFSTR_DRIVERVERSION_SECTION = 'DriverVer'
INFSTR_SOFTWAREVERSION_SECTION = 'SoftwareVersion'
INFSTR_SECT_CFGSYS = 'ConfigSysDrivers'
INFSTR_SECT_AUTOEXECBAT = 'AutoexecBatDrivers'
INFSTR_SECT_SYSINI = 'SystemIniDrivers'
INFSTR_SECT_SYSINIDRV = 'SystemIniDriversLine'
INFSTR_SECT_WININIRUN = 'WinIniRunLine'
INFSTR_KEY_PATH = 'Path'
INFSTR_KEY_NAME = 'Name'
INFSTR_KEY_IO = 'IO'
INFSTR_KEY_MEM = 'Mem'
INFSTR_KEY_IRQ = 'IRQ'
INFSTR_KEY_DMA = 'DMA'
INFSTR_BUS_ISA = 'BUS_ISA'
INFSTR_BUS_EISA = 'BUS_EISA'
INFSTR_BUS_MCA = 'BUS_MCA'
INFSTR_BUS_ALL = 'BUS_ALL'
INFSTR_RISK_NONE = 'RISK_NONE'
INFSTR_RISK_VERYLOW = 'RISK_VERYLOW'
INFSTR_RISK_BIOSROMRD = 'RISK_BIOSROMRD'
INFSTR_RISK_QUERYDRV = 'RISK_QUERYDRV'
INFSTR_RISK_SWINT = 'RISK_SWINT'
INFSTR_RISK_LOW = 'RISK_LOW'
INFSTR_RISK_DELICATE = 'RISK_DELICATE'
INFSTR_RISK_MEMRD = 'RISK_MEMRD'
INFSTR_RISK_IORD = 'RISK_IORD'
INFSTR_RISK_MEMWR = 'RISK_MEMWR'
INFSTR_RISK_IOWR = 'RISK_IOWR'
INFSTR_RISK_UNRELIABLE = 'RISK_UNRELIABLE'
INFSTR_RISK_VERYHIGH = 'RISK_VERYHIGH'
INFSTR_CLASS_SAFEEXCL = 'SAFE_EXCL'
INFSTR_SECT_DISPLAY_CLEANUP = 'DisplayCleanup'
def _define_GUID_HWPROFILE_QUERY_CHANGE():
    return Guid('cb3a4001-46f0-11d0-b0-8f-00-60-97-13-05-3f')
def _define_GUID_HWPROFILE_CHANGE_CANCELLED():
    return Guid('cb3a4002-46f0-11d0-b0-8f-00-60-97-13-05-3f')
def _define_GUID_HWPROFILE_CHANGE_COMPLETE():
    return Guid('cb3a4003-46f0-11d0-b0-8f-00-60-97-13-05-3f')
def _define_GUID_DEVICE_INTERFACE_ARRIVAL():
    return Guid('cb3a4004-46f0-11d0-b0-8f-00-60-97-13-05-3f')
def _define_GUID_DEVICE_INTERFACE_REMOVAL():
    return Guid('cb3a4005-46f0-11d0-b0-8f-00-60-97-13-05-3f')
def _define_GUID_TARGET_DEVICE_QUERY_REMOVE():
    return Guid('cb3a4006-46f0-11d0-b0-8f-00-60-97-13-05-3f')
def _define_GUID_TARGET_DEVICE_REMOVE_CANCELLED():
    return Guid('cb3a4007-46f0-11d0-b0-8f-00-60-97-13-05-3f')
def _define_GUID_TARGET_DEVICE_REMOVE_COMPLETE():
    return Guid('cb3a4008-46f0-11d0-b0-8f-00-60-97-13-05-3f')
def _define_GUID_PNP_CUSTOM_NOTIFICATION():
    return Guid('aca73f8e-8d23-11d1-ac-7d-00-00-f8-75-71-d0')
def _define_GUID_PNP_POWER_NOTIFICATION():
    return Guid('c2cf0660-eb7a-11d1-bd-7f-00-00-f8-75-71-d0')
def _define_GUID_PNP_POWER_SETTING_CHANGE():
    return Guid('29c69b3e-c79a-43bf-bb-de-a9-32-fa-1b-ea-7e')
def _define_GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED():
    return Guid('fcf528f6-a82f-47b1-ad-3a-80-50-59-4c-ad-28')
def _define_GUID_KERNEL_SOFT_RESTART_PREPARE():
    return Guid('de373def-a85c-4f76-8c-bf-f9-6b-ea-8b-d1-0f')
def _define_GUID_KERNEL_SOFT_RESTART_CANCEL():
    return Guid('31d737e7-8c0b-468a-95-6e-9f-43-3e-c3-58-fb')
def _define_GUID_RECOVERY_PCI_PREPARE_SHUTDOWN():
    return Guid('90d889de-8704-44cf-81-15-ed-85-28-d2-b2-da')
def _define_GUID_RECOVERY_NVMED_PREPARE_SHUTDOWN():
    return Guid('4b9770ea-bde7-400b-a9-b9-4f-68-4f-54-cc-2a')
def _define_GUID_KERNEL_SOFT_RESTART_FINALIZE():
    return Guid('20e91abd-350a-4d4f-85-77-99-c8-15-07-47-3a')
def _define_GUID_BUS_INTERFACE_STANDARD():
    return Guid('496b8280-6f25-11d0-be-af-08-00-2b-e2-09-2f')
def _define_GUID_PCI_BUS_INTERFACE_STANDARD():
    return Guid('496b8281-6f25-11d0-be-af-08-00-2b-e2-09-2f')
def _define_GUID_PCI_BUS_INTERFACE_STANDARD2():
    return Guid('de94e966-fdff-4c9c-99-98-67-47-b1-50-e7-4c')
def _define_GUID_ARBITER_INTERFACE_STANDARD():
    return Guid('e644f185-8c0e-11d0-be-cf-08-00-2b-e2-09-2f')
def _define_GUID_TRANSLATOR_INTERFACE_STANDARD():
    return Guid('6c154a92-aacf-11d0-8d-2a-00-a0-c9-06-b2-44')
def _define_GUID_ACPI_INTERFACE_STANDARD():
    return Guid('b091a08a-ba97-11d0-bd-14-00-aa-00-b7-b3-2a')
def _define_GUID_INT_ROUTE_INTERFACE_STANDARD():
    return Guid('70941bf4-0073-11d1-a0-9e-00-c0-4f-c3-40-b1')
def _define_GUID_PCMCIA_BUS_INTERFACE_STANDARD():
    return Guid('76173af0-c504-11d1-94-7f-00-c0-4f-b9-60-ee')
def _define_GUID_ACPI_REGS_INTERFACE_STANDARD():
    return Guid('06141966-7245-6369-46-2e-4e-65-6c-73-6f-6e')
def _define_GUID_LEGACY_DEVICE_DETECTION_STANDARD():
    return Guid('50feb0de-596a-11d2-a5-b8-00-00-f8-1a-46-19')
def _define_GUID_PCI_DEVICE_PRESENT_INTERFACE():
    return Guid('d1b82c26-bf49-45ef-b2-16-71-cb-d7-88-9b-57')
def _define_GUID_MF_ENUMERATION_INTERFACE():
    return Guid('aeb895f0-5586-11d1-8d-84-00-a0-c9-06-b2-44')
def _define_GUID_REENUMERATE_SELF_INTERFACE_STANDARD():
    return Guid('2aeb0243-6a6e-486b-82-fc-d8-15-f6-b9-70-06')
def _define_GUID_AGP_TARGET_BUS_INTERFACE_STANDARD():
    return Guid('b15cfce8-06d1-4d37-9d-4c-be-dd-e0-c2-a6-ff')
def _define_GUID_ACPI_CMOS_INTERFACE_STANDARD():
    return Guid('3a8d0384-6505-40ca-bc-39-56-c1-5f-8c-5f-ed')
def _define_GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD():
    return Guid('f14f609b-cbbd-4957-a6-74-bc-00-21-3f-1c-97')
def _define_GUID_ACPI_INTERFACE_STANDARD2():
    return Guid('e8695f63-1831-4870-a8-cf-9c-2f-03-f9-dc-b5')
def _define_GUID_PNP_LOCATION_INTERFACE():
    return Guid('70211b0e-0afb-47db-af-c1-41-0b-f8-42-49-7a')
def _define_GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE():
    return Guid('146cd41c-dae3-4437-8a-ff-2a-f3-f0-38-09-9b')
def _define_GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE():
    return Guid('83a7734a-84c7-4161-9a-98-60-00-ed-0c-4a-33')
def _define_GUID_MSIX_TABLE_CONFIG_INTERFACE():
    return Guid('1a6a460b-194f-455d-b3-4b-b8-4c-5b-05-71-2b')
def _define_GUID_D3COLD_SUPPORT_INTERFACE():
    return Guid('b38290e5-3cd0-4f9d-99-37-f5-fe-2b-44-d4-7a')
def _define_GUID_PROCESSOR_PCC_INTERFACE_STANDARD():
    return Guid('37b17e9a-c21c-4296-97-2d-11-c4-b3-2b-28-f0')
def _define_GUID_PCI_VIRTUALIZATION_INTERFACE():
    return Guid('64897b47-3a4a-4d75-bc-74-89-dd-6c-07-82-93')
def _define_GUID_PCC_INTERFACE_STANDARD():
    return Guid('3ee8ba63-0f59-4a24-8a-45-35-80-8b-dd-12-49')
def _define_GUID_PCC_INTERFACE_INTERNAL():
    return Guid('7cce62ce-c189-4814-a6-a7-12-11-20-89-e9-38')
def _define_GUID_THERMAL_COOLING_INTERFACE():
    return Guid('ecbe47a8-c498-4bb9-bd-70-e8-67-e0-94-0d-22')
def _define_GUID_DMA_CACHE_COHERENCY_INTERFACE():
    return Guid('b520f7fa-8a5a-4e40-a3-f6-6b-e1-e1-62-d9-35')
def _define_GUID_DEVICE_RESET_INTERFACE_STANDARD():
    return Guid('649fdf26-3bc0-4813-ad-24-7e-0c-1e-da-3f-a3')
def _define_GUID_IOMMU_BUS_INTERFACE():
    return Guid('1efee0b2-d278-4ae4-bd-dc-1b-34-dd-64-80-43')
def _define_GUID_PCI_SECURITY_INTERFACE():
    return Guid('6e7f1451-199e-4acc-ba-2d-76-2b-4e-df-46-74')
def _define_GUID_SCM_BUS_INTERFACE():
    return Guid('25944783-ce79-4232-81-5e-4a-30-01-4e-8e-b4')
def _define_GUID_SECURE_DRIVER_INTERFACE():
    return Guid('370f67e1-4ff5-4a94-9a-35-06-c5-d9-cc-30-e2')
def _define_GUID_SDEV_IDENTIFIER_INTERFACE():
    return Guid('49d67af8-916c-4ee8-9d-f1-88-9f-17-d2-1e-91')
def _define_GUID_SCM_BUS_NVD_INTERFACE():
    return Guid('8de064ff-b630-42e4-88-ea-6f-24-c8-64-11-75')
def _define_GUID_SCM_BUS_LD_INTERFACE():
    return Guid('9b89307d-d76b-4f48-b1-86-54-04-1a-e9-2e-8d')
def _define_GUID_SCM_PHYSICAL_NVDIMM_INTERFACE():
    return Guid('0079c21b-917e-405e-a9-ce-07-32-b5-bb-ce-bd')
def _define_GUID_PNP_EXTENDED_ADDRESS_INTERFACE():
    return Guid('b8e992ec-a797-4dc4-88-46-84-d0-41-70-74-46')
def _define_GUID_D3COLD_AUX_POWER_AND_TIMING_INTERFACE():
    return Guid('0044d8aa-f664-4588-9f-fc-2a-fe-af-59-50-b9')
def _define_GUID_PCI_FPGA_CONTROL_INTERFACE():
    return Guid('2df3f7a8-b9b3-4063-92-15-b5-d1-4a-0b-26-6e')
def _define_GUID_PCI_PTM_CONTROL_INTERFACE():
    return Guid('348a5ebb-ba24-44b7-99-16-28-56-87-73-51-17')
def _define_GUID_BUS_RESOURCE_UPDATE_INTERFACE():
    return Guid('27d0102d-bfb2-4164-81-dd-db-b8-2f-96-8b-48')
def _define_GUID_NPEM_CONTROL_INTERFACE():
    return Guid('4d95573d-b774-488a-b1-20-4f-28-4a-9e-ff-51')
def _define_GUID_PCI_ATS_INTERFACE():
    return Guid('010a7fe8-96f5-4943-be-df-95-e6-51-b9-34-12')
def _define_GUID_BUS_TYPE_INTERNAL():
    return Guid('1530ea73-086b-11d1-a0-9f-00-c0-4f-c3-40-b1')
def _define_GUID_BUS_TYPE_PCMCIA():
    return Guid('09343630-af9f-11d0-92-e9-00-00-f8-1e-1b-30')
def _define_GUID_BUS_TYPE_PCI():
    return Guid('c8ebdfb0-b510-11d0-80-e5-00-a0-c9-25-42-e3')
def _define_GUID_BUS_TYPE_ISAPNP():
    return Guid('e676f854-d87d-11d0-92-b2-00-a0-c9-05-5f-c5')
def _define_GUID_BUS_TYPE_EISA():
    return Guid('ddc35509-f3fc-11d0-a5-37-00-00-f8-75-3e-d1')
def _define_GUID_BUS_TYPE_MCA():
    return Guid('1c75997a-dc33-11d0-92-b2-00-a0-c9-05-5f-c5')
def _define_GUID_BUS_TYPE_SERENUM():
    return Guid('77114a87-8944-11d1-bd-90-00-a0-c9-06-be-2d')
def _define_GUID_BUS_TYPE_USB():
    return Guid('9d7debbc-c85d-11d1-9e-b4-00-60-08-c3-a1-9a')
def _define_GUID_BUS_TYPE_LPTENUM():
    return Guid('c4ca1000-2ddc-11d5-a1-7a-00-c0-4f-60-52-4d')
def _define_GUID_BUS_TYPE_USBPRINT():
    return Guid('441ee000-4342-11d5-a1-84-00-c0-4f-60-52-4d')
def _define_GUID_BUS_TYPE_DOT4PRT():
    return Guid('441ee001-4342-11d5-a1-84-00-c0-4f-60-52-4d')
def _define_GUID_BUS_TYPE_1394():
    return Guid('f74e73eb-9ac5-45eb-be-4d-77-2c-c7-1d-df-b3')
def _define_GUID_BUS_TYPE_HID():
    return Guid('eeaf37d0-1963-47c4-aa-48-72-47-6d-b7-cf-49')
def _define_GUID_BUS_TYPE_AVC():
    return Guid('c06ff265-ae09-48f0-81-2c-16-75-3d-7c-ba-83')
def _define_GUID_BUS_TYPE_IRDA():
    return Guid('7ae17dc1-c944-44d6-88-1f-4c-2e-61-05-3b-c1')
def _define_GUID_BUS_TYPE_SD():
    return Guid('e700cc04-4036-4e89-95-79-89-eb-f4-5f-00-cd')
def _define_GUID_BUS_TYPE_ACPI():
    return Guid('d7b46895-001a-4942-89-1f-a7-d4-66-10-a8-43')
def _define_GUID_BUS_TYPE_SW_DEVICE():
    return Guid('06d10322-7de0-4cef-8e-25-19-7d-0e-74-42-e2')
def _define_GUID_BUS_TYPE_SCM():
    return Guid('375a5912-804c-45aa-bd-c2-fd-d2-5a-1d-95-12')
def _define_GUID_POWER_DEVICE_ENABLE():
    return Guid('827c0a6f-feb0-11d0-bd-26-00-aa-00-b7-b3-2a')
def _define_GUID_POWER_DEVICE_TIMEOUTS():
    return Guid('a45da735-feb0-11d0-bd-26-00-aa-00-b7-b3-2a')
def _define_GUID_POWER_DEVICE_WAKE_ENABLE():
    return Guid('a9546a82-feb0-11d0-bd-26-00-aa-00-b7-b3-2a')
def _define_GUID_WUDF_DEVICE_HOST_PROBLEM():
    return Guid('c43d25bd-9346-40ee-a2-d2-d7-0c-15-f8-b7-5b')
def _define_GUID_PARTITION_UNIT_INTERFACE_STANDARD():
    return Guid('52363f5b-d891-429b-81-95-ae-c5-fe-f6-85-3c')
def _define_GUID_QUERY_CRASHDUMP_FUNCTIONS():
    return Guid('9cc6b8ff-32e2-4834-b1-de-b3-2e-f8-88-0a-4b')
def _define_SetupGetInfInformationA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_INF_INFORMATION_head),UInt32,POINTER(UInt32))(('SetupGetInfInformationA', windll['SETUPAPI.dll']), ((1, 'InfSpec'),(1, 'SearchControl'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetInfInformationW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_INF_INFORMATION_head),UInt32,POINTER(UInt32))(('SetupGetInfInformationW', windll['SETUPAPI.dll']), ((1, 'InfSpec'),(1, 'SearchControl'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueryInfFileInformationA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_INF_INFORMATION_head),UInt32,win32more.Foundation.PSTR,UInt32,POINTER(UInt32))(('SetupQueryInfFileInformationA', windll['SETUPAPI.dll']), ((1, 'InfInformation'),(1, 'InfIndex'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueryInfFileInformationW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_INF_INFORMATION_head),UInt32,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(('SetupQueryInfFileInformationW', windll['SETUPAPI.dll']), ((1, 'InfInformation'),(1, 'InfIndex'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueryInfOriginalFileInformationA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_INF_INFORMATION_head),UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ORIGINAL_FILE_INFO_A_head))(('SetupQueryInfOriginalFileInformationA', windll['SETUPAPI.dll']), ((1, 'InfInformation'),(1, 'InfIndex'),(1, 'AlternatePlatformInfo'),(1, 'OriginalFileInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueryInfOriginalFileInformationW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_INF_INFORMATION_head),UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ORIGINAL_FILE_INFO_W_head))(('SetupQueryInfOriginalFileInformationW', windll['SETUPAPI.dll']), ((1, 'InfInformation'),(1, 'InfIndex'),(1, 'AlternatePlatformInfo'),(1, 'OriginalFileInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueryInfVersionInformationA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_INF_INFORMATION_head),UInt32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,POINTER(UInt32))(('SetupQueryInfVersionInformationA', windll['SETUPAPI.dll']), ((1, 'InfInformation'),(1, 'InfIndex'),(1, 'Key'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueryInfVersionInformationW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_INF_INFORMATION_head),UInt32,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(('SetupQueryInfVersionInformationW', windll['SETUPAPI.dll']), ((1, 'InfInformation'),(1, 'InfIndex'),(1, 'Key'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetInfDriverStoreLocationA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head),win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,POINTER(UInt32))(('SetupGetInfDriverStoreLocationA', windll['SETUPAPI.dll']), ((1, 'FileName'),(1, 'AlternatePlatformInfo'),(1, 'LocaleName'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetInfDriverStoreLocationW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head),win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(('SetupGetInfDriverStoreLocationW', windll['SETUPAPI.dll']), ((1, 'FileName'),(1, 'AlternatePlatformInfo'),(1, 'LocaleName'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetInfPublishedNameA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,POINTER(UInt32))(('SetupGetInfPublishedNameA', windll['SETUPAPI.dll']), ((1, 'DriverStoreLocation'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetInfPublishedNameW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(('SetupGetInfPublishedNameW', windll['SETUPAPI.dll']), ((1, 'DriverStoreLocation'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetInfFileListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,UInt32,win32more.Foundation.PSTR,UInt32,POINTER(UInt32))(('SetupGetInfFileListA', windll['SETUPAPI.dll']), ((1, 'DirectoryPath'),(1, 'InfStyle'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetInfFileListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,UInt32,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(('SetupGetInfFileListW', windll['SETUPAPI.dll']), ((1, 'DirectoryPath'),(1, 'InfStyle'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupOpenInfFileW():
    try:
        return WINFUNCTYPE(c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(('SetupOpenInfFileW', windll['SETUPAPI.dll']), ((1, 'FileName'),(1, 'InfClass'),(1, 'InfStyle'),(1, 'ErrorLine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupOpenInfFileA():
    try:
        return WINFUNCTYPE(c_void_p,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,POINTER(UInt32))(('SetupOpenInfFileA', windll['SETUPAPI.dll']), ((1, 'FileName'),(1, 'InfClass'),(1, 'InfStyle'),(1, 'ErrorLine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupOpenMasterInf():
    try:
        return WINFUNCTYPE(c_void_p,)(('SetupOpenMasterInf', windll['SETUPAPI.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupOpenAppendInfFileW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,c_void_p,POINTER(UInt32))(('SetupOpenAppendInfFileW', windll['SETUPAPI.dll']), ((1, 'FileName'),(1, 'InfHandle'),(1, 'ErrorLine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupOpenAppendInfFileA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,c_void_p,POINTER(UInt32))(('SetupOpenAppendInfFileA', windll['SETUPAPI.dll']), ((1, 'FileName'),(1, 'InfHandle'),(1, 'ErrorLine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupCloseInfFile():
    try:
        return WINFUNCTYPE(Void,c_void_p)(('SetupCloseInfFile', windll['SETUPAPI.dll']), ((1, 'InfHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupFindFirstLineA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head))(('SetupFindFirstLineA', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'Section'),(1, 'Key'),(1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupFindFirstLineW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head))(('SetupFindFirstLineW', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'Section'),(1, 'Key'),(1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupFindNextLine():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head))(('SetupFindNextLine', windll['SETUPAPI.dll']), ((1, 'ContextIn'),(1, 'ContextOut'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupFindNextMatchLineA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),win32more.Foundation.PSTR,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head))(('SetupFindNextMatchLineA', windll['SETUPAPI.dll']), ((1, 'ContextIn'),(1, 'Key'),(1, 'ContextOut'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupFindNextMatchLineW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),win32more.Foundation.PWSTR,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head))(('SetupFindNextMatchLineW', windll['SETUPAPI.dll']), ((1, 'ContextIn'),(1, 'Key'),(1, 'ContextOut'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetLineByIndexA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head))(('SetupGetLineByIndexA', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'Section'),(1, 'Index'),(1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetLineByIndexW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head))(('SetupGetLineByIndexW', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'Section'),(1, 'Index'),(1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetLineCountA():
    try:
        return WINFUNCTYPE(Int32,c_void_p,win32more.Foundation.PSTR)(('SetupGetLineCountA', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'Section'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetLineCountW():
    try:
        return WINFUNCTYPE(Int32,c_void_p,win32more.Foundation.PWSTR)(('SetupGetLineCountW', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'Section'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetLineTextA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),c_void_p,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,POINTER(UInt32))(('SetupGetLineTextA', windll['SETUPAPI.dll']), ((1, 'Context'),(1, 'InfHandle'),(1, 'Section'),(1, 'Key'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetLineTextW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(('SetupGetLineTextW', windll['SETUPAPI.dll']), ((1, 'Context'),(1, 'InfHandle'),(1, 'Section'),(1, 'Key'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetFieldCount():
    try:
        return WINFUNCTYPE(UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head))(('SetupGetFieldCount', windll['SETUPAPI.dll']), ((1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetStringFieldA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),UInt32,win32more.Foundation.PSTR,UInt32,POINTER(UInt32))(('SetupGetStringFieldA', windll['SETUPAPI.dll']), ((1, 'Context'),(1, 'FieldIndex'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetStringFieldW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),UInt32,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(('SetupGetStringFieldW', windll['SETUPAPI.dll']), ((1, 'Context'),(1, 'FieldIndex'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetIntField():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),UInt32,POINTER(Int32))(('SetupGetIntField', windll['SETUPAPI.dll']), ((1, 'Context'),(1, 'FieldIndex'),(1, 'IntegerValue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetMultiSzFieldA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),UInt32,win32more.Foundation.PSTR,UInt32,POINTER(UInt32))(('SetupGetMultiSzFieldA', windll['SETUPAPI.dll']), ((1, 'Context'),(1, 'FieldIndex'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetMultiSzFieldW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),UInt32,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(('SetupGetMultiSzFieldW', windll['SETUPAPI.dll']), ((1, 'Context'),(1, 'FieldIndex'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetBinaryField():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),UInt32,c_char_p_no,UInt32,POINTER(UInt32))(('SetupGetBinaryField', windll['SETUPAPI.dll']), ((1, 'Context'),(1, 'FieldIndex'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetFileCompressionInfoA():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.PSTR,POINTER(win32more.Foundation.PSTR),POINTER(UInt32),POINTER(UInt32),POINTER(UInt32))(('SetupGetFileCompressionInfoA', windll['SETUPAPI.dll']), ((1, 'SourceFileName'),(1, 'ActualSourceFileName'),(1, 'SourceFileSize'),(1, 'TargetFileSize'),(1, 'CompressionType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetFileCompressionInfoW():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.PWSTR,POINTER(win32more.Foundation.PWSTR),POINTER(UInt32),POINTER(UInt32),POINTER(UInt32))(('SetupGetFileCompressionInfoW', windll['SETUPAPI.dll']), ((1, 'SourceFileName'),(1, 'ActualSourceFileName'),(1, 'SourceFileSize'),(1, 'TargetFileSize'),(1, 'CompressionType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetFileCompressionInfoExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,POINTER(UInt32),POINTER(UInt32),POINTER(UInt32),POINTER(UInt32))(('SetupGetFileCompressionInfoExA', windll['SETUPAPI.dll']), ((1, 'SourceFileName'),(1, 'ActualSourceFileNameBuffer'),(1, 'ActualSourceFileNameBufferLen'),(1, 'RequiredBufferLen'),(1, 'SourceFileSize'),(1, 'TargetFileSize'),(1, 'CompressionType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetFileCompressionInfoExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32),POINTER(UInt32),POINTER(UInt32),POINTER(UInt32))(('SetupGetFileCompressionInfoExW', windll['SETUPAPI.dll']), ((1, 'SourceFileName'),(1, 'ActualSourceFileNameBuffer'),(1, 'ActualSourceFileNameBufferLen'),(1, 'RequiredBufferLen'),(1, 'SourceFileSize'),(1, 'TargetFileSize'),(1, 'CompressionType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDecompressOrCopyFileA():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(UInt32))(('SetupDecompressOrCopyFileA', windll['SETUPAPI.dll']), ((1, 'SourceFileName'),(1, 'TargetFileName'),(1, 'CompressionType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDecompressOrCopyFileW():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,POINTER(UInt32))(('SetupDecompressOrCopyFileW', windll['SETUPAPI.dll']), ((1, 'SourceFileName'),(1, 'TargetFileName'),(1, 'CompressionType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetSourceFileLocationA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),win32more.Foundation.PSTR,POINTER(UInt32),win32more.Foundation.PSTR,UInt32,POINTER(UInt32))(('SetupGetSourceFileLocationA', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'InfContext'),(1, 'FileName'),(1, 'SourceId'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetSourceFileLocationW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),win32more.Foundation.PWSTR,POINTER(UInt32),win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(('SetupGetSourceFileLocationW', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'InfContext'),(1, 'FileName'),(1, 'SourceId'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetSourceFileSizeA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(UInt32),UInt32)(('SetupGetSourceFileSizeA', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'InfContext'),(1, 'FileName'),(1, 'Section'),(1, 'FileSize'),(1, 'RoundingFactor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetSourceFileSizeW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,POINTER(UInt32),UInt32)(('SetupGetSourceFileSizeW', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'InfContext'),(1, 'FileName'),(1, 'Section'),(1, 'FileSize'),(1, 'RoundingFactor'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetTargetPathA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,POINTER(UInt32))(('SetupGetTargetPathA', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'InfContext'),(1, 'Section'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetTargetPathW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(('SetupGetTargetPathW', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'InfContext'),(1, 'Section'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetSourceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(win32more.Foundation.PSTR),UInt32)(('SetupSetSourceListA', windll['SETUPAPI.dll']), ((1, 'Flags'),(1, 'SourceList'),(1, 'SourceCount'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetSourceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(win32more.Foundation.PWSTR),UInt32)(('SetupSetSourceListW', windll['SETUPAPI.dll']), ((1, 'Flags'),(1, 'SourceList'),(1, 'SourceCount'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupCancelTemporarySourceList():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,)(('SetupCancelTemporarySourceList', windll['SETUPAPI.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupAddToSourceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PSTR)(('SetupAddToSourceListA', windll['SETUPAPI.dll']), ((1, 'Flags'),(1, 'Source'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupAddToSourceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PWSTR)(('SetupAddToSourceListW', windll['SETUPAPI.dll']), ((1, 'Flags'),(1, 'Source'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupRemoveFromSourceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PSTR)(('SetupRemoveFromSourceListA', windll['SETUPAPI.dll']), ((1, 'Flags'),(1, 'Source'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupRemoveFromSourceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PWSTR)(('SetupRemoveFromSourceListW', windll['SETUPAPI.dll']), ((1, 'Flags'),(1, 'Source'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQuerySourceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(POINTER(win32more.Foundation.PSTR)),POINTER(UInt32))(('SetupQuerySourceListA', windll['SETUPAPI.dll']), ((1, 'Flags'),(1, 'List'),(1, 'Count'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQuerySourceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(POINTER(win32more.Foundation.PWSTR)),POINTER(UInt32))(('SetupQuerySourceListW', windll['SETUPAPI.dll']), ((1, 'Flags'),(1, 'List'),(1, 'Count'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupFreeSourceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(POINTER(win32more.Foundation.PSTR)),UInt32)(('SetupFreeSourceListA', windll['SETUPAPI.dll']), ((1, 'List'),(1, 'Count'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupFreeSourceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(POINTER(win32more.Foundation.PWSTR)),UInt32)(('SetupFreeSourceListW', windll['SETUPAPI.dll']), ((1, 'List'),(1, 'Count'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupPromptForDiskA():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,win32more.Foundation.PSTR,UInt32,POINTER(UInt32))(('SetupPromptForDiskA', windll['SETUPAPI.dll']), ((1, 'hwndParent'),(1, 'DialogTitle'),(1, 'DiskName'),(1, 'PathToSource'),(1, 'FileSought'),(1, 'TagFile'),(1, 'DiskPromptStyle'),(1, 'PathBuffer'),(1, 'PathBufferSize'),(1, 'PathRequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupPromptForDiskW():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(('SetupPromptForDiskW', windll['SETUPAPI.dll']), ((1, 'hwndParent'),(1, 'DialogTitle'),(1, 'DiskName'),(1, 'PathToSource'),(1, 'FileSought'),(1, 'TagFile'),(1, 'DiskPromptStyle'),(1, 'PathBuffer'),(1, 'PathBufferSize'),(1, 'PathRequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupCopyErrorA():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,UInt32,win32more.Foundation.PSTR,UInt32,POINTER(UInt32))(('SetupCopyErrorA', windll['SETUPAPI.dll']), ((1, 'hwndParent'),(1, 'DialogTitle'),(1, 'DiskName'),(1, 'PathToSource'),(1, 'SourceFile'),(1, 'TargetPathFile'),(1, 'Win32ErrorCode'),(1, 'Style'),(1, 'PathBuffer'),(1, 'PathBufferSize'),(1, 'PathRequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupCopyErrorW():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,UInt32,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(('SetupCopyErrorW', windll['SETUPAPI.dll']), ((1, 'hwndParent'),(1, 'DialogTitle'),(1, 'DiskName'),(1, 'PathToSource'),(1, 'SourceFile'),(1, 'TargetPathFile'),(1, 'Win32ErrorCode'),(1, 'Style'),(1, 'PathBuffer'),(1, 'PathBufferSize'),(1, 'PathRequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupRenameErrorA():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,UInt32)(('SetupRenameErrorA', windll['SETUPAPI.dll']), ((1, 'hwndParent'),(1, 'DialogTitle'),(1, 'SourceFile'),(1, 'TargetFile'),(1, 'Win32ErrorCode'),(1, 'Style'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupRenameErrorW():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,UInt32)(('SetupRenameErrorW', windll['SETUPAPI.dll']), ((1, 'hwndParent'),(1, 'DialogTitle'),(1, 'SourceFile'),(1, 'TargetFile'),(1, 'Win32ErrorCode'),(1, 'Style'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDeleteErrorA():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,UInt32)(('SetupDeleteErrorA', windll['SETUPAPI.dll']), ((1, 'hwndParent'),(1, 'DialogTitle'),(1, 'File'),(1, 'Win32ErrorCode'),(1, 'Style'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDeleteErrorW():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,UInt32)(('SetupDeleteErrorW', windll['SETUPAPI.dll']), ((1, 'hwndParent'),(1, 'DialogTitle'),(1, 'File'),(1, 'Win32ErrorCode'),(1, 'Style'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupBackupErrorA():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,UInt32)(('SetupBackupErrorA', windll['SETUPAPI.dll']), ((1, 'hwndParent'),(1, 'DialogTitle'),(1, 'SourceFile'),(1, 'TargetFile'),(1, 'Win32ErrorCode'),(1, 'Style'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupBackupErrorW():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.HWND,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,UInt32)(('SetupBackupErrorW', windll['SETUPAPI.dll']), ((1, 'hwndParent'),(1, 'DialogTitle'),(1, 'SourceFile'),(1, 'TargetFile'),(1, 'Win32ErrorCode'),(1, 'Style'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetDirectoryIdA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,win32more.Foundation.PSTR)(('SetupSetDirectoryIdA', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'Id'),(1, 'Directory'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetDirectoryIdW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,win32more.Foundation.PWSTR)(('SetupSetDirectoryIdW', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'Id'),(1, 'Directory'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetDirectoryIdExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,win32more.Foundation.PSTR,UInt32,UInt32,c_void_p)(('SetupSetDirectoryIdExA', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'Id'),(1, 'Directory'),(1, 'Flags'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetDirectoryIdExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,win32more.Foundation.PWSTR,UInt32,UInt32,c_void_p)(('SetupSetDirectoryIdExW', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'Id'),(1, 'Directory'),(1, 'Flags'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetSourceInfoA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,UInt32,win32more.Foundation.PSTR,UInt32,POINTER(UInt32))(('SetupGetSourceInfoA', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'SourceId'),(1, 'InfoDesired'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetSourceInfoW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,UInt32,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(('SetupGetSourceInfoW', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'SourceId'),(1, 'InfoDesired'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInstallFileA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Devices.DeviceAndDriverInstallation.SP_COPY_STYLE,win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_A,c_void_p)(('SetupInstallFileA', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'InfContext'),(1, 'SourceFile'),(1, 'SourcePathRoot'),(1, 'DestinationName'),(1, 'CopyStyle'),(1, 'CopyMsgHandler'),(1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInstallFileW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Devices.DeviceAndDriverInstallation.SP_COPY_STYLE,win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_W,c_void_p)(('SetupInstallFileW', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'InfContext'),(1, 'SourceFile'),(1, 'SourcePathRoot'),(1, 'DestinationName'),(1, 'CopyStyle'),(1, 'CopyMsgHandler'),(1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInstallFileExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Devices.DeviceAndDriverInstallation.SP_COPY_STYLE,win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_A,c_void_p,POINTER(win32more.Foundation.BOOL))(('SetupInstallFileExA', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'InfContext'),(1, 'SourceFile'),(1, 'SourcePathRoot'),(1, 'DestinationName'),(1, 'CopyStyle'),(1, 'CopyMsgHandler'),(1, 'Context'),(1, 'FileWasInUse'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInstallFileExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Devices.DeviceAndDriverInstallation.SP_COPY_STYLE,win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_W,c_void_p,POINTER(win32more.Foundation.BOOL))(('SetupInstallFileExW', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'InfContext'),(1, 'SourceFile'),(1, 'SourcePathRoot'),(1, 'DestinationName'),(1, 'CopyStyle'),(1, 'CopyMsgHandler'),(1, 'Context'),(1, 'FileWasInUse'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupOpenFileQueue():
    try:
        return WINFUNCTYPE(c_void_p,)(('SetupOpenFileQueue', windll['SETUPAPI.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupCloseFileQueue():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p)(('SetupCloseFileQueue', windll['SETUPAPI.dll']), ((1, 'QueueHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetFileQueueAlternatePlatformA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head),win32more.Foundation.PSTR)(('SetupSetFileQueueAlternatePlatformA', windll['SETUPAPI.dll']), ((1, 'QueueHandle'),(1, 'AlternatePlatformInfo'),(1, 'AlternateDefaultCatalogFile'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetFileQueueAlternatePlatformW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head),win32more.Foundation.PWSTR)(('SetupSetFileQueueAlternatePlatformW', windll['SETUPAPI.dll']), ((1, 'QueueHandle'),(1, 'AlternatePlatformInfo'),(1, 'AlternateDefaultCatalogFile'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetPlatformPathOverrideA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR)(('SetupSetPlatformPathOverrideA', windll['SETUPAPI.dll']), ((1, 'Override'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetPlatformPathOverrideW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR)(('SetupSetPlatformPathOverrideW', windll['SETUPAPI.dll']), ((1, 'Override'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueCopyA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32)(('SetupQueueCopyA', windll['SETUPAPI.dll']), ((1, 'QueueHandle'),(1, 'SourceRootPath'),(1, 'SourcePath'),(1, 'SourceFilename'),(1, 'SourceDescription'),(1, 'SourceTagfile'),(1, 'TargetDirectory'),(1, 'TargetFilename'),(1, 'CopyStyle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueCopyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32)(('SetupQueueCopyW', windll['SETUPAPI.dll']), ((1, 'QueueHandle'),(1, 'SourceRootPath'),(1, 'SourcePath'),(1, 'SourceFilename'),(1, 'SourceDescription'),(1, 'SourceTagfile'),(1, 'TargetDirectory'),(1, 'TargetFilename'),(1, 'CopyStyle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueCopyIndirectA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_FILE_COPY_PARAMS_A_head))(('SetupQueueCopyIndirectA', windll['SETUPAPI.dll']), ((1, 'CopyParams'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueCopyIndirectW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_FILE_COPY_PARAMS_W_head))(('SetupQueueCopyIndirectW', windll['SETUPAPI.dll']), ((1, 'CopyParams'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueDefaultCopyA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32)(('SetupQueueDefaultCopyA', windll['SETUPAPI.dll']), ((1, 'QueueHandle'),(1, 'InfHandle'),(1, 'SourceRootPath'),(1, 'SourceFilename'),(1, 'TargetFilename'),(1, 'CopyStyle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueDefaultCopyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32)(('SetupQueueDefaultCopyW', windll['SETUPAPI.dll']), ((1, 'QueueHandle'),(1, 'InfHandle'),(1, 'SourceRootPath'),(1, 'SourceFilename'),(1, 'TargetFilename'),(1, 'CopyStyle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueCopySectionA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,c_void_p,c_void_p,win32more.Foundation.PSTR,UInt32)(('SetupQueueCopySectionA', windll['SETUPAPI.dll']), ((1, 'QueueHandle'),(1, 'SourceRootPath'),(1, 'InfHandle'),(1, 'ListInfHandle'),(1, 'Section'),(1, 'CopyStyle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueCopySectionW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,c_void_p,c_void_p,win32more.Foundation.PWSTR,UInt32)(('SetupQueueCopySectionW', windll['SETUPAPI.dll']), ((1, 'QueueHandle'),(1, 'SourceRootPath'),(1, 'InfHandle'),(1, 'ListInfHandle'),(1, 'Section'),(1, 'CopyStyle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueDeleteA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,win32more.Foundation.PSTR)(('SetupQueueDeleteA', windll['SETUPAPI.dll']), ((1, 'QueueHandle'),(1, 'PathPart1'),(1, 'PathPart2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueDeleteW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR)(('SetupQueueDeleteW', windll['SETUPAPI.dll']), ((1, 'QueueHandle'),(1, 'PathPart1'),(1, 'PathPart2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueDeleteSectionA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PSTR)(('SetupQueueDeleteSectionA', windll['SETUPAPI.dll']), ((1, 'QueueHandle'),(1, 'InfHandle'),(1, 'ListInfHandle'),(1, 'Section'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueDeleteSectionW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PWSTR)(('SetupQueueDeleteSectionW', windll['SETUPAPI.dll']), ((1, 'QueueHandle'),(1, 'InfHandle'),(1, 'ListInfHandle'),(1, 'Section'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueRenameA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR)(('SetupQueueRenameA', windll['SETUPAPI.dll']), ((1, 'QueueHandle'),(1, 'SourcePath'),(1, 'SourceFilename'),(1, 'TargetPath'),(1, 'TargetFilename'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueRenameW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR)(('SetupQueueRenameW', windll['SETUPAPI.dll']), ((1, 'QueueHandle'),(1, 'SourcePath'),(1, 'SourceFilename'),(1, 'TargetPath'),(1, 'TargetFilename'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueRenameSectionA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PSTR)(('SetupQueueRenameSectionA', windll['SETUPAPI.dll']), ((1, 'QueueHandle'),(1, 'InfHandle'),(1, 'ListInfHandle'),(1, 'Section'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueueRenameSectionW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PWSTR)(('SetupQueueRenameSectionW', windll['SETUPAPI.dll']), ((1, 'QueueHandle'),(1, 'InfHandle'),(1, 'ListInfHandle'),(1, 'Section'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupCommitFileQueueA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,c_void_p,win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_A,c_void_p)(('SetupCommitFileQueueA', windll['SETUPAPI.dll']), ((1, 'Owner'),(1, 'QueueHandle'),(1, 'MsgHandler'),(1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupCommitFileQueueW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,c_void_p,win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_W,c_void_p)(('SetupCommitFileQueueW', windll['SETUPAPI.dll']), ((1, 'Owner'),(1, 'QueueHandle'),(1, 'MsgHandler'),(1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupScanFileQueueA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,win32more.Foundation.HWND,win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_A,c_void_p,POINTER(UInt32))(('SetupScanFileQueueA', windll['SETUPAPI.dll']), ((1, 'FileQueue'),(1, 'Flags'),(1, 'Window'),(1, 'CallbackRoutine'),(1, 'CallbackContext'),(1, 'Result'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupScanFileQueueW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,win32more.Foundation.HWND,win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_W,c_void_p,POINTER(UInt32))(('SetupScanFileQueueW', windll['SETUPAPI.dll']), ((1, 'FileQueue'),(1, 'Flags'),(1, 'Window'),(1, 'CallbackRoutine'),(1, 'CallbackContext'),(1, 'Result'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetFileQueueCount():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,POINTER(UInt32))(('SetupGetFileQueueCount', windll['SETUPAPI.dll']), ((1, 'FileQueue'),(1, 'SubQueueFileOp'),(1, 'NumOperations'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetFileQueueFlags():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(UInt32))(('SetupGetFileQueueFlags', windll['SETUPAPI.dll']), ((1, 'FileQueue'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetFileQueueFlags():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,UInt32)(('SetupSetFileQueueFlags', windll['SETUPAPI.dll']), ((1, 'FileQueue'),(1, 'FlagMask'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupCopyOEMInfA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Devices.DeviceAndDriverInstallation.OEM_SOURCE_MEDIA_TYPE,UInt32,win32more.Foundation.PSTR,UInt32,POINTER(UInt32),POINTER(win32more.Foundation.PSTR))(('SetupCopyOEMInfA', windll['SETUPAPI.dll']), ((1, 'SourceInfFileName'),(1, 'OEMSourceMediaLocation'),(1, 'OEMSourceMediaType'),(1, 'CopyStyle'),(1, 'DestinationInfFileName'),(1, 'DestinationInfFileNameSize'),(1, 'RequiredSize'),(1, 'DestinationInfFileNameComponent'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupCopyOEMInfW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Devices.DeviceAndDriverInstallation.OEM_SOURCE_MEDIA_TYPE,UInt32,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32),POINTER(win32more.Foundation.PWSTR))(('SetupCopyOEMInfW', windll['SETUPAPI.dll']), ((1, 'SourceInfFileName'),(1, 'OEMSourceMediaLocation'),(1, 'OEMSourceMediaType'),(1, 'CopyStyle'),(1, 'DestinationInfFileName'),(1, 'DestinationInfFileNameSize'),(1, 'RequiredSize'),(1, 'DestinationInfFileNameComponent'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupUninstallOEMInfA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,UInt32,c_void_p)(('SetupUninstallOEMInfA', windll['SETUPAPI.dll']), ((1, 'InfFileName'),(1, 'Flags'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupUninstallOEMInfW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,UInt32,c_void_p)(('SetupUninstallOEMInfW', windll['SETUPAPI.dll']), ((1, 'InfFileName'),(1, 'Flags'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupUninstallNewlyCopiedInfs():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,c_void_p)(('SetupUninstallNewlyCopiedInfs', windll['SETUPAPI.dll']), ((1, 'FileQueue'),(1, 'Flags'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupCreateDiskSpaceListA():
    try:
        return WINFUNCTYPE(c_void_p,c_void_p,UInt32,UInt32)(('SetupCreateDiskSpaceListA', windll['SETUPAPI.dll']), ((1, 'Reserved1'),(1, 'Reserved2'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupCreateDiskSpaceListW():
    try:
        return WINFUNCTYPE(c_void_p,c_void_p,UInt32,UInt32)(('SetupCreateDiskSpaceListW', windll['SETUPAPI.dll']), ((1, 'Reserved1'),(1, 'Reserved2'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDuplicateDiskSpaceListA():
    try:
        return WINFUNCTYPE(c_void_p,c_void_p,c_void_p,UInt32,UInt32)(('SetupDuplicateDiskSpaceListA', windll['SETUPAPI.dll']), ((1, 'DiskSpace'),(1, 'Reserved1'),(1, 'Reserved2'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDuplicateDiskSpaceListW():
    try:
        return WINFUNCTYPE(c_void_p,c_void_p,c_void_p,UInt32,UInt32)(('SetupDuplicateDiskSpaceListW', windll['SETUPAPI.dll']), ((1, 'DiskSpace'),(1, 'Reserved1'),(1, 'Reserved2'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDestroyDiskSpaceList():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p)(('SetupDestroyDiskSpaceList', windll['SETUPAPI.dll']), ((1, 'DiskSpace'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueryDrivesInDiskSpaceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,UInt32,POINTER(UInt32))(('SetupQueryDrivesInDiskSpaceListA', windll['SETUPAPI.dll']), ((1, 'DiskSpace'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueryDrivesInDiskSpaceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(('SetupQueryDrivesInDiskSpaceListW', windll['SETUPAPI.dll']), ((1, 'DiskSpace'),(1, 'ReturnBuffer'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQuerySpaceRequiredOnDriveA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,POINTER(Int64),c_void_p,UInt32)(('SetupQuerySpaceRequiredOnDriveA', windll['SETUPAPI.dll']), ((1, 'DiskSpace'),(1, 'DriveSpec'),(1, 'SpaceRequired'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQuerySpaceRequiredOnDriveW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,POINTER(Int64),c_void_p,UInt32)(('SetupQuerySpaceRequiredOnDriveW', windll['SETUPAPI.dll']), ((1, 'DiskSpace'),(1, 'DriveSpec'),(1, 'SpaceRequired'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupAdjustDiskSpaceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,Int64,c_void_p,UInt32)(('SetupAdjustDiskSpaceListA', windll['SETUPAPI.dll']), ((1, 'DiskSpace'),(1, 'DriveRoot'),(1, 'Amount'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupAdjustDiskSpaceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,Int64,c_void_p,UInt32)(('SetupAdjustDiskSpaceListW', windll['SETUPAPI.dll']), ((1, 'DiskSpace'),(1, 'DriveRoot'),(1, 'Amount'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupAddToDiskSpaceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,Int64,win32more.Devices.DeviceAndDriverInstallation.SETUP_FILE_OPERATION,c_void_p,UInt32)(('SetupAddToDiskSpaceListA', windll['SETUPAPI.dll']), ((1, 'DiskSpace'),(1, 'TargetFilespec'),(1, 'FileSize'),(1, 'Operation'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupAddToDiskSpaceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,Int64,win32more.Devices.DeviceAndDriverInstallation.SETUP_FILE_OPERATION,c_void_p,UInt32)(('SetupAddToDiskSpaceListW', windll['SETUPAPI.dll']), ((1, 'DiskSpace'),(1, 'TargetFilespec'),(1, 'FileSize'),(1, 'Operation'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupAddSectionToDiskSpaceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PSTR,win32more.Devices.DeviceAndDriverInstallation.SETUP_FILE_OPERATION,c_void_p,UInt32)(('SetupAddSectionToDiskSpaceListA', windll['SETUPAPI.dll']), ((1, 'DiskSpace'),(1, 'InfHandle'),(1, 'ListInfHandle'),(1, 'SectionName'),(1, 'Operation'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupAddSectionToDiskSpaceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PWSTR,win32more.Devices.DeviceAndDriverInstallation.SETUP_FILE_OPERATION,c_void_p,UInt32)(('SetupAddSectionToDiskSpaceListW', windll['SETUPAPI.dll']), ((1, 'DiskSpace'),(1, 'InfHandle'),(1, 'ListInfHandle'),(1, 'SectionName'),(1, 'Operation'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupAddInstallSectionToDiskSpaceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PSTR,c_void_p,UInt32)(('SetupAddInstallSectionToDiskSpaceListA', windll['SETUPAPI.dll']), ((1, 'DiskSpace'),(1, 'InfHandle'),(1, 'LayoutInfHandle'),(1, 'SectionName'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupAddInstallSectionToDiskSpaceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PWSTR,c_void_p,UInt32)(('SetupAddInstallSectionToDiskSpaceListW', windll['SETUPAPI.dll']), ((1, 'DiskSpace'),(1, 'InfHandle'),(1, 'LayoutInfHandle'),(1, 'SectionName'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupRemoveFromDiskSpaceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,win32more.Devices.DeviceAndDriverInstallation.SETUP_FILE_OPERATION,c_void_p,UInt32)(('SetupRemoveFromDiskSpaceListA', windll['SETUPAPI.dll']), ((1, 'DiskSpace'),(1, 'TargetFilespec'),(1, 'Operation'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupRemoveFromDiskSpaceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,win32more.Devices.DeviceAndDriverInstallation.SETUP_FILE_OPERATION,c_void_p,UInt32)(('SetupRemoveFromDiskSpaceListW', windll['SETUPAPI.dll']), ((1, 'DiskSpace'),(1, 'TargetFilespec'),(1, 'Operation'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupRemoveSectionFromDiskSpaceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PSTR,win32more.Devices.DeviceAndDriverInstallation.SETUP_FILE_OPERATION,c_void_p,UInt32)(('SetupRemoveSectionFromDiskSpaceListA', windll['SETUPAPI.dll']), ((1, 'DiskSpace'),(1, 'InfHandle'),(1, 'ListInfHandle'),(1, 'SectionName'),(1, 'Operation'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupRemoveSectionFromDiskSpaceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PWSTR,win32more.Devices.DeviceAndDriverInstallation.SETUP_FILE_OPERATION,c_void_p,UInt32)(('SetupRemoveSectionFromDiskSpaceListW', windll['SETUPAPI.dll']), ((1, 'DiskSpace'),(1, 'InfHandle'),(1, 'ListInfHandle'),(1, 'SectionName'),(1, 'Operation'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupRemoveInstallSectionFromDiskSpaceListA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PSTR,c_void_p,UInt32)(('SetupRemoveInstallSectionFromDiskSpaceListA', windll['SETUPAPI.dll']), ((1, 'DiskSpace'),(1, 'InfHandle'),(1, 'LayoutInfHandle'),(1, 'SectionName'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupRemoveInstallSectionFromDiskSpaceListW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PWSTR,c_void_p,UInt32)(('SetupRemoveInstallSectionFromDiskSpaceListW', windll['SETUPAPI.dll']), ((1, 'DiskSpace'),(1, 'InfHandle'),(1, 'LayoutInfHandle'),(1, 'SectionName'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupIterateCabinetA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,UInt32,win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_A,c_void_p)(('SetupIterateCabinetA', windll['SETUPAPI.dll']), ((1, 'CabinetFile'),(1, 'Reserved'),(1, 'MsgHandler'),(1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupIterateCabinetW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,UInt32,win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_W,c_void_p)(('SetupIterateCabinetW', windll['SETUPAPI.dll']), ((1, 'CabinetFile'),(1, 'Reserved'),(1, 'MsgHandler'),(1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupPromptReboot():
    try:
        return WINFUNCTYPE(Int32,c_void_p,win32more.Foundation.HWND,win32more.Foundation.BOOL)(('SetupPromptReboot', windll['SETUPAPI.dll']), ((1, 'FileQueue'),(1, 'Owner'),(1, 'ScanOnly'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInitDefaultQueueCallback():
    try:
        return WINFUNCTYPE(c_void_p,win32more.Foundation.HWND)(('SetupInitDefaultQueueCallback', windll['SETUPAPI.dll']), ((1, 'OwnerWindow'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInitDefaultQueueCallbackEx():
    try:
        return WINFUNCTYPE(c_void_p,win32more.Foundation.HWND,win32more.Foundation.HWND,UInt32,UInt32,c_void_p)(('SetupInitDefaultQueueCallbackEx', windll['SETUPAPI.dll']), ((1, 'OwnerWindow'),(1, 'AlternateProgressWindow'),(1, 'ProgressMessage'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupTermDefaultQueueCallback():
    try:
        return WINFUNCTYPE(Void,c_void_p)(('SetupTermDefaultQueueCallback', windll['SETUPAPI.dll']), ((1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDefaultQueueCallbackA():
    try:
        return WINFUNCTYPE(UInt32,c_void_p,UInt32,UIntPtr,UIntPtr)(('SetupDefaultQueueCallbackA', windll['SETUPAPI.dll']), ((1, 'Context'),(1, 'Notification'),(1, 'Param1'),(1, 'Param2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDefaultQueueCallbackW():
    try:
        return WINFUNCTYPE(UInt32,c_void_p,UInt32,UIntPtr,UIntPtr)(('SetupDefaultQueueCallbackW', windll['SETUPAPI.dll']), ((1, 'Context'),(1, 'Notification'),(1, 'Param1'),(1, 'Param2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInstallFromInfSectionA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,c_void_p,win32more.Foundation.PSTR,UInt32,win32more.System.Registry.HKEY,win32more.Foundation.PSTR,UInt32,win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_A,c_void_p,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupInstallFromInfSectionA', windll['SETUPAPI.dll']), ((1, 'Owner'),(1, 'InfHandle'),(1, 'SectionName'),(1, 'Flags'),(1, 'RelativeKeyRoot'),(1, 'SourceRootPath'),(1, 'CopyFlags'),(1, 'MsgHandler'),(1, 'Context'),(1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInstallFromInfSectionW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,c_void_p,win32more.Foundation.PWSTR,UInt32,win32more.System.Registry.HKEY,win32more.Foundation.PWSTR,UInt32,win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_W,c_void_p,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupInstallFromInfSectionW', windll['SETUPAPI.dll']), ((1, 'Owner'),(1, 'InfHandle'),(1, 'SectionName'),(1, 'Flags'),(1, 'RelativeKeyRoot'),(1, 'SourceRootPath'),(1, 'CopyFlags'),(1, 'MsgHandler'),(1, 'Context'),(1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInstallFilesFromInfSectionA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32)(('SetupInstallFilesFromInfSectionA', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'LayoutInfHandle'),(1, 'FileQueue'),(1, 'SectionName'),(1, 'SourceRootPath'),(1, 'CopyFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInstallFilesFromInfSectionW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,c_void_p,c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32)(('SetupInstallFilesFromInfSectionW', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'LayoutInfHandle'),(1, 'FileQueue'),(1, 'SectionName'),(1, 'SourceRootPath'),(1, 'CopyFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInstallServicesFromInfSectionA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,UInt32)(('SetupInstallServicesFromInfSectionA', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'SectionName'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInstallServicesFromInfSectionW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,UInt32)(('SetupInstallServicesFromInfSectionW', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'SectionName'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInstallServicesFromInfSectionExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,UInt32,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),c_void_p,c_void_p)(('SetupInstallServicesFromInfSectionExA', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'SectionName'),(1, 'Flags'),(1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInstallServicesFromInfSectionExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,UInt32,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),c_void_p,c_void_p)(('SetupInstallServicesFromInfSectionExW', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'SectionName'),(1, 'Flags'),(1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_InstallHinfSectionA():
    try:
        return WINFUNCTYPE(Void,win32more.Foundation.HWND,win32more.Foundation.HINSTANCE,win32more.Foundation.PSTR,Int32)(('InstallHinfSectionA', windll['SETUPAPI.dll']), ((1, 'Window'),(1, 'ModuleHandle'),(1, 'CommandLine'),(1, 'ShowCommand'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_InstallHinfSectionW():
    try:
        return WINFUNCTYPE(Void,win32more.Foundation.HWND,win32more.Foundation.HINSTANCE,win32more.Foundation.PWSTR,Int32)(('InstallHinfSectionW', windll['SETUPAPI.dll']), ((1, 'Window'),(1, 'ModuleHandle'),(1, 'CommandLine'),(1, 'ShowCommand'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInitializeFileLogA():
    try:
        return WINFUNCTYPE(c_void_p,win32more.Foundation.PSTR,UInt32)(('SetupInitializeFileLogA', windll['SETUPAPI.dll']), ((1, 'LogFileName'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupInitializeFileLogW():
    try:
        return WINFUNCTYPE(c_void_p,win32more.Foundation.PWSTR,UInt32)(('SetupInitializeFileLogW', windll['SETUPAPI.dll']), ((1, 'LogFileName'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupTerminateFileLog():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p)(('SetupTerminateFileLog', windll['SETUPAPI.dll']), ((1, 'FileLogHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupLogFileA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32)(('SetupLogFileA', windll['SETUPAPI.dll']), ((1, 'FileLogHandle'),(1, 'LogSectionName'),(1, 'SourceFilename'),(1, 'TargetFilename'),(1, 'Checksum'),(1, 'DiskTagfile'),(1, 'DiskDescription'),(1, 'OtherInfo'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupLogFileW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32)(('SetupLogFileW', windll['SETUPAPI.dll']), ((1, 'FileLogHandle'),(1, 'LogSectionName'),(1, 'SourceFilename'),(1, 'TargetFilename'),(1, 'Checksum'),(1, 'DiskTagfile'),(1, 'DiskDescription'),(1, 'OtherInfo'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupRemoveFileLogEntryA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,win32more.Foundation.PSTR)(('SetupRemoveFileLogEntryA', windll['SETUPAPI.dll']), ((1, 'FileLogHandle'),(1, 'LogSectionName'),(1, 'TargetFilename'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupRemoveFileLogEntryW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR)(('SetupRemoveFileLogEntryW', windll['SETUPAPI.dll']), ((1, 'FileLogHandle'),(1, 'LogSectionName'),(1, 'TargetFilename'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueryFileLogA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Devices.DeviceAndDriverInstallation.SetupFileLogInfo,win32more.Foundation.PSTR,UInt32,POINTER(UInt32))(('SetupQueryFileLogA', windll['SETUPAPI.dll']), ((1, 'FileLogHandle'),(1, 'LogSectionName'),(1, 'TargetFilename'),(1, 'DesiredInfo'),(1, 'DataOut'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupQueryFileLogW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Devices.DeviceAndDriverInstallation.SetupFileLogInfo,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(('SetupQueryFileLogW', windll['SETUPAPI.dll']), ((1, 'FileLogHandle'),(1, 'LogSectionName'),(1, 'TargetFilename'),(1, 'DesiredInfo'),(1, 'DataOut'),(1, 'ReturnBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupOpenLog():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.BOOL)(('SetupOpenLog', windll['SETUPAPI.dll']), ((1, 'Erase'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupLogErrorA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,UInt32)(('SetupLogErrorA', windll['SETUPAPI.dll']), ((1, 'MessageString'),(1, 'Severity'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupLogErrorW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,UInt32)(('SetupLogErrorW', windll['SETUPAPI.dll']), ((1, 'MessageString'),(1, 'Severity'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupCloseLog():
    try:
        return WINFUNCTYPE(Void,)(('SetupCloseLog', windll['SETUPAPI.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetThreadLogToken():
    try:
        return WINFUNCTYPE(UInt64,)(('SetupGetThreadLogToken', windll['SETUPAPI.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetThreadLogToken():
    try:
        return WINFUNCTYPE(Void,UInt64)(('SetupSetThreadLogToken', windll['SETUPAPI.dll']), ((1, 'LogToken'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupWriteTextLog():
    try:
        return CFUNCTYPE(Void,UInt64,UInt32,UInt32,win32more.Foundation.PSTR)(('SetupWriteTextLog', cdll['SETUPAPI.dll']), ((1, 'LogToken'),(1, 'Category'),(1, 'Flags'),(1, 'MessageStr'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupWriteTextLogError():
    try:
        return CFUNCTYPE(Void,UInt64,UInt32,UInt32,UInt32,win32more.Foundation.PSTR)(('SetupWriteTextLogError', cdll['SETUPAPI.dll']), ((1, 'LogToken'),(1, 'Category'),(1, 'LogFlags'),(1, 'Error'),(1, 'MessageStr'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupWriteTextLogInfLine():
    try:
        return WINFUNCTYPE(Void,UInt64,UInt32,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head))(('SetupWriteTextLogInfLine', windll['SETUPAPI.dll']), ((1, 'LogToken'),(1, 'Flags'),(1, 'InfHandle'),(1, 'Context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetBackupInformationA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_BACKUP_QUEUE_PARAMS_V2_A_head))(('SetupGetBackupInformationA', windll['SETUPAPI.dll']), ((1, 'QueueHandle'),(1, 'BackupParams'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetBackupInformationW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_BACKUP_QUEUE_PARAMS_V2_W_head))(('SetupGetBackupInformationW', windll['SETUPAPI.dll']), ((1, 'QueueHandle'),(1, 'BackupParams'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupPrepareQueueForRestoreA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,UInt32)(('SetupPrepareQueueForRestoreA', windll['SETUPAPI.dll']), ((1, 'QueueHandle'),(1, 'BackupPath'),(1, 'RestoreFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupPrepareQueueForRestoreW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,UInt32)(('SetupPrepareQueueForRestoreW', windll['SETUPAPI.dll']), ((1, 'QueueHandle'),(1, 'BackupPath'),(1, 'RestoreFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupSetNonInteractiveMode():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.BOOL)(('SetupSetNonInteractiveMode', windll['SETUPAPI.dll']), ((1, 'NonInteractiveFlag'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupGetNonInteractiveMode():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,)(('SetupGetNonInteractiveMode', windll['SETUPAPI.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCreateDeviceInfoList():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(Guid),win32more.Foundation.HWND)(('SetupDiCreateDeviceInfoList', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'hwndParent'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCreateDeviceInfoListExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(Guid),win32more.Foundation.HWND,win32more.Foundation.PSTR,c_void_p)(('SetupDiCreateDeviceInfoListExA', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'hwndParent'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCreateDeviceInfoListExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(Guid),win32more.Foundation.HWND,win32more.Foundation.PWSTR,c_void_p)(('SetupDiCreateDeviceInfoListExW', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'hwndParent'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceInfoListClass():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(Guid))(('SetupDiGetDeviceInfoListClass', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'ClassGuid'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceInfoListDetailA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_LIST_DETAIL_DATA_A_head))(('SetupDiGetDeviceInfoListDetailA', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoSetDetailData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceInfoListDetailW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_LIST_DETAIL_DATA_W_head))(('SetupDiGetDeviceInfoListDetailW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoSetDetailData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCreateDeviceInfoA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,win32more.Foundation.PSTR,POINTER(Guid),win32more.Foundation.PSTR,win32more.Foundation.HWND,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupDiCreateDeviceInfoA', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceName'),(1, 'ClassGuid'),(1, 'DeviceDescription'),(1, 'hwndParent'),(1, 'CreationFlags'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCreateDeviceInfoW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,win32more.Foundation.PWSTR,POINTER(Guid),win32more.Foundation.PWSTR,win32more.Foundation.HWND,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupDiCreateDeviceInfoW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceName'),(1, 'ClassGuid'),(1, 'DeviceDescription'),(1, 'hwndParent'),(1, 'CreationFlags'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiOpenDeviceInfoA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,win32more.Foundation.PSTR,win32more.Foundation.HWND,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupDiOpenDeviceInfoA', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInstanceId'),(1, 'hwndParent'),(1, 'OpenFlags'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiOpenDeviceInfoW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,win32more.Foundation.PWSTR,win32more.Foundation.HWND,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupDiOpenDeviceInfoW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInstanceId'),(1, 'hwndParent'),(1, 'OpenFlags'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceInstanceIdA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),win32more.Foundation.PSTR,UInt32,POINTER(UInt32))(('SetupDiGetDeviceInstanceIdA', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DeviceInstanceId'),(1, 'DeviceInstanceIdSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceInstanceIdW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(('SetupDiGetDeviceInstanceIdW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DeviceInstanceId'),(1, 'DeviceInstanceIdSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiDeleteDeviceInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupDiDeleteDeviceInfo', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiEnumDeviceInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupDiEnumDeviceInfo', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'MemberIndex'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiDestroyDeviceInfoList():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO)(('SetupDiDestroyDeviceInfoList', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiEnumDeviceInterfaces():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(Guid),UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head))(('SetupDiEnumDeviceInterfaces', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'InterfaceClassGuid'),(1, 'MemberIndex'),(1, 'DeviceInterfaceData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCreateDeviceInterfaceA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(Guid),win32more.Foundation.PSTR,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head))(('SetupDiCreateDeviceInterfaceA', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'InterfaceClassGuid'),(1, 'ReferenceString'),(1, 'CreationFlags'),(1, 'DeviceInterfaceData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCreateDeviceInterfaceW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(Guid),win32more.Foundation.PWSTR,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head))(('SetupDiCreateDeviceInterfaceW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'InterfaceClassGuid'),(1, 'ReferenceString'),(1, 'CreationFlags'),(1, 'DeviceInterfaceData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiOpenDeviceInterfaceA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,win32more.Foundation.PSTR,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head))(('SetupDiOpenDeviceInterfaceA', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DevicePath'),(1, 'OpenFlags'),(1, 'DeviceInterfaceData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiOpenDeviceInterfaceW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,win32more.Foundation.PWSTR,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head))(('SetupDiOpenDeviceInterfaceW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DevicePath'),(1, 'OpenFlags'),(1, 'DeviceInterfaceData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceInterfaceAlias():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head),POINTER(Guid),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head))(('SetupDiGetDeviceInterfaceAlias', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),(1, 'AliasInterfaceClassGuid'),(1, 'AliasDeviceInterfaceData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiDeleteDeviceInterfaceData():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head))(('SetupDiDeleteDeviceInterfaceData', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiRemoveDeviceInterface():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head))(('SetupDiRemoveDeviceInterface', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceInterfaceDetailA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DETAIL_DATA_A_head),UInt32,POINTER(UInt32),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupDiGetDeviceInterfaceDetailA', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),(1, 'DeviceInterfaceDetailData'),(1, 'DeviceInterfaceDetailDataSize'),(1, 'RequiredSize'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceInterfaceDetailW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DETAIL_DATA_W_head),UInt32,POINTER(UInt32),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupDiGetDeviceInterfaceDetailW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),(1, 'DeviceInterfaceDetailData'),(1, 'DeviceInterfaceDetailDataSize'),(1, 'RequiredSize'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiInstallDeviceInterfaces():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupDiInstallDeviceInterfaces', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetDeviceInterfaceDefault():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head),UInt32,c_void_p)(('SetupDiSetDeviceInterfaceDefault', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),(1, 'Flags'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiRegisterDeviceInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,win32more.Devices.DeviceAndDriverInstallation.PSP_DETSIG_CMPPROC,c_void_p,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupDiRegisterDeviceInfo', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Flags'),(1, 'CompareProc'),(1, 'CompareContext'),(1, 'DupDeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiBuildDriverInfoList():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),win32more.Devices.DeviceAndDriverInstallation.SETUP_DI_BUILD_DRIVER_DRIVER_TYPE)(('SetupDiBuildDriverInfoList', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCancelDriverInfoSearch():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO)(('SetupDiCancelDriverInfoSearch', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiEnumDriverInfoA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_A_head))(('SetupDiEnumDriverInfoA', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverType'),(1, 'MemberIndex'),(1, 'DriverInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiEnumDriverInfoW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_W_head))(('SetupDiEnumDriverInfoW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverType'),(1, 'MemberIndex'),(1, 'DriverInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetSelectedDriverA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_A_head))(('SetupDiGetSelectedDriverA', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetSelectedDriverW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_W_head))(('SetupDiGetSelectedDriverW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetSelectedDriverA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_A_head))(('SetupDiSetSelectedDriverA', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetSelectedDriverW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_W_head))(('SetupDiSetSelectedDriverW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDriverInfoDetailA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_A_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DETAIL_DATA_A_head),UInt32,POINTER(UInt32))(('SetupDiGetDriverInfoDetailA', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverInfoData'),(1, 'DriverInfoDetailData'),(1, 'DriverInfoDetailDataSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDriverInfoDetailW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_W_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DETAIL_DATA_W_head),UInt32,POINTER(UInt32))(('SetupDiGetDriverInfoDetailW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverInfoData'),(1, 'DriverInfoDetailData'),(1, 'DriverInfoDetailDataSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiDestroyDriverInfoList():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32)(('SetupDiDestroyDriverInfoList', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassDevsA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(Guid),win32more.Foundation.PSTR,win32more.Foundation.HWND,UInt32)(('SetupDiGetClassDevsA', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'Enumerator'),(1, 'hwndParent'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassDevsW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(Guid),win32more.Foundation.PWSTR,win32more.Foundation.HWND,UInt32)(('SetupDiGetClassDevsW', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'Enumerator'),(1, 'hwndParent'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassDevsExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(Guid),win32more.Foundation.PSTR,win32more.Foundation.HWND,UInt32,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,win32more.Foundation.PSTR,c_void_p)(('SetupDiGetClassDevsExA', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'Enumerator'),(1, 'hwndParent'),(1, 'Flags'),(1, 'DeviceInfoSet'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassDevsExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(Guid),win32more.Foundation.PWSTR,win32more.Foundation.HWND,UInt32,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,win32more.Foundation.PWSTR,c_void_p)(('SetupDiGetClassDevsExW', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'Enumerator'),(1, 'hwndParent'),(1, 'Flags'),(1, 'DeviceInfoSet'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetINFClassA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,POINTER(Guid),win32more.Foundation.PSTR,UInt32,POINTER(UInt32))(('SetupDiGetINFClassA', windll['SETUPAPI.dll']), ((1, 'InfName'),(1, 'ClassGuid'),(1, 'ClassName'),(1, 'ClassNameSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetINFClassW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,POINTER(Guid),win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(('SetupDiGetINFClassW', windll['SETUPAPI.dll']), ((1, 'InfName'),(1, 'ClassGuid'),(1, 'ClassName'),(1, 'ClassNameSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiBuildClassInfoList():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(Guid),UInt32,POINTER(UInt32))(('SetupDiBuildClassInfoList', windll['SETUPAPI.dll']), ((1, 'Flags'),(1, 'ClassGuidList'),(1, 'ClassGuidListSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiBuildClassInfoListExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(Guid),UInt32,POINTER(UInt32),win32more.Foundation.PSTR,c_void_p)(('SetupDiBuildClassInfoListExA', windll['SETUPAPI.dll']), ((1, 'Flags'),(1, 'ClassGuidList'),(1, 'ClassGuidListSize'),(1, 'RequiredSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiBuildClassInfoListExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(Guid),UInt32,POINTER(UInt32),win32more.Foundation.PWSTR,c_void_p)(('SetupDiBuildClassInfoListExW', windll['SETUPAPI.dll']), ((1, 'Flags'),(1, 'ClassGuidList'),(1, 'ClassGuidListSize'),(1, 'RequiredSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassDescriptionA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),win32more.Foundation.PSTR,UInt32,POINTER(UInt32))(('SetupDiGetClassDescriptionA', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'ClassDescription'),(1, 'ClassDescriptionSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassDescriptionW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(('SetupDiGetClassDescriptionW', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'ClassDescription'),(1, 'ClassDescriptionSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassDescriptionExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),win32more.Foundation.PSTR,UInt32,POINTER(UInt32),win32more.Foundation.PSTR,c_void_p)(('SetupDiGetClassDescriptionExA', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'ClassDescription'),(1, 'ClassDescriptionSize'),(1, 'RequiredSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassDescriptionExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),win32more.Foundation.PWSTR,UInt32,POINTER(UInt32),win32more.Foundation.PWSTR,c_void_p)(('SetupDiGetClassDescriptionExW', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'ClassDescription'),(1, 'ClassDescriptionSize'),(1, 'RequiredSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCallClassInstaller():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupDiCallClassInstaller', windll['SETUPAPI.dll']), ((1, 'InstallFunction'),(1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSelectDevice():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupDiSelectDevice', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSelectBestCompatDrv():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupDiSelectBestCompatDrv', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiInstallDevice():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupDiInstallDevice', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiInstallDriverFiles():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupDiInstallDriverFiles', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiRegisterCoDeviceInstallers():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupDiRegisterCoDeviceInstallers', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiRemoveDevice():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupDiRemoveDevice', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiUnremoveDevice():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupDiUnremoveDevice', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiRestartDevices():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupDiRestartDevices', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiChangeState():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupDiChangeState', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiInstallClassA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PSTR,UInt32,c_void_p)(('SetupDiInstallClassA', windll['SETUPAPI.dll']), ((1, 'hwndParent'),(1, 'InfFileName'),(1, 'Flags'),(1, 'FileQueue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiInstallClassW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PWSTR,UInt32,c_void_p)(('SetupDiInstallClassW', windll['SETUPAPI.dll']), ((1, 'hwndParent'),(1, 'InfFileName'),(1, 'Flags'),(1, 'FileQueue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiInstallClassExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PSTR,UInt32,c_void_p,POINTER(Guid),c_void_p,c_void_p)(('SetupDiInstallClassExA', windll['SETUPAPI.dll']), ((1, 'hwndParent'),(1, 'InfFileName'),(1, 'Flags'),(1, 'FileQueue'),(1, 'InterfaceClassGuid'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiInstallClassExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PWSTR,UInt32,c_void_p,POINTER(Guid),c_void_p,c_void_p)(('SetupDiInstallClassExW', windll['SETUPAPI.dll']), ((1, 'hwndParent'),(1, 'InfFileName'),(1, 'Flags'),(1, 'FileQueue'),(1, 'InterfaceClassGuid'),(1, 'Reserved1'),(1, 'Reserved2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiOpenClassRegKey():
    try:
        return WINFUNCTYPE(win32more.System.Registry.HKEY,POINTER(Guid),UInt32)(('SetupDiOpenClassRegKey', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'samDesired'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiOpenClassRegKeyExA():
    try:
        return WINFUNCTYPE(win32more.System.Registry.HKEY,POINTER(Guid),UInt32,UInt32,win32more.Foundation.PSTR,c_void_p)(('SetupDiOpenClassRegKeyExA', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'samDesired'),(1, 'Flags'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiOpenClassRegKeyExW():
    try:
        return WINFUNCTYPE(win32more.System.Registry.HKEY,POINTER(Guid),UInt32,UInt32,win32more.Foundation.PWSTR,c_void_p)(('SetupDiOpenClassRegKeyExW', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'samDesired'),(1, 'Flags'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCreateDeviceInterfaceRegKeyA():
    try:
        return WINFUNCTYPE(win32more.System.Registry.HKEY,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head),UInt32,UInt32,c_void_p,win32more.Foundation.PSTR)(('SetupDiCreateDeviceInterfaceRegKeyA', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),(1, 'Reserved'),(1, 'samDesired'),(1, 'InfHandle'),(1, 'InfSectionName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCreateDeviceInterfaceRegKeyW():
    try:
        return WINFUNCTYPE(win32more.System.Registry.HKEY,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head),UInt32,UInt32,c_void_p,win32more.Foundation.PWSTR)(('SetupDiCreateDeviceInterfaceRegKeyW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),(1, 'Reserved'),(1, 'samDesired'),(1, 'InfHandle'),(1, 'InfSectionName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiOpenDeviceInterfaceRegKey():
    try:
        return WINFUNCTYPE(win32more.System.Registry.HKEY,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head),UInt32,UInt32)(('SetupDiOpenDeviceInterfaceRegKey', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),(1, 'Reserved'),(1, 'samDesired'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiDeleteDeviceInterfaceRegKey():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head),UInt32)(('SetupDiDeleteDeviceInterfaceRegKey', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCreateDevRegKeyA():
    try:
        return WINFUNCTYPE(win32more.System.Registry.HKEY,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,UInt32,UInt32,c_void_p,win32more.Foundation.PSTR)(('SetupDiCreateDevRegKeyA', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Scope'),(1, 'HwProfile'),(1, 'KeyType'),(1, 'InfHandle'),(1, 'InfSectionName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiCreateDevRegKeyW():
    try:
        return WINFUNCTYPE(win32more.System.Registry.HKEY,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,UInt32,UInt32,c_void_p,win32more.Foundation.PWSTR)(('SetupDiCreateDevRegKeyW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Scope'),(1, 'HwProfile'),(1, 'KeyType'),(1, 'InfHandle'),(1, 'InfSectionName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiOpenDevRegKey():
    try:
        return WINFUNCTYPE(win32more.System.Registry.HKEY,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,UInt32,UInt32,UInt32)(('SetupDiOpenDevRegKey', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Scope'),(1, 'HwProfile'),(1, 'KeyType'),(1, 'samDesired'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiDeleteDevRegKey():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,UInt32,UInt32)(('SetupDiDeleteDevRegKey', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Scope'),(1, 'HwProfile'),(1, 'KeyType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetHwProfileList():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(UInt32),UInt32,POINTER(UInt32),POINTER(UInt32))(('SetupDiGetHwProfileList', windll['SETUPAPI.dll']), ((1, 'HwProfileList'),(1, 'HwProfileListSize'),(1, 'RequiredSize'),(1, 'CurrentlyActiveIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetHwProfileListExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(UInt32),UInt32,POINTER(UInt32),POINTER(UInt32),win32more.Foundation.PSTR,c_void_p)(('SetupDiGetHwProfileListExA', windll['SETUPAPI.dll']), ((1, 'HwProfileList'),(1, 'HwProfileListSize'),(1, 'RequiredSize'),(1, 'CurrentlyActiveIndex'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetHwProfileListExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(UInt32),UInt32,POINTER(UInt32),POINTER(UInt32),win32more.Foundation.PWSTR,c_void_p)(('SetupDiGetHwProfileListExW', windll['SETUPAPI.dll']), ((1, 'HwProfileList'),(1, 'HwProfileListSize'),(1, 'RequiredSize'),(1, 'CurrentlyActiveIndex'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDevicePropertyKeys():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,POINTER(UInt32),UInt32)(('SetupDiGetDevicePropertyKeys', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'PropertyKeyArray'),(1, 'PropertyKeyCount'),(1, 'RequiredPropertyKeyCount'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDevicePropertyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),c_char_p_no,UInt32,POINTER(UInt32),UInt32)(('SetupDiGetDevicePropertyW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'RequiredSize'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetDevicePropertyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,c_char_p_no,UInt32,UInt32)(('SetupDiSetDevicePropertyW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceInterfacePropertyKeys():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,POINTER(UInt32),UInt32)(('SetupDiGetDeviceInterfacePropertyKeys', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),(1, 'PropertyKeyArray'),(1, 'PropertyKeyCount'),(1, 'RequiredPropertyKeyCount'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceInterfacePropertyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),c_char_p_no,UInt32,POINTER(UInt32),UInt32)(('SetupDiGetDeviceInterfacePropertyW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'RequiredSize'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetDeviceInterfacePropertyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,c_char_p_no,UInt32,UInt32)(('SetupDiSetDeviceInterfacePropertyW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInterfaceData'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassPropertyKeys():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,POINTER(UInt32),UInt32)(('SetupDiGetClassPropertyKeys', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'PropertyKeyArray'),(1, 'PropertyKeyCount'),(1, 'RequiredPropertyKeyCount'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassPropertyKeysExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,POINTER(UInt32),UInt32,win32more.Foundation.PWSTR,c_void_p)(('SetupDiGetClassPropertyKeysExW', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'PropertyKeyArray'),(1, 'PropertyKeyCount'),(1, 'RequiredPropertyKeyCount'),(1, 'Flags'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassPropertyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),c_char_p_no,UInt32,POINTER(UInt32),UInt32)(('SetupDiGetClassPropertyW', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'RequiredSize'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassPropertyExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),c_char_p_no,UInt32,POINTER(UInt32),UInt32,win32more.Foundation.PWSTR,c_void_p)(('SetupDiGetClassPropertyExW', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'RequiredSize'),(1, 'Flags'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetClassPropertyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,c_char_p_no,UInt32,UInt32)(('SetupDiSetClassPropertyW', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetClassPropertyExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,c_char_p_no,UInt32,UInt32,win32more.Foundation.PWSTR,c_void_p)(('SetupDiSetClassPropertyExW', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'Flags'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceRegistryPropertyA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,POINTER(UInt32),c_char_p_no,UInt32,POINTER(UInt32))(('SetupDiGetDeviceRegistryPropertyA', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Property'),(1, 'PropertyRegDataType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceRegistryPropertyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,POINTER(UInt32),c_char_p_no,UInt32,POINTER(UInt32))(('SetupDiGetDeviceRegistryPropertyW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Property'),(1, 'PropertyRegDataType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassRegistryPropertyA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),UInt32,POINTER(UInt32),c_char_p_no,UInt32,POINTER(UInt32),win32more.Foundation.PSTR,c_void_p)(('SetupDiGetClassRegistryPropertyA', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'Property'),(1, 'PropertyRegDataType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'RequiredSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassRegistryPropertyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),UInt32,POINTER(UInt32),c_char_p_no,UInt32,POINTER(UInt32),win32more.Foundation.PWSTR,c_void_p)(('SetupDiGetClassRegistryPropertyW', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'Property'),(1, 'PropertyRegDataType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'RequiredSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetDeviceRegistryPropertyA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,c_char_p_no,UInt32)(('SetupDiSetDeviceRegistryPropertyA', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Property'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetDeviceRegistryPropertyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,c_char_p_no,UInt32)(('SetupDiSetDeviceRegistryPropertyW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Property'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetClassRegistryPropertyA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),UInt32,c_char_p_no,UInt32,win32more.Foundation.PSTR,c_void_p)(('SetupDiSetClassRegistryPropertyA', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'Property'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetClassRegistryPropertyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),UInt32,c_char_p_no,UInt32,win32more.Foundation.PWSTR,c_void_p)(('SetupDiSetClassRegistryPropertyW', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'Property'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceInstallParamsA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINSTALL_PARAMS_A_head))(('SetupDiGetDeviceInstallParamsA', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DeviceInstallParams'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDeviceInstallParamsW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINSTALL_PARAMS_W_head))(('SetupDiGetDeviceInstallParamsW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DeviceInstallParams'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassInstallParamsA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER_head),UInt32,POINTER(UInt32))(('SetupDiGetClassInstallParamsA', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'ClassInstallParams'),(1, 'ClassInstallParamsSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassInstallParamsW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER_head),UInt32,POINTER(UInt32))(('SetupDiGetClassInstallParamsW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'ClassInstallParams'),(1, 'ClassInstallParamsSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetDeviceInstallParamsA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINSTALL_PARAMS_A_head))(('SetupDiSetDeviceInstallParamsA', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DeviceInstallParams'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetDeviceInstallParamsW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINSTALL_PARAMS_W_head))(('SetupDiSetDeviceInstallParamsW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DeviceInstallParams'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetClassInstallParamsA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER_head),UInt32)(('SetupDiSetClassInstallParamsA', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'ClassInstallParams'),(1, 'ClassInstallParamsSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetClassInstallParamsW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER_head),UInt32)(('SetupDiSetClassInstallParamsW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'ClassInstallParams'),(1, 'ClassInstallParamsSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDriverInstallParamsA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_A_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINSTALL_PARAMS_head))(('SetupDiGetDriverInstallParamsA', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverInfoData'),(1, 'DriverInstallParams'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetDriverInstallParamsW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_W_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINSTALL_PARAMS_head))(('SetupDiGetDriverInstallParamsW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverInfoData'),(1, 'DriverInstallParams'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetDriverInstallParamsA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_A_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINSTALL_PARAMS_head))(('SetupDiSetDriverInstallParamsA', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverInfoData'),(1, 'DriverInstallParams'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetDriverInstallParamsW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_W_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINSTALL_PARAMS_head))(('SetupDiSetDriverInstallParamsW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverInfoData'),(1, 'DriverInstallParams'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiLoadClassIcon():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),POINTER(win32more.UI.WindowsAndMessaging.HICON),POINTER(Int32))(('SetupDiLoadClassIcon', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'LargeIcon'),(1, 'MiniIconIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiLoadDeviceIcon():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,UInt32,UInt32,POINTER(win32more.UI.WindowsAndMessaging.HICON))(('SetupDiLoadDeviceIcon', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'cxIcon'),(1, 'cyIcon'),(1, 'Flags'),(1, 'hIcon'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiDrawMiniIcon():
    try:
        return WINFUNCTYPE(Int32,win32more.Graphics.Gdi.HDC,win32more.Foundation.RECT,Int32,UInt32)(('SetupDiDrawMiniIcon', windll['SETUPAPI.dll']), ((1, 'hdc'),(1, 'rc'),(1, 'MiniIconIndex'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassBitmapIndex():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),POINTER(Int32))(('SetupDiGetClassBitmapIndex', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'MiniIconIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassImageList():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_CLASSIMAGELIST_DATA_head))(('SetupDiGetClassImageList', windll['SETUPAPI.dll']), ((1, 'ClassImageListData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassImageListExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_CLASSIMAGELIST_DATA_head),win32more.Foundation.PSTR,c_void_p)(('SetupDiGetClassImageListExA', windll['SETUPAPI.dll']), ((1, 'ClassImageListData'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassImageListExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_CLASSIMAGELIST_DATA_head),win32more.Foundation.PWSTR,c_void_p)(('SetupDiGetClassImageListExW', windll['SETUPAPI.dll']), ((1, 'ClassImageListData'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassImageIndex():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_CLASSIMAGELIST_DATA_head),POINTER(Guid),POINTER(Int32))(('SetupDiGetClassImageIndex', windll['SETUPAPI.dll']), ((1, 'ClassImageListData'),(1, 'ClassGuid'),(1, 'ImageIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiDestroyClassImageList():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_CLASSIMAGELIST_DATA_head))(('SetupDiDestroyClassImageList', windll['SETUPAPI.dll']), ((1, 'ClassImageListData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassDevPropertySheetsA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.UI.Controls.PROPSHEETHEADERA_V2_head),UInt32,POINTER(UInt32),UInt32)(('SetupDiGetClassDevPropertySheetsA', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'PropertySheetHeader'),(1, 'PropertySheetHeaderPageListSize'),(1, 'RequiredSize'),(1, 'PropertySheetType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetClassDevPropertySheetsW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.UI.Controls.PROPSHEETHEADERW_V2_head),UInt32,POINTER(UInt32),UInt32)(('SetupDiGetClassDevPropertySheetsW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'PropertySheetHeader'),(1, 'PropertySheetHeaderPageListSize'),(1, 'RequiredSize'),(1, 'PropertySheetType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiAskForOEMDisk():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupDiAskForOEMDisk', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSelectOEMDrv():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupDiSelectOEMDrv', windll['SETUPAPI.dll']), ((1, 'hwndParent'),(1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiClassNameFromGuidA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),win32more.Foundation.PSTR,UInt32,POINTER(UInt32))(('SetupDiClassNameFromGuidA', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'ClassName'),(1, 'ClassNameSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiClassNameFromGuidW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(('SetupDiClassNameFromGuidW', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'ClassName'),(1, 'ClassNameSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiClassNameFromGuidExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),win32more.Foundation.PSTR,UInt32,POINTER(UInt32),win32more.Foundation.PSTR,c_void_p)(('SetupDiClassNameFromGuidExA', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'ClassName'),(1, 'ClassNameSize'),(1, 'RequiredSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiClassNameFromGuidExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(Guid),win32more.Foundation.PWSTR,UInt32,POINTER(UInt32),win32more.Foundation.PWSTR,c_void_p)(('SetupDiClassNameFromGuidExW', windll['SETUPAPI.dll']), ((1, 'ClassGuid'),(1, 'ClassName'),(1, 'ClassNameSize'),(1, 'RequiredSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiClassGuidsFromNameA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,POINTER(Guid),UInt32,POINTER(UInt32))(('SetupDiClassGuidsFromNameA', windll['SETUPAPI.dll']), ((1, 'ClassName'),(1, 'ClassGuidList'),(1, 'ClassGuidListSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiClassGuidsFromNameW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,POINTER(Guid),UInt32,POINTER(UInt32))(('SetupDiClassGuidsFromNameW', windll['SETUPAPI.dll']), ((1, 'ClassName'),(1, 'ClassGuidList'),(1, 'ClassGuidListSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiClassGuidsFromNameExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,POINTER(Guid),UInt32,POINTER(UInt32),win32more.Foundation.PSTR,c_void_p)(('SetupDiClassGuidsFromNameExA', windll['SETUPAPI.dll']), ((1, 'ClassName'),(1, 'ClassGuidList'),(1, 'ClassGuidListSize'),(1, 'RequiredSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiClassGuidsFromNameExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,POINTER(Guid),UInt32,POINTER(UInt32),win32more.Foundation.PWSTR,c_void_p)(('SetupDiClassGuidsFromNameExW', windll['SETUPAPI.dll']), ((1, 'ClassName'),(1, 'ClassGuidList'),(1, 'ClassGuidListSize'),(1, 'RequiredSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetHwProfileFriendlyNameA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PSTR,UInt32,POINTER(UInt32))(('SetupDiGetHwProfileFriendlyNameA', windll['SETUPAPI.dll']), ((1, 'HwProfile'),(1, 'FriendlyName'),(1, 'FriendlyNameSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetHwProfileFriendlyNameW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(('SetupDiGetHwProfileFriendlyNameW', windll['SETUPAPI.dll']), ((1, 'HwProfile'),(1, 'FriendlyName'),(1, 'FriendlyNameSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetHwProfileFriendlyNameExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PSTR,UInt32,POINTER(UInt32),win32more.Foundation.PSTR,c_void_p)(('SetupDiGetHwProfileFriendlyNameExA', windll['SETUPAPI.dll']), ((1, 'HwProfile'),(1, 'FriendlyName'),(1, 'FriendlyNameSize'),(1, 'RequiredSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetHwProfileFriendlyNameExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32),win32more.Foundation.PWSTR,c_void_p)(('SetupDiGetHwProfileFriendlyNameExW', windll['SETUPAPI.dll']), ((1, 'HwProfile'),(1, 'FriendlyName'),(1, 'FriendlyNameSize'),(1, 'RequiredSize'),(1, 'MachineName'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetWizardPage():
    try:
        return WINFUNCTYPE(win32more.UI.Controls.HPROPSHEETPAGE,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_INSTALLWIZARD_DATA_head),UInt32,UInt32)(('SetupDiGetWizardPage', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'InstallWizardData'),(1, 'PageType'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetSelectedDevice():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupDiGetSelectedDevice', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiSetSelectedDevice():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head))(('SetupDiSetSelectedDevice', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetActualModelsSectionA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head),win32more.Foundation.PSTR,UInt32,POINTER(UInt32),c_void_p)(('SetupDiGetActualModelsSectionA', windll['SETUPAPI.dll']), ((1, 'Context'),(1, 'AlternatePlatformInfo'),(1, 'InfSectionWithExt'),(1, 'InfSectionWithExtSize'),(1, 'RequiredSize'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetActualModelsSectionW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head),win32more.Foundation.PWSTR,UInt32,POINTER(UInt32),c_void_p)(('SetupDiGetActualModelsSectionW', windll['SETUPAPI.dll']), ((1, 'Context'),(1, 'AlternatePlatformInfo'),(1, 'InfSectionWithExt'),(1, 'InfSectionWithExtSize'),(1, 'RequiredSize'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetActualSectionToInstallA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,POINTER(UInt32),POINTER(win32more.Foundation.PSTR))(('SetupDiGetActualSectionToInstallA', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'InfSectionName'),(1, 'InfSectionWithExt'),(1, 'InfSectionWithExtSize'),(1, 'RequiredSize'),(1, 'Extension'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetActualSectionToInstallW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32),POINTER(win32more.Foundation.PWSTR))(('SetupDiGetActualSectionToInstallW', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'InfSectionName'),(1, 'InfSectionWithExt'),(1, 'InfSectionWithExtSize'),(1, 'RequiredSize'),(1, 'Extension'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetActualSectionToInstallExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head),win32more.Foundation.PSTR,UInt32,POINTER(UInt32),POINTER(win32more.Foundation.PSTR),c_void_p)(('SetupDiGetActualSectionToInstallExA', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'InfSectionName'),(1, 'AlternatePlatformInfo'),(1, 'InfSectionWithExt'),(1, 'InfSectionWithExtSize'),(1, 'RequiredSize'),(1, 'Extension'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetActualSectionToInstallExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head),win32more.Foundation.PWSTR,UInt32,POINTER(UInt32),POINTER(win32more.Foundation.PWSTR),c_void_p)(('SetupDiGetActualSectionToInstallExW', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'InfSectionName'),(1, 'AlternatePlatformInfo'),(1, 'InfSectionWithExt'),(1, 'InfSectionWithExtSize'),(1, 'RequiredSize'),(1, 'Extension'),(1, 'Reserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupEnumInfSectionsA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,win32more.Foundation.PSTR,UInt32,POINTER(UInt32))(('SetupEnumInfSectionsA', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'Index'),(1, 'Buffer'),(1, 'Size'),(1, 'SizeNeeded'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupEnumInfSectionsW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(('SetupEnumInfSectionsW', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'Index'),(1, 'Buffer'),(1, 'Size'),(1, 'SizeNeeded'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupVerifyInfFileA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_INF_SIGNER_INFO_V2_A_head))(('SetupVerifyInfFileA', windll['SETUPAPI.dll']), ((1, 'InfName'),(1, 'AltPlatformInfo'),(1, 'InfSignerInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupVerifyInfFileW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_INF_SIGNER_INFO_V2_W_head))(('SetupVerifyInfFileW', windll['SETUPAPI.dll']), ((1, 'InfName'),(1, 'AltPlatformInfo'),(1, 'InfSignerInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetCustomDevicePropertyA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),win32more.Foundation.PSTR,UInt32,POINTER(UInt32),c_char_p_no,UInt32,POINTER(UInt32))(('SetupDiGetCustomDevicePropertyA', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'CustomPropertyName'),(1, 'Flags'),(1, 'PropertyRegDataType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupDiGetCustomDevicePropertyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),win32more.Foundation.PWSTR,UInt32,POINTER(UInt32),c_char_p_no,UInt32,POINTER(UInt32))(('SetupDiGetCustomDevicePropertyW', windll['SETUPAPI.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'CustomPropertyName'),(1, 'Flags'),(1, 'PropertyRegDataType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'RequiredSize'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupConfigureWmiFromInfSectionA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PSTR,UInt32)(('SetupConfigureWmiFromInfSectionA', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'SectionName'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetupConfigureWmiFromInfSectionW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,win32more.Foundation.PWSTR,UInt32)(('SetupConfigureWmiFromInfSectionW', windll['SETUPAPI.dll']), ((1, 'InfHandle'),(1, 'SectionName'),(1, 'Flags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Add_Empty_Log_Conf():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UInt32,win32more.Data.HtmlHelp.PRIORITY,UInt32)(('CM_Add_Empty_Log_Conf', windll['CFGMGR32.dll']), ((1, 'plcLogConf'),(1, 'dnDevInst'),(1, 'Priority'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Add_Empty_Log_Conf_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UInt32,win32more.Data.HtmlHelp.PRIORITY,UInt32,IntPtr)(('CM_Add_Empty_Log_Conf_Ex', windll['CFGMGR32.dll']), ((1, 'plcLogConf'),(1, 'dnDevInst'),(1, 'Priority'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Add_IDA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,win32more.Foundation.PSTR,UInt32)(('CM_Add_IDA', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'pszID'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Add_IDW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,win32more.Foundation.PWSTR,UInt32)(('CM_Add_IDW', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'pszID'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Add_ID_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,win32more.Foundation.PSTR,UInt32,IntPtr)(('CM_Add_ID_ExA', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'pszID'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Add_ID_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,win32more.Foundation.PWSTR,UInt32,IntPtr)(('CM_Add_ID_ExW', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'pszID'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Add_Range():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt64,UInt64,UIntPtr,UInt32)(('CM_Add_Range', windll['CFGMGR32.dll']), ((1, 'ullStartValue'),(1, 'ullEndValue'),(1, 'rlh'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Add_Res_Des():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UIntPtr,UInt32,c_void_p,UInt32,UInt32)(('CM_Add_Res_Des', windll['CFGMGR32.dll']), ((1, 'prdResDes'),(1, 'lcLogConf'),(1, 'ResourceID'),(1, 'ResourceData'),(1, 'ResourceLen'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Add_Res_Des_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UIntPtr,UInt32,c_void_p,UInt32,UInt32,IntPtr)(('CM_Add_Res_Des_Ex', windll['CFGMGR32.dll']), ((1, 'prdResDes'),(1, 'lcLogConf'),(1, 'ResourceID'),(1, 'ResourceData'),(1, 'ResourceLen'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Connect_MachineA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,POINTER(IntPtr))(('CM_Connect_MachineA', windll['CFGMGR32.dll']), ((1, 'UNCServerName'),(1, 'phMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Connect_MachineW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,POINTER(IntPtr))(('CM_Connect_MachineW', windll['CFGMGR32.dll']), ((1, 'UNCServerName'),(1, 'phMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Create_DevNodeA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),win32more.Foundation.PSTR,UInt32,UInt32)(('CM_Create_DevNodeA', windll['CFGMGR32.dll']), ((1, 'pdnDevInst'),(1, 'pDeviceID'),(1, 'dnParent'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Create_DevNodeW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),win32more.Foundation.PWSTR,UInt32,UInt32)(('CM_Create_DevNodeW', windll['CFGMGR32.dll']), ((1, 'pdnDevInst'),(1, 'pDeviceID'),(1, 'dnParent'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Create_DevNode_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),win32more.Foundation.PSTR,UInt32,UInt32,IntPtr)(('CM_Create_DevNode_ExA', windll['CFGMGR32.dll']), ((1, 'pdnDevInst'),(1, 'pDeviceID'),(1, 'dnParent'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Create_DevNode_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),win32more.Foundation.PWSTR,UInt32,UInt32,IntPtr)(('CM_Create_DevNode_ExW', windll['CFGMGR32.dll']), ((1, 'pdnDevInst'),(1, 'pDeviceID'),(1, 'dnParent'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Create_Range_List():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UInt32)(('CM_Create_Range_List', windll['CFGMGR32.dll']), ((1, 'prlh'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Delete_Class_Key():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),UInt32)(('CM_Delete_Class_Key', windll['CFGMGR32.dll']), ((1, 'ClassGuid'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Delete_Class_Key_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),UInt32,IntPtr)(('CM_Delete_Class_Key_Ex', windll['CFGMGR32.dll']), ((1, 'ClassGuid'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Delete_DevNode_Key():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,UInt32)(('CM_Delete_DevNode_Key', windll['CFGMGR32.dll']), ((1, 'dnDevNode'),(1, 'ulHardwareProfile'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Delete_DevNode_Key_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,UInt32,IntPtr)(('CM_Delete_DevNode_Key_Ex', windll['CFGMGR32.dll']), ((1, 'dnDevNode'),(1, 'ulHardwareProfile'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Delete_Range():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt64,UInt64,UIntPtr,UInt32)(('CM_Delete_Range', windll['CFGMGR32.dll']), ((1, 'ullStartValue'),(1, 'ullEndValue'),(1, 'rlh'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Detect_Resource_Conflict():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,c_void_p,UInt32,POINTER(win32more.Foundation.BOOL),UInt32)(('CM_Detect_Resource_Conflict', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'ResourceID'),(1, 'ResourceData'),(1, 'ResourceLen'),(1, 'pbConflictDetected'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Detect_Resource_Conflict_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,c_void_p,UInt32,POINTER(win32more.Foundation.BOOL),UInt32,IntPtr)(('CM_Detect_Resource_Conflict_Ex', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'ResourceID'),(1, 'ResourceData'),(1, 'ResourceLen'),(1, 'pbConflictDetected'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Disable_DevNode():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32)(('CM_Disable_DevNode', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Disable_DevNode_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,IntPtr)(('CM_Disable_DevNode_Ex', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Disconnect_Machine():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,IntPtr)(('CM_Disconnect_Machine', windll['CFGMGR32.dll']), ((1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Dup_Range_List():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,UIntPtr,UInt32)(('CM_Dup_Range_List', windll['CFGMGR32.dll']), ((1, 'rlhOld'),(1, 'rlhNew'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Enable_DevNode():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32)(('CM_Enable_DevNode', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Enable_DevNode_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,IntPtr)(('CM_Enable_DevNode_Ex', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Enumerate_Classes():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(Guid),UInt32)(('CM_Enumerate_Classes', windll['CFGMGR32.dll']), ((1, 'ulClassIndex'),(1, 'ClassGuid'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Enumerate_Classes_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(Guid),UInt32,IntPtr)(('CM_Enumerate_Classes_Ex', windll['CFGMGR32.dll']), ((1, 'ulClassIndex'),(1, 'ClassGuid'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Enumerate_EnumeratorsA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,win32more.Foundation.PSTR,POINTER(UInt32),UInt32)(('CM_Enumerate_EnumeratorsA', windll['CFGMGR32.dll']), ((1, 'ulEnumIndex'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Enumerate_EnumeratorsW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,win32more.Foundation.PWSTR,POINTER(UInt32),UInt32)(('CM_Enumerate_EnumeratorsW', windll['CFGMGR32.dll']), ((1, 'ulEnumIndex'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Enumerate_Enumerators_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,win32more.Foundation.PSTR,POINTER(UInt32),UInt32,IntPtr)(('CM_Enumerate_Enumerators_ExA', windll['CFGMGR32.dll']), ((1, 'ulEnumIndex'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Enumerate_Enumerators_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,win32more.Foundation.PWSTR,POINTER(UInt32),UInt32,IntPtr)(('CM_Enumerate_Enumerators_ExW', windll['CFGMGR32.dll']), ((1, 'ulEnumIndex'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Find_Range():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt64),UInt64,UInt32,UInt64,UInt64,UIntPtr,UInt32)(('CM_Find_Range', windll['CFGMGR32.dll']), ((1, 'pullStart'),(1, 'ullStart'),(1, 'ulLength'),(1, 'ullAlignment'),(1, 'ullEnd'),(1, 'rlh'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_First_Range():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,POINTER(UInt64),POINTER(UInt64),POINTER(UIntPtr),UInt32)(('CM_First_Range', windll['CFGMGR32.dll']), ((1, 'rlh'),(1, 'pullStart'),(1, 'pullEnd'),(1, 'preElement'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Free_Log_Conf():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,UInt32)(('CM_Free_Log_Conf', windll['CFGMGR32.dll']), ((1, 'lcLogConfToBeFreed'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Free_Log_Conf_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,UInt32,IntPtr)(('CM_Free_Log_Conf_Ex', windll['CFGMGR32.dll']), ((1, 'lcLogConfToBeFreed'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Free_Log_Conf_Handle():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr)(('CM_Free_Log_Conf_Handle', windll['CFGMGR32.dll']), ((1, 'lcLogConf'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Free_Range_List():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,UInt32)(('CM_Free_Range_List', windll['CFGMGR32.dll']), ((1, 'rlh'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Free_Res_Des():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UIntPtr,UInt32)(('CM_Free_Res_Des', windll['CFGMGR32.dll']), ((1, 'prdResDes'),(1, 'rdResDes'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Free_Res_Des_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UIntPtr,UInt32,IntPtr)(('CM_Free_Res_Des_Ex', windll['CFGMGR32.dll']), ((1, 'prdResDes'),(1, 'rdResDes'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Free_Res_Des_Handle():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr)(('CM_Free_Res_Des_Handle', windll['CFGMGR32.dll']), ((1, 'rdResDes'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Child():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,UInt32)(('CM_Get_Child', windll['CFGMGR32.dll']), ((1, 'pdnDevInst'),(1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Child_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,UInt32,IntPtr)(('CM_Get_Child_Ex', windll['CFGMGR32.dll']), ((1, 'pdnDevInst'),(1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_NameA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),win32more.Foundation.PSTR,POINTER(UInt32),UInt32)(('CM_Get_Class_NameA', windll['CFGMGR32.dll']), ((1, 'ClassGuid'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_NameW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),win32more.Foundation.PWSTR,POINTER(UInt32),UInt32)(('CM_Get_Class_NameW', windll['CFGMGR32.dll']), ((1, 'ClassGuid'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_Name_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),win32more.Foundation.PSTR,POINTER(UInt32),UInt32,IntPtr)(('CM_Get_Class_Name_ExA', windll['CFGMGR32.dll']), ((1, 'ClassGuid'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_Name_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),win32more.Foundation.PWSTR,POINTER(UInt32),UInt32,IntPtr)(('CM_Get_Class_Name_ExW', windll['CFGMGR32.dll']), ((1, 'ClassGuid'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_Key_NameA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),win32more.Foundation.PSTR,POINTER(UInt32),UInt32)(('CM_Get_Class_Key_NameA', windll['CFGMGR32.dll']), ((1, 'ClassGuid'),(1, 'pszKeyName'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_Key_NameW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),win32more.Foundation.PWSTR,POINTER(UInt32),UInt32)(('CM_Get_Class_Key_NameW', windll['CFGMGR32.dll']), ((1, 'ClassGuid'),(1, 'pszKeyName'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_Key_Name_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),win32more.Foundation.PSTR,POINTER(UInt32),UInt32,IntPtr)(('CM_Get_Class_Key_Name_ExA', windll['CFGMGR32.dll']), ((1, 'ClassGuid'),(1, 'pszKeyName'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_Key_Name_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),win32more.Foundation.PWSTR,POINTER(UInt32),UInt32,IntPtr)(('CM_Get_Class_Key_Name_ExW', windll['CFGMGR32.dll']), ((1, 'ClassGuid'),(1, 'pszKeyName'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Depth():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,UInt32)(('CM_Get_Depth', windll['CFGMGR32.dll']), ((1, 'pulDepth'),(1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Depth_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,UInt32,IntPtr)(('CM_Get_Depth_Ex', windll['CFGMGR32.dll']), ((1, 'pulDepth'),(1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_IDA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,win32more.Foundation.PSTR,UInt32,UInt32)(('CM_Get_Device_IDA', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_IDW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,win32more.Foundation.PWSTR,UInt32,UInt32)(('CM_Get_Device_IDW', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_ID_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,win32more.Foundation.PSTR,UInt32,UInt32,IntPtr)(('CM_Get_Device_ID_ExA', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_ID_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,win32more.Foundation.PWSTR,UInt32,UInt32,IntPtr)(('CM_Get_Device_ID_ExW', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_ID_ListA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,UInt32)(('CM_Get_Device_ID_ListA', windll['CFGMGR32.dll']), ((1, 'pszFilter'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_ID_ListW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,UInt32)(('CM_Get_Device_ID_ListW', windll['CFGMGR32.dll']), ((1, 'pszFilter'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_ID_List_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,UInt32,IntPtr)(('CM_Get_Device_ID_List_ExA', windll['CFGMGR32.dll']), ((1, 'pszFilter'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_ID_List_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,UInt32,IntPtr)(('CM_Get_Device_ID_List_ExW', windll['CFGMGR32.dll']), ((1, 'pszFilter'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_ID_List_SizeA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),win32more.Foundation.PSTR,UInt32)(('CM_Get_Device_ID_List_SizeA', windll['CFGMGR32.dll']), ((1, 'pulLen'),(1, 'pszFilter'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_ID_List_SizeW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),win32more.Foundation.PWSTR,UInt32)(('CM_Get_Device_ID_List_SizeW', windll['CFGMGR32.dll']), ((1, 'pulLen'),(1, 'pszFilter'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_ID_List_Size_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),win32more.Foundation.PSTR,UInt32,IntPtr)(('CM_Get_Device_ID_List_Size_ExA', windll['CFGMGR32.dll']), ((1, 'pulLen'),(1, 'pszFilter'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_ID_List_Size_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),win32more.Foundation.PWSTR,UInt32,IntPtr)(('CM_Get_Device_ID_List_Size_ExW', windll['CFGMGR32.dll']), ((1, 'pulLen'),(1, 'pszFilter'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_ID_Size():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,UInt32)(('CM_Get_Device_ID_Size', windll['CFGMGR32.dll']), ((1, 'pulLen'),(1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_ID_Size_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,UInt32,IntPtr)(('CM_Get_Device_ID_Size_Ex', windll['CFGMGR32.dll']), ((1, 'pulLen'),(1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_PropertyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),c_char_p_no,POINTER(UInt32),UInt32)(('CM_Get_DevNode_PropertyW', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Property_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),c_char_p_no,POINTER(UInt32),UInt32,IntPtr)(('CM_Get_DevNode_Property_ExW', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Property_Keys():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),UInt32)(('CM_Get_DevNode_Property_Keys', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'PropertyKeyArray'),(1, 'PropertyKeyCount'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Property_Keys_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),UInt32,IntPtr)(('CM_Get_DevNode_Property_Keys_Ex', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'PropertyKeyArray'),(1, 'PropertyKeyCount'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Registry_PropertyA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,POINTER(UInt32),c_void_p,POINTER(UInt32),UInt32)(('CM_Get_DevNode_Registry_PropertyA', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'ulProperty'),(1, 'pulRegDataType'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Registry_PropertyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,POINTER(UInt32),c_void_p,POINTER(UInt32),UInt32)(('CM_Get_DevNode_Registry_PropertyW', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'ulProperty'),(1, 'pulRegDataType'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Registry_Property_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,POINTER(UInt32),c_void_p,POINTER(UInt32),UInt32,IntPtr)(('CM_Get_DevNode_Registry_Property_ExA', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'ulProperty'),(1, 'pulRegDataType'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Registry_Property_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,POINTER(UInt32),c_void_p,POINTER(UInt32),UInt32,IntPtr)(('CM_Get_DevNode_Registry_Property_ExW', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'ulProperty'),(1, 'pulRegDataType'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Custom_PropertyA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,win32more.Foundation.PSTR,POINTER(UInt32),c_void_p,POINTER(UInt32),UInt32)(('CM_Get_DevNode_Custom_PropertyA', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'pszCustomPropertyName'),(1, 'pulRegDataType'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Custom_PropertyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,win32more.Foundation.PWSTR,POINTER(UInt32),c_void_p,POINTER(UInt32),UInt32)(('CM_Get_DevNode_Custom_PropertyW', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'pszCustomPropertyName'),(1, 'pulRegDataType'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Custom_Property_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,win32more.Foundation.PSTR,POINTER(UInt32),c_void_p,POINTER(UInt32),UInt32,IntPtr)(('CM_Get_DevNode_Custom_Property_ExA', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'pszCustomPropertyName'),(1, 'pulRegDataType'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Custom_Property_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,win32more.Foundation.PWSTR,POINTER(UInt32),c_void_p,POINTER(UInt32),UInt32,IntPtr)(('CM_Get_DevNode_Custom_Property_ExW', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'pszCustomPropertyName'),(1, 'pulRegDataType'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Status():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),POINTER(UInt32),UInt32,UInt32)(('CM_Get_DevNode_Status', windll['CFGMGR32.dll']), ((1, 'pulStatus'),(1, 'pulProblemNumber'),(1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_DevNode_Status_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),POINTER(UInt32),UInt32,UInt32,IntPtr)(('CM_Get_DevNode_Status_Ex', windll['CFGMGR32.dll']), ((1, 'pulStatus'),(1, 'pulProblemNumber'),(1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_First_Log_Conf():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UInt32,UInt32)(('CM_Get_First_Log_Conf', windll['CFGMGR32.dll']), ((1, 'plcLogConf'),(1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_First_Log_Conf_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UInt32,UInt32,IntPtr)(('CM_Get_First_Log_Conf_Ex', windll['CFGMGR32.dll']), ((1, 'plcLogConf'),(1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Global_State():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32)(('CM_Get_Global_State', windll['CFGMGR32.dll']), ((1, 'pulState'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Global_State_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,IntPtr)(('CM_Get_Global_State_Ex', windll['CFGMGR32.dll']), ((1, 'pulState'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Hardware_Profile_InfoA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.HWProfileInfo_sA_head),UInt32)(('CM_Get_Hardware_Profile_InfoA', windll['CFGMGR32.dll']), ((1, 'ulIndex'),(1, 'pHWProfileInfo'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Hardware_Profile_Info_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.HWProfileInfo_sA_head),UInt32,IntPtr)(('CM_Get_Hardware_Profile_Info_ExA', windll['CFGMGR32.dll']), ((1, 'ulIndex'),(1, 'pHWProfileInfo'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Hardware_Profile_InfoW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.HWPROFILEINFO_W_head),UInt32)(('CM_Get_Hardware_Profile_InfoW', windll['CFGMGR32.dll']), ((1, 'ulIndex'),(1, 'pHWProfileInfo'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Hardware_Profile_Info_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.HWPROFILEINFO_W_head),UInt32,IntPtr)(('CM_Get_Hardware_Profile_Info_ExW', windll['CFGMGR32.dll']), ((1, 'ulIndex'),(1, 'pHWProfileInfo'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_HW_Prof_FlagsA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,UInt32,POINTER(UInt32),UInt32)(('CM_Get_HW_Prof_FlagsA', windll['CFGMGR32.dll']), ((1, 'pDeviceID'),(1, 'ulHardwareProfile'),(1, 'pulValue'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_HW_Prof_FlagsW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32),UInt32)(('CM_Get_HW_Prof_FlagsW', windll['CFGMGR32.dll']), ((1, 'pDeviceID'),(1, 'ulHardwareProfile'),(1, 'pulValue'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_HW_Prof_Flags_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,UInt32,POINTER(UInt32),UInt32,IntPtr)(('CM_Get_HW_Prof_Flags_ExA', windll['CFGMGR32.dll']), ((1, 'pDeviceID'),(1, 'ulHardwareProfile'),(1, 'pulValue'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_HW_Prof_Flags_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32),UInt32,IntPtr)(('CM_Get_HW_Prof_Flags_ExW', windll['CFGMGR32.dll']), ((1, 'pDeviceID'),(1, 'ulHardwareProfile'),(1, 'pulValue'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_AliasA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,POINTER(Guid),win32more.Foundation.PSTR,POINTER(UInt32),UInt32)(('CM_Get_Device_Interface_AliasA', windll['CFGMGR32.dll']), ((1, 'pszDeviceInterface'),(1, 'AliasInterfaceGuid'),(1, 'pszAliasDeviceInterface'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_AliasW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,POINTER(Guid),win32more.Foundation.PWSTR,POINTER(UInt32),UInt32)(('CM_Get_Device_Interface_AliasW', windll['CFGMGR32.dll']), ((1, 'pszDeviceInterface'),(1, 'AliasInterfaceGuid'),(1, 'pszAliasDeviceInterface'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_Alias_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,POINTER(Guid),win32more.Foundation.PSTR,POINTER(UInt32),UInt32,IntPtr)(('CM_Get_Device_Interface_Alias_ExA', windll['CFGMGR32.dll']), ((1, 'pszDeviceInterface'),(1, 'AliasInterfaceGuid'),(1, 'pszAliasDeviceInterface'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_Alias_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,POINTER(Guid),win32more.Foundation.PWSTR,POINTER(UInt32),UInt32,IntPtr)(('CM_Get_Device_Interface_Alias_ExW', windll['CFGMGR32.dll']), ((1, 'pszDeviceInterface'),(1, 'AliasInterfaceGuid'),(1, 'pszAliasDeviceInterface'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_ListA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,UInt32)(('CM_Get_Device_Interface_ListA', windll['CFGMGR32.dll']), ((1, 'InterfaceClassGuid'),(1, 'pDeviceID'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_ListW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,UInt32)(('CM_Get_Device_Interface_ListW', windll['CFGMGR32.dll']), ((1, 'InterfaceClassGuid'),(1, 'pDeviceID'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_List_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,UInt32,IntPtr)(('CM_Get_Device_Interface_List_ExA', windll['CFGMGR32.dll']), ((1, 'InterfaceClassGuid'),(1, 'pDeviceID'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_List_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,UInt32,IntPtr)(('CM_Get_Device_Interface_List_ExW', windll['CFGMGR32.dll']), ((1, 'InterfaceClassGuid'),(1, 'pDeviceID'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_List_SizeA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),POINTER(Guid),win32more.Foundation.PSTR,UInt32)(('CM_Get_Device_Interface_List_SizeA', windll['CFGMGR32.dll']), ((1, 'pulLen'),(1, 'InterfaceClassGuid'),(1, 'pDeviceID'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_List_SizeW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),POINTER(Guid),win32more.Foundation.PWSTR,UInt32)(('CM_Get_Device_Interface_List_SizeW', windll['CFGMGR32.dll']), ((1, 'pulLen'),(1, 'InterfaceClassGuid'),(1, 'pDeviceID'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_List_Size_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),POINTER(Guid),win32more.Foundation.PSTR,UInt32,IntPtr)(('CM_Get_Device_Interface_List_Size_ExA', windll['CFGMGR32.dll']), ((1, 'pulLen'),(1, 'InterfaceClassGuid'),(1, 'pDeviceID'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_List_Size_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),POINTER(Guid),win32more.Foundation.PWSTR,UInt32,IntPtr)(('CM_Get_Device_Interface_List_Size_ExW', windll['CFGMGR32.dll']), ((1, 'pulLen'),(1, 'InterfaceClassGuid'),(1, 'pDeviceID'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_PropertyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),c_char_p_no,POINTER(UInt32),UInt32)(('CM_Get_Device_Interface_PropertyW', windll['CFGMGR32.dll']), ((1, 'pszDeviceInterface'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_Property_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),c_char_p_no,POINTER(UInt32),UInt32,IntPtr)(('CM_Get_Device_Interface_Property_ExW', windll['CFGMGR32.dll']), ((1, 'pszDeviceInterface'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_Property_KeysW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),UInt32)(('CM_Get_Device_Interface_Property_KeysW', windll['CFGMGR32.dll']), ((1, 'pszDeviceInterface'),(1, 'PropertyKeyArray'),(1, 'PropertyKeyCount'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Device_Interface_Property_Keys_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),UInt32,IntPtr)(('CM_Get_Device_Interface_Property_Keys_ExW', windll['CFGMGR32.dll']), ((1, 'pszDeviceInterface'),(1, 'PropertyKeyArray'),(1, 'PropertyKeyCount'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Log_Conf_Priority():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,POINTER(UInt32),UInt32)(('CM_Get_Log_Conf_Priority', windll['CFGMGR32.dll']), ((1, 'lcLogConf'),(1, 'pPriority'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Log_Conf_Priority_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,POINTER(UInt32),UInt32,IntPtr)(('CM_Get_Log_Conf_Priority_Ex', windll['CFGMGR32.dll']), ((1, 'lcLogConf'),(1, 'pPriority'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Next_Log_Conf():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UIntPtr,UInt32)(('CM_Get_Next_Log_Conf', windll['CFGMGR32.dll']), ((1, 'plcLogConf'),(1, 'lcLogConf'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Next_Log_Conf_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UIntPtr,UInt32,IntPtr)(('CM_Get_Next_Log_Conf_Ex', windll['CFGMGR32.dll']), ((1, 'plcLogConf'),(1, 'lcLogConf'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Parent():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,UInt32)(('CM_Get_Parent', windll['CFGMGR32.dll']), ((1, 'pdnDevInst'),(1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Parent_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,UInt32,IntPtr)(('CM_Get_Parent_Ex', windll['CFGMGR32.dll']), ((1, 'pdnDevInst'),(1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Res_Des_Data():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,c_void_p,UInt32,UInt32)(('CM_Get_Res_Des_Data', windll['CFGMGR32.dll']), ((1, 'rdResDes'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Res_Des_Data_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,c_void_p,UInt32,UInt32,IntPtr)(('CM_Get_Res_Des_Data_Ex', windll['CFGMGR32.dll']), ((1, 'rdResDes'),(1, 'Buffer'),(1, 'BufferLen'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Res_Des_Data_Size():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UIntPtr,UInt32)(('CM_Get_Res_Des_Data_Size', windll['CFGMGR32.dll']), ((1, 'pulSize'),(1, 'rdResDes'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Res_Des_Data_Size_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UIntPtr,UInt32,IntPtr)(('CM_Get_Res_Des_Data_Size_Ex', windll['CFGMGR32.dll']), ((1, 'pulSize'),(1, 'rdResDes'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Sibling():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,UInt32)(('CM_Get_Sibling', windll['CFGMGR32.dll']), ((1, 'pdnDevInst'),(1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Sibling_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,UInt32,IntPtr)(('CM_Get_Sibling_Ex', windll['CFGMGR32.dll']), ((1, 'pdnDevInst'),(1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Version():
    try:
        return WINFUNCTYPE(UInt16,)(('CM_Get_Version', windll['CFGMGR32.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Version_Ex():
    try:
        return WINFUNCTYPE(UInt16,IntPtr)(('CM_Get_Version_Ex', windll['CFGMGR32.dll']), ((1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Is_Version_Available():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt16)(('CM_Is_Version_Available', windll['CFGMGR32.dll']), ((1, 'wVersion'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Is_Version_Available_Ex():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt16,IntPtr)(('CM_Is_Version_Available_Ex', windll['CFGMGR32.dll']), ((1, 'wVersion'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Intersect_Range_List():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,UIntPtr,UIntPtr,UInt32)(('CM_Intersect_Range_List', windll['CFGMGR32.dll']), ((1, 'rlhOld1'),(1, 'rlhOld2'),(1, 'rlhNew'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Invert_Range_List():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,UIntPtr,UInt64,UInt32)(('CM_Invert_Range_List', windll['CFGMGR32.dll']), ((1, 'rlhOld'),(1, 'rlhNew'),(1, 'ullMaxValue'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Locate_DevNodeA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),win32more.Foundation.PSTR,UInt32)(('CM_Locate_DevNodeA', windll['CFGMGR32.dll']), ((1, 'pdnDevInst'),(1, 'pDeviceID'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Locate_DevNodeW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),win32more.Foundation.PWSTR,UInt32)(('CM_Locate_DevNodeW', windll['CFGMGR32.dll']), ((1, 'pdnDevInst'),(1, 'pDeviceID'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Locate_DevNode_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),win32more.Foundation.PSTR,UInt32,IntPtr)(('CM_Locate_DevNode_ExA', windll['CFGMGR32.dll']), ((1, 'pdnDevInst'),(1, 'pDeviceID'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Locate_DevNode_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),win32more.Foundation.PWSTR,UInt32,IntPtr)(('CM_Locate_DevNode_ExW', windll['CFGMGR32.dll']), ((1, 'pdnDevInst'),(1, 'pDeviceID'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Merge_Range_List():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,UIntPtr,UIntPtr,UInt32)(('CM_Merge_Range_List', windll['CFGMGR32.dll']), ((1, 'rlhOld1'),(1, 'rlhOld2'),(1, 'rlhNew'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Modify_Res_Des():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UIntPtr,UInt32,c_void_p,UInt32,UInt32)(('CM_Modify_Res_Des', windll['CFGMGR32.dll']), ((1, 'prdResDes'),(1, 'rdResDes'),(1, 'ResourceID'),(1, 'ResourceData'),(1, 'ResourceLen'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Modify_Res_Des_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UIntPtr,UInt32,c_void_p,UInt32,UInt32,IntPtr)(('CM_Modify_Res_Des_Ex', windll['CFGMGR32.dll']), ((1, 'prdResDes'),(1, 'rdResDes'),(1, 'ResourceID'),(1, 'ResourceData'),(1, 'ResourceLen'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Move_DevNode():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,UInt32)(('CM_Move_DevNode', windll['CFGMGR32.dll']), ((1, 'dnFromDevInst'),(1, 'dnToDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Move_DevNode_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,UInt32,IntPtr)(('CM_Move_DevNode_Ex', windll['CFGMGR32.dll']), ((1, 'dnFromDevInst'),(1, 'dnToDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Next_Range():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),POINTER(UInt64),POINTER(UInt64),UInt32)(('CM_Next_Range', windll['CFGMGR32.dll']), ((1, 'preElement'),(1, 'pullStart'),(1, 'pullEnd'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Next_Res_Des():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UIntPtr,UInt32,POINTER(UInt32),UInt32)(('CM_Get_Next_Res_Des', windll['CFGMGR32.dll']), ((1, 'prdResDes'),(1, 'rdResDes'),(1, 'ForResource'),(1, 'pResourceID'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Next_Res_Des_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UIntPtr,UInt32,POINTER(UInt32),UInt32,IntPtr)(('CM_Get_Next_Res_Des_Ex', windll['CFGMGR32.dll']), ((1, 'prdResDes'),(1, 'rdResDes'),(1, 'ForResource'),(1, 'pResourceID'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Open_Class_KeyA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),win32more.Foundation.PSTR,UInt32,UInt32,POINTER(win32more.System.Registry.HKEY),UInt32)(('CM_Open_Class_KeyA', windll['CFGMGR32.dll']), ((1, 'ClassGuid'),(1, 'pszClassName'),(1, 'samDesired'),(1, 'Disposition'),(1, 'phkClass'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Open_Class_KeyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),win32more.Foundation.PWSTR,UInt32,UInt32,POINTER(win32more.System.Registry.HKEY),UInt32)(('CM_Open_Class_KeyW', windll['CFGMGR32.dll']), ((1, 'ClassGuid'),(1, 'pszClassName'),(1, 'samDesired'),(1, 'Disposition'),(1, 'phkClass'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Open_Class_Key_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),win32more.Foundation.PSTR,UInt32,UInt32,POINTER(win32more.System.Registry.HKEY),UInt32,IntPtr)(('CM_Open_Class_Key_ExA', windll['CFGMGR32.dll']), ((1, 'ClassGuid'),(1, 'pszClassName'),(1, 'samDesired'),(1, 'Disposition'),(1, 'phkClass'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Open_Class_Key_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),win32more.Foundation.PWSTR,UInt32,UInt32,POINTER(win32more.System.Registry.HKEY),UInt32,IntPtr)(('CM_Open_Class_Key_ExW', windll['CFGMGR32.dll']), ((1, 'ClassGuid'),(1, 'pszClassName'),(1, 'samDesired'),(1, 'Disposition'),(1, 'phkClass'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Open_DevNode_Key():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,UInt32,UInt32,POINTER(win32more.System.Registry.HKEY),UInt32)(('CM_Open_DevNode_Key', windll['CFGMGR32.dll']), ((1, 'dnDevNode'),(1, 'samDesired'),(1, 'ulHardwareProfile'),(1, 'Disposition'),(1, 'phkDevice'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Open_DevNode_Key_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,UInt32,UInt32,POINTER(win32more.System.Registry.HKEY),UInt32,IntPtr)(('CM_Open_DevNode_Key_Ex', windll['CFGMGR32.dll']), ((1, 'dnDevNode'),(1, 'samDesired'),(1, 'ulHardwareProfile'),(1, 'Disposition'),(1, 'phkDevice'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Open_Device_Interface_KeyA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,UInt32,UInt32,POINTER(win32more.System.Registry.HKEY),UInt32)(('CM_Open_Device_Interface_KeyA', windll['CFGMGR32.dll']), ((1, 'pszDeviceInterface'),(1, 'samDesired'),(1, 'Disposition'),(1, 'phkDeviceInterface'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Open_Device_Interface_KeyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,UInt32,UInt32,POINTER(win32more.System.Registry.HKEY),UInt32)(('CM_Open_Device_Interface_KeyW', windll['CFGMGR32.dll']), ((1, 'pszDeviceInterface'),(1, 'samDesired'),(1, 'Disposition'),(1, 'phkDeviceInterface'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Open_Device_Interface_Key_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,UInt32,UInt32,POINTER(win32more.System.Registry.HKEY),UInt32,IntPtr)(('CM_Open_Device_Interface_Key_ExA', windll['CFGMGR32.dll']), ((1, 'pszDeviceInterface'),(1, 'samDesired'),(1, 'Disposition'),(1, 'phkDeviceInterface'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Open_Device_Interface_Key_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,UInt32,UInt32,POINTER(win32more.System.Registry.HKEY),UInt32,IntPtr)(('CM_Open_Device_Interface_Key_ExW', windll['CFGMGR32.dll']), ((1, 'pszDeviceInterface'),(1, 'samDesired'),(1, 'Disposition'),(1, 'phkDeviceInterface'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Delete_Device_Interface_KeyA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,UInt32)(('CM_Delete_Device_Interface_KeyA', windll['CFGMGR32.dll']), ((1, 'pszDeviceInterface'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Delete_Device_Interface_KeyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,UInt32)(('CM_Delete_Device_Interface_KeyW', windll['CFGMGR32.dll']), ((1, 'pszDeviceInterface'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Delete_Device_Interface_Key_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,UInt32,IntPtr)(('CM_Delete_Device_Interface_Key_ExA', windll['CFGMGR32.dll']), ((1, 'pszDeviceInterface'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Delete_Device_Interface_Key_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,UInt32,IntPtr)(('CM_Delete_Device_Interface_Key_ExW', windll['CFGMGR32.dll']), ((1, 'pszDeviceInterface'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Query_Arbitrator_Free_Data():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,c_void_p,UInt32,UInt32,UInt32,UInt32)(('CM_Query_Arbitrator_Free_Data', windll['CFGMGR32.dll']), ((1, 'pData'),(1, 'DataLen'),(1, 'dnDevInst'),(1, 'ResourceID'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Query_Arbitrator_Free_Data_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,c_void_p,UInt32,UInt32,UInt32,UInt32,IntPtr)(('CM_Query_Arbitrator_Free_Data_Ex', windll['CFGMGR32.dll']), ((1, 'pData'),(1, 'DataLen'),(1, 'dnDevInst'),(1, 'ResourceID'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Query_Arbitrator_Free_Size():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,UInt32,UInt32)(('CM_Query_Arbitrator_Free_Size', windll['CFGMGR32.dll']), ((1, 'pulSize'),(1, 'dnDevInst'),(1, 'ResourceID'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Query_Arbitrator_Free_Size_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UInt32),UInt32,UInt32,UInt32,IntPtr)(('CM_Query_Arbitrator_Free_Size_Ex', windll['CFGMGR32.dll']), ((1, 'pulSize'),(1, 'dnDevInst'),(1, 'ResourceID'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Query_Remove_SubTree():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32)(('CM_Query_Remove_SubTree', windll['CFGMGR32.dll']), ((1, 'dnAncestor'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Query_Remove_SubTree_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,IntPtr)(('CM_Query_Remove_SubTree_Ex', windll['CFGMGR32.dll']), ((1, 'dnAncestor'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Query_And_Remove_SubTreeA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.PNP_VETO_TYPE),win32more.Foundation.PSTR,UInt32,UInt32)(('CM_Query_And_Remove_SubTreeA', windll['CFGMGR32.dll']), ((1, 'dnAncestor'),(1, 'pVetoType'),(1, 'pszVetoName'),(1, 'ulNameLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Query_And_Remove_SubTreeW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.PNP_VETO_TYPE),win32more.Foundation.PWSTR,UInt32,UInt32)(('CM_Query_And_Remove_SubTreeW', windll['CFGMGR32.dll']), ((1, 'dnAncestor'),(1, 'pVetoType'),(1, 'pszVetoName'),(1, 'ulNameLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Query_And_Remove_SubTree_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.PNP_VETO_TYPE),win32more.Foundation.PSTR,UInt32,UInt32,IntPtr)(('CM_Query_And_Remove_SubTree_ExA', windll['CFGMGR32.dll']), ((1, 'dnAncestor'),(1, 'pVetoType'),(1, 'pszVetoName'),(1, 'ulNameLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Query_And_Remove_SubTree_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.PNP_VETO_TYPE),win32more.Foundation.PWSTR,UInt32,UInt32,IntPtr)(('CM_Query_And_Remove_SubTree_ExW', windll['CFGMGR32.dll']), ((1, 'dnAncestor'),(1, 'pVetoType'),(1, 'pszVetoName'),(1, 'ulNameLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Request_Device_EjectA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.PNP_VETO_TYPE),win32more.Foundation.PSTR,UInt32,UInt32)(('CM_Request_Device_EjectA', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'pVetoType'),(1, 'pszVetoName'),(1, 'ulNameLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Request_Device_Eject_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.PNP_VETO_TYPE),win32more.Foundation.PSTR,UInt32,UInt32,IntPtr)(('CM_Request_Device_Eject_ExA', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'pVetoType'),(1, 'pszVetoName'),(1, 'ulNameLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Request_Device_EjectW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.PNP_VETO_TYPE),win32more.Foundation.PWSTR,UInt32,UInt32)(('CM_Request_Device_EjectW', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'pVetoType'),(1, 'pszVetoName'),(1, 'ulNameLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Request_Device_Eject_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.PNP_VETO_TYPE),win32more.Foundation.PWSTR,UInt32,UInt32,IntPtr)(('CM_Request_Device_Eject_ExW', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'pVetoType'),(1, 'pszVetoName'),(1, 'ulNameLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Reenumerate_DevNode():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32)(('CM_Reenumerate_DevNode', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Reenumerate_DevNode_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,IntPtr)(('CM_Reenumerate_DevNode_Ex', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Register_Device_InterfaceA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(Guid),win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(UInt32),UInt32)(('CM_Register_Device_InterfaceA', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'InterfaceClassGuid'),(1, 'pszReference'),(1, 'pszDeviceInterface'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Register_Device_InterfaceW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(Guid),win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,POINTER(UInt32),UInt32)(('CM_Register_Device_InterfaceW', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'InterfaceClassGuid'),(1, 'pszReference'),(1, 'pszDeviceInterface'),(1, 'pulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Register_Device_Interface_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(Guid),win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(UInt32),UInt32,IntPtr)(('CM_Register_Device_Interface_ExA', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'InterfaceClassGuid'),(1, 'pszReference'),(1, 'pszDeviceInterface'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Register_Device_Interface_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(Guid),win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,POINTER(UInt32),UInt32,IntPtr)(('CM_Register_Device_Interface_ExW', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'InterfaceClassGuid'),(1, 'pszReference'),(1, 'pszDeviceInterface'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_DevNode_Problem_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,UInt32,IntPtr)(('CM_Set_DevNode_Problem_Ex', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'ulProblem'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_DevNode_Problem():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,UInt32)(('CM_Set_DevNode_Problem', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'ulProblem'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Unregister_Device_InterfaceA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,UInt32)(('CM_Unregister_Device_InterfaceA', windll['CFGMGR32.dll']), ((1, 'pszDeviceInterface'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Unregister_Device_InterfaceW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,UInt32)(('CM_Unregister_Device_InterfaceW', windll['CFGMGR32.dll']), ((1, 'pszDeviceInterface'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Unregister_Device_Interface_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,UInt32,IntPtr)(('CM_Unregister_Device_Interface_ExA', windll['CFGMGR32.dll']), ((1, 'pszDeviceInterface'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Unregister_Device_Interface_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,UInt32,IntPtr)(('CM_Unregister_Device_Interface_ExW', windll['CFGMGR32.dll']), ((1, 'pszDeviceInterface'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Register_Device_Driver():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32)(('CM_Register_Device_Driver', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Register_Device_Driver_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,IntPtr)(('CM_Register_Device_Driver_Ex', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Remove_SubTree():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32)(('CM_Remove_SubTree', windll['CFGMGR32.dll']), ((1, 'dnAncestor'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Remove_SubTree_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,IntPtr)(('CM_Remove_SubTree_Ex', windll['CFGMGR32.dll']), ((1, 'dnAncestor'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_DevNode_PropertyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,c_char_p_no,UInt32,UInt32)(('CM_Set_DevNode_PropertyW', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_DevNode_Property_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,c_char_p_no,UInt32,UInt32,IntPtr)(('CM_Set_DevNode_Property_ExW', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_DevNode_Registry_PropertyA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,c_void_p,UInt32,UInt32)(('CM_Set_DevNode_Registry_PropertyA', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'ulProperty'),(1, 'Buffer'),(1, 'ulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_DevNode_Registry_PropertyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,c_void_p,UInt32,UInt32)(('CM_Set_DevNode_Registry_PropertyW', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'ulProperty'),(1, 'Buffer'),(1, 'ulLength'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_DevNode_Registry_Property_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,c_void_p,UInt32,UInt32,IntPtr)(('CM_Set_DevNode_Registry_Property_ExA', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'ulProperty'),(1, 'Buffer'),(1, 'ulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_DevNode_Registry_Property_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,c_void_p,UInt32,UInt32,IntPtr)(('CM_Set_DevNode_Registry_Property_ExW', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'ulProperty'),(1, 'Buffer'),(1, 'ulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_Device_Interface_PropertyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,c_char_p_no,UInt32,UInt32)(('CM_Set_Device_Interface_PropertyW', windll['CFGMGR32.dll']), ((1, 'pszDeviceInterface'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_Device_Interface_Property_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,c_char_p_no,UInt32,UInt32,IntPtr)(('CM_Set_Device_Interface_Property_ExW', windll['CFGMGR32.dll']), ((1, 'pszDeviceInterface'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Is_Dock_Station_Present():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(win32more.Foundation.BOOL))(('CM_Is_Dock_Station_Present', windll['CFGMGR32.dll']), ((1, 'pbPresent'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Is_Dock_Station_Present_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(win32more.Foundation.BOOL),IntPtr)(('CM_Is_Dock_Station_Present_Ex', windll['CFGMGR32.dll']), ((1, 'pbPresent'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Request_Eject_PC():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,)(('CM_Request_Eject_PC', windll['CFGMGR32.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Request_Eject_PC_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,IntPtr)(('CM_Request_Eject_PC_Ex', windll['CFGMGR32.dll']), ((1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_HW_Prof_FlagsA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,UInt32,UInt32,UInt32)(('CM_Set_HW_Prof_FlagsA', windll['CFGMGR32.dll']), ((1, 'pDeviceID'),(1, 'ulConfig'),(1, 'ulValue'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_HW_Prof_FlagsW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,UInt32,UInt32,UInt32)(('CM_Set_HW_Prof_FlagsW', windll['CFGMGR32.dll']), ((1, 'pDeviceID'),(1, 'ulConfig'),(1, 'ulValue'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_HW_Prof_Flags_ExA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PSTR,UInt32,UInt32,UInt32,IntPtr)(('CM_Set_HW_Prof_Flags_ExA', windll['CFGMGR32.dll']), ((1, 'pDeviceID'),(1, 'ulConfig'),(1, 'ulValue'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_HW_Prof_Flags_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Foundation.PWSTR,UInt32,UInt32,UInt32,IntPtr)(('CM_Set_HW_Prof_Flags_ExW', windll['CFGMGR32.dll']), ((1, 'pDeviceID'),(1, 'ulConfig'),(1, 'ulValue'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Setup_DevNode():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32)(('CM_Setup_DevNode', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Setup_DevNode_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,IntPtr)(('CM_Setup_DevNode_Ex', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Test_Range_Available():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt64,UInt64,UIntPtr,UInt32)(('CM_Test_Range_Available', windll['CFGMGR32.dll']), ((1, 'ullStartValue'),(1, 'ullEndValue'),(1, 'rlh'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Uninstall_DevNode():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32)(('CM_Uninstall_DevNode', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Uninstall_DevNode_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,IntPtr)(('CM_Uninstall_DevNode_Ex', windll['CFGMGR32.dll']), ((1, 'dnDevInst'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Run_Detection():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32)(('CM_Run_Detection', windll['CFGMGR32.dll']), ((1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Run_Detection_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,IntPtr)(('CM_Run_Detection_Ex', windll['CFGMGR32.dll']), ((1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_HW_Prof():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32)(('CM_Set_HW_Prof', windll['CFGMGR32.dll']), ((1, 'ulHardwareProfile'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_HW_Prof_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32,UInt32,IntPtr)(('CM_Set_HW_Prof_Ex', windll['CFGMGR32.dll']), ((1, 'ulHardwareProfile'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Query_Resource_Conflict_List():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(UIntPtr),UInt32,UInt32,c_void_p,UInt32,UInt32,IntPtr)(('CM_Query_Resource_Conflict_List', windll['CFGMGR32.dll']), ((1, 'pclConflictList'),(1, 'dnDevInst'),(1, 'ResourceID'),(1, 'ResourceData'),(1, 'ResourceLen'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Free_Resource_Conflict_Handle():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr)(('CM_Free_Resource_Conflict_Handle', windll['CFGMGR32.dll']), ((1, 'clConflictList'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Resource_Conflict_Count():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,POINTER(UInt32))(('CM_Get_Resource_Conflict_Count', windll['CFGMGR32.dll']), ((1, 'clConflictList'),(1, 'pulCount'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Resource_Conflict_DetailsA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.CONFLICT_DETAILS_A_head))(('CM_Get_Resource_Conflict_DetailsA', windll['CFGMGR32.dll']), ((1, 'clConflictList'),(1, 'ulIndex'),(1, 'pConflictDetails'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Resource_Conflict_DetailsW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UIntPtr,UInt32,POINTER(win32more.Devices.DeviceAndDriverInstallation.CONFLICT_DETAILS_W_head))(('CM_Get_Resource_Conflict_DetailsW', windll['CFGMGR32.dll']), ((1, 'clConflictList'),(1, 'ulIndex'),(1, 'pConflictDetails'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_PropertyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),c_char_p_no,POINTER(UInt32),UInt32)(('CM_Get_Class_PropertyW', windll['CFGMGR32.dll']), ((1, 'ClassGUID'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_Property_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),c_char_p_no,POINTER(UInt32),UInt32,IntPtr)(('CM_Get_Class_Property_ExW', windll['CFGMGR32.dll']), ((1, 'ClassGUID'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_Property_Keys():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),UInt32)(('CM_Get_Class_Property_Keys', windll['CFGMGR32.dll']), ((1, 'ClassGUID'),(1, 'PropertyKeyArray'),(1, 'PropertyKeyCount'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_Property_Keys_Ex():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),POINTER(UInt32),UInt32,IntPtr)(('CM_Get_Class_Property_Keys_Ex', windll['CFGMGR32.dll']), ((1, 'ClassGUID'),(1, 'PropertyKeyArray'),(1, 'PropertyKeyCount'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_Class_PropertyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,c_char_p_no,UInt32,UInt32)(('CM_Set_Class_PropertyW', windll['CFGMGR32.dll']), ((1, 'ClassGUID'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'ulFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_Class_Property_ExW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),POINTER(win32more.Devices.Properties.DEVPROPKEY_head),UInt32,c_char_p_no,UInt32,UInt32,IntPtr)(('CM_Set_Class_Property_ExW', windll['CFGMGR32.dll']), ((1, 'ClassGUID'),(1, 'PropertyKey'),(1, 'PropertyType'),(1, 'PropertyBuffer'),(1, 'PropertyBufferSize'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_Registry_PropertyA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),UInt32,POINTER(UInt32),c_void_p,POINTER(UInt32),UInt32,IntPtr)(('CM_Get_Class_Registry_PropertyA', windll['CFGMGR32.dll']), ((1, 'ClassGuid'),(1, 'ulProperty'),(1, 'pulRegDataType'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Get_Class_Registry_PropertyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),UInt32,POINTER(UInt32),c_void_p,POINTER(UInt32),UInt32,IntPtr)(('CM_Get_Class_Registry_PropertyW', windll['CFGMGR32.dll']), ((1, 'ClassGuid'),(1, 'ulProperty'),(1, 'pulRegDataType'),(1, 'Buffer'),(1, 'pulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_Class_Registry_PropertyA():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),UInt32,c_void_p,UInt32,UInt32,IntPtr)(('CM_Set_Class_Registry_PropertyA', windll['CFGMGR32.dll']), ((1, 'ClassGuid'),(1, 'ulProperty'),(1, 'Buffer'),(1, 'ulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Set_Class_Registry_PropertyW():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(Guid),UInt32,c_void_p,UInt32,UInt32,IntPtr)(('CM_Set_Class_Registry_PropertyW', windll['CFGMGR32.dll']), ((1, 'ClassGuid'),(1, 'ulProperty'),(1, 'Buffer'),(1, 'ulLength'),(1, 'ulFlags'),(1, 'hMachine'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CMP_WaitNoPendingInstallEvents():
    try:
        return WINFUNCTYPE(UInt32,UInt32)(('CMP_WaitNoPendingInstallEvents', windll['CFGMGR32.dll']), ((1, 'dwTimeout'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Register_Notification():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,POINTER(win32more.Devices.DeviceAndDriverInstallation.CM_NOTIFY_FILTER_head),c_void_p,win32more.Devices.DeviceAndDriverInstallation.PCM_NOTIFY_CALLBACK,POINTER(IntPtr))(('CM_Register_Notification', windll['CFGMGR32.dll']), ((1, 'pFilter'),(1, 'pContext'),(1, 'pCallback'),(1, 'pNotifyContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_Unregister_Notification():
    try:
        return WINFUNCTYPE(win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,win32more.Devices.DeviceAndDriverInstallation.HCMNOTIFICATION)(('CM_Unregister_Notification', windll['CFGMGR32.dll']), ((1, 'NotifyContext'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CM_MapCrToWin32Err():
    try:
        return WINFUNCTYPE(UInt32,win32more.Devices.DeviceAndDriverInstallation.CONFIGRET,UInt32)(('CM_MapCrToWin32Err', windll['CFGMGR32.dll']), ((1, 'CmReturnCode'),(1, 'DefaultErr'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_UpdateDriverForPlugAndPlayDevicesA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,POINTER(win32more.Foundation.BOOL))(('UpdateDriverForPlugAndPlayDevicesA', windll['newdev.dll']), ((1, 'hwndParent'),(1, 'HardwareId'),(1, 'FullInfPath'),(1, 'InstallFlags'),(1, 'bRebootRequired'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_UpdateDriverForPlugAndPlayDevicesW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,POINTER(win32more.Foundation.BOOL))(('UpdateDriverForPlugAndPlayDevicesW', windll['newdev.dll']), ((1, 'hwndParent'),(1, 'HardwareId'),(1, 'FullInfPath'),(1, 'InstallFlags'),(1, 'bRebootRequired'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DiInstallDevice():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_A_head),UInt32,POINTER(win32more.Foundation.BOOL))(('DiInstallDevice', windll['newdev.dll']), ((1, 'hwndParent'),(1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'DriverInfoData'),(1, 'Flags'),(1, 'NeedReboot'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DiInstallDriverW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PWSTR,UInt32,POINTER(win32more.Foundation.BOOL))(('DiInstallDriverW', windll['newdev.dll']), ((1, 'hwndParent'),(1, 'InfPath'),(1, 'Flags'),(1, 'NeedReboot'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DiInstallDriverA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PSTR,UInt32,POINTER(win32more.Foundation.BOOL))(('DiInstallDriverA', windll['newdev.dll']), ((1, 'hwndParent'),(1, 'InfPath'),(1, 'Flags'),(1, 'NeedReboot'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DiUninstallDevice():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,POINTER(win32more.Foundation.BOOL))(('DiUninstallDevice', windll['newdev.dll']), ((1, 'hwndParent'),(1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Flags'),(1, 'NeedReboot'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DiUninstallDriverW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PWSTR,UInt32,POINTER(win32more.Foundation.BOOL))(('DiUninstallDriverW', windll['newdev.dll']), ((1, 'hwndParent'),(1, 'InfPath'),(1, 'Flags'),(1, 'NeedReboot'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DiUninstallDriverA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PSTR,UInt32,POINTER(win32more.Foundation.BOOL))(('DiUninstallDriverA', windll['newdev.dll']), ((1, 'hwndParent'),(1, 'InfPath'),(1, 'Flags'),(1, 'NeedReboot'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DiShowUpdateDevice():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),UInt32,POINTER(win32more.Foundation.BOOL))(('DiShowUpdateDevice', windll['newdev.dll']), ((1, 'hwndParent'),(1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'Flags'),(1, 'NeedReboot'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DiRollbackDriver():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),win32more.Foundation.HWND,UInt32,POINTER(win32more.Foundation.BOOL))(('DiRollbackDriver', windll['newdev.dll']), ((1, 'DeviceInfoSet'),(1, 'DeviceInfoData'),(1, 'hwndParent'),(1, 'Flags'),(1, 'NeedReboot'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_DiShowUpdateDriver():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.HWND,win32more.Foundation.PWSTR,UInt32,POINTER(win32more.Foundation.BOOL))(('DiShowUpdateDriver', windll['newdev.dll']), ((1, 'hwndParent'),(1, 'FilePath'),(1, 'Flags'),(1, 'NeedReboot'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_BUSNUMBER_DES_head():
    class BUSNUMBER_DES(Structure):
        pass
    return BUSNUMBER_DES
def _define_BUSNUMBER_DES():
    BUSNUMBER_DES = win32more.Devices.DeviceAndDriverInstallation.BUSNUMBER_DES_head
    BUSNUMBER_DES._pack_ = 1
    BUSNUMBER_DES._fields_ = [
        ('BUSD_Count', UInt32),
        ('BUSD_Type', UInt32),
        ('BUSD_Flags', UInt32),
        ('BUSD_Alloc_Base', UInt32),
        ('BUSD_Alloc_End', UInt32),
    ]
    return BUSNUMBER_DES
def _define_BUSNUMBER_RANGE_head():
    class BUSNUMBER_RANGE(Structure):
        pass
    return BUSNUMBER_RANGE
def _define_BUSNUMBER_RANGE():
    BUSNUMBER_RANGE = win32more.Devices.DeviceAndDriverInstallation.BUSNUMBER_RANGE_head
    BUSNUMBER_RANGE._pack_ = 1
    BUSNUMBER_RANGE._fields_ = [
        ('BUSR_Min', UInt32),
        ('BUSR_Max', UInt32),
        ('BUSR_nBusNumbers', UInt32),
        ('BUSR_Flags', UInt32),
    ]
    return BUSNUMBER_RANGE
def _define_BUSNUMBER_RESOURCE_head():
    class BUSNUMBER_RESOURCE(Structure):
        pass
    return BUSNUMBER_RESOURCE
def _define_BUSNUMBER_RESOURCE():
    BUSNUMBER_RESOURCE = win32more.Devices.DeviceAndDriverInstallation.BUSNUMBER_RESOURCE_head
    BUSNUMBER_RESOURCE._pack_ = 1
    BUSNUMBER_RESOURCE._fields_ = [
        ('BusNumber_Header', win32more.Devices.DeviceAndDriverInstallation.BUSNUMBER_DES),
        ('BusNumber_Data', win32more.Devices.DeviceAndDriverInstallation.BUSNUMBER_RANGE * 1),
    ]
    return BUSNUMBER_RESOURCE
def _define_CABINET_INFO_A_head():
    class CABINET_INFO_A(Structure):
        pass
    return CABINET_INFO_A
def _define_CABINET_INFO_A():
    CABINET_INFO_A = win32more.Devices.DeviceAndDriverInstallation.CABINET_INFO_A_head
    CABINET_INFO_A._fields_ = [
        ('CabinetPath', win32more.Foundation.PSTR),
        ('CabinetFile', win32more.Foundation.PSTR),
        ('DiskName', win32more.Foundation.PSTR),
        ('SetId', UInt16),
        ('CabinetNumber', UInt16),
    ]
    return CABINET_INFO_A
def _define_CABINET_INFO_W_head():
    class CABINET_INFO_W(Structure):
        pass
    return CABINET_INFO_W
def _define_CABINET_INFO_W():
    CABINET_INFO_W = win32more.Devices.DeviceAndDriverInstallation.CABINET_INFO_W_head
    CABINET_INFO_W._fields_ = [
        ('CabinetPath', win32more.Foundation.PWSTR),
        ('CabinetFile', win32more.Foundation.PWSTR),
        ('DiskName', win32more.Foundation.PWSTR),
        ('SetId', UInt16),
        ('CabinetNumber', UInt16),
    ]
    return CABINET_INFO_W
CM_NOTIFY_ACTION = Int32
CM_NOTIFY_ACTION_DEVICEINTERFACEARRIVAL = 0
CM_NOTIFY_ACTION_DEVICEINTERFACEREMOVAL = 1
CM_NOTIFY_ACTION_DEVICEQUERYREMOVE = 2
CM_NOTIFY_ACTION_DEVICEQUERYREMOVEFAILED = 3
CM_NOTIFY_ACTION_DEVICEREMOVEPENDING = 4
CM_NOTIFY_ACTION_DEVICEREMOVECOMPLETE = 5
CM_NOTIFY_ACTION_DEVICECUSTOMEVENT = 6
CM_NOTIFY_ACTION_DEVICEINSTANCEENUMERATED = 7
CM_NOTIFY_ACTION_DEVICEINSTANCESTARTED = 8
CM_NOTIFY_ACTION_DEVICEINSTANCEREMOVED = 9
CM_NOTIFY_ACTION_MAX = 10
def _define_CM_NOTIFY_EVENT_DATA_head():
    class CM_NOTIFY_EVENT_DATA(Structure):
        pass
    return CM_NOTIFY_EVENT_DATA
def _define_CM_NOTIFY_EVENT_DATA():
    CM_NOTIFY_EVENT_DATA = win32more.Devices.DeviceAndDriverInstallation.CM_NOTIFY_EVENT_DATA_head
    class CM_NOTIFY_EVENT_DATA__u_e__Union(Union):
        pass
    class CM_NOTIFY_EVENT_DATA__u_e__Union__DeviceInterface_e__Struct(Structure):
        pass
    CM_NOTIFY_EVENT_DATA__u_e__Union__DeviceInterface_e__Struct._fields_ = [
        ('ClassGuid', Guid),
        ('SymbolicLink', Char * 1),
    ]
    class CM_NOTIFY_EVENT_DATA__u_e__Union__DeviceHandle_e__Struct(Structure):
        pass
    CM_NOTIFY_EVENT_DATA__u_e__Union__DeviceHandle_e__Struct._fields_ = [
        ('EventGuid', Guid),
        ('NameOffset', Int32),
        ('DataSize', UInt32),
        ('Data', Byte * 1),
    ]
    class CM_NOTIFY_EVENT_DATA__u_e__Union__DeviceInstance_e__Struct(Structure):
        pass
    CM_NOTIFY_EVENT_DATA__u_e__Union__DeviceInstance_e__Struct._fields_ = [
        ('InstanceId', Char * 1),
    ]
    CM_NOTIFY_EVENT_DATA__u_e__Union._fields_ = [
        ('DeviceInterface', CM_NOTIFY_EVENT_DATA__u_e__Union__DeviceInterface_e__Struct),
        ('DeviceHandle', CM_NOTIFY_EVENT_DATA__u_e__Union__DeviceHandle_e__Struct),
        ('DeviceInstance', CM_NOTIFY_EVENT_DATA__u_e__Union__DeviceInstance_e__Struct),
    ]
    CM_NOTIFY_EVENT_DATA._fields_ = [
        ('FilterType', win32more.Devices.DeviceAndDriverInstallation.CM_NOTIFY_FILTER_TYPE),
        ('Reserved', UInt32),
        ('u', CM_NOTIFY_EVENT_DATA__u_e__Union),
    ]
    return CM_NOTIFY_EVENT_DATA
def _define_CM_NOTIFY_FILTER_head():
    class CM_NOTIFY_FILTER(Structure):
        pass
    return CM_NOTIFY_FILTER
def _define_CM_NOTIFY_FILTER():
    CM_NOTIFY_FILTER = win32more.Devices.DeviceAndDriverInstallation.CM_NOTIFY_FILTER_head
    class CM_NOTIFY_FILTER__u_e__Union(Union):
        pass
    class CM_NOTIFY_FILTER__u_e__Union__DeviceInterface_e__Struct(Structure):
        pass
    CM_NOTIFY_FILTER__u_e__Union__DeviceInterface_e__Struct._fields_ = [
        ('ClassGuid', Guid),
    ]
    class CM_NOTIFY_FILTER__u_e__Union__DeviceHandle_e__Struct(Structure):
        pass
    CM_NOTIFY_FILTER__u_e__Union__DeviceHandle_e__Struct._fields_ = [
        ('hTarget', win32more.Foundation.HANDLE),
    ]
    class CM_NOTIFY_FILTER__u_e__Union__DeviceInstance_e__Struct(Structure):
        pass
    CM_NOTIFY_FILTER__u_e__Union__DeviceInstance_e__Struct._fields_ = [
        ('InstanceId', Char * 200),
    ]
    CM_NOTIFY_FILTER__u_e__Union._fields_ = [
        ('DeviceInterface', CM_NOTIFY_FILTER__u_e__Union__DeviceInterface_e__Struct),
        ('DeviceHandle', CM_NOTIFY_FILTER__u_e__Union__DeviceHandle_e__Struct),
        ('DeviceInstance', CM_NOTIFY_FILTER__u_e__Union__DeviceInstance_e__Struct),
    ]
    CM_NOTIFY_FILTER._fields_ = [
        ('cbSize', UInt32),
        ('Flags', UInt32),
        ('FilterType', win32more.Devices.DeviceAndDriverInstallation.CM_NOTIFY_FILTER_TYPE),
        ('Reserved', UInt32),
        ('u', CM_NOTIFY_FILTER__u_e__Union),
    ]
    return CM_NOTIFY_FILTER
CM_NOTIFY_FILTER_TYPE = Int32
CM_NOTIFY_FILTER_TYPE_DEVICEINTERFACE = 0
CM_NOTIFY_FILTER_TYPE_DEVICEHANDLE = 1
CM_NOTIFY_FILTER_TYPE_DEVICEINSTANCE = 2
CM_NOTIFY_FILTER_TYPE_MAX = 3
def _define_COINSTALLER_CONTEXT_DATA_head():
    class COINSTALLER_CONTEXT_DATA(Structure):
        pass
    return COINSTALLER_CONTEXT_DATA
def _define_COINSTALLER_CONTEXT_DATA():
    COINSTALLER_CONTEXT_DATA = win32more.Devices.DeviceAndDriverInstallation.COINSTALLER_CONTEXT_DATA_head
    COINSTALLER_CONTEXT_DATA._fields_ = [
        ('PostProcessing', win32more.Foundation.BOOL),
        ('InstallResult', UInt32),
        ('PrivateData', c_void_p),
    ]
    return COINSTALLER_CONTEXT_DATA
CONFIGRET = UInt32
CR_SUCCESS = 0
CR_DEFAULT = 1
CR_OUT_OF_MEMORY = 2
CR_INVALID_POINTER = 3
CR_INVALID_FLAG = 4
CR_INVALID_DEVNODE = 5
CR_INVALID_DEVINST = 5
CR_INVALID_RES_DES = 6
CR_INVALID_LOG_CONF = 7
CR_INVALID_ARBITRATOR = 8
CR_INVALID_NODELIST = 9
CR_DEVNODE_HAS_REQS = 10
CR_DEVINST_HAS_REQS = 10
CR_INVALID_RESOURCEID = 11
CR_DLVXD_NOT_FOUND = 12
CR_NO_SUCH_DEVNODE = 13
CR_NO_SUCH_DEVINST = 13
CR_NO_MORE_LOG_CONF = 14
CR_NO_MORE_RES_DES = 15
CR_ALREADY_SUCH_DEVNODE = 16
CR_ALREADY_SUCH_DEVINST = 16
CR_INVALID_RANGE_LIST = 17
CR_INVALID_RANGE = 18
CR_FAILURE = 19
CR_NO_SUCH_LOGICAL_DEV = 20
CR_CREATE_BLOCKED = 21
CR_NOT_SYSTEM_VM = 22
CR_REMOVE_VETOED = 23
CR_APM_VETOED = 24
CR_INVALID_LOAD_TYPE = 25
CR_BUFFER_SMALL = 26
CR_NO_ARBITRATOR = 27
CR_NO_REGISTRY_HANDLE = 28
CR_REGISTRY_ERROR = 29
CR_INVALID_DEVICE_ID = 30
CR_INVALID_DATA = 31
CR_INVALID_API = 32
CR_DEVLOADER_NOT_READY = 33
CR_NEED_RESTART = 34
CR_NO_MORE_HW_PROFILES = 35
CR_DEVICE_NOT_THERE = 36
CR_NO_SUCH_VALUE = 37
CR_WRONG_TYPE = 38
CR_INVALID_PRIORITY = 39
CR_NOT_DISABLEABLE = 40
CR_FREE_RESOURCES = 41
CR_QUERY_VETOED = 42
CR_CANT_SHARE_IRQ = 43
CR_NO_DEPENDENT = 44
CR_SAME_RESOURCES = 45
CR_NO_SUCH_REGISTRY_KEY = 46
CR_INVALID_MACHINENAME = 47
CR_REMOTE_COMM_FAILURE = 48
CR_MACHINE_UNAVAILABLE = 49
CR_NO_CM_SERVICES = 50
CR_ACCESS_DENIED = 51
CR_CALL_NOT_IMPLEMENTED = 52
CR_INVALID_PROPERTY = 53
CR_DEVICE_INTERFACE_ACTIVE = 54
CR_NO_SUCH_DEVICE_INTERFACE = 55
CR_INVALID_REFERENCE_STRING = 56
CR_INVALID_CONFLICT_LIST = 57
CR_INVALID_INDEX = 58
CR_INVALID_STRUCTURE_SIZE = 59
NUM_CR_RESULTS = 60
def _define_CONFLICT_DETAILS_A_head():
    class CONFLICT_DETAILS_A(Structure):
        pass
    return CONFLICT_DETAILS_A
def _define_CONFLICT_DETAILS_A():
    CONFLICT_DETAILS_A = win32more.Devices.DeviceAndDriverInstallation.CONFLICT_DETAILS_A_head
    CONFLICT_DETAILS_A._fields_ = [
        ('CD_ulSize', UInt32),
        ('CD_ulMask', UInt32),
        ('CD_dnDevInst', UInt32),
        ('CD_rdResDes', UIntPtr),
        ('CD_ulFlags', UInt32),
        ('CD_szDescription', win32more.Foundation.CHAR * 260),
    ]
    return CONFLICT_DETAILS_A
def _define_CONFLICT_DETAILS_W_head():
    class CONFLICT_DETAILS_W(Structure):
        pass
    return CONFLICT_DETAILS_W
def _define_CONFLICT_DETAILS_W():
    CONFLICT_DETAILS_W = win32more.Devices.DeviceAndDriverInstallation.CONFLICT_DETAILS_W_head
    CONFLICT_DETAILS_W._fields_ = [
        ('CD_ulSize', UInt32),
        ('CD_ulMask', UInt32),
        ('CD_dnDevInst', UInt32),
        ('CD_rdResDes', UIntPtr),
        ('CD_ulFlags', UInt32),
        ('CD_szDescription', Char * 260),
    ]
    return CONFLICT_DETAILS_W
def _define_CONNECTION_DES_head():
    class CONNECTION_DES(Structure):
        pass
    return CONNECTION_DES
def _define_CONNECTION_DES():
    CONNECTION_DES = win32more.Devices.DeviceAndDriverInstallation.CONNECTION_DES_head
    CONNECTION_DES._pack_ = 1
    CONNECTION_DES._fields_ = [
        ('COND_Type', UInt32),
        ('COND_Flags', UInt32),
        ('COND_Class', Byte),
        ('COND_ClassType', Byte),
        ('COND_Reserved1', Byte),
        ('COND_Reserved2', Byte),
        ('COND_Id', win32more.Foundation.LARGE_INTEGER),
    ]
    return CONNECTION_DES
def _define_CONNECTION_RESOURCE_head():
    class CONNECTION_RESOURCE(Structure):
        pass
    return CONNECTION_RESOURCE
def _define_CONNECTION_RESOURCE():
    CONNECTION_RESOURCE = win32more.Devices.DeviceAndDriverInstallation.CONNECTION_RESOURCE_head
    CONNECTION_RESOURCE._pack_ = 1
    CONNECTION_RESOURCE._fields_ = [
        ('Connection_Header', win32more.Devices.DeviceAndDriverInstallation.CONNECTION_DES),
    ]
    return CONNECTION_RESOURCE
def _define_CS_DES_head():
    class CS_DES(Structure):
        pass
    return CS_DES
def _define_CS_DES():
    CS_DES = win32more.Devices.DeviceAndDriverInstallation.CS_DES_head
    CS_DES._pack_ = 1
    CS_DES._fields_ = [
        ('CSD_SignatureLength', UInt32),
        ('CSD_LegacyDataOffset', UInt32),
        ('CSD_LegacyDataSize', UInt32),
        ('CSD_Flags', UInt32),
        ('CSD_ClassGuid', Guid),
        ('CSD_Signature', Byte * 1),
    ]
    return CS_DES
def _define_CS_RESOURCE_head():
    class CS_RESOURCE(Structure):
        pass
    return CS_RESOURCE
def _define_CS_RESOURCE():
    CS_RESOURCE = win32more.Devices.DeviceAndDriverInstallation.CS_RESOURCE_head
    CS_RESOURCE._pack_ = 1
    CS_RESOURCE._fields_ = [
        ('CS_Header', win32more.Devices.DeviceAndDriverInstallation.CS_DES),
    ]
    return CS_RESOURCE
def _define_DEVPRIVATE_DES_head():
    class DEVPRIVATE_DES(Structure):
        pass
    return DEVPRIVATE_DES
def _define_DEVPRIVATE_DES():
    DEVPRIVATE_DES = win32more.Devices.DeviceAndDriverInstallation.DEVPRIVATE_DES_head
    DEVPRIVATE_DES._pack_ = 1
    DEVPRIVATE_DES._fields_ = [
        ('PD_Count', UInt32),
        ('PD_Type', UInt32),
        ('PD_Data1', UInt32),
        ('PD_Data2', UInt32),
        ('PD_Data3', UInt32),
        ('PD_Flags', UInt32),
    ]
    return DEVPRIVATE_DES
def _define_DEVPRIVATE_RANGE_head():
    class DEVPRIVATE_RANGE(Structure):
        pass
    return DEVPRIVATE_RANGE
def _define_DEVPRIVATE_RANGE():
    DEVPRIVATE_RANGE = win32more.Devices.DeviceAndDriverInstallation.DEVPRIVATE_RANGE_head
    DEVPRIVATE_RANGE._pack_ = 1
    DEVPRIVATE_RANGE._fields_ = [
        ('PR_Data1', UInt32),
        ('PR_Data2', UInt32),
        ('PR_Data3', UInt32),
    ]
    return DEVPRIVATE_RANGE
def _define_DEVPRIVATE_RESOURCE_head():
    class DEVPRIVATE_RESOURCE(Structure):
        pass
    return DEVPRIVATE_RESOURCE
def _define_DEVPRIVATE_RESOURCE():
    DEVPRIVATE_RESOURCE = win32more.Devices.DeviceAndDriverInstallation.DEVPRIVATE_RESOURCE_head
    DEVPRIVATE_RESOURCE._pack_ = 1
    DEVPRIVATE_RESOURCE._fields_ = [
        ('PRV_Header', win32more.Devices.DeviceAndDriverInstallation.DEVPRIVATE_DES),
        ('PRV_Data', win32more.Devices.DeviceAndDriverInstallation.DEVPRIVATE_RANGE * 1),
    ]
    return DEVPRIVATE_RESOURCE
def _define_DMA_DES_head():
    class DMA_DES(Structure):
        pass
    return DMA_DES
def _define_DMA_DES():
    DMA_DES = win32more.Devices.DeviceAndDriverInstallation.DMA_DES_head
    DMA_DES._pack_ = 1
    DMA_DES._fields_ = [
        ('DD_Count', UInt32),
        ('DD_Type', UInt32),
        ('DD_Flags', UInt32),
        ('DD_Alloc_Chan', UInt32),
    ]
    return DMA_DES
def _define_DMA_RANGE_head():
    class DMA_RANGE(Structure):
        pass
    return DMA_RANGE
def _define_DMA_RANGE():
    DMA_RANGE = win32more.Devices.DeviceAndDriverInstallation.DMA_RANGE_head
    DMA_RANGE._pack_ = 1
    DMA_RANGE._fields_ = [
        ('DR_Min', UInt32),
        ('DR_Max', UInt32),
        ('DR_Flags', UInt32),
    ]
    return DMA_RANGE
def _define_DMA_RESOURCE_head():
    class DMA_RESOURCE(Structure):
        pass
    return DMA_RESOURCE
def _define_DMA_RESOURCE():
    DMA_RESOURCE = win32more.Devices.DeviceAndDriverInstallation.DMA_RESOURCE_head
    DMA_RESOURCE._pack_ = 1
    DMA_RESOURCE._fields_ = [
        ('DMA_Header', win32more.Devices.DeviceAndDriverInstallation.DMA_DES),
        ('DMA_Data', win32more.Devices.DeviceAndDriverInstallation.DMA_RANGE * 1),
    ]
    return DMA_RESOURCE
def _define_FILE_IN_CABINET_INFO_A_head():
    class FILE_IN_CABINET_INFO_A(Structure):
        pass
    return FILE_IN_CABINET_INFO_A
def _define_FILE_IN_CABINET_INFO_A():
    FILE_IN_CABINET_INFO_A = win32more.Devices.DeviceAndDriverInstallation.FILE_IN_CABINET_INFO_A_head
    FILE_IN_CABINET_INFO_A._fields_ = [
        ('NameInCabinet', win32more.Foundation.PSTR),
        ('FileSize', UInt32),
        ('Win32Error', UInt32),
        ('DosDate', UInt16),
        ('DosTime', UInt16),
        ('DosAttribs', UInt16),
        ('FullTargetName', win32more.Foundation.CHAR * 260),
    ]
    return FILE_IN_CABINET_INFO_A
def _define_FILE_IN_CABINET_INFO_W_head():
    class FILE_IN_CABINET_INFO_W(Structure):
        pass
    return FILE_IN_CABINET_INFO_W
def _define_FILE_IN_CABINET_INFO_W():
    FILE_IN_CABINET_INFO_W = win32more.Devices.DeviceAndDriverInstallation.FILE_IN_CABINET_INFO_W_head
    FILE_IN_CABINET_INFO_W._fields_ = [
        ('NameInCabinet', win32more.Foundation.PWSTR),
        ('FileSize', UInt32),
        ('Win32Error', UInt32),
        ('DosDate', UInt16),
        ('DosTime', UInt16),
        ('DosAttribs', UInt16),
        ('FullTargetName', Char * 260),
    ]
    return FILE_IN_CABINET_INFO_W
def _define_FILEPATHS_A_head():
    class FILEPATHS_A(Structure):
        pass
    return FILEPATHS_A
def _define_FILEPATHS_A():
    FILEPATHS_A = win32more.Devices.DeviceAndDriverInstallation.FILEPATHS_A_head
    FILEPATHS_A._fields_ = [
        ('Target', win32more.Foundation.PSTR),
        ('Source', win32more.Foundation.PSTR),
        ('Win32Error', UInt32),
        ('Flags', UInt32),
    ]
    return FILEPATHS_A
def _define_FILEPATHS_SIGNERINFO_A_head():
    class FILEPATHS_SIGNERINFO_A(Structure):
        pass
    return FILEPATHS_SIGNERINFO_A
def _define_FILEPATHS_SIGNERINFO_A():
    FILEPATHS_SIGNERINFO_A = win32more.Devices.DeviceAndDriverInstallation.FILEPATHS_SIGNERINFO_A_head
    FILEPATHS_SIGNERINFO_A._fields_ = [
        ('Target', win32more.Foundation.PSTR),
        ('Source', win32more.Foundation.PSTR),
        ('Win32Error', UInt32),
        ('Flags', UInt32),
        ('DigitalSigner', win32more.Foundation.PSTR),
        ('Version', win32more.Foundation.PSTR),
        ('CatalogFile', win32more.Foundation.PSTR),
    ]
    return FILEPATHS_SIGNERINFO_A
def _define_FILEPATHS_SIGNERINFO_W_head():
    class FILEPATHS_SIGNERINFO_W(Structure):
        pass
    return FILEPATHS_SIGNERINFO_W
def _define_FILEPATHS_SIGNERINFO_W():
    FILEPATHS_SIGNERINFO_W = win32more.Devices.DeviceAndDriverInstallation.FILEPATHS_SIGNERINFO_W_head
    FILEPATHS_SIGNERINFO_W._fields_ = [
        ('Target', win32more.Foundation.PWSTR),
        ('Source', win32more.Foundation.PWSTR),
        ('Win32Error', UInt32),
        ('Flags', UInt32),
        ('DigitalSigner', win32more.Foundation.PWSTR),
        ('Version', win32more.Foundation.PWSTR),
        ('CatalogFile', win32more.Foundation.PWSTR),
    ]
    return FILEPATHS_SIGNERINFO_W
def _define_FILEPATHS_W_head():
    class FILEPATHS_W(Structure):
        pass
    return FILEPATHS_W
def _define_FILEPATHS_W():
    FILEPATHS_W = win32more.Devices.DeviceAndDriverInstallation.FILEPATHS_W_head
    FILEPATHS_W._fields_ = [
        ('Target', win32more.Foundation.PWSTR),
        ('Source', win32more.Foundation.PWSTR),
        ('Win32Error', UInt32),
        ('Flags', UInt32),
    ]
    return FILEPATHS_W
HCMNOTIFICATION = IntPtr
HDEVINFO = IntPtr
def _define_HWProfileInfo_sA_head():
    class HWProfileInfo_sA(Structure):
        pass
    return HWProfileInfo_sA
def _define_HWProfileInfo_sA():
    HWProfileInfo_sA = win32more.Devices.DeviceAndDriverInstallation.HWProfileInfo_sA_head
    HWProfileInfo_sA._pack_ = 1
    HWProfileInfo_sA._fields_ = [
        ('HWPI_ulHWProfile', UInt32),
        ('HWPI_szFriendlyName', win32more.Foundation.CHAR * 80),
        ('HWPI_dwFlags', UInt32),
    ]
    return HWProfileInfo_sA
def _define_HWPROFILEINFO_W_head():
    class HWPROFILEINFO_W(Structure):
        pass
    return HWPROFILEINFO_W
def _define_HWPROFILEINFO_W():
    HWPROFILEINFO_W = win32more.Devices.DeviceAndDriverInstallation.HWPROFILEINFO_W_head
    HWPROFILEINFO_W._pack_ = 1
    HWPROFILEINFO_W._fields_ = [
        ('HWPI_ulHWProfile', UInt32),
        ('HWPI_szFriendlyName', Char * 80),
        ('HWPI_dwFlags', UInt32),
    ]
    return HWPROFILEINFO_W
def _define_INFCONTEXT_head():
    class INFCONTEXT(Structure):
        pass
    return INFCONTEXT
def _define_INFCONTEXT():
    INFCONTEXT = win32more.Devices.DeviceAndDriverInstallation.INFCONTEXT_head
    INFCONTEXT._fields_ = [
        ('Inf', c_void_p),
        ('CurrentInf', c_void_p),
        ('Section', UInt32),
        ('Line', UInt32),
    ]
    return INFCONTEXT
def _define_IO_DES_head():
    class IO_DES(Structure):
        pass
    return IO_DES
def _define_IO_DES():
    IO_DES = win32more.Devices.DeviceAndDriverInstallation.IO_DES_head
    IO_DES._pack_ = 1
    IO_DES._fields_ = [
        ('IOD_Count', UInt32),
        ('IOD_Type', UInt32),
        ('IOD_Alloc_Base', UInt64),
        ('IOD_Alloc_End', UInt64),
        ('IOD_DesFlags', UInt32),
    ]
    return IO_DES
def _define_IO_RANGE_head():
    class IO_RANGE(Structure):
        pass
    return IO_RANGE
def _define_IO_RANGE():
    IO_RANGE = win32more.Devices.DeviceAndDriverInstallation.IO_RANGE_head
    IO_RANGE._pack_ = 1
    IO_RANGE._fields_ = [
        ('IOR_Align', UInt64),
        ('IOR_nPorts', UInt32),
        ('IOR_Min', UInt64),
        ('IOR_Max', UInt64),
        ('IOR_RangeFlags', UInt32),
        ('IOR_Alias', UInt64),
    ]
    return IO_RANGE
def _define_IO_RESOURCE_head():
    class IO_RESOURCE(Structure):
        pass
    return IO_RESOURCE
def _define_IO_RESOURCE():
    IO_RESOURCE = win32more.Devices.DeviceAndDriverInstallation.IO_RESOURCE_head
    IO_RESOURCE._fields_ = [
        ('IO_Header', win32more.Devices.DeviceAndDriverInstallation.IO_DES),
        ('IO_Data', win32more.Devices.DeviceAndDriverInstallation.IO_RANGE * 1),
    ]
    return IO_RESOURCE
def _define_IRQ_DES_32_head():
    class IRQ_DES_32(Structure):
        pass
    return IRQ_DES_32
def _define_IRQ_DES_32():
    IRQ_DES_32 = win32more.Devices.DeviceAndDriverInstallation.IRQ_DES_32_head
    IRQ_DES_32._pack_ = 1
    IRQ_DES_32._fields_ = [
        ('IRQD_Count', UInt32),
        ('IRQD_Type', UInt32),
        ('IRQD_Flags', UInt32),
        ('IRQD_Alloc_Num', UInt32),
        ('IRQD_Affinity', UInt32),
    ]
    return IRQ_DES_32
def _define_IRQ_DES_64_head():
    class IRQ_DES_64(Structure):
        pass
    return IRQ_DES_64
def _define_IRQ_DES_64():
    IRQ_DES_64 = win32more.Devices.DeviceAndDriverInstallation.IRQ_DES_64_head
    IRQ_DES_64._pack_ = 1
    IRQ_DES_64._fields_ = [
        ('IRQD_Count', UInt32),
        ('IRQD_Type', UInt32),
        ('IRQD_Flags', UInt32),
        ('IRQD_Alloc_Num', UInt32),
        ('IRQD_Affinity', UInt64),
    ]
    return IRQ_DES_64
def _define_IRQ_RANGE_head():
    class IRQ_RANGE(Structure):
        pass
    return IRQ_RANGE
def _define_IRQ_RANGE():
    IRQ_RANGE = win32more.Devices.DeviceAndDriverInstallation.IRQ_RANGE_head
    IRQ_RANGE._pack_ = 1
    IRQ_RANGE._fields_ = [
        ('IRQR_Min', UInt32),
        ('IRQR_Max', UInt32),
        ('IRQR_Flags', UInt32),
    ]
    return IRQ_RANGE
def _define_IRQ_RESOURCE_32_head():
    class IRQ_RESOURCE_32(Structure):
        pass
    return IRQ_RESOURCE_32
def _define_IRQ_RESOURCE_32():
    IRQ_RESOURCE_32 = win32more.Devices.DeviceAndDriverInstallation.IRQ_RESOURCE_32_head
    IRQ_RESOURCE_32._pack_ = 1
    IRQ_RESOURCE_32._fields_ = [
        ('IRQ_Header', win32more.Devices.DeviceAndDriverInstallation.IRQ_DES_32),
        ('IRQ_Data', win32more.Devices.DeviceAndDriverInstallation.IRQ_RANGE * 1),
    ]
    return IRQ_RESOURCE_32
def _define_IRQ_RESOURCE_64_head():
    class IRQ_RESOURCE_64(Structure):
        pass
    return IRQ_RESOURCE_64
def _define_IRQ_RESOURCE_64():
    IRQ_RESOURCE_64 = win32more.Devices.DeviceAndDriverInstallation.IRQ_RESOURCE_64_head
    IRQ_RESOURCE_64._pack_ = 1
    IRQ_RESOURCE_64._fields_ = [
        ('IRQ_Header', win32more.Devices.DeviceAndDriverInstallation.IRQ_DES_64),
        ('IRQ_Data', win32more.Devices.DeviceAndDriverInstallation.IRQ_RANGE * 1),
    ]
    return IRQ_RESOURCE_64
def _define_MEM_DES_head():
    class MEM_DES(Structure):
        pass
    return MEM_DES
def _define_MEM_DES():
    MEM_DES = win32more.Devices.DeviceAndDriverInstallation.MEM_DES_head
    MEM_DES._pack_ = 1
    MEM_DES._fields_ = [
        ('MD_Count', UInt32),
        ('MD_Type', UInt32),
        ('MD_Alloc_Base', UInt64),
        ('MD_Alloc_End', UInt64),
        ('MD_Flags', UInt32),
        ('MD_Reserved', UInt32),
    ]
    return MEM_DES
def _define_MEM_LARGE_DES_head():
    class MEM_LARGE_DES(Structure):
        pass
    return MEM_LARGE_DES
def _define_MEM_LARGE_DES():
    MEM_LARGE_DES = win32more.Devices.DeviceAndDriverInstallation.MEM_LARGE_DES_head
    MEM_LARGE_DES._pack_ = 1
    MEM_LARGE_DES._fields_ = [
        ('MLD_Count', UInt32),
        ('MLD_Type', UInt32),
        ('MLD_Alloc_Base', UInt64),
        ('MLD_Alloc_End', UInt64),
        ('MLD_Flags', UInt32),
        ('MLD_Reserved', UInt32),
    ]
    return MEM_LARGE_DES
def _define_MEM_LARGE_RANGE_head():
    class MEM_LARGE_RANGE(Structure):
        pass
    return MEM_LARGE_RANGE
def _define_MEM_LARGE_RANGE():
    MEM_LARGE_RANGE = win32more.Devices.DeviceAndDriverInstallation.MEM_LARGE_RANGE_head
    MEM_LARGE_RANGE._pack_ = 1
    MEM_LARGE_RANGE._fields_ = [
        ('MLR_Align', UInt64),
        ('MLR_nBytes', UInt64),
        ('MLR_Min', UInt64),
        ('MLR_Max', UInt64),
        ('MLR_Flags', UInt32),
        ('MLR_Reserved', UInt32),
    ]
    return MEM_LARGE_RANGE
def _define_MEM_LARGE_RESOURCE_head():
    class MEM_LARGE_RESOURCE(Structure):
        pass
    return MEM_LARGE_RESOURCE
def _define_MEM_LARGE_RESOURCE():
    MEM_LARGE_RESOURCE = win32more.Devices.DeviceAndDriverInstallation.MEM_LARGE_RESOURCE_head
    MEM_LARGE_RESOURCE._pack_ = 1
    MEM_LARGE_RESOURCE._fields_ = [
        ('MEM_LARGE_Header', win32more.Devices.DeviceAndDriverInstallation.MEM_LARGE_DES),
        ('MEM_LARGE_Data', win32more.Devices.DeviceAndDriverInstallation.MEM_LARGE_RANGE * 1),
    ]
    return MEM_LARGE_RESOURCE
def _define_MEM_RANGE_head():
    class MEM_RANGE(Structure):
        pass
    return MEM_RANGE
def _define_MEM_RANGE():
    MEM_RANGE = win32more.Devices.DeviceAndDriverInstallation.MEM_RANGE_head
    MEM_RANGE._pack_ = 1
    MEM_RANGE._fields_ = [
        ('MR_Align', UInt64),
        ('MR_nBytes', UInt32),
        ('MR_Min', UInt64),
        ('MR_Max', UInt64),
        ('MR_Flags', UInt32),
        ('MR_Reserved', UInt32),
    ]
    return MEM_RANGE
def _define_MEM_RESOURCE_head():
    class MEM_RESOURCE(Structure):
        pass
    return MEM_RESOURCE
def _define_MEM_RESOURCE():
    MEM_RESOURCE = win32more.Devices.DeviceAndDriverInstallation.MEM_RESOURCE_head
    MEM_RESOURCE._pack_ = 1
    MEM_RESOURCE._fields_ = [
        ('MEM_Header', win32more.Devices.DeviceAndDriverInstallation.MEM_DES),
        ('MEM_Data', win32more.Devices.DeviceAndDriverInstallation.MEM_RANGE * 1),
    ]
    return MEM_RESOURCE
def _define_MFCARD_DES_head():
    class MFCARD_DES(Structure):
        pass
    return MFCARD_DES
def _define_MFCARD_DES():
    MFCARD_DES = win32more.Devices.DeviceAndDriverInstallation.MFCARD_DES_head
    MFCARD_DES._pack_ = 1
    MFCARD_DES._fields_ = [
        ('PMF_Count', UInt32),
        ('PMF_Type', UInt32),
        ('PMF_Flags', UInt32),
        ('PMF_ConfigOptions', Byte),
        ('PMF_IoResourceIndex', Byte),
        ('PMF_Reserved', Byte * 2),
        ('PMF_ConfigRegisterBase', UInt32),
    ]
    return MFCARD_DES
def _define_MFCARD_RESOURCE_head():
    class MFCARD_RESOURCE(Structure):
        pass
    return MFCARD_RESOURCE
def _define_MFCARD_RESOURCE():
    MFCARD_RESOURCE = win32more.Devices.DeviceAndDriverInstallation.MFCARD_RESOURCE_head
    MFCARD_RESOURCE._pack_ = 1
    MFCARD_RESOURCE._fields_ = [
        ('MfCard_Header', win32more.Devices.DeviceAndDriverInstallation.MFCARD_DES),
    ]
    return MFCARD_RESOURCE
OEM_SOURCE_MEDIA_TYPE = UInt32
SPOST_NONE = 0
SPOST_PATH = 1
SPOST_URL = 2
def _define_PCCARD_DES_head():
    class PCCARD_DES(Structure):
        pass
    return PCCARD_DES
def _define_PCCARD_DES():
    PCCARD_DES = win32more.Devices.DeviceAndDriverInstallation.PCCARD_DES_head
    PCCARD_DES._pack_ = 1
    PCCARD_DES._fields_ = [
        ('PCD_Count', UInt32),
        ('PCD_Type', UInt32),
        ('PCD_Flags', UInt32),
        ('PCD_ConfigIndex', Byte),
        ('PCD_Reserved', Byte * 3),
        ('PCD_MemoryCardBase1', UInt32),
        ('PCD_MemoryCardBase2', UInt32),
        ('PCD_MemoryCardBase', UInt32 * 2),
        ('PCD_MemoryFlags', UInt16 * 2),
        ('PCD_IoFlags', Byte * 2),
    ]
    return PCCARD_DES
def _define_PCCARD_RESOURCE_head():
    class PCCARD_RESOURCE(Structure):
        pass
    return PCCARD_RESOURCE
def _define_PCCARD_RESOURCE():
    PCCARD_RESOURCE = win32more.Devices.DeviceAndDriverInstallation.PCCARD_RESOURCE_head
    PCCARD_RESOURCE._pack_ = 1
    PCCARD_RESOURCE._fields_ = [
        ('PcCard_Header', win32more.Devices.DeviceAndDriverInstallation.PCCARD_DES),
    ]
    return PCCARD_RESOURCE
def _define_PCM_NOTIFY_CALLBACK():
    return WINFUNCTYPE(UInt32,win32more.Devices.DeviceAndDriverInstallation.HCMNOTIFICATION,c_void_p,win32more.Devices.DeviceAndDriverInstallation.CM_NOTIFY_ACTION,POINTER(win32more.Devices.DeviceAndDriverInstallation.CM_NOTIFY_EVENT_DATA_head),UInt32)
def _define_PDETECT_PROGRESS_NOTIFY():
    return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,UInt32)
PNP_VETO_TYPE = Int32
PNP_VetoTypeUnknown = 0
PNP_VetoLegacyDevice = 1
PNP_VetoPendingClose = 2
PNP_VetoWindowsApp = 3
PNP_VetoWindowsService = 4
PNP_VetoOutstandingOpen = 5
PNP_VetoDevice = 6
PNP_VetoDriver = 7
PNP_VetoIllegalDeviceRequest = 8
PNP_VetoInsufficientPower = 9
PNP_VetoNonDisableable = 10
PNP_VetoLegacyDriver = 11
PNP_VetoInsufficientRights = 12
PNP_VetoAlreadyRemoved = 13
def _define_PSP_DETSIG_CMPPROC():
    return WINFUNCTYPE(UInt32,win32more.Devices.DeviceAndDriverInstallation.HDEVINFO,POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head),c_void_p)
def _define_PSP_FILE_CALLBACK_A():
    return WINFUNCTYPE(UInt32,c_void_p,UInt32,UIntPtr,UIntPtr)
def _define_PSP_FILE_CALLBACK_W():
    return WINFUNCTYPE(UInt32,c_void_p,UInt32,UIntPtr,UIntPtr)
SETUP_DI_BUILD_DRIVER_DRIVER_TYPE = UInt32
SPDIT_CLASSDRIVER = 1
SPDIT_COMPATDRIVER = 2
SETUP_FILE_OPERATION = UInt32
FILEOP_DELETE = 2
FILEOP_COPY = 0
SetupFileLogInfo = Int32
SetupFileLogInfo_SetupFileLogSourceFilename = 0
SetupFileLogInfo_SetupFileLogChecksum = 1
SetupFileLogInfo_SetupFileLogDiskTagfile = 2
SetupFileLogInfo_SetupFileLogDiskDescription = 3
SetupFileLogInfo_SetupFileLogOtherInfo = 4
SetupFileLogInfo_SetupFileLogMax = 5
def _define_SOURCE_MEDIA_A_head():
    class SOURCE_MEDIA_A(Structure):
        pass
    return SOURCE_MEDIA_A
def _define_SOURCE_MEDIA_A():
    SOURCE_MEDIA_A = win32more.Devices.DeviceAndDriverInstallation.SOURCE_MEDIA_A_head
    SOURCE_MEDIA_A._fields_ = [
        ('Reserved', win32more.Foundation.PSTR),
        ('Tagfile', win32more.Foundation.PSTR),
        ('Description', win32more.Foundation.PSTR),
        ('SourcePath', win32more.Foundation.PSTR),
        ('SourceFile', win32more.Foundation.PSTR),
        ('Flags', UInt32),
    ]
    return SOURCE_MEDIA_A
def _define_SOURCE_MEDIA_W_head():
    class SOURCE_MEDIA_W(Structure):
        pass
    return SOURCE_MEDIA_W
def _define_SOURCE_MEDIA_W():
    SOURCE_MEDIA_W = win32more.Devices.DeviceAndDriverInstallation.SOURCE_MEDIA_W_head
    SOURCE_MEDIA_W._fields_ = [
        ('Reserved', win32more.Foundation.PWSTR),
        ('Tagfile', win32more.Foundation.PWSTR),
        ('Description', win32more.Foundation.PWSTR),
        ('SourcePath', win32more.Foundation.PWSTR),
        ('SourceFile', win32more.Foundation.PWSTR),
        ('Flags', UInt32),
    ]
    return SOURCE_MEDIA_W
def _define_SP_ALTPLATFORM_INFO_V1_head():
    class SP_ALTPLATFORM_INFO_V1(Structure):
        pass
    return SP_ALTPLATFORM_INFO_V1
def _define_SP_ALTPLATFORM_INFO_V1():
    SP_ALTPLATFORM_INFO_V1 = win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V1_head
    SP_ALTPLATFORM_INFO_V1._fields_ = [
        ('cbSize', UInt32),
        ('Platform', win32more.System.Diagnostics.Debug.VER_PLATFORM),
        ('MajorVersion', UInt32),
        ('MinorVersion', UInt32),
        ('ProcessorArchitecture', UInt16),
        ('Reserved', UInt16),
    ]
    return SP_ALTPLATFORM_INFO_V1
def _define_SP_ALTPLATFORM_INFO_V2_head():
    class SP_ALTPLATFORM_INFO_V2(Structure):
        pass
    return SP_ALTPLATFORM_INFO_V2
def _define_SP_ALTPLATFORM_INFO_V2():
    SP_ALTPLATFORM_INFO_V2 = win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2_head
    class SP_ALTPLATFORM_INFO_V2__Anonymous_e__Union(Union):
        pass
    SP_ALTPLATFORM_INFO_V2__Anonymous_e__Union._fields_ = [
        ('Reserved', UInt16),
        ('Flags', UInt16),
    ]
    SP_ALTPLATFORM_INFO_V2._anonymous_ = [
        'Anonymous',
    ]
    SP_ALTPLATFORM_INFO_V2._fields_ = [
        ('cbSize', UInt32),
        ('Platform', win32more.System.Diagnostics.Debug.VER_PLATFORM),
        ('MajorVersion', UInt32),
        ('MinorVersion', UInt32),
        ('ProcessorArchitecture', UInt16),
        ('Anonymous', SP_ALTPLATFORM_INFO_V2__Anonymous_e__Union),
        ('FirstValidatedMajorVersion', UInt32),
        ('FirstValidatedMinorVersion', UInt32),
    ]
    return SP_ALTPLATFORM_INFO_V2
def _define_SP_ALTPLATFORM_INFO_V3_head():
    class SP_ALTPLATFORM_INFO_V3(Structure):
        pass
    return SP_ALTPLATFORM_INFO_V3
def _define_SP_ALTPLATFORM_INFO_V3():
    SP_ALTPLATFORM_INFO_V3 = win32more.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V3_head
    class SP_ALTPLATFORM_INFO_V3__Anonymous_e__Union(Union):
        pass
    SP_ALTPLATFORM_INFO_V3__Anonymous_e__Union._fields_ = [
        ('Reserved', UInt16),
        ('Flags', UInt16),
    ]
    SP_ALTPLATFORM_INFO_V3._anonymous_ = [
        'Anonymous',
    ]
    SP_ALTPLATFORM_INFO_V3._fields_ = [
        ('cbSize', UInt32),
        ('Platform', UInt32),
        ('MajorVersion', UInt32),
        ('MinorVersion', UInt32),
        ('ProcessorArchitecture', UInt16),
        ('Anonymous', SP_ALTPLATFORM_INFO_V3__Anonymous_e__Union),
        ('FirstValidatedMajorVersion', UInt32),
        ('FirstValidatedMinorVersion', UInt32),
        ('ProductType', Byte),
        ('SuiteMask', UInt16),
        ('BuildNumber', UInt32),
    ]
    return SP_ALTPLATFORM_INFO_V3
def _define_SP_BACKUP_QUEUE_PARAMS_V1_A_head():
    class SP_BACKUP_QUEUE_PARAMS_V1_A(Structure):
        pass
    return SP_BACKUP_QUEUE_PARAMS_V1_A
def _define_SP_BACKUP_QUEUE_PARAMS_V1_A():
    SP_BACKUP_QUEUE_PARAMS_V1_A = win32more.Devices.DeviceAndDriverInstallation.SP_BACKUP_QUEUE_PARAMS_V1_A_head
    SP_BACKUP_QUEUE_PARAMS_V1_A._fields_ = [
        ('cbSize', UInt32),
        ('FullInfPath', win32more.Foundation.CHAR * 260),
        ('FilenameOffset', Int32),
    ]
    return SP_BACKUP_QUEUE_PARAMS_V1_A
def _define_SP_BACKUP_QUEUE_PARAMS_V1_W_head():
    class SP_BACKUP_QUEUE_PARAMS_V1_W(Structure):
        pass
    return SP_BACKUP_QUEUE_PARAMS_V1_W
def _define_SP_BACKUP_QUEUE_PARAMS_V1_W():
    SP_BACKUP_QUEUE_PARAMS_V1_W = win32more.Devices.DeviceAndDriverInstallation.SP_BACKUP_QUEUE_PARAMS_V1_W_head
    SP_BACKUP_QUEUE_PARAMS_V1_W._fields_ = [
        ('cbSize', UInt32),
        ('FullInfPath', Char * 260),
        ('FilenameOffset', Int32),
    ]
    return SP_BACKUP_QUEUE_PARAMS_V1_W
def _define_SP_BACKUP_QUEUE_PARAMS_V2_A_head():
    class SP_BACKUP_QUEUE_PARAMS_V2_A(Structure):
        pass
    return SP_BACKUP_QUEUE_PARAMS_V2_A
def _define_SP_BACKUP_QUEUE_PARAMS_V2_A():
    SP_BACKUP_QUEUE_PARAMS_V2_A = win32more.Devices.DeviceAndDriverInstallation.SP_BACKUP_QUEUE_PARAMS_V2_A_head
    SP_BACKUP_QUEUE_PARAMS_V2_A._fields_ = [
        ('cbSize', UInt32),
        ('FullInfPath', win32more.Foundation.CHAR * 260),
        ('FilenameOffset', Int32),
        ('ReinstallInstance', win32more.Foundation.CHAR * 260),
    ]
    return SP_BACKUP_QUEUE_PARAMS_V2_A
def _define_SP_BACKUP_QUEUE_PARAMS_V2_W_head():
    class SP_BACKUP_QUEUE_PARAMS_V2_W(Structure):
        pass
    return SP_BACKUP_QUEUE_PARAMS_V2_W
def _define_SP_BACKUP_QUEUE_PARAMS_V2_W():
    SP_BACKUP_QUEUE_PARAMS_V2_W = win32more.Devices.DeviceAndDriverInstallation.SP_BACKUP_QUEUE_PARAMS_V2_W_head
    SP_BACKUP_QUEUE_PARAMS_V2_W._fields_ = [
        ('cbSize', UInt32),
        ('FullInfPath', Char * 260),
        ('FilenameOffset', Int32),
        ('ReinstallInstance', Char * 260),
    ]
    return SP_BACKUP_QUEUE_PARAMS_V2_W
def _define_SP_CLASSIMAGELIST_DATA_head():
    class SP_CLASSIMAGELIST_DATA(Structure):
        pass
    return SP_CLASSIMAGELIST_DATA
def _define_SP_CLASSIMAGELIST_DATA():
    SP_CLASSIMAGELIST_DATA = win32more.Devices.DeviceAndDriverInstallation.SP_CLASSIMAGELIST_DATA_head
    SP_CLASSIMAGELIST_DATA._fields_ = [
        ('cbSize', UInt32),
        ('ImageList', win32more.UI.Controls.HIMAGELIST),
        ('Reserved', UIntPtr),
    ]
    return SP_CLASSIMAGELIST_DATA
def _define_SP_CLASSINSTALL_HEADER_head():
    class SP_CLASSINSTALL_HEADER(Structure):
        pass
    return SP_CLASSINSTALL_HEADER
def _define_SP_CLASSINSTALL_HEADER():
    SP_CLASSINSTALL_HEADER = win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER_head
    SP_CLASSINSTALL_HEADER._fields_ = [
        ('cbSize', UInt32),
        ('InstallFunction', UInt32),
    ]
    return SP_CLASSINSTALL_HEADER
SP_COPY_STYLE = UInt32
SP_COPY_DELETESOURCE = 1
SP_COPY_REPLACEONLY = 2
SP_COPY_NEWER_OR_SAME = 4
SP_COPY_NEWER_ONLY = 65536
SP_COPY_NOOVERWRITE = 8
SP_COPY_NODECOMP = 16
SP_COPY_LANGUAGEAWARE = 32
SP_COPY_SOURCE_ABSOLUTE = 64
SP_COPY_SOURCEPATH_ABSOLUTE = 128
SP_COPY_FORCE_IN_USE = 512
SP_COPY_IN_USE_NEEDS_REBOOT = 256
SP_COPY_NOSKIP = 1024
SP_COPY_FORCE_NOOVERWRITE = 4096
SP_COPY_FORCE_NEWER = 8192
SP_COPY_WARNIFSKIP = 16384
SP_COPY_NOBROWSE = 32768
SP_COPY_NEWER = 4
SP_COPY_RESERVED = 131072
SP_COPY_OEMINF_CATALOG_ONLY = 262144
SP_COPY_REPLACE_BOOT_FILE = 524288
SP_COPY_NOPRUNE = 1048576
SP_COPY_OEM_F6_INF = 2097152
SP_COPY_ALREADYDECOMP = 4194304
SP_COPY_WINDOWS_SIGNED = 16777216
SP_COPY_PNPLOCKED = 33554432
SP_COPY_IN_USE_TRY_RENAME = 67108864
SP_COPY_INBOX_INF = 134217728
SP_COPY_HARDLINK = 268435456
def _define_SP_DETECTDEVICE_PARAMS_head():
    class SP_DETECTDEVICE_PARAMS(Structure):
        pass
    return SP_DETECTDEVICE_PARAMS
def _define_SP_DETECTDEVICE_PARAMS():
    SP_DETECTDEVICE_PARAMS = win32more.Devices.DeviceAndDriverInstallation.SP_DETECTDEVICE_PARAMS_head
    SP_DETECTDEVICE_PARAMS._fields_ = [
        ('ClassInstallHeader', win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ('DetectProgressNotify', win32more.Devices.DeviceAndDriverInstallation.PDETECT_PROGRESS_NOTIFY),
        ('ProgressNotifyParam', c_void_p),
    ]
    return SP_DETECTDEVICE_PARAMS
def _define_SP_DEVICE_INTERFACE_DATA_head():
    class SP_DEVICE_INTERFACE_DATA(Structure):
        pass
    return SP_DEVICE_INTERFACE_DATA
def _define_SP_DEVICE_INTERFACE_DATA():
    SP_DEVICE_INTERFACE_DATA = win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA_head
    SP_DEVICE_INTERFACE_DATA._fields_ = [
        ('cbSize', UInt32),
        ('InterfaceClassGuid', Guid),
        ('Flags', UInt32),
        ('Reserved', UIntPtr),
    ]
    return SP_DEVICE_INTERFACE_DATA
def _define_SP_DEVICE_INTERFACE_DETAIL_DATA_A_head():
    class SP_DEVICE_INTERFACE_DETAIL_DATA_A(Structure):
        pass
    return SP_DEVICE_INTERFACE_DETAIL_DATA_A
def _define_SP_DEVICE_INTERFACE_DETAIL_DATA_A():
    SP_DEVICE_INTERFACE_DETAIL_DATA_A = win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DETAIL_DATA_A_head
    SP_DEVICE_INTERFACE_DETAIL_DATA_A._fields_ = [
        ('cbSize', UInt32),
        ('DevicePath', win32more.Foundation.CHAR * 1),
    ]
    return SP_DEVICE_INTERFACE_DETAIL_DATA_A
def _define_SP_DEVICE_INTERFACE_DETAIL_DATA_W_head():
    class SP_DEVICE_INTERFACE_DETAIL_DATA_W(Structure):
        pass
    return SP_DEVICE_INTERFACE_DETAIL_DATA_W
def _define_SP_DEVICE_INTERFACE_DETAIL_DATA_W():
    SP_DEVICE_INTERFACE_DETAIL_DATA_W = win32more.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DETAIL_DATA_W_head
    SP_DEVICE_INTERFACE_DETAIL_DATA_W._fields_ = [
        ('cbSize', UInt32),
        ('DevicePath', Char * 1),
    ]
    return SP_DEVICE_INTERFACE_DETAIL_DATA_W
def _define_SP_DEVINFO_DATA_head():
    class SP_DEVINFO_DATA(Structure):
        pass
    return SP_DEVINFO_DATA
def _define_SP_DEVINFO_DATA():
    SP_DEVINFO_DATA = win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head
    SP_DEVINFO_DATA._fields_ = [
        ('cbSize', UInt32),
        ('ClassGuid', Guid),
        ('DevInst', UInt32),
        ('Reserved', UIntPtr),
    ]
    return SP_DEVINFO_DATA
def _define_SP_DEVINFO_LIST_DETAIL_DATA_A_head():
    class SP_DEVINFO_LIST_DETAIL_DATA_A(Structure):
        pass
    return SP_DEVINFO_LIST_DETAIL_DATA_A
def _define_SP_DEVINFO_LIST_DETAIL_DATA_A():
    SP_DEVINFO_LIST_DETAIL_DATA_A = win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_LIST_DETAIL_DATA_A_head
    SP_DEVINFO_LIST_DETAIL_DATA_A._fields_ = [
        ('cbSize', UInt32),
        ('ClassGuid', Guid),
        ('RemoteMachineHandle', win32more.Foundation.HANDLE),
        ('RemoteMachineName', win32more.Foundation.CHAR * 263),
    ]
    return SP_DEVINFO_LIST_DETAIL_DATA_A
def _define_SP_DEVINFO_LIST_DETAIL_DATA_W_head():
    class SP_DEVINFO_LIST_DETAIL_DATA_W(Structure):
        pass
    return SP_DEVINFO_LIST_DETAIL_DATA_W
def _define_SP_DEVINFO_LIST_DETAIL_DATA_W():
    SP_DEVINFO_LIST_DETAIL_DATA_W = win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_LIST_DETAIL_DATA_W_head
    SP_DEVINFO_LIST_DETAIL_DATA_W._fields_ = [
        ('cbSize', UInt32),
        ('ClassGuid', Guid),
        ('RemoteMachineHandle', win32more.Foundation.HANDLE),
        ('RemoteMachineName', Char * 263),
    ]
    return SP_DEVINFO_LIST_DETAIL_DATA_W
def _define_SP_DEVINSTALL_PARAMS_A_head():
    class SP_DEVINSTALL_PARAMS_A(Structure):
        pass
    return SP_DEVINSTALL_PARAMS_A
def _define_SP_DEVINSTALL_PARAMS_A():
    SP_DEVINSTALL_PARAMS_A = win32more.Devices.DeviceAndDriverInstallation.SP_DEVINSTALL_PARAMS_A_head
    SP_DEVINSTALL_PARAMS_A._fields_ = [
        ('cbSize', UInt32),
        ('Flags', UInt32),
        ('FlagsEx', UInt32),
        ('hwndParent', win32more.Foundation.HWND),
        ('InstallMsgHandler', win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_A),
        ('InstallMsgHandlerContext', c_void_p),
        ('FileQueue', c_void_p),
        ('ClassInstallReserved', UIntPtr),
        ('Reserved', UInt32),
        ('DriverPath', win32more.Foundation.CHAR * 260),
    ]
    return SP_DEVINSTALL_PARAMS_A
def _define_SP_DEVINSTALL_PARAMS_W_head():
    class SP_DEVINSTALL_PARAMS_W(Structure):
        pass
    return SP_DEVINSTALL_PARAMS_W
def _define_SP_DEVINSTALL_PARAMS_W():
    SP_DEVINSTALL_PARAMS_W = win32more.Devices.DeviceAndDriverInstallation.SP_DEVINSTALL_PARAMS_W_head
    SP_DEVINSTALL_PARAMS_W._fields_ = [
        ('cbSize', UInt32),
        ('Flags', UInt32),
        ('FlagsEx', UInt32),
        ('hwndParent', win32more.Foundation.HWND),
        ('InstallMsgHandler', win32more.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_A),
        ('InstallMsgHandlerContext', c_void_p),
        ('FileQueue', c_void_p),
        ('ClassInstallReserved', UIntPtr),
        ('Reserved', UInt32),
        ('DriverPath', Char * 260),
    ]
    return SP_DEVINSTALL_PARAMS_W
def _define_SP_DRVINFO_DATA_V1_A_head():
    class SP_DRVINFO_DATA_V1_A(Structure):
        pass
    return SP_DRVINFO_DATA_V1_A
def _define_SP_DRVINFO_DATA_V1_A():
    SP_DRVINFO_DATA_V1_A = win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V1_A_head
    SP_DRVINFO_DATA_V1_A._fields_ = [
        ('cbSize', UInt32),
        ('DriverType', UInt32),
        ('Reserved', UIntPtr),
        ('Description', win32more.Foundation.CHAR * 256),
        ('MfgName', win32more.Foundation.CHAR * 256),
        ('ProviderName', win32more.Foundation.CHAR * 256),
    ]
    return SP_DRVINFO_DATA_V1_A
def _define_SP_DRVINFO_DATA_V1_W_head():
    class SP_DRVINFO_DATA_V1_W(Structure):
        pass
    return SP_DRVINFO_DATA_V1_W
def _define_SP_DRVINFO_DATA_V1_W():
    SP_DRVINFO_DATA_V1_W = win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V1_W_head
    SP_DRVINFO_DATA_V1_W._fields_ = [
        ('cbSize', UInt32),
        ('DriverType', UInt32),
        ('Reserved', UIntPtr),
        ('Description', Char * 256),
        ('MfgName', Char * 256),
        ('ProviderName', Char * 256),
    ]
    return SP_DRVINFO_DATA_V1_W
def _define_SP_DRVINFO_DATA_V2_A_head():
    class SP_DRVINFO_DATA_V2_A(Structure):
        pass
    return SP_DRVINFO_DATA_V2_A
def _define_SP_DRVINFO_DATA_V2_A():
    SP_DRVINFO_DATA_V2_A = win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_A_head
    SP_DRVINFO_DATA_V2_A._fields_ = [
        ('cbSize', UInt32),
        ('DriverType', UInt32),
        ('Reserved', UIntPtr),
        ('Description', win32more.Foundation.CHAR * 256),
        ('MfgName', win32more.Foundation.CHAR * 256),
        ('ProviderName', win32more.Foundation.CHAR * 256),
        ('DriverDate', win32more.Foundation.FILETIME),
        ('DriverVersion', UInt64),
    ]
    return SP_DRVINFO_DATA_V2_A
def _define_SP_DRVINFO_DATA_V2_W_head():
    class SP_DRVINFO_DATA_V2_W(Structure):
        pass
    return SP_DRVINFO_DATA_V2_W
def _define_SP_DRVINFO_DATA_V2_W():
    SP_DRVINFO_DATA_V2_W = win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_W_head
    SP_DRVINFO_DATA_V2_W._fields_ = [
        ('cbSize', UInt32),
        ('DriverType', UInt32),
        ('Reserved', UIntPtr),
        ('Description', Char * 256),
        ('MfgName', Char * 256),
        ('ProviderName', Char * 256),
        ('DriverDate', win32more.Foundation.FILETIME),
        ('DriverVersion', UInt64),
    ]
    return SP_DRVINFO_DATA_V2_W
def _define_SP_DRVINFO_DETAIL_DATA_A_head():
    class SP_DRVINFO_DETAIL_DATA_A(Structure):
        pass
    return SP_DRVINFO_DETAIL_DATA_A
def _define_SP_DRVINFO_DETAIL_DATA_A():
    SP_DRVINFO_DETAIL_DATA_A = win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DETAIL_DATA_A_head
    SP_DRVINFO_DETAIL_DATA_A._fields_ = [
        ('cbSize', UInt32),
        ('InfDate', win32more.Foundation.FILETIME),
        ('CompatIDsOffset', UInt32),
        ('CompatIDsLength', UInt32),
        ('Reserved', UIntPtr),
        ('SectionName', win32more.Foundation.CHAR * 256),
        ('InfFileName', win32more.Foundation.CHAR * 260),
        ('DrvDescription', win32more.Foundation.CHAR * 256),
        ('HardwareID', win32more.Foundation.CHAR * 1),
    ]
    return SP_DRVINFO_DETAIL_DATA_A
def _define_SP_DRVINFO_DETAIL_DATA_W_head():
    class SP_DRVINFO_DETAIL_DATA_W(Structure):
        pass
    return SP_DRVINFO_DETAIL_DATA_W
def _define_SP_DRVINFO_DETAIL_DATA_W():
    SP_DRVINFO_DETAIL_DATA_W = win32more.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DETAIL_DATA_W_head
    SP_DRVINFO_DETAIL_DATA_W._fields_ = [
        ('cbSize', UInt32),
        ('InfDate', win32more.Foundation.FILETIME),
        ('CompatIDsOffset', UInt32),
        ('CompatIDsLength', UInt32),
        ('Reserved', UIntPtr),
        ('SectionName', Char * 256),
        ('InfFileName', Char * 260),
        ('DrvDescription', Char * 256),
        ('HardwareID', Char * 1),
    ]
    return SP_DRVINFO_DETAIL_DATA_W
def _define_SP_DRVINSTALL_PARAMS_head():
    class SP_DRVINSTALL_PARAMS(Structure):
        pass
    return SP_DRVINSTALL_PARAMS
def _define_SP_DRVINSTALL_PARAMS():
    SP_DRVINSTALL_PARAMS = win32more.Devices.DeviceAndDriverInstallation.SP_DRVINSTALL_PARAMS_head
    SP_DRVINSTALL_PARAMS._fields_ = [
        ('cbSize', UInt32),
        ('Rank', UInt32),
        ('Flags', UInt32),
        ('PrivateData', UIntPtr),
        ('Reserved', UInt32),
    ]
    return SP_DRVINSTALL_PARAMS
def _define_SP_ENABLECLASS_PARAMS_head():
    class SP_ENABLECLASS_PARAMS(Structure):
        pass
    return SP_ENABLECLASS_PARAMS
def _define_SP_ENABLECLASS_PARAMS():
    SP_ENABLECLASS_PARAMS = win32more.Devices.DeviceAndDriverInstallation.SP_ENABLECLASS_PARAMS_head
    SP_ENABLECLASS_PARAMS._fields_ = [
        ('ClassInstallHeader', win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ('ClassGuid', Guid),
        ('EnableMessage', UInt32),
    ]
    return SP_ENABLECLASS_PARAMS
def _define_SP_FILE_COPY_PARAMS_A_head():
    class SP_FILE_COPY_PARAMS_A(Structure):
        pass
    return SP_FILE_COPY_PARAMS_A
def _define_SP_FILE_COPY_PARAMS_A():
    SP_FILE_COPY_PARAMS_A = win32more.Devices.DeviceAndDriverInstallation.SP_FILE_COPY_PARAMS_A_head
    SP_FILE_COPY_PARAMS_A._fields_ = [
        ('cbSize', UInt32),
        ('QueueHandle', c_void_p),
        ('SourceRootPath', win32more.Foundation.PSTR),
        ('SourcePath', win32more.Foundation.PSTR),
        ('SourceFilename', win32more.Foundation.PSTR),
        ('SourceDescription', win32more.Foundation.PSTR),
        ('SourceTagfile', win32more.Foundation.PSTR),
        ('TargetDirectory', win32more.Foundation.PSTR),
        ('TargetFilename', win32more.Foundation.PSTR),
        ('CopyStyle', UInt32),
        ('LayoutInf', c_void_p),
        ('SecurityDescriptor', win32more.Foundation.PSTR),
    ]
    return SP_FILE_COPY_PARAMS_A
def _define_SP_FILE_COPY_PARAMS_W_head():
    class SP_FILE_COPY_PARAMS_W(Structure):
        pass
    return SP_FILE_COPY_PARAMS_W
def _define_SP_FILE_COPY_PARAMS_W():
    SP_FILE_COPY_PARAMS_W = win32more.Devices.DeviceAndDriverInstallation.SP_FILE_COPY_PARAMS_W_head
    SP_FILE_COPY_PARAMS_W._fields_ = [
        ('cbSize', UInt32),
        ('QueueHandle', c_void_p),
        ('SourceRootPath', win32more.Foundation.PWSTR),
        ('SourcePath', win32more.Foundation.PWSTR),
        ('SourceFilename', win32more.Foundation.PWSTR),
        ('SourceDescription', win32more.Foundation.PWSTR),
        ('SourceTagfile', win32more.Foundation.PWSTR),
        ('TargetDirectory', win32more.Foundation.PWSTR),
        ('TargetFilename', win32more.Foundation.PWSTR),
        ('CopyStyle', UInt32),
        ('LayoutInf', c_void_p),
        ('SecurityDescriptor', win32more.Foundation.PWSTR),
    ]
    return SP_FILE_COPY_PARAMS_W
def _define_SP_INF_INFORMATION_head():
    class SP_INF_INFORMATION(Structure):
        pass
    return SP_INF_INFORMATION
def _define_SP_INF_INFORMATION():
    SP_INF_INFORMATION = win32more.Devices.DeviceAndDriverInstallation.SP_INF_INFORMATION_head
    SP_INF_INFORMATION._fields_ = [
        ('InfStyle', win32more.Devices.DeviceAndDriverInstallation.SP_INF_STYLE),
        ('InfCount', UInt32),
        ('VersionData', Byte * 1),
    ]
    return SP_INF_INFORMATION
def _define_SP_INF_SIGNER_INFO_V1_A_head():
    class SP_INF_SIGNER_INFO_V1_A(Structure):
        pass
    return SP_INF_SIGNER_INFO_V1_A
def _define_SP_INF_SIGNER_INFO_V1_A():
    SP_INF_SIGNER_INFO_V1_A = win32more.Devices.DeviceAndDriverInstallation.SP_INF_SIGNER_INFO_V1_A_head
    SP_INF_SIGNER_INFO_V1_A._fields_ = [
        ('cbSize', UInt32),
        ('CatalogFile', win32more.Foundation.CHAR * 260),
        ('DigitalSigner', win32more.Foundation.CHAR * 260),
        ('DigitalSignerVersion', win32more.Foundation.CHAR * 260),
    ]
    return SP_INF_SIGNER_INFO_V1_A
def _define_SP_INF_SIGNER_INFO_V1_W_head():
    class SP_INF_SIGNER_INFO_V1_W(Structure):
        pass
    return SP_INF_SIGNER_INFO_V1_W
def _define_SP_INF_SIGNER_INFO_V1_W():
    SP_INF_SIGNER_INFO_V1_W = win32more.Devices.DeviceAndDriverInstallation.SP_INF_SIGNER_INFO_V1_W_head
    SP_INF_SIGNER_INFO_V1_W._fields_ = [
        ('cbSize', UInt32),
        ('CatalogFile', Char * 260),
        ('DigitalSigner', Char * 260),
        ('DigitalSignerVersion', Char * 260),
    ]
    return SP_INF_SIGNER_INFO_V1_W
def _define_SP_INF_SIGNER_INFO_V2_A_head():
    class SP_INF_SIGNER_INFO_V2_A(Structure):
        pass
    return SP_INF_SIGNER_INFO_V2_A
def _define_SP_INF_SIGNER_INFO_V2_A():
    SP_INF_SIGNER_INFO_V2_A = win32more.Devices.DeviceAndDriverInstallation.SP_INF_SIGNER_INFO_V2_A_head
    SP_INF_SIGNER_INFO_V2_A._fields_ = [
        ('cbSize', UInt32),
        ('CatalogFile', win32more.Foundation.CHAR * 260),
        ('DigitalSigner', win32more.Foundation.CHAR * 260),
        ('DigitalSignerVersion', win32more.Foundation.CHAR * 260),
        ('SignerScore', UInt32),
    ]
    return SP_INF_SIGNER_INFO_V2_A
def _define_SP_INF_SIGNER_INFO_V2_W_head():
    class SP_INF_SIGNER_INFO_V2_W(Structure):
        pass
    return SP_INF_SIGNER_INFO_V2_W
def _define_SP_INF_SIGNER_INFO_V2_W():
    SP_INF_SIGNER_INFO_V2_W = win32more.Devices.DeviceAndDriverInstallation.SP_INF_SIGNER_INFO_V2_W_head
    SP_INF_SIGNER_INFO_V2_W._fields_ = [
        ('cbSize', UInt32),
        ('CatalogFile', Char * 260),
        ('DigitalSigner', Char * 260),
        ('DigitalSignerVersion', Char * 260),
        ('SignerScore', UInt32),
    ]
    return SP_INF_SIGNER_INFO_V2_W
SP_INF_STYLE = UInt32
INF_STYLE_NONE = 0
INF_STYLE_OLDNT = 1
INF_STYLE_WIN4 = 2
def _define_SP_INSTALLWIZARD_DATA_head():
    class SP_INSTALLWIZARD_DATA(Structure):
        pass
    return SP_INSTALLWIZARD_DATA
def _define_SP_INSTALLWIZARD_DATA():
    SP_INSTALLWIZARD_DATA = win32more.Devices.DeviceAndDriverInstallation.SP_INSTALLWIZARD_DATA_head
    SP_INSTALLWIZARD_DATA._fields_ = [
        ('ClassInstallHeader', win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ('Flags', UInt32),
        ('DynamicPages', win32more.UI.Controls.HPROPSHEETPAGE * 20),
        ('NumDynamicPages', UInt32),
        ('DynamicPageFlags', UInt32),
        ('PrivateFlags', UInt32),
        ('PrivateData', win32more.Foundation.LPARAM),
        ('hwndWizardDlg', win32more.Foundation.HWND),
    ]
    return SP_INSTALLWIZARD_DATA
def _define_SP_NEWDEVICEWIZARD_DATA_head():
    class SP_NEWDEVICEWIZARD_DATA(Structure):
        pass
    return SP_NEWDEVICEWIZARD_DATA
def _define_SP_NEWDEVICEWIZARD_DATA():
    SP_NEWDEVICEWIZARD_DATA = win32more.Devices.DeviceAndDriverInstallation.SP_NEWDEVICEWIZARD_DATA_head
    SP_NEWDEVICEWIZARD_DATA._fields_ = [
        ('ClassInstallHeader', win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ('Flags', UInt32),
        ('DynamicPages', win32more.UI.Controls.HPROPSHEETPAGE * 20),
        ('NumDynamicPages', UInt32),
        ('hwndWizardDlg', win32more.Foundation.HWND),
    ]
    return SP_NEWDEVICEWIZARD_DATA
def _define_SP_ORIGINAL_FILE_INFO_A_head():
    class SP_ORIGINAL_FILE_INFO_A(Structure):
        pass
    return SP_ORIGINAL_FILE_INFO_A
def _define_SP_ORIGINAL_FILE_INFO_A():
    SP_ORIGINAL_FILE_INFO_A = win32more.Devices.DeviceAndDriverInstallation.SP_ORIGINAL_FILE_INFO_A_head
    SP_ORIGINAL_FILE_INFO_A._fields_ = [
        ('cbSize', UInt32),
        ('OriginalInfName', win32more.Foundation.CHAR * 260),
        ('OriginalCatalogName', win32more.Foundation.CHAR * 260),
    ]
    return SP_ORIGINAL_FILE_INFO_A
def _define_SP_ORIGINAL_FILE_INFO_W_head():
    class SP_ORIGINAL_FILE_INFO_W(Structure):
        pass
    return SP_ORIGINAL_FILE_INFO_W
def _define_SP_ORIGINAL_FILE_INFO_W():
    SP_ORIGINAL_FILE_INFO_W = win32more.Devices.DeviceAndDriverInstallation.SP_ORIGINAL_FILE_INFO_W_head
    SP_ORIGINAL_FILE_INFO_W._fields_ = [
        ('cbSize', UInt32),
        ('OriginalInfName', Char * 260),
        ('OriginalCatalogName', Char * 260),
    ]
    return SP_ORIGINAL_FILE_INFO_W
def _define_SP_POWERMESSAGEWAKE_PARAMS_A_head():
    class SP_POWERMESSAGEWAKE_PARAMS_A(Structure):
        pass
    return SP_POWERMESSAGEWAKE_PARAMS_A
def _define_SP_POWERMESSAGEWAKE_PARAMS_A():
    SP_POWERMESSAGEWAKE_PARAMS_A = win32more.Devices.DeviceAndDriverInstallation.SP_POWERMESSAGEWAKE_PARAMS_A_head
    SP_POWERMESSAGEWAKE_PARAMS_A._fields_ = [
        ('ClassInstallHeader', win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ('PowerMessageWake', win32more.Foundation.CHAR * 512),
    ]
    return SP_POWERMESSAGEWAKE_PARAMS_A
def _define_SP_POWERMESSAGEWAKE_PARAMS_W_head():
    class SP_POWERMESSAGEWAKE_PARAMS_W(Structure):
        pass
    return SP_POWERMESSAGEWAKE_PARAMS_W
def _define_SP_POWERMESSAGEWAKE_PARAMS_W():
    SP_POWERMESSAGEWAKE_PARAMS_W = win32more.Devices.DeviceAndDriverInstallation.SP_POWERMESSAGEWAKE_PARAMS_W_head
    SP_POWERMESSAGEWAKE_PARAMS_W._fields_ = [
        ('ClassInstallHeader', win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ('PowerMessageWake', Char * 512),
    ]
    return SP_POWERMESSAGEWAKE_PARAMS_W
def _define_SP_PROPCHANGE_PARAMS_head():
    class SP_PROPCHANGE_PARAMS(Structure):
        pass
    return SP_PROPCHANGE_PARAMS
def _define_SP_PROPCHANGE_PARAMS():
    SP_PROPCHANGE_PARAMS = win32more.Devices.DeviceAndDriverInstallation.SP_PROPCHANGE_PARAMS_head
    SP_PROPCHANGE_PARAMS._fields_ = [
        ('ClassInstallHeader', win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ('StateChange', UInt32),
        ('Scope', UInt32),
        ('HwProfile', UInt32),
    ]
    return SP_PROPCHANGE_PARAMS
def _define_SP_PROPSHEETPAGE_REQUEST_head():
    class SP_PROPSHEETPAGE_REQUEST(Structure):
        pass
    return SP_PROPSHEETPAGE_REQUEST
def _define_SP_PROPSHEETPAGE_REQUEST():
    SP_PROPSHEETPAGE_REQUEST = win32more.Devices.DeviceAndDriverInstallation.SP_PROPSHEETPAGE_REQUEST_head
    SP_PROPSHEETPAGE_REQUEST._fields_ = [
        ('cbSize', UInt32),
        ('PageRequested', UInt32),
        ('DeviceInfoSet', win32more.Devices.DeviceAndDriverInstallation.HDEVINFO),
        ('DeviceInfoData', POINTER(win32more.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA_head)),
    ]
    return SP_PROPSHEETPAGE_REQUEST
def _define_SP_REGISTER_CONTROL_STATUSA_head():
    class SP_REGISTER_CONTROL_STATUSA(Structure):
        pass
    return SP_REGISTER_CONTROL_STATUSA
def _define_SP_REGISTER_CONTROL_STATUSA():
    SP_REGISTER_CONTROL_STATUSA = win32more.Devices.DeviceAndDriverInstallation.SP_REGISTER_CONTROL_STATUSA_head
    SP_REGISTER_CONTROL_STATUSA._fields_ = [
        ('cbSize', UInt32),
        ('FileName', win32more.Foundation.PSTR),
        ('Win32Error', UInt32),
        ('FailureCode', UInt32),
    ]
    return SP_REGISTER_CONTROL_STATUSA
def _define_SP_REGISTER_CONTROL_STATUSW_head():
    class SP_REGISTER_CONTROL_STATUSW(Structure):
        pass
    return SP_REGISTER_CONTROL_STATUSW
def _define_SP_REGISTER_CONTROL_STATUSW():
    SP_REGISTER_CONTROL_STATUSW = win32more.Devices.DeviceAndDriverInstallation.SP_REGISTER_CONTROL_STATUSW_head
    SP_REGISTER_CONTROL_STATUSW._fields_ = [
        ('cbSize', UInt32),
        ('FileName', win32more.Foundation.PWSTR),
        ('Win32Error', UInt32),
        ('FailureCode', UInt32),
    ]
    return SP_REGISTER_CONTROL_STATUSW
def _define_SP_REMOVEDEVICE_PARAMS_head():
    class SP_REMOVEDEVICE_PARAMS(Structure):
        pass
    return SP_REMOVEDEVICE_PARAMS
def _define_SP_REMOVEDEVICE_PARAMS():
    SP_REMOVEDEVICE_PARAMS = win32more.Devices.DeviceAndDriverInstallation.SP_REMOVEDEVICE_PARAMS_head
    SP_REMOVEDEVICE_PARAMS._fields_ = [
        ('ClassInstallHeader', win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ('Scope', UInt32),
        ('HwProfile', UInt32),
    ]
    return SP_REMOVEDEVICE_PARAMS
def _define_SP_SELECTDEVICE_PARAMS_A_head():
    class SP_SELECTDEVICE_PARAMS_A(Structure):
        pass
    return SP_SELECTDEVICE_PARAMS_A
def _define_SP_SELECTDEVICE_PARAMS_A():
    SP_SELECTDEVICE_PARAMS_A = win32more.Devices.DeviceAndDriverInstallation.SP_SELECTDEVICE_PARAMS_A_head
    SP_SELECTDEVICE_PARAMS_A._fields_ = [
        ('ClassInstallHeader', win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ('Title', win32more.Foundation.CHAR * 60),
        ('Instructions', win32more.Foundation.CHAR * 256),
        ('ListLabel', win32more.Foundation.CHAR * 30),
        ('SubTitle', win32more.Foundation.CHAR * 256),
        ('Reserved', Byte * 2),
    ]
    return SP_SELECTDEVICE_PARAMS_A
def _define_SP_SELECTDEVICE_PARAMS_W_head():
    class SP_SELECTDEVICE_PARAMS_W(Structure):
        pass
    return SP_SELECTDEVICE_PARAMS_W
def _define_SP_SELECTDEVICE_PARAMS_W():
    SP_SELECTDEVICE_PARAMS_W = win32more.Devices.DeviceAndDriverInstallation.SP_SELECTDEVICE_PARAMS_W_head
    SP_SELECTDEVICE_PARAMS_W._fields_ = [
        ('ClassInstallHeader', win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ('Title', Char * 60),
        ('Instructions', Char * 256),
        ('ListLabel', Char * 30),
        ('SubTitle', Char * 256),
    ]
    return SP_SELECTDEVICE_PARAMS_W
def _define_SP_TROUBLESHOOTER_PARAMS_A_head():
    class SP_TROUBLESHOOTER_PARAMS_A(Structure):
        pass
    return SP_TROUBLESHOOTER_PARAMS_A
def _define_SP_TROUBLESHOOTER_PARAMS_A():
    SP_TROUBLESHOOTER_PARAMS_A = win32more.Devices.DeviceAndDriverInstallation.SP_TROUBLESHOOTER_PARAMS_A_head
    SP_TROUBLESHOOTER_PARAMS_A._fields_ = [
        ('ClassInstallHeader', win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ('ChmFile', win32more.Foundation.CHAR * 260),
        ('HtmlTroubleShooter', win32more.Foundation.CHAR * 260),
    ]
    return SP_TROUBLESHOOTER_PARAMS_A
def _define_SP_TROUBLESHOOTER_PARAMS_W_head():
    class SP_TROUBLESHOOTER_PARAMS_W(Structure):
        pass
    return SP_TROUBLESHOOTER_PARAMS_W
def _define_SP_TROUBLESHOOTER_PARAMS_W():
    SP_TROUBLESHOOTER_PARAMS_W = win32more.Devices.DeviceAndDriverInstallation.SP_TROUBLESHOOTER_PARAMS_W_head
    SP_TROUBLESHOOTER_PARAMS_W._fields_ = [
        ('ClassInstallHeader', win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ('ChmFile', Char * 260),
        ('HtmlTroubleShooter', Char * 260),
    ]
    return SP_TROUBLESHOOTER_PARAMS_W
def _define_SP_UNREMOVEDEVICE_PARAMS_head():
    class SP_UNREMOVEDEVICE_PARAMS(Structure):
        pass
    return SP_UNREMOVEDEVICE_PARAMS
def _define_SP_UNREMOVEDEVICE_PARAMS():
    SP_UNREMOVEDEVICE_PARAMS = win32more.Devices.DeviceAndDriverInstallation.SP_UNREMOVEDEVICE_PARAMS_head
    SP_UNREMOVEDEVICE_PARAMS._fields_ = [
        ('ClassInstallHeader', win32more.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER),
        ('Scope', UInt32),
        ('HwProfile', UInt32),
    ]
    return SP_UNREMOVEDEVICE_PARAMS
__all__ = [
    "ALLOC_LOG_CONF",
    "BASIC_LOG_CONF",
    "BOOT_LOG_CONF",
    "BUSNUMBER_DES",
    "BUSNUMBER_RANGE",
    "BUSNUMBER_RESOURCE",
    "CABINET_INFO_A",
    "CABINET_INFO_W",
    "CMP_WaitNoPendingInstallEvents",
    "CM_ADD_ID_BITS",
    "CM_ADD_ID_COMPATIBLE",
    "CM_ADD_ID_HARDWARE",
    "CM_ADD_RANGE_ADDIFCONFLICT",
    "CM_ADD_RANGE_BITS",
    "CM_ADD_RANGE_DONOTADDIFCONFLICT",
    "CM_Add_Empty_Log_Conf",
    "CM_Add_Empty_Log_Conf_Ex",
    "CM_Add_IDA",
    "CM_Add_IDW",
    "CM_Add_ID_ExA",
    "CM_Add_ID_ExW",
    "CM_Add_Range",
    "CM_Add_Res_Des",
    "CM_Add_Res_Des_Ex",
    "CM_CDFLAGS_DRIVER",
    "CM_CDFLAGS_RESERVED",
    "CM_CDFLAGS_ROOT_OWNED",
    "CM_CDMASK_DESCRIPTION",
    "CM_CDMASK_DEVINST",
    "CM_CDMASK_FLAGS",
    "CM_CDMASK_RESDES",
    "CM_CDMASK_VALID",
    "CM_CLASS_PROPERTY_BITS",
    "CM_CLASS_PROPERTY_INSTALLER",
    "CM_CLASS_PROPERTY_INTERFACE",
    "CM_CREATE_DEVINST_BITS",
    "CM_CREATE_DEVINST_DO_NOT_INSTALL",
    "CM_CREATE_DEVINST_GENERATE_ID",
    "CM_CREATE_DEVINST_NORMAL",
    "CM_CREATE_DEVINST_NO_WAIT_INSTALL",
    "CM_CREATE_DEVINST_PHANTOM",
    "CM_CREATE_DEVNODE_BITS",
    "CM_CREATE_DEVNODE_DO_NOT_INSTALL",
    "CM_CREATE_DEVNODE_GENERATE_ID",
    "CM_CREATE_DEVNODE_NORMAL",
    "CM_CREATE_DEVNODE_NO_WAIT_INSTALL",
    "CM_CREATE_DEVNODE_PHANTOM",
    "CM_CRP_CHARACTERISTICS",
    "CM_CRP_DEVTYPE",
    "CM_CRP_EXCLUSIVE",
    "CM_CRP_LOWERFILTERS",
    "CM_CRP_MAX",
    "CM_CRP_MIN",
    "CM_CRP_SECURITY",
    "CM_CRP_SECURITY_SDS",
    "CM_CRP_UPPERFILTERS",
    "CM_CUSTOMDEVPROP_BITS",
    "CM_CUSTOMDEVPROP_MERGE_MULTISZ",
    "CM_Connect_MachineA",
    "CM_Connect_MachineW",
    "CM_Create_DevNodeA",
    "CM_Create_DevNodeW",
    "CM_Create_DevNode_ExA",
    "CM_Create_DevNode_ExW",
    "CM_Create_Range_List",
    "CM_DELETE_CLASS_BITS",
    "CM_DELETE_CLASS_INTERFACE",
    "CM_DELETE_CLASS_ONLY",
    "CM_DELETE_CLASS_SUBKEYS",
    "CM_DETECT_BITS",
    "CM_DETECT_CRASHED",
    "CM_DETECT_HWPROF_FIRST_BOOT",
    "CM_DETECT_NEW_PROFILE",
    "CM_DETECT_RUN",
    "CM_DEVCAP_DOCKDEVICE",
    "CM_DEVCAP_EJECTSUPPORTED",
    "CM_DEVCAP_HARDWAREDISABLED",
    "CM_DEVCAP_LOCKSUPPORTED",
    "CM_DEVCAP_NONDYNAMIC",
    "CM_DEVCAP_RAWDEVICEOK",
    "CM_DEVCAP_REMOVABLE",
    "CM_DEVCAP_SECUREDEVICE",
    "CM_DEVCAP_SILENTINSTALL",
    "CM_DEVCAP_SURPRISEREMOVALOK",
    "CM_DEVCAP_UNIQUEID",
    "CM_DEVICE_PANEL_EDGE_BOTTOM",
    "CM_DEVICE_PANEL_EDGE_LEFT",
    "CM_DEVICE_PANEL_EDGE_RIGHT",
    "CM_DEVICE_PANEL_EDGE_TOP",
    "CM_DEVICE_PANEL_EDGE_UNKNOWN",
    "CM_DEVICE_PANEL_JOINT_TYPE_HINGE",
    "CM_DEVICE_PANEL_JOINT_TYPE_PIVOT",
    "CM_DEVICE_PANEL_JOINT_TYPE_PLANAR",
    "CM_DEVICE_PANEL_JOINT_TYPE_SWIVEL",
    "CM_DEVICE_PANEL_JOINT_TYPE_UNKNOWN",
    "CM_DEVICE_PANEL_ORIENTATION_HORIZONTAL",
    "CM_DEVICE_PANEL_ORIENTATION_VERTICAL",
    "CM_DEVICE_PANEL_SHAPE_OVAL",
    "CM_DEVICE_PANEL_SHAPE_RECTANGLE",
    "CM_DEVICE_PANEL_SHAPE_UNKNOWN",
    "CM_DEVICE_PANEL_SIDE_BACK",
    "CM_DEVICE_PANEL_SIDE_BOTTOM",
    "CM_DEVICE_PANEL_SIDE_FRONT",
    "CM_DEVICE_PANEL_SIDE_LEFT",
    "CM_DEVICE_PANEL_SIDE_RIGHT",
    "CM_DEVICE_PANEL_SIDE_TOP",
    "CM_DEVICE_PANEL_SIDE_UNKNOWN",
    "CM_DISABLE_ABSOLUTE",
    "CM_DISABLE_BITS",
    "CM_DISABLE_HARDWARE",
    "CM_DISABLE_PERSIST",
    "CM_DISABLE_POLITE",
    "CM_DISABLE_UI_NOT_OK",
    "CM_DRP_ADDRESS",
    "CM_DRP_BASE_CONTAINERID",
    "CM_DRP_BUSNUMBER",
    "CM_DRP_BUSTYPEGUID",
    "CM_DRP_CAPABILITIES",
    "CM_DRP_CHARACTERISTICS",
    "CM_DRP_CLASS",
    "CM_DRP_CLASSGUID",
    "CM_DRP_COMPATIBLEIDS",
    "CM_DRP_CONFIGFLAGS",
    "CM_DRP_DEVICEDESC",
    "CM_DRP_DEVICE_POWER_DATA",
    "CM_DRP_DEVTYPE",
    "CM_DRP_DRIVER",
    "CM_DRP_ENUMERATOR_NAME",
    "CM_DRP_EXCLUSIVE",
    "CM_DRP_FRIENDLYNAME",
    "CM_DRP_HARDWAREID",
    "CM_DRP_INSTALL_STATE",
    "CM_DRP_LEGACYBUSTYPE",
    "CM_DRP_LOCATION_INFORMATION",
    "CM_DRP_LOCATION_PATHS",
    "CM_DRP_LOWERFILTERS",
    "CM_DRP_MAX",
    "CM_DRP_MFG",
    "CM_DRP_MIN",
    "CM_DRP_PHYSICAL_DEVICE_OBJECT_NAME",
    "CM_DRP_REMOVAL_POLICY",
    "CM_DRP_REMOVAL_POLICY_HW_DEFAULT",
    "CM_DRP_REMOVAL_POLICY_OVERRIDE",
    "CM_DRP_SECURITY",
    "CM_DRP_SECURITY_SDS",
    "CM_DRP_SERVICE",
    "CM_DRP_UI_NUMBER",
    "CM_DRP_UI_NUMBER_DESC_FORMAT",
    "CM_DRP_UNUSED0",
    "CM_DRP_UNUSED1",
    "CM_DRP_UNUSED2",
    "CM_DRP_UPPERFILTERS",
    "CM_Delete_Class_Key",
    "CM_Delete_Class_Key_Ex",
    "CM_Delete_DevNode_Key",
    "CM_Delete_DevNode_Key_Ex",
    "CM_Delete_Device_Interface_KeyA",
    "CM_Delete_Device_Interface_KeyW",
    "CM_Delete_Device_Interface_Key_ExA",
    "CM_Delete_Device_Interface_Key_ExW",
    "CM_Delete_Range",
    "CM_Detect_Resource_Conflict",
    "CM_Detect_Resource_Conflict_Ex",
    "CM_Disable_DevNode",
    "CM_Disable_DevNode_Ex",
    "CM_Disconnect_Machine",
    "CM_Dup_Range_List",
    "CM_ENUMERATE_CLASSES_BITS",
    "CM_ENUMERATE_CLASSES_INSTALLER",
    "CM_ENUMERATE_CLASSES_INTERFACE",
    "CM_Enable_DevNode",
    "CM_Enable_DevNode_Ex",
    "CM_Enumerate_Classes",
    "CM_Enumerate_Classes_Ex",
    "CM_Enumerate_EnumeratorsA",
    "CM_Enumerate_EnumeratorsW",
    "CM_Enumerate_Enumerators_ExA",
    "CM_Enumerate_Enumerators_ExW",
    "CM_Find_Range",
    "CM_First_Range",
    "CM_Free_Log_Conf",
    "CM_Free_Log_Conf_Ex",
    "CM_Free_Log_Conf_Handle",
    "CM_Free_Range_List",
    "CM_Free_Res_Des",
    "CM_Free_Res_Des_Ex",
    "CM_Free_Res_Des_Handle",
    "CM_Free_Resource_Conflict_Handle",
    "CM_GETIDLIST_DONOTGENERATE",
    "CM_GETIDLIST_FILTER_BITS",
    "CM_GETIDLIST_FILTER_BUSRELATIONS",
    "CM_GETIDLIST_FILTER_CLASS",
    "CM_GETIDLIST_FILTER_EJECTRELATIONS",
    "CM_GETIDLIST_FILTER_ENUMERATOR",
    "CM_GETIDLIST_FILTER_NONE",
    "CM_GETIDLIST_FILTER_POWERRELATIONS",
    "CM_GETIDLIST_FILTER_PRESENT",
    "CM_GETIDLIST_FILTER_REMOVALRELATIONS",
    "CM_GETIDLIST_FILTER_SERVICE",
    "CM_GETIDLIST_FILTER_TRANSPORTRELATIONS",
    "CM_GET_DEVICE_INTERFACE_LIST_ALL_DEVICES",
    "CM_GET_DEVICE_INTERFACE_LIST_BITS",
    "CM_GET_DEVICE_INTERFACE_LIST_PRESENT",
    "CM_GLOBAL_STATE_CAN_DO_UI",
    "CM_GLOBAL_STATE_DETECTION_PENDING",
    "CM_GLOBAL_STATE_ON_BIG_STACK",
    "CM_GLOBAL_STATE_REBOOT_REQUIRED",
    "CM_GLOBAL_STATE_SERVICES_AVAILABLE",
    "CM_GLOBAL_STATE_SHUTTING_DOWN",
    "CM_Get_Child",
    "CM_Get_Child_Ex",
    "CM_Get_Class_Key_NameA",
    "CM_Get_Class_Key_NameW",
    "CM_Get_Class_Key_Name_ExA",
    "CM_Get_Class_Key_Name_ExW",
    "CM_Get_Class_NameA",
    "CM_Get_Class_NameW",
    "CM_Get_Class_Name_ExA",
    "CM_Get_Class_Name_ExW",
    "CM_Get_Class_PropertyW",
    "CM_Get_Class_Property_ExW",
    "CM_Get_Class_Property_Keys",
    "CM_Get_Class_Property_Keys_Ex",
    "CM_Get_Class_Registry_PropertyA",
    "CM_Get_Class_Registry_PropertyW",
    "CM_Get_Depth",
    "CM_Get_Depth_Ex",
    "CM_Get_DevNode_Custom_PropertyA",
    "CM_Get_DevNode_Custom_PropertyW",
    "CM_Get_DevNode_Custom_Property_ExA",
    "CM_Get_DevNode_Custom_Property_ExW",
    "CM_Get_DevNode_PropertyW",
    "CM_Get_DevNode_Property_ExW",
    "CM_Get_DevNode_Property_Keys",
    "CM_Get_DevNode_Property_Keys_Ex",
    "CM_Get_DevNode_Registry_PropertyA",
    "CM_Get_DevNode_Registry_PropertyW",
    "CM_Get_DevNode_Registry_Property_ExA",
    "CM_Get_DevNode_Registry_Property_ExW",
    "CM_Get_DevNode_Status",
    "CM_Get_DevNode_Status_Ex",
    "CM_Get_Device_IDA",
    "CM_Get_Device_IDW",
    "CM_Get_Device_ID_ExA",
    "CM_Get_Device_ID_ExW",
    "CM_Get_Device_ID_ListA",
    "CM_Get_Device_ID_ListW",
    "CM_Get_Device_ID_List_ExA",
    "CM_Get_Device_ID_List_ExW",
    "CM_Get_Device_ID_List_SizeA",
    "CM_Get_Device_ID_List_SizeW",
    "CM_Get_Device_ID_List_Size_ExA",
    "CM_Get_Device_ID_List_Size_ExW",
    "CM_Get_Device_ID_Size",
    "CM_Get_Device_ID_Size_Ex",
    "CM_Get_Device_Interface_AliasA",
    "CM_Get_Device_Interface_AliasW",
    "CM_Get_Device_Interface_Alias_ExA",
    "CM_Get_Device_Interface_Alias_ExW",
    "CM_Get_Device_Interface_ListA",
    "CM_Get_Device_Interface_ListW",
    "CM_Get_Device_Interface_List_ExA",
    "CM_Get_Device_Interface_List_ExW",
    "CM_Get_Device_Interface_List_SizeA",
    "CM_Get_Device_Interface_List_SizeW",
    "CM_Get_Device_Interface_List_Size_ExA",
    "CM_Get_Device_Interface_List_Size_ExW",
    "CM_Get_Device_Interface_PropertyW",
    "CM_Get_Device_Interface_Property_ExW",
    "CM_Get_Device_Interface_Property_KeysW",
    "CM_Get_Device_Interface_Property_Keys_ExW",
    "CM_Get_First_Log_Conf",
    "CM_Get_First_Log_Conf_Ex",
    "CM_Get_Global_State",
    "CM_Get_Global_State_Ex",
    "CM_Get_HW_Prof_FlagsA",
    "CM_Get_HW_Prof_FlagsW",
    "CM_Get_HW_Prof_Flags_ExA",
    "CM_Get_HW_Prof_Flags_ExW",
    "CM_Get_Hardware_Profile_InfoA",
    "CM_Get_Hardware_Profile_InfoW",
    "CM_Get_Hardware_Profile_Info_ExA",
    "CM_Get_Hardware_Profile_Info_ExW",
    "CM_Get_Log_Conf_Priority",
    "CM_Get_Log_Conf_Priority_Ex",
    "CM_Get_Next_Log_Conf",
    "CM_Get_Next_Log_Conf_Ex",
    "CM_Get_Next_Res_Des",
    "CM_Get_Next_Res_Des_Ex",
    "CM_Get_Parent",
    "CM_Get_Parent_Ex",
    "CM_Get_Res_Des_Data",
    "CM_Get_Res_Des_Data_Ex",
    "CM_Get_Res_Des_Data_Size",
    "CM_Get_Res_Des_Data_Size_Ex",
    "CM_Get_Resource_Conflict_Count",
    "CM_Get_Resource_Conflict_DetailsA",
    "CM_Get_Resource_Conflict_DetailsW",
    "CM_Get_Sibling",
    "CM_Get_Sibling_Ex",
    "CM_Get_Version",
    "CM_Get_Version_Ex",
    "CM_HWPI_DOCKED",
    "CM_HWPI_NOT_DOCKABLE",
    "CM_HWPI_UNDOCKED",
    "CM_INSTALL_STATE_FAILED_INSTALL",
    "CM_INSTALL_STATE_FINISH_INSTALL",
    "CM_INSTALL_STATE_INSTALLED",
    "CM_INSTALL_STATE_NEEDS_REINSTALL",
    "CM_Intersect_Range_List",
    "CM_Invert_Range_List",
    "CM_Is_Dock_Station_Present",
    "CM_Is_Dock_Station_Present_Ex",
    "CM_Is_Version_Available",
    "CM_Is_Version_Available_Ex",
    "CM_LOCATE_DEVINST_BITS",
    "CM_LOCATE_DEVINST_CANCELREMOVE",
    "CM_LOCATE_DEVINST_NORMAL",
    "CM_LOCATE_DEVINST_NOVALIDATION",
    "CM_LOCATE_DEVINST_PHANTOM",
    "CM_LOCATE_DEVNODE_BITS",
    "CM_LOCATE_DEVNODE_CANCELREMOVE",
    "CM_LOCATE_DEVNODE_NORMAL",
    "CM_LOCATE_DEVNODE_NOVALIDATION",
    "CM_LOCATE_DEVNODE_PHANTOM",
    "CM_Locate_DevNodeA",
    "CM_Locate_DevNodeW",
    "CM_Locate_DevNode_ExA",
    "CM_Locate_DevNode_ExW",
    "CM_MapCrToWin32Err",
    "CM_Merge_Range_List",
    "CM_Modify_Res_Des",
    "CM_Modify_Res_Des_Ex",
    "CM_Move_DevNode",
    "CM_Move_DevNode_Ex",
    "CM_NAME_ATTRIBUTE_NAME_RETRIEVED_FROM_DEVICE",
    "CM_NAME_ATTRIBUTE_USER_ASSIGNED_NAME",
    "CM_NOTIFY_ACTION",
    "CM_NOTIFY_ACTION_DEVICECUSTOMEVENT",
    "CM_NOTIFY_ACTION_DEVICEINSTANCEENUMERATED",
    "CM_NOTIFY_ACTION_DEVICEINSTANCEREMOVED",
    "CM_NOTIFY_ACTION_DEVICEINSTANCESTARTED",
    "CM_NOTIFY_ACTION_DEVICEINTERFACEARRIVAL",
    "CM_NOTIFY_ACTION_DEVICEINTERFACEREMOVAL",
    "CM_NOTIFY_ACTION_DEVICEQUERYREMOVE",
    "CM_NOTIFY_ACTION_DEVICEQUERYREMOVEFAILED",
    "CM_NOTIFY_ACTION_DEVICEREMOVECOMPLETE",
    "CM_NOTIFY_ACTION_DEVICEREMOVEPENDING",
    "CM_NOTIFY_ACTION_MAX",
    "CM_NOTIFY_EVENT_DATA",
    "CM_NOTIFY_FILTER",
    "CM_NOTIFY_FILTER_FLAG_ALL_DEVICE_INSTANCES",
    "CM_NOTIFY_FILTER_FLAG_ALL_INTERFACE_CLASSES",
    "CM_NOTIFY_FILTER_TYPE",
    "CM_NOTIFY_FILTER_TYPE_DEVICEHANDLE",
    "CM_NOTIFY_FILTER_TYPE_DEVICEINSTANCE",
    "CM_NOTIFY_FILTER_TYPE_DEVICEINTERFACE",
    "CM_NOTIFY_FILTER_TYPE_MAX",
    "CM_Next_Range",
    "CM_OPEN_CLASS_KEY_BITS",
    "CM_OPEN_CLASS_KEY_INSTALLER",
    "CM_OPEN_CLASS_KEY_INTERFACE",
    "CM_Open_Class_KeyA",
    "CM_Open_Class_KeyW",
    "CM_Open_Class_Key_ExA",
    "CM_Open_Class_Key_ExW",
    "CM_Open_DevNode_Key",
    "CM_Open_DevNode_Key_Ex",
    "CM_Open_Device_Interface_KeyA",
    "CM_Open_Device_Interface_KeyW",
    "CM_Open_Device_Interface_Key_ExA",
    "CM_Open_Device_Interface_Key_ExW",
    "CM_PROB_BIOS_TABLE",
    "CM_PROB_BOOT_CONFIG_CONFLICT",
    "CM_PROB_CANT_SHARE_IRQ",
    "CM_PROB_CONSOLE_LOCKED",
    "CM_PROB_DEVICE_NOT_THERE",
    "CM_PROB_DEVICE_RESET",
    "CM_PROB_DEVLOADER_FAILED",
    "CM_PROB_DEVLOADER_NOT_FOUND",
    "CM_PROB_DEVLOADER_NOT_READY",
    "CM_PROB_DISABLED",
    "CM_PROB_DISABLED_SERVICE",
    "CM_PROB_DRIVER_BLOCKED",
    "CM_PROB_DRIVER_FAILED_LOAD",
    "CM_PROB_DRIVER_FAILED_PRIOR_UNLOAD",
    "CM_PROB_DRIVER_SERVICE_KEY_INVALID",
    "CM_PROB_DUPLICATE_DEVICE",
    "CM_PROB_ENTRY_IS_WRONG_TYPE",
    "CM_PROB_FAILED_ADD",
    "CM_PROB_FAILED_DRIVER_ENTRY",
    "CM_PROB_FAILED_FILTER",
    "CM_PROB_FAILED_INSTALL",
    "CM_PROB_FAILED_POST_START",
    "CM_PROB_FAILED_START",
    "CM_PROB_GUEST_ASSIGNMENT_FAILED",
    "CM_PROB_HALTED",
    "CM_PROB_HARDWARE_DISABLED",
    "CM_PROB_HELD_FOR_EJECT",
    "CM_PROB_INVALID_DATA",
    "CM_PROB_IRQ_TRANSLATION_FAILED",
    "CM_PROB_LACKED_ARBITRATOR",
    "CM_PROB_LEGACY_SERVICE_NO_DEVICES",
    "CM_PROB_LIAR",
    "CM_PROB_MOVED",
    "CM_PROB_NEED_CLASS_CONFIG",
    "CM_PROB_NEED_RESTART",
    "CM_PROB_NORMAL_CONFLICT",
    "CM_PROB_NOT_CONFIGURED",
    "CM_PROB_NOT_VERIFIED",
    "CM_PROB_NO_SOFTCONFIG",
    "CM_PROB_NO_VALID_LOG_CONF",
    "CM_PROB_OUT_OF_MEMORY",
    "CM_PROB_PARTIAL_LOG_CONF",
    "CM_PROB_PHANTOM",
    "CM_PROB_REENUMERATION",
    "CM_PROB_REGISTRY",
    "CM_PROB_REGISTRY_TOO_LARGE",
    "CM_PROB_REINSTALL",
    "CM_PROB_SETPROPERTIES_FAILED",
    "CM_PROB_SYSTEM_SHUTDOWN",
    "CM_PROB_TOO_EARLY",
    "CM_PROB_TRANSLATION_FAILED",
    "CM_PROB_UNKNOWN_RESOURCE",
    "CM_PROB_UNSIGNED_DRIVER",
    "CM_PROB_USED_BY_DEBUGGER",
    "CM_PROB_VXDLDR",
    "CM_PROB_WAITING_ON_DEPENDENCY",
    "CM_PROB_WILL_BE_REMOVED",
    "CM_QUERY_ARBITRATOR_BITS",
    "CM_QUERY_ARBITRATOR_RAW",
    "CM_QUERY_ARBITRATOR_TRANSLATED",
    "CM_QUERY_REMOVE_UI_NOT_OK",
    "CM_QUERY_REMOVE_UI_OK",
    "CM_Query_And_Remove_SubTreeA",
    "CM_Query_And_Remove_SubTreeW",
    "CM_Query_And_Remove_SubTree_ExA",
    "CM_Query_And_Remove_SubTree_ExW",
    "CM_Query_Arbitrator_Free_Data",
    "CM_Query_Arbitrator_Free_Data_Ex",
    "CM_Query_Arbitrator_Free_Size",
    "CM_Query_Arbitrator_Free_Size_Ex",
    "CM_Query_Remove_SubTree",
    "CM_Query_Remove_SubTree_Ex",
    "CM_Query_Resource_Conflict_List",
    "CM_REENUMERATE_ASYNCHRONOUS",
    "CM_REENUMERATE_BITS",
    "CM_REENUMERATE_NORMAL",
    "CM_REENUMERATE_RETRY_INSTALLATION",
    "CM_REENUMERATE_SYNCHRONOUS",
    "CM_REGISTER_DEVICE_DRIVER_BITS",
    "CM_REGISTER_DEVICE_DRIVER_DISABLEABLE",
    "CM_REGISTER_DEVICE_DRIVER_REMOVABLE",
    "CM_REGISTER_DEVICE_DRIVER_STATIC",
    "CM_REGISTRY_BITS",
    "CM_REGISTRY_CONFIG",
    "CM_REGISTRY_HARDWARE",
    "CM_REGISTRY_SOFTWARE",
    "CM_REGISTRY_USER",
    "CM_REMOVAL_POLICY_EXPECT_NO_REMOVAL",
    "CM_REMOVAL_POLICY_EXPECT_ORDERLY_REMOVAL",
    "CM_REMOVAL_POLICY_EXPECT_SURPRISE_REMOVAL",
    "CM_REMOVE_BITS",
    "CM_REMOVE_DISABLE",
    "CM_REMOVE_NO_RESTART",
    "CM_REMOVE_UI_NOT_OK",
    "CM_REMOVE_UI_OK",
    "CM_RESDES_WIDTH_32",
    "CM_RESDES_WIDTH_64",
    "CM_RESDES_WIDTH_BITS",
    "CM_RESDES_WIDTH_DEFAULT",
    "CM_Reenumerate_DevNode",
    "CM_Reenumerate_DevNode_Ex",
    "CM_Register_Device_Driver",
    "CM_Register_Device_Driver_Ex",
    "CM_Register_Device_InterfaceA",
    "CM_Register_Device_InterfaceW",
    "CM_Register_Device_Interface_ExA",
    "CM_Register_Device_Interface_ExW",
    "CM_Register_Notification",
    "CM_Remove_SubTree",
    "CM_Remove_SubTree_Ex",
    "CM_Request_Device_EjectA",
    "CM_Request_Device_EjectW",
    "CM_Request_Device_Eject_ExA",
    "CM_Request_Device_Eject_ExW",
    "CM_Request_Eject_PC",
    "CM_Request_Eject_PC_Ex",
    "CM_Run_Detection",
    "CM_Run_Detection_Ex",
    "CM_SETUP_BITS",
    "CM_SETUP_DEVINST_CONFIG",
    "CM_SETUP_DEVINST_CONFIG_CLASS",
    "CM_SETUP_DEVINST_CONFIG_EXTENSIONS",
    "CM_SETUP_DEVINST_CONFIG_RESET",
    "CM_SETUP_DEVINST_READY",
    "CM_SETUP_DEVINST_RESET",
    "CM_SETUP_DEVNODE_CONFIG",
    "CM_SETUP_DEVNODE_CONFIG_CLASS",
    "CM_SETUP_DEVNODE_CONFIG_EXTENSIONS",
    "CM_SETUP_DEVNODE_CONFIG_RESET",
    "CM_SETUP_DEVNODE_READY",
    "CM_SETUP_DEVNODE_RESET",
    "CM_SETUP_DOWNLOAD",
    "CM_SETUP_PROP_CHANGE",
    "CM_SETUP_WRITE_LOG_CONFS",
    "CM_SET_DEVINST_PROBLEM_BITS",
    "CM_SET_DEVINST_PROBLEM_NORMAL",
    "CM_SET_DEVINST_PROBLEM_OVERRIDE",
    "CM_SET_DEVNODE_PROBLEM_BITS",
    "CM_SET_DEVNODE_PROBLEM_NORMAL",
    "CM_SET_DEVNODE_PROBLEM_OVERRIDE",
    "CM_SET_HW_PROF_FLAGS_BITS",
    "CM_SET_HW_PROF_FLAGS_UI_NOT_OK",
    "CM_Set_Class_PropertyW",
    "CM_Set_Class_Property_ExW",
    "CM_Set_Class_Registry_PropertyA",
    "CM_Set_Class_Registry_PropertyW",
    "CM_Set_DevNode_Problem",
    "CM_Set_DevNode_Problem_Ex",
    "CM_Set_DevNode_PropertyW",
    "CM_Set_DevNode_Property_ExW",
    "CM_Set_DevNode_Registry_PropertyA",
    "CM_Set_DevNode_Registry_PropertyW",
    "CM_Set_DevNode_Registry_Property_ExA",
    "CM_Set_DevNode_Registry_Property_ExW",
    "CM_Set_Device_Interface_PropertyW",
    "CM_Set_Device_Interface_Property_ExW",
    "CM_Set_HW_Prof",
    "CM_Set_HW_Prof_Ex",
    "CM_Set_HW_Prof_FlagsA",
    "CM_Set_HW_Prof_FlagsW",
    "CM_Set_HW_Prof_Flags_ExA",
    "CM_Set_HW_Prof_Flags_ExW",
    "CM_Setup_DevNode",
    "CM_Setup_DevNode_Ex",
    "CM_Test_Range_Available",
    "CM_Uninstall_DevNode",
    "CM_Uninstall_DevNode_Ex",
    "CM_Unregister_Device_InterfaceA",
    "CM_Unregister_Device_InterfaceW",
    "CM_Unregister_Device_Interface_ExA",
    "CM_Unregister_Device_Interface_ExW",
    "CM_Unregister_Notification",
    "COINSTALLER_CONTEXT_DATA",
    "CONFIGMG_VERSION",
    "CONFIGRET",
    "CONFLICT_DETAILS_A",
    "CONFLICT_DETAILS_W",
    "CONNECTION_DES",
    "CONNECTION_RESOURCE",
    "COPYFLG_FORCE_FILE_IN_USE",
    "COPYFLG_IN_USE_TRY_RENAME",
    "COPYFLG_NODECOMP",
    "COPYFLG_NOPRUNE",
    "COPYFLG_NOSKIP",
    "COPYFLG_NOVERSIONCHECK",
    "COPYFLG_NO_OVERWRITE",
    "COPYFLG_NO_VERSION_DIALOG",
    "COPYFLG_OVERWRITE_OLDER_ONLY",
    "COPYFLG_PROTECTED_WINDOWS_DRIVER_FILE",
    "COPYFLG_REPLACEONLY",
    "COPYFLG_REPLACE_BOOT_FILE",
    "COPYFLG_WARN_IF_SKIP",
    "CR_ACCESS_DENIED",
    "CR_ALREADY_SUCH_DEVINST",
    "CR_ALREADY_SUCH_DEVNODE",
    "CR_APM_VETOED",
    "CR_BUFFER_SMALL",
    "CR_CALL_NOT_IMPLEMENTED",
    "CR_CANT_SHARE_IRQ",
    "CR_CREATE_BLOCKED",
    "CR_DEFAULT",
    "CR_DEVICE_INTERFACE_ACTIVE",
    "CR_DEVICE_NOT_THERE",
    "CR_DEVINST_HAS_REQS",
    "CR_DEVLOADER_NOT_READY",
    "CR_DEVNODE_HAS_REQS",
    "CR_DLVXD_NOT_FOUND",
    "CR_FAILURE",
    "CR_FREE_RESOURCES",
    "CR_INVALID_API",
    "CR_INVALID_ARBITRATOR",
    "CR_INVALID_CONFLICT_LIST",
    "CR_INVALID_DATA",
    "CR_INVALID_DEVICE_ID",
    "CR_INVALID_DEVINST",
    "CR_INVALID_DEVNODE",
    "CR_INVALID_FLAG",
    "CR_INVALID_INDEX",
    "CR_INVALID_LOAD_TYPE",
    "CR_INVALID_LOG_CONF",
    "CR_INVALID_MACHINENAME",
    "CR_INVALID_NODELIST",
    "CR_INVALID_POINTER",
    "CR_INVALID_PRIORITY",
    "CR_INVALID_PROPERTY",
    "CR_INVALID_RANGE",
    "CR_INVALID_RANGE_LIST",
    "CR_INVALID_REFERENCE_STRING",
    "CR_INVALID_RESOURCEID",
    "CR_INVALID_RES_DES",
    "CR_INVALID_STRUCTURE_SIZE",
    "CR_MACHINE_UNAVAILABLE",
    "CR_NEED_RESTART",
    "CR_NOT_DISABLEABLE",
    "CR_NOT_SYSTEM_VM",
    "CR_NO_ARBITRATOR",
    "CR_NO_CM_SERVICES",
    "CR_NO_DEPENDENT",
    "CR_NO_MORE_HW_PROFILES",
    "CR_NO_MORE_LOG_CONF",
    "CR_NO_MORE_RES_DES",
    "CR_NO_REGISTRY_HANDLE",
    "CR_NO_SUCH_DEVICE_INTERFACE",
    "CR_NO_SUCH_DEVINST",
    "CR_NO_SUCH_DEVNODE",
    "CR_NO_SUCH_LOGICAL_DEV",
    "CR_NO_SUCH_REGISTRY_KEY",
    "CR_NO_SUCH_VALUE",
    "CR_OUT_OF_MEMORY",
    "CR_QUERY_VETOED",
    "CR_REGISTRY_ERROR",
    "CR_REMOTE_COMM_FAILURE",
    "CR_REMOVE_VETOED",
    "CR_SAME_RESOURCES",
    "CR_SUCCESS",
    "CR_WRONG_TYPE",
    "CS_DES",
    "CS_RESOURCE",
    "DELFLG_IN_USE",
    "DELFLG_IN_USE1",
    "DEVPRIVATE_DES",
    "DEVPRIVATE_RANGE",
    "DEVPRIVATE_RESOURCE",
    "DIBCI_NODISPLAYCLASS",
    "DIBCI_NOINSTALLCLASS",
    "DICD_GENERATE_ID",
    "DICD_INHERIT_CLASSDRVS",
    "DICLASSPROP_INSTALLER",
    "DICLASSPROP_INTERFACE",
    "DICS_DISABLE",
    "DICS_ENABLE",
    "DICS_FLAG_CONFIGGENERAL",
    "DICS_FLAG_CONFIGSPECIFIC",
    "DICS_FLAG_GLOBAL",
    "DICS_PROPCHANGE",
    "DICS_START",
    "DICS_STOP",
    "DICUSTOMDEVPROP_MERGE_MULTISZ",
    "DIF_ADDPROPERTYPAGE_ADVANCED",
    "DIF_ADDPROPERTYPAGE_BASIC",
    "DIF_ADDREMOTEPROPERTYPAGE_ADVANCED",
    "DIF_ALLOW_INSTALL",
    "DIF_ASSIGNRESOURCES",
    "DIF_CALCDISKSPACE",
    "DIF_DESTROYPRIVATEDATA",
    "DIF_DESTROYWIZARDDATA",
    "DIF_DETECT",
    "DIF_DETECTCANCEL",
    "DIF_DETECTVERIFY",
    "DIF_ENABLECLASS",
    "DIF_FINISHINSTALL_ACTION",
    "DIF_FIRSTTIMESETUP",
    "DIF_FOUNDDEVICE",
    "DIF_INSTALLCLASSDRIVERS",
    "DIF_INSTALLDEVICE",
    "DIF_INSTALLDEVICEFILES",
    "DIF_INSTALLINTERFACES",
    "DIF_INSTALLWIZARD",
    "DIF_MOVEDEVICE",
    "DIF_NEWDEVICEWIZARD_FINISHINSTALL",
    "DIF_NEWDEVICEWIZARD_POSTANALYZE",
    "DIF_NEWDEVICEWIZARD_PREANALYZE",
    "DIF_NEWDEVICEWIZARD_PRESELECT",
    "DIF_NEWDEVICEWIZARD_SELECT",
    "DIF_POWERMESSAGEWAKE",
    "DIF_PROPERTIES",
    "DIF_PROPERTYCHANGE",
    "DIF_REGISTERDEVICE",
    "DIF_REGISTER_COINSTALLERS",
    "DIF_REMOVE",
    "DIF_RESERVED1",
    "DIF_RESERVED2",
    "DIF_SELECTBESTCOMPATDRV",
    "DIF_SELECTCLASSDRIVERS",
    "DIF_SELECTDEVICE",
    "DIF_TROUBLESHOOTER",
    "DIF_UNREMOVE",
    "DIF_UNUSED1",
    "DIF_UPDATEDRIVER_UI",
    "DIF_VALIDATECLASSDRIVERS",
    "DIF_VALIDATEDRIVER",
    "DIGCDP_FLAG_ADVANCED",
    "DIGCDP_FLAG_BASIC",
    "DIGCDP_FLAG_REMOTE_ADVANCED",
    "DIGCDP_FLAG_REMOTE_BASIC",
    "DIGCF_ALLCLASSES",
    "DIGCF_DEFAULT",
    "DIGCF_DEVICEINTERFACE",
    "DIGCF_INTERFACEDEVICE",
    "DIGCF_PRESENT",
    "DIGCF_PROFILE",
    "DIIDFLAG_BITS",
    "DIIDFLAG_INSTALLCOPYINFDRIVERS",
    "DIIDFLAG_INSTALLNULLDRIVER",
    "DIIDFLAG_NOFINISHINSTALLUI",
    "DIIDFLAG_SHOWSEARCHUI",
    "DIIRFLAG_FORCE_INF",
    "DIIRFLAG_HOTPATCH",
    "DIIRFLAG_HW_USING_THE_INF",
    "DIIRFLAG_INF_ALREADY_COPIED",
    "DIIRFLAG_INSTALL_AS_SET",
    "DIIRFLAG_NOBACKUP",
    "DIIRFLAG_PRE_CONFIGURE_INF",
    "DIOCR_INSTALLER",
    "DIOCR_INTERFACE",
    "DIODI_NO_ADD",
    "DIOD_CANCEL_REMOVE",
    "DIOD_INHERIT_CLASSDRVS",
    "DIREG_BOTH",
    "DIREG_DEV",
    "DIREG_DRV",
    "DIRID_ABSOLUTE",
    "DIRID_ABSOLUTE_16BIT",
    "DIRID_APPS",
    "DIRID_BOOT",
    "DIRID_COLOR",
    "DIRID_COMMON_APPDATA",
    "DIRID_COMMON_DESKTOPDIRECTORY",
    "DIRID_COMMON_DOCUMENTS",
    "DIRID_COMMON_FAVORITES",
    "DIRID_COMMON_PROGRAMS",
    "DIRID_COMMON_STARTMENU",
    "DIRID_COMMON_STARTUP",
    "DIRID_COMMON_TEMPLATES",
    "DIRID_DEFAULT",
    "DIRID_DRIVERS",
    "DIRID_DRIVER_STORE",
    "DIRID_FONTS",
    "DIRID_HELP",
    "DIRID_INF",
    "DIRID_IOSUBSYS",
    "DIRID_LOADER",
    "DIRID_NULL",
    "DIRID_PRINTPROCESSOR",
    "DIRID_PROGRAM_FILES",
    "DIRID_PROGRAM_FILES_COMMON",
    "DIRID_PROGRAM_FILES_COMMONX86",
    "DIRID_PROGRAM_FILES_X86",
    "DIRID_SHARED",
    "DIRID_SPOOL",
    "DIRID_SPOOLDRIVERS",
    "DIRID_SRCPATH",
    "DIRID_SYSTEM",
    "DIRID_SYSTEM16",
    "DIRID_SYSTEM_X86",
    "DIRID_USER",
    "DIRID_USERPROFILE",
    "DIRID_VIEWERS",
    "DIRID_WINDOWS",
    "DIURFLAG_NO_REMOVE_INF",
    "DIURFLAG_RESERVED",
    "DI_AUTOASSIGNRES",
    "DI_CLASSINSTALLPARAMS",
    "DI_COMPAT_FROM_CLASS",
    "DI_DIDCLASS",
    "DI_DIDCOMPAT",
    "DI_DISABLED",
    "DI_DONOTCALLCONFIGMG",
    "DI_DRIVERPAGE_ADDED",
    "DI_ENUMSINGLEINF",
    "DI_FLAGSEX_ALLOWEXCLUDEDDRVS",
    "DI_FLAGSEX_ALTPLATFORM_DRVSEARCH",
    "DI_FLAGSEX_ALWAYSWRITEIDS",
    "DI_FLAGSEX_APPENDDRIVERLIST",
    "DI_FLAGSEX_BACKUPONREPLACE",
    "DI_FLAGSEX_CI_FAILED",
    "DI_FLAGSEX_DEVICECHANGE",
    "DI_FLAGSEX_DIDCOMPATINFO",
    "DI_FLAGSEX_DIDINFOLIST",
    "DI_FLAGSEX_DRIVERLIST_FROM_URL",
    "DI_FLAGSEX_EXCLUDE_OLD_INET_DRIVERS",
    "DI_FLAGSEX_FILTERCLASSES",
    "DI_FLAGSEX_FILTERSIMILARDRIVERS",
    "DI_FLAGSEX_FINISHINSTALL_ACTION",
    "DI_FLAGSEX_INET_DRIVER",
    "DI_FLAGSEX_INSTALLEDDRIVER",
    "DI_FLAGSEX_IN_SYSTEM_SETUP",
    "DI_FLAGSEX_NOUIONQUERYREMOVE",
    "DI_FLAGSEX_NO_CLASSLIST_NODE_MERGE",
    "DI_FLAGSEX_NO_DRVREG_MODIFY",
    "DI_FLAGSEX_POWERPAGE_ADDED",
    "DI_FLAGSEX_PREINSTALLBACKUP",
    "DI_FLAGSEX_PROPCHANGE_PENDING",
    "DI_FLAGSEX_RECURSIVESEARCH",
    "DI_FLAGSEX_RESERVED1",
    "DI_FLAGSEX_RESERVED2",
    "DI_FLAGSEX_RESERVED3",
    "DI_FLAGSEX_RESERVED4",
    "DI_FLAGSEX_RESTART_DEVICE_ONLY",
    "DI_FLAGSEX_SEARCH_PUBLISHED_INFS",
    "DI_FLAGSEX_SETFAILEDINSTALL",
    "DI_FLAGSEX_USECLASSFORCOMPAT",
    "DI_FORCECOPY",
    "DI_GENERALPAGE_ADDED",
    "DI_INF_IS_SORTED",
    "DI_INSTALLDISABLED",
    "DI_MULTMFGS",
    "DI_NEEDREBOOT",
    "DI_NEEDRESTART",
    "DI_NOBROWSE",
    "DI_NODI_DEFAULTACTION",
    "DI_NOFILECOPY",
    "DI_NOSELECTICONS",
    "DI_NOVCP",
    "DI_NOWRITE_IDS",
    "DI_OVERRIDE_INFFLAGS",
    "DI_PROPERTIES_CHANGE",
    "DI_PROPS_NOCHANGEUSAGE",
    "DI_QUIETINSTALL",
    "DI_REMOVEDEVICE_CONFIGSPECIFIC",
    "DI_REMOVEDEVICE_GLOBAL",
    "DI_RESOURCEPAGE_ADDED",
    "DI_SHOWALL",
    "DI_SHOWCLASS",
    "DI_SHOWCOMPAT",
    "DI_SHOWOEM",
    "DI_UNREMOVEDEVICE_CONFIGSPECIFIC",
    "DI_USECI_SELECTSTRINGS",
    "DMA_DES",
    "DMA_RANGE",
    "DMA_RESOURCE",
    "DMI_BKCOLOR",
    "DMI_MASK",
    "DMI_USERECT",
    "DNF_ALWAYSEXCLUDEFROMLIST",
    "DNF_AUTHENTICODE_SIGNED",
    "DNF_BAD_DRIVER",
    "DNF_BASIC_DRIVER",
    "DNF_CLASS_DRIVER",
    "DNF_COMPATIBLE_DRIVER",
    "DNF_DUPDESC",
    "DNF_DUPDRIVERVER",
    "DNF_DUPPROVIDER",
    "DNF_EXCLUDEFROMLIST",
    "DNF_INBOX_DRIVER",
    "DNF_INET_DRIVER",
    "DNF_INF_IS_SIGNED",
    "DNF_INSTALLEDDRIVER",
    "DNF_LEGACYINF",
    "DNF_NODRIVER",
    "DNF_OEM_F6_INF",
    "DNF_OLDDRIVER",
    "DNF_OLD_INET_DRIVER",
    "DNF_REQUESTADDITIONALSOFTWARE",
    "DNF_UNUSED1",
    "DNF_UNUSED2",
    "DNF_UNUSED_22",
    "DNF_UNUSED_23",
    "DNF_UNUSED_24",
    "DNF_UNUSED_25",
    "DNF_UNUSED_26",
    "DNF_UNUSED_27",
    "DNF_UNUSED_28",
    "DNF_UNUSED_29",
    "DNF_UNUSED_30",
    "DNF_UNUSED_31",
    "DN_APM_DRIVER",
    "DN_APM_ENUMERATOR",
    "DN_ARM_WAKEUP",
    "DN_BAD_PARTIAL",
    "DN_BOOT_LOG_PROB",
    "DN_CHILD_WITH_INVALID_ID",
    "DN_DEVICE_DISCONNECTED",
    "DN_DISABLEABLE",
    "DN_DRIVER_BLOCKED",
    "DN_DRIVER_LOADED",
    "DN_ENUM_LOADED",
    "DN_FILTERED",
    "DN_HARDWARE_ENUM",
    "DN_HAS_MARK",
    "DN_HAS_PROBLEM",
    "DN_LEGACY_DRIVER",
    "DN_LIAR",
    "DN_MANUAL",
    "DN_MF_CHILD",
    "DN_MF_PARENT",
    "DN_MOVED",
    "DN_NEEDS_LOCKING",
    "DN_NEED_RESTART",
    "DN_NEED_TO_ENUM",
    "DN_NOT_FIRST_TIME",
    "DN_NOT_FIRST_TIMEE",
    "DN_NO_SHOW_IN_DM",
    "DN_NT_DRIVER",
    "DN_NT_ENUMERATOR",
    "DN_PRIVATE_PROBLEM",
    "DN_QUERY_REMOVE_ACTIVE",
    "DN_QUERY_REMOVE_PENDING",
    "DN_REBAL_CANDIDATE",
    "DN_REMOVABLE",
    "DN_ROOT_ENUMERATED",
    "DN_SILENT_INSTALL",
    "DN_STARTED",
    "DN_STOP_FREE_RES",
    "DN_WILL_BE_REMOVED",
    "DPROMPT_BUFFERTOOSMALL",
    "DPROMPT_CANCEL",
    "DPROMPT_OUTOFMEMORY",
    "DPROMPT_SKIPFILE",
    "DPROMPT_SUCCESS",
    "DRIVER_COMPATID_RANK",
    "DRIVER_HARDWAREID_MASK",
    "DRIVER_HARDWAREID_RANK",
    "DRIVER_UNTRUSTED_COMPATID_RANK",
    "DRIVER_UNTRUSTED_HARDWAREID_RANK",
    "DRIVER_UNTRUSTED_RANK",
    "DRIVER_W9X_SUSPECT_COMPATID_RANK",
    "DRIVER_W9X_SUSPECT_HARDWAREID_RANK",
    "DRIVER_W9X_SUSPECT_RANK",
    "DWORD_MAX",
    "DYNAWIZ_FLAG_ANALYZE_HANDLECONFLICT",
    "DYNAWIZ_FLAG_INSTALLDET_NEXT",
    "DYNAWIZ_FLAG_INSTALLDET_PREV",
    "DYNAWIZ_FLAG_PAGESADDED",
    "DiInstallDevice",
    "DiInstallDriverA",
    "DiInstallDriverW",
    "DiRollbackDriver",
    "DiShowUpdateDevice",
    "DiShowUpdateDriver",
    "DiUninstallDevice",
    "DiUninstallDriverA",
    "DiUninstallDriverW",
    "ENABLECLASS_FAILURE",
    "ENABLECLASS_QUERY",
    "ENABLECLASS_SUCCESS",
    "FILEOP_ABORT",
    "FILEOP_BACKUP",
    "FILEOP_COPY",
    "FILEOP_DELETE",
    "FILEOP_DOIT",
    "FILEOP_NEWPATH",
    "FILEOP_RENAME",
    "FILEOP_RETRY",
    "FILEOP_SKIP",
    "FILEPATHS_A",
    "FILEPATHS_SIGNERINFO_A",
    "FILEPATHS_SIGNERINFO_W",
    "FILEPATHS_W",
    "FILE_COMPRESSION_MSZIP",
    "FILE_COMPRESSION_NONE",
    "FILE_COMPRESSION_NTCAB",
    "FILE_COMPRESSION_WINLZA",
    "FILE_IN_CABINET_INFO_A",
    "FILE_IN_CABINET_INFO_W",
    "FILTERED_LOG_CONF",
    "FLG_ADDPROPERTY_AND",
    "FLG_ADDPROPERTY_APPEND",
    "FLG_ADDPROPERTY_NOCLOBBER",
    "FLG_ADDPROPERTY_OR",
    "FLG_ADDPROPERTY_OVERWRITEONLY",
    "FLG_ADDREG_32BITKEY",
    "FLG_ADDREG_64BITKEY",
    "FLG_ADDREG_APPEND",
    "FLG_ADDREG_BINVALUETYPE",
    "FLG_ADDREG_DELREG_BIT",
    "FLG_ADDREG_DELVAL",
    "FLG_ADDREG_KEYONLY",
    "FLG_ADDREG_KEYONLY_COMMON",
    "FLG_ADDREG_NOCLOBBER",
    "FLG_ADDREG_OVERWRITEONLY",
    "FLG_ADDREG_TYPE_EXPAND_SZ",
    "FLG_ADDREG_TYPE_MULTI_SZ",
    "FLG_ADDREG_TYPE_SZ",
    "FLG_BITREG_32BITKEY",
    "FLG_BITREG_64BITKEY",
    "FLG_BITREG_CLEARBITS",
    "FLG_BITREG_SETBITS",
    "FLG_DELPROPERTY_MULTI_SZ_DELSTRING",
    "FLG_DELREG_32BITKEY",
    "FLG_DELREG_64BITKEY",
    "FLG_DELREG_KEYONLY_COMMON",
    "FLG_DELREG_OPERATION_MASK",
    "FLG_DELREG_TYPE_EXPAND_SZ",
    "FLG_DELREG_TYPE_MULTI_SZ",
    "FLG_DELREG_TYPE_SZ",
    "FLG_DELREG_VALUE",
    "FLG_INI2REG_32BITKEY",
    "FLG_INI2REG_64BITKEY",
    "FLG_PROFITEM_CSIDL",
    "FLG_PROFITEM_CURRENTUSER",
    "FLG_PROFITEM_DELETE",
    "FLG_PROFITEM_GROUP",
    "FLG_REGSVR_DLLINSTALL",
    "FLG_REGSVR_DLLREGISTER",
    "FORCED_LOG_CONF",
    "GUID_ACPI_CMOS_INTERFACE_STANDARD",
    "GUID_ACPI_INTERFACE_STANDARD",
    "GUID_ACPI_INTERFACE_STANDARD2",
    "GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD",
    "GUID_ACPI_REGS_INTERFACE_STANDARD",
    "GUID_AGP_TARGET_BUS_INTERFACE_STANDARD",
    "GUID_ARBITER_INTERFACE_STANDARD",
    "GUID_BUS_INTERFACE_STANDARD",
    "GUID_BUS_RESOURCE_UPDATE_INTERFACE",
    "GUID_BUS_TYPE_1394",
    "GUID_BUS_TYPE_ACPI",
    "GUID_BUS_TYPE_AVC",
    "GUID_BUS_TYPE_DOT4PRT",
    "GUID_BUS_TYPE_EISA",
    "GUID_BUS_TYPE_HID",
    "GUID_BUS_TYPE_INTERNAL",
    "GUID_BUS_TYPE_IRDA",
    "GUID_BUS_TYPE_ISAPNP",
    "GUID_BUS_TYPE_LPTENUM",
    "GUID_BUS_TYPE_MCA",
    "GUID_BUS_TYPE_PCI",
    "GUID_BUS_TYPE_PCMCIA",
    "GUID_BUS_TYPE_SCM",
    "GUID_BUS_TYPE_SD",
    "GUID_BUS_TYPE_SERENUM",
    "GUID_BUS_TYPE_SW_DEVICE",
    "GUID_BUS_TYPE_USB",
    "GUID_BUS_TYPE_USBPRINT",
    "GUID_D3COLD_AUX_POWER_AND_TIMING_INTERFACE",
    "GUID_D3COLD_SUPPORT_INTERFACE",
    "GUID_DEVCLASS_1394",
    "GUID_DEVCLASS_1394DEBUG",
    "GUID_DEVCLASS_61883",
    "GUID_DEVCLASS_ADAPTER",
    "GUID_DEVCLASS_APMSUPPORT",
    "GUID_DEVCLASS_AVC",
    "GUID_DEVCLASS_BATTERY",
    "GUID_DEVCLASS_BIOMETRIC",
    "GUID_DEVCLASS_BLUETOOTH",
    "GUID_DEVCLASS_CAMERA",
    "GUID_DEVCLASS_CDROM",
    "GUID_DEVCLASS_COMPUTEACCELERATOR",
    "GUID_DEVCLASS_COMPUTER",
    "GUID_DEVCLASS_DECODER",
    "GUID_DEVCLASS_DISKDRIVE",
    "GUID_DEVCLASS_DISPLAY",
    "GUID_DEVCLASS_DOT4",
    "GUID_DEVCLASS_DOT4PRINT",
    "GUID_DEVCLASS_EHSTORAGESILO",
    "GUID_DEVCLASS_ENUM1394",
    "GUID_DEVCLASS_EXTENSION",
    "GUID_DEVCLASS_FDC",
    "GUID_DEVCLASS_FIRMWARE",
    "GUID_DEVCLASS_FLOPPYDISK",
    "GUID_DEVCLASS_FSFILTER_ACTIVITYMONITOR",
    "GUID_DEVCLASS_FSFILTER_ANTIVIRUS",
    "GUID_DEVCLASS_FSFILTER_BOTTOM",
    "GUID_DEVCLASS_FSFILTER_CFSMETADATASERVER",
    "GUID_DEVCLASS_FSFILTER_COMPRESSION",
    "GUID_DEVCLASS_FSFILTER_CONTENTSCREENER",
    "GUID_DEVCLASS_FSFILTER_CONTINUOUSBACKUP",
    "GUID_DEVCLASS_FSFILTER_COPYPROTECTION",
    "GUID_DEVCLASS_FSFILTER_ENCRYPTION",
    "GUID_DEVCLASS_FSFILTER_HSM",
    "GUID_DEVCLASS_FSFILTER_INFRASTRUCTURE",
    "GUID_DEVCLASS_FSFILTER_OPENFILEBACKUP",
    "GUID_DEVCLASS_FSFILTER_PHYSICALQUOTAMANAGEMENT",
    "GUID_DEVCLASS_FSFILTER_QUOTAMANAGEMENT",
    "GUID_DEVCLASS_FSFILTER_REPLICATION",
    "GUID_DEVCLASS_FSFILTER_SECURITYENHANCER",
    "GUID_DEVCLASS_FSFILTER_SYSTEM",
    "GUID_DEVCLASS_FSFILTER_SYSTEMRECOVERY",
    "GUID_DEVCLASS_FSFILTER_TOP",
    "GUID_DEVCLASS_FSFILTER_UNDELETE",
    "GUID_DEVCLASS_FSFILTER_VIRTUALIZATION",
    "GUID_DEVCLASS_GPS",
    "GUID_DEVCLASS_HDC",
    "GUID_DEVCLASS_HIDCLASS",
    "GUID_DEVCLASS_HOLOGRAPHIC",
    "GUID_DEVCLASS_IMAGE",
    "GUID_DEVCLASS_INFINIBAND",
    "GUID_DEVCLASS_INFRARED",
    "GUID_DEVCLASS_KEYBOARD",
    "GUID_DEVCLASS_LEGACYDRIVER",
    "GUID_DEVCLASS_MEDIA",
    "GUID_DEVCLASS_MEDIUM_CHANGER",
    "GUID_DEVCLASS_MEMORY",
    "GUID_DEVCLASS_MODEM",
    "GUID_DEVCLASS_MONITOR",
    "GUID_DEVCLASS_MOUSE",
    "GUID_DEVCLASS_MTD",
    "GUID_DEVCLASS_MULTIFUNCTION",
    "GUID_DEVCLASS_MULTIPORTSERIAL",
    "GUID_DEVCLASS_NET",
    "GUID_DEVCLASS_NETCLIENT",
    "GUID_DEVCLASS_NETDRIVER",
    "GUID_DEVCLASS_NETSERVICE",
    "GUID_DEVCLASS_NETTRANS",
    "GUID_DEVCLASS_NETUIO",
    "GUID_DEVCLASS_NODRIVER",
    "GUID_DEVCLASS_PCMCIA",
    "GUID_DEVCLASS_PNPPRINTERS",
    "GUID_DEVCLASS_PORTS",
    "GUID_DEVCLASS_PRINTER",
    "GUID_DEVCLASS_PRINTERUPGRADE",
    "GUID_DEVCLASS_PRINTQUEUE",
    "GUID_DEVCLASS_PROCESSOR",
    "GUID_DEVCLASS_SBP2",
    "GUID_DEVCLASS_SCMDISK",
    "GUID_DEVCLASS_SCMVOLUME",
    "GUID_DEVCLASS_SCSIADAPTER",
    "GUID_DEVCLASS_SECURITYACCELERATOR",
    "GUID_DEVCLASS_SENSOR",
    "GUID_DEVCLASS_SIDESHOW",
    "GUID_DEVCLASS_SMARTCARDREADER",
    "GUID_DEVCLASS_SMRDISK",
    "GUID_DEVCLASS_SMRVOLUME",
    "GUID_DEVCLASS_SOFTWARECOMPONENT",
    "GUID_DEVCLASS_SOUND",
    "GUID_DEVCLASS_SYSTEM",
    "GUID_DEVCLASS_TAPEDRIVE",
    "GUID_DEVCLASS_UCM",
    "GUID_DEVCLASS_UNKNOWN",
    "GUID_DEVCLASS_USB",
    "GUID_DEVCLASS_VOLUME",
    "GUID_DEVCLASS_VOLUMESNAPSHOT",
    "GUID_DEVCLASS_WCEUSBS",
    "GUID_DEVCLASS_WPD",
    "GUID_DEVICE_INTERFACE_ARRIVAL",
    "GUID_DEVICE_INTERFACE_REMOVAL",
    "GUID_DEVICE_RESET_INTERFACE_STANDARD",
    "GUID_DMA_CACHE_COHERENCY_INTERFACE",
    "GUID_HWPROFILE_CHANGE_CANCELLED",
    "GUID_HWPROFILE_CHANGE_COMPLETE",
    "GUID_HWPROFILE_QUERY_CHANGE",
    "GUID_INT_ROUTE_INTERFACE_STANDARD",
    "GUID_IOMMU_BUS_INTERFACE",
    "GUID_KERNEL_SOFT_RESTART_CANCEL",
    "GUID_KERNEL_SOFT_RESTART_FINALIZE",
    "GUID_KERNEL_SOFT_RESTART_PREPARE",
    "GUID_LEGACY_DEVICE_DETECTION_STANDARD",
    "GUID_MF_ENUMERATION_INTERFACE",
    "GUID_MSIX_TABLE_CONFIG_INTERFACE",
    "GUID_NPEM_CONTROL_INTERFACE",
    "GUID_PARTITION_UNIT_INTERFACE_STANDARD",
    "GUID_PCC_INTERFACE_INTERNAL",
    "GUID_PCC_INTERFACE_STANDARD",
    "GUID_PCI_ATS_INTERFACE",
    "GUID_PCI_BUS_INTERFACE_STANDARD",
    "GUID_PCI_BUS_INTERFACE_STANDARD2",
    "GUID_PCI_DEVICE_PRESENT_INTERFACE",
    "GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE",
    "GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE",
    "GUID_PCI_FPGA_CONTROL_INTERFACE",
    "GUID_PCI_PTM_CONTROL_INTERFACE",
    "GUID_PCI_SECURITY_INTERFACE",
    "GUID_PCI_VIRTUALIZATION_INTERFACE",
    "GUID_PCMCIA_BUS_INTERFACE_STANDARD",
    "GUID_PNP_CUSTOM_NOTIFICATION",
    "GUID_PNP_EXTENDED_ADDRESS_INTERFACE",
    "GUID_PNP_LOCATION_INTERFACE",
    "GUID_PNP_POWER_NOTIFICATION",
    "GUID_PNP_POWER_SETTING_CHANGE",
    "GUID_POWER_DEVICE_ENABLE",
    "GUID_POWER_DEVICE_TIMEOUTS",
    "GUID_POWER_DEVICE_WAKE_ENABLE",
    "GUID_PROCESSOR_PCC_INTERFACE_STANDARD",
    "GUID_QUERY_CRASHDUMP_FUNCTIONS",
    "GUID_RECOVERY_NVMED_PREPARE_SHUTDOWN",
    "GUID_RECOVERY_PCI_PREPARE_SHUTDOWN",
    "GUID_REENUMERATE_SELF_INTERFACE_STANDARD",
    "GUID_SCM_BUS_INTERFACE",
    "GUID_SCM_BUS_LD_INTERFACE",
    "GUID_SCM_BUS_NVD_INTERFACE",
    "GUID_SCM_PHYSICAL_NVDIMM_INTERFACE",
    "GUID_SDEV_IDENTIFIER_INTERFACE",
    "GUID_SECURE_DRIVER_INTERFACE",
    "GUID_TARGET_DEVICE_QUERY_REMOVE",
    "GUID_TARGET_DEVICE_REMOVE_CANCELLED",
    "GUID_TARGET_DEVICE_REMOVE_COMPLETE",
    "GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED",
    "GUID_THERMAL_COOLING_INTERFACE",
    "GUID_TRANSLATOR_INTERFACE_STANDARD",
    "GUID_WUDF_DEVICE_HOST_PROBLEM",
    "HCMNOTIFICATION",
    "HDEVINFO",
    "HWPROFILEINFO_W",
    "HWProfileInfo_sA",
    "IDD_DYNAWIZ_ANALYZEDEV_PAGE",
    "IDD_DYNAWIZ_ANALYZE_NEXTPAGE",
    "IDD_DYNAWIZ_ANALYZE_PREVPAGE",
    "IDD_DYNAWIZ_FIRSTPAGE",
    "IDD_DYNAWIZ_INSTALLDETECTEDDEVS_PAGE",
    "IDD_DYNAWIZ_INSTALLDETECTED_NEXTPAGE",
    "IDD_DYNAWIZ_INSTALLDETECTED_NODEVS",
    "IDD_DYNAWIZ_INSTALLDETECTED_PREVPAGE",
    "IDD_DYNAWIZ_SELECTCLASS_PAGE",
    "IDD_DYNAWIZ_SELECTDEV_PAGE",
    "IDD_DYNAWIZ_SELECT_NEXTPAGE",
    "IDD_DYNAWIZ_SELECT_PREVPAGE",
    "IDF_CHECKFIRST",
    "IDF_NOBEEP",
    "IDF_NOBROWSE",
    "IDF_NOCOMPRESSED",
    "IDF_NODETAILS",
    "IDF_NOFOREGROUND",
    "IDF_NOREMOVABLEMEDIAPROMPT",
    "IDF_NOSKIP",
    "IDF_OEMDISK",
    "IDF_USEDISKNAMEASPROMPT",
    "IDF_WARNIFSKIP",
    "IDI_CLASSICON_OVERLAYFIRST",
    "IDI_CLASSICON_OVERLAYLAST",
    "IDI_CONFLICT",
    "IDI_DISABLED_OVL",
    "IDI_FORCED_OVL",
    "IDI_PROBLEM_OVL",
    "IDI_RESOURCE",
    "IDI_RESOURCEFIRST",
    "IDI_RESOURCELAST",
    "IDI_RESOURCEOVERLAYFIRST",
    "IDI_RESOURCEOVERLAYLAST",
    "INFCONTEXT",
    "INFINFO_DEFAULT_SEARCH",
    "INFINFO_INF_NAME_IS_ABSOLUTE",
    "INFINFO_INF_PATH_LIST_SEARCH",
    "INFINFO_INF_SPEC_IS_HINF",
    "INFINFO_REVERSE_DEFAULT_SEARCH",
    "INFSTR_BUS_ALL",
    "INFSTR_BUS_EISA",
    "INFSTR_BUS_ISA",
    "INFSTR_BUS_MCA",
    "INFSTR_CFGPRI_DESIRED",
    "INFSTR_CFGPRI_DISABLED",
    "INFSTR_CFGPRI_FORCECONFIG",
    "INFSTR_CFGPRI_HARDRECONFIG",
    "INFSTR_CFGPRI_HARDWIRED",
    "INFSTR_CFGPRI_NORMAL",
    "INFSTR_CFGPRI_POWEROFF",
    "INFSTR_CFGPRI_REBOOT",
    "INFSTR_CFGPRI_RESTART",
    "INFSTR_CFGPRI_SUBOPTIMAL",
    "INFSTR_CFGTYPE_BASIC",
    "INFSTR_CFGTYPE_FORCED",
    "INFSTR_CFGTYPE_OVERRIDE",
    "INFSTR_CLASS_SAFEEXCL",
    "INFSTR_CONTROLFLAGS_SECTION",
    "INFSTR_DRIVERSELECT_FUNCTIONS",
    "INFSTR_DRIVERSELECT_SECTION",
    "INFSTR_DRIVERVERSION_SECTION",
    "INFSTR_KEY_ACTION",
    "INFSTR_KEY_ALWAYSEXCLUDEFROMSELECT",
    "INFSTR_KEY_BUFFER_SIZE",
    "INFSTR_KEY_CATALOGFILE",
    "INFSTR_KEY_CHANNEL_ACCESS",
    "INFSTR_KEY_CHANNEL_ENABLED",
    "INFSTR_KEY_CHANNEL_ISOLATION",
    "INFSTR_KEY_CHANNEL_VALUE",
    "INFSTR_KEY_CLASS",
    "INFSTR_KEY_CLASSGUID",
    "INFSTR_KEY_CLOCK_TYPE",
    "INFSTR_KEY_CONFIGPRIORITY",
    "INFSTR_KEY_COPYFILESONLY",
    "INFSTR_KEY_DATA_ITEM",
    "INFSTR_KEY_DELAYEDAUTOSTART",
    "INFSTR_KEY_DEPENDENCIES",
    "INFSTR_KEY_DESCRIPTION",
    "INFSTR_KEY_DETECTLIST",
    "INFSTR_KEY_DETPARAMS",
    "INFSTR_KEY_DISABLE_REALTIME_PERSISTENCE",
    "INFSTR_KEY_DISPLAYNAME",
    "INFSTR_KEY_DMA",
    "INFSTR_KEY_DMACONFIG",
    "INFSTR_KEY_DRIVERSET",
    "INFSTR_KEY_ENABLED",
    "INFSTR_KEY_ENABLE_FLAGS",
    "INFSTR_KEY_ENABLE_LEVEL",
    "INFSTR_KEY_ENABLE_PROPERTY",
    "INFSTR_KEY_ERRORCONTROL",
    "INFSTR_KEY_EXCLUDEFROMSELECT",
    "INFSTR_KEY_EXCLUDERES",
    "INFSTR_KEY_EXTENSIONID",
    "INFSTR_KEY_FILE_MAX",
    "INFSTR_KEY_FILE_NAME",
    "INFSTR_KEY_FLUSH_TIMER",
    "INFSTR_KEY_FROMINET",
    "INFSTR_KEY_HARDWARE_CLASS",
    "INFSTR_KEY_HARDWARE_CLASSGUID",
    "INFSTR_KEY_INTERACTIVEINSTALL",
    "INFSTR_KEY_IO",
    "INFSTR_KEY_IOCONFIG",
    "INFSTR_KEY_IRQ",
    "INFSTR_KEY_IRQCONFIG",
    "INFSTR_KEY_LOADORDERGROUP",
    "INFSTR_KEY_LOGGING_AUTOBACKUP",
    "INFSTR_KEY_LOGGING_MAXSIZE",
    "INFSTR_KEY_LOGGING_RETENTION",
    "INFSTR_KEY_LOG_FILE_MODE",
    "INFSTR_KEY_MATCH_ALL_KEYWORD",
    "INFSTR_KEY_MATCH_ANY_KEYWORD",
    "INFSTR_KEY_MAXIMUM_BUFFERS",
    "INFSTR_KEY_MAX_FILE_SIZE",
    "INFSTR_KEY_MEM",
    "INFSTR_KEY_MEMCONFIG",
    "INFSTR_KEY_MEMLARGECONFIG",
    "INFSTR_KEY_MESSAGE_FILE",
    "INFSTR_KEY_MFCARDCONFIG",
    "INFSTR_KEY_MINIMUM_BUFFERS",
    "INFSTR_KEY_NAME",
    "INFSTR_KEY_NOSETUPINF",
    "INFSTR_KEY_PARAMETER_FILE",
    "INFSTR_KEY_PATH",
    "INFSTR_KEY_PCCARDCONFIG",
    "INFSTR_KEY_PNPLOCKDOWN",
    "INFSTR_KEY_PROVIDER",
    "INFSTR_KEY_PROVIDER_NAME",
    "INFSTR_KEY_REQUESTADDITIONALSOFTWARE",
    "INFSTR_KEY_REQUIREDPRIVILEGES",
    "INFSTR_KEY_RESOURCE_FILE",
    "INFSTR_KEY_SECURITY",
    "INFSTR_KEY_SERVICEBINARY",
    "INFSTR_KEY_SERVICESIDTYPE",
    "INFSTR_KEY_SERVICETYPE",
    "INFSTR_KEY_SIGNATURE",
    "INFSTR_KEY_SKIPLIST",
    "INFSTR_KEY_START",
    "INFSTR_KEY_STARTNAME",
    "INFSTR_KEY_STARTTYPE",
    "INFSTR_KEY_SUB_TYPE",
    "INFSTR_KEY_TRIGGER_TYPE",
    "INFSTR_PLATFORM_NT",
    "INFSTR_PLATFORM_NTALPHA",
    "INFSTR_PLATFORM_NTAMD64",
    "INFSTR_PLATFORM_NTARM",
    "INFSTR_PLATFORM_NTARM64",
    "INFSTR_PLATFORM_NTAXP64",
    "INFSTR_PLATFORM_NTIA64",
    "INFSTR_PLATFORM_NTMIPS",
    "INFSTR_PLATFORM_NTPPC",
    "INFSTR_PLATFORM_NTX86",
    "INFSTR_PLATFORM_WIN",
    "INFSTR_REBOOT",
    "INFSTR_RESTART",
    "INFSTR_RISK_BIOSROMRD",
    "INFSTR_RISK_DELICATE",
    "INFSTR_RISK_IORD",
    "INFSTR_RISK_IOWR",
    "INFSTR_RISK_LOW",
    "INFSTR_RISK_MEMRD",
    "INFSTR_RISK_MEMWR",
    "INFSTR_RISK_NONE",
    "INFSTR_RISK_QUERYDRV",
    "INFSTR_RISK_SWINT",
    "INFSTR_RISK_UNRELIABLE",
    "INFSTR_RISK_VERYHIGH",
    "INFSTR_RISK_VERYLOW",
    "INFSTR_SECT_AUTOEXECBAT",
    "INFSTR_SECT_AVOIDCFGSYSDEV",
    "INFSTR_SECT_AVOIDENVDEV",
    "INFSTR_SECT_AVOIDINIDEV",
    "INFSTR_SECT_BADACPIBIOS",
    "INFSTR_SECT_BADDISKBIOS",
    "INFSTR_SECT_BADDSBIOS",
    "INFSTR_SECT_BADPMCALLBIOS",
    "INFSTR_SECT_BADPNPBIOS",
    "INFSTR_SECT_BADRMCALLBIOS",
    "INFSTR_SECT_BADROUTINGTABLEBIOS",
    "INFSTR_SECT_CFGSYS",
    "INFSTR_SECT_CLASS_INSTALL",
    "INFSTR_SECT_CLASS_INSTALL_32",
    "INFSTR_SECT_DEFAULT_INSTALL",
    "INFSTR_SECT_DEFAULT_UNINSTALL",
    "INFSTR_SECT_DETCLASSINFO",
    "INFSTR_SECT_DETMODULES",
    "INFSTR_SECT_DETOPTIONS",
    "INFSTR_SECT_DEVINFS",
    "INFSTR_SECT_DISPLAY_CLEANUP",
    "INFSTR_SECT_EXTENSIONCONTRACTS",
    "INFSTR_SECT_FORCEHWVERIFY",
    "INFSTR_SECT_GOODACPIBIOS",
    "INFSTR_SECT_HPOMNIBOOK",
    "INFSTR_SECT_INTERFACE_INSTALL_32",
    "INFSTR_SECT_MACHINEIDBIOS",
    "INFSTR_SECT_MANUALDEV",
    "INFSTR_SECT_MFG",
    "INFSTR_SECT_REGCFGSYSDEV",
    "INFSTR_SECT_REGENVDEV",
    "INFSTR_SECT_REGINIDEV",
    "INFSTR_SECT_SYSINI",
    "INFSTR_SECT_SYSINIDRV",
    "INFSTR_SECT_TARGETCOMPUTERS",
    "INFSTR_SECT_VERSION",
    "INFSTR_SECT_WININIRUN",
    "INFSTR_SOFTWAREVERSION_SECTION",
    "INFSTR_STRKEY_DRVDESC",
    "INFSTR_SUBKEY_COINSTALLERS",
    "INFSTR_SUBKEY_CTL",
    "INFSTR_SUBKEY_DET",
    "INFSTR_SUBKEY_EVENTS",
    "INFSTR_SUBKEY_FACTDEF",
    "INFSTR_SUBKEY_FILTERS",
    "INFSTR_SUBKEY_HW",
    "INFSTR_SUBKEY_INTERFACES",
    "INFSTR_SUBKEY_LOGCONFIG",
    "INFSTR_SUBKEY_LOGCONFIGOVERRIDE",
    "INFSTR_SUBKEY_NORESOURCEDUPS",
    "INFSTR_SUBKEY_POSSIBLEDUPS",
    "INFSTR_SUBKEY_SERVICES",
    "INFSTR_SUBKEY_SOFTWARE",
    "INFSTR_SUBKEY_WMI",
    "INF_STYLE_CACHE_DISABLE",
    "INF_STYLE_CACHE_ENABLE",
    "INF_STYLE_CACHE_IGNORE",
    "INF_STYLE_NONE",
    "INF_STYLE_OLDNT",
    "INF_STYLE_WIN4",
    "INSTALLFLAG_BITS",
    "INSTALLFLAG_FORCE",
    "INSTALLFLAG_NONINTERACTIVE",
    "INSTALLFLAG_READONLY",
    "IOA_Local",
    "IO_ALIAS_10_BIT_DECODE",
    "IO_ALIAS_12_BIT_DECODE",
    "IO_ALIAS_16_BIT_DECODE",
    "IO_ALIAS_POSITIVE_DECODE",
    "IO_DES",
    "IO_RANGE",
    "IO_RESOURCE",
    "IRQ_DES_32",
    "IRQ_DES_64",
    "IRQ_RANGE",
    "IRQ_RESOURCE_32",
    "IRQ_RESOURCE_64",
    "InstallHinfSectionA",
    "InstallHinfSectionW",
    "LCPRI_BOOTCONFIG",
    "LCPRI_DESIRED",
    "LCPRI_DISABLED",
    "LCPRI_FORCECONFIG",
    "LCPRI_HARDRECONFIG",
    "LCPRI_HARDWIRED",
    "LCPRI_IMPOSSIBLE",
    "LCPRI_LASTBESTCONFIG",
    "LCPRI_LASTSOFTCONFIG",
    "LCPRI_NORMAL",
    "LCPRI_POWEROFF",
    "LCPRI_REBOOT",
    "LCPRI_RESTART",
    "LCPRI_SUBOPTIMAL",
    "LINE_LEN",
    "LOG_CONF_BITS",
    "LogSevError",
    "LogSevFatalError",
    "LogSevInformation",
    "LogSevMaximum",
    "LogSevWarning",
    "MAX_CLASS_NAME_LEN",
    "MAX_CONFIG_VALUE",
    "MAX_DEVICE_ID_LEN",
    "MAX_DEVNODE_ID_LEN",
    "MAX_DMA_CHANNELS",
    "MAX_GUID_STRING_LEN",
    "MAX_IDD_DYNAWIZ_RESOURCE_ID",
    "MAX_INFSTR_STRKEY_LEN",
    "MAX_INF_FLAG",
    "MAX_INF_SECTION_NAME_LENGTH",
    "MAX_INF_STRING_LENGTH",
    "MAX_INSTALLWIZARD_DYNAPAGES",
    "MAX_INSTANCE_VALUE",
    "MAX_INSTRUCTION_LEN",
    "MAX_IO_PORTS",
    "MAX_IRQS",
    "MAX_KEY_LEN",
    "MAX_LABEL_LEN",
    "MAX_LCPRI",
    "MAX_MEM_REGISTERS",
    "MAX_PRIORITYSTR_LEN",
    "MAX_PROFILE_LEN",
    "MAX_SERVICE_NAME_LEN",
    "MAX_SUBTITLE_LEN",
    "MAX_TITLE_LEN",
    "MEM_DES",
    "MEM_LARGE_DES",
    "MEM_LARGE_RANGE",
    "MEM_LARGE_RESOURCE",
    "MEM_RANGE",
    "MEM_RESOURCE",
    "MFCARD_DES",
    "MFCARD_RESOURCE",
    "MIN_IDD_DYNAWIZ_RESOURCE_ID",
    "NDW_INSTALLFLAG_CI_PICKED_OEM",
    "NDW_INSTALLFLAG_DIDFACTDEFS",
    "NDW_INSTALLFLAG_EXPRESSINTRO",
    "NDW_INSTALLFLAG_HARDWAREALLREADYIN",
    "NDW_INSTALLFLAG_INSTALLSPECIFIC",
    "NDW_INSTALLFLAG_KNOWNCLASS",
    "NDW_INSTALLFLAG_NEEDREBOOT",
    "NDW_INSTALLFLAG_NEEDRESTART",
    "NDW_INSTALLFLAG_NEEDSHUTDOWN",
    "NDW_INSTALLFLAG_NODETECTEDDEVS",
    "NDW_INSTALLFLAG_PCMCIADEVICE",
    "NDW_INSTALLFLAG_PCMCIAMODE",
    "NDW_INSTALLFLAG_SKIPCLASSLIST",
    "NDW_INSTALLFLAG_SKIPISDEVINSTALLED",
    "NDW_INSTALLFLAG_USERCANCEL",
    "NUM_CM_PROB",
    "NUM_CM_PROB_V1",
    "NUM_CM_PROB_V2",
    "NUM_CM_PROB_V3",
    "NUM_CM_PROB_V4",
    "NUM_CM_PROB_V5",
    "NUM_CM_PROB_V6",
    "NUM_CM_PROB_V7",
    "NUM_CM_PROB_V8",
    "NUM_CM_PROB_V9",
    "NUM_CR_RESULTS",
    "NUM_LOG_CONF",
    "OEM_SOURCE_MEDIA_TYPE",
    "OVERRIDE_LOG_CONF",
    "PCCARD_DES",
    "PCCARD_RESOURCE",
    "PCD_MAX_IO",
    "PCD_MAX_MEMORY",
    "PCM_NOTIFY_CALLBACK",
    "PDETECT_PROGRESS_NOTIFY",
    "PNP_VETO_TYPE",
    "PNP_VetoAlreadyRemoved",
    "PNP_VetoDevice",
    "PNP_VetoDriver",
    "PNP_VetoIllegalDeviceRequest",
    "PNP_VetoInsufficientPower",
    "PNP_VetoInsufficientRights",
    "PNP_VetoLegacyDevice",
    "PNP_VetoLegacyDriver",
    "PNP_VetoNonDisableable",
    "PNP_VetoOutstandingOpen",
    "PNP_VetoPendingClose",
    "PNP_VetoTypeUnknown",
    "PNP_VetoWindowsApp",
    "PNP_VetoWindowsService",
    "PRIORITY_BIT",
    "PRIORITY_EQUAL_FIRST",
    "PRIORITY_EQUAL_LAST",
    "PSP_DETSIG_CMPPROC",
    "PSP_FILE_CALLBACK_A",
    "PSP_FILE_CALLBACK_W",
    "ROLLBACK_BITS",
    "ROLLBACK_FLAG_NO_UI",
    "RegDisposition_Bits",
    "RegDisposition_OpenAlways",
    "RegDisposition_OpenExisting",
    "ResType_All",
    "ResType_BusNumber",
    "ResType_ClassSpecific",
    "ResType_Connection",
    "ResType_DMA",
    "ResType_DevicePrivate",
    "ResType_DoNotUse",
    "ResType_IO",
    "ResType_IRQ",
    "ResType_Ignored_Bit",
    "ResType_MAX",
    "ResType_Mem",
    "ResType_MemLarge",
    "ResType_MfCardConfig",
    "ResType_None",
    "ResType_PcCardConfig",
    "ResType_Reserved",
    "SCWMI_CLOBBER_SECURITY",
    "SETDIRID_NOT_FULL_PATH",
    "SETUP_DI_BUILD_DRIVER_DRIVER_TYPE",
    "SETUP_FILE_OPERATION",
    "SIGNERSCORE_AUTHENTICODE",
    "SIGNERSCORE_INBOX",
    "SIGNERSCORE_LOGO_PREMIUM",
    "SIGNERSCORE_LOGO_STANDARD",
    "SIGNERSCORE_MASK",
    "SIGNERSCORE_SIGNED_MASK",
    "SIGNERSCORE_UNCLASSIFIED",
    "SIGNERSCORE_UNKNOWN",
    "SIGNERSCORE_UNSIGNED",
    "SIGNERSCORE_W9X_SUSPECT",
    "SIGNERSCORE_WHQL",
    "SOURCE_MEDIA_A",
    "SOURCE_MEDIA_W",
    "SPCRP_CHARACTERISTICS",
    "SPCRP_DEVTYPE",
    "SPCRP_EXCLUSIVE",
    "SPCRP_LOWERFILTERS",
    "SPCRP_MAXIMUM_PROPERTY",
    "SPCRP_SECURITY",
    "SPCRP_SECURITY_SDS",
    "SPCRP_UPPERFILTERS",
    "SPDIT_CLASSDRIVER",
    "SPDIT_COMPATDRIVER",
    "SPDIT_NODRIVER",
    "SPDRP_ADDRESS",
    "SPDRP_BASE_CONTAINERID",
    "SPDRP_BUSNUMBER",
    "SPDRP_BUSTYPEGUID",
    "SPDRP_CAPABILITIES",
    "SPDRP_CHARACTERISTICS",
    "SPDRP_CLASS",
    "SPDRP_CLASSGUID",
    "SPDRP_COMPATIBLEIDS",
    "SPDRP_CONFIGFLAGS",
    "SPDRP_DEVICEDESC",
    "SPDRP_DEVICE_POWER_DATA",
    "SPDRP_DEVTYPE",
    "SPDRP_DRIVER",
    "SPDRP_ENUMERATOR_NAME",
    "SPDRP_EXCLUSIVE",
    "SPDRP_FRIENDLYNAME",
    "SPDRP_HARDWAREID",
    "SPDRP_INSTALL_STATE",
    "SPDRP_LEGACYBUSTYPE",
    "SPDRP_LOCATION_INFORMATION",
    "SPDRP_LOCATION_PATHS",
    "SPDRP_LOWERFILTERS",
    "SPDRP_MAXIMUM_PROPERTY",
    "SPDRP_MFG",
    "SPDRP_PHYSICAL_DEVICE_OBJECT_NAME",
    "SPDRP_REMOVAL_POLICY",
    "SPDRP_REMOVAL_POLICY_HW_DEFAULT",
    "SPDRP_REMOVAL_POLICY_OVERRIDE",
    "SPDRP_SECURITY",
    "SPDRP_SECURITY_SDS",
    "SPDRP_SERVICE",
    "SPDRP_UI_NUMBER",
    "SPDRP_UI_NUMBER_DESC_FORMAT",
    "SPDRP_UNUSED0",
    "SPDRP_UNUSED1",
    "SPDRP_UNUSED2",
    "SPDRP_UPPERFILTERS",
    "SPDSL_DISALLOW_NEGATIVE_ADJUST",
    "SPDSL_IGNORE_DISK",
    "SPFILELOG_FORCENEW",
    "SPFILELOG_OEMFILE",
    "SPFILELOG_QUERYONLY",
    "SPFILELOG_SYSTEMLOG",
    "SPFILENOTIFY_BACKUPERROR",
    "SPFILENOTIFY_CABINETINFO",
    "SPFILENOTIFY_COPYERROR",
    "SPFILENOTIFY_DELETEERROR",
    "SPFILENOTIFY_ENDBACKUP",
    "SPFILENOTIFY_ENDCOPY",
    "SPFILENOTIFY_ENDDELETE",
    "SPFILENOTIFY_ENDQUEUE",
    "SPFILENOTIFY_ENDREGISTRATION",
    "SPFILENOTIFY_ENDRENAME",
    "SPFILENOTIFY_ENDSUBQUEUE",
    "SPFILENOTIFY_FILEEXTRACTED",
    "SPFILENOTIFY_FILEINCABINET",
    "SPFILENOTIFY_FILEOPDELAYED",
    "SPFILENOTIFY_LANGMISMATCH",
    "SPFILENOTIFY_NEEDMEDIA",
    "SPFILENOTIFY_NEEDNEWCABINET",
    "SPFILENOTIFY_QUEUESCAN",
    "SPFILENOTIFY_QUEUESCAN_EX",
    "SPFILENOTIFY_QUEUESCAN_SIGNERINFO",
    "SPFILENOTIFY_RENAMEERROR",
    "SPFILENOTIFY_STARTBACKUP",
    "SPFILENOTIFY_STARTCOPY",
    "SPFILENOTIFY_STARTDELETE",
    "SPFILENOTIFY_STARTQUEUE",
    "SPFILENOTIFY_STARTREGISTRATION",
    "SPFILENOTIFY_STARTRENAME",
    "SPFILENOTIFY_STARTSUBQUEUE",
    "SPFILENOTIFY_TARGETEXISTS",
    "SPFILENOTIFY_TARGETNEWER",
    "SPFILEQ_FILE_IN_USE",
    "SPFILEQ_REBOOT_IN_PROGRESS",
    "SPFILEQ_REBOOT_RECOMMENDED",
    "SPID_ACTIVE",
    "SPID_DEFAULT",
    "SPID_REMOVED",
    "SPINST_ALL",
    "SPINST_BITREG",
    "SPINST_COPYINF",
    "SPINST_DEVICEINSTALL",
    "SPINST_FILES",
    "SPINST_INI2REG",
    "SPINST_INIFILES",
    "SPINST_LOGCONFIG",
    "SPINST_LOGCONFIGS_ARE_OVERRIDES",
    "SPINST_LOGCONFIG_IS_FORCED",
    "SPINST_PROFILEITEMS",
    "SPINST_PROPERTIES",
    "SPINST_REGISTERCALLBACKAWARE",
    "SPINST_REGISTRY",
    "SPINST_REGSVR",
    "SPINST_SINGLESECTION",
    "SPINST_UNREGSVR",
    "SPINT_ACTIVE",
    "SPINT_DEFAULT",
    "SPINT_REMOVED",
    "SPOST_MAX",
    "SPOST_NONE",
    "SPOST_PATH",
    "SPOST_URL",
    "SPPSR_ENUM_ADV_DEVICE_PROPERTIES",
    "SPPSR_ENUM_BASIC_DEVICE_PROPERTIES",
    "SPPSR_SELECT_DEVICE_RESOURCES",
    "SPQ_DELAYED_COPY",
    "SPQ_FLAG_ABORT_IF_UNSIGNED",
    "SPQ_FLAG_BACKUP_AWARE",
    "SPQ_FLAG_DO_SHUFFLEMOVE",
    "SPQ_FLAG_FILES_MODIFIED",
    "SPQ_FLAG_VALID",
    "SPQ_SCAN_ACTIVATE_DRP",
    "SPQ_SCAN_FILE_COMPARISON",
    "SPQ_SCAN_FILE_PRESENCE",
    "SPQ_SCAN_FILE_PRESENCE_WITHOUT_SOURCE",
    "SPQ_SCAN_FILE_VALIDITY",
    "SPQ_SCAN_INFORM_USER",
    "SPQ_SCAN_PRUNE_COPY_QUEUE",
    "SPQ_SCAN_PRUNE_DELREN",
    "SPQ_SCAN_USE_CALLBACK",
    "SPQ_SCAN_USE_CALLBACKEX",
    "SPQ_SCAN_USE_CALLBACK_SIGNERINFO",
    "SPRDI_FIND_DUPS",
    "SPREG_DLLINSTALL",
    "SPREG_GETPROCADDR",
    "SPREG_LOADLIBRARY",
    "SPREG_REGSVR",
    "SPREG_SUCCESS",
    "SPREG_TIMEOUT",
    "SPREG_UNKNOWN",
    "SPSVCINST_ASSOCSERVICE",
    "SPSVCINST_CLOBBER_SECURITY",
    "SPSVCINST_DELETEEVENTLOGENTRY",
    "SPSVCINST_NOCLOBBER_DELAYEDAUTOSTART",
    "SPSVCINST_NOCLOBBER_DEPENDENCIES",
    "SPSVCINST_NOCLOBBER_DESCRIPTION",
    "SPSVCINST_NOCLOBBER_DISPLAYNAME",
    "SPSVCINST_NOCLOBBER_ERRORCONTROL",
    "SPSVCINST_NOCLOBBER_LOADORDERGROUP",
    "SPSVCINST_NOCLOBBER_REQUIREDPRIVILEGES",
    "SPSVCINST_NOCLOBBER_SERVICESIDTYPE",
    "SPSVCINST_NOCLOBBER_STARTTYPE",
    "SPSVCINST_NOCLOBBER_TRIGGERS",
    "SPSVCINST_STARTSERVICE",
    "SPSVCINST_STOPSERVICE",
    "SPSVCINST_TAGTOFRONT",
    "SPSVCINST_UNIQUE_NAME",
    "SPWPT_SELECTDEVICE",
    "SPWP_USE_DEVINFO_DATA",
    "SP_ALTPLATFORM_FLAGS_SUITE_MASK",
    "SP_ALTPLATFORM_FLAGS_VERSION_RANGE",
    "SP_ALTPLATFORM_INFO_V1",
    "SP_ALTPLATFORM_INFO_V2",
    "SP_ALTPLATFORM_INFO_V3",
    "SP_BACKUP_BACKUPPASS",
    "SP_BACKUP_BOOTFILE",
    "SP_BACKUP_DEMANDPASS",
    "SP_BACKUP_QUEUE_PARAMS_V1_A",
    "SP_BACKUP_QUEUE_PARAMS_V1_W",
    "SP_BACKUP_QUEUE_PARAMS_V2_A",
    "SP_BACKUP_QUEUE_PARAMS_V2_W",
    "SP_BACKUP_SPECIAL",
    "SP_CLASSIMAGELIST_DATA",
    "SP_CLASSINSTALL_HEADER",
    "SP_COPY_ALREADYDECOMP",
    "SP_COPY_DELETESOURCE",
    "SP_COPY_FORCE_IN_USE",
    "SP_COPY_FORCE_NEWER",
    "SP_COPY_FORCE_NOOVERWRITE",
    "SP_COPY_HARDLINK",
    "SP_COPY_INBOX_INF",
    "SP_COPY_IN_USE_NEEDS_REBOOT",
    "SP_COPY_IN_USE_TRY_RENAME",
    "SP_COPY_LANGUAGEAWARE",
    "SP_COPY_NEWER",
    "SP_COPY_NEWER_ONLY",
    "SP_COPY_NEWER_OR_SAME",
    "SP_COPY_NOBROWSE",
    "SP_COPY_NODECOMP",
    "SP_COPY_NOOVERWRITE",
    "SP_COPY_NOPRUNE",
    "SP_COPY_NOSKIP",
    "SP_COPY_OEMINF_CATALOG_ONLY",
    "SP_COPY_OEM_F6_INF",
    "SP_COPY_PNPLOCKED",
    "SP_COPY_REPLACEONLY",
    "SP_COPY_REPLACE_BOOT_FILE",
    "SP_COPY_RESERVED",
    "SP_COPY_SOURCEPATH_ABSOLUTE",
    "SP_COPY_SOURCE_ABSOLUTE",
    "SP_COPY_STYLE",
    "SP_COPY_WARNIFSKIP",
    "SP_COPY_WINDOWS_SIGNED",
    "SP_DETECTDEVICE_PARAMS",
    "SP_DEVICE_INTERFACE_DATA",
    "SP_DEVICE_INTERFACE_DETAIL_DATA_A",
    "SP_DEVICE_INTERFACE_DETAIL_DATA_W",
    "SP_DEVINFO_DATA",
    "SP_DEVINFO_LIST_DETAIL_DATA_A",
    "SP_DEVINFO_LIST_DETAIL_DATA_W",
    "SP_DEVINSTALL_PARAMS_A",
    "SP_DEVINSTALL_PARAMS_W",
    "SP_DRVINFO_DATA_V1_A",
    "SP_DRVINFO_DATA_V1_W",
    "SP_DRVINFO_DATA_V2_A",
    "SP_DRVINFO_DATA_V2_W",
    "SP_DRVINFO_DETAIL_DATA_A",
    "SP_DRVINFO_DETAIL_DATA_W",
    "SP_DRVINSTALL_PARAMS",
    "SP_ENABLECLASS_PARAMS",
    "SP_FILE_COPY_PARAMS_A",
    "SP_FILE_COPY_PARAMS_W",
    "SP_FLAG_CABINETCONTINUATION",
    "SP_INF_INFORMATION",
    "SP_INF_SIGNER_INFO_V1_A",
    "SP_INF_SIGNER_INFO_V1_W",
    "SP_INF_SIGNER_INFO_V2_A",
    "SP_INF_SIGNER_INFO_V2_W",
    "SP_INF_STYLE",
    "SP_INSTALLWIZARD_DATA",
    "SP_MAX_MACHINENAME_LENGTH",
    "SP_NEWDEVICEWIZARD_DATA",
    "SP_ORIGINAL_FILE_INFO_A",
    "SP_ORIGINAL_FILE_INFO_W",
    "SP_POWERMESSAGEWAKE_PARAMS_A",
    "SP_POWERMESSAGEWAKE_PARAMS_W",
    "SP_PROPCHANGE_PARAMS",
    "SP_PROPSHEETPAGE_REQUEST",
    "SP_REGISTER_CONTROL_STATUSA",
    "SP_REGISTER_CONTROL_STATUSW",
    "SP_REMOVEDEVICE_PARAMS",
    "SP_SELECTDEVICE_PARAMS_A",
    "SP_SELECTDEVICE_PARAMS_W",
    "SP_TROUBLESHOOTER_PARAMS_A",
    "SP_TROUBLESHOOTER_PARAMS_W",
    "SP_UNREMOVEDEVICE_PARAMS",
    "SRCINFO_DESCRIPTION",
    "SRCINFO_FLAGS",
    "SRCINFO_PATH",
    "SRCINFO_TAGFILE",
    "SRCINFO_TAGFILE2",
    "SRCLIST_APPEND",
    "SRCLIST_NOBROWSE",
    "SRCLIST_NOSTRIPPLATFORM",
    "SRCLIST_SUBDIRS",
    "SRCLIST_SYSIFADMIN",
    "SRCLIST_SYSTEM",
    "SRCLIST_TEMPORARY",
    "SRCLIST_USER",
    "SRC_FLAGS_CABFILE",
    "SUOI_FORCEDELETE",
    "SUOI_INTERNAL1",
    "SZ_KEY_ADDAUTOLOGGER",
    "SZ_KEY_ADDAUTOLOGGERPROVIDER",
    "SZ_KEY_ADDCHANNEL",
    "SZ_KEY_ADDEVENTPROVIDER",
    "SZ_KEY_ADDFILTER",
    "SZ_KEY_ADDIME",
    "SZ_KEY_ADDINTERFACE",
    "SZ_KEY_ADDPOWERSETTING",
    "SZ_KEY_ADDPROP",
    "SZ_KEY_ADDREG",
    "SZ_KEY_ADDREGNOCLOBBER",
    "SZ_KEY_ADDSERVICE",
    "SZ_KEY_ADDTRIGGER",
    "SZ_KEY_BITREG",
    "SZ_KEY_CLEANONLY",
    "SZ_KEY_COPYFILES",
    "SZ_KEY_COPYINF",
    "SZ_KEY_DEFAULTOPTION",
    "SZ_KEY_DEFDESTDIR",
    "SZ_KEY_DELFILES",
    "SZ_KEY_DELIME",
    "SZ_KEY_DELPROP",
    "SZ_KEY_DELREG",
    "SZ_KEY_DELSERVICE",
    "SZ_KEY_DESTDIRS",
    "SZ_KEY_EXCLUDEID",
    "SZ_KEY_FEATURESCORE",
    "SZ_KEY_FILTERLEVEL",
    "SZ_KEY_FILTERPOSITION",
    "SZ_KEY_HARDWARE",
    "SZ_KEY_IMPORTCHANNEL",
    "SZ_KEY_INI2REG",
    "SZ_KEY_LAYOUT_FILE",
    "SZ_KEY_LDIDOEM",
    "SZ_KEY_LFN_SECTION",
    "SZ_KEY_LISTOPTIONS",
    "SZ_KEY_LOGCONFIG",
    "SZ_KEY_MODULES",
    "SZ_KEY_OPTIONDESC",
    "SZ_KEY_PHASE1",
    "SZ_KEY_PROFILEITEMS",
    "SZ_KEY_REGSVR",
    "SZ_KEY_RENFILES",
    "SZ_KEY_SFN_SECTION",
    "SZ_KEY_SRCDISKFILES",
    "SZ_KEY_SRCDISKNAMES",
    "SZ_KEY_STRINGS",
    "SZ_KEY_UNREGSVR",
    "SZ_KEY_UPDATEAUTOLOGGER",
    "SZ_KEY_UPDATEINIFIELDS",
    "SZ_KEY_UPDATEINIS",
    "SZ_KEY_UPGRADEONLY",
    "SetupAddInstallSectionToDiskSpaceListA",
    "SetupAddInstallSectionToDiskSpaceListW",
    "SetupAddSectionToDiskSpaceListA",
    "SetupAddSectionToDiskSpaceListW",
    "SetupAddToDiskSpaceListA",
    "SetupAddToDiskSpaceListW",
    "SetupAddToSourceListA",
    "SetupAddToSourceListW",
    "SetupAdjustDiskSpaceListA",
    "SetupAdjustDiskSpaceListW",
    "SetupBackupErrorA",
    "SetupBackupErrorW",
    "SetupCancelTemporarySourceList",
    "SetupCloseFileQueue",
    "SetupCloseInfFile",
    "SetupCloseLog",
    "SetupCommitFileQueueA",
    "SetupCommitFileQueueW",
    "SetupConfigureWmiFromInfSectionA",
    "SetupConfigureWmiFromInfSectionW",
    "SetupCopyErrorA",
    "SetupCopyErrorW",
    "SetupCopyOEMInfA",
    "SetupCopyOEMInfW",
    "SetupCreateDiskSpaceListA",
    "SetupCreateDiskSpaceListW",
    "SetupDecompressOrCopyFileA",
    "SetupDecompressOrCopyFileW",
    "SetupDefaultQueueCallbackA",
    "SetupDefaultQueueCallbackW",
    "SetupDeleteErrorA",
    "SetupDeleteErrorW",
    "SetupDestroyDiskSpaceList",
    "SetupDiAskForOEMDisk",
    "SetupDiBuildClassInfoList",
    "SetupDiBuildClassInfoListExA",
    "SetupDiBuildClassInfoListExW",
    "SetupDiBuildDriverInfoList",
    "SetupDiCallClassInstaller",
    "SetupDiCancelDriverInfoSearch",
    "SetupDiChangeState",
    "SetupDiClassGuidsFromNameA",
    "SetupDiClassGuidsFromNameExA",
    "SetupDiClassGuidsFromNameExW",
    "SetupDiClassGuidsFromNameW",
    "SetupDiClassNameFromGuidA",
    "SetupDiClassNameFromGuidExA",
    "SetupDiClassNameFromGuidExW",
    "SetupDiClassNameFromGuidW",
    "SetupDiCreateDevRegKeyA",
    "SetupDiCreateDevRegKeyW",
    "SetupDiCreateDeviceInfoA",
    "SetupDiCreateDeviceInfoList",
    "SetupDiCreateDeviceInfoListExA",
    "SetupDiCreateDeviceInfoListExW",
    "SetupDiCreateDeviceInfoW",
    "SetupDiCreateDeviceInterfaceA",
    "SetupDiCreateDeviceInterfaceRegKeyA",
    "SetupDiCreateDeviceInterfaceRegKeyW",
    "SetupDiCreateDeviceInterfaceW",
    "SetupDiDeleteDevRegKey",
    "SetupDiDeleteDeviceInfo",
    "SetupDiDeleteDeviceInterfaceData",
    "SetupDiDeleteDeviceInterfaceRegKey",
    "SetupDiDestroyClassImageList",
    "SetupDiDestroyDeviceInfoList",
    "SetupDiDestroyDriverInfoList",
    "SetupDiDrawMiniIcon",
    "SetupDiEnumDeviceInfo",
    "SetupDiEnumDeviceInterfaces",
    "SetupDiEnumDriverInfoA",
    "SetupDiEnumDriverInfoW",
    "SetupDiGetActualModelsSectionA",
    "SetupDiGetActualModelsSectionW",
    "SetupDiGetActualSectionToInstallA",
    "SetupDiGetActualSectionToInstallExA",
    "SetupDiGetActualSectionToInstallExW",
    "SetupDiGetActualSectionToInstallW",
    "SetupDiGetClassBitmapIndex",
    "SetupDiGetClassDescriptionA",
    "SetupDiGetClassDescriptionExA",
    "SetupDiGetClassDescriptionExW",
    "SetupDiGetClassDescriptionW",
    "SetupDiGetClassDevPropertySheetsA",
    "SetupDiGetClassDevPropertySheetsW",
    "SetupDiGetClassDevsA",
    "SetupDiGetClassDevsExA",
    "SetupDiGetClassDevsExW",
    "SetupDiGetClassDevsW",
    "SetupDiGetClassImageIndex",
    "SetupDiGetClassImageList",
    "SetupDiGetClassImageListExA",
    "SetupDiGetClassImageListExW",
    "SetupDiGetClassInstallParamsA",
    "SetupDiGetClassInstallParamsW",
    "SetupDiGetClassPropertyExW",
    "SetupDiGetClassPropertyKeys",
    "SetupDiGetClassPropertyKeysExW",
    "SetupDiGetClassPropertyW",
    "SetupDiGetClassRegistryPropertyA",
    "SetupDiGetClassRegistryPropertyW",
    "SetupDiGetCustomDevicePropertyA",
    "SetupDiGetCustomDevicePropertyW",
    "SetupDiGetDeviceInfoListClass",
    "SetupDiGetDeviceInfoListDetailA",
    "SetupDiGetDeviceInfoListDetailW",
    "SetupDiGetDeviceInstallParamsA",
    "SetupDiGetDeviceInstallParamsW",
    "SetupDiGetDeviceInstanceIdA",
    "SetupDiGetDeviceInstanceIdW",
    "SetupDiGetDeviceInterfaceAlias",
    "SetupDiGetDeviceInterfaceDetailA",
    "SetupDiGetDeviceInterfaceDetailW",
    "SetupDiGetDeviceInterfacePropertyKeys",
    "SetupDiGetDeviceInterfacePropertyW",
    "SetupDiGetDevicePropertyKeys",
    "SetupDiGetDevicePropertyW",
    "SetupDiGetDeviceRegistryPropertyA",
    "SetupDiGetDeviceRegistryPropertyW",
    "SetupDiGetDriverInfoDetailA",
    "SetupDiGetDriverInfoDetailW",
    "SetupDiGetDriverInstallParamsA",
    "SetupDiGetDriverInstallParamsW",
    "SetupDiGetHwProfileFriendlyNameA",
    "SetupDiGetHwProfileFriendlyNameExA",
    "SetupDiGetHwProfileFriendlyNameExW",
    "SetupDiGetHwProfileFriendlyNameW",
    "SetupDiGetHwProfileList",
    "SetupDiGetHwProfileListExA",
    "SetupDiGetHwProfileListExW",
    "SetupDiGetINFClassA",
    "SetupDiGetINFClassW",
    "SetupDiGetSelectedDevice",
    "SetupDiGetSelectedDriverA",
    "SetupDiGetSelectedDriverW",
    "SetupDiGetWizardPage",
    "SetupDiInstallClassA",
    "SetupDiInstallClassExA",
    "SetupDiInstallClassExW",
    "SetupDiInstallClassW",
    "SetupDiInstallDevice",
    "SetupDiInstallDeviceInterfaces",
    "SetupDiInstallDriverFiles",
    "SetupDiLoadClassIcon",
    "SetupDiLoadDeviceIcon",
    "SetupDiOpenClassRegKey",
    "SetupDiOpenClassRegKeyExA",
    "SetupDiOpenClassRegKeyExW",
    "SetupDiOpenDevRegKey",
    "SetupDiOpenDeviceInfoA",
    "SetupDiOpenDeviceInfoW",
    "SetupDiOpenDeviceInterfaceA",
    "SetupDiOpenDeviceInterfaceRegKey",
    "SetupDiOpenDeviceInterfaceW",
    "SetupDiRegisterCoDeviceInstallers",
    "SetupDiRegisterDeviceInfo",
    "SetupDiRemoveDevice",
    "SetupDiRemoveDeviceInterface",
    "SetupDiRestartDevices",
    "SetupDiSelectBestCompatDrv",
    "SetupDiSelectDevice",
    "SetupDiSelectOEMDrv",
    "SetupDiSetClassInstallParamsA",
    "SetupDiSetClassInstallParamsW",
    "SetupDiSetClassPropertyExW",
    "SetupDiSetClassPropertyW",
    "SetupDiSetClassRegistryPropertyA",
    "SetupDiSetClassRegistryPropertyW",
    "SetupDiSetDeviceInstallParamsA",
    "SetupDiSetDeviceInstallParamsW",
    "SetupDiSetDeviceInterfaceDefault",
    "SetupDiSetDeviceInterfacePropertyW",
    "SetupDiSetDevicePropertyW",
    "SetupDiSetDeviceRegistryPropertyA",
    "SetupDiSetDeviceRegistryPropertyW",
    "SetupDiSetDriverInstallParamsA",
    "SetupDiSetDriverInstallParamsW",
    "SetupDiSetSelectedDevice",
    "SetupDiSetSelectedDriverA",
    "SetupDiSetSelectedDriverW",
    "SetupDiUnremoveDevice",
    "SetupDuplicateDiskSpaceListA",
    "SetupDuplicateDiskSpaceListW",
    "SetupEnumInfSectionsA",
    "SetupEnumInfSectionsW",
    "SetupFileLogInfo",
    "SetupFileLogInfo_SetupFileLogChecksum",
    "SetupFileLogInfo_SetupFileLogDiskDescription",
    "SetupFileLogInfo_SetupFileLogDiskTagfile",
    "SetupFileLogInfo_SetupFileLogMax",
    "SetupFileLogInfo_SetupFileLogOtherInfo",
    "SetupFileLogInfo_SetupFileLogSourceFilename",
    "SetupFindFirstLineA",
    "SetupFindFirstLineW",
    "SetupFindNextLine",
    "SetupFindNextMatchLineA",
    "SetupFindNextMatchLineW",
    "SetupFreeSourceListA",
    "SetupFreeSourceListW",
    "SetupGetBackupInformationA",
    "SetupGetBackupInformationW",
    "SetupGetBinaryField",
    "SetupGetFieldCount",
    "SetupGetFileCompressionInfoA",
    "SetupGetFileCompressionInfoExA",
    "SetupGetFileCompressionInfoExW",
    "SetupGetFileCompressionInfoW",
    "SetupGetFileQueueCount",
    "SetupGetFileQueueFlags",
    "SetupGetInfDriverStoreLocationA",
    "SetupGetInfDriverStoreLocationW",
    "SetupGetInfFileListA",
    "SetupGetInfFileListW",
    "SetupGetInfInformationA",
    "SetupGetInfInformationW",
    "SetupGetInfPublishedNameA",
    "SetupGetInfPublishedNameW",
    "SetupGetIntField",
    "SetupGetLineByIndexA",
    "SetupGetLineByIndexW",
    "SetupGetLineCountA",
    "SetupGetLineCountW",
    "SetupGetLineTextA",
    "SetupGetLineTextW",
    "SetupGetMultiSzFieldA",
    "SetupGetMultiSzFieldW",
    "SetupGetNonInteractiveMode",
    "SetupGetSourceFileLocationA",
    "SetupGetSourceFileLocationW",
    "SetupGetSourceFileSizeA",
    "SetupGetSourceFileSizeW",
    "SetupGetSourceInfoA",
    "SetupGetSourceInfoW",
    "SetupGetStringFieldA",
    "SetupGetStringFieldW",
    "SetupGetTargetPathA",
    "SetupGetTargetPathW",
    "SetupGetThreadLogToken",
    "SetupInitDefaultQueueCallback",
    "SetupInitDefaultQueueCallbackEx",
    "SetupInitializeFileLogA",
    "SetupInitializeFileLogW",
    "SetupInstallFileA",
    "SetupInstallFileExA",
    "SetupInstallFileExW",
    "SetupInstallFileW",
    "SetupInstallFilesFromInfSectionA",
    "SetupInstallFilesFromInfSectionW",
    "SetupInstallFromInfSectionA",
    "SetupInstallFromInfSectionW",
    "SetupInstallServicesFromInfSectionA",
    "SetupInstallServicesFromInfSectionExA",
    "SetupInstallServicesFromInfSectionExW",
    "SetupInstallServicesFromInfSectionW",
    "SetupIterateCabinetA",
    "SetupIterateCabinetW",
    "SetupLogErrorA",
    "SetupLogErrorW",
    "SetupLogFileA",
    "SetupLogFileW",
    "SetupOpenAppendInfFileA",
    "SetupOpenAppendInfFileW",
    "SetupOpenFileQueue",
    "SetupOpenInfFileA",
    "SetupOpenInfFileW",
    "SetupOpenLog",
    "SetupOpenMasterInf",
    "SetupPrepareQueueForRestoreA",
    "SetupPrepareQueueForRestoreW",
    "SetupPromptForDiskA",
    "SetupPromptForDiskW",
    "SetupPromptReboot",
    "SetupQueryDrivesInDiskSpaceListA",
    "SetupQueryDrivesInDiskSpaceListW",
    "SetupQueryFileLogA",
    "SetupQueryFileLogW",
    "SetupQueryInfFileInformationA",
    "SetupQueryInfFileInformationW",
    "SetupQueryInfOriginalFileInformationA",
    "SetupQueryInfOriginalFileInformationW",
    "SetupQueryInfVersionInformationA",
    "SetupQueryInfVersionInformationW",
    "SetupQuerySourceListA",
    "SetupQuerySourceListW",
    "SetupQuerySpaceRequiredOnDriveA",
    "SetupQuerySpaceRequiredOnDriveW",
    "SetupQueueCopyA",
    "SetupQueueCopyIndirectA",
    "SetupQueueCopyIndirectW",
    "SetupQueueCopySectionA",
    "SetupQueueCopySectionW",
    "SetupQueueCopyW",
    "SetupQueueDefaultCopyA",
    "SetupQueueDefaultCopyW",
    "SetupQueueDeleteA",
    "SetupQueueDeleteSectionA",
    "SetupQueueDeleteSectionW",
    "SetupQueueDeleteW",
    "SetupQueueRenameA",
    "SetupQueueRenameSectionA",
    "SetupQueueRenameSectionW",
    "SetupQueueRenameW",
    "SetupRemoveFileLogEntryA",
    "SetupRemoveFileLogEntryW",
    "SetupRemoveFromDiskSpaceListA",
    "SetupRemoveFromDiskSpaceListW",
    "SetupRemoveFromSourceListA",
    "SetupRemoveFromSourceListW",
    "SetupRemoveInstallSectionFromDiskSpaceListA",
    "SetupRemoveInstallSectionFromDiskSpaceListW",
    "SetupRemoveSectionFromDiskSpaceListA",
    "SetupRemoveSectionFromDiskSpaceListW",
    "SetupRenameErrorA",
    "SetupRenameErrorW",
    "SetupScanFileQueueA",
    "SetupScanFileQueueW",
    "SetupSetDirectoryIdA",
    "SetupSetDirectoryIdExA",
    "SetupSetDirectoryIdExW",
    "SetupSetDirectoryIdW",
    "SetupSetFileQueueAlternatePlatformA",
    "SetupSetFileQueueAlternatePlatformW",
    "SetupSetFileQueueFlags",
    "SetupSetNonInteractiveMode",
    "SetupSetPlatformPathOverrideA",
    "SetupSetPlatformPathOverrideW",
    "SetupSetSourceListA",
    "SetupSetSourceListW",
    "SetupSetThreadLogToken",
    "SetupTermDefaultQueueCallback",
    "SetupTerminateFileLog",
    "SetupUninstallNewlyCopiedInfs",
    "SetupUninstallOEMInfA",
    "SetupUninstallOEMInfW",
    "SetupVerifyInfFileA",
    "SetupVerifyInfFileW",
    "SetupWriteTextLog",
    "SetupWriteTextLogError",
    "SetupWriteTextLogInfLine",
    "UpdateDriverForPlugAndPlayDevicesA",
    "UpdateDriverForPlugAndPlayDevicesW",
    "fDD_BYTE",
    "fDD_BYTE_AND_WORD",
    "fDD_BusMaster",
    "fDD_DWORD",
    "fDD_NoBusMaster",
    "fDD_TypeA",
    "fDD_TypeB",
    "fDD_TypeF",
    "fDD_TypeStandard",
    "fDD_WORD",
    "fIOD_10_BIT_DECODE",
    "fIOD_12_BIT_DECODE",
    "fIOD_16_BIT_DECODE",
    "fIOD_DECODE",
    "fIOD_IO",
    "fIOD_Memory",
    "fIOD_PASSIVE_DECODE",
    "fIOD_PORT_BAR",
    "fIOD_POSITIVE_DECODE",
    "fIOD_PortType",
    "fIOD_WINDOW_DECODE",
    "fIRQD_Edge",
    "fIRQD_Exclusive",
    "fIRQD_Level",
    "fIRQD_Level_Bit",
    "fIRQD_Share",
    "fIRQD_Share_Bit",
    "fMD_24",
    "fMD_32",
    "fMD_32_24",
    "fMD_Cacheable",
    "fMD_CombinedWrite",
    "fMD_CombinedWriteAllowed",
    "fMD_CombinedWriteDisallowed",
    "fMD_MEMORY_BAR",
    "fMD_MemoryType",
    "fMD_NonCacheable",
    "fMD_Pref",
    "fMD_PrefetchAllowed",
    "fMD_PrefetchDisallowed",
    "fMD_Prefetchable",
    "fMD_RAM",
    "fMD_ROM",
    "fMD_ReadAllowed",
    "fMD_ReadDisallowed",
    "fMD_Readable",
    "fMD_WINDOW_DECODE",
    "fPCD_ATTRIBUTES_PER_WINDOW",
    "fPCD_IO1_16",
    "fPCD_IO1_SRC_16",
    "fPCD_IO1_WS_16",
    "fPCD_IO1_ZW_8",
    "fPCD_IO2_16",
    "fPCD_IO2_SRC_16",
    "fPCD_IO2_WS_16",
    "fPCD_IO2_ZW_8",
    "fPCD_IO_16",
    "fPCD_IO_8",
    "fPCD_IO_SRC_16",
    "fPCD_IO_WS_16",
    "fPCD_IO_ZW_8",
    "fPCD_MEM1_16",
    "fPCD_MEM1_A",
    "fPCD_MEM1_WS_ONE",
    "fPCD_MEM1_WS_THREE",
    "fPCD_MEM1_WS_TWO",
    "fPCD_MEM2_16",
    "fPCD_MEM2_A",
    "fPCD_MEM2_WS_ONE",
    "fPCD_MEM2_WS_THREE",
    "fPCD_MEM2_WS_TWO",
    "fPCD_MEM_16",
    "fPCD_MEM_8",
    "fPCD_MEM_A",
    "fPCD_MEM_WS_ONE",
    "fPCD_MEM_WS_THREE",
    "fPCD_MEM_WS_TWO",
    "fPMF_AUDIO_ENABLE",
    "mDD_BusMaster",
    "mDD_Type",
    "mDD_Width",
    "mIRQD_Edge_Level",
    "mIRQD_Share",
    "mMD_32_24",
    "mMD_Cacheable",
    "mMD_CombinedWrite",
    "mMD_MemoryType",
    "mMD_Prefetchable",
    "mMD_Readable",
    "mPCD_IO_8_16",
    "mPCD_MEM1_WS",
    "mPCD_MEM2_WS",
    "mPCD_MEM_8_16",
    "mPCD_MEM_A_C",
    "mPCD_MEM_WS",
    "mPMF_AUDIO_ENABLE",
]
