from ctypes import c_void_p, Structure, Union, POINTER, CFUNCTYPE, WINFUNCTYPE, cdll, windll
from win32more.base import MissingType, c_char_p_no, c_wchar_p_no, Byte, SByte, Char, Int16, UInt16, Int32, UInt32, Int64, UInt64, IntPtr, UIntPtr, Single, Double, String, Boolean, Void, Guid, COMMETHOD, SUCCEEDED, FAILED
import win32more.Foundation
import win32more.Globalization
import win32more.Graphics.Gdi
import win32more.System.Com
import sys
_module = sys.modules[__name__]
def __getattr__(name):
    try:
        f = globals()[f'_define_{name}']
    except KeyError:
        raise AttributeError(f"module '{__name__}' has no attribute '{name}'") from None
    setattr(_module, name, f())
    return getattr(_module, name)
def __dir__():
    return __all__
ALL_SERVICE_TYPES = 0
HIGHLEVEL_SERVICE_TYPES = 1
LOWLEVEL_SERVICE_TYPES = 2
ALL_SERVICES = 0
ONLINE_SERVICES = 1
OFFLINE_SERVICES = 2
MAX_LEADBYTES = 12
MAX_DEFAULTCHAR = 2
HIGH_SURROGATE_START = 55296
HIGH_SURROGATE_END = 56319
LOW_SURROGATE_START = 56320
LOW_SURROGATE_END = 57343
WC_COMPOSITECHECK = 512
WC_DISCARDNS = 16
WC_SEPCHARS = 32
WC_DEFAULTCHAR = 64
WC_ERR_INVALID_CHARS = 128
WC_NO_BEST_FIT_CHARS = 1024
CT_CTYPE1 = 1
CT_CTYPE2 = 2
CT_CTYPE3 = 4
C1_UPPER = 1
C1_LOWER = 2
C1_DIGIT = 4
C1_SPACE = 8
C1_PUNCT = 16
C1_CNTRL = 32
C1_BLANK = 64
C1_XDIGIT = 128
C1_ALPHA = 256
C1_DEFINED = 512
C2_LEFTTORIGHT = 1
C2_RIGHTTOLEFT = 2
C2_EUROPENUMBER = 3
C2_EUROPESEPARATOR = 4
C2_EUROPETERMINATOR = 5
C2_ARABICNUMBER = 6
C2_COMMONSEPARATOR = 7
C2_BLOCKSEPARATOR = 8
C2_SEGMENTSEPARATOR = 9
C2_WHITESPACE = 10
C2_OTHERNEUTRAL = 11
C2_NOTAPPLICABLE = 0
C3_NONSPACING = 1
C3_DIACRITIC = 2
C3_VOWELMARK = 4
C3_SYMBOL = 8
C3_KATAKANA = 16
C3_HIRAGANA = 32
C3_HALFWIDTH = 64
C3_FULLWIDTH = 128
C3_IDEOGRAPH = 256
C3_KASHIDA = 512
C3_LEXICAL = 1024
C3_HIGHSURROGATE = 2048
C3_LOWSURROGATE = 4096
C3_ALPHA = 32768
C3_NOTAPPLICABLE = 0
LCMAP_LOWERCASE = 256
LCMAP_UPPERCASE = 512
LCMAP_TITLECASE = 768
LCMAP_SORTKEY = 1024
LCMAP_BYTEREV = 2048
LCMAP_HIRAGANA = 1048576
LCMAP_KATAKANA = 2097152
LCMAP_HALFWIDTH = 4194304
LCMAP_FULLWIDTH = 8388608
LCMAP_LINGUISTIC_CASING = 16777216
LCMAP_SIMPLIFIED_CHINESE = 33554432
LCMAP_TRADITIONAL_CHINESE = 67108864
LCMAP_SORTHANDLE = 536870912
LCMAP_HASH = 262144
FIND_STARTSWITH = 1048576
FIND_ENDSWITH = 2097152
FIND_FROMSTART = 4194304
FIND_FROMEND = 8388608
LCID_ALTERNATE_SORTS = 4
LOCALE_ALL = 0
LOCALE_WINDOWS = 1
LOCALE_SUPPLEMENTAL = 2
LOCALE_ALTERNATE_SORTS = 4
LOCALE_REPLACEMENT = 8
LOCALE_NEUTRALDATA = 16
LOCALE_SPECIFICDATA = 32
CSTR_LESS_THAN = 1
CSTR_EQUAL = 2
CSTR_GREATER_THAN = 3
CP_ACP = 0
CP_OEMCP = 1
CP_MACCP = 2
CP_THREAD_ACP = 3
CP_SYMBOL = 42
CP_UTF7 = 65000
CP_UTF8 = 65001
CTRY_DEFAULT = 0
CTRY_ALBANIA = 355
CTRY_ALGERIA = 213
CTRY_ARGENTINA = 54
CTRY_ARMENIA = 374
CTRY_AUSTRALIA = 61
CTRY_AUSTRIA = 43
CTRY_AZERBAIJAN = 994
CTRY_BAHRAIN = 973
CTRY_BELARUS = 375
CTRY_BELGIUM = 32
CTRY_BELIZE = 501
CTRY_BOLIVIA = 591
CTRY_BRAZIL = 55
CTRY_BRUNEI_DARUSSALAM = 673
CTRY_BULGARIA = 359
CTRY_CANADA = 2
CTRY_CARIBBEAN = 1
CTRY_CHILE = 56
CTRY_COLOMBIA = 57
CTRY_COSTA_RICA = 506
CTRY_CROATIA = 385
CTRY_CZECH = 420
CTRY_DENMARK = 45
CTRY_DOMINICAN_REPUBLIC = 1
CTRY_ECUADOR = 593
CTRY_EGYPT = 20
CTRY_EL_SALVADOR = 503
CTRY_ESTONIA = 372
CTRY_FAEROE_ISLANDS = 298
CTRY_FINLAND = 358
CTRY_FRANCE = 33
CTRY_GEORGIA = 995
CTRY_GERMANY = 49
CTRY_GREECE = 30
CTRY_GUATEMALA = 502
CTRY_HONDURAS = 504
CTRY_HONG_KONG = 852
CTRY_HUNGARY = 36
CTRY_ICELAND = 354
CTRY_INDIA = 91
CTRY_INDONESIA = 62
CTRY_IRAN = 981
CTRY_IRAQ = 964
CTRY_IRELAND = 353
CTRY_ISRAEL = 972
CTRY_ITALY = 39
CTRY_JAMAICA = 1
CTRY_JAPAN = 81
CTRY_JORDAN = 962
CTRY_KAZAKSTAN = 7
CTRY_KENYA = 254
CTRY_KUWAIT = 965
CTRY_KYRGYZSTAN = 996
CTRY_LATVIA = 371
CTRY_LEBANON = 961
CTRY_LIBYA = 218
CTRY_LIECHTENSTEIN = 41
CTRY_LITHUANIA = 370
CTRY_LUXEMBOURG = 352
CTRY_MACAU = 853
CTRY_MACEDONIA = 389
CTRY_MALAYSIA = 60
CTRY_MALDIVES = 960
CTRY_MEXICO = 52
CTRY_MONACO = 33
CTRY_MONGOLIA = 976
CTRY_MOROCCO = 212
CTRY_NETHERLANDS = 31
CTRY_NEW_ZEALAND = 64
CTRY_NICARAGUA = 505
CTRY_NORWAY = 47
CTRY_OMAN = 968
CTRY_PAKISTAN = 92
CTRY_PANAMA = 507
CTRY_PARAGUAY = 595
CTRY_PERU = 51
CTRY_PHILIPPINES = 63
CTRY_POLAND = 48
CTRY_PORTUGAL = 351
CTRY_PRCHINA = 86
CTRY_PUERTO_RICO = 1
CTRY_QATAR = 974
CTRY_ROMANIA = 40
CTRY_RUSSIA = 7
CTRY_SAUDI_ARABIA = 966
CTRY_SERBIA = 381
CTRY_SINGAPORE = 65
CTRY_SLOVAK = 421
CTRY_SLOVENIA = 386
CTRY_SOUTH_AFRICA = 27
CTRY_SOUTH_KOREA = 82
CTRY_SPAIN = 34
CTRY_SWEDEN = 46
CTRY_SWITZERLAND = 41
CTRY_SYRIA = 963
CTRY_TAIWAN = 886
CTRY_TATARSTAN = 7
CTRY_THAILAND = 66
CTRY_TRINIDAD_Y_TOBAGO = 1
CTRY_TUNISIA = 216
CTRY_TURKEY = 90
CTRY_UAE = 971
CTRY_UKRAINE = 380
CTRY_UNITED_KINGDOM = 44
CTRY_UNITED_STATES = 1
CTRY_URUGUAY = 598
CTRY_UZBEKISTAN = 7
CTRY_VENEZUELA = 58
CTRY_VIET_NAM = 84
CTRY_YEMEN = 967
CTRY_ZIMBABWE = 263
LOCALE_NOUSEROVERRIDE = 2147483648
LOCALE_USE_CP_ACP = 1073741824
LOCALE_RETURN_NUMBER = 536870912
LOCALE_RETURN_GENITIVE_NAMES = 268435456
LOCALE_ALLOW_NEUTRAL_NAMES = 134217728
LOCALE_SLOCALIZEDDISPLAYNAME = 2
LOCALE_SENGLISHDISPLAYNAME = 114
LOCALE_SNATIVEDISPLAYNAME = 115
LOCALE_SLOCALIZEDLANGUAGENAME = 111
LOCALE_SENGLISHLANGUAGENAME = 4097
LOCALE_SNATIVELANGUAGENAME = 4
LOCALE_SLOCALIZEDCOUNTRYNAME = 6
LOCALE_SENGLISHCOUNTRYNAME = 4098
LOCALE_SNATIVECOUNTRYNAME = 8
LOCALE_IDIALINGCODE = 5
LOCALE_SLIST = 12
LOCALE_IMEASURE = 13
LOCALE_SDECIMAL = 14
LOCALE_STHOUSAND = 15
LOCALE_SGROUPING = 16
LOCALE_IDIGITS = 17
LOCALE_ILZERO = 18
LOCALE_INEGNUMBER = 4112
LOCALE_SNATIVEDIGITS = 19
LOCALE_SCURRENCY = 20
LOCALE_SINTLSYMBOL = 21
LOCALE_SMONDECIMALSEP = 22
LOCALE_SMONTHOUSANDSEP = 23
LOCALE_SMONGROUPING = 24
LOCALE_ICURRDIGITS = 25
LOCALE_ICURRENCY = 27
LOCALE_INEGCURR = 28
LOCALE_SSHORTDATE = 31
LOCALE_SLONGDATE = 32
LOCALE_STIMEFORMAT = 4099
LOCALE_SAM = 40
LOCALE_SPM = 41
LOCALE_ICALENDARTYPE = 4105
LOCALE_IOPTIONALCALENDAR = 4107
LOCALE_IFIRSTDAYOFWEEK = 4108
LOCALE_IFIRSTWEEKOFYEAR = 4109
LOCALE_SDAYNAME1 = 42
LOCALE_SDAYNAME2 = 43
LOCALE_SDAYNAME3 = 44
LOCALE_SDAYNAME4 = 45
LOCALE_SDAYNAME5 = 46
LOCALE_SDAYNAME6 = 47
LOCALE_SDAYNAME7 = 48
LOCALE_SABBREVDAYNAME1 = 49
LOCALE_SABBREVDAYNAME2 = 50
LOCALE_SABBREVDAYNAME3 = 51
LOCALE_SABBREVDAYNAME4 = 52
LOCALE_SABBREVDAYNAME5 = 53
LOCALE_SABBREVDAYNAME6 = 54
LOCALE_SABBREVDAYNAME7 = 55
LOCALE_SMONTHNAME1 = 56
LOCALE_SMONTHNAME2 = 57
LOCALE_SMONTHNAME3 = 58
LOCALE_SMONTHNAME4 = 59
LOCALE_SMONTHNAME5 = 60
LOCALE_SMONTHNAME6 = 61
LOCALE_SMONTHNAME7 = 62
LOCALE_SMONTHNAME8 = 63
LOCALE_SMONTHNAME9 = 64
LOCALE_SMONTHNAME10 = 65
LOCALE_SMONTHNAME11 = 66
LOCALE_SMONTHNAME12 = 67
LOCALE_SMONTHNAME13 = 4110
LOCALE_SABBREVMONTHNAME1 = 68
LOCALE_SABBREVMONTHNAME2 = 69
LOCALE_SABBREVMONTHNAME3 = 70
LOCALE_SABBREVMONTHNAME4 = 71
LOCALE_SABBREVMONTHNAME5 = 72
LOCALE_SABBREVMONTHNAME6 = 73
LOCALE_SABBREVMONTHNAME7 = 74
LOCALE_SABBREVMONTHNAME8 = 75
LOCALE_SABBREVMONTHNAME9 = 76
LOCALE_SABBREVMONTHNAME10 = 77
LOCALE_SABBREVMONTHNAME11 = 78
LOCALE_SABBREVMONTHNAME12 = 79
LOCALE_SABBREVMONTHNAME13 = 4111
LOCALE_SPOSITIVESIGN = 80
LOCALE_SNEGATIVESIGN = 81
LOCALE_IPOSSIGNPOSN = 82
LOCALE_INEGSIGNPOSN = 83
LOCALE_IPOSSYMPRECEDES = 84
LOCALE_IPOSSEPBYSPACE = 85
LOCALE_INEGSYMPRECEDES = 86
LOCALE_INEGSEPBYSPACE = 87
LOCALE_FONTSIGNATURE = 88
LOCALE_SISO639LANGNAME = 89
LOCALE_SISO3166CTRYNAME = 90
LOCALE_IPAPERSIZE = 4106
LOCALE_SENGCURRNAME = 4103
LOCALE_SNATIVECURRNAME = 4104
LOCALE_SYEARMONTH = 4102
LOCALE_SSORTNAME = 4115
LOCALE_IDIGITSUBSTITUTION = 4116
LOCALE_SNAME = 92
LOCALE_SDURATION = 93
LOCALE_SSHORTESTDAYNAME1 = 96
LOCALE_SSHORTESTDAYNAME2 = 97
LOCALE_SSHORTESTDAYNAME3 = 98
LOCALE_SSHORTESTDAYNAME4 = 99
LOCALE_SSHORTESTDAYNAME5 = 100
LOCALE_SSHORTESTDAYNAME6 = 101
LOCALE_SSHORTESTDAYNAME7 = 102
LOCALE_SISO639LANGNAME2 = 103
LOCALE_SISO3166CTRYNAME2 = 104
LOCALE_SNAN = 105
LOCALE_SPOSINFINITY = 106
LOCALE_SNEGINFINITY = 107
LOCALE_SSCRIPTS = 108
LOCALE_SPARENT = 109
LOCALE_SCONSOLEFALLBACKNAME = 110
LOCALE_IREADINGLAYOUT = 112
LOCALE_INEUTRAL = 113
LOCALE_INEGATIVEPERCENT = 116
LOCALE_IPOSITIVEPERCENT = 117
LOCALE_SPERCENT = 118
LOCALE_SPERMILLE = 119
LOCALE_SMONTHDAY = 120
LOCALE_SSHORTTIME = 121
LOCALE_SOPENTYPELANGUAGETAG = 122
LOCALE_SSORTLOCALE = 123
LOCALE_SRELATIVELONGDATE = 124
LOCALE_ICONSTRUCTEDLOCALE = 125
LOCALE_SSHORTESTAM = 126
LOCALE_SSHORTESTPM = 127
LOCALE_IUSEUTF8LEGACYACP = 1638
LOCALE_IUSEUTF8LEGACYOEMCP = 2457
LOCALE_IDEFAULTCODEPAGE = 11
LOCALE_IDEFAULTANSICODEPAGE = 4100
LOCALE_IDEFAULTMACCODEPAGE = 4113
LOCALE_IDEFAULTEBCDICCODEPAGE = 4114
LOCALE_ILANGUAGE = 1
LOCALE_SABBREVLANGNAME = 3
LOCALE_SABBREVCTRYNAME = 7
LOCALE_IGEOID = 91
LOCALE_IDEFAULTLANGUAGE = 9
LOCALE_IDEFAULTCOUNTRY = 10
LOCALE_IINTLCURRDIGITS = 26
LOCALE_SDATE = 29
LOCALE_STIME = 30
LOCALE_IDATE = 33
LOCALE_ILDATE = 34
LOCALE_ITIME = 35
LOCALE_ITIMEMARKPOSN = 4101
LOCALE_ICENTURY = 36
LOCALE_ITLZERO = 37
LOCALE_IDAYLZERO = 38
LOCALE_IMONLZERO = 39
LOCALE_SKEYBOARDSTOINSTALL = 94
LOCALE_SLANGUAGE = 2
LOCALE_SLANGDISPLAYNAME = 111
LOCALE_SENGLANGUAGE = 4097
LOCALE_SNATIVELANGNAME = 4
LOCALE_SCOUNTRY = 6
LOCALE_SENGCOUNTRY = 4098
LOCALE_SNATIVECTRYNAME = 8
LOCALE_ICOUNTRY = 5
LOCALE_S1159 = 40
LOCALE_S2359 = 41
CAL_NOUSEROVERRIDE = 2147483648
CAL_USE_CP_ACP = 1073741824
CAL_RETURN_NUMBER = 536870912
CAL_RETURN_GENITIVE_NAMES = 268435456
CAL_ICALINTVALUE = 1
CAL_SCALNAME = 2
CAL_IYEAROFFSETRANGE = 3
CAL_SERASTRING = 4
CAL_SSHORTDATE = 5
CAL_SLONGDATE = 6
CAL_SDAYNAME1 = 7
CAL_SDAYNAME2 = 8
CAL_SDAYNAME3 = 9
CAL_SDAYNAME4 = 10
CAL_SDAYNAME5 = 11
CAL_SDAYNAME6 = 12
CAL_SDAYNAME7 = 13
CAL_SABBREVDAYNAME1 = 14
CAL_SABBREVDAYNAME2 = 15
CAL_SABBREVDAYNAME3 = 16
CAL_SABBREVDAYNAME4 = 17
CAL_SABBREVDAYNAME5 = 18
CAL_SABBREVDAYNAME6 = 19
CAL_SABBREVDAYNAME7 = 20
CAL_SMONTHNAME1 = 21
CAL_SMONTHNAME2 = 22
CAL_SMONTHNAME3 = 23
CAL_SMONTHNAME4 = 24
CAL_SMONTHNAME5 = 25
CAL_SMONTHNAME6 = 26
CAL_SMONTHNAME7 = 27
CAL_SMONTHNAME8 = 28
CAL_SMONTHNAME9 = 29
CAL_SMONTHNAME10 = 30
CAL_SMONTHNAME11 = 31
CAL_SMONTHNAME12 = 32
CAL_SMONTHNAME13 = 33
CAL_SABBREVMONTHNAME1 = 34
CAL_SABBREVMONTHNAME2 = 35
CAL_SABBREVMONTHNAME3 = 36
CAL_SABBREVMONTHNAME4 = 37
CAL_SABBREVMONTHNAME5 = 38
CAL_SABBREVMONTHNAME6 = 39
CAL_SABBREVMONTHNAME7 = 40
CAL_SABBREVMONTHNAME8 = 41
CAL_SABBREVMONTHNAME9 = 42
CAL_SABBREVMONTHNAME10 = 43
CAL_SABBREVMONTHNAME11 = 44
CAL_SABBREVMONTHNAME12 = 45
CAL_SABBREVMONTHNAME13 = 46
CAL_SYEARMONTH = 47
CAL_ITWODIGITYEARMAX = 48
CAL_SSHORTESTDAYNAME1 = 49
CAL_SSHORTESTDAYNAME2 = 50
CAL_SSHORTESTDAYNAME3 = 51
CAL_SSHORTESTDAYNAME4 = 52
CAL_SSHORTESTDAYNAME5 = 53
CAL_SSHORTESTDAYNAME6 = 54
CAL_SSHORTESTDAYNAME7 = 55
CAL_SMONTHDAY = 56
CAL_SABBREVERASTRING = 57
CAL_SRELATIVELONGDATE = 58
CAL_SENGLISHERANAME = 59
CAL_SENGLISHABBREVERANAME = 60
CAL_SJAPANESEERAFIRSTYEAR = 61
ENUM_ALL_CALENDARS = 4294967295
CAL_GREGORIAN = 1
CAL_GREGORIAN_US = 2
CAL_JAPAN = 3
CAL_TAIWAN = 4
CAL_KOREA = 5
CAL_HIJRI = 6
CAL_THAI = 7
CAL_HEBREW = 8
CAL_GREGORIAN_ME_FRENCH = 9
CAL_GREGORIAN_ARABIC = 10
CAL_GREGORIAN_XLIT_ENGLISH = 11
CAL_GREGORIAN_XLIT_FRENCH = 12
CAL_PERSIAN = 22
CAL_UMALQURA = 23
LGRPID_WESTERN_EUROPE = 1
LGRPID_CENTRAL_EUROPE = 2
LGRPID_BALTIC = 3
LGRPID_GREEK = 4
LGRPID_CYRILLIC = 5
LGRPID_TURKIC = 6
LGRPID_TURKISH = 6
LGRPID_JAPANESE = 7
LGRPID_KOREAN = 8
LGRPID_TRADITIONAL_CHINESE = 9
LGRPID_SIMPLIFIED_CHINESE = 10
LGRPID_THAI = 11
LGRPID_HEBREW = 12
LGRPID_ARABIC = 13
LGRPID_VIETNAMESE = 14
LGRPID_INDIC = 15
LGRPID_GEORGIAN = 16
LGRPID_ARMENIAN = 17
MUI_LANGUAGE_ID = 4
MUI_LANGUAGE_NAME = 8
MUI_MERGE_SYSTEM_FALLBACK = 16
MUI_MERGE_USER_FALLBACK = 32
MUI_THREAD_LANGUAGES = 64
MUI_CONSOLE_FILTER = 256
MUI_COMPLEX_SCRIPT_FILTER = 512
MUI_RESET_FILTERS = 1
MUI_USER_PREFERRED_UI_LANGUAGES = 16
MUI_USE_INSTALLED_LANGUAGES = 32
MUI_USE_SEARCH_ALL_LANGUAGES = 64
MUI_LANG_NEUTRAL_PE_FILE = 256
MUI_NON_LANG_NEUTRAL_FILE = 512
MUI_MACHINE_LANGUAGE_SETTINGS = 1024
MUI_FILETYPE_NOT_LANGUAGE_NEUTRAL = 1
MUI_FILETYPE_LANGUAGE_NEUTRAL_MAIN = 2
MUI_FILETYPE_LANGUAGE_NEUTRAL_MUI = 4
MUI_QUERY_TYPE = 1
MUI_QUERY_CHECKSUM = 2
MUI_QUERY_LANGUAGE_NAME = 4
MUI_QUERY_RESOURCE_TYPES = 8
MUI_FILEINFO_VERSION = 1
MUI_FULL_LANGUAGE = 1
MUI_PARTIAL_LANGUAGE = 2
MUI_LIP_LANGUAGE = 4
MUI_LANGUAGE_INSTALLED = 32
MUI_LANGUAGE_LICENSED = 64
GEOID_NOT_AVAILABLE = -1
SORTING_PARADIGM_NLS = 0
SORTING_PARADIGM_ICU = 16777216
IDN_ALLOW_UNASSIGNED = 1
IDN_USE_STD3_ASCII_RULES = 2
IDN_EMAIL_ADDRESS = 4
IDN_RAW_PUNYCODE = 8
VS_ALLOW_LATIN = 1
GSS_ALLOW_INHERITED_COMMON = 1
MUI_FORMAT_REG_COMPAT = 1
MUI_FORMAT_INF_COMPAT = 2
MUI_VERIFY_FILE_EXISTS = 4
MUI_SKIP_STRING_CACHE = 8
MUI_IMMUTABLE_LOOKUP = 16
LOCALE_NAME_INVARIANT = ''
LOCALE_NAME_SYSTEM_DEFAULT = '!x-sys-default-locale'
MIN_SPELLING_NTDDI = 100794368
SCRIPT_UNDEFINED = 0
USP_E_SCRIPT_NOT_IN_FONT = -2147220992
SGCM_RTL = 1
SSA_PASSWORD = 1
SSA_TAB = 2
SSA_CLIP = 4
SSA_FIT = 8
SSA_DZWG = 16
SSA_FALLBACK = 32
SSA_BREAK = 64
SSA_GLYPHS = 128
SSA_RTL = 256
SSA_GCP = 512
SSA_HOTKEY = 1024
SSA_METAFILE = 2048
SSA_LINK = 4096
SSA_HIDEHOTKEY = 8192
SSA_HOTKEYONLY = 9216
SSA_FULLMEASURE = 67108864
SSA_LPKANSIFALLBACK = 134217728
SSA_PIDX = 268435456
SSA_LAYOUTRTL = 536870912
SSA_DONTGLYPH = 1073741824
SSA_NOKASHIDA = 2147483648
SCRIPT_DIGITSUBSTITUTE_CONTEXT = 0
SCRIPT_DIGITSUBSTITUTE_NONE = 1
SCRIPT_DIGITSUBSTITUTE_NATIONAL = 2
SCRIPT_DIGITSUBSTITUTE_TRADITIONAL = 3
UNISCRIBE_OPENTYPE = 256
SCRIPT_TAG_UNKNOWN = 0
MUI_LANGUAGE_EXACT = 16
NLS_CP_CPINFO = 268435456
NLS_CP_MBTOWC = 1073741824
NLS_CP_WCTOMB = 2147483648
U_DISABLE_RENAMING = 1
U_SHOW_CPLUSPLUS_API = 0
U_DEFAULT_SHOW_DRAFT = 0
U_HIDE_DRAFT_API = 1
U_HIDE_DEPRECATED_API = 1
U_HIDE_OBSOLETE_API = 1
U_HIDE_INTERNAL_API = 1
U_NO_DEFAULT_INCLUDE_UTF_HEADERS = 1
U_DEBUG = 1
UCLN_NO_AUTO_CLEANUP = 1
U_OVERRIDE_CXX_ALLOCATION = 1
U_ENABLE_TRACING = 0
UCONFIG_ENABLE_PLUGINS = 0
U_ENABLE_DYLOAD = 1
U_CHECK_DYLOAD = 1
U_HAVE_LIB_SUFFIX = 1
U_LIB_SUFFIX_C_NAME_STRING = ''
UCONFIG_ONLY_COLLATION = 0
UCONFIG_NO_BREAK_ITERATION = 1
UCONFIG_NO_IDNA = 1
UCONFIG_NO_FORMATTING = 1
UCONFIG_NO_TRANSLITERATION = 1
UCONFIG_NO_REGULAR_EXPRESSIONS = 1
UCONFIG_NO_FILE_IO = 0
UCONFIG_NO_CONVERSION = 0
UCONFIG_NO_LEGACY_CONVERSION = 1
UCONFIG_ONLY_HTML_CONVERSION = 0
UCONFIG_NO_NORMALIZATION = 0
UCONFIG_NO_COLLATION = 1
UCONFIG_NO_SERVICE = 0
UCONFIG_HAVE_PARSEALLINPUT = 1
UCONFIG_NO_FILTERED_BREAK_ITERATION = 0
U_PF_UNKNOWN = 0
U_PF_WINDOWS = 1000
U_PF_MINGW = 1800
U_PF_CYGWIN = 1900
U_PF_HPUX = 2100
U_PF_SOLARIS = 2600
U_PF_BSD = 3000
U_PF_AIX = 3100
U_PF_IRIX = 3200
U_PF_DARWIN = 3500
U_PF_IPHONE = 3550
U_PF_QNX = 3700
U_PF_LINUX = 4000
U_PF_BROWSER_NATIVE_CLIENT = 4020
U_PF_ANDROID = 4050
U_PF_FUCHSIA = 4100
U_PF_EMSCRIPTEN = 5010
U_PF_OS390 = 9000
U_PF_OS400 = 9400
U_PLATFORM = 1800
U_PLATFORM_USES_ONLY_WIN32_API = 1
U_PLATFORM_HAS_WIN32_API = 1
U_PLATFORM_IMPLEMENTS_POSIX = 0
U_PLATFORM_IS_LINUX_BASED = 1
U_PLATFORM_IS_DARWIN_BASED = 1
U_HAVE_STDINT_H = 1
U_HAVE_INTTYPES_H = 1
U_GCC_MAJOR_MINOR = 0
U_IS_BIG_ENDIAN = 0
U_HAVE_PLACEMENT_NEW = 0
U_HAVE_DEBUG_LOCATION_NEW = 1
U_CPLUSPLUS_VERSION = 0
U_ASCII_FAMILY = 0
U_EBCDIC_FAMILY = 1
U_CHARSET_FAMILY = 1
U_CHARSET_IS_UTF8 = 1
U_HAVE_WCHAR_H = 0
U_SIZEOF_WCHAR_T = 1
U_HAVE_WCSCPY = 0
U_HAVE_CHAR16_T = 1
U_DEFINE_FALSE_AND_TRUE = 1
U_SIZEOF_UCHAR = 2
U_CHAR16_IS_TYPEDEF = 1
U_SENTINEL = -1
U8_LEAD3_T1_BITS = ' 000000000000\x1000'
U8_LEAD4_T1_BITS = '\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x0f\x0f\x0f\x00\x00\x00\x00'
U8_MAX_LENGTH = 4
U16_MAX_LENGTH = 2
U_HIDE_OBSOLETE_UTF_OLD_H = 0
UTF_SIZE = 16
UTF8_ERROR_VALUE_1 = 21
UTF8_ERROR_VALUE_2 = 159
UTF_ERROR_VALUE = 65535
UTF8_MAX_CHAR_LENGTH = 4
UTF16_MAX_CHAR_LENGTH = 2
UTF32_MAX_CHAR_LENGTH = 1
UTF_MAX_CHAR_LENGTH = 2
U_COPYRIGHT_STRING_LENGTH = 128
U_MAX_VERSION_LENGTH = 4
U_MAX_VERSION_STRING_LENGTH = 20
U_MILLIS_PER_SECOND = 1000
U_MILLIS_PER_MINUTE = 60000
U_MILLIS_PER_HOUR = 3600000
U_MILLIS_PER_DAY = 86400000
U_COMBINED_IMPLEMENTATION = 1
U_SHAPE_LENGTH_GROW_SHRINK = 0
U_SHAPE_LAMALEF_RESIZE = 0
U_SHAPE_LENGTH_FIXED_SPACES_NEAR = 1
U_SHAPE_LAMALEF_NEAR = 1
U_SHAPE_LENGTH_FIXED_SPACES_AT_END = 2
U_SHAPE_LAMALEF_END = 2
U_SHAPE_LENGTH_FIXED_SPACES_AT_BEGINNING = 3
U_SHAPE_LAMALEF_BEGIN = 3
U_SHAPE_LAMALEF_AUTO = 65536
U_SHAPE_LENGTH_MASK = 65539
U_SHAPE_LAMALEF_MASK = 65539
U_SHAPE_TEXT_DIRECTION_LOGICAL = 0
U_SHAPE_TEXT_DIRECTION_VISUAL_RTL = 0
U_SHAPE_TEXT_DIRECTION_VISUAL_LTR = 4
U_SHAPE_TEXT_DIRECTION_MASK = 4
U_SHAPE_LETTERS_NOOP = 0
U_SHAPE_LETTERS_SHAPE = 8
U_SHAPE_LETTERS_UNSHAPE = 16
U_SHAPE_LETTERS_SHAPE_TASHKEEL_ISOLATED = 24
U_SHAPE_LETTERS_MASK = 24
U_SHAPE_DIGITS_NOOP = 0
U_SHAPE_DIGITS_EN2AN = 32
U_SHAPE_DIGITS_AN2EN = 64
U_SHAPE_DIGITS_ALEN2AN_INIT_LR = 96
U_SHAPE_DIGITS_ALEN2AN_INIT_AL = 128
U_SHAPE_DIGITS_RESERVED = 160
U_SHAPE_DIGITS_MASK = 224
U_SHAPE_DIGIT_TYPE_AN = 0
U_SHAPE_DIGIT_TYPE_AN_EXTENDED = 256
U_SHAPE_DIGIT_TYPE_RESERVED = 512
U_SHAPE_DIGIT_TYPE_MASK = 768
U_SHAPE_AGGREGATE_TASHKEEL = 16384
U_SHAPE_AGGREGATE_TASHKEEL_NOOP = 0
U_SHAPE_AGGREGATE_TASHKEEL_MASK = 16384
U_SHAPE_PRESERVE_PRESENTATION = 32768
U_SHAPE_PRESERVE_PRESENTATION_NOOP = 0
U_SHAPE_PRESERVE_PRESENTATION_MASK = 32768
U_SHAPE_SEEN_TWOCELL_NEAR = 2097152
U_SHAPE_SEEN_MASK = 7340032
U_SHAPE_YEHHAMZA_TWOCELL_NEAR = 16777216
U_SHAPE_YEHHAMZA_MASK = 58720256
U_SHAPE_TASHKEEL_BEGIN = 262144
U_SHAPE_TASHKEEL_END = 393216
U_SHAPE_TASHKEEL_RESIZE = 524288
U_SHAPE_TASHKEEL_REPLACE_BY_TATWEEL = 786432
U_SHAPE_TASHKEEL_MASK = 917504
U_SHAPE_SPACES_RELATIVE_TO_TEXT_BEGIN_END = 67108864
U_SHAPE_SPACES_RELATIVE_TO_TEXT_MASK = 67108864
U_SHAPE_TAIL_NEW_UNICODE = 134217728
U_SHAPE_TAIL_TYPE_MASK = 134217728
ULOC_CHINESE = 'zh'
ULOC_ENGLISH = 'en'
ULOC_FRENCH = 'fr'
ULOC_GERMAN = 'de'
ULOC_ITALIAN = 'it'
ULOC_JAPANESE = 'ja'
ULOC_KOREAN = 'ko'
ULOC_SIMPLIFIED_CHINESE = 'zh_CN'
ULOC_TRADITIONAL_CHINESE = 'zh_TW'
ULOC_CANADA = 'en_CA'
ULOC_CANADA_FRENCH = 'fr_CA'
ULOC_CHINA = 'zh_CN'
ULOC_PRC = 'zh_CN'
ULOC_FRANCE = 'fr_FR'
ULOC_GERMANY = 'de_DE'
ULOC_ITALY = 'it_IT'
ULOC_JAPAN = 'ja_JP'
ULOC_KOREA = 'ko_KR'
ULOC_TAIWAN = 'zh_TW'
ULOC_UK = 'en_GB'
ULOC_US = 'en_US'
ULOC_LANG_CAPACITY = 12
ULOC_COUNTRY_CAPACITY = 4
ULOC_FULLNAME_CAPACITY = 157
ULOC_SCRIPT_CAPACITY = 6
ULOC_KEYWORDS_CAPACITY = 96
ULOC_KEYWORD_AND_VALUES_CAPACITY = 100
ULOC_KEYWORD_SEPARATOR_UNICODE = 64
ULOC_KEYWORD_ASSIGN_UNICODE = 61
ULOC_KEYWORD_ITEM_SEPARATOR_UNICODE = 59
UCNV_SUB_STOP_ON_ILLEGAL = 'i'
UCNV_SKIP_STOP_ON_ILLEGAL = 'i'
UCNV_ESCAPE_JAVA = 'J'
UCNV_ESCAPE_C = 'C'
UCNV_ESCAPE_XML_DEC = 'D'
UCNV_ESCAPE_XML_HEX = 'X'
UCNV_ESCAPE_UNICODE = 'U'
UCNV_ESCAPE_CSS2 = 'S'
UCNV_MAX_CONVERTER_NAME_LENGTH = 60
UCNV_SI = 15
UCNV_SO = 14
UCNV_OPTION_SEP_STRING = ','
UCNV_VALUE_SEP_STRING = '='
UCNV_LOCALE_OPTION_STRING = ',locale='
UCNV_VERSION_OPTION_STRING = ',version='
UCNV_SWAP_LFNL_OPTION_STRING = ',swaplfnl'
U_FOLD_CASE_DEFAULT = 0
U_FOLD_CASE_EXCLUDE_SPECIAL_I = 1
U_TITLECASE_WHOLE_STRING = 32
U_TITLECASE_SENTENCES = 64
U_TITLECASE_NO_LOWERCASE = 256
U_TITLECASE_NO_BREAK_ADJUSTMENT = 512
U_TITLECASE_ADJUST_TO_CASED = 1024
U_EDITS_NO_RESET = 8192
U_OMIT_UNCHANGED_TEXT = 16384
U_COMPARE_CODE_POINT_ORDER = 32768
U_COMPARE_IGNORE_CASE = 65536
UNORM_INPUT_IS_FCD = 131072
UCHAR_MIN_VALUE = 0
UCHAR_MAX_VALUE = 1114111
UBIDI_DEFAULT_LTR = 254
UBIDI_DEFAULT_RTL = 255
UBIDI_MAX_EXPLICIT_LEVEL = 125
UBIDI_LEVEL_OVERRIDE = 128
UBIDI_MAP_NOWHERE = -1
UBIDI_KEEP_BASE_COMBINING = 1
UBIDI_DO_MIRRORING = 2
UBIDI_INSERT_LRM_FOR_NUMERIC = 4
UBIDI_REMOVE_BIDI_CONTROLS = 8
UBIDI_OUTPUT_REVERSE = 16
USPREP_DEFAULT = 0
USPREP_ALLOW_UNASSIGNED = 1
U_ICU_VERSION_BUNDLE = 'icuver'
U_ICU_DATA_KEY = 'DataVersion'
UCAL_UNKNOWN_ZONE_ID = 'Etc/Unknown'
UDAT_YEAR = 'y'
UDAT_QUARTER = 'QQQQ'
UDAT_ABBR_QUARTER = 'QQQ'
UDAT_YEAR_QUARTER = 'yQQQQ'
UDAT_YEAR_ABBR_QUARTER = 'yQQQ'
UDAT_MONTH = 'MMMM'
UDAT_ABBR_MONTH = 'MMM'
UDAT_NUM_MONTH = 'M'
UDAT_YEAR_MONTH = 'yMMMM'
UDAT_YEAR_ABBR_MONTH = 'yMMM'
UDAT_YEAR_NUM_MONTH = 'yM'
UDAT_DAY = 'd'
UDAT_YEAR_MONTH_DAY = 'yMMMMd'
UDAT_YEAR_ABBR_MONTH_DAY = 'yMMMd'
UDAT_YEAR_NUM_MONTH_DAY = 'yMd'
UDAT_WEEKDAY = 'EEEE'
UDAT_ABBR_WEEKDAY = 'E'
UDAT_YEAR_MONTH_WEEKDAY_DAY = 'yMMMMEEEEd'
UDAT_YEAR_ABBR_MONTH_WEEKDAY_DAY = 'yMMMEd'
UDAT_YEAR_NUM_MONTH_WEEKDAY_DAY = 'yMEd'
UDAT_MONTH_DAY = 'MMMMd'
UDAT_ABBR_MONTH_DAY = 'MMMd'
UDAT_NUM_MONTH_DAY = 'Md'
UDAT_MONTH_WEEKDAY_DAY = 'MMMMEEEEd'
UDAT_ABBR_MONTH_WEEKDAY_DAY = 'MMMEd'
UDAT_NUM_MONTH_WEEKDAY_DAY = 'MEd'
UDAT_HOUR = 'j'
UDAT_HOUR24 = 'H'
UDAT_MINUTE = 'm'
UDAT_HOUR_MINUTE = 'jm'
UDAT_HOUR24_MINUTE = 'Hm'
UDAT_SECOND = 's'
UDAT_HOUR_MINUTE_SECOND = 'jms'
UDAT_HOUR24_MINUTE_SECOND = 'Hms'
UDAT_MINUTE_SECOND = 'ms'
UDAT_LOCATION_TZ = 'VVVV'
UDAT_GENERIC_TZ = 'vvvv'
UDAT_ABBR_GENERIC_TZ = 'v'
UDAT_SPECIFIC_TZ = 'zzzz'
UDAT_ABBR_SPECIFIC_TZ = 'z'
UDAT_ABBR_UTC_TZ = 'ZZZZ'
USEARCH_DONE = -1
U_HAVE_STD_STRING = 0
UCONFIG_FORMAT_FASTPATHS_49 = 1
U_PLATFORM_HAS_WINUWP_API = 0
U_IOSTREAM_SOURCE = 199711
U_HAVE_RVALUE_REFERENCES = 1
U_USING_ICU_NAMESPACE = 1
U_ICUDATA_TYPE_LETTER = 'e'
U_UNICODE_VERSION = '8.0'
CANITER_SKIP_ZEROES = 1
NUMSYS_NAME_CAPACITY = 8
U_HAVE_RBNF = 0
MAX_MIMECP_NAME = 64
MAX_MIMECSET_NAME = 50
MAX_MIMEFACE_NAME = 32
MAX_RFC1766_NAME = 6
MAX_LOCALE_NAME = 32
MAX_SCRIPT_NAME = 48
CPIOD_PEEK = 1073741824
CPIOD_FORCE_PROMPT = -2147483648
UITER_UNKNOWN_INDEX = -2
UCPTRIE_FAST_SHIFT = 6
UCPTRIE_FAST_DATA_BLOCK_LENGTH = 64
UCPTRIE_FAST_DATA_MASK = 63
UCPTRIE_SMALL_MAX = 4095
UCPTRIE_ERROR_VALUE_NEG_DATA_OFFSET = 1
UCPTRIE_HIGH_VALUE_NEG_DATA_OFFSET = 2
UTEXT_PROVIDER_LENGTH_IS_EXPENSIVE = 1
UTEXT_PROVIDER_STABLE_CHUNKS = 2
UTEXT_PROVIDER_WRITABLE = 3
UTEXT_PROVIDER_HAS_META_DATA = 4
UTEXT_PROVIDER_OWNS_TEXT = 5
UTEXT_MAGIC = 878368812
USET_IGNORE_SPACE = 1
USET_CASE_INSENSITIVE = 2
USET_ADD_CASE_MAPPINGS = 4
USET_SERIALIZED_STATIC_ARRAY_CAPACITY = 8
U_PARSE_CONTEXT_LEN = 16
UIDNA_DEFAULT = 0
UIDNA_USE_STD3_RULES = 2
UIDNA_CHECK_BIDI = 4
UIDNA_CHECK_CONTEXTJ = 8
UIDNA_NONTRANSITIONAL_TO_ASCII = 16
UIDNA_NONTRANSITIONAL_TO_UNICODE = 32
UIDNA_CHECK_CONTEXTO = 64
UIDNA_ERROR_EMPTY_LABEL = 1
UIDNA_ERROR_LABEL_TOO_LONG = 2
UIDNA_ERROR_DOMAIN_NAME_TOO_LONG = 4
UIDNA_ERROR_LEADING_HYPHEN = 8
UIDNA_ERROR_TRAILING_HYPHEN = 16
UIDNA_ERROR_HYPHEN_3_4 = 32
UIDNA_ERROR_LEADING_COMBINING_MARK = 64
UIDNA_ERROR_DISALLOWED = 128
UIDNA_ERROR_PUNYCODE = 256
UIDNA_ERROR_LABEL_HAS_DOT = 512
UIDNA_ERROR_INVALID_ACE_LABEL = 1024
UIDNA_ERROR_BIDI = 2048
UIDNA_ERROR_CONTEXTJ = 4096
UIDNA_ERROR_CONTEXTO_PUNCTUATION = 8192
UIDNA_ERROR_CONTEXTO_DIGITS = 16384
def _define_ELS_GUID_LANGUAGE_DETECTION():
    return Guid('cf7e00b1-909b-4d95-a8-f4-61-1f-7c-37-77-02')
def _define_ELS_GUID_SCRIPT_DETECTION():
    return Guid('2d64b439-6caf-4f6b-b6-88-e5-d0-f4-fa-a7-d7')
def _define_ELS_GUID_TRANSLITERATION_HANT_TO_HANS():
    return Guid('a3a8333b-f4fc-42f6-a0-c4-04-62-fe-73-17-cb')
def _define_ELS_GUID_TRANSLITERATION_HANS_TO_HANT():
    return Guid('3caccdc8-5590-42dc-9a-7b-b5-a6-b5-b3-b6-3b')
def _define_ELS_GUID_TRANSLITERATION_MALAYALAM_TO_LATIN():
    return Guid('d8b983b1-f8bf-4a2b-bc-d5-5b-5e-a2-06-13-e1')
def _define_ELS_GUID_TRANSLITERATION_DEVANAGARI_TO_LATIN():
    return Guid('c4a4dcfe-2661-4d02-98-35-f4-81-87-10-98-03')
def _define_ELS_GUID_TRANSLITERATION_CYRILLIC_TO_LATIN():
    return Guid('3dd12a98-5afd-4903-a1-3f-e1-7e-6c-0b-fe-01')
def _define_ELS_GUID_TRANSLITERATION_BENGALI_TO_LATIN():
    return Guid('f4dfd825-91a4-489f-85-5e-9a-d9-be-e5-57-27')
def _define_ELS_GUID_TRANSLITERATION_HANGUL_DECOMPOSITION():
    return Guid('4ba2a721-e43d-41b7-b3-30-53-6a-e1-e4-88-63')
UMSGPAT_ARG_NAME_NOT_NUMBER = -1
UMSGPAT_ARG_NAME_NOT_VALID = -2
def _define_GetTextCharset():
    try:
        return WINFUNCTYPE(Int32,win32more.Graphics.Gdi.HDC)(('GetTextCharset', windll['GDI32.dll']), ((1, 'hdc'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetTextCharsetInfo():
    try:
        return WINFUNCTYPE(Int32,win32more.Graphics.Gdi.HDC,POINTER(win32more.Globalization.FONTSIGNATURE_head),UInt32)(('GetTextCharsetInfo', windll['GDI32.dll']), ((1, 'hdc'),(1, 'lpSig'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_TranslateCharsetInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,POINTER(UInt32),POINTER(win32more.Globalization.CHARSETINFO_head),win32more.Globalization.TRANSLATE_CHARSET_INFO_FLAGS)(('TranslateCharsetInfo', windll['GDI32.dll']), ((1, 'lpSrc'),(1, 'lpCs'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetDateFormatA():
    try:
        return WINFUNCTYPE(Int32,UInt32,UInt32,POINTER(win32more.Foundation.SYSTEMTIME_head),win32more.Foundation.PSTR,win32more.Foundation.PSTR,Int32)(('GetDateFormatA', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'dwFlags'),(1, 'lpDate'),(1, 'lpFormat'),(1, 'lpDateStr'),(1, 'cchDate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetDateFormatW():
    try:
        return WINFUNCTYPE(Int32,UInt32,UInt32,POINTER(win32more.Foundation.SYSTEMTIME_head),win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,Int32)(('GetDateFormatW', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'dwFlags'),(1, 'lpDate'),(1, 'lpFormat'),(1, 'lpDateStr'),(1, 'cchDate'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetTimeFormatA():
    try:
        return WINFUNCTYPE(Int32,UInt32,UInt32,POINTER(win32more.Foundation.SYSTEMTIME_head),win32more.Foundation.PSTR,win32more.Foundation.PSTR,Int32)(('GetTimeFormatA', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'dwFlags'),(1, 'lpTime'),(1, 'lpFormat'),(1, 'lpTimeStr'),(1, 'cchTime'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetTimeFormatW():
    try:
        return WINFUNCTYPE(Int32,UInt32,UInt32,POINTER(win32more.Foundation.SYSTEMTIME_head),win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,Int32)(('GetTimeFormatW', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'dwFlags'),(1, 'lpTime'),(1, 'lpFormat'),(1, 'lpTimeStr'),(1, 'cchTime'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetTimeFormatEx():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PWSTR,win32more.Globalization.TIME_FORMAT_FLAGS,POINTER(win32more.Foundation.SYSTEMTIME_head),win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,Int32)(('GetTimeFormatEx', windll['KERNEL32.dll']), ((1, 'lpLocaleName'),(1, 'dwFlags'),(1, 'lpTime'),(1, 'lpFormat'),(1, 'lpTimeStr'),(1, 'cchTime'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetDateFormatEx():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PWSTR,win32more.Globalization.ENUM_DATE_FORMATS_FLAGS,POINTER(win32more.Foundation.SYSTEMTIME_head),win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,Int32,win32more.Foundation.PWSTR)(('GetDateFormatEx', windll['KERNEL32.dll']), ((1, 'lpLocaleName'),(1, 'dwFlags'),(1, 'lpDate'),(1, 'lpFormat'),(1, 'lpDateStr'),(1, 'cchDate'),(1, 'lpCalendar'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetDurationFormatEx():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PWSTR,UInt32,POINTER(win32more.Foundation.SYSTEMTIME_head),UInt64,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,Int32)(('GetDurationFormatEx', windll['KERNEL32.dll']), ((1, 'lpLocaleName'),(1, 'dwFlags'),(1, 'lpDuration'),(1, 'ullDuration'),(1, 'lpFormat'),(1, 'lpDurationStr'),(1, 'cchDuration'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CompareStringEx():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PWSTR,win32more.Globalization.COMPARE_STRING_FLAGS,win32more.Foundation.PWSTR,Int32,win32more.Foundation.PWSTR,Int32,POINTER(win32more.Globalization.NLSVERSIONINFO_head),c_void_p,win32more.Foundation.LPARAM)(('CompareStringEx', windll['KERNEL32.dll']), ((1, 'lpLocaleName'),(1, 'dwCmpFlags'),(1, 'lpString1'),(1, 'cchCount1'),(1, 'lpString2'),(1, 'cchCount2'),(1, 'lpVersionInformation'),(1, 'lpReserved'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CompareStringOrdinal():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PWSTR,Int32,win32more.Foundation.PWSTR,Int32,win32more.Foundation.BOOL)(('CompareStringOrdinal', windll['KERNEL32.dll']), ((1, 'lpString1'),(1, 'cchCount1'),(1, 'lpString2'),(1, 'cchCount2'),(1, 'bIgnoreCase'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CompareStringW():
    try:
        return WINFUNCTYPE(Int32,UInt32,UInt32,win32more.Foundation.PWSTR,Int32,win32more.Foundation.PWSTR,Int32)(('CompareStringW', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'dwCmpFlags'),(1, 'lpString1'),(1, 'cchCount1'),(1, 'lpString2'),(1, 'cchCount2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FoldStringW():
    try:
        return WINFUNCTYPE(Int32,win32more.Globalization.FOLD_STRING_MAP_FLAGS,win32more.Foundation.PWSTR,Int32,win32more.Foundation.PWSTR,Int32)(('FoldStringW', windll['KERNEL32.dll']), ((1, 'dwMapFlags'),(1, 'lpSrcStr'),(1, 'cchSrc'),(1, 'lpDestStr'),(1, 'cchDest'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetStringTypeExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,UInt32,win32more.Foundation.PWSTR,Int32,POINTER(UInt16))(('GetStringTypeExW', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'dwInfoType'),(1, 'lpSrcStr'),(1, 'cchSrc'),(1, 'lpCharType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetStringTypeW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PWSTR,Int32,POINTER(UInt16))(('GetStringTypeW', windll['KERNEL32.dll']), ((1, 'dwInfoType'),(1, 'lpSrcStr'),(1, 'cchSrc'),(1, 'lpCharType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MultiByteToWideChar():
    try:
        return WINFUNCTYPE(Int32,UInt32,win32more.Globalization.MULTI_BYTE_TO_WIDE_CHAR_FLAGS,win32more.Foundation.PSTR,Int32,win32more.Foundation.PWSTR,Int32)(('MultiByteToWideChar', windll['KERNEL32.dll']), ((1, 'CodePage'),(1, 'dwFlags'),(1, 'lpMultiByteStr'),(1, 'cbMultiByte'),(1, 'lpWideCharStr'),(1, 'cchWideChar'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_WideCharToMultiByte():
    try:
        return WINFUNCTYPE(Int32,UInt32,UInt32,win32more.Foundation.PWSTR,Int32,win32more.Foundation.PSTR,Int32,win32more.Foundation.PSTR,POINTER(Int32))(('WideCharToMultiByte', windll['KERNEL32.dll']), ((1, 'CodePage'),(1, 'dwFlags'),(1, 'lpWideCharStr'),(1, 'cchWideChar'),(1, 'lpMultiByteStr'),(1, 'cbMultiByte'),(1, 'lpDefaultChar'),(1, 'lpUsedDefaultChar'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsValidCodePage():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32)(('IsValidCodePage', windll['KERNEL32.dll']), ((1, 'CodePage'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetACP():
    try:
        return WINFUNCTYPE(UInt32,)(('GetACP', windll['KERNEL32.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetOEMCP():
    try:
        return WINFUNCTYPE(UInt32,)(('GetOEMCP', windll['KERNEL32.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetCPInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(win32more.Globalization.CPINFO_head))(('GetCPInfo', windll['KERNEL32.dll']), ((1, 'CodePage'),(1, 'lpCPInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetCPInfoExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,UInt32,POINTER(win32more.Globalization.CPINFOEXA_head))(('GetCPInfoExA', windll['KERNEL32.dll']), ((1, 'CodePage'),(1, 'dwFlags'),(1, 'lpCPInfoEx'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetCPInfoExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,UInt32,POINTER(win32more.Globalization.CPINFOEXW_head))(('GetCPInfoExW', windll['KERNEL32.dll']), ((1, 'CodePage'),(1, 'dwFlags'),(1, 'lpCPInfoEx'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CompareStringA():
    try:
        return WINFUNCTYPE(Int32,UInt32,UInt32,POINTER(SByte),Int32,POINTER(SByte),Int32)(('CompareStringA', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'dwCmpFlags'),(1, 'lpString1'),(1, 'cchCount1'),(1, 'lpString2'),(1, 'cchCount2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FindNLSString():
    try:
        return WINFUNCTYPE(Int32,UInt32,UInt32,win32more.Foundation.PWSTR,Int32,win32more.Foundation.PWSTR,Int32,POINTER(Int32))(('FindNLSString', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'dwFindNLSStringFlags'),(1, 'lpStringSource'),(1, 'cchSource'),(1, 'lpStringValue'),(1, 'cchValue'),(1, 'pcchFound'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LCMapStringW():
    try:
        return WINFUNCTYPE(Int32,UInt32,UInt32,win32more.Foundation.PWSTR,Int32,win32more.Foundation.PWSTR,Int32)(('LCMapStringW', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'dwMapFlags'),(1, 'lpSrcStr'),(1, 'cchSrc'),(1, 'lpDestStr'),(1, 'cchDest'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LCMapStringA():
    try:
        return WINFUNCTYPE(Int32,UInt32,UInt32,win32more.Foundation.PSTR,Int32,win32more.Foundation.PSTR,Int32)(('LCMapStringA', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'dwMapFlags'),(1, 'lpSrcStr'),(1, 'cchSrc'),(1, 'lpDestStr'),(1, 'cchDest'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetLocaleInfoW():
    try:
        return WINFUNCTYPE(Int32,UInt32,UInt32,win32more.Foundation.PWSTR,Int32)(('GetLocaleInfoW', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'LCType'),(1, 'lpLCData'),(1, 'cchData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetLocaleInfoA():
    try:
        return WINFUNCTYPE(Int32,UInt32,UInt32,win32more.Foundation.PSTR,Int32)(('GetLocaleInfoA', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'LCType'),(1, 'lpLCData'),(1, 'cchData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetLocaleInfoA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,UInt32,win32more.Foundation.PSTR)(('SetLocaleInfoA', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'LCType'),(1, 'lpLCData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetLocaleInfoW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,UInt32,win32more.Foundation.PWSTR)(('SetLocaleInfoW', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'LCType'),(1, 'lpLCData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetCalendarInfoA():
    try:
        return WINFUNCTYPE(Int32,UInt32,UInt32,UInt32,win32more.Foundation.PSTR,Int32,POINTER(UInt32))(('GetCalendarInfoA', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'Calendar'),(1, 'CalType'),(1, 'lpCalData'),(1, 'cchData'),(1, 'lpValue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetCalendarInfoW():
    try:
        return WINFUNCTYPE(Int32,UInt32,UInt32,UInt32,win32more.Foundation.PWSTR,Int32,POINTER(UInt32))(('GetCalendarInfoW', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'Calendar'),(1, 'CalType'),(1, 'lpCalData'),(1, 'cchData'),(1, 'lpValue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetCalendarInfoA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,UInt32,UInt32,win32more.Foundation.PSTR)(('SetCalendarInfoA', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'Calendar'),(1, 'CalType'),(1, 'lpCalData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetCalendarInfoW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,UInt32,UInt32,win32more.Foundation.PWSTR)(('SetCalendarInfoW', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'Calendar'),(1, 'CalType'),(1, 'lpCalData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsDBCSLeadByte():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,Byte)(('IsDBCSLeadByte', windll['KERNEL32.dll']), ((1, 'TestChar'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsDBCSLeadByteEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,Byte)(('IsDBCSLeadByteEx', windll['KERNEL32.dll']), ((1, 'CodePage'),(1, 'TestChar'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LocaleNameToLCID():
    try:
        return WINFUNCTYPE(UInt32,win32more.Foundation.PWSTR,UInt32)(('LocaleNameToLCID', windll['KERNEL32.dll']), ((1, 'lpName'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LCIDToLocaleName():
    try:
        return WINFUNCTYPE(Int32,UInt32,win32more.Foundation.PWSTR,Int32,UInt32)(('LCIDToLocaleName', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'lpName'),(1, 'cchName'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetDurationFormat():
    try:
        return WINFUNCTYPE(Int32,UInt32,UInt32,POINTER(win32more.Foundation.SYSTEMTIME_head),UInt64,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,Int32)(('GetDurationFormat', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'dwFlags'),(1, 'lpDuration'),(1, 'ullDuration'),(1, 'lpFormat'),(1, 'lpDurationStr'),(1, 'cchDuration'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetNumberFormatA():
    try:
        return WINFUNCTYPE(Int32,UInt32,UInt32,win32more.Foundation.PSTR,POINTER(win32more.Globalization.NUMBERFMTA_head),win32more.Foundation.PSTR,Int32)(('GetNumberFormatA', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'dwFlags'),(1, 'lpValue'),(1, 'lpFormat'),(1, 'lpNumberStr'),(1, 'cchNumber'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetNumberFormatW():
    try:
        return WINFUNCTYPE(Int32,UInt32,UInt32,win32more.Foundation.PWSTR,POINTER(win32more.Globalization.NUMBERFMTW_head),win32more.Foundation.PWSTR,Int32)(('GetNumberFormatW', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'dwFlags'),(1, 'lpValue'),(1, 'lpFormat'),(1, 'lpNumberStr'),(1, 'cchNumber'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetCurrencyFormatA():
    try:
        return WINFUNCTYPE(Int32,UInt32,UInt32,win32more.Foundation.PSTR,POINTER(win32more.Globalization.CURRENCYFMTA_head),win32more.Foundation.PSTR,Int32)(('GetCurrencyFormatA', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'dwFlags'),(1, 'lpValue'),(1, 'lpFormat'),(1, 'lpCurrencyStr'),(1, 'cchCurrency'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetCurrencyFormatW():
    try:
        return WINFUNCTYPE(Int32,UInt32,UInt32,win32more.Foundation.PWSTR,POINTER(win32more.Globalization.CURRENCYFMTW_head),win32more.Foundation.PWSTR,Int32)(('GetCurrencyFormatW', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'dwFlags'),(1, 'lpValue'),(1, 'lpFormat'),(1, 'lpCurrencyStr'),(1, 'cchCurrency'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumCalendarInfoA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Globalization.CALINFO_ENUMPROCA,UInt32,UInt32,UInt32)(('EnumCalendarInfoA', windll['KERNEL32.dll']), ((1, 'lpCalInfoEnumProc'),(1, 'Locale'),(1, 'Calendar'),(1, 'CalType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumCalendarInfoW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Globalization.CALINFO_ENUMPROCW,UInt32,UInt32,UInt32)(('EnumCalendarInfoW', windll['KERNEL32.dll']), ((1, 'lpCalInfoEnumProc'),(1, 'Locale'),(1, 'Calendar'),(1, 'CalType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumCalendarInfoExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Globalization.CALINFO_ENUMPROCEXA,UInt32,UInt32,UInt32)(('EnumCalendarInfoExA', windll['KERNEL32.dll']), ((1, 'lpCalInfoEnumProcEx'),(1, 'Locale'),(1, 'Calendar'),(1, 'CalType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumCalendarInfoExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Globalization.CALINFO_ENUMPROCEXW,UInt32,UInt32,UInt32)(('EnumCalendarInfoExW', windll['KERNEL32.dll']), ((1, 'lpCalInfoEnumProcEx'),(1, 'Locale'),(1, 'Calendar'),(1, 'CalType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumTimeFormatsA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Globalization.TIMEFMT_ENUMPROCA,UInt32,win32more.Globalization.TIME_FORMAT_FLAGS)(('EnumTimeFormatsA', windll['KERNEL32.dll']), ((1, 'lpTimeFmtEnumProc'),(1, 'Locale'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumTimeFormatsW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Globalization.TIMEFMT_ENUMPROCW,UInt32,win32more.Globalization.TIME_FORMAT_FLAGS)(('EnumTimeFormatsW', windll['KERNEL32.dll']), ((1, 'lpTimeFmtEnumProc'),(1, 'Locale'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumDateFormatsA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Globalization.DATEFMT_ENUMPROCA,UInt32,UInt32)(('EnumDateFormatsA', windll['KERNEL32.dll']), ((1, 'lpDateFmtEnumProc'),(1, 'Locale'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumDateFormatsW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Globalization.DATEFMT_ENUMPROCW,UInt32,UInt32)(('EnumDateFormatsW', windll['KERNEL32.dll']), ((1, 'lpDateFmtEnumProc'),(1, 'Locale'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumDateFormatsExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Globalization.DATEFMT_ENUMPROCEXA,UInt32,UInt32)(('EnumDateFormatsExA', windll['KERNEL32.dll']), ((1, 'lpDateFmtEnumProcEx'),(1, 'Locale'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumDateFormatsExW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Globalization.DATEFMT_ENUMPROCEXW,UInt32,UInt32)(('EnumDateFormatsExW', windll['KERNEL32.dll']), ((1, 'lpDateFmtEnumProcEx'),(1, 'Locale'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsValidLanguageGroup():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Globalization.ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS)(('IsValidLanguageGroup', windll['KERNEL32.dll']), ((1, 'LanguageGroup'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetNLSVersion():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,UInt32,POINTER(win32more.Globalization.NLSVERSIONINFO_head))(('GetNLSVersion', windll['KERNEL32.dll']), ((1, 'Function'),(1, 'Locale'),(1, 'lpVersionInformation'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsValidLocale():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Globalization.IS_VALID_LOCALE_FLAGS)(('IsValidLocale', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetGeoInfoA():
    try:
        return WINFUNCTYPE(Int32,Int32,UInt32,win32more.Foundation.PSTR,Int32,UInt16)(('GetGeoInfoA', windll['KERNEL32.dll']), ((1, 'Location'),(1, 'GeoType'),(1, 'lpGeoData'),(1, 'cchData'),(1, 'LangId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetGeoInfoW():
    try:
        return WINFUNCTYPE(Int32,Int32,UInt32,win32more.Foundation.PWSTR,Int32,UInt16)(('GetGeoInfoW', windll['KERNEL32.dll']), ((1, 'Location'),(1, 'GeoType'),(1, 'lpGeoData'),(1, 'cchData'),(1, 'LangId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetGeoInfoEx():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PWSTR,UInt32,win32more.Foundation.PWSTR,Int32)(('GetGeoInfoEx', windll['KERNEL32.dll']), ((1, 'location'),(1, 'geoType'),(1, 'geoData'),(1, 'geoDataCount'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumSystemGeoID():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,Int32,win32more.Globalization.GEO_ENUMPROC)(('EnumSystemGeoID', windll['KERNEL32.dll']), ((1, 'GeoClass'),(1, 'ParentGeoId'),(1, 'lpGeoEnumProc'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumSystemGeoNames():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Globalization.GEO_ENUMNAMEPROC,win32more.Foundation.LPARAM)(('EnumSystemGeoNames', windll['KERNEL32.dll']), ((1, 'geoClass'),(1, 'geoEnumProc'),(1, 'data'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetUserGeoID():
    try:
        return WINFUNCTYPE(Int32,UInt32)(('GetUserGeoID', windll['KERNEL32.dll']), ((1, 'GeoClass'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetUserDefaultGeoName():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PWSTR,Int32)(('GetUserDefaultGeoName', windll['KERNEL32.dll']), ((1, 'geoName'),(1, 'geoNameCount'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetUserGeoID():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,Int32)(('SetUserGeoID', windll['KERNEL32.dll']), ((1, 'GeoId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetUserGeoName():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR)(('SetUserGeoName', windll['KERNEL32.dll']), ((1, 'geoName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ConvertDefaultLocale():
    try:
        return WINFUNCTYPE(UInt32,UInt32)(('ConvertDefaultLocale', windll['KERNEL32.dll']), ((1, 'Locale'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetSystemDefaultUILanguage():
    try:
        return WINFUNCTYPE(UInt16,)(('GetSystemDefaultUILanguage', windll['KERNEL32.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetThreadLocale():
    try:
        return WINFUNCTYPE(UInt32,)(('GetThreadLocale', windll['KERNEL32.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetThreadLocale():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32)(('SetThreadLocale', windll['KERNEL32.dll']), ((1, 'Locale'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetUserDefaultUILanguage():
    try:
        return WINFUNCTYPE(UInt16,)(('GetUserDefaultUILanguage', windll['KERNEL32.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetUserDefaultLangID():
    try:
        return WINFUNCTYPE(UInt16,)(('GetUserDefaultLangID', windll['KERNEL32.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetSystemDefaultLangID():
    try:
        return WINFUNCTYPE(UInt16,)(('GetSystemDefaultLangID', windll['KERNEL32.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetSystemDefaultLCID():
    try:
        return WINFUNCTYPE(UInt32,)(('GetSystemDefaultLCID', windll['KERNEL32.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetUserDefaultLCID():
    try:
        return WINFUNCTYPE(UInt32,)(('GetUserDefaultLCID', windll['KERNEL32.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetThreadUILanguage():
    try:
        return WINFUNCTYPE(UInt16,UInt16)(('SetThreadUILanguage', windll['KERNEL32.dll']), ((1, 'LangId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetThreadUILanguage():
    try:
        return WINFUNCTYPE(UInt16,)(('GetThreadUILanguage', windll['KERNEL32.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetProcessPreferredUILanguages():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(UInt32),win32more.Foundation.PWSTR,POINTER(UInt32))(('GetProcessPreferredUILanguages', windll['KERNEL32.dll']), ((1, 'dwFlags'),(1, 'pulNumLanguages'),(1, 'pwszLanguagesBuffer'),(1, 'pcchLanguagesBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetProcessPreferredUILanguages():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PWSTR,POINTER(UInt32))(('SetProcessPreferredUILanguages', windll['KERNEL32.dll']), ((1, 'dwFlags'),(1, 'pwszLanguagesBuffer'),(1, 'pulNumLanguages'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetUserPreferredUILanguages():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(UInt32),win32more.Foundation.PWSTR,POINTER(UInt32))(('GetUserPreferredUILanguages', windll['KERNEL32.dll']), ((1, 'dwFlags'),(1, 'pulNumLanguages'),(1, 'pwszLanguagesBuffer'),(1, 'pcchLanguagesBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetSystemPreferredUILanguages():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(UInt32),win32more.Foundation.PWSTR,POINTER(UInt32))(('GetSystemPreferredUILanguages', windll['KERNEL32.dll']), ((1, 'dwFlags'),(1, 'pulNumLanguages'),(1, 'pwszLanguagesBuffer'),(1, 'pcchLanguagesBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetThreadPreferredUILanguages():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,POINTER(UInt32),win32more.Foundation.PWSTR,POINTER(UInt32))(('GetThreadPreferredUILanguages', windll['KERNEL32.dll']), ((1, 'dwFlags'),(1, 'pulNumLanguages'),(1, 'pwszLanguagesBuffer'),(1, 'pcchLanguagesBuffer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetThreadPreferredUILanguages():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PWSTR,POINTER(UInt32))(('SetThreadPreferredUILanguages', windll['KERNEL32.dll']), ((1, 'dwFlags'),(1, 'pwszLanguagesBuffer'),(1, 'pulNumLanguages'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetFileMUIInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PWSTR,POINTER(win32more.Globalization.FILEMUIINFO_head),POINTER(UInt32))(('GetFileMUIInfo', windll['KERNEL32.dll']), ((1, 'dwFlags'),(1, 'pcwszFilePath'),(1, 'pFileMUIInfo'),(1, 'pcbFileMUIInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetFileMUIPath():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,POINTER(UInt32),win32more.Foundation.PWSTR,POINTER(UInt32),POINTER(UInt64))(('GetFileMUIPath', windll['KERNEL32.dll']), ((1, 'dwFlags'),(1, 'pcwszFilePath'),(1, 'pwszLanguage'),(1, 'pcchLanguage'),(1, 'pwszFileMUIPath'),(1, 'pcchFileMUIPath'),(1, 'pululEnumerator'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetUILanguageInfo():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,POINTER(UInt32),POINTER(UInt32))(('GetUILanguageInfo', windll['KERNEL32.dll']), ((1, 'dwFlags'),(1, 'pwmszLanguage'),(1, 'pwszFallbackLanguages'),(1, 'pcchFallbackLanguages'),(1, 'pAttributes'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_SetThreadPreferredUILanguages2():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PWSTR,POINTER(UInt32),POINTER(win32more.Globalization.HSAVEDUILANGUAGES))(('SetThreadPreferredUILanguages2', windll['KERNEL32.dll']), ((1, 'flags'),(1, 'languages'),(1, 'numLanguagesSet'),(1, 'snapshot'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_RestoreThreadPreferredUILanguages():
    try:
        return WINFUNCTYPE(Void,win32more.Globalization.HSAVEDUILANGUAGES)(('RestoreThreadPreferredUILanguages', windll['KERNEL32.dll']), ((1, 'snapshot'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NotifyUILanguageChange():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32))(('NotifyUILanguageChange', windll['KERNEL32.dll']), ((1, 'dwFlags'),(1, 'pcwstrNewLanguage'),(1, 'pcwstrPreviousLanguage'),(1, 'dwReserved'),(1, 'pdwStatusRtrn'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetStringTypeExA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,UInt32,win32more.Foundation.PSTR,Int32,POINTER(UInt16))(('GetStringTypeExA', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'dwInfoType'),(1, 'lpSrcStr'),(1, 'cchSrc'),(1, 'lpCharType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetStringTypeA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,UInt32,win32more.Foundation.PSTR,Int32,POINTER(UInt16))(('GetStringTypeA', windll['KERNEL32.dll']), ((1, 'Locale'),(1, 'dwInfoType'),(1, 'lpSrcStr'),(1, 'cchSrc'),(1, 'lpCharType'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FoldStringA():
    try:
        return WINFUNCTYPE(Int32,win32more.Globalization.FOLD_STRING_MAP_FLAGS,win32more.Foundation.PSTR,Int32,win32more.Foundation.PSTR,Int32)(('FoldStringA', windll['KERNEL32.dll']), ((1, 'dwMapFlags'),(1, 'lpSrcStr'),(1, 'cchSrc'),(1, 'lpDestStr'),(1, 'cchDest'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumSystemLocalesA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Globalization.LOCALE_ENUMPROCA,UInt32)(('EnumSystemLocalesA', windll['KERNEL32.dll']), ((1, 'lpLocaleEnumProc'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumSystemLocalesW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Globalization.LOCALE_ENUMPROCW,UInt32)(('EnumSystemLocalesW', windll['KERNEL32.dll']), ((1, 'lpLocaleEnumProc'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumSystemLanguageGroupsA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Globalization.LANGUAGEGROUP_ENUMPROCA,win32more.Globalization.ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS,IntPtr)(('EnumSystemLanguageGroupsA', windll['KERNEL32.dll']), ((1, 'lpLanguageGroupEnumProc'),(1, 'dwFlags'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumSystemLanguageGroupsW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Globalization.LANGUAGEGROUP_ENUMPROCW,win32more.Globalization.ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS,IntPtr)(('EnumSystemLanguageGroupsW', windll['KERNEL32.dll']), ((1, 'lpLanguageGroupEnumProc'),(1, 'dwFlags'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumLanguageGroupLocalesA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Globalization.LANGGROUPLOCALE_ENUMPROCA,UInt32,UInt32,IntPtr)(('EnumLanguageGroupLocalesA', windll['KERNEL32.dll']), ((1, 'lpLangGroupLocaleEnumProc'),(1, 'LanguageGroup'),(1, 'dwFlags'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumLanguageGroupLocalesW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Globalization.LANGGROUPLOCALE_ENUMPROCW,UInt32,UInt32,IntPtr)(('EnumLanguageGroupLocalesW', windll['KERNEL32.dll']), ((1, 'lpLangGroupLocaleEnumProc'),(1, 'LanguageGroup'),(1, 'dwFlags'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumUILanguagesA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Globalization.UILANGUAGE_ENUMPROCA,UInt32,IntPtr)(('EnumUILanguagesA', windll['KERNEL32.dll']), ((1, 'lpUILanguageEnumProc'),(1, 'dwFlags'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumUILanguagesW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Globalization.UILANGUAGE_ENUMPROCW,UInt32,IntPtr)(('EnumUILanguagesW', windll['KERNEL32.dll']), ((1, 'lpUILanguageEnumProc'),(1, 'dwFlags'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumSystemCodePagesA():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Globalization.CODEPAGE_ENUMPROCA,win32more.Globalization.ENUM_SYSTEM_CODE_PAGES_FLAGS)(('EnumSystemCodePagesA', windll['KERNEL32.dll']), ((1, 'lpCodePageEnumProc'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumSystemCodePagesW():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Globalization.CODEPAGE_ENUMPROCW,win32more.Globalization.ENUM_SYSTEM_CODE_PAGES_FLAGS)(('EnumSystemCodePagesW', windll['KERNEL32.dll']), ((1, 'lpCodePageEnumProc'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IdnToAscii():
    try:
        return WINFUNCTYPE(Int32,UInt32,win32more.Foundation.PWSTR,Int32,win32more.Foundation.PWSTR,Int32)(('IdnToAscii', windll['NORMALIZ.dll']), ((1, 'dwFlags'),(1, 'lpUnicodeCharStr'),(1, 'cchUnicodeChar'),(1, 'lpASCIICharStr'),(1, 'cchASCIIChar'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IdnToUnicode():
    try:
        return WINFUNCTYPE(Int32,UInt32,win32more.Foundation.PWSTR,Int32,win32more.Foundation.PWSTR,Int32)(('IdnToUnicode', windll['NORMALIZ.dll']), ((1, 'dwFlags'),(1, 'lpASCIICharStr'),(1, 'cchASCIIChar'),(1, 'lpUnicodeCharStr'),(1, 'cchUnicodeChar'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IdnToNameprepUnicode():
    try:
        return WINFUNCTYPE(Int32,UInt32,win32more.Foundation.PWSTR,Int32,win32more.Foundation.PWSTR,Int32)(('IdnToNameprepUnicode', windll['KERNEL32.dll']), ((1, 'dwFlags'),(1, 'lpUnicodeCharStr'),(1, 'cchUnicodeChar'),(1, 'lpNameprepCharStr'),(1, 'cchNameprepChar'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_NormalizeString():
    try:
        return WINFUNCTYPE(Int32,win32more.Globalization.NORM_FORM,win32more.Foundation.PWSTR,Int32,win32more.Foundation.PWSTR,Int32)(('NormalizeString', windll['KERNEL32.dll']), ((1, 'NormForm'),(1, 'lpSrcString'),(1, 'cwSrcLength'),(1, 'lpDstString'),(1, 'cwDstLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsNormalizedString():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Globalization.NORM_FORM,win32more.Foundation.PWSTR,Int32)(('IsNormalizedString', windll['KERNEL32.dll']), ((1, 'NormForm'),(1, 'lpString'),(1, 'cwLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_VerifyScripts():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PWSTR,Int32,win32more.Foundation.PWSTR,Int32)(('VerifyScripts', windll['KERNEL32.dll']), ((1, 'dwFlags'),(1, 'lpLocaleScripts'),(1, 'cchLocaleScripts'),(1, 'lpTestScripts'),(1, 'cchTestScripts'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetStringScripts():
    try:
        return WINFUNCTYPE(Int32,UInt32,win32more.Foundation.PWSTR,Int32,win32more.Foundation.PWSTR,Int32)(('GetStringScripts', windll['KERNEL32.dll']), ((1, 'dwFlags'),(1, 'lpString'),(1, 'cchString'),(1, 'lpScripts'),(1, 'cchScripts'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetLocaleInfoEx():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PWSTR,UInt32,win32more.Foundation.PWSTR,Int32)(('GetLocaleInfoEx', windll['KERNEL32.dll']), ((1, 'lpLocaleName'),(1, 'LCType'),(1, 'lpLCData'),(1, 'cchData'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetCalendarInfoEx():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PWSTR,UInt32,win32more.Foundation.PWSTR,UInt32,win32more.Foundation.PWSTR,Int32,POINTER(UInt32))(('GetCalendarInfoEx', windll['KERNEL32.dll']), ((1, 'lpLocaleName'),(1, 'Calendar'),(1, 'lpReserved'),(1, 'CalType'),(1, 'lpCalData'),(1, 'cchData'),(1, 'lpValue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetNumberFormatEx():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PWSTR,UInt32,win32more.Foundation.PWSTR,POINTER(win32more.Globalization.NUMBERFMTW_head),win32more.Foundation.PWSTR,Int32)(('GetNumberFormatEx', windll['KERNEL32.dll']), ((1, 'lpLocaleName'),(1, 'dwFlags'),(1, 'lpValue'),(1, 'lpFormat'),(1, 'lpNumberStr'),(1, 'cchNumber'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetCurrencyFormatEx():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PWSTR,UInt32,win32more.Foundation.PWSTR,POINTER(win32more.Globalization.CURRENCYFMTW_head),win32more.Foundation.PWSTR,Int32)(('GetCurrencyFormatEx', windll['KERNEL32.dll']), ((1, 'lpLocaleName'),(1, 'dwFlags'),(1, 'lpValue'),(1, 'lpFormat'),(1, 'lpCurrencyStr'),(1, 'cchCurrency'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetUserDefaultLocaleName():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PWSTR,Int32)(('GetUserDefaultLocaleName', windll['KERNEL32.dll']), ((1, 'lpLocaleName'),(1, 'cchLocaleName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetSystemDefaultLocaleName():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PWSTR,Int32)(('GetSystemDefaultLocaleName', windll['KERNEL32.dll']), ((1, 'lpLocaleName'),(1, 'cchLocaleName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsNLSDefinedString():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,UInt32,POINTER(win32more.Globalization.NLSVERSIONINFO_head),win32more.Foundation.PWSTR,Int32)(('IsNLSDefinedString', windll['KERNEL32.dll']), ((1, 'Function'),(1, 'dwFlags'),(1, 'lpVersionInformation'),(1, 'lpString'),(1, 'cchStr'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetNLSVersionEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PWSTR,POINTER(win32more.Globalization.NLSVERSIONINFOEX_head))(('GetNLSVersionEx', windll['KERNEL32.dll']), ((1, 'function'),(1, 'lpLocaleName'),(1, 'lpVersionInformation'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsValidNLSVersion():
    try:
        return WINFUNCTYPE(UInt32,UInt32,win32more.Foundation.PWSTR,POINTER(win32more.Globalization.NLSVERSIONINFOEX_head))(('IsValidNLSVersion', windll['KERNEL32.dll']), ((1, 'function'),(1, 'lpLocaleName'),(1, 'lpVersionInformation'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FindNLSStringEx():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PWSTR,UInt32,win32more.Foundation.PWSTR,Int32,win32more.Foundation.PWSTR,Int32,POINTER(Int32),POINTER(win32more.Globalization.NLSVERSIONINFO_head),c_void_p,win32more.Foundation.LPARAM)(('FindNLSStringEx', windll['KERNEL32.dll']), ((1, 'lpLocaleName'),(1, 'dwFindNLSStringFlags'),(1, 'lpStringSource'),(1, 'cchSource'),(1, 'lpStringValue'),(1, 'cchValue'),(1, 'pcchFound'),(1, 'lpVersionInformation'),(1, 'lpReserved'),(1, 'sortHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_LCMapStringEx():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PWSTR,UInt32,win32more.Foundation.PWSTR,Int32,win32more.Foundation.PWSTR,Int32,POINTER(win32more.Globalization.NLSVERSIONINFO_head),c_void_p,win32more.Foundation.LPARAM)(('LCMapStringEx', windll['KERNEL32.dll']), ((1, 'lpLocaleName'),(1, 'dwMapFlags'),(1, 'lpSrcStr'),(1, 'cchSrc'),(1, 'lpDestStr'),(1, 'cchDest'),(1, 'lpVersionInformation'),(1, 'lpReserved'),(1, 'sortHandle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsValidLocaleName():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR)(('IsValidLocaleName', windll['KERNEL32.dll']), ((1, 'lpLocaleName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumCalendarInfoExEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Globalization.CALINFO_ENUMPROCEXEX,win32more.Foundation.PWSTR,UInt32,win32more.Foundation.PWSTR,UInt32,win32more.Foundation.LPARAM)(('EnumCalendarInfoExEx', windll['KERNEL32.dll']), ((1, 'pCalInfoEnumProcExEx'),(1, 'lpLocaleName'),(1, 'Calendar'),(1, 'lpReserved'),(1, 'CalType'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumDateFormatsExEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Globalization.DATEFMT_ENUMPROCEXEX,win32more.Foundation.PWSTR,win32more.Globalization.ENUM_DATE_FORMATS_FLAGS,win32more.Foundation.LPARAM)(('EnumDateFormatsExEx', windll['KERNEL32.dll']), ((1, 'lpDateFmtEnumProcExEx'),(1, 'lpLocaleName'),(1, 'dwFlags'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumTimeFormatsEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Globalization.TIMEFMT_ENUMPROCEX,win32more.Foundation.PWSTR,UInt32,win32more.Foundation.LPARAM)(('EnumTimeFormatsEx', windll['KERNEL32.dll']), ((1, 'lpTimeFmtEnumProcEx'),(1, 'lpLocaleName'),(1, 'dwFlags'),(1, 'lParam'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_EnumSystemLocalesEx():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Globalization.LOCALE_ENUMPROCEX,UInt32,win32more.Foundation.LPARAM,c_void_p)(('EnumSystemLocalesEx', windll['KERNEL32.dll']), ((1, 'lpLocaleEnumProcEx'),(1, 'dwFlags'),(1, 'lParam'),(1, 'lpReserved'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ResolveLocaleName():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,Int32)(('ResolveLocaleName', windll['KERNEL32.dll']), ((1, 'lpNameToResolve'),(1, 'lpLocaleName'),(1, 'cchLocaleName'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MappingGetServices():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Globalization.MAPPING_ENUM_OPTIONS_head),POINTER(POINTER(win32more.Globalization.MAPPING_SERVICE_INFO_head)),POINTER(UInt32))(('MappingGetServices', windll['elscore.dll']), ((1, 'pOptions'),(1, 'prgServices'),(1, 'pdwServicesCount'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MappingFreeServices():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Globalization.MAPPING_SERVICE_INFO_head))(('MappingFreeServices', windll['elscore.dll']), ((1, 'pServiceInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MappingRecognizeText():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Globalization.MAPPING_SERVICE_INFO_head),win32more.Foundation.PWSTR,UInt32,UInt32,POINTER(win32more.Globalization.MAPPING_OPTIONS_head),POINTER(win32more.Globalization.MAPPING_PROPERTY_BAG_head))(('MappingRecognizeText', windll['elscore.dll']), ((1, 'pServiceInfo'),(1, 'pszText'),(1, 'dwLength'),(1, 'dwIndex'),(1, 'pOptions'),(1, 'pbag'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MappingDoAction():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Globalization.MAPPING_PROPERTY_BAG_head),UInt32,win32more.Foundation.PWSTR)(('MappingDoAction', windll['elscore.dll']), ((1, 'pBag'),(1, 'dwRangeIndex'),(1, 'pszActionId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_MappingFreePropertyBag():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Globalization.MAPPING_PROPERTY_BAG_head))(('MappingFreePropertyBag', windll['elscore.dll']), ((1, 'pBag'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptFreeCache():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(c_void_p))(('ScriptFreeCache', windll['USP10.dll']), ((1, 'psc'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptItemize():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,Int32,Int32,POINTER(win32more.Globalization.SCRIPT_CONTROL_head),POINTER(win32more.Globalization.SCRIPT_STATE_head),POINTER(win32more.Globalization.SCRIPT_ITEM_head),POINTER(Int32))(('ScriptItemize', windll['USP10.dll']), ((1, 'pwcInChars'),(1, 'cInChars'),(1, 'cMaxItems'),(1, 'psControl'),(1, 'psState'),(1, 'pItems'),(1, 'pcItems'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptLayout():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,c_char_p_no,POINTER(Int32),POINTER(Int32))(('ScriptLayout', windll['USP10.dll']), ((1, 'cRuns'),(1, 'pbLevel'),(1, 'piVisualToLogical'),(1, 'piLogicalToVisual'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptShape():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Gdi.HDC,POINTER(c_void_p),win32more.Foundation.PWSTR,Int32,Int32,POINTER(win32more.Globalization.SCRIPT_ANALYSIS_head),POINTER(UInt16),POINTER(UInt16),POINTER(win32more.Globalization.SCRIPT_VISATTR_head),POINTER(Int32))(('ScriptShape', windll['USP10.dll']), ((1, 'hdc'),(1, 'psc'),(1, 'pwcChars'),(1, 'cChars'),(1, 'cMaxGlyphs'),(1, 'psa'),(1, 'pwOutGlyphs'),(1, 'pwLogClust'),(1, 'psva'),(1, 'pcGlyphs'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptPlace():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Gdi.HDC,POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(win32more.Globalization.SCRIPT_VISATTR_head),POINTER(win32more.Globalization.SCRIPT_ANALYSIS_head),POINTER(Int32),POINTER(win32more.Globalization.GOFFSET_head),POINTER(win32more.Graphics.Gdi.ABC_head))(('ScriptPlace', windll['USP10.dll']), ((1, 'hdc'),(1, 'psc'),(1, 'pwGlyphs'),(1, 'cGlyphs'),(1, 'psva'),(1, 'psa'),(1, 'piAdvance'),(1, 'pGoffset'),(1, 'pABC'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptTextOut():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Gdi.HDC,POINTER(c_void_p),Int32,Int32,UInt32,POINTER(win32more.Foundation.RECT_head),POINTER(win32more.Globalization.SCRIPT_ANALYSIS_head),win32more.Foundation.PWSTR,Int32,POINTER(UInt16),Int32,POINTER(Int32),POINTER(Int32),POINTER(win32more.Globalization.GOFFSET_head))(('ScriptTextOut', windll['USP10.dll']), ((1, 'hdc'),(1, 'psc'),(1, 'x'),(1, 'y'),(1, 'fuOptions'),(1, 'lprc'),(1, 'psa'),(1, 'pwcReserved'),(1, 'iReserved'),(1, 'pwGlyphs'),(1, 'cGlyphs'),(1, 'piAdvance'),(1, 'piJustify'),(1, 'pGoffset'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptJustify():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Globalization.SCRIPT_VISATTR_head),POINTER(Int32),Int32,Int32,Int32,POINTER(Int32))(('ScriptJustify', windll['USP10.dll']), ((1, 'psva'),(1, 'piAdvance'),(1, 'cGlyphs'),(1, 'iDx'),(1, 'iMinKashida'),(1, 'piJustify'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptBreak():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,Int32,POINTER(win32more.Globalization.SCRIPT_ANALYSIS_head),POINTER(win32more.Globalization.SCRIPT_LOGATTR_head))(('ScriptBreak', windll['USP10.dll']), ((1, 'pwcChars'),(1, 'cChars'),(1, 'psa'),(1, 'psla'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptCPtoX():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,win32more.Foundation.BOOL,Int32,Int32,POINTER(UInt16),POINTER(win32more.Globalization.SCRIPT_VISATTR_head),POINTER(Int32),POINTER(win32more.Globalization.SCRIPT_ANALYSIS_head),POINTER(Int32))(('ScriptCPtoX', windll['USP10.dll']), ((1, 'iCP'),(1, 'fTrailing'),(1, 'cChars'),(1, 'cGlyphs'),(1, 'pwLogClust'),(1, 'psva'),(1, 'piAdvance'),(1, 'psa'),(1, 'piX'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptXtoCP():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,Int32,POINTER(UInt16),POINTER(win32more.Globalization.SCRIPT_VISATTR_head),POINTER(Int32),POINTER(win32more.Globalization.SCRIPT_ANALYSIS_head),POINTER(Int32),POINTER(Int32))(('ScriptXtoCP', windll['USP10.dll']), ((1, 'iX'),(1, 'cChars'),(1, 'cGlyphs'),(1, 'pwLogClust'),(1, 'psva'),(1, 'piAdvance'),(1, 'psa'),(1, 'piCP'),(1, 'piTrailing'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptGetLogicalWidths():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Globalization.SCRIPT_ANALYSIS_head),Int32,Int32,POINTER(Int32),POINTER(UInt16),POINTER(win32more.Globalization.SCRIPT_VISATTR_head),POINTER(Int32))(('ScriptGetLogicalWidths', windll['USP10.dll']), ((1, 'psa'),(1, 'cChars'),(1, 'cGlyphs'),(1, 'piGlyphWidth'),(1, 'pwLogClust'),(1, 'psva'),(1, 'piDx'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptApplyLogicalWidth():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int32),Int32,Int32,POINTER(UInt16),POINTER(win32more.Globalization.SCRIPT_VISATTR_head),POINTER(Int32),POINTER(win32more.Globalization.SCRIPT_ANALYSIS_head),POINTER(win32more.Graphics.Gdi.ABC_head),POINTER(Int32))(('ScriptApplyLogicalWidth', windll['USP10.dll']), ((1, 'piDx'),(1, 'cChars'),(1, 'cGlyphs'),(1, 'pwLogClust'),(1, 'psva'),(1, 'piAdvance'),(1, 'psa'),(1, 'pABC'),(1, 'piJustify'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptGetCMap():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Gdi.HDC,POINTER(c_void_p),win32more.Foundation.PWSTR,Int32,UInt32,POINTER(UInt16))(('ScriptGetCMap', windll['USP10.dll']), ((1, 'hdc'),(1, 'psc'),(1, 'pwcInChars'),(1, 'cChars'),(1, 'dwFlags'),(1, 'pwOutGlyphs'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptGetGlyphABCWidth():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Gdi.HDC,POINTER(c_void_p),UInt16,POINTER(win32more.Graphics.Gdi.ABC_head))(('ScriptGetGlyphABCWidth', windll['USP10.dll']), ((1, 'hdc'),(1, 'psc'),(1, 'wGlyph'),(1, 'pABC'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptGetProperties():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(POINTER(POINTER(win32more.Globalization.SCRIPT_PROPERTIES_head))),POINTER(Int32))(('ScriptGetProperties', windll['USP10.dll']), ((1, 'ppSp'),(1, 'piNumScripts'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptGetFontProperties():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Gdi.HDC,POINTER(c_void_p),POINTER(win32more.Globalization.SCRIPT_FONTPROPERTIES_head))(('ScriptGetFontProperties', windll['USP10.dll']), ((1, 'hdc'),(1, 'psc'),(1, 'sfp'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptCacheGetHeight():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Gdi.HDC,POINTER(c_void_p),POINTER(Int32))(('ScriptCacheGetHeight', windll['USP10.dll']), ((1, 'hdc'),(1, 'psc'),(1, 'tmHeight'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptStringAnalyse():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Gdi.HDC,c_void_p,Int32,Int32,Int32,UInt32,Int32,POINTER(win32more.Globalization.SCRIPT_CONTROL_head),POINTER(win32more.Globalization.SCRIPT_STATE_head),POINTER(Int32),POINTER(win32more.Globalization.SCRIPT_TABDEF_head),c_char_p_no,POINTER(c_void_p))(('ScriptStringAnalyse', windll['USP10.dll']), ((1, 'hdc'),(1, 'pString'),(1, 'cString'),(1, 'cGlyphs'),(1, 'iCharset'),(1, 'dwFlags'),(1, 'iReqWidth'),(1, 'psControl'),(1, 'psState'),(1, 'piDx'),(1, 'pTabdef'),(1, 'pbInClass'),(1, 'pssa'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptStringFree():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(c_void_p))(('ScriptStringFree', windll['USP10.dll']), ((1, 'pssa'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptString_pSize():
    try:
        return WINFUNCTYPE(POINTER(win32more.Foundation.SIZE_head),c_void_p)(('ScriptString_pSize', windll['USP10.dll']), ((1, 'ssa'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptString_pcOutChars():
    try:
        return WINFUNCTYPE(POINTER(Int32),c_void_p)(('ScriptString_pcOutChars', windll['USP10.dll']), ((1, 'ssa'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptString_pLogAttr():
    try:
        return WINFUNCTYPE(POINTER(win32more.Globalization.SCRIPT_LOGATTR_head),c_void_p)(('ScriptString_pLogAttr', windll['USP10.dll']), ((1, 'ssa'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptStringGetOrder():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,c_void_p,POINTER(UInt32))(('ScriptStringGetOrder', windll['USP10.dll']), ((1, 'ssa'),(1, 'puOrder'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptStringCPtoX():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,c_void_p,Int32,win32more.Foundation.BOOL,POINTER(Int32))(('ScriptStringCPtoX', windll['USP10.dll']), ((1, 'ssa'),(1, 'icp'),(1, 'fTrailing'),(1, 'pX'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptStringXtoCP():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,c_void_p,Int32,POINTER(Int32),POINTER(Int32))(('ScriptStringXtoCP', windll['USP10.dll']), ((1, 'ssa'),(1, 'iX'),(1, 'piCh'),(1, 'piTrailing'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptStringGetLogicalWidths():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,c_void_p,POINTER(Int32))(('ScriptStringGetLogicalWidths', windll['USP10.dll']), ((1, 'ssa'),(1, 'piDx'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptStringValidate():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,c_void_p)(('ScriptStringValidate', windll['USP10.dll']), ((1, 'ssa'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptStringOut():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,c_void_p,Int32,Int32,win32more.Graphics.Gdi.ETO_OPTIONS,POINTER(win32more.Foundation.RECT_head),Int32,Int32,win32more.Foundation.BOOL)(('ScriptStringOut', windll['USP10.dll']), ((1, 'ssa'),(1, 'iX'),(1, 'iY'),(1, 'uOptions'),(1, 'prc'),(1, 'iMinSel'),(1, 'iMaxSel'),(1, 'fDisabled'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptIsComplex():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,Int32,win32more.Globalization.SCRIPT_IS_COMPLEX_FLAGS)(('ScriptIsComplex', windll['USP10.dll']), ((1, 'pwcInChars'),(1, 'cInChars'),(1, 'dwFlags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptRecordDigitSubstitution():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Globalization.SCRIPT_DIGITSUBSTITUTE_head))(('ScriptRecordDigitSubstitution', windll['USP10.dll']), ((1, 'Locale'),(1, 'psds'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptApplyDigitSubstitution():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Globalization.SCRIPT_DIGITSUBSTITUTE_head),POINTER(win32more.Globalization.SCRIPT_CONTROL_head),POINTER(win32more.Globalization.SCRIPT_STATE_head))(('ScriptApplyDigitSubstitution', windll['USP10.dll']), ((1, 'psds'),(1, 'psc'),(1, 'pss'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptShapeOpenType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Gdi.HDC,POINTER(c_void_p),POINTER(win32more.Globalization.SCRIPT_ANALYSIS_head),UInt32,UInt32,POINTER(Int32),POINTER(POINTER(win32more.Globalization.TEXTRANGE_PROPERTIES_head)),Int32,win32more.Foundation.PWSTR,Int32,Int32,POINTER(UInt16),POINTER(win32more.Globalization.SCRIPT_CHARPROP_head),POINTER(UInt16),POINTER(win32more.Globalization.SCRIPT_GLYPHPROP_head),POINTER(Int32))(('ScriptShapeOpenType', windll['USP10.dll']), ((1, 'hdc'),(1, 'psc'),(1, 'psa'),(1, 'tagScript'),(1, 'tagLangSys'),(1, 'rcRangeChars'),(1, 'rpRangeProperties'),(1, 'cRanges'),(1, 'pwcChars'),(1, 'cChars'),(1, 'cMaxGlyphs'),(1, 'pwLogClust'),(1, 'pCharProps'),(1, 'pwOutGlyphs'),(1, 'pOutGlyphProps'),(1, 'pcGlyphs'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptPlaceOpenType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Gdi.HDC,POINTER(c_void_p),POINTER(win32more.Globalization.SCRIPT_ANALYSIS_head),UInt32,UInt32,POINTER(Int32),POINTER(POINTER(win32more.Globalization.TEXTRANGE_PROPERTIES_head)),Int32,win32more.Foundation.PWSTR,POINTER(UInt16),POINTER(win32more.Globalization.SCRIPT_CHARPROP_head),Int32,POINTER(UInt16),POINTER(win32more.Globalization.SCRIPT_GLYPHPROP_head),Int32,POINTER(Int32),POINTER(win32more.Globalization.GOFFSET_head),POINTER(win32more.Graphics.Gdi.ABC_head))(('ScriptPlaceOpenType', windll['USP10.dll']), ((1, 'hdc'),(1, 'psc'),(1, 'psa'),(1, 'tagScript'),(1, 'tagLangSys'),(1, 'rcRangeChars'),(1, 'rpRangeProperties'),(1, 'cRanges'),(1, 'pwcChars'),(1, 'pwLogClust'),(1, 'pCharProps'),(1, 'cChars'),(1, 'pwGlyphs'),(1, 'pGlyphProps'),(1, 'cGlyphs'),(1, 'piAdvance'),(1, 'pGoffset'),(1, 'pABC'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptItemizeOpenType():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,Int32,Int32,POINTER(win32more.Globalization.SCRIPT_CONTROL_head),POINTER(win32more.Globalization.SCRIPT_STATE_head),POINTER(win32more.Globalization.SCRIPT_ITEM_head),POINTER(UInt32),POINTER(Int32))(('ScriptItemizeOpenType', windll['USP10.dll']), ((1, 'pwcInChars'),(1, 'cInChars'),(1, 'cMaxItems'),(1, 'psControl'),(1, 'psState'),(1, 'pItems'),(1, 'pScriptTags'),(1, 'pcItems'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptGetFontScriptTags():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Gdi.HDC,POINTER(c_void_p),POINTER(win32more.Globalization.SCRIPT_ANALYSIS_head),Int32,POINTER(UInt32),POINTER(Int32))(('ScriptGetFontScriptTags', windll['USP10.dll']), ((1, 'hdc'),(1, 'psc'),(1, 'psa'),(1, 'cMaxTags'),(1, 'pScriptTags'),(1, 'pcTags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptGetFontLanguageTags():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Gdi.HDC,POINTER(c_void_p),POINTER(win32more.Globalization.SCRIPT_ANALYSIS_head),UInt32,Int32,POINTER(UInt32),POINTER(Int32))(('ScriptGetFontLanguageTags', windll['USP10.dll']), ((1, 'hdc'),(1, 'psc'),(1, 'psa'),(1, 'tagScript'),(1, 'cMaxTags'),(1, 'pLangsysTags'),(1, 'pcTags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptGetFontFeatureTags():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Gdi.HDC,POINTER(c_void_p),POINTER(win32more.Globalization.SCRIPT_ANALYSIS_head),UInt32,UInt32,Int32,POINTER(UInt32),POINTER(Int32))(('ScriptGetFontFeatureTags', windll['USP10.dll']), ((1, 'hdc'),(1, 'psc'),(1, 'psa'),(1, 'tagScript'),(1, 'tagLangSys'),(1, 'cMaxTags'),(1, 'pFeatureTags'),(1, 'pcTags'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptGetFontAlternateGlyphs():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Gdi.HDC,POINTER(c_void_p),POINTER(win32more.Globalization.SCRIPT_ANALYSIS_head),UInt32,UInt32,UInt32,UInt16,Int32,POINTER(UInt16),POINTER(Int32))(('ScriptGetFontAlternateGlyphs', windll['USP10.dll']), ((1, 'hdc'),(1, 'psc'),(1, 'psa'),(1, 'tagScript'),(1, 'tagLangSys'),(1, 'tagFeature'),(1, 'wGlyphId'),(1, 'cMaxAlternates'),(1, 'pAlternateGlyphs'),(1, 'pcAlternates'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptSubstituteSingleGlyph():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Gdi.HDC,POINTER(c_void_p),POINTER(win32more.Globalization.SCRIPT_ANALYSIS_head),UInt32,UInt32,UInt32,Int32,UInt16,POINTER(UInt16))(('ScriptSubstituteSingleGlyph', windll['USP10.dll']), ((1, 'hdc'),(1, 'psc'),(1, 'psa'),(1, 'tagScript'),(1, 'tagLangSys'),(1, 'tagFeature'),(1, 'lParameter'),(1, 'wGlyphId'),(1, 'pwOutGlyphId'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ScriptPositionSingleGlyph():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Gdi.HDC,POINTER(c_void_p),POINTER(win32more.Globalization.SCRIPT_ANALYSIS_head),UInt32,UInt32,UInt32,Int32,UInt16,Int32,win32more.Globalization.GOFFSET,POINTER(Int32),POINTER(win32more.Globalization.GOFFSET_head))(('ScriptPositionSingleGlyph', windll['USP10.dll']), ((1, 'hdc'),(1, 'psc'),(1, 'psa'),(1, 'tagScript'),(1, 'tagLangSys'),(1, 'tagFeature'),(1, 'lParameter'),(1, 'wGlyphId'),(1, 'iAdvance'),(1, 'GOffset'),(1, 'piOutAdvance'),(1, 'pOutGoffset'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utf8_nextCharSafeBody():
    try:
        return CFUNCTYPE(Int32,c_char_p_no,POINTER(Int32),Int32,Int32,SByte)(('utf8_nextCharSafeBody', cdll['icu.dll']), ((1, 's'),(1, 'pi'),(1, 'length'),(1, 'c'),(1, 'strict'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utf8_appendCharSafeBody():
    try:
        return CFUNCTYPE(Int32,c_char_p_no,Int32,Int32,Int32,POINTER(SByte))(('utf8_appendCharSafeBody', cdll['icu.dll']), ((1, 's'),(1, 'i'),(1, 'length'),(1, 'c'),(1, 'pIsError'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utf8_prevCharSafeBody():
    try:
        return CFUNCTYPE(Int32,c_char_p_no,Int32,POINTER(Int32),Int32,SByte)(('utf8_prevCharSafeBody', cdll['icu.dll']), ((1, 's'),(1, 'start'),(1, 'pi'),(1, 'c'),(1, 'strict'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utf8_back1SafeBody():
    try:
        return CFUNCTYPE(Int32,c_char_p_no,Int32,Int32)(('utf8_back1SafeBody', cdll['icu.dll']), ((1, 's'),(1, 'start'),(1, 'i'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_versionFromString():
    try:
        return CFUNCTYPE(Void,c_char_p_no,win32more.Foundation.PSTR)(('u_versionFromString', cdll['icu.dll']), ((1, 'versionArray'),(1, 'versionString'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_versionFromUString():
    try:
        return CFUNCTYPE(Void,c_char_p_no,POINTER(UInt16))(('u_versionFromUString', cdll['icu.dll']), ((1, 'versionArray'),(1, 'versionString'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_versionToString():
    try:
        return CFUNCTYPE(Void,c_char_p_no,win32more.Foundation.PSTR)(('u_versionToString', cdll['icu.dll']), ((1, 'versionArray'),(1, 'versionString'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_getVersion():
    try:
        return CFUNCTYPE(Void,c_char_p_no)(('u_getVersion', cdll['icu.dll']), ((1, 'versionArray'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_errorName():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,win32more.Globalization.UErrorCode)(('u_errorName', cdll['icu.dll']), ((1, 'code'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utrace_setLevel():
    try:
        return CFUNCTYPE(Void,Int32)(('utrace_setLevel', cdll['icu.dll']), ((1, 'traceLevel'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utrace_getLevel():
    try:
        return CFUNCTYPE(Int32,)(('utrace_getLevel', cdll['icu.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_utrace_setFunctions():
    try:
        return CFUNCTYPE(Void,c_void_p,win32more.Globalization.UTraceEntry,win32more.Globalization.UTraceExit,win32more.Globalization.UTraceData)(('utrace_setFunctions', cdll['icu.dll']), ((1, 'context'),(1, 'e'),(1, 'x'),(1, 'd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utrace_getFunctions():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),POINTER(win32more.Globalization.UTraceEntry),POINTER(win32more.Globalization.UTraceExit),POINTER(win32more.Globalization.UTraceData))(('utrace_getFunctions', cdll['icu.dll']), ((1, 'context'),(1, 'e'),(1, 'x'),(1, 'd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utrace_vformat():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,Int32,Int32,win32more.Foundation.PSTR,POINTER(SByte))(('utrace_vformat', cdll['icu.dll']), ((1, 'outBuf'),(1, 'capacity'),(1, 'indent'),(1, 'fmt'),(1, 'args'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utrace_format():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,Int32,Int32,win32more.Foundation.PSTR)(('utrace_format', cdll['icu.dll']), ((1, 'outBuf'),(1, 'capacity'),(1, 'indent'),(1, 'fmt'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utrace_functionName():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,Int32)(('utrace_functionName', cdll['icu.dll']), ((1, 'fnNumber'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_shapeArabic():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),Int32,POINTER(UInt16),Int32,UInt32,POINTER(win32more.Globalization.UErrorCode))(('u_shapeArabic', cdll['icu.dll']), ((1, 'source'),(1, 'sourceLength'),(1, 'dest'),(1, 'destSize'),(1, 'options'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uscript_getCode():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,POINTER(win32more.Globalization.UScriptCode),Int32,POINTER(win32more.Globalization.UErrorCode))(('uscript_getCode', cdll['icu.dll']), ((1, 'nameOrAbbrOrLocale'),(1, 'fillIn'),(1, 'capacity'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uscript_getName():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,win32more.Globalization.UScriptCode)(('uscript_getName', cdll['icu.dll']), ((1, 'scriptCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uscript_getShortName():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,win32more.Globalization.UScriptCode)(('uscript_getShortName', cdll['icu.dll']), ((1, 'scriptCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uscript_getScript():
    try:
        return CFUNCTYPE(win32more.Globalization.UScriptCode,Int32,POINTER(win32more.Globalization.UErrorCode))(('uscript_getScript', cdll['icu.dll']), ((1, 'codepoint'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uscript_hasScript():
    try:
        return CFUNCTYPE(SByte,Int32,win32more.Globalization.UScriptCode)(('uscript_hasScript', cdll['icu.dll']), ((1, 'c'),(1, 'sc'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uscript_getScriptExtensions():
    try:
        return CFUNCTYPE(Int32,Int32,POINTER(win32more.Globalization.UScriptCode),Int32,POINTER(win32more.Globalization.UErrorCode))(('uscript_getScriptExtensions', cdll['icu.dll']), ((1, 'c'),(1, 'scripts'),(1, 'capacity'),(1, 'errorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uscript_getSampleString():
    try:
        return CFUNCTYPE(Int32,win32more.Globalization.UScriptCode,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uscript_getSampleString', cdll['icu.dll']), ((1, 'script'),(1, 'dest'),(1, 'capacity'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uscript_getUsage():
    try:
        return CFUNCTYPE(win32more.Globalization.UScriptUsage,win32more.Globalization.UScriptCode)(('uscript_getUsage', cdll['icu.dll']), ((1, 'script'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uscript_isRightToLeft():
    try:
        return CFUNCTYPE(SByte,win32more.Globalization.UScriptCode)(('uscript_isRightToLeft', cdll['icu.dll']), ((1, 'script'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uscript_breaksBetweenLetters():
    try:
        return CFUNCTYPE(SByte,win32more.Globalization.UScriptCode)(('uscript_breaksBetweenLetters', cdll['icu.dll']), ((1, 'script'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uscript_isCased():
    try:
        return CFUNCTYPE(SByte,win32more.Globalization.UScriptCode)(('uscript_isCased', cdll['icu.dll']), ((1, 'script'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uiter_current32():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCharIterator_head))(('uiter_current32', cdll['icu.dll']), ((1, 'iter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uiter_next32():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCharIterator_head))(('uiter_next32', cdll['icu.dll']), ((1, 'iter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uiter_previous32():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCharIterator_head))(('uiter_previous32', cdll['icu.dll']), ((1, 'iter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uiter_getState():
    try:
        return CFUNCTYPE(UInt32,POINTER(win32more.Globalization.UCharIterator_head))(('uiter_getState', cdll['icu.dll']), ((1, 'iter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uiter_setState():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCharIterator_head),UInt32,POINTER(win32more.Globalization.UErrorCode))(('uiter_setState', cdll['icu.dll']), ((1, 'iter'),(1, 'state'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uiter_setString():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCharIterator_head),POINTER(UInt16),Int32)(('uiter_setString', cdll['icu.dll']), ((1, 'iter'),(1, 's'),(1, 'length'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uiter_setUTF16BE():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCharIterator_head),win32more.Foundation.PSTR,Int32)(('uiter_setUTF16BE', cdll['icu.dll']), ((1, 'iter'),(1, 's'),(1, 'length'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uiter_setUTF8():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCharIterator_head),win32more.Foundation.PSTR,Int32)(('uiter_setUTF8', cdll['icu.dll']), ((1, 'iter'),(1, 's'),(1, 'length'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uenum_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UEnumeration_head))(('uenum_close', cdll['icu.dll']), ((1, 'en'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uenum_count():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UEnumeration_head),POINTER(win32more.Globalization.UErrorCode))(('uenum_count', cdll['icu.dll']), ((1, 'en'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uenum_unext():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(win32more.Globalization.UEnumeration_head),POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('uenum_unext', cdll['icu.dll']), ((1, 'en'),(1, 'resultLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uenum_next():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,POINTER(win32more.Globalization.UEnumeration_head),POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('uenum_next', cdll['icu.dll']), ((1, 'en'),(1, 'resultLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uenum_reset():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UEnumeration_head),POINTER(win32more.Globalization.UErrorCode))(('uenum_reset', cdll['icu.dll']), ((1, 'en'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uenum_openUCharStringsEnumeration():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),POINTER(POINTER(UInt16)),Int32,POINTER(win32more.Globalization.UErrorCode))(('uenum_openUCharStringsEnumeration', cdll['icu.dll']), ((1, 'strings'),(1, 'count'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uenum_openCharStringsEnumeration():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),POINTER(POINTER(SByte)),Int32,POINTER(win32more.Globalization.UErrorCode))(('uenum_openCharStringsEnumeration', cdll['icu.dll']), ((1, 'strings'),(1, 'count'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_getDefault():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,)(('uloc_getDefault', cdll['icu.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_setDefault():
    try:
        return CFUNCTYPE(Void,win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('uloc_setDefault', cdll['icu.dll']), ((1, 'localeID'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_getLanguage():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('uloc_getLanguage', cdll['icu.dll']), ((1, 'localeID'),(1, 'language'),(1, 'languageCapacity'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_getScript():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('uloc_getScript', cdll['icu.dll']), ((1, 'localeID'),(1, 'script'),(1, 'scriptCapacity'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_getCountry():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('uloc_getCountry', cdll['icu.dll']), ((1, 'localeID'),(1, 'country'),(1, 'countryCapacity'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_getVariant():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('uloc_getVariant', cdll['icu.dll']), ((1, 'localeID'),(1, 'variant'),(1, 'variantCapacity'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_getName():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('uloc_getName', cdll['icu.dll']), ((1, 'localeID'),(1, 'name'),(1, 'nameCapacity'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_canonicalize():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('uloc_canonicalize', cdll['icu.dll']), ((1, 'localeID'),(1, 'name'),(1, 'nameCapacity'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_getISO3Language():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,win32more.Foundation.PSTR)(('uloc_getISO3Language', cdll['icu.dll']), ((1, 'localeID'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_getISO3Country():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,win32more.Foundation.PSTR)(('uloc_getISO3Country', cdll['icu.dll']), ((1, 'localeID'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_getLCID():
    try:
        return CFUNCTYPE(UInt32,win32more.Foundation.PSTR)(('uloc_getLCID', cdll['icu.dll']), ((1, 'localeID'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_getDisplayLanguage():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uloc_getDisplayLanguage', cdll['icu.dll']), ((1, 'locale'),(1, 'displayLocale'),(1, 'language'),(1, 'languageCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_getDisplayScript():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uloc_getDisplayScript', cdll['icu.dll']), ((1, 'locale'),(1, 'displayLocale'),(1, 'script'),(1, 'scriptCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_getDisplayCountry():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uloc_getDisplayCountry', cdll['icu.dll']), ((1, 'locale'),(1, 'displayLocale'),(1, 'country'),(1, 'countryCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_getDisplayVariant():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uloc_getDisplayVariant', cdll['icu.dll']), ((1, 'locale'),(1, 'displayLocale'),(1, 'variant'),(1, 'variantCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_getDisplayKeyword():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uloc_getDisplayKeyword', cdll['icu.dll']), ((1, 'keyword'),(1, 'displayLocale'),(1, 'dest'),(1, 'destCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_getDisplayKeywordValue():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uloc_getDisplayKeywordValue', cdll['icu.dll']), ((1, 'locale'),(1, 'keyword'),(1, 'displayLocale'),(1, 'dest'),(1, 'destCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_getDisplayName():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uloc_getDisplayName', cdll['icu.dll']), ((1, 'localeID'),(1, 'inLocaleID'),(1, 'result'),(1, 'maxResultSize'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_getAvailable():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,Int32)(('uloc_getAvailable', cdll['icu.dll']), ((1, 'n'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_countAvailable():
    try:
        return CFUNCTYPE(Int32,)(('uloc_countAvailable', cdll['icu.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_openAvailableByType():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),win32more.Globalization.ULocAvailableType,POINTER(win32more.Globalization.UErrorCode))(('uloc_openAvailableByType', cdll['icu.dll']), ((1, 'type'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_getISOLanguages():
    try:
        return CFUNCTYPE(POINTER(POINTER(SByte)),)(('uloc_getISOLanguages', cdll['icu.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_getISOCountries():
    try:
        return CFUNCTYPE(POINTER(POINTER(SByte)),)(('uloc_getISOCountries', cdll['icu.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_getParent():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('uloc_getParent', cdll['icu.dll']), ((1, 'localeID'),(1, 'parent'),(1, 'parentCapacity'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_getBaseName():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('uloc_getBaseName', cdll['icu.dll']), ((1, 'localeID'),(1, 'name'),(1, 'nameCapacity'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_openKeywords():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('uloc_openKeywords', cdll['icu.dll']), ((1, 'localeID'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_getKeywordValue():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('uloc_getKeywordValue', cdll['icu.dll']), ((1, 'localeID'),(1, 'keywordName'),(1, 'buffer'),(1, 'bufferCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_setKeywordValue():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('uloc_setKeywordValue', cdll['icu.dll']), ((1, 'keywordName'),(1, 'keywordValue'),(1, 'buffer'),(1, 'bufferCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_isRightToLeft():
    try:
        return CFUNCTYPE(SByte,win32more.Foundation.PSTR)(('uloc_isRightToLeft', cdll['icu.dll']), ((1, 'locale'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_getCharacterOrientation():
    try:
        return CFUNCTYPE(win32more.Globalization.ULayoutType,win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('uloc_getCharacterOrientation', cdll['icu.dll']), ((1, 'localeId'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_getLineOrientation():
    try:
        return CFUNCTYPE(win32more.Globalization.ULayoutType,win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('uloc_getLineOrientation', cdll['icu.dll']), ((1, 'localeId'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_acceptLanguageFromHTTP():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UAcceptResult),win32more.Foundation.PSTR,POINTER(win32more.Globalization.UEnumeration_head),POINTER(win32more.Globalization.UErrorCode))(('uloc_acceptLanguageFromHTTP', cdll['icu.dll']), ((1, 'result'),(1, 'resultAvailable'),(1, 'outResult'),(1, 'httpAcceptLanguage'),(1, 'availableLocales'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_acceptLanguage():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UAcceptResult),POINTER(POINTER(SByte)),Int32,POINTER(win32more.Globalization.UEnumeration_head),POINTER(win32more.Globalization.UErrorCode))(('uloc_acceptLanguage', cdll['icu.dll']), ((1, 'result'),(1, 'resultAvailable'),(1, 'outResult'),(1, 'acceptList'),(1, 'acceptListCount'),(1, 'availableLocales'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_getLocaleForLCID():
    try:
        return CFUNCTYPE(Int32,UInt32,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('uloc_getLocaleForLCID', cdll['icu.dll']), ((1, 'hostID'),(1, 'locale'),(1, 'localeCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_addLikelySubtags():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('uloc_addLikelySubtags', cdll['icu.dll']), ((1, 'localeID'),(1, 'maximizedLocaleID'),(1, 'maximizedLocaleIDCapacity'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_minimizeSubtags():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('uloc_minimizeSubtags', cdll['icu.dll']), ((1, 'localeID'),(1, 'minimizedLocaleID'),(1, 'minimizedLocaleIDCapacity'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_forLanguageTag():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,Int32,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('uloc_forLanguageTag', cdll['icu.dll']), ((1, 'langtag'),(1, 'localeID'),(1, 'localeIDCapacity'),(1, 'parsedLength'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_toLanguageTag():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,Int32,SByte,POINTER(win32more.Globalization.UErrorCode))(('uloc_toLanguageTag', cdll['icu.dll']), ((1, 'localeID'),(1, 'langtag'),(1, 'langtagCapacity'),(1, 'strict'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_toUnicodeLocaleKey():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,win32more.Foundation.PSTR)(('uloc_toUnicodeLocaleKey', cdll['icu.dll']), ((1, 'keyword'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_toUnicodeLocaleType():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR)(('uloc_toUnicodeLocaleType', cdll['icu.dll']), ((1, 'keyword'),(1, 'value'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_toLegacyKey():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,win32more.Foundation.PSTR)(('uloc_toLegacyKey', cdll['icu.dll']), ((1, 'keyword'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uloc_toLegacyType():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR)(('uloc_toLegacyType', cdll['icu.dll']), ((1, 'keyword'),(1, 'value'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_open():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UResourceBundle_head),win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('ures_open', cdll['icu.dll']), ((1, 'packageName'),(1, 'locale'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_openDirect():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UResourceBundle_head),win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('ures_openDirect', cdll['icu.dll']), ((1, 'packageName'),(1, 'locale'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_openU():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UResourceBundle_head),POINTER(UInt16),win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('ures_openU', cdll['icu.dll']), ((1, 'packageName'),(1, 'locale'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UResourceBundle_head))(('ures_close', cdll['icu.dll']), ((1, 'resourceBundle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_getVersion():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UResourceBundle_head),c_char_p_no)(('ures_getVersion', cdll['icu.dll']), ((1, 'resB'),(1, 'versionInfo'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_getLocaleByType():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,POINTER(win32more.Globalization.UResourceBundle_head),win32more.Globalization.ULocDataLocaleType,POINTER(win32more.Globalization.UErrorCode))(('ures_getLocaleByType', cdll['icu.dll']), ((1, 'resourceBundle'),(1, 'type'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_getString():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(win32more.Globalization.UResourceBundle_head),POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('ures_getString', cdll['icu.dll']), ((1, 'resourceBundle'),(1, 'len'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_getUTF8String():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,POINTER(win32more.Globalization.UResourceBundle_head),win32more.Foundation.PSTR,POINTER(Int32),SByte,POINTER(win32more.Globalization.UErrorCode))(('ures_getUTF8String', cdll['icu.dll']), ((1, 'resB'),(1, 'dest'),(1, 'length'),(1, 'forceCopy'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_getBinary():
    try:
        return CFUNCTYPE(c_char_p_no,POINTER(win32more.Globalization.UResourceBundle_head),POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('ures_getBinary', cdll['icu.dll']), ((1, 'resourceBundle'),(1, 'len'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_getIntVector():
    try:
        return CFUNCTYPE(POINTER(Int32),POINTER(win32more.Globalization.UResourceBundle_head),POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('ures_getIntVector', cdll['icu.dll']), ((1, 'resourceBundle'),(1, 'len'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_getUInt():
    try:
        return CFUNCTYPE(UInt32,POINTER(win32more.Globalization.UResourceBundle_head),POINTER(win32more.Globalization.UErrorCode))(('ures_getUInt', cdll['icu.dll']), ((1, 'resourceBundle'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_getInt():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UResourceBundle_head),POINTER(win32more.Globalization.UErrorCode))(('ures_getInt', cdll['icu.dll']), ((1, 'resourceBundle'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_getSize():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UResourceBundle_head))(('ures_getSize', cdll['icu.dll']), ((1, 'resourceBundle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_getType():
    try:
        return CFUNCTYPE(win32more.Globalization.UResType,POINTER(win32more.Globalization.UResourceBundle_head))(('ures_getType', cdll['icu.dll']), ((1, 'resourceBundle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_getKey():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,POINTER(win32more.Globalization.UResourceBundle_head))(('ures_getKey', cdll['icu.dll']), ((1, 'resourceBundle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_resetIterator():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UResourceBundle_head))(('ures_resetIterator', cdll['icu.dll']), ((1, 'resourceBundle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_hasNext():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UResourceBundle_head))(('ures_hasNext', cdll['icu.dll']), ((1, 'resourceBundle'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_getNextResource():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UResourceBundle_head),POINTER(win32more.Globalization.UResourceBundle_head),POINTER(win32more.Globalization.UResourceBundle_head),POINTER(win32more.Globalization.UErrorCode))(('ures_getNextResource', cdll['icu.dll']), ((1, 'resourceBundle'),(1, 'fillIn'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_getNextString():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(win32more.Globalization.UResourceBundle_head),POINTER(Int32),POINTER(POINTER(SByte)),POINTER(win32more.Globalization.UErrorCode))(('ures_getNextString', cdll['icu.dll']), ((1, 'resourceBundle'),(1, 'len'),(1, 'key'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_getByIndex():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UResourceBundle_head),POINTER(win32more.Globalization.UResourceBundle_head),Int32,POINTER(win32more.Globalization.UResourceBundle_head),POINTER(win32more.Globalization.UErrorCode))(('ures_getByIndex', cdll['icu.dll']), ((1, 'resourceBundle'),(1, 'indexR'),(1, 'fillIn'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_getStringByIndex():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(win32more.Globalization.UResourceBundle_head),Int32,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('ures_getStringByIndex', cdll['icu.dll']), ((1, 'resourceBundle'),(1, 'indexS'),(1, 'len'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_getUTF8StringByIndex():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,POINTER(win32more.Globalization.UResourceBundle_head),Int32,win32more.Foundation.PSTR,POINTER(Int32),SByte,POINTER(win32more.Globalization.UErrorCode))(('ures_getUTF8StringByIndex', cdll['icu.dll']), ((1, 'resB'),(1, 'stringIndex'),(1, 'dest'),(1, 'pLength'),(1, 'forceCopy'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_getByKey():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UResourceBundle_head),POINTER(win32more.Globalization.UResourceBundle_head),win32more.Foundation.PSTR,POINTER(win32more.Globalization.UResourceBundle_head),POINTER(win32more.Globalization.UErrorCode))(('ures_getByKey', cdll['icu.dll']), ((1, 'resourceBundle'),(1, 'key'),(1, 'fillIn'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_getStringByKey():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(win32more.Globalization.UResourceBundle_head),win32more.Foundation.PSTR,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('ures_getStringByKey', cdll['icu.dll']), ((1, 'resB'),(1, 'key'),(1, 'len'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_getUTF8StringByKey():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,POINTER(win32more.Globalization.UResourceBundle_head),win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(Int32),SByte,POINTER(win32more.Globalization.UErrorCode))(('ures_getUTF8StringByKey', cdll['icu.dll']), ((1, 'resB'),(1, 'key'),(1, 'dest'),(1, 'pLength'),(1, 'forceCopy'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ures_openAvailableLocales():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('ures_openAvailableLocales', cdll['icu.dll']), ((1, 'packageName'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uldn_open():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.ULocaleDisplayNames_head),win32more.Foundation.PSTR,win32more.Globalization.UDialectHandling,POINTER(win32more.Globalization.UErrorCode))(('uldn_open', cdll['icu.dll']), ((1, 'locale'),(1, 'dialectHandling'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uldn_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.ULocaleDisplayNames_head))(('uldn_close', cdll['icu.dll']), ((1, 'ldn'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uldn_getLocale():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,POINTER(win32more.Globalization.ULocaleDisplayNames_head))(('uldn_getLocale', cdll['icu.dll']), ((1, 'ldn'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uldn_getDialectHandling():
    try:
        return CFUNCTYPE(win32more.Globalization.UDialectHandling,POINTER(win32more.Globalization.ULocaleDisplayNames_head))(('uldn_getDialectHandling', cdll['icu.dll']), ((1, 'ldn'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uldn_localeDisplayName():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.ULocaleDisplayNames_head),win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uldn_localeDisplayName', cdll['icu.dll']), ((1, 'ldn'),(1, 'locale'),(1, 'result'),(1, 'maxResultSize'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uldn_languageDisplayName():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.ULocaleDisplayNames_head),win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uldn_languageDisplayName', cdll['icu.dll']), ((1, 'ldn'),(1, 'lang'),(1, 'result'),(1, 'maxResultSize'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uldn_scriptDisplayName():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.ULocaleDisplayNames_head),win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uldn_scriptDisplayName', cdll['icu.dll']), ((1, 'ldn'),(1, 'script'),(1, 'result'),(1, 'maxResultSize'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uldn_scriptCodeDisplayName():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.ULocaleDisplayNames_head),win32more.Globalization.UScriptCode,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uldn_scriptCodeDisplayName', cdll['icu.dll']), ((1, 'ldn'),(1, 'scriptCode'),(1, 'result'),(1, 'maxResultSize'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uldn_regionDisplayName():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.ULocaleDisplayNames_head),win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uldn_regionDisplayName', cdll['icu.dll']), ((1, 'ldn'),(1, 'region'),(1, 'result'),(1, 'maxResultSize'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uldn_variantDisplayName():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.ULocaleDisplayNames_head),win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uldn_variantDisplayName', cdll['icu.dll']), ((1, 'ldn'),(1, 'variant'),(1, 'result'),(1, 'maxResultSize'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uldn_keyDisplayName():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.ULocaleDisplayNames_head),win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uldn_keyDisplayName', cdll['icu.dll']), ((1, 'ldn'),(1, 'key'),(1, 'result'),(1, 'maxResultSize'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uldn_keyValueDisplayName():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.ULocaleDisplayNames_head),win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uldn_keyValueDisplayName', cdll['icu.dll']), ((1, 'ldn'),(1, 'key'),(1, 'value'),(1, 'result'),(1, 'maxResultSize'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uldn_openForContext():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.ULocaleDisplayNames_head),win32more.Foundation.PSTR,POINTER(win32more.Globalization.UDisplayContext),Int32,POINTER(win32more.Globalization.UErrorCode))(('uldn_openForContext', cdll['icu.dll']), ((1, 'locale'),(1, 'contexts'),(1, 'length'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uldn_getContext():
    try:
        return CFUNCTYPE(win32more.Globalization.UDisplayContext,POINTER(win32more.Globalization.ULocaleDisplayNames_head),win32more.Globalization.UDisplayContextType,POINTER(win32more.Globalization.UErrorCode))(('uldn_getContext', cdll['icu.dll']), ((1, 'ldn'),(1, 'type'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucurr_forLocale():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucurr_forLocale', cdll['icu.dll']), ((1, 'locale'),(1, 'buff'),(1, 'buffCapacity'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucurr_register():
    try:
        return CFUNCTYPE(c_void_p,POINTER(UInt16),win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('ucurr_register', cdll['icu.dll']), ((1, 'isoCode'),(1, 'locale'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucurr_unregister():
    try:
        return CFUNCTYPE(SByte,c_void_p,POINTER(win32more.Globalization.UErrorCode))(('ucurr_unregister', cdll['icu.dll']), ((1, 'key'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucurr_getName():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),win32more.Foundation.PSTR,win32more.Globalization.UCurrNameStyle,POINTER(SByte),POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('ucurr_getName', cdll['icu.dll']), ((1, 'currency'),(1, 'locale'),(1, 'nameStyle'),(1, 'isChoiceFormat'),(1, 'len'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucurr_getPluralName():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),win32more.Foundation.PSTR,POINTER(SByte),win32more.Foundation.PSTR,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('ucurr_getPluralName', cdll['icu.dll']), ((1, 'currency'),(1, 'locale'),(1, 'isChoiceFormat'),(1, 'pluralCount'),(1, 'len'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucurr_getDefaultFractionDigits():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),POINTER(win32more.Globalization.UErrorCode))(('ucurr_getDefaultFractionDigits', cdll['icu.dll']), ((1, 'currency'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucurr_getDefaultFractionDigitsForUsage():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),win32more.Globalization.UCurrencyUsage,POINTER(win32more.Globalization.UErrorCode))(('ucurr_getDefaultFractionDigitsForUsage', cdll['icu.dll']), ((1, 'currency'),(1, 'usage'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucurr_getRoundingIncrement():
    try:
        return CFUNCTYPE(Double,POINTER(UInt16),POINTER(win32more.Globalization.UErrorCode))(('ucurr_getRoundingIncrement', cdll['icu.dll']), ((1, 'currency'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucurr_getRoundingIncrementForUsage():
    try:
        return CFUNCTYPE(Double,POINTER(UInt16),win32more.Globalization.UCurrencyUsage,POINTER(win32more.Globalization.UErrorCode))(('ucurr_getRoundingIncrementForUsage', cdll['icu.dll']), ((1, 'currency'),(1, 'usage'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucurr_openISOCurrencies():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),UInt32,POINTER(win32more.Globalization.UErrorCode))(('ucurr_openISOCurrencies', cdll['icu.dll']), ((1, 'currType'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucurr_isAvailable():
    try:
        return CFUNCTYPE(SByte,POINTER(UInt16),Double,Double,POINTER(win32more.Globalization.UErrorCode))(('ucurr_isAvailable', cdll['icu.dll']), ((1, 'isoCode'),(1, 'from'),(1, 'to'),(1, 'errorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucurr_countCurrencies():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,Double,POINTER(win32more.Globalization.UErrorCode))(('ucurr_countCurrencies', cdll['icu.dll']), ((1, 'locale'),(1, 'date'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucurr_forLocaleAndDate():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,Double,Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucurr_forLocaleAndDate', cdll['icu.dll']), ((1, 'locale'),(1, 'date'),(1, 'index'),(1, 'buff'),(1, 'buffCapacity'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucurr_getKeywordValuesForLocale():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),win32more.Foundation.PSTR,win32more.Foundation.PSTR,SByte,POINTER(win32more.Globalization.UErrorCode))(('ucurr_getKeywordValuesForLocale', cdll['icu.dll']), ((1, 'key'),(1, 'locale'),(1, 'commonlyUsed'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucurr_getNumericCode():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16))(('ucurr_getNumericCode', cdll['icu.dll']), ((1, 'currency'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucpmap_get():
    try:
        return CFUNCTYPE(UInt32,POINTER(win32more.Globalization.UCPMap_head),Int32)(('ucpmap_get', cdll['icu.dll']), ((1, 'map'),(1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucpmap_getRange():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCPMap_head),Int32,win32more.Globalization.UCPMapRangeOption,UInt32,POINTER(win32more.Globalization.UCPMapValueFilter),c_void_p,POINTER(UInt32))(('ucpmap_getRange', cdll['icu.dll']), ((1, 'map'),(1, 'start'),(1, 'option'),(1, 'surrogateValue'),(1, 'filter'),(1, 'context'),(1, 'pValue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucptrie_openFromBinary():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UCPTrie_head),win32more.Globalization.UCPTrieType,win32more.Globalization.UCPTrieValueWidth,c_void_p,Int32,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('ucptrie_openFromBinary', cdll['icu.dll']), ((1, 'type'),(1, 'valueWidth'),(1, 'data'),(1, 'length'),(1, 'pActualLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucptrie_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCPTrie_head))(('ucptrie_close', cdll['icu.dll']), ((1, 'trie'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucptrie_getType():
    try:
        return CFUNCTYPE(win32more.Globalization.UCPTrieType,POINTER(win32more.Globalization.UCPTrie_head))(('ucptrie_getType', cdll['icu.dll']), ((1, 'trie'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucptrie_getValueWidth():
    try:
        return CFUNCTYPE(win32more.Globalization.UCPTrieValueWidth,POINTER(win32more.Globalization.UCPTrie_head))(('ucptrie_getValueWidth', cdll['icu.dll']), ((1, 'trie'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucptrie_get():
    try:
        return CFUNCTYPE(UInt32,POINTER(win32more.Globalization.UCPTrie_head),Int32)(('ucptrie_get', cdll['icu.dll']), ((1, 'trie'),(1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucptrie_getRange():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCPTrie_head),Int32,win32more.Globalization.UCPMapRangeOption,UInt32,POINTER(win32more.Globalization.UCPMapValueFilter),c_void_p,POINTER(UInt32))(('ucptrie_getRange', cdll['icu.dll']), ((1, 'trie'),(1, 'start'),(1, 'option'),(1, 'surrogateValue'),(1, 'filter'),(1, 'context'),(1, 'pValue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucptrie_toBinary():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCPTrie_head),c_void_p,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucptrie_toBinary', cdll['icu.dll']), ((1, 'trie'),(1, 'data'),(1, 'capacity'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucptrie_internalSmallIndex():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCPTrie_head),Int32)(('ucptrie_internalSmallIndex', cdll['icu.dll']), ((1, 'trie'),(1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucptrie_internalSmallU8Index():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCPTrie_head),Int32,Byte,Byte)(('ucptrie_internalSmallU8Index', cdll['icu.dll']), ((1, 'trie'),(1, 'lt1'),(1, 't2'),(1, 't3'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucptrie_internalU8PrevIndex():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCPTrie_head),Int32,c_char_p_no,c_char_p_no)(('ucptrie_internalU8PrevIndex', cdll['icu.dll']), ((1, 'trie'),(1, 'c'),(1, 'start'),(1, 'src'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_umutablecptrie_open():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UMutableCPTrie_head),UInt32,UInt32,POINTER(win32more.Globalization.UErrorCode))(('umutablecptrie_open', cdll['icu.dll']), ((1, 'initialValue'),(1, 'errorValue'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_umutablecptrie_clone():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UMutableCPTrie_head),POINTER(win32more.Globalization.UMutableCPTrie_head),POINTER(win32more.Globalization.UErrorCode))(('umutablecptrie_clone', cdll['icu.dll']), ((1, 'other'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_umutablecptrie_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UMutableCPTrie_head))(('umutablecptrie_close', cdll['icu.dll']), ((1, 'trie'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_umutablecptrie_fromUCPMap():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UMutableCPTrie_head),POINTER(win32more.Globalization.UCPMap_head),POINTER(win32more.Globalization.UErrorCode))(('umutablecptrie_fromUCPMap', cdll['icu.dll']), ((1, 'map'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_umutablecptrie_fromUCPTrie():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UMutableCPTrie_head),POINTER(win32more.Globalization.UCPTrie_head),POINTER(win32more.Globalization.UErrorCode))(('umutablecptrie_fromUCPTrie', cdll['icu.dll']), ((1, 'trie'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_umutablecptrie_get():
    try:
        return CFUNCTYPE(UInt32,POINTER(win32more.Globalization.UMutableCPTrie_head),Int32)(('umutablecptrie_get', cdll['icu.dll']), ((1, 'trie'),(1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_umutablecptrie_getRange():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UMutableCPTrie_head),Int32,win32more.Globalization.UCPMapRangeOption,UInt32,POINTER(win32more.Globalization.UCPMapValueFilter),c_void_p,POINTER(UInt32))(('umutablecptrie_getRange', cdll['icu.dll']), ((1, 'trie'),(1, 'start'),(1, 'option'),(1, 'surrogateValue'),(1, 'filter'),(1, 'context'),(1, 'pValue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_umutablecptrie_set():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UMutableCPTrie_head),Int32,UInt32,POINTER(win32more.Globalization.UErrorCode))(('umutablecptrie_set', cdll['icu.dll']), ((1, 'trie'),(1, 'c'),(1, 'value'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_umutablecptrie_setRange():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UMutableCPTrie_head),Int32,Int32,UInt32,POINTER(win32more.Globalization.UErrorCode))(('umutablecptrie_setRange', cdll['icu.dll']), ((1, 'trie'),(1, 'start'),(1, 'end'),(1, 'value'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_umutablecptrie_buildImmutable():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UCPTrie_head),POINTER(win32more.Globalization.UMutableCPTrie_head),win32more.Globalization.UCPTrieType,win32more.Globalization.UCPTrieValueWidth,POINTER(win32more.Globalization.UErrorCode))(('umutablecptrie_buildImmutable', cdll['icu.dll']), ((1, 'trie'),(1, 'type'),(1, 'valueWidth'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_UCNV_FROM_U_CALLBACK_STOP():
    try:
        return CFUNCTYPE(Void,c_void_p,POINTER(win32more.Globalization.UConverterFromUnicodeArgs_head),POINTER(UInt16),Int32,Int32,win32more.Globalization.UConverterCallbackReason,POINTER(win32more.Globalization.UErrorCode))(('UCNV_FROM_U_CALLBACK_STOP', cdll['icu.dll']), ((1, 'context'),(1, 'fromUArgs'),(1, 'codeUnits'),(1, 'length'),(1, 'codePoint'),(1, 'reason'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_UCNV_TO_U_CALLBACK_STOP():
    try:
        return CFUNCTYPE(Void,c_void_p,POINTER(win32more.Globalization.UConverterToUnicodeArgs_head),win32more.Foundation.PSTR,Int32,win32more.Globalization.UConverterCallbackReason,POINTER(win32more.Globalization.UErrorCode))(('UCNV_TO_U_CALLBACK_STOP', cdll['icu.dll']), ((1, 'context'),(1, 'toUArgs'),(1, 'codeUnits'),(1, 'length'),(1, 'reason'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_UCNV_FROM_U_CALLBACK_SKIP():
    try:
        return CFUNCTYPE(Void,c_void_p,POINTER(win32more.Globalization.UConverterFromUnicodeArgs_head),POINTER(UInt16),Int32,Int32,win32more.Globalization.UConverterCallbackReason,POINTER(win32more.Globalization.UErrorCode))(('UCNV_FROM_U_CALLBACK_SKIP', cdll['icu.dll']), ((1, 'context'),(1, 'fromUArgs'),(1, 'codeUnits'),(1, 'length'),(1, 'codePoint'),(1, 'reason'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_UCNV_FROM_U_CALLBACK_SUBSTITUTE():
    try:
        return CFUNCTYPE(Void,c_void_p,POINTER(win32more.Globalization.UConverterFromUnicodeArgs_head),POINTER(UInt16),Int32,Int32,win32more.Globalization.UConverterCallbackReason,POINTER(win32more.Globalization.UErrorCode))(('UCNV_FROM_U_CALLBACK_SUBSTITUTE', cdll['icu.dll']), ((1, 'context'),(1, 'fromUArgs'),(1, 'codeUnits'),(1, 'length'),(1, 'codePoint'),(1, 'reason'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_UCNV_FROM_U_CALLBACK_ESCAPE():
    try:
        return CFUNCTYPE(Void,c_void_p,POINTER(win32more.Globalization.UConverterFromUnicodeArgs_head),POINTER(UInt16),Int32,Int32,win32more.Globalization.UConverterCallbackReason,POINTER(win32more.Globalization.UErrorCode))(('UCNV_FROM_U_CALLBACK_ESCAPE', cdll['icu.dll']), ((1, 'context'),(1, 'fromUArgs'),(1, 'codeUnits'),(1, 'length'),(1, 'codePoint'),(1, 'reason'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_UCNV_TO_U_CALLBACK_SKIP():
    try:
        return CFUNCTYPE(Void,c_void_p,POINTER(win32more.Globalization.UConverterToUnicodeArgs_head),win32more.Foundation.PSTR,Int32,win32more.Globalization.UConverterCallbackReason,POINTER(win32more.Globalization.UErrorCode))(('UCNV_TO_U_CALLBACK_SKIP', cdll['icu.dll']), ((1, 'context'),(1, 'toUArgs'),(1, 'codeUnits'),(1, 'length'),(1, 'reason'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_UCNV_TO_U_CALLBACK_SUBSTITUTE():
    try:
        return CFUNCTYPE(Void,c_void_p,POINTER(win32more.Globalization.UConverterToUnicodeArgs_head),win32more.Foundation.PSTR,Int32,win32more.Globalization.UConverterCallbackReason,POINTER(win32more.Globalization.UErrorCode))(('UCNV_TO_U_CALLBACK_SUBSTITUTE', cdll['icu.dll']), ((1, 'context'),(1, 'toUArgs'),(1, 'codeUnits'),(1, 'length'),(1, 'reason'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_UCNV_TO_U_CALLBACK_ESCAPE():
    try:
        return CFUNCTYPE(Void,c_void_p,POINTER(win32more.Globalization.UConverterToUnicodeArgs_head),win32more.Foundation.PSTR,Int32,win32more.Globalization.UConverterCallbackReason,POINTER(win32more.Globalization.UErrorCode))(('UCNV_TO_U_CALLBACK_ESCAPE', cdll['icu.dll']), ((1, 'context'),(1, 'toUArgs'),(1, 'codeUnits'),(1, 'length'),(1, 'reason'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_compareNames():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR)(('ucnv_compareNames', cdll['icu.dll']), ((1, 'name1'),(1, 'name2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_open():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UConverter_head),win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('ucnv_open', cdll['icu.dll']), ((1, 'converterName'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_openU():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UConverter_head),POINTER(UInt16),POINTER(win32more.Globalization.UErrorCode))(('ucnv_openU', cdll['icu.dll']), ((1, 'name'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_openCCSID():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UConverter_head),Int32,win32more.Globalization.UConverterPlatform,POINTER(win32more.Globalization.UErrorCode))(('ucnv_openCCSID', cdll['icu.dll']), ((1, 'codepage'),(1, 'platform'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_openPackage():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UConverter_head),win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('ucnv_openPackage', cdll['icu.dll']), ((1, 'packageName'),(1, 'converterName'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_safeClone():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UConverter_head),POINTER(win32more.Globalization.UConverter_head),c_void_p,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('ucnv_safeClone', cdll['icu.dll']), ((1, 'cnv'),(1, 'stackBuffer'),(1, 'pBufferSize'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverter_head))(('ucnv_close', cdll['icu.dll']), ((1, 'converter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_getSubstChars():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverter_head),win32more.Foundation.PSTR,POINTER(SByte),POINTER(win32more.Globalization.UErrorCode))(('ucnv_getSubstChars', cdll['icu.dll']), ((1, 'converter'),(1, 'subChars'),(1, 'len'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_setSubstChars():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverter_head),win32more.Foundation.PSTR,SByte,POINTER(win32more.Globalization.UErrorCode))(('ucnv_setSubstChars', cdll['icu.dll']), ((1, 'converter'),(1, 'subChars'),(1, 'len'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_setSubstString():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverter_head),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucnv_setSubstString', cdll['icu.dll']), ((1, 'cnv'),(1, 's'),(1, 'length'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_getInvalidChars():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverter_head),win32more.Foundation.PSTR,POINTER(SByte),POINTER(win32more.Globalization.UErrorCode))(('ucnv_getInvalidChars', cdll['icu.dll']), ((1, 'converter'),(1, 'errBytes'),(1, 'len'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_getInvalidUChars():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverter_head),POINTER(UInt16),POINTER(SByte),POINTER(win32more.Globalization.UErrorCode))(('ucnv_getInvalidUChars', cdll['icu.dll']), ((1, 'converter'),(1, 'errUChars'),(1, 'len'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_reset():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverter_head))(('ucnv_reset', cdll['icu.dll']), ((1, 'converter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_resetToUnicode():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverter_head))(('ucnv_resetToUnicode', cdll['icu.dll']), ((1, 'converter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_resetFromUnicode():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverter_head))(('ucnv_resetFromUnicode', cdll['icu.dll']), ((1, 'converter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_getMaxCharSize():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UConverter_head))(('ucnv_getMaxCharSize', cdll['icu.dll']), ((1, 'converter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_getMinCharSize():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UConverter_head))(('ucnv_getMinCharSize', cdll['icu.dll']), ((1, 'converter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_getDisplayName():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UConverter_head),win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucnv_getDisplayName', cdll['icu.dll']), ((1, 'converter'),(1, 'displayLocale'),(1, 'displayName'),(1, 'displayNameCapacity'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_getName():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,POINTER(win32more.Globalization.UConverter_head),POINTER(win32more.Globalization.UErrorCode))(('ucnv_getName', cdll['icu.dll']), ((1, 'converter'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_getCCSID():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UConverter_head),POINTER(win32more.Globalization.UErrorCode))(('ucnv_getCCSID', cdll['icu.dll']), ((1, 'converter'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_getPlatform():
    try:
        return CFUNCTYPE(win32more.Globalization.UConverterPlatform,POINTER(win32more.Globalization.UConverter_head),POINTER(win32more.Globalization.UErrorCode))(('ucnv_getPlatform', cdll['icu.dll']), ((1, 'converter'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_getType():
    try:
        return CFUNCTYPE(win32more.Globalization.UConverterType,POINTER(win32more.Globalization.UConverter_head))(('ucnv_getType', cdll['icu.dll']), ((1, 'converter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_getStarters():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverter_head),POINTER(SByte),POINTER(win32more.Globalization.UErrorCode))(('ucnv_getStarters', cdll['icu.dll']), ((1, 'converter'),(1, 'starters'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_getUnicodeSet():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverter_head),POINTER(win32more.Globalization.USet_head),win32more.Globalization.UConverterUnicodeSet,POINTER(win32more.Globalization.UErrorCode))(('ucnv_getUnicodeSet', cdll['icu.dll']), ((1, 'cnv'),(1, 'setFillIn'),(1, 'whichSet'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_getToUCallBack():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverter_head),POINTER(win32more.Globalization.UConverterToUCallback),POINTER(c_void_p))(('ucnv_getToUCallBack', cdll['icu.dll']), ((1, 'converter'),(1, 'action'),(1, 'context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_getFromUCallBack():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverter_head),POINTER(win32more.Globalization.UConverterFromUCallback),POINTER(c_void_p))(('ucnv_getFromUCallBack', cdll['icu.dll']), ((1, 'converter'),(1, 'action'),(1, 'context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_setToUCallBack():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverter_head),win32more.Globalization.UConverterToUCallback,c_void_p,POINTER(win32more.Globalization.UConverterToUCallback),POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('ucnv_setToUCallBack', cdll['icu.dll']), ((1, 'converter'),(1, 'newAction'),(1, 'newContext'),(1, 'oldAction'),(1, 'oldContext'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_setFromUCallBack():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverter_head),win32more.Globalization.UConverterFromUCallback,c_void_p,POINTER(win32more.Globalization.UConverterFromUCallback),POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('ucnv_setFromUCallBack', cdll['icu.dll']), ((1, 'converter'),(1, 'newAction'),(1, 'newContext'),(1, 'oldAction'),(1, 'oldContext'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_fromUnicode():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverter_head),POINTER(POINTER(SByte)),win32more.Foundation.PSTR,POINTER(POINTER(UInt16)),POINTER(UInt16),POINTER(Int32),SByte,POINTER(win32more.Globalization.UErrorCode))(('ucnv_fromUnicode', cdll['icu.dll']), ((1, 'converter'),(1, 'target'),(1, 'targetLimit'),(1, 'source'),(1, 'sourceLimit'),(1, 'offsets'),(1, 'flush'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_toUnicode():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverter_head),POINTER(POINTER(UInt16)),POINTER(UInt16),POINTER(POINTER(SByte)),win32more.Foundation.PSTR,POINTER(Int32),SByte,POINTER(win32more.Globalization.UErrorCode))(('ucnv_toUnicode', cdll['icu.dll']), ((1, 'converter'),(1, 'target'),(1, 'targetLimit'),(1, 'source'),(1, 'sourceLimit'),(1, 'offsets'),(1, 'flush'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_fromUChars():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UConverter_head),win32more.Foundation.PSTR,Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucnv_fromUChars', cdll['icu.dll']), ((1, 'cnv'),(1, 'dest'),(1, 'destCapacity'),(1, 'src'),(1, 'srcLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_toUChars():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UConverter_head),POINTER(UInt16),Int32,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucnv_toUChars', cdll['icu.dll']), ((1, 'cnv'),(1, 'dest'),(1, 'destCapacity'),(1, 'src'),(1, 'srcLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_getNextUChar():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UConverter_head),POINTER(POINTER(SByte)),win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('ucnv_getNextUChar', cdll['icu.dll']), ((1, 'converter'),(1, 'source'),(1, 'sourceLimit'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_convertEx():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverter_head),POINTER(win32more.Globalization.UConverter_head),POINTER(POINTER(SByte)),win32more.Foundation.PSTR,POINTER(POINTER(SByte)),win32more.Foundation.PSTR,POINTER(UInt16),POINTER(POINTER(UInt16)),POINTER(POINTER(UInt16)),POINTER(UInt16),SByte,SByte,POINTER(win32more.Globalization.UErrorCode))(('ucnv_convertEx', cdll['icu.dll']), ((1, 'targetCnv'),(1, 'sourceCnv'),(1, 'target'),(1, 'targetLimit'),(1, 'source'),(1, 'sourceLimit'),(1, 'pivotStart'),(1, 'pivotSource'),(1, 'pivotTarget'),(1, 'pivotLimit'),(1, 'reset'),(1, 'flush'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_convert():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,Int32,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucnv_convert', cdll['icu.dll']), ((1, 'toConverterName'),(1, 'fromConverterName'),(1, 'target'),(1, 'targetCapacity'),(1, 'source'),(1, 'sourceLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_toAlgorithmic():
    try:
        return CFUNCTYPE(Int32,win32more.Globalization.UConverterType,POINTER(win32more.Globalization.UConverter_head),win32more.Foundation.PSTR,Int32,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucnv_toAlgorithmic', cdll['icu.dll']), ((1, 'algorithmicType'),(1, 'cnv'),(1, 'target'),(1, 'targetCapacity'),(1, 'source'),(1, 'sourceLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_fromAlgorithmic():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UConverter_head),win32more.Globalization.UConverterType,win32more.Foundation.PSTR,Int32,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucnv_fromAlgorithmic', cdll['icu.dll']), ((1, 'cnv'),(1, 'algorithmicType'),(1, 'target'),(1, 'targetCapacity'),(1, 'source'),(1, 'sourceLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_flushCache():
    try:
        return CFUNCTYPE(Int32,)(('ucnv_flushCache', cdll['icu.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_countAvailable():
    try:
        return CFUNCTYPE(Int32,)(('ucnv_countAvailable', cdll['icu.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_getAvailableName():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,Int32)(('ucnv_getAvailableName', cdll['icu.dll']), ((1, 'n'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_openAllNames():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),POINTER(win32more.Globalization.UErrorCode))(('ucnv_openAllNames', cdll['icu.dll']), ((1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_countAliases():
    try:
        return CFUNCTYPE(UInt16,win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('ucnv_countAliases', cdll['icu.dll']), ((1, 'alias'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_getAlias():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt16,POINTER(win32more.Globalization.UErrorCode))(('ucnv_getAlias', cdll['icu.dll']), ((1, 'alias'),(1, 'n'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_getAliases():
    try:
        return CFUNCTYPE(Void,win32more.Foundation.PSTR,POINTER(POINTER(SByte)),POINTER(win32more.Globalization.UErrorCode))(('ucnv_getAliases', cdll['icu.dll']), ((1, 'alias'),(1, 'aliases'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_openStandardNames():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('ucnv_openStandardNames', cdll['icu.dll']), ((1, 'convName'),(1, 'standard'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_countStandards():
    try:
        return CFUNCTYPE(UInt16,)(('ucnv_countStandards', cdll['icu.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_getStandard():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,UInt16,POINTER(win32more.Globalization.UErrorCode))(('ucnv_getStandard', cdll['icu.dll']), ((1, 'n'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_getStandardName():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('ucnv_getStandardName', cdll['icu.dll']), ((1, 'name'),(1, 'standard'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_getCanonicalName():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('ucnv_getCanonicalName', cdll['icu.dll']), ((1, 'alias'),(1, 'standard'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_getDefaultName():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,)(('ucnv_getDefaultName', cdll['icu.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_setDefaultName():
    try:
        return CFUNCTYPE(Void,win32more.Foundation.PSTR)(('ucnv_setDefaultName', cdll['icu.dll']), ((1, 'name'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_fixFileSeparator():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverter_head),POINTER(UInt16),Int32)(('ucnv_fixFileSeparator', cdll['icu.dll']), ((1, 'cnv'),(1, 'source'),(1, 'sourceLen'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_isAmbiguous():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UConverter_head))(('ucnv_isAmbiguous', cdll['icu.dll']), ((1, 'cnv'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_setFallback():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverter_head),SByte)(('ucnv_setFallback', cdll['icu.dll']), ((1, 'cnv'),(1, 'usesFallback'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_usesFallback():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UConverter_head))(('ucnv_usesFallback', cdll['icu.dll']), ((1, 'cnv'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_detectUnicodeSignature():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,win32more.Foundation.PSTR,Int32,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('ucnv_detectUnicodeSignature', cdll['icu.dll']), ((1, 'source'),(1, 'sourceLength'),(1, 'signatureLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_fromUCountPending():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UConverter_head),POINTER(win32more.Globalization.UErrorCode))(('ucnv_fromUCountPending', cdll['icu.dll']), ((1, 'cnv'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_toUCountPending():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UConverter_head),POINTER(win32more.Globalization.UErrorCode))(('ucnv_toUCountPending', cdll['icu.dll']), ((1, 'cnv'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_isFixedWidth():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UConverter_head),POINTER(win32more.Globalization.UErrorCode))(('ucnv_isFixedWidth', cdll['icu.dll']), ((1, 'cnv'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_cbFromUWriteBytes():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverterFromUnicodeArgs_head),win32more.Foundation.PSTR,Int32,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucnv_cbFromUWriteBytes', cdll['icu.dll']), ((1, 'args'),(1, 'source'),(1, 'length'),(1, 'offsetIndex'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_cbFromUWriteSub():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverterFromUnicodeArgs_head),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucnv_cbFromUWriteSub', cdll['icu.dll']), ((1, 'args'),(1, 'offsetIndex'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_cbFromUWriteUChars():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverterFromUnicodeArgs_head),POINTER(POINTER(UInt16)),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucnv_cbFromUWriteUChars', cdll['icu.dll']), ((1, 'args'),(1, 'source'),(1, 'sourceLimit'),(1, 'offsetIndex'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_cbToUWriteUChars():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverterToUnicodeArgs_head),POINTER(UInt16),Int32,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucnv_cbToUWriteUChars', cdll['icu.dll']), ((1, 'args'),(1, 'source'),(1, 'length'),(1, 'offsetIndex'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnv_cbToUWriteSub():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverterToUnicodeArgs_head),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucnv_cbToUWriteSub', cdll['icu.dll']), ((1, 'args'),(1, 'offsetIndex'),(1, 'err'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_init():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UErrorCode))(('u_init', cdll['icu.dll']), ((1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_cleanup():
    try:
        return CFUNCTYPE(Void,)(('u_cleanup', cdll['icu.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_setMemoryFunctions():
    try:
        return CFUNCTYPE(Void,c_void_p,POINTER(win32more.Globalization.UMemAllocFn),POINTER(win32more.Globalization.UMemReallocFn),POINTER(win32more.Globalization.UMemFreeFn),POINTER(win32more.Globalization.UErrorCode))(('u_setMemoryFunctions', cdll['icu.dll']), ((1, 'context'),(1, 'a'),(1, 'r'),(1, 'f'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_catopen():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UResourceBundle_head),win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('u_catopen', cdll['icu.dll']), ((1, 'name'),(1, 'locale'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_catclose():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UResourceBundle_head))(('u_catclose', cdll['icu.dll']), ((1, 'catd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_catgets():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(win32more.Globalization.UResourceBundle_head),Int32,Int32,POINTER(UInt16),POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('u_catgets', cdll['icu.dll']), ((1, 'catd'),(1, 'set_num'),(1, 'msg_num'),(1, 's'),(1, 'len'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_hasBinaryProperty():
    try:
        return CFUNCTYPE(SByte,Int32,win32more.Globalization.UProperty)(('u_hasBinaryProperty', cdll['icu.dll']), ((1, 'c'),(1, 'which'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_getBinaryPropertySet():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.USet_head),win32more.Globalization.UProperty,POINTER(win32more.Globalization.UErrorCode))(('u_getBinaryPropertySet', cdll['icu.dll']), ((1, 'property'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_isUAlphabetic():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_isUAlphabetic', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_isULowercase():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_isULowercase', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_isUUppercase():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_isUUppercase', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_isUWhiteSpace():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_isUWhiteSpace', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_getIntPropertyValue():
    try:
        return CFUNCTYPE(Int32,Int32,win32more.Globalization.UProperty)(('u_getIntPropertyValue', cdll['icu.dll']), ((1, 'c'),(1, 'which'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_getIntPropertyMinValue():
    try:
        return CFUNCTYPE(Int32,win32more.Globalization.UProperty)(('u_getIntPropertyMinValue', cdll['icu.dll']), ((1, 'which'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_getIntPropertyMaxValue():
    try:
        return CFUNCTYPE(Int32,win32more.Globalization.UProperty)(('u_getIntPropertyMaxValue', cdll['icu.dll']), ((1, 'which'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_getIntPropertyMap():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UCPMap_head),win32more.Globalization.UProperty,POINTER(win32more.Globalization.UErrorCode))(('u_getIntPropertyMap', cdll['icu.dll']), ((1, 'property'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_getNumericValue():
    try:
        return CFUNCTYPE(Double,Int32)(('u_getNumericValue', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_islower():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_islower', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_isupper():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_isupper', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_istitle():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_istitle', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_isdigit():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_isdigit', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_isalpha():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_isalpha', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_isalnum():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_isalnum', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_isxdigit():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_isxdigit', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_ispunct():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_ispunct', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_isgraph():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_isgraph', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_isblank():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_isblank', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_isdefined():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_isdefined', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_isspace():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_isspace', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_isJavaSpaceChar():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_isJavaSpaceChar', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_isWhitespace():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_isWhitespace', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_iscntrl():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_iscntrl', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_isISOControl():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_isISOControl', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_isprint():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_isprint', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_isbase():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_isbase', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_charDirection():
    try:
        return CFUNCTYPE(win32more.Globalization.UCharDirection,Int32)(('u_charDirection', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_isMirrored():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_isMirrored', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_charMirror():
    try:
        return CFUNCTYPE(Int32,Int32)(('u_charMirror', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_getBidiPairedBracket():
    try:
        return CFUNCTYPE(Int32,Int32)(('u_getBidiPairedBracket', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_charType():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_charType', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_enumCharTypes():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCharEnumTypeRange),c_void_p)(('u_enumCharTypes', cdll['icu.dll']), ((1, 'enumRange'),(1, 'context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_getCombiningClass():
    try:
        return CFUNCTYPE(Byte,Int32)(('u_getCombiningClass', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_charDigitValue():
    try:
        return CFUNCTYPE(Int32,Int32)(('u_charDigitValue', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ublock_getCode():
    try:
        return CFUNCTYPE(win32more.Globalization.UBlockCode,Int32)(('ublock_getCode', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_charName():
    try:
        return CFUNCTYPE(Int32,Int32,win32more.Globalization.UCharNameChoice,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('u_charName', cdll['icu.dll']), ((1, 'code'),(1, 'nameChoice'),(1, 'buffer'),(1, 'bufferLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_charFromName():
    try:
        return CFUNCTYPE(Int32,win32more.Globalization.UCharNameChoice,win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('u_charFromName', cdll['icu.dll']), ((1, 'nameChoice'),(1, 'name'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_enumCharNames():
    try:
        return CFUNCTYPE(Void,Int32,Int32,POINTER(win32more.Globalization.UEnumCharNamesFn),c_void_p,win32more.Globalization.UCharNameChoice,POINTER(win32more.Globalization.UErrorCode))(('u_enumCharNames', cdll['icu.dll']), ((1, 'start'),(1, 'limit'),(1, 'fn'),(1, 'context'),(1, 'nameChoice'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_getPropertyName():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,win32more.Globalization.UProperty,win32more.Globalization.UPropertyNameChoice)(('u_getPropertyName', cdll['icu.dll']), ((1, 'property'),(1, 'nameChoice'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_getPropertyEnum():
    try:
        return CFUNCTYPE(win32more.Globalization.UProperty,win32more.Foundation.PSTR)(('u_getPropertyEnum', cdll['icu.dll']), ((1, 'alias'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_getPropertyValueName():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,win32more.Globalization.UProperty,Int32,win32more.Globalization.UPropertyNameChoice)(('u_getPropertyValueName', cdll['icu.dll']), ((1, 'property'),(1, 'value'),(1, 'nameChoice'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_getPropertyValueEnum():
    try:
        return CFUNCTYPE(Int32,win32more.Globalization.UProperty,win32more.Foundation.PSTR)(('u_getPropertyValueEnum', cdll['icu.dll']), ((1, 'property'),(1, 'alias'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_isIDStart():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_isIDStart', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_isIDPart():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_isIDPart', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_isIDIgnorable():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_isIDIgnorable', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_isJavaIDStart():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_isJavaIDStart', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_isJavaIDPart():
    try:
        return CFUNCTYPE(SByte,Int32)(('u_isJavaIDPart', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_tolower():
    try:
        return CFUNCTYPE(Int32,Int32)(('u_tolower', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_toupper():
    try:
        return CFUNCTYPE(Int32,Int32)(('u_toupper', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_totitle():
    try:
        return CFUNCTYPE(Int32,Int32)(('u_totitle', cdll['icu.dll']), ((1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_foldCase():
    try:
        return CFUNCTYPE(Int32,Int32,UInt32)(('u_foldCase', cdll['icu.dll']), ((1, 'c'),(1, 'options'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_digit():
    try:
        return CFUNCTYPE(Int32,Int32,SByte)(('u_digit', cdll['icu.dll']), ((1, 'ch'),(1, 'radix'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_forDigit():
    try:
        return CFUNCTYPE(Int32,Int32,SByte)(('u_forDigit', cdll['icu.dll']), ((1, 'digit'),(1, 'radix'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_charAge():
    try:
        return CFUNCTYPE(Void,Int32,c_char_p_no)(('u_charAge', cdll['icu.dll']), ((1, 'c'),(1, 'versionArray'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_getUnicodeVersion():
    try:
        return CFUNCTYPE(Void,c_char_p_no)(('u_getUnicodeVersion', cdll['icu.dll']), ((1, 'versionArray'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_getFC_NFKC_Closure():
    try:
        return CFUNCTYPE(Int32,Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('u_getFC_NFKC_Closure', cdll['icu.dll']), ((1, 'c'),(1, 'dest'),(1, 'destCapacity'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_open():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UBiDi_head),)(('ubidi_open', cdll['icu.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_openSized():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UBiDi_head),Int32,Int32,POINTER(win32more.Globalization.UErrorCode))(('ubidi_openSized', cdll['icu.dll']), ((1, 'maxLength'),(1, 'maxRunCount'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UBiDi_head))(('ubidi_close', cdll['icu.dll']), ((1, 'pBiDi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_setInverse():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UBiDi_head),SByte)(('ubidi_setInverse', cdll['icu.dll']), ((1, 'pBiDi'),(1, 'isInverse'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_isInverse():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UBiDi_head))(('ubidi_isInverse', cdll['icu.dll']), ((1, 'pBiDi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_orderParagraphsLTR():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UBiDi_head),SByte)(('ubidi_orderParagraphsLTR', cdll['icu.dll']), ((1, 'pBiDi'),(1, 'orderParagraphsLTR'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_isOrderParagraphsLTR():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UBiDi_head))(('ubidi_isOrderParagraphsLTR', cdll['icu.dll']), ((1, 'pBiDi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_setReorderingMode():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UBiDi_head),win32more.Globalization.UBiDiReorderingMode)(('ubidi_setReorderingMode', cdll['icu.dll']), ((1, 'pBiDi'),(1, 'reorderingMode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_getReorderingMode():
    try:
        return CFUNCTYPE(win32more.Globalization.UBiDiReorderingMode,POINTER(win32more.Globalization.UBiDi_head))(('ubidi_getReorderingMode', cdll['icu.dll']), ((1, 'pBiDi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_setReorderingOptions():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UBiDi_head),UInt32)(('ubidi_setReorderingOptions', cdll['icu.dll']), ((1, 'pBiDi'),(1, 'reorderingOptions'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_getReorderingOptions():
    try:
        return CFUNCTYPE(UInt32,POINTER(win32more.Globalization.UBiDi_head))(('ubidi_getReorderingOptions', cdll['icu.dll']), ((1, 'pBiDi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_setContext():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UBiDi_head),POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ubidi_setContext', cdll['icu.dll']), ((1, 'pBiDi'),(1, 'prologue'),(1, 'proLength'),(1, 'epilogue'),(1, 'epiLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_setPara():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UBiDi_head),POINTER(UInt16),Int32,Byte,c_char_p_no,POINTER(win32more.Globalization.UErrorCode))(('ubidi_setPara', cdll['icu.dll']), ((1, 'pBiDi'),(1, 'text'),(1, 'length'),(1, 'paraLevel'),(1, 'embeddingLevels'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_setLine():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UBiDi_head),Int32,Int32,POINTER(win32more.Globalization.UBiDi_head),POINTER(win32more.Globalization.UErrorCode))(('ubidi_setLine', cdll['icu.dll']), ((1, 'pParaBiDi'),(1, 'start'),(1, 'limit'),(1, 'pLineBiDi'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_getDirection():
    try:
        return CFUNCTYPE(win32more.Globalization.UBiDiDirection,POINTER(win32more.Globalization.UBiDi_head))(('ubidi_getDirection', cdll['icu.dll']), ((1, 'pBiDi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_getBaseDirection():
    try:
        return CFUNCTYPE(win32more.Globalization.UBiDiDirection,POINTER(UInt16),Int32)(('ubidi_getBaseDirection', cdll['icu.dll']), ((1, 'text'),(1, 'length'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_getText():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(win32more.Globalization.UBiDi_head))(('ubidi_getText', cdll['icu.dll']), ((1, 'pBiDi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_getLength():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UBiDi_head))(('ubidi_getLength', cdll['icu.dll']), ((1, 'pBiDi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_getParaLevel():
    try:
        return CFUNCTYPE(Byte,POINTER(win32more.Globalization.UBiDi_head))(('ubidi_getParaLevel', cdll['icu.dll']), ((1, 'pBiDi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_countParagraphs():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UBiDi_head))(('ubidi_countParagraphs', cdll['icu.dll']), ((1, 'pBiDi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_getParagraph():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UBiDi_head),Int32,POINTER(Int32),POINTER(Int32),c_char_p_no,POINTER(win32more.Globalization.UErrorCode))(('ubidi_getParagraph', cdll['icu.dll']), ((1, 'pBiDi'),(1, 'charIndex'),(1, 'pParaStart'),(1, 'pParaLimit'),(1, 'pParaLevel'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_getParagraphByIndex():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UBiDi_head),Int32,POINTER(Int32),POINTER(Int32),c_char_p_no,POINTER(win32more.Globalization.UErrorCode))(('ubidi_getParagraphByIndex', cdll['icu.dll']), ((1, 'pBiDi'),(1, 'paraIndex'),(1, 'pParaStart'),(1, 'pParaLimit'),(1, 'pParaLevel'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_getLevelAt():
    try:
        return CFUNCTYPE(Byte,POINTER(win32more.Globalization.UBiDi_head),Int32)(('ubidi_getLevelAt', cdll['icu.dll']), ((1, 'pBiDi'),(1, 'charIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_getLevels():
    try:
        return CFUNCTYPE(c_char_p_no,POINTER(win32more.Globalization.UBiDi_head),POINTER(win32more.Globalization.UErrorCode))(('ubidi_getLevels', cdll['icu.dll']), ((1, 'pBiDi'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_getLogicalRun():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UBiDi_head),Int32,POINTER(Int32),c_char_p_no)(('ubidi_getLogicalRun', cdll['icu.dll']), ((1, 'pBiDi'),(1, 'logicalPosition'),(1, 'pLogicalLimit'),(1, 'pLevel'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_countRuns():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UBiDi_head),POINTER(win32more.Globalization.UErrorCode))(('ubidi_countRuns', cdll['icu.dll']), ((1, 'pBiDi'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_getVisualRun():
    try:
        return CFUNCTYPE(win32more.Globalization.UBiDiDirection,POINTER(win32more.Globalization.UBiDi_head),Int32,POINTER(Int32),POINTER(Int32))(('ubidi_getVisualRun', cdll['icu.dll']), ((1, 'pBiDi'),(1, 'runIndex'),(1, 'pLogicalStart'),(1, 'pLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_getVisualIndex():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UBiDi_head),Int32,POINTER(win32more.Globalization.UErrorCode))(('ubidi_getVisualIndex', cdll['icu.dll']), ((1, 'pBiDi'),(1, 'logicalIndex'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_getLogicalIndex():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UBiDi_head),Int32,POINTER(win32more.Globalization.UErrorCode))(('ubidi_getLogicalIndex', cdll['icu.dll']), ((1, 'pBiDi'),(1, 'visualIndex'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_getLogicalMap():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UBiDi_head),POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('ubidi_getLogicalMap', cdll['icu.dll']), ((1, 'pBiDi'),(1, 'indexMap'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_getVisualMap():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UBiDi_head),POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('ubidi_getVisualMap', cdll['icu.dll']), ((1, 'pBiDi'),(1, 'indexMap'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_reorderLogical():
    try:
        return CFUNCTYPE(Void,c_char_p_no,Int32,POINTER(Int32))(('ubidi_reorderLogical', cdll['icu.dll']), ((1, 'levels'),(1, 'length'),(1, 'indexMap'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_reorderVisual():
    try:
        return CFUNCTYPE(Void,c_char_p_no,Int32,POINTER(Int32))(('ubidi_reorderVisual', cdll['icu.dll']), ((1, 'levels'),(1, 'length'),(1, 'indexMap'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_invertMap():
    try:
        return CFUNCTYPE(Void,POINTER(Int32),POINTER(Int32),Int32)(('ubidi_invertMap', cdll['icu.dll']), ((1, 'srcMap'),(1, 'destMap'),(1, 'length'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_getProcessedLength():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UBiDi_head))(('ubidi_getProcessedLength', cdll['icu.dll']), ((1, 'pBiDi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_getResultLength():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UBiDi_head))(('ubidi_getResultLength', cdll['icu.dll']), ((1, 'pBiDi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_getCustomizedClass():
    try:
        return CFUNCTYPE(win32more.Globalization.UCharDirection,POINTER(win32more.Globalization.UBiDi_head),Int32)(('ubidi_getCustomizedClass', cdll['icu.dll']), ((1, 'pBiDi'),(1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_setClassCallback():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UBiDi_head),win32more.Globalization.UBiDiClassCallback,c_void_p,POINTER(win32more.Globalization.UBiDiClassCallback),POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('ubidi_setClassCallback', cdll['icu.dll']), ((1, 'pBiDi'),(1, 'newFn'),(1, 'newContext'),(1, 'oldFn'),(1, 'oldContext'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_getClassCallback():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UBiDi_head),POINTER(win32more.Globalization.UBiDiClassCallback),POINTER(c_void_p))(('ubidi_getClassCallback', cdll['icu.dll']), ((1, 'pBiDi'),(1, 'fn'),(1, 'context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_writeReordered():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UBiDi_head),POINTER(UInt16),Int32,UInt16,POINTER(win32more.Globalization.UErrorCode))(('ubidi_writeReordered', cdll['icu.dll']), ((1, 'pBiDi'),(1, 'dest'),(1, 'destSize'),(1, 'options'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubidi_writeReverse():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),Int32,POINTER(UInt16),Int32,UInt16,POINTER(win32more.Globalization.UErrorCode))(('ubidi_writeReverse', cdll['icu.dll']), ((1, 'src'),(1, 'srcLength'),(1, 'dest'),(1, 'destSize'),(1, 'options'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubiditransform_transform():
    try:
        return CFUNCTYPE(UInt32,POINTER(win32more.Globalization.UBiDiTransform_head),POINTER(UInt16),Int32,POINTER(UInt16),Int32,Byte,win32more.Globalization.UBiDiOrder,Byte,win32more.Globalization.UBiDiOrder,win32more.Globalization.UBiDiMirroring,UInt32,POINTER(win32more.Globalization.UErrorCode))(('ubiditransform_transform', cdll['icu.dll']), ((1, 'pBiDiTransform'),(1, 'src'),(1, 'srcLength'),(1, 'dest'),(1, 'destSize'),(1, 'inParaLevel'),(1, 'inOrder'),(1, 'outParaLevel'),(1, 'outOrder'),(1, 'doMirroring'),(1, 'shapingOptions'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubiditransform_open():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UBiDiTransform_head),POINTER(win32more.Globalization.UErrorCode))(('ubiditransform_open', cdll['icu.dll']), ((1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubiditransform_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UBiDiTransform_head))(('ubiditransform_close', cdll['icu.dll']), ((1, 'pBidiTransform'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utext_close():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.UText_head))(('utext_close', cdll['icu.dll']), ((1, 'ut'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utext_openUTF8():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.UText_head),win32more.Foundation.PSTR,Int64,POINTER(win32more.Globalization.UErrorCode))(('utext_openUTF8', cdll['icu.dll']), ((1, 'ut'),(1, 's'),(1, 'length'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utext_openUChars():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.UText_head),POINTER(UInt16),Int64,POINTER(win32more.Globalization.UErrorCode))(('utext_openUChars', cdll['icu.dll']), ((1, 'ut'),(1, 's'),(1, 'length'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utext_clone():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.UText_head),SByte,SByte,POINTER(win32more.Globalization.UErrorCode))(('utext_clone', cdll['icu.dll']), ((1, 'dest'),(1, 'src'),(1, 'deep'),(1, 'readOnly'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utext_equals():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.UText_head))(('utext_equals', cdll['icu.dll']), ((1, 'a'),(1, 'b'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utext_nativeLength():
    try:
        return CFUNCTYPE(Int64,POINTER(win32more.Globalization.UText_head))(('utext_nativeLength', cdll['icu.dll']), ((1, 'ut'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utext_isLengthExpensive():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UText_head))(('utext_isLengthExpensive', cdll['icu.dll']), ((1, 'ut'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utext_char32At():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UText_head),Int64)(('utext_char32At', cdll['icu.dll']), ((1, 'ut'),(1, 'nativeIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utext_current32():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UText_head))(('utext_current32', cdll['icu.dll']), ((1, 'ut'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utext_next32():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UText_head))(('utext_next32', cdll['icu.dll']), ((1, 'ut'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utext_previous32():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UText_head))(('utext_previous32', cdll['icu.dll']), ((1, 'ut'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utext_next32From():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UText_head),Int64)(('utext_next32From', cdll['icu.dll']), ((1, 'ut'),(1, 'nativeIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utext_previous32From():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UText_head),Int64)(('utext_previous32From', cdll['icu.dll']), ((1, 'ut'),(1, 'nativeIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utext_getNativeIndex():
    try:
        return CFUNCTYPE(Int64,POINTER(win32more.Globalization.UText_head))(('utext_getNativeIndex', cdll['icu.dll']), ((1, 'ut'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utext_setNativeIndex():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UText_head),Int64)(('utext_setNativeIndex', cdll['icu.dll']), ((1, 'ut'),(1, 'nativeIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utext_moveIndex32():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UText_head),Int32)(('utext_moveIndex32', cdll['icu.dll']), ((1, 'ut'),(1, 'delta'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utext_getPreviousNativeIndex():
    try:
        return CFUNCTYPE(Int64,POINTER(win32more.Globalization.UText_head))(('utext_getPreviousNativeIndex', cdll['icu.dll']), ((1, 'ut'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utext_extract():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UText_head),Int64,Int64,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('utext_extract', cdll['icu.dll']), ((1, 'ut'),(1, 'nativeStart'),(1, 'nativeLimit'),(1, 'dest'),(1, 'destCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utext_isWritable():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UText_head))(('utext_isWritable', cdll['icu.dll']), ((1, 'ut'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utext_hasMetaData():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UText_head))(('utext_hasMetaData', cdll['icu.dll']), ((1, 'ut'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utext_replace():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UText_head),Int64,Int64,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('utext_replace', cdll['icu.dll']), ((1, 'ut'),(1, 'nativeStart'),(1, 'nativeLimit'),(1, 'replacementText'),(1, 'replacementLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utext_copy():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UText_head),Int64,Int64,Int64,SByte,POINTER(win32more.Globalization.UErrorCode))(('utext_copy', cdll['icu.dll']), ((1, 'ut'),(1, 'nativeStart'),(1, 'nativeLimit'),(1, 'destIndex'),(1, 'move'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utext_freeze():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UText_head))(('utext_freeze', cdll['icu.dll']), ((1, 'ut'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utext_setup():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.UText_head),Int32,POINTER(win32more.Globalization.UErrorCode))(('utext_setup', cdll['icu.dll']), ((1, 'ut'),(1, 'extraSpace'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_openEmpty():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.USet_head),)(('uset_openEmpty', cdll['icu.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_open():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.USet_head),Int32,Int32)(('uset_open', cdll['icu.dll']), ((1, 'start'),(1, 'end'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_openPattern():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.USet_head),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uset_openPattern', cdll['icu.dll']), ((1, 'pattern'),(1, 'patternLength'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_openPatternOptions():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.USet_head),POINTER(UInt16),Int32,UInt32,POINTER(win32more.Globalization.UErrorCode))(('uset_openPatternOptions', cdll['icu.dll']), ((1, 'pattern'),(1, 'patternLength'),(1, 'options'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USet_head))(('uset_close', cdll['icu.dll']), ((1, 'set'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_clone():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.USet_head),POINTER(win32more.Globalization.USet_head))(('uset_clone', cdll['icu.dll']), ((1, 'set'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_isFrozen():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.USet_head))(('uset_isFrozen', cdll['icu.dll']), ((1, 'set'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_freeze():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USet_head))(('uset_freeze', cdll['icu.dll']), ((1, 'set'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_cloneAsThawed():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.USet_head),POINTER(win32more.Globalization.USet_head))(('uset_cloneAsThawed', cdll['icu.dll']), ((1, 'set'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_set():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USet_head),Int32,Int32)(('uset_set', cdll['icu.dll']), ((1, 'set'),(1, 'start'),(1, 'end'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_applyPattern():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.USet_head),POINTER(UInt16),Int32,UInt32,POINTER(win32more.Globalization.UErrorCode))(('uset_applyPattern', cdll['icu.dll']), ((1, 'set'),(1, 'pattern'),(1, 'patternLength'),(1, 'options'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_applyIntPropertyValue():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USet_head),win32more.Globalization.UProperty,Int32,POINTER(win32more.Globalization.UErrorCode))(('uset_applyIntPropertyValue', cdll['icu.dll']), ((1, 'set'),(1, 'prop'),(1, 'value'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_applyPropertyAlias():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USet_head),POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uset_applyPropertyAlias', cdll['icu.dll']), ((1, 'set'),(1, 'prop'),(1, 'propLength'),(1, 'value'),(1, 'valueLength'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_resemblesPattern():
    try:
        return CFUNCTYPE(SByte,POINTER(UInt16),Int32,Int32)(('uset_resemblesPattern', cdll['icu.dll']), ((1, 'pattern'),(1, 'patternLength'),(1, 'pos'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_toPattern():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.USet_head),POINTER(UInt16),Int32,SByte,POINTER(win32more.Globalization.UErrorCode))(('uset_toPattern', cdll['icu.dll']), ((1, 'set'),(1, 'result'),(1, 'resultCapacity'),(1, 'escapeUnprintable'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_add():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USet_head),Int32)(('uset_add', cdll['icu.dll']), ((1, 'set'),(1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_addAll():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USet_head),POINTER(win32more.Globalization.USet_head))(('uset_addAll', cdll['icu.dll']), ((1, 'set'),(1, 'additionalSet'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_addRange():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USet_head),Int32,Int32)(('uset_addRange', cdll['icu.dll']), ((1, 'set'),(1, 'start'),(1, 'end'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_addString():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USet_head),POINTER(UInt16),Int32)(('uset_addString', cdll['icu.dll']), ((1, 'set'),(1, 'str'),(1, 'strLen'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_addAllCodePoints():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USet_head),POINTER(UInt16),Int32)(('uset_addAllCodePoints', cdll['icu.dll']), ((1, 'set'),(1, 'str'),(1, 'strLen'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_remove():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USet_head),Int32)(('uset_remove', cdll['icu.dll']), ((1, 'set'),(1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_removeRange():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USet_head),Int32,Int32)(('uset_removeRange', cdll['icu.dll']), ((1, 'set'),(1, 'start'),(1, 'end'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_removeString():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USet_head),POINTER(UInt16),Int32)(('uset_removeString', cdll['icu.dll']), ((1, 'set'),(1, 'str'),(1, 'strLen'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_removeAll():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USet_head),POINTER(win32more.Globalization.USet_head))(('uset_removeAll', cdll['icu.dll']), ((1, 'set'),(1, 'removeSet'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_retain():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USet_head),Int32,Int32)(('uset_retain', cdll['icu.dll']), ((1, 'set'),(1, 'start'),(1, 'end'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_retainAll():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USet_head),POINTER(win32more.Globalization.USet_head))(('uset_retainAll', cdll['icu.dll']), ((1, 'set'),(1, 'retain'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_compact():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USet_head))(('uset_compact', cdll['icu.dll']), ((1, 'set'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_complement():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USet_head))(('uset_complement', cdll['icu.dll']), ((1, 'set'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_complementAll():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USet_head),POINTER(win32more.Globalization.USet_head))(('uset_complementAll', cdll['icu.dll']), ((1, 'set'),(1, 'complement'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_clear():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USet_head))(('uset_clear', cdll['icu.dll']), ((1, 'set'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_closeOver():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USet_head),Int32)(('uset_closeOver', cdll['icu.dll']), ((1, 'set'),(1, 'attributes'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_removeAllStrings():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USet_head))(('uset_removeAllStrings', cdll['icu.dll']), ((1, 'set'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_isEmpty():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.USet_head))(('uset_isEmpty', cdll['icu.dll']), ((1, 'set'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_contains():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.USet_head),Int32)(('uset_contains', cdll['icu.dll']), ((1, 'set'),(1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_containsRange():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.USet_head),Int32,Int32)(('uset_containsRange', cdll['icu.dll']), ((1, 'set'),(1, 'start'),(1, 'end'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_containsString():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.USet_head),POINTER(UInt16),Int32)(('uset_containsString', cdll['icu.dll']), ((1, 'set'),(1, 'str'),(1, 'strLen'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_indexOf():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.USet_head),Int32)(('uset_indexOf', cdll['icu.dll']), ((1, 'set'),(1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_charAt():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.USet_head),Int32)(('uset_charAt', cdll['icu.dll']), ((1, 'set'),(1, 'charIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_size():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.USet_head))(('uset_size', cdll['icu.dll']), ((1, 'set'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_getItemCount():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.USet_head))(('uset_getItemCount', cdll['icu.dll']), ((1, 'set'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_getItem():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.USet_head),Int32,POINTER(Int32),POINTER(Int32),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uset_getItem', cdll['icu.dll']), ((1, 'set'),(1, 'itemIndex'),(1, 'start'),(1, 'end'),(1, 'str'),(1, 'strCapacity'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_containsAll():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.USet_head),POINTER(win32more.Globalization.USet_head))(('uset_containsAll', cdll['icu.dll']), ((1, 'set1'),(1, 'set2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_containsAllCodePoints():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.USet_head),POINTER(UInt16),Int32)(('uset_containsAllCodePoints', cdll['icu.dll']), ((1, 'set'),(1, 'str'),(1, 'strLen'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_containsNone():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.USet_head),POINTER(win32more.Globalization.USet_head))(('uset_containsNone', cdll['icu.dll']), ((1, 'set1'),(1, 'set2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_containsSome():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.USet_head),POINTER(win32more.Globalization.USet_head))(('uset_containsSome', cdll['icu.dll']), ((1, 'set1'),(1, 'set2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_span():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.USet_head),POINTER(UInt16),Int32,win32more.Globalization.USetSpanCondition)(('uset_span', cdll['icu.dll']), ((1, 'set'),(1, 's'),(1, 'length'),(1, 'spanCondition'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_spanBack():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.USet_head),POINTER(UInt16),Int32,win32more.Globalization.USetSpanCondition)(('uset_spanBack', cdll['icu.dll']), ((1, 'set'),(1, 's'),(1, 'length'),(1, 'spanCondition'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_spanUTF8():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.USet_head),win32more.Foundation.PSTR,Int32,win32more.Globalization.USetSpanCondition)(('uset_spanUTF8', cdll['icu.dll']), ((1, 'set'),(1, 's'),(1, 'length'),(1, 'spanCondition'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_spanBackUTF8():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.USet_head),win32more.Foundation.PSTR,Int32,win32more.Globalization.USetSpanCondition)(('uset_spanBackUTF8', cdll['icu.dll']), ((1, 'set'),(1, 's'),(1, 'length'),(1, 'spanCondition'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_equals():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.USet_head),POINTER(win32more.Globalization.USet_head))(('uset_equals', cdll['icu.dll']), ((1, 'set1'),(1, 'set2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_serialize():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.USet_head),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uset_serialize', cdll['icu.dll']), ((1, 'set'),(1, 'dest'),(1, 'destCapacity'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_getSerializedSet():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.USerializedSet_head),POINTER(UInt16),Int32)(('uset_getSerializedSet', cdll['icu.dll']), ((1, 'fillSet'),(1, 'src'),(1, 'srcLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_setSerializedToOne():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USerializedSet_head),Int32)(('uset_setSerializedToOne', cdll['icu.dll']), ((1, 'fillSet'),(1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_serializedContains():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.USerializedSet_head),Int32)(('uset_serializedContains', cdll['icu.dll']), ((1, 'set'),(1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_getSerializedRangeCount():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.USerializedSet_head))(('uset_getSerializedRangeCount', cdll['icu.dll']), ((1, 'set'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uset_getSerializedRange():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.USerializedSet_head),Int32,POINTER(Int32),POINTER(Int32))(('uset_getSerializedRange', cdll['icu.dll']), ((1, 'set'),(1, 'rangeIndex'),(1, 'pStart'),(1, 'pEnd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unorm2_getNFCInstance():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UNormalizer2_head),POINTER(win32more.Globalization.UErrorCode))(('unorm2_getNFCInstance', cdll['icu.dll']), ((1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unorm2_getNFDInstance():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UNormalizer2_head),POINTER(win32more.Globalization.UErrorCode))(('unorm2_getNFDInstance', cdll['icu.dll']), ((1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unorm2_getNFKCInstance():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UNormalizer2_head),POINTER(win32more.Globalization.UErrorCode))(('unorm2_getNFKCInstance', cdll['icu.dll']), ((1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unorm2_getNFKDInstance():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UNormalizer2_head),POINTER(win32more.Globalization.UErrorCode))(('unorm2_getNFKDInstance', cdll['icu.dll']), ((1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unorm2_getNFKCCasefoldInstance():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UNormalizer2_head),POINTER(win32more.Globalization.UErrorCode))(('unorm2_getNFKCCasefoldInstance', cdll['icu.dll']), ((1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unorm2_getInstance():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UNormalizer2_head),win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Globalization.UNormalization2Mode,POINTER(win32more.Globalization.UErrorCode))(('unorm2_getInstance', cdll['icu.dll']), ((1, 'packageName'),(1, 'name'),(1, 'mode'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unorm2_openFiltered():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UNormalizer2_head),POINTER(win32more.Globalization.UNormalizer2_head),POINTER(win32more.Globalization.USet_head),POINTER(win32more.Globalization.UErrorCode))(('unorm2_openFiltered', cdll['icu.dll']), ((1, 'norm2'),(1, 'filterSet'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unorm2_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UNormalizer2_head))(('unorm2_close', cdll['icu.dll']), ((1, 'norm2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unorm2_normalize():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UNormalizer2_head),POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('unorm2_normalize', cdll['icu.dll']), ((1, 'norm2'),(1, 'src'),(1, 'length'),(1, 'dest'),(1, 'capacity'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unorm2_normalizeSecondAndAppend():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UNormalizer2_head),POINTER(UInt16),Int32,Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('unorm2_normalizeSecondAndAppend', cdll['icu.dll']), ((1, 'norm2'),(1, 'first'),(1, 'firstLength'),(1, 'firstCapacity'),(1, 'second'),(1, 'secondLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unorm2_append():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UNormalizer2_head),POINTER(UInt16),Int32,Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('unorm2_append', cdll['icu.dll']), ((1, 'norm2'),(1, 'first'),(1, 'firstLength'),(1, 'firstCapacity'),(1, 'second'),(1, 'secondLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unorm2_getDecomposition():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UNormalizer2_head),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('unorm2_getDecomposition', cdll['icu.dll']), ((1, 'norm2'),(1, 'c'),(1, 'decomposition'),(1, 'capacity'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unorm2_getRawDecomposition():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UNormalizer2_head),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('unorm2_getRawDecomposition', cdll['icu.dll']), ((1, 'norm2'),(1, 'c'),(1, 'decomposition'),(1, 'capacity'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unorm2_composePair():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UNormalizer2_head),Int32,Int32)(('unorm2_composePair', cdll['icu.dll']), ((1, 'norm2'),(1, 'a'),(1, 'b'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unorm2_getCombiningClass():
    try:
        return CFUNCTYPE(Byte,POINTER(win32more.Globalization.UNormalizer2_head),Int32)(('unorm2_getCombiningClass', cdll['icu.dll']), ((1, 'norm2'),(1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unorm2_isNormalized():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UNormalizer2_head),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('unorm2_isNormalized', cdll['icu.dll']), ((1, 'norm2'),(1, 's'),(1, 'length'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unorm2_quickCheck():
    try:
        return CFUNCTYPE(win32more.Globalization.UNormalizationCheckResult,POINTER(win32more.Globalization.UNormalizer2_head),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('unorm2_quickCheck', cdll['icu.dll']), ((1, 'norm2'),(1, 's'),(1, 'length'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unorm2_spanQuickCheckYes():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UNormalizer2_head),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('unorm2_spanQuickCheckYes', cdll['icu.dll']), ((1, 'norm2'),(1, 's'),(1, 'length'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unorm2_hasBoundaryBefore():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UNormalizer2_head),Int32)(('unorm2_hasBoundaryBefore', cdll['icu.dll']), ((1, 'norm2'),(1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unorm2_hasBoundaryAfter():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UNormalizer2_head),Int32)(('unorm2_hasBoundaryAfter', cdll['icu.dll']), ((1, 'norm2'),(1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unorm2_isInert():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UNormalizer2_head),Int32)(('unorm2_isInert', cdll['icu.dll']), ((1, 'norm2'),(1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unorm_compare():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),Int32,POINTER(UInt16),Int32,UInt32,POINTER(win32more.Globalization.UErrorCode))(('unorm_compare', cdll['icu.dll']), ((1, 's1'),(1, 'length1'),(1, 's2'),(1, 'length2'),(1, 'options'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnvsel_open():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UConverterSelector_head),POINTER(POINTER(SByte)),Int32,POINTER(win32more.Globalization.USet_head),win32more.Globalization.UConverterUnicodeSet,POINTER(win32more.Globalization.UErrorCode))(('ucnvsel_open', cdll['icu.dll']), ((1, 'converterList'),(1, 'converterListSize'),(1, 'excludedCodePoints'),(1, 'whichSet'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnvsel_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConverterSelector_head))(('ucnvsel_close', cdll['icu.dll']), ((1, 'sel'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnvsel_openFromSerialized():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UConverterSelector_head),c_void_p,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucnvsel_openFromSerialized', cdll['icu.dll']), ((1, 'buffer'),(1, 'length'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnvsel_serialize():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UConverterSelector_head),c_void_p,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucnvsel_serialize', cdll['icu.dll']), ((1, 'sel'),(1, 'buffer'),(1, 'bufferCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnvsel_selectForString():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),POINTER(win32more.Globalization.UConverterSelector_head),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucnvsel_selectForString', cdll['icu.dll']), ((1, 'sel'),(1, 's'),(1, 'length'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucnvsel_selectForUTF8():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),POINTER(win32more.Globalization.UConverterSelector_head),win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucnvsel_selectForUTF8', cdll['icu.dll']), ((1, 'sel'),(1, 's'),(1, 'length'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_charsToUChars():
    try:
        return CFUNCTYPE(Void,win32more.Foundation.PSTR,POINTER(UInt16),Int32)(('u_charsToUChars', cdll['icu.dll']), ((1, 'cs'),(1, 'us'),(1, 'length'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_UCharsToChars():
    try:
        return CFUNCTYPE(Void,POINTER(UInt16),win32more.Foundation.PSTR,Int32)(('u_UCharsToChars', cdll['icu.dll']), ((1, 'us'),(1, 'cs'),(1, 'length'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strlen():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16))(('u_strlen', cdll['icu.dll']), ((1, 's'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_countChar32():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),Int32)(('u_countChar32', cdll['icu.dll']), ((1, 's'),(1, 'length'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strHasMoreChar32Than():
    try:
        return CFUNCTYPE(SByte,POINTER(UInt16),Int32,Int32)(('u_strHasMoreChar32Than', cdll['icu.dll']), ((1, 's'),(1, 'length'),(1, 'number'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strcat():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),POINTER(UInt16))(('u_strcat', cdll['icu.dll']), ((1, 'dst'),(1, 'src'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strncat():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),POINTER(UInt16),Int32)(('u_strncat', cdll['icu.dll']), ((1, 'dst'),(1, 'src'),(1, 'n'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strstr():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),POINTER(UInt16))(('u_strstr', cdll['icu.dll']), ((1, 's'),(1, 'substring'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strFindFirst():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),Int32,POINTER(UInt16),Int32)(('u_strFindFirst', cdll['icu.dll']), ((1, 's'),(1, 'length'),(1, 'substring'),(1, 'subLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strchr():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),UInt16)(('u_strchr', cdll['icu.dll']), ((1, 's'),(1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strchr32():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),Int32)(('u_strchr32', cdll['icu.dll']), ((1, 's'),(1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strrstr():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),POINTER(UInt16))(('u_strrstr', cdll['icu.dll']), ((1, 's'),(1, 'substring'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strFindLast():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),Int32,POINTER(UInt16),Int32)(('u_strFindLast', cdll['icu.dll']), ((1, 's'),(1, 'length'),(1, 'substring'),(1, 'subLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strrchr():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),UInt16)(('u_strrchr', cdll['icu.dll']), ((1, 's'),(1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strrchr32():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),Int32)(('u_strrchr32', cdll['icu.dll']), ((1, 's'),(1, 'c'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strpbrk():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),POINTER(UInt16))(('u_strpbrk', cdll['icu.dll']), ((1, 'string'),(1, 'matchSet'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strcspn():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),POINTER(UInt16))(('u_strcspn', cdll['icu.dll']), ((1, 'string'),(1, 'matchSet'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strspn():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),POINTER(UInt16))(('u_strspn', cdll['icu.dll']), ((1, 'string'),(1, 'matchSet'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strtok_r():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),POINTER(UInt16),POINTER(POINTER(UInt16)))(('u_strtok_r', cdll['icu.dll']), ((1, 'src'),(1, 'delim'),(1, 'saveState'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strcmp():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),POINTER(UInt16))(('u_strcmp', cdll['icu.dll']), ((1, 's1'),(1, 's2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strcmpCodePointOrder():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),POINTER(UInt16))(('u_strcmpCodePointOrder', cdll['icu.dll']), ((1, 's1'),(1, 's2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strCompare():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),Int32,POINTER(UInt16),Int32,SByte)(('u_strCompare', cdll['icu.dll']), ((1, 's1'),(1, 'length1'),(1, 's2'),(1, 'length2'),(1, 'codePointOrder'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strCompareIter():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCharIterator_head),POINTER(win32more.Globalization.UCharIterator_head),SByte)(('u_strCompareIter', cdll['icu.dll']), ((1, 'iter1'),(1, 'iter2'),(1, 'codePointOrder'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strCaseCompare():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),Int32,POINTER(UInt16),Int32,UInt32,POINTER(win32more.Globalization.UErrorCode))(('u_strCaseCompare', cdll['icu.dll']), ((1, 's1'),(1, 'length1'),(1, 's2'),(1, 'length2'),(1, 'options'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strncmp():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),POINTER(UInt16),Int32)(('u_strncmp', cdll['icu.dll']), ((1, 'ucs1'),(1, 'ucs2'),(1, 'n'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strncmpCodePointOrder():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),POINTER(UInt16),Int32)(('u_strncmpCodePointOrder', cdll['icu.dll']), ((1, 's1'),(1, 's2'),(1, 'n'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strcasecmp():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),POINTER(UInt16),UInt32)(('u_strcasecmp', cdll['icu.dll']), ((1, 's1'),(1, 's2'),(1, 'options'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strncasecmp():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),POINTER(UInt16),Int32,UInt32)(('u_strncasecmp', cdll['icu.dll']), ((1, 's1'),(1, 's2'),(1, 'n'),(1, 'options'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_memcasecmp():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),POINTER(UInt16),Int32,UInt32)(('u_memcasecmp', cdll['icu.dll']), ((1, 's1'),(1, 's2'),(1, 'length'),(1, 'options'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strcpy():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),POINTER(UInt16))(('u_strcpy', cdll['icu.dll']), ((1, 'dst'),(1, 'src'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strncpy():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),POINTER(UInt16),Int32)(('u_strncpy', cdll['icu.dll']), ((1, 'dst'),(1, 'src'),(1, 'n'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_uastrcpy():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),win32more.Foundation.PSTR)(('u_uastrcpy', cdll['icu.dll']), ((1, 'dst'),(1, 'src'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_uastrncpy():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),win32more.Foundation.PSTR,Int32)(('u_uastrncpy', cdll['icu.dll']), ((1, 'dst'),(1, 'src'),(1, 'n'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_austrcpy():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(UInt16))(('u_austrcpy', cdll['icu.dll']), ((1, 'dst'),(1, 'src'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_austrncpy():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(UInt16),Int32)(('u_austrncpy', cdll['icu.dll']), ((1, 'dst'),(1, 'src'),(1, 'n'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_memcpy():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),POINTER(UInt16),Int32)(('u_memcpy', cdll['icu.dll']), ((1, 'dest'),(1, 'src'),(1, 'count'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_memmove():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),POINTER(UInt16),Int32)(('u_memmove', cdll['icu.dll']), ((1, 'dest'),(1, 'src'),(1, 'count'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_memset():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),UInt16,Int32)(('u_memset', cdll['icu.dll']), ((1, 'dest'),(1, 'c'),(1, 'count'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_memcmp():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),POINTER(UInt16),Int32)(('u_memcmp', cdll['icu.dll']), ((1, 'buf1'),(1, 'buf2'),(1, 'count'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_memcmpCodePointOrder():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),POINTER(UInt16),Int32)(('u_memcmpCodePointOrder', cdll['icu.dll']), ((1, 's1'),(1, 's2'),(1, 'count'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_memchr():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),UInt16,Int32)(('u_memchr', cdll['icu.dll']), ((1, 's'),(1, 'c'),(1, 'count'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_memchr32():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),Int32,Int32)(('u_memchr32', cdll['icu.dll']), ((1, 's'),(1, 'c'),(1, 'count'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_memrchr():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),UInt16,Int32)(('u_memrchr', cdll['icu.dll']), ((1, 's'),(1, 'c'),(1, 'count'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_memrchr32():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),Int32,Int32)(('u_memrchr32', cdll['icu.dll']), ((1, 's'),(1, 'c'),(1, 'count'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_unescape():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,POINTER(UInt16),Int32)(('u_unescape', cdll['icu.dll']), ((1, 'src'),(1, 'dest'),(1, 'destCapacity'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_unescapeAt():
    try:
        return CFUNCTYPE(Int32,win32more.Globalization.UNESCAPE_CHAR_AT,POINTER(Int32),Int32,c_void_p)(('u_unescapeAt', cdll['icu.dll']), ((1, 'charAt'),(1, 'offset'),(1, 'length'),(1, 'context'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strToUpper():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),Int32,POINTER(UInt16),Int32,win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('u_strToUpper', cdll['icu.dll']), ((1, 'dest'),(1, 'destCapacity'),(1, 'src'),(1, 'srcLength'),(1, 'locale'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strToLower():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),Int32,POINTER(UInt16),Int32,win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('u_strToLower', cdll['icu.dll']), ((1, 'dest'),(1, 'destCapacity'),(1, 'src'),(1, 'srcLength'),(1, 'locale'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strToTitle():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UBreakIterator_head),win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('u_strToTitle', cdll['icu.dll']), ((1, 'dest'),(1, 'destCapacity'),(1, 'src'),(1, 'srcLength'),(1, 'titleIter'),(1, 'locale'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strFoldCase():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),Int32,POINTER(UInt16),Int32,UInt32,POINTER(win32more.Globalization.UErrorCode))(('u_strFoldCase', cdll['icu.dll']), ((1, 'dest'),(1, 'destCapacity'),(1, 'src'),(1, 'srcLength'),(1, 'options'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strToWCS():
    try:
        return CFUNCTYPE(win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,Int32,POINTER(Int32),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('u_strToWCS', cdll['icu.dll']), ((1, 'dest'),(1, 'destCapacity'),(1, 'pDestLength'),(1, 'src'),(1, 'srcLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strFromWCS():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),Int32,POINTER(Int32),win32more.Foundation.PWSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('u_strFromWCS', cdll['icu.dll']), ((1, 'dest'),(1, 'destCapacity'),(1, 'pDestLength'),(1, 'src'),(1, 'srcLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strToUTF8():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,win32more.Foundation.PSTR,Int32,POINTER(Int32),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('u_strToUTF8', cdll['icu.dll']), ((1, 'dest'),(1, 'destCapacity'),(1, 'pDestLength'),(1, 'src'),(1, 'srcLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strFromUTF8():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),Int32,POINTER(Int32),win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('u_strFromUTF8', cdll['icu.dll']), ((1, 'dest'),(1, 'destCapacity'),(1, 'pDestLength'),(1, 'src'),(1, 'srcLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strToUTF8WithSub():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,win32more.Foundation.PSTR,Int32,POINTER(Int32),POINTER(UInt16),Int32,Int32,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('u_strToUTF8WithSub', cdll['icu.dll']), ((1, 'dest'),(1, 'destCapacity'),(1, 'pDestLength'),(1, 'src'),(1, 'srcLength'),(1, 'subchar'),(1, 'pNumSubstitutions'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strFromUTF8WithSub():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),Int32,POINTER(Int32),win32more.Foundation.PSTR,Int32,Int32,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('u_strFromUTF8WithSub', cdll['icu.dll']), ((1, 'dest'),(1, 'destCapacity'),(1, 'pDestLength'),(1, 'src'),(1, 'srcLength'),(1, 'subchar'),(1, 'pNumSubstitutions'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strFromUTF8Lenient():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),Int32,POINTER(Int32),win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('u_strFromUTF8Lenient', cdll['icu.dll']), ((1, 'dest'),(1, 'destCapacity'),(1, 'pDestLength'),(1, 'src'),(1, 'srcLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strToUTF32():
    try:
        return CFUNCTYPE(POINTER(Int32),POINTER(Int32),Int32,POINTER(Int32),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('u_strToUTF32', cdll['icu.dll']), ((1, 'dest'),(1, 'destCapacity'),(1, 'pDestLength'),(1, 'src'),(1, 'srcLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strFromUTF32():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),Int32,POINTER(Int32),POINTER(Int32),Int32,POINTER(win32more.Globalization.UErrorCode))(('u_strFromUTF32', cdll['icu.dll']), ((1, 'dest'),(1, 'destCapacity'),(1, 'pDestLength'),(1, 'src'),(1, 'srcLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strToUTF32WithSub():
    try:
        return CFUNCTYPE(POINTER(Int32),POINTER(Int32),Int32,POINTER(Int32),POINTER(UInt16),Int32,Int32,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('u_strToUTF32WithSub', cdll['icu.dll']), ((1, 'dest'),(1, 'destCapacity'),(1, 'pDestLength'),(1, 'src'),(1, 'srcLength'),(1, 'subchar'),(1, 'pNumSubstitutions'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strFromUTF32WithSub():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),Int32,POINTER(Int32),POINTER(Int32),Int32,Int32,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('u_strFromUTF32WithSub', cdll['icu.dll']), ((1, 'dest'),(1, 'destCapacity'),(1, 'pDestLength'),(1, 'src'),(1, 'srcLength'),(1, 'subchar'),(1, 'pNumSubstitutions'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strToJavaModifiedUTF8():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,win32more.Foundation.PSTR,Int32,POINTER(Int32),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('u_strToJavaModifiedUTF8', cdll['icu.dll']), ((1, 'dest'),(1, 'destCapacity'),(1, 'pDestLength'),(1, 'src'),(1, 'srcLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_strFromJavaModifiedUTF8WithSub():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(UInt16),Int32,POINTER(Int32),win32more.Foundation.PSTR,Int32,Int32,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('u_strFromJavaModifiedUTF8WithSub', cdll['icu.dll']), ((1, 'dest'),(1, 'destCapacity'),(1, 'pDestLength'),(1, 'src'),(1, 'srcLength'),(1, 'subchar'),(1, 'pNumSubstitutions'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucasemap_open():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UCaseMap_head),win32more.Foundation.PSTR,UInt32,POINTER(win32more.Globalization.UErrorCode))(('ucasemap_open', cdll['icu.dll']), ((1, 'locale'),(1, 'options'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucasemap_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCaseMap_head))(('ucasemap_close', cdll['icu.dll']), ((1, 'csm'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucasemap_getLocale():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,POINTER(win32more.Globalization.UCaseMap_head))(('ucasemap_getLocale', cdll['icu.dll']), ((1, 'csm'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucasemap_getOptions():
    try:
        return CFUNCTYPE(UInt32,POINTER(win32more.Globalization.UCaseMap_head))(('ucasemap_getOptions', cdll['icu.dll']), ((1, 'csm'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucasemap_setLocale():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCaseMap_head),win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('ucasemap_setLocale', cdll['icu.dll']), ((1, 'csm'),(1, 'locale'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucasemap_setOptions():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCaseMap_head),UInt32,POINTER(win32more.Globalization.UErrorCode))(('ucasemap_setOptions', cdll['icu.dll']), ((1, 'csm'),(1, 'options'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucasemap_getBreakIterator():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UBreakIterator_head),POINTER(win32more.Globalization.UCaseMap_head))(('ucasemap_getBreakIterator', cdll['icu.dll']), ((1, 'csm'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucasemap_setBreakIterator():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCaseMap_head),POINTER(win32more.Globalization.UBreakIterator_head),POINTER(win32more.Globalization.UErrorCode))(('ucasemap_setBreakIterator', cdll['icu.dll']), ((1, 'csm'),(1, 'iterToAdopt'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucasemap_toTitle():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCaseMap_head),POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucasemap_toTitle', cdll['icu.dll']), ((1, 'csm'),(1, 'dest'),(1, 'destCapacity'),(1, 'src'),(1, 'srcLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucasemap_utf8ToLower():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCaseMap_head),win32more.Foundation.PSTR,Int32,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucasemap_utf8ToLower', cdll['icu.dll']), ((1, 'csm'),(1, 'dest'),(1, 'destCapacity'),(1, 'src'),(1, 'srcLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucasemap_utf8ToUpper():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCaseMap_head),win32more.Foundation.PSTR,Int32,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucasemap_utf8ToUpper', cdll['icu.dll']), ((1, 'csm'),(1, 'dest'),(1, 'destCapacity'),(1, 'src'),(1, 'srcLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucasemap_utf8ToTitle():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCaseMap_head),win32more.Foundation.PSTR,Int32,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucasemap_utf8ToTitle', cdll['icu.dll']), ((1, 'csm'),(1, 'dest'),(1, 'destCapacity'),(1, 'src'),(1, 'srcLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucasemap_utf8FoldCase():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCaseMap_head),win32more.Foundation.PSTR,Int32,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucasemap_utf8FoldCase', cdll['icu.dll']), ((1, 'csm'),(1, 'dest'),(1, 'destCapacity'),(1, 'src'),(1, 'srcLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usprep_open():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UStringPrepProfile_head),win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('usprep_open', cdll['icu.dll']), ((1, 'path'),(1, 'fileName'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usprep_openByType():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UStringPrepProfile_head),win32more.Globalization.UStringPrepProfileType,POINTER(win32more.Globalization.UErrorCode))(('usprep_openByType', cdll['icu.dll']), ((1, 'type'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usprep_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UStringPrepProfile_head))(('usprep_close', cdll['icu.dll']), ((1, 'profile'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usprep_prepare():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UStringPrepProfile_head),POINTER(UInt16),Int32,POINTER(UInt16),Int32,Int32,POINTER(win32more.Globalization.UParseError_head),POINTER(win32more.Globalization.UErrorCode))(('usprep_prepare', cdll['icu.dll']), ((1, 'prep'),(1, 'src'),(1, 'srcLength'),(1, 'dest'),(1, 'destCapacity'),(1, 'options'),(1, 'parseError'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uidna_openUTS46():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UIDNA_head),UInt32,POINTER(win32more.Globalization.UErrorCode))(('uidna_openUTS46', cdll['icu.dll']), ((1, 'options'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uidna_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UIDNA_head))(('uidna_close', cdll['icu.dll']), ((1, 'idna'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uidna_labelToASCII():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UIDNA_head),POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UIDNAInfo_head),POINTER(win32more.Globalization.UErrorCode))(('uidna_labelToASCII', cdll['icu.dll']), ((1, 'idna'),(1, 'label'),(1, 'length'),(1, 'dest'),(1, 'capacity'),(1, 'pInfo'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uidna_labelToUnicode():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UIDNA_head),POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UIDNAInfo_head),POINTER(win32more.Globalization.UErrorCode))(('uidna_labelToUnicode', cdll['icu.dll']), ((1, 'idna'),(1, 'label'),(1, 'length'),(1, 'dest'),(1, 'capacity'),(1, 'pInfo'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uidna_nameToASCII():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UIDNA_head),POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UIDNAInfo_head),POINTER(win32more.Globalization.UErrorCode))(('uidna_nameToASCII', cdll['icu.dll']), ((1, 'idna'),(1, 'name'),(1, 'length'),(1, 'dest'),(1, 'capacity'),(1, 'pInfo'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uidna_nameToUnicode():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UIDNA_head),POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UIDNAInfo_head),POINTER(win32more.Globalization.UErrorCode))(('uidna_nameToUnicode', cdll['icu.dll']), ((1, 'idna'),(1, 'name'),(1, 'length'),(1, 'dest'),(1, 'capacity'),(1, 'pInfo'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uidna_labelToASCII_UTF8():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UIDNA_head),win32more.Foundation.PSTR,Int32,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UIDNAInfo_head),POINTER(win32more.Globalization.UErrorCode))(('uidna_labelToASCII_UTF8', cdll['icu.dll']), ((1, 'idna'),(1, 'label'),(1, 'length'),(1, 'dest'),(1, 'capacity'),(1, 'pInfo'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uidna_labelToUnicodeUTF8():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UIDNA_head),win32more.Foundation.PSTR,Int32,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UIDNAInfo_head),POINTER(win32more.Globalization.UErrorCode))(('uidna_labelToUnicodeUTF8', cdll['icu.dll']), ((1, 'idna'),(1, 'label'),(1, 'length'),(1, 'dest'),(1, 'capacity'),(1, 'pInfo'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uidna_nameToASCII_UTF8():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UIDNA_head),win32more.Foundation.PSTR,Int32,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UIDNAInfo_head),POINTER(win32more.Globalization.UErrorCode))(('uidna_nameToASCII_UTF8', cdll['icu.dll']), ((1, 'idna'),(1, 'name'),(1, 'length'),(1, 'dest'),(1, 'capacity'),(1, 'pInfo'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uidna_nameToUnicodeUTF8():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UIDNA_head),win32more.Foundation.PSTR,Int32,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UIDNAInfo_head),POINTER(win32more.Globalization.UErrorCode))(('uidna_nameToUnicodeUTF8', cdll['icu.dll']), ((1, 'idna'),(1, 'name'),(1, 'length'),(1, 'dest'),(1, 'capacity'),(1, 'pInfo'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubrk_open():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UBreakIterator_head),win32more.Globalization.UBreakIteratorType,win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ubrk_open', cdll['icu.dll']), ((1, 'type'),(1, 'locale'),(1, 'text'),(1, 'textLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubrk_openRules():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UBreakIterator_head),POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UParseError_head),POINTER(win32more.Globalization.UErrorCode))(('ubrk_openRules', cdll['icu.dll']), ((1, 'rules'),(1, 'rulesLength'),(1, 'text'),(1, 'textLength'),(1, 'parseErr'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubrk_openBinaryRules():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UBreakIterator_head),c_char_p_no,Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ubrk_openBinaryRules', cdll['icu.dll']), ((1, 'binaryRules'),(1, 'rulesLength'),(1, 'text'),(1, 'textLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubrk_safeClone():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UBreakIterator_head),POINTER(win32more.Globalization.UBreakIterator_head),c_void_p,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('ubrk_safeClone', cdll['icu.dll']), ((1, 'bi'),(1, 'stackBuffer'),(1, 'pBufferSize'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubrk_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UBreakIterator_head))(('ubrk_close', cdll['icu.dll']), ((1, 'bi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubrk_setText():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UBreakIterator_head),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ubrk_setText', cdll['icu.dll']), ((1, 'bi'),(1, 'text'),(1, 'textLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubrk_setUText():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UBreakIterator_head),POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.UErrorCode))(('ubrk_setUText', cdll['icu.dll']), ((1, 'bi'),(1, 'text'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubrk_current():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UBreakIterator_head))(('ubrk_current', cdll['icu.dll']), ((1, 'bi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubrk_next():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UBreakIterator_head))(('ubrk_next', cdll['icu.dll']), ((1, 'bi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubrk_previous():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UBreakIterator_head))(('ubrk_previous', cdll['icu.dll']), ((1, 'bi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubrk_first():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UBreakIterator_head))(('ubrk_first', cdll['icu.dll']), ((1, 'bi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubrk_last():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UBreakIterator_head))(('ubrk_last', cdll['icu.dll']), ((1, 'bi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubrk_preceding():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UBreakIterator_head),Int32)(('ubrk_preceding', cdll['icu.dll']), ((1, 'bi'),(1, 'offset'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubrk_following():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UBreakIterator_head),Int32)(('ubrk_following', cdll['icu.dll']), ((1, 'bi'),(1, 'offset'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubrk_getAvailable():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,Int32)(('ubrk_getAvailable', cdll['icu.dll']), ((1, 'index'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubrk_countAvailable():
    try:
        return CFUNCTYPE(Int32,)(('ubrk_countAvailable', cdll['icu.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubrk_isBoundary():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UBreakIterator_head),Int32)(('ubrk_isBoundary', cdll['icu.dll']), ((1, 'bi'),(1, 'offset'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubrk_getRuleStatus():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UBreakIterator_head))(('ubrk_getRuleStatus', cdll['icu.dll']), ((1, 'bi'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubrk_getRuleStatusVec():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UBreakIterator_head),POINTER(Int32),Int32,POINTER(win32more.Globalization.UErrorCode))(('ubrk_getRuleStatusVec', cdll['icu.dll']), ((1, 'bi'),(1, 'fillInVec'),(1, 'capacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubrk_getLocaleByType():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,POINTER(win32more.Globalization.UBreakIterator_head),win32more.Globalization.ULocDataLocaleType,POINTER(win32more.Globalization.UErrorCode))(('ubrk_getLocaleByType', cdll['icu.dll']), ((1, 'bi'),(1, 'type'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubrk_refreshUText():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UBreakIterator_head),POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.UErrorCode))(('ubrk_refreshUText', cdll['icu.dll']), ((1, 'bi'),(1, 'text'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ubrk_getBinaryRules():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UBreakIterator_head),c_char_p_no,Int32,POINTER(win32more.Globalization.UErrorCode))(('ubrk_getBinaryRules', cdll['icu.dll']), ((1, 'bi'),(1, 'binaryRules'),(1, 'rulesCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_getDataVersion():
    try:
        return CFUNCTYPE(Void,c_char_p_no,POINTER(win32more.Globalization.UErrorCode))(('u_getDataVersion', cdll['icu.dll']), ((1, 'dataVersionFillin'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_openTimeZoneIDEnumeration():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),win32more.Globalization.USystemTimeZoneType,win32more.Foundation.PSTR,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('ucal_openTimeZoneIDEnumeration', cdll['icu.dll']), ((1, 'zoneType'),(1, 'region'),(1, 'rawOffset'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_openTimeZones():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),POINTER(win32more.Globalization.UErrorCode))(('ucal_openTimeZones', cdll['icu.dll']), ((1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_openCountryTimeZones():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('ucal_openCountryTimeZones', cdll['icu.dll']), ((1, 'country'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_getDefaultTimeZone():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucal_getDefaultTimeZone', cdll['icu.dll']), ((1, 'result'),(1, 'resultCapacity'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_setDefaultTimeZone():
    try:
        return CFUNCTYPE(Void,POINTER(UInt16),POINTER(win32more.Globalization.UErrorCode))(('ucal_setDefaultTimeZone', cdll['icu.dll']), ((1, 'zoneID'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_getHostTimeZone():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucal_getHostTimeZone', cdll['icu.dll']), ((1, 'result'),(1, 'resultCapacity'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_getDSTSavings():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),POINTER(win32more.Globalization.UErrorCode))(('ucal_getDSTSavings', cdll['icu.dll']), ((1, 'zoneID'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_getNow():
    try:
        return CFUNCTYPE(Double,)(('ucal_getNow', cdll['icu.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_open():
    try:
        return CFUNCTYPE(POINTER(c_void_p),POINTER(UInt16),Int32,win32more.Foundation.PSTR,win32more.Globalization.UCalendarType,POINTER(win32more.Globalization.UErrorCode))(('ucal_open', cdll['icu.dll']), ((1, 'zoneID'),(1, 'len'),(1, 'locale'),(1, 'type'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_close():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p))(('ucal_close', cdll['icu.dll']), ((1, 'cal'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_clone():
    try:
        return CFUNCTYPE(POINTER(c_void_p),POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('ucal_clone', cdll['icu.dll']), ((1, 'cal'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_setTimeZone():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucal_setTimeZone', cdll['icu.dll']), ((1, 'cal'),(1, 'zoneID'),(1, 'len'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_getTimeZoneID():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucal_getTimeZoneID', cdll['icu.dll']), ((1, 'cal'),(1, 'result'),(1, 'resultLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_getTimeZoneDisplayName():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),win32more.Globalization.UCalendarDisplayNameType,win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucal_getTimeZoneDisplayName', cdll['icu.dll']), ((1, 'cal'),(1, 'type'),(1, 'locale'),(1, 'result'),(1, 'resultLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_inDaylightTime():
    try:
        return CFUNCTYPE(SByte,POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('ucal_inDaylightTime', cdll['icu.dll']), ((1, 'cal'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_setGregorianChange():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),Double,POINTER(win32more.Globalization.UErrorCode))(('ucal_setGregorianChange', cdll['icu.dll']), ((1, 'cal'),(1, 'date'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_getGregorianChange():
    try:
        return CFUNCTYPE(Double,POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('ucal_getGregorianChange', cdll['icu.dll']), ((1, 'cal'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_getAttribute():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),win32more.Globalization.UCalendarAttribute)(('ucal_getAttribute', cdll['icu.dll']), ((1, 'cal'),(1, 'attr'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_setAttribute():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),win32more.Globalization.UCalendarAttribute,Int32)(('ucal_setAttribute', cdll['icu.dll']), ((1, 'cal'),(1, 'attr'),(1, 'newValue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_getAvailable():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,Int32)(('ucal_getAvailable', cdll['icu.dll']), ((1, 'localeIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_countAvailable():
    try:
        return CFUNCTYPE(Int32,)(('ucal_countAvailable', cdll['icu.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_getMillis():
    try:
        return CFUNCTYPE(Double,POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('ucal_getMillis', cdll['icu.dll']), ((1, 'cal'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_setMillis():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),Double,POINTER(win32more.Globalization.UErrorCode))(('ucal_setMillis', cdll['icu.dll']), ((1, 'cal'),(1, 'dateTime'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_setDate():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),Int32,Int32,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucal_setDate', cdll['icu.dll']), ((1, 'cal'),(1, 'year'),(1, 'month'),(1, 'date'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_setDateTime():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),Int32,Int32,Int32,Int32,Int32,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucal_setDateTime', cdll['icu.dll']), ((1, 'cal'),(1, 'year'),(1, 'month'),(1, 'date'),(1, 'hour'),(1, 'minute'),(1, 'second'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_equivalentTo():
    try:
        return CFUNCTYPE(SByte,POINTER(c_void_p),POINTER(c_void_p))(('ucal_equivalentTo', cdll['icu.dll']), ((1, 'cal1'),(1, 'cal2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_add():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),win32more.Globalization.UCalendarDateFields,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucal_add', cdll['icu.dll']), ((1, 'cal'),(1, 'field'),(1, 'amount'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_roll():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),win32more.Globalization.UCalendarDateFields,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucal_roll', cdll['icu.dll']), ((1, 'cal'),(1, 'field'),(1, 'amount'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_get():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),win32more.Globalization.UCalendarDateFields,POINTER(win32more.Globalization.UErrorCode))(('ucal_get', cdll['icu.dll']), ((1, 'cal'),(1, 'field'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_set():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),win32more.Globalization.UCalendarDateFields,Int32)(('ucal_set', cdll['icu.dll']), ((1, 'cal'),(1, 'field'),(1, 'value'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_isSet():
    try:
        return CFUNCTYPE(SByte,POINTER(c_void_p),win32more.Globalization.UCalendarDateFields)(('ucal_isSet', cdll['icu.dll']), ((1, 'cal'),(1, 'field'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_clearField():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),win32more.Globalization.UCalendarDateFields)(('ucal_clearField', cdll['icu.dll']), ((1, 'cal'),(1, 'field'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_clear():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p))(('ucal_clear', cdll['icu.dll']), ((1, 'calendar'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_getLimit():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),win32more.Globalization.UCalendarDateFields,win32more.Globalization.UCalendarLimitType,POINTER(win32more.Globalization.UErrorCode))(('ucal_getLimit', cdll['icu.dll']), ((1, 'cal'),(1, 'field'),(1, 'type'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_getLocaleByType():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,POINTER(c_void_p),win32more.Globalization.ULocDataLocaleType,POINTER(win32more.Globalization.UErrorCode))(('ucal_getLocaleByType', cdll['icu.dll']), ((1, 'cal'),(1, 'type'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_getTZDataVersion():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('ucal_getTZDataVersion', cdll['icu.dll']), ((1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_getCanonicalTimeZoneID():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(SByte),POINTER(win32more.Globalization.UErrorCode))(('ucal_getCanonicalTimeZoneID', cdll['icu.dll']), ((1, 'id'),(1, 'len'),(1, 'result'),(1, 'resultCapacity'),(1, 'isSystemID'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_getType():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('ucal_getType', cdll['icu.dll']), ((1, 'cal'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_getKeywordValuesForLocale():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),win32more.Foundation.PSTR,win32more.Foundation.PSTR,SByte,POINTER(win32more.Globalization.UErrorCode))(('ucal_getKeywordValuesForLocale', cdll['icu.dll']), ((1, 'key'),(1, 'locale'),(1, 'commonlyUsed'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_getDayOfWeekType():
    try:
        return CFUNCTYPE(win32more.Globalization.UCalendarWeekdayType,POINTER(c_void_p),win32more.Globalization.UCalendarDaysOfWeek,POINTER(win32more.Globalization.UErrorCode))(('ucal_getDayOfWeekType', cdll['icu.dll']), ((1, 'cal'),(1, 'dayOfWeek'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_getWeekendTransition():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),win32more.Globalization.UCalendarDaysOfWeek,POINTER(win32more.Globalization.UErrorCode))(('ucal_getWeekendTransition', cdll['icu.dll']), ((1, 'cal'),(1, 'dayOfWeek'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_isWeekend():
    try:
        return CFUNCTYPE(SByte,POINTER(c_void_p),Double,POINTER(win32more.Globalization.UErrorCode))(('ucal_isWeekend', cdll['icu.dll']), ((1, 'cal'),(1, 'date'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_getFieldDifference():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),Double,win32more.Globalization.UCalendarDateFields,POINTER(win32more.Globalization.UErrorCode))(('ucal_getFieldDifference', cdll['icu.dll']), ((1, 'cal'),(1, 'target'),(1, 'field'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_getTimeZoneTransitionDate():
    try:
        return CFUNCTYPE(SByte,POINTER(c_void_p),win32more.Globalization.UTimeZoneTransitionType,POINTER(Double),POINTER(win32more.Globalization.UErrorCode))(('ucal_getTimeZoneTransitionDate', cdll['icu.dll']), ((1, 'cal'),(1, 'type'),(1, 'transition'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_getWindowsTimeZoneID():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucal_getWindowsTimeZoneID', cdll['icu.dll']), ((1, 'id'),(1, 'len'),(1, 'winid'),(1, 'winidCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucal_getTimeZoneIDForWindowsID():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),Int32,win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucal_getTimeZoneIDForWindowsID', cdll['icu.dll']), ((1, 'winid'),(1, 'len'),(1, 'region'),(1, 'id'),(1, 'idCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_open():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UCollator_head),win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('ucol_open', cdll['icu.dll']), ((1, 'loc'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_openRules():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UCollator_head),POINTER(UInt16),Int32,win32more.Globalization.UColAttributeValue,win32more.Globalization.UColAttributeValue,POINTER(win32more.Globalization.UParseError_head),POINTER(win32more.Globalization.UErrorCode))(('ucol_openRules', cdll['icu.dll']), ((1, 'rules'),(1, 'rulesLength'),(1, 'normalizationMode'),(1, 'strength'),(1, 'parseError'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_getContractionsAndExpansions():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCollator_head),POINTER(win32more.Globalization.USet_head),POINTER(win32more.Globalization.USet_head),SByte,POINTER(win32more.Globalization.UErrorCode))(('ucol_getContractionsAndExpansions', cdll['icu.dll']), ((1, 'coll'),(1, 'contractions'),(1, 'expansions'),(1, 'addPrefixes'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCollator_head))(('ucol_close', cdll['icu.dll']), ((1, 'coll'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_strcoll():
    try:
        return CFUNCTYPE(win32more.Globalization.UCollationResult,POINTER(win32more.Globalization.UCollator_head),POINTER(UInt16),Int32,POINTER(UInt16),Int32)(('ucol_strcoll', cdll['icu.dll']), ((1, 'coll'),(1, 'source'),(1, 'sourceLength'),(1, 'target'),(1, 'targetLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_strcollUTF8():
    try:
        return CFUNCTYPE(win32more.Globalization.UCollationResult,POINTER(win32more.Globalization.UCollator_head),win32more.Foundation.PSTR,Int32,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucol_strcollUTF8', cdll['icu.dll']), ((1, 'coll'),(1, 'source'),(1, 'sourceLength'),(1, 'target'),(1, 'targetLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_greater():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UCollator_head),POINTER(UInt16),Int32,POINTER(UInt16),Int32)(('ucol_greater', cdll['icu.dll']), ((1, 'coll'),(1, 'source'),(1, 'sourceLength'),(1, 'target'),(1, 'targetLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_greaterOrEqual():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UCollator_head),POINTER(UInt16),Int32,POINTER(UInt16),Int32)(('ucol_greaterOrEqual', cdll['icu.dll']), ((1, 'coll'),(1, 'source'),(1, 'sourceLength'),(1, 'target'),(1, 'targetLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_equal():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UCollator_head),POINTER(UInt16),Int32,POINTER(UInt16),Int32)(('ucol_equal', cdll['icu.dll']), ((1, 'coll'),(1, 'source'),(1, 'sourceLength'),(1, 'target'),(1, 'targetLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_strcollIter():
    try:
        return CFUNCTYPE(win32more.Globalization.UCollationResult,POINTER(win32more.Globalization.UCollator_head),POINTER(win32more.Globalization.UCharIterator_head),POINTER(win32more.Globalization.UCharIterator_head),POINTER(win32more.Globalization.UErrorCode))(('ucol_strcollIter', cdll['icu.dll']), ((1, 'coll'),(1, 'sIter'),(1, 'tIter'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_getStrength():
    try:
        return CFUNCTYPE(win32more.Globalization.UColAttributeValue,POINTER(win32more.Globalization.UCollator_head))(('ucol_getStrength', cdll['icu.dll']), ((1, 'coll'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_setStrength():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCollator_head),win32more.Globalization.UColAttributeValue)(('ucol_setStrength', cdll['icu.dll']), ((1, 'coll'),(1, 'strength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_getReorderCodes():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCollator_head),POINTER(Int32),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucol_getReorderCodes', cdll['icu.dll']), ((1, 'coll'),(1, 'dest'),(1, 'destCapacity'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_setReorderCodes():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCollator_head),POINTER(Int32),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucol_setReorderCodes', cdll['icu.dll']), ((1, 'coll'),(1, 'reorderCodes'),(1, 'reorderCodesLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_getEquivalentReorderCodes():
    try:
        return CFUNCTYPE(Int32,Int32,POINTER(Int32),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucol_getEquivalentReorderCodes', cdll['icu.dll']), ((1, 'reorderCode'),(1, 'dest'),(1, 'destCapacity'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_getDisplayName():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucol_getDisplayName', cdll['icu.dll']), ((1, 'objLoc'),(1, 'dispLoc'),(1, 'result'),(1, 'resultLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_getAvailable():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,Int32)(('ucol_getAvailable', cdll['icu.dll']), ((1, 'localeIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_countAvailable():
    try:
        return CFUNCTYPE(Int32,)(('ucol_countAvailable', cdll['icu.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_openAvailableLocales():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),POINTER(win32more.Globalization.UErrorCode))(('ucol_openAvailableLocales', cdll['icu.dll']), ((1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_getKeywords():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),POINTER(win32more.Globalization.UErrorCode))(('ucol_getKeywords', cdll['icu.dll']), ((1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_getKeywordValues():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('ucol_getKeywordValues', cdll['icu.dll']), ((1, 'keyword'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_getKeywordValuesForLocale():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),win32more.Foundation.PSTR,win32more.Foundation.PSTR,SByte,POINTER(win32more.Globalization.UErrorCode))(('ucol_getKeywordValuesForLocale', cdll['icu.dll']), ((1, 'key'),(1, 'locale'),(1, 'commonlyUsed'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_getFunctionalEquivalent():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,POINTER(SByte),POINTER(win32more.Globalization.UErrorCode))(('ucol_getFunctionalEquivalent', cdll['icu.dll']), ((1, 'result'),(1, 'resultCapacity'),(1, 'keyword'),(1, 'locale'),(1, 'isAvailable'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_getRules():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(win32more.Globalization.UCollator_head),POINTER(Int32))(('ucol_getRules', cdll['icu.dll']), ((1, 'coll'),(1, 'length'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_getSortKey():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCollator_head),POINTER(UInt16),Int32,c_char_p_no,Int32)(('ucol_getSortKey', cdll['icu.dll']), ((1, 'coll'),(1, 'source'),(1, 'sourceLength'),(1, 'result'),(1, 'resultLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_nextSortKeyPart():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCollator_head),POINTER(win32more.Globalization.UCharIterator_head),POINTER(UInt32),c_char_p_no,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucol_nextSortKeyPart', cdll['icu.dll']), ((1, 'coll'),(1, 'iter'),(1, 'state'),(1, 'dest'),(1, 'count'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_getBound():
    try:
        return CFUNCTYPE(Int32,c_char_p_no,Int32,win32more.Globalization.UColBoundMode,UInt32,c_char_p_no,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucol_getBound', cdll['icu.dll']), ((1, 'source'),(1, 'sourceLength'),(1, 'boundType'),(1, 'noOfLevels'),(1, 'result'),(1, 'resultLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_getVersion():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCollator_head),c_char_p_no)(('ucol_getVersion', cdll['icu.dll']), ((1, 'coll'),(1, 'info'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_getUCAVersion():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCollator_head),c_char_p_no)(('ucol_getUCAVersion', cdll['icu.dll']), ((1, 'coll'),(1, 'info'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_mergeSortkeys():
    try:
        return CFUNCTYPE(Int32,c_char_p_no,Int32,c_char_p_no,Int32,c_char_p_no,Int32)(('ucol_mergeSortkeys', cdll['icu.dll']), ((1, 'src1'),(1, 'src1Length'),(1, 'src2'),(1, 'src2Length'),(1, 'dest'),(1, 'destCapacity'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_setAttribute():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCollator_head),win32more.Globalization.UColAttribute,win32more.Globalization.UColAttributeValue,POINTER(win32more.Globalization.UErrorCode))(('ucol_setAttribute', cdll['icu.dll']), ((1, 'coll'),(1, 'attr'),(1, 'value'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_getAttribute():
    try:
        return CFUNCTYPE(win32more.Globalization.UColAttributeValue,POINTER(win32more.Globalization.UCollator_head),win32more.Globalization.UColAttribute,POINTER(win32more.Globalization.UErrorCode))(('ucol_getAttribute', cdll['icu.dll']), ((1, 'coll'),(1, 'attr'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_setMaxVariable():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCollator_head),win32more.Globalization.UColReorderCode,POINTER(win32more.Globalization.UErrorCode))(('ucol_setMaxVariable', cdll['icu.dll']), ((1, 'coll'),(1, 'group'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_getMaxVariable():
    try:
        return CFUNCTYPE(win32more.Globalization.UColReorderCode,POINTER(win32more.Globalization.UCollator_head))(('ucol_getMaxVariable', cdll['icu.dll']), ((1, 'coll'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_getVariableTop():
    try:
        return CFUNCTYPE(UInt32,POINTER(win32more.Globalization.UCollator_head),POINTER(win32more.Globalization.UErrorCode))(('ucol_getVariableTop', cdll['icu.dll']), ((1, 'coll'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_safeClone():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UCollator_head),POINTER(win32more.Globalization.UCollator_head),c_void_p,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('ucol_safeClone', cdll['icu.dll']), ((1, 'coll'),(1, 'stackBuffer'),(1, 'pBufferSize'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_getRulesEx():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCollator_head),win32more.Globalization.UColRuleOption,POINTER(UInt16),Int32)(('ucol_getRulesEx', cdll['icu.dll']), ((1, 'coll'),(1, 'delta'),(1, 'buffer'),(1, 'bufferLen'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_getLocaleByType():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,POINTER(win32more.Globalization.UCollator_head),win32more.Globalization.ULocDataLocaleType,POINTER(win32more.Globalization.UErrorCode))(('ucol_getLocaleByType', cdll['icu.dll']), ((1, 'coll'),(1, 'type'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_getTailoredSet():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.USet_head),POINTER(win32more.Globalization.UCollator_head),POINTER(win32more.Globalization.UErrorCode))(('ucol_getTailoredSet', cdll['icu.dll']), ((1, 'coll'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_cloneBinary():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCollator_head),c_char_p_no,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucol_cloneBinary', cdll['icu.dll']), ((1, 'coll'),(1, 'buffer'),(1, 'capacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_openBinary():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UCollator_head),c_char_p_no,Int32,POINTER(win32more.Globalization.UCollator_head),POINTER(win32more.Globalization.UErrorCode))(('ucol_openBinary', cdll['icu.dll']), ((1, 'bin'),(1, 'length'),(1, 'base'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_openElements():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UCollationElements_head),POINTER(win32more.Globalization.UCollator_head),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucol_openElements', cdll['icu.dll']), ((1, 'coll'),(1, 'text'),(1, 'textLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_keyHashCode():
    try:
        return CFUNCTYPE(Int32,c_char_p_no,Int32)(('ucol_keyHashCode', cdll['icu.dll']), ((1, 'key'),(1, 'length'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_closeElements():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCollationElements_head))(('ucol_closeElements', cdll['icu.dll']), ((1, 'elems'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_reset():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCollationElements_head))(('ucol_reset', cdll['icu.dll']), ((1, 'elems'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_next():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCollationElements_head),POINTER(win32more.Globalization.UErrorCode))(('ucol_next', cdll['icu.dll']), ((1, 'elems'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_previous():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCollationElements_head),POINTER(win32more.Globalization.UErrorCode))(('ucol_previous', cdll['icu.dll']), ((1, 'elems'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_getMaxExpansion():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCollationElements_head),Int32)(('ucol_getMaxExpansion', cdll['icu.dll']), ((1, 'elems'),(1, 'order'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_setText():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCollationElements_head),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucol_setText', cdll['icu.dll']), ((1, 'elems'),(1, 'text'),(1, 'textLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_getOffset():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCollationElements_head))(('ucol_getOffset', cdll['icu.dll']), ((1, 'elems'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_setOffset():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCollationElements_head),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucol_setOffset', cdll['icu.dll']), ((1, 'elems'),(1, 'offset'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_primaryOrder():
    try:
        return CFUNCTYPE(Int32,Int32)(('ucol_primaryOrder', cdll['icu.dll']), ((1, 'order'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_secondaryOrder():
    try:
        return CFUNCTYPE(Int32,Int32)(('ucol_secondaryOrder', cdll['icu.dll']), ((1, 'order'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucol_tertiaryOrder():
    try:
        return CFUNCTYPE(Int32,Int32)(('ucol_tertiaryOrder', cdll['icu.dll']), ((1, 'order'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucsdet_open():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UCharsetDetector_head),POINTER(win32more.Globalization.UErrorCode))(('ucsdet_open', cdll['icu.dll']), ((1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucsdet_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCharsetDetector_head))(('ucsdet_close', cdll['icu.dll']), ((1, 'ucsd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucsdet_setText():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCharsetDetector_head),win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucsdet_setText', cdll['icu.dll']), ((1, 'ucsd'),(1, 'textIn'),(1, 'len'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucsdet_setDeclaredEncoding():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCharsetDetector_head),win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucsdet_setDeclaredEncoding', cdll['icu.dll']), ((1, 'ucsd'),(1, 'encoding'),(1, 'length'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucsdet_detect():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UCharsetMatch_head),POINTER(win32more.Globalization.UCharsetDetector_head),POINTER(win32more.Globalization.UErrorCode))(('ucsdet_detect', cdll['icu.dll']), ((1, 'ucsd'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucsdet_detectAll():
    try:
        return CFUNCTYPE(POINTER(POINTER(win32more.Globalization.UCharsetMatch_head)),POINTER(win32more.Globalization.UCharsetDetector_head),POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('ucsdet_detectAll', cdll['icu.dll']), ((1, 'ucsd'),(1, 'matchesFound'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucsdet_getName():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,POINTER(win32more.Globalization.UCharsetMatch_head),POINTER(win32more.Globalization.UErrorCode))(('ucsdet_getName', cdll['icu.dll']), ((1, 'ucsm'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucsdet_getConfidence():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCharsetMatch_head),POINTER(win32more.Globalization.UErrorCode))(('ucsdet_getConfidence', cdll['icu.dll']), ((1, 'ucsm'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucsdet_getLanguage():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,POINTER(win32more.Globalization.UCharsetMatch_head),POINTER(win32more.Globalization.UErrorCode))(('ucsdet_getLanguage', cdll['icu.dll']), ((1, 'ucsm'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucsdet_getUChars():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCharsetMatch_head),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucsdet_getUChars', cdll['icu.dll']), ((1, 'ucsm'),(1, 'buf'),(1, 'cap'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucsdet_getAllDetectableCharsets():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),POINTER(win32more.Globalization.UCharsetDetector_head),POINTER(win32more.Globalization.UErrorCode))(('ucsdet_getAllDetectableCharsets', cdll['icu.dll']), ((1, 'ucsd'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucsdet_isInputFilterEnabled():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UCharsetDetector_head))(('ucsdet_isInputFilterEnabled', cdll['icu.dll']), ((1, 'ucsd'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucsdet_enableInputFilter():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UCharsetDetector_head),SByte)(('ucsdet_enableInputFilter', cdll['icu.dll']), ((1, 'ucsd'),(1, 'filter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ufieldpositer_open():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UFieldPositionIterator_head),POINTER(win32more.Globalization.UErrorCode))(('ufieldpositer_open', cdll['icu.dll']), ((1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ufieldpositer_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UFieldPositionIterator_head))(('ufieldpositer_close', cdll['icu.dll']), ((1, 'fpositer'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ufieldpositer_next():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UFieldPositionIterator_head),POINTER(Int32),POINTER(Int32))(('ufieldpositer_next', cdll['icu.dll']), ((1, 'fpositer'),(1, 'beginIndex'),(1, 'endIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ufmt_open():
    try:
        return CFUNCTYPE(POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('ufmt_open', cdll['icu.dll']), ((1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ufmt_close():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p))(('ufmt_close', cdll['icu.dll']), ((1, 'fmt'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ufmt_getType():
    try:
        return CFUNCTYPE(win32more.Globalization.UFormattableType,POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('ufmt_getType', cdll['icu.dll']), ((1, 'fmt'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ufmt_isNumeric():
    try:
        return CFUNCTYPE(SByte,POINTER(c_void_p))(('ufmt_isNumeric', cdll['icu.dll']), ((1, 'fmt'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ufmt_getDate():
    try:
        return CFUNCTYPE(Double,POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('ufmt_getDate', cdll['icu.dll']), ((1, 'fmt'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ufmt_getDouble():
    try:
        return CFUNCTYPE(Double,POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('ufmt_getDouble', cdll['icu.dll']), ((1, 'fmt'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ufmt_getLong():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('ufmt_getLong', cdll['icu.dll']), ((1, 'fmt'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ufmt_getInt64():
    try:
        return CFUNCTYPE(Int64,POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('ufmt_getInt64', cdll['icu.dll']), ((1, 'fmt'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ufmt_getObject():
    try:
        return CFUNCTYPE(c_void_p,POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('ufmt_getObject', cdll['icu.dll']), ((1, 'fmt'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ufmt_getUChars():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(c_void_p),POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('ufmt_getUChars', cdll['icu.dll']), ((1, 'fmt'),(1, 'len'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ufmt_getArrayLength():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('ufmt_getArrayLength', cdll['icu.dll']), ((1, 'fmt'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ufmt_getArrayItemByIndex():
    try:
        return CFUNCTYPE(POINTER(c_void_p),POINTER(c_void_p),Int32,POINTER(win32more.Globalization.UErrorCode))(('ufmt_getArrayItemByIndex', cdll['icu.dll']), ((1, 'fmt'),(1, 'n'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ufmt_getDecNumChars():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,POINTER(c_void_p),POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('ufmt_getDecNumChars', cdll['icu.dll']), ((1, 'fmt'),(1, 'len'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucfpos_open():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UConstrainedFieldPosition_head),POINTER(win32more.Globalization.UErrorCode))(('ucfpos_open', cdll['icu.dll']), ((1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucfpos_reset():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConstrainedFieldPosition_head),POINTER(win32more.Globalization.UErrorCode))(('ucfpos_reset', cdll['icu.dll']), ((1, 'ucfpos'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucfpos_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConstrainedFieldPosition_head))(('ucfpos_close', cdll['icu.dll']), ((1, 'ucfpos'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucfpos_constrainCategory():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConstrainedFieldPosition_head),Int32,POINTER(win32more.Globalization.UErrorCode))(('ucfpos_constrainCategory', cdll['icu.dll']), ((1, 'ucfpos'),(1, 'category'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucfpos_constrainField():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConstrainedFieldPosition_head),Int32,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucfpos_constrainField', cdll['icu.dll']), ((1, 'ucfpos'),(1, 'category'),(1, 'field'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucfpos_getCategory():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UConstrainedFieldPosition_head),POINTER(win32more.Globalization.UErrorCode))(('ucfpos_getCategory', cdll['icu.dll']), ((1, 'ucfpos'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucfpos_getField():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UConstrainedFieldPosition_head),POINTER(win32more.Globalization.UErrorCode))(('ucfpos_getField', cdll['icu.dll']), ((1, 'ucfpos'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucfpos_getIndexes():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConstrainedFieldPosition_head),POINTER(Int32),POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('ucfpos_getIndexes', cdll['icu.dll']), ((1, 'ucfpos'),(1, 'pStart'),(1, 'pLimit'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucfpos_getInt64IterationContext():
    try:
        return CFUNCTYPE(Int64,POINTER(win32more.Globalization.UConstrainedFieldPosition_head),POINTER(win32more.Globalization.UErrorCode))(('ucfpos_getInt64IterationContext', cdll['icu.dll']), ((1, 'ucfpos'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucfpos_setInt64IterationContext():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConstrainedFieldPosition_head),Int64,POINTER(win32more.Globalization.UErrorCode))(('ucfpos_setInt64IterationContext', cdll['icu.dll']), ((1, 'ucfpos'),(1, 'context'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucfpos_matchesField():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UConstrainedFieldPosition_head),Int32,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucfpos_matchesField', cdll['icu.dll']), ((1, 'ucfpos'),(1, 'category'),(1, 'field'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ucfpos_setState():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UConstrainedFieldPosition_head),Int32,Int32,Int32,Int32,POINTER(win32more.Globalization.UErrorCode))(('ucfpos_setState', cdll['icu.dll']), ((1, 'ucfpos'),(1, 'category'),(1, 'field'),(1, 'start'),(1, 'limit'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ufmtval_getString():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(win32more.Globalization.UFormattedValue_head),POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('ufmtval_getString', cdll['icu.dll']), ((1, 'ufmtval'),(1, 'pLength'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ufmtval_nextPosition():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UFormattedValue_head),POINTER(win32more.Globalization.UConstrainedFieldPosition_head),POINTER(win32more.Globalization.UErrorCode))(('ufmtval_nextPosition', cdll['icu.dll']), ((1, 'ufmtval'),(1, 'ucfpos'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udtitvfmt_open():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UDateIntervalFormat_head),win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('udtitvfmt_open', cdll['icu.dll']), ((1, 'locale'),(1, 'skeleton'),(1, 'skeletonLength'),(1, 'tzID'),(1, 'tzIDLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udtitvfmt_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UDateIntervalFormat_head))(('udtitvfmt_close', cdll['icu.dll']), ((1, 'formatter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udtitvfmt_openResult():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UFormattedDateInterval_head),POINTER(win32more.Globalization.UErrorCode))(('udtitvfmt_openResult', cdll['icu.dll']), ((1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udtitvfmt_resultAsValue():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UFormattedValue_head),POINTER(win32more.Globalization.UFormattedDateInterval_head),POINTER(win32more.Globalization.UErrorCode))(('udtitvfmt_resultAsValue', cdll['icu.dll']), ((1, 'uresult'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udtitvfmt_closeResult():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UFormattedDateInterval_head))(('udtitvfmt_closeResult', cdll['icu.dll']), ((1, 'uresult'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udtitvfmt_format():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UDateIntervalFormat_head),Double,Double,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UFieldPosition_head),POINTER(win32more.Globalization.UErrorCode))(('udtitvfmt_format', cdll['icu.dll']), ((1, 'formatter'),(1, 'fromDate'),(1, 'toDate'),(1, 'result'),(1, 'resultCapacity'),(1, 'position'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ugender_getInstance():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UGenderInfo_head),win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('ugender_getInstance', cdll['icu.dll']), ((1, 'locale'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ugender_getListGender():
    try:
        return CFUNCTYPE(win32more.Globalization.UGender,POINTER(win32more.Globalization.UGenderInfo_head),POINTER(win32more.Globalization.UGender),Int32,POINTER(win32more.Globalization.UErrorCode))(('ugender_getListGender', cdll['icu.dll']), ((1, 'genderInfo'),(1, 'genders'),(1, 'size'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ulistfmt_open():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UListFormatter_head),win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('ulistfmt_open', cdll['icu.dll']), ((1, 'locale'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ulistfmt_openForType():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UListFormatter_head),win32more.Foundation.PSTR,win32more.Globalization.UListFormatterType,win32more.Globalization.UListFormatterWidth,POINTER(win32more.Globalization.UErrorCode))(('ulistfmt_openForType', cdll['icu.dll']), ((1, 'locale'),(1, 'type'),(1, 'width'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ulistfmt_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UListFormatter_head))(('ulistfmt_close', cdll['icu.dll']), ((1, 'listfmt'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ulistfmt_openResult():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UFormattedList_head),POINTER(win32more.Globalization.UErrorCode))(('ulistfmt_openResult', cdll['icu.dll']), ((1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ulistfmt_resultAsValue():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UFormattedValue_head),POINTER(win32more.Globalization.UFormattedList_head),POINTER(win32more.Globalization.UErrorCode))(('ulistfmt_resultAsValue', cdll['icu.dll']), ((1, 'uresult'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ulistfmt_closeResult():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UFormattedList_head))(('ulistfmt_closeResult', cdll['icu.dll']), ((1, 'uresult'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ulistfmt_format():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UListFormatter_head),POINTER(POINTER(UInt16)),POINTER(Int32),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ulistfmt_format', cdll['icu.dll']), ((1, 'listfmt'),(1, 'strings'),(1, 'stringLengths'),(1, 'stringCount'),(1, 'result'),(1, 'resultCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ulistfmt_formatStringsToResult():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UListFormatter_head),POINTER(POINTER(UInt16)),POINTER(Int32),Int32,POINTER(win32more.Globalization.UFormattedList_head),POINTER(win32more.Globalization.UErrorCode))(('ulistfmt_formatStringsToResult', cdll['icu.dll']), ((1, 'listfmt'),(1, 'strings'),(1, 'stringLengths'),(1, 'stringCount'),(1, 'uresult'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ulocdata_open():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.ULocaleData_head),win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('ulocdata_open', cdll['icu.dll']), ((1, 'localeID'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ulocdata_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.ULocaleData_head))(('ulocdata_close', cdll['icu.dll']), ((1, 'uld'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ulocdata_setNoSubstitute():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.ULocaleData_head),SByte)(('ulocdata_setNoSubstitute', cdll['icu.dll']), ((1, 'uld'),(1, 'setting'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ulocdata_getNoSubstitute():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.ULocaleData_head))(('ulocdata_getNoSubstitute', cdll['icu.dll']), ((1, 'uld'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ulocdata_getExemplarSet():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.USet_head),POINTER(win32more.Globalization.ULocaleData_head),POINTER(win32more.Globalization.USet_head),UInt32,win32more.Globalization.ULocaleDataExemplarSetType,POINTER(win32more.Globalization.UErrorCode))(('ulocdata_getExemplarSet', cdll['icu.dll']), ((1, 'uld'),(1, 'fillIn'),(1, 'options'),(1, 'extype'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ulocdata_getDelimiter():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.ULocaleData_head),win32more.Globalization.ULocaleDataDelimiterType,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ulocdata_getDelimiter', cdll['icu.dll']), ((1, 'uld'),(1, 'type'),(1, 'result'),(1, 'resultLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ulocdata_getMeasurementSystem():
    try:
        return CFUNCTYPE(win32more.Globalization.UMeasurementSystem,win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('ulocdata_getMeasurementSystem', cdll['icu.dll']), ((1, 'localeID'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ulocdata_getPaperSize():
    try:
        return CFUNCTYPE(Void,win32more.Foundation.PSTR,POINTER(Int32),POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('ulocdata_getPaperSize', cdll['icu.dll']), ((1, 'localeID'),(1, 'height'),(1, 'width'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ulocdata_getCLDRVersion():
    try:
        return CFUNCTYPE(Void,c_char_p_no,POINTER(win32more.Globalization.UErrorCode))(('ulocdata_getCLDRVersion', cdll['icu.dll']), ((1, 'versionArray'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ulocdata_getLocaleDisplayPattern():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.ULocaleData_head),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ulocdata_getLocaleDisplayPattern', cdll['icu.dll']), ((1, 'uld'),(1, 'pattern'),(1, 'patternCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ulocdata_getLocaleSeparator():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.ULocaleData_head),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ulocdata_getLocaleSeparator', cdll['icu.dll']), ((1, 'uld'),(1, 'separator'),(1, 'separatorCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_formatMessage():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('u_formatMessage', cdll['icu.dll']), ((1, 'locale'),(1, 'pattern'),(1, 'patternLength'),(1, 'result'),(1, 'resultLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_vformatMessage():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(SByte),POINTER(win32more.Globalization.UErrorCode))(('u_vformatMessage', cdll['icu.dll']), ((1, 'locale'),(1, 'pattern'),(1, 'patternLength'),(1, 'result'),(1, 'resultLength'),(1, 'ap'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_parseMessage():
    try:
        return CFUNCTYPE(Void,win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('u_parseMessage', cdll['icu.dll']), ((1, 'locale'),(1, 'pattern'),(1, 'patternLength'),(1, 'source'),(1, 'sourceLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_vparseMessage():
    try:
        return CFUNCTYPE(Void,win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(SByte),POINTER(win32more.Globalization.UErrorCode))(('u_vparseMessage', cdll['icu.dll']), ((1, 'locale'),(1, 'pattern'),(1, 'patternLength'),(1, 'source'),(1, 'sourceLength'),(1, 'ap'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_formatMessageWithError():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UParseError_head),POINTER(win32more.Globalization.UErrorCode))(('u_formatMessageWithError', cdll['icu.dll']), ((1, 'locale'),(1, 'pattern'),(1, 'patternLength'),(1, 'result'),(1, 'resultLength'),(1, 'parseError'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_vformatMessageWithError():
    try:
        return CFUNCTYPE(Int32,win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UParseError_head),POINTER(SByte),POINTER(win32more.Globalization.UErrorCode))(('u_vformatMessageWithError', cdll['icu.dll']), ((1, 'locale'),(1, 'pattern'),(1, 'patternLength'),(1, 'result'),(1, 'resultLength'),(1, 'parseError'),(1, 'ap'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_parseMessageWithError():
    try:
        return CFUNCTYPE(Void,win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UParseError_head),POINTER(win32more.Globalization.UErrorCode))(('u_parseMessageWithError', cdll['icu.dll']), ((1, 'locale'),(1, 'pattern'),(1, 'patternLength'),(1, 'source'),(1, 'sourceLength'),(1, 'parseError'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_u_vparseMessageWithError():
    try:
        return CFUNCTYPE(Void,win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(SByte),POINTER(win32more.Globalization.UParseError_head),POINTER(win32more.Globalization.UErrorCode))(('u_vparseMessageWithError', cdll['icu.dll']), ((1, 'locale'),(1, 'pattern'),(1, 'patternLength'),(1, 'source'),(1, 'sourceLength'),(1, 'ap'),(1, 'parseError'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_umsg_open():
    try:
        return CFUNCTYPE(POINTER(c_void_p),POINTER(UInt16),Int32,win32more.Foundation.PSTR,POINTER(win32more.Globalization.UParseError_head),POINTER(win32more.Globalization.UErrorCode))(('umsg_open', cdll['icu.dll']), ((1, 'pattern'),(1, 'patternLength'),(1, 'locale'),(1, 'parseError'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_umsg_close():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p))(('umsg_close', cdll['icu.dll']), ((1, 'format'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_umsg_clone():
    try:
        return CFUNCTYPE(c_void_p,POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('umsg_clone', cdll['icu.dll']), ((1, 'fmt'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_umsg_setLocale():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),win32more.Foundation.PSTR)(('umsg_setLocale', cdll['icu.dll']), ((1, 'fmt'),(1, 'locale'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_umsg_getLocale():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,POINTER(c_void_p))(('umsg_getLocale', cdll['icu.dll']), ((1, 'fmt'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_umsg_applyPattern():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UParseError_head),POINTER(win32more.Globalization.UErrorCode))(('umsg_applyPattern', cdll['icu.dll']), ((1, 'fmt'),(1, 'pattern'),(1, 'patternLength'),(1, 'parseError'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_umsg_toPattern():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('umsg_toPattern', cdll['icu.dll']), ((1, 'fmt'),(1, 'result'),(1, 'resultLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_umsg_format():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('umsg_format', cdll['icu.dll']), ((1, 'fmt'),(1, 'result'),(1, 'resultLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_umsg_vformat():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(SByte),POINTER(win32more.Globalization.UErrorCode))(('umsg_vformat', cdll['icu.dll']), ((1, 'fmt'),(1, 'result'),(1, 'resultLength'),(1, 'ap'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_umsg_parse():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('umsg_parse', cdll['icu.dll']), ((1, 'fmt'),(1, 'source'),(1, 'sourceLength'),(1, 'count'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_umsg_vparse():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(Int32),POINTER(SByte),POINTER(win32more.Globalization.UErrorCode))(('umsg_vparse', cdll['icu.dll']), ((1, 'fmt'),(1, 'source'),(1, 'sourceLength'),(1, 'count'),(1, 'ap'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_umsg_autoQuoteApostrophe():
    try:
        return CFUNCTYPE(Int32,POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('umsg_autoQuoteApostrophe', cdll['icu.dll']), ((1, 'pattern'),(1, 'patternLength'),(1, 'dest'),(1, 'destCapacity'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_open():
    try:
        return CFUNCTYPE(POINTER(c_void_p),win32more.Globalization.UNumberFormatStyle,POINTER(UInt16),Int32,win32more.Foundation.PSTR,POINTER(win32more.Globalization.UParseError_head),POINTER(win32more.Globalization.UErrorCode))(('unum_open', cdll['icu.dll']), ((1, 'style'),(1, 'pattern'),(1, 'patternLength'),(1, 'locale'),(1, 'parseErr'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_close():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p))(('unum_close', cdll['icu.dll']), ((1, 'fmt'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_clone():
    try:
        return CFUNCTYPE(POINTER(c_void_p),POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('unum_clone', cdll['icu.dll']), ((1, 'fmt'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_format():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UFieldPosition_head),POINTER(win32more.Globalization.UErrorCode))(('unum_format', cdll['icu.dll']), ((1, 'fmt'),(1, 'number'),(1, 'result'),(1, 'resultLength'),(1, 'pos'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_formatInt64():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),Int64,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UFieldPosition_head),POINTER(win32more.Globalization.UErrorCode))(('unum_formatInt64', cdll['icu.dll']), ((1, 'fmt'),(1, 'number'),(1, 'result'),(1, 'resultLength'),(1, 'pos'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_formatDouble():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),Double,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UFieldPosition_head),POINTER(win32more.Globalization.UErrorCode))(('unum_formatDouble', cdll['icu.dll']), ((1, 'fmt'),(1, 'number'),(1, 'result'),(1, 'resultLength'),(1, 'pos'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_formatDoubleForFields():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),Double,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UFieldPositionIterator_head),POINTER(win32more.Globalization.UErrorCode))(('unum_formatDoubleForFields', cdll['icu.dll']), ((1, 'format'),(1, 'number'),(1, 'result'),(1, 'resultLength'),(1, 'fpositer'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_formatDecimal():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),win32more.Foundation.PSTR,Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UFieldPosition_head),POINTER(win32more.Globalization.UErrorCode))(('unum_formatDecimal', cdll['icu.dll']), ((1, 'fmt'),(1, 'number'),(1, 'length'),(1, 'result'),(1, 'resultLength'),(1, 'pos'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_formatDoubleCurrency():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),Double,POINTER(UInt16),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UFieldPosition_head),POINTER(win32more.Globalization.UErrorCode))(('unum_formatDoubleCurrency', cdll['icu.dll']), ((1, 'fmt'),(1, 'number'),(1, 'currency'),(1, 'result'),(1, 'resultLength'),(1, 'pos'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_formatUFormattable():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UFieldPosition_head),POINTER(win32more.Globalization.UErrorCode))(('unum_formatUFormattable', cdll['icu.dll']), ((1, 'fmt'),(1, 'number'),(1, 'result'),(1, 'resultLength'),(1, 'pos'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_parse():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('unum_parse', cdll['icu.dll']), ((1, 'fmt'),(1, 'text'),(1, 'textLength'),(1, 'parsePos'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_parseInt64():
    try:
        return CFUNCTYPE(Int64,POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('unum_parseInt64', cdll['icu.dll']), ((1, 'fmt'),(1, 'text'),(1, 'textLength'),(1, 'parsePos'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_parseDouble():
    try:
        return CFUNCTYPE(Double,POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('unum_parseDouble', cdll['icu.dll']), ((1, 'fmt'),(1, 'text'),(1, 'textLength'),(1, 'parsePos'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_parseDecimal():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(Int32),win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('unum_parseDecimal', cdll['icu.dll']), ((1, 'fmt'),(1, 'text'),(1, 'textLength'),(1, 'parsePos'),(1, 'outBuf'),(1, 'outBufLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_parseDoubleCurrency():
    try:
        return CFUNCTYPE(Double,POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(Int32),POINTER(UInt16),POINTER(win32more.Globalization.UErrorCode))(('unum_parseDoubleCurrency', cdll['icu.dll']), ((1, 'fmt'),(1, 'text'),(1, 'textLength'),(1, 'parsePos'),(1, 'currency'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_parseToUFormattable():
    try:
        return CFUNCTYPE(POINTER(c_void_p),POINTER(c_void_p),POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('unum_parseToUFormattable', cdll['icu.dll']), ((1, 'fmt'),(1, 'result'),(1, 'text'),(1, 'textLength'),(1, 'parsePos'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_applyPattern():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),SByte,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UParseError_head),POINTER(win32more.Globalization.UErrorCode))(('unum_applyPattern', cdll['icu.dll']), ((1, 'format'),(1, 'localized'),(1, 'pattern'),(1, 'patternLength'),(1, 'parseError'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_getAvailable():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,Int32)(('unum_getAvailable', cdll['icu.dll']), ((1, 'localeIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_countAvailable():
    try:
        return CFUNCTYPE(Int32,)(('unum_countAvailable', cdll['icu.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_getAttribute():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),win32more.Globalization.UNumberFormatAttribute)(('unum_getAttribute', cdll['icu.dll']), ((1, 'fmt'),(1, 'attr'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_setAttribute():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),win32more.Globalization.UNumberFormatAttribute,Int32)(('unum_setAttribute', cdll['icu.dll']), ((1, 'fmt'),(1, 'attr'),(1, 'newValue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_getDoubleAttribute():
    try:
        return CFUNCTYPE(Double,POINTER(c_void_p),win32more.Globalization.UNumberFormatAttribute)(('unum_getDoubleAttribute', cdll['icu.dll']), ((1, 'fmt'),(1, 'attr'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_setDoubleAttribute():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),win32more.Globalization.UNumberFormatAttribute,Double)(('unum_setDoubleAttribute', cdll['icu.dll']), ((1, 'fmt'),(1, 'attr'),(1, 'newValue'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_getTextAttribute():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),win32more.Globalization.UNumberFormatTextAttribute,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('unum_getTextAttribute', cdll['icu.dll']), ((1, 'fmt'),(1, 'tag'),(1, 'result'),(1, 'resultLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_setTextAttribute():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),win32more.Globalization.UNumberFormatTextAttribute,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('unum_setTextAttribute', cdll['icu.dll']), ((1, 'fmt'),(1, 'tag'),(1, 'newValue'),(1, 'newValueLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_toPattern():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),SByte,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('unum_toPattern', cdll['icu.dll']), ((1, 'fmt'),(1, 'isPatternLocalized'),(1, 'result'),(1, 'resultLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_getSymbol():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),win32more.Globalization.UNumberFormatSymbol,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('unum_getSymbol', cdll['icu.dll']), ((1, 'fmt'),(1, 'symbol'),(1, 'buffer'),(1, 'size'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_setSymbol():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),win32more.Globalization.UNumberFormatSymbol,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('unum_setSymbol', cdll['icu.dll']), ((1, 'fmt'),(1, 'symbol'),(1, 'value'),(1, 'length'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_getLocaleByType():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,POINTER(c_void_p),win32more.Globalization.ULocDataLocaleType,POINTER(win32more.Globalization.UErrorCode))(('unum_getLocaleByType', cdll['icu.dll']), ((1, 'fmt'),(1, 'type'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_setContext():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),win32more.Globalization.UDisplayContext,POINTER(win32more.Globalization.UErrorCode))(('unum_setContext', cdll['icu.dll']), ((1, 'fmt'),(1, 'value'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unum_getContext():
    try:
        return CFUNCTYPE(win32more.Globalization.UDisplayContext,POINTER(c_void_p),win32more.Globalization.UDisplayContextType,POINTER(win32more.Globalization.UErrorCode))(('unum_getContext', cdll['icu.dll']), ((1, 'fmt'),(1, 'type'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_toCalendarDateField():
    try:
        return CFUNCTYPE(win32more.Globalization.UCalendarDateFields,win32more.Globalization.UDateFormatField)(('udat_toCalendarDateField', cdll['icu.dll']), ((1, 'field'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_open():
    try:
        return CFUNCTYPE(POINTER(c_void_p),win32more.Globalization.UDateFormatStyle,win32more.Globalization.UDateFormatStyle,win32more.Foundation.PSTR,POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('udat_open', cdll['icu.dll']), ((1, 'timeStyle'),(1, 'dateStyle'),(1, 'locale'),(1, 'tzID'),(1, 'tzIDLength'),(1, 'pattern'),(1, 'patternLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_close():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p))(('udat_close', cdll['icu.dll']), ((1, 'format'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_getBooleanAttribute():
    try:
        return CFUNCTYPE(SByte,POINTER(c_void_p),win32more.Globalization.UDateFormatBooleanAttribute,POINTER(win32more.Globalization.UErrorCode))(('udat_getBooleanAttribute', cdll['icu.dll']), ((1, 'fmt'),(1, 'attr'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_setBooleanAttribute():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),win32more.Globalization.UDateFormatBooleanAttribute,SByte,POINTER(win32more.Globalization.UErrorCode))(('udat_setBooleanAttribute', cdll['icu.dll']), ((1, 'fmt'),(1, 'attr'),(1, 'newValue'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_clone():
    try:
        return CFUNCTYPE(POINTER(c_void_p),POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('udat_clone', cdll['icu.dll']), ((1, 'fmt'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_format():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),Double,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UFieldPosition_head),POINTER(win32more.Globalization.UErrorCode))(('udat_format', cdll['icu.dll']), ((1, 'format'),(1, 'dateToFormat'),(1, 'result'),(1, 'resultLength'),(1, 'position'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_formatCalendar():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UFieldPosition_head),POINTER(win32more.Globalization.UErrorCode))(('udat_formatCalendar', cdll['icu.dll']), ((1, 'format'),(1, 'calendar'),(1, 'result'),(1, 'capacity'),(1, 'position'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_formatForFields():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),Double,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UFieldPositionIterator_head),POINTER(win32more.Globalization.UErrorCode))(('udat_formatForFields', cdll['icu.dll']), ((1, 'format'),(1, 'dateToFormat'),(1, 'result'),(1, 'resultLength'),(1, 'fpositer'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_formatCalendarForFields():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UFieldPositionIterator_head),POINTER(win32more.Globalization.UErrorCode))(('udat_formatCalendarForFields', cdll['icu.dll']), ((1, 'format'),(1, 'calendar'),(1, 'result'),(1, 'capacity'),(1, 'fpositer'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_parse():
    try:
        return CFUNCTYPE(Double,POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('udat_parse', cdll['icu.dll']), ((1, 'format'),(1, 'text'),(1, 'textLength'),(1, 'parsePos'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_parseCalendar():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('udat_parseCalendar', cdll['icu.dll']), ((1, 'format'),(1, 'calendar'),(1, 'text'),(1, 'textLength'),(1, 'parsePos'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_isLenient():
    try:
        return CFUNCTYPE(SByte,POINTER(c_void_p))(('udat_isLenient', cdll['icu.dll']), ((1, 'fmt'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_setLenient():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),SByte)(('udat_setLenient', cdll['icu.dll']), ((1, 'fmt'),(1, 'isLenient'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_getCalendar():
    try:
        return CFUNCTYPE(POINTER(c_void_p),POINTER(c_void_p))(('udat_getCalendar', cdll['icu.dll']), ((1, 'fmt'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_setCalendar():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),POINTER(c_void_p))(('udat_setCalendar', cdll['icu.dll']), ((1, 'fmt'),(1, 'calendarToSet'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_getNumberFormat():
    try:
        return CFUNCTYPE(POINTER(c_void_p),POINTER(c_void_p))(('udat_getNumberFormat', cdll['icu.dll']), ((1, 'fmt'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_getNumberFormatForField():
    try:
        return CFUNCTYPE(POINTER(c_void_p),POINTER(c_void_p),UInt16)(('udat_getNumberFormatForField', cdll['icu.dll']), ((1, 'fmt'),(1, 'field'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_adoptNumberFormatForFields():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),POINTER(UInt16),POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('udat_adoptNumberFormatForFields', cdll['icu.dll']), ((1, 'fmt'),(1, 'fields'),(1, 'numberFormatToSet'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_setNumberFormat():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),POINTER(c_void_p))(('udat_setNumberFormat', cdll['icu.dll']), ((1, 'fmt'),(1, 'numberFormatToSet'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_adoptNumberFormat():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),POINTER(c_void_p))(('udat_adoptNumberFormat', cdll['icu.dll']), ((1, 'fmt'),(1, 'numberFormatToAdopt'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_getAvailable():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,Int32)(('udat_getAvailable', cdll['icu.dll']), ((1, 'localeIndex'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_countAvailable():
    try:
        return CFUNCTYPE(Int32,)(('udat_countAvailable', cdll['icu.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_get2DigitYearStart():
    try:
        return CFUNCTYPE(Double,POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('udat_get2DigitYearStart', cdll['icu.dll']), ((1, 'fmt'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_set2DigitYearStart():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),Double,POINTER(win32more.Globalization.UErrorCode))(('udat_set2DigitYearStart', cdll['icu.dll']), ((1, 'fmt'),(1, 'd'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_toPattern():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),SByte,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('udat_toPattern', cdll['icu.dll']), ((1, 'fmt'),(1, 'localized'),(1, 'result'),(1, 'resultLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_applyPattern():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),SByte,POINTER(UInt16),Int32)(('udat_applyPattern', cdll['icu.dll']), ((1, 'format'),(1, 'localized'),(1, 'pattern'),(1, 'patternLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_getSymbols():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),win32more.Globalization.UDateFormatSymbolType,Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('udat_getSymbols', cdll['icu.dll']), ((1, 'fmt'),(1, 'type'),(1, 'symbolIndex'),(1, 'result'),(1, 'resultLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_countSymbols():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),win32more.Globalization.UDateFormatSymbolType)(('udat_countSymbols', cdll['icu.dll']), ((1, 'fmt'),(1, 'type'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_setSymbols():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),win32more.Globalization.UDateFormatSymbolType,Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('udat_setSymbols', cdll['icu.dll']), ((1, 'format'),(1, 'type'),(1, 'symbolIndex'),(1, 'value'),(1, 'valueLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_getLocaleByType():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,POINTER(c_void_p),win32more.Globalization.ULocDataLocaleType,POINTER(win32more.Globalization.UErrorCode))(('udat_getLocaleByType', cdll['icu.dll']), ((1, 'fmt'),(1, 'type'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_setContext():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),win32more.Globalization.UDisplayContext,POINTER(win32more.Globalization.UErrorCode))(('udat_setContext', cdll['icu.dll']), ((1, 'fmt'),(1, 'value'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udat_getContext():
    try:
        return CFUNCTYPE(win32more.Globalization.UDisplayContext,POINTER(c_void_p),win32more.Globalization.UDisplayContextType,POINTER(win32more.Globalization.UErrorCode))(('udat_getContext', cdll['icu.dll']), ((1, 'fmt'),(1, 'type'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udatpg_open():
    try:
        return CFUNCTYPE(POINTER(c_void_p),win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('udatpg_open', cdll['icu.dll']), ((1, 'locale'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udatpg_openEmpty():
    try:
        return CFUNCTYPE(POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('udatpg_openEmpty', cdll['icu.dll']), ((1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udatpg_close():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p))(('udatpg_close', cdll['icu.dll']), ((1, 'dtpg'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udatpg_clone():
    try:
        return CFUNCTYPE(POINTER(c_void_p),POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('udatpg_clone', cdll['icu.dll']), ((1, 'dtpg'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udatpg_getBestPattern():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('udatpg_getBestPattern', cdll['icu.dll']), ((1, 'dtpg'),(1, 'skeleton'),(1, 'length'),(1, 'bestPattern'),(1, 'capacity'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udatpg_getBestPatternWithOptions():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),POINTER(UInt16),Int32,win32more.Globalization.UDateTimePatternMatchOptions,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('udatpg_getBestPatternWithOptions', cdll['icu.dll']), ((1, 'dtpg'),(1, 'skeleton'),(1, 'length'),(1, 'options'),(1, 'bestPattern'),(1, 'capacity'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udatpg_getSkeleton():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('udatpg_getSkeleton', cdll['icu.dll']), ((1, 'unusedDtpg'),(1, 'pattern'),(1, 'length'),(1, 'skeleton'),(1, 'capacity'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udatpg_getBaseSkeleton():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('udatpg_getBaseSkeleton', cdll['icu.dll']), ((1, 'unusedDtpg'),(1, 'pattern'),(1, 'length'),(1, 'baseSkeleton'),(1, 'capacity'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udatpg_addPattern():
    try:
        return CFUNCTYPE(win32more.Globalization.UDateTimePatternConflict,POINTER(c_void_p),POINTER(UInt16),Int32,SByte,POINTER(UInt16),Int32,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('udatpg_addPattern', cdll['icu.dll']), ((1, 'dtpg'),(1, 'pattern'),(1, 'patternLength'),(1, 'override'),(1, 'conflictingPattern'),(1, 'capacity'),(1, 'pLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udatpg_setAppendItemFormat():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),win32more.Globalization.UDateTimePatternField,POINTER(UInt16),Int32)(('udatpg_setAppendItemFormat', cdll['icu.dll']), ((1, 'dtpg'),(1, 'field'),(1, 'value'),(1, 'length'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udatpg_getAppendItemFormat():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(c_void_p),win32more.Globalization.UDateTimePatternField,POINTER(Int32))(('udatpg_getAppendItemFormat', cdll['icu.dll']), ((1, 'dtpg'),(1, 'field'),(1, 'pLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udatpg_setAppendItemName():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),win32more.Globalization.UDateTimePatternField,POINTER(UInt16),Int32)(('udatpg_setAppendItemName', cdll['icu.dll']), ((1, 'dtpg'),(1, 'field'),(1, 'value'),(1, 'length'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udatpg_getAppendItemName():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(c_void_p),win32more.Globalization.UDateTimePatternField,POINTER(Int32))(('udatpg_getAppendItemName', cdll['icu.dll']), ((1, 'dtpg'),(1, 'field'),(1, 'pLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udatpg_getFieldDisplayName():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),win32more.Globalization.UDateTimePatternField,win32more.Globalization.UDateTimePGDisplayWidth,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('udatpg_getFieldDisplayName', cdll['icu.dll']), ((1, 'dtpg'),(1, 'field'),(1, 'width'),(1, 'fieldName'),(1, 'capacity'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udatpg_setDateTimeFormat():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),POINTER(UInt16),Int32)(('udatpg_setDateTimeFormat', cdll['icu.dll']), ((1, 'dtpg'),(1, 'dtFormat'),(1, 'length'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udatpg_getDateTimeFormat():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(c_void_p),POINTER(Int32))(('udatpg_getDateTimeFormat', cdll['icu.dll']), ((1, 'dtpg'),(1, 'pLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udatpg_setDecimal():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),POINTER(UInt16),Int32)(('udatpg_setDecimal', cdll['icu.dll']), ((1, 'dtpg'),(1, 'decimal'),(1, 'length'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udatpg_getDecimal():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(c_void_p),POINTER(Int32))(('udatpg_getDecimal', cdll['icu.dll']), ((1, 'dtpg'),(1, 'pLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udatpg_replaceFieldTypes():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('udatpg_replaceFieldTypes', cdll['icu.dll']), ((1, 'dtpg'),(1, 'pattern'),(1, 'patternLength'),(1, 'skeleton'),(1, 'skeletonLength'),(1, 'dest'),(1, 'destCapacity'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udatpg_replaceFieldTypesWithOptions():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(UInt16),Int32,win32more.Globalization.UDateTimePatternMatchOptions,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('udatpg_replaceFieldTypesWithOptions', cdll['icu.dll']), ((1, 'dtpg'),(1, 'pattern'),(1, 'patternLength'),(1, 'skeleton'),(1, 'skeletonLength'),(1, 'options'),(1, 'dest'),(1, 'destCapacity'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udatpg_openSkeletons():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('udatpg_openSkeletons', cdll['icu.dll']), ((1, 'dtpg'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udatpg_openBaseSkeletons():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('udatpg_openBaseSkeletons', cdll['icu.dll']), ((1, 'dtpg'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_udatpg_getPatternForSkeleton():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(Int32))(('udatpg_getPatternForSkeleton', cdll['icu.dll']), ((1, 'dtpg'),(1, 'skeleton'),(1, 'skeletonLength'),(1, 'pLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unumf_openForSkeletonAndLocale():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UNumberFormatter_head),POINTER(UInt16),Int32,win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('unumf_openForSkeletonAndLocale', cdll['icu.dll']), ((1, 'skeleton'),(1, 'skeletonLen'),(1, 'locale'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unumf_openForSkeletonAndLocaleWithError():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UNumberFormatter_head),POINTER(UInt16),Int32,win32more.Foundation.PSTR,POINTER(win32more.Globalization.UParseError_head),POINTER(win32more.Globalization.UErrorCode))(('unumf_openForSkeletonAndLocaleWithError', cdll['icu.dll']), ((1, 'skeleton'),(1, 'skeletonLen'),(1, 'locale'),(1, 'perror'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unumf_openResult():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UFormattedNumber_head),POINTER(win32more.Globalization.UErrorCode))(('unumf_openResult', cdll['icu.dll']), ((1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unumf_formatInt():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UNumberFormatter_head),Int64,POINTER(win32more.Globalization.UFormattedNumber_head),POINTER(win32more.Globalization.UErrorCode))(('unumf_formatInt', cdll['icu.dll']), ((1, 'uformatter'),(1, 'value'),(1, 'uresult'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unumf_formatDouble():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UNumberFormatter_head),Double,POINTER(win32more.Globalization.UFormattedNumber_head),POINTER(win32more.Globalization.UErrorCode))(('unumf_formatDouble', cdll['icu.dll']), ((1, 'uformatter'),(1, 'value'),(1, 'uresult'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unumf_formatDecimal():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UNumberFormatter_head),win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UFormattedNumber_head),POINTER(win32more.Globalization.UErrorCode))(('unumf_formatDecimal', cdll['icu.dll']), ((1, 'uformatter'),(1, 'value'),(1, 'valueLen'),(1, 'uresult'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unumf_resultAsValue():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UFormattedValue_head),POINTER(win32more.Globalization.UFormattedNumber_head),POINTER(win32more.Globalization.UErrorCode))(('unumf_resultAsValue', cdll['icu.dll']), ((1, 'uresult'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unumf_resultToString():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UFormattedNumber_head),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('unumf_resultToString', cdll['icu.dll']), ((1, 'uresult'),(1, 'buffer'),(1, 'bufferCapacity'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unumf_resultNextFieldPosition():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UFormattedNumber_head),POINTER(win32more.Globalization.UFieldPosition_head),POINTER(win32more.Globalization.UErrorCode))(('unumf_resultNextFieldPosition', cdll['icu.dll']), ((1, 'uresult'),(1, 'ufpos'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unumf_resultGetAllFieldPositions():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UFormattedNumber_head),POINTER(win32more.Globalization.UFieldPositionIterator_head),POINTER(win32more.Globalization.UErrorCode))(('unumf_resultGetAllFieldPositions', cdll['icu.dll']), ((1, 'uresult'),(1, 'ufpositer'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unumf_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UNumberFormatter_head))(('unumf_close', cdll['icu.dll']), ((1, 'uformatter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unumf_closeResult():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UFormattedNumber_head))(('unumf_closeResult', cdll['icu.dll']), ((1, 'uresult'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unumsys_open():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UNumberingSystem_head),win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('unumsys_open', cdll['icu.dll']), ((1, 'locale'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unumsys_openByName():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UNumberingSystem_head),win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('unumsys_openByName', cdll['icu.dll']), ((1, 'name'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unumsys_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UNumberingSystem_head))(('unumsys_close', cdll['icu.dll']), ((1, 'unumsys'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unumsys_openAvailableNames():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),POINTER(win32more.Globalization.UErrorCode))(('unumsys_openAvailableNames', cdll['icu.dll']), ((1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unumsys_getName():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,POINTER(win32more.Globalization.UNumberingSystem_head))(('unumsys_getName', cdll['icu.dll']), ((1, 'unumsys'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unumsys_isAlgorithmic():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UNumberingSystem_head))(('unumsys_isAlgorithmic', cdll['icu.dll']), ((1, 'unumsys'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unumsys_getRadix():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UNumberingSystem_head))(('unumsys_getRadix', cdll['icu.dll']), ((1, 'unumsys'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_unumsys_getDescription():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UNumberingSystem_head),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('unumsys_getDescription', cdll['icu.dll']), ((1, 'unumsys'),(1, 'result'),(1, 'resultLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uplrules_open():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UPluralRules_head),win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('uplrules_open', cdll['icu.dll']), ((1, 'locale'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uplrules_openForType():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UPluralRules_head),win32more.Foundation.PSTR,win32more.Globalization.UPluralType,POINTER(win32more.Globalization.UErrorCode))(('uplrules_openForType', cdll['icu.dll']), ((1, 'locale'),(1, 'type'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uplrules_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UPluralRules_head))(('uplrules_close', cdll['icu.dll']), ((1, 'uplrules'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uplrules_select():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UPluralRules_head),Double,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uplrules_select', cdll['icu.dll']), ((1, 'uplrules'),(1, 'number'),(1, 'keyword'),(1, 'capacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uplrules_selectFormatted():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UPluralRules_head),POINTER(win32more.Globalization.UFormattedNumber_head),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uplrules_selectFormatted', cdll['icu.dll']), ((1, 'uplrules'),(1, 'number'),(1, 'keyword'),(1, 'capacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uplrules_getKeywords():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),POINTER(win32more.Globalization.UPluralRules_head),POINTER(win32more.Globalization.UErrorCode))(('uplrules_getKeywords', cdll['icu.dll']), ((1, 'uplrules'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_open():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.URegularExpression_head),POINTER(UInt16),Int32,UInt32,POINTER(win32more.Globalization.UParseError_head),POINTER(win32more.Globalization.UErrorCode))(('uregex_open', cdll['icu.dll']), ((1, 'pattern'),(1, 'patternLength'),(1, 'flags'),(1, 'pe'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_openUText():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.UText_head),UInt32,POINTER(win32more.Globalization.UParseError_head),POINTER(win32more.Globalization.UErrorCode))(('uregex_openUText', cdll['icu.dll']), ((1, 'pattern'),(1, 'flags'),(1, 'pe'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_openC():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.URegularExpression_head),win32more.Foundation.PSTR,UInt32,POINTER(win32more.Globalization.UParseError_head),POINTER(win32more.Globalization.UErrorCode))(('uregex_openC', cdll['icu.dll']), ((1, 'pattern'),(1, 'flags'),(1, 'pe'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.URegularExpression_head))(('uregex_close', cdll['icu.dll']), ((1, 'regexp'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_clone():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.UErrorCode))(('uregex_clone', cdll['icu.dll']), ((1, 'regexp'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_pattern():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(win32more.Globalization.URegularExpression_head),POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('uregex_pattern', cdll['icu.dll']), ((1, 'regexp'),(1, 'patLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_patternUText():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.UErrorCode))(('uregex_patternUText', cdll['icu.dll']), ((1, 'regexp'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_flags():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.UErrorCode))(('uregex_flags', cdll['icu.dll']), ((1, 'regexp'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_setText():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.URegularExpression_head),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uregex_setText', cdll['icu.dll']), ((1, 'regexp'),(1, 'text'),(1, 'textLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_setUText():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.UErrorCode))(('uregex_setUText', cdll['icu.dll']), ((1, 'regexp'),(1, 'text'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_getText():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(win32more.Globalization.URegularExpression_head),POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('uregex_getText', cdll['icu.dll']), ((1, 'regexp'),(1, 'textLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_getUText():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.UErrorCode))(('uregex_getUText', cdll['icu.dll']), ((1, 'regexp'),(1, 'dest'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_refreshUText():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.UErrorCode))(('uregex_refreshUText', cdll['icu.dll']), ((1, 'regexp'),(1, 'text'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_matches():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.URegularExpression_head),Int32,POINTER(win32more.Globalization.UErrorCode))(('uregex_matches', cdll['icu.dll']), ((1, 'regexp'),(1, 'startIndex'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_matches64():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.URegularExpression_head),Int64,POINTER(win32more.Globalization.UErrorCode))(('uregex_matches64', cdll['icu.dll']), ((1, 'regexp'),(1, 'startIndex'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_lookingAt():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.URegularExpression_head),Int32,POINTER(win32more.Globalization.UErrorCode))(('uregex_lookingAt', cdll['icu.dll']), ((1, 'regexp'),(1, 'startIndex'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_lookingAt64():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.URegularExpression_head),Int64,POINTER(win32more.Globalization.UErrorCode))(('uregex_lookingAt64', cdll['icu.dll']), ((1, 'regexp'),(1, 'startIndex'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_find():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.URegularExpression_head),Int32,POINTER(win32more.Globalization.UErrorCode))(('uregex_find', cdll['icu.dll']), ((1, 'regexp'),(1, 'startIndex'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_find64():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.URegularExpression_head),Int64,POINTER(win32more.Globalization.UErrorCode))(('uregex_find64', cdll['icu.dll']), ((1, 'regexp'),(1, 'startIndex'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_findNext():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.UErrorCode))(('uregex_findNext', cdll['icu.dll']), ((1, 'regexp'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_groupCount():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.UErrorCode))(('uregex_groupCount', cdll['icu.dll']), ((1, 'regexp'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_groupNumberFromName():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.URegularExpression_head),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uregex_groupNumberFromName', cdll['icu.dll']), ((1, 'regexp'),(1, 'groupName'),(1, 'nameLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_groupNumberFromCName():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.URegularExpression_head),win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('uregex_groupNumberFromCName', cdll['icu.dll']), ((1, 'regexp'),(1, 'groupName'),(1, 'nameLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_group():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.URegularExpression_head),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uregex_group', cdll['icu.dll']), ((1, 'regexp'),(1, 'groupNum'),(1, 'dest'),(1, 'destCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_groupUText():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.URegularExpression_head),Int32,POINTER(win32more.Globalization.UText_head),POINTER(Int64),POINTER(win32more.Globalization.UErrorCode))(('uregex_groupUText', cdll['icu.dll']), ((1, 'regexp'),(1, 'groupNum'),(1, 'dest'),(1, 'groupLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_start():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.URegularExpression_head),Int32,POINTER(win32more.Globalization.UErrorCode))(('uregex_start', cdll['icu.dll']), ((1, 'regexp'),(1, 'groupNum'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_start64():
    try:
        return CFUNCTYPE(Int64,POINTER(win32more.Globalization.URegularExpression_head),Int32,POINTER(win32more.Globalization.UErrorCode))(('uregex_start64', cdll['icu.dll']), ((1, 'regexp'),(1, 'groupNum'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_end():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.URegularExpression_head),Int32,POINTER(win32more.Globalization.UErrorCode))(('uregex_end', cdll['icu.dll']), ((1, 'regexp'),(1, 'groupNum'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_end64():
    try:
        return CFUNCTYPE(Int64,POINTER(win32more.Globalization.URegularExpression_head),Int32,POINTER(win32more.Globalization.UErrorCode))(('uregex_end64', cdll['icu.dll']), ((1, 'regexp'),(1, 'groupNum'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_reset():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.URegularExpression_head),Int32,POINTER(win32more.Globalization.UErrorCode))(('uregex_reset', cdll['icu.dll']), ((1, 'regexp'),(1, 'index'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_reset64():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.URegularExpression_head),Int64,POINTER(win32more.Globalization.UErrorCode))(('uregex_reset64', cdll['icu.dll']), ((1, 'regexp'),(1, 'index'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_setRegion():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.URegularExpression_head),Int32,Int32,POINTER(win32more.Globalization.UErrorCode))(('uregex_setRegion', cdll['icu.dll']), ((1, 'regexp'),(1, 'regionStart'),(1, 'regionLimit'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_setRegion64():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.URegularExpression_head),Int64,Int64,POINTER(win32more.Globalization.UErrorCode))(('uregex_setRegion64', cdll['icu.dll']), ((1, 'regexp'),(1, 'regionStart'),(1, 'regionLimit'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_setRegionAndStart():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.URegularExpression_head),Int64,Int64,Int64,POINTER(win32more.Globalization.UErrorCode))(('uregex_setRegionAndStart', cdll['icu.dll']), ((1, 'regexp'),(1, 'regionStart'),(1, 'regionLimit'),(1, 'startIndex'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_regionStart():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.UErrorCode))(('uregex_regionStart', cdll['icu.dll']), ((1, 'regexp'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_regionStart64():
    try:
        return CFUNCTYPE(Int64,POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.UErrorCode))(('uregex_regionStart64', cdll['icu.dll']), ((1, 'regexp'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_regionEnd():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.UErrorCode))(('uregex_regionEnd', cdll['icu.dll']), ((1, 'regexp'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_regionEnd64():
    try:
        return CFUNCTYPE(Int64,POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.UErrorCode))(('uregex_regionEnd64', cdll['icu.dll']), ((1, 'regexp'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_hasTransparentBounds():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.UErrorCode))(('uregex_hasTransparentBounds', cdll['icu.dll']), ((1, 'regexp'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_useTransparentBounds():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.URegularExpression_head),SByte,POINTER(win32more.Globalization.UErrorCode))(('uregex_useTransparentBounds', cdll['icu.dll']), ((1, 'regexp'),(1, 'b'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_hasAnchoringBounds():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.UErrorCode))(('uregex_hasAnchoringBounds', cdll['icu.dll']), ((1, 'regexp'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_useAnchoringBounds():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.URegularExpression_head),SByte,POINTER(win32more.Globalization.UErrorCode))(('uregex_useAnchoringBounds', cdll['icu.dll']), ((1, 'regexp'),(1, 'b'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_hitEnd():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.UErrorCode))(('uregex_hitEnd', cdll['icu.dll']), ((1, 'regexp'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_requireEnd():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.UErrorCode))(('uregex_requireEnd', cdll['icu.dll']), ((1, 'regexp'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_replaceAll():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.URegularExpression_head),POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uregex_replaceAll', cdll['icu.dll']), ((1, 'regexp'),(1, 'replacementText'),(1, 'replacementLength'),(1, 'destBuf'),(1, 'destCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_replaceAllUText():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.UErrorCode))(('uregex_replaceAllUText', cdll['icu.dll']), ((1, 'regexp'),(1, 'replacement'),(1, 'dest'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_replaceFirst():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.URegularExpression_head),POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uregex_replaceFirst', cdll['icu.dll']), ((1, 'regexp'),(1, 'replacementText'),(1, 'replacementLength'),(1, 'destBuf'),(1, 'destCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_replaceFirstUText():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.UErrorCode))(('uregex_replaceFirstUText', cdll['icu.dll']), ((1, 'regexp'),(1, 'replacement'),(1, 'dest'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_appendReplacement():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.URegularExpression_head),POINTER(UInt16),Int32,POINTER(POINTER(UInt16)),POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('uregex_appendReplacement', cdll['icu.dll']), ((1, 'regexp'),(1, 'replacementText'),(1, 'replacementLength'),(1, 'destBuf'),(1, 'destCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_appendReplacementUText():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.UErrorCode))(('uregex_appendReplacementUText', cdll['icu.dll']), ((1, 'regexp'),(1, 'replacementText'),(1, 'dest'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_appendTail():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.URegularExpression_head),POINTER(POINTER(UInt16)),POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('uregex_appendTail', cdll['icu.dll']), ((1, 'regexp'),(1, 'destBuf'),(1, 'destCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_appendTailUText():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.UErrorCode))(('uregex_appendTailUText', cdll['icu.dll']), ((1, 'regexp'),(1, 'dest'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_split():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.URegularExpression_head),POINTER(UInt16),Int32,POINTER(Int32),POINTER(POINTER(UInt16)),Int32,POINTER(win32more.Globalization.UErrorCode))(('uregex_split', cdll['icu.dll']), ((1, 'regexp'),(1, 'destBuf'),(1, 'destCapacity'),(1, 'requiredCapacity'),(1, 'destFields'),(1, 'destFieldsCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_splitUText():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.URegularExpression_head),POINTER(POINTER(win32more.Globalization.UText_head)),Int32,POINTER(win32more.Globalization.UErrorCode))(('uregex_splitUText', cdll['icu.dll']), ((1, 'regexp'),(1, 'destFields'),(1, 'destFieldsCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_setTimeLimit():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.URegularExpression_head),Int32,POINTER(win32more.Globalization.UErrorCode))(('uregex_setTimeLimit', cdll['icu.dll']), ((1, 'regexp'),(1, 'limit'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_getTimeLimit():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.UErrorCode))(('uregex_getTimeLimit', cdll['icu.dll']), ((1, 'regexp'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_setStackLimit():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.URegularExpression_head),Int32,POINTER(win32more.Globalization.UErrorCode))(('uregex_setStackLimit', cdll['icu.dll']), ((1, 'regexp'),(1, 'limit'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_getStackLimit():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.UErrorCode))(('uregex_getStackLimit', cdll['icu.dll']), ((1, 'regexp'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_setMatchCallback():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.URegularExpression_head),win32more.Globalization.URegexMatchCallback,c_void_p,POINTER(win32more.Globalization.UErrorCode))(('uregex_setMatchCallback', cdll['icu.dll']), ((1, 'regexp'),(1, 'callback'),(1, 'context'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_getMatchCallback():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.URegexMatchCallback),POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('uregex_getMatchCallback', cdll['icu.dll']), ((1, 'regexp'),(1, 'callback'),(1, 'context'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_setFindProgressCallback():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.URegularExpression_head),win32more.Globalization.URegexFindProgressCallback,c_void_p,POINTER(win32more.Globalization.UErrorCode))(('uregex_setFindProgressCallback', cdll['icu.dll']), ((1, 'regexp'),(1, 'callback'),(1, 'context'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregex_getFindProgressCallback():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.URegularExpression_head),POINTER(win32more.Globalization.URegexFindProgressCallback),POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('uregex_getFindProgressCallback', cdll['icu.dll']), ((1, 'regexp'),(1, 'callback'),(1, 'context'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregion_getRegionFromCode():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.URegion_head),win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('uregion_getRegionFromCode', cdll['icu.dll']), ((1, 'regionCode'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregion_getRegionFromNumericCode():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.URegion_head),Int32,POINTER(win32more.Globalization.UErrorCode))(('uregion_getRegionFromNumericCode', cdll['icu.dll']), ((1, 'code'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregion_getAvailable():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),win32more.Globalization.URegionType,POINTER(win32more.Globalization.UErrorCode))(('uregion_getAvailable', cdll['icu.dll']), ((1, 'type'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregion_areEqual():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.URegion_head),POINTER(win32more.Globalization.URegion_head))(('uregion_areEqual', cdll['icu.dll']), ((1, 'uregion'),(1, 'otherRegion'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregion_getContainingRegion():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.URegion_head),POINTER(win32more.Globalization.URegion_head))(('uregion_getContainingRegion', cdll['icu.dll']), ((1, 'uregion'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregion_getContainingRegionOfType():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.URegion_head),POINTER(win32more.Globalization.URegion_head),win32more.Globalization.URegionType)(('uregion_getContainingRegionOfType', cdll['icu.dll']), ((1, 'uregion'),(1, 'type'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregion_getContainedRegions():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),POINTER(win32more.Globalization.URegion_head),POINTER(win32more.Globalization.UErrorCode))(('uregion_getContainedRegions', cdll['icu.dll']), ((1, 'uregion'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregion_getContainedRegionsOfType():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),POINTER(win32more.Globalization.URegion_head),win32more.Globalization.URegionType,POINTER(win32more.Globalization.UErrorCode))(('uregion_getContainedRegionsOfType', cdll['icu.dll']), ((1, 'uregion'),(1, 'type'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregion_contains():
    try:
        return CFUNCTYPE(SByte,POINTER(win32more.Globalization.URegion_head),POINTER(win32more.Globalization.URegion_head))(('uregion_contains', cdll['icu.dll']), ((1, 'uregion'),(1, 'otherRegion'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregion_getPreferredValues():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),POINTER(win32more.Globalization.URegion_head),POINTER(win32more.Globalization.UErrorCode))(('uregion_getPreferredValues', cdll['icu.dll']), ((1, 'uregion'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregion_getRegionCode():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,POINTER(win32more.Globalization.URegion_head))(('uregion_getRegionCode', cdll['icu.dll']), ((1, 'uregion'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregion_getNumericCode():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.URegion_head))(('uregion_getNumericCode', cdll['icu.dll']), ((1, 'uregion'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uregion_getType():
    try:
        return CFUNCTYPE(win32more.Globalization.URegionType,POINTER(win32more.Globalization.URegion_head))(('uregion_getType', cdll['icu.dll']), ((1, 'uregion'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ureldatefmt_open():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.URelativeDateTimeFormatter_head),win32more.Foundation.PSTR,POINTER(c_void_p),win32more.Globalization.UDateRelativeDateTimeFormatterStyle,win32more.Globalization.UDisplayContext,POINTER(win32more.Globalization.UErrorCode))(('ureldatefmt_open', cdll['icu.dll']), ((1, 'locale'),(1, 'nfToAdopt'),(1, 'width'),(1, 'capitalizationContext'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ureldatefmt_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.URelativeDateTimeFormatter_head))(('ureldatefmt_close', cdll['icu.dll']), ((1, 'reldatefmt'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ureldatefmt_openResult():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UFormattedRelativeDateTime_head),POINTER(win32more.Globalization.UErrorCode))(('ureldatefmt_openResult', cdll['icu.dll']), ((1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ureldatefmt_resultAsValue():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UFormattedValue_head),POINTER(win32more.Globalization.UFormattedRelativeDateTime_head),POINTER(win32more.Globalization.UErrorCode))(('ureldatefmt_resultAsValue', cdll['icu.dll']), ((1, 'ufrdt'),(1, 'ec'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ureldatefmt_closeResult():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UFormattedRelativeDateTime_head))(('ureldatefmt_closeResult', cdll['icu.dll']), ((1, 'ufrdt'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ureldatefmt_formatNumeric():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.URelativeDateTimeFormatter_head),Double,win32more.Globalization.URelativeDateTimeUnit,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ureldatefmt_formatNumeric', cdll['icu.dll']), ((1, 'reldatefmt'),(1, 'offset'),(1, 'unit'),(1, 'result'),(1, 'resultCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ureldatefmt_formatNumericToResult():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.URelativeDateTimeFormatter_head),Double,win32more.Globalization.URelativeDateTimeUnit,POINTER(win32more.Globalization.UFormattedRelativeDateTime_head),POINTER(win32more.Globalization.UErrorCode))(('ureldatefmt_formatNumericToResult', cdll['icu.dll']), ((1, 'reldatefmt'),(1, 'offset'),(1, 'unit'),(1, 'result'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ureldatefmt_format():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.URelativeDateTimeFormatter_head),Double,win32more.Globalization.URelativeDateTimeUnit,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ureldatefmt_format', cdll['icu.dll']), ((1, 'reldatefmt'),(1, 'offset'),(1, 'unit'),(1, 'result'),(1, 'resultCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ureldatefmt_formatToResult():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.URelativeDateTimeFormatter_head),Double,win32more.Globalization.URelativeDateTimeUnit,POINTER(win32more.Globalization.UFormattedRelativeDateTime_head),POINTER(win32more.Globalization.UErrorCode))(('ureldatefmt_formatToResult', cdll['icu.dll']), ((1, 'reldatefmt'),(1, 'offset'),(1, 'unit'),(1, 'result'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_ureldatefmt_combineDateAndTime():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.URelativeDateTimeFormatter_head),POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('ureldatefmt_combineDateAndTime', cdll['icu.dll']), ((1, 'reldatefmt'),(1, 'relativeDateString'),(1, 'relativeDateStringLen'),(1, 'timeString'),(1, 'timeStringLen'),(1, 'result'),(1, 'resultCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usearch_open():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UStringSearch_head),POINTER(UInt16),Int32,POINTER(UInt16),Int32,win32more.Foundation.PSTR,POINTER(win32more.Globalization.UBreakIterator_head),POINTER(win32more.Globalization.UErrorCode))(('usearch_open', cdll['icu.dll']), ((1, 'pattern'),(1, 'patternlength'),(1, 'text'),(1, 'textlength'),(1, 'locale'),(1, 'breakiter'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usearch_openFromCollator():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UStringSearch_head),POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UCollator_head),POINTER(win32more.Globalization.UBreakIterator_head),POINTER(win32more.Globalization.UErrorCode))(('usearch_openFromCollator', cdll['icu.dll']), ((1, 'pattern'),(1, 'patternlength'),(1, 'text'),(1, 'textlength'),(1, 'collator'),(1, 'breakiter'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usearch_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UStringSearch_head))(('usearch_close', cdll['icu.dll']), ((1, 'searchiter'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usearch_setOffset():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UStringSearch_head),Int32,POINTER(win32more.Globalization.UErrorCode))(('usearch_setOffset', cdll['icu.dll']), ((1, 'strsrch'),(1, 'position'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usearch_getOffset():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UStringSearch_head))(('usearch_getOffset', cdll['icu.dll']), ((1, 'strsrch'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usearch_setAttribute():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UStringSearch_head),win32more.Globalization.USearchAttribute,win32more.Globalization.USearchAttributeValue,POINTER(win32more.Globalization.UErrorCode))(('usearch_setAttribute', cdll['icu.dll']), ((1, 'strsrch'),(1, 'attribute'),(1, 'value'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usearch_getAttribute():
    try:
        return CFUNCTYPE(win32more.Globalization.USearchAttributeValue,POINTER(win32more.Globalization.UStringSearch_head),win32more.Globalization.USearchAttribute)(('usearch_getAttribute', cdll['icu.dll']), ((1, 'strsrch'),(1, 'attribute'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usearch_getMatchedStart():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UStringSearch_head))(('usearch_getMatchedStart', cdll['icu.dll']), ((1, 'strsrch'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usearch_getMatchedLength():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UStringSearch_head))(('usearch_getMatchedLength', cdll['icu.dll']), ((1, 'strsrch'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usearch_getMatchedText():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UStringSearch_head),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('usearch_getMatchedText', cdll['icu.dll']), ((1, 'strsrch'),(1, 'result'),(1, 'resultCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usearch_setBreakIterator():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UStringSearch_head),POINTER(win32more.Globalization.UBreakIterator_head),POINTER(win32more.Globalization.UErrorCode))(('usearch_setBreakIterator', cdll['icu.dll']), ((1, 'strsrch'),(1, 'breakiter'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usearch_getBreakIterator():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UBreakIterator_head),POINTER(win32more.Globalization.UStringSearch_head))(('usearch_getBreakIterator', cdll['icu.dll']), ((1, 'strsrch'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usearch_setText():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UStringSearch_head),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('usearch_setText', cdll['icu.dll']), ((1, 'strsrch'),(1, 'text'),(1, 'textlength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usearch_getText():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(win32more.Globalization.UStringSearch_head),POINTER(Int32))(('usearch_getText', cdll['icu.dll']), ((1, 'strsrch'),(1, 'length'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usearch_getCollator():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UCollator_head),POINTER(win32more.Globalization.UStringSearch_head))(('usearch_getCollator', cdll['icu.dll']), ((1, 'strsrch'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usearch_setCollator():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UStringSearch_head),POINTER(win32more.Globalization.UCollator_head),POINTER(win32more.Globalization.UErrorCode))(('usearch_setCollator', cdll['icu.dll']), ((1, 'strsrch'),(1, 'collator'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usearch_setPattern():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UStringSearch_head),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('usearch_setPattern', cdll['icu.dll']), ((1, 'strsrch'),(1, 'pattern'),(1, 'patternlength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usearch_getPattern():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(win32more.Globalization.UStringSearch_head),POINTER(Int32))(('usearch_getPattern', cdll['icu.dll']), ((1, 'strsrch'),(1, 'length'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usearch_first():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UStringSearch_head),POINTER(win32more.Globalization.UErrorCode))(('usearch_first', cdll['icu.dll']), ((1, 'strsrch'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usearch_following():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UStringSearch_head),Int32,POINTER(win32more.Globalization.UErrorCode))(('usearch_following', cdll['icu.dll']), ((1, 'strsrch'),(1, 'position'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usearch_last():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UStringSearch_head),POINTER(win32more.Globalization.UErrorCode))(('usearch_last', cdll['icu.dll']), ((1, 'strsrch'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usearch_preceding():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UStringSearch_head),Int32,POINTER(win32more.Globalization.UErrorCode))(('usearch_preceding', cdll['icu.dll']), ((1, 'strsrch'),(1, 'position'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usearch_next():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UStringSearch_head),POINTER(win32more.Globalization.UErrorCode))(('usearch_next', cdll['icu.dll']), ((1, 'strsrch'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usearch_previous():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UStringSearch_head),POINTER(win32more.Globalization.UErrorCode))(('usearch_previous', cdll['icu.dll']), ((1, 'strsrch'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_usearch_reset():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.UStringSearch_head))(('usearch_reset', cdll['icu.dll']), ((1, 'strsrch'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_open():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.USpoofChecker_head),POINTER(win32more.Globalization.UErrorCode))(('uspoof_open', cdll['icu.dll']), ((1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_openFromSerialized():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.USpoofChecker_head),c_void_p,Int32,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('uspoof_openFromSerialized', cdll['icu.dll']), ((1, 'data'),(1, 'length'),(1, 'pActualLength'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_openFromSource():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.USpoofChecker_head),win32more.Foundation.PSTR,Int32,win32more.Foundation.PSTR,Int32,POINTER(Int32),POINTER(win32more.Globalization.UParseError_head),POINTER(win32more.Globalization.UErrorCode))(('uspoof_openFromSource', cdll['icu.dll']), ((1, 'confusables'),(1, 'confusablesLen'),(1, 'confusablesWholeScript'),(1, 'confusablesWholeScriptLen'),(1, 'errType'),(1, 'pe'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_close():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USpoofChecker_head))(('uspoof_close', cdll['icu.dll']), ((1, 'sc'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_clone():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.USpoofChecker_head),POINTER(win32more.Globalization.USpoofChecker_head),POINTER(win32more.Globalization.UErrorCode))(('uspoof_clone', cdll['icu.dll']), ((1, 'sc'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_setChecks():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USpoofChecker_head),Int32,POINTER(win32more.Globalization.UErrorCode))(('uspoof_setChecks', cdll['icu.dll']), ((1, 'sc'),(1, 'checks'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_getChecks():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.USpoofChecker_head),POINTER(win32more.Globalization.UErrorCode))(('uspoof_getChecks', cdll['icu.dll']), ((1, 'sc'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_setRestrictionLevel():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USpoofChecker_head),win32more.Globalization.URestrictionLevel)(('uspoof_setRestrictionLevel', cdll['icu.dll']), ((1, 'sc'),(1, 'restrictionLevel'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_getRestrictionLevel():
    try:
        return CFUNCTYPE(win32more.Globalization.URestrictionLevel,POINTER(win32more.Globalization.USpoofChecker_head))(('uspoof_getRestrictionLevel', cdll['icu.dll']), ((1, 'sc'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_setAllowedLocales():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USpoofChecker_head),win32more.Foundation.PSTR,POINTER(win32more.Globalization.UErrorCode))(('uspoof_setAllowedLocales', cdll['icu.dll']), ((1, 'sc'),(1, 'localesList'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_getAllowedLocales():
    try:
        return CFUNCTYPE(win32more.Foundation.PSTR,POINTER(win32more.Globalization.USpoofChecker_head),POINTER(win32more.Globalization.UErrorCode))(('uspoof_getAllowedLocales', cdll['icu.dll']), ((1, 'sc'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_setAllowedChars():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USpoofChecker_head),POINTER(win32more.Globalization.USet_head),POINTER(win32more.Globalization.UErrorCode))(('uspoof_setAllowedChars', cdll['icu.dll']), ((1, 'sc'),(1, 'chars'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_getAllowedChars():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.USet_head),POINTER(win32more.Globalization.USpoofChecker_head),POINTER(win32more.Globalization.UErrorCode))(('uspoof_getAllowedChars', cdll['icu.dll']), ((1, 'sc'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_check():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.USpoofChecker_head),POINTER(UInt16),Int32,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('uspoof_check', cdll['icu.dll']), ((1, 'sc'),(1, 'id'),(1, 'length'),(1, 'position'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_checkUTF8():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.USpoofChecker_head),win32more.Foundation.PSTR,Int32,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('uspoof_checkUTF8', cdll['icu.dll']), ((1, 'sc'),(1, 'id'),(1, 'length'),(1, 'position'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_check2():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.USpoofChecker_head),POINTER(UInt16),Int32,POINTER(win32more.Globalization.USpoofCheckResult_head),POINTER(win32more.Globalization.UErrorCode))(('uspoof_check2', cdll['icu.dll']), ((1, 'sc'),(1, 'id'),(1, 'length'),(1, 'checkResult'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_check2UTF8():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.USpoofChecker_head),win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.USpoofCheckResult_head),POINTER(win32more.Globalization.UErrorCode))(('uspoof_check2UTF8', cdll['icu.dll']), ((1, 'sc'),(1, 'id'),(1, 'length'),(1, 'checkResult'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_openCheckResult():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.USpoofCheckResult_head),POINTER(win32more.Globalization.UErrorCode))(('uspoof_openCheckResult', cdll['icu.dll']), ((1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_closeCheckResult():
    try:
        return CFUNCTYPE(Void,POINTER(win32more.Globalization.USpoofCheckResult_head))(('uspoof_closeCheckResult', cdll['icu.dll']), ((1, 'checkResult'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_getCheckResultChecks():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.USpoofCheckResult_head),POINTER(win32more.Globalization.UErrorCode))(('uspoof_getCheckResultChecks', cdll['icu.dll']), ((1, 'checkResult'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_getCheckResultRestrictionLevel():
    try:
        return CFUNCTYPE(win32more.Globalization.URestrictionLevel,POINTER(win32more.Globalization.USpoofCheckResult_head),POINTER(win32more.Globalization.UErrorCode))(('uspoof_getCheckResultRestrictionLevel', cdll['icu.dll']), ((1, 'checkResult'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_getCheckResultNumerics():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.USet_head),POINTER(win32more.Globalization.USpoofCheckResult_head),POINTER(win32more.Globalization.UErrorCode))(('uspoof_getCheckResultNumerics', cdll['icu.dll']), ((1, 'checkResult'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_areConfusable():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.USpoofChecker_head),POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uspoof_areConfusable', cdll['icu.dll']), ((1, 'sc'),(1, 'id1'),(1, 'length1'),(1, 'id2'),(1, 'length2'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_areConfusableUTF8():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.USpoofChecker_head),win32more.Foundation.PSTR,Int32,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('uspoof_areConfusableUTF8', cdll['icu.dll']), ((1, 'sc'),(1, 'id1'),(1, 'length1'),(1, 'id2'),(1, 'length2'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_getSkeleton():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.USpoofChecker_head),UInt32,POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('uspoof_getSkeleton', cdll['icu.dll']), ((1, 'sc'),(1, 'type'),(1, 'id'),(1, 'length'),(1, 'dest'),(1, 'destCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_getSkeletonUTF8():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.USpoofChecker_head),UInt32,win32more.Foundation.PSTR,Int32,win32more.Foundation.PSTR,Int32,POINTER(win32more.Globalization.UErrorCode))(('uspoof_getSkeletonUTF8', cdll['icu.dll']), ((1, 'sc'),(1, 'type'),(1, 'id'),(1, 'length'),(1, 'dest'),(1, 'destCapacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_getInclusionSet():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.USet_head),POINTER(win32more.Globalization.UErrorCode))(('uspoof_getInclusionSet', cdll['icu.dll']), ((1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_getRecommendedSet():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.USet_head),POINTER(win32more.Globalization.UErrorCode))(('uspoof_getRecommendedSet', cdll['icu.dll']), ((1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_uspoof_serialize():
    try:
        return CFUNCTYPE(Int32,POINTER(win32more.Globalization.USpoofChecker_head),c_void_p,Int32,POINTER(win32more.Globalization.UErrorCode))(('uspoof_serialize', cdll['icu.dll']), ((1, 'sc'),(1, 'data'),(1, 'capacity'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utmscale_getTimeScaleValue():
    try:
        return CFUNCTYPE(Int64,win32more.Globalization.UDateTimeScale,win32more.Globalization.UTimeScaleValue,POINTER(win32more.Globalization.UErrorCode))(('utmscale_getTimeScaleValue', cdll['icu.dll']), ((1, 'timeScale'),(1, 'value'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utmscale_fromInt64():
    try:
        return CFUNCTYPE(Int64,Int64,win32more.Globalization.UDateTimeScale,POINTER(win32more.Globalization.UErrorCode))(('utmscale_fromInt64', cdll['icu.dll']), ((1, 'otherTime'),(1, 'timeScale'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utmscale_toInt64():
    try:
        return CFUNCTYPE(Int64,Int64,win32more.Globalization.UDateTimeScale,POINTER(win32more.Globalization.UErrorCode))(('utmscale_toInt64', cdll['icu.dll']), ((1, 'universalTime'),(1, 'timeScale'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utrans_openU():
    try:
        return CFUNCTYPE(POINTER(c_void_p),POINTER(UInt16),Int32,win32more.Globalization.UTransDirection,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UParseError_head),POINTER(win32more.Globalization.UErrorCode))(('utrans_openU', cdll['icu.dll']), ((1, 'id'),(1, 'idLength'),(1, 'dir'),(1, 'rules'),(1, 'rulesLength'),(1, 'parseError'),(1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utrans_openInverse():
    try:
        return CFUNCTYPE(POINTER(c_void_p),POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('utrans_openInverse', cdll['icu.dll']), ((1, 'trans'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utrans_clone():
    try:
        return CFUNCTYPE(POINTER(c_void_p),POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('utrans_clone', cdll['icu.dll']), ((1, 'trans'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utrans_close():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p))(('utrans_close', cdll['icu.dll']), ((1, 'trans'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utrans_getUnicodeID():
    try:
        return CFUNCTYPE(POINTER(UInt16),POINTER(c_void_p),POINTER(Int32))(('utrans_getUnicodeID', cdll['icu.dll']), ((1, 'trans'),(1, 'resultLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utrans_register():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),POINTER(win32more.Globalization.UErrorCode))(('utrans_register', cdll['icu.dll']), ((1, 'adoptedTrans'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utrans_unregisterID():
    try:
        return CFUNCTYPE(Void,POINTER(UInt16),Int32)(('utrans_unregisterID', cdll['icu.dll']), ((1, 'id'),(1, 'idLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utrans_setFilter():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('utrans_setFilter', cdll['icu.dll']), ((1, 'trans'),(1, 'filterPattern'),(1, 'filterPatternLen'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utrans_countAvailableIDs():
    try:
        return CFUNCTYPE(Int32,)(('utrans_countAvailableIDs', cdll['icu.dll']), ())
    except (FileNotFoundError, AttributeError):
        return None
def _define_utrans_openIDs():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.UEnumeration_head),POINTER(win32more.Globalization.UErrorCode))(('utrans_openIDs', cdll['icu.dll']), ((1, 'pErrorCode'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utrans_trans():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),POINTER(c_void_p),POINTER(win32more.Globalization.UReplaceableCallbacks_head),Int32,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('utrans_trans', cdll['icu.dll']), ((1, 'trans'),(1, 'rep'),(1, 'repFunc'),(1, 'start'),(1, 'limit'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utrans_transIncremental():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),POINTER(c_void_p),POINTER(win32more.Globalization.UReplaceableCallbacks_head),POINTER(win32more.Globalization.UTransPosition_head),POINTER(win32more.Globalization.UErrorCode))(('utrans_transIncremental', cdll['icu.dll']), ((1, 'trans'),(1, 'rep'),(1, 'repFunc'),(1, 'pos'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utrans_transUChars():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),POINTER(UInt16),POINTER(Int32),Int32,Int32,POINTER(Int32),POINTER(win32more.Globalization.UErrorCode))(('utrans_transUChars', cdll['icu.dll']), ((1, 'trans'),(1, 'text'),(1, 'textLength'),(1, 'textCapacity'),(1, 'start'),(1, 'limit'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utrans_transIncrementalUChars():
    try:
        return CFUNCTYPE(Void,POINTER(c_void_p),POINTER(UInt16),POINTER(Int32),Int32,POINTER(win32more.Globalization.UTransPosition_head),POINTER(win32more.Globalization.UErrorCode))(('utrans_transIncrementalUChars', cdll['icu.dll']), ((1, 'trans'),(1, 'text'),(1, 'textLength'),(1, 'textCapacity'),(1, 'pos'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utrans_toRules():
    try:
        return CFUNCTYPE(Int32,POINTER(c_void_p),SByte,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))(('utrans_toRules', cdll['icu.dll']), ((1, 'trans'),(1, 'escapeUnprintable'),(1, 'result'),(1, 'resultLength'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_utrans_getSourceSet():
    try:
        return CFUNCTYPE(POINTER(win32more.Globalization.USet_head),POINTER(c_void_p),SByte,POINTER(win32more.Globalization.USet_head),POINTER(win32more.Globalization.UErrorCode))(('utrans_getSourceSet', cdll['icu.dll']), ((1, 'trans'),(1, 'ignoreFilter'),(1, 'fillIn'),(1, 'status'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_GetDistanceOfClosestLanguageInList():
    try:
        return WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,Char,POINTER(Double))(('GetDistanceOfClosestLanguageInList', windll['bcp47mrm.dll']), ((1, 'pszLanguage'),(1, 'pszLanguagesList'),(1, 'wchListDelimiter'),(1, 'pClosestDistance'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsWellFormedTag():
    try:
        return WINFUNCTYPE(Byte,win32more.Foundation.PWSTR)(('IsWellFormedTag', windll['bcp47mrm.dll']), ((1, 'pszTag'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_FindStringOrdinal():
    try:
        return WINFUNCTYPE(Int32,UInt32,win32more.Foundation.PWSTR,Int32,win32more.Foundation.PWSTR,Int32,win32more.Foundation.BOOL)(('FindStringOrdinal', windll['KERNEL32.dll']), ((1, 'dwFindStringOrdinalFlags'),(1, 'lpStringSource'),(1, 'cchSource'),(1, 'lpStringValue'),(1, 'cchValue'),(1, 'bIgnoreCase'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_lstrcmpA():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR)(('lstrcmpA', windll['KERNEL32.dll']), ((1, 'lpString1'),(1, 'lpString2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_lstrcmpW():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR)(('lstrcmpW', windll['KERNEL32.dll']), ((1, 'lpString1'),(1, 'lpString2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_lstrcmpiA():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PSTR,win32more.Foundation.PSTR)(('lstrcmpiA', windll['KERNEL32.dll']), ((1, 'lpString1'),(1, 'lpString2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_lstrcmpiW():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR)(('lstrcmpiW', windll['KERNEL32.dll']), ((1, 'lpString1'),(1, 'lpString2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_lstrcpynA():
    try:
        return WINFUNCTYPE(win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR,Int32)(('lstrcpynA', windll['KERNEL32.dll']), ((1, 'lpString1'),(1, 'lpString2'),(1, 'iMaxLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_lstrcpynW():
    try:
        return WINFUNCTYPE(win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,Int32)(('lstrcpynW', windll['KERNEL32.dll']), ((1, 'lpString1'),(1, 'lpString2'),(1, 'iMaxLength'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_lstrcpyA():
    try:
        return WINFUNCTYPE(win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR)(('lstrcpyA', windll['KERNEL32.dll']), ((1, 'lpString1'),(1, 'lpString2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_lstrcpyW():
    try:
        return WINFUNCTYPE(win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR)(('lstrcpyW', windll['KERNEL32.dll']), ((1, 'lpString1'),(1, 'lpString2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_lstrcatA():
    try:
        return WINFUNCTYPE(win32more.Foundation.PSTR,win32more.Foundation.PSTR,win32more.Foundation.PSTR)(('lstrcatA', windll['KERNEL32.dll']), ((1, 'lpString1'),(1, 'lpString2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_lstrcatW():
    try:
        return WINFUNCTYPE(win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR)(('lstrcatW', windll['KERNEL32.dll']), ((1, 'lpString1'),(1, 'lpString2'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_lstrlenA():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PSTR)(('lstrlenA', windll['KERNEL32.dll']), ((1, 'lpString'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_lstrlenW():
    try:
        return WINFUNCTYPE(Int32,win32more.Foundation.PWSTR)(('lstrlenW', windll['KERNEL32.dll']), ((1, 'lpString'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_IsTextUnicode():
    try:
        return WINFUNCTYPE(win32more.Foundation.BOOL,c_void_p,Int32,POINTER(win32more.Globalization.IS_TEXT_UNICODE_RESULT))(('IsTextUnicode', windll['ADVAPI32.dll']), ((1, 'lpv'),(1, 'iSize'),(1, 'lpiResult'),))
    except (FileNotFoundError, AttributeError):
        return None
def _define_CALINFO_ENUMPROCA():
    return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR)
def _define_CALINFO_ENUMPROCEXA():
    return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,UInt32)
def _define_CALINFO_ENUMPROCEXEX():
    return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,UInt32,win32more.Foundation.PWSTR,win32more.Foundation.LPARAM)
def _define_CALINFO_ENUMPROCEXW():
    return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,UInt32)
def _define_CALINFO_ENUMPROCW():
    return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR)
def _define_CHARSETINFO_head():
    class CHARSETINFO(Structure):
        pass
    return CHARSETINFO
def _define_CHARSETINFO():
    CHARSETINFO = win32more.Globalization.CHARSETINFO_head
    CHARSETINFO._fields_ = [
        ('ciCharset', UInt32),
        ('ciACP', UInt32),
        ('fs', win32more.Globalization.FONTSIGNATURE),
    ]
    return CHARSETINFO
CMLangConvertCharset = Guid('d66d6f99-cdaa-11d0-b8-22-00-c0-4f-c9-b3-1f')
CMLangString = Guid('c04d65cf-b70d-11d0-b1-88-00-aa-00-38-c9-69')
CMultiLanguage = Guid('275c23e2-3747-11d0-9f-ea-00-aa-00-3f-86-46')
def _define_CODEPAGE_ENUMPROCA():
    return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR)
def _define_CODEPAGE_ENUMPROCW():
    return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR)
COMPARE_STRING_FLAGS = UInt32
LINGUISTIC_IGNORECASE = 16
LINGUISTIC_IGNOREDIACRITIC = 32
NORM_IGNORECASE = 1
NORM_IGNOREKANATYPE = 65536
NORM_IGNORENONSPACE = 2
NORM_IGNORESYMBOLS = 4
NORM_IGNOREWIDTH = 131072
NORM_LINGUISTIC_CASING = 134217728
SORT_DIGITSASNUMBERS = 8
SORT_STRINGSORT = 4096
CORRECTIVE_ACTION = Int32
CORRECTIVE_ACTION_NONE = 0
CORRECTIVE_ACTION_GET_SUGGESTIONS = 1
CORRECTIVE_ACTION_REPLACE = 2
CORRECTIVE_ACTION_DELETE = 3
def _define_CPINFO_head():
    class CPINFO(Structure):
        pass
    return CPINFO
def _define_CPINFO():
    CPINFO = win32more.Globalization.CPINFO_head
    CPINFO._fields_ = [
        ('MaxCharSize', UInt32),
        ('DefaultChar', Byte * 2),
        ('LeadByte', Byte * 12),
    ]
    return CPINFO
def _define_CPINFOEXA_head():
    class CPINFOEXA(Structure):
        pass
    return CPINFOEXA
def _define_CPINFOEXA():
    CPINFOEXA = win32more.Globalization.CPINFOEXA_head
    CPINFOEXA._fields_ = [
        ('MaxCharSize', UInt32),
        ('DefaultChar', Byte * 2),
        ('LeadByte', Byte * 12),
        ('UnicodeDefaultChar', Char),
        ('CodePage', UInt32),
        ('CodePageName', win32more.Foundation.CHAR * 260),
    ]
    return CPINFOEXA
def _define_CPINFOEXW_head():
    class CPINFOEXW(Structure):
        pass
    return CPINFOEXW
def _define_CPINFOEXW():
    CPINFOEXW = win32more.Globalization.CPINFOEXW_head
    CPINFOEXW._fields_ = [
        ('MaxCharSize', UInt32),
        ('DefaultChar', Byte * 2),
        ('LeadByte', Byte * 12),
        ('UnicodeDefaultChar', Char),
        ('CodePage', UInt32),
        ('CodePageName', Char * 260),
    ]
    return CPINFOEXW
def _define_CURRENCYFMTA_head():
    class CURRENCYFMTA(Structure):
        pass
    return CURRENCYFMTA
def _define_CURRENCYFMTA():
    CURRENCYFMTA = win32more.Globalization.CURRENCYFMTA_head
    CURRENCYFMTA._fields_ = [
        ('NumDigits', UInt32),
        ('LeadingZero', UInt32),
        ('Grouping', UInt32),
        ('lpDecimalSep', win32more.Foundation.PSTR),
        ('lpThousandSep', win32more.Foundation.PSTR),
        ('NegativeOrder', UInt32),
        ('PositiveOrder', UInt32),
        ('lpCurrencySymbol', win32more.Foundation.PSTR),
    ]
    return CURRENCYFMTA
def _define_CURRENCYFMTW_head():
    class CURRENCYFMTW(Structure):
        pass
    return CURRENCYFMTW
def _define_CURRENCYFMTW():
    CURRENCYFMTW = win32more.Globalization.CURRENCYFMTW_head
    CURRENCYFMTW._fields_ = [
        ('NumDigits', UInt32),
        ('LeadingZero', UInt32),
        ('Grouping', UInt32),
        ('lpDecimalSep', win32more.Foundation.PWSTR),
        ('lpThousandSep', win32more.Foundation.PWSTR),
        ('NegativeOrder', UInt32),
        ('PositiveOrder', UInt32),
        ('lpCurrencySymbol', win32more.Foundation.PWSTR),
    ]
    return CURRENCYFMTW
def _define_DATEFMT_ENUMPROCA():
    return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR)
def _define_DATEFMT_ENUMPROCEXA():
    return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,UInt32)
def _define_DATEFMT_ENUMPROCEXEX():
    return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,UInt32,win32more.Foundation.LPARAM)
def _define_DATEFMT_ENUMPROCEXW():
    return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,UInt32)
def _define_DATEFMT_ENUMPROCW():
    return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR)
def _define_DetectEncodingInfo_head():
    class DetectEncodingInfo(Structure):
        pass
    return DetectEncodingInfo
def _define_DetectEncodingInfo():
    DetectEncodingInfo = win32more.Globalization.DetectEncodingInfo_head
    DetectEncodingInfo._fields_ = [
        ('nLangID', UInt32),
        ('nCodePage', UInt32),
        ('nDocPercent', Int32),
        ('nConfidence', Int32),
    ]
    return DetectEncodingInfo
ENUM_DATE_FORMATS_FLAGS = UInt32
DATE_SHORTDATE = 1
DATE_LONGDATE = 2
DATE_YEARMONTH = 8
DATE_MONTHDAY = 128
DATE_AUTOLAYOUT = 64
DATE_LTRREADING = 16
DATE_RTLREADING = 32
DATE_USE_ALT_CALENDAR = 4
ENUM_SYSTEM_CODE_PAGES_FLAGS = UInt32
CP_INSTALLED = 1
CP_SUPPORTED = 2
ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS = UInt32
LGRPID_INSTALLED = 1
LGRPID_SUPPORTED = 2
def _define_ENUMTEXTMETRICA_head():
    class ENUMTEXTMETRICA(Structure):
        pass
    return ENUMTEXTMETRICA
def _define_ENUMTEXTMETRICA():
    ENUMTEXTMETRICA = win32more.Globalization.ENUMTEXTMETRICA_head
    ENUMTEXTMETRICA._fields_ = [
        ('etmNewTextMetricEx', win32more.Globalization.NEWTEXTMETRICEXA),
        ('etmAxesList', win32more.Graphics.Gdi.AXESLISTA),
    ]
    return ENUMTEXTMETRICA
def _define_ENUMTEXTMETRICW_head():
    class ENUMTEXTMETRICW(Structure):
        pass
    return ENUMTEXTMETRICW
def _define_ENUMTEXTMETRICW():
    ENUMTEXTMETRICW = win32more.Globalization.ENUMTEXTMETRICW_head
    ENUMTEXTMETRICW._fields_ = [
        ('etmNewTextMetricEx', win32more.Globalization.NEWTEXTMETRICEXW),
        ('etmAxesList', win32more.Graphics.Gdi.AXESLISTW),
    ]
    return ENUMTEXTMETRICW
def _define_FILEMUIINFO_head():
    class FILEMUIINFO(Structure):
        pass
    return FILEMUIINFO
def _define_FILEMUIINFO():
    FILEMUIINFO = win32more.Globalization.FILEMUIINFO_head
    FILEMUIINFO._fields_ = [
        ('dwSize', UInt32),
        ('dwVersion', UInt32),
        ('dwFileType', UInt32),
        ('pChecksum', Byte * 16),
        ('pServiceChecksum', Byte * 16),
        ('dwLanguageNameOffset', UInt32),
        ('dwTypeIDMainSize', UInt32),
        ('dwTypeIDMainOffset', UInt32),
        ('dwTypeNameMainOffset', UInt32),
        ('dwTypeIDMUISize', UInt32),
        ('dwTypeIDMUIOffset', UInt32),
        ('dwTypeNameMUIOffset', UInt32),
        ('abBuffer', Byte * 8),
    ]
    return FILEMUIINFO
FOLD_STRING_MAP_FLAGS = UInt32
MAP_COMPOSITE = 64
MAP_EXPAND_LIGATURES = 8192
MAP_FOLDCZONE = 16
MAP_FOLDDIGITS = 128
MAP_PRECOMPOSED = 32
def _define_FONTSIGNATURE_head():
    class FONTSIGNATURE(Structure):
        pass
    return FONTSIGNATURE
def _define_FONTSIGNATURE():
    FONTSIGNATURE = win32more.Globalization.FONTSIGNATURE_head
    FONTSIGNATURE._fields_ = [
        ('fsUsb', UInt32 * 4),
        ('fsCsb', UInt32 * 2),
    ]
    return FONTSIGNATURE
def _define_GEO_ENUMNAMEPROC():
    return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,win32more.Foundation.LPARAM)
def _define_GEO_ENUMPROC():
    return WINFUNCTYPE(win32more.Foundation.BOOL,Int32)
def _define_GOFFSET_head():
    class GOFFSET(Structure):
        pass
    return GOFFSET
def _define_GOFFSET():
    GOFFSET = win32more.Globalization.GOFFSET_head
    GOFFSET._fields_ = [
        ('du', Int32),
        ('dv', Int32),
    ]
    return GOFFSET
HIMC = IntPtr
HIMCC = IntPtr
HSAVEDUILANGUAGES = IntPtr
def _define_IComprehensiveSpellCheckProvider_head():
    class IComprehensiveSpellCheckProvider(win32more.System.Com.IUnknown_head):
        Guid = Guid('0c58f8de-8e94-479e-97-17-70-c4-2c-4a-d2-c3')
    return IComprehensiveSpellCheckProvider
def _define_IComprehensiveSpellCheckProvider():
    IComprehensiveSpellCheckProvider = win32more.Globalization.IComprehensiveSpellCheckProvider_head
    IComprehensiveSpellCheckProvider.ComprehensiveCheck = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Globalization.IEnumSpellingError_head))(3, 'ComprehensiveCheck', ((1, 'text'),(1, 'value'),)))
    win32more.System.Com.IUnknown
    return IComprehensiveSpellCheckProvider
def _define_IEnumCodePage_head():
    class IEnumCodePage(win32more.System.Com.IUnknown_head):
        Guid = Guid('275c23e3-3747-11d0-9f-ea-00-aa-00-3f-86-46')
    return IEnumCodePage
def _define_IEnumCodePage():
    IEnumCodePage = win32more.Globalization.IEnumCodePage_head
    IEnumCodePage.Clone = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Globalization.IEnumCodePage_head))(3, 'Clone', ((1, 'ppEnum'),)))
    IEnumCodePage.Next = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Globalization.MIMECPINFO_head),POINTER(UInt32))(4, 'Next', ((1, 'celt'),(1, 'rgelt'),(1, 'pceltFetched'),)))
    IEnumCodePage.Reset = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(5, 'Reset', ()))
    IEnumCodePage.Skip = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(6, 'Skip', ((1, 'celt'),)))
    win32more.System.Com.IUnknown
    return IEnumCodePage
def _define_IEnumRfc1766_head():
    class IEnumRfc1766(win32more.System.Com.IUnknown_head):
        Guid = Guid('3dc39d1d-c030-11d0-b8-1b-00-c0-4f-c9-b3-1f')
    return IEnumRfc1766
def _define_IEnumRfc1766():
    IEnumRfc1766 = win32more.Globalization.IEnumRfc1766_head
    IEnumRfc1766.Clone = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Globalization.IEnumRfc1766_head))(3, 'Clone', ((1, 'ppEnum'),)))
    IEnumRfc1766.Next = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Globalization.RFC1766INFO_head),POINTER(UInt32))(4, 'Next', ((1, 'celt'),(1, 'rgelt'),(1, 'pceltFetched'),)))
    IEnumRfc1766.Reset = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(5, 'Reset', ()))
    IEnumRfc1766.Skip = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(6, 'Skip', ((1, 'celt'),)))
    win32more.System.Com.IUnknown
    return IEnumRfc1766
def _define_IEnumScript_head():
    class IEnumScript(win32more.System.Com.IUnknown_head):
        Guid = Guid('ae5f1430-388b-11d2-83-80-00-c0-4f-8f-5d-a1')
    return IEnumScript
def _define_IEnumScript():
    IEnumScript = win32more.Globalization.IEnumScript_head
    IEnumScript.Clone = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Globalization.IEnumScript_head))(3, 'Clone', ((1, 'ppEnum'),)))
    IEnumScript.Next = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Globalization.SCRIPTINFO_head),POINTER(UInt32))(4, 'Next', ((1, 'celt'),(1, 'rgelt'),(1, 'pceltFetched'),)))
    IEnumScript.Reset = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(5, 'Reset', ()))
    IEnumScript.Skip = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(6, 'Skip', ((1, 'celt'),)))
    win32more.System.Com.IUnknown
    return IEnumScript
def _define_IEnumSpellingError_head():
    class IEnumSpellingError(win32more.System.Com.IUnknown_head):
        Guid = Guid('803e3bd4-2828-4410-82-90-41-8d-1d-73-c7-62')
    return IEnumSpellingError
def _define_IEnumSpellingError():
    IEnumSpellingError = win32more.Globalization.IEnumSpellingError_head
    IEnumSpellingError.Next = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Globalization.ISpellingError_head))(3, 'Next', ((1, 'value'),)))
    win32more.System.Com.IUnknown
    return IEnumSpellingError
def _define_IMLangCodePages_head():
    class IMLangCodePages(win32more.System.Com.IUnknown_head):
        Guid = Guid('359f3443-bd4a-11d0-b1-88-00-aa-00-38-c9-69')
    return IMLangCodePages
def _define_IMLangCodePages():
    IMLangCodePages = win32more.Globalization.IMLangCodePages_head
    IMLangCodePages.GetCharCodePages = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Char,POINTER(UInt32))(3, 'GetCharCodePages', ((1, 'chSrc'),(1, 'pdwCodePages'),)))
    IMLangCodePages.GetStrCodePages = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,Int32,UInt32,POINTER(UInt32),POINTER(Int32))(4, 'GetStrCodePages', ((1, 'pszSrc'),(1, 'cchSrc'),(1, 'dwPriorityCodePages'),(1, 'pdwCodePages'),(1, 'pcchCodePages'),)))
    IMLangCodePages.CodePageToCodePages = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32))(5, 'CodePageToCodePages', ((1, 'uCodePage'),(1, 'pdwCodePages'),)))
    IMLangCodePages.CodePagesToCodePage = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,POINTER(UInt32))(6, 'CodePagesToCodePage', ((1, 'dwCodePages'),(1, 'uDefaultCodePage'),(1, 'puCodePage'),)))
    win32more.System.Com.IUnknown
    return IMLangCodePages
def _define_IMLangConvertCharset_head():
    class IMLangConvertCharset(win32more.System.Com.IUnknown_head):
        Guid = Guid('d66d6f98-cdaa-11d0-b8-22-00-c0-4f-c9-b3-1f')
    return IMLangConvertCharset
def _define_IMLangConvertCharset():
    IMLangConvertCharset = win32more.Globalization.IMLangConvertCharset_head
    IMLangConvertCharset.Initialize = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,UInt32)(3, 'Initialize', ((1, 'uiSrcCodePage'),(1, 'uiDstCodePage'),(1, 'dwProperty'),)))
    IMLangConvertCharset.GetSourceCodePage = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(4, 'GetSourceCodePage', ((1, 'puiSrcCodePage'),)))
    IMLangConvertCharset.GetDestinationCodePage = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(5, 'GetDestinationCodePage', ((1, 'puiDstCodePage'),)))
    IMLangConvertCharset.GetProperty = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(6, 'GetProperty', ((1, 'pdwProperty'),)))
    IMLangConvertCharset.DoConversion = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,c_char_p_no,POINTER(UInt32),c_char_p_no,POINTER(UInt32))(7, 'DoConversion', ((1, 'pSrcStr'),(1, 'pcSrcSize'),(1, 'pDstStr'),(1, 'pcDstSize'),)))
    IMLangConvertCharset.DoConversionToUnicode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PSTR,POINTER(UInt32),win32more.Foundation.PWSTR,POINTER(UInt32))(8, 'DoConversionToUnicode', ((1, 'pSrcStr'),(1, 'pcSrcSize'),(1, 'pDstStr'),(1, 'pcDstSize'),)))
    IMLangConvertCharset.DoConversionFromUnicode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(UInt32),win32more.Foundation.PSTR,POINTER(UInt32))(9, 'DoConversionFromUnicode', ((1, 'pSrcStr'),(1, 'pcSrcSize'),(1, 'pDstStr'),(1, 'pcDstSize'),)))
    win32more.System.Com.IUnknown
    return IMLangConvertCharset
def _define_IMLangFontLink_head():
    class IMLangFontLink(win32more.Globalization.IMLangCodePages_head):
        Guid = Guid('359f3441-bd4a-11d0-b1-88-00-aa-00-38-c9-69')
    return IMLangFontLink
def _define_IMLangFontLink():
    IMLangFontLink = win32more.Globalization.IMLangFontLink_head
    IMLangFontLink.GetFontCodePages = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Gdi.HDC,win32more.Graphics.Gdi.HFONT,POINTER(UInt32))(7, 'GetFontCodePages', ((1, 'hDC'),(1, 'hFont'),(1, 'pdwCodePages'),)))
    IMLangFontLink.MapFont = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Gdi.HDC,UInt32,win32more.Graphics.Gdi.HFONT,POINTER(win32more.Graphics.Gdi.HFONT))(8, 'MapFont', ((1, 'hDC'),(1, 'dwCodePages'),(1, 'hSrcFont'),(1, 'phDestFont'),)))
    IMLangFontLink.ReleaseFont = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Gdi.HFONT)(9, 'ReleaseFont', ((1, 'hFont'),)))
    IMLangFontLink.ResetFontMapping = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(10, 'ResetFontMapping', ()))
    win32more.Globalization.IMLangCodePages
    return IMLangFontLink
def _define_IMLangFontLink2_head():
    class IMLangFontLink2(win32more.Globalization.IMLangCodePages_head):
        Guid = Guid('dccfc162-2b38-11d2-b7-ec-00-c0-4f-8f-5d-9a')
    return IMLangFontLink2
def _define_IMLangFontLink2():
    IMLangFontLink2 = win32more.Globalization.IMLangFontLink2_head
    IMLangFontLink2.GetFontCodePages = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Gdi.HDC,win32more.Graphics.Gdi.HFONT,POINTER(UInt32))(7, 'GetFontCodePages', ((1, 'hDC'),(1, 'hFont'),(1, 'pdwCodePages'),)))
    IMLangFontLink2.ReleaseFont = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Gdi.HFONT)(8, 'ReleaseFont', ((1, 'hFont'),)))
    IMLangFontLink2.ResetFontMapping = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(9, 'ResetFontMapping', ()))
    IMLangFontLink2.MapFont = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Gdi.HDC,UInt32,Char,POINTER(win32more.Graphics.Gdi.HFONT))(10, 'MapFont', ((1, 'hDC'),(1, 'dwCodePages'),(1, 'chSrc'),(1, 'pFont'),)))
    IMLangFontLink2.GetFontUnicodeRanges = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Graphics.Gdi.HDC,POINTER(UInt32),POINTER(win32more.Globalization.UNICODERANGE_head))(11, 'GetFontUnicodeRanges', ((1, 'hDC'),(1, 'puiRanges'),(1, 'pUranges'),)))
    IMLangFontLink2.GetScriptFontInfo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Byte,UInt32,POINTER(UInt32),POINTER(win32more.Globalization.SCRIPTFONTINFO_head))(12, 'GetScriptFontInfo', ((1, 'sid'),(1, 'dwFlags'),(1, 'puiFonts'),(1, 'pScriptFont'),)))
    IMLangFontLink2.CodePageToScriptID = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,c_char_p_no)(13, 'CodePageToScriptID', ((1, 'uiCodePage'),(1, 'pSid'),)))
    win32more.Globalization.IMLangCodePages
    return IMLangFontLink2
def _define_IMLangLineBreakConsole_head():
    class IMLangLineBreakConsole(win32more.System.Com.IUnknown_head):
        Guid = Guid('f5be2ee1-bfd7-11d0-b1-88-00-aa-00-38-c9-69')
    return IMLangLineBreakConsole
def _define_IMLangLineBreakConsole():
    IMLangLineBreakConsole = win32more.Globalization.IMLangLineBreakConsole_head
    IMLangLineBreakConsole.BreakLineML = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Globalization.IMLangString_head,Int32,Int32,Int32,Int32,POINTER(Int32),POINTER(Int32))(3, 'BreakLineML', ((1, 'pSrcMLStr'),(1, 'lSrcPos'),(1, 'lSrcLen'),(1, 'cMinColumns'),(1, 'cMaxColumns'),(1, 'plLineLen'),(1, 'plSkipLen'),)))
    IMLangLineBreakConsole.BreakLineW = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.PWSTR,Int32,Int32,POINTER(Int32),POINTER(Int32))(4, 'BreakLineW', ((1, 'locale'),(1, 'pszSrc'),(1, 'cchSrc'),(1, 'cMaxColumns'),(1, 'pcchLine'),(1, 'pcchSkip'),)))
    IMLangLineBreakConsole.BreakLineA = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,win32more.Foundation.PSTR,Int32,Int32,POINTER(Int32),POINTER(Int32))(5, 'BreakLineA', ((1, 'locale'),(1, 'uCodePage'),(1, 'pszSrc'),(1, 'cchSrc'),(1, 'cMaxColumns'),(1, 'pcchLine'),(1, 'pcchSkip'),)))
    win32more.System.Com.IUnknown
    return IMLangLineBreakConsole
def _define_IMLangString_head():
    class IMLangString(win32more.System.Com.IUnknown_head):
        Guid = Guid('c04d65ce-b70d-11d0-b1-88-00-aa-00-38-c9-69')
    return IMLangString
def _define_IMLangString():
    IMLangString = win32more.Globalization.IMLangString_head
    IMLangString.Sync = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BOOL)(3, 'Sync', ((1, 'fNoAccess'),)))
    IMLangString.GetLength = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int32))(4, 'GetLength', ((1, 'plLen'),)))
    IMLangString.SetMLStr = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,win32more.System.Com.IUnknown_head,Int32,Int32)(5, 'SetMLStr', ((1, 'lDestPos'),(1, 'lDestLen'),(1, 'pSrcMLStr'),(1, 'lSrcPos'),(1, 'lSrcLen'),)))
    IMLangString.GetMLStr = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,win32more.System.Com.IUnknown_head,UInt32,POINTER(Guid),POINTER(win32more.System.Com.IUnknown_head),POINTER(Int32),POINTER(Int32))(6, 'GetMLStr', ((1, 'lSrcPos'),(1, 'lSrcLen'),(1, 'pUnkOuter'),(1, 'dwClsContext'),(1, 'piid'),(1, 'ppDestMLStr'),(1, 'plDestPos'),(1, 'plDestLen'),)))
    win32more.System.Com.IUnknown
    return IMLangString
def _define_IMLangStringAStr_head():
    class IMLangStringAStr(win32more.Globalization.IMLangString_head):
        Guid = Guid('c04d65d2-b70d-11d0-b1-88-00-aa-00-38-c9-69')
    return IMLangStringAStr
def _define_IMLangStringAStr():
    IMLangStringAStr = win32more.Globalization.IMLangStringAStr_head
    IMLangStringAStr.SetAStr = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,UInt32,win32more.Foundation.PSTR,Int32,POINTER(Int32),POINTER(Int32))(7, 'SetAStr', ((1, 'lDestPos'),(1, 'lDestLen'),(1, 'uCodePage'),(1, 'pszSrc'),(1, 'cchSrc'),(1, 'pcchActual'),(1, 'plActualLen'),)))
    IMLangStringAStr.SetStrBufA = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,UInt32,win32more.Globalization.IMLangStringBufA_head,POINTER(Int32),POINTER(Int32))(8, 'SetStrBufA', ((1, 'lDestPos'),(1, 'lDestLen'),(1, 'uCodePage'),(1, 'pSrcBuf'),(1, 'pcchActual'),(1, 'plActualLen'),)))
    IMLangStringAStr.GetAStr = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,UInt32,POINTER(UInt32),win32more.Foundation.PSTR,Int32,POINTER(Int32),POINTER(Int32))(9, 'GetAStr', ((1, 'lSrcPos'),(1, 'lSrcLen'),(1, 'uCodePageIn'),(1, 'puCodePageOut'),(1, 'pszDest'),(1, 'cchDest'),(1, 'pcchActual'),(1, 'plActualLen'),)))
    IMLangStringAStr.GetStrBufA = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,POINTER(UInt32),POINTER(win32more.Globalization.IMLangStringBufA_head),POINTER(Int32))(10, 'GetStrBufA', ((1, 'lSrcPos'),(1, 'lSrcMaxLen'),(1, 'puDestCodePage'),(1, 'ppDestBuf'),(1, 'plDestLen'),)))
    IMLangStringAStr.LockAStr = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,Int32,UInt32,Int32,POINTER(UInt32),POINTER(win32more.Foundation.PSTR),POINTER(Int32),POINTER(Int32))(11, 'LockAStr', ((1, 'lSrcPos'),(1, 'lSrcLen'),(1, 'lFlags'),(1, 'uCodePageIn'),(1, 'cchRequest'),(1, 'puCodePageOut'),(1, 'ppszDest'),(1, 'pcchDest'),(1, 'plDestLen'),)))
    IMLangStringAStr.UnlockAStr = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PSTR,Int32,POINTER(Int32),POINTER(Int32))(12, 'UnlockAStr', ((1, 'pszSrc'),(1, 'cchSrc'),(1, 'pcchActual'),(1, 'plActualLen'),)))
    IMLangStringAStr.SetLocale = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,UInt32)(13, 'SetLocale', ((1, 'lDestPos'),(1, 'lDestLen'),(1, 'locale'),)))
    IMLangStringAStr.GetLocale = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,POINTER(UInt32),POINTER(Int32),POINTER(Int32))(14, 'GetLocale', ((1, 'lSrcPos'),(1, 'lSrcMaxLen'),(1, 'plocale'),(1, 'plLocalePos'),(1, 'plLocaleLen'),)))
    win32more.Globalization.IMLangString
    return IMLangStringAStr
def _define_IMLangStringBufA_head():
    class IMLangStringBufA(win32more.System.Com.IUnknown_head):
        Guid = Guid('d24acd23-ba72-11d0-b1-88-00-aa-00-38-c9-69')
    return IMLangStringBufA
def _define_IMLangStringBufA():
    IMLangStringBufA = win32more.Globalization.IMLangStringBufA_head
    IMLangStringBufA.GetStatus = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int32),POINTER(Int32))(3, 'GetStatus', ((1, 'plFlags'),(1, 'pcchBuf'),)))
    IMLangStringBufA.LockBuf = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,POINTER(POINTER(win32more.Foundation.CHAR)),POINTER(Int32))(4, 'LockBuf', ((1, 'cchOffset'),(1, 'cchMaxLock'),(1, 'ppszBuf'),(1, 'pcchBuf'),)))
    IMLangStringBufA.UnlockBuf = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PSTR,Int32,Int32)(5, 'UnlockBuf', ((1, 'pszBuf'),(1, 'cchOffset'),(1, 'cchWrite'),)))
    IMLangStringBufA.Insert = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,POINTER(Int32))(6, 'Insert', ((1, 'cchOffset'),(1, 'cchMaxInsert'),(1, 'pcchActual'),)))
    IMLangStringBufA.Delete = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32)(7, 'Delete', ((1, 'cchOffset'),(1, 'cchDelete'),)))
    win32more.System.Com.IUnknown
    return IMLangStringBufA
def _define_IMLangStringBufW_head():
    class IMLangStringBufW(win32more.System.Com.IUnknown_head):
        Guid = Guid('d24acd21-ba72-11d0-b1-88-00-aa-00-38-c9-69')
    return IMLangStringBufW
def _define_IMLangStringBufW():
    IMLangStringBufW = win32more.Globalization.IMLangStringBufW_head
    IMLangStringBufW.GetStatus = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(Int32),POINTER(Int32))(3, 'GetStatus', ((1, 'plFlags'),(1, 'pcchBuf'),)))
    IMLangStringBufW.LockBuf = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,POINTER(POINTER(UInt16)),POINTER(Int32))(4, 'LockBuf', ((1, 'cchOffset'),(1, 'cchMaxLock'),(1, 'ppszBuf'),(1, 'pcchBuf'),)))
    IMLangStringBufW.UnlockBuf = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,Int32,Int32)(5, 'UnlockBuf', ((1, 'pszBuf'),(1, 'cchOffset'),(1, 'cchWrite'),)))
    IMLangStringBufW.Insert = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,POINTER(Int32))(6, 'Insert', ((1, 'cchOffset'),(1, 'cchMaxInsert'),(1, 'pcchActual'),)))
    IMLangStringBufW.Delete = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32)(7, 'Delete', ((1, 'cchOffset'),(1, 'cchDelete'),)))
    win32more.System.Com.IUnknown
    return IMLangStringBufW
def _define_IMLangStringWStr_head():
    class IMLangStringWStr(win32more.Globalization.IMLangString_head):
        Guid = Guid('c04d65d0-b70d-11d0-b1-88-00-aa-00-38-c9-69')
    return IMLangStringWStr
def _define_IMLangStringWStr():
    IMLangStringWStr = win32more.Globalization.IMLangStringWStr_head
    IMLangStringWStr.SetWStr = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,win32more.Foundation.PWSTR,Int32,POINTER(Int32),POINTER(Int32))(7, 'SetWStr', ((1, 'lDestPos'),(1, 'lDestLen'),(1, 'pszSrc'),(1, 'cchSrc'),(1, 'pcchActual'),(1, 'plActualLen'),)))
    IMLangStringWStr.SetStrBufW = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,win32more.Globalization.IMLangStringBufW_head,POINTER(Int32),POINTER(Int32))(8, 'SetStrBufW', ((1, 'lDestPos'),(1, 'lDestLen'),(1, 'pSrcBuf'),(1, 'pcchActual'),(1, 'plActualLen'),)))
    IMLangStringWStr.GetWStr = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,win32more.Foundation.PWSTR,Int32,POINTER(Int32),POINTER(Int32))(9, 'GetWStr', ((1, 'lSrcPos'),(1, 'lSrcLen'),(1, 'pszDest'),(1, 'cchDest'),(1, 'pcchActual'),(1, 'plActualLen'),)))
    IMLangStringWStr.GetStrBufW = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,POINTER(win32more.Globalization.IMLangStringBufW_head),POINTER(Int32))(10, 'GetStrBufW', ((1, 'lSrcPos'),(1, 'lSrcMaxLen'),(1, 'ppDestBuf'),(1, 'plDestLen'),)))
    IMLangStringWStr.LockWStr = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,Int32,Int32,POINTER(win32more.Foundation.PWSTR),POINTER(Int32),POINTER(Int32))(11, 'LockWStr', ((1, 'lSrcPos'),(1, 'lSrcLen'),(1, 'lFlags'),(1, 'cchRequest'),(1, 'ppszDest'),(1, 'pcchDest'),(1, 'plDestLen'),)))
    IMLangStringWStr.UnlockWStr = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,Int32,POINTER(Int32),POINTER(Int32))(12, 'UnlockWStr', ((1, 'pszSrc'),(1, 'cchSrc'),(1, 'pcchActual'),(1, 'plActualLen'),)))
    IMLangStringWStr.SetLocale = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,UInt32)(13, 'SetLocale', ((1, 'lDestPos'),(1, 'lDestLen'),(1, 'locale'),)))
    IMLangStringWStr.GetLocale = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,Int32,Int32,POINTER(UInt32),POINTER(Int32),POINTER(Int32))(14, 'GetLocale', ((1, 'lSrcPos'),(1, 'lSrcMaxLen'),(1, 'plocale'),(1, 'plLocalePos'),(1, 'plLocaleLen'),)))
    win32more.Globalization.IMLangString
    return IMLangStringWStr
def _define_IMultiLanguage_head():
    class IMultiLanguage(win32more.System.Com.IUnknown_head):
        Guid = Guid('275c23e1-3747-11d0-9f-ea-00-aa-00-3f-86-46')
    return IMultiLanguage
def _define_IMultiLanguage():
    IMultiLanguage = win32more.Globalization.IMultiLanguage_head
    IMultiLanguage.GetNumberOfCodePageInfo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'GetNumberOfCodePageInfo', ((1, 'pcCodePage'),)))
    IMultiLanguage.GetCodePageInfo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Globalization.MIMECPINFO_head))(4, 'GetCodePageInfo', ((1, 'uiCodePage'),(1, 'pCodePageInfo'),)))
    IMultiLanguage.GetFamilyCodePage = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32))(5, 'GetFamilyCodePage', ((1, 'uiCodePage'),(1, 'puiFamilyCodePage'),)))
    IMultiLanguage.EnumCodePages = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Globalization.IEnumCodePage_head))(6, 'EnumCodePages', ((1, 'grfFlags'),(1, 'ppEnumCodePage'),)))
    IMultiLanguage.GetCharsetInfo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,POINTER(win32more.Globalization.MIMECSETINFO_head))(7, 'GetCharsetInfo', ((1, 'Charset'),(1, 'pCharsetInfo'),)))
    IMultiLanguage.IsConvertible = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32)(8, 'IsConvertible', ((1, 'dwSrcEncoding'),(1, 'dwDstEncoding'),)))
    IMultiLanguage.ConvertString = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),UInt32,UInt32,c_char_p_no,POINTER(UInt32),c_char_p_no,POINTER(UInt32))(9, 'ConvertString', ((1, 'pdwMode'),(1, 'dwSrcEncoding'),(1, 'dwDstEncoding'),(1, 'pSrcStr'),(1, 'pcSrcSize'),(1, 'pDstStr'),(1, 'pcDstSize'),)))
    IMultiLanguage.ConvertStringToUnicode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),UInt32,win32more.Foundation.PSTR,POINTER(UInt32),win32more.Foundation.PWSTR,POINTER(UInt32))(10, 'ConvertStringToUnicode', ((1, 'pdwMode'),(1, 'dwEncoding'),(1, 'pSrcStr'),(1, 'pcSrcSize'),(1, 'pDstStr'),(1, 'pcDstSize'),)))
    IMultiLanguage.ConvertStringFromUnicode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),UInt32,win32more.Foundation.PWSTR,POINTER(UInt32),win32more.Foundation.PSTR,POINTER(UInt32))(11, 'ConvertStringFromUnicode', ((1, 'pdwMode'),(1, 'dwEncoding'),(1, 'pSrcStr'),(1, 'pcSrcSize'),(1, 'pDstStr'),(1, 'pcDstSize'),)))
    IMultiLanguage.ConvertStringReset = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(12, 'ConvertStringReset', ()))
    IMultiLanguage.GetRfc1766FromLcid = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Foundation.BSTR))(13, 'GetRfc1766FromLcid', ((1, 'Locale'),(1, 'pbstrRfc1766'),)))
    IMultiLanguage.GetLcidFromRfc1766 = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),win32more.Foundation.BSTR)(14, 'GetLcidFromRfc1766', ((1, 'pLocale'),(1, 'bstrRfc1766'),)))
    IMultiLanguage.EnumRfc1766 = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Globalization.IEnumRfc1766_head))(15, 'EnumRfc1766', ((1, 'ppEnumRfc1766'),)))
    IMultiLanguage.GetRfc1766Info = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Globalization.RFC1766INFO_head))(16, 'GetRfc1766Info', ((1, 'Locale'),(1, 'pRfc1766Info'),)))
    IMultiLanguage.CreateConvertCharset = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,UInt32,POINTER(win32more.Globalization.IMLangConvertCharset_head))(17, 'CreateConvertCharset', ((1, 'uiSrcCodePage'),(1, 'uiDstCodePage'),(1, 'dwProperty'),(1, 'ppMLangConvertCharset'),)))
    win32more.System.Com.IUnknown
    return IMultiLanguage
def _define_IMultiLanguage2_head():
    class IMultiLanguage2(win32more.System.Com.IUnknown_head):
        Guid = Guid('dccfc164-2b38-11d2-b7-ec-00-c0-4f-8f-5d-9a')
    return IMultiLanguage2
def _define_IMultiLanguage2():
    IMultiLanguage2 = win32more.Globalization.IMultiLanguage2_head
    IMultiLanguage2.GetNumberOfCodePageInfo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'GetNumberOfCodePageInfo', ((1, 'pcCodePage'),)))
    IMultiLanguage2.GetCodePageInfo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt16,POINTER(win32more.Globalization.MIMECPINFO_head))(4, 'GetCodePageInfo', ((1, 'uiCodePage'),(1, 'LangId'),(1, 'pCodePageInfo'),)))
    IMultiLanguage2.GetFamilyCodePage = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(UInt32))(5, 'GetFamilyCodePage', ((1, 'uiCodePage'),(1, 'puiFamilyCodePage'),)))
    IMultiLanguage2.EnumCodePages = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt16,POINTER(win32more.Globalization.IEnumCodePage_head))(6, 'EnumCodePages', ((1, 'grfFlags'),(1, 'LangId'),(1, 'ppEnumCodePage'),)))
    IMultiLanguage2.GetCharsetInfo = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.BSTR,POINTER(win32more.Globalization.MIMECSETINFO_head))(7, 'GetCharsetInfo', ((1, 'Charset'),(1, 'pCharsetInfo'),)))
    IMultiLanguage2.IsConvertible = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32)(8, 'IsConvertible', ((1, 'dwSrcEncoding'),(1, 'dwDstEncoding'),)))
    IMultiLanguage2.ConvertString = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),UInt32,UInt32,c_char_p_no,POINTER(UInt32),c_char_p_no,POINTER(UInt32))(9, 'ConvertString', ((1, 'pdwMode'),(1, 'dwSrcEncoding'),(1, 'dwDstEncoding'),(1, 'pSrcStr'),(1, 'pcSrcSize'),(1, 'pDstStr'),(1, 'pcDstSize'),)))
    IMultiLanguage2.ConvertStringToUnicode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),UInt32,win32more.Foundation.PSTR,POINTER(UInt32),win32more.Foundation.PWSTR,POINTER(UInt32))(10, 'ConvertStringToUnicode', ((1, 'pdwMode'),(1, 'dwEncoding'),(1, 'pSrcStr'),(1, 'pcSrcSize'),(1, 'pDstStr'),(1, 'pcDstSize'),)))
    IMultiLanguage2.ConvertStringFromUnicode = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),UInt32,win32more.Foundation.PWSTR,POINTER(UInt32),win32more.Foundation.PSTR,POINTER(UInt32))(11, 'ConvertStringFromUnicode', ((1, 'pdwMode'),(1, 'dwEncoding'),(1, 'pSrcStr'),(1, 'pcSrcSize'),(1, 'pDstStr'),(1, 'pcDstSize'),)))
    IMultiLanguage2.ConvertStringReset = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,)(12, 'ConvertStringReset', ()))
    IMultiLanguage2.GetRfc1766FromLcid = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,POINTER(win32more.Foundation.BSTR))(13, 'GetRfc1766FromLcid', ((1, 'Locale'),(1, 'pbstrRfc1766'),)))
    IMultiLanguage2.GetLcidFromRfc1766 = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),win32more.Foundation.BSTR)(14, 'GetLcidFromRfc1766', ((1, 'pLocale'),(1, 'bstrRfc1766'),)))
    IMultiLanguage2.EnumRfc1766 = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt16,POINTER(win32more.Globalization.IEnumRfc1766_head))(15, 'EnumRfc1766', ((1, 'LangId'),(1, 'ppEnumRfc1766'),)))
    IMultiLanguage2.GetRfc1766Info = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt16,POINTER(win32more.Globalization.RFC1766INFO_head))(16, 'GetRfc1766Info', ((1, 'Locale'),(1, 'LangId'),(1, 'pRfc1766Info'),)))
    IMultiLanguage2.CreateConvertCharset = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,UInt32,POINTER(win32more.Globalization.IMLangConvertCharset_head))(17, 'CreateConvertCharset', ((1, 'uiSrcCodePage'),(1, 'uiDstCodePage'),(1, 'dwProperty'),(1, 'ppMLangConvertCharset'),)))
    IMultiLanguage2.ConvertStringInIStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),UInt32,win32more.Foundation.PWSTR,UInt32,UInt32,win32more.System.Com.IStream_head,win32more.System.Com.IStream_head)(18, 'ConvertStringInIStream', ((1, 'pdwMode'),(1, 'dwFlag'),(1, 'lpFallBack'),(1, 'dwSrcEncoding'),(1, 'dwDstEncoding'),(1, 'pstmIn'),(1, 'pstmOut'),)))
    IMultiLanguage2.ConvertStringToUnicodeEx = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),UInt32,win32more.Foundation.PSTR,POINTER(UInt32),win32more.Foundation.PWSTR,POINTER(UInt32),UInt32,win32more.Foundation.PWSTR)(19, 'ConvertStringToUnicodeEx', ((1, 'pdwMode'),(1, 'dwEncoding'),(1, 'pSrcStr'),(1, 'pcSrcSize'),(1, 'pDstStr'),(1, 'pcDstSize'),(1, 'dwFlag'),(1, 'lpFallBack'),)))
    IMultiLanguage2.ConvertStringFromUnicodeEx = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32),UInt32,win32more.Foundation.PWSTR,POINTER(UInt32),win32more.Foundation.PSTR,POINTER(UInt32),UInt32,win32more.Foundation.PWSTR)(20, 'ConvertStringFromUnicodeEx', ((1, 'pdwMode'),(1, 'dwEncoding'),(1, 'pSrcStr'),(1, 'pcSrcSize'),(1, 'pDstStr'),(1, 'pcDstSize'),(1, 'dwFlag'),(1, 'lpFallBack'),)))
    IMultiLanguage2.DetectCodepageInIStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,win32more.System.Com.IStream_head,POINTER(win32more.Globalization.DetectEncodingInfo_head),POINTER(Int32))(21, 'DetectCodepageInIStream', ((1, 'dwFlag'),(1, 'dwPrefWinCodePage'),(1, 'pstmIn'),(1, 'lpEncoding'),(1, 'pnScores'),)))
    IMultiLanguage2.DetectInputCodepage = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,win32more.Foundation.PSTR,POINTER(Int32),POINTER(win32more.Globalization.DetectEncodingInfo_head),POINTER(Int32))(22, 'DetectInputCodepage', ((1, 'dwFlag'),(1, 'dwPrefWinCodePage'),(1, 'pSrcStr'),(1, 'pcSrcSize'),(1, 'lpEncoding'),(1, 'pnScores'),)))
    IMultiLanguage2.ValidateCodePage = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.HWND)(23, 'ValidateCodePage', ((1, 'uiCodePage'),(1, 'hwnd'),)))
    IMultiLanguage2.GetCodePageDescription = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt32,win32more.Foundation.PWSTR,Int32)(24, 'GetCodePageDescription', ((1, 'uiCodePage'),(1, 'lcid'),(1, 'lpWideCharStr'),(1, 'cchWideChar'),)))
    IMultiLanguage2.IsCodePageInstallable = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(25, 'IsCodePageInstallable', ((1, 'uiCodePage'),)))
    IMultiLanguage2.SetMimeDBSource = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Globalization.MIMECONTF)(26, 'SetMimeDBSource', ((1, 'dwSource'),)))
    IMultiLanguage2.GetNumberOfScripts = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(27, 'GetNumberOfScripts', ((1, 'pnScripts'),)))
    IMultiLanguage2.EnumScripts = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,UInt16,POINTER(win32more.Globalization.IEnumScript_head))(28, 'EnumScripts', ((1, 'dwFlags'),(1, 'LangId'),(1, 'ppEnumScript'),)))
    IMultiLanguage2.ValidateCodePageEx = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.HWND,UInt32)(29, 'ValidateCodePageEx', ((1, 'uiCodePage'),(1, 'hwnd'),(1, 'dwfIODControl'),)))
    win32more.System.Com.IUnknown
    return IMultiLanguage2
def _define_IMultiLanguage3_head():
    class IMultiLanguage3(win32more.Globalization.IMultiLanguage2_head):
        Guid = Guid('4e5868ab-b157-4623-9a-cc-6a-1d-9c-ae-be-04')
    return IMultiLanguage3
def _define_IMultiLanguage3():
    IMultiLanguage3 = win32more.Globalization.IMultiLanguage3_head
    IMultiLanguage3.DetectOutboundCodePage = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.Foundation.PWSTR,UInt32,POINTER(UInt32),UInt32,POINTER(UInt32),POINTER(UInt32),win32more.Foundation.PWSTR)(30, 'DetectOutboundCodePage', ((1, 'dwFlags'),(1, 'lpWideCharStr'),(1, 'cchWideChar'),(1, 'puiPreferredCodePages'),(1, 'nPreferredCodePages'),(1, 'puiDetectedCodePages'),(1, 'pnDetectedCodePages'),(1, 'lpSpecialChar'),)))
    IMultiLanguage3.DetectOutboundCodePageInIStream = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32,win32more.System.Com.IStream_head,POINTER(UInt32),UInt32,POINTER(UInt32),POINTER(UInt32),win32more.Foundation.PWSTR)(31, 'DetectOutboundCodePageInIStream', ((1, 'dwFlags'),(1, 'pStrIn'),(1, 'puiPreferredCodePages'),(1, 'nPreferredCodePages'),(1, 'puiDetectedCodePages'),(1, 'pnDetectedCodePages'),(1, 'lpSpecialChar'),)))
    win32more.Globalization.IMultiLanguage2
    return IMultiLanguage3
def _define_IOptionDescription_head():
    class IOptionDescription(win32more.System.Com.IUnknown_head):
        Guid = Guid('432e5f85-35cf-4606-a8-01-6f-70-27-7e-1d-7a')
    return IOptionDescription
def _define_IOptionDescription():
    IOptionDescription = win32more.Globalization.IOptionDescription_head
    IOptionDescription.get_Id = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(3, 'get_Id', ((1, 'value'),)))
    IOptionDescription.get_Heading = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(4, 'get_Heading', ((1, 'value'),)))
    IOptionDescription.get_Description = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(5, 'get_Description', ((1, 'value'),)))
    IOptionDescription.get_Labels = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.IEnumString_head))(6, 'get_Labels', ((1, 'value'),)))
    win32more.System.Com.IUnknown
    return IOptionDescription
IS_TEXT_UNICODE_RESULT = UInt32
IS_TEXT_UNICODE_ASCII16 = 1
IS_TEXT_UNICODE_REVERSE_ASCII16 = 16
IS_TEXT_UNICODE_STATISTICS = 2
IS_TEXT_UNICODE_REVERSE_STATISTICS = 32
IS_TEXT_UNICODE_CONTROLS = 4
IS_TEXT_UNICODE_REVERSE_CONTROLS = 64
IS_TEXT_UNICODE_SIGNATURE = 8
IS_TEXT_UNICODE_REVERSE_SIGNATURE = 128
IS_TEXT_UNICODE_ILLEGAL_CHARS = 256
IS_TEXT_UNICODE_ODD_LENGTH = 512
IS_TEXT_UNICODE_NULL_BYTES = 4096
IS_TEXT_UNICODE_UNICODE_MASK = 15
IS_TEXT_UNICODE_REVERSE_MASK = 240
IS_TEXT_UNICODE_NOT_UNICODE_MASK = 3840
IS_TEXT_UNICODE_NOT_ASCII_MASK = 61440
IS_VALID_LOCALE_FLAGS = UInt32
LCID_INSTALLED = 1
LCID_SUPPORTED = 2
def _define_ISpellChecker_head():
    class ISpellChecker(win32more.System.Com.IUnknown_head):
        Guid = Guid('b6fd0b71-e2bc-4653-8d-05-f1-97-e4-12-77-0b')
    return ISpellChecker
def _define_ISpellChecker():
    ISpellChecker = win32more.Globalization.ISpellChecker_head
    ISpellChecker.get_LanguageTag = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(3, 'get_LanguageTag', ((1, 'value'),)))
    ISpellChecker.Check = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Globalization.IEnumSpellingError_head))(4, 'Check', ((1, 'text'),(1, 'value'),)))
    ISpellChecker.Suggest = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.System.Com.IEnumString_head))(5, 'Suggest', ((1, 'word'),(1, 'value'),)))
    ISpellChecker.Add = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR)(6, 'Add', ((1, 'word'),)))
    ISpellChecker.Ignore = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR)(7, 'Ignore', ((1, 'word'),)))
    ISpellChecker.AutoCorrect = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR)(8, 'AutoCorrect', ((1, 'from'),(1, 'to'),)))
    ISpellChecker.GetOptionValue = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,c_char_p_no)(9, 'GetOptionValue', ((1, 'optionId'),(1, 'value'),)))
    ISpellChecker.get_OptionIds = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.IEnumString_head))(10, 'get_OptionIds', ((1, 'value'),)))
    ISpellChecker.get_Id = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(11, 'get_Id', ((1, 'value'),)))
    ISpellChecker.get_LocalizedName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(12, 'get_LocalizedName', ((1, 'value'),)))
    ISpellChecker.add_SpellCheckerChanged = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Globalization.ISpellCheckerChangedEventHandler_head,POINTER(UInt32))(13, 'add_SpellCheckerChanged', ((1, 'handler'),(1, 'eventCookie'),)))
    ISpellChecker.remove_SpellCheckerChanged = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,UInt32)(14, 'remove_SpellCheckerChanged', ((1, 'eventCookie'),)))
    ISpellChecker.GetOptionDescription = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Globalization.IOptionDescription_head))(15, 'GetOptionDescription', ((1, 'optionId'),(1, 'value'),)))
    ISpellChecker.ComprehensiveCheck = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Globalization.IEnumSpellingError_head))(16, 'ComprehensiveCheck', ((1, 'text'),(1, 'value'),)))
    win32more.System.Com.IUnknown
    return ISpellChecker
def _define_ISpellChecker2_head():
    class ISpellChecker2(win32more.Globalization.ISpellChecker_head):
        Guid = Guid('e7ed1c71-87f7-4378-a8-40-c9-20-0d-ac-ee-47')
    return ISpellChecker2
def _define_ISpellChecker2():
    ISpellChecker2 = win32more.Globalization.ISpellChecker2_head
    ISpellChecker2.Remove = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR)(17, 'Remove', ((1, 'word'),)))
    win32more.Globalization.ISpellChecker
    return ISpellChecker2
def _define_ISpellCheckerChangedEventHandler_head():
    class ISpellCheckerChangedEventHandler(win32more.System.Com.IUnknown_head):
        Guid = Guid('0b83a5b0-792f-4eab-97-99-ac-f5-2c-5e-d0-8a')
    return ISpellCheckerChangedEventHandler
def _define_ISpellCheckerChangedEventHandler():
    ISpellCheckerChangedEventHandler = win32more.Globalization.ISpellCheckerChangedEventHandler_head
    ISpellCheckerChangedEventHandler.Invoke = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Globalization.ISpellChecker_head)(3, 'Invoke', ((1, 'sender'),)))
    win32more.System.Com.IUnknown
    return ISpellCheckerChangedEventHandler
def _define_ISpellCheckerFactory_head():
    class ISpellCheckerFactory(win32more.System.Com.IUnknown_head):
        Guid = Guid('8e018a9d-2415-4677-bf-08-79-4e-a6-1f-94-bb')
    return ISpellCheckerFactory
def _define_ISpellCheckerFactory():
    ISpellCheckerFactory = win32more.Globalization.ISpellCheckerFactory_head
    ISpellCheckerFactory.get_SupportedLanguages = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.IEnumString_head))(3, 'get_SupportedLanguages', ((1, 'value'),)))
    ISpellCheckerFactory.IsSupported = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Foundation.BOOL))(4, 'IsSupported', ((1, 'languageTag'),(1, 'value'),)))
    ISpellCheckerFactory.CreateSpellChecker = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Globalization.ISpellChecker_head))(5, 'CreateSpellChecker', ((1, 'languageTag'),(1, 'value'),)))
    win32more.System.Com.IUnknown
    return ISpellCheckerFactory
def _define_ISpellCheckProvider_head():
    class ISpellCheckProvider(win32more.System.Com.IUnknown_head):
        Guid = Guid('73e976e0-8ed4-4eb1-80-d7-1b-e0-a1-6b-0c-38')
    return ISpellCheckProvider
def _define_ISpellCheckProvider():
    ISpellCheckProvider = win32more.Globalization.ISpellCheckProvider_head
    ISpellCheckProvider.get_LanguageTag = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(3, 'get_LanguageTag', ((1, 'value'),)))
    ISpellCheckProvider.Check = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Globalization.IEnumSpellingError_head))(4, 'Check', ((1, 'text'),(1, 'value'),)))
    ISpellCheckProvider.Suggest = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.System.Com.IEnumString_head))(5, 'Suggest', ((1, 'word'),(1, 'value'),)))
    ISpellCheckProvider.GetOptionValue = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,c_char_p_no)(6, 'GetOptionValue', ((1, 'optionId'),(1, 'value'),)))
    ISpellCheckProvider.SetOptionValue = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,Byte)(7, 'SetOptionValue', ((1, 'optionId'),(1, 'value'),)))
    ISpellCheckProvider.get_OptionIds = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.IEnumString_head))(8, 'get_OptionIds', ((1, 'value'),)))
    ISpellCheckProvider.get_Id = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(9, 'get_Id', ((1, 'value'),)))
    ISpellCheckProvider.get_LocalizedName = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(10, 'get_LocalizedName', ((1, 'value'),)))
    ISpellCheckProvider.GetOptionDescription = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Globalization.IOptionDescription_head))(11, 'GetOptionDescription', ((1, 'optionId'),(1, 'value'),)))
    ISpellCheckProvider.InitializeWordlist = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Globalization.WORDLIST_TYPE,win32more.System.Com.IEnumString_head)(12, 'InitializeWordlist', ((1, 'wordlistType'),(1, 'words'),)))
    win32more.System.Com.IUnknown
    return ISpellCheckProvider
def _define_ISpellCheckProviderFactory_head():
    class ISpellCheckProviderFactory(win32more.System.Com.IUnknown_head):
        Guid = Guid('9f671e11-77d6-4c92-ae-fb-61-52-15-e3-a4-be')
    return ISpellCheckProviderFactory
def _define_ISpellCheckProviderFactory():
    ISpellCheckProviderFactory = win32more.Globalization.ISpellCheckProviderFactory_head
    ISpellCheckProviderFactory.get_SupportedLanguages = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.System.Com.IEnumString_head))(3, 'get_SupportedLanguages', ((1, 'value'),)))
    ISpellCheckProviderFactory.IsSupported = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Foundation.BOOL))(4, 'IsSupported', ((1, 'languageTag'),(1, 'value'),)))
    ISpellCheckProviderFactory.CreateSpellCheckProvider = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,POINTER(win32more.Globalization.ISpellCheckProvider_head))(5, 'CreateSpellCheckProvider', ((1, 'languageTag'),(1, 'value'),)))
    win32more.System.Com.IUnknown
    return ISpellCheckProviderFactory
def _define_ISpellingError_head():
    class ISpellingError(win32more.System.Com.IUnknown_head):
        Guid = Guid('b7c82d61-fbe8-4b47-9b-27-6c-0d-2e-0d-e0-a3')
    return ISpellingError
def _define_ISpellingError():
    ISpellingError = win32more.Globalization.ISpellingError_head
    ISpellingError.get_StartIndex = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(3, 'get_StartIndex', ((1, 'value'),)))
    ISpellingError.get_Length = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(UInt32))(4, 'get_Length', ((1, 'value'),)))
    ISpellingError.get_CorrectiveAction = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Globalization.CORRECTIVE_ACTION))(5, 'get_CorrectiveAction', ((1, 'value'),)))
    ISpellingError.get_Replacement = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,POINTER(win32more.Foundation.PWSTR))(6, 'get_Replacement', ((1, 'value'),)))
    win32more.System.Com.IUnknown
    return ISpellingError
def _define_IUserDictionariesRegistrar_head():
    class IUserDictionariesRegistrar(win32more.System.Com.IUnknown_head):
        Guid = Guid('aa176b85-0e12-4844-8e-1a-ee-f1-da-77-f5-86')
    return IUserDictionariesRegistrar
def _define_IUserDictionariesRegistrar():
    IUserDictionariesRegistrar = win32more.Globalization.IUserDictionariesRegistrar_head
    IUserDictionariesRegistrar.RegisterUserDictionary = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR)(3, 'RegisterUserDictionary', ((1, 'dictionaryPath'),(1, 'languageTag'),)))
    IUserDictionariesRegistrar.UnregisterUserDictionary = COMMETHOD(WINFUNCTYPE(win32more.Foundation.HRESULT,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR)(4, 'UnregisterUserDictionary', ((1, 'dictionaryPath'),(1, 'languageTag'),)))
    win32more.System.Com.IUnknown
    return IUserDictionariesRegistrar
def _define_LANGGROUPLOCALE_ENUMPROCA():
    return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,UInt32,win32more.Foundation.PSTR,IntPtr)
def _define_LANGGROUPLOCALE_ENUMPROCW():
    return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,UInt32,win32more.Foundation.PWSTR,IntPtr)
def _define_LANGUAGEGROUP_ENUMPROCA():
    return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PSTR,win32more.Foundation.PSTR,UInt32,IntPtr)
def _define_LANGUAGEGROUP_ENUMPROCW():
    return WINFUNCTYPE(win32more.Foundation.BOOL,UInt32,win32more.Foundation.PWSTR,win32more.Foundation.PWSTR,UInt32,IntPtr)
def _define_LOCALE_ENUMPROCA():
    return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR)
def _define_LOCALE_ENUMPROCEX():
    return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,UInt32,win32more.Foundation.LPARAM)
def _define_LOCALE_ENUMPROCW():
    return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR)
def _define_LOCALESIGNATURE_head():
    class LOCALESIGNATURE(Structure):
        pass
    return LOCALESIGNATURE
def _define_LOCALESIGNATURE():
    LOCALESIGNATURE = win32more.Globalization.LOCALESIGNATURE_head
    LOCALESIGNATURE._fields_ = [
        ('lsUsb', UInt32 * 4),
        ('lsCsbDefault', UInt32 * 2),
        ('lsCsbSupported', UInt32 * 2),
    ]
    return LOCALESIGNATURE
def _define_MAPPING_DATA_RANGE_head():
    class MAPPING_DATA_RANGE(Structure):
        pass
    return MAPPING_DATA_RANGE
def _define_MAPPING_DATA_RANGE():
    MAPPING_DATA_RANGE = win32more.Globalization.MAPPING_DATA_RANGE_head
    MAPPING_DATA_RANGE._fields_ = [
        ('dwStartIndex', UInt32),
        ('dwEndIndex', UInt32),
        ('pszDescription', win32more.Foundation.PWSTR),
        ('dwDescriptionLength', UInt32),
        ('pData', c_void_p),
        ('dwDataSize', UInt32),
        ('pszContentType', win32more.Foundation.PWSTR),
        ('prgActionIds', POINTER(win32more.Foundation.PWSTR)),
        ('dwActionsCount', UInt32),
        ('prgActionDisplayNames', POINTER(win32more.Foundation.PWSTR)),
    ]
    return MAPPING_DATA_RANGE
def _define_MAPPING_ENUM_OPTIONS_head():
    class MAPPING_ENUM_OPTIONS(Structure):
        pass
    return MAPPING_ENUM_OPTIONS
def _define_MAPPING_ENUM_OPTIONS():
    MAPPING_ENUM_OPTIONS = win32more.Globalization.MAPPING_ENUM_OPTIONS_head
    MAPPING_ENUM_OPTIONS._fields_ = [
        ('Size', UIntPtr),
        ('pszCategory', win32more.Foundation.PWSTR),
        ('pszInputLanguage', win32more.Foundation.PWSTR),
        ('pszOutputLanguage', win32more.Foundation.PWSTR),
        ('pszInputScript', win32more.Foundation.PWSTR),
        ('pszOutputScript', win32more.Foundation.PWSTR),
        ('pszInputContentType', win32more.Foundation.PWSTR),
        ('pszOutputContentType', win32more.Foundation.PWSTR),
        ('pGuid', POINTER(Guid)),
        ('_bitfield', UInt32),
    ]
    return MAPPING_ENUM_OPTIONS
def _define_MAPPING_OPTIONS_head():
    class MAPPING_OPTIONS(Structure):
        pass
    return MAPPING_OPTIONS
def _define_MAPPING_OPTIONS():
    MAPPING_OPTIONS = win32more.Globalization.MAPPING_OPTIONS_head
    MAPPING_OPTIONS._fields_ = [
        ('Size', UIntPtr),
        ('pszInputLanguage', win32more.Foundation.PWSTR),
        ('pszOutputLanguage', win32more.Foundation.PWSTR),
        ('pszInputScript', win32more.Foundation.PWSTR),
        ('pszOutputScript', win32more.Foundation.PWSTR),
        ('pszInputContentType', win32more.Foundation.PWSTR),
        ('pszOutputContentType', win32more.Foundation.PWSTR),
        ('pszUILanguage', win32more.Foundation.PWSTR),
        ('pfnRecognizeCallback', win32more.Globalization.PFN_MAPPINGCALLBACKPROC),
        ('pRecognizeCallerData', c_void_p),
        ('dwRecognizeCallerDataSize', UInt32),
        ('pfnActionCallback', win32more.Globalization.PFN_MAPPINGCALLBACKPROC),
        ('pActionCallerData', c_void_p),
        ('dwActionCallerDataSize', UInt32),
        ('dwServiceFlag', UInt32),
        ('_bitfield', UInt32),
    ]
    return MAPPING_OPTIONS
def _define_MAPPING_PROPERTY_BAG_head():
    class MAPPING_PROPERTY_BAG(Structure):
        pass
    return MAPPING_PROPERTY_BAG
def _define_MAPPING_PROPERTY_BAG():
    MAPPING_PROPERTY_BAG = win32more.Globalization.MAPPING_PROPERTY_BAG_head
    MAPPING_PROPERTY_BAG._fields_ = [
        ('Size', UIntPtr),
        ('prgResultRanges', POINTER(win32more.Globalization.MAPPING_DATA_RANGE_head)),
        ('dwRangesCount', UInt32),
        ('pServiceData', c_void_p),
        ('dwServiceDataSize', UInt32),
        ('pCallerData', c_void_p),
        ('dwCallerDataSize', UInt32),
        ('pContext', c_void_p),
    ]
    return MAPPING_PROPERTY_BAG
def _define_MAPPING_SERVICE_INFO_head():
    class MAPPING_SERVICE_INFO(Structure):
        pass
    return MAPPING_SERVICE_INFO
def _define_MAPPING_SERVICE_INFO():
    MAPPING_SERVICE_INFO = win32more.Globalization.MAPPING_SERVICE_INFO_head
    MAPPING_SERVICE_INFO._fields_ = [
        ('Size', UIntPtr),
        ('pszCopyright', win32more.Foundation.PWSTR),
        ('wMajorVersion', UInt16),
        ('wMinorVersion', UInt16),
        ('wBuildVersion', UInt16),
        ('wStepVersion', UInt16),
        ('dwInputContentTypesCount', UInt32),
        ('prgInputContentTypes', POINTER(win32more.Foundation.PWSTR)),
        ('dwOutputContentTypesCount', UInt32),
        ('prgOutputContentTypes', POINTER(win32more.Foundation.PWSTR)),
        ('dwInputLanguagesCount', UInt32),
        ('prgInputLanguages', POINTER(win32more.Foundation.PWSTR)),
        ('dwOutputLanguagesCount', UInt32),
        ('prgOutputLanguages', POINTER(win32more.Foundation.PWSTR)),
        ('dwInputScriptsCount', UInt32),
        ('prgInputScripts', POINTER(win32more.Foundation.PWSTR)),
        ('dwOutputScriptsCount', UInt32),
        ('prgOutputScripts', POINTER(win32more.Foundation.PWSTR)),
        ('guid', Guid),
        ('pszCategory', win32more.Foundation.PWSTR),
        ('pszDescription', win32more.Foundation.PWSTR),
        ('dwPrivateDataSize', UInt32),
        ('pPrivateData', c_void_p),
        ('pContext', c_void_p),
        ('_bitfield', UInt32),
    ]
    return MAPPING_SERVICE_INFO
MIMECONTF = Int32
MIMECONTF_MAILNEWS = 1
MIMECONTF_BROWSER = 2
MIMECONTF_MINIMAL = 4
MIMECONTF_IMPORT = 8
MIMECONTF_SAVABLE_MAILNEWS = 256
MIMECONTF_SAVABLE_BROWSER = 512
MIMECONTF_EXPORT = 1024
MIMECONTF_PRIVCONVERTER = 65536
MIMECONTF_VALID = 131072
MIMECONTF_VALID_NLS = 262144
MIMECONTF_MIME_IE4 = 268435456
MIMECONTF_MIME_LATEST = 536870912
MIMECONTF_MIME_REGISTRY = 1073741824
def _define_MIMECPINFO_head():
    class MIMECPINFO(Structure):
        pass
    return MIMECPINFO
def _define_MIMECPINFO():
    MIMECPINFO = win32more.Globalization.MIMECPINFO_head
    MIMECPINFO._fields_ = [
        ('dwFlags', UInt32),
        ('uiCodePage', UInt32),
        ('uiFamilyCodePage', UInt32),
        ('wszDescription', Char * 64),
        ('wszWebCharset', Char * 50),
        ('wszHeaderCharset', Char * 50),
        ('wszBodyCharset', Char * 50),
        ('wszFixedWidthFont', Char * 32),
        ('wszProportionalFont', Char * 32),
        ('bGDICharset', Byte),
    ]
    return MIMECPINFO
def _define_MIMECSETINFO_head():
    class MIMECSETINFO(Structure):
        pass
    return MIMECSETINFO
def _define_MIMECSETINFO():
    MIMECSETINFO = win32more.Globalization.MIMECSETINFO_head
    MIMECSETINFO._fields_ = [
        ('uiCodePage', UInt32),
        ('uiInternetEncoding', UInt32),
        ('wszCharset', Char * 50),
    ]
    return MIMECSETINFO
MLCONVCHAR = Int32
MLCONVCHARF_AUTODETECT = 1
MLCONVCHARF_ENTITIZE = 2
MLCONVCHARF_NCR_ENTITIZE = 2
MLCONVCHARF_NAME_ENTITIZE = 4
MLCONVCHARF_USEDEFCHAR = 8
MLCONVCHARF_NOBESTFITCHARS = 16
MLCONVCHARF_DETECTJPN = 32
MLCP = Int32
MLDETECTF_MAILNEWS = 1
MLDETECTF_BROWSER = 2
MLDETECTF_VALID = 4
MLDETECTF_VALID_NLS = 8
MLDETECTF_PRESERVE_ORDER = 16
MLDETECTF_PREFERRED_ONLY = 32
MLDETECTF_FILTER_SPECIALCHAR = 64
MLDETECTF_EURO_UTF8 = 128
MLDETECTCP = Int32
MLDETECTCP_NONE = 0
MLDETECTCP_7BIT = 1
MLDETECTCP_8BIT = 2
MLDETECTCP_DBCS = 4
MLDETECTCP_HTML = 8
MLDETECTCP_NUMBER = 16
MLSTR_FLAGS = Int32
MLSTR_READ = 1
MLSTR_WRITE = 2
MULTI_BYTE_TO_WIDE_CHAR_FLAGS = UInt32
MB_COMPOSITE = 2
MB_ERR_INVALID_CHARS = 8
MB_PRECOMPOSED = 1
MB_USEGLYPHCHARS = 4
def _define_NEWTEXTMETRICEXA_head():
    class NEWTEXTMETRICEXA(Structure):
        pass
    return NEWTEXTMETRICEXA
def _define_NEWTEXTMETRICEXA():
    NEWTEXTMETRICEXA = win32more.Globalization.NEWTEXTMETRICEXA_head
    NEWTEXTMETRICEXA._fields_ = [
        ('ntmTm', win32more.Graphics.Gdi.NEWTEXTMETRICA),
        ('ntmFontSig', win32more.Globalization.FONTSIGNATURE),
    ]
    return NEWTEXTMETRICEXA
def _define_NEWTEXTMETRICEXW_head():
    class NEWTEXTMETRICEXW(Structure):
        pass
    return NEWTEXTMETRICEXW
def _define_NEWTEXTMETRICEXW():
    NEWTEXTMETRICEXW = win32more.Globalization.NEWTEXTMETRICEXW_head
    NEWTEXTMETRICEXW._fields_ = [
        ('ntmTm', win32more.Graphics.Gdi.NEWTEXTMETRICW),
        ('ntmFontSig', win32more.Globalization.FONTSIGNATURE),
    ]
    return NEWTEXTMETRICEXW
def _define_NLSVERSIONINFO_head():
    class NLSVERSIONINFO(Structure):
        pass
    return NLSVERSIONINFO
def _define_NLSVERSIONINFO():
    NLSVERSIONINFO = win32more.Globalization.NLSVERSIONINFO_head
    NLSVERSIONINFO._fields_ = [
        ('dwNLSVersionInfoSize', UInt32),
        ('dwNLSVersion', UInt32),
        ('dwDefinedVersion', UInt32),
        ('dwEffectiveId', UInt32),
        ('guidCustomVersion', Guid),
    ]
    return NLSVERSIONINFO
def _define_NLSVERSIONINFOEX_head():
    class NLSVERSIONINFOEX(Structure):
        pass
    return NLSVERSIONINFOEX
def _define_NLSVERSIONINFOEX():
    NLSVERSIONINFOEX = win32more.Globalization.NLSVERSIONINFOEX_head
    NLSVERSIONINFOEX._fields_ = [
        ('dwNLSVersionInfoSize', UInt32),
        ('dwNLSVersion', UInt32),
        ('dwDefinedVersion', UInt32),
        ('dwEffectiveId', UInt32),
        ('guidCustomVersion', Guid),
    ]
    return NLSVERSIONINFOEX
NORM_FORM = Int32
NORM_FORM_NormalizationOther = 0
NORM_FORM_NormalizationC = 1
NORM_FORM_NormalizationD = 2
NORM_FORM_NormalizationKC = 5
NORM_FORM_NormalizationKD = 6
def _define_NUMBERFMTA_head():
    class NUMBERFMTA(Structure):
        pass
    return NUMBERFMTA
def _define_NUMBERFMTA():
    NUMBERFMTA = win32more.Globalization.NUMBERFMTA_head
    NUMBERFMTA._fields_ = [
        ('NumDigits', UInt32),
        ('LeadingZero', UInt32),
        ('Grouping', UInt32),
        ('lpDecimalSep', win32more.Foundation.PSTR),
        ('lpThousandSep', win32more.Foundation.PSTR),
        ('NegativeOrder', UInt32),
    ]
    return NUMBERFMTA
def _define_NUMBERFMTW_head():
    class NUMBERFMTW(Structure):
        pass
    return NUMBERFMTW
def _define_NUMBERFMTW():
    NUMBERFMTW = win32more.Globalization.NUMBERFMTW_head
    NUMBERFMTW._fields_ = [
        ('NumDigits', UInt32),
        ('LeadingZero', UInt32),
        ('Grouping', UInt32),
        ('lpDecimalSep', win32more.Foundation.PWSTR),
        ('lpThousandSep', win32more.Foundation.PWSTR),
        ('NegativeOrder', UInt32),
    ]
    return NUMBERFMTW
def _define_OPENTYPE_FEATURE_RECORD_head():
    class OPENTYPE_FEATURE_RECORD(Structure):
        pass
    return OPENTYPE_FEATURE_RECORD
def _define_OPENTYPE_FEATURE_RECORD():
    OPENTYPE_FEATURE_RECORD = win32more.Globalization.OPENTYPE_FEATURE_RECORD_head
    OPENTYPE_FEATURE_RECORD._fields_ = [
        ('tagFeature', UInt32),
        ('lParameter', Int32),
    ]
    return OPENTYPE_FEATURE_RECORD
def _define_PFN_MAPPINGCALLBACKPROC():
    return WINFUNCTYPE(Void,POINTER(win32more.Globalization.MAPPING_PROPERTY_BAG_head),c_void_p,UInt32,win32more.Foundation.HRESULT)
def _define_RFC1766INFO_head():
    class RFC1766INFO(Structure):
        pass
    return RFC1766INFO
def _define_RFC1766INFO():
    RFC1766INFO = win32more.Globalization.RFC1766INFO_head
    RFC1766INFO._fields_ = [
        ('lcid', UInt32),
        ('wszRfc1766', Char * 6),
        ('wszLocaleName', Char * 32),
    ]
    return RFC1766INFO
def _define_SCRIPT_ANALYSIS_head():
    class SCRIPT_ANALYSIS(Structure):
        pass
    return SCRIPT_ANALYSIS
def _define_SCRIPT_ANALYSIS():
    SCRIPT_ANALYSIS = win32more.Globalization.SCRIPT_ANALYSIS_head
    SCRIPT_ANALYSIS._fields_ = [
        ('_bitfield', UInt16),
        ('s', win32more.Globalization.SCRIPT_STATE),
    ]
    return SCRIPT_ANALYSIS
def _define_SCRIPT_CHARPROP_head():
    class SCRIPT_CHARPROP(Structure):
        pass
    return SCRIPT_CHARPROP
def _define_SCRIPT_CHARPROP():
    SCRIPT_CHARPROP = win32more.Globalization.SCRIPT_CHARPROP_head
    SCRIPT_CHARPROP._fields_ = [
        ('_bitfield', UInt16),
    ]
    return SCRIPT_CHARPROP
def _define_SCRIPT_CONTROL_head():
    class SCRIPT_CONTROL(Structure):
        pass
    return SCRIPT_CONTROL
def _define_SCRIPT_CONTROL():
    SCRIPT_CONTROL = win32more.Globalization.SCRIPT_CONTROL_head
    SCRIPT_CONTROL._fields_ = [
        ('_bitfield', UInt32),
    ]
    return SCRIPT_CONTROL
def _define_SCRIPT_DIGITSUBSTITUTE_head():
    class SCRIPT_DIGITSUBSTITUTE(Structure):
        pass
    return SCRIPT_DIGITSUBSTITUTE
def _define_SCRIPT_DIGITSUBSTITUTE():
    SCRIPT_DIGITSUBSTITUTE = win32more.Globalization.SCRIPT_DIGITSUBSTITUTE_head
    SCRIPT_DIGITSUBSTITUTE._fields_ = [
        ('_bitfield1', UInt32),
        ('_bitfield2', UInt32),
        ('dwReserved', UInt32),
    ]
    return SCRIPT_DIGITSUBSTITUTE
def _define_SCRIPT_FONTPROPERTIES_head():
    class SCRIPT_FONTPROPERTIES(Structure):
        pass
    return SCRIPT_FONTPROPERTIES
def _define_SCRIPT_FONTPROPERTIES():
    SCRIPT_FONTPROPERTIES = win32more.Globalization.SCRIPT_FONTPROPERTIES_head
    SCRIPT_FONTPROPERTIES._fields_ = [
        ('cBytes', Int32),
        ('wgBlank', UInt16),
        ('wgDefault', UInt16),
        ('wgInvalid', UInt16),
        ('wgKashida', UInt16),
        ('iKashidaWidth', Int32),
    ]
    return SCRIPT_FONTPROPERTIES
def _define_SCRIPT_GLYPHPROP_head():
    class SCRIPT_GLYPHPROP(Structure):
        pass
    return SCRIPT_GLYPHPROP
def _define_SCRIPT_GLYPHPROP():
    SCRIPT_GLYPHPROP = win32more.Globalization.SCRIPT_GLYPHPROP_head
    SCRIPT_GLYPHPROP._fields_ = [
        ('sva', win32more.Globalization.SCRIPT_VISATTR),
        ('reserved', UInt16),
    ]
    return SCRIPT_GLYPHPROP
SCRIPT_IS_COMPLEX_FLAGS = UInt32
SIC_ASCIIDIGIT = 2
SIC_COMPLEX = 1
SIC_NEUTRAL = 4
def _define_SCRIPT_ITEM_head():
    class SCRIPT_ITEM(Structure):
        pass
    return SCRIPT_ITEM
def _define_SCRIPT_ITEM():
    SCRIPT_ITEM = win32more.Globalization.SCRIPT_ITEM_head
    SCRIPT_ITEM._fields_ = [
        ('iCharPos', Int32),
        ('a', win32more.Globalization.SCRIPT_ANALYSIS),
    ]
    return SCRIPT_ITEM
SCRIPT_JUSTIFY = Int32
SCRIPT_JUSTIFY_NONE = 0
SCRIPT_JUSTIFY_ARABIC_BLANK = 1
SCRIPT_JUSTIFY_CHARACTER = 2
SCRIPT_JUSTIFY_RESERVED1 = 3
SCRIPT_JUSTIFY_BLANK = 4
SCRIPT_JUSTIFY_RESERVED2 = 5
SCRIPT_JUSTIFY_RESERVED3 = 6
SCRIPT_JUSTIFY_ARABIC_NORMAL = 7
SCRIPT_JUSTIFY_ARABIC_KASHIDA = 8
SCRIPT_JUSTIFY_ARABIC_ALEF = 9
SCRIPT_JUSTIFY_ARABIC_HA = 10
SCRIPT_JUSTIFY_ARABIC_RA = 11
SCRIPT_JUSTIFY_ARABIC_BA = 12
SCRIPT_JUSTIFY_ARABIC_BARA = 13
SCRIPT_JUSTIFY_ARABIC_SEEN = 14
SCRIPT_JUSTIFY_ARABIC_SEEN_M = 15
def _define_SCRIPT_LOGATTR_head():
    class SCRIPT_LOGATTR(Structure):
        pass
    return SCRIPT_LOGATTR
def _define_SCRIPT_LOGATTR():
    SCRIPT_LOGATTR = win32more.Globalization.SCRIPT_LOGATTR_head
    SCRIPT_LOGATTR._fields_ = [
        ('_bitfield', Byte),
    ]
    return SCRIPT_LOGATTR
def _define_SCRIPT_PROPERTIES_head():
    class SCRIPT_PROPERTIES(Structure):
        pass
    return SCRIPT_PROPERTIES
def _define_SCRIPT_PROPERTIES():
    SCRIPT_PROPERTIES = win32more.Globalization.SCRIPT_PROPERTIES_head
    SCRIPT_PROPERTIES._fields_ = [
        ('_bitfield1', UInt32),
        ('_bitfield2', UInt32),
    ]
    return SCRIPT_PROPERTIES
def _define_SCRIPT_STATE_head():
    class SCRIPT_STATE(Structure):
        pass
    return SCRIPT_STATE
def _define_SCRIPT_STATE():
    SCRIPT_STATE = win32more.Globalization.SCRIPT_STATE_head
    SCRIPT_STATE._fields_ = [
        ('_bitfield', UInt16),
    ]
    return SCRIPT_STATE
def _define_SCRIPT_TABDEF_head():
    class SCRIPT_TABDEF(Structure):
        pass
    return SCRIPT_TABDEF
def _define_SCRIPT_TABDEF():
    SCRIPT_TABDEF = win32more.Globalization.SCRIPT_TABDEF_head
    SCRIPT_TABDEF._fields_ = [
        ('cTabStops', Int32),
        ('iScale', Int32),
        ('pTabStops', POINTER(Int32)),
        ('iTabOrigin', Int32),
    ]
    return SCRIPT_TABDEF
def _define_SCRIPT_VISATTR_head():
    class SCRIPT_VISATTR(Structure):
        pass
    return SCRIPT_VISATTR
def _define_SCRIPT_VISATTR():
    SCRIPT_VISATTR = win32more.Globalization.SCRIPT_VISATTR_head
    SCRIPT_VISATTR._fields_ = [
        ('_bitfield', UInt16),
    ]
    return SCRIPT_VISATTR
SCRIPTCONTF = Int32
SCRIPTCONTF_sidDefault = 0
SCRIPTCONTF_sidMerge = 1
SCRIPTCONTF_sidAsciiSym = 2
SCRIPTCONTF_sidAsciiLatin = 3
SCRIPTCONTF_sidLatin = 4
SCRIPTCONTF_sidGreek = 5
SCRIPTCONTF_sidCyrillic = 6
SCRIPTCONTF_sidArmenian = 7
SCRIPTCONTF_sidHebrew = 8
SCRIPTCONTF_sidArabic = 9
SCRIPTCONTF_sidDevanagari = 10
SCRIPTCONTF_sidBengali = 11
SCRIPTCONTF_sidGurmukhi = 12
SCRIPTCONTF_sidGujarati = 13
SCRIPTCONTF_sidOriya = 14
SCRIPTCONTF_sidTamil = 15
SCRIPTCONTF_sidTelugu = 16
SCRIPTCONTF_sidKannada = 17
SCRIPTCONTF_sidMalayalam = 18
SCRIPTCONTF_sidThai = 19
SCRIPTCONTF_sidLao = 20
SCRIPTCONTF_sidTibetan = 21
SCRIPTCONTF_sidGeorgian = 22
SCRIPTCONTF_sidHangul = 23
SCRIPTCONTF_sidKana = 24
SCRIPTCONTF_sidBopomofo = 25
SCRIPTCONTF_sidHan = 26
SCRIPTCONTF_sidEthiopic = 27
SCRIPTCONTF_sidCanSyllabic = 28
SCRIPTCONTF_sidCherokee = 29
SCRIPTCONTF_sidYi = 30
SCRIPTCONTF_sidBraille = 31
SCRIPTCONTF_sidRunic = 32
SCRIPTCONTF_sidOgham = 33
SCRIPTCONTF_sidSinhala = 34
SCRIPTCONTF_sidSyriac = 35
SCRIPTCONTF_sidBurmese = 36
SCRIPTCONTF_sidKhmer = 37
SCRIPTCONTF_sidThaana = 38
SCRIPTCONTF_sidMongolian = 39
SCRIPTCONTF_sidUserDefined = 40
SCRIPTCONTF_sidLim = 41
SCRIPTCONTF_sidFEFirst = 23
SCRIPTCONTF_sidFELast = 26
SCRIPTFONTCONTF = Int32
SCRIPTCONTF_FIXED_FONT = 1
SCRIPTCONTF_PROPORTIONAL_FONT = 2
SCRIPTCONTF_SCRIPT_USER = 65536
SCRIPTCONTF_SCRIPT_HIDE = 131072
SCRIPTCONTF_SCRIPT_SYSTEM = 262144
def _define_SCRIPTFONTINFO_head():
    class SCRIPTFONTINFO(Structure):
        pass
    return SCRIPTFONTINFO
def _define_SCRIPTFONTINFO():
    SCRIPTFONTINFO = win32more.Globalization.SCRIPTFONTINFO_head
    SCRIPTFONTINFO._fields_ = [
        ('scripts', Int64),
        ('wszFont', Char * 32),
    ]
    return SCRIPTFONTINFO
def _define_SCRIPTINFO_head():
    class SCRIPTINFO(Structure):
        pass
    return SCRIPTINFO
def _define_SCRIPTINFO():
    SCRIPTINFO = win32more.Globalization.SCRIPTINFO_head
    SCRIPTINFO._fields_ = [
        ('ScriptId', Byte),
        ('uiCodePage', UInt32),
        ('wszDescription', Char * 48),
        ('wszFixedWidthFont', Char * 32),
        ('wszProportionalFont', Char * 32),
    ]
    return SCRIPTINFO
SpellCheckerFactory = Guid('7ab36653-1796-484b-bd-fa-e7-4f-1d-b7-c1-dc')
SYSGEOCLASS = Int32
GEOCLASS_NATION = 16
GEOCLASS_REGION = 14
GEOCLASS_ALL = 0
SYSGEOTYPE = Int32
GEO_NATION = 1
GEO_LATITUDE = 2
GEO_LONGITUDE = 3
GEO_ISO2 = 4
GEO_ISO3 = 5
GEO_RFC1766 = 6
GEO_LCID = 7
GEO_FRIENDLYNAME = 8
GEO_OFFICIALNAME = 9
GEO_TIMEZONES = 10
GEO_OFFICIALLANGUAGES = 11
GEO_ISO_UN_NUMBER = 12
GEO_PARENT = 13
GEO_DIALINGCODE = 14
GEO_CURRENCYCODE = 15
GEO_CURRENCYSYMBOL = 16
GEO_NAME = 17
GEO_ID = 18
SYSNLS_FUNCTION = Int32
COMPARE_STRING = 1
def _define_TEXTRANGE_PROPERTIES_head():
    class TEXTRANGE_PROPERTIES(Structure):
        pass
    return TEXTRANGE_PROPERTIES
def _define_TEXTRANGE_PROPERTIES():
    TEXTRANGE_PROPERTIES = win32more.Globalization.TEXTRANGE_PROPERTIES_head
    TEXTRANGE_PROPERTIES._fields_ = [
        ('potfRecords', POINTER(win32more.Globalization.OPENTYPE_FEATURE_RECORD_head)),
        ('cotfRecords', Int32),
    ]
    return TEXTRANGE_PROPERTIES
TIME_FORMAT_FLAGS = UInt32
TIME_NOMINUTESORSECONDS = 1
TIME_NOSECONDS = 2
TIME_NOTIMEMARKER = 4
TIME_FORCE24HOURFORMAT = 8
def _define_TIMEFMT_ENUMPROCA():
    return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR)
def _define_TIMEFMT_ENUMPROCEX():
    return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,win32more.Foundation.LPARAM)
def _define_TIMEFMT_ENUMPROCW():
    return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR)
TRANSLATE_CHARSET_INFO_FLAGS = UInt32
TCI_SRCCHARSET = 1
TCI_SRCCODEPAGE = 2
TCI_SRCFONTSIG = 3
TCI_SRCLOCALE = 4096
UAcceptResult = Int32
ULOC_ACCEPT_FAILED = 0
ULOC_ACCEPT_VALID = 1
ULOC_ACCEPT_FALLBACK = 2
UAlphabeticIndexLabelType = Int32
U_ALPHAINDEX_NORMAL = 0
U_ALPHAINDEX_UNDERFLOW = 1
U_ALPHAINDEX_INFLOW = 2
U_ALPHAINDEX_OVERFLOW = 3
def _define_UBiDi_head():
    class UBiDi(Structure):
        pass
    return UBiDi
def _define_UBiDi():
    UBiDi = win32more.Globalization.UBiDi_head
    return UBiDi
def _define_UBiDiClassCallback():
    return CFUNCTYPE(win32more.Globalization.UCharDirection,c_void_p,Int32)
UBiDiDirection = Int32
UBIDI_LTR = 0
UBIDI_RTL = 1
UBIDI_MIXED = 2
UBIDI_NEUTRAL = 3
UBiDiMirroring = Int32
UBIDI_MIRRORING_OFF = 0
UBIDI_MIRRORING_ON = 1
UBiDiOrder = Int32
UBIDI_LOGICAL = 0
UBIDI_VISUAL = 1
UBidiPairedBracketType = Int32
U_BPT_NONE = 0
U_BPT_OPEN = 1
U_BPT_CLOSE = 2
UBiDiReorderingMode = Int32
UBIDI_REORDER_DEFAULT = 0
UBIDI_REORDER_NUMBERS_SPECIAL = 1
UBIDI_REORDER_GROUP_NUMBERS_WITH_R = 2
UBIDI_REORDER_RUNS_ONLY = 3
UBIDI_REORDER_INVERSE_NUMBERS_AS_L = 4
UBIDI_REORDER_INVERSE_LIKE_DIRECT = 5
UBIDI_REORDER_INVERSE_FOR_NUMBERS_SPECIAL = 6
UBiDiReorderingOption = Int32
UBIDI_OPTION_DEFAULT = 0
UBIDI_OPTION_INSERT_MARKS = 1
UBIDI_OPTION_REMOVE_CONTROLS = 2
UBIDI_OPTION_STREAMING = 4
def _define_UBiDiTransform_head():
    class UBiDiTransform(Structure):
        pass
    return UBiDiTransform
def _define_UBiDiTransform():
    UBiDiTransform = win32more.Globalization.UBiDiTransform_head
    return UBiDiTransform
UBlockCode = Int32
UBLOCK_NO_BLOCK = 0
UBLOCK_BASIC_LATIN = 1
UBLOCK_LATIN_1_SUPPLEMENT = 2
UBLOCK_LATIN_EXTENDED_A = 3
UBLOCK_LATIN_EXTENDED_B = 4
UBLOCK_IPA_EXTENSIONS = 5
UBLOCK_SPACING_MODIFIER_LETTERS = 6
UBLOCK_COMBINING_DIACRITICAL_MARKS = 7
UBLOCK_GREEK = 8
UBLOCK_CYRILLIC = 9
UBLOCK_ARMENIAN = 10
UBLOCK_HEBREW = 11
UBLOCK_ARABIC = 12
UBLOCK_SYRIAC = 13
UBLOCK_THAANA = 14
UBLOCK_DEVANAGARI = 15
UBLOCK_BENGALI = 16
UBLOCK_GURMUKHI = 17
UBLOCK_GUJARATI = 18
UBLOCK_ORIYA = 19
UBLOCK_TAMIL = 20
UBLOCK_TELUGU = 21
UBLOCK_KANNADA = 22
UBLOCK_MALAYALAM = 23
UBLOCK_SINHALA = 24
UBLOCK_THAI = 25
UBLOCK_LAO = 26
UBLOCK_TIBETAN = 27
UBLOCK_MYANMAR = 28
UBLOCK_GEORGIAN = 29
UBLOCK_HANGUL_JAMO = 30
UBLOCK_ETHIOPIC = 31
UBLOCK_CHEROKEE = 32
UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS = 33
UBLOCK_OGHAM = 34
UBLOCK_RUNIC = 35
UBLOCK_KHMER = 36
UBLOCK_MONGOLIAN = 37
UBLOCK_LATIN_EXTENDED_ADDITIONAL = 38
UBLOCK_GREEK_EXTENDED = 39
UBLOCK_GENERAL_PUNCTUATION = 40
UBLOCK_SUPERSCRIPTS_AND_SUBSCRIPTS = 41
UBLOCK_CURRENCY_SYMBOLS = 42
UBLOCK_COMBINING_MARKS_FOR_SYMBOLS = 43
UBLOCK_LETTERLIKE_SYMBOLS = 44
UBLOCK_NUMBER_FORMS = 45
UBLOCK_ARROWS = 46
UBLOCK_MATHEMATICAL_OPERATORS = 47
UBLOCK_MISCELLANEOUS_TECHNICAL = 48
UBLOCK_CONTROL_PICTURES = 49
UBLOCK_OPTICAL_CHARACTER_RECOGNITION = 50
UBLOCK_ENCLOSED_ALPHANUMERICS = 51
UBLOCK_BOX_DRAWING = 52
UBLOCK_BLOCK_ELEMENTS = 53
UBLOCK_GEOMETRIC_SHAPES = 54
UBLOCK_MISCELLANEOUS_SYMBOLS = 55
UBLOCK_DINGBATS = 56
UBLOCK_BRAILLE_PATTERNS = 57
UBLOCK_CJK_RADICALS_SUPPLEMENT = 58
UBLOCK_KANGXI_RADICALS = 59
UBLOCK_IDEOGRAPHIC_DESCRIPTION_CHARACTERS = 60
UBLOCK_CJK_SYMBOLS_AND_PUNCTUATION = 61
UBLOCK_HIRAGANA = 62
UBLOCK_KATAKANA = 63
UBLOCK_BOPOMOFO = 64
UBLOCK_HANGUL_COMPATIBILITY_JAMO = 65
UBLOCK_KANBUN = 66
UBLOCK_BOPOMOFO_EXTENDED = 67
UBLOCK_ENCLOSED_CJK_LETTERS_AND_MONTHS = 68
UBLOCK_CJK_COMPATIBILITY = 69
UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A = 70
UBLOCK_CJK_UNIFIED_IDEOGRAPHS = 71
UBLOCK_YI_SYLLABLES = 72
UBLOCK_YI_RADICALS = 73
UBLOCK_HANGUL_SYLLABLES = 74
UBLOCK_HIGH_SURROGATES = 75
UBLOCK_HIGH_PRIVATE_USE_SURROGATES = 76
UBLOCK_LOW_SURROGATES = 77
UBLOCK_PRIVATE_USE_AREA = 78
UBLOCK_PRIVATE_USE = 78
UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS = 79
UBLOCK_ALPHABETIC_PRESENTATION_FORMS = 80
UBLOCK_ARABIC_PRESENTATION_FORMS_A = 81
UBLOCK_COMBINING_HALF_MARKS = 82
UBLOCK_CJK_COMPATIBILITY_FORMS = 83
UBLOCK_SMALL_FORM_VARIANTS = 84
UBLOCK_ARABIC_PRESENTATION_FORMS_B = 85
UBLOCK_SPECIALS = 86
UBLOCK_HALFWIDTH_AND_FULLWIDTH_FORMS = 87
UBLOCK_OLD_ITALIC = 88
UBLOCK_GOTHIC = 89
UBLOCK_DESERET = 90
UBLOCK_BYZANTINE_MUSICAL_SYMBOLS = 91
UBLOCK_MUSICAL_SYMBOLS = 92
UBLOCK_MATHEMATICAL_ALPHANUMERIC_SYMBOLS = 93
UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B = 94
UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT = 95
UBLOCK_TAGS = 96
UBLOCK_CYRILLIC_SUPPLEMENT = 97
UBLOCK_CYRILLIC_SUPPLEMENTARY = 97
UBLOCK_TAGALOG = 98
UBLOCK_HANUNOO = 99
UBLOCK_BUHID = 100
UBLOCK_TAGBANWA = 101
UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A = 102
UBLOCK_SUPPLEMENTAL_ARROWS_A = 103
UBLOCK_SUPPLEMENTAL_ARROWS_B = 104
UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B = 105
UBLOCK_SUPPLEMENTAL_MATHEMATICAL_OPERATORS = 106
UBLOCK_KATAKANA_PHONETIC_EXTENSIONS = 107
UBLOCK_VARIATION_SELECTORS = 108
UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_A = 109
UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_B = 110
UBLOCK_LIMBU = 111
UBLOCK_TAI_LE = 112
UBLOCK_KHMER_SYMBOLS = 113
UBLOCK_PHONETIC_EXTENSIONS = 114
UBLOCK_MISCELLANEOUS_SYMBOLS_AND_ARROWS = 115
UBLOCK_YIJING_HEXAGRAM_SYMBOLS = 116
UBLOCK_LINEAR_B_SYLLABARY = 117
UBLOCK_LINEAR_B_IDEOGRAMS = 118
UBLOCK_AEGEAN_NUMBERS = 119
UBLOCK_UGARITIC = 120
UBLOCK_SHAVIAN = 121
UBLOCK_OSMANYA = 122
UBLOCK_CYPRIOT_SYLLABARY = 123
UBLOCK_TAI_XUAN_JING_SYMBOLS = 124
UBLOCK_VARIATION_SELECTORS_SUPPLEMENT = 125
UBLOCK_ANCIENT_GREEK_MUSICAL_NOTATION = 126
UBLOCK_ANCIENT_GREEK_NUMBERS = 127
UBLOCK_ARABIC_SUPPLEMENT = 128
UBLOCK_BUGINESE = 129
UBLOCK_CJK_STROKES = 130
UBLOCK_COMBINING_DIACRITICAL_MARKS_SUPPLEMENT = 131
UBLOCK_COPTIC = 132
UBLOCK_ETHIOPIC_EXTENDED = 133
UBLOCK_ETHIOPIC_SUPPLEMENT = 134
UBLOCK_GEORGIAN_SUPPLEMENT = 135
UBLOCK_GLAGOLITIC = 136
UBLOCK_KHAROSHTHI = 137
UBLOCK_MODIFIER_TONE_LETTERS = 138
UBLOCK_NEW_TAI_LUE = 139
UBLOCK_OLD_PERSIAN = 140
UBLOCK_PHONETIC_EXTENSIONS_SUPPLEMENT = 141
UBLOCK_SUPPLEMENTAL_PUNCTUATION = 142
UBLOCK_SYLOTI_NAGRI = 143
UBLOCK_TIFINAGH = 144
UBLOCK_VERTICAL_FORMS = 145
UBLOCK_NKO = 146
UBLOCK_BALINESE = 147
UBLOCK_LATIN_EXTENDED_C = 148
UBLOCK_LATIN_EXTENDED_D = 149
UBLOCK_PHAGS_PA = 150
UBLOCK_PHOENICIAN = 151
UBLOCK_CUNEIFORM = 152
UBLOCK_CUNEIFORM_NUMBERS_AND_PUNCTUATION = 153
UBLOCK_COUNTING_ROD_NUMERALS = 154
UBLOCK_SUNDANESE = 155
UBLOCK_LEPCHA = 156
UBLOCK_OL_CHIKI = 157
UBLOCK_CYRILLIC_EXTENDED_A = 158
UBLOCK_VAI = 159
UBLOCK_CYRILLIC_EXTENDED_B = 160
UBLOCK_SAURASHTRA = 161
UBLOCK_KAYAH_LI = 162
UBLOCK_REJANG = 163
UBLOCK_CHAM = 164
UBLOCK_ANCIENT_SYMBOLS = 165
UBLOCK_PHAISTOS_DISC = 166
UBLOCK_LYCIAN = 167
UBLOCK_CARIAN = 168
UBLOCK_LYDIAN = 169
UBLOCK_MAHJONG_TILES = 170
UBLOCK_DOMINO_TILES = 171
UBLOCK_SAMARITAN = 172
UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED = 173
UBLOCK_TAI_THAM = 174
UBLOCK_VEDIC_EXTENSIONS = 175
UBLOCK_LISU = 176
UBLOCK_BAMUM = 177
UBLOCK_COMMON_INDIC_NUMBER_FORMS = 178
UBLOCK_DEVANAGARI_EXTENDED = 179
UBLOCK_HANGUL_JAMO_EXTENDED_A = 180
UBLOCK_JAVANESE = 181
UBLOCK_MYANMAR_EXTENDED_A = 182
UBLOCK_TAI_VIET = 183
UBLOCK_MEETEI_MAYEK = 184
UBLOCK_HANGUL_JAMO_EXTENDED_B = 185
UBLOCK_IMPERIAL_ARAMAIC = 186
UBLOCK_OLD_SOUTH_ARABIAN = 187
UBLOCK_AVESTAN = 188
UBLOCK_INSCRIPTIONAL_PARTHIAN = 189
UBLOCK_INSCRIPTIONAL_PAHLAVI = 190
UBLOCK_OLD_TURKIC = 191
UBLOCK_RUMI_NUMERAL_SYMBOLS = 192
UBLOCK_KAITHI = 193
UBLOCK_EGYPTIAN_HIEROGLYPHS = 194
UBLOCK_ENCLOSED_ALPHANUMERIC_SUPPLEMENT = 195
UBLOCK_ENCLOSED_IDEOGRAPHIC_SUPPLEMENT = 196
UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C = 197
UBLOCK_MANDAIC = 198
UBLOCK_BATAK = 199
UBLOCK_ETHIOPIC_EXTENDED_A = 200
UBLOCK_BRAHMI = 201
UBLOCK_BAMUM_SUPPLEMENT = 202
UBLOCK_KANA_SUPPLEMENT = 203
UBLOCK_PLAYING_CARDS = 204
UBLOCK_MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS = 205
UBLOCK_EMOTICONS = 206
UBLOCK_TRANSPORT_AND_MAP_SYMBOLS = 207
UBLOCK_ALCHEMICAL_SYMBOLS = 208
UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D = 209
UBLOCK_ARABIC_EXTENDED_A = 210
UBLOCK_ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS = 211
UBLOCK_CHAKMA = 212
UBLOCK_MEETEI_MAYEK_EXTENSIONS = 213
UBLOCK_MEROITIC_CURSIVE = 214
UBLOCK_MEROITIC_HIEROGLYPHS = 215
UBLOCK_MIAO = 216
UBLOCK_SHARADA = 217
UBLOCK_SORA_SOMPENG = 218
UBLOCK_SUNDANESE_SUPPLEMENT = 219
UBLOCK_TAKRI = 220
UBLOCK_BASSA_VAH = 221
UBLOCK_CAUCASIAN_ALBANIAN = 222
UBLOCK_COPTIC_EPACT_NUMBERS = 223
UBLOCK_COMBINING_DIACRITICAL_MARKS_EXTENDED = 224
UBLOCK_DUPLOYAN = 225
UBLOCK_ELBASAN = 226
UBLOCK_GEOMETRIC_SHAPES_EXTENDED = 227
UBLOCK_GRANTHA = 228
UBLOCK_KHOJKI = 229
UBLOCK_KHUDAWADI = 230
UBLOCK_LATIN_EXTENDED_E = 231
UBLOCK_LINEAR_A = 232
UBLOCK_MAHAJANI = 233
UBLOCK_MANICHAEAN = 234
UBLOCK_MENDE_KIKAKUI = 235
UBLOCK_MODI = 236
UBLOCK_MRO = 237
UBLOCK_MYANMAR_EXTENDED_B = 238
UBLOCK_NABATAEAN = 239
UBLOCK_OLD_NORTH_ARABIAN = 240
UBLOCK_OLD_PERMIC = 241
UBLOCK_ORNAMENTAL_DINGBATS = 242
UBLOCK_PAHAWH_HMONG = 243
UBLOCK_PALMYRENE = 244
UBLOCK_PAU_CIN_HAU = 245
UBLOCK_PSALTER_PAHLAVI = 246
UBLOCK_SHORTHAND_FORMAT_CONTROLS = 247
UBLOCK_SIDDHAM = 248
UBLOCK_SINHALA_ARCHAIC_NUMBERS = 249
UBLOCK_SUPPLEMENTAL_ARROWS_C = 250
UBLOCK_TIRHUTA = 251
UBLOCK_WARANG_CITI = 252
UBLOCK_AHOM = 253
UBLOCK_ANATOLIAN_HIEROGLYPHS = 254
UBLOCK_CHEROKEE_SUPPLEMENT = 255
UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_E = 256
UBLOCK_EARLY_DYNASTIC_CUNEIFORM = 257
UBLOCK_HATRAN = 258
UBLOCK_MULTANI = 259
UBLOCK_OLD_HUNGARIAN = 260
UBLOCK_SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHS = 261
UBLOCK_SUTTON_SIGNWRITING = 262
UBLOCK_ADLAM = 263
UBLOCK_BHAIKSUKI = 264
UBLOCK_CYRILLIC_EXTENDED_C = 265
UBLOCK_GLAGOLITIC_SUPPLEMENT = 266
UBLOCK_IDEOGRAPHIC_SYMBOLS_AND_PUNCTUATION = 267
UBLOCK_MARCHEN = 268
UBLOCK_MONGOLIAN_SUPPLEMENT = 269
UBLOCK_NEWA = 270
UBLOCK_OSAGE = 271
UBLOCK_TANGUT = 272
UBLOCK_TANGUT_COMPONENTS = 273
UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_F = 274
UBLOCK_KANA_EXTENDED_A = 275
UBLOCK_MASARAM_GONDI = 276
UBLOCK_NUSHU = 277
UBLOCK_SOYOMBO = 278
UBLOCK_SYRIAC_SUPPLEMENT = 279
UBLOCK_ZANABAZAR_SQUARE = 280
UBLOCK_CHESS_SYMBOLS = 281
UBLOCK_DOGRA = 282
UBLOCK_GEORGIAN_EXTENDED = 283
UBLOCK_GUNJALA_GONDI = 284
UBLOCK_HANIFI_ROHINGYA = 285
UBLOCK_INDIC_SIYAQ_NUMBERS = 286
UBLOCK_MAKASAR = 287
UBLOCK_MAYAN_NUMERALS = 288
UBLOCK_MEDEFAIDRIN = 289
UBLOCK_OLD_SOGDIAN = 290
UBLOCK_SOGDIAN = 291
UBLOCK_EGYPTIAN_HIEROGLYPH_FORMAT_CONTROLS = 292
UBLOCK_ELYMAIC = 293
UBLOCK_NANDINAGARI = 294
UBLOCK_NYIAKENG_PUACHUE_HMONG = 295
UBLOCK_OTTOMAN_SIYAQ_NUMBERS = 296
UBLOCK_SMALL_KANA_EXTENSION = 297
UBLOCK_SYMBOLS_AND_PICTOGRAPHS_EXTENDED_A = 298
UBLOCK_TAMIL_SUPPLEMENT = 299
UBLOCK_WANCHO = 300
UBLOCK_CHORASMIAN = 301
UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_G = 302
UBLOCK_DIVES_AKURU = 303
UBLOCK_KHITAN_SMALL_SCRIPT = 304
UBLOCK_LISU_SUPPLEMENT = 305
UBLOCK_SYMBOLS_FOR_LEGACY_COMPUTING = 306
UBLOCK_TANGUT_SUPPLEMENT = 307
UBLOCK_YEZIDI = 308
UBLOCK_INVALID_CODE = -1
def _define_UBreakIterator_head():
    class UBreakIterator(Structure):
        pass
    return UBreakIterator
def _define_UBreakIterator():
    UBreakIterator = win32more.Globalization.UBreakIterator_head
    return UBreakIterator
UBreakIteratorType = Int32
UBRK_CHARACTER = 0
UBRK_WORD = 1
UBRK_LINE = 2
UBRK_SENTENCE = 3
UCalendarAMPMs = Int32
UCAL_AM = 0
UCAL_PM = 1
UCalendarAttribute = Int32
UCAL_LENIENT = 0
UCAL_FIRST_DAY_OF_WEEK = 1
UCAL_MINIMAL_DAYS_IN_FIRST_WEEK = 2
UCAL_REPEATED_WALL_TIME = 3
UCAL_SKIPPED_WALL_TIME = 4
UCalendarDateFields = Int32
UCAL_ERA = 0
UCAL_YEAR = 1
UCAL_MONTH = 2
UCAL_WEEK_OF_YEAR = 3
UCAL_WEEK_OF_MONTH = 4
UCAL_DATE = 5
UCAL_DAY_OF_YEAR = 6
UCAL_DAY_OF_WEEK = 7
UCAL_DAY_OF_WEEK_IN_MONTH = 8
UCAL_AM_PM = 9
UCAL_HOUR = 10
UCAL_HOUR_OF_DAY = 11
UCAL_MINUTE = 12
UCAL_SECOND = 13
UCAL_MILLISECOND = 14
UCAL_ZONE_OFFSET = 15
UCAL_DST_OFFSET = 16
UCAL_YEAR_WOY = 17
UCAL_DOW_LOCAL = 18
UCAL_EXTENDED_YEAR = 19
UCAL_JULIAN_DAY = 20
UCAL_MILLISECONDS_IN_DAY = 21
UCAL_IS_LEAP_MONTH = 22
UCAL_FIELD_COUNT = 23
UCAL_DAY_OF_MONTH = 5
UCalendarDaysOfWeek = Int32
UCAL_SUNDAY = 1
UCAL_MONDAY = 2
UCAL_TUESDAY = 3
UCAL_WEDNESDAY = 4
UCAL_THURSDAY = 5
UCAL_FRIDAY = 6
UCAL_SATURDAY = 7
UCalendarDisplayNameType = Int32
UCAL_STANDARD = 0
UCAL_SHORT_STANDARD = 1
UCAL_DST = 2
UCAL_SHORT_DST = 3
UCalendarLimitType = Int32
UCAL_MINIMUM = 0
UCAL_MAXIMUM = 1
UCAL_GREATEST_MINIMUM = 2
UCAL_LEAST_MAXIMUM = 3
UCAL_ACTUAL_MINIMUM = 4
UCAL_ACTUAL_MAXIMUM = 5
UCalendarMonths = Int32
UCAL_JANUARY = 0
UCAL_FEBRUARY = 1
UCAL_MARCH = 2
UCAL_APRIL = 3
UCAL_MAY = 4
UCAL_JUNE = 5
UCAL_JULY = 6
UCAL_AUGUST = 7
UCAL_SEPTEMBER = 8
UCAL_OCTOBER = 9
UCAL_NOVEMBER = 10
UCAL_DECEMBER = 11
UCAL_UNDECIMBER = 12
UCalendarType = Int32
UCAL_TRADITIONAL = 0
UCAL_DEFAULT = 0
UCAL_GREGORIAN = 1
UCalendarWallTimeOption = Int32
UCAL_WALLTIME_LAST = 0
UCAL_WALLTIME_FIRST = 1
UCAL_WALLTIME_NEXT_VALID = 2
UCalendarWeekdayType = Int32
UCAL_WEEKDAY = 0
UCAL_WEEKEND = 1
UCAL_WEEKEND_ONSET = 2
UCAL_WEEKEND_CEASE = 3
def _define_UCaseMap_head():
    class UCaseMap(Structure):
        pass
    return UCaseMap
def _define_UCaseMap():
    UCaseMap = win32more.Globalization.UCaseMap_head
    return UCaseMap
UCharCategory = Int32
U_UNASSIGNED = 0
U_GENERAL_OTHER_TYPES = 0
U_UPPERCASE_LETTER = 1
U_LOWERCASE_LETTER = 2
U_TITLECASE_LETTER = 3
U_MODIFIER_LETTER = 4
U_OTHER_LETTER = 5
U_NON_SPACING_MARK = 6
U_ENCLOSING_MARK = 7
U_COMBINING_SPACING_MARK = 8
U_DECIMAL_DIGIT_NUMBER = 9
U_LETTER_NUMBER = 10
U_OTHER_NUMBER = 11
U_SPACE_SEPARATOR = 12
U_LINE_SEPARATOR = 13
U_PARAGRAPH_SEPARATOR = 14
U_CONTROL_CHAR = 15
U_FORMAT_CHAR = 16
U_PRIVATE_USE_CHAR = 17
U_SURROGATE = 18
U_DASH_PUNCTUATION = 19
U_START_PUNCTUATION = 20
U_END_PUNCTUATION = 21
U_CONNECTOR_PUNCTUATION = 22
U_OTHER_PUNCTUATION = 23
U_MATH_SYMBOL = 24
U_CURRENCY_SYMBOL = 25
U_MODIFIER_SYMBOL = 26
U_OTHER_SYMBOL = 27
U_INITIAL_PUNCTUATION = 28
U_FINAL_PUNCTUATION = 29
U_CHAR_CATEGORY_COUNT = 30
UCharDirection = Int32
U_LEFT_TO_RIGHT = 0
U_RIGHT_TO_LEFT = 1
U_EUROPEAN_NUMBER = 2
U_EUROPEAN_NUMBER_SEPARATOR = 3
U_EUROPEAN_NUMBER_TERMINATOR = 4
U_ARABIC_NUMBER = 5
U_COMMON_NUMBER_SEPARATOR = 6
U_BLOCK_SEPARATOR = 7
U_SEGMENT_SEPARATOR = 8
U_WHITE_SPACE_NEUTRAL = 9
U_OTHER_NEUTRAL = 10
U_LEFT_TO_RIGHT_EMBEDDING = 11
U_LEFT_TO_RIGHT_OVERRIDE = 12
U_RIGHT_TO_LEFT_ARABIC = 13
U_RIGHT_TO_LEFT_EMBEDDING = 14
U_RIGHT_TO_LEFT_OVERRIDE = 15
U_POP_DIRECTIONAL_FORMAT = 16
U_DIR_NON_SPACING_MARK = 17
U_BOUNDARY_NEUTRAL = 18
U_FIRST_STRONG_ISOLATE = 19
U_LEFT_TO_RIGHT_ISOLATE = 20
U_RIGHT_TO_LEFT_ISOLATE = 21
U_POP_DIRECTIONAL_ISOLATE = 22
def _define_UCharEnumTypeRange():
    return CFUNCTYPE(SByte,c_void_p,Int32,Int32,win32more.Globalization.UCharCategory)
def _define_UCharIterator_head():
    class UCharIterator(Structure):
        pass
    return UCharIterator
def _define_UCharIterator():
    UCharIterator = win32more.Globalization.UCharIterator_head
    UCharIterator._fields_ = [
        ('context', c_void_p),
        ('length', Int32),
        ('start', Int32),
        ('index', Int32),
        ('limit', Int32),
        ('reservedField', Int32),
        ('getIndex', win32more.Globalization.UCharIteratorGetIndex),
        ('move', win32more.Globalization.UCharIteratorMove),
        ('hasNext', win32more.Globalization.UCharIteratorHasNext),
        ('hasPrevious', win32more.Globalization.UCharIteratorHasPrevious),
        ('current', win32more.Globalization.UCharIteratorCurrent),
        ('next', win32more.Globalization.UCharIteratorNext),
        ('previous', win32more.Globalization.UCharIteratorPrevious),
        ('reservedFn', win32more.Globalization.UCharIteratorReserved),
        ('getState', win32more.Globalization.UCharIteratorGetState),
        ('setState', win32more.Globalization.UCharIteratorSetState),
    ]
    return UCharIterator
def _define_UCharIteratorCurrent():
    return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCharIterator_head))
def _define_UCharIteratorGetIndex():
    return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCharIterator_head),win32more.Globalization.UCharIteratorOrigin)
def _define_UCharIteratorGetState():
    return CFUNCTYPE(UInt32,POINTER(win32more.Globalization.UCharIterator_head))
def _define_UCharIteratorHasNext():
    return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UCharIterator_head))
def _define_UCharIteratorHasPrevious():
    return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UCharIterator_head))
def _define_UCharIteratorMove():
    return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCharIterator_head),Int32,win32more.Globalization.UCharIteratorOrigin)
def _define_UCharIteratorNext():
    return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCharIterator_head))
UCharIteratorOrigin = Int32
UITER_START = 0
UITER_CURRENT = 1
UITER_LIMIT = 2
UITER_ZERO = 3
UITER_LENGTH = 4
def _define_UCharIteratorPrevious():
    return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCharIterator_head))
def _define_UCharIteratorReserved():
    return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCharIterator_head),Int32)
def _define_UCharIteratorSetState():
    return CFUNCTYPE(Void,POINTER(win32more.Globalization.UCharIterator_head),UInt32,POINTER(win32more.Globalization.UErrorCode))
UCharNameChoice = Int32
U_UNICODE_CHAR_NAME = 0
U_EXTENDED_CHAR_NAME = 2
U_CHAR_NAME_ALIAS = 3
def _define_UCharsetDetector_head():
    class UCharsetDetector(Structure):
        pass
    return UCharsetDetector
def _define_UCharsetDetector():
    UCharsetDetector = win32more.Globalization.UCharsetDetector_head
    return UCharsetDetector
def _define_UCharsetMatch_head():
    class UCharsetMatch(Structure):
        pass
    return UCharsetMatch
def _define_UCharsetMatch():
    UCharsetMatch = win32more.Globalization.UCharsetMatch_head
    return UCharsetMatch
UColAttribute = Int32
UCOL_FRENCH_COLLATION = 0
UCOL_ALTERNATE_HANDLING = 1
UCOL_CASE_FIRST = 2
UCOL_CASE_LEVEL = 3
UCOL_NORMALIZATION_MODE = 4
UCOL_DECOMPOSITION_MODE = 4
UCOL_STRENGTH = 5
UCOL_NUMERIC_COLLATION = 7
UCOL_ATTRIBUTE_COUNT = 8
UColAttributeValue = Int32
UCOL_DEFAULT = -1
UCOL_PRIMARY = 0
UCOL_SECONDARY = 1
UCOL_TERTIARY = 2
UCOL_DEFAULT_STRENGTH = 2
UCOL_CE_STRENGTH_LIMIT = 3
UCOL_QUATERNARY = 3
UCOL_IDENTICAL = 15
UCOL_STRENGTH_LIMIT = 16
UCOL_OFF = 16
UCOL_ON = 17
UCOL_SHIFTED = 20
UCOL_NON_IGNORABLE = 21
UCOL_LOWER_FIRST = 24
UCOL_UPPER_FIRST = 25
UColBoundMode = Int32
UCOL_BOUND_LOWER = 0
UCOL_BOUND_UPPER = 1
UCOL_BOUND_UPPER_LONG = 2
def _define_UCollationElements_head():
    class UCollationElements(Structure):
        pass
    return UCollationElements
def _define_UCollationElements():
    UCollationElements = win32more.Globalization.UCollationElements_head
    return UCollationElements
UCollationResult = Int32
UCOL_EQUAL = 0
UCOL_GREATER = 1
UCOL_LESS = -1
def _define_UCollator_head():
    class UCollator(Structure):
        pass
    return UCollator
def _define_UCollator():
    UCollator = win32more.Globalization.UCollator_head
    return UCollator
UColReorderCode = Int32
UCOL_REORDER_CODE_DEFAULT = -1
UCOL_REORDER_CODE_NONE = 103
UCOL_REORDER_CODE_OTHERS = 103
UCOL_REORDER_CODE_SPACE = 4096
UCOL_REORDER_CODE_FIRST = 4096
UCOL_REORDER_CODE_PUNCTUATION = 4097
UCOL_REORDER_CODE_SYMBOL = 4098
UCOL_REORDER_CODE_CURRENCY = 4099
UCOL_REORDER_CODE_DIGIT = 4100
UColRuleOption = Int32
UCOL_TAILORING_ONLY = 0
UCOL_FULL_RULES = 1
def _define_UConstrainedFieldPosition_head():
    class UConstrainedFieldPosition(Structure):
        pass
    return UConstrainedFieldPosition
def _define_UConstrainedFieldPosition():
    UConstrainedFieldPosition = win32more.Globalization.UConstrainedFieldPosition_head
    return UConstrainedFieldPosition
def _define_UConverter_head():
    class UConverter(Structure):
        pass
    return UConverter
def _define_UConverter():
    UConverter = win32more.Globalization.UConverter_head
    return UConverter
UConverterCallbackReason = Int32
UCNV_UNASSIGNED = 0
UCNV_ILLEGAL = 1
UCNV_IRREGULAR = 2
UCNV_RESET = 3
UCNV_CLOSE = 4
UCNV_CLONE = 5
def _define_UConverterFromUCallback():
    return CFUNCTYPE(Void,c_void_p,POINTER(win32more.Globalization.UConverterFromUnicodeArgs_head),POINTER(UInt16),Int32,Int32,win32more.Globalization.UConverterCallbackReason,POINTER(win32more.Globalization.UErrorCode))
def _define_UConverterFromUnicodeArgs_head():
    class UConverterFromUnicodeArgs(Structure):
        pass
    return UConverterFromUnicodeArgs
def _define_UConverterFromUnicodeArgs():
    UConverterFromUnicodeArgs = win32more.Globalization.UConverterFromUnicodeArgs_head
    UConverterFromUnicodeArgs._fields_ = [
        ('size', UInt16),
        ('flush', SByte),
        ('converter', POINTER(win32more.Globalization.UConverter_head)),
        ('source', POINTER(UInt16)),
        ('sourceLimit', POINTER(UInt16)),
        ('target', win32more.Foundation.PSTR),
        ('targetLimit', win32more.Foundation.PSTR),
        ('offsets', POINTER(Int32)),
    ]
    return UConverterFromUnicodeArgs
UConverterPlatform = Int32
UCNV_UNKNOWN = -1
UCNV_IBM = 0
def _define_UConverterSelector_head():
    class UConverterSelector(Structure):
        pass
    return UConverterSelector
def _define_UConverterSelector():
    UConverterSelector = win32more.Globalization.UConverterSelector_head
    return UConverterSelector
def _define_UConverterToUCallback():
    return CFUNCTYPE(Void,c_void_p,POINTER(win32more.Globalization.UConverterToUnicodeArgs_head),win32more.Foundation.PSTR,Int32,win32more.Globalization.UConverterCallbackReason,POINTER(win32more.Globalization.UErrorCode))
def _define_UConverterToUnicodeArgs_head():
    class UConverterToUnicodeArgs(Structure):
        pass
    return UConverterToUnicodeArgs
def _define_UConverterToUnicodeArgs():
    UConverterToUnicodeArgs = win32more.Globalization.UConverterToUnicodeArgs_head
    UConverterToUnicodeArgs._fields_ = [
        ('size', UInt16),
        ('flush', SByte),
        ('converter', POINTER(win32more.Globalization.UConverter_head)),
        ('source', win32more.Foundation.PSTR),
        ('sourceLimit', win32more.Foundation.PSTR),
        ('target', POINTER(UInt16)),
        ('targetLimit', POINTER(UInt16)),
        ('offsets', POINTER(Int32)),
    ]
    return UConverterToUnicodeArgs
UConverterType = Int32
UCNV_UNSUPPORTED_CONVERTER = -1
UCNV_SBCS = 0
UCNV_DBCS = 1
UCNV_MBCS = 2
UCNV_LATIN_1 = 3
UCNV_UTF8 = 4
UCNV_UTF16_BigEndian = 5
UCNV_UTF16_LittleEndian = 6
UCNV_UTF32_BigEndian = 7
UCNV_UTF32_LittleEndian = 8
UCNV_EBCDIC_STATEFUL = 9
UCNV_ISO_2022 = 10
UCNV_LMBCS_1 = 11
UCNV_LMBCS_2 = 12
UCNV_LMBCS_3 = 13
UCNV_LMBCS_4 = 14
UCNV_LMBCS_5 = 15
UCNV_LMBCS_6 = 16
UCNV_LMBCS_8 = 17
UCNV_LMBCS_11 = 18
UCNV_LMBCS_16 = 19
UCNV_LMBCS_17 = 20
UCNV_LMBCS_18 = 21
UCNV_LMBCS_19 = 22
UCNV_LMBCS_LAST = 22
UCNV_HZ = 23
UCNV_SCSU = 24
UCNV_ISCII = 25
UCNV_US_ASCII = 26
UCNV_UTF7 = 27
UCNV_BOCU1 = 28
UCNV_UTF16 = 29
UCNV_UTF32 = 30
UCNV_CESU8 = 31
UCNV_IMAP_MAILBOX = 32
UCNV_COMPOUND_TEXT = 33
UCNV_NUMBER_OF_SUPPORTED_CONVERTER_TYPES = 34
UConverterUnicodeSet = Int32
UCNV_ROUNDTRIP_SET = 0
UCNV_ROUNDTRIP_AND_FALLBACK_SET = 1
def _define_UCPMap_head():
    class UCPMap(Structure):
        pass
    return UCPMap
def _define_UCPMap():
    UCPMap = win32more.Globalization.UCPMap_head
    return UCPMap
UCPMapRangeOption = Int32
UCPMAP_RANGE_NORMAL = 0
UCPMAP_RANGE_FIXED_LEAD_SURROGATES = 1
UCPMAP_RANGE_FIXED_ALL_SURROGATES = 2
def _define_UCPMapValueFilter():
    return CFUNCTYPE(UInt32,c_void_p,UInt32)
def _define_UCPTrie_head():
    class UCPTrie(Structure):
        pass
    return UCPTrie
def _define_UCPTrie():
    UCPTrie = win32more.Globalization.UCPTrie_head
    UCPTrie._fields_ = [
        ('index', POINTER(UInt16)),
        ('data', win32more.Globalization.UCPTrieData),
        ('indexLength', Int32),
        ('dataLength', Int32),
        ('highStart', Int32),
        ('shifted12HighStart', UInt16),
        ('type', SByte),
        ('valueWidth', SByte),
        ('reserved32', UInt32),
        ('reserved16', UInt16),
        ('index3NullOffset', UInt16),
        ('dataNullOffset', Int32),
        ('nullValue', UInt32),
    ]
    return UCPTrie
def _define_UCPTrieData_head():
    class UCPTrieData(Union):
        pass
    return UCPTrieData
def _define_UCPTrieData():
    UCPTrieData = win32more.Globalization.UCPTrieData_head
    UCPTrieData._fields_ = [
        ('ptr0', c_void_p),
        ('ptr16', POINTER(UInt16)),
        ('ptr32', POINTER(UInt32)),
        ('ptr8', c_char_p_no),
    ]
    return UCPTrieData
UCPTrieType = Int32
UCPTRIE_TYPE_ANY = -1
UCPTRIE_TYPE_FAST = 0
UCPTRIE_TYPE_SMALL = 1
UCPTrieValueWidth = Int32
UCPTRIE_VALUE_BITS_ANY = -1
UCPTRIE_VALUE_BITS_16 = 0
UCPTRIE_VALUE_BITS_32 = 1
UCPTRIE_VALUE_BITS_8 = 2
UCurrCurrencyType = Int32
UCURR_ALL = 2147483647
UCURR_COMMON = 1
UCURR_UNCOMMON = 2
UCURR_DEPRECATED = 4
UCURR_NON_DEPRECATED = 8
UCurrencySpacing = Int32
UNUM_CURRENCY_MATCH = 0
UNUM_CURRENCY_SURROUNDING_MATCH = 1
UNUM_CURRENCY_INSERT = 2
UNUM_CURRENCY_SPACING_COUNT = 3
UCurrencyUsage = Int32
UCURR_USAGE_STANDARD = 0
UCURR_USAGE_CASH = 1
UCurrNameStyle = Int32
UCURR_SYMBOL_NAME = 0
UCURR_LONG_NAME = 1
UCURR_NARROW_SYMBOL_NAME = 2
UDateAbsoluteUnit = Int32
UDAT_ABSOLUTE_SUNDAY = 0
UDAT_ABSOLUTE_MONDAY = 1
UDAT_ABSOLUTE_TUESDAY = 2
UDAT_ABSOLUTE_WEDNESDAY = 3
UDAT_ABSOLUTE_THURSDAY = 4
UDAT_ABSOLUTE_FRIDAY = 5
UDAT_ABSOLUTE_SATURDAY = 6
UDAT_ABSOLUTE_DAY = 7
UDAT_ABSOLUTE_WEEK = 8
UDAT_ABSOLUTE_MONTH = 9
UDAT_ABSOLUTE_YEAR = 10
UDAT_ABSOLUTE_NOW = 11
UDAT_ABSOLUTE_UNIT_COUNT = 12
UDateDirection = Int32
UDAT_DIRECTION_LAST_2 = 0
UDAT_DIRECTION_LAST = 1
UDAT_DIRECTION_THIS = 2
UDAT_DIRECTION_NEXT = 3
UDAT_DIRECTION_NEXT_2 = 4
UDAT_DIRECTION_PLAIN = 5
UDAT_DIRECTION_COUNT = 6
UDateFormatBooleanAttribute = Int32
UDAT_PARSE_ALLOW_WHITESPACE = 0
UDAT_PARSE_ALLOW_NUMERIC = 1
UDAT_PARSE_PARTIAL_LITERAL_MATCH = 2
UDAT_PARSE_MULTIPLE_PATTERNS_FOR_MATCH = 3
UDAT_BOOLEAN_ATTRIBUTE_COUNT = 4
UDateFormatField = Int32
UDAT_ERA_FIELD = 0
UDAT_YEAR_FIELD = 1
UDAT_MONTH_FIELD = 2
UDAT_DATE_FIELD = 3
UDAT_HOUR_OF_DAY1_FIELD = 4
UDAT_HOUR_OF_DAY0_FIELD = 5
UDAT_MINUTE_FIELD = 6
UDAT_SECOND_FIELD = 7
UDAT_FRACTIONAL_SECOND_FIELD = 8
UDAT_DAY_OF_WEEK_FIELD = 9
UDAT_DAY_OF_YEAR_FIELD = 10
UDAT_DAY_OF_WEEK_IN_MONTH_FIELD = 11
UDAT_WEEK_OF_YEAR_FIELD = 12
UDAT_WEEK_OF_MONTH_FIELD = 13
UDAT_AM_PM_FIELD = 14
UDAT_HOUR1_FIELD = 15
UDAT_HOUR0_FIELD = 16
UDAT_TIMEZONE_FIELD = 17
UDAT_YEAR_WOY_FIELD = 18
UDAT_DOW_LOCAL_FIELD = 19
UDAT_EXTENDED_YEAR_FIELD = 20
UDAT_JULIAN_DAY_FIELD = 21
UDAT_MILLISECONDS_IN_DAY_FIELD = 22
UDAT_TIMEZONE_RFC_FIELD = 23
UDAT_TIMEZONE_GENERIC_FIELD = 24
UDAT_STANDALONE_DAY_FIELD = 25
UDAT_STANDALONE_MONTH_FIELD = 26
UDAT_QUARTER_FIELD = 27
UDAT_STANDALONE_QUARTER_FIELD = 28
UDAT_TIMEZONE_SPECIAL_FIELD = 29
UDAT_YEAR_NAME_FIELD = 30
UDAT_TIMEZONE_LOCALIZED_GMT_OFFSET_FIELD = 31
UDAT_TIMEZONE_ISO_FIELD = 32
UDAT_TIMEZONE_ISO_LOCAL_FIELD = 33
UDAT_AM_PM_MIDNIGHT_NOON_FIELD = 35
UDAT_FLEXIBLE_DAY_PERIOD_FIELD = 36
UDateFormatStyle = Int32
UDAT_FULL = 0
UDAT_LONG = 1
UDAT_MEDIUM = 2
UDAT_SHORT = 3
UDAT_DEFAULT = 2
UDAT_RELATIVE = 128
UDAT_FULL_RELATIVE = 128
UDAT_LONG_RELATIVE = 129
UDAT_MEDIUM_RELATIVE = 130
UDAT_SHORT_RELATIVE = 131
UDAT_NONE = -1
UDAT_PATTERN = -2
def _define_UDateFormatSymbols_head():
    class UDateFormatSymbols(Structure):
        pass
    return UDateFormatSymbols
def _define_UDateFormatSymbols():
    UDateFormatSymbols = win32more.Globalization.UDateFormatSymbols_head
    return UDateFormatSymbols
UDateFormatSymbolType = Int32
UDAT_ERAS = 0
UDAT_MONTHS = 1
UDAT_SHORT_MONTHS = 2
UDAT_WEEKDAYS = 3
UDAT_SHORT_WEEKDAYS = 4
UDAT_AM_PMS = 5
UDAT_LOCALIZED_CHARS = 6
UDAT_ERA_NAMES = 7
UDAT_NARROW_MONTHS = 8
UDAT_NARROW_WEEKDAYS = 9
UDAT_STANDALONE_MONTHS = 10
UDAT_STANDALONE_SHORT_MONTHS = 11
UDAT_STANDALONE_NARROW_MONTHS = 12
UDAT_STANDALONE_WEEKDAYS = 13
UDAT_STANDALONE_SHORT_WEEKDAYS = 14
UDAT_STANDALONE_NARROW_WEEKDAYS = 15
UDAT_QUARTERS = 16
UDAT_SHORT_QUARTERS = 17
UDAT_STANDALONE_QUARTERS = 18
UDAT_STANDALONE_SHORT_QUARTERS = 19
UDAT_SHORTER_WEEKDAYS = 20
UDAT_STANDALONE_SHORTER_WEEKDAYS = 21
UDAT_CYCLIC_YEARS_WIDE = 22
UDAT_CYCLIC_YEARS_ABBREVIATED = 23
UDAT_CYCLIC_YEARS_NARROW = 24
UDAT_ZODIAC_NAMES_WIDE = 25
UDAT_ZODIAC_NAMES_ABBREVIATED = 26
UDAT_ZODIAC_NAMES_NARROW = 27
def _define_UDateIntervalFormat_head():
    class UDateIntervalFormat(Structure):
        pass
    return UDateIntervalFormat
def _define_UDateIntervalFormat():
    UDateIntervalFormat = win32more.Globalization.UDateIntervalFormat_head
    return UDateIntervalFormat
UDateRelativeDateTimeFormatterStyle = Int32
UDAT_STYLE_LONG = 0
UDAT_STYLE_SHORT = 1
UDAT_STYLE_NARROW = 2
UDateRelativeUnit = Int32
UDAT_RELATIVE_SECONDS = 0
UDAT_RELATIVE_MINUTES = 1
UDAT_RELATIVE_HOURS = 2
UDAT_RELATIVE_DAYS = 3
UDAT_RELATIVE_WEEKS = 4
UDAT_RELATIVE_MONTHS = 5
UDAT_RELATIVE_YEARS = 6
UDAT_RELATIVE_UNIT_COUNT = 7
UDateTimePatternConflict = Int32
UDATPG_NO_CONFLICT = 0
UDATPG_BASE_CONFLICT = 1
UDATPG_CONFLICT = 2
UDateTimePatternField = Int32
UDATPG_ERA_FIELD = 0
UDATPG_YEAR_FIELD = 1
UDATPG_QUARTER_FIELD = 2
UDATPG_MONTH_FIELD = 3
UDATPG_WEEK_OF_YEAR_FIELD = 4
UDATPG_WEEK_OF_MONTH_FIELD = 5
UDATPG_WEEKDAY_FIELD = 6
UDATPG_DAY_OF_YEAR_FIELD = 7
UDATPG_DAY_OF_WEEK_IN_MONTH_FIELD = 8
UDATPG_DAY_FIELD = 9
UDATPG_DAYPERIOD_FIELD = 10
UDATPG_HOUR_FIELD = 11
UDATPG_MINUTE_FIELD = 12
UDATPG_SECOND_FIELD = 13
UDATPG_FRACTIONAL_SECOND_FIELD = 14
UDATPG_ZONE_FIELD = 15
UDATPG_FIELD_COUNT = 16
UDateTimePatternMatchOptions = Int32
UDATPG_MATCH_NO_OPTIONS = 0
UDATPG_MATCH_HOUR_FIELD_LENGTH = 2048
UDATPG_MATCH_ALL_FIELDS_LENGTH = 65535
UDateTimePGDisplayWidth = Int32
UDATPG_WIDE = 0
UDATPG_ABBREVIATED = 1
UDATPG_NARROW = 2
UDateTimeScale = Int32
UDTS_JAVA_TIME = 0
UDTS_UNIX_TIME = 1
UDTS_ICU4C_TIME = 2
UDTS_WINDOWS_FILE_TIME = 3
UDTS_DOTNET_DATE_TIME = 4
UDTS_MAC_OLD_TIME = 5
UDTS_MAC_TIME = 6
UDTS_EXCEL_TIME = 7
UDTS_DB2_TIME = 8
UDTS_UNIX_MICROSECONDS_TIME = 9
UDecompositionType = Int32
U_DT_NONE = 0
U_DT_CANONICAL = 1
U_DT_COMPAT = 2
U_DT_CIRCLE = 3
U_DT_FINAL = 4
U_DT_FONT = 5
U_DT_FRACTION = 6
U_DT_INITIAL = 7
U_DT_ISOLATED = 8
U_DT_MEDIAL = 9
U_DT_NARROW = 10
U_DT_NOBREAK = 11
U_DT_SMALL = 12
U_DT_SQUARE = 13
U_DT_SUB = 14
U_DT_SUPER = 15
U_DT_VERTICAL = 16
U_DT_WIDE = 17
UDialectHandling = Int32
ULDN_STANDARD_NAMES = 0
ULDN_DIALECT_NAMES = 1
UDisplayContext = Int32
UDISPCTX_STANDARD_NAMES = 0
UDISPCTX_DIALECT_NAMES = 1
UDISPCTX_CAPITALIZATION_NONE = 256
UDISPCTX_CAPITALIZATION_FOR_MIDDLE_OF_SENTENCE = 257
UDISPCTX_CAPITALIZATION_FOR_BEGINNING_OF_SENTENCE = 258
UDISPCTX_CAPITALIZATION_FOR_UI_LIST_OR_MENU = 259
UDISPCTX_CAPITALIZATION_FOR_STANDALONE = 260
UDISPCTX_LENGTH_FULL = 512
UDISPCTX_LENGTH_SHORT = 513
UDISPCTX_SUBSTITUTE = 768
UDISPCTX_NO_SUBSTITUTE = 769
UDisplayContextType = Int32
UDISPCTX_TYPE_DIALECT_HANDLING = 0
UDISPCTX_TYPE_CAPITALIZATION = 1
UDISPCTX_TYPE_DISPLAY_LENGTH = 2
UDISPCTX_TYPE_SUBSTITUTE_HANDLING = 3
UEastAsianWidth = Int32
U_EA_NEUTRAL = 0
U_EA_AMBIGUOUS = 1
U_EA_HALFWIDTH = 2
U_EA_FULLWIDTH = 3
U_EA_NARROW = 4
U_EA_WIDE = 5
def _define_UEnumCharNamesFn():
    return CFUNCTYPE(SByte,c_void_p,Int32,win32more.Globalization.UCharNameChoice,win32more.Foundation.PSTR,Int32)
def _define_UEnumeration_head():
    class UEnumeration(Structure):
        pass
    return UEnumeration
def _define_UEnumeration():
    UEnumeration = win32more.Globalization.UEnumeration_head
    return UEnumeration
UErrorCode = Int32
U_USING_FALLBACK_WARNING = -128
U_ERROR_WARNING_START = -128
U_USING_DEFAULT_WARNING = -127
U_SAFECLONE_ALLOCATED_WARNING = -126
U_STATE_OLD_WARNING = -125
U_STRING_NOT_TERMINATED_WARNING = -124
U_SORT_KEY_TOO_SHORT_WARNING = -123
U_AMBIGUOUS_ALIAS_WARNING = -122
U_DIFFERENT_UCA_VERSION = -121
U_PLUGIN_CHANGED_LEVEL_WARNING = -120
U_ZERO_ERROR = 0
U_ILLEGAL_ARGUMENT_ERROR = 1
U_MISSING_RESOURCE_ERROR = 2
U_INVALID_FORMAT_ERROR = 3
U_FILE_ACCESS_ERROR = 4
U_INTERNAL_PROGRAM_ERROR = 5
U_MESSAGE_PARSE_ERROR = 6
U_MEMORY_ALLOCATION_ERROR = 7
U_INDEX_OUTOFBOUNDS_ERROR = 8
U_PARSE_ERROR = 9
U_INVALID_CHAR_FOUND = 10
U_TRUNCATED_CHAR_FOUND = 11
U_ILLEGAL_CHAR_FOUND = 12
U_INVALID_TABLE_FORMAT = 13
U_INVALID_TABLE_FILE = 14
U_BUFFER_OVERFLOW_ERROR = 15
U_UNSUPPORTED_ERROR = 16
U_RESOURCE_TYPE_MISMATCH = 17
U_ILLEGAL_ESCAPE_SEQUENCE = 18
U_UNSUPPORTED_ESCAPE_SEQUENCE = 19
U_NO_SPACE_AVAILABLE = 20
U_CE_NOT_FOUND_ERROR = 21
U_PRIMARY_TOO_LONG_ERROR = 22
U_STATE_TOO_OLD_ERROR = 23
U_TOO_MANY_ALIASES_ERROR = 24
U_ENUM_OUT_OF_SYNC_ERROR = 25
U_INVARIANT_CONVERSION_ERROR = 26
U_INVALID_STATE_ERROR = 27
U_COLLATOR_VERSION_MISMATCH = 28
U_USELESS_COLLATOR_ERROR = 29
U_NO_WRITE_PERMISSION = 30
U_BAD_VARIABLE_DEFINITION = 65536
U_PARSE_ERROR_START = 65536
U_MALFORMED_RULE = 65537
U_MALFORMED_SET = 65538
U_MALFORMED_SYMBOL_REFERENCE = 65539
U_MALFORMED_UNICODE_ESCAPE = 65540
U_MALFORMED_VARIABLE_DEFINITION = 65541
U_MALFORMED_VARIABLE_REFERENCE = 65542
U_MISMATCHED_SEGMENT_DELIMITERS = 65543
U_MISPLACED_ANCHOR_START = 65544
U_MISPLACED_CURSOR_OFFSET = 65545
U_MISPLACED_QUANTIFIER = 65546
U_MISSING_OPERATOR = 65547
U_MISSING_SEGMENT_CLOSE = 65548
U_MULTIPLE_ANTE_CONTEXTS = 65549
U_MULTIPLE_CURSORS = 65550
U_MULTIPLE_POST_CONTEXTS = 65551
U_TRAILING_BACKSLASH = 65552
U_UNDEFINED_SEGMENT_REFERENCE = 65553
U_UNDEFINED_VARIABLE = 65554
U_UNQUOTED_SPECIAL = 65555
U_UNTERMINATED_QUOTE = 65556
U_RULE_MASK_ERROR = 65557
U_MISPLACED_COMPOUND_FILTER = 65558
U_MULTIPLE_COMPOUND_FILTERS = 65559
U_INVALID_RBT_SYNTAX = 65560
U_INVALID_PROPERTY_PATTERN = 65561
U_MALFORMED_PRAGMA = 65562
U_UNCLOSED_SEGMENT = 65563
U_ILLEGAL_CHAR_IN_SEGMENT = 65564
U_VARIABLE_RANGE_EXHAUSTED = 65565
U_VARIABLE_RANGE_OVERLAP = 65566
U_ILLEGAL_CHARACTER = 65567
U_INTERNAL_TRANSLITERATOR_ERROR = 65568
U_INVALID_ID = 65569
U_INVALID_FUNCTION = 65570
U_UNEXPECTED_TOKEN = 65792
U_FMT_PARSE_ERROR_START = 65792
U_MULTIPLE_DECIMAL_SEPARATORS = 65793
U_MULTIPLE_DECIMAL_SEPERATORS = 65793
U_MULTIPLE_EXPONENTIAL_SYMBOLS = 65794
U_MALFORMED_EXPONENTIAL_PATTERN = 65795
U_MULTIPLE_PERCENT_SYMBOLS = 65796
U_MULTIPLE_PERMILL_SYMBOLS = 65797
U_MULTIPLE_PAD_SPECIFIERS = 65798
U_PATTERN_SYNTAX_ERROR = 65799
U_ILLEGAL_PAD_POSITION = 65800
U_UNMATCHED_BRACES = 65801
U_UNSUPPORTED_PROPERTY = 65802
U_UNSUPPORTED_ATTRIBUTE = 65803
U_ARGUMENT_TYPE_MISMATCH = 65804
U_DUPLICATE_KEYWORD = 65805
U_UNDEFINED_KEYWORD = 65806
U_DEFAULT_KEYWORD_MISSING = 65807
U_DECIMAL_NUMBER_SYNTAX_ERROR = 65808
U_FORMAT_INEXACT_ERROR = 65809
U_NUMBER_ARG_OUTOFBOUNDS_ERROR = 65810
U_NUMBER_SKELETON_SYNTAX_ERROR = 65811
U_BRK_INTERNAL_ERROR = 66048
U_BRK_ERROR_START = 66048
U_BRK_HEX_DIGITS_EXPECTED = 66049
U_BRK_SEMICOLON_EXPECTED = 66050
U_BRK_RULE_SYNTAX = 66051
U_BRK_UNCLOSED_SET = 66052
U_BRK_ASSIGN_ERROR = 66053
U_BRK_VARIABLE_REDFINITION = 66054
U_BRK_MISMATCHED_PAREN = 66055
U_BRK_NEW_LINE_IN_QUOTED_STRING = 66056
U_BRK_UNDEFINED_VARIABLE = 66057
U_BRK_INIT_ERROR = 66058
U_BRK_RULE_EMPTY_SET = 66059
U_BRK_UNRECOGNIZED_OPTION = 66060
U_BRK_MALFORMED_RULE_TAG = 66061
U_REGEX_INTERNAL_ERROR = 66304
U_REGEX_ERROR_START = 66304
U_REGEX_RULE_SYNTAX = 66305
U_REGEX_INVALID_STATE = 66306
U_REGEX_BAD_ESCAPE_SEQUENCE = 66307
U_REGEX_PROPERTY_SYNTAX = 66308
U_REGEX_UNIMPLEMENTED = 66309
U_REGEX_MISMATCHED_PAREN = 66310
U_REGEX_NUMBER_TOO_BIG = 66311
U_REGEX_BAD_INTERVAL = 66312
U_REGEX_MAX_LT_MIN = 66313
U_REGEX_INVALID_BACK_REF = 66314
U_REGEX_INVALID_FLAG = 66315
U_REGEX_LOOK_BEHIND_LIMIT = 66316
U_REGEX_SET_CONTAINS_STRING = 66317
U_REGEX_MISSING_CLOSE_BRACKET = 66319
U_REGEX_INVALID_RANGE = 66320
U_REGEX_STACK_OVERFLOW = 66321
U_REGEX_TIME_OUT = 66322
U_REGEX_STOPPED_BY_CALLER = 66323
U_REGEX_PATTERN_TOO_BIG = 66324
U_REGEX_INVALID_CAPTURE_GROUP_NAME = 66325
U_IDNA_PROHIBITED_ERROR = 66560
U_IDNA_ERROR_START = 66560
U_IDNA_UNASSIGNED_ERROR = 66561
U_IDNA_CHECK_BIDI_ERROR = 66562
U_IDNA_STD3_ASCII_RULES_ERROR = 66563
U_IDNA_ACE_PREFIX_ERROR = 66564
U_IDNA_VERIFICATION_ERROR = 66565
U_IDNA_LABEL_TOO_LONG_ERROR = 66566
U_IDNA_ZERO_LENGTH_LABEL_ERROR = 66567
U_IDNA_DOMAIN_NAME_TOO_LONG_ERROR = 66568
U_STRINGPREP_PROHIBITED_ERROR = 66560
U_STRINGPREP_UNASSIGNED_ERROR = 66561
U_STRINGPREP_CHECK_BIDI_ERROR = 66562
U_PLUGIN_ERROR_START = 66816
U_PLUGIN_TOO_HIGH = 66816
U_PLUGIN_DIDNT_SET_LEVEL = 66817
UFieldCategory = Int32
UFIELD_CATEGORY_UNDEFINED = 0
UFIELD_CATEGORY_DATE = 1
UFIELD_CATEGORY_NUMBER = 2
UFIELD_CATEGORY_LIST = 3
UFIELD_CATEGORY_RELATIVE_DATETIME = 4
UFIELD_CATEGORY_DATE_INTERVAL = 5
UFIELD_CATEGORY_LIST_SPAN = 4099
UFIELD_CATEGORY_DATE_INTERVAL_SPAN = 4101
def _define_UFieldPosition_head():
    class UFieldPosition(Structure):
        pass
    return UFieldPosition
def _define_UFieldPosition():
    UFieldPosition = win32more.Globalization.UFieldPosition_head
    UFieldPosition._fields_ = [
        ('field', Int32),
        ('beginIndex', Int32),
        ('endIndex', Int32),
    ]
    return UFieldPosition
def _define_UFieldPositionIterator_head():
    class UFieldPositionIterator(Structure):
        pass
    return UFieldPositionIterator
def _define_UFieldPositionIterator():
    UFieldPositionIterator = win32more.Globalization.UFieldPositionIterator_head
    return UFieldPositionIterator
UFormattableType = Int32
UFMT_DATE = 0
UFMT_DOUBLE = 1
UFMT_LONG = 2
UFMT_STRING = 3
UFMT_ARRAY = 4
UFMT_INT64 = 5
UFMT_OBJECT = 6
def _define_UFormattedDateInterval_head():
    class UFormattedDateInterval(Structure):
        pass
    return UFormattedDateInterval
def _define_UFormattedDateInterval():
    UFormattedDateInterval = win32more.Globalization.UFormattedDateInterval_head
    return UFormattedDateInterval
def _define_UFormattedList_head():
    class UFormattedList(Structure):
        pass
    return UFormattedList
def _define_UFormattedList():
    UFormattedList = win32more.Globalization.UFormattedList_head
    return UFormattedList
def _define_UFormattedNumber_head():
    class UFormattedNumber(Structure):
        pass
    return UFormattedNumber
def _define_UFormattedNumber():
    UFormattedNumber = win32more.Globalization.UFormattedNumber_head
    return UFormattedNumber
def _define_UFormattedNumberRange_head():
    class UFormattedNumberRange(Structure):
        pass
    return UFormattedNumberRange
def _define_UFormattedNumberRange():
    UFormattedNumberRange = win32more.Globalization.UFormattedNumberRange_head
    return UFormattedNumberRange
def _define_UFormattedRelativeDateTime_head():
    class UFormattedRelativeDateTime(Structure):
        pass
    return UFormattedRelativeDateTime
def _define_UFormattedRelativeDateTime():
    UFormattedRelativeDateTime = win32more.Globalization.UFormattedRelativeDateTime_head
    return UFormattedRelativeDateTime
def _define_UFormattedValue_head():
    class UFormattedValue(Structure):
        pass
    return UFormattedValue
def _define_UFormattedValue():
    UFormattedValue = win32more.Globalization.UFormattedValue_head
    return UFormattedValue
UGender = Int32
UGENDER_MALE = 0
UGENDER_FEMALE = 1
UGENDER_OTHER = 2
def _define_UGenderInfo_head():
    class UGenderInfo(Structure):
        pass
    return UGenderInfo
def _define_UGenderInfo():
    UGenderInfo = win32more.Globalization.UGenderInfo_head
    return UGenderInfo
UGraphemeClusterBreak = Int32
U_GCB_OTHER = 0
U_GCB_CONTROL = 1
U_GCB_CR = 2
U_GCB_EXTEND = 3
U_GCB_L = 4
U_GCB_LF = 5
U_GCB_LV = 6
U_GCB_LVT = 7
U_GCB_T = 8
U_GCB_V = 9
U_GCB_SPACING_MARK = 10
U_GCB_PREPEND = 11
U_GCB_REGIONAL_INDICATOR = 12
U_GCB_E_BASE = 13
U_GCB_E_BASE_GAZ = 14
U_GCB_E_MODIFIER = 15
U_GCB_GLUE_AFTER_ZWJ = 16
U_GCB_ZWJ = 17
UHangulSyllableType = Int32
U_HST_NOT_APPLICABLE = 0
U_HST_LEADING_JAMO = 1
U_HST_VOWEL_JAMO = 2
U_HST_TRAILING_JAMO = 3
U_HST_LV_SYLLABLE = 4
U_HST_LVT_SYLLABLE = 5
def _define_UHashtable_head():
    class UHashtable(Structure):
        pass
    return UHashtable
def _define_UHashtable():
    UHashtable = win32more.Globalization.UHashtable_head
    return UHashtable
def _define_UIDNA_head():
    class UIDNA(Structure):
        pass
    return UIDNA
def _define_UIDNA():
    UIDNA = win32more.Globalization.UIDNA_head
    return UIDNA
def _define_UIDNAInfo_head():
    class UIDNAInfo(Structure):
        pass
    return UIDNAInfo
def _define_UIDNAInfo():
    UIDNAInfo = win32more.Globalization.UIDNAInfo_head
    UIDNAInfo._fields_ = [
        ('size', Int16),
        ('isTransitionalDifferent', SByte),
        ('reservedB3', SByte),
        ('errors', UInt32),
        ('reservedI2', Int32),
        ('reservedI3', Int32),
    ]
    return UIDNAInfo
def _define_UILANGUAGE_ENUMPROCA():
    return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PSTR,IntPtr)
def _define_UILANGUAGE_ENUMPROCW():
    return WINFUNCTYPE(win32more.Foundation.BOOL,win32more.Foundation.PWSTR,IntPtr)
UIndicPositionalCategory = Int32
U_INPC_NA = 0
U_INPC_BOTTOM = 1
U_INPC_BOTTOM_AND_LEFT = 2
U_INPC_BOTTOM_AND_RIGHT = 3
U_INPC_LEFT = 4
U_INPC_LEFT_AND_RIGHT = 5
U_INPC_OVERSTRUCK = 6
U_INPC_RIGHT = 7
U_INPC_TOP = 8
U_INPC_TOP_AND_BOTTOM = 9
U_INPC_TOP_AND_BOTTOM_AND_RIGHT = 10
U_INPC_TOP_AND_LEFT = 11
U_INPC_TOP_AND_LEFT_AND_RIGHT = 12
U_INPC_TOP_AND_RIGHT = 13
U_INPC_VISUAL_ORDER_LEFT = 14
U_INPC_TOP_AND_BOTTOM_AND_LEFT = 15
UIndicSyllabicCategory = Int32
U_INSC_OTHER = 0
U_INSC_AVAGRAHA = 1
U_INSC_BINDU = 2
U_INSC_BRAHMI_JOINING_NUMBER = 3
U_INSC_CANTILLATION_MARK = 4
U_INSC_CONSONANT = 5
U_INSC_CONSONANT_DEAD = 6
U_INSC_CONSONANT_FINAL = 7
U_INSC_CONSONANT_HEAD_LETTER = 8
U_INSC_CONSONANT_INITIAL_POSTFIXED = 9
U_INSC_CONSONANT_KILLER = 10
U_INSC_CONSONANT_MEDIAL = 11
U_INSC_CONSONANT_PLACEHOLDER = 12
U_INSC_CONSONANT_PRECEDING_REPHA = 13
U_INSC_CONSONANT_PREFIXED = 14
U_INSC_CONSONANT_SUBJOINED = 15
U_INSC_CONSONANT_SUCCEEDING_REPHA = 16
U_INSC_CONSONANT_WITH_STACKER = 17
U_INSC_GEMINATION_MARK = 18
U_INSC_INVISIBLE_STACKER = 19
U_INSC_JOINER = 20
U_INSC_MODIFYING_LETTER = 21
U_INSC_NON_JOINER = 22
U_INSC_NUKTA = 23
U_INSC_NUMBER = 24
U_INSC_NUMBER_JOINER = 25
U_INSC_PURE_KILLER = 26
U_INSC_REGISTER_SHIFTER = 27
U_INSC_SYLLABLE_MODIFIER = 28
U_INSC_TONE_LETTER = 29
U_INSC_TONE_MARK = 30
U_INSC_VIRAMA = 31
U_INSC_VISARGA = 32
U_INSC_VOWEL = 33
U_INSC_VOWEL_DEPENDENT = 34
U_INSC_VOWEL_INDEPENDENT = 35
UJoiningGroup = Int32
U_JG_NO_JOINING_GROUP = 0
U_JG_AIN = 1
U_JG_ALAPH = 2
U_JG_ALEF = 3
U_JG_BEH = 4
U_JG_BETH = 5
U_JG_DAL = 6
U_JG_DALATH_RISH = 7
U_JG_E = 8
U_JG_FEH = 9
U_JG_FINAL_SEMKATH = 10
U_JG_GAF = 11
U_JG_GAMAL = 12
U_JG_HAH = 13
U_JG_TEH_MARBUTA_GOAL = 14
U_JG_HAMZA_ON_HEH_GOAL = 14
U_JG_HE = 15
U_JG_HEH = 16
U_JG_HEH_GOAL = 17
U_JG_HETH = 18
U_JG_KAF = 19
U_JG_KAPH = 20
U_JG_KNOTTED_HEH = 21
U_JG_LAM = 22
U_JG_LAMADH = 23
U_JG_MEEM = 24
U_JG_MIM = 25
U_JG_NOON = 26
U_JG_NUN = 27
U_JG_PE = 28
U_JG_QAF = 29
U_JG_QAPH = 30
U_JG_REH = 31
U_JG_REVERSED_PE = 32
U_JG_SAD = 33
U_JG_SADHE = 34
U_JG_SEEN = 35
U_JG_SEMKATH = 36
U_JG_SHIN = 37
U_JG_SWASH_KAF = 38
U_JG_SYRIAC_WAW = 39
U_JG_TAH = 40
U_JG_TAW = 41
U_JG_TEH_MARBUTA = 42
U_JG_TETH = 43
U_JG_WAW = 44
U_JG_YEH = 45
U_JG_YEH_BARREE = 46
U_JG_YEH_WITH_TAIL = 47
U_JG_YUDH = 48
U_JG_YUDH_HE = 49
U_JG_ZAIN = 50
U_JG_FE = 51
U_JG_KHAPH = 52
U_JG_ZHAIN = 53
U_JG_BURUSHASKI_YEH_BARREE = 54
U_JG_FARSI_YEH = 55
U_JG_NYA = 56
U_JG_ROHINGYA_YEH = 57
U_JG_MANICHAEAN_ALEPH = 58
U_JG_MANICHAEAN_AYIN = 59
U_JG_MANICHAEAN_BETH = 60
U_JG_MANICHAEAN_DALETH = 61
U_JG_MANICHAEAN_DHAMEDH = 62
U_JG_MANICHAEAN_FIVE = 63
U_JG_MANICHAEAN_GIMEL = 64
U_JG_MANICHAEAN_HETH = 65
U_JG_MANICHAEAN_HUNDRED = 66
U_JG_MANICHAEAN_KAPH = 67
U_JG_MANICHAEAN_LAMEDH = 68
U_JG_MANICHAEAN_MEM = 69
U_JG_MANICHAEAN_NUN = 70
U_JG_MANICHAEAN_ONE = 71
U_JG_MANICHAEAN_PE = 72
U_JG_MANICHAEAN_QOPH = 73
U_JG_MANICHAEAN_RESH = 74
U_JG_MANICHAEAN_SADHE = 75
U_JG_MANICHAEAN_SAMEKH = 76
U_JG_MANICHAEAN_TAW = 77
U_JG_MANICHAEAN_TEN = 78
U_JG_MANICHAEAN_TETH = 79
U_JG_MANICHAEAN_THAMEDH = 80
U_JG_MANICHAEAN_TWENTY = 81
U_JG_MANICHAEAN_WAW = 82
U_JG_MANICHAEAN_YODH = 83
U_JG_MANICHAEAN_ZAYIN = 84
U_JG_STRAIGHT_WAW = 85
U_JG_AFRICAN_FEH = 86
U_JG_AFRICAN_NOON = 87
U_JG_AFRICAN_QAF = 88
U_JG_MALAYALAM_BHA = 89
U_JG_MALAYALAM_JA = 90
U_JG_MALAYALAM_LLA = 91
U_JG_MALAYALAM_LLLA = 92
U_JG_MALAYALAM_NGA = 93
U_JG_MALAYALAM_NNA = 94
U_JG_MALAYALAM_NNNA = 95
U_JG_MALAYALAM_NYA = 96
U_JG_MALAYALAM_RA = 97
U_JG_MALAYALAM_SSA = 98
U_JG_MALAYALAM_TTA = 99
U_JG_HANIFI_ROHINGYA_KINNA_YA = 100
U_JG_HANIFI_ROHINGYA_PA = 101
UJoiningType = Int32
U_JT_NON_JOINING = 0
U_JT_JOIN_CAUSING = 1
U_JT_DUAL_JOINING = 2
U_JT_LEFT_JOINING = 3
U_JT_RIGHT_JOINING = 4
U_JT_TRANSPARENT = 5
ULayoutType = Int32
ULOC_LAYOUT_LTR = 0
ULOC_LAYOUT_RTL = 1
ULOC_LAYOUT_TTB = 2
ULOC_LAYOUT_BTT = 3
ULOC_LAYOUT_UNKNOWN = 4
ULineBreak = Int32
U_LB_UNKNOWN = 0
U_LB_AMBIGUOUS = 1
U_LB_ALPHABETIC = 2
U_LB_BREAK_BOTH = 3
U_LB_BREAK_AFTER = 4
U_LB_BREAK_BEFORE = 5
U_LB_MANDATORY_BREAK = 6
U_LB_CONTINGENT_BREAK = 7
U_LB_CLOSE_PUNCTUATION = 8
U_LB_COMBINING_MARK = 9
U_LB_CARRIAGE_RETURN = 10
U_LB_EXCLAMATION = 11
U_LB_GLUE = 12
U_LB_HYPHEN = 13
U_LB_IDEOGRAPHIC = 14
U_LB_INSEPARABLE = 15
U_LB_INSEPERABLE = 15
U_LB_INFIX_NUMERIC = 16
U_LB_LINE_FEED = 17
U_LB_NONSTARTER = 18
U_LB_NUMERIC = 19
U_LB_OPEN_PUNCTUATION = 20
U_LB_POSTFIX_NUMERIC = 21
U_LB_PREFIX_NUMERIC = 22
U_LB_QUOTATION = 23
U_LB_COMPLEX_CONTEXT = 24
U_LB_SURROGATE = 25
U_LB_SPACE = 26
U_LB_BREAK_SYMBOLS = 27
U_LB_ZWSPACE = 28
U_LB_NEXT_LINE = 29
U_LB_WORD_JOINER = 30
U_LB_H2 = 31
U_LB_H3 = 32
U_LB_JL = 33
U_LB_JT = 34
U_LB_JV = 35
U_LB_CLOSE_PARENTHESIS = 36
U_LB_CONDITIONAL_JAPANESE_STARTER = 37
U_LB_HEBREW_LETTER = 38
U_LB_REGIONAL_INDICATOR = 39
U_LB_E_BASE = 40
U_LB_E_MODIFIER = 41
U_LB_ZWJ = 42
ULineBreakTag = Int32
UBRK_LINE_SOFT = 0
UBRK_LINE_SOFT_LIMIT = 100
UBRK_LINE_HARD = 100
UBRK_LINE_HARD_LIMIT = 200
def _define_UListFormatter_head():
    class UListFormatter(Structure):
        pass
    return UListFormatter
def _define_UListFormatter():
    UListFormatter = win32more.Globalization.UListFormatter_head
    return UListFormatter
UListFormatterField = Int32
ULISTFMT_LITERAL_FIELD = 0
ULISTFMT_ELEMENT_FIELD = 1
UListFormatterType = Int32
ULISTFMT_TYPE_AND = 0
ULISTFMT_TYPE_OR = 1
ULISTFMT_TYPE_UNITS = 2
UListFormatterWidth = Int32
ULISTFMT_WIDTH_WIDE = 0
ULISTFMT_WIDTH_SHORT = 1
ULISTFMT_WIDTH_NARROW = 2
def _define_ULocaleData_head():
    class ULocaleData(Structure):
        pass
    return ULocaleData
def _define_ULocaleData():
    ULocaleData = win32more.Globalization.ULocaleData_head
    return ULocaleData
ULocaleDataDelimiterType = Int32
ULOCDATA_QUOTATION_START = 0
ULOCDATA_QUOTATION_END = 1
ULOCDATA_ALT_QUOTATION_START = 2
ULOCDATA_ALT_QUOTATION_END = 3
ULocaleDataExemplarSetType = Int32
ULOCDATA_ES_STANDARD = 0
ULOCDATA_ES_AUXILIARY = 1
ULOCDATA_ES_INDEX = 2
ULOCDATA_ES_PUNCTUATION = 3
def _define_ULocaleDisplayNames_head():
    class ULocaleDisplayNames(Structure):
        pass
    return ULocaleDisplayNames
def _define_ULocaleDisplayNames():
    ULocaleDisplayNames = win32more.Globalization.ULocaleDisplayNames_head
    return ULocaleDisplayNames
ULocAvailableType = Int32
ULOC_AVAILABLE_DEFAULT = 0
ULOC_AVAILABLE_ONLY_LEGACY_ALIASES = 1
ULOC_AVAILABLE_WITH_LEGACY_ALIASES = 2
ULocDataLocaleType = Int32
ULOC_ACTUAL_LOCALE = 0
ULOC_VALID_LOCALE = 1
UMeasureFormatWidth = Int32
UMEASFMT_WIDTH_WIDE = 0
UMEASFMT_WIDTH_SHORT = 1
UMEASFMT_WIDTH_NARROW = 2
UMEASFMT_WIDTH_NUMERIC = 3
UMEASFMT_WIDTH_COUNT = 4
UMeasurementSystem = Int32
UMS_SI = 0
UMS_US = 1
UMS_UK = 2
def _define_UMemAllocFn():
    return CFUNCTYPE(c_void_p,c_void_p,UIntPtr)
def _define_UMemFreeFn():
    return CFUNCTYPE(Void,c_void_p,c_void_p)
def _define_UMemReallocFn():
    return CFUNCTYPE(c_void_p,c_void_p,c_void_p,UIntPtr)
UMessagePatternApostropheMode = Int32
UMSGPAT_APOS_DOUBLE_OPTIONAL = 0
UMSGPAT_APOS_DOUBLE_REQUIRED = 1
UMessagePatternArgType = Int32
UMSGPAT_ARG_TYPE_NONE = 0
UMSGPAT_ARG_TYPE_SIMPLE = 1
UMSGPAT_ARG_TYPE_CHOICE = 2
UMSGPAT_ARG_TYPE_PLURAL = 3
UMSGPAT_ARG_TYPE_SELECT = 4
UMSGPAT_ARG_TYPE_SELECTORDINAL = 5
UMessagePatternPartType = Int32
UMSGPAT_PART_TYPE_MSG_START = 0
UMSGPAT_PART_TYPE_MSG_LIMIT = 1
UMSGPAT_PART_TYPE_SKIP_SYNTAX = 2
UMSGPAT_PART_TYPE_INSERT_CHAR = 3
UMSGPAT_PART_TYPE_REPLACE_NUMBER = 4
UMSGPAT_PART_TYPE_ARG_START = 5
UMSGPAT_PART_TYPE_ARG_LIMIT = 6
UMSGPAT_PART_TYPE_ARG_NUMBER = 7
UMSGPAT_PART_TYPE_ARG_NAME = 8
UMSGPAT_PART_TYPE_ARG_TYPE = 9
UMSGPAT_PART_TYPE_ARG_STYLE = 10
UMSGPAT_PART_TYPE_ARG_SELECTOR = 11
UMSGPAT_PART_TYPE_ARG_INT = 12
UMSGPAT_PART_TYPE_ARG_DOUBLE = 13
def _define_UMutableCPTrie_head():
    class UMutableCPTrie(Structure):
        pass
    return UMutableCPTrie
def _define_UMutableCPTrie():
    UMutableCPTrie = win32more.Globalization.UMutableCPTrie_head
    return UMutableCPTrie
def _define_UNESCAPE_CHAR_AT():
    return CFUNCTYPE(UInt16,Int32,c_void_p)
def _define_UNICODERANGE_head():
    class UNICODERANGE(Structure):
        pass
    return UNICODERANGE
def _define_UNICODERANGE():
    UNICODERANGE = win32more.Globalization.UNICODERANGE_head
    UNICODERANGE._fields_ = [
        ('wcFrom', Char),
        ('wcTo', Char),
    ]
    return UNICODERANGE
UNormalization2Mode = Int32
UNORM2_COMPOSE = 0
UNORM2_DECOMPOSE = 1
UNORM2_FCD = 2
UNORM2_COMPOSE_CONTIGUOUS = 3
UNormalizationCheckResult = Int32
UNORM_NO = 0
UNORM_YES = 1
UNORM_MAYBE = 2
UNormalizationMode = Int32
UNORM_NONE = 1
UNORM_NFD = 2
UNORM_NFKD = 3
UNORM_NFC = 4
UNORM_DEFAULT = 4
UNORM_NFKC = 5
UNORM_FCD = 6
UNORM_MODE_COUNT = 7
def _define_UNormalizer2_head():
    class UNormalizer2(Structure):
        pass
    return UNormalizer2
def _define_UNormalizer2():
    UNormalizer2 = win32more.Globalization.UNormalizer2_head
    return UNormalizer2
UNumberCompactStyle = Int32
UNUM_SHORT = 0
UNUM_LONG = 1
UNumberDecimalSeparatorDisplay = Int32
UNUM_DECIMAL_SEPARATOR_AUTO = 0
UNUM_DECIMAL_SEPARATOR_ALWAYS = 1
UNUM_DECIMAL_SEPARATOR_COUNT = 2
UNumberFormatAttribute = Int32
UNUM_PARSE_INT_ONLY = 0
UNUM_GROUPING_USED = 1
UNUM_DECIMAL_ALWAYS_SHOWN = 2
UNUM_MAX_INTEGER_DIGITS = 3
UNUM_MIN_INTEGER_DIGITS = 4
UNUM_INTEGER_DIGITS = 5
UNUM_MAX_FRACTION_DIGITS = 6
UNUM_MIN_FRACTION_DIGITS = 7
UNUM_FRACTION_DIGITS = 8
UNUM_MULTIPLIER = 9
UNUM_GROUPING_SIZE = 10
UNUM_ROUNDING_MODE = 11
UNUM_ROUNDING_INCREMENT = 12
UNUM_FORMAT_WIDTH = 13
UNUM_PADDING_POSITION = 14
UNUM_SECONDARY_GROUPING_SIZE = 15
UNUM_SIGNIFICANT_DIGITS_USED = 16
UNUM_MIN_SIGNIFICANT_DIGITS = 17
UNUM_MAX_SIGNIFICANT_DIGITS = 18
UNUM_LENIENT_PARSE = 19
UNUM_PARSE_ALL_INPUT = 20
UNUM_SCALE = 21
UNUM_MINIMUM_GROUPING_DIGITS = 22
UNUM_CURRENCY_USAGE = 23
UNUM_FORMAT_FAIL_IF_MORE_THAN_MAX_DIGITS = 4096
UNUM_PARSE_NO_EXPONENT = 4097
UNUM_PARSE_DECIMAL_MARK_REQUIRED = 4098
UNUM_PARSE_CASE_SENSITIVE = 4099
UNUM_SIGN_ALWAYS_SHOWN = 4100
UNumberFormatAttributeValue = Int32
UNUM_FORMAT_ATTRIBUTE_VALUE_HIDDEN = 0
UNumberFormatFields = Int32
UNUM_INTEGER_FIELD = 0
UNUM_FRACTION_FIELD = 1
UNUM_DECIMAL_SEPARATOR_FIELD = 2
UNUM_EXPONENT_SYMBOL_FIELD = 3
UNUM_EXPONENT_SIGN_FIELD = 4
UNUM_EXPONENT_FIELD = 5
UNUM_GROUPING_SEPARATOR_FIELD = 6
UNUM_CURRENCY_FIELD = 7
UNUM_PERCENT_FIELD = 8
UNUM_PERMILL_FIELD = 9
UNUM_SIGN_FIELD = 10
UNUM_MEASURE_UNIT_FIELD = 11
UNUM_COMPACT_FIELD = 12
UNumberFormatPadPosition = Int32
UNUM_PAD_BEFORE_PREFIX = 0
UNUM_PAD_AFTER_PREFIX = 1
UNUM_PAD_BEFORE_SUFFIX = 2
UNUM_PAD_AFTER_SUFFIX = 3
UNumberFormatRoundingMode = Int32
UNUM_ROUND_CEILING = 0
UNUM_ROUND_FLOOR = 1
UNUM_ROUND_DOWN = 2
UNUM_ROUND_UP = 3
UNUM_ROUND_HALFEVEN = 4
UNUM_ROUND_HALFDOWN = 5
UNUM_ROUND_HALFUP = 6
UNUM_ROUND_UNNECESSARY = 7
UNumberFormatStyle = Int32
UNUM_PATTERN_DECIMAL = 0
UNUM_DECIMAL = 1
UNUM_CURRENCY = 2
UNUM_PERCENT = 3
UNUM_SCIENTIFIC = 4
UNUM_SPELLOUT = 5
UNUM_ORDINAL = 6
UNUM_DURATION = 7
UNUM_NUMBERING_SYSTEM = 8
UNUM_PATTERN_RULEBASED = 9
UNUM_CURRENCY_ISO = 10
UNUM_CURRENCY_PLURAL = 11
UNUM_CURRENCY_ACCOUNTING = 12
UNUM_CASH_CURRENCY = 13
UNUM_DECIMAL_COMPACT_SHORT = 14
UNUM_DECIMAL_COMPACT_LONG = 15
UNUM_CURRENCY_STANDARD = 16
UNUM_DEFAULT = 1
UNUM_IGNORE = 0
UNumberFormatSymbol = Int32
UNUM_DECIMAL_SEPARATOR_SYMBOL = 0
UNUM_GROUPING_SEPARATOR_SYMBOL = 1
UNUM_PATTERN_SEPARATOR_SYMBOL = 2
UNUM_PERCENT_SYMBOL = 3
UNUM_ZERO_DIGIT_SYMBOL = 4
UNUM_DIGIT_SYMBOL = 5
UNUM_MINUS_SIGN_SYMBOL = 6
UNUM_PLUS_SIGN_SYMBOL = 7
UNUM_CURRENCY_SYMBOL = 8
UNUM_INTL_CURRENCY_SYMBOL = 9
UNUM_MONETARY_SEPARATOR_SYMBOL = 10
UNUM_EXPONENTIAL_SYMBOL = 11
UNUM_PERMILL_SYMBOL = 12
UNUM_PAD_ESCAPE_SYMBOL = 13
UNUM_INFINITY_SYMBOL = 14
UNUM_NAN_SYMBOL = 15
UNUM_SIGNIFICANT_DIGIT_SYMBOL = 16
UNUM_MONETARY_GROUPING_SEPARATOR_SYMBOL = 17
UNUM_ONE_DIGIT_SYMBOL = 18
UNUM_TWO_DIGIT_SYMBOL = 19
UNUM_THREE_DIGIT_SYMBOL = 20
UNUM_FOUR_DIGIT_SYMBOL = 21
UNUM_FIVE_DIGIT_SYMBOL = 22
UNUM_SIX_DIGIT_SYMBOL = 23
UNUM_SEVEN_DIGIT_SYMBOL = 24
UNUM_EIGHT_DIGIT_SYMBOL = 25
UNUM_NINE_DIGIT_SYMBOL = 26
UNUM_EXPONENT_MULTIPLICATION_SYMBOL = 27
def _define_UNumberFormatter_head():
    class UNumberFormatter(Structure):
        pass
    return UNumberFormatter
def _define_UNumberFormatter():
    UNumberFormatter = win32more.Globalization.UNumberFormatter_head
    return UNumberFormatter
UNumberFormatTextAttribute = Int32
UNUM_POSITIVE_PREFIX = 0
UNUM_POSITIVE_SUFFIX = 1
UNUM_NEGATIVE_PREFIX = 2
UNUM_NEGATIVE_SUFFIX = 3
UNUM_PADDING_CHARACTER = 4
UNUM_CURRENCY_CODE = 5
UNUM_DEFAULT_RULESET = 6
UNUM_PUBLIC_RULESETS = 7
UNumberGroupingStrategy = Int32
UNUM_GROUPING_OFF = 0
UNUM_GROUPING_MIN2 = 1
UNUM_GROUPING_AUTO = 2
UNUM_GROUPING_ON_ALIGNED = 3
UNUM_GROUPING_THOUSANDS = 4
def _define_UNumberingSystem_head():
    class UNumberingSystem(Structure):
        pass
    return UNumberingSystem
def _define_UNumberingSystem():
    UNumberingSystem = win32more.Globalization.UNumberingSystem_head
    return UNumberingSystem
UNumberRangeCollapse = Int32
UNUM_RANGE_COLLAPSE_AUTO = 0
UNUM_RANGE_COLLAPSE_NONE = 1
UNUM_RANGE_COLLAPSE_UNIT = 2
UNUM_RANGE_COLLAPSE_ALL = 3
UNumberRangeIdentityFallback = Int32
UNUM_IDENTITY_FALLBACK_SINGLE_VALUE = 0
UNUM_IDENTITY_FALLBACK_APPROXIMATELY_OR_SINGLE_VALUE = 1
UNUM_IDENTITY_FALLBACK_APPROXIMATELY = 2
UNUM_IDENTITY_FALLBACK_RANGE = 3
UNumberRangeIdentityResult = Int32
UNUM_IDENTITY_RESULT_EQUAL_BEFORE_ROUNDING = 0
UNUM_IDENTITY_RESULT_EQUAL_AFTER_ROUNDING = 1
UNUM_IDENTITY_RESULT_NOT_EQUAL = 2
UNumberSignDisplay = Int32
UNUM_SIGN_AUTO = 0
UNUM_SIGN_ALWAYS = 1
UNUM_SIGN_NEVER = 2
UNUM_SIGN_ACCOUNTING = 3
UNUM_SIGN_ACCOUNTING_ALWAYS = 4
UNUM_SIGN_EXCEPT_ZERO = 5
UNUM_SIGN_ACCOUNTING_EXCEPT_ZERO = 6
UNUM_SIGN_COUNT = 7
UNumberUnitWidth = Int32
UNUM_UNIT_WIDTH_NARROW = 0
UNUM_UNIT_WIDTH_SHORT = 1
UNUM_UNIT_WIDTH_FULL_NAME = 2
UNUM_UNIT_WIDTH_ISO_CODE = 3
UNUM_UNIT_WIDTH_HIDDEN = 4
UNUM_UNIT_WIDTH_COUNT = 5
UNumericType = Int32
U_NT_NONE = 0
U_NT_DECIMAL = 1
U_NT_DIGIT = 2
U_NT_NUMERIC = 3
def _define_UParseError_head():
    class UParseError(Structure):
        pass
    return UParseError
def _define_UParseError():
    UParseError = win32more.Globalization.UParseError_head
    UParseError._fields_ = [
        ('line', Int32),
        ('offset', Int32),
        ('preContext', UInt16 * 16),
        ('postContext', UInt16 * 16),
    ]
    return UParseError
def _define_UPluralRules_head():
    class UPluralRules(Structure):
        pass
    return UPluralRules
def _define_UPluralRules():
    UPluralRules = win32more.Globalization.UPluralRules_head
    return UPluralRules
UPluralType = Int32
UPLURAL_TYPE_CARDINAL = 0
UPLURAL_TYPE_ORDINAL = 1
UProperty = Int32
UCHAR_ALPHABETIC = 0
UCHAR_BINARY_START = 0
UCHAR_ASCII_HEX_DIGIT = 1
UCHAR_BIDI_CONTROL = 2
UCHAR_BIDI_MIRRORED = 3
UCHAR_DASH = 4
UCHAR_DEFAULT_IGNORABLE_CODE_POINT = 5
UCHAR_DEPRECATED = 6
UCHAR_DIACRITIC = 7
UCHAR_EXTENDER = 8
UCHAR_FULL_COMPOSITION_EXCLUSION = 9
UCHAR_GRAPHEME_BASE = 10
UCHAR_GRAPHEME_EXTEND = 11
UCHAR_GRAPHEME_LINK = 12
UCHAR_HEX_DIGIT = 13
UCHAR_HYPHEN = 14
UCHAR_ID_CONTINUE = 15
UCHAR_ID_START = 16
UCHAR_IDEOGRAPHIC = 17
UCHAR_IDS_BINARY_OPERATOR = 18
UCHAR_IDS_TRINARY_OPERATOR = 19
UCHAR_JOIN_CONTROL = 20
UCHAR_LOGICAL_ORDER_EXCEPTION = 21
UCHAR_LOWERCASE = 22
UCHAR_MATH = 23
UCHAR_NONCHARACTER_CODE_POINT = 24
UCHAR_QUOTATION_MARK = 25
UCHAR_RADICAL = 26
UCHAR_SOFT_DOTTED = 27
UCHAR_TERMINAL_PUNCTUATION = 28
UCHAR_UNIFIED_IDEOGRAPH = 29
UCHAR_UPPERCASE = 30
UCHAR_WHITE_SPACE = 31
UCHAR_XID_CONTINUE = 32
UCHAR_XID_START = 33
UCHAR_CASE_SENSITIVE = 34
UCHAR_S_TERM = 35
UCHAR_VARIATION_SELECTOR = 36
UCHAR_NFD_INERT = 37
UCHAR_NFKD_INERT = 38
UCHAR_NFC_INERT = 39
UCHAR_NFKC_INERT = 40
UCHAR_SEGMENT_STARTER = 41
UCHAR_PATTERN_SYNTAX = 42
UCHAR_PATTERN_WHITE_SPACE = 43
UCHAR_POSIX_ALNUM = 44
UCHAR_POSIX_BLANK = 45
UCHAR_POSIX_GRAPH = 46
UCHAR_POSIX_PRINT = 47
UCHAR_POSIX_XDIGIT = 48
UCHAR_CASED = 49
UCHAR_CASE_IGNORABLE = 50
UCHAR_CHANGES_WHEN_LOWERCASED = 51
UCHAR_CHANGES_WHEN_UPPERCASED = 52
UCHAR_CHANGES_WHEN_TITLECASED = 53
UCHAR_CHANGES_WHEN_CASEFOLDED = 54
UCHAR_CHANGES_WHEN_CASEMAPPED = 55
UCHAR_CHANGES_WHEN_NFKC_CASEFOLDED = 56
UCHAR_EMOJI = 57
UCHAR_EMOJI_PRESENTATION = 58
UCHAR_EMOJI_MODIFIER = 59
UCHAR_EMOJI_MODIFIER_BASE = 60
UCHAR_EMOJI_COMPONENT = 61
UCHAR_REGIONAL_INDICATOR = 62
UCHAR_PREPENDED_CONCATENATION_MARK = 63
UCHAR_EXTENDED_PICTOGRAPHIC = 64
UCHAR_BIDI_CLASS = 4096
UCHAR_INT_START = 4096
UCHAR_BLOCK = 4097
UCHAR_CANONICAL_COMBINING_CLASS = 4098
UCHAR_DECOMPOSITION_TYPE = 4099
UCHAR_EAST_ASIAN_WIDTH = 4100
UCHAR_GENERAL_CATEGORY = 4101
UCHAR_JOINING_GROUP = 4102
UCHAR_JOINING_TYPE = 4103
UCHAR_LINE_BREAK = 4104
UCHAR_NUMERIC_TYPE = 4105
UCHAR_SCRIPT = 4106
UCHAR_HANGUL_SYLLABLE_TYPE = 4107
UCHAR_NFD_QUICK_CHECK = 4108
UCHAR_NFKD_QUICK_CHECK = 4109
UCHAR_NFC_QUICK_CHECK = 4110
UCHAR_NFKC_QUICK_CHECK = 4111
UCHAR_LEAD_CANONICAL_COMBINING_CLASS = 4112
UCHAR_TRAIL_CANONICAL_COMBINING_CLASS = 4113
UCHAR_GRAPHEME_CLUSTER_BREAK = 4114
UCHAR_SENTENCE_BREAK = 4115
UCHAR_WORD_BREAK = 4116
UCHAR_BIDI_PAIRED_BRACKET_TYPE = 4117
UCHAR_INDIC_POSITIONAL_CATEGORY = 4118
UCHAR_INDIC_SYLLABIC_CATEGORY = 4119
UCHAR_VERTICAL_ORIENTATION = 4120
UCHAR_GENERAL_CATEGORY_MASK = 8192
UCHAR_MASK_START = 8192
UCHAR_NUMERIC_VALUE = 12288
UCHAR_DOUBLE_START = 12288
UCHAR_AGE = 16384
UCHAR_STRING_START = 16384
UCHAR_BIDI_MIRRORING_GLYPH = 16385
UCHAR_CASE_FOLDING = 16386
UCHAR_LOWERCASE_MAPPING = 16388
UCHAR_NAME = 16389
UCHAR_SIMPLE_CASE_FOLDING = 16390
UCHAR_SIMPLE_LOWERCASE_MAPPING = 16391
UCHAR_SIMPLE_TITLECASE_MAPPING = 16392
UCHAR_SIMPLE_UPPERCASE_MAPPING = 16393
UCHAR_TITLECASE_MAPPING = 16394
UCHAR_UPPERCASE_MAPPING = 16396
UCHAR_BIDI_PAIRED_BRACKET = 16397
UCHAR_SCRIPT_EXTENSIONS = 28672
UCHAR_OTHER_PROPERTY_START = 28672
UCHAR_INVALID_CODE = -1
UPropertyNameChoice = Int32
U_SHORT_PROPERTY_NAME = 0
U_LONG_PROPERTY_NAME = 1
def _define_URegexFindProgressCallback():
    return CFUNCTYPE(SByte,c_void_p,Int64)
def _define_URegexMatchCallback():
    return CFUNCTYPE(SByte,c_void_p,Int32)
URegexpFlag = Int32
UREGEX_CASE_INSENSITIVE = 2
UREGEX_COMMENTS = 4
UREGEX_DOTALL = 32
UREGEX_LITERAL = 16
UREGEX_MULTILINE = 8
UREGEX_UNIX_LINES = 1
UREGEX_UWORD = 256
UREGEX_ERROR_ON_UNKNOWN_ESCAPES = 512
def _define_URegion_head():
    class URegion(Structure):
        pass
    return URegion
def _define_URegion():
    URegion = win32more.Globalization.URegion_head
    return URegion
URegionType = Int32
URGN_UNKNOWN = 0
URGN_TERRITORY = 1
URGN_WORLD = 2
URGN_CONTINENT = 3
URGN_SUBCONTINENT = 4
URGN_GROUPING = 5
URGN_DEPRECATED = 6
def _define_URegularExpression_head():
    class URegularExpression(Structure):
        pass
    return URegularExpression
def _define_URegularExpression():
    URegularExpression = win32more.Globalization.URegularExpression_head
    return URegularExpression
def _define_URelativeDateTimeFormatter_head():
    class URelativeDateTimeFormatter(Structure):
        pass
    return URelativeDateTimeFormatter
def _define_URelativeDateTimeFormatter():
    URelativeDateTimeFormatter = win32more.Globalization.URelativeDateTimeFormatter_head
    return URelativeDateTimeFormatter
URelativeDateTimeFormatterField = Int32
UDAT_REL_LITERAL_FIELD = 0
UDAT_REL_NUMERIC_FIELD = 1
URelativeDateTimeUnit = Int32
UDAT_REL_UNIT_YEAR = 0
UDAT_REL_UNIT_QUARTER = 1
UDAT_REL_UNIT_MONTH = 2
UDAT_REL_UNIT_WEEK = 3
UDAT_REL_UNIT_DAY = 4
UDAT_REL_UNIT_HOUR = 5
UDAT_REL_UNIT_MINUTE = 6
UDAT_REL_UNIT_SECOND = 7
UDAT_REL_UNIT_SUNDAY = 8
UDAT_REL_UNIT_MONDAY = 9
UDAT_REL_UNIT_TUESDAY = 10
UDAT_REL_UNIT_WEDNESDAY = 11
UDAT_REL_UNIT_THURSDAY = 12
UDAT_REL_UNIT_FRIDAY = 13
UDAT_REL_UNIT_SATURDAY = 14
def _define_UReplaceableCallbacks_head():
    class UReplaceableCallbacks(Structure):
        pass
    return UReplaceableCallbacks
def _define_UReplaceableCallbacks():
    UReplaceableCallbacks = win32more.Globalization.UReplaceableCallbacks_head
    UReplaceableCallbacks._fields_ = [
        ('length', IntPtr),
        ('charAt', IntPtr),
        ('char32At', IntPtr),
        ('replace', IntPtr),
        ('extract', IntPtr),
        ('copy', IntPtr),
    ]
    return UReplaceableCallbacks
def _define_UResourceBundle_head():
    class UResourceBundle(Structure):
        pass
    return UResourceBundle
def _define_UResourceBundle():
    UResourceBundle = win32more.Globalization.UResourceBundle_head
    return UResourceBundle
URestrictionLevel = Int32
USPOOF_ASCII = 268435456
USPOOF_SINGLE_SCRIPT_RESTRICTIVE = 536870912
USPOOF_HIGHLY_RESTRICTIVE = 805306368
USPOOF_MODERATELY_RESTRICTIVE = 1073741824
USPOOF_MINIMALLY_RESTRICTIVE = 1342177280
USPOOF_UNRESTRICTIVE = 1610612736
USPOOF_RESTRICTION_LEVEL_MASK = 2130706432
UResType = Int32
URES_NONE = -1
URES_STRING = 0
URES_BINARY = 1
URES_TABLE = 2
URES_ALIAS = 3
URES_INT = 7
URES_ARRAY = 8
URES_INT_VECTOR = 14
UScriptCode = Int32
USCRIPT_INVALID_CODE = -1
USCRIPT_COMMON = 0
USCRIPT_INHERITED = 1
USCRIPT_ARABIC = 2
USCRIPT_ARMENIAN = 3
USCRIPT_BENGALI = 4
USCRIPT_BOPOMOFO = 5
USCRIPT_CHEROKEE = 6
USCRIPT_COPTIC = 7
USCRIPT_CYRILLIC = 8
USCRIPT_DESERET = 9
USCRIPT_DEVANAGARI = 10
USCRIPT_ETHIOPIC = 11
USCRIPT_GEORGIAN = 12
USCRIPT_GOTHIC = 13
USCRIPT_GREEK = 14
USCRIPT_GUJARATI = 15
USCRIPT_GURMUKHI = 16
USCRIPT_HAN = 17
USCRIPT_HANGUL = 18
USCRIPT_HEBREW = 19
USCRIPT_HIRAGANA = 20
USCRIPT_KANNADA = 21
USCRIPT_KATAKANA = 22
USCRIPT_KHMER = 23
USCRIPT_LAO = 24
USCRIPT_LATIN = 25
USCRIPT_MALAYALAM = 26
USCRIPT_MONGOLIAN = 27
USCRIPT_MYANMAR = 28
USCRIPT_OGHAM = 29
USCRIPT_OLD_ITALIC = 30
USCRIPT_ORIYA = 31
USCRIPT_RUNIC = 32
USCRIPT_SINHALA = 33
USCRIPT_SYRIAC = 34
USCRIPT_TAMIL = 35
USCRIPT_TELUGU = 36
USCRIPT_THAANA = 37
USCRIPT_THAI = 38
USCRIPT_TIBETAN = 39
USCRIPT_CANADIAN_ABORIGINAL = 40
USCRIPT_UCAS = 40
USCRIPT_YI = 41
USCRIPT_TAGALOG = 42
USCRIPT_HANUNOO = 43
USCRIPT_BUHID = 44
USCRIPT_TAGBANWA = 45
USCRIPT_BRAILLE = 46
USCRIPT_CYPRIOT = 47
USCRIPT_LIMBU = 48
USCRIPT_LINEAR_B = 49
USCRIPT_OSMANYA = 50
USCRIPT_SHAVIAN = 51
USCRIPT_TAI_LE = 52
USCRIPT_UGARITIC = 53
USCRIPT_KATAKANA_OR_HIRAGANA = 54
USCRIPT_BUGINESE = 55
USCRIPT_GLAGOLITIC = 56
USCRIPT_KHAROSHTHI = 57
USCRIPT_SYLOTI_NAGRI = 58
USCRIPT_NEW_TAI_LUE = 59
USCRIPT_TIFINAGH = 60
USCRIPT_OLD_PERSIAN = 61
USCRIPT_BALINESE = 62
USCRIPT_BATAK = 63
USCRIPT_BLISSYMBOLS = 64
USCRIPT_BRAHMI = 65
USCRIPT_CHAM = 66
USCRIPT_CIRTH = 67
USCRIPT_OLD_CHURCH_SLAVONIC_CYRILLIC = 68
USCRIPT_DEMOTIC_EGYPTIAN = 69
USCRIPT_HIERATIC_EGYPTIAN = 70
USCRIPT_EGYPTIAN_HIEROGLYPHS = 71
USCRIPT_KHUTSURI = 72
USCRIPT_SIMPLIFIED_HAN = 73
USCRIPT_TRADITIONAL_HAN = 74
USCRIPT_PAHAWH_HMONG = 75
USCRIPT_OLD_HUNGARIAN = 76
USCRIPT_HARAPPAN_INDUS = 77
USCRIPT_JAVANESE = 78
USCRIPT_KAYAH_LI = 79
USCRIPT_LATIN_FRAKTUR = 80
USCRIPT_LATIN_GAELIC = 81
USCRIPT_LEPCHA = 82
USCRIPT_LINEAR_A = 83
USCRIPT_MANDAIC = 84
USCRIPT_MANDAEAN = 84
USCRIPT_MAYAN_HIEROGLYPHS = 85
USCRIPT_MEROITIC_HIEROGLYPHS = 86
USCRIPT_MEROITIC = 86
USCRIPT_NKO = 87
USCRIPT_ORKHON = 88
USCRIPT_OLD_PERMIC = 89
USCRIPT_PHAGS_PA = 90
USCRIPT_PHOENICIAN = 91
USCRIPT_MIAO = 92
USCRIPT_PHONETIC_POLLARD = 92
USCRIPT_RONGORONGO = 93
USCRIPT_SARATI = 94
USCRIPT_ESTRANGELO_SYRIAC = 95
USCRIPT_WESTERN_SYRIAC = 96
USCRIPT_EASTERN_SYRIAC = 97
USCRIPT_TENGWAR = 98
USCRIPT_VAI = 99
USCRIPT_VISIBLE_SPEECH = 100
USCRIPT_CUNEIFORM = 101
USCRIPT_UNWRITTEN_LANGUAGES = 102
USCRIPT_UNKNOWN = 103
USCRIPT_CARIAN = 104
USCRIPT_JAPANESE = 105
USCRIPT_LANNA = 106
USCRIPT_LYCIAN = 107
USCRIPT_LYDIAN = 108
USCRIPT_OL_CHIKI = 109
USCRIPT_REJANG = 110
USCRIPT_SAURASHTRA = 111
USCRIPT_SIGN_WRITING = 112
USCRIPT_SUNDANESE = 113
USCRIPT_MOON = 114
USCRIPT_MEITEI_MAYEK = 115
USCRIPT_IMPERIAL_ARAMAIC = 116
USCRIPT_AVESTAN = 117
USCRIPT_CHAKMA = 118
USCRIPT_KOREAN = 119
USCRIPT_KAITHI = 120
USCRIPT_MANICHAEAN = 121
USCRIPT_INSCRIPTIONAL_PAHLAVI = 122
USCRIPT_PSALTER_PAHLAVI = 123
USCRIPT_BOOK_PAHLAVI = 124
USCRIPT_INSCRIPTIONAL_PARTHIAN = 125
USCRIPT_SAMARITAN = 126
USCRIPT_TAI_VIET = 127
USCRIPT_MATHEMATICAL_NOTATION = 128
USCRIPT_SYMBOLS = 129
USCRIPT_BAMUM = 130
USCRIPT_LISU = 131
USCRIPT_NAKHI_GEBA = 132
USCRIPT_OLD_SOUTH_ARABIAN = 133
USCRIPT_BASSA_VAH = 134
USCRIPT_DUPLOYAN = 135
USCRIPT_ELBASAN = 136
USCRIPT_GRANTHA = 137
USCRIPT_KPELLE = 138
USCRIPT_LOMA = 139
USCRIPT_MENDE = 140
USCRIPT_MEROITIC_CURSIVE = 141
USCRIPT_OLD_NORTH_ARABIAN = 142
USCRIPT_NABATAEAN = 143
USCRIPT_PALMYRENE = 144
USCRIPT_KHUDAWADI = 145
USCRIPT_SINDHI = 145
USCRIPT_WARANG_CITI = 146
USCRIPT_AFAKA = 147
USCRIPT_JURCHEN = 148
USCRIPT_MRO = 149
USCRIPT_NUSHU = 150
USCRIPT_SHARADA = 151
USCRIPT_SORA_SOMPENG = 152
USCRIPT_TAKRI = 153
USCRIPT_TANGUT = 154
USCRIPT_WOLEAI = 155
USCRIPT_ANATOLIAN_HIEROGLYPHS = 156
USCRIPT_KHOJKI = 157
USCRIPT_TIRHUTA = 158
USCRIPT_CAUCASIAN_ALBANIAN = 159
USCRIPT_MAHAJANI = 160
USCRIPT_AHOM = 161
USCRIPT_HATRAN = 162
USCRIPT_MODI = 163
USCRIPT_MULTANI = 164
USCRIPT_PAU_CIN_HAU = 165
USCRIPT_SIDDHAM = 166
USCRIPT_ADLAM = 167
USCRIPT_BHAIKSUKI = 168
USCRIPT_MARCHEN = 169
USCRIPT_NEWA = 170
USCRIPT_OSAGE = 171
USCRIPT_HAN_WITH_BOPOMOFO = 172
USCRIPT_JAMO = 173
USCRIPT_SYMBOLS_EMOJI = 174
USCRIPT_MASARAM_GONDI = 175
USCRIPT_SOYOMBO = 176
USCRIPT_ZANABAZAR_SQUARE = 177
USCRIPT_DOGRA = 178
USCRIPT_GUNJALA_GONDI = 179
USCRIPT_MAKASAR = 180
USCRIPT_MEDEFAIDRIN = 181
USCRIPT_HANIFI_ROHINGYA = 182
USCRIPT_SOGDIAN = 183
USCRIPT_OLD_SOGDIAN = 184
USCRIPT_ELYMAIC = 185
USCRIPT_NYIAKENG_PUACHUE_HMONG = 186
USCRIPT_NANDINAGARI = 187
USCRIPT_WANCHO = 188
USCRIPT_CHORASMIAN = 189
USCRIPT_DIVES_AKURU = 190
USCRIPT_KHITAN_SMALL_SCRIPT = 191
USCRIPT_YEZIDI = 192
UScriptUsage = Int32
USCRIPT_USAGE_NOT_ENCODED = 0
USCRIPT_USAGE_UNKNOWN = 1
USCRIPT_USAGE_EXCLUDED = 2
USCRIPT_USAGE_LIMITED_USE = 3
USCRIPT_USAGE_ASPIRATIONAL = 4
USCRIPT_USAGE_RECOMMENDED = 5
def _define_USearch_head():
    class USearch(Structure):
        pass
    return USearch
def _define_USearch():
    USearch = win32more.Globalization.USearch_head
    return USearch
USearchAttribute = Int32
USEARCH_OVERLAP = 0
USEARCH_ELEMENT_COMPARISON = 2
USearchAttributeValue = Int32
USEARCH_DEFAULT = -1
USEARCH_OFF = 0
USEARCH_ON = 1
USEARCH_STANDARD_ELEMENT_COMPARISON = 2
USEARCH_PATTERN_BASE_WEIGHT_IS_WILDCARD = 3
USEARCH_ANY_BASE_WEIGHT_IS_WILDCARD = 4
USentenceBreak = Int32
U_SB_OTHER = 0
U_SB_ATERM = 1
U_SB_CLOSE = 2
U_SB_FORMAT = 3
U_SB_LOWER = 4
U_SB_NUMERIC = 5
U_SB_OLETTER = 6
U_SB_SEP = 7
U_SB_SP = 8
U_SB_STERM = 9
U_SB_UPPER = 10
U_SB_CR = 11
U_SB_EXTEND = 12
U_SB_LF = 13
U_SB_SCONTINUE = 14
USentenceBreakTag = Int32
UBRK_SENTENCE_TERM = 0
UBRK_SENTENCE_TERM_LIMIT = 100
UBRK_SENTENCE_SEP = 100
UBRK_SENTENCE_SEP_LIMIT = 200
def _define_USerializedSet_head():
    class USerializedSet(Structure):
        pass
    return USerializedSet
def _define_USerializedSet():
    USerializedSet = win32more.Globalization.USerializedSet_head
    USerializedSet._fields_ = [
        ('array', POINTER(UInt16)),
        ('bmpLength', Int32),
        ('length', Int32),
        ('staticArray', UInt16 * 8),
    ]
    return USerializedSet
def _define_USet_head():
    class USet(Structure):
        pass
    return USet
def _define_USet():
    USet = win32more.Globalization.USet_head
    return USet
USetSpanCondition = Int32
USET_SPAN_NOT_CONTAINED = 0
USET_SPAN_CONTAINED = 1
USET_SPAN_SIMPLE = 2
def _define_USpoofChecker_head():
    class USpoofChecker(Structure):
        pass
    return USpoofChecker
def _define_USpoofChecker():
    USpoofChecker = win32more.Globalization.USpoofChecker_head
    return USpoofChecker
def _define_USpoofCheckResult_head():
    class USpoofCheckResult(Structure):
        pass
    return USpoofCheckResult
def _define_USpoofCheckResult():
    USpoofCheckResult = win32more.Globalization.USpoofCheckResult_head
    return USpoofCheckResult
USpoofChecks = Int32
USPOOF_SINGLE_SCRIPT_CONFUSABLE = 1
USPOOF_MIXED_SCRIPT_CONFUSABLE = 2
USPOOF_WHOLE_SCRIPT_CONFUSABLE = 4
USPOOF_CONFUSABLE = 7
USPOOF_RESTRICTION_LEVEL = 16
USPOOF_INVISIBLE = 32
USPOOF_CHAR_LIMIT = 64
USPOOF_MIXED_NUMBERS = 128
USPOOF_HIDDEN_OVERLAY = 256
USPOOF_ALL_CHECKS = 65535
USPOOF_AUX_INFO = 1073741824
def _define_UStringCaseMapper():
    return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UCaseMap_head),POINTER(UInt16),Int32,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))
def _define_UStringPrepProfile_head():
    class UStringPrepProfile(Structure):
        pass
    return UStringPrepProfile
def _define_UStringPrepProfile():
    UStringPrepProfile = win32more.Globalization.UStringPrepProfile_head
    return UStringPrepProfile
UStringPrepProfileType = Int32
USPREP_RFC3491_NAMEPREP = 0
USPREP_RFC3530_NFS4_CS_PREP = 1
USPREP_RFC3530_NFS4_CS_PREP_CI = 2
USPREP_RFC3530_NFS4_CIS_PREP = 3
USPREP_RFC3530_NFS4_MIXED_PREP_PREFIX = 4
USPREP_RFC3530_NFS4_MIXED_PREP_SUFFIX = 5
USPREP_RFC3722_ISCSI = 6
USPREP_RFC3920_NODEPREP = 7
USPREP_RFC3920_RESOURCEPREP = 8
USPREP_RFC4011_MIB = 9
USPREP_RFC4013_SASLPREP = 10
USPREP_RFC4505_TRACE = 11
USPREP_RFC4518_LDAP = 12
USPREP_RFC4518_LDAP_CI = 13
def _define_UStringSearch_head():
    class UStringSearch(Structure):
        pass
    return UStringSearch
def _define_UStringSearch():
    UStringSearch = win32more.Globalization.UStringSearch_head
    return UStringSearch
UStringTrieBuildOption = Int32
USTRINGTRIE_BUILD_FAST = 0
USTRINGTRIE_BUILD_SMALL = 1
UStringTrieResult = Int32
USTRINGTRIE_NO_MATCH = 0
USTRINGTRIE_NO_VALUE = 1
USTRINGTRIE_FINAL_VALUE = 2
USTRINGTRIE_INTERMEDIATE_VALUE = 3
USystemTimeZoneType = Int32
UCAL_ZONE_TYPE_ANY = 0
UCAL_ZONE_TYPE_CANONICAL = 1
UCAL_ZONE_TYPE_CANONICAL_LOCATION = 2
def _define_UText_head():
    class UText(Structure):
        pass
    return UText
def _define_UText():
    UText = win32more.Globalization.UText_head
    UText._fields_ = [
        ('magic', UInt32),
        ('flags', Int32),
        ('providerProperties', Int32),
        ('sizeOfStruct', Int32),
        ('chunkNativeLimit', Int64),
        ('extraSize', Int32),
        ('nativeIndexingLimit', Int32),
        ('chunkNativeStart', Int64),
        ('chunkOffset', Int32),
        ('chunkLength', Int32),
        ('chunkContents', POINTER(UInt16)),
        ('pFuncs', POINTER(win32more.Globalization.UTextFuncs_head)),
        ('pExtra', c_void_p),
        ('context', c_void_p),
        ('p', c_void_p),
        ('q', c_void_p),
        ('r', c_void_p),
        ('privP', c_void_p),
        ('a', Int64),
        ('b', Int32),
        ('c', Int32),
        ('privA', Int64),
        ('privB', Int32),
        ('privC', Int32),
    ]
    return UText
def _define_UTextAccess():
    return CFUNCTYPE(SByte,POINTER(win32more.Globalization.UText_head),Int64,SByte)
def _define_UTextClone():
    return CFUNCTYPE(POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.UText_head),POINTER(win32more.Globalization.UText_head),SByte,POINTER(win32more.Globalization.UErrorCode))
def _define_UTextClose():
    return CFUNCTYPE(Void,POINTER(win32more.Globalization.UText_head))
def _define_UTextCopy():
    return CFUNCTYPE(Void,POINTER(win32more.Globalization.UText_head),Int64,Int64,Int64,SByte,POINTER(win32more.Globalization.UErrorCode))
def _define_UTextExtract():
    return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UText_head),Int64,Int64,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))
def _define_UTextFuncs_head():
    class UTextFuncs(Structure):
        pass
    return UTextFuncs
def _define_UTextFuncs():
    UTextFuncs = win32more.Globalization.UTextFuncs_head
    UTextFuncs._fields_ = [
        ('tableSize', Int32),
        ('reserved1', Int32),
        ('reserved2', Int32),
        ('reserved3', Int32),
        ('clone', win32more.Globalization.UTextClone),
        ('nativeLength', win32more.Globalization.UTextNativeLength),
        ('access', win32more.Globalization.UTextAccess),
        ('extract', win32more.Globalization.UTextExtract),
        ('replace', win32more.Globalization.UTextReplace),
        ('copy', win32more.Globalization.UTextCopy),
        ('mapOffsetToNative', win32more.Globalization.UTextMapOffsetToNative),
        ('mapNativeIndexToUTF16', win32more.Globalization.UTextMapNativeIndexToUTF16),
        ('close', win32more.Globalization.UTextClose),
        ('spare1', win32more.Globalization.UTextClose),
        ('spare2', win32more.Globalization.UTextClose),
        ('spare3', win32more.Globalization.UTextClose),
    ]
    return UTextFuncs
def _define_UTextMapNativeIndexToUTF16():
    return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UText_head),Int64)
def _define_UTextMapOffsetToNative():
    return CFUNCTYPE(Int64,POINTER(win32more.Globalization.UText_head))
def _define_UTextNativeLength():
    return CFUNCTYPE(Int64,POINTER(win32more.Globalization.UText_head))
def _define_UTextReplace():
    return CFUNCTYPE(Int32,POINTER(win32more.Globalization.UText_head),Int64,Int64,POINTER(UInt16),Int32,POINTER(win32more.Globalization.UErrorCode))
UTimeScaleValue = Int32
UTSV_UNITS_VALUE = 0
UTSV_EPOCH_OFFSET_VALUE = 1
UTSV_FROM_MIN_VALUE = 2
UTSV_FROM_MAX_VALUE = 3
UTSV_TO_MIN_VALUE = 4
UTSV_TO_MAX_VALUE = 5
UTimeZoneFormatGMTOffsetPatternType = Int32
UTZFMT_PAT_POSITIVE_HM = 0
UTZFMT_PAT_POSITIVE_HMS = 1
UTZFMT_PAT_NEGATIVE_HM = 2
UTZFMT_PAT_NEGATIVE_HMS = 3
UTZFMT_PAT_POSITIVE_H = 4
UTZFMT_PAT_NEGATIVE_H = 5
UTZFMT_PAT_COUNT = 6
UTimeZoneFormatParseOption = Int32
UTZFMT_PARSE_OPTION_NONE = 0
UTZFMT_PARSE_OPTION_ALL_STYLES = 1
UTZFMT_PARSE_OPTION_TZ_DATABASE_ABBREVIATIONS = 2
UTimeZoneFormatStyle = Int32
UTZFMT_STYLE_GENERIC_LOCATION = 0
UTZFMT_STYLE_GENERIC_LONG = 1
UTZFMT_STYLE_GENERIC_SHORT = 2
UTZFMT_STYLE_SPECIFIC_LONG = 3
UTZFMT_STYLE_SPECIFIC_SHORT = 4
UTZFMT_STYLE_LOCALIZED_GMT = 5
UTZFMT_STYLE_LOCALIZED_GMT_SHORT = 6
UTZFMT_STYLE_ISO_BASIC_SHORT = 7
UTZFMT_STYLE_ISO_BASIC_LOCAL_SHORT = 8
UTZFMT_STYLE_ISO_BASIC_FIXED = 9
UTZFMT_STYLE_ISO_BASIC_LOCAL_FIXED = 10
UTZFMT_STYLE_ISO_BASIC_FULL = 11
UTZFMT_STYLE_ISO_BASIC_LOCAL_FULL = 12
UTZFMT_STYLE_ISO_EXTENDED_FIXED = 13
UTZFMT_STYLE_ISO_EXTENDED_LOCAL_FIXED = 14
UTZFMT_STYLE_ISO_EXTENDED_FULL = 15
UTZFMT_STYLE_ISO_EXTENDED_LOCAL_FULL = 16
UTZFMT_STYLE_ZONE_ID = 17
UTZFMT_STYLE_ZONE_ID_SHORT = 18
UTZFMT_STYLE_EXEMPLAR_LOCATION = 19
UTimeZoneFormatTimeType = Int32
UTZFMT_TIME_TYPE_UNKNOWN = 0
UTZFMT_TIME_TYPE_STANDARD = 1
UTZFMT_TIME_TYPE_DAYLIGHT = 2
UTimeZoneNameType = Int32
UTZNM_UNKNOWN = 0
UTZNM_LONG_GENERIC = 1
UTZNM_LONG_STANDARD = 2
UTZNM_LONG_DAYLIGHT = 4
UTZNM_SHORT_GENERIC = 8
UTZNM_SHORT_STANDARD = 16
UTZNM_SHORT_DAYLIGHT = 32
UTZNM_EXEMPLAR_LOCATION = 64
UTimeZoneTransitionType = Int32
UCAL_TZ_TRANSITION_NEXT = 0
UCAL_TZ_TRANSITION_NEXT_INCLUSIVE = 1
UCAL_TZ_TRANSITION_PREVIOUS = 2
UCAL_TZ_TRANSITION_PREVIOUS_INCLUSIVE = 3
def _define_UTraceData():
    return CFUNCTYPE(Void,c_void_p,Int32,Int32,win32more.Foundation.PSTR,POINTER(SByte))
def _define_UTraceEntry():
    return CFUNCTYPE(Void,c_void_p,Int32)
def _define_UTraceExit():
    return CFUNCTYPE(Void,c_void_p,Int32,win32more.Foundation.PSTR,POINTER(SByte))
UTraceFunctionNumber = Int32
UTRACE_FUNCTION_START = 0
UTRACE_U_INIT = 0
UTRACE_U_CLEANUP = 1
UTRACE_CONVERSION_START = 4096
UTRACE_UCNV_OPEN = 4096
UTRACE_UCNV_OPEN_PACKAGE = 4097
UTRACE_UCNV_OPEN_ALGORITHMIC = 4098
UTRACE_UCNV_CLONE = 4099
UTRACE_UCNV_CLOSE = 4100
UTRACE_UCNV_FLUSH_CACHE = 4101
UTRACE_UCNV_LOAD = 4102
UTRACE_UCNV_UNLOAD = 4103
UTRACE_COLLATION_START = 8192
UTRACE_UCOL_OPEN = 8192
UTRACE_UCOL_CLOSE = 8193
UTRACE_UCOL_STRCOLL = 8194
UTRACE_UCOL_GET_SORTKEY = 8195
UTRACE_UCOL_GETLOCALE = 8196
UTRACE_UCOL_NEXTSORTKEYPART = 8197
UTRACE_UCOL_STRCOLLITER = 8198
UTRACE_UCOL_OPEN_FROM_SHORT_STRING = 8199
UTRACE_UCOL_STRCOLLUTF8 = 8200
UTRACE_UDATA_START = 12288
UTRACE_UDATA_RESOURCE = 12288
UTRACE_UDATA_BUNDLE = 12289
UTRACE_UDATA_DATA_FILE = 12290
UTRACE_UDATA_RES_FILE = 12291
UTraceLevel = Int32
UTRACE_OFF = -1
UTRACE_ERROR = 0
UTRACE_WARNING = 3
UTRACE_OPEN_CLOSE = 5
UTRACE_INFO = 7
UTRACE_VERBOSE = 9
UTransDirection = Int32
UTRANS_FORWARD = 0
UTRANS_REVERSE = 1
def _define_UTransPosition_head():
    class UTransPosition(Structure):
        pass
    return UTransPosition
def _define_UTransPosition():
    UTransPosition = win32more.Globalization.UTransPosition_head
    UTransPosition._fields_ = [
        ('contextStart', Int32),
        ('contextLimit', Int32),
        ('start', Int32),
        ('limit', Int32),
    ]
    return UTransPosition
UVerticalOrientation = Int32
U_VO_ROTATED = 0
U_VO_TRANSFORMED_ROTATED = 1
U_VO_TRANSFORMED_UPRIGHT = 2
U_VO_UPRIGHT = 3
UWordBreak = Int32
UBRK_WORD_NONE = 0
UBRK_WORD_NONE_LIMIT = 100
UBRK_WORD_NUMBER = 100
UBRK_WORD_NUMBER_LIMIT = 200
UBRK_WORD_LETTER = 200
UBRK_WORD_LETTER_LIMIT = 300
UBRK_WORD_KANA = 300
UBRK_WORD_KANA_LIMIT = 400
UBRK_WORD_IDEO = 400
UBRK_WORD_IDEO_LIMIT = 500
UWordBreakValues = Int32
U_WB_OTHER = 0
U_WB_ALETTER = 1
U_WB_FORMAT = 2
U_WB_KATAKANA = 3
U_WB_MIDLETTER = 4
U_WB_MIDNUM = 5
U_WB_NUMERIC = 6
U_WB_EXTENDNUMLET = 7
U_WB_CR = 8
U_WB_EXTEND = 9
U_WB_LF = 10
U_WB_MIDNUMLET = 11
U_WB_NEWLINE = 12
U_WB_REGIONAL_INDICATOR = 13
U_WB_HEBREW_LETTER = 14
U_WB_SINGLE_QUOTE = 15
U_WB_DOUBLE_QUOTE = 16
U_WB_E_BASE = 17
U_WB_E_BASE_GAZ = 18
U_WB_E_MODIFIER = 19
U_WB_GLUE_AFTER_ZWJ = 20
U_WB_ZWJ = 21
U_WB_WSEGSPACE = 22
WORDLIST_TYPE = Int32
WORDLIST_TYPE_IGNORE = 0
WORDLIST_TYPE_ADD = 1
WORDLIST_TYPE_EXCLUDE = 2
WORDLIST_TYPE_AUTOCORRECT = 3
__all__ = [
    "ALL_SERVICES",
    "ALL_SERVICE_TYPES",
    "C1_ALPHA",
    "C1_BLANK",
    "C1_CNTRL",
    "C1_DEFINED",
    "C1_DIGIT",
    "C1_LOWER",
    "C1_PUNCT",
    "C1_SPACE",
    "C1_UPPER",
    "C1_XDIGIT",
    "C2_ARABICNUMBER",
    "C2_BLOCKSEPARATOR",
    "C2_COMMONSEPARATOR",
    "C2_EUROPENUMBER",
    "C2_EUROPESEPARATOR",
    "C2_EUROPETERMINATOR",
    "C2_LEFTTORIGHT",
    "C2_NOTAPPLICABLE",
    "C2_OTHERNEUTRAL",
    "C2_RIGHTTOLEFT",
    "C2_SEGMENTSEPARATOR",
    "C2_WHITESPACE",
    "C3_ALPHA",
    "C3_DIACRITIC",
    "C3_FULLWIDTH",
    "C3_HALFWIDTH",
    "C3_HIGHSURROGATE",
    "C3_HIRAGANA",
    "C3_IDEOGRAPH",
    "C3_KASHIDA",
    "C3_KATAKANA",
    "C3_LEXICAL",
    "C3_LOWSURROGATE",
    "C3_NONSPACING",
    "C3_NOTAPPLICABLE",
    "C3_SYMBOL",
    "C3_VOWELMARK",
    "CALINFO_ENUMPROCA",
    "CALINFO_ENUMPROCEXA",
    "CALINFO_ENUMPROCEXEX",
    "CALINFO_ENUMPROCEXW",
    "CALINFO_ENUMPROCW",
    "CAL_GREGORIAN",
    "CAL_GREGORIAN_ARABIC",
    "CAL_GREGORIAN_ME_FRENCH",
    "CAL_GREGORIAN_US",
    "CAL_GREGORIAN_XLIT_ENGLISH",
    "CAL_GREGORIAN_XLIT_FRENCH",
    "CAL_HEBREW",
    "CAL_HIJRI",
    "CAL_ICALINTVALUE",
    "CAL_ITWODIGITYEARMAX",
    "CAL_IYEAROFFSETRANGE",
    "CAL_JAPAN",
    "CAL_KOREA",
    "CAL_NOUSEROVERRIDE",
    "CAL_PERSIAN",
    "CAL_RETURN_GENITIVE_NAMES",
    "CAL_RETURN_NUMBER",
    "CAL_SABBREVDAYNAME1",
    "CAL_SABBREVDAYNAME2",
    "CAL_SABBREVDAYNAME3",
    "CAL_SABBREVDAYNAME4",
    "CAL_SABBREVDAYNAME5",
    "CAL_SABBREVDAYNAME6",
    "CAL_SABBREVDAYNAME7",
    "CAL_SABBREVERASTRING",
    "CAL_SABBREVMONTHNAME1",
    "CAL_SABBREVMONTHNAME10",
    "CAL_SABBREVMONTHNAME11",
    "CAL_SABBREVMONTHNAME12",
    "CAL_SABBREVMONTHNAME13",
    "CAL_SABBREVMONTHNAME2",
    "CAL_SABBREVMONTHNAME3",
    "CAL_SABBREVMONTHNAME4",
    "CAL_SABBREVMONTHNAME5",
    "CAL_SABBREVMONTHNAME6",
    "CAL_SABBREVMONTHNAME7",
    "CAL_SABBREVMONTHNAME8",
    "CAL_SABBREVMONTHNAME9",
    "CAL_SCALNAME",
    "CAL_SDAYNAME1",
    "CAL_SDAYNAME2",
    "CAL_SDAYNAME3",
    "CAL_SDAYNAME4",
    "CAL_SDAYNAME5",
    "CAL_SDAYNAME6",
    "CAL_SDAYNAME7",
    "CAL_SENGLISHABBREVERANAME",
    "CAL_SENGLISHERANAME",
    "CAL_SERASTRING",
    "CAL_SJAPANESEERAFIRSTYEAR",
    "CAL_SLONGDATE",
    "CAL_SMONTHDAY",
    "CAL_SMONTHNAME1",
    "CAL_SMONTHNAME10",
    "CAL_SMONTHNAME11",
    "CAL_SMONTHNAME12",
    "CAL_SMONTHNAME13",
    "CAL_SMONTHNAME2",
    "CAL_SMONTHNAME3",
    "CAL_SMONTHNAME4",
    "CAL_SMONTHNAME5",
    "CAL_SMONTHNAME6",
    "CAL_SMONTHNAME7",
    "CAL_SMONTHNAME8",
    "CAL_SMONTHNAME9",
    "CAL_SRELATIVELONGDATE",
    "CAL_SSHORTDATE",
    "CAL_SSHORTESTDAYNAME1",
    "CAL_SSHORTESTDAYNAME2",
    "CAL_SSHORTESTDAYNAME3",
    "CAL_SSHORTESTDAYNAME4",
    "CAL_SSHORTESTDAYNAME5",
    "CAL_SSHORTESTDAYNAME6",
    "CAL_SSHORTESTDAYNAME7",
    "CAL_SYEARMONTH",
    "CAL_TAIWAN",
    "CAL_THAI",
    "CAL_UMALQURA",
    "CAL_USE_CP_ACP",
    "CANITER_SKIP_ZEROES",
    "CHARSETINFO",
    "CMLangConvertCharset",
    "CMLangString",
    "CMultiLanguage",
    "CODEPAGE_ENUMPROCA",
    "CODEPAGE_ENUMPROCW",
    "COMPARE_STRING",
    "COMPARE_STRING_FLAGS",
    "CORRECTIVE_ACTION",
    "CORRECTIVE_ACTION_DELETE",
    "CORRECTIVE_ACTION_GET_SUGGESTIONS",
    "CORRECTIVE_ACTION_NONE",
    "CORRECTIVE_ACTION_REPLACE",
    "CPINFO",
    "CPINFOEXA",
    "CPINFOEXW",
    "CPIOD_FORCE_PROMPT",
    "CPIOD_PEEK",
    "CP_ACP",
    "CP_INSTALLED",
    "CP_MACCP",
    "CP_OEMCP",
    "CP_SUPPORTED",
    "CP_SYMBOL",
    "CP_THREAD_ACP",
    "CP_UTF7",
    "CP_UTF8",
    "CSTR_EQUAL",
    "CSTR_GREATER_THAN",
    "CSTR_LESS_THAN",
    "CTRY_ALBANIA",
    "CTRY_ALGERIA",
    "CTRY_ARGENTINA",
    "CTRY_ARMENIA",
    "CTRY_AUSTRALIA",
    "CTRY_AUSTRIA",
    "CTRY_AZERBAIJAN",
    "CTRY_BAHRAIN",
    "CTRY_BELARUS",
    "CTRY_BELGIUM",
    "CTRY_BELIZE",
    "CTRY_BOLIVIA",
    "CTRY_BRAZIL",
    "CTRY_BRUNEI_DARUSSALAM",
    "CTRY_BULGARIA",
    "CTRY_CANADA",
    "CTRY_CARIBBEAN",
    "CTRY_CHILE",
    "CTRY_COLOMBIA",
    "CTRY_COSTA_RICA",
    "CTRY_CROATIA",
    "CTRY_CZECH",
    "CTRY_DEFAULT",
    "CTRY_DENMARK",
    "CTRY_DOMINICAN_REPUBLIC",
    "CTRY_ECUADOR",
    "CTRY_EGYPT",
    "CTRY_EL_SALVADOR",
    "CTRY_ESTONIA",
    "CTRY_FAEROE_ISLANDS",
    "CTRY_FINLAND",
    "CTRY_FRANCE",
    "CTRY_GEORGIA",
    "CTRY_GERMANY",
    "CTRY_GREECE",
    "CTRY_GUATEMALA",
    "CTRY_HONDURAS",
    "CTRY_HONG_KONG",
    "CTRY_HUNGARY",
    "CTRY_ICELAND",
    "CTRY_INDIA",
    "CTRY_INDONESIA",
    "CTRY_IRAN",
    "CTRY_IRAQ",
    "CTRY_IRELAND",
    "CTRY_ISRAEL",
    "CTRY_ITALY",
    "CTRY_JAMAICA",
    "CTRY_JAPAN",
    "CTRY_JORDAN",
    "CTRY_KAZAKSTAN",
    "CTRY_KENYA",
    "CTRY_KUWAIT",
    "CTRY_KYRGYZSTAN",
    "CTRY_LATVIA",
    "CTRY_LEBANON",
    "CTRY_LIBYA",
    "CTRY_LIECHTENSTEIN",
    "CTRY_LITHUANIA",
    "CTRY_LUXEMBOURG",
    "CTRY_MACAU",
    "CTRY_MACEDONIA",
    "CTRY_MALAYSIA",
    "CTRY_MALDIVES",
    "CTRY_MEXICO",
    "CTRY_MONACO",
    "CTRY_MONGOLIA",
    "CTRY_MOROCCO",
    "CTRY_NETHERLANDS",
    "CTRY_NEW_ZEALAND",
    "CTRY_NICARAGUA",
    "CTRY_NORWAY",
    "CTRY_OMAN",
    "CTRY_PAKISTAN",
    "CTRY_PANAMA",
    "CTRY_PARAGUAY",
    "CTRY_PERU",
    "CTRY_PHILIPPINES",
    "CTRY_POLAND",
    "CTRY_PORTUGAL",
    "CTRY_PRCHINA",
    "CTRY_PUERTO_RICO",
    "CTRY_QATAR",
    "CTRY_ROMANIA",
    "CTRY_RUSSIA",
    "CTRY_SAUDI_ARABIA",
    "CTRY_SERBIA",
    "CTRY_SINGAPORE",
    "CTRY_SLOVAK",
    "CTRY_SLOVENIA",
    "CTRY_SOUTH_AFRICA",
    "CTRY_SOUTH_KOREA",
    "CTRY_SPAIN",
    "CTRY_SWEDEN",
    "CTRY_SWITZERLAND",
    "CTRY_SYRIA",
    "CTRY_TAIWAN",
    "CTRY_TATARSTAN",
    "CTRY_THAILAND",
    "CTRY_TRINIDAD_Y_TOBAGO",
    "CTRY_TUNISIA",
    "CTRY_TURKEY",
    "CTRY_UAE",
    "CTRY_UKRAINE",
    "CTRY_UNITED_KINGDOM",
    "CTRY_UNITED_STATES",
    "CTRY_URUGUAY",
    "CTRY_UZBEKISTAN",
    "CTRY_VENEZUELA",
    "CTRY_VIET_NAM",
    "CTRY_YEMEN",
    "CTRY_ZIMBABWE",
    "CT_CTYPE1",
    "CT_CTYPE2",
    "CT_CTYPE3",
    "CURRENCYFMTA",
    "CURRENCYFMTW",
    "CompareStringA",
    "CompareStringEx",
    "CompareStringOrdinal",
    "CompareStringW",
    "ConvertDefaultLocale",
    "DATEFMT_ENUMPROCA",
    "DATEFMT_ENUMPROCEXA",
    "DATEFMT_ENUMPROCEXEX",
    "DATEFMT_ENUMPROCEXW",
    "DATEFMT_ENUMPROCW",
    "DATE_AUTOLAYOUT",
    "DATE_LONGDATE",
    "DATE_LTRREADING",
    "DATE_MONTHDAY",
    "DATE_RTLREADING",
    "DATE_SHORTDATE",
    "DATE_USE_ALT_CALENDAR",
    "DATE_YEARMONTH",
    "DetectEncodingInfo",
    "ELS_GUID_LANGUAGE_DETECTION",
    "ELS_GUID_SCRIPT_DETECTION",
    "ELS_GUID_TRANSLITERATION_BENGALI_TO_LATIN",
    "ELS_GUID_TRANSLITERATION_CYRILLIC_TO_LATIN",
    "ELS_GUID_TRANSLITERATION_DEVANAGARI_TO_LATIN",
    "ELS_GUID_TRANSLITERATION_HANGUL_DECOMPOSITION",
    "ELS_GUID_TRANSLITERATION_HANS_TO_HANT",
    "ELS_GUID_TRANSLITERATION_HANT_TO_HANS",
    "ELS_GUID_TRANSLITERATION_MALAYALAM_TO_LATIN",
    "ENUMTEXTMETRICA",
    "ENUMTEXTMETRICW",
    "ENUM_ALL_CALENDARS",
    "ENUM_DATE_FORMATS_FLAGS",
    "ENUM_SYSTEM_CODE_PAGES_FLAGS",
    "ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS",
    "EnumCalendarInfoA",
    "EnumCalendarInfoExA",
    "EnumCalendarInfoExEx",
    "EnumCalendarInfoExW",
    "EnumCalendarInfoW",
    "EnumDateFormatsA",
    "EnumDateFormatsExA",
    "EnumDateFormatsExEx",
    "EnumDateFormatsExW",
    "EnumDateFormatsW",
    "EnumLanguageGroupLocalesA",
    "EnumLanguageGroupLocalesW",
    "EnumSystemCodePagesA",
    "EnumSystemCodePagesW",
    "EnumSystemGeoID",
    "EnumSystemGeoNames",
    "EnumSystemLanguageGroupsA",
    "EnumSystemLanguageGroupsW",
    "EnumSystemLocalesA",
    "EnumSystemLocalesEx",
    "EnumSystemLocalesW",
    "EnumTimeFormatsA",
    "EnumTimeFormatsEx",
    "EnumTimeFormatsW",
    "EnumUILanguagesA",
    "EnumUILanguagesW",
    "FILEMUIINFO",
    "FIND_ENDSWITH",
    "FIND_FROMEND",
    "FIND_FROMSTART",
    "FIND_STARTSWITH",
    "FOLD_STRING_MAP_FLAGS",
    "FONTSIGNATURE",
    "FindNLSString",
    "FindNLSStringEx",
    "FindStringOrdinal",
    "FoldStringA",
    "FoldStringW",
    "GEOCLASS_ALL",
    "GEOCLASS_NATION",
    "GEOCLASS_REGION",
    "GEOID_NOT_AVAILABLE",
    "GEO_CURRENCYCODE",
    "GEO_CURRENCYSYMBOL",
    "GEO_DIALINGCODE",
    "GEO_ENUMNAMEPROC",
    "GEO_ENUMPROC",
    "GEO_FRIENDLYNAME",
    "GEO_ID",
    "GEO_ISO2",
    "GEO_ISO3",
    "GEO_ISO_UN_NUMBER",
    "GEO_LATITUDE",
    "GEO_LCID",
    "GEO_LONGITUDE",
    "GEO_NAME",
    "GEO_NATION",
    "GEO_OFFICIALLANGUAGES",
    "GEO_OFFICIALNAME",
    "GEO_PARENT",
    "GEO_RFC1766",
    "GEO_TIMEZONES",
    "GOFFSET",
    "GSS_ALLOW_INHERITED_COMMON",
    "GetACP",
    "GetCPInfo",
    "GetCPInfoExA",
    "GetCPInfoExW",
    "GetCalendarInfoA",
    "GetCalendarInfoEx",
    "GetCalendarInfoW",
    "GetCurrencyFormatA",
    "GetCurrencyFormatEx",
    "GetCurrencyFormatW",
    "GetDateFormatA",
    "GetDateFormatEx",
    "GetDateFormatW",
    "GetDistanceOfClosestLanguageInList",
    "GetDurationFormat",
    "GetDurationFormatEx",
    "GetFileMUIInfo",
    "GetFileMUIPath",
    "GetGeoInfoA",
    "GetGeoInfoEx",
    "GetGeoInfoW",
    "GetLocaleInfoA",
    "GetLocaleInfoEx",
    "GetLocaleInfoW",
    "GetNLSVersion",
    "GetNLSVersionEx",
    "GetNumberFormatA",
    "GetNumberFormatEx",
    "GetNumberFormatW",
    "GetOEMCP",
    "GetProcessPreferredUILanguages",
    "GetStringScripts",
    "GetStringTypeA",
    "GetStringTypeExA",
    "GetStringTypeExW",
    "GetStringTypeW",
    "GetSystemDefaultLCID",
    "GetSystemDefaultLangID",
    "GetSystemDefaultLocaleName",
    "GetSystemDefaultUILanguage",
    "GetSystemPreferredUILanguages",
    "GetTextCharset",
    "GetTextCharsetInfo",
    "GetThreadLocale",
    "GetThreadPreferredUILanguages",
    "GetThreadUILanguage",
    "GetTimeFormatA",
    "GetTimeFormatEx",
    "GetTimeFormatW",
    "GetUILanguageInfo",
    "GetUserDefaultGeoName",
    "GetUserDefaultLCID",
    "GetUserDefaultLangID",
    "GetUserDefaultLocaleName",
    "GetUserDefaultUILanguage",
    "GetUserGeoID",
    "GetUserPreferredUILanguages",
    "HIGHLEVEL_SERVICE_TYPES",
    "HIGH_SURROGATE_END",
    "HIGH_SURROGATE_START",
    "HIMC",
    "HIMCC",
    "HSAVEDUILANGUAGES",
    "IComprehensiveSpellCheckProvider",
    "IDN_ALLOW_UNASSIGNED",
    "IDN_EMAIL_ADDRESS",
    "IDN_RAW_PUNYCODE",
    "IDN_USE_STD3_ASCII_RULES",
    "IEnumCodePage",
    "IEnumRfc1766",
    "IEnumScript",
    "IEnumSpellingError",
    "IMLangCodePages",
    "IMLangConvertCharset",
    "IMLangFontLink",
    "IMLangFontLink2",
    "IMLangLineBreakConsole",
    "IMLangString",
    "IMLangStringAStr",
    "IMLangStringBufA",
    "IMLangStringBufW",
    "IMLangStringWStr",
    "IMultiLanguage",
    "IMultiLanguage2",
    "IMultiLanguage3",
    "IOptionDescription",
    "IS_TEXT_UNICODE_ASCII16",
    "IS_TEXT_UNICODE_CONTROLS",
    "IS_TEXT_UNICODE_ILLEGAL_CHARS",
    "IS_TEXT_UNICODE_NOT_ASCII_MASK",
    "IS_TEXT_UNICODE_NOT_UNICODE_MASK",
    "IS_TEXT_UNICODE_NULL_BYTES",
    "IS_TEXT_UNICODE_ODD_LENGTH",
    "IS_TEXT_UNICODE_RESULT",
    "IS_TEXT_UNICODE_REVERSE_ASCII16",
    "IS_TEXT_UNICODE_REVERSE_CONTROLS",
    "IS_TEXT_UNICODE_REVERSE_MASK",
    "IS_TEXT_UNICODE_REVERSE_SIGNATURE",
    "IS_TEXT_UNICODE_REVERSE_STATISTICS",
    "IS_TEXT_UNICODE_SIGNATURE",
    "IS_TEXT_UNICODE_STATISTICS",
    "IS_TEXT_UNICODE_UNICODE_MASK",
    "IS_VALID_LOCALE_FLAGS",
    "ISpellCheckProvider",
    "ISpellCheckProviderFactory",
    "ISpellChecker",
    "ISpellChecker2",
    "ISpellCheckerChangedEventHandler",
    "ISpellCheckerFactory",
    "ISpellingError",
    "IUserDictionariesRegistrar",
    "IdnToAscii",
    "IdnToNameprepUnicode",
    "IdnToUnicode",
    "IsDBCSLeadByte",
    "IsDBCSLeadByteEx",
    "IsNLSDefinedString",
    "IsNormalizedString",
    "IsTextUnicode",
    "IsValidCodePage",
    "IsValidLanguageGroup",
    "IsValidLocale",
    "IsValidLocaleName",
    "IsValidNLSVersion",
    "IsWellFormedTag",
    "LANGGROUPLOCALE_ENUMPROCA",
    "LANGGROUPLOCALE_ENUMPROCW",
    "LANGUAGEGROUP_ENUMPROCA",
    "LANGUAGEGROUP_ENUMPROCW",
    "LCIDToLocaleName",
    "LCID_ALTERNATE_SORTS",
    "LCID_INSTALLED",
    "LCID_SUPPORTED",
    "LCMAP_BYTEREV",
    "LCMAP_FULLWIDTH",
    "LCMAP_HALFWIDTH",
    "LCMAP_HASH",
    "LCMAP_HIRAGANA",
    "LCMAP_KATAKANA",
    "LCMAP_LINGUISTIC_CASING",
    "LCMAP_LOWERCASE",
    "LCMAP_SIMPLIFIED_CHINESE",
    "LCMAP_SORTHANDLE",
    "LCMAP_SORTKEY",
    "LCMAP_TITLECASE",
    "LCMAP_TRADITIONAL_CHINESE",
    "LCMAP_UPPERCASE",
    "LCMapStringA",
    "LCMapStringEx",
    "LCMapStringW",
    "LGRPID_ARABIC",
    "LGRPID_ARMENIAN",
    "LGRPID_BALTIC",
    "LGRPID_CENTRAL_EUROPE",
    "LGRPID_CYRILLIC",
    "LGRPID_GEORGIAN",
    "LGRPID_GREEK",
    "LGRPID_HEBREW",
    "LGRPID_INDIC",
    "LGRPID_INSTALLED",
    "LGRPID_JAPANESE",
    "LGRPID_KOREAN",
    "LGRPID_SIMPLIFIED_CHINESE",
    "LGRPID_SUPPORTED",
    "LGRPID_THAI",
    "LGRPID_TRADITIONAL_CHINESE",
    "LGRPID_TURKIC",
    "LGRPID_TURKISH",
    "LGRPID_VIETNAMESE",
    "LGRPID_WESTERN_EUROPE",
    "LINGUISTIC_IGNORECASE",
    "LINGUISTIC_IGNOREDIACRITIC",
    "LOCALESIGNATURE",
    "LOCALE_ALL",
    "LOCALE_ALLOW_NEUTRAL_NAMES",
    "LOCALE_ALTERNATE_SORTS",
    "LOCALE_ENUMPROCA",
    "LOCALE_ENUMPROCEX",
    "LOCALE_ENUMPROCW",
    "LOCALE_FONTSIGNATURE",
    "LOCALE_ICALENDARTYPE",
    "LOCALE_ICENTURY",
    "LOCALE_ICONSTRUCTEDLOCALE",
    "LOCALE_ICOUNTRY",
    "LOCALE_ICURRDIGITS",
    "LOCALE_ICURRENCY",
    "LOCALE_IDATE",
    "LOCALE_IDAYLZERO",
    "LOCALE_IDEFAULTANSICODEPAGE",
    "LOCALE_IDEFAULTCODEPAGE",
    "LOCALE_IDEFAULTCOUNTRY",
    "LOCALE_IDEFAULTEBCDICCODEPAGE",
    "LOCALE_IDEFAULTLANGUAGE",
    "LOCALE_IDEFAULTMACCODEPAGE",
    "LOCALE_IDIALINGCODE",
    "LOCALE_IDIGITS",
    "LOCALE_IDIGITSUBSTITUTION",
    "LOCALE_IFIRSTDAYOFWEEK",
    "LOCALE_IFIRSTWEEKOFYEAR",
    "LOCALE_IGEOID",
    "LOCALE_IINTLCURRDIGITS",
    "LOCALE_ILANGUAGE",
    "LOCALE_ILDATE",
    "LOCALE_ILZERO",
    "LOCALE_IMEASURE",
    "LOCALE_IMONLZERO",
    "LOCALE_INEGATIVEPERCENT",
    "LOCALE_INEGCURR",
    "LOCALE_INEGNUMBER",
    "LOCALE_INEGSEPBYSPACE",
    "LOCALE_INEGSIGNPOSN",
    "LOCALE_INEGSYMPRECEDES",
    "LOCALE_INEUTRAL",
    "LOCALE_IOPTIONALCALENDAR",
    "LOCALE_IPAPERSIZE",
    "LOCALE_IPOSITIVEPERCENT",
    "LOCALE_IPOSSEPBYSPACE",
    "LOCALE_IPOSSIGNPOSN",
    "LOCALE_IPOSSYMPRECEDES",
    "LOCALE_IREADINGLAYOUT",
    "LOCALE_ITIME",
    "LOCALE_ITIMEMARKPOSN",
    "LOCALE_ITLZERO",
    "LOCALE_IUSEUTF8LEGACYACP",
    "LOCALE_IUSEUTF8LEGACYOEMCP",
    "LOCALE_NAME_INVARIANT",
    "LOCALE_NAME_SYSTEM_DEFAULT",
    "LOCALE_NEUTRALDATA",
    "LOCALE_NOUSEROVERRIDE",
    "LOCALE_REPLACEMENT",
    "LOCALE_RETURN_GENITIVE_NAMES",
    "LOCALE_RETURN_NUMBER",
    "LOCALE_S1159",
    "LOCALE_S2359",
    "LOCALE_SABBREVCTRYNAME",
    "LOCALE_SABBREVDAYNAME1",
    "LOCALE_SABBREVDAYNAME2",
    "LOCALE_SABBREVDAYNAME3",
    "LOCALE_SABBREVDAYNAME4",
    "LOCALE_SABBREVDAYNAME5",
    "LOCALE_SABBREVDAYNAME6",
    "LOCALE_SABBREVDAYNAME7",
    "LOCALE_SABBREVLANGNAME",
    "LOCALE_SABBREVMONTHNAME1",
    "LOCALE_SABBREVMONTHNAME10",
    "LOCALE_SABBREVMONTHNAME11",
    "LOCALE_SABBREVMONTHNAME12",
    "LOCALE_SABBREVMONTHNAME13",
    "LOCALE_SABBREVMONTHNAME2",
    "LOCALE_SABBREVMONTHNAME3",
    "LOCALE_SABBREVMONTHNAME4",
    "LOCALE_SABBREVMONTHNAME5",
    "LOCALE_SABBREVMONTHNAME6",
    "LOCALE_SABBREVMONTHNAME7",
    "LOCALE_SABBREVMONTHNAME8",
    "LOCALE_SABBREVMONTHNAME9",
    "LOCALE_SAM",
    "LOCALE_SCONSOLEFALLBACKNAME",
    "LOCALE_SCOUNTRY",
    "LOCALE_SCURRENCY",
    "LOCALE_SDATE",
    "LOCALE_SDAYNAME1",
    "LOCALE_SDAYNAME2",
    "LOCALE_SDAYNAME3",
    "LOCALE_SDAYNAME4",
    "LOCALE_SDAYNAME5",
    "LOCALE_SDAYNAME6",
    "LOCALE_SDAYNAME7",
    "LOCALE_SDECIMAL",
    "LOCALE_SDURATION",
    "LOCALE_SENGCOUNTRY",
    "LOCALE_SENGCURRNAME",
    "LOCALE_SENGLANGUAGE",
    "LOCALE_SENGLISHCOUNTRYNAME",
    "LOCALE_SENGLISHDISPLAYNAME",
    "LOCALE_SENGLISHLANGUAGENAME",
    "LOCALE_SGROUPING",
    "LOCALE_SINTLSYMBOL",
    "LOCALE_SISO3166CTRYNAME",
    "LOCALE_SISO3166CTRYNAME2",
    "LOCALE_SISO639LANGNAME",
    "LOCALE_SISO639LANGNAME2",
    "LOCALE_SKEYBOARDSTOINSTALL",
    "LOCALE_SLANGDISPLAYNAME",
    "LOCALE_SLANGUAGE",
    "LOCALE_SLIST",
    "LOCALE_SLOCALIZEDCOUNTRYNAME",
    "LOCALE_SLOCALIZEDDISPLAYNAME",
    "LOCALE_SLOCALIZEDLANGUAGENAME",
    "LOCALE_SLONGDATE",
    "LOCALE_SMONDECIMALSEP",
    "LOCALE_SMONGROUPING",
    "LOCALE_SMONTHDAY",
    "LOCALE_SMONTHNAME1",
    "LOCALE_SMONTHNAME10",
    "LOCALE_SMONTHNAME11",
    "LOCALE_SMONTHNAME12",
    "LOCALE_SMONTHNAME13",
    "LOCALE_SMONTHNAME2",
    "LOCALE_SMONTHNAME3",
    "LOCALE_SMONTHNAME4",
    "LOCALE_SMONTHNAME5",
    "LOCALE_SMONTHNAME6",
    "LOCALE_SMONTHNAME7",
    "LOCALE_SMONTHNAME8",
    "LOCALE_SMONTHNAME9",
    "LOCALE_SMONTHOUSANDSEP",
    "LOCALE_SNAME",
    "LOCALE_SNAN",
    "LOCALE_SNATIVECOUNTRYNAME",
    "LOCALE_SNATIVECTRYNAME",
    "LOCALE_SNATIVECURRNAME",
    "LOCALE_SNATIVEDIGITS",
    "LOCALE_SNATIVEDISPLAYNAME",
    "LOCALE_SNATIVELANGNAME",
    "LOCALE_SNATIVELANGUAGENAME",
    "LOCALE_SNEGATIVESIGN",
    "LOCALE_SNEGINFINITY",
    "LOCALE_SOPENTYPELANGUAGETAG",
    "LOCALE_SPARENT",
    "LOCALE_SPECIFICDATA",
    "LOCALE_SPERCENT",
    "LOCALE_SPERMILLE",
    "LOCALE_SPM",
    "LOCALE_SPOSINFINITY",
    "LOCALE_SPOSITIVESIGN",
    "LOCALE_SRELATIVELONGDATE",
    "LOCALE_SSCRIPTS",
    "LOCALE_SSHORTDATE",
    "LOCALE_SSHORTESTAM",
    "LOCALE_SSHORTESTDAYNAME1",
    "LOCALE_SSHORTESTDAYNAME2",
    "LOCALE_SSHORTESTDAYNAME3",
    "LOCALE_SSHORTESTDAYNAME4",
    "LOCALE_SSHORTESTDAYNAME5",
    "LOCALE_SSHORTESTDAYNAME6",
    "LOCALE_SSHORTESTDAYNAME7",
    "LOCALE_SSHORTESTPM",
    "LOCALE_SSHORTTIME",
    "LOCALE_SSORTLOCALE",
    "LOCALE_SSORTNAME",
    "LOCALE_STHOUSAND",
    "LOCALE_STIME",
    "LOCALE_STIMEFORMAT",
    "LOCALE_SUPPLEMENTAL",
    "LOCALE_SYEARMONTH",
    "LOCALE_USE_CP_ACP",
    "LOCALE_WINDOWS",
    "LOWLEVEL_SERVICE_TYPES",
    "LOW_SURROGATE_END",
    "LOW_SURROGATE_START",
    "LocaleNameToLCID",
    "MAPPING_DATA_RANGE",
    "MAPPING_ENUM_OPTIONS",
    "MAPPING_OPTIONS",
    "MAPPING_PROPERTY_BAG",
    "MAPPING_SERVICE_INFO",
    "MAP_COMPOSITE",
    "MAP_EXPAND_LIGATURES",
    "MAP_FOLDCZONE",
    "MAP_FOLDDIGITS",
    "MAP_PRECOMPOSED",
    "MAX_DEFAULTCHAR",
    "MAX_LEADBYTES",
    "MAX_LOCALE_NAME",
    "MAX_MIMECP_NAME",
    "MAX_MIMECSET_NAME",
    "MAX_MIMEFACE_NAME",
    "MAX_RFC1766_NAME",
    "MAX_SCRIPT_NAME",
    "MB_COMPOSITE",
    "MB_ERR_INVALID_CHARS",
    "MB_PRECOMPOSED",
    "MB_USEGLYPHCHARS",
    "MIMECONTF",
    "MIMECONTF_BROWSER",
    "MIMECONTF_EXPORT",
    "MIMECONTF_IMPORT",
    "MIMECONTF_MAILNEWS",
    "MIMECONTF_MIME_IE4",
    "MIMECONTF_MIME_LATEST",
    "MIMECONTF_MIME_REGISTRY",
    "MIMECONTF_MINIMAL",
    "MIMECONTF_PRIVCONVERTER",
    "MIMECONTF_SAVABLE_BROWSER",
    "MIMECONTF_SAVABLE_MAILNEWS",
    "MIMECONTF_VALID",
    "MIMECONTF_VALID_NLS",
    "MIMECPINFO",
    "MIMECSETINFO",
    "MIN_SPELLING_NTDDI",
    "MLCONVCHAR",
    "MLCONVCHARF_AUTODETECT",
    "MLCONVCHARF_DETECTJPN",
    "MLCONVCHARF_ENTITIZE",
    "MLCONVCHARF_NAME_ENTITIZE",
    "MLCONVCHARF_NCR_ENTITIZE",
    "MLCONVCHARF_NOBESTFITCHARS",
    "MLCONVCHARF_USEDEFCHAR",
    "MLCP",
    "MLDETECTCP",
    "MLDETECTCP_7BIT",
    "MLDETECTCP_8BIT",
    "MLDETECTCP_DBCS",
    "MLDETECTCP_HTML",
    "MLDETECTCP_NONE",
    "MLDETECTCP_NUMBER",
    "MLDETECTF_BROWSER",
    "MLDETECTF_EURO_UTF8",
    "MLDETECTF_FILTER_SPECIALCHAR",
    "MLDETECTF_MAILNEWS",
    "MLDETECTF_PREFERRED_ONLY",
    "MLDETECTF_PRESERVE_ORDER",
    "MLDETECTF_VALID",
    "MLDETECTF_VALID_NLS",
    "MLSTR_FLAGS",
    "MLSTR_READ",
    "MLSTR_WRITE",
    "MUI_COMPLEX_SCRIPT_FILTER",
    "MUI_CONSOLE_FILTER",
    "MUI_FILEINFO_VERSION",
    "MUI_FILETYPE_LANGUAGE_NEUTRAL_MAIN",
    "MUI_FILETYPE_LANGUAGE_NEUTRAL_MUI",
    "MUI_FILETYPE_NOT_LANGUAGE_NEUTRAL",
    "MUI_FORMAT_INF_COMPAT",
    "MUI_FORMAT_REG_COMPAT",
    "MUI_FULL_LANGUAGE",
    "MUI_IMMUTABLE_LOOKUP",
    "MUI_LANGUAGE_EXACT",
    "MUI_LANGUAGE_ID",
    "MUI_LANGUAGE_INSTALLED",
    "MUI_LANGUAGE_LICENSED",
    "MUI_LANGUAGE_NAME",
    "MUI_LANG_NEUTRAL_PE_FILE",
    "MUI_LIP_LANGUAGE",
    "MUI_MACHINE_LANGUAGE_SETTINGS",
    "MUI_MERGE_SYSTEM_FALLBACK",
    "MUI_MERGE_USER_FALLBACK",
    "MUI_NON_LANG_NEUTRAL_FILE",
    "MUI_PARTIAL_LANGUAGE",
    "MUI_QUERY_CHECKSUM",
    "MUI_QUERY_LANGUAGE_NAME",
    "MUI_QUERY_RESOURCE_TYPES",
    "MUI_QUERY_TYPE",
    "MUI_RESET_FILTERS",
    "MUI_SKIP_STRING_CACHE",
    "MUI_THREAD_LANGUAGES",
    "MUI_USER_PREFERRED_UI_LANGUAGES",
    "MUI_USE_INSTALLED_LANGUAGES",
    "MUI_USE_SEARCH_ALL_LANGUAGES",
    "MUI_VERIFY_FILE_EXISTS",
    "MULTI_BYTE_TO_WIDE_CHAR_FLAGS",
    "MappingDoAction",
    "MappingFreePropertyBag",
    "MappingFreeServices",
    "MappingGetServices",
    "MappingRecognizeText",
    "MultiByteToWideChar",
    "NEWTEXTMETRICEXA",
    "NEWTEXTMETRICEXW",
    "NLSVERSIONINFO",
    "NLSVERSIONINFOEX",
    "NLS_CP_CPINFO",
    "NLS_CP_MBTOWC",
    "NLS_CP_WCTOMB",
    "NORM_FORM",
    "NORM_FORM_NormalizationC",
    "NORM_FORM_NormalizationD",
    "NORM_FORM_NormalizationKC",
    "NORM_FORM_NormalizationKD",
    "NORM_FORM_NormalizationOther",
    "NORM_IGNORECASE",
    "NORM_IGNOREKANATYPE",
    "NORM_IGNORENONSPACE",
    "NORM_IGNORESYMBOLS",
    "NORM_IGNOREWIDTH",
    "NORM_LINGUISTIC_CASING",
    "NUMBERFMTA",
    "NUMBERFMTW",
    "NUMSYS_NAME_CAPACITY",
    "NormalizeString",
    "NotifyUILanguageChange",
    "OFFLINE_SERVICES",
    "ONLINE_SERVICES",
    "OPENTYPE_FEATURE_RECORD",
    "PFN_MAPPINGCALLBACKPROC",
    "RFC1766INFO",
    "ResolveLocaleName",
    "RestoreThreadPreferredUILanguages",
    "SCRIPTCONTF",
    "SCRIPTCONTF_FIXED_FONT",
    "SCRIPTCONTF_PROPORTIONAL_FONT",
    "SCRIPTCONTF_SCRIPT_HIDE",
    "SCRIPTCONTF_SCRIPT_SYSTEM",
    "SCRIPTCONTF_SCRIPT_USER",
    "SCRIPTCONTF_sidArabic",
    "SCRIPTCONTF_sidArmenian",
    "SCRIPTCONTF_sidAsciiLatin",
    "SCRIPTCONTF_sidAsciiSym",
    "SCRIPTCONTF_sidBengali",
    "SCRIPTCONTF_sidBopomofo",
    "SCRIPTCONTF_sidBraille",
    "SCRIPTCONTF_sidBurmese",
    "SCRIPTCONTF_sidCanSyllabic",
    "SCRIPTCONTF_sidCherokee",
    "SCRIPTCONTF_sidCyrillic",
    "SCRIPTCONTF_sidDefault",
    "SCRIPTCONTF_sidDevanagari",
    "SCRIPTCONTF_sidEthiopic",
    "SCRIPTCONTF_sidFEFirst",
    "SCRIPTCONTF_sidFELast",
    "SCRIPTCONTF_sidGeorgian",
    "SCRIPTCONTF_sidGreek",
    "SCRIPTCONTF_sidGujarati",
    "SCRIPTCONTF_sidGurmukhi",
    "SCRIPTCONTF_sidHan",
    "SCRIPTCONTF_sidHangul",
    "SCRIPTCONTF_sidHebrew",
    "SCRIPTCONTF_sidKana",
    "SCRIPTCONTF_sidKannada",
    "SCRIPTCONTF_sidKhmer",
    "SCRIPTCONTF_sidLao",
    "SCRIPTCONTF_sidLatin",
    "SCRIPTCONTF_sidLim",
    "SCRIPTCONTF_sidMalayalam",
    "SCRIPTCONTF_sidMerge",
    "SCRIPTCONTF_sidMongolian",
    "SCRIPTCONTF_sidOgham",
    "SCRIPTCONTF_sidOriya",
    "SCRIPTCONTF_sidRunic",
    "SCRIPTCONTF_sidSinhala",
    "SCRIPTCONTF_sidSyriac",
    "SCRIPTCONTF_sidTamil",
    "SCRIPTCONTF_sidTelugu",
    "SCRIPTCONTF_sidThaana",
    "SCRIPTCONTF_sidThai",
    "SCRIPTCONTF_sidTibetan",
    "SCRIPTCONTF_sidUserDefined",
    "SCRIPTCONTF_sidYi",
    "SCRIPTFONTCONTF",
    "SCRIPTFONTINFO",
    "SCRIPTINFO",
    "SCRIPT_ANALYSIS",
    "SCRIPT_CHARPROP",
    "SCRIPT_CONTROL",
    "SCRIPT_DIGITSUBSTITUTE",
    "SCRIPT_DIGITSUBSTITUTE_CONTEXT",
    "SCRIPT_DIGITSUBSTITUTE_NATIONAL",
    "SCRIPT_DIGITSUBSTITUTE_NONE",
    "SCRIPT_DIGITSUBSTITUTE_TRADITIONAL",
    "SCRIPT_FONTPROPERTIES",
    "SCRIPT_GLYPHPROP",
    "SCRIPT_IS_COMPLEX_FLAGS",
    "SCRIPT_ITEM",
    "SCRIPT_JUSTIFY",
    "SCRIPT_JUSTIFY_ARABIC_ALEF",
    "SCRIPT_JUSTIFY_ARABIC_BA",
    "SCRIPT_JUSTIFY_ARABIC_BARA",
    "SCRIPT_JUSTIFY_ARABIC_BLANK",
    "SCRIPT_JUSTIFY_ARABIC_HA",
    "SCRIPT_JUSTIFY_ARABIC_KASHIDA",
    "SCRIPT_JUSTIFY_ARABIC_NORMAL",
    "SCRIPT_JUSTIFY_ARABIC_RA",
    "SCRIPT_JUSTIFY_ARABIC_SEEN",
    "SCRIPT_JUSTIFY_ARABIC_SEEN_M",
    "SCRIPT_JUSTIFY_BLANK",
    "SCRIPT_JUSTIFY_CHARACTER",
    "SCRIPT_JUSTIFY_NONE",
    "SCRIPT_JUSTIFY_RESERVED1",
    "SCRIPT_JUSTIFY_RESERVED2",
    "SCRIPT_JUSTIFY_RESERVED3",
    "SCRIPT_LOGATTR",
    "SCRIPT_PROPERTIES",
    "SCRIPT_STATE",
    "SCRIPT_TABDEF",
    "SCRIPT_TAG_UNKNOWN",
    "SCRIPT_UNDEFINED",
    "SCRIPT_VISATTR",
    "SGCM_RTL",
    "SIC_ASCIIDIGIT",
    "SIC_COMPLEX",
    "SIC_NEUTRAL",
    "SORTING_PARADIGM_ICU",
    "SORTING_PARADIGM_NLS",
    "SORT_DIGITSASNUMBERS",
    "SORT_STRINGSORT",
    "SSA_BREAK",
    "SSA_CLIP",
    "SSA_DONTGLYPH",
    "SSA_DZWG",
    "SSA_FALLBACK",
    "SSA_FIT",
    "SSA_FULLMEASURE",
    "SSA_GCP",
    "SSA_GLYPHS",
    "SSA_HIDEHOTKEY",
    "SSA_HOTKEY",
    "SSA_HOTKEYONLY",
    "SSA_LAYOUTRTL",
    "SSA_LINK",
    "SSA_LPKANSIFALLBACK",
    "SSA_METAFILE",
    "SSA_NOKASHIDA",
    "SSA_PASSWORD",
    "SSA_PIDX",
    "SSA_RTL",
    "SSA_TAB",
    "SYSGEOCLASS",
    "SYSGEOTYPE",
    "SYSNLS_FUNCTION",
    "ScriptApplyDigitSubstitution",
    "ScriptApplyLogicalWidth",
    "ScriptBreak",
    "ScriptCPtoX",
    "ScriptCacheGetHeight",
    "ScriptFreeCache",
    "ScriptGetCMap",
    "ScriptGetFontAlternateGlyphs",
    "ScriptGetFontFeatureTags",
    "ScriptGetFontLanguageTags",
    "ScriptGetFontProperties",
    "ScriptGetFontScriptTags",
    "ScriptGetGlyphABCWidth",
    "ScriptGetLogicalWidths",
    "ScriptGetProperties",
    "ScriptIsComplex",
    "ScriptItemize",
    "ScriptItemizeOpenType",
    "ScriptJustify",
    "ScriptLayout",
    "ScriptPlace",
    "ScriptPlaceOpenType",
    "ScriptPositionSingleGlyph",
    "ScriptRecordDigitSubstitution",
    "ScriptShape",
    "ScriptShapeOpenType",
    "ScriptStringAnalyse",
    "ScriptStringCPtoX",
    "ScriptStringFree",
    "ScriptStringGetLogicalWidths",
    "ScriptStringGetOrder",
    "ScriptStringOut",
    "ScriptStringValidate",
    "ScriptStringXtoCP",
    "ScriptString_pLogAttr",
    "ScriptString_pSize",
    "ScriptString_pcOutChars",
    "ScriptSubstituteSingleGlyph",
    "ScriptTextOut",
    "ScriptXtoCP",
    "SetCalendarInfoA",
    "SetCalendarInfoW",
    "SetLocaleInfoA",
    "SetLocaleInfoW",
    "SetProcessPreferredUILanguages",
    "SetThreadLocale",
    "SetThreadPreferredUILanguages",
    "SetThreadPreferredUILanguages2",
    "SetThreadUILanguage",
    "SetUserGeoID",
    "SetUserGeoName",
    "SpellCheckerFactory",
    "TCI_SRCCHARSET",
    "TCI_SRCCODEPAGE",
    "TCI_SRCFONTSIG",
    "TCI_SRCLOCALE",
    "TEXTRANGE_PROPERTIES",
    "TIMEFMT_ENUMPROCA",
    "TIMEFMT_ENUMPROCEX",
    "TIMEFMT_ENUMPROCW",
    "TIME_FORCE24HOURFORMAT",
    "TIME_FORMAT_FLAGS",
    "TIME_NOMINUTESORSECONDS",
    "TIME_NOSECONDS",
    "TIME_NOTIMEMARKER",
    "TRANSLATE_CHARSET_INFO_FLAGS",
    "TranslateCharsetInfo",
    "U16_MAX_LENGTH",
    "U8_LEAD3_T1_BITS",
    "U8_LEAD4_T1_BITS",
    "U8_MAX_LENGTH",
    "UAcceptResult",
    "UAlphabeticIndexLabelType",
    "UBIDI_DEFAULT_LTR",
    "UBIDI_DEFAULT_RTL",
    "UBIDI_DO_MIRRORING",
    "UBIDI_INSERT_LRM_FOR_NUMERIC",
    "UBIDI_KEEP_BASE_COMBINING",
    "UBIDI_LEVEL_OVERRIDE",
    "UBIDI_LOGICAL",
    "UBIDI_LTR",
    "UBIDI_MAP_NOWHERE",
    "UBIDI_MAX_EXPLICIT_LEVEL",
    "UBIDI_MIRRORING_OFF",
    "UBIDI_MIRRORING_ON",
    "UBIDI_MIXED",
    "UBIDI_NEUTRAL",
    "UBIDI_OPTION_DEFAULT",
    "UBIDI_OPTION_INSERT_MARKS",
    "UBIDI_OPTION_REMOVE_CONTROLS",
    "UBIDI_OPTION_STREAMING",
    "UBIDI_OUTPUT_REVERSE",
    "UBIDI_REMOVE_BIDI_CONTROLS",
    "UBIDI_REORDER_DEFAULT",
    "UBIDI_REORDER_GROUP_NUMBERS_WITH_R",
    "UBIDI_REORDER_INVERSE_FOR_NUMBERS_SPECIAL",
    "UBIDI_REORDER_INVERSE_LIKE_DIRECT",
    "UBIDI_REORDER_INVERSE_NUMBERS_AS_L",
    "UBIDI_REORDER_NUMBERS_SPECIAL",
    "UBIDI_REORDER_RUNS_ONLY",
    "UBIDI_RTL",
    "UBIDI_VISUAL",
    "UBLOCK_ADLAM",
    "UBLOCK_AEGEAN_NUMBERS",
    "UBLOCK_AHOM",
    "UBLOCK_ALCHEMICAL_SYMBOLS",
    "UBLOCK_ALPHABETIC_PRESENTATION_FORMS",
    "UBLOCK_ANATOLIAN_HIEROGLYPHS",
    "UBLOCK_ANCIENT_GREEK_MUSICAL_NOTATION",
    "UBLOCK_ANCIENT_GREEK_NUMBERS",
    "UBLOCK_ANCIENT_SYMBOLS",
    "UBLOCK_ARABIC",
    "UBLOCK_ARABIC_EXTENDED_A",
    "UBLOCK_ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS",
    "UBLOCK_ARABIC_PRESENTATION_FORMS_A",
    "UBLOCK_ARABIC_PRESENTATION_FORMS_B",
    "UBLOCK_ARABIC_SUPPLEMENT",
    "UBLOCK_ARMENIAN",
    "UBLOCK_ARROWS",
    "UBLOCK_AVESTAN",
    "UBLOCK_BALINESE",
    "UBLOCK_BAMUM",
    "UBLOCK_BAMUM_SUPPLEMENT",
    "UBLOCK_BASIC_LATIN",
    "UBLOCK_BASSA_VAH",
    "UBLOCK_BATAK",
    "UBLOCK_BENGALI",
    "UBLOCK_BHAIKSUKI",
    "UBLOCK_BLOCK_ELEMENTS",
    "UBLOCK_BOPOMOFO",
    "UBLOCK_BOPOMOFO_EXTENDED",
    "UBLOCK_BOX_DRAWING",
    "UBLOCK_BRAHMI",
    "UBLOCK_BRAILLE_PATTERNS",
    "UBLOCK_BUGINESE",
    "UBLOCK_BUHID",
    "UBLOCK_BYZANTINE_MUSICAL_SYMBOLS",
    "UBLOCK_CARIAN",
    "UBLOCK_CAUCASIAN_ALBANIAN",
    "UBLOCK_CHAKMA",
    "UBLOCK_CHAM",
    "UBLOCK_CHEROKEE",
    "UBLOCK_CHEROKEE_SUPPLEMENT",
    "UBLOCK_CHESS_SYMBOLS",
    "UBLOCK_CHORASMIAN",
    "UBLOCK_CJK_COMPATIBILITY",
    "UBLOCK_CJK_COMPATIBILITY_FORMS",
    "UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS",
    "UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT",
    "UBLOCK_CJK_RADICALS_SUPPLEMENT",
    "UBLOCK_CJK_STROKES",
    "UBLOCK_CJK_SYMBOLS_AND_PUNCTUATION",
    "UBLOCK_CJK_UNIFIED_IDEOGRAPHS",
    "UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A",
    "UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B",
    "UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C",
    "UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D",
    "UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_E",
    "UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_F",
    "UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_G",
    "UBLOCK_COMBINING_DIACRITICAL_MARKS",
    "UBLOCK_COMBINING_DIACRITICAL_MARKS_EXTENDED",
    "UBLOCK_COMBINING_DIACRITICAL_MARKS_SUPPLEMENT",
    "UBLOCK_COMBINING_HALF_MARKS",
    "UBLOCK_COMBINING_MARKS_FOR_SYMBOLS",
    "UBLOCK_COMMON_INDIC_NUMBER_FORMS",
    "UBLOCK_CONTROL_PICTURES",
    "UBLOCK_COPTIC",
    "UBLOCK_COPTIC_EPACT_NUMBERS",
    "UBLOCK_COUNTING_ROD_NUMERALS",
    "UBLOCK_CUNEIFORM",
    "UBLOCK_CUNEIFORM_NUMBERS_AND_PUNCTUATION",
    "UBLOCK_CURRENCY_SYMBOLS",
    "UBLOCK_CYPRIOT_SYLLABARY",
    "UBLOCK_CYRILLIC",
    "UBLOCK_CYRILLIC_EXTENDED_A",
    "UBLOCK_CYRILLIC_EXTENDED_B",
    "UBLOCK_CYRILLIC_EXTENDED_C",
    "UBLOCK_CYRILLIC_SUPPLEMENT",
    "UBLOCK_CYRILLIC_SUPPLEMENTARY",
    "UBLOCK_DESERET",
    "UBLOCK_DEVANAGARI",
    "UBLOCK_DEVANAGARI_EXTENDED",
    "UBLOCK_DINGBATS",
    "UBLOCK_DIVES_AKURU",
    "UBLOCK_DOGRA",
    "UBLOCK_DOMINO_TILES",
    "UBLOCK_DUPLOYAN",
    "UBLOCK_EARLY_DYNASTIC_CUNEIFORM",
    "UBLOCK_EGYPTIAN_HIEROGLYPHS",
    "UBLOCK_EGYPTIAN_HIEROGLYPH_FORMAT_CONTROLS",
    "UBLOCK_ELBASAN",
    "UBLOCK_ELYMAIC",
    "UBLOCK_EMOTICONS",
    "UBLOCK_ENCLOSED_ALPHANUMERICS",
    "UBLOCK_ENCLOSED_ALPHANUMERIC_SUPPLEMENT",
    "UBLOCK_ENCLOSED_CJK_LETTERS_AND_MONTHS",
    "UBLOCK_ENCLOSED_IDEOGRAPHIC_SUPPLEMENT",
    "UBLOCK_ETHIOPIC",
    "UBLOCK_ETHIOPIC_EXTENDED",
    "UBLOCK_ETHIOPIC_EXTENDED_A",
    "UBLOCK_ETHIOPIC_SUPPLEMENT",
    "UBLOCK_GENERAL_PUNCTUATION",
    "UBLOCK_GEOMETRIC_SHAPES",
    "UBLOCK_GEOMETRIC_SHAPES_EXTENDED",
    "UBLOCK_GEORGIAN",
    "UBLOCK_GEORGIAN_EXTENDED",
    "UBLOCK_GEORGIAN_SUPPLEMENT",
    "UBLOCK_GLAGOLITIC",
    "UBLOCK_GLAGOLITIC_SUPPLEMENT",
    "UBLOCK_GOTHIC",
    "UBLOCK_GRANTHA",
    "UBLOCK_GREEK",
    "UBLOCK_GREEK_EXTENDED",
    "UBLOCK_GUJARATI",
    "UBLOCK_GUNJALA_GONDI",
    "UBLOCK_GURMUKHI",
    "UBLOCK_HALFWIDTH_AND_FULLWIDTH_FORMS",
    "UBLOCK_HANGUL_COMPATIBILITY_JAMO",
    "UBLOCK_HANGUL_JAMO",
    "UBLOCK_HANGUL_JAMO_EXTENDED_A",
    "UBLOCK_HANGUL_JAMO_EXTENDED_B",
    "UBLOCK_HANGUL_SYLLABLES",
    "UBLOCK_HANIFI_ROHINGYA",
    "UBLOCK_HANUNOO",
    "UBLOCK_HATRAN",
    "UBLOCK_HEBREW",
    "UBLOCK_HIGH_PRIVATE_USE_SURROGATES",
    "UBLOCK_HIGH_SURROGATES",
    "UBLOCK_HIRAGANA",
    "UBLOCK_IDEOGRAPHIC_DESCRIPTION_CHARACTERS",
    "UBLOCK_IDEOGRAPHIC_SYMBOLS_AND_PUNCTUATION",
    "UBLOCK_IMPERIAL_ARAMAIC",
    "UBLOCK_INDIC_SIYAQ_NUMBERS",
    "UBLOCK_INSCRIPTIONAL_PAHLAVI",
    "UBLOCK_INSCRIPTIONAL_PARTHIAN",
    "UBLOCK_INVALID_CODE",
    "UBLOCK_IPA_EXTENSIONS",
    "UBLOCK_JAVANESE",
    "UBLOCK_KAITHI",
    "UBLOCK_KANA_EXTENDED_A",
    "UBLOCK_KANA_SUPPLEMENT",
    "UBLOCK_KANBUN",
    "UBLOCK_KANGXI_RADICALS",
    "UBLOCK_KANNADA",
    "UBLOCK_KATAKANA",
    "UBLOCK_KATAKANA_PHONETIC_EXTENSIONS",
    "UBLOCK_KAYAH_LI",
    "UBLOCK_KHAROSHTHI",
    "UBLOCK_KHITAN_SMALL_SCRIPT",
    "UBLOCK_KHMER",
    "UBLOCK_KHMER_SYMBOLS",
    "UBLOCK_KHOJKI",
    "UBLOCK_KHUDAWADI",
    "UBLOCK_LAO",
    "UBLOCK_LATIN_1_SUPPLEMENT",
    "UBLOCK_LATIN_EXTENDED_A",
    "UBLOCK_LATIN_EXTENDED_ADDITIONAL",
    "UBLOCK_LATIN_EXTENDED_B",
    "UBLOCK_LATIN_EXTENDED_C",
    "UBLOCK_LATIN_EXTENDED_D",
    "UBLOCK_LATIN_EXTENDED_E",
    "UBLOCK_LEPCHA",
    "UBLOCK_LETTERLIKE_SYMBOLS",
    "UBLOCK_LIMBU",
    "UBLOCK_LINEAR_A",
    "UBLOCK_LINEAR_B_IDEOGRAMS",
    "UBLOCK_LINEAR_B_SYLLABARY",
    "UBLOCK_LISU",
    "UBLOCK_LISU_SUPPLEMENT",
    "UBLOCK_LOW_SURROGATES",
    "UBLOCK_LYCIAN",
    "UBLOCK_LYDIAN",
    "UBLOCK_MAHAJANI",
    "UBLOCK_MAHJONG_TILES",
    "UBLOCK_MAKASAR",
    "UBLOCK_MALAYALAM",
    "UBLOCK_MANDAIC",
    "UBLOCK_MANICHAEAN",
    "UBLOCK_MARCHEN",
    "UBLOCK_MASARAM_GONDI",
    "UBLOCK_MATHEMATICAL_ALPHANUMERIC_SYMBOLS",
    "UBLOCK_MATHEMATICAL_OPERATORS",
    "UBLOCK_MAYAN_NUMERALS",
    "UBLOCK_MEDEFAIDRIN",
    "UBLOCK_MEETEI_MAYEK",
    "UBLOCK_MEETEI_MAYEK_EXTENSIONS",
    "UBLOCK_MENDE_KIKAKUI",
    "UBLOCK_MEROITIC_CURSIVE",
    "UBLOCK_MEROITIC_HIEROGLYPHS",
    "UBLOCK_MIAO",
    "UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A",
    "UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B",
    "UBLOCK_MISCELLANEOUS_SYMBOLS",
    "UBLOCK_MISCELLANEOUS_SYMBOLS_AND_ARROWS",
    "UBLOCK_MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS",
    "UBLOCK_MISCELLANEOUS_TECHNICAL",
    "UBLOCK_MODI",
    "UBLOCK_MODIFIER_TONE_LETTERS",
    "UBLOCK_MONGOLIAN",
    "UBLOCK_MONGOLIAN_SUPPLEMENT",
    "UBLOCK_MRO",
    "UBLOCK_MULTANI",
    "UBLOCK_MUSICAL_SYMBOLS",
    "UBLOCK_MYANMAR",
    "UBLOCK_MYANMAR_EXTENDED_A",
    "UBLOCK_MYANMAR_EXTENDED_B",
    "UBLOCK_NABATAEAN",
    "UBLOCK_NANDINAGARI",
    "UBLOCK_NEWA",
    "UBLOCK_NEW_TAI_LUE",
    "UBLOCK_NKO",
    "UBLOCK_NO_BLOCK",
    "UBLOCK_NUMBER_FORMS",
    "UBLOCK_NUSHU",
    "UBLOCK_NYIAKENG_PUACHUE_HMONG",
    "UBLOCK_OGHAM",
    "UBLOCK_OLD_HUNGARIAN",
    "UBLOCK_OLD_ITALIC",
    "UBLOCK_OLD_NORTH_ARABIAN",
    "UBLOCK_OLD_PERMIC",
    "UBLOCK_OLD_PERSIAN",
    "UBLOCK_OLD_SOGDIAN",
    "UBLOCK_OLD_SOUTH_ARABIAN",
    "UBLOCK_OLD_TURKIC",
    "UBLOCK_OL_CHIKI",
    "UBLOCK_OPTICAL_CHARACTER_RECOGNITION",
    "UBLOCK_ORIYA",
    "UBLOCK_ORNAMENTAL_DINGBATS",
    "UBLOCK_OSAGE",
    "UBLOCK_OSMANYA",
    "UBLOCK_OTTOMAN_SIYAQ_NUMBERS",
    "UBLOCK_PAHAWH_HMONG",
    "UBLOCK_PALMYRENE",
    "UBLOCK_PAU_CIN_HAU",
    "UBLOCK_PHAGS_PA",
    "UBLOCK_PHAISTOS_DISC",
    "UBLOCK_PHOENICIAN",
    "UBLOCK_PHONETIC_EXTENSIONS",
    "UBLOCK_PHONETIC_EXTENSIONS_SUPPLEMENT",
    "UBLOCK_PLAYING_CARDS",
    "UBLOCK_PRIVATE_USE",
    "UBLOCK_PRIVATE_USE_AREA",
    "UBLOCK_PSALTER_PAHLAVI",
    "UBLOCK_REJANG",
    "UBLOCK_RUMI_NUMERAL_SYMBOLS",
    "UBLOCK_RUNIC",
    "UBLOCK_SAMARITAN",
    "UBLOCK_SAURASHTRA",
    "UBLOCK_SHARADA",
    "UBLOCK_SHAVIAN",
    "UBLOCK_SHORTHAND_FORMAT_CONTROLS",
    "UBLOCK_SIDDHAM",
    "UBLOCK_SINHALA",
    "UBLOCK_SINHALA_ARCHAIC_NUMBERS",
    "UBLOCK_SMALL_FORM_VARIANTS",
    "UBLOCK_SMALL_KANA_EXTENSION",
    "UBLOCK_SOGDIAN",
    "UBLOCK_SORA_SOMPENG",
    "UBLOCK_SOYOMBO",
    "UBLOCK_SPACING_MODIFIER_LETTERS",
    "UBLOCK_SPECIALS",
    "UBLOCK_SUNDANESE",
    "UBLOCK_SUNDANESE_SUPPLEMENT",
    "UBLOCK_SUPERSCRIPTS_AND_SUBSCRIPTS",
    "UBLOCK_SUPPLEMENTAL_ARROWS_A",
    "UBLOCK_SUPPLEMENTAL_ARROWS_B",
    "UBLOCK_SUPPLEMENTAL_ARROWS_C",
    "UBLOCK_SUPPLEMENTAL_MATHEMATICAL_OPERATORS",
    "UBLOCK_SUPPLEMENTAL_PUNCTUATION",
    "UBLOCK_SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHS",
    "UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_A",
    "UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_B",
    "UBLOCK_SUTTON_SIGNWRITING",
    "UBLOCK_SYLOTI_NAGRI",
    "UBLOCK_SYMBOLS_AND_PICTOGRAPHS_EXTENDED_A",
    "UBLOCK_SYMBOLS_FOR_LEGACY_COMPUTING",
    "UBLOCK_SYRIAC",
    "UBLOCK_SYRIAC_SUPPLEMENT",
    "UBLOCK_TAGALOG",
    "UBLOCK_TAGBANWA",
    "UBLOCK_TAGS",
    "UBLOCK_TAI_LE",
    "UBLOCK_TAI_THAM",
    "UBLOCK_TAI_VIET",
    "UBLOCK_TAI_XUAN_JING_SYMBOLS",
    "UBLOCK_TAKRI",
    "UBLOCK_TAMIL",
    "UBLOCK_TAMIL_SUPPLEMENT",
    "UBLOCK_TANGUT",
    "UBLOCK_TANGUT_COMPONENTS",
    "UBLOCK_TANGUT_SUPPLEMENT",
    "UBLOCK_TELUGU",
    "UBLOCK_THAANA",
    "UBLOCK_THAI",
    "UBLOCK_TIBETAN",
    "UBLOCK_TIFINAGH",
    "UBLOCK_TIRHUTA",
    "UBLOCK_TRANSPORT_AND_MAP_SYMBOLS",
    "UBLOCK_UGARITIC",
    "UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS",
    "UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED",
    "UBLOCK_VAI",
    "UBLOCK_VARIATION_SELECTORS",
    "UBLOCK_VARIATION_SELECTORS_SUPPLEMENT",
    "UBLOCK_VEDIC_EXTENSIONS",
    "UBLOCK_VERTICAL_FORMS",
    "UBLOCK_WANCHO",
    "UBLOCK_WARANG_CITI",
    "UBLOCK_YEZIDI",
    "UBLOCK_YIJING_HEXAGRAM_SYMBOLS",
    "UBLOCK_YI_RADICALS",
    "UBLOCK_YI_SYLLABLES",
    "UBLOCK_ZANABAZAR_SQUARE",
    "UBRK_CHARACTER",
    "UBRK_LINE",
    "UBRK_LINE_HARD",
    "UBRK_LINE_HARD_LIMIT",
    "UBRK_LINE_SOFT",
    "UBRK_LINE_SOFT_LIMIT",
    "UBRK_SENTENCE",
    "UBRK_SENTENCE_SEP",
    "UBRK_SENTENCE_SEP_LIMIT",
    "UBRK_SENTENCE_TERM",
    "UBRK_SENTENCE_TERM_LIMIT",
    "UBRK_WORD",
    "UBRK_WORD_IDEO",
    "UBRK_WORD_IDEO_LIMIT",
    "UBRK_WORD_KANA",
    "UBRK_WORD_KANA_LIMIT",
    "UBRK_WORD_LETTER",
    "UBRK_WORD_LETTER_LIMIT",
    "UBRK_WORD_NONE",
    "UBRK_WORD_NONE_LIMIT",
    "UBRK_WORD_NUMBER",
    "UBRK_WORD_NUMBER_LIMIT",
    "UBiDi",
    "UBiDiClassCallback",
    "UBiDiDirection",
    "UBiDiMirroring",
    "UBiDiOrder",
    "UBiDiReorderingMode",
    "UBiDiReorderingOption",
    "UBiDiTransform",
    "UBidiPairedBracketType",
    "UBlockCode",
    "UBreakIterator",
    "UBreakIteratorType",
    "UCAL_ACTUAL_MAXIMUM",
    "UCAL_ACTUAL_MINIMUM",
    "UCAL_AM",
    "UCAL_AM_PM",
    "UCAL_APRIL",
    "UCAL_AUGUST",
    "UCAL_DATE",
    "UCAL_DAY_OF_MONTH",
    "UCAL_DAY_OF_WEEK",
    "UCAL_DAY_OF_WEEK_IN_MONTH",
    "UCAL_DAY_OF_YEAR",
    "UCAL_DECEMBER",
    "UCAL_DEFAULT",
    "UCAL_DOW_LOCAL",
    "UCAL_DST",
    "UCAL_DST_OFFSET",
    "UCAL_ERA",
    "UCAL_EXTENDED_YEAR",
    "UCAL_FEBRUARY",
    "UCAL_FIELD_COUNT",
    "UCAL_FIRST_DAY_OF_WEEK",
    "UCAL_FRIDAY",
    "UCAL_GREATEST_MINIMUM",
    "UCAL_GREGORIAN",
    "UCAL_HOUR",
    "UCAL_HOUR_OF_DAY",
    "UCAL_IS_LEAP_MONTH",
    "UCAL_JANUARY",
    "UCAL_JULIAN_DAY",
    "UCAL_JULY",
    "UCAL_JUNE",
    "UCAL_LEAST_MAXIMUM",
    "UCAL_LENIENT",
    "UCAL_MARCH",
    "UCAL_MAXIMUM",
    "UCAL_MAY",
    "UCAL_MILLISECOND",
    "UCAL_MILLISECONDS_IN_DAY",
    "UCAL_MINIMAL_DAYS_IN_FIRST_WEEK",
    "UCAL_MINIMUM",
    "UCAL_MINUTE",
    "UCAL_MONDAY",
    "UCAL_MONTH",
    "UCAL_NOVEMBER",
    "UCAL_OCTOBER",
    "UCAL_PM",
    "UCAL_REPEATED_WALL_TIME",
    "UCAL_SATURDAY",
    "UCAL_SECOND",
    "UCAL_SEPTEMBER",
    "UCAL_SHORT_DST",
    "UCAL_SHORT_STANDARD",
    "UCAL_SKIPPED_WALL_TIME",
    "UCAL_STANDARD",
    "UCAL_SUNDAY",
    "UCAL_THURSDAY",
    "UCAL_TRADITIONAL",
    "UCAL_TUESDAY",
    "UCAL_TZ_TRANSITION_NEXT",
    "UCAL_TZ_TRANSITION_NEXT_INCLUSIVE",
    "UCAL_TZ_TRANSITION_PREVIOUS",
    "UCAL_TZ_TRANSITION_PREVIOUS_INCLUSIVE",
    "UCAL_UNDECIMBER",
    "UCAL_UNKNOWN_ZONE_ID",
    "UCAL_WALLTIME_FIRST",
    "UCAL_WALLTIME_LAST",
    "UCAL_WALLTIME_NEXT_VALID",
    "UCAL_WEDNESDAY",
    "UCAL_WEEKDAY",
    "UCAL_WEEKEND",
    "UCAL_WEEKEND_CEASE",
    "UCAL_WEEKEND_ONSET",
    "UCAL_WEEK_OF_MONTH",
    "UCAL_WEEK_OF_YEAR",
    "UCAL_YEAR",
    "UCAL_YEAR_WOY",
    "UCAL_ZONE_OFFSET",
    "UCAL_ZONE_TYPE_ANY",
    "UCAL_ZONE_TYPE_CANONICAL",
    "UCAL_ZONE_TYPE_CANONICAL_LOCATION",
    "UCHAR_AGE",
    "UCHAR_ALPHABETIC",
    "UCHAR_ASCII_HEX_DIGIT",
    "UCHAR_BIDI_CLASS",
    "UCHAR_BIDI_CONTROL",
    "UCHAR_BIDI_MIRRORED",
    "UCHAR_BIDI_MIRRORING_GLYPH",
    "UCHAR_BIDI_PAIRED_BRACKET",
    "UCHAR_BIDI_PAIRED_BRACKET_TYPE",
    "UCHAR_BINARY_START",
    "UCHAR_BLOCK",
    "UCHAR_CANONICAL_COMBINING_CLASS",
    "UCHAR_CASED",
    "UCHAR_CASE_FOLDING",
    "UCHAR_CASE_IGNORABLE",
    "UCHAR_CASE_SENSITIVE",
    "UCHAR_CHANGES_WHEN_CASEFOLDED",
    "UCHAR_CHANGES_WHEN_CASEMAPPED",
    "UCHAR_CHANGES_WHEN_LOWERCASED",
    "UCHAR_CHANGES_WHEN_NFKC_CASEFOLDED",
    "UCHAR_CHANGES_WHEN_TITLECASED",
    "UCHAR_CHANGES_WHEN_UPPERCASED",
    "UCHAR_DASH",
    "UCHAR_DECOMPOSITION_TYPE",
    "UCHAR_DEFAULT_IGNORABLE_CODE_POINT",
    "UCHAR_DEPRECATED",
    "UCHAR_DIACRITIC",
    "UCHAR_DOUBLE_START",
    "UCHAR_EAST_ASIAN_WIDTH",
    "UCHAR_EMOJI",
    "UCHAR_EMOJI_COMPONENT",
    "UCHAR_EMOJI_MODIFIER",
    "UCHAR_EMOJI_MODIFIER_BASE",
    "UCHAR_EMOJI_PRESENTATION",
    "UCHAR_EXTENDED_PICTOGRAPHIC",
    "UCHAR_EXTENDER",
    "UCHAR_FULL_COMPOSITION_EXCLUSION",
    "UCHAR_GENERAL_CATEGORY",
    "UCHAR_GENERAL_CATEGORY_MASK",
    "UCHAR_GRAPHEME_BASE",
    "UCHAR_GRAPHEME_CLUSTER_BREAK",
    "UCHAR_GRAPHEME_EXTEND",
    "UCHAR_GRAPHEME_LINK",
    "UCHAR_HANGUL_SYLLABLE_TYPE",
    "UCHAR_HEX_DIGIT",
    "UCHAR_HYPHEN",
    "UCHAR_IDEOGRAPHIC",
    "UCHAR_IDS_BINARY_OPERATOR",
    "UCHAR_IDS_TRINARY_OPERATOR",
    "UCHAR_ID_CONTINUE",
    "UCHAR_ID_START",
    "UCHAR_INDIC_POSITIONAL_CATEGORY",
    "UCHAR_INDIC_SYLLABIC_CATEGORY",
    "UCHAR_INT_START",
    "UCHAR_INVALID_CODE",
    "UCHAR_JOINING_GROUP",
    "UCHAR_JOINING_TYPE",
    "UCHAR_JOIN_CONTROL",
    "UCHAR_LEAD_CANONICAL_COMBINING_CLASS",
    "UCHAR_LINE_BREAK",
    "UCHAR_LOGICAL_ORDER_EXCEPTION",
    "UCHAR_LOWERCASE",
    "UCHAR_LOWERCASE_MAPPING",
    "UCHAR_MASK_START",
    "UCHAR_MATH",
    "UCHAR_MAX_VALUE",
    "UCHAR_MIN_VALUE",
    "UCHAR_NAME",
    "UCHAR_NFC_INERT",
    "UCHAR_NFC_QUICK_CHECK",
    "UCHAR_NFD_INERT",
    "UCHAR_NFD_QUICK_CHECK",
    "UCHAR_NFKC_INERT",
    "UCHAR_NFKC_QUICK_CHECK",
    "UCHAR_NFKD_INERT",
    "UCHAR_NFKD_QUICK_CHECK",
    "UCHAR_NONCHARACTER_CODE_POINT",
    "UCHAR_NUMERIC_TYPE",
    "UCHAR_NUMERIC_VALUE",
    "UCHAR_OTHER_PROPERTY_START",
    "UCHAR_PATTERN_SYNTAX",
    "UCHAR_PATTERN_WHITE_SPACE",
    "UCHAR_POSIX_ALNUM",
    "UCHAR_POSIX_BLANK",
    "UCHAR_POSIX_GRAPH",
    "UCHAR_POSIX_PRINT",
    "UCHAR_POSIX_XDIGIT",
    "UCHAR_PREPENDED_CONCATENATION_MARK",
    "UCHAR_QUOTATION_MARK",
    "UCHAR_RADICAL",
    "UCHAR_REGIONAL_INDICATOR",
    "UCHAR_SCRIPT",
    "UCHAR_SCRIPT_EXTENSIONS",
    "UCHAR_SEGMENT_STARTER",
    "UCHAR_SENTENCE_BREAK",
    "UCHAR_SIMPLE_CASE_FOLDING",
    "UCHAR_SIMPLE_LOWERCASE_MAPPING",
    "UCHAR_SIMPLE_TITLECASE_MAPPING",
    "UCHAR_SIMPLE_UPPERCASE_MAPPING",
    "UCHAR_SOFT_DOTTED",
    "UCHAR_STRING_START",
    "UCHAR_S_TERM",
    "UCHAR_TERMINAL_PUNCTUATION",
    "UCHAR_TITLECASE_MAPPING",
    "UCHAR_TRAIL_CANONICAL_COMBINING_CLASS",
    "UCHAR_UNIFIED_IDEOGRAPH",
    "UCHAR_UPPERCASE",
    "UCHAR_UPPERCASE_MAPPING",
    "UCHAR_VARIATION_SELECTOR",
    "UCHAR_VERTICAL_ORIENTATION",
    "UCHAR_WHITE_SPACE",
    "UCHAR_WORD_BREAK",
    "UCHAR_XID_CONTINUE",
    "UCHAR_XID_START",
    "UCLN_NO_AUTO_CLEANUP",
    "UCNV_BOCU1",
    "UCNV_CESU8",
    "UCNV_CLONE",
    "UCNV_CLOSE",
    "UCNV_COMPOUND_TEXT",
    "UCNV_DBCS",
    "UCNV_EBCDIC_STATEFUL",
    "UCNV_ESCAPE_C",
    "UCNV_ESCAPE_CSS2",
    "UCNV_ESCAPE_JAVA",
    "UCNV_ESCAPE_UNICODE",
    "UCNV_ESCAPE_XML_DEC",
    "UCNV_ESCAPE_XML_HEX",
    "UCNV_FROM_U_CALLBACK_ESCAPE",
    "UCNV_FROM_U_CALLBACK_SKIP",
    "UCNV_FROM_U_CALLBACK_STOP",
    "UCNV_FROM_U_CALLBACK_SUBSTITUTE",
    "UCNV_HZ",
    "UCNV_IBM",
    "UCNV_ILLEGAL",
    "UCNV_IMAP_MAILBOX",
    "UCNV_IRREGULAR",
    "UCNV_ISCII",
    "UCNV_ISO_2022",
    "UCNV_LATIN_1",
    "UCNV_LMBCS_1",
    "UCNV_LMBCS_11",
    "UCNV_LMBCS_16",
    "UCNV_LMBCS_17",
    "UCNV_LMBCS_18",
    "UCNV_LMBCS_19",
    "UCNV_LMBCS_2",
    "UCNV_LMBCS_3",
    "UCNV_LMBCS_4",
    "UCNV_LMBCS_5",
    "UCNV_LMBCS_6",
    "UCNV_LMBCS_8",
    "UCNV_LMBCS_LAST",
    "UCNV_LOCALE_OPTION_STRING",
    "UCNV_MAX_CONVERTER_NAME_LENGTH",
    "UCNV_MBCS",
    "UCNV_NUMBER_OF_SUPPORTED_CONVERTER_TYPES",
    "UCNV_OPTION_SEP_STRING",
    "UCNV_RESET",
    "UCNV_ROUNDTRIP_AND_FALLBACK_SET",
    "UCNV_ROUNDTRIP_SET",
    "UCNV_SBCS",
    "UCNV_SCSU",
    "UCNV_SI",
    "UCNV_SKIP_STOP_ON_ILLEGAL",
    "UCNV_SO",
    "UCNV_SUB_STOP_ON_ILLEGAL",
    "UCNV_SWAP_LFNL_OPTION_STRING",
    "UCNV_TO_U_CALLBACK_ESCAPE",
    "UCNV_TO_U_CALLBACK_SKIP",
    "UCNV_TO_U_CALLBACK_STOP",
    "UCNV_TO_U_CALLBACK_SUBSTITUTE",
    "UCNV_UNASSIGNED",
    "UCNV_UNKNOWN",
    "UCNV_UNSUPPORTED_CONVERTER",
    "UCNV_US_ASCII",
    "UCNV_UTF16",
    "UCNV_UTF16_BigEndian",
    "UCNV_UTF16_LittleEndian",
    "UCNV_UTF32",
    "UCNV_UTF32_BigEndian",
    "UCNV_UTF32_LittleEndian",
    "UCNV_UTF7",
    "UCNV_UTF8",
    "UCNV_VALUE_SEP_STRING",
    "UCNV_VERSION_OPTION_STRING",
    "UCOL_ALTERNATE_HANDLING",
    "UCOL_ATTRIBUTE_COUNT",
    "UCOL_BOUND_LOWER",
    "UCOL_BOUND_UPPER",
    "UCOL_BOUND_UPPER_LONG",
    "UCOL_CASE_FIRST",
    "UCOL_CASE_LEVEL",
    "UCOL_CE_STRENGTH_LIMIT",
    "UCOL_DECOMPOSITION_MODE",
    "UCOL_DEFAULT",
    "UCOL_DEFAULT_STRENGTH",
    "UCOL_EQUAL",
    "UCOL_FRENCH_COLLATION",
    "UCOL_FULL_RULES",
    "UCOL_GREATER",
    "UCOL_IDENTICAL",
    "UCOL_LESS",
    "UCOL_LOWER_FIRST",
    "UCOL_NON_IGNORABLE",
    "UCOL_NORMALIZATION_MODE",
    "UCOL_NUMERIC_COLLATION",
    "UCOL_OFF",
    "UCOL_ON",
    "UCOL_PRIMARY",
    "UCOL_QUATERNARY",
    "UCOL_REORDER_CODE_CURRENCY",
    "UCOL_REORDER_CODE_DEFAULT",
    "UCOL_REORDER_CODE_DIGIT",
    "UCOL_REORDER_CODE_FIRST",
    "UCOL_REORDER_CODE_NONE",
    "UCOL_REORDER_CODE_OTHERS",
    "UCOL_REORDER_CODE_PUNCTUATION",
    "UCOL_REORDER_CODE_SPACE",
    "UCOL_REORDER_CODE_SYMBOL",
    "UCOL_SECONDARY",
    "UCOL_SHIFTED",
    "UCOL_STRENGTH",
    "UCOL_STRENGTH_LIMIT",
    "UCOL_TAILORING_ONLY",
    "UCOL_TERTIARY",
    "UCOL_UPPER_FIRST",
    "UCONFIG_ENABLE_PLUGINS",
    "UCONFIG_FORMAT_FASTPATHS_49",
    "UCONFIG_HAVE_PARSEALLINPUT",
    "UCONFIG_NO_BREAK_ITERATION",
    "UCONFIG_NO_COLLATION",
    "UCONFIG_NO_CONVERSION",
    "UCONFIG_NO_FILE_IO",
    "UCONFIG_NO_FILTERED_BREAK_ITERATION",
    "UCONFIG_NO_FORMATTING",
    "UCONFIG_NO_IDNA",
    "UCONFIG_NO_LEGACY_CONVERSION",
    "UCONFIG_NO_NORMALIZATION",
    "UCONFIG_NO_REGULAR_EXPRESSIONS",
    "UCONFIG_NO_SERVICE",
    "UCONFIG_NO_TRANSLITERATION",
    "UCONFIG_ONLY_COLLATION",
    "UCONFIG_ONLY_HTML_CONVERSION",
    "UCPMAP_RANGE_FIXED_ALL_SURROGATES",
    "UCPMAP_RANGE_FIXED_LEAD_SURROGATES",
    "UCPMAP_RANGE_NORMAL",
    "UCPMap",
    "UCPMapRangeOption",
    "UCPMapValueFilter",
    "UCPTRIE_ERROR_VALUE_NEG_DATA_OFFSET",
    "UCPTRIE_FAST_DATA_BLOCK_LENGTH",
    "UCPTRIE_FAST_DATA_MASK",
    "UCPTRIE_FAST_SHIFT",
    "UCPTRIE_HIGH_VALUE_NEG_DATA_OFFSET",
    "UCPTRIE_SMALL_MAX",
    "UCPTRIE_TYPE_ANY",
    "UCPTRIE_TYPE_FAST",
    "UCPTRIE_TYPE_SMALL",
    "UCPTRIE_VALUE_BITS_16",
    "UCPTRIE_VALUE_BITS_32",
    "UCPTRIE_VALUE_BITS_8",
    "UCPTRIE_VALUE_BITS_ANY",
    "UCPTrie",
    "UCPTrieData",
    "UCPTrieType",
    "UCPTrieValueWidth",
    "UCURR_ALL",
    "UCURR_COMMON",
    "UCURR_DEPRECATED",
    "UCURR_LONG_NAME",
    "UCURR_NARROW_SYMBOL_NAME",
    "UCURR_NON_DEPRECATED",
    "UCURR_SYMBOL_NAME",
    "UCURR_UNCOMMON",
    "UCURR_USAGE_CASH",
    "UCURR_USAGE_STANDARD",
    "UCalendarAMPMs",
    "UCalendarAttribute",
    "UCalendarDateFields",
    "UCalendarDaysOfWeek",
    "UCalendarDisplayNameType",
    "UCalendarLimitType",
    "UCalendarMonths",
    "UCalendarType",
    "UCalendarWallTimeOption",
    "UCalendarWeekdayType",
    "UCaseMap",
    "UCharCategory",
    "UCharDirection",
    "UCharEnumTypeRange",
    "UCharIterator",
    "UCharIteratorCurrent",
    "UCharIteratorGetIndex",
    "UCharIteratorGetState",
    "UCharIteratorHasNext",
    "UCharIteratorHasPrevious",
    "UCharIteratorMove",
    "UCharIteratorNext",
    "UCharIteratorOrigin",
    "UCharIteratorPrevious",
    "UCharIteratorReserved",
    "UCharIteratorSetState",
    "UCharNameChoice",
    "UCharsetDetector",
    "UCharsetMatch",
    "UColAttribute",
    "UColAttributeValue",
    "UColBoundMode",
    "UColReorderCode",
    "UColRuleOption",
    "UCollationElements",
    "UCollationResult",
    "UCollator",
    "UConstrainedFieldPosition",
    "UConverter",
    "UConverterCallbackReason",
    "UConverterFromUCallback",
    "UConverterFromUnicodeArgs",
    "UConverterPlatform",
    "UConverterSelector",
    "UConverterToUCallback",
    "UConverterToUnicodeArgs",
    "UConverterType",
    "UConverterUnicodeSet",
    "UCurrCurrencyType",
    "UCurrNameStyle",
    "UCurrencySpacing",
    "UCurrencyUsage",
    "UDATPG_ABBREVIATED",
    "UDATPG_BASE_CONFLICT",
    "UDATPG_CONFLICT",
    "UDATPG_DAYPERIOD_FIELD",
    "UDATPG_DAY_FIELD",
    "UDATPG_DAY_OF_WEEK_IN_MONTH_FIELD",
    "UDATPG_DAY_OF_YEAR_FIELD",
    "UDATPG_ERA_FIELD",
    "UDATPG_FIELD_COUNT",
    "UDATPG_FRACTIONAL_SECOND_FIELD",
    "UDATPG_HOUR_FIELD",
    "UDATPG_MATCH_ALL_FIELDS_LENGTH",
    "UDATPG_MATCH_HOUR_FIELD_LENGTH",
    "UDATPG_MATCH_NO_OPTIONS",
    "UDATPG_MINUTE_FIELD",
    "UDATPG_MONTH_FIELD",
    "UDATPG_NARROW",
    "UDATPG_NO_CONFLICT",
    "UDATPG_QUARTER_FIELD",
    "UDATPG_SECOND_FIELD",
    "UDATPG_WEEKDAY_FIELD",
    "UDATPG_WEEK_OF_MONTH_FIELD",
    "UDATPG_WEEK_OF_YEAR_FIELD",
    "UDATPG_WIDE",
    "UDATPG_YEAR_FIELD",
    "UDATPG_ZONE_FIELD",
    "UDAT_ABBR_GENERIC_TZ",
    "UDAT_ABBR_MONTH",
    "UDAT_ABBR_MONTH_DAY",
    "UDAT_ABBR_MONTH_WEEKDAY_DAY",
    "UDAT_ABBR_QUARTER",
    "UDAT_ABBR_SPECIFIC_TZ",
    "UDAT_ABBR_UTC_TZ",
    "UDAT_ABBR_WEEKDAY",
    "UDAT_ABSOLUTE_DAY",
    "UDAT_ABSOLUTE_FRIDAY",
    "UDAT_ABSOLUTE_MONDAY",
    "UDAT_ABSOLUTE_MONTH",
    "UDAT_ABSOLUTE_NOW",
    "UDAT_ABSOLUTE_SATURDAY",
    "UDAT_ABSOLUTE_SUNDAY",
    "UDAT_ABSOLUTE_THURSDAY",
    "UDAT_ABSOLUTE_TUESDAY",
    "UDAT_ABSOLUTE_UNIT_COUNT",
    "UDAT_ABSOLUTE_WEDNESDAY",
    "UDAT_ABSOLUTE_WEEK",
    "UDAT_ABSOLUTE_YEAR",
    "UDAT_AM_PMS",
    "UDAT_AM_PM_FIELD",
    "UDAT_AM_PM_MIDNIGHT_NOON_FIELD",
    "UDAT_BOOLEAN_ATTRIBUTE_COUNT",
    "UDAT_CYCLIC_YEARS_ABBREVIATED",
    "UDAT_CYCLIC_YEARS_NARROW",
    "UDAT_CYCLIC_YEARS_WIDE",
    "UDAT_DATE_FIELD",
    "UDAT_DAY",
    "UDAT_DAY_OF_WEEK_FIELD",
    "UDAT_DAY_OF_WEEK_IN_MONTH_FIELD",
    "UDAT_DAY_OF_YEAR_FIELD",
    "UDAT_DEFAULT",
    "UDAT_DIRECTION_COUNT",
    "UDAT_DIRECTION_LAST",
    "UDAT_DIRECTION_LAST_2",
    "UDAT_DIRECTION_NEXT",
    "UDAT_DIRECTION_NEXT_2",
    "UDAT_DIRECTION_PLAIN",
    "UDAT_DIRECTION_THIS",
    "UDAT_DOW_LOCAL_FIELD",
    "UDAT_ERAS",
    "UDAT_ERA_FIELD",
    "UDAT_ERA_NAMES",
    "UDAT_EXTENDED_YEAR_FIELD",
    "UDAT_FLEXIBLE_DAY_PERIOD_FIELD",
    "UDAT_FRACTIONAL_SECOND_FIELD",
    "UDAT_FULL",
    "UDAT_FULL_RELATIVE",
    "UDAT_GENERIC_TZ",
    "UDAT_HOUR",
    "UDAT_HOUR0_FIELD",
    "UDAT_HOUR1_FIELD",
    "UDAT_HOUR24",
    "UDAT_HOUR24_MINUTE",
    "UDAT_HOUR24_MINUTE_SECOND",
    "UDAT_HOUR_MINUTE",
    "UDAT_HOUR_MINUTE_SECOND",
    "UDAT_HOUR_OF_DAY0_FIELD",
    "UDAT_HOUR_OF_DAY1_FIELD",
    "UDAT_JULIAN_DAY_FIELD",
    "UDAT_LOCALIZED_CHARS",
    "UDAT_LOCATION_TZ",
    "UDAT_LONG",
    "UDAT_LONG_RELATIVE",
    "UDAT_MEDIUM",
    "UDAT_MEDIUM_RELATIVE",
    "UDAT_MILLISECONDS_IN_DAY_FIELD",
    "UDAT_MINUTE",
    "UDAT_MINUTE_FIELD",
    "UDAT_MINUTE_SECOND",
    "UDAT_MONTH",
    "UDAT_MONTHS",
    "UDAT_MONTH_DAY",
    "UDAT_MONTH_FIELD",
    "UDAT_MONTH_WEEKDAY_DAY",
    "UDAT_NARROW_MONTHS",
    "UDAT_NARROW_WEEKDAYS",
    "UDAT_NONE",
    "UDAT_NUM_MONTH",
    "UDAT_NUM_MONTH_DAY",
    "UDAT_NUM_MONTH_WEEKDAY_DAY",
    "UDAT_PARSE_ALLOW_NUMERIC",
    "UDAT_PARSE_ALLOW_WHITESPACE",
    "UDAT_PARSE_MULTIPLE_PATTERNS_FOR_MATCH",
    "UDAT_PARSE_PARTIAL_LITERAL_MATCH",
    "UDAT_PATTERN",
    "UDAT_QUARTER",
    "UDAT_QUARTERS",
    "UDAT_QUARTER_FIELD",
    "UDAT_RELATIVE",
    "UDAT_RELATIVE_DAYS",
    "UDAT_RELATIVE_HOURS",
    "UDAT_RELATIVE_MINUTES",
    "UDAT_RELATIVE_MONTHS",
    "UDAT_RELATIVE_SECONDS",
    "UDAT_RELATIVE_UNIT_COUNT",
    "UDAT_RELATIVE_WEEKS",
    "UDAT_RELATIVE_YEARS",
    "UDAT_REL_LITERAL_FIELD",
    "UDAT_REL_NUMERIC_FIELD",
    "UDAT_REL_UNIT_DAY",
    "UDAT_REL_UNIT_FRIDAY",
    "UDAT_REL_UNIT_HOUR",
    "UDAT_REL_UNIT_MINUTE",
    "UDAT_REL_UNIT_MONDAY",
    "UDAT_REL_UNIT_MONTH",
    "UDAT_REL_UNIT_QUARTER",
    "UDAT_REL_UNIT_SATURDAY",
    "UDAT_REL_UNIT_SECOND",
    "UDAT_REL_UNIT_SUNDAY",
    "UDAT_REL_UNIT_THURSDAY",
    "UDAT_REL_UNIT_TUESDAY",
    "UDAT_REL_UNIT_WEDNESDAY",
    "UDAT_REL_UNIT_WEEK",
    "UDAT_REL_UNIT_YEAR",
    "UDAT_SECOND",
    "UDAT_SECOND_FIELD",
    "UDAT_SHORT",
    "UDAT_SHORTER_WEEKDAYS",
    "UDAT_SHORT_MONTHS",
    "UDAT_SHORT_QUARTERS",
    "UDAT_SHORT_RELATIVE",
    "UDAT_SHORT_WEEKDAYS",
    "UDAT_SPECIFIC_TZ",
    "UDAT_STANDALONE_DAY_FIELD",
    "UDAT_STANDALONE_MONTHS",
    "UDAT_STANDALONE_MONTH_FIELD",
    "UDAT_STANDALONE_NARROW_MONTHS",
    "UDAT_STANDALONE_NARROW_WEEKDAYS",
    "UDAT_STANDALONE_QUARTERS",
    "UDAT_STANDALONE_QUARTER_FIELD",
    "UDAT_STANDALONE_SHORTER_WEEKDAYS",
    "UDAT_STANDALONE_SHORT_MONTHS",
    "UDAT_STANDALONE_SHORT_QUARTERS",
    "UDAT_STANDALONE_SHORT_WEEKDAYS",
    "UDAT_STANDALONE_WEEKDAYS",
    "UDAT_STYLE_LONG",
    "UDAT_STYLE_NARROW",
    "UDAT_STYLE_SHORT",
    "UDAT_TIMEZONE_FIELD",
    "UDAT_TIMEZONE_GENERIC_FIELD",
    "UDAT_TIMEZONE_ISO_FIELD",
    "UDAT_TIMEZONE_ISO_LOCAL_FIELD",
    "UDAT_TIMEZONE_LOCALIZED_GMT_OFFSET_FIELD",
    "UDAT_TIMEZONE_RFC_FIELD",
    "UDAT_TIMEZONE_SPECIAL_FIELD",
    "UDAT_WEEKDAY",
    "UDAT_WEEKDAYS",
    "UDAT_WEEK_OF_MONTH_FIELD",
    "UDAT_WEEK_OF_YEAR_FIELD",
    "UDAT_YEAR",
    "UDAT_YEAR_ABBR_MONTH",
    "UDAT_YEAR_ABBR_MONTH_DAY",
    "UDAT_YEAR_ABBR_MONTH_WEEKDAY_DAY",
    "UDAT_YEAR_ABBR_QUARTER",
    "UDAT_YEAR_FIELD",
    "UDAT_YEAR_MONTH",
    "UDAT_YEAR_MONTH_DAY",
    "UDAT_YEAR_MONTH_WEEKDAY_DAY",
    "UDAT_YEAR_NAME_FIELD",
    "UDAT_YEAR_NUM_MONTH",
    "UDAT_YEAR_NUM_MONTH_DAY",
    "UDAT_YEAR_NUM_MONTH_WEEKDAY_DAY",
    "UDAT_YEAR_QUARTER",
    "UDAT_YEAR_WOY_FIELD",
    "UDAT_ZODIAC_NAMES_ABBREVIATED",
    "UDAT_ZODIAC_NAMES_NARROW",
    "UDAT_ZODIAC_NAMES_WIDE",
    "UDISPCTX_CAPITALIZATION_FOR_BEGINNING_OF_SENTENCE",
    "UDISPCTX_CAPITALIZATION_FOR_MIDDLE_OF_SENTENCE",
    "UDISPCTX_CAPITALIZATION_FOR_STANDALONE",
    "UDISPCTX_CAPITALIZATION_FOR_UI_LIST_OR_MENU",
    "UDISPCTX_CAPITALIZATION_NONE",
    "UDISPCTX_DIALECT_NAMES",
    "UDISPCTX_LENGTH_FULL",
    "UDISPCTX_LENGTH_SHORT",
    "UDISPCTX_NO_SUBSTITUTE",
    "UDISPCTX_STANDARD_NAMES",
    "UDISPCTX_SUBSTITUTE",
    "UDISPCTX_TYPE_CAPITALIZATION",
    "UDISPCTX_TYPE_DIALECT_HANDLING",
    "UDISPCTX_TYPE_DISPLAY_LENGTH",
    "UDISPCTX_TYPE_SUBSTITUTE_HANDLING",
    "UDTS_DB2_TIME",
    "UDTS_DOTNET_DATE_TIME",
    "UDTS_EXCEL_TIME",
    "UDTS_ICU4C_TIME",
    "UDTS_JAVA_TIME",
    "UDTS_MAC_OLD_TIME",
    "UDTS_MAC_TIME",
    "UDTS_UNIX_MICROSECONDS_TIME",
    "UDTS_UNIX_TIME",
    "UDTS_WINDOWS_FILE_TIME",
    "UDateAbsoluteUnit",
    "UDateDirection",
    "UDateFormatBooleanAttribute",
    "UDateFormatField",
    "UDateFormatStyle",
    "UDateFormatSymbolType",
    "UDateFormatSymbols",
    "UDateIntervalFormat",
    "UDateRelativeDateTimeFormatterStyle",
    "UDateRelativeUnit",
    "UDateTimePGDisplayWidth",
    "UDateTimePatternConflict",
    "UDateTimePatternField",
    "UDateTimePatternMatchOptions",
    "UDateTimeScale",
    "UDecompositionType",
    "UDialectHandling",
    "UDisplayContext",
    "UDisplayContextType",
    "UEastAsianWidth",
    "UEnumCharNamesFn",
    "UEnumeration",
    "UErrorCode",
    "UFIELD_CATEGORY_DATE",
    "UFIELD_CATEGORY_DATE_INTERVAL",
    "UFIELD_CATEGORY_DATE_INTERVAL_SPAN",
    "UFIELD_CATEGORY_LIST",
    "UFIELD_CATEGORY_LIST_SPAN",
    "UFIELD_CATEGORY_NUMBER",
    "UFIELD_CATEGORY_RELATIVE_DATETIME",
    "UFIELD_CATEGORY_UNDEFINED",
    "UFMT_ARRAY",
    "UFMT_DATE",
    "UFMT_DOUBLE",
    "UFMT_INT64",
    "UFMT_LONG",
    "UFMT_OBJECT",
    "UFMT_STRING",
    "UFieldCategory",
    "UFieldPosition",
    "UFieldPositionIterator",
    "UFormattableType",
    "UFormattedDateInterval",
    "UFormattedList",
    "UFormattedNumber",
    "UFormattedNumberRange",
    "UFormattedRelativeDateTime",
    "UFormattedValue",
    "UGENDER_FEMALE",
    "UGENDER_MALE",
    "UGENDER_OTHER",
    "UGender",
    "UGenderInfo",
    "UGraphemeClusterBreak",
    "UHangulSyllableType",
    "UHashtable",
    "UIDNA",
    "UIDNAInfo",
    "UIDNA_CHECK_BIDI",
    "UIDNA_CHECK_CONTEXTJ",
    "UIDNA_CHECK_CONTEXTO",
    "UIDNA_DEFAULT",
    "UIDNA_ERROR_BIDI",
    "UIDNA_ERROR_CONTEXTJ",
    "UIDNA_ERROR_CONTEXTO_DIGITS",
    "UIDNA_ERROR_CONTEXTO_PUNCTUATION",
    "UIDNA_ERROR_DISALLOWED",
    "UIDNA_ERROR_DOMAIN_NAME_TOO_LONG",
    "UIDNA_ERROR_EMPTY_LABEL",
    "UIDNA_ERROR_HYPHEN_3_4",
    "UIDNA_ERROR_INVALID_ACE_LABEL",
    "UIDNA_ERROR_LABEL_HAS_DOT",
    "UIDNA_ERROR_LABEL_TOO_LONG",
    "UIDNA_ERROR_LEADING_COMBINING_MARK",
    "UIDNA_ERROR_LEADING_HYPHEN",
    "UIDNA_ERROR_PUNYCODE",
    "UIDNA_ERROR_TRAILING_HYPHEN",
    "UIDNA_NONTRANSITIONAL_TO_ASCII",
    "UIDNA_NONTRANSITIONAL_TO_UNICODE",
    "UIDNA_USE_STD3_RULES",
    "UILANGUAGE_ENUMPROCA",
    "UILANGUAGE_ENUMPROCW",
    "UITER_CURRENT",
    "UITER_LENGTH",
    "UITER_LIMIT",
    "UITER_START",
    "UITER_UNKNOWN_INDEX",
    "UITER_ZERO",
    "UIndicPositionalCategory",
    "UIndicSyllabicCategory",
    "UJoiningGroup",
    "UJoiningType",
    "ULDN_DIALECT_NAMES",
    "ULDN_STANDARD_NAMES",
    "ULISTFMT_ELEMENT_FIELD",
    "ULISTFMT_LITERAL_FIELD",
    "ULISTFMT_TYPE_AND",
    "ULISTFMT_TYPE_OR",
    "ULISTFMT_TYPE_UNITS",
    "ULISTFMT_WIDTH_NARROW",
    "ULISTFMT_WIDTH_SHORT",
    "ULISTFMT_WIDTH_WIDE",
    "ULOCDATA_ALT_QUOTATION_END",
    "ULOCDATA_ALT_QUOTATION_START",
    "ULOCDATA_ES_AUXILIARY",
    "ULOCDATA_ES_INDEX",
    "ULOCDATA_ES_PUNCTUATION",
    "ULOCDATA_ES_STANDARD",
    "ULOCDATA_QUOTATION_END",
    "ULOCDATA_QUOTATION_START",
    "ULOC_ACCEPT_FAILED",
    "ULOC_ACCEPT_FALLBACK",
    "ULOC_ACCEPT_VALID",
    "ULOC_ACTUAL_LOCALE",
    "ULOC_AVAILABLE_DEFAULT",
    "ULOC_AVAILABLE_ONLY_LEGACY_ALIASES",
    "ULOC_AVAILABLE_WITH_LEGACY_ALIASES",
    "ULOC_CANADA",
    "ULOC_CANADA_FRENCH",
    "ULOC_CHINA",
    "ULOC_CHINESE",
    "ULOC_COUNTRY_CAPACITY",
    "ULOC_ENGLISH",
    "ULOC_FRANCE",
    "ULOC_FRENCH",
    "ULOC_FULLNAME_CAPACITY",
    "ULOC_GERMAN",
    "ULOC_GERMANY",
    "ULOC_ITALIAN",
    "ULOC_ITALY",
    "ULOC_JAPAN",
    "ULOC_JAPANESE",
    "ULOC_KEYWORDS_CAPACITY",
    "ULOC_KEYWORD_AND_VALUES_CAPACITY",
    "ULOC_KEYWORD_ASSIGN_UNICODE",
    "ULOC_KEYWORD_ITEM_SEPARATOR_UNICODE",
    "ULOC_KEYWORD_SEPARATOR_UNICODE",
    "ULOC_KOREA",
    "ULOC_KOREAN",
    "ULOC_LANG_CAPACITY",
    "ULOC_LAYOUT_BTT",
    "ULOC_LAYOUT_LTR",
    "ULOC_LAYOUT_RTL",
    "ULOC_LAYOUT_TTB",
    "ULOC_LAYOUT_UNKNOWN",
    "ULOC_PRC",
    "ULOC_SCRIPT_CAPACITY",
    "ULOC_SIMPLIFIED_CHINESE",
    "ULOC_TAIWAN",
    "ULOC_TRADITIONAL_CHINESE",
    "ULOC_UK",
    "ULOC_US",
    "ULOC_VALID_LOCALE",
    "ULayoutType",
    "ULineBreak",
    "ULineBreakTag",
    "UListFormatter",
    "UListFormatterField",
    "UListFormatterType",
    "UListFormatterWidth",
    "ULocAvailableType",
    "ULocDataLocaleType",
    "ULocaleData",
    "ULocaleDataDelimiterType",
    "ULocaleDataExemplarSetType",
    "ULocaleDisplayNames",
    "UMEASFMT_WIDTH_COUNT",
    "UMEASFMT_WIDTH_NARROW",
    "UMEASFMT_WIDTH_NUMERIC",
    "UMEASFMT_WIDTH_SHORT",
    "UMEASFMT_WIDTH_WIDE",
    "UMSGPAT_APOS_DOUBLE_OPTIONAL",
    "UMSGPAT_APOS_DOUBLE_REQUIRED",
    "UMSGPAT_ARG_NAME_NOT_NUMBER",
    "UMSGPAT_ARG_NAME_NOT_VALID",
    "UMSGPAT_ARG_TYPE_CHOICE",
    "UMSGPAT_ARG_TYPE_NONE",
    "UMSGPAT_ARG_TYPE_PLURAL",
    "UMSGPAT_ARG_TYPE_SELECT",
    "UMSGPAT_ARG_TYPE_SELECTORDINAL",
    "UMSGPAT_ARG_TYPE_SIMPLE",
    "UMSGPAT_PART_TYPE_ARG_DOUBLE",
    "UMSGPAT_PART_TYPE_ARG_INT",
    "UMSGPAT_PART_TYPE_ARG_LIMIT",
    "UMSGPAT_PART_TYPE_ARG_NAME",
    "UMSGPAT_PART_TYPE_ARG_NUMBER",
    "UMSGPAT_PART_TYPE_ARG_SELECTOR",
    "UMSGPAT_PART_TYPE_ARG_START",
    "UMSGPAT_PART_TYPE_ARG_STYLE",
    "UMSGPAT_PART_TYPE_ARG_TYPE",
    "UMSGPAT_PART_TYPE_INSERT_CHAR",
    "UMSGPAT_PART_TYPE_MSG_LIMIT",
    "UMSGPAT_PART_TYPE_MSG_START",
    "UMSGPAT_PART_TYPE_REPLACE_NUMBER",
    "UMSGPAT_PART_TYPE_SKIP_SYNTAX",
    "UMS_SI",
    "UMS_UK",
    "UMS_US",
    "UMeasureFormatWidth",
    "UMeasurementSystem",
    "UMemAllocFn",
    "UMemFreeFn",
    "UMemReallocFn",
    "UMessagePatternApostropheMode",
    "UMessagePatternArgType",
    "UMessagePatternPartType",
    "UMutableCPTrie",
    "UNESCAPE_CHAR_AT",
    "UNICODERANGE",
    "UNISCRIBE_OPENTYPE",
    "UNORM2_COMPOSE",
    "UNORM2_COMPOSE_CONTIGUOUS",
    "UNORM2_DECOMPOSE",
    "UNORM2_FCD",
    "UNORM_DEFAULT",
    "UNORM_FCD",
    "UNORM_INPUT_IS_FCD",
    "UNORM_MAYBE",
    "UNORM_MODE_COUNT",
    "UNORM_NFC",
    "UNORM_NFD",
    "UNORM_NFKC",
    "UNORM_NFKD",
    "UNORM_NO",
    "UNORM_NONE",
    "UNORM_YES",
    "UNUM_CASH_CURRENCY",
    "UNUM_COMPACT_FIELD",
    "UNUM_CURRENCY",
    "UNUM_CURRENCY_ACCOUNTING",
    "UNUM_CURRENCY_CODE",
    "UNUM_CURRENCY_FIELD",
    "UNUM_CURRENCY_INSERT",
    "UNUM_CURRENCY_ISO",
    "UNUM_CURRENCY_MATCH",
    "UNUM_CURRENCY_PLURAL",
    "UNUM_CURRENCY_SPACING_COUNT",
    "UNUM_CURRENCY_STANDARD",
    "UNUM_CURRENCY_SURROUNDING_MATCH",
    "UNUM_CURRENCY_SYMBOL",
    "UNUM_CURRENCY_USAGE",
    "UNUM_DECIMAL",
    "UNUM_DECIMAL_ALWAYS_SHOWN",
    "UNUM_DECIMAL_COMPACT_LONG",
    "UNUM_DECIMAL_COMPACT_SHORT",
    "UNUM_DECIMAL_SEPARATOR_ALWAYS",
    "UNUM_DECIMAL_SEPARATOR_AUTO",
    "UNUM_DECIMAL_SEPARATOR_COUNT",
    "UNUM_DECIMAL_SEPARATOR_FIELD",
    "UNUM_DECIMAL_SEPARATOR_SYMBOL",
    "UNUM_DEFAULT",
    "UNUM_DEFAULT_RULESET",
    "UNUM_DIGIT_SYMBOL",
    "UNUM_DURATION",
    "UNUM_EIGHT_DIGIT_SYMBOL",
    "UNUM_EXPONENTIAL_SYMBOL",
    "UNUM_EXPONENT_FIELD",
    "UNUM_EXPONENT_MULTIPLICATION_SYMBOL",
    "UNUM_EXPONENT_SIGN_FIELD",
    "UNUM_EXPONENT_SYMBOL_FIELD",
    "UNUM_FIVE_DIGIT_SYMBOL",
    "UNUM_FORMAT_ATTRIBUTE_VALUE_HIDDEN",
    "UNUM_FORMAT_FAIL_IF_MORE_THAN_MAX_DIGITS",
    "UNUM_FORMAT_WIDTH",
    "UNUM_FOUR_DIGIT_SYMBOL",
    "UNUM_FRACTION_DIGITS",
    "UNUM_FRACTION_FIELD",
    "UNUM_GROUPING_AUTO",
    "UNUM_GROUPING_MIN2",
    "UNUM_GROUPING_OFF",
    "UNUM_GROUPING_ON_ALIGNED",
    "UNUM_GROUPING_SEPARATOR_FIELD",
    "UNUM_GROUPING_SEPARATOR_SYMBOL",
    "UNUM_GROUPING_SIZE",
    "UNUM_GROUPING_THOUSANDS",
    "UNUM_GROUPING_USED",
    "UNUM_IDENTITY_FALLBACK_APPROXIMATELY",
    "UNUM_IDENTITY_FALLBACK_APPROXIMATELY_OR_SINGLE_VALUE",
    "UNUM_IDENTITY_FALLBACK_RANGE",
    "UNUM_IDENTITY_FALLBACK_SINGLE_VALUE",
    "UNUM_IDENTITY_RESULT_EQUAL_AFTER_ROUNDING",
    "UNUM_IDENTITY_RESULT_EQUAL_BEFORE_ROUNDING",
    "UNUM_IDENTITY_RESULT_NOT_EQUAL",
    "UNUM_IGNORE",
    "UNUM_INFINITY_SYMBOL",
    "UNUM_INTEGER_DIGITS",
    "UNUM_INTEGER_FIELD",
    "UNUM_INTL_CURRENCY_SYMBOL",
    "UNUM_LENIENT_PARSE",
    "UNUM_LONG",
    "UNUM_MAX_FRACTION_DIGITS",
    "UNUM_MAX_INTEGER_DIGITS",
    "UNUM_MAX_SIGNIFICANT_DIGITS",
    "UNUM_MEASURE_UNIT_FIELD",
    "UNUM_MINIMUM_GROUPING_DIGITS",
    "UNUM_MINUS_SIGN_SYMBOL",
    "UNUM_MIN_FRACTION_DIGITS",
    "UNUM_MIN_INTEGER_DIGITS",
    "UNUM_MIN_SIGNIFICANT_DIGITS",
    "UNUM_MONETARY_GROUPING_SEPARATOR_SYMBOL",
    "UNUM_MONETARY_SEPARATOR_SYMBOL",
    "UNUM_MULTIPLIER",
    "UNUM_NAN_SYMBOL",
    "UNUM_NEGATIVE_PREFIX",
    "UNUM_NEGATIVE_SUFFIX",
    "UNUM_NINE_DIGIT_SYMBOL",
    "UNUM_NUMBERING_SYSTEM",
    "UNUM_ONE_DIGIT_SYMBOL",
    "UNUM_ORDINAL",
    "UNUM_PADDING_CHARACTER",
    "UNUM_PADDING_POSITION",
    "UNUM_PAD_AFTER_PREFIX",
    "UNUM_PAD_AFTER_SUFFIX",
    "UNUM_PAD_BEFORE_PREFIX",
    "UNUM_PAD_BEFORE_SUFFIX",
    "UNUM_PAD_ESCAPE_SYMBOL",
    "UNUM_PARSE_ALL_INPUT",
    "UNUM_PARSE_CASE_SENSITIVE",
    "UNUM_PARSE_DECIMAL_MARK_REQUIRED",
    "UNUM_PARSE_INT_ONLY",
    "UNUM_PARSE_NO_EXPONENT",
    "UNUM_PATTERN_DECIMAL",
    "UNUM_PATTERN_RULEBASED",
    "UNUM_PATTERN_SEPARATOR_SYMBOL",
    "UNUM_PERCENT",
    "UNUM_PERCENT_FIELD",
    "UNUM_PERCENT_SYMBOL",
    "UNUM_PERMILL_FIELD",
    "UNUM_PERMILL_SYMBOL",
    "UNUM_PLUS_SIGN_SYMBOL",
    "UNUM_POSITIVE_PREFIX",
    "UNUM_POSITIVE_SUFFIX",
    "UNUM_PUBLIC_RULESETS",
    "UNUM_RANGE_COLLAPSE_ALL",
    "UNUM_RANGE_COLLAPSE_AUTO",
    "UNUM_RANGE_COLLAPSE_NONE",
    "UNUM_RANGE_COLLAPSE_UNIT",
    "UNUM_ROUNDING_INCREMENT",
    "UNUM_ROUNDING_MODE",
    "UNUM_ROUND_CEILING",
    "UNUM_ROUND_DOWN",
    "UNUM_ROUND_FLOOR",
    "UNUM_ROUND_HALFDOWN",
    "UNUM_ROUND_HALFEVEN",
    "UNUM_ROUND_HALFUP",
    "UNUM_ROUND_UNNECESSARY",
    "UNUM_ROUND_UP",
    "UNUM_SCALE",
    "UNUM_SCIENTIFIC",
    "UNUM_SECONDARY_GROUPING_SIZE",
    "UNUM_SEVEN_DIGIT_SYMBOL",
    "UNUM_SHORT",
    "UNUM_SIGNIFICANT_DIGITS_USED",
    "UNUM_SIGNIFICANT_DIGIT_SYMBOL",
    "UNUM_SIGN_ACCOUNTING",
    "UNUM_SIGN_ACCOUNTING_ALWAYS",
    "UNUM_SIGN_ACCOUNTING_EXCEPT_ZERO",
    "UNUM_SIGN_ALWAYS",
    "UNUM_SIGN_ALWAYS_SHOWN",
    "UNUM_SIGN_AUTO",
    "UNUM_SIGN_COUNT",
    "UNUM_SIGN_EXCEPT_ZERO",
    "UNUM_SIGN_FIELD",
    "UNUM_SIGN_NEVER",
    "UNUM_SIX_DIGIT_SYMBOL",
    "UNUM_SPELLOUT",
    "UNUM_THREE_DIGIT_SYMBOL",
    "UNUM_TWO_DIGIT_SYMBOL",
    "UNUM_UNIT_WIDTH_COUNT",
    "UNUM_UNIT_WIDTH_FULL_NAME",
    "UNUM_UNIT_WIDTH_HIDDEN",
    "UNUM_UNIT_WIDTH_ISO_CODE",
    "UNUM_UNIT_WIDTH_NARROW",
    "UNUM_UNIT_WIDTH_SHORT",
    "UNUM_ZERO_DIGIT_SYMBOL",
    "UNormalization2Mode",
    "UNormalizationCheckResult",
    "UNormalizationMode",
    "UNormalizer2",
    "UNumberCompactStyle",
    "UNumberDecimalSeparatorDisplay",
    "UNumberFormatAttribute",
    "UNumberFormatAttributeValue",
    "UNumberFormatFields",
    "UNumberFormatPadPosition",
    "UNumberFormatRoundingMode",
    "UNumberFormatStyle",
    "UNumberFormatSymbol",
    "UNumberFormatTextAttribute",
    "UNumberFormatter",
    "UNumberGroupingStrategy",
    "UNumberRangeCollapse",
    "UNumberRangeIdentityFallback",
    "UNumberRangeIdentityResult",
    "UNumberSignDisplay",
    "UNumberUnitWidth",
    "UNumberingSystem",
    "UNumericType",
    "UPLURAL_TYPE_CARDINAL",
    "UPLURAL_TYPE_ORDINAL",
    "UParseError",
    "UPluralRules",
    "UPluralType",
    "UProperty",
    "UPropertyNameChoice",
    "UREGEX_CASE_INSENSITIVE",
    "UREGEX_COMMENTS",
    "UREGEX_DOTALL",
    "UREGEX_ERROR_ON_UNKNOWN_ESCAPES",
    "UREGEX_LITERAL",
    "UREGEX_MULTILINE",
    "UREGEX_UNIX_LINES",
    "UREGEX_UWORD",
    "URES_ALIAS",
    "URES_ARRAY",
    "URES_BINARY",
    "URES_INT",
    "URES_INT_VECTOR",
    "URES_NONE",
    "URES_STRING",
    "URES_TABLE",
    "URGN_CONTINENT",
    "URGN_DEPRECATED",
    "URGN_GROUPING",
    "URGN_SUBCONTINENT",
    "URGN_TERRITORY",
    "URGN_UNKNOWN",
    "URGN_WORLD",
    "URegexFindProgressCallback",
    "URegexMatchCallback",
    "URegexpFlag",
    "URegion",
    "URegionType",
    "URegularExpression",
    "URelativeDateTimeFormatter",
    "URelativeDateTimeFormatterField",
    "URelativeDateTimeUnit",
    "UReplaceableCallbacks",
    "UResType",
    "UResourceBundle",
    "URestrictionLevel",
    "USCRIPT_ADLAM",
    "USCRIPT_AFAKA",
    "USCRIPT_AHOM",
    "USCRIPT_ANATOLIAN_HIEROGLYPHS",
    "USCRIPT_ARABIC",
    "USCRIPT_ARMENIAN",
    "USCRIPT_AVESTAN",
    "USCRIPT_BALINESE",
    "USCRIPT_BAMUM",
    "USCRIPT_BASSA_VAH",
    "USCRIPT_BATAK",
    "USCRIPT_BENGALI",
    "USCRIPT_BHAIKSUKI",
    "USCRIPT_BLISSYMBOLS",
    "USCRIPT_BOOK_PAHLAVI",
    "USCRIPT_BOPOMOFO",
    "USCRIPT_BRAHMI",
    "USCRIPT_BRAILLE",
    "USCRIPT_BUGINESE",
    "USCRIPT_BUHID",
    "USCRIPT_CANADIAN_ABORIGINAL",
    "USCRIPT_CARIAN",
    "USCRIPT_CAUCASIAN_ALBANIAN",
    "USCRIPT_CHAKMA",
    "USCRIPT_CHAM",
    "USCRIPT_CHEROKEE",
    "USCRIPT_CHORASMIAN",
    "USCRIPT_CIRTH",
    "USCRIPT_COMMON",
    "USCRIPT_COPTIC",
    "USCRIPT_CUNEIFORM",
    "USCRIPT_CYPRIOT",
    "USCRIPT_CYRILLIC",
    "USCRIPT_DEMOTIC_EGYPTIAN",
    "USCRIPT_DESERET",
    "USCRIPT_DEVANAGARI",
    "USCRIPT_DIVES_AKURU",
    "USCRIPT_DOGRA",
    "USCRIPT_DUPLOYAN",
    "USCRIPT_EASTERN_SYRIAC",
    "USCRIPT_EGYPTIAN_HIEROGLYPHS",
    "USCRIPT_ELBASAN",
    "USCRIPT_ELYMAIC",
    "USCRIPT_ESTRANGELO_SYRIAC",
    "USCRIPT_ETHIOPIC",
    "USCRIPT_GEORGIAN",
    "USCRIPT_GLAGOLITIC",
    "USCRIPT_GOTHIC",
    "USCRIPT_GRANTHA",
    "USCRIPT_GREEK",
    "USCRIPT_GUJARATI",
    "USCRIPT_GUNJALA_GONDI",
    "USCRIPT_GURMUKHI",
    "USCRIPT_HAN",
    "USCRIPT_HANGUL",
    "USCRIPT_HANIFI_ROHINGYA",
    "USCRIPT_HANUNOO",
    "USCRIPT_HAN_WITH_BOPOMOFO",
    "USCRIPT_HARAPPAN_INDUS",
    "USCRIPT_HATRAN",
    "USCRIPT_HEBREW",
    "USCRIPT_HIERATIC_EGYPTIAN",
    "USCRIPT_HIRAGANA",
    "USCRIPT_IMPERIAL_ARAMAIC",
    "USCRIPT_INHERITED",
    "USCRIPT_INSCRIPTIONAL_PAHLAVI",
    "USCRIPT_INSCRIPTIONAL_PARTHIAN",
    "USCRIPT_INVALID_CODE",
    "USCRIPT_JAMO",
    "USCRIPT_JAPANESE",
    "USCRIPT_JAVANESE",
    "USCRIPT_JURCHEN",
    "USCRIPT_KAITHI",
    "USCRIPT_KANNADA",
    "USCRIPT_KATAKANA",
    "USCRIPT_KATAKANA_OR_HIRAGANA",
    "USCRIPT_KAYAH_LI",
    "USCRIPT_KHAROSHTHI",
    "USCRIPT_KHITAN_SMALL_SCRIPT",
    "USCRIPT_KHMER",
    "USCRIPT_KHOJKI",
    "USCRIPT_KHUDAWADI",
    "USCRIPT_KHUTSURI",
    "USCRIPT_KOREAN",
    "USCRIPT_KPELLE",
    "USCRIPT_LANNA",
    "USCRIPT_LAO",
    "USCRIPT_LATIN",
    "USCRIPT_LATIN_FRAKTUR",
    "USCRIPT_LATIN_GAELIC",
    "USCRIPT_LEPCHA",
    "USCRIPT_LIMBU",
    "USCRIPT_LINEAR_A",
    "USCRIPT_LINEAR_B",
    "USCRIPT_LISU",
    "USCRIPT_LOMA",
    "USCRIPT_LYCIAN",
    "USCRIPT_LYDIAN",
    "USCRIPT_MAHAJANI",
    "USCRIPT_MAKASAR",
    "USCRIPT_MALAYALAM",
    "USCRIPT_MANDAEAN",
    "USCRIPT_MANDAIC",
    "USCRIPT_MANICHAEAN",
    "USCRIPT_MARCHEN",
    "USCRIPT_MASARAM_GONDI",
    "USCRIPT_MATHEMATICAL_NOTATION",
    "USCRIPT_MAYAN_HIEROGLYPHS",
    "USCRIPT_MEDEFAIDRIN",
    "USCRIPT_MEITEI_MAYEK",
    "USCRIPT_MENDE",
    "USCRIPT_MEROITIC",
    "USCRIPT_MEROITIC_CURSIVE",
    "USCRIPT_MEROITIC_HIEROGLYPHS",
    "USCRIPT_MIAO",
    "USCRIPT_MODI",
    "USCRIPT_MONGOLIAN",
    "USCRIPT_MOON",
    "USCRIPT_MRO",
    "USCRIPT_MULTANI",
    "USCRIPT_MYANMAR",
    "USCRIPT_NABATAEAN",
    "USCRIPT_NAKHI_GEBA",
    "USCRIPT_NANDINAGARI",
    "USCRIPT_NEWA",
    "USCRIPT_NEW_TAI_LUE",
    "USCRIPT_NKO",
    "USCRIPT_NUSHU",
    "USCRIPT_NYIAKENG_PUACHUE_HMONG",
    "USCRIPT_OGHAM",
    "USCRIPT_OLD_CHURCH_SLAVONIC_CYRILLIC",
    "USCRIPT_OLD_HUNGARIAN",
    "USCRIPT_OLD_ITALIC",
    "USCRIPT_OLD_NORTH_ARABIAN",
    "USCRIPT_OLD_PERMIC",
    "USCRIPT_OLD_PERSIAN",
    "USCRIPT_OLD_SOGDIAN",
    "USCRIPT_OLD_SOUTH_ARABIAN",
    "USCRIPT_OL_CHIKI",
    "USCRIPT_ORIYA",
    "USCRIPT_ORKHON",
    "USCRIPT_OSAGE",
    "USCRIPT_OSMANYA",
    "USCRIPT_PAHAWH_HMONG",
    "USCRIPT_PALMYRENE",
    "USCRIPT_PAU_CIN_HAU",
    "USCRIPT_PHAGS_PA",
    "USCRIPT_PHOENICIAN",
    "USCRIPT_PHONETIC_POLLARD",
    "USCRIPT_PSALTER_PAHLAVI",
    "USCRIPT_REJANG",
    "USCRIPT_RONGORONGO",
    "USCRIPT_RUNIC",
    "USCRIPT_SAMARITAN",
    "USCRIPT_SARATI",
    "USCRIPT_SAURASHTRA",
    "USCRIPT_SHARADA",
    "USCRIPT_SHAVIAN",
    "USCRIPT_SIDDHAM",
    "USCRIPT_SIGN_WRITING",
    "USCRIPT_SIMPLIFIED_HAN",
    "USCRIPT_SINDHI",
    "USCRIPT_SINHALA",
    "USCRIPT_SOGDIAN",
    "USCRIPT_SORA_SOMPENG",
    "USCRIPT_SOYOMBO",
    "USCRIPT_SUNDANESE",
    "USCRIPT_SYLOTI_NAGRI",
    "USCRIPT_SYMBOLS",
    "USCRIPT_SYMBOLS_EMOJI",
    "USCRIPT_SYRIAC",
    "USCRIPT_TAGALOG",
    "USCRIPT_TAGBANWA",
    "USCRIPT_TAI_LE",
    "USCRIPT_TAI_VIET",
    "USCRIPT_TAKRI",
    "USCRIPT_TAMIL",
    "USCRIPT_TANGUT",
    "USCRIPT_TELUGU",
    "USCRIPT_TENGWAR",
    "USCRIPT_THAANA",
    "USCRIPT_THAI",
    "USCRIPT_TIBETAN",
    "USCRIPT_TIFINAGH",
    "USCRIPT_TIRHUTA",
    "USCRIPT_TRADITIONAL_HAN",
    "USCRIPT_UCAS",
    "USCRIPT_UGARITIC",
    "USCRIPT_UNKNOWN",
    "USCRIPT_UNWRITTEN_LANGUAGES",
    "USCRIPT_USAGE_ASPIRATIONAL",
    "USCRIPT_USAGE_EXCLUDED",
    "USCRIPT_USAGE_LIMITED_USE",
    "USCRIPT_USAGE_NOT_ENCODED",
    "USCRIPT_USAGE_RECOMMENDED",
    "USCRIPT_USAGE_UNKNOWN",
    "USCRIPT_VAI",
    "USCRIPT_VISIBLE_SPEECH",
    "USCRIPT_WANCHO",
    "USCRIPT_WARANG_CITI",
    "USCRIPT_WESTERN_SYRIAC",
    "USCRIPT_WOLEAI",
    "USCRIPT_YEZIDI",
    "USCRIPT_YI",
    "USCRIPT_ZANABAZAR_SQUARE",
    "USEARCH_ANY_BASE_WEIGHT_IS_WILDCARD",
    "USEARCH_DEFAULT",
    "USEARCH_DONE",
    "USEARCH_ELEMENT_COMPARISON",
    "USEARCH_OFF",
    "USEARCH_ON",
    "USEARCH_OVERLAP",
    "USEARCH_PATTERN_BASE_WEIGHT_IS_WILDCARD",
    "USEARCH_STANDARD_ELEMENT_COMPARISON",
    "USET_ADD_CASE_MAPPINGS",
    "USET_CASE_INSENSITIVE",
    "USET_IGNORE_SPACE",
    "USET_SERIALIZED_STATIC_ARRAY_CAPACITY",
    "USET_SPAN_CONTAINED",
    "USET_SPAN_NOT_CONTAINED",
    "USET_SPAN_SIMPLE",
    "USPOOF_ALL_CHECKS",
    "USPOOF_ASCII",
    "USPOOF_AUX_INFO",
    "USPOOF_CHAR_LIMIT",
    "USPOOF_CONFUSABLE",
    "USPOOF_HIDDEN_OVERLAY",
    "USPOOF_HIGHLY_RESTRICTIVE",
    "USPOOF_INVISIBLE",
    "USPOOF_MINIMALLY_RESTRICTIVE",
    "USPOOF_MIXED_NUMBERS",
    "USPOOF_MIXED_SCRIPT_CONFUSABLE",
    "USPOOF_MODERATELY_RESTRICTIVE",
    "USPOOF_RESTRICTION_LEVEL",
    "USPOOF_RESTRICTION_LEVEL_MASK",
    "USPOOF_SINGLE_SCRIPT_CONFUSABLE",
    "USPOOF_SINGLE_SCRIPT_RESTRICTIVE",
    "USPOOF_UNRESTRICTIVE",
    "USPOOF_WHOLE_SCRIPT_CONFUSABLE",
    "USPREP_ALLOW_UNASSIGNED",
    "USPREP_DEFAULT",
    "USPREP_RFC3491_NAMEPREP",
    "USPREP_RFC3530_NFS4_CIS_PREP",
    "USPREP_RFC3530_NFS4_CS_PREP",
    "USPREP_RFC3530_NFS4_CS_PREP_CI",
    "USPREP_RFC3530_NFS4_MIXED_PREP_PREFIX",
    "USPREP_RFC3530_NFS4_MIXED_PREP_SUFFIX",
    "USPREP_RFC3722_ISCSI",
    "USPREP_RFC3920_NODEPREP",
    "USPREP_RFC3920_RESOURCEPREP",
    "USPREP_RFC4011_MIB",
    "USPREP_RFC4013_SASLPREP",
    "USPREP_RFC4505_TRACE",
    "USPREP_RFC4518_LDAP",
    "USPREP_RFC4518_LDAP_CI",
    "USP_E_SCRIPT_NOT_IN_FONT",
    "USTRINGTRIE_BUILD_FAST",
    "USTRINGTRIE_BUILD_SMALL",
    "USTRINGTRIE_FINAL_VALUE",
    "USTRINGTRIE_INTERMEDIATE_VALUE",
    "USTRINGTRIE_NO_MATCH",
    "USTRINGTRIE_NO_VALUE",
    "UScriptCode",
    "UScriptUsage",
    "USearch",
    "USearchAttribute",
    "USearchAttributeValue",
    "USentenceBreak",
    "USentenceBreakTag",
    "USerializedSet",
    "USet",
    "USetSpanCondition",
    "USpoofCheckResult",
    "USpoofChecker",
    "USpoofChecks",
    "UStringCaseMapper",
    "UStringPrepProfile",
    "UStringPrepProfileType",
    "UStringSearch",
    "UStringTrieBuildOption",
    "UStringTrieResult",
    "USystemTimeZoneType",
    "UTEXT_MAGIC",
    "UTEXT_PROVIDER_HAS_META_DATA",
    "UTEXT_PROVIDER_LENGTH_IS_EXPENSIVE",
    "UTEXT_PROVIDER_OWNS_TEXT",
    "UTEXT_PROVIDER_STABLE_CHUNKS",
    "UTEXT_PROVIDER_WRITABLE",
    "UTF16_MAX_CHAR_LENGTH",
    "UTF32_MAX_CHAR_LENGTH",
    "UTF8_ERROR_VALUE_1",
    "UTF8_ERROR_VALUE_2",
    "UTF8_MAX_CHAR_LENGTH",
    "UTF_ERROR_VALUE",
    "UTF_MAX_CHAR_LENGTH",
    "UTF_SIZE",
    "UTRACE_COLLATION_START",
    "UTRACE_CONVERSION_START",
    "UTRACE_ERROR",
    "UTRACE_FUNCTION_START",
    "UTRACE_INFO",
    "UTRACE_OFF",
    "UTRACE_OPEN_CLOSE",
    "UTRACE_UCNV_CLONE",
    "UTRACE_UCNV_CLOSE",
    "UTRACE_UCNV_FLUSH_CACHE",
    "UTRACE_UCNV_LOAD",
    "UTRACE_UCNV_OPEN",
    "UTRACE_UCNV_OPEN_ALGORITHMIC",
    "UTRACE_UCNV_OPEN_PACKAGE",
    "UTRACE_UCNV_UNLOAD",
    "UTRACE_UCOL_CLOSE",
    "UTRACE_UCOL_GETLOCALE",
    "UTRACE_UCOL_GET_SORTKEY",
    "UTRACE_UCOL_NEXTSORTKEYPART",
    "UTRACE_UCOL_OPEN",
    "UTRACE_UCOL_OPEN_FROM_SHORT_STRING",
    "UTRACE_UCOL_STRCOLL",
    "UTRACE_UCOL_STRCOLLITER",
    "UTRACE_UCOL_STRCOLLUTF8",
    "UTRACE_UDATA_BUNDLE",
    "UTRACE_UDATA_DATA_FILE",
    "UTRACE_UDATA_RESOURCE",
    "UTRACE_UDATA_RES_FILE",
    "UTRACE_UDATA_START",
    "UTRACE_U_CLEANUP",
    "UTRACE_U_INIT",
    "UTRACE_VERBOSE",
    "UTRACE_WARNING",
    "UTRANS_FORWARD",
    "UTRANS_REVERSE",
    "UTSV_EPOCH_OFFSET_VALUE",
    "UTSV_FROM_MAX_VALUE",
    "UTSV_FROM_MIN_VALUE",
    "UTSV_TO_MAX_VALUE",
    "UTSV_TO_MIN_VALUE",
    "UTSV_UNITS_VALUE",
    "UTZFMT_PARSE_OPTION_ALL_STYLES",
    "UTZFMT_PARSE_OPTION_NONE",
    "UTZFMT_PARSE_OPTION_TZ_DATABASE_ABBREVIATIONS",
    "UTZFMT_PAT_COUNT",
    "UTZFMT_PAT_NEGATIVE_H",
    "UTZFMT_PAT_NEGATIVE_HM",
    "UTZFMT_PAT_NEGATIVE_HMS",
    "UTZFMT_PAT_POSITIVE_H",
    "UTZFMT_PAT_POSITIVE_HM",
    "UTZFMT_PAT_POSITIVE_HMS",
    "UTZFMT_STYLE_EXEMPLAR_LOCATION",
    "UTZFMT_STYLE_GENERIC_LOCATION",
    "UTZFMT_STYLE_GENERIC_LONG",
    "UTZFMT_STYLE_GENERIC_SHORT",
    "UTZFMT_STYLE_ISO_BASIC_FIXED",
    "UTZFMT_STYLE_ISO_BASIC_FULL",
    "UTZFMT_STYLE_ISO_BASIC_LOCAL_FIXED",
    "UTZFMT_STYLE_ISO_BASIC_LOCAL_FULL",
    "UTZFMT_STYLE_ISO_BASIC_LOCAL_SHORT",
    "UTZFMT_STYLE_ISO_BASIC_SHORT",
    "UTZFMT_STYLE_ISO_EXTENDED_FIXED",
    "UTZFMT_STYLE_ISO_EXTENDED_FULL",
    "UTZFMT_STYLE_ISO_EXTENDED_LOCAL_FIXED",
    "UTZFMT_STYLE_ISO_EXTENDED_LOCAL_FULL",
    "UTZFMT_STYLE_LOCALIZED_GMT",
    "UTZFMT_STYLE_LOCALIZED_GMT_SHORT",
    "UTZFMT_STYLE_SPECIFIC_LONG",
    "UTZFMT_STYLE_SPECIFIC_SHORT",
    "UTZFMT_STYLE_ZONE_ID",
    "UTZFMT_STYLE_ZONE_ID_SHORT",
    "UTZFMT_TIME_TYPE_DAYLIGHT",
    "UTZFMT_TIME_TYPE_STANDARD",
    "UTZFMT_TIME_TYPE_UNKNOWN",
    "UTZNM_EXEMPLAR_LOCATION",
    "UTZNM_LONG_DAYLIGHT",
    "UTZNM_LONG_GENERIC",
    "UTZNM_LONG_STANDARD",
    "UTZNM_SHORT_DAYLIGHT",
    "UTZNM_SHORT_GENERIC",
    "UTZNM_SHORT_STANDARD",
    "UTZNM_UNKNOWN",
    "UText",
    "UTextAccess",
    "UTextClone",
    "UTextClose",
    "UTextCopy",
    "UTextExtract",
    "UTextFuncs",
    "UTextMapNativeIndexToUTF16",
    "UTextMapOffsetToNative",
    "UTextNativeLength",
    "UTextReplace",
    "UTimeScaleValue",
    "UTimeZoneFormatGMTOffsetPatternType",
    "UTimeZoneFormatParseOption",
    "UTimeZoneFormatStyle",
    "UTimeZoneFormatTimeType",
    "UTimeZoneNameType",
    "UTimeZoneTransitionType",
    "UTraceData",
    "UTraceEntry",
    "UTraceExit",
    "UTraceFunctionNumber",
    "UTraceLevel",
    "UTransDirection",
    "UTransPosition",
    "UVerticalOrientation",
    "UWordBreak",
    "UWordBreakValues",
    "U_ALPHAINDEX_INFLOW",
    "U_ALPHAINDEX_NORMAL",
    "U_ALPHAINDEX_OVERFLOW",
    "U_ALPHAINDEX_UNDERFLOW",
    "U_AMBIGUOUS_ALIAS_WARNING",
    "U_ARABIC_NUMBER",
    "U_ARGUMENT_TYPE_MISMATCH",
    "U_ASCII_FAMILY",
    "U_BAD_VARIABLE_DEFINITION",
    "U_BLOCK_SEPARATOR",
    "U_BOUNDARY_NEUTRAL",
    "U_BPT_CLOSE",
    "U_BPT_NONE",
    "U_BPT_OPEN",
    "U_BRK_ASSIGN_ERROR",
    "U_BRK_ERROR_START",
    "U_BRK_HEX_DIGITS_EXPECTED",
    "U_BRK_INIT_ERROR",
    "U_BRK_INTERNAL_ERROR",
    "U_BRK_MALFORMED_RULE_TAG",
    "U_BRK_MISMATCHED_PAREN",
    "U_BRK_NEW_LINE_IN_QUOTED_STRING",
    "U_BRK_RULE_EMPTY_SET",
    "U_BRK_RULE_SYNTAX",
    "U_BRK_SEMICOLON_EXPECTED",
    "U_BRK_UNCLOSED_SET",
    "U_BRK_UNDEFINED_VARIABLE",
    "U_BRK_UNRECOGNIZED_OPTION",
    "U_BRK_VARIABLE_REDFINITION",
    "U_BUFFER_OVERFLOW_ERROR",
    "U_CE_NOT_FOUND_ERROR",
    "U_CHAR16_IS_TYPEDEF",
    "U_CHARSET_FAMILY",
    "U_CHARSET_IS_UTF8",
    "U_CHAR_CATEGORY_COUNT",
    "U_CHAR_NAME_ALIAS",
    "U_CHECK_DYLOAD",
    "U_COLLATOR_VERSION_MISMATCH",
    "U_COMBINED_IMPLEMENTATION",
    "U_COMBINING_SPACING_MARK",
    "U_COMMON_NUMBER_SEPARATOR",
    "U_COMPARE_CODE_POINT_ORDER",
    "U_COMPARE_IGNORE_CASE",
    "U_CONNECTOR_PUNCTUATION",
    "U_CONTROL_CHAR",
    "U_COPYRIGHT_STRING_LENGTH",
    "U_CPLUSPLUS_VERSION",
    "U_CURRENCY_SYMBOL",
    "U_DASH_PUNCTUATION",
    "U_DEBUG",
    "U_DECIMAL_DIGIT_NUMBER",
    "U_DECIMAL_NUMBER_SYNTAX_ERROR",
    "U_DEFAULT_KEYWORD_MISSING",
    "U_DEFAULT_SHOW_DRAFT",
    "U_DEFINE_FALSE_AND_TRUE",
    "U_DIFFERENT_UCA_VERSION",
    "U_DIR_NON_SPACING_MARK",
    "U_DISABLE_RENAMING",
    "U_DT_CANONICAL",
    "U_DT_CIRCLE",
    "U_DT_COMPAT",
    "U_DT_FINAL",
    "U_DT_FONT",
    "U_DT_FRACTION",
    "U_DT_INITIAL",
    "U_DT_ISOLATED",
    "U_DT_MEDIAL",
    "U_DT_NARROW",
    "U_DT_NOBREAK",
    "U_DT_NONE",
    "U_DT_SMALL",
    "U_DT_SQUARE",
    "U_DT_SUB",
    "U_DT_SUPER",
    "U_DT_VERTICAL",
    "U_DT_WIDE",
    "U_DUPLICATE_KEYWORD",
    "U_EA_AMBIGUOUS",
    "U_EA_FULLWIDTH",
    "U_EA_HALFWIDTH",
    "U_EA_NARROW",
    "U_EA_NEUTRAL",
    "U_EA_WIDE",
    "U_EBCDIC_FAMILY",
    "U_EDITS_NO_RESET",
    "U_ENABLE_DYLOAD",
    "U_ENABLE_TRACING",
    "U_ENCLOSING_MARK",
    "U_END_PUNCTUATION",
    "U_ENUM_OUT_OF_SYNC_ERROR",
    "U_ERROR_WARNING_START",
    "U_EUROPEAN_NUMBER",
    "U_EUROPEAN_NUMBER_SEPARATOR",
    "U_EUROPEAN_NUMBER_TERMINATOR",
    "U_EXTENDED_CHAR_NAME",
    "U_FILE_ACCESS_ERROR",
    "U_FINAL_PUNCTUATION",
    "U_FIRST_STRONG_ISOLATE",
    "U_FMT_PARSE_ERROR_START",
    "U_FOLD_CASE_DEFAULT",
    "U_FOLD_CASE_EXCLUDE_SPECIAL_I",
    "U_FORMAT_CHAR",
    "U_FORMAT_INEXACT_ERROR",
    "U_GCB_CONTROL",
    "U_GCB_CR",
    "U_GCB_EXTEND",
    "U_GCB_E_BASE",
    "U_GCB_E_BASE_GAZ",
    "U_GCB_E_MODIFIER",
    "U_GCB_GLUE_AFTER_ZWJ",
    "U_GCB_L",
    "U_GCB_LF",
    "U_GCB_LV",
    "U_GCB_LVT",
    "U_GCB_OTHER",
    "U_GCB_PREPEND",
    "U_GCB_REGIONAL_INDICATOR",
    "U_GCB_SPACING_MARK",
    "U_GCB_T",
    "U_GCB_V",
    "U_GCB_ZWJ",
    "U_GCC_MAJOR_MINOR",
    "U_GENERAL_OTHER_TYPES",
    "U_HAVE_CHAR16_T",
    "U_HAVE_DEBUG_LOCATION_NEW",
    "U_HAVE_INTTYPES_H",
    "U_HAVE_LIB_SUFFIX",
    "U_HAVE_PLACEMENT_NEW",
    "U_HAVE_RBNF",
    "U_HAVE_RVALUE_REFERENCES",
    "U_HAVE_STDINT_H",
    "U_HAVE_STD_STRING",
    "U_HAVE_WCHAR_H",
    "U_HAVE_WCSCPY",
    "U_HIDE_DEPRECATED_API",
    "U_HIDE_DRAFT_API",
    "U_HIDE_INTERNAL_API",
    "U_HIDE_OBSOLETE_API",
    "U_HIDE_OBSOLETE_UTF_OLD_H",
    "U_HST_LEADING_JAMO",
    "U_HST_LVT_SYLLABLE",
    "U_HST_LV_SYLLABLE",
    "U_HST_NOT_APPLICABLE",
    "U_HST_TRAILING_JAMO",
    "U_HST_VOWEL_JAMO",
    "U_ICUDATA_TYPE_LETTER",
    "U_ICU_DATA_KEY",
    "U_ICU_VERSION_BUNDLE",
    "U_IDNA_ACE_PREFIX_ERROR",
    "U_IDNA_CHECK_BIDI_ERROR",
    "U_IDNA_DOMAIN_NAME_TOO_LONG_ERROR",
    "U_IDNA_ERROR_START",
    "U_IDNA_LABEL_TOO_LONG_ERROR",
    "U_IDNA_PROHIBITED_ERROR",
    "U_IDNA_STD3_ASCII_RULES_ERROR",
    "U_IDNA_UNASSIGNED_ERROR",
    "U_IDNA_VERIFICATION_ERROR",
    "U_IDNA_ZERO_LENGTH_LABEL_ERROR",
    "U_ILLEGAL_ARGUMENT_ERROR",
    "U_ILLEGAL_CHARACTER",
    "U_ILLEGAL_CHAR_FOUND",
    "U_ILLEGAL_CHAR_IN_SEGMENT",
    "U_ILLEGAL_ESCAPE_SEQUENCE",
    "U_ILLEGAL_PAD_POSITION",
    "U_INDEX_OUTOFBOUNDS_ERROR",
    "U_INITIAL_PUNCTUATION",
    "U_INPC_BOTTOM",
    "U_INPC_BOTTOM_AND_LEFT",
    "U_INPC_BOTTOM_AND_RIGHT",
    "U_INPC_LEFT",
    "U_INPC_LEFT_AND_RIGHT",
    "U_INPC_NA",
    "U_INPC_OVERSTRUCK",
    "U_INPC_RIGHT",
    "U_INPC_TOP",
    "U_INPC_TOP_AND_BOTTOM",
    "U_INPC_TOP_AND_BOTTOM_AND_LEFT",
    "U_INPC_TOP_AND_BOTTOM_AND_RIGHT",
    "U_INPC_TOP_AND_LEFT",
    "U_INPC_TOP_AND_LEFT_AND_RIGHT",
    "U_INPC_TOP_AND_RIGHT",
    "U_INPC_VISUAL_ORDER_LEFT",
    "U_INSC_AVAGRAHA",
    "U_INSC_BINDU",
    "U_INSC_BRAHMI_JOINING_NUMBER",
    "U_INSC_CANTILLATION_MARK",
    "U_INSC_CONSONANT",
    "U_INSC_CONSONANT_DEAD",
    "U_INSC_CONSONANT_FINAL",
    "U_INSC_CONSONANT_HEAD_LETTER",
    "U_INSC_CONSONANT_INITIAL_POSTFIXED",
    "U_INSC_CONSONANT_KILLER",
    "U_INSC_CONSONANT_MEDIAL",
    "U_INSC_CONSONANT_PLACEHOLDER",
    "U_INSC_CONSONANT_PRECEDING_REPHA",
    "U_INSC_CONSONANT_PREFIXED",
    "U_INSC_CONSONANT_SUBJOINED",
    "U_INSC_CONSONANT_SUCCEEDING_REPHA",
    "U_INSC_CONSONANT_WITH_STACKER",
    "U_INSC_GEMINATION_MARK",
    "U_INSC_INVISIBLE_STACKER",
    "U_INSC_JOINER",
    "U_INSC_MODIFYING_LETTER",
    "U_INSC_NON_JOINER",
    "U_INSC_NUKTA",
    "U_INSC_NUMBER",
    "U_INSC_NUMBER_JOINER",
    "U_INSC_OTHER",
    "U_INSC_PURE_KILLER",
    "U_INSC_REGISTER_SHIFTER",
    "U_INSC_SYLLABLE_MODIFIER",
    "U_INSC_TONE_LETTER",
    "U_INSC_TONE_MARK",
    "U_INSC_VIRAMA",
    "U_INSC_VISARGA",
    "U_INSC_VOWEL",
    "U_INSC_VOWEL_DEPENDENT",
    "U_INSC_VOWEL_INDEPENDENT",
    "U_INTERNAL_PROGRAM_ERROR",
    "U_INTERNAL_TRANSLITERATOR_ERROR",
    "U_INVALID_CHAR_FOUND",
    "U_INVALID_FORMAT_ERROR",
    "U_INVALID_FUNCTION",
    "U_INVALID_ID",
    "U_INVALID_PROPERTY_PATTERN",
    "U_INVALID_RBT_SYNTAX",
    "U_INVALID_STATE_ERROR",
    "U_INVALID_TABLE_FILE",
    "U_INVALID_TABLE_FORMAT",
    "U_INVARIANT_CONVERSION_ERROR",
    "U_IOSTREAM_SOURCE",
    "U_IS_BIG_ENDIAN",
    "U_JG_AFRICAN_FEH",
    "U_JG_AFRICAN_NOON",
    "U_JG_AFRICAN_QAF",
    "U_JG_AIN",
    "U_JG_ALAPH",
    "U_JG_ALEF",
    "U_JG_BEH",
    "U_JG_BETH",
    "U_JG_BURUSHASKI_YEH_BARREE",
    "U_JG_DAL",
    "U_JG_DALATH_RISH",
    "U_JG_E",
    "U_JG_FARSI_YEH",
    "U_JG_FE",
    "U_JG_FEH",
    "U_JG_FINAL_SEMKATH",
    "U_JG_GAF",
    "U_JG_GAMAL",
    "U_JG_HAH",
    "U_JG_HAMZA_ON_HEH_GOAL",
    "U_JG_HANIFI_ROHINGYA_KINNA_YA",
    "U_JG_HANIFI_ROHINGYA_PA",
    "U_JG_HE",
    "U_JG_HEH",
    "U_JG_HEH_GOAL",
    "U_JG_HETH",
    "U_JG_KAF",
    "U_JG_KAPH",
    "U_JG_KHAPH",
    "U_JG_KNOTTED_HEH",
    "U_JG_LAM",
    "U_JG_LAMADH",
    "U_JG_MALAYALAM_BHA",
    "U_JG_MALAYALAM_JA",
    "U_JG_MALAYALAM_LLA",
    "U_JG_MALAYALAM_LLLA",
    "U_JG_MALAYALAM_NGA",
    "U_JG_MALAYALAM_NNA",
    "U_JG_MALAYALAM_NNNA",
    "U_JG_MALAYALAM_NYA",
    "U_JG_MALAYALAM_RA",
    "U_JG_MALAYALAM_SSA",
    "U_JG_MALAYALAM_TTA",
    "U_JG_MANICHAEAN_ALEPH",
    "U_JG_MANICHAEAN_AYIN",
    "U_JG_MANICHAEAN_BETH",
    "U_JG_MANICHAEAN_DALETH",
    "U_JG_MANICHAEAN_DHAMEDH",
    "U_JG_MANICHAEAN_FIVE",
    "U_JG_MANICHAEAN_GIMEL",
    "U_JG_MANICHAEAN_HETH",
    "U_JG_MANICHAEAN_HUNDRED",
    "U_JG_MANICHAEAN_KAPH",
    "U_JG_MANICHAEAN_LAMEDH",
    "U_JG_MANICHAEAN_MEM",
    "U_JG_MANICHAEAN_NUN",
    "U_JG_MANICHAEAN_ONE",
    "U_JG_MANICHAEAN_PE",
    "U_JG_MANICHAEAN_QOPH",
    "U_JG_MANICHAEAN_RESH",
    "U_JG_MANICHAEAN_SADHE",
    "U_JG_MANICHAEAN_SAMEKH",
    "U_JG_MANICHAEAN_TAW",
    "U_JG_MANICHAEAN_TEN",
    "U_JG_MANICHAEAN_TETH",
    "U_JG_MANICHAEAN_THAMEDH",
    "U_JG_MANICHAEAN_TWENTY",
    "U_JG_MANICHAEAN_WAW",
    "U_JG_MANICHAEAN_YODH",
    "U_JG_MANICHAEAN_ZAYIN",
    "U_JG_MEEM",
    "U_JG_MIM",
    "U_JG_NOON",
    "U_JG_NO_JOINING_GROUP",
    "U_JG_NUN",
    "U_JG_NYA",
    "U_JG_PE",
    "U_JG_QAF",
    "U_JG_QAPH",
    "U_JG_REH",
    "U_JG_REVERSED_PE",
    "U_JG_ROHINGYA_YEH",
    "U_JG_SAD",
    "U_JG_SADHE",
    "U_JG_SEEN",
    "U_JG_SEMKATH",
    "U_JG_SHIN",
    "U_JG_STRAIGHT_WAW",
    "U_JG_SWASH_KAF",
    "U_JG_SYRIAC_WAW",
    "U_JG_TAH",
    "U_JG_TAW",
    "U_JG_TEH_MARBUTA",
    "U_JG_TEH_MARBUTA_GOAL",
    "U_JG_TETH",
    "U_JG_WAW",
    "U_JG_YEH",
    "U_JG_YEH_BARREE",
    "U_JG_YEH_WITH_TAIL",
    "U_JG_YUDH",
    "U_JG_YUDH_HE",
    "U_JG_ZAIN",
    "U_JG_ZHAIN",
    "U_JT_DUAL_JOINING",
    "U_JT_JOIN_CAUSING",
    "U_JT_LEFT_JOINING",
    "U_JT_NON_JOINING",
    "U_JT_RIGHT_JOINING",
    "U_JT_TRANSPARENT",
    "U_LB_ALPHABETIC",
    "U_LB_AMBIGUOUS",
    "U_LB_BREAK_AFTER",
    "U_LB_BREAK_BEFORE",
    "U_LB_BREAK_BOTH",
    "U_LB_BREAK_SYMBOLS",
    "U_LB_CARRIAGE_RETURN",
    "U_LB_CLOSE_PARENTHESIS",
    "U_LB_CLOSE_PUNCTUATION",
    "U_LB_COMBINING_MARK",
    "U_LB_COMPLEX_CONTEXT",
    "U_LB_CONDITIONAL_JAPANESE_STARTER",
    "U_LB_CONTINGENT_BREAK",
    "U_LB_EXCLAMATION",
    "U_LB_E_BASE",
    "U_LB_E_MODIFIER",
    "U_LB_GLUE",
    "U_LB_H2",
    "U_LB_H3",
    "U_LB_HEBREW_LETTER",
    "U_LB_HYPHEN",
    "U_LB_IDEOGRAPHIC",
    "U_LB_INFIX_NUMERIC",
    "U_LB_INSEPARABLE",
    "U_LB_INSEPERABLE",
    "U_LB_JL",
    "U_LB_JT",
    "U_LB_JV",
    "U_LB_LINE_FEED",
    "U_LB_MANDATORY_BREAK",
    "U_LB_NEXT_LINE",
    "U_LB_NONSTARTER",
    "U_LB_NUMERIC",
    "U_LB_OPEN_PUNCTUATION",
    "U_LB_POSTFIX_NUMERIC",
    "U_LB_PREFIX_NUMERIC",
    "U_LB_QUOTATION",
    "U_LB_REGIONAL_INDICATOR",
    "U_LB_SPACE",
    "U_LB_SURROGATE",
    "U_LB_UNKNOWN",
    "U_LB_WORD_JOINER",
    "U_LB_ZWJ",
    "U_LB_ZWSPACE",
    "U_LEFT_TO_RIGHT",
    "U_LEFT_TO_RIGHT_EMBEDDING",
    "U_LEFT_TO_RIGHT_ISOLATE",
    "U_LEFT_TO_RIGHT_OVERRIDE",
    "U_LETTER_NUMBER",
    "U_LIB_SUFFIX_C_NAME_STRING",
    "U_LINE_SEPARATOR",
    "U_LONG_PROPERTY_NAME",
    "U_LOWERCASE_LETTER",
    "U_MALFORMED_EXPONENTIAL_PATTERN",
    "U_MALFORMED_PRAGMA",
    "U_MALFORMED_RULE",
    "U_MALFORMED_SET",
    "U_MALFORMED_SYMBOL_REFERENCE",
    "U_MALFORMED_UNICODE_ESCAPE",
    "U_MALFORMED_VARIABLE_DEFINITION",
    "U_MALFORMED_VARIABLE_REFERENCE",
    "U_MATH_SYMBOL",
    "U_MAX_VERSION_LENGTH",
    "U_MAX_VERSION_STRING_LENGTH",
    "U_MEMORY_ALLOCATION_ERROR",
    "U_MESSAGE_PARSE_ERROR",
    "U_MILLIS_PER_DAY",
    "U_MILLIS_PER_HOUR",
    "U_MILLIS_PER_MINUTE",
    "U_MILLIS_PER_SECOND",
    "U_MISMATCHED_SEGMENT_DELIMITERS",
    "U_MISPLACED_ANCHOR_START",
    "U_MISPLACED_COMPOUND_FILTER",
    "U_MISPLACED_CURSOR_OFFSET",
    "U_MISPLACED_QUANTIFIER",
    "U_MISSING_OPERATOR",
    "U_MISSING_RESOURCE_ERROR",
    "U_MISSING_SEGMENT_CLOSE",
    "U_MODIFIER_LETTER",
    "U_MODIFIER_SYMBOL",
    "U_MULTIPLE_ANTE_CONTEXTS",
    "U_MULTIPLE_COMPOUND_FILTERS",
    "U_MULTIPLE_CURSORS",
    "U_MULTIPLE_DECIMAL_SEPARATORS",
    "U_MULTIPLE_DECIMAL_SEPERATORS",
    "U_MULTIPLE_EXPONENTIAL_SYMBOLS",
    "U_MULTIPLE_PAD_SPECIFIERS",
    "U_MULTIPLE_PERCENT_SYMBOLS",
    "U_MULTIPLE_PERMILL_SYMBOLS",
    "U_MULTIPLE_POST_CONTEXTS",
    "U_NON_SPACING_MARK",
    "U_NO_DEFAULT_INCLUDE_UTF_HEADERS",
    "U_NO_SPACE_AVAILABLE",
    "U_NO_WRITE_PERMISSION",
    "U_NT_DECIMAL",
    "U_NT_DIGIT",
    "U_NT_NONE",
    "U_NT_NUMERIC",
    "U_NUMBER_ARG_OUTOFBOUNDS_ERROR",
    "U_NUMBER_SKELETON_SYNTAX_ERROR",
    "U_OMIT_UNCHANGED_TEXT",
    "U_OTHER_LETTER",
    "U_OTHER_NEUTRAL",
    "U_OTHER_NUMBER",
    "U_OTHER_PUNCTUATION",
    "U_OTHER_SYMBOL",
    "U_OVERRIDE_CXX_ALLOCATION",
    "U_PARAGRAPH_SEPARATOR",
    "U_PARSE_CONTEXT_LEN",
    "U_PARSE_ERROR",
    "U_PARSE_ERROR_START",
    "U_PATTERN_SYNTAX_ERROR",
    "U_PF_AIX",
    "U_PF_ANDROID",
    "U_PF_BROWSER_NATIVE_CLIENT",
    "U_PF_BSD",
    "U_PF_CYGWIN",
    "U_PF_DARWIN",
    "U_PF_EMSCRIPTEN",
    "U_PF_FUCHSIA",
    "U_PF_HPUX",
    "U_PF_IPHONE",
    "U_PF_IRIX",
    "U_PF_LINUX",
    "U_PF_MINGW",
    "U_PF_OS390",
    "U_PF_OS400",
    "U_PF_QNX",
    "U_PF_SOLARIS",
    "U_PF_UNKNOWN",
    "U_PF_WINDOWS",
    "U_PLATFORM",
    "U_PLATFORM_HAS_WIN32_API",
    "U_PLATFORM_HAS_WINUWP_API",
    "U_PLATFORM_IMPLEMENTS_POSIX",
    "U_PLATFORM_IS_DARWIN_BASED",
    "U_PLATFORM_IS_LINUX_BASED",
    "U_PLATFORM_USES_ONLY_WIN32_API",
    "U_PLUGIN_CHANGED_LEVEL_WARNING",
    "U_PLUGIN_DIDNT_SET_LEVEL",
    "U_PLUGIN_ERROR_START",
    "U_PLUGIN_TOO_HIGH",
    "U_POP_DIRECTIONAL_FORMAT",
    "U_POP_DIRECTIONAL_ISOLATE",
    "U_PRIMARY_TOO_LONG_ERROR",
    "U_PRIVATE_USE_CHAR",
    "U_REGEX_BAD_ESCAPE_SEQUENCE",
    "U_REGEX_BAD_INTERVAL",
    "U_REGEX_ERROR_START",
    "U_REGEX_INTERNAL_ERROR",
    "U_REGEX_INVALID_BACK_REF",
    "U_REGEX_INVALID_CAPTURE_GROUP_NAME",
    "U_REGEX_INVALID_FLAG",
    "U_REGEX_INVALID_RANGE",
    "U_REGEX_INVALID_STATE",
    "U_REGEX_LOOK_BEHIND_LIMIT",
    "U_REGEX_MAX_LT_MIN",
    "U_REGEX_MISMATCHED_PAREN",
    "U_REGEX_MISSING_CLOSE_BRACKET",
    "U_REGEX_NUMBER_TOO_BIG",
    "U_REGEX_PATTERN_TOO_BIG",
    "U_REGEX_PROPERTY_SYNTAX",
    "U_REGEX_RULE_SYNTAX",
    "U_REGEX_SET_CONTAINS_STRING",
    "U_REGEX_STACK_OVERFLOW",
    "U_REGEX_STOPPED_BY_CALLER",
    "U_REGEX_TIME_OUT",
    "U_REGEX_UNIMPLEMENTED",
    "U_RESOURCE_TYPE_MISMATCH",
    "U_RIGHT_TO_LEFT",
    "U_RIGHT_TO_LEFT_ARABIC",
    "U_RIGHT_TO_LEFT_EMBEDDING",
    "U_RIGHT_TO_LEFT_ISOLATE",
    "U_RIGHT_TO_LEFT_OVERRIDE",
    "U_RULE_MASK_ERROR",
    "U_SAFECLONE_ALLOCATED_WARNING",
    "U_SB_ATERM",
    "U_SB_CLOSE",
    "U_SB_CR",
    "U_SB_EXTEND",
    "U_SB_FORMAT",
    "U_SB_LF",
    "U_SB_LOWER",
    "U_SB_NUMERIC",
    "U_SB_OLETTER",
    "U_SB_OTHER",
    "U_SB_SCONTINUE",
    "U_SB_SEP",
    "U_SB_SP",
    "U_SB_STERM",
    "U_SB_UPPER",
    "U_SEGMENT_SEPARATOR",
    "U_SENTINEL",
    "U_SHAPE_AGGREGATE_TASHKEEL",
    "U_SHAPE_AGGREGATE_TASHKEEL_MASK",
    "U_SHAPE_AGGREGATE_TASHKEEL_NOOP",
    "U_SHAPE_DIGITS_ALEN2AN_INIT_AL",
    "U_SHAPE_DIGITS_ALEN2AN_INIT_LR",
    "U_SHAPE_DIGITS_AN2EN",
    "U_SHAPE_DIGITS_EN2AN",
    "U_SHAPE_DIGITS_MASK",
    "U_SHAPE_DIGITS_NOOP",
    "U_SHAPE_DIGITS_RESERVED",
    "U_SHAPE_DIGIT_TYPE_AN",
    "U_SHAPE_DIGIT_TYPE_AN_EXTENDED",
    "U_SHAPE_DIGIT_TYPE_MASK",
    "U_SHAPE_DIGIT_TYPE_RESERVED",
    "U_SHAPE_LAMALEF_AUTO",
    "U_SHAPE_LAMALEF_BEGIN",
    "U_SHAPE_LAMALEF_END",
    "U_SHAPE_LAMALEF_MASK",
    "U_SHAPE_LAMALEF_NEAR",
    "U_SHAPE_LAMALEF_RESIZE",
    "U_SHAPE_LENGTH_FIXED_SPACES_AT_BEGINNING",
    "U_SHAPE_LENGTH_FIXED_SPACES_AT_END",
    "U_SHAPE_LENGTH_FIXED_SPACES_NEAR",
    "U_SHAPE_LENGTH_GROW_SHRINK",
    "U_SHAPE_LENGTH_MASK",
    "U_SHAPE_LETTERS_MASK",
    "U_SHAPE_LETTERS_NOOP",
    "U_SHAPE_LETTERS_SHAPE",
    "U_SHAPE_LETTERS_SHAPE_TASHKEEL_ISOLATED",
    "U_SHAPE_LETTERS_UNSHAPE",
    "U_SHAPE_PRESERVE_PRESENTATION",
    "U_SHAPE_PRESERVE_PRESENTATION_MASK",
    "U_SHAPE_PRESERVE_PRESENTATION_NOOP",
    "U_SHAPE_SEEN_MASK",
    "U_SHAPE_SEEN_TWOCELL_NEAR",
    "U_SHAPE_SPACES_RELATIVE_TO_TEXT_BEGIN_END",
    "U_SHAPE_SPACES_RELATIVE_TO_TEXT_MASK",
    "U_SHAPE_TAIL_NEW_UNICODE",
    "U_SHAPE_TAIL_TYPE_MASK",
    "U_SHAPE_TASHKEEL_BEGIN",
    "U_SHAPE_TASHKEEL_END",
    "U_SHAPE_TASHKEEL_MASK",
    "U_SHAPE_TASHKEEL_REPLACE_BY_TATWEEL",
    "U_SHAPE_TASHKEEL_RESIZE",
    "U_SHAPE_TEXT_DIRECTION_LOGICAL",
    "U_SHAPE_TEXT_DIRECTION_MASK",
    "U_SHAPE_TEXT_DIRECTION_VISUAL_LTR",
    "U_SHAPE_TEXT_DIRECTION_VISUAL_RTL",
    "U_SHAPE_YEHHAMZA_MASK",
    "U_SHAPE_YEHHAMZA_TWOCELL_NEAR",
    "U_SHORT_PROPERTY_NAME",
    "U_SHOW_CPLUSPLUS_API",
    "U_SIZEOF_UCHAR",
    "U_SIZEOF_WCHAR_T",
    "U_SORT_KEY_TOO_SHORT_WARNING",
    "U_SPACE_SEPARATOR",
    "U_START_PUNCTUATION",
    "U_STATE_OLD_WARNING",
    "U_STATE_TOO_OLD_ERROR",
    "U_STRINGPREP_CHECK_BIDI_ERROR",
    "U_STRINGPREP_PROHIBITED_ERROR",
    "U_STRINGPREP_UNASSIGNED_ERROR",
    "U_STRING_NOT_TERMINATED_WARNING",
    "U_SURROGATE",
    "U_TITLECASE_ADJUST_TO_CASED",
    "U_TITLECASE_LETTER",
    "U_TITLECASE_NO_BREAK_ADJUSTMENT",
    "U_TITLECASE_NO_LOWERCASE",
    "U_TITLECASE_SENTENCES",
    "U_TITLECASE_WHOLE_STRING",
    "U_TOO_MANY_ALIASES_ERROR",
    "U_TRAILING_BACKSLASH",
    "U_TRUNCATED_CHAR_FOUND",
    "U_UNASSIGNED",
    "U_UNCLOSED_SEGMENT",
    "U_UNDEFINED_KEYWORD",
    "U_UNDEFINED_SEGMENT_REFERENCE",
    "U_UNDEFINED_VARIABLE",
    "U_UNEXPECTED_TOKEN",
    "U_UNICODE_CHAR_NAME",
    "U_UNICODE_VERSION",
    "U_UNMATCHED_BRACES",
    "U_UNQUOTED_SPECIAL",
    "U_UNSUPPORTED_ATTRIBUTE",
    "U_UNSUPPORTED_ERROR",
    "U_UNSUPPORTED_ESCAPE_SEQUENCE",
    "U_UNSUPPORTED_PROPERTY",
    "U_UNTERMINATED_QUOTE",
    "U_UPPERCASE_LETTER",
    "U_USELESS_COLLATOR_ERROR",
    "U_USING_DEFAULT_WARNING",
    "U_USING_FALLBACK_WARNING",
    "U_USING_ICU_NAMESPACE",
    "U_VARIABLE_RANGE_EXHAUSTED",
    "U_VARIABLE_RANGE_OVERLAP",
    "U_VO_ROTATED",
    "U_VO_TRANSFORMED_ROTATED",
    "U_VO_TRANSFORMED_UPRIGHT",
    "U_VO_UPRIGHT",
    "U_WB_ALETTER",
    "U_WB_CR",
    "U_WB_DOUBLE_QUOTE",
    "U_WB_EXTEND",
    "U_WB_EXTENDNUMLET",
    "U_WB_E_BASE",
    "U_WB_E_BASE_GAZ",
    "U_WB_E_MODIFIER",
    "U_WB_FORMAT",
    "U_WB_GLUE_AFTER_ZWJ",
    "U_WB_HEBREW_LETTER",
    "U_WB_KATAKANA",
    "U_WB_LF",
    "U_WB_MIDLETTER",
    "U_WB_MIDNUM",
    "U_WB_MIDNUMLET",
    "U_WB_NEWLINE",
    "U_WB_NUMERIC",
    "U_WB_OTHER",
    "U_WB_REGIONAL_INDICATOR",
    "U_WB_SINGLE_QUOTE",
    "U_WB_WSEGSPACE",
    "U_WB_ZWJ",
    "U_WHITE_SPACE_NEUTRAL",
    "U_ZERO_ERROR",
    "VS_ALLOW_LATIN",
    "VerifyScripts",
    "WC_COMPOSITECHECK",
    "WC_DEFAULTCHAR",
    "WC_DISCARDNS",
    "WC_ERR_INVALID_CHARS",
    "WC_NO_BEST_FIT_CHARS",
    "WC_SEPCHARS",
    "WORDLIST_TYPE",
    "WORDLIST_TYPE_ADD",
    "WORDLIST_TYPE_AUTOCORRECT",
    "WORDLIST_TYPE_EXCLUDE",
    "WORDLIST_TYPE_IGNORE",
    "WideCharToMultiByte",
    "lstrcatA",
    "lstrcatW",
    "lstrcmpA",
    "lstrcmpW",
    "lstrcmpiA",
    "lstrcmpiW",
    "lstrcpyA",
    "lstrcpyW",
    "lstrcpynA",
    "lstrcpynW",
    "lstrlenA",
    "lstrlenW",
    "u_UCharsToChars",
    "u_austrcpy",
    "u_austrncpy",
    "u_catclose",
    "u_catgets",
    "u_catopen",
    "u_charAge",
    "u_charDigitValue",
    "u_charDirection",
    "u_charFromName",
    "u_charMirror",
    "u_charName",
    "u_charType",
    "u_charsToUChars",
    "u_cleanup",
    "u_countChar32",
    "u_digit",
    "u_enumCharNames",
    "u_enumCharTypes",
    "u_errorName",
    "u_foldCase",
    "u_forDigit",
    "u_formatMessage",
    "u_formatMessageWithError",
    "u_getBidiPairedBracket",
    "u_getBinaryPropertySet",
    "u_getCombiningClass",
    "u_getDataVersion",
    "u_getFC_NFKC_Closure",
    "u_getIntPropertyMap",
    "u_getIntPropertyMaxValue",
    "u_getIntPropertyMinValue",
    "u_getIntPropertyValue",
    "u_getNumericValue",
    "u_getPropertyEnum",
    "u_getPropertyName",
    "u_getPropertyValueEnum",
    "u_getPropertyValueName",
    "u_getUnicodeVersion",
    "u_getVersion",
    "u_hasBinaryProperty",
    "u_init",
    "u_isIDIgnorable",
    "u_isIDPart",
    "u_isIDStart",
    "u_isISOControl",
    "u_isJavaIDPart",
    "u_isJavaIDStart",
    "u_isJavaSpaceChar",
    "u_isMirrored",
    "u_isUAlphabetic",
    "u_isULowercase",
    "u_isUUppercase",
    "u_isUWhiteSpace",
    "u_isWhitespace",
    "u_isalnum",
    "u_isalpha",
    "u_isbase",
    "u_isblank",
    "u_iscntrl",
    "u_isdefined",
    "u_isdigit",
    "u_isgraph",
    "u_islower",
    "u_isprint",
    "u_ispunct",
    "u_isspace",
    "u_istitle",
    "u_isupper",
    "u_isxdigit",
    "u_memcasecmp",
    "u_memchr",
    "u_memchr32",
    "u_memcmp",
    "u_memcmpCodePointOrder",
    "u_memcpy",
    "u_memmove",
    "u_memrchr",
    "u_memrchr32",
    "u_memset",
    "u_parseMessage",
    "u_parseMessageWithError",
    "u_setMemoryFunctions",
    "u_shapeArabic",
    "u_strCaseCompare",
    "u_strCompare",
    "u_strCompareIter",
    "u_strFindFirst",
    "u_strFindLast",
    "u_strFoldCase",
    "u_strFromJavaModifiedUTF8WithSub",
    "u_strFromUTF32",
    "u_strFromUTF32WithSub",
    "u_strFromUTF8",
    "u_strFromUTF8Lenient",
    "u_strFromUTF8WithSub",
    "u_strFromWCS",
    "u_strHasMoreChar32Than",
    "u_strToJavaModifiedUTF8",
    "u_strToLower",
    "u_strToTitle",
    "u_strToUTF32",
    "u_strToUTF32WithSub",
    "u_strToUTF8",
    "u_strToUTF8WithSub",
    "u_strToUpper",
    "u_strToWCS",
    "u_strcasecmp",
    "u_strcat",
    "u_strchr",
    "u_strchr32",
    "u_strcmp",
    "u_strcmpCodePointOrder",
    "u_strcpy",
    "u_strcspn",
    "u_strlen",
    "u_strncasecmp",
    "u_strncat",
    "u_strncmp",
    "u_strncmpCodePointOrder",
    "u_strncpy",
    "u_strpbrk",
    "u_strrchr",
    "u_strrchr32",
    "u_strrstr",
    "u_strspn",
    "u_strstr",
    "u_strtok_r",
    "u_tolower",
    "u_totitle",
    "u_toupper",
    "u_uastrcpy",
    "u_uastrncpy",
    "u_unescape",
    "u_unescapeAt",
    "u_versionFromString",
    "u_versionFromUString",
    "u_versionToString",
    "u_vformatMessage",
    "u_vformatMessageWithError",
    "u_vparseMessage",
    "u_vparseMessageWithError",
    "ubidi_close",
    "ubidi_countParagraphs",
    "ubidi_countRuns",
    "ubidi_getBaseDirection",
    "ubidi_getClassCallback",
    "ubidi_getCustomizedClass",
    "ubidi_getDirection",
    "ubidi_getLength",
    "ubidi_getLevelAt",
    "ubidi_getLevels",
    "ubidi_getLogicalIndex",
    "ubidi_getLogicalMap",
    "ubidi_getLogicalRun",
    "ubidi_getParaLevel",
    "ubidi_getParagraph",
    "ubidi_getParagraphByIndex",
    "ubidi_getProcessedLength",
    "ubidi_getReorderingMode",
    "ubidi_getReorderingOptions",
    "ubidi_getResultLength",
    "ubidi_getText",
    "ubidi_getVisualIndex",
    "ubidi_getVisualMap",
    "ubidi_getVisualRun",
    "ubidi_invertMap",
    "ubidi_isInverse",
    "ubidi_isOrderParagraphsLTR",
    "ubidi_open",
    "ubidi_openSized",
    "ubidi_orderParagraphsLTR",
    "ubidi_reorderLogical",
    "ubidi_reorderVisual",
    "ubidi_setClassCallback",
    "ubidi_setContext",
    "ubidi_setInverse",
    "ubidi_setLine",
    "ubidi_setPara",
    "ubidi_setReorderingMode",
    "ubidi_setReorderingOptions",
    "ubidi_writeReordered",
    "ubidi_writeReverse",
    "ubiditransform_close",
    "ubiditransform_open",
    "ubiditransform_transform",
    "ublock_getCode",
    "ubrk_close",
    "ubrk_countAvailable",
    "ubrk_current",
    "ubrk_first",
    "ubrk_following",
    "ubrk_getAvailable",
    "ubrk_getBinaryRules",
    "ubrk_getLocaleByType",
    "ubrk_getRuleStatus",
    "ubrk_getRuleStatusVec",
    "ubrk_isBoundary",
    "ubrk_last",
    "ubrk_next",
    "ubrk_open",
    "ubrk_openBinaryRules",
    "ubrk_openRules",
    "ubrk_preceding",
    "ubrk_previous",
    "ubrk_refreshUText",
    "ubrk_safeClone",
    "ubrk_setText",
    "ubrk_setUText",
    "ucal_add",
    "ucal_clear",
    "ucal_clearField",
    "ucal_clone",
    "ucal_close",
    "ucal_countAvailable",
    "ucal_equivalentTo",
    "ucal_get",
    "ucal_getAttribute",
    "ucal_getAvailable",
    "ucal_getCanonicalTimeZoneID",
    "ucal_getDSTSavings",
    "ucal_getDayOfWeekType",
    "ucal_getDefaultTimeZone",
    "ucal_getFieldDifference",
    "ucal_getGregorianChange",
    "ucal_getHostTimeZone",
    "ucal_getKeywordValuesForLocale",
    "ucal_getLimit",
    "ucal_getLocaleByType",
    "ucal_getMillis",
    "ucal_getNow",
    "ucal_getTZDataVersion",
    "ucal_getTimeZoneDisplayName",
    "ucal_getTimeZoneID",
    "ucal_getTimeZoneIDForWindowsID",
    "ucal_getTimeZoneTransitionDate",
    "ucal_getType",
    "ucal_getWeekendTransition",
    "ucal_getWindowsTimeZoneID",
    "ucal_inDaylightTime",
    "ucal_isSet",
    "ucal_isWeekend",
    "ucal_open",
    "ucal_openCountryTimeZones",
    "ucal_openTimeZoneIDEnumeration",
    "ucal_openTimeZones",
    "ucal_roll",
    "ucal_set",
    "ucal_setAttribute",
    "ucal_setDate",
    "ucal_setDateTime",
    "ucal_setDefaultTimeZone",
    "ucal_setGregorianChange",
    "ucal_setMillis",
    "ucal_setTimeZone",
    "ucasemap_close",
    "ucasemap_getBreakIterator",
    "ucasemap_getLocale",
    "ucasemap_getOptions",
    "ucasemap_open",
    "ucasemap_setBreakIterator",
    "ucasemap_setLocale",
    "ucasemap_setOptions",
    "ucasemap_toTitle",
    "ucasemap_utf8FoldCase",
    "ucasemap_utf8ToLower",
    "ucasemap_utf8ToTitle",
    "ucasemap_utf8ToUpper",
    "ucfpos_close",
    "ucfpos_constrainCategory",
    "ucfpos_constrainField",
    "ucfpos_getCategory",
    "ucfpos_getField",
    "ucfpos_getIndexes",
    "ucfpos_getInt64IterationContext",
    "ucfpos_matchesField",
    "ucfpos_open",
    "ucfpos_reset",
    "ucfpos_setInt64IterationContext",
    "ucfpos_setState",
    "ucnv_cbFromUWriteBytes",
    "ucnv_cbFromUWriteSub",
    "ucnv_cbFromUWriteUChars",
    "ucnv_cbToUWriteSub",
    "ucnv_cbToUWriteUChars",
    "ucnv_close",
    "ucnv_compareNames",
    "ucnv_convert",
    "ucnv_convertEx",
    "ucnv_countAliases",
    "ucnv_countAvailable",
    "ucnv_countStandards",
    "ucnv_detectUnicodeSignature",
    "ucnv_fixFileSeparator",
    "ucnv_flushCache",
    "ucnv_fromAlgorithmic",
    "ucnv_fromUChars",
    "ucnv_fromUCountPending",
    "ucnv_fromUnicode",
    "ucnv_getAlias",
    "ucnv_getAliases",
    "ucnv_getAvailableName",
    "ucnv_getCCSID",
    "ucnv_getCanonicalName",
    "ucnv_getDefaultName",
    "ucnv_getDisplayName",
    "ucnv_getFromUCallBack",
    "ucnv_getInvalidChars",
    "ucnv_getInvalidUChars",
    "ucnv_getMaxCharSize",
    "ucnv_getMinCharSize",
    "ucnv_getName",
    "ucnv_getNextUChar",
    "ucnv_getPlatform",
    "ucnv_getStandard",
    "ucnv_getStandardName",
    "ucnv_getStarters",
    "ucnv_getSubstChars",
    "ucnv_getToUCallBack",
    "ucnv_getType",
    "ucnv_getUnicodeSet",
    "ucnv_isAmbiguous",
    "ucnv_isFixedWidth",
    "ucnv_open",
    "ucnv_openAllNames",
    "ucnv_openCCSID",
    "ucnv_openPackage",
    "ucnv_openStandardNames",
    "ucnv_openU",
    "ucnv_reset",
    "ucnv_resetFromUnicode",
    "ucnv_resetToUnicode",
    "ucnv_safeClone",
    "ucnv_setDefaultName",
    "ucnv_setFallback",
    "ucnv_setFromUCallBack",
    "ucnv_setSubstChars",
    "ucnv_setSubstString",
    "ucnv_setToUCallBack",
    "ucnv_toAlgorithmic",
    "ucnv_toUChars",
    "ucnv_toUCountPending",
    "ucnv_toUnicode",
    "ucnv_usesFallback",
    "ucnvsel_close",
    "ucnvsel_open",
    "ucnvsel_openFromSerialized",
    "ucnvsel_selectForString",
    "ucnvsel_selectForUTF8",
    "ucnvsel_serialize",
    "ucol_cloneBinary",
    "ucol_close",
    "ucol_closeElements",
    "ucol_countAvailable",
    "ucol_equal",
    "ucol_getAttribute",
    "ucol_getAvailable",
    "ucol_getBound",
    "ucol_getContractionsAndExpansions",
    "ucol_getDisplayName",
    "ucol_getEquivalentReorderCodes",
    "ucol_getFunctionalEquivalent",
    "ucol_getKeywordValues",
    "ucol_getKeywordValuesForLocale",
    "ucol_getKeywords",
    "ucol_getLocaleByType",
    "ucol_getMaxExpansion",
    "ucol_getMaxVariable",
    "ucol_getOffset",
    "ucol_getReorderCodes",
    "ucol_getRules",
    "ucol_getRulesEx",
    "ucol_getSortKey",
    "ucol_getStrength",
    "ucol_getTailoredSet",
    "ucol_getUCAVersion",
    "ucol_getVariableTop",
    "ucol_getVersion",
    "ucol_greater",
    "ucol_greaterOrEqual",
    "ucol_keyHashCode",
    "ucol_mergeSortkeys",
    "ucol_next",
    "ucol_nextSortKeyPart",
    "ucol_open",
    "ucol_openAvailableLocales",
    "ucol_openBinary",
    "ucol_openElements",
    "ucol_openRules",
    "ucol_previous",
    "ucol_primaryOrder",
    "ucol_reset",
    "ucol_safeClone",
    "ucol_secondaryOrder",
    "ucol_setAttribute",
    "ucol_setMaxVariable",
    "ucol_setOffset",
    "ucol_setReorderCodes",
    "ucol_setStrength",
    "ucol_setText",
    "ucol_strcoll",
    "ucol_strcollIter",
    "ucol_strcollUTF8",
    "ucol_tertiaryOrder",
    "ucpmap_get",
    "ucpmap_getRange",
    "ucptrie_close",
    "ucptrie_get",
    "ucptrie_getRange",
    "ucptrie_getType",
    "ucptrie_getValueWidth",
    "ucptrie_internalSmallIndex",
    "ucptrie_internalSmallU8Index",
    "ucptrie_internalU8PrevIndex",
    "ucptrie_openFromBinary",
    "ucptrie_toBinary",
    "ucsdet_close",
    "ucsdet_detect",
    "ucsdet_detectAll",
    "ucsdet_enableInputFilter",
    "ucsdet_getAllDetectableCharsets",
    "ucsdet_getConfidence",
    "ucsdet_getLanguage",
    "ucsdet_getName",
    "ucsdet_getUChars",
    "ucsdet_isInputFilterEnabled",
    "ucsdet_open",
    "ucsdet_setDeclaredEncoding",
    "ucsdet_setText",
    "ucurr_countCurrencies",
    "ucurr_forLocale",
    "ucurr_forLocaleAndDate",
    "ucurr_getDefaultFractionDigits",
    "ucurr_getDefaultFractionDigitsForUsage",
    "ucurr_getKeywordValuesForLocale",
    "ucurr_getName",
    "ucurr_getNumericCode",
    "ucurr_getPluralName",
    "ucurr_getRoundingIncrement",
    "ucurr_getRoundingIncrementForUsage",
    "ucurr_isAvailable",
    "ucurr_openISOCurrencies",
    "ucurr_register",
    "ucurr_unregister",
    "udat_adoptNumberFormat",
    "udat_adoptNumberFormatForFields",
    "udat_applyPattern",
    "udat_clone",
    "udat_close",
    "udat_countAvailable",
    "udat_countSymbols",
    "udat_format",
    "udat_formatCalendar",
    "udat_formatCalendarForFields",
    "udat_formatForFields",
    "udat_get2DigitYearStart",
    "udat_getAvailable",
    "udat_getBooleanAttribute",
    "udat_getCalendar",
    "udat_getContext",
    "udat_getLocaleByType",
    "udat_getNumberFormat",
    "udat_getNumberFormatForField",
    "udat_getSymbols",
    "udat_isLenient",
    "udat_open",
    "udat_parse",
    "udat_parseCalendar",
    "udat_set2DigitYearStart",
    "udat_setBooleanAttribute",
    "udat_setCalendar",
    "udat_setContext",
    "udat_setLenient",
    "udat_setNumberFormat",
    "udat_setSymbols",
    "udat_toCalendarDateField",
    "udat_toPattern",
    "udatpg_addPattern",
    "udatpg_clone",
    "udatpg_close",
    "udatpg_getAppendItemFormat",
    "udatpg_getAppendItemName",
    "udatpg_getBaseSkeleton",
    "udatpg_getBestPattern",
    "udatpg_getBestPatternWithOptions",
    "udatpg_getDateTimeFormat",
    "udatpg_getDecimal",
    "udatpg_getFieldDisplayName",
    "udatpg_getPatternForSkeleton",
    "udatpg_getSkeleton",
    "udatpg_open",
    "udatpg_openBaseSkeletons",
    "udatpg_openEmpty",
    "udatpg_openSkeletons",
    "udatpg_replaceFieldTypes",
    "udatpg_replaceFieldTypesWithOptions",
    "udatpg_setAppendItemFormat",
    "udatpg_setAppendItemName",
    "udatpg_setDateTimeFormat",
    "udatpg_setDecimal",
    "udtitvfmt_close",
    "udtitvfmt_closeResult",
    "udtitvfmt_format",
    "udtitvfmt_open",
    "udtitvfmt_openResult",
    "udtitvfmt_resultAsValue",
    "uenum_close",
    "uenum_count",
    "uenum_next",
    "uenum_openCharStringsEnumeration",
    "uenum_openUCharStringsEnumeration",
    "uenum_reset",
    "uenum_unext",
    "ufieldpositer_close",
    "ufieldpositer_next",
    "ufieldpositer_open",
    "ufmt_close",
    "ufmt_getArrayItemByIndex",
    "ufmt_getArrayLength",
    "ufmt_getDate",
    "ufmt_getDecNumChars",
    "ufmt_getDouble",
    "ufmt_getInt64",
    "ufmt_getLong",
    "ufmt_getObject",
    "ufmt_getType",
    "ufmt_getUChars",
    "ufmt_isNumeric",
    "ufmt_open",
    "ufmtval_getString",
    "ufmtval_nextPosition",
    "ugender_getInstance",
    "ugender_getListGender",
    "uidna_close",
    "uidna_labelToASCII",
    "uidna_labelToASCII_UTF8",
    "uidna_labelToUnicode",
    "uidna_labelToUnicodeUTF8",
    "uidna_nameToASCII",
    "uidna_nameToASCII_UTF8",
    "uidna_nameToUnicode",
    "uidna_nameToUnicodeUTF8",
    "uidna_openUTS46",
    "uiter_current32",
    "uiter_getState",
    "uiter_next32",
    "uiter_previous32",
    "uiter_setState",
    "uiter_setString",
    "uiter_setUTF16BE",
    "uiter_setUTF8",
    "uldn_close",
    "uldn_getContext",
    "uldn_getDialectHandling",
    "uldn_getLocale",
    "uldn_keyDisplayName",
    "uldn_keyValueDisplayName",
    "uldn_languageDisplayName",
    "uldn_localeDisplayName",
    "uldn_open",
    "uldn_openForContext",
    "uldn_regionDisplayName",
    "uldn_scriptCodeDisplayName",
    "uldn_scriptDisplayName",
    "uldn_variantDisplayName",
    "ulistfmt_close",
    "ulistfmt_closeResult",
    "ulistfmt_format",
    "ulistfmt_formatStringsToResult",
    "ulistfmt_open",
    "ulistfmt_openForType",
    "ulistfmt_openResult",
    "ulistfmt_resultAsValue",
    "uloc_acceptLanguage",
    "uloc_acceptLanguageFromHTTP",
    "uloc_addLikelySubtags",
    "uloc_canonicalize",
    "uloc_countAvailable",
    "uloc_forLanguageTag",
    "uloc_getAvailable",
    "uloc_getBaseName",
    "uloc_getCharacterOrientation",
    "uloc_getCountry",
    "uloc_getDefault",
    "uloc_getDisplayCountry",
    "uloc_getDisplayKeyword",
    "uloc_getDisplayKeywordValue",
    "uloc_getDisplayLanguage",
    "uloc_getDisplayName",
    "uloc_getDisplayScript",
    "uloc_getDisplayVariant",
    "uloc_getISO3Country",
    "uloc_getISO3Language",
    "uloc_getISOCountries",
    "uloc_getISOLanguages",
    "uloc_getKeywordValue",
    "uloc_getLCID",
    "uloc_getLanguage",
    "uloc_getLineOrientation",
    "uloc_getLocaleForLCID",
    "uloc_getName",
    "uloc_getParent",
    "uloc_getScript",
    "uloc_getVariant",
    "uloc_isRightToLeft",
    "uloc_minimizeSubtags",
    "uloc_openAvailableByType",
    "uloc_openKeywords",
    "uloc_setDefault",
    "uloc_setKeywordValue",
    "uloc_toLanguageTag",
    "uloc_toLegacyKey",
    "uloc_toLegacyType",
    "uloc_toUnicodeLocaleKey",
    "uloc_toUnicodeLocaleType",
    "ulocdata_close",
    "ulocdata_getCLDRVersion",
    "ulocdata_getDelimiter",
    "ulocdata_getExemplarSet",
    "ulocdata_getLocaleDisplayPattern",
    "ulocdata_getLocaleSeparator",
    "ulocdata_getMeasurementSystem",
    "ulocdata_getNoSubstitute",
    "ulocdata_getPaperSize",
    "ulocdata_open",
    "ulocdata_setNoSubstitute",
    "umsg_applyPattern",
    "umsg_autoQuoteApostrophe",
    "umsg_clone",
    "umsg_close",
    "umsg_format",
    "umsg_getLocale",
    "umsg_open",
    "umsg_parse",
    "umsg_setLocale",
    "umsg_toPattern",
    "umsg_vformat",
    "umsg_vparse",
    "umutablecptrie_buildImmutable",
    "umutablecptrie_clone",
    "umutablecptrie_close",
    "umutablecptrie_fromUCPMap",
    "umutablecptrie_fromUCPTrie",
    "umutablecptrie_get",
    "umutablecptrie_getRange",
    "umutablecptrie_open",
    "umutablecptrie_set",
    "umutablecptrie_setRange",
    "unorm2_append",
    "unorm2_close",
    "unorm2_composePair",
    "unorm2_getCombiningClass",
    "unorm2_getDecomposition",
    "unorm2_getInstance",
    "unorm2_getNFCInstance",
    "unorm2_getNFDInstance",
    "unorm2_getNFKCCasefoldInstance",
    "unorm2_getNFKCInstance",
    "unorm2_getNFKDInstance",
    "unorm2_getRawDecomposition",
    "unorm2_hasBoundaryAfter",
    "unorm2_hasBoundaryBefore",
    "unorm2_isInert",
    "unorm2_isNormalized",
    "unorm2_normalize",
    "unorm2_normalizeSecondAndAppend",
    "unorm2_openFiltered",
    "unorm2_quickCheck",
    "unorm2_spanQuickCheckYes",
    "unorm_compare",
    "unum_applyPattern",
    "unum_clone",
    "unum_close",
    "unum_countAvailable",
    "unum_format",
    "unum_formatDecimal",
    "unum_formatDouble",
    "unum_formatDoubleCurrency",
    "unum_formatDoubleForFields",
    "unum_formatInt64",
    "unum_formatUFormattable",
    "unum_getAttribute",
    "unum_getAvailable",
    "unum_getContext",
    "unum_getDoubleAttribute",
    "unum_getLocaleByType",
    "unum_getSymbol",
    "unum_getTextAttribute",
    "unum_open",
    "unum_parse",
    "unum_parseDecimal",
    "unum_parseDouble",
    "unum_parseDoubleCurrency",
    "unum_parseInt64",
    "unum_parseToUFormattable",
    "unum_setAttribute",
    "unum_setContext",
    "unum_setDoubleAttribute",
    "unum_setSymbol",
    "unum_setTextAttribute",
    "unum_toPattern",
    "unumf_close",
    "unumf_closeResult",
    "unumf_formatDecimal",
    "unumf_formatDouble",
    "unumf_formatInt",
    "unumf_openForSkeletonAndLocale",
    "unumf_openForSkeletonAndLocaleWithError",
    "unumf_openResult",
    "unumf_resultAsValue",
    "unumf_resultGetAllFieldPositions",
    "unumf_resultNextFieldPosition",
    "unumf_resultToString",
    "unumsys_close",
    "unumsys_getDescription",
    "unumsys_getName",
    "unumsys_getRadix",
    "unumsys_isAlgorithmic",
    "unumsys_open",
    "unumsys_openAvailableNames",
    "unumsys_openByName",
    "uplrules_close",
    "uplrules_getKeywords",
    "uplrules_open",
    "uplrules_openForType",
    "uplrules_select",
    "uplrules_selectFormatted",
    "uregex_appendReplacement",
    "uregex_appendReplacementUText",
    "uregex_appendTail",
    "uregex_appendTailUText",
    "uregex_clone",
    "uregex_close",
    "uregex_end",
    "uregex_end64",
    "uregex_find",
    "uregex_find64",
    "uregex_findNext",
    "uregex_flags",
    "uregex_getFindProgressCallback",
    "uregex_getMatchCallback",
    "uregex_getStackLimit",
    "uregex_getText",
    "uregex_getTimeLimit",
    "uregex_getUText",
    "uregex_group",
    "uregex_groupCount",
    "uregex_groupNumberFromCName",
    "uregex_groupNumberFromName",
    "uregex_groupUText",
    "uregex_hasAnchoringBounds",
    "uregex_hasTransparentBounds",
    "uregex_hitEnd",
    "uregex_lookingAt",
    "uregex_lookingAt64",
    "uregex_matches",
    "uregex_matches64",
    "uregex_open",
    "uregex_openC",
    "uregex_openUText",
    "uregex_pattern",
    "uregex_patternUText",
    "uregex_refreshUText",
    "uregex_regionEnd",
    "uregex_regionEnd64",
    "uregex_regionStart",
    "uregex_regionStart64",
    "uregex_replaceAll",
    "uregex_replaceAllUText",
    "uregex_replaceFirst",
    "uregex_replaceFirstUText",
    "uregex_requireEnd",
    "uregex_reset",
    "uregex_reset64",
    "uregex_setFindProgressCallback",
    "uregex_setMatchCallback",
    "uregex_setRegion",
    "uregex_setRegion64",
    "uregex_setRegionAndStart",
    "uregex_setStackLimit",
    "uregex_setText",
    "uregex_setTimeLimit",
    "uregex_setUText",
    "uregex_split",
    "uregex_splitUText",
    "uregex_start",
    "uregex_start64",
    "uregex_useAnchoringBounds",
    "uregex_useTransparentBounds",
    "uregion_areEqual",
    "uregion_contains",
    "uregion_getAvailable",
    "uregion_getContainedRegions",
    "uregion_getContainedRegionsOfType",
    "uregion_getContainingRegion",
    "uregion_getContainingRegionOfType",
    "uregion_getNumericCode",
    "uregion_getPreferredValues",
    "uregion_getRegionCode",
    "uregion_getRegionFromCode",
    "uregion_getRegionFromNumericCode",
    "uregion_getType",
    "ureldatefmt_close",
    "ureldatefmt_closeResult",
    "ureldatefmt_combineDateAndTime",
    "ureldatefmt_format",
    "ureldatefmt_formatNumeric",
    "ureldatefmt_formatNumericToResult",
    "ureldatefmt_formatToResult",
    "ureldatefmt_open",
    "ureldatefmt_openResult",
    "ureldatefmt_resultAsValue",
    "ures_close",
    "ures_getBinary",
    "ures_getByIndex",
    "ures_getByKey",
    "ures_getInt",
    "ures_getIntVector",
    "ures_getKey",
    "ures_getLocaleByType",
    "ures_getNextResource",
    "ures_getNextString",
    "ures_getSize",
    "ures_getString",
    "ures_getStringByIndex",
    "ures_getStringByKey",
    "ures_getType",
    "ures_getUInt",
    "ures_getUTF8String",
    "ures_getUTF8StringByIndex",
    "ures_getUTF8StringByKey",
    "ures_getVersion",
    "ures_hasNext",
    "ures_open",
    "ures_openAvailableLocales",
    "ures_openDirect",
    "ures_openU",
    "ures_resetIterator",
    "uscript_breaksBetweenLetters",
    "uscript_getCode",
    "uscript_getName",
    "uscript_getSampleString",
    "uscript_getScript",
    "uscript_getScriptExtensions",
    "uscript_getShortName",
    "uscript_getUsage",
    "uscript_hasScript",
    "uscript_isCased",
    "uscript_isRightToLeft",
    "usearch_close",
    "usearch_first",
    "usearch_following",
    "usearch_getAttribute",
    "usearch_getBreakIterator",
    "usearch_getCollator",
    "usearch_getMatchedLength",
    "usearch_getMatchedStart",
    "usearch_getMatchedText",
    "usearch_getOffset",
    "usearch_getPattern",
    "usearch_getText",
    "usearch_last",
    "usearch_next",
    "usearch_open",
    "usearch_openFromCollator",
    "usearch_preceding",
    "usearch_previous",
    "usearch_reset",
    "usearch_setAttribute",
    "usearch_setBreakIterator",
    "usearch_setCollator",
    "usearch_setOffset",
    "usearch_setPattern",
    "usearch_setText",
    "uset_add",
    "uset_addAll",
    "uset_addAllCodePoints",
    "uset_addRange",
    "uset_addString",
    "uset_applyIntPropertyValue",
    "uset_applyPattern",
    "uset_applyPropertyAlias",
    "uset_charAt",
    "uset_clear",
    "uset_clone",
    "uset_cloneAsThawed",
    "uset_close",
    "uset_closeOver",
    "uset_compact",
    "uset_complement",
    "uset_complementAll",
    "uset_contains",
    "uset_containsAll",
    "uset_containsAllCodePoints",
    "uset_containsNone",
    "uset_containsRange",
    "uset_containsSome",
    "uset_containsString",
    "uset_equals",
    "uset_freeze",
    "uset_getItem",
    "uset_getItemCount",
    "uset_getSerializedRange",
    "uset_getSerializedRangeCount",
    "uset_getSerializedSet",
    "uset_indexOf",
    "uset_isEmpty",
    "uset_isFrozen",
    "uset_open",
    "uset_openEmpty",
    "uset_openPattern",
    "uset_openPatternOptions",
    "uset_remove",
    "uset_removeAll",
    "uset_removeAllStrings",
    "uset_removeRange",
    "uset_removeString",
    "uset_resemblesPattern",
    "uset_retain",
    "uset_retainAll",
    "uset_serialize",
    "uset_serializedContains",
    "uset_set",
    "uset_setSerializedToOne",
    "uset_size",
    "uset_span",
    "uset_spanBack",
    "uset_spanBackUTF8",
    "uset_spanUTF8",
    "uset_toPattern",
    "uspoof_areConfusable",
    "uspoof_areConfusableUTF8",
    "uspoof_check",
    "uspoof_check2",
    "uspoof_check2UTF8",
    "uspoof_checkUTF8",
    "uspoof_clone",
    "uspoof_close",
    "uspoof_closeCheckResult",
    "uspoof_getAllowedChars",
    "uspoof_getAllowedLocales",
    "uspoof_getCheckResultChecks",
    "uspoof_getCheckResultNumerics",
    "uspoof_getCheckResultRestrictionLevel",
    "uspoof_getChecks",
    "uspoof_getInclusionSet",
    "uspoof_getRecommendedSet",
    "uspoof_getRestrictionLevel",
    "uspoof_getSkeleton",
    "uspoof_getSkeletonUTF8",
    "uspoof_open",
    "uspoof_openCheckResult",
    "uspoof_openFromSerialized",
    "uspoof_openFromSource",
    "uspoof_serialize",
    "uspoof_setAllowedChars",
    "uspoof_setAllowedLocales",
    "uspoof_setChecks",
    "uspoof_setRestrictionLevel",
    "usprep_close",
    "usprep_open",
    "usprep_openByType",
    "usprep_prepare",
    "utext_char32At",
    "utext_clone",
    "utext_close",
    "utext_copy",
    "utext_current32",
    "utext_equals",
    "utext_extract",
    "utext_freeze",
    "utext_getNativeIndex",
    "utext_getPreviousNativeIndex",
    "utext_hasMetaData",
    "utext_isLengthExpensive",
    "utext_isWritable",
    "utext_moveIndex32",
    "utext_nativeLength",
    "utext_next32",
    "utext_next32From",
    "utext_openUChars",
    "utext_openUTF8",
    "utext_previous32",
    "utext_previous32From",
    "utext_replace",
    "utext_setNativeIndex",
    "utext_setup",
    "utf8_appendCharSafeBody",
    "utf8_back1SafeBody",
    "utf8_nextCharSafeBody",
    "utf8_prevCharSafeBody",
    "utmscale_fromInt64",
    "utmscale_getTimeScaleValue",
    "utmscale_toInt64",
    "utrace_format",
    "utrace_functionName",
    "utrace_getFunctions",
    "utrace_getLevel",
    "utrace_setFunctions",
    "utrace_setLevel",
    "utrace_vformat",
    "utrans_clone",
    "utrans_close",
    "utrans_countAvailableIDs",
    "utrans_getSourceSet",
    "utrans_getUnicodeID",
    "utrans_openIDs",
    "utrans_openInverse",
    "utrans_openU",
    "utrans_register",
    "utrans_setFilter",
    "utrans_toRules",
    "utrans_trans",
    "utrans_transIncremental",
    "utrans_transIncrementalUChars",
    "utrans_transUChars",
    "utrans_unregisterID",
]
